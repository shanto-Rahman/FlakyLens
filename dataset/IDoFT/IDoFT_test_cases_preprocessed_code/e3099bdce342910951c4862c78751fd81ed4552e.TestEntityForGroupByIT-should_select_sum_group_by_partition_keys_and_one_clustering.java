@Test public void should_select_sum_group_by_partition_keys_and_one_clustering() throws Exception {
assertThat(typedMaps).hasSize(6);
if (row1.<UUID>getTyped("uuID").equals(new UUID(1L,0L))) {
assertThat(row1.<Integer>getTyped("clust1")).isEqualTo(1);
assertThat(row1.<Integer>getTyped("sum_val")).isEqualTo(3);
assertThat(row2.<Integer>getTyped("clust1")).isEqualTo(2);
assertThat(row2.<Integer>getTyped("sum_val")).isEqualTo(2);
assertThat(row3.<Integer>getTyped("clust1")).isEqualTo(3);
assertThat(row3.<Integer>getTyped("sum_val")).isEqualTo(1);
assertThat(row4.<Integer>getTyped("clust1")).isEqualTo(1);
assertThat(row4.<Integer>getTyped("sum_val")).isEqualTo(2);
assertThat(row5.<Integer>getTyped("clust1")).isEqualTo(2);
assertThat(row5.<Integer>getTyped("sum_val")).isEqualTo(2);
assertThat(row6.<Integer>getTyped("clust1")).isEqualTo(3);
assertThat(row6.<Integer>getTyped("sum_val")).isEqualTo(1);
assertThat(row1.<Integer>getTyped("clust1")).isEqualTo(1);
assertThat(row1.<Integer>getTyped("sum_val")).isEqualTo(2);
assertThat(row2.<Integer>getTyped("clust1")).isEqualTo(2);
assertThat(row2.<Integer>getTyped("sum_val")).isEqualTo(2);
assertThat(row3.<Integer>getTyped("clust1")).isEqualTo(3);
assertThat(row3.<Integer>getTyped("sum_val")).isEqualTo(1);
assertThat(row4.<Integer>getTyped("clust1")).isEqualTo(1);
assertThat(row4.<Integer>getTyped("sum_val")).isEqualTo(3);
assertThat(row5.<Integer>getTyped("clust1")).isEqualTo(2);
assertThat(row5.<Integer>getTyped("sum_val")).isEqualTo(2);
assertThat(row6.<Integer>getTyped("clust1")).isEqualTo(3);
assertThat(row6.<Integer>getTyped("sum_val")).isEqualTo(1);
}
}