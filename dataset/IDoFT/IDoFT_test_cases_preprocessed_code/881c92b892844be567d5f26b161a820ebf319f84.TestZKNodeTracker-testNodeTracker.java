@Test public void testNodeTracker() throws Exception {
final String node=ZNodePaths.joinZNode(zk.getZNodePaths().baseZNode,Long.toString(ThreadLocalRandom.current().nextLong()));
assertNull(localTracker.getData(false));
thread.start();
assertFalse(thread.hasData);
assertEquals(0,zkListener.createdLock.availablePermits());
zkListener.waitForCreation();//IT
thread.join();
assertNotNull(localTracker.getData(false));
assertNotNull(localTracker.blockUntilAvailable());
assertTrue(Bytes.equals(localTracker.getData(false),dataOne));
assertTrue(thread.hasData);
assertTrue(Bytes.equals(thread.tracker.getData(false),dataOne));
assertNotNull(secondTracker.getData(false));
assertNotNull(secondTracker.blockUntilAvailable());
assertTrue(Bytes.equals(secondTracker.getData(false),dataOne));
zkListener.waitForDeletion();//IT
thread.start();
assertFalse(thread.hasData);
assertNull(secondTracker.getData(false));
assertNull(localTracker.getData(false));
zkListener.waitForCreation();//IT
thread.join();
assertNotNull(localTracker.getData(false));
assertNotNull(localTracker.blockUntilAvailable());
assertTrue(Bytes.equals(localTracker.getData(false),dataTwo));
assertNotNull(secondTracker.getData(false));
assertNotNull(secondTracker.blockUntilAvailable());
assertTrue(Bytes.equals(secondTracker.getData(false),dataTwo));
assertTrue(thread.hasData);
assertTrue(Bytes.equals(thread.tracker.getData(false),dataTwo));
zkListener.waitForDataChange();//IT
assertNotNull(localTracker.getData(false));
assertNotNull(localTracker.blockUntilAvailable());
assertTrue(Bytes.equals(localTracker.getData(false),dataOne));
assertNotNull(secondTracker.getData(false));
assertNotNull(secondTracker.blockUntilAvailable());
assertTrue(Bytes.equals(secondTracker.getData(false),dataOne));
assertTrue(thread.hasData);
assertTrue(Bytes.equals(thread.tracker.getData(false),dataOne));
}