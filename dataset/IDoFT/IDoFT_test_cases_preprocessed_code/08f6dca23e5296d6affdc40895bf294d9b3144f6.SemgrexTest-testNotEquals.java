/** 
 * In this test, the graph should find matches with pairs of nodes which are different from each other.  Since "muffins" only has one dependent, there should not be any matches with "muffins" as the head, for example.
 */
public void testNotEquals(){
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("Bill",matcher.getNode("a").toString());
assertEquals("muffins",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("Bill",matcher.getNode("a").toString());
assertEquals("blueberry",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("muffins",matcher.getNode("a").toString());
assertEquals("Bill",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("muffins",matcher.getNode("a").toString());
assertEquals("blueberry",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("blueberry",matcher.getNode("a").toString());
assertEquals("Bill",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("blueberry",matcher.getNode("a").toString());
assertEquals("muffins",matcher.getNode("b").toString());
assertFalse(matcher.find());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("Bill",matcher.getNode("a").toString());
assertEquals("muffins",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("Bill",matcher.getNode("a").toString());
assertEquals("blueberry",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("muffins",matcher.getNode("a").toString());
assertEquals("Bill",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("muffins",matcher.getNode("a").toString());
assertEquals("blueberry",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("blueberry",matcher.getNode("a").toString());
assertEquals("Bill",matcher.getNode("b").toString());
assertTrue(matcher.find());
assertEquals(2,matcher.getNodeNames().size());
assertEquals("ate",matcher.getMatch().toString());
assertEquals("blueberry",matcher.getNode("a").toString());
assertEquals("muffins",matcher.getNode("b").toString());
assertFalse(matcher.find());
}