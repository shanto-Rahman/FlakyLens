/** 
 * This test triggers two checkpoints and then sends a decline message from one of the tasks for the first checkpoint. This should discard the first checkpoint while not triggering a new checkpoint because a later checkpoint is already in progress.
 */
@Test public void testTriggerAndDeclineCheckpointComplex(){
assertEquals(0,coord.getNumberOfPendingCheckpoints());
assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
assertEquals(0,manuallyTriggeredScheduledExecutor.getScheduledTasks().size());
assertFalse(checkpointFuture1.isCompletedExceptionally());
assertFalse(checkpointFuture2.isCompletedExceptionally());
assertEquals(2,coord.getNumberOfPendingCheckpoints());
assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
assertEquals(2,manuallyTriggeredScheduledExecutor.getScheduledTasks().size());
assertNotNull(checkpoint1);
assertEquals(checkpoint1Id,checkpoint1.getCheckpointId());
assertEquals(timestamp,checkpoint1.getCheckpointTimestamp());
assertEquals(jid,checkpoint1.getJobId());
assertEquals(2,checkpoint1.getNumberOfNonAcknowledgedTasks());
assertEquals(0,checkpoint1.getNumberOfAcknowledgedTasks());
assertEquals(0,checkpoint1.getOperatorStates().size());
assertFalse(checkpoint1.isDiscarded());
assertFalse(checkpoint1.areTasksFullyAcknowledged());
assertNotNull(checkpoint2);
assertEquals(checkpoint2Id,checkpoint2.getCheckpointId());
assertEquals(timestamp + 2,checkpoint2.getCheckpointTimestamp());
assertEquals(jid,checkpoint2.getJobId());
assertEquals(2,checkpoint2.getNumberOfNonAcknowledgedTasks());
assertEquals(0,checkpoint2.getNumberOfAcknowledgedTasks());
assertEquals(0,checkpoint2.getOperatorStates().size());
assertFalse(checkpoint2.isDiscarded());
assertFalse(checkpoint2.areTasksFullyAcknowledged());
assertTrue(checkpoint1.isDiscarded());
assertEquals(1,coord.getNumberOfPendingCheckpoints());
assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
assertEquals(1,manuallyTriggeredScheduledExecutor.getScheduledTasks().size());
assertEquals(checkpoint2Id,checkpointIdNew);
assertNotNull(checkpointNew);
assertEquals(checkpointIdNew,checkpointNew.getCheckpointId());
assertEquals(jid,checkpointNew.getJobId());
assertEquals(2,checkpointNew.getNumberOfNonAcknowledgedTasks());
assertEquals(0,checkpointNew.getNumberOfAcknowledgedTasks());
assertEquals(0,checkpointNew.getOperatorStates().size());
assertFalse(checkpointNew.isDiscarded());
assertFalse(checkpointNew.areTasksFullyAcknowledged());
assertTrue(checkpoint1.isDiscarded());
fail(e.getMessage());
}