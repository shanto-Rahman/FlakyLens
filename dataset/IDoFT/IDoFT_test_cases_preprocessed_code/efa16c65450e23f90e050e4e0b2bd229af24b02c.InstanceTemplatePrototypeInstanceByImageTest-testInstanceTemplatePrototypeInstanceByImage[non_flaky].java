@Test public void testInstanceTemplatePrototypeInstanceByImage() throws Throwable {
assertEquals(keyIdentityModel.id(),"a6b1a881-2ce8-41a3-80fc-36316a73f803");
assertEquals(securityGroupIdentityModel.id(),"be5df5ca-12a0-494b-907e-aa6ec2bfa271");
assertEquals(subnetIdentityModel.id(),"7ec86020-1c6e-4889-b3f0-a15f2e50f87e");
assertEquals(networkInterfacePrototypeModel.allowIpSpoofing(),Boolean.valueOf(true));
assertEquals(networkInterfacePrototypeModel.name(),"my-network-interface");
assertEquals(networkInterfacePrototypeModel.primaryIpv4Address(),"10.0.0.5");
assertEquals(networkInterfacePrototypeModel.securityGroups(),new java.util.ArrayList<SecurityGroupIdentity>(java.util.Arrays.asList(securityGroupIdentityModel)));
assertEquals(networkInterfacePrototypeModel.subnet(),subnetIdentityModel);
assertEquals(instancePlacementTargetPrototypeModel.id(),"1e09281b-f177-46fb-baf1-bc152b2e391a");
assertEquals(instanceProfileIdentityModel.name(),"cc1-16x32");
assertEquals(resourceGroupIdentityModel.id(),"fee82deba12e4c0fb69c3b09d1f12345");
assertEquals(volumeAttachmentVolumePrototypeInstanceContextModel.id(),"1a6b7274-678d-4dfb-8981-c71dd9d4daa5");
assertEquals(volumeAttachmentPrototypeInstanceContextModel.deleteVolumeOnInstanceDelete(),Boolean.valueOf(true));
assertEquals(volumeAttachmentPrototypeInstanceContextModel.name(),"my-volume-attachment");
assertEquals(volumeAttachmentPrototypeInstanceContextModel.volume(),volumeAttachmentVolumePrototypeInstanceContextModel);
assertEquals(vpcIdentityModel.id(),"4727d842-f94f-4a2d-824a-9bc9b02c523b");
assertEquals(encryptionKeyIdentityModel.crn(),"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179");
assertEquals(volumeProfileIdentityModel.name(),"general-purpose");
assertEquals(volumePrototypeInstanceByImageContextModel.capacity(),Long.valueOf("26"));
assertEquals(volumePrototypeInstanceByImageContextModel.encryptionKey(),encryptionKeyIdentityModel);
assertEquals(volumePrototypeInstanceByImageContextModel.iops(),Long.valueOf("10000"));
assertEquals(volumePrototypeInstanceByImageContextModel.name(),"my-volume");
assertEquals(volumePrototypeInstanceByImageContextModel.profile(),volumeProfileIdentityModel);
assertEquals(volumeAttachmentPrototypeInstanceByImageContextModel.deleteVolumeOnInstanceDelete(),Boolean.valueOf(true));
assertEquals(volumeAttachmentPrototypeInstanceByImageContextModel.name(),"my-volume-attachment");
assertEquals(volumeAttachmentPrototypeInstanceByImageContextModel.volume(),volumePrototypeInstanceByImageContextModel);
assertEquals(imageIdentityModel.id(),"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8");
assertEquals(zoneIdentityModel.name(),"us-south-1");
assertEquals(instanceTemplatePrototypeInstanceByImageModel.keys(),new java.util.ArrayList<KeyIdentity>(java.util.Arrays.asList(keyIdentityModel)));
assertEquals(instanceTemplatePrototypeInstanceByImageModel.name(),"my-instance");
assertEquals(instanceTemplatePrototypeInstanceByImageModel.networkInterfaces(),new java.util.ArrayList<NetworkInterfacePrototype>(java.util.Arrays.asList(networkInterfacePrototypeModel)));
assertEquals(instanceTemplatePrototypeInstanceByImageModel.placementTarget(),instancePlacementTargetPrototypeModel);
assertEquals(instanceTemplatePrototypeInstanceByImageModel.profile(),instanceProfileIdentityModel);
assertEquals(instanceTemplatePrototypeInstanceByImageModel.resourceGroup(),resourceGroupIdentityModel);
assertEquals(instanceTemplatePrototypeInstanceByImageModel.totalVolumeBandwidth(),Long.valueOf("500"));
assertEquals(instanceTemplatePrototypeInstanceByImageModel.userData(),"testString");
assertEquals(instanceTemplatePrototypeInstanceByImageModel.volumeAttachments(),new java.util.ArrayList<VolumeAttachmentPrototypeInstanceContext>(java.util.Arrays.asList(volumeAttachmentPrototypeInstanceContextModel)));
assertEquals(instanceTemplatePrototypeInstanceByImageModel.vpc(),vpcIdentityModel);
assertEquals(instanceTemplatePrototypeInstanceByImageModel.bootVolumeAttachment(),volumeAttachmentPrototypeInstanceByImageContextModel);
assertEquals(instanceTemplatePrototypeInstanceByImageModel.image(),imageIdentityModel);
assertEquals(instanceTemplatePrototypeInstanceByImageModel.primaryNetworkInterface(),networkInterfacePrototypeModel);
assertEquals(instanceTemplatePrototypeInstanceByImageModel.zone(),zoneIdentityModel);
assertTrue(instanceTemplatePrototypeInstanceByImageModelNew instanceof InstanceTemplatePrototypeInstanceByImage);
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.name(),"my-instance");
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.placementTarget().toString(),instancePlacementTargetPrototypeModel.toString());
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.profile().toString(),instanceProfileIdentityModel.toString());
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.resourceGroup().toString(),resourceGroupIdentityModel.toString());
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.totalVolumeBandwidth(),Long.valueOf("500"));
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.userData(),"testString");
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.vpc().toString(),vpcIdentityModel.toString());
assertEquals(JsonParser.parseString(instanceTemplatePrototypeInstanceByImageModelNew.bootVolumeAttachment().toString()),JsonParser.parseString(volumeAttachmentPrototypeInstanceByImageContextModel.toString()));
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.image().toString(),imageIdentityModel.toString());
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.primaryNetworkInterface().toString(),networkInterfacePrototypeModel.toString());
assertEquals(instanceTemplatePrototypeInstanceByImageModelNew.zone().toString(),zoneIdentityModel.toString());
}