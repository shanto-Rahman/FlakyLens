@Test public void shouldClearLogsAndExpectationsWithRequestMatcher(){
assertThat(httpState.retrieve(request().withQueryStringParameter("type","logs")),is(response().withBody("" + LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis())) + " - creating expectation:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"id\" : \"key_one\","+ NEW_LINE+ "    \"priority\" : 0,"+ NEW_LINE+ "    \"httpRequest\" : {"+ NEW_LINE+ "      \"path\" : \"request_one\""+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"times\" : {"+ NEW_LINE+ "      \"unlimited\" : true"+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"timeToLive\" : {"+ NEW_LINE+ "      \"unlimited\" : true"+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"httpResponse\" : {"+ NEW_LINE+ "      \"statusCode\" : 200,"+ NEW_LINE+ "      \"reasonPhrase\" : \"OK\","+ NEW_LINE+ "      \"body\" : \"response_one\""+ NEW_LINE+ "    }"+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ " with id:"+ NEW_LINE+ NEW_LINE+ "  key_one"+ NEW_LINE+ NEW_LINE+ "------------------------------------"+ NEW_LINE+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ " - some random"+ NEW_LINE+ NEW_LINE+ "  argument_one"+ NEW_LINE+ NEW_LINE+ " message"+ NEW_LINE+ "------------------------------------"+ NEW_LINE+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ " - cleared logs that match:"+ NEW_LINE+ ""+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"path\" : \"request_four\""+ NEW_LINE+ "  }"+ NEW_LINE+ ""+ NEW_LINE+ "------------------------------------"+ NEW_LINE+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ " - removed expectation:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"id\" : \"key_four\","+ NEW_LINE+ "    \"priority\" : 0,"+ NEW_LINE+ "    \"httpRequest\" : {"+ NEW_LINE+ "      \"path\" : \"request_four\""+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"times\" : {"+ NEW_LINE+ "      \"unlimited\" : true"+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"timeToLive\" : {"+ NEW_LINE+ "      \"unlimited\" : true"+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"httpResponse\" : {"+ NEW_LINE+ "      \"statusCode\" : 200,"+ NEW_LINE+ "      \"reasonPhrase\" : \"OK\","+ NEW_LINE+ "      \"body\" : \"response_four\""+ NEW_LINE+ "    }"+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ " with id:"+ NEW_LINE+ NEW_LINE+ "  key_four"+ NEW_LINE+ NEW_LINE+ "------------------------------------"+ NEW_LINE+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ " - cleared expectations that match:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"path\" : \"request_four\""+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE,MediaType.PLAIN_TEXT_UTF_8).withStatusCode(200)));
assertThat(httpState.retrieve(request().withQueryStringParameter("type","active_expectations")),is(response().withBody("" + "[ {" + NEW_LINE + "  \"id\" : \"key_one\","+ NEW_LINE+ "  \"priority\" : 0,"+ NEW_LINE+ "  \"httpRequest\" : {"+ NEW_LINE+ "    \"path\" : \"request_one\""+ NEW_LINE+ "  },"+ NEW_LINE+ "  \"httpResponse\" : {"+ NEW_LINE+ "    \"statusCode\" : 200,"+ NEW_LINE+ "    \"reasonPhrase\" : \"OK\","+ NEW_LINE+ "    \"body\" : \"response_one\""+ NEW_LINE+ "  },"+ NEW_LINE+ "  \"times\" : {"+ NEW_LINE+ "    \"unlimited\" : true"+ NEW_LINE+ "  },"+ NEW_LINE+ "  \"timeToLive\" : {"+ NEW_LINE+ "    \"unlimited\" : true"+ NEW_LINE+ "  }"+ NEW_LINE+ "} ]",MediaType.JSON_UTF_8).withStatusCode(200)));
assertThat(httpState.firstMatchingExpectation(request("request_one")),is(new Expectation(request("request_one")).thenRespond(response("response_one"))));
assertThat(httpState.firstMatchingExpectation(request("request_four")),nullValue());
}