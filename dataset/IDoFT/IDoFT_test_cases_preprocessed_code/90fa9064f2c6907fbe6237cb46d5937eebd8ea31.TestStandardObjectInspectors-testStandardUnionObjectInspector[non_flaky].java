@SuppressWarnings("unchecked") @Test public void testStandardUnionObjectInspector() throws Throwable {
assertEquals(uoi1,uoi2);
assertEquals(ObjectInspectorUtils.getObjectInspectorName(uoi1),ObjectInspectorUtils.getObjectInspectorName(uoi2));
assertTrue(ObjectInspectorUtils.compareTypes(uoi1,uoi2));
assertFalse(ObjectInspectorUtils.compareSupported(uoi1));
assertTrue(ObjectInspectorUtils.compareSupported(ObjectInspectorFactory.getStandardUnionObjectInspector(ois)));
assertEquals(Category.UNION,uoi1.getCategory());
assertEquals(6,uois.size());
assertEquals(objectInspectors.get(i),uois.get(i));
if (i > 0) {
}
assertEquals(unionTypeName.toString(),uoi1.getTypeName());
assertEquals(Category.UNION,typeInfo1.getCategory());
assertEquals(UnionTypeInfo.class.getName(),typeInfo1.getClass().getName());
assertEquals(typeInfo1.getTypeName(),uoi1.getTypeName());
assertEquals(typeInfo1,TypeInfoUtils.getTypeInfoFromTypeString(uoi1.getTypeName()));
assertEquals(typeInfo1,typeInfo2);
assertEquals(TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(typeInfo1),TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(typeInfo2));
assertEquals(TypeInfoUtils.getStandardWritableObjectInspectorFromTypeInfo(typeInfo1),TypeInfoUtils.getStandardWritableObjectInspectorFromTypeInfo(typeInfo2));
assertNull(uoi1.getField(null));
assertEquals(-1,uoi1.getTag(null));
assertEquals(0,uoi1.getTag(union));
assertEquals(1,uoi1.getField(union));
assertEquals("{0:1}",SerDeUtils.getJSONString(union,uoi1));
assertEquals(0,ObjectInspectorUtils.compare(union,uoi1,new StandardUnion((byte)0,1),uoi2));
assertTrue(ObjectInspectorUtils.copyToStandardObject(union,uoi1).equals(1));
assertEquals(1,uoi1.getTag(union));
assertEquals("two",uoi1.getField(union));
assertEquals("{1:\"two\"}",SerDeUtils.getJSONString(union,uoi1));
assertEquals(0,ObjectInspectorUtils.compare(union,uoi1,new StandardUnion((byte)1,"two"),uoi2));
assertTrue(ObjectInspectorUtils.copyToStandardObject(union,uoi1).equals("two"));
assertEquals(2,uoi1.getTag(union));
assertEquals(true,uoi1.getField(union));
assertEquals("{2:true}",SerDeUtils.getJSONString(union,uoi1));
assertEquals(0,ObjectInspectorUtils.compare(union,uoi1,new StandardUnion((byte)2,true),uoi2));
assertTrue(ObjectInspectorUtils.copyToStandardObject(union,uoi1).equals(true));
assertEquals(3,uoi1.getTag(union));
assertEquals(iList,uoi1.getField(union));
assertEquals("{3:[4,5]}",SerDeUtils.getJSONString(union,uoi1));
assertEquals(0,ObjectInspectorUtils.compare(union,uoi1,new StandardUnion((byte)3,iList.clone()),uoi2));
assertTrue(ObjectInspectorUtils.copyToStandardObject(union,uoi1).equals(iList));
assertEquals(4,uoi1.getTag(union));
assertEquals(map,uoi1.getField(union));
assertEquals("{4:{6:\"six\",7:\"seven\",8:\"eight\"}}",SerDeUtils.getJSONString(union,uoi1));
assertNotNull(th);
assertEquals("Compare on map type not supported!",th.getMessage());
assertTrue(ObjectInspectorUtils.copyToStandardObject(union,uoi1).equals(map));
assertEquals(5,uoi1.getTag(union));
assertEquals(struct,uoi1.getField(union));
assertEquals("{5:{\"mydouble\":9.0,\"mylong\":10}}",SerDeUtils.getJSONString(union,uoi1));
assertEquals(0,ObjectInspectorUtils.compare(union,uoi1,new StandardUnion((byte)5,struct.clone()),uoi2));
assertTrue(ObjectInspectorUtils.copyToStandardObject(union,uoi1).equals(struct));
}