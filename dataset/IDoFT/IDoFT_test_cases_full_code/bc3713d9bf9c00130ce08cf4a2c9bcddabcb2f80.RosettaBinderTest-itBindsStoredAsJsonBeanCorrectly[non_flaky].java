@Test public void itBindsStoredAsJsonBeanCorrectly() throws Exception {
  InnerBean inner=new InnerBean();
  inner.setStringProperty("value");
  ConcreteStoredAsJsonTypeInfo concrete=new ConcreteStoredAsJsonTypeInfo();
  concrete.setGeneralValue("general");
  concrete.setConcreteValue("concrete");
  JsonNode innerJsonNode=Rosetta.getMapper().createObjectNode().set("stringProperty",TextNode.valueOf("value"));
  StoredAsJsonBean bean=new StoredAsJsonBean();
  bean.setAnnotatedField(inner);
  bean.setAnnotatedGetter(inner);
  bean.setAnnotatedSetter(inner);
  bean.setAnnotatedFieldWithDefault(inner);
  bean.setAnnotatedGetterWithDefault(inner);
  bean.setAnnotatedSetterWithDefault(inner);
  bean.setOptionalField(Optional.of(inner));
  bean.setOptionalGetter(Optional.of(inner));
  bean.setOptionalSetter(Optional.of(inner));
  bean.setBinaryField(inner);
  bean.setBinaryFieldWithDefault(inner);
  bean.setJsonNodeField(innerJsonNode);
  bean.setOptionalTypeInfoField(Optional.of(concrete));
  bean.setOptionalTypeInfoGetter(Optional.of(concrete));
  bean.setOptionalTypeInfoSetter(Optional.of(concrete));
  bean.setTypeInfoField(concrete);
  bean.setTypeInfoGetter(concrete);
  bean.setTypeInfoSetter(concrete);
  String json="{\"stringProperty\":\"value\"}";
  String typedJson="{\"generalValue\":\"general\",\"concreteValue\":\"concrete\",\"type\":\"concrete\"}";
  List<Byte> bytes=toList(json.getBytes(StandardCharsets.UTF_8));
  Map<String,Object> beanMap=bind(bean);
  compareField(beanMap,"annotatedField",json);
  compareField(beanMap,"annotatedGetter",json);
  compareField(beanMap,"annotatedSetter",json);
  compareField(beanMap,"annotatedFieldWithDefault",json);
  compareField(beanMap,"annotatedGetterWithDefault",json);
  compareField(beanMap,"annotatedSetterWithDefault",json);
  compareField(beanMap,"optionalField",json);
  compareField(beanMap,"optionalGetter",json);
  compareField(beanMap,"optionalSetter",json);
  assertThat(beanMap.get("binaryField")).isEqualTo(bytes);
  assertThat(beanMap.get("binaryFieldWithDefault")).isEqualTo(bytes);
  compareField(beanMap,"jsonNodeField",json);
  compareField(beanMap,"optionalTypeInfoField",typedJson);
  compareField(beanMap,"optionalTypeInfoGetter",typedJson);
  compareField(beanMap,"optionalTypeInfoSetter",typedJson);
  compareField(beanMap,"typeInfoField",typedJson);
  compareField(beanMap,"typeInfoGetter",typedJson);
  compareField(beanMap,"typeInfoSetter",typedJson);
  assertThat(beanMap.keySet().size()).isEqualTo(18);
  beanMap=bindWithPrefix("prefix",bean);
  compareField(beanMap,"prefix.annotatedField",json);
  compareField(beanMap,"prefix.annotatedGetter",json);
  compareField(beanMap,"prefix.annotatedSetter",json);
  compareField(beanMap,"prefix.annotatedFieldWithDefault",json);
  compareField(beanMap,"prefix.annotatedGetterWithDefault",json);
  compareField(beanMap,"prefix.annotatedSetterWithDefault",json);
  compareField(beanMap,"prefix.optionalField",json);
  compareField(beanMap,"prefix.optionalGetter",json);
  compareField(beanMap,"prefix.optionalSetter",json);
  assertThat(beanMap.get("prefix.binaryField")).isEqualTo(bytes);
  assertThat(beanMap.get("prefix.binaryFieldWithDefault")).isEqualTo(bytes);
  compareField(beanMap,"prefix.jsonNodeField",json);
  compareField(beanMap,"prefix.optionalTypeInfoField",typedJson);
  compareField(beanMap,"prefix.optionalTypeInfoGetter",typedJson);
  compareField(beanMap,"prefix.optionalTypeInfoSetter",typedJson);
  compareField(beanMap,"prefix.typeInfoField",typedJson);
  compareField(beanMap,"prefix.typeInfoGetter",typedJson);
  compareField(beanMap,"prefix.typeInfoSetter",typedJson);
  assertThat(beanMap.keySet().size()).isEqualTo(18);
}
