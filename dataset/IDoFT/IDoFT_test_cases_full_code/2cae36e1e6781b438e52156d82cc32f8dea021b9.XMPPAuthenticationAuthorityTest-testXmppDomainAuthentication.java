@Test public void testXmppDomainAuthentication() throws Exception {
  System.err.println("Start test");
  XMPPDomainAuthAuthority xmppAuth=(XMPPDomainAuthAuthority)ServiceUtils2.getService(FocusBundleActivator.bundleContext,AuthenticationAuthority.class);
  assertNotNull(xmppAuth);
  Jid user1GuestJid=JidCreate.from("user1@" + guestDomain);
  Jid user1AuthJid=JidCreate.from("user1@" + authDomain);
  String user1MachineUid="machine1uid";
  Jid user2GuestJid=JidCreate.from("user2@" + guestDomain);
  Jid user2AuthJid=JidCreate.from("user2@" + authDomain);
  String user2MachineUid="machine2uid";
  boolean roomExists=false;
  EntityBareJid room1=JidCreate.entityBareFrom("testroom1@example.com");
  ConferenceIq query=new ConferenceIq();
  ConferenceIq response=new ConferenceIq();
  query.setFrom(user1GuestJid);
  query.setSessionId(null);
  roomExists=false;
  query.setRoom(room1);
  query.setMachineUID(user1MachineUid);
  FocusComponent focusComponent=osgi.jicofoServices.getFocusComponent();
  IQ authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertEquals(XMPPError.Condition.not_authorized,authError.getError().getCondition());
  query.setFrom(user1AuthJid);
  query.setSessionId(null);
  roomExists=false;
  query.setRoom(room1);
  query.setMachineUID(user1MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNull(authError);
  String user1SessionId=response.getSessionId();
  assertNotNull(user1SessionId);
  response=new ConferenceIq();
  query.setFrom(user2GuestJid);
  query.setSessionId(null);
  roomExists=true;
  query.setMachineUID(user2MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNull(authError);
  assertNull(response.getSessionId());
  query.setFrom(user1GuestJid);
  query.setSessionId(user1SessionId);
  roomExists=false;
  query.setMachineUID(user1MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNull(authError);
  assertEquals(user1SessionId,response.getSessionId());
  response=new ConferenceIq();
  query.setFrom(user2GuestJid);
  query.setSessionId("someinvalidsessionid");
  roomExists=true;
  query.setMachineUID(user2MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertNotNull(authError.getError().getExtension(SessionInvalidPacketExtension.ELEMENT_NAME,SessionInvalidPacketExtension.NAMESPACE));
  query.setSessionId(user1SessionId);
  query.setFrom(user2GuestJid);
  query.setMachineUID(user2MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertEquals(XMPPError.Condition.not_acceptable,authError.getError().getCondition());
  query.setSessionId(user1SessionId);
  query.setFrom(user2GuestJid);
  query.setMachineUID(user2MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertNotNull(XMPPError.Condition.not_acceptable.toString(),authError.getError().getCondition());
  query.setFrom(user1GuestJid);
  query.setSessionId(user1SessionId);
  query.setMachineUID(null);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertNotNull(XMPPError.Condition.not_acceptable.toString(),authError.getError().getCondition());
  roomExists=false;
  query.setFrom(user2AuthJid);
  query.setSessionId(null);
  query.setMachineUID(null);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertNotNull(XMPPError.Condition.not_acceptable.toString(),authError.getError().getCondition());
  String user3MachineUID="user3machineUID";
  roomExists=true;
  query.setFrom(user1AuthJid);
  query.setMachineUID(user3MachineUID);
  query.setSessionId(null);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNull(authError);
  String user3SessionId=response.getSessionId();
  assertNotNull(user3SessionId);
  assertNotEquals(user1SessionId,user3SessionId);
}
