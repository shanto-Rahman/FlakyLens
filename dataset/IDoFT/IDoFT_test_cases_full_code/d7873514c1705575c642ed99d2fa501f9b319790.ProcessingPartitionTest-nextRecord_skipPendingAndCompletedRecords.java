@Test public void nextRecord_skipPendingAndCompletedRecords(){
  partition.load(Arrays.asList(record(0L),record(1L),record(2L)));
  assertRecordsAreEqual(partition.nextRecord(),record(0L));
  assertRecordsAreEqual(partition.nextRecord(),record(1L));
  assertRecordsAreEqual(partition.nextRecord(),record(2L));
  assertThat(partition.hasNextRecord(),is(false));
  assertThat(partition.offsetPosition,is(3L));
  assertThat(partition.pendingOffsets.keySet(),contains(0L,1L,2L));
  assertThat(partition.completedOffsets,empty());
  assertThat(partition.ack(0L),is(true));
  assertThat(partition.pendingOffsets.keySet(),contains(1L,2L));
  assertThat(partition.completedOffsets,contains(0L));
  assertThat(partition.committableOffset,is(1L));
  assertThat(partition.lastCommittedOffset,is(0L));
  assertThat(partition.getCommittableOffsetsSize(),is(1L));
  assertThat(partition.fail(2L),is(true));
  assertThat(partition.pendingOffsets.keySet(),contains(1L));
  assertThat(partition.completedOffsets,contains(0L));
  assertThat(partition.committableOffset,is(1L));
  assertThat(partition.lastCommittedOffset,is(0L));
  assertThat(partition.getCommittableOffsetsSize(),is(1L));
  verify(consumer).seek(topicPartition,0L);
  assertThat(partition.offsetPosition,is(0L));
  partition.load(Arrays.asList(record(0L),record(1L),record(2L)));
  assertRecordsAreEqual(partition.nextRecord(),record(2L));
  assertThat(partition.hasNextRecord(),is(false));
  assertThat(partition.offsetPosition,is(3L));
  assertThat(partition.pendingOffsets.keySet(),contains(1L,2L));
  assertThat(partition.completedOffsets,contains(0L));
  assertThat(partition.committableOffset,is(1L));
  assertThat(partition.lastCommittedOffset,is(0L));
  assertThat(partition.getCommittableOffsetsSize(),is(1L));
}
