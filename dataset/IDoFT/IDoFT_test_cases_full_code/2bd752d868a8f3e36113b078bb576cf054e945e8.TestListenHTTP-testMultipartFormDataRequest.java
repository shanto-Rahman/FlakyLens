@Test public void testMultipartFormDataRequest() throws IOException {
  runner.setProperty(ListenHTTP.PORT,Integer.toString(availablePort));
  runner.setProperty(ListenHTTP.BASE_PATH,HTTP_BASE_PATH);
  runner.setProperty(ListenHTTP.RETURN_CODE,Integer.toString(HttpServletResponse.SC_OK));
  final SSLContextService sslContextService=runner.getControllerService(SSL_CONTEXT_SERVICE_IDENTIFIER,SSLContextService.class);
  final boolean isSecure=(sslContextService != null);
  startWebServer();
  File file1=createTextFile("Hello","World");
  File file2=createTextFile("{ \"name\":\"John\", \"age\":30 }");
  MultipartBody multipartBody=new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart("p1","v1").addFormDataPart("p2","v2").addFormDataPart("file1","my-file-text.txt",RequestBody.create(file1,MediaType.parse("text/plain"))).addFormDataPart("file2","my-file-data.json",RequestBody.create(file2,MediaType.parse("application/json"))).addFormDataPart("file3","my-file-binary.bin",RequestBody.create(generateRandomBinaryData(),MediaType.parse("application/octet-stream"))).build();
  Request request=new Request.Builder().url(buildUrl(isSecure)).post(multipartBody).build();
  final OkHttpClient client=getOkHttpClient(false,false);
  try (Response response=client.newCall(request).execute()){
    Files.deleteIfExists(Paths.get(String.valueOf(file1)));
    Files.deleteIfExists(Paths.get(String.valueOf(file2)));
    Assert.assertTrue(String.format("Unexpected code: %s, body: %s",response.code(),response.body()),response.isSuccessful());
  }
   runner.assertAllFlowFilesTransferred(ListenHTTP.RELATIONSHIP_SUCCESS,5);
  List<MockFlowFile> flowFilesForRelationship=runner.getFlowFilesForRelationship(ListenHTTP.RELATIONSHIP_SUCCESS);
  MockFlowFile mff=findFlowFile(flowFilesForRelationship,"p1");
  mff.assertAttributeEquals("http.multipart.name","p1");
  mff.assertAttributeExists("http.multipart.size");
  mff.assertAttributeEquals("http.multipart.fragments.sequence.number","1");
  mff.assertAttributeEquals("http.multipart.fragments.total.number","5");
  mff.assertAttributeExists("http.headers.multipart.content-disposition");
  mff=findFlowFile(flowFilesForRelationship,"p2");
  mff.assertAttributeEquals("http.multipart.name","p2");
  mff.assertAttributeExists("http.multipart.size");
  mff.assertAttributeExists("http.multipart.fragments.sequence.number");
  mff.assertAttributeEquals("http.multipart.fragments.total.number","5");
  mff.assertAttributeExists("http.headers.multipart.content-disposition");
  mff=findFlowFile(flowFilesForRelationship,"file1");
  mff.assertAttributeEquals("http.multipart.name","file1");
  mff.assertAttributeEquals("http.multipart.filename","my-file-text.txt");
  mff.assertAttributeEquals("http.headers.multipart.content-type","text/plain");
  mff.assertAttributeExists("http.multipart.size");
  mff.assertAttributeExists("http.multipart.fragments.sequence.number");
  mff.assertAttributeEquals("http.multipart.fragments.total.number","5");
  mff.assertAttributeExists("http.headers.multipart.content-disposition");
  mff=findFlowFile(flowFilesForRelationship,"file2");
  mff.assertAttributeEquals("http.multipart.name","file2");
  mff.assertAttributeEquals("http.multipart.filename","my-file-data.json");
  mff.assertAttributeEquals("http.headers.multipart.content-type","application/json");
  mff.assertAttributeExists("http.multipart.size");
  mff.assertAttributeExists("http.multipart.fragments.sequence.number");
  mff.assertAttributeEquals("http.multipart.fragments.total.number","5");
  mff.assertAttributeExists("http.headers.multipart.content-disposition");
  mff=findFlowFile(flowFilesForRelationship,"file3");
  mff.assertAttributeEquals("http.multipart.name","file3");
  mff.assertAttributeEquals("http.multipart.filename","my-file-binary.bin");
  mff.assertAttributeEquals("http.headers.multipart.content-type","application/octet-stream");
  mff.assertAttributeExists("http.multipart.size");
  mff.assertAttributeExists("http.multipart.fragments.sequence.number");
  mff.assertAttributeEquals("http.multipart.fragments.total.number","5");
  mff.assertAttributeExists("http.headers.multipart.content-disposition");
}
