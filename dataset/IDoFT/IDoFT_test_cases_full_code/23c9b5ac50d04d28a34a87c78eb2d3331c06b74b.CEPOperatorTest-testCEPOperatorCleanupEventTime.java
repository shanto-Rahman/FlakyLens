@Test public void testCEPOperatorCleanupEventTime() throws Exception {
  Event startEvent1=new Event(42,"start",1.0);
  Event startEvent2=new Event(42,"start",2.0);
  SubEvent middleEvent1=new SubEvent(42,"foo1",1.0,10.0);
  SubEvent middleEvent2=new SubEvent(42,"foo2",1.0,10.0);
  SubEvent middleEvent3=new SubEvent(42,"foo3",1.0,10.0);
  Event endEvent1=new Event(42,"end",1.0);
  Event endEvent2=new Event(42,"end",2.0);
  Event startEventK2=new Event(43,"start",1.0);
  CepOperator<Event,Integer,Map<String,List<Event>>> operator=getKeyedCepOperator(false);
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness=CepOperatorTestUtilities.getCepTestHarness(operator);
  try {
    harness.open();
    harness.processWatermark(new Watermark(Long.MIN_VALUE));
    harness.processElement(new StreamRecord<>(new Event(42,"foobar",1.0),2L));
    harness.processElement(new StreamRecord<Event>(middleEvent1,2L));
    harness.processElement(new StreamRecord<Event>(new SubEvent(42,"barfoo",1.0,5.0),3L));
    harness.processElement(new StreamRecord<>(startEvent1,1L));
    harness.processElement(new StreamRecord<>(startEventK2,1L));
    assertEquals(2L,harness.numEventTimeTimers());
    assertEquals(4L,operator.getPQSize(42));
    assertEquals(1L,operator.getPQSize(43));
    assertTrue(!operator.hasNonEmptySharedBuffer(42));
    assertTrue(!operator.hasNonEmptySharedBuffer(43));
    harness.processWatermark(new Watermark(2L));
    verifyWatermark(harness.getOutput().poll(),Long.MIN_VALUE);
    verifyWatermark(harness.getOutput().poll(),2L);
    assertEquals(2L,harness.numEventTimeTimers());
    assertTrue(operator.hasNonEmptySharedBuffer(42));
    assertEquals(1L,operator.getPQSize(42));
    assertTrue(operator.hasNonEmptySharedBuffer(43));
    assertTrue(!operator.hasNonEmptyPQ(43));
    harness.processElement(new StreamRecord<>(startEvent2,4L));
    harness.processElement(new StreamRecord<Event>(middleEvent2,5L));
    OperatorSubtaskState snapshot=harness.snapshot(0L,0L);
    harness.close();
    CepOperator<Event,Integer,Map<String,List<Event>>> operator2=getKeyedCepOperator(false);
    harness=CepOperatorTestUtilities.getCepTestHarness(operator2);
    harness.setup();
    harness.initializeState(snapshot);
    harness.open();
    harness.processElement(new StreamRecord<>(endEvent1,6L));
    harness.processWatermark(11L);
    harness.processWatermark(12L);
    assertEquals(1L,harness.numEventTimeTimers());
    assertTrue(operator2.hasNonEmptySharedBuffer(42));
    assertTrue(!operator2.hasNonEmptyPQ(42));
    assertTrue(!operator2.hasNonEmptySharedBuffer(43));
    assertTrue(!operator2.hasNonEmptyPQ(43));
    verifyPattern(harness.getOutput().poll(),startEvent1,middleEvent1,endEvent1);
    verifyPattern(harness.getOutput().poll(),startEvent1,middleEvent2,endEvent1);
    verifyPattern(harness.getOutput().poll(),startEvent2,middleEvent2,endEvent1);
    verifyWatermark(harness.getOutput().poll(),11L);
    verifyWatermark(harness.getOutput().poll(),12L);
    harness.processElement(new StreamRecord<Event>(middleEvent3,12L));
    harness.processElement(new StreamRecord<>(endEvent2,13L));
    harness.processWatermark(20L);
    harness.processWatermark(21L);
    assertTrue(!operator2.hasNonEmptySharedBuffer(42));
    assertTrue(!operator2.hasNonEmptyPQ(42));
    assertEquals(0L,harness.numEventTimeTimers());
    assertEquals(3,harness.getOutput().size());
    verifyPattern(harness.getOutput().poll(),startEvent2,middleEvent2,endEvent2);
    verifyWatermark(harness.getOutput().poll(),20L);
    verifyWatermark(harness.getOutput().poll(),21L);
  }
  finally {
    harness.close();
  }
}
