@Test @Deployment(resources={"org/flowable/engine/test/api/oneTaskSubProcess.bpmn20.xml"}) public void testSetCurrentActivityForSubProcessWithVariables(){
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("startSimpleSubProcess");
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.complete(task.getId());
  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  assertEquals("subTask",task.getTaskDefinitionKey());
  changeStateEventListener.clear();
  runtimeService.createChangeActivityStateBuilder().processInstanceId(processInstance.getId()).moveActivityIdTo("subTask","taskBefore").processVariable("processVar1","test").processVariable("processVar2",10).localVariable("taskBefore","localVar1","test2").localVariable("taskBefore","localVar2",20).changeState();
  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  assertEquals("taskBefore",task.getTaskDefinitionKey());
  List<Execution> executions=runtimeService.createExecutionQuery().processInstanceId(processInstance.getId()).list();
  assertEquals(2,executions.size());
  Map<String,Object> processVariables=runtimeService.getVariables(processInstance.getId());
  assertEquals("test",processVariables.get("processVar1"));
  assertEquals(10,processVariables.get("processVar2"));
  assertNull(processVariables.get("localVar1"));
  assertNull(processVariables.get("localVar2"));
  Execution execution=runtimeService.createExecutionQuery().processInstanceId(processInstance.getId()).activityId("taskBefore").singleResult();
  Map<String,Object> localVariables=runtimeService.getVariablesLocal(execution.getId());
  assertEquals("test2",localVariables.get("localVar1"));
  assertEquals(20,localVariables.get("localVar2"));
  Iterator<FlowableEvent> iterator=changeStateEventListener.iterator();
  assertThat(changeStateEventListener.getEvents()).extracting(FlowableEvent::getType).containsExactly(FlowableEngineEventType.VARIABLE_CREATED,FlowableEngineEventType.VARIABLE_CREATED,FlowableEngineEventType.ACTIVITY_CANCELLED,FlowableEngineEventType.ACTIVITY_CANCELLED,FlowableEngineEventType.VARIABLE_CREATED,FlowableEngineEventType.VARIABLE_CREATED,FlowableEngineEventType.ACTIVITY_STARTED);
  assertThat(changeStateEventListener.getEvents()).filteredOn(stateEvent -> stateEvent instanceof FlowableVariableEvent).extracting(stateEvent -> ((FlowableVariableEvent)stateEvent).getVariableName(),stateEvent -> ((FlowableVariableEvent)stateEvent).getVariableValue()).containsExactlyInAnyOrder(tuple("processVar1","test"),tuple("processVar2",10),tuple("localVar1","test2"),tuple("localVar2",20));
  assertThat(changeStateEventListener.getEvents()).filteredOn(stateEvent -> stateEvent instanceof FlowableActivityEvent).extracting(stateEvent -> ((FlowableActivityEvent)stateEvent).getActivityId()).containsExactlyInAnyOrder("subTask","subProcess","taskBefore");
  taskService.complete(task.getId());
  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  assertEquals("subTask",task.getTaskDefinitionKey());
  taskService.complete(task.getId());
  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  assertEquals("taskAfter",task.getTaskDefinitionKey());
  taskService.complete(task.getId());
  assertProcessEnded(processInstance.getId());
}
