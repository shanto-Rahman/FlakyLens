@SneakyThrows @Test public void testGetProperties(){
  Map<String,BeanProperty> properties=ClassUtil.getProperties(B.class);
  log.info("Properties.keySet():" + properties.keySet());
  String[] exp={"fieldA1","fieldA2","fieldA3","fieldA4","fieldB1","fieldB2","fieldB3","fieldB4","fieldB5","fieldB6","readOnly","writeOnly"};
  assertArrayEquals(exp,properties.keySet().toArray());
  BeanProperty prop=properties.get("fieldB6");
  assertEquals("fieldB6",prop.getName());
  B b=new B();
  prop.set(b,true);
  assertEquals(true,prop.get(b));
  assertFalse(prop.isImmutable(false));
  assertTrue(prop.isReadable(false));
  assertEquals(Boolean.TYPE,prop.getType());
  assertEquals(Boolean.TYPE,prop.getGenericType());
  assertEquals(B.class.getMethod("setFieldB6",new Class[]{Boolean.TYPE}),prop.getSetter());
  assertEquals(B.class.getMethod("isFieldB6",new Class[0]),prop.getGetter());
  assertTrue(prop.isTransient());
  assertFalse(prop.isFieldAccessible(false));
  assertEquals(Modifier.PUBLIC,prop.getModifier());
  assertNotNull("Transient is annotated",prop.getAnnotation(Transient.class));
  prop=properties.get("fieldB2");
  prop.set(b,"str");
  assertNull(prop.getSetter());
  assertNull(prop.getGetter());
  assertNotNull(prop.getField());
  assertEquals("str",prop.get(b));
  assertEquals(String.class,prop.getType());
  assertEquals(String.class,prop.getGenericType());
  assertNotNull(prop.getAnnotation(Nullable.class));
  assertNull(prop.getAnnotation(DefaultEnum.class));
  assertEquals(Modifier.PUBLIC | Modifier.TRANSIENT,prop.getModifier());
  assertTrue(prop.isTransient());
  prop=properties.get("writeOnly");
  prop.set(b,"str");
  assertEquals("str",b.fieldB5);
  assertEquals(String.class,prop.getType());
  assertEquals(String.class,prop.getGenericType());
  assertNotNull(prop.getAnnotation(Nullable.class));
  assertNull(prop.getAnnotation(DefaultEnum.class));
  assertEquals(Modifier.PUBLIC,prop.getModifier());
  assertTrue(prop.isTransient());
}
