@Test public void testAppNamespace() throws Exception {
  String someAppId="someAppId";
  String somePrivateNamespace="somePrivateNamespace";
  String somePrivateNamespaceWithIncorrectCase=somePrivateNamespace.toUpperCase();
  long somePrivateNamespaceId=1;
  String yetAnotherPrivateNamespace="anotherPrivateNamespace";
  long yetAnotherPrivateNamespaceId=4;
  String anotherPublicNamespace="anotherPublicNamespace";
  long anotherPublicNamespaceId=5;
  String somePublicAppId="somePublicAppId";
  String somePublicNamespace="somePublicNamespace";
  String somePublicNamespaceWithIncorrectCase=somePublicNamespace.toUpperCase();
  long somePublicNamespaceId=2;
  String anotherPrivateNamespace="anotherPrivateNamespace";
  long anotherPrivateNamespaceId=3;
  int sleepInterval=scanInterval * 10;
  AppNamespace somePrivateAppNamespace=assembleAppNamespace(somePrivateNamespaceId,someAppId,somePrivateNamespace,false);
  AppNamespace somePublicAppNamespace=assembleAppNamespace(somePublicNamespaceId,somePublicAppId,somePublicNamespace,true);
  AppNamespace anotherPrivateAppNamespace=assembleAppNamespace(anotherPrivateNamespaceId,somePublicAppId,anotherPrivateNamespace,false);
  AppNamespace yetAnotherPrivateAppNamespace=assembleAppNamespace(yetAnotherPrivateNamespaceId,someAppId,yetAnotherPrivateNamespace,false);
  AppNamespace anotherPublicAppNamespace=assembleAppNamespace(anotherPublicNamespaceId,someAppId,anotherPublicNamespace,true);
  Set<String> someAppIdNamespaces=Sets.newHashSet(somePrivateNamespace,yetAnotherPrivateNamespace,anotherPublicNamespace);
  Set<String> someAppIdNamespacesWithIncorrectCase=Sets.newHashSet(somePrivateNamespaceWithIncorrectCase,yetAnotherPrivateNamespace,anotherPublicNamespace);
  Set<String> somePublicAppIdNamespaces=Sets.newHashSet(somePublicNamespace,anotherPrivateNamespace);
  Set<String> publicNamespaces=Sets.newHashSet(somePublicNamespace,anotherPublicNamespace);
  Set<String> publicNamespacesWithIncorrectCase=Sets.newHashSet(somePublicNamespaceWithIncorrectCase,anotherPublicNamespace);
  List<Long> appNamespaceIds=Lists.newArrayList(somePrivateNamespaceId,somePublicNamespaceId,anotherPrivateNamespaceId,yetAnotherPrivateNamespaceId,anotherPublicNamespaceId);
  List<AppNamespace> allAppNamespaces=Lists.newArrayList(somePrivateAppNamespace,somePublicAppNamespace,anotherPrivateAppNamespace,yetAnotherPrivateAppNamespace,anotherPublicAppNamespace);
  appNamespaceServiceWithCache.afterPropertiesSet();
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,somePrivateNamespace));
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,somePrivateNamespaceWithIncorrectCase));
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,yetAnotherPrivateNamespace));
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,anotherPublicNamespace));
  assertTrue(appNamespaceServiceWithCache.findByAppIdAndNamespaces(someAppId,someAppIdNamespaces).isEmpty());
  assertTrue(appNamespaceServiceWithCache.findByAppIdAndNamespaces(someAppId,someAppIdNamespacesWithIncorrectCase).isEmpty());
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(somePublicAppId,somePublicNamespace));
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(somePublicAppId,somePublicNamespaceWithIncorrectCase));
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(somePublicAppId,anotherPrivateNamespace));
  assertTrue(appNamespaceServiceWithCache.findByAppIdAndNamespaces(somePublicAppId,somePublicAppIdNamespaces).isEmpty());
  assertNull(appNamespaceServiceWithCache.findPublicNamespaceByName(somePublicNamespace));
  assertNull(appNamespaceServiceWithCache.findPublicNamespaceByName(somePublicNamespaceWithIncorrectCase));
  assertNull(appNamespaceServiceWithCache.findPublicNamespaceByName(anotherPublicNamespace));
  assertTrue(appNamespaceServiceWithCache.findPublicNamespacesByNames(publicNamespaces).isEmpty());
  assertTrue(appNamespaceServiceWithCache.findPublicNamespacesByNames(publicNamespacesWithIncorrectCase).isEmpty());
  when(appNamespaceRepository.findFirst500ByIdGreaterThanOrderByIdAsc(0)).thenReturn(Lists.newArrayList(somePrivateAppNamespace,somePublicAppNamespace));
  when(appNamespaceRepository.findAllById(Lists.newArrayList(somePrivateNamespaceId,somePublicNamespaceId))).thenReturn(Lists.newArrayList(somePrivateAppNamespace,somePublicAppNamespace));
  scanIntervalTimeUnit.sleep(sleepInterval);
  assertEquals(somePrivateAppNamespace,appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,somePrivateNamespace));
  assertEquals(somePrivateAppNamespace,appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,somePrivateNamespaceWithIncorrectCase));
  check(Lists.newArrayList(somePrivateAppNamespace),appNamespaceServiceWithCache.findByAppIdAndNamespaces(someAppId,someAppIdNamespaces));
  check(Lists.newArrayList(somePrivateAppNamespace),appNamespaceServiceWithCache.findByAppIdAndNamespaces(someAppId,someAppIdNamespacesWithIncorrectCase));
  assertEquals(somePublicAppNamespace,appNamespaceServiceWithCache.findByAppIdAndNamespace(somePublicAppId,somePublicNamespace));
  assertEquals(somePublicAppNamespace,appNamespaceServiceWithCache.findByAppIdAndNamespace(somePublicAppId,somePublicNamespaceWithIncorrectCase));
  check(Lists.newArrayList(somePublicAppNamespace),appNamespaceServiceWithCache.findByAppIdAndNamespaces(somePublicAppId,somePublicAppIdNamespaces));
  assertEquals(somePublicAppNamespace,appNamespaceServiceWithCache.findPublicNamespaceByName(somePublicNamespace));
  assertEquals(somePublicAppNamespace,appNamespaceServiceWithCache.findPublicNamespaceByName(somePublicNamespaceWithIncorrectCase));
  check(Lists.newArrayList(somePublicAppNamespace),appNamespaceServiceWithCache.findPublicNamespacesByNames(publicNamespaces));
  check(Lists.newArrayList(somePublicAppNamespace),appNamespaceServiceWithCache.findPublicNamespacesByNames(publicNamespacesWithIncorrectCase));
  when(appNamespaceRepository.findFirst500ByIdGreaterThanOrderByIdAsc(somePublicNamespaceId)).thenReturn(Lists.newArrayList(anotherPrivateAppNamespace,yetAnotherPrivateAppNamespace,anotherPublicAppNamespace));
  when(appNamespaceRepository.findAllById(appNamespaceIds)).thenReturn(allAppNamespaces);
  scanIntervalTimeUnit.sleep(sleepInterval);
  check(Lists.newArrayList(somePrivateAppNamespace,yetAnotherPrivateAppNamespace,anotherPublicAppNamespace),Lists.newArrayList(appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,somePrivateNamespace),appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,yetAnotherPrivateNamespace),appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,anotherPublicNamespace)));
  check(Lists.newArrayList(somePrivateAppNamespace,yetAnotherPrivateAppNamespace,anotherPublicAppNamespace),appNamespaceServiceWithCache.findByAppIdAndNamespaces(someAppId,someAppIdNamespaces));
  check(Lists.newArrayList(somePublicAppNamespace,anotherPrivateAppNamespace),Lists.newArrayList(appNamespaceServiceWithCache.findByAppIdAndNamespace(somePublicAppId,somePublicNamespace),appNamespaceServiceWithCache.findByAppIdAndNamespace(somePublicAppId,anotherPrivateNamespace)));
  check(Lists.newArrayList(somePublicAppNamespace,anotherPrivateAppNamespace),appNamespaceServiceWithCache.findByAppIdAndNamespaces(somePublicAppId,somePublicAppIdNamespaces));
  check(Lists.newArrayList(somePublicAppNamespace,anotherPublicAppNamespace),Lists.newArrayList(appNamespaceServiceWithCache.findPublicNamespaceByName(somePublicNamespace),appNamespaceServiceWithCache.findPublicNamespaceByName(anotherPublicNamespace)));
  check(Lists.newArrayList(somePublicAppNamespace,anotherPublicAppNamespace),appNamespaceServiceWithCache.findPublicNamespacesByNames(publicNamespaces));
  String somePrivateNamespaceNew="somePrivateNamespaceNew";
  AppNamespace somePrivateAppNamespaceNew=assembleAppNamespace(somePrivateAppNamespace.getId(),somePrivateAppNamespace.getAppId(),somePrivateNamespaceNew,somePrivateAppNamespace.isPublic());
  somePrivateAppNamespaceNew.setDataChangeLastModifiedTime(newDateWithDelta(somePrivateAppNamespace.getDataChangeLastModifiedTime(),1));
  String someAppIdNew="someAppIdNew";
  AppNamespace yetAnotherPrivateAppNamespaceNew=assembleAppNamespace(yetAnotherPrivateAppNamespace.getId(),someAppIdNew,yetAnotherPrivateAppNamespace.getName(),false);
  yetAnotherPrivateAppNamespaceNew.setDataChangeLastModifiedTime(newDateWithDelta(yetAnotherPrivateAppNamespace.getDataChangeLastModifiedTime(),1));
  AppNamespace somePublicAppNamespaceNew=assembleAppNamespace(somePublicAppNamespace.getId(),somePublicAppNamespace.getAppId(),somePublicAppNamespace.getName(),!somePublicAppNamespace.isPublic());
  somePublicAppNamespaceNew.setDataChangeLastModifiedTime(newDateWithDelta(somePublicAppNamespace.getDataChangeLastModifiedTime(),1));
  List<Long> appNamespaceIdsAfterDelete=Lists.newArrayList(somePrivateNamespaceId,somePublicNamespaceId,yetAnotherPrivateNamespaceId);
  when(appNamespaceRepository.findAllById(appNamespaceIdsAfterDelete)).thenReturn(Lists.newArrayList(somePrivateAppNamespaceNew,yetAnotherPrivateAppNamespaceNew,somePublicAppNamespaceNew));
  when(appNamespaceRepository.findAllById(appNamespaceIds)).thenReturn(Lists.newArrayList(somePrivateAppNamespaceNew,yetAnotherPrivateAppNamespaceNew,somePublicAppNamespaceNew));
  scanIntervalTimeUnit.sleep(sleepInterval);
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,somePrivateNamespace));
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,yetAnotherPrivateNamespace));
  assertNull(appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,anotherPublicNamespace));
  check(Collections.emptyList(),appNamespaceServiceWithCache.findByAppIdAndNamespaces(someAppId,someAppIdNamespaces));
  assertEquals(somePublicAppNamespaceNew,appNamespaceServiceWithCache.findByAppIdAndNamespace(somePublicAppId,somePublicNamespace));
  check(Lists.newArrayList(somePublicAppNamespaceNew),appNamespaceServiceWithCache.findByAppIdAndNamespaces(somePublicAppId,somePublicAppIdNamespaces));
  assertNull(appNamespaceServiceWithCache.findPublicNamespaceByName(somePublicNamespace));
  assertNull(appNamespaceServiceWithCache.findPublicNamespaceByName(anotherPublicNamespace));
  check(Collections.emptyList(),appNamespaceServiceWithCache.findPublicNamespacesByNames(publicNamespaces));
  assertEquals(somePrivateAppNamespaceNew,appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppId,somePrivateNamespaceNew));
  check(Lists.newArrayList(somePrivateAppNamespaceNew),appNamespaceServiceWithCache.findByAppIdAndNamespaces(someAppId,Sets.newHashSet(somePrivateNamespaceNew)));
  assertEquals(yetAnotherPrivateAppNamespaceNew,appNamespaceServiceWithCache.findByAppIdAndNamespace(someAppIdNew,yetAnotherPrivateNamespace));
  check(Lists.newArrayList(yetAnotherPrivateAppNamespaceNew),appNamespaceServiceWithCache.findByAppIdAndNamespaces(someAppIdNew,Sets.newHashSet(yetAnotherPrivateNamespace)));
}
