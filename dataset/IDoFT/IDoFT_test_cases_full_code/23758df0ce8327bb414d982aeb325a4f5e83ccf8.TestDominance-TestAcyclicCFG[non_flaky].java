@Test public void TestAcyclicCFG(){
  Node n1=new Node(1);
  Node n2=new Node(2);
  Node n3=new Node(3);
  Node n4=new Node(4);
  Node n5=new Node(5);
  Node n6=new Node(6);
  Node n7=new Node(7);
  Node n8=new Node(8);
  Node n9=new Node(9);
  Node n10=new Node(10);
  Node n11=new Node(11);
  n1.addkid(n2).addkid(n3);
  n2.addkid(n9);
  n3.addkid(n4).addkid(n5);
  n4.addkid(n9);
  n5.addkid(n6).addkid(n10);
  n6.addkid(n7).addkid(n8);
  n7.addkid(n10);
  n8.addkid(n10);
  n9.addkid(n11);
  n10.addkid(n11);
  Graph g=new Graph(n1);
  MHGDominatorsFinder<Node> finder=new MHGDominatorsFinder<Node>(g);
  DominatorTree<Node> tree=new DominatorTree<Node>(finder);
  assertThat(tree.getHeads().size(),is(1));
  DominatorNode<Node> n=tree.getHeads().get(0);
  assertThat(n.getGode().id,is(1));
  Set<Integer> kids=kid_ids(n);
  assertThat(kids.size(),is(4));
  assertThat(kids,containsInAnyOrder(2,3,9,11));
  Map<Integer,DominatorNode<Node>> KM=kid_map(n);
  DominatorNode<Node> m=KM.get(2);
  kids=kid_ids(m);
  assertThat(kids.size(),is(0));
  m=KM.get(9);
  kids=kid_ids(m);
  assertThat(kids.size(),is(0));
  m=KM.get(11);
  kids=kid_ids(m);
  assertThat(kids.size(),is(0));
  n=KM.get(3);
  kids=kid_ids(n);
  assertThat(kids.size(),is(2));
  assertThat(kids,containsInAnyOrder(4,5));
  KM=kid_map(n);
  m=KM.get(4);
  kids=kid_ids(m);
  assertThat(kids.size(),is(0));
  n=KM.get(5);
  kids=kid_ids(n);
  assertThat(kids.size(),is(2));
  assertThat(kids,containsInAnyOrder(6,10));
  KM=kid_map(n);
  m=KM.get(10);
  kids=kid_ids(m);
  assertThat(kids.size(),is(0));
  n=KM.get(6);
  kids=kid_ids(n);
  assertThat(kids.size(),is(2));
  assertThat(kids,containsInAnyOrder(7,8));
  KM=kid_map(n);
  m=KM.get(7);
  kids=kid_ids(m);
  assertThat(kids.size(),is(0));
  m=KM.get(8);
  kids=kid_ids(m);
  assertThat(kids.size(),is(0));
}
