public void testSimpleBinary() throws Exception {
  ProtobufSchema schema=ProtobufSchemaLoader.std.parse(PROTOC_BINARY);
  final ObjectWriter w=MAPPER.writer(schema);
  byte[] data=new byte[]{1,2,3,4,5,6,7,8,9,10,11};
  Binary input=new Binary(123,data,456);
  byte[] bytes=w.writeValueAsBytes(input);
  assertEquals(18,bytes.length);
  Binary result=MAPPER.readerFor(Binary.class).with(schema).readValue(bytes);
  assertEquals(input.id,result.id);
  assertEquals(input.trailer,result.trailer);
  assertNotNull(result.data);
  _verify(data,result.data);
  JsonParser p=MAPPER.reader().with(schema).createParser(bytes);
  assertToken(JsonToken.START_OBJECT,p.nextToken());
  assertToken(JsonToken.PROPERTY_NAME,p.nextToken());
  assertFalse(p.hasTextCharacters());
  assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());
  assertToken(JsonToken.PROPERTY_NAME,p.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());
  assertEquals(input.trailer,p.getIntValue());
  assertToken(JsonToken.PROPERTY_NAME,p.nextToken());
  assertEquals("data",p.currentName());
  assertToken(JsonToken.VALUE_EMBEDDED_OBJECT,p.nextToken());
  _verify(data,p.getBinaryValue());
  assertToken(JsonToken.END_OBJECT,p.nextToken());
  p.close();
  p=MAPPER.reader().with(schema).createParser(bytes);
  assertToken(JsonToken.START_OBJECT,p.nextToken());
  assertToken(JsonToken.PROPERTY_NAME,p.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());
  assertToken(JsonToken.PROPERTY_NAME,p.nextToken());
  assertEquals(input.trailer,p.nextIntValue(-1));
  assertToken(JsonToken.PROPERTY_NAME,p.nextToken());
  assertToken(JsonToken.VALUE_EMBEDDED_OBJECT,p.nextToken());
  assertToken(JsonToken.END_OBJECT,p.nextToken());
  p.close();
}
