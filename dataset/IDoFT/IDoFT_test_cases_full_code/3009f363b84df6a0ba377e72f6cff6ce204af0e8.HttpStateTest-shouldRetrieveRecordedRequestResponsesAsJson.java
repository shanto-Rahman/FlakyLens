@Test public void shouldRetrieveRecordedRequestResponsesAsJson(){
  httpState.log(new LogEntry().setLogLevel(INFO).setType(NO_MATCH_RESPONSE).setHttpRequest(request("request_one")).setExpectation(new Expectation(request("request_one")).thenRespond(response("response_two"))).setMessageFormat("no expectation for:{}returning response:{}").setArguments(request("request_one"),notFoundResponse()));
  httpState.log(new LogEntry().setLogLevel(INFO).setType(EXPECTATION_RESPONSE).setHttpRequest(request("request_two")).setHttpResponse(response("response_two")).setMessageFormat("returning error:{}for request:{}for action:{}").setArguments(request("request_two"),response("response_two"),response("response_two")));
  HttpResponse response=httpState.retrieve(request().withQueryStringParameter("type","request_responses").withBody(httpRequestSerializer.serialize(request("request_.*"))));
  assertThat(response,is(response().withBody("[ {" + NEW_LINE + "  \"timestamp\" : \""+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ "\","+ NEW_LINE+ "  \"httpRequest\" : {"+ NEW_LINE+ "    \"path\" : \"request_one\""+ NEW_LINE+ "  }"+ NEW_LINE+ "}, {"+ NEW_LINE+ "  \"timestamp\" : \""+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ "\","+ NEW_LINE+ "  \"httpRequest\" : {"+ NEW_LINE+ "    \"path\" : \"request_two\""+ NEW_LINE+ "  },"+ NEW_LINE+ "  \"httpResponse\" : {"+ NEW_LINE+ "    \"statusCode\" : 200,"+ NEW_LINE+ "    \"reasonPhrase\" : \"OK\","+ NEW_LINE+ "    \"body\" : \"response_two\""+ NEW_LINE+ "  }"+ NEW_LINE+ "} ]",MediaType.JSON_UTF_8).withStatusCode(200)));
}
