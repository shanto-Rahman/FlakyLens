public void testEqualsRelation(){
  SemanticGraph graph=SemanticGraph.valueOf("[ate subj>Bill obj>[muffins compound>blueberry]]");
  SemgrexPattern pattern=SemgrexPattern.compile("{} >> ({}=a == {}=b)");
  SemgrexMatcher matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals(2,matcher.getNodeNames().size());
  assertEquals("ate",matcher.getMatch().toString());
  assertEquals("Bill",matcher.getNode("a").toString());
  assertEquals("Bill",matcher.getNode("b").toString());
  assertTrue(matcher.find());
  assertEquals(2,matcher.getNodeNames().size());
  assertEquals("ate",matcher.getMatch().toString());
  assertEquals("muffins",matcher.getNode("a").toString());
  assertEquals("muffins",matcher.getNode("b").toString());
  assertTrue(matcher.find());
  assertEquals(2,matcher.getNodeNames().size());
  assertEquals("ate",matcher.getMatch().toString());
  assertEquals("blueberry",matcher.getNode("a").toString());
  assertEquals("blueberry",matcher.getNode("b").toString());
  assertTrue(matcher.find());
  assertEquals(2,matcher.getNodeNames().size());
  assertEquals("muffins",matcher.getMatch().toString());
  assertEquals("blueberry",matcher.getNode("a").toString());
  assertEquals("blueberry",matcher.getNode("b").toString());
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{} >> {}=a >> {}=b : {}=a == {}=b");
  matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals(2,matcher.getNodeNames().size());
  assertEquals("ate",matcher.getMatch().toString());
  assertEquals("Bill",matcher.getNode("a").toString());
  assertEquals("Bill",matcher.getNode("b").toString());
  assertTrue(matcher.find());
  assertEquals(2,matcher.getNodeNames().size());
  assertEquals("ate",matcher.getMatch().toString());
  assertEquals("muffins",matcher.getNode("a").toString());
  assertEquals("muffins",matcher.getNode("b").toString());
  assertTrue(matcher.find());
  assertEquals(2,matcher.getNodeNames().size());
  assertEquals("ate",matcher.getMatch().toString());
  assertEquals("blueberry",matcher.getNode("a").toString());
  assertEquals("blueberry",matcher.getNode("b").toString());
  assertTrue(matcher.find());
  assertEquals(2,matcher.getNodeNames().size());
  assertEquals("muffins",matcher.getMatch().toString());
  assertEquals("blueberry",matcher.getNode("a").toString());
  assertEquals("blueberry",matcher.getNode("b").toString());
  assertFalse(matcher.find());
}
