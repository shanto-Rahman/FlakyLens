@Test public void itBindsStoredAsJsonBeanCorrectly() throws Exception {
  InnerBean inner=new InnerBean();
  inner.setStringProperty("value");
  ConcreteStoredAsJsonTypeInfo concrete=new ConcreteStoredAsJsonTypeInfo();
  concrete.setGeneralValue("general");
  concrete.setConcreteValue("concrete");
  JsonNode innerJsonNode=Rosetta.getMapper().createObjectNode().set("stringProperty",TextNode.valueOf("value"));
  StoredAsJsonBean bean=new StoredAsJsonBean();
  bean.setAnnotatedField(inner);
  bean.setAnnotatedGetter(inner);
  bean.setAnnotatedSetter(inner);
  bean.setAnnotatedFieldWithDefault(inner);
  bean.setAnnotatedGetterWithDefault(inner);
  bean.setAnnotatedSetterWithDefault(inner);
  bean.setOptionalField(Optional.of(inner));
  bean.setOptionalGetter(Optional.of(inner));
  bean.setOptionalSetter(Optional.of(inner));
  bean.setBinaryField(inner);
  bean.setBinaryFieldWithDefault(inner);
  bean.setJsonNodeField(innerJsonNode);
  bean.setOptionalTypeInfoField(Optional.of(concrete));
  bean.setOptionalTypeInfoGetter(Optional.of(concrete));
  bean.setOptionalTypeInfoSetter(Optional.of(concrete));
  bean.setTypeInfoField(concrete);
  bean.setTypeInfoGetter(concrete);
  bean.setTypeInfoSetter(concrete);
  String json="{\"stringProperty\":\"value\"}";
  String typedJson="{\"generalValue\":\"general\",\"concreteValue\":\"concrete\",\"type\":\"concrete\"}";
  List<Byte> bytes=toList(json.getBytes(StandardCharsets.UTF_8));
  assertThat(bind(bean)).isEqualTo(map("annotatedField",json,"annotatedGetter",json,"annotatedSetter",json,"annotatedFieldWithDefault",json,"annotatedGetterWithDefault",json,"annotatedSetterWithDefault",json,"optionalField",json,"optionalGetter",json,"optionalSetter",json,"binaryField",bytes,"binaryFieldWithDefault",bytes,"jsonNodeField",json,"optionalTypeInfoField",typedJson,"optionalTypeInfoGetter",typedJson,"optionalTypeInfoSetter",typedJson,"typeInfoField",typedJson,"typeInfoGetter",typedJson,"typeInfoSetter",typedJson));
  assertThat(bindWithPrefix("prefix",bean)).isEqualTo(map("prefix.annotatedField",json,"prefix.annotatedGetter",json,"prefix.annotatedSetter",json,"prefix.annotatedFieldWithDefault",json,"prefix.annotatedGetterWithDefault",json,"prefix.annotatedSetterWithDefault",json,"prefix.optionalField",json,"prefix.optionalGetter",json,"prefix.optionalSetter",json,"prefix.binaryField",bytes,"prefix.binaryFieldWithDefault",bytes,"prefix.jsonNodeField",json,"prefix.optionalTypeInfoField",typedJson,"prefix.optionalTypeInfoGetter",typedJson,"prefix.optionalTypeInfoSetter",typedJson,"prefix.typeInfoField",typedJson,"prefix.typeInfoGetter",typedJson,"prefix.typeInfoSetter",typedJson));
}
