@Test public void testValidateSessionData() throws Exception {
  AuthUtils.validateSessionData(host,null,null,null);
  Operation getOp=Operation.createGet(UriUtils.buildUri("http://localhost/foo/bar"));
  AUTH_CTX_FIELD.set(getOp,null);
  AuthUtils.validateSessionData(host,getOp,null,getOp.getAuthorizationContext());
  assertNull(getOp.getAuthorizationContext());
  Claims.Builder claimsBuilder=new Claims.Builder();
  claimsBuilder.setIssuer(AuthenticationConstants.DEFAULT_ISSUER);
  claimsBuilder.setSubject(SystemUserService.SELF_LINK);
  AuthorizationContext.Builder authCtxBuilder=AuthorizationContext.Builder.create();
  authCtxBuilder.setClaims(claimsBuilder.getResult());
  authCtxBuilder.setToken("super-token");
  AuthorizationContext authCtxSystemUser=authCtxBuilder.getResult();
  AUTH_CTX_FIELD.set(getOp,authCtxSystemUser);
  AuthUtils.validateSessionData(host,getOp,null,getOp.getAuthorizationContext());
  assertEquals(authCtxSystemUser,getOp.getAuthorizationContext());
  claimsBuilder=new Claims.Builder();
  claimsBuilder.setIssuer(AuthenticationConstants.DEFAULT_ISSUER);
  claimsBuilder.setSubject("/core/authz/regular-user");
  authCtxBuilder=AuthorizationContext.Builder.create();
  authCtxBuilder.setClaims(claimsBuilder.getResult());
  authCtxBuilder.setToken("regular-token");
  AuthorizationContext authCtxUser=authCtxBuilder.getResult();
  AUTH_CTX_FIELD.set(getOp,authCtxUser);
  AuthUtils.validateSessionData(host,getOp,null,getOp.getAuthorizationContext());
  assertEquals(authCtxUser,getOp.getAuthorizationContext());
  claimsBuilder=new Claims.Builder();
  claimsBuilder.setIssuer(AuthenticationConstants.DEFAULT_ISSUER);
  claimsBuilder.setSubject("/core/authz/regular-user");
  authCtxBuilder=AuthorizationContext.Builder.create();
  authCtxBuilder.setClaims(claimsBuilder.getResult());
  authCtxBuilder.setToken("regular-token");
  authCtxUser=authCtxBuilder.getResult();
  Service s=new SomeExampleService();
  host.addPrivilegedService(SomeExampleService.class);
  host.cacheAuthorizationContext(s,authCtxUser.getToken(),authCtxUser);
  AUTH_CTX_FIELD.set(getOp,null);
  getOp.addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER,authCtxUser.getToken());
  AuthUtils.validateSessionData(host,getOp,null,null);
  assertEquals(authCtxUser,getOp.getAuthorizationContext());
  host.clearAuthorizationContext(s,authCtxUser.getClaims().getSubject());
  getOp.addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER,authCtxUser.getToken());
  AuthUtils.cleanupSessionData(getOp);
  AUTH_CTX_FIELD.set(getOp,authCtxUser);
  AuthUtils.validateSessionData(host,getOp,null,getOp.getAuthorizationContext());
  assertNull(getOp.getAuthorizationContext());
  claimsBuilder=new Claims.Builder();
  claimsBuilder.setIssuer(AuthenticationConstants.DEFAULT_ISSUER);
  claimsBuilder.setSubject(SystemUserService.SELF_LINK);
  authCtxBuilder=AuthorizationContext.Builder.create();
  authCtxBuilder.setClaims(claimsBuilder.getResult());
  authCtxBuilder.setToken("guest-token");
  AuthorizationContext authCtxGuestUser=authCtxBuilder.getResult();
  AUTH_CTX_FIELD.set(getOp,authCtxUser);
  AuthUtils.validateSessionData(host,getOp,authCtxGuestUser,getOp.getAuthorizationContext());
  assertEquals(authCtxGuestUser,getOp.getAuthorizationContext());
}
