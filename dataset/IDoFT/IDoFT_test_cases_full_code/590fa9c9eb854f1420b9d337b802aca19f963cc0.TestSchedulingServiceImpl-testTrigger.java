public void testTrigger(){
  long startTime=0;
  service.setTime(0);
  service.add(20,callbacks[3],slots[1][1]);
  service.add(20,callbacks[2],slots[1][0]);
  service.add(20,callbacks[1],slots[0][1]);
  service.add(21,callbacks[0],slots[0][0]);
  assertTrue(service.isScheduled(callbacks[3]));
  assertTrue(service.isScheduled(callbacks[0]));
  startTime+=19;
  service.setTime(startTime);
  evaluateSchedule();
  checkCallbacks(callbacks,new Integer[]{0,0,0,0,0});
  assertTrue(service.isScheduled(callbacks[3]));
  startTime+=1;
  service.setTime(startTime);
  evaluateSchedule();
  checkCallbacks(callbacks,new Integer[]{0,1,2,3,0});
  assertFalse(service.isScheduled(callbacks[3]));
  startTime+=1;
  service.setTime(startTime);
  evaluateSchedule();
  checkCallbacks(callbacks,new Integer[]{4,0,0,0,0});
  assertFalse(service.isScheduled(callbacks[3]));
  startTime+=1;
  service.setTime(startTime);
  evaluateSchedule();
  assertEquals(0,callbacks[3].clearAndGetOrderTriggered());
  service.add(20,callbacks[0],slots[0][0]);
  service.add(28,callbacks[0],slots[0][0]);
  service.remove(callbacks[0],slots[0][0]);
  service.add(20,callbacks[2],slots[1][0]);
  service.add(25,callbacks[1],slots[0][1]);
  service.remove(callbacks[1],slots[0][1]);
  service.add(21,callbacks[0],slots[0][0]);
  service.add(21,callbacks[3],slots[1][1]);
  service.add(20,callbacks[1],slots[0][1]);
  SupportScheduleCallback.setCallbackOrderNum(0);
  startTime+=20;
  service.setTime(startTime);
  evaluateSchedule();
  checkCallbacks(callbacks,new Integer[]{0,1,2,0,0});
  startTime+=1;
  service.setTime(startTime);
  evaluateSchedule();
  checkCallbacks(callbacks,new Integer[]{3,0,0,4,0});
  service.setTime(startTime + Integer.MAX_VALUE);
  evaluateSchedule();
  checkCallbacks(callbacks,new Integer[]{0,0,0,0,0});
}
