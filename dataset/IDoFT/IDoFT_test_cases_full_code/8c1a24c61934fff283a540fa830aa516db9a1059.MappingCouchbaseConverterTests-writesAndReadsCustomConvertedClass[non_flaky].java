@Test void writesAndReadsCustomConvertedClass(){
  List<Object> converters=new ArrayList<>();
  converters.add(BigDecimalToStringConverter.INSTANCE);
  converters.add(StringToBigDecimalConverter.INSTANCE);
  CustomConversions customConversions=new CouchbaseCustomConversions(converters);
  converter.setCustomConversions(customConversions);
  converter.afterPropertiesSet();
  ((CouchbaseMappingContext)converter.getMappingContext()).setSimpleTypeHolder(customConversions.getSimpleTypeHolder());
  CouchbaseDocument converted=new CouchbaseDocument();
  final String valueStr="12.345";
  final BigDecimal value=new BigDecimal(valueStr);
  final String value2Str="0.6789";
  final BigDecimal value2=new BigDecimal(value2Str);
  List<BigDecimal> listOfValues=new ArrayList<>();
  listOfValues.add(value);
  listOfValues.add(value2);
  Map<String,BigDecimal> mapOfValues=new HashMap<>();
  mapOfValues.put("val1",value);
  mapOfValues.put("val2",value2);
  CustomEntity entity=new CustomEntity(value,listOfValues,mapOfValues);
  converter.write(entity,converted);
  CouchbaseDocument source=new CouchbaseDocument();
  source.put("_class",CustomEntity.class.getName());
  source.put("value",valueStr);
  CouchbaseList listOfValuesDoc=new CouchbaseList();
  listOfValuesDoc.put(valueStr);
  listOfValuesDoc.put(value2Str);
  source.put("listOfValues",listOfValuesDoc);
  CouchbaseDocument mapOfValuesDoc=new CouchbaseDocument();
  mapOfValuesDoc.put("val1",valueStr);
  mapOfValuesDoc.put("val2",value2Str);
  source.put("mapOfValues",mapOfValuesDoc);
  assertThat(valueStr).isEqualTo(((CouchbaseList)converted.getContent().get("listOfValues")).get(0));
  assertThat(value2Str).isEqualTo(((CouchbaseList)converted.getContent().get("listOfValues")).get(1));
  assertThat(converted.getContent().get("listOfValues").toString()).isEqualTo(source.getContent().get("listOfValues").toString());
  CouchbaseDocument sourceVals=(CouchbaseDocument)source.getContent().get("mapOfValues");
  CouchbaseDocument convertedVals=(CouchbaseDocument)converted.getContent().get("mapOfValues");
  assertThat(sourceVals.getContent().get("val1").toString()).isEqualTo(convertedVals.getContent().get("val1").toString());
  assertThat(sourceVals.getContent().get("val2").toString()).isEqualTo(convertedVals.getContent().get("val2").toString());
  CustomEntity readConverted=converter.read(CustomEntity.class,source);
  assertThat(readConverted.value).isEqualTo(value);
  assertThat(readConverted.listOfValues.get(0)).isEqualTo(listOfValues.get(0));
  assertThat(readConverted.listOfValues.get(1)).isEqualTo(listOfValues.get(1));
  assertThat(readConverted.mapOfValues.get("val1")).isEqualTo(mapOfValues.get("val1"));
  assertThat(readConverted.mapOfValues.get("val2")).isEqualTo(mapOfValues.get("val2"));
}
