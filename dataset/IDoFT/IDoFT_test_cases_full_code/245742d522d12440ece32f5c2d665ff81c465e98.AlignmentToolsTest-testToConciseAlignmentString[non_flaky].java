@Test public void testToConciseAlignmentString(){
  Map<Integer,Integer> test;
  String result, expected;
  int i=0;
  test=new LinkedHashMap<Integer,Integer>();
  test.put(1,2);
  test.put(2,3);
  test.put(3,4);
  test.put(7,8);
  expected="1>2>3>4 7>8";
  result=AlignmentTools.toConciseAlignmentString(test);
  Assert.assertEquals((i++) + ". Linear strings.",expected,result);
  test=new LinkedHashMap<Integer,Integer>();
  test.put(1,2);
  test.put(2,3);
  test.put(3,1);
  test.put(7,7);
  expected="1>2>3>1 7>7";
  result=AlignmentTools.toConciseAlignmentString(test);
  Assert.assertEquals((i++) + ". Cycles.",expected,result);
  test=new LinkedHashMap<Integer,Integer>();
  test.put(1,2);
  test.put(2,3);
  test.put(3,1);
  test.put(7,7);
  expected="1>2>3>1 7>7";
  result=AlignmentTools.toConciseAlignmentString(test);
  Assert.assertEquals((i++) + ". Complex.",expected,result);
  test=new LinkedHashMap<Integer,Integer>();
  test.put(1,2);
  test.put(2,3);
  test.put(3,4);
  test.put(4,5);
  test.put(5,6);
  test.put(6,7);
  test.put(7,3);
  test.put(8,4);
  test.put(9,11);
  test.put(11,10);
  test.put(10,9);
  expected="1>2>3>4>5>6>7>3 8>4 9>11>10>9";
  result=AlignmentTools.toConciseAlignmentString(test);
  Assert.assertEquals((i++) + ". Complex.",expected,result);
  test.remove(2);
  expected="1>2 3>4>5>6>7>3 8>4 9>11>10>9";
  result=AlignmentTools.toConciseAlignmentString(test);
  Assert.assertEquals((i++) + ". Sub-optimal arrangement",expected,result);
  Map<Integer,Double> test2=new LinkedHashMap<Integer,Double>();
  test2.put(1,12.);
  test2.put(2,13.);
  test2.put(3,14.);
  test2.put(4,15.);
  test2.put(5,16.);
  test2.put(6,17.);
  test2.put(7,13.);
  test2.put(8,14.);
  test2.put(9,21.);
  test2.put(11,20.);
  test2.put(10,19.);
  expected="1>2>3>4>5>6>7>3 8>4 9>11>10>9";
  Map<Double,Integer> inverse=new OffsetMap(-10);
  result=AlignmentTools.toConciseAlignmentString(test2,inverse);
  Assert.assertEquals((i++) + ". Inverse.",expected,result);
}
