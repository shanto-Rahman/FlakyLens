@Test public void extensions_simple() throws Exception {
  Map<String,Object> attributes=new HashMap<>();
  attributes.put(CDIConstants.REQUIREMENT_BEANS_ATTRIBUTE,Arrays.asList("org.apache.aries.cdi.container.test.beans.BarAnnotated","org.apache.aries.cdi.container.test.beans.FooAnnotated","org.apache.aries.cdi.container.test.beans.FooWithReferenceAndConfig"));
  when(bundle.adapt(BundleWiring.class).getRequiredWires(ExtenderNamespace.EXTENDER_NAMESPACE).get(0).getRequirement().getAttributes()).thenReturn(attributes);
  BundleWire wire0=mock(BundleWire.class);
  BundleRequirement req0=mock(BundleRequirement.class);
  BundleRevision rev0=mock(BundleRevision.class);
  BundleWire wire1=mock(BundleWire.class);
  BundleRequirement req1=mock(BundleRequirement.class);
  BundleRevision rev1=mock(BundleRevision.class);
  when(bundle.adapt(BundleWiring.class).getRequiredWires(CDIConstants.CDI_EXTENSION_PROPERTY)).thenReturn(Arrays.asList(wire0,wire1));
  when(wire0.getRequirement()).thenReturn(req0);
  when(wire0.getProvider()).thenReturn(rev0);
  when(rev0.getBundle()).thenReturn(bundle);
  when(req0.getDirectives()).thenReturn(Collections.singletonMap(Namespace.REQUIREMENT_FILTER_DIRECTIVE,"(foo=name)"));
  when(wire1.getRequirement()).thenReturn(req1);
  when(wire1.getProvider()).thenReturn(rev1);
  when(rev1.getBundle()).thenReturn(bundle);
  when(req1.getDirectives()).thenReturn(Collections.singletonMap(Namespace.REQUIREMENT_FILTER_DIRECTIVE,"(fum=bar)"));
  ContainerState containerState=new ContainerState(bundle,ccrBundle,ccrChangeCount,promiseFactory,null,new Logs.Builder(bundle.getBundleContext()).build());
  CDIBundle cdiBundle=new CDIBundle(ccr,containerState,null);
  cdiBundle.start();
  ContainerDTO containerDTO=containerState.containerDTO();
  assertNotNull(containerDTO);
  assertNotNull(containerDTO.bundle);
  assertEquals(1,containerDTO.bundle.id);
  assertEquals(24l,containerDTO.bundle.lastModified);
  assertEquals(Bundle.ACTIVE,containerDTO.bundle.state);
  assertEquals("foo",containerDTO.bundle.symbolicName);
  assertEquals("1.0.0",containerDTO.bundle.version);
  assertEquals(1,containerDTO.changeCount);
  assertTrue(containerDTO.components + "",containerDTO.components.isEmpty());
  assertTrue(containerDTO.errors + "",containerDTO.errors.isEmpty());
  assertTrue(containerDTO.extensions + "",containerDTO.extensions.isEmpty());
  assertNotNull(containerDTO.template);
  assertEquals(2,containerDTO.template.components.size());
  assertEquals(2,containerDTO.template.extensions.size());
  assertEquals("(&(foo=name)(service.bundleid=1))",containerDTO.template.extensions.get(0).serviceFilter);
  assertEquals("(&(fum=bar)(service.bundleid=1))",containerDTO.template.extensions.get(1).serviceFilter);
  assertEquals("foo",containerDTO.template.id);
  cdiBundle.destroy();
}
