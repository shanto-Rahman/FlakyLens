@Test public void testShibbolethAuthenticationModule() throws Exception {
  FocusComponent focusComponent=osgi.jicofoServices.getFocusComponent();
  ShibbolethAuthAuthority shibbolethAuth=(ShibbolethAuthAuthority)ServiceUtils2.getService(FocusBundleActivator.bundleContext,AuthenticationAuthority.class);
  assertNotNull(shibbolethAuth);
  EntityBareJid user1Jid=JidCreate.entityBareFrom("user1@server.net");
  String user1MachineUid="machine1uid";
  String user1ShibbolethIdentity="user1@shibboleth.idp.com";
  Jid user2Jid=JidCreate.from("user2@server.net");
  String user2MachineUid="machine2uid";
  String user2ShibbolethIdentity="user2@shibboleth.idp.com";
  boolean roomExists=false;
  EntityBareJid room1=JidCreate.entityBareFrom("testroom1@example.com");
  ConferenceIq query=new ConferenceIq();
  ConferenceIq response=new ConferenceIq();
  query.setFrom(user1Jid);
  query.setMachineUID(user1MachineUid);
  query.setRoom(room1);
  IQ authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertEquals(XMPPError.Condition.not_authorized,authError.getError().getCondition());
  String user1Session=shibbolethAuth.authenticateUser(user1MachineUid,user1ShibbolethIdentity,room1,null);
  query.setSessionId(user1Session);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNull(authError);
  roomExists=true;
  query.setSessionId(null);
  query.setFrom(user2Jid);
  query.setMachineUID(user2MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNull(authError);
  roomExists=true;
  query.setSessionId("someinvalidsessionid");
  query.setFrom(user2Jid);
  query.setMachineUID(user2MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertNotNull(authError.getError().getExtension(SessionInvalidPacketExtension.ELEMENT_NAME,SessionInvalidPacketExtension.NAMESPACE));
  roomExists=true;
  String user2Session=shibbolethAuth.authenticateUser(user2MachineUid,user2ShibbolethIdentity,room1,null);
  query.setSessionId(user2Session);
  query.setFrom(user2Jid);
  query.setMachineUID(user2MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNull(authError);
  query.setSessionId(user2Session);
  query.setFrom(user1Jid);
  query.setMachineUID(user1MachineUid);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertEquals(XMPPError.Condition.not_acceptable,authError.getError().getCondition());
  query.setFrom(user1Jid);
  query.setSessionId(user1ShibbolethIdentity);
  query.setMachineUID(null);
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNotNull(authError);
  assertNotNull(XMPPError.Condition.not_acceptable.toString(),authError.getError().getCondition());
  String user3machineUID="machine3UID";
  String user3Session=shibbolethAuth.authenticateUser(user3machineUID,user1ShibbolethIdentity,room1,null);
  assertNotNull(user3Session);
  assertNotEquals(user1Session,user3Session);
  query.setFrom(user1Jid);
  query.setMachineUID(user3machineUID);
  query.setSessionId(user3Session);
  roomExists=false;
  authError=focusComponent.processExtensions(query,response,roomExists);
  assertNull(authError);
}
