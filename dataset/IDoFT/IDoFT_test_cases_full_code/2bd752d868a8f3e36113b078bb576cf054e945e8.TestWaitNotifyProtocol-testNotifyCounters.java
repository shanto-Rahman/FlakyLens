@Test public void testNotifyCounters() throws Exception {
  doAnswer(successfulReplace).when(cache).replace(any(),any(),any());
  final WaitNotifyProtocol protocol=new WaitNotifyProtocol(cache);
  final String signalId="signal-id";
  protocol.notify(signalId,"a",1,null);
  protocol.notify(signalId,"a",1,null);
  AtomicCacheEntry<String,String,Long> cacheEntry=cacheEntries.get("signal-id");
  assertEquals(2,cacheEntry.getRevision().orElse(-1L).longValue());
  assertEquals("{\"counts\":{\"a\":2},\"attributes\":{},\"releasableCount\":0}",cacheEntry.getValue());
  protocol.notify(signalId,"a",10,null);
  cacheEntry=cacheEntries.get("signal-id");
  assertEquals(3,cacheEntry.getRevision().orElse(-1L).longValue());
  assertEquals("{\"counts\":{\"a\":12},\"attributes\":{},\"releasableCount\":0}",cacheEntry.getValue());
  protocol.notify(signalId,"b",2,null);
  protocol.notify(signalId,"c",3,null);
  cacheEntry=cacheEntries.get("signal-id");
  assertEquals(5,cacheEntry.getRevision().orElse(-1L).longValue());
  assertEquals("{\"counts\":{\"a\":12,\"b\":2,\"c\":3},\"attributes\":{},\"releasableCount\":0}",cacheEntry.getValue());
  final Map<String,Integer> deltas=new HashMap<>();
  deltas.put("a",10);
  deltas.put("b",25);
  protocol.notify("signal-id",deltas,null);
  cacheEntry=cacheEntries.get("signal-id");
  assertEquals(6,cacheEntry.getRevision().orElse(-1L).longValue());
  assertEquals("{\"counts\":{\"a\":22,\"b\":27,\"c\":3},\"attributes\":{},\"releasableCount\":0}",cacheEntry.getValue());
  protocol.notify("signal-id","b",0,null);
  cacheEntry=cacheEntries.get("signal-id");
  assertEquals(7,cacheEntry.getRevision().orElse(-1L).longValue());
  assertEquals("{\"counts\":{\"a\":22,\"b\":0,\"c\":3},\"attributes\":{},\"releasableCount\":0}",cacheEntry.getValue());
}
