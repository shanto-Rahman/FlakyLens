@Test public void shouldRetrieveLogEntries(){
  Level originalLevel=ConfigurationProperties.logLevel();
  try {
    ConfigurationProperties.logLevel("INFO");
    httpState.log(new LogEntry().setLogLevel(INFO).setType(NO_MATCH_RESPONSE).setHttpRequest(request("request_one")).setExpectation(new Expectation(request("request_one")).withId("key_one").thenRespond(response("response_two"))).setMessageFormat("no expectation for:{}returning response:{}").setArguments(request("request_one"),notFoundResponse()));
    httpState.log(new LogEntry().setLogLevel(INFO).setType(EXPECTATION_RESPONSE).setHttpRequest(request("request_two")).setHttpResponse(response("response_two")).setMessageFormat("returning error:{}for request:{}for action:{}").setArguments(request("request_two"),response("response_two"),response("response_two")));
    httpState.log(new LogEntry().setLogLevel(INFO).setType(EXPECTATION_MATCHED).setHttpRequest(request("request_one")).setExpectation(new Expectation(request("request_one")).withId("key_one").thenRespond(response("response_two"))).setMessageFormat("request:{}matched expectation:{}").setArguments(request("request_one"),new Expectation(request("request_one")).withId("key_one").thenRespond(response("response_two"))));
    httpState.log(new LogEntry().setLogLevel(INFO).setType(EXPECTATION_MATCHED).setHttpRequest(request("request_two")).setExpectation(new Expectation(request("request_two")).withId("key_two").thenRespond(response("response_two"))).setMessageFormat("request:{}matched expectation:{}").setArguments(request("request_two"),new Expectation(request("request_two")).withId("key_two").thenRespond(response("response_two"))));
    httpState.log(new LogEntry().setType(TRACE).setLogLevel(INFO).setHttpRequest(request("request_four")).setExpectation(new Expectation(request("request_four")).withId("key_four").thenRespond(response("response_four"))).setMessageFormat("some random{}message").setArguments("argument_one"));
    HttpResponse response=httpState.retrieve(request().withQueryStringParameter("type","logs"));
    assertThat(response,is(response().withBody("" + LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis())) + " - no expectation for:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"path\" : \"request_one\""+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ " returning response:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"statusCode\" : 404,"+ NEW_LINE+ "    \"reasonPhrase\" : \"Not Found\""+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ "------------------------------------"+ NEW_LINE+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ " - returning error:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"path\" : \"request_two\""+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ " for request:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"statusCode\" : 200,"+ NEW_LINE+ "    \"reasonPhrase\" : \"OK\","+ NEW_LINE+ "    \"body\" : \"response_two\""+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ " for action:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"statusCode\" : 200,"+ NEW_LINE+ "    \"reasonPhrase\" : \"OK\","+ NEW_LINE+ "    \"body\" : \"response_two\""+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ "------------------------------------"+ NEW_LINE+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ " - request:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"path\" : \"request_one\""+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ " matched expectation:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"id\" : \"key_one\","+ NEW_LINE+ "    \"priority\" : 0,"+ NEW_LINE+ "    \"httpRequest\" : {"+ NEW_LINE+ "      \"path\" : \"request_one\""+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"times\" : {"+ NEW_LINE+ "      \"unlimited\" : true"+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"timeToLive\" : {"+ NEW_LINE+ "      \"unlimited\" : true"+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"httpResponse\" : {"+ NEW_LINE+ "      \"statusCode\" : 200,"+ NEW_LINE+ "      \"reasonPhrase\" : \"OK\","+ NEW_LINE+ "      \"body\" : \"response_two\""+ NEW_LINE+ "    }"+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ "------------------------------------"+ NEW_LINE+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ " - request:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"path\" : \"request_two\""+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ " matched expectation:"+ NEW_LINE+ NEW_LINE+ "  {"+ NEW_LINE+ "    \"id\" : \"key_two\","+ NEW_LINE+ "    \"priority\" : 0,"+ NEW_LINE+ "    \"httpRequest\" : {"+ NEW_LINE+ "      \"path\" : \"request_two\""+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"times\" : {"+ NEW_LINE+ "      \"unlimited\" : true"+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"timeToLive\" : {"+ NEW_LINE+ "      \"unlimited\" : true"+ NEW_LINE+ "    },"+ NEW_LINE+ "    \"httpResponse\" : {"+ NEW_LINE+ "      \"statusCode\" : 200,"+ NEW_LINE+ "      \"reasonPhrase\" : \"OK\","+ NEW_LINE+ "      \"body\" : \"response_two\""+ NEW_LINE+ "    }"+ NEW_LINE+ "  }"+ NEW_LINE+ NEW_LINE+ "------------------------------------"+ NEW_LINE+ LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis()))+ " - some random"+ NEW_LINE+ NEW_LINE+ "  argument_one"+ NEW_LINE+ NEW_LINE+ " message"+ NEW_LINE,MediaType.PLAIN_TEXT_UTF_8).withStatusCode(200)));
  }
  finally {
    ConfigurationProperties.logLevel(originalLevel.name());
  }
}
