@Test public void testCreateTableWithRegions() throws IOException {
assertEquals("Tried to create " + expectedRegions + " regions "+ "but only found "+ regions.size(),expectedRegions,regions.size());
assertTrue(hri.getStartKey() == null || hri.getStartKey().length == 0);
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[0]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[0]));
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[1]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[1]));
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[2]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[2]));
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[3]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[3]));
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[4]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[4]));
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[5]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[5]));
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[6]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[6]));
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[7]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[7]));
assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[8]));
assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[8]));
assertTrue(hri.getEndKey() == null || hri.getEndKey().length == 0);
assertEquals("Tried to create " + expectedRegions + " regions "+ "but only found "+ regions.size(),expectedRegions,regions.size());
assertTrue(hri.getStartKey() == null || hri.getStartKey().length == 0);
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{1,1,1,1,1,1,1,1,1,1}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{1,1,1,1,1,1,1,1,1,1}));
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{2,2,2,2,2,2,2,2,2,2}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{2,2,2,2,2,2,2,2,2,2}));
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{3,3,3,3,3,3,3,3,3,3}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{3,3,3,3,3,3,3,3,3,3}));
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{4,4,4,4,4,4,4,4,4,4}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{4,4,4,4,4,4,4,4,4,4}));
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{5,5,5,5,5,5,5,5,5,5}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{5,5,5,5,5,5,5,5,5,5}));
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{6,6,6,6,6,6,6,6,6,6}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{6,6,6,6,6,6,6,6,6,6}));
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{7,7,7,7,7,7,7,7,7,7}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{7,7,7,7,7,7,7,7,7,7}));
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{8,8,8,8,8,8,8,8,8,8}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{8,8,8,8,8,8,8,8,8,8}));
assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{9,9,9,9,9,9,9,9,9,9}));
assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{9,9,9,9,9,9,9,9,9,9}));
assertTrue(hri.getEndKey() == null || hri.getEndKey().length == 0);
assertEquals("Tried to create " + expectedRegions + " regions "+ "but only found "+ regions.size(),expectedRegions,regions.size());
assertTrue("Should not be able to create this table because of " + "duplicate split keys",false);
}