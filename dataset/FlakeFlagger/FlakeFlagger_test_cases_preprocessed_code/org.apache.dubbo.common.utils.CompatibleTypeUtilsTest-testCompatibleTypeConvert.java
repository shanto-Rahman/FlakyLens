@SuppressWarnings("unchecked") @Test public void testCompatibleTypeConvert() throws Exception {
assertSame(input,result);
assertSame(input,result);
assertNull(result);
assertEquals(Character.valueOf('a'),(Character)result);
assertEquals(MyEnum.A,(MyEnum)result);
assertEquals(new BigInteger("3"),(BigInteger)result);
assertEquals(new BigDecimal("3"),(BigDecimal)result);
assertEquals(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("2011-12-11 12:24:12"),(Date)result);
assertEquals(new SimpleDateFormat("yyyy-MM-dd").format((java.sql.Date)result),"2011-12-11");
assertEquals(new SimpleDateFormat("HH:mm:ss").format((java.sql.Time)result),"12:24:12");
assertEquals(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format((java.sql.Timestamp)result),"2011-12-11 12:24:12");
assertEquals(2,((char[])result).length);
assertEquals('a',((char[])result)[0]);
assertEquals('b',((char[])result)[1]);
assertEquals(0,((char[])result).length);
assertEquals(null,result);
assertEquals(Byte.valueOf((byte)3),(Byte)result);
assertEquals(Integer.valueOf(3),(Integer)result);
assertEquals(Short.valueOf((short)3),(Short)result);
assertEquals(Integer.valueOf(3),(Integer)result);
assertEquals(Integer.valueOf(3),(Integer)result);
assertEquals(Long.valueOf(3),(Long)result);
assertEquals(Integer.valueOf(3),(Integer)result);
assertEquals(BigInteger.valueOf(3L),(BigInteger)result);
assertEquals(Integer.valueOf(3),(Integer)result);
assertEquals(Float.valueOf(3),(Float)result);
assertEquals(Double.valueOf(3),(Double)result);
assertEquals(Double.valueOf(3),(Double)result);
assertEquals(BigDecimal.valueOf(3D),(BigDecimal)result);
assertEquals(Double.valueOf(3),(Double)result);
assertEquals(ArrayList.class,result.getClass());
assertEquals(2,((List<String>)result).size());
assertTrue(((List<String>)result).contains("a"));
assertTrue(((List<String>)result).contains("b"));
assertEquals(ArrayList.class,result.getClass());
assertEquals(2,((List<String>)result).size());
assertTrue(((List<String>)result).contains("a"));
assertTrue(((List<String>)result).contains("b"));
assertEquals(CopyOnWriteArrayList.class,result.getClass());
assertEquals(2,((List<String>)result).size());
assertTrue(((List<String>)result).contains("a"));
assertTrue(((List<String>)result).contains("b"));
assertEquals(CopyOnWriteArrayList.class,result.getClass());
assertEquals(2,((List<String>)result).size());
assertTrue(((List<String>)result).contains("a"));
assertTrue(((List<String>)result).contains("b"));
assertEquals(String[].class,result.getClass());
assertEquals(2,((String[])result).length);
assertTrue(((String[])result)[0].equals("a") || ((String[])result)[0].equals("b"));
assertTrue(((String[])result)[1].equals("a") || ((String[])result)[1].equals("b"));
assertEquals(HashSet.class,result.getClass());
assertEquals(2,((Set<String>)result).size());
assertTrue(((Set<String>)result).contains("a"));
assertTrue(((Set<String>)result).contains("b"));
assertEquals(HashSet.class,result.getClass());
assertEquals(2,((Set<String>)result).size());
assertTrue(((Set<String>)result).contains("a"));
assertTrue(((Set<String>)result).contains("b"));
assertEquals(ConcurrentHashSet.class,result.getClass());
assertEquals(2,((Set<String>)result).size());
assertTrue(((Set<String>)result).contains("a"));
assertTrue(((Set<String>)result).contains("b"));
assertEquals(ConcurrentHashSet.class,result.getClass());
assertEquals(2,((Set<String>)result).size());
assertTrue(((Set<String>)result).contains("a"));
assertTrue(((Set<String>)result).contains("b"));
assertEquals(String[].class,result.getClass());
assertEquals(2,((String[])result).length);
assertTrue(((String[])result)[0].equals("a"));
assertTrue(((String[])result)[1].equals("b"));
}