@Deployment public void testVariableUpdates(){
assertNotNull(historicStartEvent);
assertNotNull(waitStateActivity);
assertNotNull(serviceTaskActivity);
assertEquals(10,historicDetails.size());
assertEquals("bytes",historicVariableUpdate.getVariableName());
assertEquals(":-(",new String((byte[])historicVariableUpdate.getValue()));
assertEquals(0,historicVariableUpdate.getRevision());
assertNull(historicVariableUpdate.getActivityInstanceId());
assertEquals("bytes",historicVariableUpdate.getVariableName());
assertEquals(":-)",new String((byte[])historicVariableUpdate.getValue()));
assertEquals(1,historicVariableUpdate.getRevision());
assertNull(historicVariableUpdate.getActivityInstanceId());
assertEquals("character",historicVariableUpdate.getVariableName());
assertEquals("a",historicVariableUpdate.getValue());
assertEquals(0,historicVariableUpdate.getRevision());
assertNull(historicVariableUpdate.getActivityInstanceId());
assertEquals("number",historicVariableUpdate.getVariableName());
assertEquals("one",historicVariableUpdate.getValue());
assertEquals(0,historicVariableUpdate.getRevision());
assertNull(historicVariableUpdate.getActivityInstanceId());
assertEquals("number",historicVariableUpdate.getVariableName());
assertEquals("two",historicVariableUpdate.getValue());
assertEquals(1,historicVariableUpdate.getRevision());
assertNull(historicVariableUpdate.getActivityInstanceId());
assertEquals("zVar1",historicVariableUpdate.getVariableName());
assertEquals("Event: start",historicVariableUpdate.getValue());
assertEquals(0,historicVariableUpdate.getRevision());
assertNull(historicVariableUpdate.getActivityInstanceId());
assertEquals("zVar2",historicVariableUpdate.getVariableName());
assertEquals("Event: take",historicVariableUpdate.getValue());
assertEquals(0,historicVariableUpdate.getRevision());
assertNull(historicVariableUpdate.getActivityInstanceId());
assertEquals("zVar3",historicVariableUpdate.getVariableName());
assertEquals("Event: start",historicVariableUpdate.getValue());
assertEquals(0,historicVariableUpdate.getRevision());
assertEquals(serviceTaskActivity.getId(),historicVariableUpdate.getActivityInstanceId());
assertEquals("zVar4",historicVariableUpdate.getVariableName());
assertEquals("Event: end",historicVariableUpdate.getValue());
assertEquals(0,historicVariableUpdate.getRevision());
assertEquals(serviceTaskActivity.getId(),historicVariableUpdate.getActivityInstanceId());
assertEquals("zzz",historicVariableUpdate.getVariableName());
assertEquals(123456789L,historicVariableUpdate.getValue());
assertEquals(0,historicVariableUpdate.getRevision());
assertEquals(serviceTaskActivity.getId(),historicVariableUpdate.getActivityInstanceId());
assertEquals(8,historicProcessVariableQuery.count());
assertEquals("bytes",historicVariable.getVariableName());
assertEquals(":-)",new String((byte[])historicVariable.getValue()));
assertNotNull(historicVariable.getCreateTime());
assertNotNull(historicVariable.getLastUpdatedTime());
assertEquals("character",historicVariable.getVariableName());
assertEquals("a",historicVariable.getValue());
assertNotNull(historicVariable.getCreateTime());
assertNotNull(historicVariable.getLastUpdatedTime());
assertEquals("number",historicVariable.getVariableName());
assertEquals("two",historicVariable.getValue());
assertNotNull(historicVariable.getCreateTime());
assertNotNull(historicVariable.getLastUpdatedTime());
assertNotSame(historicVariable.getCreateTime(),historicVariable.getLastUpdatedTime());
assertEquals("zVar1",historicVariable.getVariableName());
assertEquals("Event: start",historicVariable.getValue());
assertNotNull(historicVariable.getCreateTime());
assertNotNull(historicVariable.getLastUpdatedTime());
assertEquals("zVar2",historicVariable.getVariableName());
assertEquals("Event: take",historicVariable.getValue());
assertNotNull(historicVariable.getCreateTime());
assertNotNull(historicVariable.getLastUpdatedTime());
assertEquals("zVar3",historicVariable.getVariableName());
assertEquals("Event: start",historicVariable.getValue());
assertNotNull(historicVariable.getCreateTime());
assertNotNull(historicVariable.getLastUpdatedTime());
assertEquals("zVar4",historicVariable.getVariableName());
assertEquals("Event: end",historicVariable.getValue());
assertNotNull(historicVariable.getCreateTime());
assertNotNull(historicVariable.getLastUpdatedTime());
assertEquals("zzz",historicVariable.getVariableName());
assertEquals(123456789L,historicVariable.getValue());
assertNotNull(historicVariable.getCreateTime());
assertNotNull(historicVariable.getLastUpdatedTime());
assertNotNull(historicVariable);
assertEquals("number",historicVariable.getVariableName());
assertEquals("two",historicVariable.getValue());
assertNotNull(historicVariable);
assertEquals("number",historicVariable.getVariableName());
assertEquals("two",historicVariable.getValue());
assertNull(historicVariable);
}