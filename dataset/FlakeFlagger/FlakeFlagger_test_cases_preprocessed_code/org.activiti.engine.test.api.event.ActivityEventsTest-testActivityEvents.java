/** 
 * Test starting and completed events for activity. Since these events are dispatched in the core of the PVM, not all individual activity-type is tested. Rather, we test the main types (tasks, gateways, events, subprocesses).
 */
@Deployment public void testActivityEvents() throws Exception {
assertNotNull(processInstance);
assertEquals(3,listener.getEventsReceived().size());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("theStart",activityEvent.getActivityId());
assertTrue(!processInstance.getId().equals(activityEvent.getExecutionId()));
assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("theStart",activityEvent.getActivityId());
assertTrue(!processInstance.getId().equals(activityEvent.getExecutionId()));
assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("shipOrder",activityEvent.getActivityId());
assertTrue(!processInstance.getId().equals(activityEvent.getExecutionId()));
assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
assertNotNull(task);
assertNotNull(execution);
assertEquals(5,listener.getEventsReceived().size());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("shipOrder",activityEvent.getActivityId());
assertTrue(!processInstance.getId().equals(activityEvent.getExecutionId()));
assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("subProcess",activityEvent.getActivityId());
assertEquals(execution.getId(),activityEvent.getExecutionId());
assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("subProcessStart",activityEvent.getActivityId());
assertTrue(!execution.getId().equals(activityEvent.getExecutionId()));
assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("subProcessStart",activityEvent.getActivityId());
assertTrue(!execution.getId().equals(activityEvent.getExecutionId()));
assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("subTask",activityEvent.getActivityId());
assertTrue(!execution.getId().equals(activityEvent.getExecutionId()));
assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
assertNotNull(subTask);
assertEquals(10,listener.getEventsReceived().size());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("subTask",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("gateway",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("gateway",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("throwMessageEvent",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("throwMessageEvent",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("endSubProcess",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("endSubProcess",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("subProcess",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());
assertEquals("theEnd",activityEvent.getActivityId());
assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());
assertEquals("theEnd",activityEvent.getActivityId());
}