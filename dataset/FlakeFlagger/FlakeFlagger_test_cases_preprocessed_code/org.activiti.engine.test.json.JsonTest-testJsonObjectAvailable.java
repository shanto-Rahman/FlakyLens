@Deployment public void testJsonObjectAvailable(){
assertNotNull(value);
assertEquals("myValue",value.get("var").asText());
assertNotNull(value);
assertEquals("myValue",value.get("var").asText());
assertEquals("myOtherValue",value.get("var2").asText());
assertNotNull(task);
assertNotNull(value);
assertEquals("myValue",value.get("var").asText());
assertEquals("myOtherValue",value.get("var2").asText());
assertEquals("myThirdValue",value.get("var3").asText());
assertNotNull(value);
assertEquals(createBigJsonObject().toString(),value.toString());
assertNotNull(task);
assertEquals("userTaskSuccess",task.getTaskDefinitionKey());
if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {
assertEquals(2,historicVariableInstances.size());
assertEquals(BIG_JSON_OBJ,historicVariableInstances.get(0).getVariableName());
assertNotNull(value);
assertEquals(createBigJsonObject().toString(),value.toString());
assertEquals(MY_JSON_OBJ,historicVariableInstances.get(1).getVariableName());
assertNotNull(value);
assertEquals("myValue",value.get("var").asText());
assertEquals("myOtherValue",value.get("var2").asText());
assertEquals("myThirdValue",value.get("var3").asText());
}
assertNull(runtimeService.getVariable(processInstance.getId(),MY_JSON_OBJ));
assertNull(runtimeService.getVariable(processInstance.getId(),BIG_JSON_OBJ));
}