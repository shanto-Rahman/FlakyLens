@Test public void should_return_entities_for_typed_query_with_simple_select() throws Exception {
assertThat(actual).hasSize(2);
assertThat(target1.getAge()).isNull();
assertThat(target1.getFollowers()).isNull();
assertThat(target1.getLabel()).isNull();
assertThat(target1.getPreferences()).isNull();
assertThat(target1.getWelcomeTweet()).isNull();
assertThat(target2.getAge()).isNull();
assertThat(target2.getFollowers()).isNull();
assertThat(target2.getLabel()).isNull();
assertThat(target2.getPreferences()).isNull();
assertThat(target2.getWelcomeTweet()).isNull();
if (found1.getId().equals(entity1.getId())) {
assertThat(Factory.class.isAssignableFrom(found1.getClass())).isTrue();
assertThat(found1.getId()).isEqualTo(reference.getId());
assertThat(found1.getName()).isEqualTo(reference.getName());
assertThat(found1.getFriends()).containsAll(reference.getFriends());
assertThat(Factory.class.isAssignableFrom(found2.getClass())).isTrue();
assertThat(found2.getId()).isEqualTo(reference.getId());
assertThat(found2.getName()).isEqualTo(reference.getName());
assertThat(found2.getFriends()).containsAll(reference.getFriends());
assertThat(Factory.class.isAssignableFrom(found1.getClass())).isTrue();
assertThat(found1.getId()).isEqualTo(reference.getId());
assertThat(found1.getName()).isEqualTo(reference.getName());
assertThat(found1.getFriends()).containsAll(reference.getFriends());
assertThat(Factory.class.isAssignableFrom(found2.getClass())).isTrue();
assertThat(found2.getId()).isEqualTo(reference.getId());
assertThat(found2.getName()).isEqualTo(reference.getName());
assertThat(found2.getFriends()).containsAll(reference.getFriends());
}
}