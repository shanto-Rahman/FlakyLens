Project_Group,Test_case,Tokens(Sorted by Importance),Attribution_Scores(Sorted),Predicted_Class,True_Class,Test_Pred_Logit,Test_Confidence_Score
3,"['@Test\npublic void testGetPartialRepairTasks() {\n    Node node = mockNode(""DC1"");\n    Node node2 = mockNode(""DC1"");\n    ImmutableList<LongTokenRange> vnodes = ImmutableList.of(new LongTokenRange(1, 2), new LongTokenRange(2, 3), new LongTokenRange(4, 5));\n    ReplicaRepairGroup replicaRepairGroup = new ReplicaRepairGroup(ImmutableSet.of(node, node2), vnodes);\n    RepairGroup repairGroup = builderFor(replicaRepairGroup).build(priority);\n    Collection<RepairTask> tasks = repairGroup.getRepairTasks();\n    assertThat(tasks.size()).isEqualTo(3);\n    Set<LongTokenRange> repairTaskRanges = new HashSet<>();\n    for (RepairTask repairTask : tasks) {\n        assertThat(repairTask.getTokenRanges().size()).isEqualTo(1);\n        LongTokenRange range = repairTask.getTokenRanges().iterator().next();\n        repairTaskRanges.add(range);\n        assertThat(repairTask.getReplicas()).containsExactlyInAnyOrder(node, node2);\n        assertThat(repairTask.getTableReference()).isEqualTo(tableReference);\n        assertThat(repairTask.getRepairConfiguration().getRepairParallelism()).isEqualTo(PARALLEL);\n    }\n    assertThat(repairTaskRanges).containsExactlyElementsOf(vnodes);\n}']",priority;Set;qual;repair;Node;build;Hash;Repair;node;Range,2.9802322387695312e-08;1.1641532182693481e-08;6.51925802230835e-09;6.05359673500061e-09;5.587935447692871e-09;5.587935447692871e-09;5.587935447692871e-09;5.587935447692871e-09;5.587935447692871e-09;5.238689482212067e-09,3,3,"[-1.3679929971694946, -3.0195863246917725, -4.007565498352051, -0.40354105830192566, -5.319878101348877, -5.1958441734313965]",0.6679506301879883
3,"['@Test\npublic void testGenerateNewDayPairs() {\n    PairCombinations pairs = getPairsList();\n    List<Developer> devs = getStandardDevs();\n    List<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");\n    Map<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);\n    subject.buildDevelopersPairingDays(pairs, devs);\n    DayPairs dayPairs = subject.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());\n    assertThat(dayPairs.getTracks().size(), is(2));\n    assertThat(dayPairs.getTracks(), contains(""track1"", ""track2""));\n    assertThat(dayPairs.getPairByTrack(""track1""),\n    is(not(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))))));\n    assertThat(dayPairs.getPairByTrack(""track2""),\n    is(not(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4""))))));\n    boolean trackOneHasContext = dayPairs.getPairByTrack(""track1"").getFirstDev().hasContext() || dayPairs.getPairByTrack(""track1"").getSecondDev().hasContext();\n    boolean trackTwoHasContext = dayPairs.getPairByTrack(""track2"").getFirstDev().hasContext() || dayPairs.getPairByTrack(""track2"").getSecondDev().hasContext();\n    assertThat(trackOneHasContext, is(true));\n    assertThat(trackTwoHasContext, is(true));\n}']",airing;Day;Weight;Standard;Days;List;airs;List;Weight;Standard,3.259629011154175e-09;3.259629011154175e-09;3.026798367500305e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09,3,3,"[-9.028377532958984, -10.222517013549805, -5.3256683349609375, -0.005355416797101498, -8.852339744567871, -8.64163875579834]",0.9946590065956116
3,"['@Test\npublic void kafkaTopicIsPattern() throws Exception {\n    to.expectedMessageCount(5);\n    to.expectedBodiesReceivedInAnyOrder(""message-0"", ""message-1"", ""message-2"", ""message-3"", ""message-4"");\n    to.allMessages().header(TOPIC).isEqualTo(""test"");\n    to.expectedHeaderValuesReceivedInAnyOrder(LAST_RECORD_BEFORE_COMMIT, null, null, null, null, null);\n    for (int k = 0; k < 5; k++) {\n        String msg = ""message-"" + k;\n        ProducerRecord<String, String> data = new ProducerRecord<>(TOPIC, ""1"", msg);\n        producer.send(data);\n    }\n    to.assertIsSatisfied(3000);\n    assertEquals(5, StreamSupport.stream(recordsCaptured.get(0).records(TOPIC).spliterator(), false).count());\n}']",Producer;Producer;Record;Record;to;send;stream;odies;new;TOPIC,1.341104507446289e-07;1.1920928955078125e-07;4.0978193283081055e-08;3.5390257835388184e-08;3.166496753692627e-08;2.9802322387695312e-08;1.6763806343078613e-08;1.4901161193847656e-08;1.30385160446167e-08;1.30385160446167e-08,0,4,"[-0.0012875846587121487, -7.017500400543213, -9.061071395874023, -9.568282127380371, -8.85362720489502, -9.691513061523438]",0.9987133741378784
3,"['@Test\npublic void extraSweepersGiveUpAfterFailingToAcquireEnoughTimes() throws InterruptedException {\n    int shards = 16;\n    int sweepers = 4;\n    int threads = shards / (sweepers / 2);\n    TimelockService stickyLockService = createStickyLockService();\n    createAndInitializeSweepersAndWaitForOneBackgroundIteration(sweepers, shards, threads, stickyLockService);\n    ArgumentCaptor<LockRequest> captor = ArgumentCaptor.forClass(LockRequest.class);\n    verify(stickyLockService, atLeast(shards * (shards / threads + 1) / 2 + shards * (threads * sweepers - shards)));\n    verify(stickyLockService, atMost(shards * ((threads + 1) * sweepers - shards) - sweepers * (sweepers - 1) / 2));\n    Set<String> requestedLockIds = captor.getAllValues().stream()\n    .map(LockRequest::getLockDescriptors)\n    .map(Iterables::getOnlyElement)\n    .map(LockDescriptor::getLockIdAsString)\n    .collect(Collectors.toSet());\n    Set<String> expectedLockIds = IntStream.range(0, shards).boxed()\n    .map(ShardAndStrategy::conservative)\n    .map(ShardAndStrategy::toText)\n    .collect(Collectors.toSet());\n    assertThat(requestedLockIds).hasSameElementsAs(expectedLockIds);\n}']",Timelock;map;Descriptors;get;shards;Service;Background;Exception;Set;Element,1.5425030142068863e-09;1.4551915228366852e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10,1,1,"[-9.002963066101074, -0.00033146608620882034, -9.172757148742676, -11.110854148864746, -10.151488304138184, -9.891594886779785]",0.9996685981750488
3,"['@Test\npublic void testMultiReaderIsAbleToSeekWithTimeOnMiddleOfTopic() throws Exception {\n    final String topicName = ""persistent"";\n    final int numOfMessage = 10;\n    final int halfMessages = numOfMessage / 2;\n    admin.topics().createPartitionedTopic(topicName, 3);\n    Producer<byte[]> producer = pulsarClient.newProducer().topic(topicName).create();\n    long l = System.currentTimeMillis();\n    for (int i = 0; i < numOfMessage; i++) {\n        producer.send(String.format(""msg num %d"", i).getBytes());\n    }\n    Reader<byte[]> reader = pulsarClient.newReader().topic(topicName).startMessageId(earliest).create();\n    int plusTime = (halfMessages + 1) * 100;\n    reader.seek(l + plusTime);\n    Set<String> messageSet = Sets.newHashSet();\n    for (int i = halfMessages + 1; i < numOfMessage; i++) {\n        Message<byte[]> message = reader.readNext();\n        String receivedMessage = new String(message.getData());\n        Assert.assertTrue(messageSet.add(receivedMessage), ""Received duplicate message "" + receivedMessage);\n    }\n    reader.close();\n    producer.close();\n}']",Mill;seek;earliest;Time;Time;Messages;Middle;num;producer;Bytes,4.016328603029251e-09;3.725290298461914e-09;3.026798367500305e-09;2.7939677238464355e-09;1.862645149230957e-09;1.673470251262188e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09,2,2,"[-9.435686111450195, -8.75799560546875, -0.0004323977918829769, -8.889557838439941, -10.226758003234863, -10.761553764343262]",0.9995676875114441
3,"['@Test\npublic void testReacquireLocksAfterSessionLost() throws Exception {\n    @Cleanup\n    MetadataStoreExtended store = MetadataStoreExtended.create(zks.getConnectionString(), MetadataStoreConfig.builder().sessionTimeoutMillis(2000).build());\n    BlockingQueue<SessionEvent> sessionEvents = new LinkedBlockingQueue<>();\n    store.registerSessionListener(sessionEvents::add);\n    @Cleanup\n    CoordinationService coordinationService = new CoordinationServiceImpl(store);\n    @Cleanup\n    LockManager<String> lm1 = coordinationService.getLockManager(String.class);\n    String path = newKey();\n    ResourceLock<String> lock = lm1.acquireLock(path, ""value-1"").join();\n    zks.expireSession(((ZKMetadataStore) (store)).getZkSessionId());\n    SessionEvent e = sessionEvents.poll(5, TimeUnit.SECONDS);\n    assertEquals(e, ConnectionLost);\n    e = sessionEvents.poll(10, TimeUnit.SECONDS);\n    assertEquals(e, SessionLost);\n    e = sessionEvents.poll(10, TimeUnit.SECONDS);\n    assertEquals(e, Reconnected);\n    e = sessionEvents.poll(10, TimeUnit.SECONDS);\n    assertEquals(e, SessionReestablished);\n    Awaitility.await().untilAsserted(() -> {\n        assertFalse(lock.getLockExpiredFuture().isDone());\n    });\n    assertTrue(store.get(path).join().isPresent());\n}']",Events;add;get;Linked;session;acquire;Connection;Service;After;Lock,9.313225746154785e-09;5.587935447692871e-09;3.259629011154175e-09;2.2118911147117615e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09,0,0,"[-0.0008011230966076255, -7.539858818054199, -9.048972129821777, -9.985028266906738, -9.586660385131836, -10.20175838470459]",0.9991990923881531
3,"['@Test\npublic void testConsumerBacklogEvictionTimeQuotaWithEmptyLedger() throws Exception {\n    assertEquals(admin.namespaces().getBacklogQuotaMap(""prop/ns-quota""), Maps.newHashMap());\n    admin.namespaces().setBacklogQuota(""prop/ns-quota"", BacklogQuota.builder().limitTime(TIME_TO_CHECK_BACKLOG_QUOTA).retentionPolicy(consumer_backlog_eviction).build(), message_age);\n    PulsarClient client = PulsarClient.builder().serviceUrl(adminUrl.toString()).statsInterval(0, TimeUnit.SECONDS).build();\n    final String topic = ""persistent"";\n    final String subName = ""c1"";\n    Consumer<byte[]> consumer = client.newConsumer().topic(topic).subscriptionName(subName).subscribe();\n    Producer<byte[]> producer = createProducer(client, topic);\n    producer.send(new byte[1024]);\n    consumer.receive();\n    admin.topics().unload(topic);\n    PersistentTopicInternalStats internalStats = admin.topics().getInternalStats(topic);\n    assertEquals(internalStats.ledgers.size(), 2);\n    assertEquals(internalStats.ledgers.get(1).entries, 0);\n    TopicStats stats = admin.topics().getStats(topic);\n    assertEquals(stats.getSubscriptions().get(subName).getMsgBacklog(), 1);\n    TimeUnit.SECONDS.sleep(TIME_TO_CHECK_BACKLOG_QUOTA);\n    Awaitility.await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofSeconds(TIME_TO_CHECK_BACKLOG_QUOTA)).untilAsserted(() -> {\n        rolloverStats();\n        PersistentTopicInternalStats latestInternalStats = admin.topics().getInternalStats(topic);\n        assertEquals(latestInternalStats.ledgers.size(), 2);\n        assertEquals(latestInternalStats.ledgers.get(1).entries, 0);\n        TopicStats latestStats = admin.topics().getStats(topic);\n        assertEquals(latestStats.getSubscriptions().get(subName).getMsgBacklog(), 0);\n    });\n    client.close();\n}']",Backlog;BACKLOG;Unit;Time;Backlog;limit;Time;CHECK;Url;poll,4.6566128730773926e-09;3.259629011154175e-09;3.259629011154175e-09;3.14321368932724e-09;2.9103830456733704e-09;2.7939677238464355e-09;2.561137080192566e-09;2.561137080192566e-09;1.862645149230957e-09;1.862645149230957e-09,0,0,"[-0.0008114859228953719, -7.548858165740967, -8.96051025390625, -9.952765464782715, -9.55136775970459, -10.196220397949219]",0.9991888403892517
3,"['@Test\npublic void testTopicLevelInActiveTopicApi() throws Exception {\n    super.resetConfig();\n    conf.setSystemTopicEnabled(true);\n    conf.setTopicLevelPoliciesEnabled(true);\n    super.baseSetup();\n    Thread.sleep(2000);\n    final String topicName = ""persistent://prop/ns-abc/testMaxInactiveDuration-"" + UUID.randomUUID().toString();\n    admin.topics().createPartitionedTopic(topicName, 3);\n    InactiveTopicPolicies inactiveTopicPolicies = admin.topics().getInactiveTopicPolicies(topicName);\n    assertNull(inactiveTopicPolicies);\n    InactiveTopicPolicies policies = new InactiveTopicPolicies();\n    policies.setDeleteWhileInactive(true);\n    policies.setInactiveTopicDeleteMode(InactiveTopicDeleteMode.delete_when_no_subscriptions);\n    policies.setMaxInactiveDurationSeconds(10);\n    admin.topics().setInactiveTopicPolicies(topicName, policies);\n    for (int i = 0; i < 50; i++) {\n        if (admin.topics().getInactiveTopicPolicies(topicName) != null) {\n            break;\n        }\n        Thread.sleep(100);\n    }\n    assertEquals(admin.topics().getInactiveTopicPolicies(topicName), policies);\n    admin.topics().removeInactiveTopicPolicies(topicName);\n    for (int i = 0; i < 50; i++) {\n        if (admin.topics().getInactiveTopicPolicies(topicName) == null) {\n            break;\n        }\n        Thread.sleep(100);\n    }\n    assertNull(admin.topics().getInactiveTopicPolicies(topicName));\n    super.internalCleanup();\n}']",sleep;admin;Second;sleep;subscriptions;Inactive;UID;Inactive;set;Inactive,5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;3.92901711165905e-10;3.4924596548080444e-10;3.383320290595293e-10;2.837623469531536e-10;2.801243681460619e-10,0,0,"[-0.0007938570925034583, -7.555376052856445, -9.089988708496094, -9.970869064331055, -9.526846885681152, -10.182291030883789]",0.9992064833641052
3,"['@Test\npublic void testRepairSuccessfully() throws InterruptedException {\n    Collection<LongTokenRange> ranges = new ArrayList<>();\n    LongTokenRange range1 = new LongTokenRange(1, 2);\n    LongTokenRange range2 = new LongTokenRange(3, 4);\n    ranges.add(range1);\n    ranges.add(range2);\n    final RepairTask repairTask = new RepairTask.Builder().withJMXProxyFactory(jmxProxyFactory).withTableReference(myTableReference).withTokenRanges(ranges).withTableRepairMetrics(myTableRepairMetrics).withRepairHistory(repairHistory).withJobId(jobId).withReplicas(participants).build();\n    CountDownLatch cdl = startRepair(repairTask, false);\n    Notification notification = new Notification(""progress"", ""repair:1"", 0, getRepairMessage(range1));\n    notification.setUserData(getNotificationData(PROGRESS.ordinal(), 1, 2));\n    proxy.notify(notification);\n    notification = new Notification(""progress"", ""repair:1"", 1, getRepairMessage(range2));\n    notification.setUserData(getNotificationData(PROGRESS.ordinal(), 2, 2));\n    proxy.notify(notification);\n    notification = new Notification(""progress"", ""repair:1"", 2, ""Done with repair"");\n    notification.setUserData(getNotificationData(COMPLETE.ordinal(), 2, 2));\n    proxy.notify(notification);\n    cdl.await();\n    assertThat(repairTask.getUnknownRanges()).isNull();\n    assertThat(repairTask.getCompletedRanges()).containsExactlyElementsOf(ranges);\n    assertThat(proxy.myOptions.get(RANGES_KEY)).isNotEmpty();\n    verify(myTableRepairMetrics).repairTiming(eq(TABLE_REFERENCE), anyLong(), any(TimeUnit.class), eq(true));\n    verify(repairSessions.get(range1)).start();\n    verify(repairSessions.get(range2)).start();\n    verify(repairSessions.get(range1)).finish(eq(SUCCESS));\n    verify(repairSessions.get(range2)).finish(eq(SUCCESS));\n}']",Time;eq;start;eq;my;Exception;Job;with;mx;repair,5.3551048040390015e-09;2.0954757928848267e-09;1.7462298274040222e-09;1.280568540096283e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,0,3,"[-0.0009091534884646535, -7.449181079864502, -8.709488868713379, -9.83827018737793, -9.584734916687012, -10.13172721862793]",0.9990912675857544
3,"['@Test\npublic void testWithRevisions() {\n    Country de = new Country();\n    de.code = ""de"";\n    de.name = ""Deutschland"";\n    countryRepository.save(de);\n    de.name = ""Germany"";\n    countryRepository.save(de);\n    Revisions<Integer, Country> revisions = countryRepository.findRevisions(de.id);\n    assertThat(revisions).hasSize(2);\n    Iterator<Revision<Integer, Country>> iterator = revisions.iterator();\n    Integer firstRevisionNumber = iterator.next().getRevisionNumber().get();\n    Integer secondRevisionNumber = iterator.next().getRevisionNumber().get();\n    assertThat(countryRepository.findRevision(de.id, firstRevisionNumber).get().getEntity().name)\n    .isEqualTo(""Deutschland"");\n    assertThat(countryRepository.findRevision(de.id, secondRevisionNumber).get().getEntity().name).isEqualTo(""Germany"");\n}']",iterator;Germany;Revisions;revisions;get;get;save;Revision;Revision;get,2.1420419216156006e-08;2.0489096641540527e-08;2.0489096641540527e-08;1.6298145055770874e-08;1.4901161193847656e-08;1.30385160446167e-08;1.210719347000122e-08;1.1175870895385742e-08;1.1175870895385742e-08;1.1175870895385742e-08,3,4,"[-8.538260459899902, -10.079894065856934, -4.8663554191589355, -0.008410747162997723, -8.418017387390137, -8.44216251373291]",0.9916244149208069
3,"['@Test\npublic void testCollectorContextWithKeyword() throws Exception {\n    ValidationResult validationResult = validate(""{\\""test-property1\\"":\\""sample1\\"",\\""test-property2\\"":\\""sample2\\""}"");\n    Assertions.assertEquals(0, validationResult.getValidationMessages().size());\n    List<String> contextValues = ((List<String>) (validationResult.getCollectorContext().get(SAMPLE_COLLECTOR)));\n    Assertions.assertEquals(0, validationResult.getValidationMessages().size());\n    Assertions.assertEquals(2, contextValues.size());\n    Assertions.assertEquals(contextValues.get(0), ""actual_value_added_to_context1"");\n    Assertions.assertEquals(contextValues.get(1), ""actual_value_added_to_context2"");\n}']",Equals;added;Context;List;to;size;validation;get;Validation;get,1.4551915228366852e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10,3,3,"[-9.58271312713623, -10.904329299926758, -8.070813179016113, -0.0006690170848742127, -9.053274154663086, -8.791788101196289]",0.9993312358856201
3,"['@Test\npublic void findingAnnotationsRecursively() {\n    Method method = findMethod(this.getClass(), ""withMarker"", String.class);\n    List<Annotation> annotations = allAnnotations(method.getParameters()[0]);\n    assertEquals(4, annotations.size());\n    assertEquals(X.class, annotations.get(0).annotationType());\n    assertEquals(Y.class, annotations.get(1).annotationType());\n    assertEquals(Z.class, annotations.get(2).annotationType());\n    assertEquals(W.class, annotations.get(3).annotationType());\n}']",Annotations;Type;Annotations;get;Type;Annotation;Equals;Type;Equals;class,4.3655745685100555e-09;2.0954757928848267e-09;1.7462298274040222e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10,3,3,"[-9.580669403076172, -10.896902084350586, -8.196507453918457, -0.0006556744920089841, -8.976029396057129, -8.704208374023438]",0.999344527721405
3,"['@Test\npublic void testBacklogLimiter() {\n    long duration = runWithRate(2 * RateLimiting.DEFAULT_MAX_PARALLELISM,-1.0 , new DelayFn<Integer>());\n    Assert.assertThat(duration,greaterThan(2 * DelayFn.DELAY_MS));\n}']",duration;Limiting;Limiter;Delay;run;ISM;That;MAX;long;DEFAULT,1.1175870895385742e-08;6.51925802230835e-09;4.889443516731262e-09;4.889443516731262e-09;3.259629011154175e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10,0,2,"[-0.0009277330245822668, -7.4785261154174805, -8.769023895263672, -9.774763107299805, -9.15103816986084, -10.034778594970703]",0.9990726709365845
3,"['@Test\npublic void incrementUpperLimitIfOneMinuteElapsedSinceLastUpdate() throws InterruptedException {\n    Clock clock = mock(Clock.class);\n    when(clock.getTimeMillis()).thenReturn(0L, TWO_MINUTES_IN_MILLIS, 2 * TWO_MINUTES_IN_MILLIS, 3 * TWO_MINUTES_IN_MILLIS);\n    TimestampBoundStore timestampBoundStore = initialTimestampBoundStore();\n    PersistentTimestampService persistentTimestampService = PersistentTimestampService.create(timestampBoundStore, clock);\n    persistentTimestampService.getFreshTimestamp();\n    Thread.sleep(10);\n    persistentTimestampService.getFreshTimestamp();\n    Thread.sleep(10);\n    verify(timestampBoundStore, atLeast(2)).storeUpperLimit(anyLong());\n}']",Clock;clock;Store;MINUTES;TWO;Thread;Timestamp;Timestamp;Limit;ILLIS,3.725290298461914e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.3865140974521637e-09;2.0372681319713593e-09;1.862645149230957e-09;1.7462298274040222e-09;1.57160684466362e-09;1.3969838619232178e-09;1.2223608791828156e-09,2,0,"[-9.228171348571777, -8.750526428222656, -0.0004489606071729213, -8.91756534576416, -10.198888778686523, -10.774321556091309]",0.9995511174201965
3,"['@Test\npublic void testTokenExpiry() throws Exception {\n    ClockMock clock = ClockMock.frozen();\n    TokenService tokenService = createTokenService(tokenServiceEnabledSettings, clock);\n    Authentication authentication = new Authentication(new User(""joe"", ""admin""), new RealmRef(""native_realm"", ""native"", ""node1""), null);\n    PlainActionFuture<Tuple<UserToken, String>> tokenFuture = new PlainActionFuture<>();\n    tokenService.createUserToken(authentication, authentication, tokenFuture, Collections.emptyMap(), true);\n    final UserToken token = tokenFuture.get().v1();\n    mockGetTokenFromId(token);\n    mockCheckTokenInvalidationFromId(token);\n    authentication = token.getAuthentication();\n    ThreadContext requestContext = new ThreadContext(Settings.EMPTY);\n    storeTokenHeader(requestContext, tokenService.getUserTokenString(token));\n    try (ThreadContext.StoredContext ignore = requestContext.newStoredContext(true)) {\n        PlainActionFuture<UserToken> future = new PlainActionFuture<>();\n        tokenService.getAndValidateToken(requestContext, future);\n        assertAuthenticationEquals(authentication, future.get().getAuthentication());\n    }\n    final TimeValue defaultExpiration = TokenService.TOKEN_EXPIRATION.get(Settings.EMPTY);\n    final int fastForwardAmount = randomIntBetween(1, Math.toIntExact(defaultExpiration.getSeconds()) - 5);\n    try (ThreadContext.StoredContext ignore = requestContext.newStoredContext(true)) {\n        clock.fastForwardSeconds(Math.toIntExact(defaultExpiration.getSeconds()) - fastForwardAmount);\n        clock.rewind(TimeValue.timeValueNanos(clock.instant().getNano()));\n        PlainActionFuture<UserToken> future = new PlainActionFuture<>();\n        tokenService.getAndValidateToken(requestContext, future);\n        assertAuthenticationEquals(authentication, future.get().getAuthentication());\n    }\n    assertSettingDeprecationsAndWarnings(new Setting[] { TokenService.BWC_ENABLED });\n}']",Future;Clock;Clock;Thread;Future;Service;Service;Action;token;request,1.7462298274040222e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10,2,2,"[-9.531387329101562, -8.763818740844727, -0.0004233417857903987, -8.911582946777344, -10.19028091430664, -10.72096061706543]",0.9995768666267395
3,"['@Test\npublic void testTransactionMetaStoreAssignAndFailover() throws IOException, InterruptedException {\n    int transactionMetaStoreCount = 0;\n    for (PulsarService pulsarService : pulsarServices) {\n        transactionMetaStoreCount += pulsarService.getTransactionMetadataStoreService().getStores().size();\n    }\n    Assert.assertEquals(transactionMetaStoreCount, 16);\n    PulsarService crashedMetaStore = null;\n    for (int i = pulsarServices.length - 1; i >= 0; i--) {\n        if (pulsarServices[i].getTransactionMetadataStoreService().getStores().size() > 0) {\n            crashedMetaStore = pulsarServices[i];\n            break;\n        }\n    }\n    Assert.assertNotNull(crashedMetaStore);\n    List<PulsarService> services = new ArrayList<>(pulsarServices.length - 1);\n    for (PulsarService pulsarService : pulsarServices) {\n        if (pulsarService != crashedMetaStore) {\n            services.add(pulsarService);\n        }\n    }\n    pulsarServices = new PulsarService[pulsarServices.length - 1];\n    for (int i = 0; i < services.size(); i++) {\n        pulsarServices[i] = services.get(i);\n    }\n    crashedMetaStore.close();\n    Thread.sleep(3000);\n    transactionMetaStoreCount = 0;\n    for (PulsarService pulsarService : pulsarServices) {\n        transactionMetaStoreCount += pulsarService.getTransactionMetadataStoreService().getStores().size();\n    }\n    Assert.assertEquals(transactionMetaStoreCount, 16);\n    transactionCoordinatorClient.close();\n}']",sleep;Interrupted;Thread;IOException;transaction;Meta;crashed;Service;pulsar;Count,4.889443516731262e-09;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;1.964508555829525e-10;1.964508555829525e-10,0,0,"[-0.0007995745982043445, -7.542072296142578, -9.115457534790039, -9.969972610473633, -9.509841918945312, -10.173294067382812]",0.9992006421089172
3,"['@Test\npublic void testUnwrapping() throws Exception {\n    JsonSchema jsonSchema = MAPPER.generateJsonSchema(UnwrappingRoot.class);\n    String json = jsonSchema.toString().replaceAll(""\\"""", ""\'"");\n    String EXP = ""{\'type\':\'object\',"" + (""\'properties\':{\'age\':{\'type\':\'integer\'},"" + ""\'name.first\':{\'type\':\'string\'},\'name.last\':{\'type\':\'string\'}}}"");\n    assertEquals(EXP, json);\n}']",properties;son;string;replace;json;Schema;string;type;Root;MAPPER,3.725290298461914e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10,3,3,"[-9.708808898925781, -10.983677864074707, -7.914896488189697, -0.000692961853928864, -9.178685188293457, -8.82875919342041]",0.99930739402771
3,"['@Test\npublic void testSequenceListenerWithIncorrectOrder() {\n    SequenceListener sl = new SequenceListener();\n    sl.sentenceRead(AIS_05_2);\n    assertNull(sl.received);\n    sl.sentenceRead(AIS_05_1);\n    assertNull(sl.received);\n    sl.sentenceRead(AIS_05_2);\n    assertEquals(sl.received.toString(), MSG_05.toString());\n}']",IS;Read;received;received;sentence;sl;new;sl;Sequence;Listener,1.4901161193847656e-08;1.4901161193847656e-08;1.1175870895385742e-08;1.1175870895385742e-08;8.381903171539307e-09;6.51925802230835e-09;5.587935447692871e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.6566128730773926e-09,0,4,"[-0.006037213373929262, -6.361520290374756, -8.053020477294922, -7.680920124053955, -5.774558067321777, -7.806629657745361]",0.9939809441566467
3,"['@Test\npublic void testRemoveFirstConsumer() throws Exception {\n    this.conf.setSubscriptionKeySharedEnable(true);\n    String topic = ""testReadAheadWhenAddingConsumers-"" + UUID.randomUUID();\n    @Cleanup\n    Producer<Integer> producer = createProducer(topic, false);\n    @Cleanup\n    Consumer<Integer> c1 = pulsarClient.newConsumer(INT32).topic(topic).subscriptionName(""key_shared"").subscriptionType(Key_Shared).receiverQueueSize(10).consumerName(""c1"").subscribe();\n    for (int i = 0; i < 10; i++) {\n        producer.newMessage().key(String.valueOf(random.nextInt(NUMBER_OF_KEYS))).value(i).send();\n    }\n    @Cleanup\n    Consumer<Integer> c2 = pulsarClient.newConsumer(INT32).topic(topic).subscriptionName(""key_shared"").subscriptionType(Key_Shared).receiverQueueSize(10).consumerName(""c2"").subscribe();\n    for (int i = 10; i < 20; i++) {\n        producer.newMessage().key(String.valueOf(random.nextInt(NUMBER_OF_KEYS))).value(i).send();\n    }\n    assertNull(c2.receive(100, TimeUnit.MILLISECONDS));\n    c1.close();\n    for (int i = 0; i < 20; i++) {\n        Message<Integer> msg = c2.receive();\n        assertEquals(msg.getValue().intValue(), i);\n        c2.acknowledge(msg);\n    }\n}']",Queue;Cleanup;pulsar;Consumers;Producer;Client;topic;When;Time;send,5.21540641784668e-08;2.9802322387695312e-08;1.6763806343078613e-08;1.5832483768463135e-08;1.4901161193847656e-08;1.30385160446167e-08;1.210719347000122e-08;1.1175870895385742e-08;1.1175870895385742e-08;8.381903171539307e-09,0,0,"[-0.0012200777418911457, -6.896788120269775, -9.358497619628906, -10.322636604309082, -9.81930160522461, -10.264263153076172]",0.9987806677818298
3,"['@Test\npublic void testSimpleConsumerEventsWithoutPartition() throws Exception {\n    final String topicName = ""persistent"";\n    final String subName = ""sub1"";\n    final int numMsgs = 100;\n    TestConsumerStateEventListener listener1 = new TestConsumerStateEventListener();\n    TestConsumerStateEventListener listener2 = new TestConsumerStateEventListener();\n    ConsumerBuilder<byte[]> consumerBuilder = pulsarClient.newConsumer().topic(topicName).subscriptionName(subName).acknowledgmentGroupTime(0, TimeUnit.SECONDS).subscriptionType(Failover);\n    ConsumerBuilder<byte[]> consumerBulder1 = consumerBuilder.clone().consumerName(""1"").consumerEventListener(listener1).acknowledgmentGroupTime(0, TimeUnit.SECONDS);\n    Consumer<byte[]> consumer1 = consumerBulder1.subscribe();\n    Consumer<byte[]> consumer2 = consumerBuilder.clone().consumerName(""2"").consumerEventListener(listener2).subscribe();\n    verifyConsumerActive(listener1, -1);\n    verifyConsumerInactive(listener2, -1);\n    PersistentTopic topicRef = ((PersistentTopic) (pulsar.getBrokerService().getTopicReference(topicName).get()));\n    PersistentSubscription subRef = topicRef.getSubscription(subName);\n    assertNotNull(topicRef);\n    assertNotNull(subRef);\n    assertTrue(subRef.getDispatcher().isConsumerConnected());\n    assertEquals(subRef.getDispatcher().getType(), Failover);\n    List<CompletableFuture<MessageId>> futures = Lists.newArrayListWithCapacity(numMsgs);\n    Producer<byte[]> producer = pulsarClient.newProducer().topic(topicName).enableBatching(false).messageRoutingMode(SinglePartition).create();\n    for (int i = 0; i < numMsgs; i++) {\n        String message = ""my-message-"" + i;\n        futures.add(producer.sendAsync(message.getBytes()));\n    }\n    FutureUtil.waitForAll(futures).get();\n    futures.clear();\n    rolloverPerIntervalStats();\n    assertEquals(subRef.getNumberOfEntriesInBacklog(), numMsgs);\n    Thread.sleep(ASYNC_EVENT_COMPLETION_WAIT);\n    Message<byte[]> msg = null;\n    Assert.assertNull(consumer2.receive(1, TimeUnit.SECONDS));\n    for (int i = 0; i < numMsgs; i++) {\n        msg = consumer1.receive(1, TimeUnit.SECONDS);\n        Assert.assertNotNull(msg);\n        Assert.assertEquals(new String(msg.getData()), ""my-message-"" + i);\n        consumer1.acknowledge(msg);\n    }\n    rolloverPerIntervalStats();\n    Thread.sleep(ASYNC_EVENT_COMPLETION_WAIT);\n    assertEquals(subRef.getNumberOfEntriesInBacklog(), 0);\n    for (int i = 0; i < numMsgs; i++) {\n        String message = ""my-message-"" + i;\n        futures.add(producer.sendAsync(message.getBytes()));\n    }\n    FutureUtil.waitForAll(futures).get();\n    futures.clear();\n    for (int i = 0; i < 5; i++) {\n        msg = consumer1.receive(1, TimeUnit.SECONDS);\n        Assert.assertNotNull(msg);\n        Assert.assertEquals(new String(msg.getData()), ""my-message-"" + i);\n        consumer1.acknowledge(msg);\n    }\n    for (int i = 5; i < 10; i++) {\n        msg = consumer1.receive(1, TimeUnit.SECONDS);\n        Assert.assertNotNull(msg);\n        Assert.assertEquals(new String(msg.getData()), ""my-message-"" + i);\n    }\n    consumer1.close();\n    Thread.sleep(CONSUMER_ADD_OR_REMOVE_WAIT_TIME);\n    verifyConsumerActive(listener2, -1);\n    verifyConsumerNotReceiveAnyStateChanges(listener1);\n    for (int i = 5; i < numMsgs; i++) {\n        msg = consumer2.receive(1, TimeUnit.SECONDS);\n        Assert.assertNotNull(msg);\n        Assert.assertEquals(new String(msg.getData()), ""my-message-"" + i);\n        consumer2.acknowledge(msg);\n    }\n    Assert.assertNull(consumer2.receive(1, TimeUnit.SECONDS));\n    rolloverPerIntervalStats();\n    Thread.sleep(ASYNC_EVENT_COMPLETION_WAIT);\n    assertEquals(subRef.getNumberOfEntriesInBacklog(), 0);\n    for (int i = 0; i < numMsgs; i++) {\n        String message = ""my-message-"" + i;\n        futures.add(producer.sendAsync(message.getBytes()));\n    }\n    FutureUtil.waitForAll(futures).get();\n    futures.clear();\n    for (int i = 0; i < 5; i++) {\n        msg = consumer2.receive(1, TimeUnit.SECONDS);\n        Assert.assertNotNull(msg);\n        Assert.assertEquals(new String(msg.getData()), ""my-message-"" + i);\n        consumer2.acknowledge(msg);\n    }\n    consumer1 = consumerBulder1.subscribe();\n    Thread.sleep(CONSUMER_ADD_OR_REMOVE_WAIT_TIME);\n    for (int i = 5; i < numMsgs; i++) {\n        msg = consumer1.receive(1, TimeUnit.SECONDS);\n        Assert.assertNotNull(msg);\n        Assert.assertEquals(new String(msg.getData()), ""my-message-"" + i);\n        consumer1.acknowledge(msg);\n    }\n    Assert.assertNull(consumer1.receive(1, TimeUnit.SECONDS));\n    rolloverPerIntervalStats();\n    Thread.sleep(ASYNC_EVENT_COMPLETION_WAIT);\n    assertEquals(subRef.getNumberOfEntriesInBacklog(), 0);\n    for (int i = 0; i < numMsgs; i++) {\n        String message = ""my-message-"" + i;\n        futures.add(producer.sendAsync(message.getBytes()));\n    }\n    FutureUtil.waitForAll(futures).get();\n    futures.clear();\n    for (int i = 0; i < 5; i++) {\n        msg = consumer1.receive(1, TimeUnit.SECONDS);\n        Assert.assertNotNull(msg);\n        Assert.assertEquals(new String(msg.getData()), ""my-message-"" + i);\n        consumer1.acknowledge(msg);\n    }\n    TestConsumerStateEventListener listener3 = new TestConsumerStateEventListener();\n    Consumer<byte[]> consumer3 = consumerBuilder.clone().consumerName(""3"").consumerEventListener(listener3).subscribe();\n    Thread.sleep(CONSUMER_ADD_OR_REMOVE_WAIT_TIME);\n    verifyConsumerInactive(listener3, -1);\n    Assert.assertNull(consumer3.receive(1, TimeUnit.SECONDS));\n    for (int i = 5; i < numMsgs; i++) {\n        msg = consumer1.receive(1, TimeUnit.SECONDS);\n        Assert.assertNotNull(msg);\n        Assert.assertEquals(new String(msg.getData()), ""my-message-"" + i);\n        consumer1.acknowledge(msg);\n    }\n    rolloverPerIntervalStats();\n    Thread.sleep(ASYNC_EVENT_COMPLETION_WAIT);\n    assertEquals(subRef.getNumberOfEntriesInBacklog(), 0);\n    try {\n        consumer1.unsubscribe();\n        fail(""should fail"");\n    } catch (PulsarClientException e) {\n    }\n    consumer1.close();\n    Thread.sleep(CONSUMER_ADD_OR_REMOVE_WAIT_TIME);\n    consumer2.close();\n    Thread.sleep(CONSUMER_ADD_OR_REMOVE_WAIT_TIME);\n    try {\n        consumer3.unsubscribe();\n    } catch (PulsarClientException e) {\n        fail(""Should not fail"", e);\n    }\n    Thread.sleep(ASYNC_EVENT_COMPLETION_WAIT);\n    subRef = topicRef.getSubscription(subName);\n    assertNull(subRef);\n    producer.close();\n    consumer3.close();\n    admin.topics().delete(topicName);\n}']",SECONDS;Unit;subscription;pulsar;listener;Time;Group;Event;Inactive;subscribe,5.029141902923584e-08;3.3527612686157227e-08;3.119930624961853e-08;2.60770320892334e-08;1.6763806343078613e-08;1.4901161193847656e-08;1.4901161193847656e-08;1.30385160446167e-08;1.30385160446167e-08;1.0244548320770264e-08,0,1,"[-0.0013949673157185316, -7.052569389343262, -7.947899341583252, -9.68520736694336, -9.547778129577637, -10.079728126525879]",0.9986060261726379
3,"['@Test\npublic void testRecordWithJsr310LogicalTypes() throws IOException {\n    TestRecordWithJsr310LogicalTypes record = new TestRecordWithJsr310LogicalTypes(\n    true,\n    34,\n    35L,\n    3.14F,\n    3019.34,\n    null,\n    java.time.LocalDate.now(),\n    java.time.LocalTime.now().truncatedTo(ChronoUnit.MILLIS),\n    java.time.Instant.now().truncatedTo(ChronoUnit.MILLIS),\n    new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)\n    );\n    File data = write(TestRecordWithJsr310LogicalTypes.getClassSchema(), record);\n    List<TestRecordWithJsr310LogicalTypes> actual = read(\n    TestRecordWithJsr310LogicalTypes.getClassSchema(), data);\n    Assert.assertEquals(""Should match written record"", record, actual.get(0));\n}']",Date;time;Instant;write;Assert;now;Record;data;List;true,2.3283064365386963e-09;1.979060471057892e-09;9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,2,2,"[-9.680359840393066, -8.914746284484863, -0.00040165462996810675, -8.838623046875, -10.181661605834961, -10.734188079833984]",0.9995984435081482
3,"['@Test\npublic void testDuplicateConcurrentSubscribeCommand() throws Exception {\n    resetChannel();\n    setChannelConnected();\n    CompletableFuture<Topic> delayFuture = new CompletableFuture<>();\n    doReturn(delayFuture).when(brokerService).getOrCreateTopic(any(String.class));\n    ByteBuf clientCommand =\n    Commands.newSubscribe(successTopicName, successSubName, 1, 1, Exclusive, 0, ""test"", 0);\n    channel.writeInbound(clientCommand);\n    clientCommand =\n    Commands.newSubscribe(successTopicName, successSubName, 1, 1, Exclusive, 0, ""test"", 0);\n    channel.writeInbound(clientCommand);\n    Object response = getResponse();\n    assertTrue(response instanceof CommandError, ""Response is not CommandError but "" + response);\n    CommandError error = ((CommandError) (response));\n    assertEquals(error.getError(), ServiceNotReady);\n    channel.finish();\n}']",when;delay;broker;Completable;Completable;Create;Connected;uf;client;Future,4.423782229423523e-09;3.725290298461914e-09;3.725290298461914e-09;2.473825588822365e-09;1.862645149230957e-09;1.862645149230957e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.280568540096283e-09;1.280568540096283e-09,0,1,"[-0.0008235162240453064, -7.570978164672852, -9.009389877319336, -9.851713180541992, -9.325654983520508, -10.029777526855469]",0.9991768002510071
3,"['@Test\npublic void testListTaskWithCriteria() throws Exception {\n    requireDockerApiVersionAtLeast(""1.24"", ""swarm support"");\n    final ServiceSpec spec = createServiceSpec(randomName());\n    assertThat(sut.listTasks().size(), is(0));\n    sut.createService(spec);\n    await().until(numberOfTasks(sut), is(greaterThan(0)));\n    final Task task = sut.listTasks().get(1);\n    final List<Task> tasksWithId = sut.listTasks(Task.find().taskId(task.id()).build());\n    assertThat(tasksWithId.size(), is(1));\n    assertThat(tasksWithId.get(0), equalTo(task));\n    final List<Task> tasksWithServiceName = sut.listTasks(Task.find().serviceName(spec.name()).build());\n    assertThat(tasksWithServiceName.size(), is(greaterThanOrEqualTo(1)));\n    final Set<String> taskIds = Sets.newHashSet(Lists.transform(tasksWithServiceName, new Function<Task, String>()));\n    assertThat(task.id(), isIn(taskIds));\n}']",Spec;asks;Version;spec;name;number;ocker;task;Function;Hash,2.60770320892334e-08;2.2351741790771484e-08;1.862645149230957e-08;1.3969838619232178e-08;1.1175870895385742e-08;1.1175870895385742e-08;1.1175870895385742e-08;1.1175870895385742e-08;1.1175870895385742e-08;1.0244548320770264e-08,0,0,"[-0.0008270895341411233, -7.526129245758057, -9.017634391784668, -9.912819862365723, -9.467703819274902, -10.131668090820312]",0.9991732239723206
3,"[""@Test\npublic void manyParametersWithBooleanAndEnum() throws Exception {\n    assertThat(testResult(ManyParametersWithBooleanAndEnum.class), isSuccessful());\n    int expectedCount = ((4 * 4) * 2) * RoundingMode.values().length;\n    assertEquals(expectedCount, ManyParametersWithBooleanAndEnum.iterations);\n    for (int i = 0; i < (expectedCount / 4); ++i) {\n        assertEquals(String.valueOf(i), asList(3, 7), ManyParametersWithBooleanAndEnum.firstTestCases.subList(i * 4, (i * 4) + 2));\n    }\n    for (int i = 0; i < (expectedCount / 16); ++i) {\n        assertEquals(String.valueOf(i), asList('a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c'), ManyParametersWithBooleanAndEnum.secondTestCases.subList(i * 16, (i * 16) + 12));\n    }\n    for (int i = 0; i < (expectedCount / 32); ++i) {\n        assertEquals(asList(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false), ManyParametersWithBooleanAndEnum.thirdTestCases.subList(i * 32, (i * 32) + 16));\n        assertEquals(asList(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true), ManyParametersWithBooleanAndEnum.thirdTestCases.subList((i * 32) + 16, (i * 32) + 32));\n    }\n}""]",ounding;That;length;Count;Enum;Enum;Many;Equals;Parameters;false,6.51925802230835e-09;4.190951585769653e-09;4.190951585769653e-09;3.725290298461914e-09;3.259629011154175e-09;3.2014213502407074e-09;2.444721758365631e-09;2.2992026060819626e-09;2.0954757928848267e-09;2.0954757928848267e-09,3,3,"[-7.392524719238281, -7.928959846496582, -6.916533470153809, -0.0034120220225304365, -7.3260955810546875, -7.155224800109863]",0.9965937733650208
3,"['@Test\npublic void testClientConnecting() throws Exception {\n    PipelineOptions options = PipelineOptionsFactory.create();\n    Endpoints.ApiServiceDescriptor descriptor = findOpenPort();\n    BeamFnControlService service =\n    new BeamFnControlService(\n    descriptor,\n    ServerStreamObserverFactory.fromOptions(options)::from,\n    GrpcContextHeaderAccessorProvider.getHeaderAccessor());\n    Server server =\n    ServerFactory.fromOptions(options).create(descriptor, ImmutableList.of(service));\n    String url = service.getApiServiceDescriptor().getUrl();\n    BeamFnControlGrpc.BeamFnControlStub clientStub =\n    BeamFnControlGrpc.newStub(ManagedChannelBuilder.forTarget(url).usePlaintext(true).build());\n    clientStub.control(requestObserver);\n    try (FnApiControlClient client = service.get()) {\n        assertNotNull(client);\n    }\n    server.shutdown();\n    server.awaitTermination(1, TimeUnit.SECONDS);\n    server.shutdownNow();\n    verify(requestObserver).onCompleted();\n    verifyNoMoreInteractions(requestObserver);\n}']",Time;Unit;await;Grpc;Header;shutdown;find;Descriptor;Now;server,4.6566128730773926e-09;3.026798367500305e-09;1.1641532182693481e-09;6.984919309616089e-10;6.111804395914078e-10;6.111804395914078e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10,0,0,"[-0.0007901645149104297, -7.5847272872924805, -9.042393684387207, -9.911070823669434, -9.500046730041504, -10.153077125549316]",0.9992101192474365
3,"['@Test\npublic void test_empty_obj_toJson() {\n    String j = Json.toJson(new Person(), JsonFormat.compact().setQuoteName(true));\n    assertEquals(""{\\""age\\"":0,\\""num\\"":0}"", j);\n}']",age;set;son;Format;son;Equals;son;obj;to;to,1.1641532182693481e-08;2.7939677238464355e-09;2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;1.1641532182693481e-10,3,3,"[-9.592085838317871, -10.937296867370605, -7.900655269622803, -0.0007375142886303365, -8.951525688171387, -8.797439575195312]",0.9992627501487732
3,"['@Test\npublic void giteeSample() throws Exception {\n    Map<String, Object> value = new ObjectMapper().readValue(new ClassPathResource(""pathsamples/gitee.json"").getInputStream(), new TypeReference<Map<String, Object>>() {});\n    this.headers.set(""x-git-oschina-event"", ""Push Hook"");\n    PropertyPathNotification extracted = this.extractor.extract(this.headers, value);\n    assertThat(extracted).isNotNull();\n    assertThat(extracted.getPaths()[0]).isEqualTo(""d.txt"");\n}']",oschina;extract;Notification;Stream;Resource;Input;ite;set;That;extracted,2.270098775625229e-09;1.1932570487260818e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.675246939063072e-10;4.94765117764473e-10,4,3,"[-8.891127586364746, -9.228732109069824, -8.723904609680176, -8.180770874023438, -0.0011724510695785284, -7.614398956298828]",0.9988282322883606
3,"[""@Test\npublic void manyParameters() throws Exception {\n    assertThat(testResult(ManyParameters.class), isSuccessful());\n    assertEquals(6, ManyParameters.iterations);\n    assertEquals(asList(-1, -2, -4, -1, -2, -4), ManyParameters.firstTestCases);\n    assertEquals(asList('r', 'r', 'r', 'y', 'y', 'y'), ManyParameters.secondTestCases);\n}""]",first;Many;That;Equals;List;List;Successful;as;Parameters;as,3.725290298461914e-08;3.3527612686157227e-08;2.2351741790771484e-08;2.0489096641540527e-08;1.6763806343078613e-08;1.4901161193847656e-08;1.4901161193847656e-08;1.30385160446167e-08;4.6566128730773926e-09;4.6566128730773926e-09,4,3,"[-5.0136566162109375, -7.449429988861084, -6.7031426429748535, -1.873811960220337, -0.18536336719989777, -4.932984828948975]",0.830802321434021
3,"['@Test\npublic void testBrokerSelectionForAntiAffinityGroup() throws Exception {\n    final String broker1 = primaryHost;\n    final String broker2 = secondaryHost;\n    final String cluster = pulsar1.getConfiguration().getClusterName();\n    final String tenant = ""tenant-"" + UUID.randomUUID().toString();\n    final String namespace1 = ((tenant + ""/"") + cluster) + ""/ns1"";\n    final String namespace2 = ((tenant + ""/"") + cluster) + ""/ns2"";\n    final String namespaceAntiAffinityGroup = ""group"";\n    FailureDomain domain1 = new FailureDomain();\n    domain1.brokers = Sets.newHashSet(broker1);\n    admin1.clusters().createFailureDomain(cluster, ""domain1"", domain1);\n    FailureDomain domain2 = new FailureDomain();\n    domain2.brokers = Sets.newHashSet(broker2);\n    admin1.clusters().createFailureDomain(cluster, ""domain2"", domain2);\n    admin1.tenants().createTenant(tenant, new TenantInfo(null, Sets.newHashSet(cluster)));\n    admin1.namespaces().createNamespace(namespace1);\n    admin1.namespaces().createNamespace(namespace2);\n    admin1.namespaces().setNamespaceAntiAffinityGroup(namespace1, namespaceAntiAffinityGroup);\n    admin1.namespaces().setNamespaceAntiAffinityGroup(namespace2, namespaceAntiAffinityGroup);\n    for (int i = 0; i < 5; i++) {\n        if ((!isLoadManagerUpdatedDomainCache(primaryLoadManager)) || (!isLoadManagerUpdatedDomainCache(secondaryLoadManager))) {\n            Thread.sleep(200);\n        } else {\n            break;\n        }\n    }\n    assertTrue(isLoadManagerUpdatedDomainCache(primaryLoadManager));\n    assertTrue(isLoadManagerUpdatedDomainCache(secondaryLoadManager));\n    ServiceUnitId serviceUnit1 = makeBundle(tenant, cluster, ""ns1"");\n    String selectedBroker1 = primaryLoadManager.selectBrokerForAssignment(serviceUnit1).get();\n    ServiceUnitId serviceUnit2 = makeBundle(tenant, cluster, ""ns2"");\n    String selectedBroker2 = primaryLoadManager.selectBrokerForAssignment(serviceUnit2).get();\n    assertNotEquals(selectedBroker1, selectedBroker2);\n}']",primary;namespace;UID;For;Group;Set;ns;Sets;admin;Anti,1.862645149230957e-09;1.6298145055770874e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,0,1,"[-0.0007996936910785735, -7.518797874450684, -9.14058780670166, -10.020735740661621, -9.589694023132324, -10.216822624206543]",0.9992006421089172
3,"['@Test\npublic void testFromDbField() throws Exception {\n    Field[] fields = Foo.class.getDeclaredFields();\n    assertTrue(fields.length >= 1);\n    DatabaseFieldConfig config = DatabaseFieldConfig.fromField(databaseType, ""foo"", fields[0]);\n    assertNotNull(config);\n    assertTrue(config.isCanBeNull());\n    assertEquals(fields[0].getName(), config.getFieldName());\n}']",Db;Field;Config;database;From;config;Database;Can;config;fields,4.470348358154297e-08;4.0978193283081055e-08;2.9802322387695312e-08;2.60770320892334e-08;2.2351741790771484e-08;1.4901161193847656e-08;1.4901161193847656e-08;1.0244548320770264e-08;9.313225746154785e-09;9.313225746154785e-09,4,3,"[-8.820182800292969, -9.127778053283691, -8.57591724395752, -7.998654365539551, -0.0014092524070292711, -7.373830318450928]",0.9985917210578918
3,"['@Test\npublic void testRateLimitingMax() {\n    int n = 10;\n    double rate = 10.0;\n    long duration = runWithRate(n, rate, new IdentityFn<Integer>());\n    long perElementPause = (long) (1000L / rate);\n    long minDuration = (n - 1) * perElementPause;\n    Assert.assertThat(duration, greaterThan(minDuration));\n}']",Identity;Pause;Rate;new;min;Rate;Duration;duration;per;rate,1.3969838619232178e-08;7.450580596923828e-09;7.450580596923828e-09;7.450580596923828e-09;6.51925802230835e-09;6.05359673500061e-09;5.587935447692871e-09;4.6566128730773926e-09;4.190951585769653e-09;9.313225746154785e-10,2,2,"[-8.23232650756836, -8.148919105529785, -0.0008665143977850676, -8.41866683959961, -9.730536460876465, -10.383341789245605]",0.9991340041160583
3,"['@Test\npublic void testRecursingTrace() throws Exception {\n    TracePluginConfiguration conf = new TracePluginConfiguration();\n    conf.traceProb = 1.0;\n    conf.port = 51010;\n    conf.clientPort = 12346;\n    TracePlugin aPlugin = new TracePlugin(conf);\n    conf.port = 51011;\n    conf.clientPort = 12347;\n    TracePlugin bPlugin = new TracePlugin(conf);\n    conf.port = 51012;\n    conf.clientPort = 12348;\n    TracePlugin cPlugin = new TracePlugin(conf);\n    conf.port = 51013;\n    conf.clientPort = 12349;\n    TracePlugin dPlugin = new TracePlugin(conf);\n    Responder bRes = new RecursingResponder(TestBasicTracing.advancedProtocol, bPlugin);\n    bRes.addRPCPlugin(bPlugin);\n    HttpServer server1 = new HttpServer(bRes, 21005);\n    server1.start();\n    Responder cRes = new EndpointResponder(TestBasicTracing.advancedProtocol);\n    cRes.addRPCPlugin(cPlugin);\n    HttpServer server2 = new HttpServer(cRes, 21006);\n    server2.start();\n    Responder dRes = new EndpointResponder(TestBasicTracing.advancedProtocol);\n    dRes.addRPCPlugin(dPlugin);\n    HttpServer server3 = new HttpServer(dRes, 21007);\n    server3.start();\n    HttpTransceiver trans = new HttpTransceiver(new URL(""http:www.example.com""));\n    GenericRequestor r = new GenericRequestor(TestBasicTracing.advancedProtocol, trans);\n    r.addRPCPlugin(aPlugin);\n    GenericRecord params = new GenericData.Record(advancedProtocol.getMessages().get(""w"").getRequest());\n    params.put(""req"", 1);\n    for (int i = 0; i < 40; i++) {\n        r.request(""w"", params);\n    }\n    List<Span> allSpans = new ArrayList<Span>();\n    allSpans.addAll(aPlugin.storage.getAllSpans());\n    allSpans.addAll(bPlugin.storage.getAllSpans());\n    allSpans.addAll(cPlugin.storage.getAllSpans());\n    allSpans.addAll(dPlugin.storage.getAllSpans());\n    SpanAggregationResults results = SpanAggregator.getFullSpans(allSpans);\n    assertEquals(0, results.incompleteSpans.size());\n    List<Span> merged = results.completeSpans;\n    List<Trace> traces = SpanAggregator.getTraces(merged).traces;\n    assertEquals(40, traces.size());\n    TraceCollection collection = new TraceCollection(traces.get(0));\n    for (Trace t : traces) {\n        collection.addTrace(t);\n    }\n    server1.close();\n    server2.close();\n    server3.close();\n    aPlugin.httpServer.close();\n    aPlugin.clientFacingServer.stop();\n    bPlugin.httpServer.close();\n    bPlugin.clientFacingServer.stop();\n    cPlugin.httpServer.close();\n    cPlugin.clientFacingServer.stop();\n    dPlugin.httpServer.close();\n    dPlugin.clientFacingServer.stop();\n}']",Generic;Port;Recursing;Responder;Tracing;client;ttp;example;Responder;Recursing,2.3283064365386963e-09;2.0954757928848267e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09,0,0,"[-0.0008861667010933161, -7.387101173400879, -9.17005729675293, -9.956660270690918, -9.487082481384277, -10.146024703979492]",0.9991142153739929
3,"['@Test\npublic void testSubscribeRate() throws Exception {\n    SubscribeRate subscribeRate = new SubscribeRate(1, 5);\n    String namespace = ""my-tenants/my-namespace"";\n    admin.tenants().createTenant(""my-tenants"", new TenantInfoImpl(Sets.newHashSet(), Sets.newHashSet(testLocalCluster)));\n    admin.namespaces().createNamespace(namespace, Sets.newHashSet(testLocalCluster));\n    admin.namespaces().setSubscribeRate(namespace, subscribeRate);\n    assertEquals(subscribeRate, admin.namespaces().getSubscribeRate(namespace));\n    String topicName = ((""persistent""));\n    admin.topics().createPartitionedTopic(topicName, 2);\n    pulsar.getConfiguration().setAuthorizationEnabled(false);\n    Consumer<?> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionType(Shared).subscriptionName(""subscribe-rate"").subscribe();\n    assertTrue(consumer.isConnected());\n    pulsarClient.updateServiceUrl(lookupUrl.toString());\n    Awaitility.await().untilAsserted(() -> assertFalse(consumer.isConnected()));\n    Thread.sleep(6000L);\n    pulsarClient.updateServiceUrl(lookupUrl.toString());\n    assertTrue(consumer.isConnected());\n    subscribeRate = new SubscribeRate(0, 10);\n    admin.namespaces().setSubscribeRate(namespace, subscribeRate);\n    pulsarClient.updateServiceUrl(lookupUrl.toString());\n    Awaitility.await().untilAsserted(() -> assertTrue(consumer.isConnected()));\n    pulsar.getConfiguration().setAuthorizationEnabled(true);\n    admin.topics().deletePartitionedTopic(topicName, true);\n    admin.namespaces().deleteNamespace(namespace);\n    admin.tenants().deleteTenant(""my-tenants"");\n}']",pulsar;Authorization;rate;until;Shared;Equals;namespace;Topic;Asserted;Connected,4.94765117764473e-10;3.2014213502407074e-10;3.055902197957039e-10;3.055902197957039e-10;2.764863893389702e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.2919266484677792e-10;2.1827872842550278e-10,0,0,"[-0.0007994554471224546, -7.564451694488525, -9.058937072753906, -9.921632766723633, -9.487878799438477, -10.144240379333496]",0.9992009997367859
3,"['@Test\npublic void testTopicLevelInactivePolicyUpdateAndClean() throws Exception {\n    super.resetConfig();\n    conf.setSystemTopicEnabled(true);\n    conf.setTopicLevelPoliciesEnabled(true);\n    conf.setBrokerDeleteInactiveTopicsEnabled(true);\n    conf.setBrokerDeleteInactiveTopicsMaxInactiveDurationSeconds(1000);\n    conf.setBrokerDeleteInactiveTopicsMode(delete_when_no_subscriptions);\n    InactiveTopicPolicies defaultPolicy = new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1000, true);\n    super.baseSetup();\n    Thread.sleep(2000);\n    final String namespace = ""prop/ns-abc"";\n    final String topic = ""persistent"";\n    final String topic2 = ""persistent"";\n    final String topic3 = ""persistent"";\n    List<String> topics = Arrays.asList(topic, topic2, topic3);\n    for (String tp : topics) {\n        admin.topics().createNonPartitionedTopic(tp);\n    }\n    InactiveTopicPolicies inactiveTopicPolicies = new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1, true);\n    admin.topics().setInactiveTopicPolicies(topic, inactiveTopicPolicies);\n    inactiveTopicPolicies.setInactiveTopicDeleteMode(delete_when_subscriptions_caught_up);\n    admin.topics().setInactiveTopicPolicies(topic2, inactiveTopicPolicies);\n    inactiveTopicPolicies.setInactiveTopicDeleteMode(delete_when_no_subscriptions);\n    admin.topics().setInactiveTopicPolicies(topic3, inactiveTopicPolicies);\n    for (int i = 0; i < 50; i++) {\n        if (admin.topics().getInactiveTopicPolicies(topic) != null) {\n            break;\n        }\n        Thread.sleep(100);\n    }\n    InactiveTopicPolicies policies = ((PersistentTopic) (pulsar.getBrokerService().getTopic(topic, false).get().get())).inactiveTopicPolicies;\n    Assert.assertTrue(policies.isDeleteWhileInactive());\n    assertEquals(policies.getInactiveTopicDeleteMode(), delete_when_no_subscriptions);\n    assertEquals(policies.getMaxInactiveDurationSeconds(), 1);\n    assertEquals(policies, admin.topics().getInactiveTopicPolicies(topic));\n    admin.topics().removeInactiveTopicPolicies(topic);\n    for (int i = 0; i < 50; i++) {\n        if (admin.topics().getInactiveTopicPolicies(topic) == null) {\n            break;\n        }\n        Thread.sleep(100);\n    }\n    assertEquals(((PersistentTopic) (pulsar.getBrokerService().getTopic(topic, false).get().get())).inactiveTopicPolicies, defaultPolicy);\n    policies = ((PersistentTopic) (pulsar.getBrokerService().getTopic(topic2, false).get().get())).inactiveTopicPolicies;\n    Assert.assertTrue(policies.isDeleteWhileInactive());\n    assertEquals(policies.getInactiveTopicDeleteMode(), delete_when_subscriptions_caught_up);\n    assertEquals(policies.getMaxInactiveDurationSeconds(), 1);\n    assertEquals(policies, admin.topics().getInactiveTopicPolicies(topic2));\n    inactiveTopicPolicies.setMaxInactiveDurationSeconds(999);\n    admin.namespaces().setInactiveTopicPolicies(namespace, inactiveTopicPolicies);\n    Thread.sleep(1000);\n    admin.topics().removeInactiveTopicPolicies(topic2);\n    for (int i = 0; i < 50; i++) {\n        if (admin.topics().getInactiveTopicPolicies(topic2) == null) {\n            break;\n        }\n        Thread.sleep(100);\n    }\n    InactiveTopicPolicies nsPolicies = ((PersistentTopic) (pulsar.getBrokerService().getTopic(topic2, false).get().get())).inactiveTopicPolicies;\n    assertEquals(nsPolicies.getMaxInactiveDurationSeconds(), 999);\n    super.internalCleanup();\n}']",sleep;Topic;subscriptions;when;subscriptions;Inactive;Topic;when;persistent;Mode,1.862645149230957e-09;6.984919309616089e-10;5.384208634495735e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10,0,0,"[-0.0007934997556731105, -7.554167747497559, -9.094310760498047, -9.974369049072266, -9.531634330749512, -10.183646202087402]",0.9992069602012634
3,"['@Test\npublic void testMaximumRolloverTime() throws Exception {\n    ManagedLedgerConfig conf = new ManagedLedgerConfig();\n    conf.setMaxEntriesPerLedger(5);\n    conf.setMinimumRolloverTime(1, SECONDS);\n    conf.setMaximumRolloverTime(1, SECONDS);\n    ManagedLedgerImpl ledger = ((ManagedLedgerImpl) (factory.open(""my_test_maxtime_ledger"", conf)));\n    ledger.openCursor(""c1"");\n    ledger.addEntry(""data"".getBytes());\n    ledger.addEntry(""data"".getBytes());\n    assertEquals(ledger.getLedgersInfoAsList().size(), 1);\n    Thread.sleep(2000);\n    ledger.addEntry(""data"".getBytes());\n    ledger.addEntry(""data"".getBytes());\n    assertEquals(ledger.getLedgersInfoAsList().size(), 2);\n}']",Time;sleep;Maximum;SECONDS;set;Ledger;Ledger;Rollover;get;Max,2.3283064365386963e-09;1.862645149230957e-09;1.1641532182693481e-09;1.1059455573558807e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,0,0,"[-0.0008311392739415169, -7.55527400970459, -8.871052742004395, -9.888463973999023, -9.469743728637695, -10.150697708129883]",0.9991692304611206
3,"['@Test\npublic void testBrokerDiscoveryRoundRobin() throws Exception {\n    addBrokerToZk(5);\n    String prevUrl = null;\n    for (int i = 0; i < 10; i++) {\n        String current = service.getDiscoveryProvider().nextBroker().getPulsarServiceUrl();\n        assertNotEquals(prevUrl, current);\n        prevUrl = current;\n    }\n}']",Broker;Broker;next;Round;add;Provider;get;ulsar;Url;current,3.166496753692627e-08;1.862645149230957e-08;1.1175870895385742e-08;9.313225746154785e-09;7.450580596923828e-09;5.587935447692871e-09;4.190951585769653e-09;3.725290298461914e-09;2.7939677238464355e-09;1.3969838619232178e-09,4,0,"[-2.302133798599243, -6.147554397583008, -6.67894172668457, -6.016833782196045, -0.11566490679979324, -5.699378967285156]",0.8907736539840698
3,"['@Test\npublic void upload_success_shouldInvokeListener() throws Exception {\n    TransferListener listener = mock(TransferListener.class);\n    Path path = newTempFile();\n    Files.write(path, randomBytes(contentLength));\n    UploadRequest uploadRequest = UploadRequest.builder().putObjectRequest(( r) -> r.bucket(""bucket"").key(""key"")).source(path).overrideConfiguration(( b) -> b.addListener(listener)).build();\n    Upload upload = tm.upload(uploadRequest);\n    upload.completionFuture().join();\n    ArgumentCaptor<TransferListener.Context.TransferInitiated> captor1 = ArgumentCaptor.forClass(TransferInitiated.class);\n    verify(listener, times(1)).transferInitiated(captor1.capture());\n    TransferListener.Context.TransferInitiated ctx1 = captor1.getValue();\n    assertThat(ctx1.request()).isSameAs(uploadRequest);\n    assertThat(ctx1.progressSnapshot().transferSizeInBytes()).hasValue(contentLength);\n    assertThat(ctx1.progressSnapshot().bytesTransferred()).isZero();\n    ArgumentCaptor<TransferListener.Context.BytesTransferred> captor2 = ArgumentCaptor.forClass(BytesTransferred.class);\n    verify(listener, times(1)).bytesTransferred(captor2.capture());\n    TransferListener.Context.BytesTransferred ctx2 = captor2.getValue();\n    assertThat(ctx2.request()).isSameAs(uploadRequest);\n    assertThat(ctx2.progressSnapshot().transferSizeInBytes()).hasValue(contentLength);\n    assertThat(ctx2.progressSnapshot().bytesTransferred()).isPositive();\n    ArgumentCaptor<TransferListener.Context.TransferComplete> captor3 = ArgumentCaptor.forClass(TransferComplete.class);\n    verify(listener, times(1)).transferComplete(captor3.capture());\n    TransferListener.Context.TransferComplete ctx3 = captor3.getValue();\n    assertThat(ctx3.request()).isSameAs(uploadRequest);\n    assertThat(ctx3.progressSnapshot().transferSizeInBytes()).hasValue(contentLength);\n    assertThat(ctx3.progressSnapshot().bytesTransferred()).isEqualTo(contentLength);\n    assertThat(ctx3.completedTransfer()).isSameAs(upload.completionFuture().get());\n    verifyNoMoreInteractions(listener);\n}']",Positive;Future;Upload;Transferred;bucket;transfer;times;bucket;Snapshot;add,8.009374141693115e-08;2.2351741790771484e-08;1.862645149230957e-08;1.816079020500183e-08;1.7229467630386353e-08;1.30385160446167e-08;1.30385160446167e-08;1.30385160446167e-08;1.0244548320770264e-08;9.778887033462524e-09,0,0,"[-0.006061504129320383, -5.361958980560303, -6.7777581214904785, -9.482912063598633, -9.421243667602539, -9.796600341796875]",0.9939566850662231
3,"['@Test\npublic void testPerTopicStats() throws Exception {\n    String randSeed = randomName(16);\n    System.out.println(""The randSeed of testPerTopicStats() is: "" + randSeed);\n    Producer<byte[]> p1 = pulsarClient.newProducer().topic(""persistent://my-property/use/"" + randSeed + ""/my-topic1"").create();\n    Producer<byte[]> p2 = pulsarClient.newProducer().topic(""persistent://my-property/use/"" + randSeed + ""/my-topic2"").create();\n    for (int i = 0; i < 10; i++) {\n        String message = ""my-message-"" + i;\n        p1.send(message.getBytes());\n        p2.send(message.getBytes());\n    }\n    ByteArrayOutputStream statsOut = new ByteArrayOutputStream();\n    PrometheusMetricsGenerator.generate(pulsar, true, false, statsOut);\n    String metricsStr = new String(statsOut.toByteArray());\n    Multimap<String, Metric> metrics = parseMetrics(metricsStr);\n    metrics.entries().forEach(e -> {\n        System.out.println(e.getKey() + "": "" + e.getValue());\n    });\n    List<Metric> cm = (List<Metric>) metrics.get(""pulsar_storage_write_latency_le_1"");\n    List<Metric> matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + randSeed)).collect(Collectors.toList());\n    int positionOfTopic1;\n    int positionOfTopic2;\n    if(cm.get(0).tags.get(""topic"").equals(""persistent://my-property/use/"" + randSeed + ""/my-topic1"")) {\n        positionOfTopic1 = 0;\n        positionOfTopic2 = 1;\n    } else {\n        positionOfTopic2 = 0;\n        positionOfTopic1 = 1;\n    }\n    matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + randSeed)).collect(Collectors.toList());\n    if(matchingMetrics.size() > 2){\n        System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). First check. Debug entries: "");\n        matchingMetrics.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));\n    }\n    assertEquals(matchingMetrics.size(), 2);\n    assertEquals(matchingMetrics.get(positionOfTopic2).tags.get(""topic""), ""persistent://my-property/use/"" + randSeed + ""/my-topic2"");\n    assertEquals(matchingMetrics.get(positionOfTopic2).tags.get(""namespace""), ""my-property/use/"" + randSeed);\n    assertEquals(matchingMetrics.get(positionOfTopic1).tags.get(""topic""), ""persistent://my-property/use/"" + randSeed + ""/my-topic1"");\n    assertEquals(matchingMetrics.get(positionOfTopic1).tags.get(""namespace""), ""my-property/use/"" + randSeed);\n    cm = (List<Metric>) metrics.get(""pulsar_producers_count"");\n    if(cm.get(1).tags.get(""topic"").equals(""persistent://my-property/use/"" + randSeed + ""/my-topic1"")) {\n        positionOfTopic1 = 1;\n        positionOfTopic2 = 2;\n    } else {\n        positionOfTopic2 = 1;\n        positionOfTopic1 = 2;\n    }\n    matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + randSeed)).collect(Collectors.toList());\n    if(matchingMetrics.size() > 2){\n        System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). Second check. Debug entries: "");\n        matchingMetrics.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));\n    }\n    assertEquals(matchingMetrics.size(), 2);\n    assertEquals(matchingMetrics.get(positionOfTopic2).tags.get(""topic""), ""persistent://my-property/use/"" + randSeed + ""/my-topic2"");\n    assertEquals(matchingMetrics.get(positionOfTopic2).tags.get(""namespace""), ""my-property/use/"" + randSeed);\n    assertEquals(matchingMetrics.get(positionOfTopic1).tags.get(""topic""), ""persistent://my-property/use/"" + randSeed + ""/my-topic1"");\n    assertEquals(matchingMetrics.get(positionOfTopic1).tags.get(""namespace""), ""my-property/use/"" + randSeed);\n    cm = (List<Metric>) metrics.get(""topic_load_times_count"");\n    if(cm.size() > 1){\n        System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). Third check. Debug entries: "");\n        cm.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));\n    }\n    assertEquals(cm.size(), 1);\n    assertEquals(cm.get(0).tags.get(""cluster""), ""test"");\n    cm = (List<Metric>) metrics.get(""pulsar_in_bytes_total"");\n    if(cm.get(0).tags.get(""topic"").equals(""persistent://my-property/use/"" + randSeed + ""/my-topic1"")) {\n        positionOfTopic1 = 0;\n        positionOfTopic2 = 1;\n    } else {\n        positionOfTopic2 = 0;\n        positionOfTopic1 = 1;\n    }\n    matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + randSeed)).collect(Collectors.toList());\n    if(matchingMetrics.size() > 2){\n        System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). Fourth check. Debug entries: "");\n        matchingMetrics.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));\n    }\n    assertEquals(matchingMetrics.size(), 2);\n    assertEquals(matchingMetrics.get(positionOfTopic2).tags.get(""topic""), ""persistent://my-property/use/"" + randSeed + ""/my-topic2"");\n    assertEquals(matchingMetrics.get(positionOfTopic2).tags.get(""namespace""), ""my-property/use/"" + randSeed);\n    assertEquals(matchingMetrics.get(positionOfTopic1).tags.get(""topic""), ""persistent://my-property/use/"" + randSeed + ""/my-topic1"");\n    assertEquals(matchingMetrics.get(positionOfTopic1).tags.get(""namespace""), ""my-property/use/"" + randSeed);\n    cm = (List<Metric>) metrics.get(""pulsar_in_messages_total"");\n    if(cm.get(0).tags.get(""topic"").equals(""persistent://my-property/use/"" + randSeed + ""/my-topic1"")) {\n        positionOfTopic1 = 0;\n        positionOfTopic2 = 1;\n    } else {\n        positionOfTopic2 = 0;\n        positionOfTopic1 = 1;\n    }\n    matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + randSeed)).collect(Collectors.toList());\n    if(matchingMetrics.size() > 2){\n        System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). Fifth check. Debug entries: "");\n        matchingMetrics.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));\n    }\n    assertEquals(matchingMetrics.size(), 2);\n    assertEquals(matchingMetrics.get(positionOfTopic2).tags.get(""topic""), ""persistent://my-property/use/"" + randSeed + ""/my-topic2"");\n    assertEquals(matchingMetrics.get(positionOfTopic2).tags.get(""namespace""), ""my-property/use/"" + randSeed);\n    assertEquals(matchingMetrics.get(positionOfTopic1).tags.get(""topic""), ""persistent://my-property/use/"" + randSeed + ""/my-topic1"");\n    assertEquals(matchingMetrics.get(positionOfTopic1).tags.get(""namespace""), ""my-property/use/"" + randSeed);\n    p1.close();\n    p2.close();\n}']",eed;Byte;send;ulsar;new;Producer;filter;generate;position;Stream,1.955777406692505e-08;1.862645149230957e-08;1.4901161193847656e-08;1.2223608791828156e-08;1.0011717677116394e-08;9.313225746154785e-09;8.381903171539307e-09;8.381903171539307e-09;7.450580596923828e-09;7.450580596923828e-09,0,1,"[-0.0015510206576436758, -6.632231712341309, -9.2142915725708, -10.015714645385742, -9.810897827148438, -10.306017875671387]",0.9984501600265503
3,"['@Test\npublic void testCreateWithTwo() {\n    AISMessage msg = amf.create(split1, split2);\n    assertTrue(msg instanceof AISMessage05);\n    assertEquals(5, msg.getMessageType());\n}']",Message;instanceof;Two;msg;split;ISMessage;True;Type;split;Equals,3.026798367500305e-09;1.9208528101444244e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;-1.1641532182693481e-10,4,4,"[-8.876445770263672, -9.235213279724121, -8.777108192443848, -8.341954231262207, -0.0010985060362145305, -7.6667351722717285]",0.9989022016525269
3,"['@Test\npublic void testAsyncFunction() throws Exception {\n    InstanceConfig instanceConfig = new InstanceConfig();\n    Function<String, CompletableFuture<String>> function = (input, context) -> {\n        log.info(""input string: {}"", input);\n        CompletableFuture<String> result  = new CompletableFuture<>();\n        Executors.newCachedThreadPool().submit(() -> {\n            try {\n                Thread.sleep(500);\n                result.complete(String.format(""%s-lambda"", input));\n            } catch (Exception e) {\n                result.completeExceptionally(e);\n            }\n        });\n        return result;\n    };\n    JavaInstance instance = new JavaInstance(\n    mock(ContextImpl.class),\n    function,\n    instanceConfig);\n    String testString = ""ABC123"";\n    CompletableFuture<JavaExecutionResult> result = instance.handleMessage(mock(Record.class), testString);\n    assertNotNull(result.get().getResult());\n    assertEquals(new String(testString + ""-lambda""), result.get().getResult());\n    instance.close();\n}']",Thread;Future;ock;Record;Completable;mock;Result;Exception;Completable;instance,1.3387762010097504e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.966285243630409e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10,0,1,"[-0.000789688085205853, -7.537424564361572, -9.168723106384277, -10.024550437927246, -9.556764602661133, -10.195040702819824]",0.9992104768753052
3,"['@Test\npublic void testLedgerReachMaximumRolloverTime() throws Exception {\n    ManagedLedgerConfig config = new ManagedLedgerConfig();\n    config.setMinimumRolloverTime(1, TimeUnit.MILLISECONDS);\n    config.setMaximumRolloverTime(1, TimeUnit.SECONDS);\n    ManagedLedger ml = factory.open(""ledger-reach-maximum-rollover-time"", config);\n    long firstLedgerId = ml.addEntry(""test"".getBytes()).getLedgerId();\n    Awaitility.await()\n    .atMost(1100, TimeUnit.MILLISECONDS)\n    .pollInterval(100, TimeUnit.MILLISECONDS)\n    .until(() -> firstLedgerId != ml.addEntry(""test"".getBytes()).getLedgerId());\n}']",poll;Maximum;Rollover;Time;Minimum;maximum;get;Unit;set;until,5.960464477539063e-08;3.166496753692627e-08;1.4901161193847656e-08;1.30385160446167e-08;1.30385160446167e-08;1.0244548320770264e-08;9.313225746154785e-09;9.313225746154785e-09;8.381903171539307e-09;7.450580596923828e-09,2,0,"[-6.528132438659668, -7.435512065887451, -0.0025856418069452047, -7.923335075378418, -9.102997779846191, -9.770150184631348]",0.9974178075790405
3,"['@Test\n@Test(dependsOnMethods = ""testCreateJob"")\npublic void testGetJobListFromRoot() {\n    JobList output = api().jobList("""");\n    assertNotNull(output);\n    assertFalse(output.jobs().isEmpty());\n    assertEquals(output.jobs().size(), 2);\n}']",Root;Null;False;jobs;Job;On;Not;output;output;Job,1.1175870895385742e-08;1.1175870895385742e-08;1.0244548320770264e-08;9.313225746154785e-09;7.450580596923828e-09;7.450580596923828e-09;5.587935447692871e-09;3.725290298461914e-09;3.725290298461914e-09;2.7939677238464355e-09,4,4,"[-3.9503214359283447, -6.667025566101074, -6.014936447143555, -1.4355281591415405, -0.31321075558662415, -4.834359645843506]",0.7310958504676819
3,"['@Test\npublic void testNotAllowNullSchema() {\n    AvroSchema<Foo> avroSchema = AvroSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).withAlwaysAllowNull(false).build());\n    assertEquals(avroSchema.getSchemaInfo().getType(), AVRO);\n    Schema.Parser parser = new Schema.Parser();\n    String schemaJson = new String(avroSchema.getSchemaInfo().getSchema());\n    assertEquals(schemaJson, SCHEMA_AVRO_NOT_ALLOW_NULL);\n    Schema schema = parser.parse(schemaJson);\n    for (String fieldName : FOO_FIELDS) {\n        Schema.Field field = schema.getField(fieldName);\n        Assert.assertNotNull(field);\n        if (field.name().equals(""field4"")) {\n            Assert.assertNotNull(field.schema().getTypes().get(1).getField(""field1""));\n        }\n        if (field.name().equals(""fieldUnableNull"")) {\n            Assert.assertNotNull(field.schema().getType());\n        }\n    }\n}']",AVRO;Allow;Null;schema;name;son;Field;Definition;build;schema,1.9208528101444244e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5425030142068863e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2514647096395493e-09,3,3,"[-9.282466888427734, -10.75171184539795, -8.101224899291992, -0.0007427555974572897, -8.826390266418457, -8.633482933044434]",0.999257504940033
3,"['@Test\npublic void testStreamingPrevValue() throws Exception {\n    Process corfuServer = runSinglePersistentServer(corfuSingleNodeHost, corfuStringNodePort);\n    runtime = createRuntime(singleNodeEndpoint);\n    CorfuStore store = new CorfuStore(runtime);\n    String ns = ""test_namespace"";\n    String tn = ""tableA"";\n    Table<Uuid, SampleTableAMsg, Uuid> table = store.openTable(ns, tn, Uuid.class, SampleTableAMsg.class, Uuid.class, TableOptions.builder().build());\n    PrevValueStreamer listenerCommon = new PrevValueStreamer<Uuid, SampleTableAMsg, Uuid>(store, ns, tn);\n    store.subscribeListener(listenerCommon, ns, ""sample_streamer_1"", Collections.singletonList(tn));\n    final int numRecords = PARAMETERS.NUM_ITERATIONS_LOW;\n    for (int i = 0; i < numRecords; i++) {\n        try (final TxnContext tx = store.txn(namespace)) {\n            Uuid key = Uuid.newBuilder().setLsb(0).setMsb(0).build();\n            SampleTableAMsg val = SampleTableAMsg.newBuilder().setPayload(""val"" + i).build();\n            tx.putRecord(table, key, val, key);\n            tx.commit();\n        }\n    }\n    TimeUnit.MILLISECONDS.sleep(sleepTime);\n    assertThat(listenerCommon.getRecordCount()).isEqualTo(numRecords);\n    assertThat(shutdownCorfuServer(corfuServer)).isTrue();\n}']",sleep;tx;runtime;ILLISECONDS;Unit;shutdown;listener;Corfu;Builder;corfu,1.862645149230957e-09;1.0477378964424133e-09;5.820766091346741e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.1650415621697903e-10;3.055902197957039e-10;2.9103830456733704e-10;2.837623469531536e-10,0,0,"[-0.0007874249131418765, -7.555566310882568, -9.110550880432129, -10.010683059692383, -9.546218872070312, -10.20602798461914]",0.9992129802703857
3,"['@Test\npublic void testCloseReason() throws Exception {\n    MessageEndpoint.reset();\n    Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));\n    Assert.assertEquals(""hi Bob (protocol=foo)"", AnnotatedClientEndpoint.message());\n    session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, ""Foo!""));\n    Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());\n    CloseReason cr = MessageEndpoint.getReason();\n    Assert.assertEquals(CloseReason.CloseCodes.VIOLATED_POLICY.getCode(), cr.getCloseCode().getCode());\n    Assert.assertEquals(""Foo!"", cr.getReasonPhrase());\n}']",deployment;Session;session;URI;chat;protocol;session;connect;VIOLATED;Reason,7.450580596923828e-09;7.450580596923828e-09;5.587935447692871e-09;4.889443516731262e-09;4.6566128730773926e-09;3.958120942115784e-09;3.026798367500305e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-09,4,4,"[-2.8790347576141357, -6.470036506652832, -7.011483192443848, -6.624898910522461, -0.06517695635557175, -5.766135215759277]",0.9369016289710999
3,"['@Test\npublic void testReplicatorProducerName() throws Exception {\n    log.info(""--- Starting ReplicatorTest::testReplicatorProducerName ---"");\n    final String topicName = BrokerTestUtil.newUniqueName(""persistent"");\n    final TopicName dest = TopicName.get(topicName);\n    @Cleanup\n    MessageProducer producer1 = new MessageProducer(url1, dest);\n    Awaitility.await().untilAsserted(() -> {\n        assertTrue(pulsar2.getBrokerService().getTopicReference(topicName).isPresent());\n    });\n    Optional<Topic> topic = pulsar2.getBrokerService().getTopicReference(topicName);\n    assertTrue(topic.isPresent());\n    Set<String> remoteClusters = topic.get().getProducers().values().stream().map(Producer::getRemoteCluster).collect(Collectors.toSet());\n    assertTrue(remoteClusters.contains(""r1""));\n}']",Broker;persistent;Name;new;Producer;Collectors;topic;Producer;Reference;await,2.9802322387695312e-08;1.6763806343078613e-08;1.210719347000122e-08;7.450580596923828e-09;6.05359673500061e-09;5.587935447692871e-09;5.587935447692871e-09;5.3551048040390015e-09;4.889443516731262e-09;4.6566128730773926e-09,0,0,"[-0.007572635542601347, -6.602782249450684, -7.761373043060303, -8.201069831848145, -5.277459144592285, -7.870685577392578]",0.9924559593200684
3,"['@Test\npublic void test_enum() {\n    assertEquals(""\\""K\\"""", Json.toJson(K.K));\n    String expected = ""{\\n"" + ((""   \\""name\\"": \\""t\\"",\\n"" + ""   \\""index\\"": 1\\n"") + ""}"");\n    assertEquals(expected, Json.toJson(TT.T));\n    assertEquals(""\\""T\\"""", Json.toJson(TT.T, JsonFormat.full().ignoreJsonShape()));\n}']",Equals;Format;TT;ignore;name;TT;son;son;son;to,4.540197551250458e-09;4.190951585769653e-09;2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10,3,3,"[-9.759167671203613, -10.9591646194458, -7.840673446655273, -0.0007043979712761939, -9.22830867767334, -8.893208503723145]",0.9992958307266235
3,"['@Test\npublic void testCleanup() throws Exception {\n    ObjectStore objStore = new ObjectStore();\n    objStore.setConf(metaStore.getConf());\n    objStore.deleteRuntimeStats(0);\n    objStore.addRuntimeStat(createStat(1));\n    Thread.sleep(2000);\n    objStore.addRuntimeStat(createStat(2));\n    int deleted = objStore.deleteRuntimeStats(1);\n    int deleted = objStore.deleteRuntimeStats(5);\n    assertEquals(1, deleted);\n    List<RuntimeStat> all = getRuntimeStats();\n    assertEquals(1, all.size());\n    assertEquals(2, all.get(0).getWeight());\n}']",Stat;Runtime;get;Store;delete;Thread;Stat;get;Runtime;create,1.0477378964424133e-09;8.731149137020111e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10,0,0,"[-0.0007980260998010635, -7.577392578125, -9.024459838867188, -9.916668891906738, -9.469332695007324, -10.154947280883789]",0.999202311038971
3,"['@Test\npublic void testPartialRepair() throws InterruptedException {\n    Collection<LongTokenRange> ranges = new ArrayList<>();\n    LongTokenRange range1 = new LongTokenRange(1, 2);\n    LongTokenRange range2 = new LongTokenRange(3, 4);\n    ranges.add(range1);\n    ranges.add(range2);\n    final RepairTask repairTask = new RepairTask.Builder().withJMXProxyFactory(jmxProxyFactory).withTableReference(myTableReference).withTokenRanges(ranges).withTableRepairMetrics(myTableRepairMetrics).withRepairHistory(repairHistory).withJobId(jobId).withReplicas(participants).build();\n    CountDownLatch cdl = startRepair(repairTask, false);\n    Notification notification = new Notification(""progress"", ""repair:1"", 0, getRepairMessage(range1));\n    notification.setUserData(getNotificationData(PROGRESS.ordinal(), 1, 2));\n    proxy.notify(notification);\n    notification = new Notification(""progress"", ""repair:1"", 1, getRepairMessage(range2));\n    notification.setUserData(getNotificationData(PROGRESS.ordinal(), 2, 2));\n    proxy.notify(notification);\n    notification = new Notification(""progress"", ""repair:1"", 2, ""Done with repair"");\n    notification.setUserData(getNotificationData(COMPLETE.ordinal(), 2, 2));\n    proxy.notify(notification);\n    cdl.await();\n    assertThat(repairTask.getUnknownRanges()).isNull();\n    assertThat(repairTask.getCompletedRanges()).containsExactlyElementsOf(ranges);\n    assertThat(proxy.myOptions.get(RANGES_KEY)).isNotEmpty();\n    verify(myTableRepairMetrics).repairTiming(eq(TABLE_REFERENCE), anyLong(), any(TimeUnit.class), eq(true));\n    verify(repairSessions.get(range1)).start();\n    verify(repairSessions.get(range2)).start();\n    verify(repairSessions.get(range1)).finish(eq(SUCCESS));\n    verify(repairSessions.get(range2)).finish(eq(SUCCESS));\n}']",Metrics;any;eq;Repair;Table;Unit;Completed;Replicas;KEY;repair,1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10,0,3,"[-0.0009066523634828627, -7.45139741897583, -8.716913223266602, -9.840193748474121, -9.58358383178711, -10.131962776184082]",0.999093770980835
3,"['@Test\n@Test(timeOut = 10000)\npublic void producerSendAsync() throws PulsarClientException {\n    String key = ""producerSendAsync"";\n    final String topicName = ""persistent://prop/cluster/namespace/topic-"" + key;\n    final String subscriptionName = ""my-subscription-"" + key;\n    final String messagePredicate = ""my-message-"" + key + ""-"";\n    final int numberOfMessages = 30;\n    Producer<byte[]> producer = pulsarClient.newProducer().topic(topicName)\n    .enableBatching(false)\n    .messageRoutingMode(MessageRoutingMode.SinglePartition)\n    .create();\n    Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName)\n    .subscribe();\n    Set<MessageId> messageIds = new HashSet<>();\n    List<Future<MessageId>> futures = new ArrayList<>();\n    for (int i = 0; i < numberOfMessages; i++) {\n        String message = messagePredicate + i;\n        futures.add(producer.sendAsync(message.getBytes()));\n    }\n    MessageIdImpl previousMessageId = null;\n    for (Future<MessageId> f : futures) {\n        try {\n            MessageIdImpl currentMessageId = (MessageIdImpl) f.get();\n            if (previousMessageId != null) {\n                Assert.assertTrue(currentMessageId.compareTo(previousMessageId) > 0,\n                ""Message Ids should be in ascending order"");\n            }\n            messageIds.add(currentMessageId);\n            previousMessageId = currentMessageId;\n        } catch (Exception e) {\n            Assert.fail(""Failed to publish message, Exception: "" + e.getMessage());\n        }\n    }\n    log.info(""Message IDs = "" + messageIds);\n    Assert.assertEquals(messageIds.size(), numberOfMessages, ""Not all messages published successfully"");\n    for (int i = 0; i < numberOfMessages; i++) {\n        Message<byte[]> message = consumer.receive();\n        Assert.assertEquals(new String(message.getData()), messagePredicate + i);\n        MessageId messageId = message.getMessageId();\n        Assert.assertTrue(messageIds.remove(messageId), ""Failed to receive message"");\n    }\n    log.info(""Message IDs = "" + messageIds);\n    Assert.assertEquals(messageIds.size(), 0, ""Not all messages received successfully"");\n    consumer.unsubscribe();\n}']",time;pulsar;namespace;ulsar;topic;Partition;topic;final;compare;outing,6.332993507385254e-08;1.979060471057892e-08;4.423782229423523e-09;4.190951585769653e-09;3.725290298461914e-09;3.259629011154175e-09;3.259629011154175e-09;3.259629011154175e-09;3.14321368932724e-09;2.7939677238464355e-09,0,0,"[-0.0007952864980325103, -7.473117828369141, -9.231366157531738, -10.16477108001709, -9.745627403259277, -10.357612609863281]",0.9992050528526306
3,"['@Test\npublic void testChecksumReconnection() throws Exception {\n    final String topicName = ""persistent"";\n    ProducerImpl<byte[]> prod = ((ProducerImpl<byte[]>) (pulsarClient.newProducer().topic(topicName).enableBatching(false).messageRoutingMode(SinglePartition).create()));\n    ProducerImpl<byte[]> producer = spy(prod);\n    doReturn(producer.brokerChecksumSupportedVersion() + 1).when(producer).brokerChecksumSupportedVersion();\n    doAnswer(( invocationOnMock) -> prod.getState()).when(producer).getState();\n    doAnswer(( invocationOnMock) -> prod.getClientCnx()).when(producer).getClientCnx();\n    doAnswer(( invocationOnMock) -> prod.cnx()).when(producer).cnx();\n    Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(""my-sub"").subscribe();\n    stopBroker();\n    ((PulsarClientImpl) (pulsarClient)).timer().stop();\n    ClientCnx mockClientCnx = spy(new ClientCnx(new ClientConfigurationData(), ((PulsarClientImpl) (pulsarClient)).eventLoopGroup()));\n    doReturn(producer.brokerChecksumSupportedVersion() - 1).when(mockClientCnx).getRemoteEndpointProtocolVersion();\n    prod.setClientCnx(mockClientCnx);\n    CompletableFuture<MessageId> future1 = producer.sendAsync(""message-1"".getBytes());\n    byte[] a2 = ""message-2"".getBytes();\n    TypedMessageBuilder<byte[]> msg2 = producer.newMessage().value(a2);\n    CompletableFuture<MessageId> future2 = msg2.sendAsync();\n    ((TypedMessageBuilderImpl<byte[]>) (msg2)).getContent().put(a2.length - 1, ((byte) (\'3\')));\n    prod.setClientCnx(null);\n    startBroker();\n    prod.grabCnx();\n    try {\n        future1.get(10, TimeUnit.SECONDS);\n        future2.get(10, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        e.printStackTrace();\n        fail(""Broker shouldn\'t verify checksum for corrupted message and it shouldn\'t fail"");\n    }\n    ((ConsumerImpl<byte[]>) (consumer)).grabCnx();\n    Message<byte[]> msg = consumer.receive(1, TimeUnit.SECONDS);\n    assertEquals(new String(msg.getData()), ""message-1"");\n    msg = consumer.receive(1, TimeUnit.SECONDS);\n    assertEquals(new String(msg.getData()), ""message-3"");\n}']",timer;Loop;event;Group;topic;prod;spy;topic;do;outing,7.450580596923828e-08;5.960464477539063e-08;4.470348358154297e-08;2.2351741790771484e-08;2.2351741790771484e-08;2.0489096641540527e-08;1.4901161193847656e-08;1.4901161193847656e-08;1.4901161193847656e-08;1.30385160446167e-08,0,0,"[-0.0008278042078018188, -7.414909839630127, -9.249959945678711, -10.153244018554688, -9.764885902404785, -10.326308250427246]",0.9991725087165833
3,"['@Test\npublic void shouldTerminateWhenFutureIsCancelled() throws InterruptedException {\n    GracefulExecutorServicesShutdown shutdown = GracefulExecutorServicesShutdown.initiate();\n    shutdown.timeout(Duration.ofMillis(15000));\n    ExecutorService executorService = mock(ExecutorService.class);\n    when(executorService.isShutdown()).thenReturn(true);\n    AtomicBoolean terminated = new AtomicBoolean();\n    AtomicBoolean awaitTerminationInterrupted = new AtomicBoolean();\n    when(executorService.isTerminated()).thenAnswer(invocation -> terminated.get());\n    when(executorService.awaitTermination(anyLong(), any())).thenAnswer(invocation  -> {\n        long timeout = invocation.getArgument(0);\n        TimeUnit unit = invocation.getArgument(1);\n        try {\n            Thread.sleep(unit.toMillis(timeout));\n        } catch (InterruptedException e) {\n            awaitTerminationInterrupted.set(true);\n            Thread.currentThread().interrupt();\n            throw e;\n        }\n        throw new IllegalStateException(""Thread.sleep should have been interrupted"");\n    });\n    when(executorService.shutdownNow()).thenAnswer(invocation -> {\n        terminated.set(true);\n        return null;\n    });\n    shutdown.shutdown(executorService);\n    CompletableFuture<Void> future = shutdown.handle();\n    future.cancel(false);\n    Awaitility.await().untilAsserted(() -> assertTrue(awaitTerminationInterrupted.get(),\n    ""awaitTermination should have been interrupted""));\n    verify(executorService, times(1)).awaitTermination(anyLong(), any());\n    verify(executorService, times(1)).shutdownNow();\n}']",unit;invocation;invocation;Unit;Now;long;Mill;invocation;interrupt;Graceful,1.6298145055770874e-09;1.57160684466362e-09;1.1641532182693481e-09;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10,0,1,"[-0.0008000510279089212, -7.529034614562988, -9.078495025634766, -10.018183708190918, -9.604349136352539, -10.221930503845215]",0.9992004036903381
3,"['@Test\npublic void testFromFileToFtp() throws Exception {\n    service.suspend();\n    template.sendBodyAndHeader(""file:{{ftp.root.dir}}/reconnect"", ""Hello World"", FILE_NAME, ""hello.txt"");\n    MockEndpoint mock = getMockEndpoint(""mock:result"");\n    mock.expectedMessageCount(0);\n    Thread.sleep(3000);\n    assertMockEndpointsSatisfied();\n    mock.reset();\n    mock.expectedMessageCount(1);\n    service.resume();\n    Thread.sleep(3000);\n    assertMockEndpointsSatisfied();\n}']",suspend;Endpoint;mock;result;Endpoint;mock;sleep;service;mock;get,2.6193447411060333e-09;2.2118911147117615e-09;2.2118911147117615e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09,0,0,"[-0.0008316157618537545, -7.564464569091797, -9.023954391479492, -9.835033416748047, -9.268047332763672, -10.023787498474121]",0.9991686344146729
3,"['@Test\npublic void testQueryRaw() throws Exception {\n    Dao<Foo, Integer> dao = createDao(Foo.class, true);\n    Foo foo = new Foo();\n    foo.stringField = ""zipper"";\n    dao.create(foo);\n    QueryBuilder<Foo, Integer> qb = dao.queryBuilder();\n    assertEquals(1, qb.countOf());\n    GenericRawResults<String[]> results = qb.queryRaw();\n    List<String[]> stringResults = results.getResults();\n    assertEquals(1, stringResults.size());\n    assertEquals(Integer.toString(foo.id), stringResults.get(0)[0]);\n    assertEquals(foo.stringField, stringResults.get(0)[3]);\n}']",size;Builder;Results;get;string;Results;results;ao;Raw;ao,1.1175870895385742e-08;5.587935447692871e-09;5.587935447692871e-09;3.725290298461914e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.2118911147117615e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09,3,3,"[-9.655411720275879, -11.112136840820312, -7.983523845672607, -0.0006559127941727638, -9.067091941833496, -9.025907516479492]",0.9993442893028259
3,"['@Test\npublic void testAdditionalModelTypeAnnotationsSemiColon() throws Exception {\n    OpenAPI openAPI = TestUtils.createOpenAPI();\n    final AbstractJavaCodegen codegen = new P_AbstractJavaCodegen();\n    codegen.additionalProperties().put(ADDITIONAL_MODEL_TYPE_ANNOTATIONS, ""@Foo;@Bar"");\n    codegen.processOpts();\n    codegen.preprocessOpenAPI(openAPI);\n    final List<String> additionalModelTypeAnnotations = new ArrayList<String>();\n    additionalModelTypeAnnotations.add(""@Foo"");\n    additionalModelTypeAnnotations.add(""@Bar"");\n    Assert.assertEquals(codegen.getAdditionalModelTypeAnnotations(), additionalModelTypeAnnotations);\n}']",Assert;Java;codegen;ANNOTATIONS;Java;put;Abstract;codegen;Opt;API,1.1641532182693481e-08;1.1175870895385742e-08;9.313225746154785e-09;8.381903171539307e-09;7.450580596923828e-09;7.450580596923828e-09;7.450580596923828e-09;7.450580596923828e-09;6.51925802230835e-09;6.402842700481415e-09,3,3,"[-4.538826942443848, -7.293152809143066, -6.370255947113037, -0.11752593517303467, -2.4004859924316406, -4.943334579467773]",0.8891175389289856
3,"[""@Test\npublic void manyParameters() throws Exception {\n    assertThat(testResult(ManyParameters.class), isSuccessful());\n    assertEquals(16, ManyParameters.iterations);\n    assertEquals(asList(-1, -2, -4), ManyParameters.firstTestCases.subList(0, 3));\n    assertEquals(asList(-1, -2, -4), ManyParameters.firstTestCases.subList(4, 7));\n    assertEquals(asList(-1, -2, -4), ManyParameters.firstTestCases.subList(8, 11));\n    assertEquals(asList(-1, -2, -4), ManyParameters.firstTestCases.subList(12, 15));\n    assertEquals(asList('r', 'r', 'r', 'r', 'y', 'y', 'y', 'y'), ManyParameters.secondTestCases.subList(0, 8));\n}""]",iterations;Many;many;sub;Parameters;List;Parameters;List;as;Parameters,1.862645149230957e-08;1.1175870895385742e-08;7.450580596923828e-09;5.587935447692871e-09;5.122274160385132e-09;4.423782229423523e-09;3.4924596548080444e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09,3,3,"[-4.032732009887695, -6.982977390289307, -6.0258965492248535, -0.024604428559541702, -6.359610080718994, -6.4986958503723145]",0.975695788860321
3,"['@Test\npublic void shouldReturnBodyWhenEnabledAndNoMax() {\n    String body = ""{\\n"" +\n    ""  \\""error\\"": \\""not found\\""\\n"" +\n    ""}"";\n    HttpResponseFacade mock = mock(HttpResponseFacade.class);\n    when(mock.response()).thenReturn(generateResponse(\n    ""application/json"",\n    404,\n    body.getBytes()));\n    ((HttpAssertionFacadeImpl) facade).facade = mock;\n    world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""true"");\n    validateException(\n    200,\n    ""1 expectation failed.\\n"" +\n    ""Expected status code \\""200\\"" but was \\""404\\"" with body:\\n"" +\n    ""\\""\\""\\""\\n"" +\n    body +\n    ""\\n\\""\\""\\"".\\n"");\n}']",Http;facade;ttp;DISPLAY;ODE;Assertion;Body;status;expectation;Response,1.1175870895385742e-08;7.450580596923828e-09;6.05359673500061e-09;6.05359673500061e-09;5.122274160385132e-09;4.6566128730773926e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.259629011154175e-09,0,4,"[-0.2476678341627121, -4.536564826965332, -5.422003269195557, -1.7351046800613403, -3.8249168395996094, -5.107611656188965]",0.780619204044342
3,"['@Test\npublic void socketTest() throws Exception {\n    URI consumeUri = URI.create(CONSUME_URI);\n    URI produceUri = URI.create(PRODUCE_URI);\n    WebSocketClient consumeClient = new WebSocketClient();\n    SimpleConsumerSocket consumeSocket = new SimpleConsumerSocket();\n    WebSocketClient produceClient = new WebSocketClient();\n    SimpleProducerSocket produceSocket = new SimpleProducerSocket();\n    try {\n        consumeClient.start();\n        ClientUpgradeRequest consumeRequest = new ClientUpgradeRequest();\n        Future<Session> consumerFuture = consumeClient.connect(consumeSocket, consumeUri, consumeRequest);\n        log.info(""Connecting to : {}"", consumeUri);\n        ClientUpgradeRequest produceRequest = new ClientUpgradeRequest();\n        produceClient.start();\n        Future<Session> producerFuture = produceClient.connect(produceSocket, produceUri, produceRequest);\n        Thread.sleep(1000);\n        Assert.assertTrue(consumerFuture.get().isOpen());\n        Assert.assertTrue(producerFuture.get().isOpen());\n        consumeSocket.awaitClose(1, TimeUnit.SECONDS);\n        produceSocket.awaitClose(1, TimeUnit.SECONDS);\n        Assert.assertTrue(produceSocket.getBuffer().size() > 0);\n        Assert.assertEquals(produceSocket.getBuffer(), consumeSocket.getBuffer());\n    } finally {\n        try {\n            consumeClient.stop();\n            produceClient.stop();\n        } catch (Exception e) {\n            log.error(e.getMessage());\n        }\n    }\n}']",producer;Unit;consumer;Future;Close;Time;Unit;Time;Socket;Upgrade,3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.9281287677586079e-10;1.8917489796876907e-10,0,0,"[-0.0007955246837809682, -7.5539984703063965, -9.094337463378906, -9.9629487991333, -9.523693084716797, -10.160514831542969]",0.999204695224762
3,"['    @Test\n    public void testStatusEmpty()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(new ArrayList<>());\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.status(), scheduledRepairJobListType);\n\n        assertThat(response).isEmpty();\n    }\n']",SON;obs;Job;status;Repair;son;Return;new;EST;from,2.6193447411060333e-09;1.4551915228366852e-09;1.280568540096283e-09;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8932414054870605, -5.7717976570129395, -6.398660182952881, -5.480807304382324, -5.471737384796143, -0.01603364385664463]",0.9840942025184631
3,"['    @Test\n    public void testStatusEntry()\n    {\n        long repairInterval = TimeUnit.DAYS.toMillis(7);\n        long lastRepairedAt = System.currentTimeMillis();\n\n        RepairJobView repairJobView = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(lastRepairedAt)\n                .withRepairInterval(repairInterval)\n                .build();\n        ScheduledRepairJob expectedResponse = new ScheduledRepairJob(repairJobView);\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.status(), scheduledRepairJobListType);\n\n        assertThat(response).containsExactly(expectedResponse);\n    }\n']",Entry;Status;repair;status;new;cheduler;EST;singleton;Current;Job,1.3969838619232178e-09;9.313225746154785e-10;6.693881005048752e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.849541664123535, -5.682705402374268, -6.328961372375488, -5.436763286590576, -5.529895305633545, -0.016525182873010635]",0.9836106300354004
3,"['    @Test\n    public void testStatusMultipleEntries()\n    {\n        RepairJobView job1 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(1234L)\n                .withRepairInterval(11)\n                .build();\n        RepairJobView job2 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withLastRepairedAt(2345L)\n                .withRepairInterval(12)\n                .build();\n        RepairJobView job3 = new TestUtils.OnDemandRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withCompletedAt(3456L)\n                .build();\n        List<RepairJobView> repairJobViews = Arrays.asList(\n                job1,\n                job2,\n                job3\n        );\n\n        List<ScheduledRepairJob> expectedResponse = repairJobViews.stream()\n                .map(ScheduledRepairJob::new)\n                .collect(Collectors.toList());\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(repairJobViews);\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.status(), scheduledRepairJobListType);\n\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Repair;Multiple;Repaired;with;cheduled;job;cheduled;Table;Job;with,3.4924596548080444e-10;2.3283064365386963e-10;2.255546860396862e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.2369127944111824e-10;1.0186340659856796e-10,5,5,"[-5.829345703125, -5.647641181945801, -6.240828514099121, -5.268594741821289, -5.4658966064453125, -0.017953740432858467]",0.9822065830230713
3,"['    @Test\n    public void testKeyspaceStatusEmpty()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(new ArrayList<>());\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.keyspaceStatus(""""), scheduledRepairJobListType);\n\n        assertThat(response).isEmpty();\n    }\n']",Repair;SON;keyspace;EST;Management;son;List;Repair;Type;repair,1.178705133497715e-09;1.0477378964424133e-09;8.731149137020111e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.900216579437256, -5.778120040893555, -6.424639701843262, -5.514089584350586, -5.4905805587768555, -0.015732690691947937]",0.9843904376029968
3,"['    @Test\n    public void testKeyspaceStatusNonExisting()\n    {\n        long expectedLastRepairedAt = 234;\n        long expectedRepairInterval = 123;\n\n        RepairJobView repairJobView = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(expectedLastRepairedAt)\n                .withRepairInterval(expectedRepairInterval)\n                .build();\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.keyspaceStatus(""nonexistingkeyspace""), scheduledRepairJobListType);\n\n        assertThat(response).isEmpty();\n    }\n']",Non;istingkeyspace;Last;son;scheduled;Keyspace;Keyspace;expected;EST;View,4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.2919266484677792e-10,5,5,"[-5.865740776062012, -5.689897060394287, -6.3338141441345215, -5.419918537139893, -5.523890018463135, -0.01654394343495369]",0.9835920333862305
3,"['    @Test\n    public void testKeyspaceStatusEntry()\n    {\n        long expectedLastRepairedAt = 234;\n        long repairInterval = 123;\n\n        RepairJobView repairJobView = new TestUtils.ScheduledRepairJobBuilder()\n            .withKeyspace(""ks"")\n            .withTable(""tb"")\n            .withLastRepairedAt(expectedLastRepairedAt)\n            .withRepairInterval(repairInterval)\n            .build();\n        ScheduledRepairJob expectedResponse = new ScheduledRepairJob(repairJobView);\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.keyspaceStatus(""ks""), scheduledRepairJobListType);\n\n        assertThat(response).containsExactly(expectedResponse);\n    }\n']",ks;keyspace;Status;Last;Interval;long;EST;Repair;expected;Last,5.384208634495735e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.861258506774902, -5.683974742889404, -6.330991268157959, -5.418221950531006, -5.521382808685303, -0.016600223258137703]",0.9835366606712341
3,"['    @Test\n    public void testKeyspaceStatusMultipleEntries()\n    {\n        RepairJobView job1 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(1234L)\n                .withRepairInterval(11)\n                .build();\n        RepairJobView job2 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withLastRepairedAt(2345L)\n                .withRepairInterval(45)\n                .build();\n        RepairJobView job3 = new TestUtils.OnDemandRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withCompletedAt(3456L)\n                .build();\n        List<RepairJobView> repairJobViews = Arrays.asList(\n                job1,\n                job2,\n                job3\n        );\n        List<ScheduledRepairJob> expectedResponse = repairJobViews.stream()\n                .map(ScheduledRepairJob::new)\n                .collect(Collectors.toList());\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(repairJobViews);\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.keyspaceStatus(""ks""), scheduledRepairJobListType);\n\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Entries;Multiple;Keyspace;Repaired;Keyspace;Repair;Keyspace;ks;Repair;Interval,3.92901711165905e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.964508555829525e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.832406997680664, -5.649617671966553, -6.247030735015869, -5.27557373046875, -5.4728217124938965, -0.017858894541859627]",0.9822995066642761
3,"['    @Test\n    public void testTableNonExisting()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(new ArrayList<>());\n\n        Map<Object, Object> response = GSON.fromJson(repairManagementREST.tableStatus(""ks"", ""tb""), new TypeToken<Map<Object, Object>>(){}.getType());\n\n        assertThat(response).isEmpty();\n    }\n']",Status;Repair;SON;Repair;Current;EST;obs;Object;Non;ks,1.1059455573558807e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.893182277679443, -5.756453514099121, -6.383568286895752, -5.472568988800049, -5.481817722320557, -0.016100743785500526]",0.984028160572052
3,"['    @Test\n    public void testTableEntry() throws UnknownHostException\n    {\n        long expectedLastRepairedAt = 234;\n        long repairInterval = 123;\n        Node replica = mock(Node.class);\n        when(replica.getPublicAddress()).thenReturn(InetAddress.getLocalHost());\n\n        VnodeRepairState vnodeRepairState = TestUtils\n                .createVnodeRepairState(2, 3, ImmutableSet.of(replica), expectedLastRepairedAt);\n        RepairJobView repairJobView = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(expectedLastRepairedAt)\n                .withRepairInterval(repairInterval)\n                .withVnodeRepairStateSet(ImmutableSet.of(vnodeRepairState))\n                .withStatus(Status.IN_QUEUE)\n                .build();\n\n        List<ScheduledRepairJob> expectedResponse = Collections.singletonList(new ScheduledRepairJob(repairJobView));\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.tableStatus(""ks"", ""tb""), scheduledRepairJobListType);\n\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Repair;Interval;repair;Node;scheduled;cheduled;Repair;Set;Local;Repair,6.111804395914078e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.856376647949219, -5.67441463470459, -6.3409929275512695, -5.3985395431518555, -5.554687976837158, -0.016586152836680412]",0.9835507273674011
3,"['    @Test\n    public void testTableMultipleEntries() throws UnknownHostException\n    {\n        Host host = mock(Host.class);\n        when(host.getBroadcastAddress()).thenReturn(InetAddress.getLocalHost());\n        RepairJobView job1 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(1234L)\n                .withRepairInterval(11)\n                .build();\n        RepairJobView job2 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withLastRepairedAt(134L)\n                .withRepairInterval(112)\n                .build();\n        RepairJobView job3 = new TestUtils.OnDemandRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withCompletedAt(3456L)\n                .build();\n        List<RepairJobView> repairJobViews = Arrays.asList(\n                job1,\n                job2,\n                job3\n        );\n\n        List<ScheduledRepairJob> expectedResponse = repairJobViews.stream()\n                .filter(job -> ""tb"".equals(job.getTableReference().getTable()))\n                .map(ScheduledRepairJob::new)\n                .collect(Collectors.toList());\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(repairJobViews);\n\n        List<ScheduledRepairJob> response = GSON.fromJson(repairManagementREST.tableStatus(""ks"", ""tb""), scheduledRepairJobListType);\n\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Entries;Table;Multiple;Table;Address;Repaired;with;Keyspace;job;View,6.984919309616089e-10;2.9103830456733704e-10;2.473825588822365e-10;2.1827872842550278e-10;2.1464074961841106e-10;1.8917489796876907e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.382431946694851e-10;1.3096723705530167e-10,5,5,"[-5.833232402801514, -5.6462812423706055, -6.253425121307373, -5.283533573150635, -5.478529930114746, -0.01779039017856121]",0.9823670387268066
3,"['    @Test\n    public void testIdEntry() throws UnknownHostException\n    {\n        Host host = mock(Host.class);\n        when(host.getBroadcastAddress()).thenReturn(InetAddress.getLocalHost());\n        UUID expectedId = UUID.randomUUID();\n        RepairJobView expectedRepairJob = new TestUtils.ScheduledRepairJobBuilder()\n                .withId(expectedId)\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(1234L)\n                .withRepairInterval(11)\n                .build();\n        RepairJobView job1 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withLastRepairedAt(134L)\n                .withRepairInterval(112)\n                .build();\n        RepairJobView job2 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(132L)\n                .withRepairInterval(132)\n                .build();\n        RepairJobView job3 = new TestUtils.OnDemandRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withCompletedAt(3456L)\n                .build();\n\n        CompleteRepairJob expectedResponse = new CompleteRepairJob(expectedRepairJob);\n\n        List<RepairJobView> repairJobViews = Arrays.asList(\n                expectedRepairJob,\n                job3,\n                job1,\n                job2\n        );\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(repairJobViews);\n\n        CompleteRepairJob response = GSON.fromJson(repairManagementREST.jobStatus(expectedId.toString()), CompleteRepairJob.class);\n\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Repaired;Repair;random;Host;Repair;Utils;Exception;ks;job;expected,9.604264050722122e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.9281287677586079e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.6007106751203537e-10,5,5,"[-5.835385799407959, -5.647911071777344, -6.259225368499756, -5.294355869293213, -5.480737209320068, -0.017701853066682816]",0.9824540019035339
3,"['    @Test\n    public void testIdEntryNotFound() throws UnknownHostException\n    {\n        Host host = mock(Host.class);\n        when(host.getBroadcastAddress()).thenReturn(InetAddress.getLocalHost());\n        RepairJobView job1 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(1234L)\n                .withRepairInterval(11)\n                .build();\n        RepairJobView job2 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withLastRepairedAt(134L)\n                .withRepairInterval(112)\n                .build();\n        RepairJobView job3 = new TestUtils.OnDemandRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withCompletedAt(3456L)\n                .build();\n        List<RepairJobView> repairJobViews = Arrays.asList(\n                job1,\n                job2,\n                job3\n        );\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(repairJobViews);\n\n        String response = repairManagementREST.jobStatus(UUID.randomUUID().toString());\n\n        assertThat(response).isEqualTo(""{}"");\n    }\n']",Exception;Repaired;Broadcast;Inet;View;Unknown;Host;Host;Local;Host,8.149072527885437e-10;3.5652192309498787e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.836562156677246, -5.64901065826416, -6.257585525512695, -5.28772497177124, -5.481374740600586, -0.017728906124830246]",0.9824274182319641
3,"['    @Test\n    public void testIdEntryEmpty()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.emptyList());\n\n        String response = repairManagementREST.jobStatus(UUID.randomUUID().toString());\n\n        assertThat(response).isEqualTo(""{}"");\n    }\n']",Status;EST;cheduler;UID;repair;Management;job;UID;empty;Repair,1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.8850932121276855, -5.744541645050049, -6.3899245262146, -5.495644569396973, -5.475295066833496, -0.016081271693110466]",0.9840472340583801
3,"['    @Test\n    public void testIdInvalidUUID()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.emptyList());\n\n        String response = repairManagementREST.jobStatus(""123"");\n\n        assertThat(response).isEqualTo(""{}"");\n    }\n']",repair;UID;cheduler;response;EST;response;Return;Status;obs;Management,9.89530235528946e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.8928632736206055, -5.756219863891602, -6.397448539733887, -5.496662139892578, -5.478476047515869, -0.015991175547242165]",0.9841359853744507
3,"['    @Test\n    public void testConfigEmpty()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(new ArrayList<>());\n\n        List<TableRepairConfig> response = GSON.fromJson(repairManagementREST.config(), tableRepairConfigListType);\n\n        assertThat(response).isEmpty();\n    }\n']",obs;response;Repair;Repair;Array;Return;List;That;my;Current,1.1059455573558807e-09;7.566995918750763e-10;7.421476766467094e-10;5.820766091346741e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.895021438598633, -5.762046813964844, -6.380880355834961, -5.448329448699951, -5.470422267913818, -0.01623540185391903]",0.9838956594467163
3,"['    @Test\n    public void testConfigEntry()\n    {\n        // Given\n        RepairConfiguration repairConfig = TestUtils.createRepairConfiguration(11, 2.2, 33, 44);\n        RepairJobView repairJobView = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl""), repairConfig, null, Status.IN_QUEUE, 0);\n        TableRepairConfig expectedResponse = new TableRepairConfig(repairJobView);\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        List<TableRepairConfig> response = GSON.fromJson(repairManagementREST.config(), tableRepairConfigListType);\n\n        assertThat(response).containsExactly(expectedResponse);\n    }\n']",SON;Job;Entry;Job;obs;create;Config;get;Config;Config,1.0477378964424133e-09;7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.861883640289307, -5.73122501373291, -6.396462917327881, -5.484551429748535, -5.532271385192871, -0.01599094085395336]",0.9841362237930298
3,"['    @Test\n    public void testConfigMultipleEntries()\n    {\n        // Given\n        RepairConfiguration repairConfig = TestUtils.createRepairConfiguration(11, 2.2, 33, 44);\n        RepairJobView repairJobView = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl""), repairConfig, null, Status.IN_QUEUE, 0);\n\n        RepairConfiguration repairConfig2 = TestUtils.createRepairConfiguration(22, 3.3, 44, 55);\n        RepairJobView repairJobView2 = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks2"", ""tbl""), repairConfig2, null, Status.IN_QUEUE, 0);\n\n        RepairJobView repairJobView3 = new OnDemandRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl""), RepairConfiguration.DEFAULT, Status.IN_QUEUE, 0, System.currentTimeMillis());\n\n        List<TableRepairConfig> expectedResponse = Arrays.asList(\n                new TableRepairConfig(repairJobView),\n                new TableRepairConfig(repairJobView2),\n                new TableRepairConfig(repairJobView3)\n        );\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Arrays.asList(repairJobView, repairJobView2, repairJobView3));\n\n        List<TableRepairConfig> response = GSON.fromJson(repairManagementREST.config(), tableRepairConfigListType);\n\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Configuration;Config;Repair;Repair;Table;table;UID;Repair;UEUE;Table,2.764863893389702e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.831779479980469, -5.660372257232666, -6.328105926513672, -5.387948036193848, -5.5382399559021, -0.016845474019646645]",0.983295738697052
3,"['    @Test\n    public void testKeyspaceConfigEmpty()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(new ArrayList<>());\n\n        List<TableRepairConfig> response = GSON.fromJson(repairManagementREST.keyspaceConfig(""""), tableRepairConfigListType);\n\n        assertThat(response).isEmpty();\n    }\n']",repair;Keyspace;when;table;keyspace;response;my;Config;Repair;obs,1.6298145055770874e-09;6.984919309616089e-10;3.92901711165905e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.897755146026611, -5.768239974975586, -6.3913679122924805, -5.466374397277832, -5.47885274887085, -0.016075875610113144]",0.9840525388717651
3,"['    @Test\n    public void testKeyspaceConfigNonExisting()\n    {\n        RepairConfiguration repairConfig = TestUtils.createRepairConfiguration(11, 2.2, 33, 44);\n        RepairJobView repairJobView = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl""), repairConfig, null, Status.IN_QUEUE, 0);\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        List<TableRepairConfig> response = GSON.fromJson(repairManagementREST.keyspaceConfig(""nonexistingkeyspace""), tableRepairConfigListType);\n\n        assertThat(response).isEmpty();\n    }\n']",UID;Status;Repair;istingkeyspace;repair;Job;ks;List;Table;Scheduled,5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.876132488250732, -5.722825527191162, -6.4089741706848145, -5.501407146453857, -5.5321478843688965, -0.015886757522821426]",0.9842386841773987
3,"['    @Test\n    public void testKeyspaceConfigEntry()\n    {\n        RepairConfiguration repairConfig = TestUtils.createRepairConfiguration(11, 2.2, 33, 44);\n        RepairJobView repairJobView = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl""), repairConfig, null, Status.IN_QUEUE, 0);\n\n        TableRepairConfig expectedResponse = new TableRepairConfig(repairJobView);\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        List<TableRepairConfig> response = GSON.fromJson(repairManagementREST.keyspaceConfig(""ks""), tableRepairConfigListType);\n\n        assertThat(response).containsExactly(expectedResponse);\n    }\n']",UEUE;Config;Job;Repair;obs;expected;UID;View;UID;View,1.949956640601158e-09;6.984919309616089e-10;5.675246939063072e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.861622333526611, -5.726614475250244, -6.3976149559021, -5.492019176483154, -5.523777008056641, -0.016007952392101288]",0.9841194748878479
3,"['    @Test\n    public void testKeyspaceConfigMultipleEntries()\n    {\n        RepairConfiguration repairConfig = TestUtils.createRepairConfiguration(11, 2.2, 33, 44);\n        RepairJobView repairJobView = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl""), repairConfig, null, Status.IN_QUEUE, 0);\n\n        RepairConfiguration repairConfig2 = TestUtils.createRepairConfiguration(22, 3.3, 44, 55);\n        RepairJobView repairJobView2 = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl2""), repairConfig2, null, Status.IN_QUEUE, 0);\n\n        List<TableRepairConfig> expectedResponse = Arrays.asList(\n                new TableRepairConfig(repairJobView),\n                new TableRepairConfig(repairJobView2)\n        );\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Arrays.asList(repairJobView, repairJobView2));\n\n        List<TableRepairConfig> response = GSON.fromJson(repairManagementREST.keyspaceConfig(""ks""), tableRepairConfigListType);\n\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Keyspace;Type;View;repair;repair;UID;Multiple;null;Config;View,2.0081643015146255e-09;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.844533920288086, -5.67702579498291, -6.341834545135498, -5.4003705978393555, -5.526442527770996, -0.016714297235012054]",0.9834244847297668
3,"['    @Test\n    public void testTableConfigEmpty()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(new ArrayList<>());\n\n        Map<Object, Object> response = GSON.fromJson(repairManagementREST.tableConfig(""ks"", ""tbl""), new TypeToken<Map<Object, Object>>(){}.getType());\n\n        assertThat(response).isEmpty();\n    }\n']",repair;Table;cheduler;my;Config;Repair;SON;son;Object;Object,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.8948469161987305, -5.762067794799805, -6.373868942260742, -5.447620868682861, -5.480447769165039, -0.016208425164222717]",0.9839222431182861
3,"['    @Test\n    public void testTableConfigNonExisting()\n    {\n        RepairConfiguration repairConfig = TestUtils.createRepairConfiguration(11, 2.2, 33, 44);\n        RepairJobView repairJobView = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl""), repairConfig, null, Status.IN_QUEUE, 0);\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        Map<Object, Object> response = GSON.fromJson(repairManagementREST.tableConfig(""nonexisting"", ""tbl""), new TypeToken<Map<Object, Object>>(){}.getType());\n\n        assertThat(response).isEmpty();\n    }\n']",isting;Job;Job;Existing;Repair;Object;Repair;Repair;View;UID,8.149072527885437e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.8687663078308105, -5.72590970993042, -6.39204740524292, -5.489447116851807, -5.521249294281006, -0.016020270064473152]",0.984107494354248
3,"['    @Test\n    public void testTableConfigEntry()\n    {\n        RepairConfiguration repairConfig = TestUtils.createRepairConfiguration(11, 2.2, 33, 44);\n        RepairJobView repairJobView = new ScheduledRepairJobView(UUID.randomUUID(), myTableReferenceFactory.forTable(""ks"", ""tbl""), repairConfig, null, Status.IN_QUEUE, 0);\n\n        List<TableRepairConfig> expectedResponse = Collections.singletonList(new TableRepairConfig(repairJobView));\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.singletonList(repairJobView));\n\n        List<TableRepairConfig> response = GSON.fromJson(repairManagementREST.tableConfig(""ks"", ""tbl""), tableRepairConfigListType);\n\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",IN;bl;Management;Table;Table;Entry;Configuration;Configuration;Repair;repair,6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.764863893389702e-10;2.6557245291769505e-10,5,5,"[-5.86198091506958, -5.735915184020996, -6.395453929901123, -5.485629558563232, -5.521358966827393, -0.016016514971852303]",0.9841110706329346
3,"['    @Test\n    public void testConfigIdEntry() throws UnknownHostException\n    {\n        Host host = mock(Host.class);\n        when(host.getBroadcastAddress()).thenReturn(InetAddress.getLocalHost());\n        UUID expectedId = UUID.randomUUID();\n        RepairJobView expectedRepairJob = new TestUtils.ScheduledRepairJobBuilder()\n                .withId(expectedId)\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(1234L)\n                .withRepairInterval(11)\n                .build();\n        RepairJobView job1 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withLastRepairedAt(134L)\n                .withRepairInterval(112)\n                .build();\n        RepairJobView job2 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(132L)\n                .withRepairInterval(132)\n                .build();\n        RepairJobView job3 = new TestUtils.OnDemandRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withCompletedAt(3456L)\n                .build();\n\n        TableRepairConfig expectedResponse = new TableRepairConfig(expectedRepairJob);\n\n        List<RepairJobView> repairJobViews = Arrays.asList(\n                expectedRepairJob,\n                job3,\n                job1,\n                job2\n        );\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(repairJobViews);\n\n        TableRepairConfig response = GSON.fromJson(repairManagementREST.jobConfig(expectedId.toString()), TableRepairConfig.class);\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Entry;Config;UID;Broadcast;Repaired;Last;Address;expected;Repair;Job,1.1641532182693481e-09;6.984919309616089e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.836673259735107, -5.649448394775391, -6.263318061828613, -5.296051979064941, -5.484391212463379, -0.017660275101661682]",0.9824946522712708
3,"['    @Test\n    public void testConfigIdEntryNotFound() throws UnknownHostException\n    {\n        Host host = mock(Host.class);\n        when(host.getBroadcastAddress()).thenReturn(InetAddress.getLocalHost());\n        RepairJobView job1 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(1234L)\n                .withRepairInterval(11)\n                .build();\n        RepairJobView job2 = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withLastRepairedAt(134L)\n                .withRepairInterval(112)\n                .build();\n        RepairJobView job3 = new TestUtils.OnDemandRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb2"")\n                .withCompletedAt(3456L)\n                .build();\n        List<RepairJobView> repairJobViews = Arrays.asList(\n                job1,\n                job2,\n                job3\n        );\n\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(repairJobViews);\n\n        String response = repairManagementREST.jobConfig(UUID.randomUUID().toString());\n\n        assertThat(response).isEqualTo(""{}"");\n    }\n']",Broadcast;Not;Found;Repaired;View;Address;Repair;Repair;Return;get,2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.836844444274902, -5.650488376617432, -6.258568286895752, -5.284435749053955, -5.482254981994629, -0.017733942717313766]",0.9824223518371582
3,"['    @Test\n    public void testConfigIdEntryEmpty()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.emptyList());\n\n        String response = repairManagementREST.jobConfig(UUID.randomUUID().toString());\n\n        assertThat(response).isEqualTo(""{}"");\n    }\n']",Entry;random;response;Current;repair;Empty;response;UID;when;Management,9.313225746154785e-10;5.820766091346741e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-1.7462298274040222e-10;-1.7462298274040222e-10,5,5,"[-5.890158176422119, -5.743114948272705, -6.386572360992432, -5.482259273529053, -5.476897716522217, -0.016126902773976326]",0.984002411365509
3,"['    @Test\n    public void testConfigIdInvalidUUID()\n    {\n        when(myRepairScheduler.getCurrentRepairJobs()).thenReturn(Collections.emptyList());\n\n        String response = repairManagementREST.jobConfig(""123"");\n\n        assertThat(response).isEqualTo(""{}"");\n    }\n']",Management;obs;Repair;response;qual;Config;Collections;List;Return;job,6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;2.837623469531536e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;0.0,5,5,"[-5.894981861114502, -5.752697944641113, -6.393007755279541, -5.480356216430664, -5.482121467590332, -0.016057105734944344]",0.9840710163116455
3,"['    @Test\n    public void testScheduleRepair() throws EcChronosException\n    {\n        long expectedLastRepairedAt = 234;\n        long repairInterval = 123;\n\n        RepairJobView repairJobView = new TestUtils.ScheduledRepairJobBuilder()\n                .withKeyspace(""ks"")\n                .withTable(""tb"")\n                .withLastRepairedAt(expectedLastRepairedAt)\n                .withRepairInterval(repairInterval)\n                .build();\n        ScheduledRepairJob expectedResponse = new ScheduledRepairJob(repairJobView);\n\n        when(myOnDemandRepairScheduler.scheduleJob(myTableReferenceFactory.forTable(""ks"",""tb""))).thenReturn(repairJobView);\n        ScheduledRepairJob response = GSON.fromJson(repairManagementREST.scheduleJob(""ks"", ""tb""), ScheduledRepairJob.class);\n        assertThat(response).isEqualTo(expectedResponse);\n    }\n']",Interval;Keyspace;View;Repaired;Repair;View;my;SON;cheduler;Interval,6.83940015733242e-10;4.729372449219227e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.8666534423828125, -5.686782360076904, -6.33353328704834, -5.410993576049805, -5.524615287780762, -0.016589906066656113]",0.9835468530654907
3,['    @Test\n    public void testCloseAllLocks()\n    {\n        List<DummyLock> locks = new ArrayList<>();\n        for (int i = 0; i < 10; i++)\n        {\n            locks.add(new DummyLock());\n        }\n\n        new LockCollection(locks).close();\n\n        for (DummyLock lock : locks)\n        {\n            assertThat(lock.closed).isTrue();\n        }\n    }\n'],ummy;ummy;ummy;Lock;Lock;True;new;new;All;locks,3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.0913936421275139e-10;1.0186340659856796e-10;5.820766091346741e-11;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.8563456535339355, -5.676859378814697, -6.259869575500488, -5.340628147125244, -5.4572882652282715, -0.01740597002208233]",0.9827445149421692
3,['    @Test\n    public void testCloseAllLocksOneThrowing()\n    {\n        List<DistributedLock> locks = new ArrayList<>();\n        for (int i = 0; i < 4; i++)\n        {\n            locks.add(new DummyLock());\n        }\n\n        locks.add(new ThrowingLock());\n\n        for (int i = 0; i < 5; i++)\n        {\n            locks.add(new DummyLock());\n        }\n\n        new LockCollection(locks).close();\n\n        for (DistributedLock lock : locks)\n        {\n            if (lock instanceof DummyLock)\n            {\n                assertThat(((DummyLock) lock).closed).isTrue();\n            }\n        }\n    }\n'],One;ummy;Lock;Distributed;ocks;Lock;Array;Lock;closed;instanceof,2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.0186340659856796e-10;8.731149137020111e-11;8.731149137020111e-11;8.003553375601768e-11;7.275957614183426e-11,5,5,"[-5.8336968421936035, -5.646196365356445, -6.231312274932861, -5.291941165924072, -5.472878932952881, -0.017813928425312042]",0.9823439121246338
3,['    @Test\n    public void testInsertRemoveOne()\n    {\n        DummyJob job = new DummyJob(Priority.LOW);\n\n        queue.add(job);\n\n        assertThat(queue.iterator()).toIterable().containsExactly(job);\n    }\n'],Priority;Insert;iterator;job;ummy;new;job;contains;queue;Exactly,1.3387762010097504e-09;8.149072527885437e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.877298355102539, -5.7141804695129395, -6.331674575805664, -5.445578575134277, -5.4444146156311035, -0.016653921455144882]",0.9834839701652527
3,"['    @Test\n    public void testInsertDifferentPrio()\n    {\n        DummyJob job = new DummyJob(Priority.LOW);\n        DummyJob job2 = new DummyJob(Priority.HIGH);\n\n        queue.add(job);\n        queue.add(job2);\n\n        assertThat(queue.iterator()).toIterable().containsExactly(job2, job);\n    }\n']",ummy;queue;Iterable;queue;IGH;Different;Job;job;job;job,5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.867587089538574, -5.719516754150391, -6.319151878356934, -5.418125629425049, -5.450366973876953, -0.016782643273472786]",0.9833574295043945
3,['    @Test\n    public void testEmptyQueue()\n    {\n        assertThat(queue.iterator()).toIterable().isEmpty();\n    }\n'],iterator;Empty;to;Empty;That;Iterable;Queue;queue,1.280568540096283e-09;4.656612873077393e-10;2.0372681319713593e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-1.862645149230957e-09;-1.862645149230957e-09,5,5,"[-5.874992370605469, -5.717678546905518, -6.325738906860352, -5.456637382507324, -5.410337924957275, -0.016763534396886826]",0.9833762049674988
3,"['    @Test\n    public void testNonRunnableQueueIsEmpty() throws ScheduledJobException\n    {\n        final int nJobs = 10;\n\n        for (int i = 0; i < nJobs; i++)\n        {\n            queue.add(new RunnableOnce(Priority.LOW));\n        }\n\n        for (ScheduledJob job : queue)\n        {\n            job.postExecute(true, null);\n        }\n\n        assertThat(queue.iterator()).toIterable().isEmpty();\n    }\n']",Priority;Run;Once;Job;Run;That;obs;final;job;true,4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10;9.458744898438454e-11;8.731149137020111e-11,5,5,"[-5.890627861022949, -5.714263916015625, -6.335700988769531, -5.419568061828613, -5.503408908843994, -0.016472650691866875]",0.9836624264717102
3,"['    @Test\n    public void testRemoveJobInQueueIsPossible()\n    {\n        DummyJob job = new DummyJob(Priority.HIGH);\n        DummyJob job2 = new DummyJob(Priority.LOW);\n\n        queue.add(job);\n        queue.add(job2);\n\n        Iterator<ScheduledJob> iterator = queue.iterator();\n\n        queue.remove(job2);\n\n        assertThat(iterator).toIterable().containsExactly(job, job2);\n        assertThat(queue.iterator()).toIterable().containsExactly(job);\n    }\n']",job;OW;Job;IGH;job;new;ummy;add;add;queue,6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.5279510989785194e-10,5,5,"[-5.860117435455322, -5.719515323638916, -6.303497791290283, -5.379194259643555, -5.467538356781006, -0.01693795435130596]",0.9832047820091248
3,"['    @Test\n    public void testRunOnceJobRemovedOnFinish()\n    {\n        StateJob job = new StateJob(ScheduledJob.Priority.LOW, ScheduledJob.State.FINISHED);\n        StateJob job2 = new StateJob(ScheduledJob.Priority.LOW, ScheduledJob.State.RUNNABLE);\n\n        queue.add(job);\n        queue.add(job2);\n\n        for (ScheduledJob next : queue)\n        {\n            assertThat(next.getState()).isEqualTo(ScheduledJob.State.RUNNABLE);\n        }\n\n        assertThat(queue.size()).isEqualTo(1);\n        assertThat(queue.iterator()).toIterable().containsExactly(job2);\n    }\n']",UNNABLE;OW;UNNABLE;job;Priority;Job;State;FINISHED;queue;State,6.257323548197746e-10;5.820766091346741e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7826096154749393e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.85090970993042, -5.699221611022949, -6.294514179229736, -5.367029190063477, -5.479885101318359, -0.017054568976163864]",0.9830899238586426
3,"['    @Test\n    public void testRunOnceJobRemovedOnFailure()\n    {\n        StateJob job = new StateJob(ScheduledJob.Priority.LOW, ScheduledJob.State.FAILED);\n        StateJob job2 = new StateJob(ScheduledJob.Priority.LOW, ScheduledJob.State.RUNNABLE);\n\n        queue.add(job);\n        queue.add(job2);\n\n        for (ScheduledJob next : queue)\n        {\n            assertThat(next.getState()).isEqualTo(ScheduledJob.State.RUNNABLE);\n        }\n\n        assertThat(queue.size()).isEqualTo(1);\n        assertThat(queue.iterator()).toIterable().containsExactly(job2);\n    }\n']",UNNABLE;Priority;Run;queue;Job;Scheduled;State;new;next;State,7.566995918750763e-10;6.111804395914078e-10;4.94765117764473e-10;4.511093720793724e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.7462298274040222e-10,5,5,"[-5.8510026931762695, -5.696760654449463, -6.297883033752441, -5.374777793884277, -5.4839768409729, -0.0170025322586298]",0.9831411838531494
3,"['    @Test\n    public void testRunningNoJobs() throws LockException\n    {\n        myScheduler.run();\n\n        verify(myLockFactory, never()).tryLock(any(), anyString(), anyInt(), anyMap());\n    }\n']",cheduler;Lock;No;Exception;any;Lock;any;Int;Map;never,1.6298145055770874e-09;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.883635997772217, -5.715843677520752, -6.398899555206299, -5.538363933563232, -5.466137409210205, -0.016029655933380127]",0.9840981364250183
3,['    @Test\n    public void testRunningOneJob()\n    {\n        DummyJob job = new DummyJob(ScheduledJob.Priority.LOW);\n        myScheduler.schedule(job);\n\n        myScheduler.run();\n\n        assertThat(job.hasRun()).isTrue();\n        assertThat(myScheduler.getQueueSize()).isEqualTo(1);\n    }\n'],Priority;schedule;Queue;cheduler;OW;my;That;Job;Job;Running,1.9208528101444244e-09;1.4260876923799515e-09;1.3969838619232178e-09;9.604264050722122e-10;9.313225746154785e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.865279197692871, -5.704510688781738, -6.350854873657227, -5.47862434387207, -5.452338695526123, -0.01650923490524292]",0.9836263060569763
3,['    @Test\n    public void testRunningJobWithFailingRunPolicy()\n    {\n        DummyJob job = new DummyJob(ScheduledJob.Priority.LOW);\n        myScheduler.schedule(job);\n\n        when(myRunPolicy.validate(any(ScheduledJob.class))).thenReturn(1L);\n\n        myScheduler.run();\n\n        assertThat(job.hasRun()).isFalse();\n        assertThat(myScheduler.getQueueSize()).isEqualTo(1);\n    }\n'],Run;cheduled;Run;cheduler;job;cheduled;Job;Job;new;ummy,1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.869963645935059, -5.705773830413818, -6.377048492431641, -5.485678672790527, -5.504300594329834, -0.01619528792798519]",0.9839352369308472
3,"['    @Test\n    public void testRunningTwoTasksStoppedAfterFirstByPolicy() throws LockException\n    {\n        ShortRunningMultipleTasks job = new ShortRunningMultipleTasks(ScheduledJob.Priority.LOW, 2, () -> {\n            when(myRunPolicy.validate(any(ScheduledJob.class))).thenReturn(1L);\n        });\n        myScheduler.schedule(job);\n\n        when(myLockFactory.tryLock(any(), anyString(), anyInt(), anyMap())).thenReturn(new DummyLock());\n\n        myScheduler.run();\n\n        assertThat(job.getNumRuns()).isEqualTo(1);\n        assertThat(myScheduler.getQueueSize()).isEqualTo(1);\n        verify(myLockFactory).tryLock(any(), anyString(), anyInt(), anyMap());\n    }\n']",Stopped;Running;First;After;Priority;asks;OW;Num;Two;new,2.0954757928848267e-09;1.2223608791828156e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;3.637978807091713e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.855804920196533, -5.67929220199585, -6.338174343109131, -5.431698322296143, -5.509179592132568, -0.01660889945924282]",0.9835281372070312
3,['    @Test\n    public void testRunningJobWithThrowingRunPolicy()\n    {\n        DummyJob job = new DummyJob(ScheduledJob.Priority.LOW);\n        myScheduler.schedule(job);\n\n        when(myRunPolicy.validate(any(ScheduledJob.class))).thenThrow(new IllegalStateException());\n\n        myScheduler.run();\n\n        assertThat(job.hasRun()).isFalse();\n        assertThat(myScheduler.getQueueSize()).isEqualTo(1);\n    }\n'],validate;OW;cheduler;Priority;Run;ummy;get;cheduler;any;new,4.190951585769653e-09;2.0954757928848267e-09;1.280568540096283e-09;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.764863893389702e-10,5,5,"[-5.8616509437561035, -5.7047576904296875, -6.380873680114746, -5.492262363433838, -5.503612041473389, -0.016191300004720688]",0.9839391708374023
3,"['    @Test\n    public void testRunningOneJobWithThrowingLock() throws LockException\n    {\n        DummyJob job = new DummyJob(ScheduledJob.Priority.LOW);\n        myScheduler.schedule(job);\n\n        when(myLockFactory.tryLock(any(), anyString(), anyInt(), anyMap())).thenThrow(new LockException(""""));\n\n        myScheduler.run();\n\n        assertThat(job.hasRun()).isFalse();\n        assertThat(myScheduler.getQueueSize()).isEqualTo(1);\n    }\n']",Throwing;Priority;OW;job;Running;cheduler;any;Throw;One;schedule,1.57160684466362e-09;1.1059455573558807e-09;9.313225746154785e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.867668151855469, -5.707295894622803, -6.374769687652588, -5.486170768737793, -5.4922285079956055, -0.016248656436800957]",0.9838825464248657
3,['    @Test (timeout = 2000L)\n    public void testRunningTwoJobsInParallelShouldFail() throws InterruptedException\n    {\n        LongRunningJob job = new LongRunningJob(ScheduledJob.Priority.HIGH);\n        LongRunningJob job2 = new LongRunningJob(ScheduledJob.Priority.LOW);\n        myScheduler.schedule(job);\n        myScheduler.schedule(job2);\n\n        final CountDownLatch cdl = new CountDownLatch(1);\n\n        new Thread()\n        {\n\n            @Override\n            public void run()\n            {\n                myScheduler.run();\n                cdl.countDown();\n            }\n'],Parallel;Priority;Fail;obs;Long;cheduler;Job;Job;atch;job,6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.709850039333105e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.3096723705530167e-10,5,5,"[-5.873325824737549, -5.701504230499268, -6.3602094650268555, -5.444721221923828, -5.526218414306641, -0.016315976157784462]",0.9838165044784546
3,"['    @Test\n    public void testTwoJobsRejected()\n    {\n        DummyJob job = new DummyJob(ScheduledJob.Priority.LOW);\n        DummyJob job2 = new DummyJob(ScheduledJob.Priority.LOW);\n        myScheduler.schedule(job);\n        myScheduler.schedule(job2);\n\n        when(myRunPolicy.validate(any(ScheduledJob.class))).thenReturn(1L);\n\n        myScheduler.run();\n\n        assertThat(job.hasRun()).isFalse();\n        assertThat(myScheduler.getQueueSize()).isEqualTo(2);\n        verify(myRunPolicy, times(2)).validate(any(ScheduledJob.class));\n    }\n']",OW;schedule;schedule;Two;Queue;OW;ummy;cheduled;Policy;cheduler,1.3969838619232178e-09;1.2223608791828156e-09;9.604264050722122e-10;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.845455646514893, -5.669436454772949, -6.3080925941467285, -5.406282424926758, -5.489199638366699, -0.01692623272538185]",0.9832162261009216
3,"['    @Test\n    public void testTwoJobsThrowingLock() throws LockException\n    {\n        DummyJob job = new DummyJob(ScheduledJob.Priority.LOW);\n        DummyJob job2 = new DummyJob(ScheduledJob.Priority.LOW);\n        myScheduler.schedule(job);\n        myScheduler.schedule(job2);\n\n        when(myLockFactory.tryLock(any(), anyString(), anyInt(), anyMap())).thenThrow(new LockException(""""));\n\n        myScheduler.run();\n\n        assertThat(job.hasRun()).isFalse();\n        assertThat(myScheduler.getQueueSize()).isEqualTo(2);\n        verify(myLockFactory, times(2)).tryLock(any(), anyString(), anyInt(), anyMap());\n    }\n']",Priority;OW;job;Two;Queue;OW;ummy;run;schedule;Run,9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.855661392211914, -5.678874969482422, -6.333573818206787, -5.425479412078857, -5.505880355834961, -0.016660485416650772]",0.9834775328636169
3,"['    @Test\n    public void testThreeTasksOneThrowing() throws LockException\n    {\n        ShortRunningMultipleTasks job = new ShortRunningMultipleTasks(ScheduledJob.Priority.LOW, 3);\n        myScheduler.schedule(job);\n\n        when(myLockFactory.tryLock(any(), anyString(), anyInt(), anyMap()))\n                .thenReturn(new DummyLock())\n                .thenThrow(new LockException(""""))\n                .thenReturn(new DummyLock());\n\n        myScheduler.run();\n\n        assertThat(job.getNumRuns()).isEqualTo(2);\n        assertThat(myScheduler.getQueueSize()).isEqualTo(1);\n        verify(myLockFactory, times(3)).tryLock(any(), anyString(), anyInt(), anyMap());\n    }\n']",schedule;cheduler;job;Three;Num;my;Lock;job;run;verify,2.270098775625229e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.856993675231934, -5.68648099899292, -6.324317455291748, -5.407110691070557, -5.4996161460876465, -0.016756031662225723]",0.9833835959434509
3,['    @Test (timeout = 2000L)\n    public void testRemoveLongRunningJob() throws InterruptedException\n    {\n        LongRunningJob job = new LongRunningJob(ScheduledJob.Priority.HIGH);\n        myScheduler.schedule(job);\n\n        final CountDownLatch cdl = new CountDownLatch(1);\n\n        new Thread()\n        {\n            @Override\n            public void run()\n            {\n                myScheduler.run();\n                cdl.countDown();\n            }\n'],Priority;Remove;Job;IGH;Count;Long;my;job;Running;Thread,8.294591680169106e-10;3.2014213502407074e-10;2.9467628337442875e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.865871906280518, -5.697686672210693, -6.319139003753662, -5.414889335632324, -5.488620758056641, -0.016711952164769173]",0.9834269285202026
3,['    @Test\n    public void testGetLock() throws LockException\n    {\n        DistributedLock expectedLock = doReturnLockOnGetLock();\n\n        assertGetLockRetrievesExpectedLock(expectedLock);\n    }\n'],Expected;Lock;Retrieves;do;Lock;Lock;Lock;Get;Lock;Lock,1.8044374883174896e-09;1.6298145055770874e-09;1.367880031466484e-09;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.8732733726501465, -5.712046146392822, -6.323699474334717, -5.453475475311279, -5.449872970581055, -0.016628596931695938]",0.9835088849067688
3,"['    @Test\n    public void testGetThrowingLockIsCached() throws LockException\n    {\n        LockException expectedExcetion = doThrowOnGetLock();\n\n        assertGetLockThrowsException(expectedExcetion);\n\n        // Reset return type, locking should still throw\n        doReturnLockOnGetLock();\n\n        assertGetLockThrowsException(expectedExcetion);\n    }\n']",Get;Throwing;type;return;do;Excetion;Throws;Lock;Excetion;Exception,6.693881005048752e-10;6.693881005048752e-10;6.402842700481415e-10;6.402842700481415e-10;5.529727786779404e-10;4.511093720793724e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.890989780426025, -5.765533924102783, -6.36751127243042, -5.4505391120910645, -5.523980617523193, -0.01602601818740368]",0.9841017127037048
3,"['    @Test\n    public void testGetMultipleLocks() throws LockException\n    {\n        String otherResource = ""RepairResource-b2e33e60-7af6-11e9-8f9e-2a86e4085a59-1"";\n\n        DistributedLock expectedLock = doReturnLockOnGetLock(RESOURCE);\n        DistributedLock expectedOtherLock = doReturnLockOnGetLock(otherResource);\n\n        assertGetLockRetrievesExpectedLock(RESOURCE, expectedLock);\n        assertGetLockRetrievesExpectedLock(otherResource, expectedOtherLock);\n    }\n']",Lock;Lock;expected;other;Lock;ocks;Get;Return;Lock;Lock,3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.869570732116699, -5.721914768218994, -6.324596881866455, -5.41402006149292, -5.498253345489502, -0.01657337322831154]",0.9835631847381592
3,"['    @Test\n    public void testGetOtherLockAfterThrowingOnAnotherResource() throws LockException\n    {\n        String otherResource = ""RepairResource-b2e33e60-7af6-11e9-8f9e-2a86e4085a59-1"";\n\n        LockException expectedException = doThrowOnGetLock(RESOURCE);\n        DistributedLock expectedOtherLock = doReturnLockOnGetLock(otherResource);\n\n        assertGetLockThrowsException(RESOURCE, expectedException);\n        assertGetLockRetrievesExpectedLock(otherResource, expectedOtherLock);\n    }\n']",RESOURCE;Other;Lock;expected;Throwing;Distributed;On;Lock;Lock;On,6.111804395914078e-10;5.820766091346741e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.7462298274040222e-10,5,5,"[-5.870424270629883, -5.7226057052612305, -6.3309783935546875, -5.4147772789001465, -5.505607604980469, -0.016523189842700958]",0.983612596988678
3,"['    @Test\n    public void testGetLockAfterCachedExceptionHasExpired() throws LockException, InterruptedException\n    {\n        myLockCache = new LockCache(mockedLockSupplier, 20, TimeUnit.MILLISECONDS);\n\n        LockException expectedException = doThrowOnGetLock();\n        assertGetLockThrowsException(expectedException);\n\n        Thread.sleep(20);\n\n        DistributedLock expectedLock = doReturnLockOnGetLock();\n        assertGetLockRetrievesExpectedLock(expectedLock);\n    }\n']",Supplier;sleep;After;Has;Exception;Lock;Lock;Exception;Cache;Cache,3.026798367500305e-09;1.1641532182693481e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;4.802132025361061e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.862246990203857, -5.751058101654053, -6.403718948364258, -5.519269943237305, -5.5133957862854, -0.015845689922571182]",0.984279215335846
3,['    @Test\n    public void testEqualsContract()\n    {\n        EqualsVerifier.forClass(LockCache.LockKey.class).usingGetClass().verify();\n    }\n'],Key;Class;Lock;Class;Contract;Cache;verify;class;Lock;Get,5.820766091346741e-10;1.7462298274040222e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.6193447411060333e-10;-2.9103830456733704e-10;-3.4924596548080444e-10;-3.4924596548080444e-10,5,5,"[-5.8664231300354, -5.690968990325928, -6.314387321472168, -5.4408650398254395, -5.434094429016113, -0.016861649230122566]",0.9832797050476074
3,['    @Test\n    public void testUseNullJmxProxyFactoryShouldThrow()\n    {\n        assertThatExceptionOfType(IllegalArgumentException.class)\n                .isThrownBy(() -> HostStatesImpl.builder()\n                        .withJmxProxyFactory(null)\n                        .build());\n    }\n'],Thrown;By;States;Factory;Throw;mx;Proxy;with;Impl;Exception,1.862645149230957e-09;1.6298145055770874e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.8830180168151855, -5.732872486114502, -6.316633701324463, -5.391042232513428, -5.464090824127197, -0.01676318235695362]",0.9833764433860779
3,['    @Test\n    public void testIsInetAddressUp() throws UnknownHostException\n    {\n        InetAddress expectedAddress = InetAddress.getLocalHost();\n\n        List<String> expectedLiveNodes = Collections.singletonList(expectedAddress.getHostName());\n        List<String> expectedUnreachableNodes = Collections.emptyList();\n\n        when(myJmxProxy.getLiveNodes()).thenReturn(expectedLiveNodes);\n        when(myJmxProxy.getUnreachableNodes()).thenReturn(expectedUnreachableNodes);\n\n        assertThat(myHostStates.isUp(expectedAddress)).isTrue();\n    }\n'],States;Live;expected;Local;odes;empty;expected;singleton;List;Address,6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.873834609985352, -5.723560333251953, -6.378188133239746, -5.445071220397949, -5.506363868713379, -0.016288649290800095]",0.9838432669639587
3,['    @Test\n    public void testIsHostUp() throws UnknownHostException\n    {\n        InetAddress expectedAddress = InetAddress.getLocalHost();\n        Host expectedHost = mock(Host.class);\n\n        List<String> expectedLiveNodes = Collections.singletonList(expectedAddress.getHostName());\n        List<String> expectedUnreachableNodes = Collections.emptyList();\n\n        when(myJmxProxy.getLiveNodes()).thenReturn(expectedLiveNodes);\n        when(myJmxProxy.getUnreachableNodes()).thenReturn(expectedUnreachableNodes);\n\n        when(expectedHost.getBroadcastAddress()).thenReturn(expectedAddress);\n\n        assertThat(myHostStates.isUp(expectedHost)).isTrue();\n    }\n'],States;Address;Live;Live;Inet;odes;Unreachable;expected;odes;Host,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.055902197957039e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.863037586212158, -5.706439971923828, -6.339000225067139, -5.399974346160889, -5.498307704925537, -0.016681941226124763]",0.9834564328193665
3,['    @Test\n    public void testIsInetAddressUpFaultyNode() throws UnknownHostException\n    {\n        InetAddress expectedAddress = InetAddress.getLocalHost();\n\n        when(myJmxProxy.getLiveNodes()).thenReturn(Collections.emptyList());\n        when(myJmxProxy.getUnreachableNodes()).thenReturn(Collections.emptyList());\n\n        assertThat(myHostStates.isUp(expectedAddress)).isFalse();\n    }\n'],States;Inet;Node;Host;Unknown;odes;Inet;Collections;Unreachable;Exception,3.026798367500305e-09;1.1059455573558807e-09;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.220055416226387e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.884565830230713, -5.733666896820068, -6.3721160888671875, -5.448202610015869, -5.49569034576416, -0.01626589708030224]",0.9838657975196838
3,['    @Test\n    public void testNodeIsNotRefreshed() throws UnknownHostException\n    {\n        final InetAddress expectedAddress = InetAddress.getLocalHost();\n\n        when(myJmxProxy.getLiveNodes()).thenAnswer(new Answer<List<String>>()\n        {\n            private int counter = 0;\n\n            @Override\n            public List<String> answer(InvocationOnMock invocation)\n            {\n                if (counter++ == 2)\n                {\n                    return Collections.singletonList(expectedAddress.getHostAddress());\n                }\n\n                return Collections.emptyList();\n            }\n'],Not;Host;when;Unknown;Address;Inet;List;Address;my;get,9.313225746154785e-10;7.566995918750763e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.868381977081299, -5.700769901275635, -6.305267810821533, -5.349823951721191, -5.506370544433594, -0.01695014350116253]",0.9831926822662354
3,['    @Test\n    public void testNodeIsRefreshed() throws UnknownHostException\n    {\n        final InetAddress expectedAddress = InetAddress.getLocalHost();\n\n        HostStatesImpl hostStates = HostStatesImpl.builder()\n                .withJmxProxyFactory(myJmxProxyFactory)\n                .withRefreshIntervalInMs(1)\n                .build();\n\n        when(myJmxProxy.getLiveNodes()).thenAnswer(new Answer<List<String>>()\n        {\n            private int counter = 0;\n\n            @Override\n            public List<String> answer(InvocationOnMock invocation)\n            {\n                if (counter++ == 1)\n                {\n                    return Collections.singletonList(expectedAddress.getHostAddress());\n                }\n                return Collections.emptyList();\n            }\n'],States;Ms;Answer;Inet;builder;get;when;build;States;Local,2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.860909938812256, -5.676626205444336, -6.307132244110107, -5.349918365478516, -5.512081623077393, -0.01702737808227539]",0.9831167459487915
3,"['    @Test\n    public void testConfigureNewTable()\n    {\n        RepairSchedulerImpl repairSchedulerImpl = defaultRepairSchedulerImplBuilder().build();\n\n        repairSchedulerImpl.putConfiguration(TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        verify(scheduleManager, timeout(1000)).schedule(any(ScheduledJob.class));\n        verify(scheduleManager, never()).deschedule(any(ScheduledJob.class));\n        verify(myRepairStateFactory).create(eq(TABLE_REFERENCE), eq(RepairConfiguration.DEFAULT), any());\n        verify(myRepairState, atLeastOnce()).update();\n        assertOneTableViewExist(repairSchedulerImpl, TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        repairSchedulerImpl.close();\n        verify(scheduleManager).deschedule(any(ScheduledJob.class));\n\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(myRepairStateFactory);\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",close;repair;New;Repair;schedule;cheduler;REFERENCE;eq;Repair;verify,3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.964508555829525e-10,5,5,"[-5.847379207611084, -5.695744514465332, -6.350863933563232, -5.4207353591918945, -5.516898155212402, -0.016571614891290665]",0.9835649132728577
3,"['    @Test\n    public void testConfigureTwoTables()\n    {\n        RepairSchedulerImpl repairSchedulerImpl = defaultRepairSchedulerImplBuilder().build();\n\n        repairSchedulerImpl.putConfiguration(TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n        repairSchedulerImpl.putConfiguration(TABLE_REFERENCE2, RepairConfiguration.DEFAULT);\n\n        verify(scheduleManager, timeout(1000).times(2)).schedule(any(ScheduledJob.class));\n        verify(scheduleManager, never()).deschedule(any(ScheduledJob.class));\n        verify(myRepairStateFactory).create(eq(TABLE_REFERENCE), eq(RepairConfiguration.DEFAULT), any());\n        verify(myRepairStateFactory).create(eq(TABLE_REFERENCE2), eq(RepairConfiguration.DEFAULT), any());\n        verify(myRepairState, atLeastOnce()).update();\n\n        repairSchedulerImpl.close();\n        verify(scheduleManager, times(2)).deschedule(any(ScheduledJob.class));\n\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(myRepairStateFactory);\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",Repair;REFERENCE;cheduler;DEFAULT;REFERENCE;Interactions;State;Stubs;DEFAULT;ignore,8.003553375601768e-10;6.693881005048752e-10;6.621121428906918e-10;4.0745362639427185e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;3.2014213502407074e-10,5,5,"[-5.842660427093506, -5.6755852699279785, -6.3424835205078125, -5.410436630249023, -5.508056640625, -0.01675298437476158]",0.9833866953849792
3,"['    @Test\n    public void testRemoveTableConfiguration()\n    {\n        RepairSchedulerImpl repairSchedulerImpl = defaultRepairSchedulerImplBuilder().build();\n\n        repairSchedulerImpl.putConfiguration(TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        verify(scheduleManager, timeout(1000)).schedule(any(ScheduledJob.class));\n        verify(scheduleManager, never()).deschedule(any(ScheduledJob.class));\n        verify(myRepairStateFactory).create(eq(TABLE_REFERENCE), eq(RepairConfiguration.DEFAULT), any());\n        verify(myRepairState, atLeastOnce()).update();\n        assertOneTableViewExist(repairSchedulerImpl, TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        repairSchedulerImpl.removeConfiguration(TABLE_REFERENCE);\n        verify(scheduleManager, timeout(1000)).deschedule(any(ScheduledJob.class));\n        assertThat(repairSchedulerImpl.getCurrentRepairJobs()).isEmpty();\n\n        repairSchedulerImpl.close();\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(myRepairStateFactory);\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",Metrics;deschedule;Repair;Repair;Configuration;repair;Remove;Repair;Table;repair,2.2118911147117615e-09;1.076841726899147e-09;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.841122627258301, -5.680810928344727, -6.349262237548828, -5.414897918701172, -5.523608207702637, -0.01664336957037449]",0.9834943413734436
3,"['    @Test\n    public void testUpdateTableConfiguration()\n    {\n        RepairSchedulerImpl repairSchedulerImpl = defaultRepairSchedulerImplBuilder().build();\n\n        long expectedUpdatedRepairInterval = TimeUnit.DAYS.toMillis(1);\n\n        RepairConfiguration updatedRepairConfiguration = RepairConfiguration.newBuilder()\n                .withRepairInterval(expectedUpdatedRepairInterval, TimeUnit.MILLISECONDS)\n                .build();\n\n        repairSchedulerImpl.putConfiguration(TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        verify(scheduleManager, timeout(1000)).schedule(any(ScheduledJob.class));\n        verify(scheduleManager, never()).deschedule(any(ScheduledJob.class));\n        verify(myRepairStateFactory).create(eq(TABLE_REFERENCE), eq(RepairConfiguration.DEFAULT), any());\n        verify(myRepairState, atLeastOnce()).update();\n        assertOneTableViewExist(repairSchedulerImpl, TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        repairSchedulerImpl.putConfiguration(TABLE_REFERENCE, updatedRepairConfiguration);\n\n        verify(scheduleManager, timeout(1000).times(2)).schedule(any(ScheduledJob.class));\n        verify(scheduleManager, timeout(1000)).deschedule(any(ScheduledJob.class));\n        verify(myRepairStateFactory).create(eq(TABLE_REFERENCE), eq(updatedRepairConfiguration), any());\n        verify(myRepairState, atLeastOnce()).update();\n        assertOneTableViewExist(repairSchedulerImpl, TABLE_REFERENCE, updatedRepairConfiguration);\n\n        repairSchedulerImpl.close();\n        verify(scheduleManager, times(2)).deschedule(any(ScheduledJob.class));\n        assertThat(repairSchedulerImpl.getCurrentRepairJobs()).isEmpty();\n\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(myRepairStateFactory);\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",Repair;DEFAULT;schedule;Repair;Repair;Builder;Repair;DEFAULT;Mill;Impl,3.7834979593753815e-10;3.4924596548080444e-10;3.2378011383116245e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.255546860396862e-10,5,5,"[-5.818693161010742, -5.65786600112915, -6.309034824371338, -5.388030052185059, -5.525250434875488, -0.016980381682515144]",0.9831629991531372
3,"['    @Test\n    public void testUpdateTableConfigurationToSame()\n    {\n        RepairSchedulerImpl repairSchedulerImpl = defaultRepairSchedulerImplBuilder().build();\n\n        repairSchedulerImpl.putConfiguration(TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        verify(scheduleManager, timeout(1000)).schedule(any(ScheduledJob.class));\n        verify(scheduleManager, never()).deschedule(any(ScheduledJob.class));\n        verify(myRepairStateFactory).create(eq(TABLE_REFERENCE), eq(RepairConfiguration.DEFAULT), any());\n        verify(myRepairState, atLeastOnce()).update();\n        assertOneTableViewExist(repairSchedulerImpl, TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        repairSchedulerImpl.putConfiguration(TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        assertOneTableViewExist(repairSchedulerImpl, TABLE_REFERENCE, RepairConfiguration.DEFAULT);\n\n        repairSchedulerImpl.close();\n        verify(scheduleManager).deschedule(any(ScheduledJob.class));\n        assertThat(repairSchedulerImpl.getCurrentRepairJobs()).isEmpty();\n\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(myRepairStateFactory);\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",Repair;View;Factory;Update;TABLE;TABLE;Impl;deschedule;TABLE;Configuration,1.0477378964424133e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0381564758718014e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.845251083374023, -5.6906328201293945, -6.370985984802246, -5.431842803955078, -5.5406270027160645, -0.01641460508108139]",0.9837194085121155
3,"['    @Test\n    public void testJobCorrectlyReturned()\n    {\n        OnDemandRepairJob repairJob = createOnDemandRepairJob();\n        RepairJobView expectedView = new OnDemandRepairJobView(repairJob.getId(), myTableReference, RepairConfiguration.DEFAULT, RepairJobView.Status.IN_QUEUE, 0, System.currentTimeMillis());\n        assertThat(repairJob.getId()).isEqualTo(repairJob.getId());\n        assertThat(repairJob.getLastSuccessfulRun()).isEqualTo(-1);\n        assertThat(repairJob.getRepairConfiguration()).isEqualTo(RepairConfiguration.DEFAULT);\n        assertThat(repairJob.getTableReference()).isEqualTo(myTableReference);\n        assertThat(repairJob.getView().getRepairConfiguration()).isEqualTo(expectedView.getRepairConfiguration());\n        assertThat(repairJob.getView().getRepairStateSnapshot()).isNull();\n        assertThat(repairJob.getView().getTableReference()).isEqualTo(expectedView.getTableReference());\n        assertThat(repairJob.getView().getStatus()).isEqualTo(expectedView.getStatus());\n    }\n']",Repair;expected;Demand;repair;Run;On;DEFAULT;IN;current;View,5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.82165002822876, -5.6600236892700195, -6.320970058441162, -5.412367343902588, -5.514029502868652, -0.01687583141028881]",0.98326575756073
3,"['    @Test\n    public void testFailedJobCorrectlyReturned()\n    {\n        OnDemandRepairJob repairJob = createOnDemandRepairJob();\n        Iterator<ScheduledTask> it = repairJob.iterator();\n        repairJob.postExecute(false, it.next());\n        RepairJobView expectedView = new OnDemandRepairJobView(repairJob.getId(), myTableReference, RepairConfiguration.DEFAULT, RepairJobView.Status.ERROR, 0, System.currentTimeMillis());\n        assertThat(repairJob.getLastSuccessfulRun()).isEqualTo(-1);\n        assertThat(repairJob.getRepairConfiguration()).isEqualTo(RepairConfiguration.DEFAULT);\n        assertThat(repairJob.getTableReference()).isEqualTo(myTableReference);\n        assertThat(repairJob.getView().getRepairConfiguration()).isEqualTo(expectedView.getRepairConfiguration());\n        assertThat(repairJob.getView().getRepairStateSnapshot()).isNull();\n        assertThat(repairJob.getView().getTableReference()).isEqualTo(expectedView.getTableReference());\n        assertThat(repairJob.getView().getStatus()).isEqualTo(expectedView.getStatus());\n    }\n']",expected;Job;expected;Table;my;Reference;Job;new;Repair;Iterator,1.6880221664905548e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.827172756195068, -5.651632308959961, -6.325380802154541, -5.4197492599487305, -5.523681640625, -0.016808314248919487]",0.9833321571350098
3,"['    @Test\n    public void testJobFinishedAfterExecution()\n    {\n        OnDemandRepairJob repairJob = createOnDemandRepairJob();\n        Iterator<ScheduledTask> it = repairJob.iterator();\n        assertThat(repairJob.getState()).isEqualTo(ScheduledJob.State.RUNNABLE);\n        repairJob.postExecute(true, it.next());\n        assertThat(repairJob.getState()).isEqualTo(ScheduledJob.State.RUNNABLE);\n        repairJob.postExecute(true, it.next());\n        assertThat(repairJob.getState()).isEqualTo(ScheduledJob.State.FINISHED);\n    }\n']",UNNABLE;Execution;After;cheduled;Job;On;Demand;it;UNNABLE;next,7.8580342233181e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10;3.637978807091713e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.964508555829525e-10;1.8917489796876907e-10,5,5,"[-5.850861072540283, -5.692309856414795, -6.308554649353027, -5.389810562133789, -5.467567443847656, -0.016997845843434334]",0.9831458330154419
3,"['    @Test\n    public void testJobFinishedAfterRestart()\n    {\n        OnDemandRepairJob repairJob = createRestartedOnDemandRepairJob();\n        Iterator<ScheduledTask> it = repairJob.iterator();\n        assertThat(repairJob.getState()).isEqualTo(ScheduledJob.State.RUNNABLE);\n        repairJob.postExecute(true, it.next());\n        assertThat(repairJob.getState()).isEqualTo(ScheduledJob.State.FINISHED);\n    }\n']",Repair;Demand;FINISHED;it;Task;Finished;iterator;Repair;cheduled;repair,1.280568540096283e-09;4.94765117764473e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.868365287780762, -5.702467918395996, -6.331524848937988, -5.425394058227539, -5.467901706695557, -0.01670667715370655]",0.9834321141242981
3,['    @Test\n    public void testJobFailedWhenTopologyChange()\n    {\n        OnDemandRepairJob repairJob = createOnDemandRepairJob();\n        when(myOngoingJob.hasTopologyChanged()).thenReturn(true);\n        assertThat(repairJob.getState()).isEqualTo(ScheduledJob.State.FAILED);\n    }\n'],Changed;FAILED;Repair;Topology;Change;has;Repair;repair;Demand;qual,1.3969838619232178e-09;1.1059455573558807e-09;1.1059455573558807e-09;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.879946231842041, -5.722358226776123, -6.367652416229248, -5.475059986114502, -5.474189758300781, -0.016298852860927582]",0.9838332533836365
3,"['    @Test\n    public void testJobUnsuccessful()\n    {\n        OnDemandRepairJob repairJob = createOnDemandRepairJob();\n        Iterator<ScheduledTask> it = repairJob.iterator();\n        repairJob.postExecute(true, it.next());\n        assertThat(repairJob.getState()).isEqualTo(ScheduledJob.State.RUNNABLE);\n        repairJob.postExecute(false, it.next());\n        assertThat(repairJob.getState()).isEqualTo(ScheduledJob.State.FAILED);\n    }\n']",Unsuccessful;FAILED;cheduled;On;repair;Task;post;Repair;Job;Execute,1.30385160446167e-08;9.89530235528946e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;3.7834979593753815e-10;3.055902197957039e-10,5,5,"[-5.863866329193115, -5.702630519866943, -6.342309474945068, -5.432131290435791, -5.4869608879089355, -0.016588732600212097]",0.9835482239723206
3,"['    @Test\n    public void testGetProgress()\n    {\n        OnDemandRepairJob repairJob = createOnDemandRepairJob();\n        assertThat(repairJob.getProgress()).isEqualTo(0);\n        Iterator<ScheduledTask> it = repairJob.iterator();\n        repairJob.postExecute(true, it.next());\n        assertThat(repairJob.getProgress()).isEqualTo(0.5);\n        repairJob.postExecute(true, it.next());\n        assertThat(repairJob.getProgress()).isEqualTo(1);\n    }\n']",Repair;Get;Progress;Execute;Job;Repair;get;create;Job;true,4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;8.003553375601768e-11,5,5,"[-5.847935199737549, -5.681511878967285, -6.281384468078613, -5.368117809295654, -5.454873561859131, -0.01725131645798683]",0.982896625995636
3,"['    @Test\n    public void testScheduleRepairOnTable() throws EcChronosException\n    {\n        OnDemandRepairSchedulerImpl repairScheduler = defaultOnDemandRepairSchedulerImplBuilder().build();\n        when(metadata.getKeyspace(TABLE_REFERENCE.getKeyspace())).thenReturn(myKeyspaceMetadata);\n        when(myKeyspaceMetadata.getTable(TABLE_REFERENCE.getTable())).thenReturn(myTableMetadata);\n\n        verify(scheduleManager, never()).schedule(any(ScheduledJob.class));\n        RepairJobView repairJobView = repairScheduler.scheduleJob(TABLE_REFERENCE);\n        verify(scheduleManager).schedule(any(ScheduledJob.class));\n\n        assertTableViewExist(repairScheduler, repairJobView);\n\n        repairScheduler.close();\n        verify(scheduleManager).deschedule(any(ScheduledJob.class));\n\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",Keyspace;schedule;schedule;Keyspace;TABLE;cheduler;REFERENCE;repair;my;repair,1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.693881005048752e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.8500752449035645, -5.688726902008057, -6.354389667510986, -5.4370646476745605, -5.520362854003906, -0.01649446040391922]",0.983640730381012
3,"['    @Test\n    public void testScheduleTwoRepairOnTable() throws EcChronosException\n    {\n        OnDemandRepairSchedulerImpl repairScheduler = defaultOnDemandRepairSchedulerImplBuilder().build();\n        when(metadata.getKeyspace(TABLE_REFERENCE.getKeyspace())).thenReturn(myKeyspaceMetadata);\n        when(myKeyspaceMetadata.getTable(TABLE_REFERENCE.getTable())).thenReturn(myTableMetadata);\n\n        verify(scheduleManager, never()).schedule(any(ScheduledJob.class));\n        RepairJobView repairJobView = repairScheduler.scheduleJob(TABLE_REFERENCE);\n        RepairJobView repairJobView2 = repairScheduler.scheduleJob(TABLE_REFERENCE);\n        verify(scheduleManager, times(2)).schedule(any(ScheduledJob.class));\n\n        assertTableViewExist(repairScheduler, repairJobView, repairJobView2);\n\n        repairScheduler.close();\n        verify(scheduleManager, times(2)).deschedule(any(ScheduledJob.class));\n\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",Stubs;Chronos;REFERENCE;Table;schedule;Exception;Demand;TABLE;Schedule;Repair,1.862645149230957e-09;6.984919309616089e-10;5.966285243630409e-10;4.94765117764473e-10;4.147295840084553e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.850078582763672, -5.680440425872803, -6.3590569496154785, -5.434723377227783, -5.53508186340332, -0.016465850174427032]",0.9836689829826355
3,"['    @Test\n    public void testRestartRepairOnTable() throws EcChronosException\n    {\n        Set<OngoingJob> ongoingJobs = new HashSet<>();\n        ongoingJobs.add(myOngingJob);\n        when(myOnDemandStatus.getOngoingJobs(replicationState)).thenReturn(ongoingJobs);\n\n        OnDemandRepairSchedulerImpl repairScheduler = defaultOnDemandRepairSchedulerImplBuilder().build();\n\n        verify(scheduleManager, timeout(1000)).schedule(any(ScheduledJob.class));\n\n        repairScheduler.close();\n        verify(scheduleManager).deschedule(any(ScheduledJob.class));\n\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",timeout;replication;repair;Exception;obs;Interactions;Demand;Table;nging;ngoing,9.313225746154785e-10;5.748006515204906e-10;5.238689482212067e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.855209827423096, -5.700930595397949, -6.367201805114746, -5.454399108886719, -5.504047870635986, -0.016406279057264328]",0.9837275743484497
3,"['    @Test\n    public void testRestartRepairOnTableWithException() throws EcChronosException\n    {\n        Set<OngoingJob> ongoingJobs = new HashSet<>();\n        ongoingJobs.add(myOngingJob);\n        Map<EndPoint, Throwable> errors = new HashMap<>();\n        when(myOnDemandStatus.getOngoingJobs(replicationState)).thenThrow(new NoHostAvailableException(errors )).thenReturn(ongoingJobs);\n\n        OnDemandRepairSchedulerImpl repairScheduler = defaultOnDemandRepairSchedulerImplBuilder().build();\n\n        verify(scheduleManager, timeout(15000)).schedule(any(ScheduledJob.class));\n\n        repairScheduler.close();\n        verify(scheduleManager).deschedule(any(ScheduledJob.class));\n\n        verifyNoMoreInteractions(ignoreStubs(myTableRepairMetrics));\n        verifyNoMoreInteractions(scheduleManager);\n    }\n']",Chronos;schedule;ngoing;default;Map;Restart;Set;Repair;Host;Demand,8.003553375601768e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.854109287261963, -5.703240394592285, -6.373561859130859, -5.452572345733643, -5.518059253692627, -0.0163409560918808]",0.9837918281555176
3,"['    @Test (expected = EcChronosException.class)\n    public void testScheduleRepairOnNonExistentKeyspaceTable() throws EcChronosException\n    {\n        OnDemandRepairSchedulerImpl repairScheduler = defaultOnDemandRepairSchedulerImplBuilder().build();\n\n        verify(scheduleManager, never()).schedule(any(ScheduledJob.class));\n        repairScheduler.scheduleJob(TABLE_REFERENCE);\n    }\n']",Schedule;Non;Repair;Table;Demand;Job;Repair;schedule;Repair;schedule,1.1641532182693481e-09;1.0477378964424133e-09;1.0040821507573128e-09;4.802132025361061e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.912835597991943, -5.732996463775635, -6.433408260345459, -5.54393196105957, -5.536889553070068, -0.015518506057560444]",0.9846012592315674
3,"['    @Test (expected = EcChronosException.class)\n    public void testScheduleRepairOnNonExistentTable() throws EcChronosException\n    {\n        OnDemandRepairSchedulerImpl repairScheduler = defaultOnDemandRepairSchedulerImplBuilder().build();\n        when(metadata.getKeyspace(TABLE_REFERENCE.getKeyspace())).thenReturn(myKeyspaceMetadata);\n        verify(scheduleManager, never()).schedule(any(ScheduledJob.class));\n        repairScheduler.scheduleJob(TABLE_REFERENCE);\n    }\n']",Existent;cheduler;Chronos;Chronos;expected;Ec;Exception;TABLE;On;REFERENCE,1.4551915228366852e-09;8.731149137020111e-10;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.675246939063072e-10,5,5,"[-5.905988693237305, -5.729114532470703, -6.438182830810547, -5.546597003936768, -5.55044412612915, -0.015478011220693588]",0.9846411347389221
3,"['    @Test (expected = EcChronosException.class)\n    public void testScheduleRepairOnNull() throws EcChronosException\n    {\n        OnDemandRepairSchedulerImpl repairScheduler = defaultOnDemandRepairSchedulerImplBuilder().build();\n        verify(scheduleManager, never()).schedule(any(ScheduledJob.class));\n        repairScheduler.scheduleJob(null);\n    }\n']",Chronos;Ec;On;Repair;repair;Schedule;cheduler;On;On;Builder,2.0954757928848267e-09;1.4551915228366852e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.890501022338867, -5.720606803894043, -6.383881092071533, -5.489571571350098, -5.501078128814697, -0.016072357073426247]",0.9840561151504517
3,"['    @Test\n    public void testRepairResource()\n    {\n        RepairResource repairResource = new RepairResource(""dc1"", ""my-resource"");\n\n        assertThat(repairResource.getDataCenter()).isEqualTo(""dc1"");\n        assertThat(repairResource.getResourceName(1)).isEqualTo(""RepairResource-my-resource-1"");\n        assertThat(repairResource.getResourceName(2)).isEqualTo(""RepairResource-my-resource-2"");\n    }\n']",dc;my;resource;my;Repair;Resource;Resource;Repair;resource;repair,2.561137080192566e-09;2.561137080192566e-09;1.862645149230957e-09;1.3969838619232178e-09;1.280568540096283e-09;1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.846588611602783, -5.724428653717041, -6.306723594665527, -5.390009880065918, -5.429091930389404, -0.017072850838303566]",0.98307204246521
3,"['    @Test\n    public void testRepairResourceEquality()\n    {\n        RepairResource repairResource = new RepairResource(""dc1"", ""my-resource"");\n        RepairResource equalRepairResource = new RepairResource(""dc1"", ""my-resource"");\n        RepairResource repairResourceWithDifferentDc = new RepairResource(""dc2"", ""my-resource"");\n        RepairResource repairResourceWithDifferentResource = new RepairResource(""dc1"", ""not-my-resource"");\n\n        assertThat(repairResource).isEqualTo(equalRepairResource);\n        assertThat(repairResource).isNotEqualTo(repairResourceWithDifferentDc);\n        assertThat(repairResource).isNotEqualTo(repairResourceWithDifferentResource);\n    }\n']",Resource;Repair;Repair;Resource;repair;my;resource;Repair;Different;Repair,6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.86496639251709, -5.730029106140137, -6.335021018981934, -5.369606018066406, -5.474447250366211, -0.016846880316734314]",0.9832942485809326
3,['    @Test\n    public void testEqualsContract()\n    {\n        EqualsVerifier.forClass(RepairResource.class).usingGetClass().verify();\n    }\n'],Contract;Verifier;Repair;using;class;verify;Class;Get;Class;Resource,2.7939677238464355e-09;1.1932570487260818e-09;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;4.3655745685100555e-11;0.0;-6.257323548197746e-10;-6.402842700481415e-10,5,5,"[-5.870206832885742, -5.694000720977783, -6.316213607788086, -5.442873954772949, -5.424307346343994, -0.016871729865670204]",0.9832696914672852
3,"['    @Test\n    public void testPrevalidateNotRepairable()\n    {\n        // mock\n        doReturn(false).when(myRepairStateSnapshot).canRepair();\n\n        assertThat(myRepairJob.runnable()).isFalse();\n\n        verify(myRepairState, times(1)).update();\n        verify(myRepairStateSnapshot, times(1)).canRepair();\n    }\n']",verify;Repair;Job;times;Not;able;Repair;verify;my;State,3.4924596548080444e-10;3.4560798667371273e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8189894035458565e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.865824222564697, -5.697192668914795, -6.311695575714111, -5.405178546905518, -5.452869892120361, -0.01692459173500538]",0.983217716217041
3,"['    @Test\n    public void testPrevalidateNeedRepair()\n    {\n        // mock\n        doReturn(true).when(myRepairStateSnapshot).canRepair();\n\n        assertThat(myRepairJob.runnable()).isTrue();\n\n        verify(myRepairState, times(1)).update();\n        verify(myRepairStateSnapshot, times(1)).canRepair();\n    }\n']",mock;Repair;Repair;my;Repair;my;Repair;can;times;Repair,5.122274160385132e-09;1.862645149230957e-09;6.548361852765083e-10;5.093170329928398e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.346940502524376e-10;3.055902197957039e-10,5,5,"[-5.874463081359863, -5.70474910736084, -6.32656717300415, -5.41987943649292, -5.467099666595459, -0.016718635335564613]",0.9834202527999878
3,"['    @Test\n    public void testPrevalidateNotRepairableThenRepairable()\n    {\n        // mock\n        doReturn(false).doReturn(true).when(myRepairStateSnapshot).canRepair();\n\n        assertThat(myRepairJob.runnable()).isFalse();\n        assertThat(myRepairJob.runnable()).isTrue();\n\n        verify(myRepairState, times(2)).update();\n        verify(myRepairStateSnapshot, times(2)).canRepair();\n    }\n']",run;Prevalidate;Repair;can;Repair;mock;times;able;my;False,9.313225746154785e-10;7.566995918750763e-10;5.529727786779404e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10,5,5,"[-5.859576225280762, -5.689949035644531, -6.307108402252197, -5.389269828796387, -5.4604082107543945, -0.017016597092151642]",0.9831273555755615
3,"['    @Test\n    public void testPrevalidateUpdateThrowsOverloadException()\n    {\n        // mock\n        doReturn(false).when(myRepairStateSnapshot).canRepair();\n        doThrow(new OverloadedException(null, ""Expected exception"")).when(myRepairState).update();\n\n        assertThat(myRepairJob.runnable()).isFalse();\n\n        verify(myRepairStateSnapshot, times(1)).canRepair();\n    }\n']",That;null;Repair;can;Overload;do;State;Job;State;when,5.587935447692871e-09;3.026798367500305e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.1641532182693481e-09;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.856812000274658, -5.6922407150268555, -6.30089807510376, -5.396126747131348, -5.459675312042236, -0.01699983701109886]",0.9831439852714539
3,"['    @Test\n    public void testPrevalidateUpdateThrowsException()\n    {\n        // mock\n        doReturn(false).when(myRepairStateSnapshot).canRepair();\n        doThrow(new RuntimeException(""Expected exception"")).when(myRepairState).update();\n\n        assertThat(myRepairJob.runnable()).isFalse();\n\n        verify(myRepairStateSnapshot, times(1)).canRepair();\n    }\n']",times;Repair;do;verify;Repair;Throws;Throw;new;State;update,4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.4551915228366852e-10;8.731149137020111e-11;8.731149137020111e-11,5,5,"[-5.8587188720703125, -5.696203231811523, -6.307682037353516, -5.404420852661133, -5.4612250328063965, -0.01692318543791771]",0.9832192063331604
3,"['    @Test\n    public void testPostExecuteRepaired()\n    {\n        // mock\n        long repairedAt = System.currentTimeMillis();\n        doReturn(repairedAt).when(myRepairStateSnapshot).lastCompletedAt();\n        doReturn(false).when(myRepairStateSnapshot).canRepair();\n\n        myRepairJob.postExecute(true, null);\n\n        assertThat(myRepairJob.getLastSuccessfulRun()).isEqualTo(repairedAt);\n        verify(myRepairState, times(1)).update();\n    }\n']",long;Repair;Repair;Execute;Repair;Repaired;verify;qual;State;false,1.2223608791828156e-09;1.1350493878126144e-09;9.604264050722122e-10;7.8580342233181e-10;7.566995918750763e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.8510260581970215, -5.66130256652832, -6.3115034103393555, -5.430718421936035, -5.486638069152832, -0.016832813620567322]",0.9833080768585205
3,"['    @Test\n    public void testPostExecuteRepairedWithFailure()\n    {\n        // mock\n        long repairedAt = System.currentTimeMillis();\n        doReturn(repairedAt).when(myRepairStateSnapshot).lastCompletedAt();\n        doReturn(false).when(myRepairStateSnapshot).canRepair();\n\n        myRepairJob.postExecute(false, null);\n\n        assertThat(myRepairJob.getLastSuccessfulRun()).isEqualTo(repairedAt);\n        verify(myRepairState, times(1)).update();\n    }\n']",repaired;State;Repair;long;Repair;Time;Mill;post;when;Completed,1.4551915228366852e-09;7.8580342233181e-10;4.547473508864641e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.850244522094727, -5.655994415283203, -6.313449382781982, -5.439167499542236, -5.4878411293029785, -0.01680784486234188]",0.983332633972168
3,"['    @Test\n    public void testPostExecuteNotRepaired()\n    {\n        // mock\n        doReturn(true).when(myRepairStateSnapshot).canRepair();\n\n        long lastRun = myRepairJob.getLastSuccessfulRun();\n\n        myRepairJob.postExecute(true, null);\n\n        assertThat(myRepairJob.getLastSuccessfulRun()).isEqualTo(lastRun);\n        verify(myRepairState, times(1)).update();\n    }\n']",update;times;last;do;Job;Repair;Repair;get;can;Return,9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;6.111804395914078e-10;6.111804395914078e-10;4.94765117764473e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.898624897003174, -5.72683572769165, -6.383570671081543, -5.477738857269287, -5.5121941566467285, -0.01603352651000023]",0.9840943217277527
3,"['    @Test\n    public void testPostExecuteNotRepairedWithFailure()\n    {\n        // mock\n        doReturn(true).when(myRepairStateSnapshot).canRepair();\n\n        long lastRun = myRepairJob.getLastSuccessfulRun();\n\n        myRepairJob.postExecute(false, null);\n\n        assertThat(myRepairJob.getLastSuccessfulRun()).isEqualTo(lastRun);\n        verify(myRepairState, times(1)).update();\n    }\n']",Repaired;mock;Execute;Job;when;my;Run;true;Job;verify,3.026798367500305e-09;1.3969838619232178e-09;7.8580342233181e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.90088415145874, -5.725986957550049, -6.390192031860352, -5.487544536590576, -5.51894998550415, -0.015949644148349762]",0.9841768741607666
3,"['    @Test\n    public void testPostExecuteUpdateThrowsException()\n    {\n        // mock\n        doThrow(new RuntimeException(""Expected exception"")).when(myRepairState).update();\n\n        long lastRun = myRepairJob.getLastSuccessfulRun();\n\n        myRepairJob.postExecute(true, null);\n\n        assertThat(myRepairJob.getLastSuccessfulRun()).isEqualTo(lastRun);\n    }\n']",Throws;mock;qual;Exception;Execute;Post;new;exception;Repair;null,5.122274160385132e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.890381336212158, -5.7498321533203125, -6.3984198570251465, -5.497375965118408, -5.507796764373779, -0.01589156687259674]",0.9842340350151062
3,"['    @Test\n    public void testGetView()\n    {\n        VnodeRepairState vnodeRepairState = TestUtils.createVnodeRepairState(1, 2, ImmutableSet.of(), System.currentTimeMillis());\n        VnodeRepairStatesImpl vnodeRepairStates = VnodeRepairStatesImpl.newBuilder(Arrays.asList(vnodeRepairState)).build();\n        when(myRepairStateSnapshot.getVnodeRepairStates()).thenReturn(vnodeRepairStates);\n        RepairJobView repairJobView = myRepairJob.getView();\n\n        assertThat(repairJobView.getId()).isEqualTo(myTableReference.getId());\n        assertThat(repairJobView.getTableReference()).isEqualTo(myTableReference);\n        assertThat(repairJobView.getRepairConfiguration()).isEqualTo(myRepairConfiguration);\n        assertThat(repairJobView.getRepairStateSnapshot()).isEqualTo(myRepairStateSnapshot);\n        assertThat(repairJobView.getStatus()).isEqualTo(RepairJobView.Status.ERROR);\n    }\n']",node;State;State;View;Get;States;Time;Snapshot;Utils;Repair,5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.830022811889648, -5.672300815582275, -6.323856830596924, -5.403623580932617, -5.515449523925781, -0.01683621294796467]",0.9833047389984131
3,"['    @Test\n    public void testIterator()\n    {\n        LongTokenRange tokenRange = new LongTokenRange(0, 10);\n        ImmutableSet<Node> replicas = ImmutableSet.of(mock(Node.class), mock(Node.class));\n        ImmutableList<LongTokenRange> vnodes = ImmutableList.of(tokenRange);\n\n        VnodeRepairStates vnodeRepairStates = VnodeRepairStatesImpl\n                .newBuilder(ImmutableList.of(new VnodeRepairState(tokenRange, replicas, 1234L)))\n                .build();\n        ReplicaRepairGroup replicaRepairGroup = new ReplicaRepairGroup(replicas, vnodes);\n\n        RepairStateSnapshot repairStateSnapshot = RepairStateSnapshot.newBuilder()\n                .withReplicaRepairGroups(Collections.singletonList(replicaRepairGroup))\n                .withLastCompletedAt(1234L)\n                .withVnodeRepairStates(vnodeRepairStates)\n                .build();\n        when(myRepairState.getSnapshot()).thenReturn(repairStateSnapshot);\n\n        Iterator<ScheduledTask> iterator = myRepairJob.iterator();\n\n        ScheduledTask task = iterator.next();\n        assertThat(task).isInstanceOf(RepairGroup.class);\n        Collection<RepairTask> repairTasks = ((RepairGroup)task).getRepairTasks();\n\n        assertThat(repairTasks).hasSize(1);\n        RepairTask repairTask = repairTasks.iterator().next();\n        assertThat(repairTask.getReplicas()).containsExactlyInAnyOrderElementsOf(replicas);\n        assertThat(repairTask.getTokenRanges()).containsExactly(tokenRange);\n        assertThat(repairTask.getRepairConfiguration()).isEqualTo(myRepairConfiguration);\n        assertThat(repairTask.getTableReference()).isEqualTo(myTableReference);\n    }\n']",cheduled;singleton;repair;Scheduled;repair;Immutable;class;Builder;Set;Repair,5.093170329928398e-10;4.220055416226387e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1464074961841106e-10,5,5,"[-5.854417324066162, -5.660673141479492, -6.311858177185059, -5.3619561195373535, -5.532090187072754, -0.016954362392425537]",0.9831885695457458
3,"['    @Test\n    public void testIteratorWithTargetSize()\n    {\n        List<LongTokenRange> expectedTokenRanges = Arrays.asList(\n                new LongTokenRange(0, 1),\n                new LongTokenRange(1, 2),\n                new LongTokenRange(2, 3),\n                new LongTokenRange(3, 4),\n                new LongTokenRange(4, 5),\n                new LongTokenRange(5, 6),\n                new LongTokenRange(6, 7),\n                new LongTokenRange(7, 8),\n                new LongTokenRange(8, 9),\n                new LongTokenRange(9, 10)\n        );\n\n        LongTokenRange tokenRange = new LongTokenRange(0, 10);\n        ImmutableSet<Node> replicas = ImmutableSet.of(mock(Node.class), mock(Node.class));\n        ImmutableList<LongTokenRange> vnodes = ImmutableList.of(tokenRange);\n\n        VnodeRepairStates vnodeRepairStates = VnodeRepairStatesImpl.newBuilder(ImmutableList.of(new VnodeRepairState(tokenRange, replicas, 1234L))).build();\n        ReplicaRepairGroup replicaRepairGroup = new ReplicaRepairGroup(replicas, vnodes);\n\n        RepairStateSnapshot repairStateSnapshot = RepairStateSnapshot.newBuilder()\n                .withReplicaRepairGroups(Collections.singletonList(replicaRepairGroup))\n                .withLastCompletedAt(1234L)\n                .withVnodeRepairStates(vnodeRepairStates)\n                .build();\n        when(myRepairState.getSnapshot()).thenReturn(repairStateSnapshot);\n        // 100 MB target size, 1000MB in table\n        when(myTableStorageStates.getDataSize(eq(myTableReference))).thenReturn(THOUSAND_MB_IN_BYTES);\n\n        Iterator<ScheduledTask> iterator = myRepairJob.iterator();\n\n        ScheduledTask task = iterator.next();\n        assertThat(task).isInstanceOf(RepairGroup.class);\n        Collection<RepairTask> repairTasks = ((RepairGroup)task).getRepairTasks();\n\n        assertThat(repairTasks).hasSize(expectedTokenRanges.size());\n\n        Iterator<RepairTask> repairTaskIterator = repairTasks.iterator();\n        for (LongTokenRange expectedRange : expectedTokenRanges)\n        {\n            assertThat(repairTaskIterator.hasNext()).isTrue();\n            RepairTask repairTask = repairTaskIterator.next();\n            assertThat(repairTask.getReplicas()).containsExactlyInAnyOrderElementsOf(replicas);\n            assertThat(repairTask.getRepairConfiguration()).isEqualTo(myRepairConfiguration);\n            assertThat(repairTask.getTableReference()).isEqualTo(myTableReference);\n\n            assertThat(repairTask.getTokenRanges()).containsExactly(expectedRange);\n        }\n    }\n']",replicas;replica;Group;new;List;Replica;Set;Repair;Repair;Immutable,1.0040821507573128e-09;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.842772960662842, -5.666305065155029, -6.279569625854492, -5.315242767333984, -5.506117820739746, -0.017363324761390686]",0.9827864170074463
3,"['    @Test\n    public void testStatusCompleted()\n    {\n        long repairedAt = System.currentTimeMillis();\n        doReturn(repairedAt).when(myRepairStateSnapshot).lastCompletedAt();\n        VnodeRepairState vnodeRepairState = TestUtils.createVnodeRepairState(1, 2, ImmutableSet.of(), repairedAt);\n        VnodeRepairStatesImpl vnodeRepairStates = VnodeRepairStatesImpl.newBuilder(Arrays.asList(vnodeRepairState)).build();\n        when(myRepairStateSnapshot.getVnodeRepairStates()).thenReturn(vnodeRepairStates);\n\n        assertThat(myRepairJob.getView().getStatus()).isEqualTo(RepairJobView.Status.COMPLETED);\n    }\n']",Completed;States;do;Snapshot;Set;get;State;View;current;when,1.979060471057892e-09;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.850520133972168, -5.683085918426514, -6.335169315338135, -5.455189228057861, -5.50865364074707, -0.016515567898750305]",0.9836200475692749
3,"['    @Test\n    public void testStatusError()\n    {\n        long repairedAt = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(10);\n        VnodeRepairState vnodeRepairState = TestUtils.createVnodeRepairState(1, 2, ImmutableSet.of(), repairedAt);\n        VnodeRepairStatesImpl vnodeRepairStates = VnodeRepairStatesImpl.newBuilder(Arrays.asList(vnodeRepairState)).build();\n        when(myRepairStateSnapshot.getVnodeRepairStates()).thenReturn(vnodeRepairStates);\n        doReturn(repairedAt).when(myRepairStateSnapshot).lastCompletedAt();\n\n        assertThat(myRepairJob.getView().getStatus()).isEqualTo(RepairJobView.Status.ERROR);\n    }\n']",Repair;of;Repair;Snapshot;Set;Repair;long;Mill;Time;Repair,5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.839192867279053, -5.67077112197876, -6.322953701019287, -5.463505268096924, -5.496801376342773, -0.016627071425318718]",0.9835103750228882
3,"['    @Test\n    public void testStatusInQueue()\n    {\n        long repairedAt = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1);\n        VnodeRepairState vnodeRepairState = TestUtils.createVnodeRepairState(1, 2, ImmutableSet.of(), repairedAt);\n        VnodeRepairStatesImpl vnodeRepairStates = VnodeRepairStatesImpl.newBuilder(Arrays.asList(vnodeRepairState)).build();\n        when(myRepairStateSnapshot.getVnodeRepairStates()).thenReturn(vnodeRepairStates);\n        doReturn(repairedAt).when(myRepairStateSnapshot).lastCompletedAt();\n\n        assertThat(myRepairJob.getView().getStatus()).isEqualTo(RepairJobView.Status.IN_QUEUE);\n    }\n']",Queue;Status;repaired;States;of;to;Status;node;create;UEUE,1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.83154296875, -5.676333904266357, -6.332385540008545, -5.470157146453857, -5.498531341552734, -0.016577476635575294]",0.9835591912269592
3,"['    @Test\n    public void testStatusWarning()\n    {\n        long repairedAt = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(7);\n        VnodeRepairState vnodeRepairState = TestUtils.createVnodeRepairState(1, 2, ImmutableSet.of(), repairedAt);\n        VnodeRepairStatesImpl vnodeRepairStates = VnodeRepairStatesImpl.newBuilder(Arrays.asList(vnodeRepairState)).build();\n        when(myRepairStateSnapshot.getVnodeRepairStates()).thenReturn(vnodeRepairStates);\n        doReturn(repairedAt).when(myRepairStateSnapshot).lastCompletedAt();\n\n        assertThat(myRepairJob.getView().getStatus()).isEqualTo(RepairJobView.Status.WARNING);\n    }\n']",Status;Time;of;Snapshot;Arrays;Repair;Repair;DAY;States;Utils,1.3969838619232178e-09;1.0477378964424133e-09;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;3.92901711165905e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.840599536895752, -5.670866966247559, -6.323470115661621, -5.46011209487915, -5.498238563537598, -0.01663023792207241]",0.9835072755813599
3,"['\t@Test\n\tpublic void testParseDevOpsCompany() {\n\t\tPairingBoard pairingBoard = new PairingBoard(null, null, null);\n\t\t\n\t\tassertThat(pairingBoard.parseDevOpsCompanies(""devops:company""), is(new String[] {""company""}));\n\t\tassertThat(pairingBoard.parseDevOpsCompanies(""devops:company,companyb""), is(new String[] {""company"", ""companyb""}));\n\t\tassertThat(pairingBoard.parseDevOpsCompanies(""devops:""), is(new String[] {}));\n\t}\n']",airing;Company;new;pairing;devops;Ops;pairing;Board;null;null,2.1245796233415604e-09;1.979060471057892e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.8903985023498535, -5.824467182159424, -6.372389316558838, -5.419590950012207, -5.474092483520508, -0.016181446611881256]",0.9839486479759216
3,"['\t@Test\n\tpublic void testGetAndSetDevs()  {\n\t\tPair subject = new Pair();\n\t\tsubject.setDevs(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\t\n\t\tassertThat(subject.getDevs(), is(equalTo(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")))));\n\t}\n']",Developer;Pair;subject;Developer;set;new;Set;dev;new;subject,9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;5.820766091346741e-11,5,5,"[-5.86400842666626, -5.766923904418945, -6.332442760467529, -5.423384666442871, -5.457355976104736, -0.01656024158000946]",0.9835761189460754
3,"['\t@Test\n\tpublic void testGetAndSetDevsWithNullValues()  {\n\t\tPair subject = new Pair();\n\t\tsubject.setDevs(Arrays.asList(null, new Developer(""dev2"")));\n\t\t\n\t\tassertThat(subject.getDevs(), is(equalTo(Arrays.asList(new Developer(""dev2"")))));\n\t}\n']",Arrays;Dev;Pair;List;That;Developer;subject;Set;Arrays;dev,1.043081283569336e-07;8.940696716308594e-08;5.960464477539063e-08;5.21540641784668e-08;3.725290298461914e-08;3.725290298461914e-08;2.2351741790771484e-08;1.4901161193847656e-08;1.4901161193847656e-08;1.4901161193847656e-08,5,5,"[-5.882775783538818, -5.791743755340576, -6.357908725738525, -5.44209098815918, -5.4805474281311035, -0.016200684010982513]",0.9839298129081726
3,"['\t@Test\n\tpublic void testAddDev()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\t\n\t\tassertThat(subject.getDevs(), is(equalTo(Arrays.asList(new Developer(""dev1"")))));\n\t}\n']",Add;Arrays;Developer;dev;subject;as;Arrays;as;List;dev,2.2118911147117615e-09;1.4551915228366852e-09;1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.878669738769531, -5.794888019561768, -6.354937553405762, -5.46120548248291, -5.456875801086426, -0.01622590236365795]",0.983905017375946
3,"['\t@Test\n\tpublic void testAddDevWithNull()  {\n\t\tPair subject = new Pair();\n\t\t\n\t\tsubject.addDev(null);\n\t\t\n\t\tassertThat(subject.getDevs().isEmpty(), is(true));\n\t}\n']",Add;Pair;Dev;subject;subject;That;add;null;Empty;new,1.7462298274040222e-09;1.6589183360338211e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;1.1641532182693481e-10,5,5,"[-5.897796630859375, -5.758265495300293, -6.360308647155762, -5.4597954750061035, -5.470611572265625, -0.016224846243858337]",0.983906090259552
3,"['\t@Test\n\tpublic void testHasDev()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\t\n\t\tassertThat(subject.hasDev(new Developer(""dev1"")), is(true));\n\t}\n']",new;Has;has;Arrays;as;List;subject;new;Developer;new,3.958120942115784e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.6298145055770874e-09;9.313225746154785e-10;1.1641532182693481e-10;0.0;0.0;0.0;0.0,5,5,"[-5.9420318603515625, -5.894665241241455, -6.451473236083984, -5.552408695220947, -5.441276550292969, -0.015287253074347973]",0.9848290085792542
3,"['\t@Test\n\tpublic void testGetOtherDev()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\t\n\t\tassertThat(subject.getOtherDev(new Developer(""dev1"")), is(equalTo(new Developer(""dev2""))));\n\t}\n']",Dev;Other;as;Other;Get;List;Developer;subject;equal;new,3.725290298461914e-09;3.725290298461914e-09;3.0850060284137726e-09;2.561137080192566e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;4.656612873077393e-10;2.3283064365386963e-10;0.0,5,5,"[-5.958611488342285, -5.9599103927612305, -6.476129055023193, -5.5565361976623535, -5.43068790435791, -0.015058295801281929]",0.9850543737411499
3,"['\t@Test\n\tpublic void testOtherDevWithOneDev()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\t\n\t\tassertThat(subject.getOtherDev(new Developer(""dev1"")), nullValue());\n\t}\n']",Developer;Pair;new;Arrays;That;List;subject;One;subject;null,2.1420419216156006e-08;9.313225746154785e-09;3.259629011154175e-09;3.026798367500305e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10,5,5,"[-5.970826148986816, -5.941234588623047, -6.474982261657715, -5.573301315307617, -5.417693138122559, -0.015070742927491665]",0.9850422739982605
3,"['\t@Test\n\tpublic void testIsComplete()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\t\n\t\tassertThat(subject.isComplete(), is(true));\n\t}\n']",Developer;subject;subject;Pair;as;new;Complete;List;true;That,7.450580596923828e-09;3.725290298461914e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.917853832244873, -5.881771564483643, -6.420271396636963, -5.522459506988525, -5.4300312995910645, -0.015609114430844784]",0.9845119714736938
3,"['\t@Test\n\tpublic void testIsCompleteWithOneDev()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\t\n\t\tassertThat(subject.isComplete(), is(false));\n\t}\n']",as;new;Complete;Complete;false;air;Developer;That;subject;Pair,3.958120942115784e-09;2.444721758365631e-09;1.3969838619232178e-09;6.984919309616089e-10;4.656612873077393e-10;0.0;0.0;0.0;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.921086311340332, -5.849952697753906, -6.406569480895996, -5.51527738571167, -5.440744400024414, -0.015696663409471512]",0.9844259023666382
3,"['\t@Test\n\tpublic void testToString()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\t\n\t\tassertThat(subject.toString(), is(equalTo(""Pair [devs=[dev1], opsPair=false, locked=false]"")));\n\t}\n']",Developer;false;locked;equal;subject;to;new;false;Pair;as,2.7939677238464355e-09;1.1641532182693481e-09;9.313225746154785e-10;7.8580342233181e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;0.0;0.0,5,5,"[-5.865255832672119, -5.760910987854004, -6.327042579650879, -5.439213752746582, -5.464265823364258, -0.016485197469592094]",0.9836498498916626
3,"['\t@Test\n\tpublic void testHashCode()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\tPair subject2 = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\t\n\t\tassertThat(subject.hashCode(), is(equalTo(subject2.hashCode())));\n\t}\n']",subject;Hash;hash;Developer;hash;as;new;Arrays;as;List,7.8580342233181e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11,5,5,"[-5.862625598907471, -5.7241973876953125, -6.3030314445495605, -5.397073745727539, -5.43774938583374, -0.0169626846909523]",0.9831804633140564
3,"['\t@Test\n\tpublic void testHashCodeNotEqual()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\tPair subject2 = new Pair(Arrays.asList(new Developer(""dev2"")));\n\t\t\n\t\tassertThat(subject.hashCode(), is(not(equalTo(subject2.hashCode()))));\n\t}\n']",qual;Pair;dev;Developer;Not;Pair;new;hash;Arrays;List,8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.4010660126805305e-10;1.8917489796876907e-10,5,5,"[-5.874666213989258, -5.744519233703613, -6.323277950286865, -5.411102771759033, -5.4592976570129395, -0.01666541025042534]",0.9834727048873901
3,"['\t@Test\n\tpublic void testEqual()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\tPair subject2 = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\t\n\t\tassertThat(subject.equals(subject2), is(true));\n\t}\n']",Developer;Arrays;subject;as;subject;air;That;new;dev;List,1.6298145055770874e-09;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.853551864624023, -5.721271514892578, -6.285095691680908, -5.389430999755859, -5.418569087982178, -0.017153475433588028]",0.9829928278923035
3,"['\t@Test\n\tpublic void testEqualWithOpsTrue()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\tsubject.setOpsPair(true);\n\t\tPair subject2 = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\tsubject2.setOpsPair(true);\n\t\t\n\t\tassertThat(subject.equals(subject2), is(true));\n\t}\n']",Ops;Pair;air;air;air;true;Developer;Arrays;new;Pair,2.473825588822365e-10;2.3283064365386963e-10;2.000888343900442e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.840198040008545, -5.712021350860596, -6.263872146606445, -5.36106538772583, -5.417586803436279, -0.01740233786404133]",0.9827482104301453
3,"['\t@Test\n\tpublic void testEqualDifferentPairs()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\tPair subject2 = new Pair(Arrays.asList(new Developer(""dev2"")));\n\t\t\n\t\tassertThat(subject.equals(subject2), is(false));\n\t}\n']",new;Different;false;List;new;subject;airs;Arrays;That;dev,4.0745362639427185e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.0186340659856796e-10;1.0186340659856796e-10,5,5,"[-5.853104591369629, -5.724730968475342, -6.289625644683838, -5.392248153686523, -5.417982578277588, -0.017124177888035774]",0.9830214977264404
3,"['\t@Test\n\tpublic void testIsSolo()  {\n\t\tPair subject = new Pair(Arrays.asList(new Developer(""dev1"")));\n\t\tPair subject2 = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\t\n\t\tassertThat(subject.equals(subject2), is(false));\n\t}\n']",olo;Pair;Developer;dev;dev;dev;air;new;subject;That,9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.883352756500244, -5.808250904083252, -6.36663293838501, -5.4502763748168945, -5.467971324920654, -0.016150597482919693]",0.9839789867401123
3,"['\t@Test\n\tpublic void testIsBuildPairFalse()  {\n\t\tPair subject = new Pair();\n\t\t\n\t\tsubject.setBuildPair(false);\n\t\t\n\t\tassertThat(subject.isBuildPair(), is(false));\n\t}\n']",air;That;air;false;set;False;Build;air;subject;new,7.566995918750763e-10;6.402842700481415e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-5.820766091346741e-11;-1.7462298274040222e-10;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.879581451416016, -5.747119903564453, -6.335318565368652, -5.44200325012207, -5.443282127380371, -0.01655285432934761]",0.983583390712738
3,"['\t@Test\n\tpublic void testIsBuildPairTrue()  {\n\t\tPair subject = new Pair();\n\t\t\n\t\tsubject.setBuildPair(true);\n\t\t\n\t\tassertThat(subject.isBuildPair(), is(true));\n\t}\n']",Pair;Build;Build;subject;true;set;subject;That;air;Build,9.313225746154785e-10;6.111804395914078e-10;4.220055416226387e-10;2.6193447411060333e-10;1.964508555829525e-10;1.7462298274040222e-10;8.731149137020111e-11;8.731149137020111e-11;2.1827872842550278e-11;0.0,5,5,"[-5.8738579750061035, -5.73969030380249, -6.323210716247559, -5.436822414398193, -5.426578998565674, -0.016712186858057976]",0.9834266901016235
3,"['\t@Test\n\tpublic void testIsCommunitydPairFalse()  {\n\t\tPair subject = new Pair();\n\t\t\n\t\tsubject.setCommunityPair(false);\n\t\t\n\t\tassertThat(subject.isCommunityPair(), is(false));\n\t}\n']",False;false;false;air;subject;air;subject;subject;That;set,6.05359673500061e-09;1.5133991837501526e-09;1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;-3.346940502524376e-10,5,5,"[-5.891899108886719, -5.764307022094727, -6.353909969329834, -5.451094627380371, -5.453985214233398, -0.016342950984835625]",0.9837899804115295
3,"['\t@Test\n\tpublic void testIsOpsPairTrue()  {\n\t\tPair subject = new Pair();\n\t\t\n\t\tsubject.setOpsPair(true);\n\t\t\n\t\tassertThat(subject.isOpsPair(), is(true));\n\t}\n']",Pair;subject;Ops;true;air;new;true;That;Ops;air,8.149072527885437e-10;2.764863893389702e-10;2.473825588822365e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;2.9103830456733704e-11;2.9103830456733704e-11;0.0;0.0,5,5,"[-5.88262414932251, -5.742260456085205, -6.3355183601379395, -5.4442219734191895, -5.437558650970459, -0.016575131565332413]",0.9835614562034607
3,"['\t@Test\n\tpublic void testIsOpsPairFalse()  {\n\t\tPair subject = new Pair();\n\t\t\n\t\tsubject.setOpsPair(false);\n\t\t\n\t\tassertThat(subject.isOpsPair(), is(false));\n\t}\n']",Ops;Pair;air;subject;subject;That;set;air;air;Ops,7.566995918750763e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;0.0;-8.731149137020111e-11;-1.1641532182693481e-10,5,5,"[-5.8862104415893555, -5.74228572845459, -6.342861175537109, -5.447204113006592, -5.450359344482422, -0.016482383012771606]",0.9836527109146118
3,"['\t@Test\n\tpublic void testIsCommunityPairTrue()  {\n\t\tPair subject = new Pair();\n\t\t\n\t\tsubject.setCommunityPair(true);\n\t\t\n\t\tassertThat(subject.isCommunityPair(), is(true));\n\t}\n']",air;subject;air;subject;air;true;Community;True;set;subject,9.313225746154785e-10;5.529727786779404e-10;5.238689482212067e-10;4.511093720793724e-10;3.2014213502407074e-10;2.764863893389702e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.886234283447266, -5.757416725158691, -6.344127655029297, -5.4493913650512695, -5.439730644226074, -0.016468195244669914]",0.9836666584014893
3,"['\t@Test\n\tpublic void testTrackDefault() {\n\t\tPair subject = new Pair();\n\t\t\n\t\tassertThat(subject.getTrack(), is(""""));\n\t}\n']",Pair;subject;Default;air;new;That;subject;Track;get;Track,8.149072527885437e-10;5.820766091346741e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-4.656612873077393e-10;-7.275957614183426e-10;-1.6298145055770874e-09,5,5,"[-5.8928093910217285, -5.774721622467041, -6.365055561065674, -5.466012477874756, -5.4388813972473145, -0.016289236024022102]",0.9838427305221558
3,"['\t@Test\n\tpublic void testTrackSet() {\n\t\tPair subject = new Pair();\n\t\t\n\t\tsubject.setTrack(""track"");\n\t\t\n\t\tassertThat(subject.getTrack(), is(""track""));\n\t}\n']",Set;Track;Pair;track;new;subject;track;get;Track;Track,9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;5.238689482212067e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.6007106751203537e-10;1.1641532182693481e-10;-2.9103830456733704e-11,5,5,"[-5.887211799621582, -5.759855270385742, -6.350484371185303, -5.447518348693848, -5.435931205749512, -0.016471242532134056]",0.9836636781692505
3,"['\t@Test\n\tpublic void testGetPairsReturnOnlyDevPairs() {\n\t\tList<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs(), false);\n\t\tPair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");\n\t\topsPair.setOpsPair(true);\n\t\t\n\t\tList<Pair> pairs = new OpsPairCombinations(pairsListFromDevs).getPairs();\n\t\t\n\t\tassertThat(pairs.contains(opsPair), is(true));\n\t\tassertThat(pairs.size(), is(1));\n\t}\n']",Dev;By;Ops;Standard;List;Get;From;airs;Ops;List,2.444721758365631e-09;1.9208528101444244e-09;1.6880221664905548e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.893316745758057, -5.797842979431152, -6.372174263000488, -5.426232814788818, -5.492596626281738, -0.016146844252943993]",0.9839829206466675
3,"['\t@Test\n\tpublic void testGetPastPairs() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(standardDevs));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairs(0), is(getPairsListFromDevs(standardDevs).get(0).getPairs().values().stream().collect(Collectors.toList())));\n\t\tassertThat(devPairCombinations.getPastPairs(1), is(getPairsListFromDevs(standardDevs).get(1).getPairs().values().stream().collect(Collectors.toList())));\n\t\tassertThat(devPairCombinations.getPastPairs(2), is(getPairsListFromDevs(standardDevs).get(2).getPairs().values().stream().collect(Collectors.toList())));\n\t}\n']",Past;Past;Get;Past;Ops;Dev;get;new;stream;dev,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.128661774098873e-10;2.9103830456733704e-10,5,5,"[-5.877982139587402, -5.7400431632995605, -6.34730339050293, -5.402300834655762, -5.5040082931518555, -0.01647816225886345]",0.9836568832397461
3,"['\t@Test\n\tpublic void testGetPastPairsFiltersOps() {\n\t\tList<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs(), false);\n\t\tPair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");\n\t\topsPair.setOpsPair(true);\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(pairsListFromDevs);\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairs(0), is(Arrays.asList(pairsListFromDevs.get(0).getPairByTrack(""track1""))));\n\t}\n']",Combinations;Filters;Arrays;dev;Get;get;true;pairs;ops;new,2.153683453798294e-09;2.0954757928848267e-09;9.022187441587448e-10;8.731149137020111e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.89285945892334, -5.762755870819092, -6.379242897033691, -5.421492099761963, -5.5063042640686035, -0.01621018536388874]",0.9839205145835876
3,"['\t@Test\n\tpublic void testGetPastPairsForMissingHistory() {\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(getStandardDevs()));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairs(3), is(nullValue()));\n\t}\n']",Ops;Dev;Ops;Past;Standard;Combinations;Past;Get;History;new,6.05359673500061e-09;4.6566128730773926e-09;3.259629011154175e-09;1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.932872772216797, -5.835526466369629, -6.432284832000732, -5.524213790893555, -5.530965805053711, -0.015248275361955166]",0.9848672747612
3,"['\t@Test\n\tpublic void testGetPastPairByTrack() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(standardDevs));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairByTrack(0, ""track1""), is(getPairsListFromDevs(standardDevs).get(0).getPairByTrack(""track1"")));\n\t\tassertThat(devPairCombinations.getPastPairByTrack(1, ""track2""), is(getPairsListFromDevs(standardDevs).get(1).getPairByTrack(""track2"")));\n\t\tassertThat(devPairCombinations.getPastPairByTrack(2, ""track1""), is(getPairsListFromDevs(standardDevs).get(2).getPairByTrack(""track1"")));\n\t}\n']",Dev;Past;air;Track;airs;Combinations;standard;standard;Past;Track,9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.883683681488037, -5.75120735168457, -6.373142719268799, -5.41774320602417, -5.51975154876709, -0.016245488077402115]",0.9838857650756836
3,"['\t@Test(expected =  RuntimeException.class)\n\tpublic void testGetPastPairByTrackThrowsRuntimeErrorForOpsPair() {\n\t\tList<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs(), false);\n\t\tPair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");\n\t\topsPair.setOpsPair(true);\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(pairsListFromDevs);\n\t\t\n\t\t\n\t\tdevPairCombinations.getPastPairByTrack(0, ""track2"");\n\t}\n']",Standard;Get;Dev;Ops;From;dev;Track;Past;From;Combinations,1.862645149230957e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10,5,5,"[-5.912540435791016, -5.82077693939209, -6.415837287902832, -5.466972351074219, -5.515964984893799, -0.015674248337745667]",0.9844479560852051
3,"['\t@Test\n\tpublic void testGetPastPairByTrackForMissingHistory() {\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(getStandardDevs()));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairByTrack(3, ""track1""), is(nullValue()));\n\t}\n']",Combinations;Combinations;dev;get;air;new;track;Dev;Combinations;Dev,6.05359673500061e-09;4.540197551250458e-09;2.561137080192566e-09;2.444721758365631e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10,5,5,"[-5.945615768432617, -5.870508193969727, -6.439166069030762, -5.524554252624512, -5.512205123901367, -0.01517583429813385]",0.9849387407302856
3,"['\t@Test\n\tpublic void testGetPastPairByTrackForMissingTrack() {\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(getStandardDevs()));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairByTrack(1, ""track5""), is(nullValue()));\n\t}\n']",Combinations;Ops;That;track;Ops;air;Value;Missing;get;Track,1.0477378964424133e-08;3.4924596548080444e-09;3.259629011154175e-09;2.6775524020195007e-09;2.0954757928848267e-09;1.9208528101444244e-09;1.862645149230957e-09;1.7462298274040222e-09;1.57160684466362e-09;1.5133991837501526e-09,5,5,"[-5.940998077392578, -5.856299877166748, -6.438467025756836, -5.524075508117676, -5.512499809265137, -0.015231017023324966]",0.9848843812942505
3,"['\t@Test\n\tpublic void testIsRotationTimeForEmptyHistory() {\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(new ArrayList<>());\n\t\tCompany company = new Company(""myCompany"");\n\t\tcompany.setDevOpsRotationStrategy(""weekly"");\n\t\tdevPairCombinations.setCompany(company);\n\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), getStandardDevs(), false), is(false));\n\t}\n']",History;otation;otation;Dev;Company;air;set;get;Time;company,2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.887108325958252, -5.771458148956299, -6.361695766448975, -5.473201274871826, -5.505310535430908, -0.016007013618946075]",0.9841204285621643
3,"['\t@Test\n\tpublic void testIsRotationTimeForEmptyHistoryWithEveryDayRotation() {\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(new ArrayList<>());\n\t\tCompany company = new Company(""myCompany"");\n\t\tcompany.setDevOpsRotationStrategy(""weekly"");\n\t\tdevPairCombinations.setCompany(company);\n\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), getStandardDevs(), true), is(false));\n\t}\n']",otation;air;Empty;Dev;Time;Combinations;company;For;otation;track,1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.87862491607666, -5.752103328704834, -6.351201057434082, -5.4696149826049805, -5.491048812866211, -0.01618613861501217]",0.983944296836853
3,"['\t@Test\n\tpublic void testIsRotationTimeForEmptyHistoryWithEveryDayRotationAnNoWeeklyRotation() {\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(new ArrayList<>());\n\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), getStandardDevs(), true), is(true));\n\t}\n']",Weekly;Every;track;An;Arrays;History;Time;new;List;Array,6.05359673500061e-09;3.725290298461914e-09;1.862645149230957e-09;1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.906222820281982, -5.768428325653076, -6.38184118270874, -5.518243312835693, -5.510717391967773, -0.015718139708042145]",0.9844047427177429
3,"['\t@Test\n\tpublic void testIsRotationTimeForSameWeek() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tDayPairs pairs = new DayPairs();\n\t\tpairs.setDate(new Date());\n\t\tpairs.addPair(""track1"", new Pair(Arrays.asList(standardDevs.get(0), standardDevs.get(1)), true, ""track1""));\n\t\t\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(Arrays.asList(pairs));\n\t\tCompany company = new Company(""myCompany"");\n\t\tcompany.setDevOpsRotationStrategy(""weekly"");\n\t\tdevPairCombinations.setCompany(company);\n\t\t\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), standardDevs, false), is(false));\n\t}\n']",my;Dev;dev;Time;Ops;get;Dev;Pair;Combinations;Dev,1.862645149230957e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;7.8580342233181e-10;6.111804395914078e-10;5.238689482212067e-10;5.093170329928398e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.853967666625977, -5.7196197509765625, -6.322765827178955, -5.441466808319092, -5.49273681640625, -0.0165299903601408]",0.9836058616638184
3,"['\t@Test\n\tpublic void testIsRotationTimeForSameWeekWithEveryDayRotation() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tDayPairs pairs = new DayPairs();\n\t\tpairs.setDate(new Date());\n\t\tpairs.addPair(""track1"", new Pair(Arrays.asList(standardDevs.get(0), standardDevs.get(1)), true, ""track1""));\n\t\t\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(Arrays.asList(pairs));\n\t\tCompany company = new Company(""myCompany"");\n\t\tcompany.setDevOpsRotationStrategy(""weekly"");\n\t\tdevPairCombinations.setCompany(company);\n\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), standardDevs, true), is(false));\n\t}\n']",Time;weekly;Time;Dev;standard;Week;Same;get;standard;otation,1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.863594055175781, -5.719231605529785, -6.337714672088623, -5.4640021324157715, -5.502898693084717, -0.01633579656481743]",0.9837968945503235
3,"['\t@Test\n\tpublic void testIsRotationForDifferentWeekPairs() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tDayPairs pairs = new DayPairs();\n\t\tpairs.setDate(getDateWeeksBefore(1));\n\t\tpairs.addPair(""track1"", new Pair(Arrays.asList(standardDevs.get(0), standardDevs.get(1)), true, ""track1""));\n\t\t\n\t\tOpsPairCombinations devPairCombinations = new OpsPairCombinations(Arrays.asList(pairs));\n\t\tCompany company = new Company(""myCompany"");\n\t\tcompany.setDevOpsRotationStrategy(""weekly"");\n\t\tdevPairCombinations.setCompany(company);\n\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), standardDevs, false), is(true));\n\t}\n']",Week;Weeks;Strategy;set;company;otation;Dev;pairs;Combinations;Dev,2.444721758365631e-09;1.6298145055770874e-09;1.4551915228366852e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.863935947418213, -5.731612682342529, -6.34623384475708, -5.461091995239258, -5.50337028503418, -0.0162891186773777]",0.9838428497314453
3,"['\t@Test\n\tpublic void testId() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.getId(), is(""developerId""));\n\t}\n']",developer;new;Developer;developer;That;developer;get;Developer;developer,4.6566128730773926e-09;3.725290298461914e-09;3.725290298461914e-09;2.852175384759903e-09;1.862645149230957e-09;1.280568540096283e-09;-7.8580342233181e-10;-3.725290298461914e-09;-3.725290298461914e-09,5,5,"[-5.918527603149414, -5.831165790557861, -6.398764133453369, -5.5048322677612305, -5.427722454071045, -0.015872912481427193]",0.984252393245697
3,"['\t@Test\n\tpublic void testCompanyDefault() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.getCompany().getName(), is(""""));\n\t}\n']",Default;developer;new;get;developer;That;Name;Developer;get;Company,1.7462298274040222e-09;1.0477378964424133e-09;9.89530235528946e-10;6.402842700481415e-10;4.656612873077393e-10;1.7462298274040222e-10;8.731149137020111e-11;0.0;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.902665138244629, -5.8082451820373535, -6.382457256317139, -5.498693466186523, -5.4193220138549805, -0.016076579689979553]",0.9840519428253174
3,"['\t@Test\n\tpublic void testCompany() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\tdeveloper.setCompany(new Company(""my-company""));\n\t\t\n\t\tassertThat(developer.getCompany().getName(), is(""my-company""));\n\t}\n']",Name;Developer;developer;my;company;new;Developer;company;Company;set,7.450580596923828e-09;5.587935447692871e-09;5.3551048040390015e-09;4.6566128730773926e-09;3.4924596548080444e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.911980628967285, -5.837079048156738, -6.40222692489624, -5.505343437194824, -5.41810417175293, -0.015908345580101013]",0.9842174053192139
3,"['\t@Test\n\tpublic void testNew() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.getNew(), is(false));\n\t\t\n\t\tdeveloper.setNew(true);\n\t\t\n\t\tassertThat(developer.getNew(), is(true));\n\t}\n']",developer;developer;new;Developer;developer;New;true;get;get;New,1.979060471057892e-09;1.6880221664905548e-09;1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10,5,5,"[-5.858513355255127, -5.734868049621582, -6.302262783050537, -5.415379524230957, -5.43535041809082, -0.01686774380505085]",0.9832737445831299
3,"['\t@Test\n\tpublic void testHasContext() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.hasContext(), is(false));\n\t\t\n\t\tdeveloper.setHasContext(true);\n\t\t\n\t\tassertThat(developer.hasContext(), is(true));\n\t}\n']",new;Has;developer;Has;Developer;Context;set;false;has;That,7.566995918750763e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.8668670654296875, -5.75154972076416, -6.31884765625, -5.42551326751709, -5.439019680023193, -0.016696829348802567]",0.9834418892860413
3,"['\t@Test\n\tpublic void testCompareTo() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\tDeveloper developer2 = new Developer(""developerId2"");\n\t\t\n\t\tassertThat(developer.getId().compareTo(developer2.getId()), is(-1));\n\t\tassertThat(developer2.getId().compareTo(developer.getId()), is(1));\n\t\tassertThat(developer.getId().compareTo(developer.getId()), is(0));\n\t}\n']",Developer;developer;Developer;That;That;new;developer;new;developer;compare,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.853919506072998, -5.776490688323975, -6.316949367523193, -5.399556636810303, -5.451653003692627, -0.01672051101922989]",0.9834186434745789
3,"['\t@Test\n\tpublic void testHashCodeOfEqualInstances() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\tDeveloper sameDeveloper = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.hashCode(), is(sameDeveloper.hashCode()));\n\t}\n']",developer;Developer;Developer;developer;qual;Hash;developer;same;new;That,6.51925802230835e-09;3.725290298461914e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.444721758365631e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10,5,5,"[-5.92741584777832, -5.82780647277832, -6.420101165771484, -5.512864589691162, -5.472683429718018, -0.015593857504427433]",0.9845271110534668
3,"['\t@Test\n\tpublic void testHashCodeOfDifferentInstances() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\tDeveloper differentDeveloper = new Developer(""developerId2"");\n\t\t\n\t\tassertThat(developer.hashCode(), is(not(differentDeveloper.hashCode())));\n\t}\n']",Developer;developer;Developer;Developer;Code;developer;Developer;Instances;Different;new,1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.948887825012207, -5.862257480621338, -6.445188045501709, -5.540255069732666, -5.4603495597839355, -0.015336325392127037]",0.9847806692123413
3,"['\t@Test\n\tpublic void testEqualsOfEqualInstances() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\tDeveloper sameDeveloper = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.equals(sameDeveloper), is(true));\n\t\tassertThat(sameDeveloper.equals(developer), is(true));\n\t}\n']",Equals;Instances;Developer;Developer;developer;Developer;developer;same;That;same,5.005858838558197e-09;3.6088749766349792e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.2118911147117615e-09;1.862645149230957e-09;1.2514647096395493e-09;9.313225746154785e-10;5.529727786779404e-10;4.656612873077393e-10,5,5,"[-5.905129909515381, -5.799911022186279, -6.3857574462890625, -5.476672172546387, -5.460689067840576, -0.01599973998963833]",0.9841274619102478
3,"['\t@Test\n\tpublic void testEqualsOfDifferentInstances() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\tDeveloper differentDeveloper = new Developer(""developerId2"");\n\t\t\n\t\tassertThat(developer.equals(differentDeveloper), is(false));\n\t\tassertThat(differentDeveloper.equals(developer), is(false));\n\t}\n']",Developer;Developer;Instances;Equals;developer;That;Developer;Developer;developer;false,9.313225746154785e-09;4.831235855817795e-09;4.0745362639427185e-09;3.14321368932724e-09;2.153683453798294e-09;2.0372681319713593e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;9.313225746154785e-10,5,5,"[-5.920432090759277, -5.838752746582031, -6.412100315093994, -5.505702972412109, -5.4498372077941895, -0.01572166010737419]",0.9844014048576355
3,"['\t@Test\n\tpublic void testToString() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.toString(), is(""developerId""));\n\t}\n']",Developer;That;new;developer;to;developer;developer;developer;Developer,4.6566128730773926e-09;9.313225746154785e-10;2.3283064365386963e-10;0.0;-6.984919309616089e-10;-1.862645149230957e-09;-3.026798367500305e-09;-3.3760443329811096e-09;-3.725290298461914e-09,5,5,"[-5.8907928466796875, -5.7967095375061035, -6.361661911010742, -5.476649284362793, -5.430301666259766, -0.016224728897213936]",0.983906090259552
3,"['\t@Test\n\tpublic void testGetTrackWeightDefault() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.getTrackWeight(""track""), is(0));\n\t}\n']",developer;Weight;developer;get;Get;developer;Developer;Developer;Default;Track,2.7939677238464355e-09;2.7939677238464355e-09;2.6775524020195007e-09;1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.931237697601318, -5.854755401611328, -6.420846939086914, -5.5232744216918945, -5.427445888519287, -0.015657702460885048]",0.9844642281532288
3,"['\t@Test\n\tpublic void testGetTrackWeightOne() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tdeveloper.updateTrackWeight(""track"");\n\t\t\n\t\tassertThat(developer.getTrackWeight(""track""), is(1));\n\t}\n']",developer;One;developer;Developer;Developer;Track;track;update;developer;new,1.210719347000122e-08;8.381903171539307e-09;6.05359673500061e-09;5.587935447692871e-09;5.587935447692871e-09;3.725290298461914e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10,5,5,"[-5.924139499664307, -5.834756851196289, -6.406250953674316, -5.502793312072754, -5.459624290466309, -0.01570264808833599]",0.9844200015068054
3,"['\t@Test\n\tpublic void testGetPairingDaysDefault() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tassertThat(developer.getPairingDays(), is(0));\n\t}\n']",Developer;airing;developer;airing;Default;developer;Days;developer;get;Get,9.313225746154785e-09;5.587935447692871e-09;4.6566128730773926e-09;3.899913281202316e-09;3.259629011154175e-09;2.7939677238464355e-09;1.6298145055770874e-09;1.3969838619232178e-09;5.820766091346741e-10;-1.862645149230957e-09,5,5,"[-5.942677974700928, -5.848546981811523, -6.43018102645874, -5.548620700836182, -5.425169467926025, -0.01553845964372158]",0.9845816493034363
3,"['\t@Test\n\tpublic void testGetPairingDaysOne() {\n\t\tDeveloper developer = new Developer(""developerId"");\n\t\t\n\t\tdeveloper.udpatePairingDays();\n\t\t\n\t\tassertThat(developer.getPairingDays(), is(1));\n\t}\n']",developer;Days;developer;get;ud;Developer;airing;ate;Days;developer,5.122274160385132e-09;3.259629011154175e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.5133991837501526e-09;9.89530235528946e-10;9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;-1.1641532182693481e-10,5,5,"[-5.914930820465088, -5.799943923950195, -6.382071018218994, -5.53222131729126, -5.440348148345947, -0.01583806425333023]",0.9842867255210876
3,"['\t@Test\n\tpublic void testGetPairsReturnOnlyDevPairs() {\n\t\tList<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs());\n\t\tPair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");\n\t\topsPair.setOpsPair(true);\n\t\t\n\t\tList<Pair> pairs = new DevPairCombinations(pairsListFromDevs).getPairs();\n\t\t\n\t\tassertThat(pairs.size(), is(5));\n\t\tfor (Pair pair : pairs) {\n\t\t\tassertThat(pair.isOpsPair(), is(false));\n\t\t}\n\t}\n']",airs;track;get;Only;pairs;get;Dev;Ops;air;air,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.9150166511535645, -5.827172756195068, -6.397268295288086, -5.464346408843994, -5.517658233642578, -0.01568375527858734]",0.9844385981559753
3,"['\t@Test\n\tpublic void testGetPastPairs() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(standardDevs));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairs(0), is(getPairsListFromDevs(standardDevs).get(0).getPairs().values().stream().collect(Collectors.toList())));\n\t\tassertThat(devPairCombinations.getPastPairs(1), is(getPairsListFromDevs(standardDevs).get(1).getPairs().values().stream().collect(Collectors.toList())));\n\t\tassertThat(devPairCombinations.getPastPairs(2), is(getPairsListFromDevs(standardDevs).get(2).getPairs().values().stream().collect(Collectors.toList())));\n\t}\n']",Past;standard;standard;Get;dev;stream;Dev;Dev;Combinations;Past,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.885728359222412, -5.768218040466309, -6.367344856262207, -5.422106742858887, -5.512187480926514, -0.016206547617912292]",0.9839240908622742
3,"['\t@Test\n\tpublic void testGetPastPairsFiltersOps() {\n\t\tList<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs());\n\t\tPair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");\n\t\topsPair.setOpsPair(true);\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(pairsListFromDevs);\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairs(0), is(Arrays.asList(pairsListFromDevs.get(0).getPairByTrack(""track2""))));\n\t}\n']",Dev;pairs;Past;Combinations;pairs;track;From;List;List;Dev,2.0954757928848267e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.920666217803955, -5.8208465576171875, -6.417831897735596, -5.474367618560791, -5.522186279296875, -0.015591626986861229]",0.9845293164253235
3,"['\t@Test\n\tpublic void testGetPastPairsForMissingHistory() {\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(getStandardDevs()));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairs(3), is(nullValue()));\n\t}\n']",Standard;Dev;air;Missing;Combinations;air;Past;Past;new;Dev,6.51925802230835e-09;3.259629011154175e-09;2.561137080192566e-09;2.0954757928848267e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.955081462860107, -5.905643939971924, -6.449284076690674, -5.571781635284424, -5.448836803436279, -0.015117008239030838]",0.9849966764450073
3,"['\t@Test\n\tpublic void testGetPastPairByTrack() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(standardDevs));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairByTrack(0, ""track1""), is(getPairsListFromDevs(standardDevs).get(0).getPairByTrack(""track1"")));\n\t\tassertThat(devPairCombinations.getPastPairByTrack(1, ""track2""), is(getPairsListFromDevs(standardDevs).get(1).getPairByTrack(""track2"")));\n\t\tassertThat(devPairCombinations.getPastPairByTrack(2, ""track1""), is(getPairsListFromDevs(standardDevs).get(2).getPairByTrack(""track1"")));\n\t}\n']",Developer;standard;Track;Track;standard;standard;Dev;Dev;By;By,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.898904800415039, -5.793254852294922, -6.397988796234131, -5.446865081787109, -5.526552200317383, -0.015870213508605957]",0.9842551946640015
3,"['\t@Test(expected =  RuntimeException.class)\n\tpublic void testGetPastPairByTrackThrowsRuntimeErrorForOpsPair() {\n\t\tList<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs());\n\t\tPair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");\n\t\topsPair.setOpsPair(true);\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(pairsListFromDevs);\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairByTrack(0, ""track1""), is(Arrays.asList(getPairsListFromDevs(getStandardDevs()).get(0).getPairByTrack(""track1""))));\n\t}\n']",Combinations;expected;Combinations;Standard;Dev;List;Ops;Error;air;get,2.0081643015146255e-09;1.6298145055770874e-09;1.2223608791828156e-09;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;7.8580342233181e-10;7.8580342233181e-10;7.566995918750763e-10,5,5,"[-5.956021785736084, -5.8788676261901855, -6.4655070304870605, -5.528598308563232, -5.5312418937683105, -0.01498865894973278]",0.9851229786872864
3,"['\t@Test\n\tpublic void testGetPastPairByTrackForMissingHistory() {\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(getStandardDevs()));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairByTrack(3, ""track1""), is(nullValue()));\n\t}\n']",Combinations;Combinations;Past;dev;air;air;get;Track;By;airs,7.450580596923828e-08;4.377216100692749e-08;2.2351741790771484e-08;1.862645149230957e-08;1.30385160446167e-08;9.313225746154785e-09;9.313225746154785e-09;7.450580596923828e-09;5.820766091346741e-09;5.587935447692871e-09,5,5,"[-6.037844657897949, -6.0261125564575195, -6.538189888000488, -5.635945796966553, -5.359501838684082, -0.014625716023147106]",0.9854808449745178
3,"['\t@Test\n\tpublic void testGetPastPairByTrackForMissingTrack() {\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(getStandardDevs()));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.getPastPairByTrack(1, ""track4""), is(nullValue()));\n\t}\n']",Dev;Dev;Dev;Past;air;air;airs;dev;air;air,5.820766091346741e-09;4.6566128730773926e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;1.862645149230957e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1059455573558807e-09,5,5,"[-6.044608116149902, -6.029573440551758, -6.552160263061523, -5.6429443359375, -5.37136173248291, -0.01449894905090332]",0.9856056571006775
3,"['\t@Test\n\tpublic void testIsRotationTimeForTwoDayPair() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(standardDevs));\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1"", ""track2""), standardDevs, false), is(true));\n\t}\n']",Dev;otation;Time;Developer;dev;Dev;new;Combinations;Arrays;otation,1.862645149230957e-08;4.6566128730773926e-09;4.6566128730773926e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.6088749766349792e-09;2.4156179279088974e-09;1.979060471057892e-09;1.862645149230957e-09,5,5,"[-5.964208602905273, -5.908488750457764, -6.428637504577637, -5.549276351928711, -5.430138111114502, -0.015289131551980972]",0.9848272800445557
3,"['\t@Test\n\tpublic void testIsRotationTimeForNewDevUnconformPair() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tstandardDevs.stream().forEach(developer -> developer.setNew(true));\n\t\tList<DayPairs> pastPairs = getPairsListFromDevs(standardDevs);\n\t\tpastPairs.remove(2);\n\t\tpastPairs.remove(1);\t\t\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(pastPairs);\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1"", ""track2""), standardDevs, false), is(true));\n\t}\n']",Dev;dev;Dev;dev;New;airs;past;air;remove;past,1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;7.8580342233181e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.908708095550537, -5.8086748123168945, -6.381524562835693, -5.488903999328613, -5.518473148345947, -0.015676243230700493]",0.9844459891319275
3,"['\t@Test\n\tpublic void testIsRotationForOneDayPair() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tList<DayPairs> pastPairs = getPairsListFromDevs(standardDevs);\n\t\tpastPairs.remove(2);\n\t\tpastPairs.remove(1);\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(pastPairs);\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1"", ""track2""), standardDevs, false), is(false));\n\t}\n']",Dev;For;standard;Dev;Standard;remove;past;track;List;Dev,3.4924596548080444e-09;2.2118911147117615e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.9066667556762695, -5.811429023742676, -6.375182151794434, -5.481395244598389, -5.507169246673584, -0.01576237939298153]",0.9843611717224121
3,"['\t@Test\n\tpublic void testIsRotationForOneDayPairWithEveryDayRotation() {\n\t\tList<Developer> standardDevs = getStandardDevs();\n\t\tList<DayPairs> pastPairs = getPairsListFromDevs(standardDevs);\n\t\tpastPairs.remove(2);\n\t\tpastPairs.remove(1);\n\t\tDevPairCombinations devPairCombinations = new DevPairCombinations(pastPairs);\n\t\t\n\t\t\n\t\tassertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1"", ""track2""), standardDevs, true), is(true));\n\t}\n']",Dev;Time;otation;track;standard;past;Dev;airs;as;remove,2.9103830456733704e-09;2.561137080192566e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.076841726899147e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.917392730712891, -5.810887336730957, -6.396092414855957, -5.5218729972839355, -5.502233982086182, -0.015551370568573475]",0.9845689535140991
3,"['\t@Test\n\tpublic void testGetPairsNewInstance() {\n\t\tassertThat(new DayPairs().getPairs().isEmpty(), is(true));\n\t}\n']",get;Get;That;true;Instance;airs;airs;New;Day;Empty,7.930793799459934e-10;5.820766091346741e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-5.820766091346741e-10;-5.820766091346741e-10,5,5,"[-5.889784812927246, -5.747498035430908, -6.355159759521484, -5.472484111785889, -5.439431667327881, -0.016372034326195717]",0.9837611317634583
3,"['\t@Test\n\tpublic void testAddPairAndGetTracks(){\n\t\tHashMap<String, Pair> expectedPairs = new HashMap<String, Pair>();\n\t\texpectedPairs.put(""testTrack"", new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))));\n\t\tDayPairs pairs = new DayPairs();\n\t\tpairs.addPair(""testTrack"", expectedPairs.get(""testTrack""));\n\t\t\n\t\tassertThat(pairs.getPairs(), is(equalTo(expectedPairs)));\n\t\tassertThat(pairs.getTracks(), is(equalTo(new HashSet<>(Arrays.asList(""testTrack"")))));\n\t}\n']",as;Track;get;expected;Arrays;put;Day;Pair;Map;Pair,9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.849888324737549, -5.769522190093994, -6.326507568359375, -5.37424898147583, -5.461137771606445, -0.016813354566693306]",0.9833272099494934
3,"['\t@Test\n\tpublic void testSetDate() throws ParseException {\n\t\tDayPairs pairs = new DayPairs();\n\t\tDate expectedDate = new Date();\n\t\tpairs.setDate(expectedDate);\n\t\t\n\t\tassertThat(pairs.getDate(), is(equalTo(getDateWithoutTime(expectedDate))));\n\t}\n']",Parse;airs;expected;Time;Date;Date;new;airs;Without;Day,2.0954757928848267e-09;1.862645149230957e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.869572162628174, -5.7311930656433105, -6.332244873046875, -5.483435153961182, -5.485865116119385, -0.016277039423584938]",0.9838547110557556
3,"['\t@Test\n\tpublic void testGetDate() throws ParseException {\n\t\tassertThat(new DayPairs().getDate(), is(equalTo(getDateWithoutTime(new Date()))));\n\t}\n']",get;Time;airs;get;Exception;Without;new;equal;new;Date,8.149072527885437e-10;5.820766091346741e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;0.0;-1.1641532182693481e-10;-2.9103830456733704e-10,5,5,"[-5.846164226531982, -5.704830646514893, -6.292926788330078, -5.438433647155762, -5.408880710601807, -0.01703745685517788]",0.9831069707870483
3,"['\t@Test\n\tpublic void testCompareTo() {\n\t\tDayPairs todaysPairs = new DayPairs();\n\t\ttodaysPairs.setDate(new Date());\n\t\tDayPairs yesterdayPairs = new DayPairs();\n\t\tyesterdayPairs.setDate(getYesterdayDate());\n\t\t\n\t\tassertThat(todaysPairs.compareTo(yesterdayPairs), is(equalTo(1)));\n\t\tassertThat(yesterdayPairs.compareTo(todaysPairs), is(equalTo(-1)));\n\t\tassertThat(todaysPairs.compareTo(todaysPairs), is(equalTo(0)));\n\t}\n']",Yesterday;airs;Date;airs;airs;yesterday;odays;Day;compare;odays,1.1641532182693481e-09;8.149072527885437e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.853583812713623, -5.725356578826904, -6.311809539794922, -5.421694755554199, -5.48113489151001, -0.016668926924467087]",0.9834692478179932
3,"['\t@Test\n\tpublic void testGetPairByTrack() {\n\t\tPair pair1 = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\tPair pair2 = new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")));\n\t\tDayPairs pairs = new DayPairs();\n\t\tpairs.addPair(""track1"", pair1);\n\t\tpairs.addPair(""track2"", pair2);\n\t\t\n\t\tassertThat(pairs.getPairByTrack(""track1""), is(equalTo(pair1)));\n\t\tassertThat(pairs.getPairByTrack(""track2""), is(equalTo(pair2)));\n\t}\n']",That;airs;By;track;track;air;That;Developer;Track;add,1.1932570487260818e-09;1.076841726899147e-09;1.0477378964424133e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.548361852765083e-10;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.858118057250977, -5.765067100524902, -6.321995735168457, -5.37007474899292, -5.455856800079346, -0.016854381188750267]",0.9832868576049805
3,"['\t@Test\n\tpublic void testHashCode() {\n\t\tDayPairs pairsOfToday = new DayPairs();\n\t\tDayPairs differentPairsOfToday = new DayPairs();\n\t\tDayPairs yesterdayPairs = new DayPairs();\n\t\tyesterdayPairs.setDate(getYesterdayDate());\n\t\tPair pair1 = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\tPair pair2 = new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")));\n\t\tpairsOfToday.addPair(""track1"", pair1);\n\t\tdifferentPairsOfToday.addPair(""track2"", pair2);\n\t\tyesterdayPairs.addPair(""track1"", pair1);\n\t\t\n\t\tassertThat(pairsOfToday.hashCode(), is(equalTo(differentPairsOfToday.hashCode())));\n\t\tassertThat(yesterdayPairs.hashCode(), is(not(equalTo(pairsOfToday.hashCode()))));\n\t}\n']",yesterday;Date;Today;hash;Arrays;Developer;airs;new;Day;airs,1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;5.093170329928398e-10;4.3655745685100555e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.858987808227539, -5.7374420166015625, -6.326118469238281, -5.4249067306518555, -5.4916791915893555, -0.01652834750711918]",0.9836074709892273
3,"['\t@Test\n\tpublic void testEquals() {\n\t\tDayPairs pairsOfToday = new DayPairs();\n\t\tDayPairs differentPairsOfToday = new DayPairs();\n\t\tDayPairs yesterdayPairs = new DayPairs();\n\t\tyesterdayPairs.setDate(getYesterdayDate());\n\t\tPair pair1 = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\tPair pair2 = new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")));\n\t\tpairsOfToday.addPair(""track1"", pair1);\n\t\tdifferentPairsOfToday.addPair(""track2"", pair2);\n\t\tyesterdayPairs.addPair(""track1"", pair1);\n\t\t\n\t\tassertThat(pairsOfToday, is(equalTo(differentPairsOfToday)));\n\t\tassertThat(yesterdayPairs, is(not(equalTo(pairsOfToday))));\n\t}\n']",yesterday;Date;Day;Arrays;equal;Today;Date;pairs;air;new,9.022187441587448e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.850533485412598, -5.726178169250488, -6.314742565155029, -5.403319835662842, -5.509542942047119, -0.016634458675980568]",0.9835031032562256
3,"['\t@Test\n\tpublic void testToString() {\n\t\tDayPairs pairs = new DayPairs();\n\t\tPair pair = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\tpairs.addPair(""track"", pair);\n\t\t\n\t\tassertThat(pairs.toString(), is(equalTo(""Pairs [pairs="" + pairs.getPairs() + "", date="" + pairs.format(pairs.getDate()) + ""]"")));\n\t}\n']",dev;Date;track;Day;as;Developer;airs;List;air;airs,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.862520217895508, -5.7961015701293945, -6.346931457519531, -5.414099216461182, -5.463928699493408, -0.01646045595407486]",0.983674168586731
3,"['\t@Test\n\tpublic void testHasPair() {\n\t\tDayPairs pairs = new DayPairs();\n\t\tPair pair = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\tPair differentPair = new Pair();\n\t\tpairs.addPair(""track"", pair);\n\t\t\n\t\tassertThat(pairs.hasPair(pair), is(true));\n\t\tassertThat(pairs.hasPair(differentPair), is(false));\n\t}\n']",Developer;Developer;air;track;air;different;Arrays;airs;Pair;That,1.3969838619232178e-09;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.8634490966796875, -5.768925666809082, -6.327540397644043, -5.406021595001221, -5.4557037353515625, -0.016650168225169182]",0.9834876656532288
3,"['\t@Test\n\tpublic void testReplacePairWith() {\n\t\tDayPairs pairs = new DayPairs();\n\t\tPair pair = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\tPair differentPair = new Pair();\n\t\tpairs.addPair(""track"", pair);\n\t\t\n\t\tassertThat(pairs.hasPair(pair), is(true));\n\t\tassertThat(pairs.hasPair(differentPair), is(false));\n\t\t\n\t\tpairs.replacePairWith(pair, differentPair);\n\t\t\n\t\tassertThat(pairs.hasPair(pair), is(false));\n\t\tassertThat(pairs.hasPair(differentPair), is(true));\n\t}\n']",Developer;air;new;true;Pair;different;add;new;has;has,3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0913936421275139e-10,5,5,"[-5.865241527557373, -5.751509189605713, -6.322933197021484, -5.378852844238281, -5.479109764099121, -0.01673446223139763]",0.9834048748016357
3,"['\t@Test\n\tpublic void testGetTrackByPair() {\n\t\tDayPairs pairs = new DayPairs();\n\t\tPair pair = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));\n\t\tPair differentPair = new Pair();\n\t\tpairs.addPair(""track"", pair);\n\t\t\n\t\tassertThat(pairs.getTrackByPair(pair), is(equalTo(""track"")));\n\t\tassertThat(pairs.getTrackByPair(differentPair), is(nullValue()));\n\t}\n']",Get;By;Developer;dev;air;Pair;air;By;air;equal,9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.868290901184082, -5.781612396240234, -6.335631847381592, -5.397397518157959, -5.454198837280273, -0.016627540811896324]",0.9835099577903748
3,"['\t@Test\n\tpublic void testSimpleDateFormatNotPersisted() throws NoSuchFieldException, SecurityException {\n\t\tDayPairs pairs = new DayPairs();\n\t\tField dateFormatterField = pairs.getClass().getDeclaredField(""dateFormatter"");\n\t\tdateFormatterField.setAccessible(true);\n\t\tTransient annotation = dateFormatterField.getAnnotation(Transient.class);\n\t\t\n\t\tassertThat(annotation, is(not(nullValue())));\n\t}\n']",Accessible;Field;Class;null;get;Field;That;annotation;Formatter;annotation,2.6775524020195007e-09;1.7462298274040222e-09;1.3387762010097504e-09;1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.903044700622559, -5.817754745483398, -6.368812084197998, -5.451049327850342, -5.474360466003418, -0.01603211835026741]",0.9840956926345825
3,"['\t@Test\n\tpublic void testGetCompanyName() {\n\t\tassertThat(new Company(""company"").getName(), is(""company""));\n\t}\n']",Name;That;Name;Company;company;Get;new;Company;company;get,4.656612873077393e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;0.0;-5.820766091346741e-11;-2.9103830456733704e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.0477378964424133e-09,5,5,"[-5.876068115234375, -5.745212078094482, -6.350162982940674, -5.476388931274414, -5.404011249542236, -0.01656973920762539]",0.9835667610168457
3,"['\t@Test\n\tpublic void testGetCompanyNameWithSaces() {\n\t\tassertThat(new Company(""  company  "").getName(), is(""company""));\n\t}\n']",Name;Get;Company;Company;company;new;get;Name;That;company,9.313225746154785e-10;7.275957614183426e-10;4.656612873077393e-10;3.4924596548080444e-10;1.1641532182693481e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-1.1641532182693481e-10;-8.731149137020111e-10;-1.3387762010097504e-09,5,5,"[-5.8942999839782715, -5.760623931884766, -6.395770072937012, -5.50501012802124, -5.456706523895264, -0.016034582629799843]",0.984093189239502
3,"['\t@Test\n\tpublic void testGetCompanyNameWithUpperCase() {\n\t\tassertThat(new Company(""COMPANY"").getName(), is(""company""));\n\t}\n']",Get;company;COM;Name;ANY;get;new;That;Name;Company,2.3283064365386963e-09;2.0954757928848267e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;3.4924596548080444e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-1.3969838619232178e-09,5,5,"[-5.8880414962768555, -5.839350700378418, -6.412802696228027, -5.527451038360596, -5.423520088195801, -0.015835952013731003]",0.98428875207901
3,"['\t@Test\n\tpublic void testGetCompanyOriginalName() {\n\t\tassertThat(new Company(""Company"").getOriginalName(), is(""Company""));\n\t}\n']",That;Original;Name;new;Company;Name;Original;Company;Get;Company,2.2351741790771484e-08;2.7939677238464355e-09;2.3283064365386963e-09;0.0;-9.313225746154785e-10;-1.3969838619232178e-09;-2.7939677238464355e-09;-2.7939677238464355e-09;-3.725290298461914e-09;-3.725290298461914e-09,5,5,"[-5.87628173828125, -5.744407653808594, -6.349664211273193, -5.477728366851807, -5.406345844268799, -0.01655637100338936]",0.9835800528526306
3,"['\t@Test\n\tpublic void testGetTrack() {\n\t\tassertThat(new Company(""Company"").getTrack(), is(""COMPANY-ops/interrupt""));\n\t}\n']",ANY;Track;Company;Get;new;ops;That;Track;Company;get,2.9103830456733704e-09;2.7939677238464355e-09;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10;-8.149072527885437e-10,5,5,"[-5.897953033447266, -5.801451206207275, -6.375933647155762, -5.498267650604248, -5.406570911407471, -0.016181329265236855]",0.9839488863945007
3,"['\t@Test\n\tpublic void testGetCompanyExperiencedDevs() {\n\t\tDeveloper developerCompanyA = new Developer(""a"");\n\t\tdeveloperCompanyA.setCompany(new Company(""a""));\n\t\tDeveloper newDeveloperCompanyA = new Developer(""a"");\n\t\tnewDeveloperCompanyA.setCompany(new Company(""a""));\n\t\tnewDeveloperCompanyA.setNew(true);\n\t\tDeveloper developerCompanyB = new Developer(""b"");\n\t\tdeveloperCompanyB.setCompany(new Company(""b""));\n\t\t\n\t\tList<Developer> companyDevs = new Company(""a"").getCompanyExperiencedDevs(Arrays.asList(developerCompanyA, developerCompanyB, newDeveloperCompanyA));\n\t\t\n\t\tassertThat(companyDevs.size(), is(1));\n\t\tassertThat(companyDevs.get(0), is(developerCompanyA));\n\t}\n']",Experienced;Company;Company;Dev;Company;Experienced;Company;developer;Company;Developer,1.3969838619232178e-09;8.149072527885437e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8526201248168945, -5.774499416351318, -6.339163303375244, -5.377808094024658, -5.493865966796875, -0.016610892489552498]",0.9835262894630432
3,"['\t@Test\n\tpublic void testGetCompanyTracks() {\n\t\tList<String> tracks = Arrays.asList(""other-company-track"", ""company-track"", ""companyB-track"");\n\t\t\n\t\tString companyTrack = new Company(""Company"").getCompanyTrack(tracks);\n\t\t\n\t\tassertThat(companyTrack, is(""company-track""));\n\t}\n']",Get;List;Company;Tracks;Arrays;new;company;company;get;track,1.3969838619232178e-09;1.280568540096283e-09;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.902637004852295, -5.825658798217773, -6.394608497619629, -5.453195571899414, -5.448026657104492, -0.01606954075396061]",0.9840589761734009
3,"['\t@Test\n\tpublic void testGetCompanyTracksNoHit() {\n\t\tList<String> tracks = Arrays.asList(""other-company-track"", ""third-track"");\n\t\t\n\t\tString companyTrack = new Company(""Company"").getCompanyTrack(tracks);\n\t\t\n\t\tassertThat(companyTrack, is(nullValue()));\n\t}\n']",Company;Get;Company;company;track;Tracks;Track;List;Track;That,1.7462298274040222e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.920314311981201, -5.835940837860107, -6.416332721710205, -5.473857879638672, -5.46510124206543, -0.015790540724992752]",0.984333336353302
3,"['\t@Test\n\tpublic void testIsCompanyTrack() {\n\t\tboolean isCompanyTrack = new Company(""Company"").isCompanyTrack(""company-track"");\n\t\t\n\t\tassertThat(isCompanyTrack, is(true));\n\t}\n']",Company;Company;Track;boolean;Company;true;new;Company;company;track,2.7939677238464355e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;0.0;0.0,5,5,"[-5.9071197509765625, -5.793364524841309, -6.385871887207031, -5.473766326904297, -5.439120292663574, -0.016120919957756996]",0.9840083122253418
3,"['\t@Test\n\tpublic void testIsCompanyTrackFalse() {\n\t\tboolean isCompanyTrack = new Company(""Company"").isCompanyTrack(""companyB-track"");\n\n\t\tassertThat(isCompanyTrack, is(false));\n\t}\n']",Track;Company;Company;That;Company;track;Track;new;boolean;Track,1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;5.820766091346741e-11;2.9103830456733704e-11;0.0;0.0,5,5,"[-5.916622638702393, -5.825254440307617, -6.410356521606445, -5.491774082183838, -5.448014736175537, -0.01584087871015072]",0.9842838048934937
3,"['\t@Test\n\tpublic void testIsDevOpsRotationWeekly() {\n\t\tCompany company = new Company(""Company"");\n\n\t\tcompany.setDevOpsRotationStrategy(""weekly"");\n\n\t\tassertThat(company.isDevOpsRotationWeekly(), is(true));\n\t}\n']",weekly;Strategy;otation;Weekly;otation;Company;Dev;company;otation;Ops,2.0954757928848267e-09;2.0372681319713593e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.921996116638184, -5.783631324768066, -6.388516426086426, -5.525286674499512, -5.4646453857421875, -0.01578056626021862]",0.9843432903289795
3,"['\t@Test\n\tpublic void testIsDevOpsRotationWeeklyFalse() {\n\t\tCompany company = new Company(""Company"");\n\n\t\tcompany.setDevOpsRotationStrategy("""");\n\t\tassertThat(company.isDevOpsRotationWeekly(), is(false));\n\n\t\tcompany.setDevOpsRotationStrategy(""foo"");\n\t\tassertThat(company.isDevOpsRotationWeekly(), is(false));\n\t}\n']",foo;Strategy;Dev;Weekly;otation;company;otation;company;Ops;That,4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.881171703338623, -5.741875171661377, -6.3416972160339355, -5.450234889984131, -5.4622578620910645, -0.01643524318933487]",0.9836992025375366
3,"['\t@Test\n\tpublic void testGetCompanyDevs() {\n\t\tDeveloper developerCompanyA = new Developer(""a"");\n\t\tdeveloperCompanyA.setCompany(new Company(""a""));\n\t\tDeveloper newDeveloperCompanyA = new Developer(""a"");\n\t\tnewDeveloperCompanyA.setCompany(new Company(""a""));\n\t\tnewDeveloperCompanyA.setNew(true);\n\t\tDeveloper developerCompanyB = new Developer(""b"");\n\t\tdeveloperCompanyB.setCompany(new Company(""b""));\n\n\t\tList<Developer> companyDevs = new Company(""a"").getDevs(Arrays.asList(developerCompanyA, developerCompanyB, newDeveloperCompanyA));\n\n\t\tassertThat(companyDevs, is(Arrays.asList(developerCompanyA, newDeveloperCompanyA)));\n\t}\n']",developer;developer;developer;developer;Company;new;new;new;List;Company,5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.853447914123535, -5.788576126098633, -6.35172176361084, -5.380321979522705, -5.483913421630859, -0.01657196693122387]",0.9835646152496338
3,['\t@Test(expected = RuntimeException.class)\n\tpublic void testUpdateDataBaseWithTrelloContentWithException() {\n\t\tList<DayPairs> pairsList = getPairsListFromDevs(getStandardDevs());\n\t\twhen(trelloPairsRepository.findByDate(pairsList.get(2).getDate())).thenReturn(pairsList);\n\n\t\tsubject.updateDataBaseWithTrelloContent(pairsList);\n\t}\n'],Dev;Base;rell;class;airs;airs;Dev;subject;Date;find,1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.9105377197265625, -5.831792831420898, -6.426652908325195, -5.507952690124512, -5.50447940826416, -0.015503951348364353]",0.9846157431602478
3,"['\t@Test\n\tpublic void testUpdateDataBaseWithTrelloContent() {\n\t\tList<DayPairs> pairsList = getPairsListFromDevs(getStandardDevs());\n\t\tDayPairs oldPairs = new DayPairs();\n\t\toldPairs.setDate(pairsList.get(0).getDate());\n\t\toldPairs.addPair(""oldTrack"", new Pair());\n\t\twhen(trelloPairsRepository.findByDate(pairsList.get(0).getDate())).thenReturn(Arrays.asList(oldPairs));\n\t\twhen(trelloPairsRepository.findByDate(pairsList.get(1).getDate())).thenReturn(Arrays.asList());\n\n\t\tsubject.updateDataBaseWithTrelloContent(pairsList);\n\n\t\tverify(trelloPairsRepository, atLeast(1)).save(pairsList.get(0));\n\t\tverify(trelloPairsRepository, atLeast(1)).save(pairsList.get(1));\n\t}\n']",Least;Date;By;From;List;Update;rell;pairs;update;List,7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.844086647033691, -5.712522983551025, -6.324234962463379, -5.4233317375183105, -5.4848198890686035, -0.016693899407982826]",0.9834446907043457
3,"['\t@Test\n\tpublic void testBuildPairsWeightFromPastPairing() {\n\t\tPairCombinations pairs = getPairsList();\n\t\tList<Developer> devs = getStandardDevs();\n\n\t\tMap<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);\n\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")))), is(2));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev3"")))), is(0));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev4"")))), is(1));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev2""), new Developer(""dev3"")))), is(1));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev2""), new Developer(""dev4"")))), is(0));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")))), is(2));\n\t}\n']",Past;That;From;airing;Weight;build;airs;airing;airs;airs,1.5133991837501526e-09;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;3.92901711165905e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.850908279418945, -5.736440658569336, -6.32696533203125, -5.367856025695801, -5.51624870300293, -0.016715001314878464]",0.9834240078926086
3,"['\t@Test\n\tpublic void testAdaptPairsWeightForNewDevelopers() {\n\n\t\tDeveloper developer1 = new Developer(""dev1"");\n\t\tdeveloper1.setNew(true);\n\t\tDeveloper developer2 = new Developer(""dev2"");\n\t\tdeveloper2.setNew(true);\n\t\tDeveloper developer3 = new Developer(""dev3"");\n\t\tDeveloper developer4 = new Developer(""dev4"");\n\t\tList<Developer> devs = Arrays.asList(developer1, developer2, developer3, developer4);\n\t\tPairCombinations pairs = new DevPairCombinations(getPairsListFromDevs(devs));\n\n\t\tMap<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);\n\t\tsubject.adaptPairsWeight(pairsWeight, devs);\n\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")))), is(102));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev3"")))), is(0));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev4"")))), is(1));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev2""), new Developer(""dev3"")))), is(1));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev2""), new Developer(""dev4"")))), is(0));\n\t\tassertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")))), is(2));\n\t}\n']",devs;devs;Map;adapt;Combinations;List;subject;Weight;Weight;air,1.1641532182693481e-09;6.257323548197746e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.827718257904053, -5.713548183441162, -6.299864768981934, -5.3335771560668945, -5.520854949951172, -0.017056090757250786]",0.9830885529518127
3,"['\t@Test\n\tpublic void testGenerateNewDayPairs() {\n\t\tPairCombinations pairs = getPairsList();\n\t\tList<Developer> devs = getStandardDevs();\n\t\tList<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");\n\t\tMap<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);\n\t\tsubject.buildDevelopersPairingDays(pairs, devs);\n\t\t\n\t\tDayPairs dayPairs = subject.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());\n\n\t\tassertThat(dayPairs.getTracks().size(), is(2));\n\t\tassertThat(dayPairs.getTracks(), containsInAnyOrder(""track1"", ""track2""));\n\t\tassertThat(dayPairs.getPairByTrack(""track1""),\n\t\t\t\tis(not(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))))));\n\t\tassertThat(dayPairs.getPairByTrack(""track2""),\n\t\t\t\tis(not(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4""))))));\n\t\t\n\t\tboolean trackOneHasContext = dayPairs.getPairByTrack(""track1"").getFirstDev().hasContext() || dayPairs.getPairByTrack(""track1"").getSecondDev().hasContext();\n\t\tboolean trackTwoHasContext = dayPairs.getPairByTrack(""track2"").getFirstDev().hasContext() || dayPairs.getPairByTrack(""track2"").getSecondDev().hasContext();\n\t\tassertThat(trackOneHasContext, is(true));\n\t\tassertThat(trackTwoHasContext, is(true));\n\t}\n']",Tracks;Days;pairs;devs;airing;Arrays;Tracks;devs;Combinations;get,7.275957614183426e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.855430603027344, -5.692717552185059, -6.353761196136475, -5.390429973602295, -5.572193145751953, -0.016471946612000465]",0.9836629629135132
3,"['\t@Test\n\tpublic void testGenerateNewDayPairsWithEverydayRotation() {\n\t\tPairCombinations pairs = getPairsList();\n\t\tList<Developer> devs = getStandardDevs();\n\t\tList<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");\n\t\tMap<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);\n\t\tsubject.buildDevelopersPairingDays(pairs, devs);\n\t\t\n\t\tDayPairsHelper subjectWithEverydayRotation = new DayPairsHelper(trelloPairsRepository, true);\n\t\tDayPairs dayPairs = subjectWithEverydayRotation.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());\n\n\t\tassertThat(dayPairs.getTracks().size(), is(2));\n\t\tassertThat(dayPairs.getTracks(), containsInAnyOrder(""track1"", ""track2""));\n\t\tassertThat(dayPairs.getPairByTrack(""track1""),\n\t\t\t\tis(not(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))))));\n\t\tassertThat(dayPairs.getPairByTrack(""track2""),\n\t\t\t\tis(not(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4""))))));\n\t\t\n\t\tboolean trackOneHasDev2 = dayPairs.getPairByTrack(""track1"").getFirstDev().equals(new Developer(""dev2"")) || dayPairs.getPairByTrack(""track1"").getSecondDev().equals(new Developer(""dev2""));\n\t\tboolean trackTwoHasDev4 = dayPairs.getPairByTrack(""track2"").getFirstDev().equals(new Developer(""dev4"")) || dayPairs.getPairByTrack(""track2"").getSecondDev().equals(new Developer(""dev4""));\n\t\tassertThat(trackOneHasDev2, is(true));\n\t\tassertThat(trackTwoHasDev4, is(true));\n\t}\n']",devs;Order;otation;Days;generate;Generate;Dev;Track;get;Track,5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.864344596862793, -5.680332660675049, -6.3732194900512695, -5.420405864715576, -5.600315570831299, -0.016210652887821198]",0.9839200377464294
3,"['\t@Test\n\tpublic void testGenerateNewDayPairsWithSmallestWeight() {\n\t\tPairCombinations pairs = getLongPairsList();\n\t\tList<Developer> devs = Arrays.asList(new Developer(""dev1""), new Developer(""dev2""), new Developer(""dev3""),\n\t\t\t\tnew Developer(""dev4""), new Developer(""dev5""), new Developer(""dev6""));\n\t\tList<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");\n\t\tMap<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);\n\t\tsubject.buildDevelopersPairingDays(pairs, devs);\n\t\t\n\t\tDayPairs dayPairs = subject.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());\n\n\t\tassertThat(dayPairs.getTracks().size(), is(3));\n\t\tassertThat(dayPairs.getTracks(), containsInAnyOrder(""track1"", ""track2"", ""track3""));\n\t\tSystem.out.println(dayPairs.getPairs());\n\t\tassertThat(dayPairs.hasPair(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev6"")))), is(true));\n\t\tassertThat(dayPairs.hasPair(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev2"")))), is(true));\n\t\tassertThat(dayPairs.hasPair(new Pair(Arrays.asList(new Developer(""dev5""), new Developer(""dev4"")))), is(true));\n\t}\n']",Smallest;Past;track;Long;Developer;track;From;airing;Weight;Developer,1.1496013030409813e-09;6.257323548197746e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.850515365600586, -5.713385105133057, -6.328250885009766, -5.3995256423950195, -5.517388343811035, -0.016637740656733513]",0.9834998846054077
3,"['\t@Test\n\tpublic void testGenerateNewDayPairsSoloRequired() {\n\t\tPairCombinations pairs = getPairsList();\n\t\tList<Developer> devs = Arrays.asList(new Developer(""dev1""), new Developer(""dev2""), new Developer(""dev3""));\n\t\tList<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");\n\t\tMap<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);\n\n\t\tDayPairs dayPairs = subject.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());\n\n\t\tassertThat(dayPairs.getTracks().size(), is(2));\n\t\tassertThat(dayPairs.getTracks(), containsInAnyOrder(""track1"", ""track2""));\n\t\tassertThat(dayPairs.getPairByTrack(""track1""),\n\t\t\t\tis((new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))))));\n\t}\n']",olo;Required;Generate;tracks;Developer;pairs;Past;Day;air;Developer,9.313225746154785e-10;6.984919309616089e-10;6.257323548197746e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.87351655960083, -5.7587103843688965, -6.36175537109375, -5.425415992736816, -5.492337226867676, -0.016348931938409805]",0.9837840795516968
3,"['    @Test\n    public void testFromWithNoOutputs() throws Exception {\n        MockEndpoint mock = getMockEndpoint(""mock:result"");\n        mock.expectedMinimumMessageCount(2);\n\n        assertMockEndpointsSatisfied();\n\n        assertTrue(counter >= 2, ""Counter should be 2 or higher"");\n    }\n']",Mock;mock;mock;result;get;expected;Count;Endpoints;ock;Exception,7.450580596923828e-09;2.9103830456733704e-09;2.6775524020195007e-09;2.561137080192566e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.94292688369751, -5.865970611572266, -6.440796375274658, -5.519107341766357, -5.498157501220703, -0.015273517929017544]",0.9848425388336182
3,"['    @Test\n    public void testAsyncStress() throws Exception {\n        // do not test on windows\n        assumeFalse(isPlatform(""windows""));\n\n        // test by starting the unit test FileAsyncStressFileDropper in another\n        // JVM\n\n        MockEndpoint mock = getMockEndpoint(""mock:result"");\n        mock.expectedMinimumMessageCount(250);\n\n        assertMockEndpointsSatisfied();\n    }\n']",on;the;Dropper;another;Endpoint;Stress;expected;Endpoints;mock;windows,2.561137080192566e-09;1.979060471057892e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6880221664905548e-09;1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.911931037902832, -5.802712440490723, -6.369438648223877, -5.45913553237915, -5.517919540405273, -0.015835482627153397]",0.9842891097068787
3,"['    @Test\n    public void testDropInNewFiles() throws Exception {\n        // do not test on windows\n        assumeFalse(isPlatform(""windows""));\n\n        MockEndpoint mock = getMockEndpoint(""mock:result"");\n        mock.expectedMinimumMessageCount(250);\n\n        assertMockEndpointsSatisfied();\n    }\n']",ock;Endpoint;Files;Minimum;on;Platform;expected;mock;New;get,2.3283064365386963e-09;1.57160684466362e-09;1.3969838619232178e-09;1.1059455573558807e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.955471515655518, -5.849192142486572, -6.429655075073242, -5.5077338218688965, -5.5174455642700195, -0.015274339355528355]",0.9848417043685913
3,"['    @BeforeEach\n    public void clean() {\n        template.sendBodyAndHeader(ironQueue1, ""fo"", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE);\n        template.sendBodyAndHeader(ironQueue2, ""fo"", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE);\n    }\n']",MQConstants;template;iron;Each;MQConstants;iron;UEUE;UEUE;Header;fo,5.296897143125534e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09,5,5,"[-5.9798431396484375, -5.986910343170166, -6.537426948547363, -5.587868690490723, -5.484250068664551, -0.014488021843135357]",0.9856165647506714
3,"['    @Test\n    public void testSendMessagesBetweenQueues() throws Exception {\n        getMockEndpoint(""mock:result"").expectedMessageCount(100);\n        for (int i = 1; i <= 100; i++) {\n            String payloadToSend = PAYLOAD.replace(""#"", """" + i);\n            template.sendBody(""direct:start"", payloadToSend);\n        }\n        assertMockEndpointsSatisfied(2, TimeUnit.MINUTES);\n    }\n']",Between;Exception;Endpoint;Time;result;Message;Send;direct;Send;Send,1.280568540096283e-09;8.731149137020111e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;2.9103830456733704e-11;1.4551915228366852e-11,5,5,"[-5.866111755371094, -5.7713470458984375, -6.3813323974609375, -5.466265678405762, -5.504423141479492, -0.016066374257206917]",0.9840620160102844
3,"['    @BeforeEach\n    public void clean() {\n        template.sendBodyAndHeader(ironMQEndpoint, ""fo"", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE);\n        deleteDirectory(""target/out"");\n    }\n']",iron;Header;clean;Before;OPERATION;Body;target;CLEAR;fo;UEUE,2.0954757928848267e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;2.3283064365386963e-10;1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-6.008690357208252, -6.018813133239746, -6.546220302581787, -5.636091232299805, -5.395482540130615, -0.014534314163029194]",0.9855707883834839
3,"['    @Test\n    public void testCopyFileOverIronMQ() throws Exception {\n        getMockEndpoint(""mock:result"").expectedMessageCount(1);\n        assertMockEndpointsSatisfied();\n        assertFileExists(""target/out/test.txt"");\n    }\n']",Endpoints;txt;Message;atisfied;Copy;result;Exists;File;Exception;get,1.8189894035458565e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1932570487260818e-09;1.0477378964424133e-09;9.313225746154785e-10;0.0;0.0;-2.9103830456733704e-11;-5.820766091346741e-11,5,5,"[-5.9556660652160645, -5.881028652191162, -6.4526238441467285, -5.536862850189209, -5.527536869049072, -0.014985722489655018]",0.9851260185241699
3,"['    @Test\n    public void testConfiguration() throws Exception {\n        FhirEndpoint endpoint = getMandatoryEndpoint(TEST_URI, FhirEndpoint.class);\n        GenericClient client = (GenericClient) endpoint.getClient();\n        FhirConfiguration configuration = endpoint.getConfiguration();\n        assertEquals(this.componentConfiguration, configuration);\n        assertEquals(""http://localhost:8080/hapi-fhir-jpaserver-example/baseDstu3"", client.getUrlBase());\n        assertEquals(EncodingEnum.JSON, client.getEncoding());\n        assertEquals(SummaryEnum.TEXT, client.getSummary());\n        List<Object> interceptors = client.getInterceptorService().getAllRegisteredInterceptors();\n        assertEquals(5, interceptors.size());\n\n        long counter = context.adapt(ExtendedCamelContext.class).getBeanIntrospection().getInvokedCounter();\n        assertEquals(0, counter, ""Should not use reflection"");\n    }\n']",EST;get;class;Invoked;TEXT;counter;Exception;Summary;Interceptors;configuration,5.238689482212067e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.255546860396862e-10;2.1827872842550278e-10;2.1827872842550278e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.9281287677586079e-10;1.7462298274040222e-10,5,5,"[-5.846138000488281, -5.737606048583984, -6.310812950134277, -5.3507843017578125, -5.4824090003967285, -0.0169770997017622]",0.9831662178039551
3,"['    @Test\n    public void testOnInstance() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n        // parameter type is String\n        headers.put(""CamelFhir.name"", ""everything"");\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseParameters\n        headers.put(""CamelFhir.parameters"", null);\n        // parameter type is Class\n        headers.put(""CamelFhir.outputParameterType"", Parameters.class);\n        headers.put(""CamelFhir.useHttpGet"", Boolean.FALSE);\n        // parameter type is Class\n        headers.put(""CamelFhir.returnType"", null);\n        // parameter type is java.util.Map\n        headers.put(""CamelFhir.extraParameters"", null);\n\n        final Parameters result = requestBodyAndHeaders(""direct://ON_INSTANCE"", null, headers);\n\n        LOG.debug(""onInstance: "" + result);\n        assertNotNull(result, ""onInstance result"");\n        Bundle bundle = (Bundle) result.getParameter().get(0).getResource();\n        assertNotNull(bundle, ""onInstance result"");\n        IdType id = bundle.getEntry().get(0).getResource().getIdElement().toUnqualifiedVersionless();\n        assertEquals(patient.getIdElement().toUnqualifiedVersionless(), id);\n    }\n']",IBase;Bundle;bundle;Instance;extra;headers;Exception;patient;Element;Parameters,5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.8155107498168945, -5.674102306365967, -6.258971214294434, -5.28006649017334, -5.489722728729248, -0.017704898491501808]",0.9824510216712952
3,"['    @Test\n    public void testOnInstanceVersion() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n        // parameter type is String\n        headers.put(""CamelFhir.name"", ""everything"");\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseParameters\n        headers.put(""CamelFhir.parameters"", null);\n        // parameter type is Class\n        headers.put(""CamelFhir.outputParameterType"", Parameters.class);\n        headers.put(""CamelFhir.useHttpGet"", Boolean.FALSE);\n        // parameter type is Class\n        headers.put(""CamelFhir.returnType"", null);\n        // parameter type is java.util.Map\n        headers.put(""CamelFhir.extraParameters"", null);\n\n        final Parameters result = requestBodyAndHeaders(""direct://ON_INSTANCE_VERSION"", null, headers);\n\n        LOG.debug(""onInstance: "" + result);\n        assertNotNull(result, ""onInstance result"");\n        Bundle bundle = (Bundle) result.getParameter().get(0).getResource();\n        assertNotNull(bundle, ""onInstance result"");\n        IdType id = bundle.getEntry().get(0).getResource().getIdElement().toUnqualifiedVersionless();\n        assertEquals(patient.getIdElement().toUnqualifiedVersionless(), id);\n    }\n']",result;result;patient;undle;patient;Map;headers;bundle;Parameters;final,5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.818313121795654, -5.677085876464844, -6.264975070953369, -5.2920308113098145, -5.497168064117432, -0.017581447958946228]",0.9825721979141235
3,"['    @Test\n    public void testOnServer() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.name"", ""$get-resource-counts"");\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseParameters\n        headers.put(""CamelFhir.parameters"", null);\n        // parameter type is Class\n        headers.put(""CamelFhir.outputParameterType"", Parameters.class);\n        headers.put(""CamelFhir.useHttpGet"", Boolean.TRUE);\n        // parameter type is Class\n        headers.put(""CamelFhir.returnType"", null);\n        // parameter type is java.util.Map\n        headers.put(""CamelFhir.extraParameters"", null);\n\n        final Parameters result = requestBodyAndHeaders(""direct://ON_SERVER"", null, headers);\n        assertNotNull(result, ""onServer result"");\n    }\n']",ON;Body;Parameter;on;Server;parameter;Parameters;SERVER;Http;parameter,6.693881005048752e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8319501876831055, -5.712568759918213, -6.27484655380249, -5.308178901672363, -5.486547946929932, -0.017362505197525024]",0.9827873706817627
3,"['    @Test\n    public void testOnType() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resourceType"", Patient.class);\n        // parameter type is String\n        headers.put(""CamelFhir.name"", ""everything"");\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseParameters\n        headers.put(""CamelFhir.parameters"", null);\n        // parameter type is Class\n        headers.put(""CamelFhir.outputParameterType"", Parameters.class);\n        headers.put(""CamelFhir.useHttpGet"", Boolean.FALSE);\n        // parameter type is Class\n        headers.put(""CamelFhir.returnType"", null);\n        // parameter type is java.util.Map\n        headers.put(""CamelFhir.extraParameters"", null);\n\n        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders(""direct://ON_TYPE"", null, headers);\n\n        assertNotNull(result, ""onType result"");\n        LOG.debug(""onType: "" + result);\n    }\n']",On;output;Type;Object;TYPE;return;hl;parameter;on;type,5.820766091346741e-10;5.238689482212067e-10;3.92901711165905e-10;3.055902197957039e-10;2.837623469531536e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.822175025939941, -5.711766242980957, -6.262242794036865, -5.27949333190918, -5.473442077636719, -0.017621155828237534]",0.9825332760810852
3,"['    @Test\n    public void testProcessMessage() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.respondToUri"", null);\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseBundle\n        headers.put(""CamelFhir.msgBundle"", null);\n        headers.put(""CamelFhir.asynchronous"", Boolean.FALSE);\n        // parameter type is Class\n        headers.put(""CamelFhir.responseClass"", null);\n        // parameter type is java.util.Map\n        headers.put(""CamelFhir.extraParameters"", null);\n\n        final org.hl7.fhir.instance.model.api.IBaseBundle result\n                = requestBodyAndHeaders(""direct://PROCESS_MESSAGE"", null, headers);\n\n        assertNotNull(result, ""processMessage result"");\n        LOG.debug(""processMessage: "" + result);\n    }\n']",headers;Message;Headers;Exception;Message;headers;Null;headers;Body;IBase,3.7834979593753815e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.831331729888916, -5.700767517089844, -6.2724456787109375, -5.307010173797607, -5.481481075286865, -0.0174361951649189]",0.9827149510383606
3,"['    @Test\n    public void testWithBundle() throws Exception {\n        // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter ""bundle""\n        Bundle result = requestBody(""direct://WITH_BUNDLE"", createTransactionBundle());\n\n        assertNotNull(result, ""withBundle result"");\n        assertTrue(result.getEntry().get(0).getResponse().getStatus().contains(""Created""));\n        LOG.debug(""withBundle: "" + result);\n    }\n']",org;api;UN;Response;single;Status;IBase;undle;Exception;result,6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.886198997497559, -5.788320064544678, -6.376514911651611, -5.412437438964844, -5.4834303855896, -0.016289353370666504]",0.9838424921035767
3,"['    @Test\n    public void testWithStringBundle() throws Exception {\n        Bundle transactionBundle = createTransactionBundle();\n        String stringBundle = fhirContext.newJsonParser().encodeResourceToString(transactionBundle);\n\n        // using String message body for single parameter ""sBundle""\n        final String result = requestBody(""direct://WITH_STRING_BUNDLE"", stringBundle);\n\n        assertNotNull(result, ""withBundle result"");\n        assertTrue(result.contains(""Bundle""));\n        LOG.debug(""withBundle: "" + result);\n    }\n']",Body;undle;undle;using;UN;transaction;encode;transaction;parameter;Resource,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.88647985458374, -5.7935872077941895, -6.382808685302734, -5.401073932647705, -5.502368450164795, -0.016234111040830612]",0.9838970899581909
3,"['    @Test\n    public void testWithResources() throws Exception {\n        Patient oscar = new Patient().addName(new HumanName().addGiven(""Oscar"").setFamily(""Peterson""));\n        Patient bobbyHebb = new Patient().addName(new HumanName().addGiven(""Bobby"").setFamily(""Hebb""));\n        List<IBaseResource> patients = new ArrayList<>(2);\n        patients.add(oscar);\n        patients.add(bobbyHebb);\n\n        // using java.util.List message body for single parameter ""resources""\n        List<IBaseResource> result = requestBody(""direct://WITH_RESOURCES"", patients);\n\n        assertNotNull(result, ""withResources result"");\n        LOG.debug(""withResources: "" + result);\n        assertEquals(2, result.size());\n    }\n']",Peterson;obby;Human;patients;Name;request;Hebb;LOG;Human;add,4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.84625768661499, -5.719238758087158, -6.306196689605713, -5.350596904754639, -5.481536388397217, -0.01705070026218891]",0.9830938577651978
3,"['    @Test\n    public void testWithResourcesSummaryEnum() throws Exception {\n        Patient oscar = new Patient().addName(new HumanName().addGiven(""Oscar"").setFamily(""Peterson""));\n        Patient bobbyHebb = new Patient().addName(new HumanName().addGiven(""Bobby"").setFamily(""Hebb""));\n        List<IBaseResource> patients = new ArrayList<>(2);\n        patients.add(oscar);\n        patients.add(bobbyHebb);\n        final Map<String, Object> headers = new HashMap<>();\n        headers.put(ExtraParameters.SUMMARY_ENUM.getHeaderName(), SummaryEnum.DATA);\n\n        // using java.util.List message body for single parameter ""resources""\n        List<IBaseResource> result = requestBodyAndHeaders(""direct://WITH_RESOURCES"", patients, headers);\n\n        assertNotNull(result, ""withResources result"");\n        LOG.debug(""withResources: "" + result);\n        assertEquals(2, result.size());\n    }\n']",Given;add;body;Given;result;Summary;Hebb;single;Patient;using,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.5288394428789616e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.8419904708862305, -5.725392818450928, -6.2991862297058105, -5.33525276184082, -5.4859843254089355, -0.017111757770180702]",0.9830339550971985
3,"['    @Test\n    public void testOfType() throws Exception {\n        org.hl7.fhir.instance.model.api.IBaseConformance result = requestBody(""direct://OF_TYPE"", CapabilityStatement.class);\n\n        LOG.debug(""ofType: "" + result);\n        assertNotNull(result, ""ofType result"");\n        assertEquals(Enumerations.PublicationStatus.ACTIVE, ((CapabilityStatement) result).getStatus());\n    }\n']",Enumerations;request;Body;direct;Status;Statement;org;Type;OF;of,2.0954757928848267e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.873252868652344, -5.782659530639648, -6.344249725341797, -5.4147257804870605, -5.448001384735107, -0.01654253527522087]",0.9835935235023499
3,"['    @Test\n    public void testEncodeJSON() throws Exception {\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(ExtraParameters.ENCODE_JSON.getHeaderName(), Boolean.TRUE);\n\n        org.hl7.fhir.instance.model.api.IBaseConformance result\n                = requestBodyAndHeaders(""direct://OF_TYPE"", CapabilityStatement.class, headers);\n\n        LOG.debug(""ofType: "" + result);\n        assertNotNull(result, ""ofType result"");\n        assertEquals(Enumerations.PublicationStatus.ACTIVE, ((CapabilityStatement) result).getStatus());\n    }\n']",ENCODE;TRUE;get;ACTIVE;Status;Encode;model;class;of;Map,6.111804395914078e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.852487564086914, -5.747669219970703, -6.302515983581543, -5.342859268188477, -5.4690704345703125, -0.017036285251379013]",0.9831079840660095
3,"['    @Test\n    public void testDeleteResource() throws Exception {\n        assertTrue(patientExists());\n        // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter ""resource""\n        IBaseOperationOutcome result = requestBody(""direct://RESOURCE"", this.patient);\n\n        LOG.debug(""resource: "" + result);\n        assertNotNull(result, ""resource result"");\n        assertFalse(patientExists());\n    }\n']",using;IBase;org;api;Exists;Resource;patient;body;Exists;resource,2.7939677238464355e-09;1.1641532182693481e-09;8.149072527885437e-10;5.020410753786564e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.893247127532959, -5.788248538970947, -6.364698886871338, -5.41486120223999, -5.489743709564209, -0.016252877190709114]",0.983878493309021
3,"['    @Test\n    public void testDeleteResourceById() throws Exception {\n        assertTrue(patientExists());\n\n        // using org.hl7.fhir.instance.model.api.IIdType message body for single parameter ""id""\n        IBaseOperationOutcome result = requestBody(""direct://RESOURCE_BY_ID"", this.patient.getIdElement());\n\n        LOG.debug(""resourceById: "" + result);\n        assertNotNull(result, ""resourceById result"");\n        assertFalse(patientExists());\n    }\n']",Outcome;Operation;request;single;patient;Base;Exists;resource;BY;id,1.4842953532934189e-09;9.89530235528946e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.892419338226318, -5.79667329788208, -6.371882915496826, -5.415210723876953, -5.493681907653809, -0.016198454424738884]",0.9839320182800293
3,"['    @Test\n    public void testDeleteResourceByStringId() throws Exception {\n        assertTrue(patientExists());\n\n        Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.type"", ""Patient"");\n        // parameter type is String\n        headers.put(""CamelFhir.stringId"", this.patient.getIdElement().getIdPart());\n\n        IBaseOperationOutcome result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_ID"", null, headers);\n\n        LOG.debug(""resourceById: "" + result);\n        assertNotNull(result, ""resourceById result"");\n        assertFalse(patientExists());\n    }\n']",Delete;Resource;ir;Exception;string;null;headers;LOG;result;By,9.313225746154785e-10;6.984919309616089e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.854535102844238, -5.743629455566406, -6.317841529846191, -5.36096715927124, -5.483448505401611, -0.016866572201251984]",0.9832748770713806
3,"['    @Test\n    public void testDeleteResourceConditionalByUrl() throws Exception {\n        assertTrue(patientExists());\n\n        IBaseOperationOutcome result\n                = requestBody(""direct://RESOURCE_CONDITIONAL_BY_URL"", ""Patient?given=Vincent&family=Freeman"");\n\n        LOG.debug(""resourceConditionalByUrl: "" + result);\n        assertNotNull(result, ""resourceConditionalByUrl result"");\n        assertFalse(patientExists());\n    }\n']",incent;Outcome;Conditional;result;Base;request;Resource;BY;Operation;Exists,9.313225746154785e-10;6.693881005048752e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10,5,5,"[-5.8910040855407715, -5.768268585205078, -6.365885257720947, -5.414658069610596, -5.4925384521484375, -0.01630905643105507]",0.9838232398033142
3,"['    @Test\n    public void testDeleteResourceConditionalByUrlCacheControlDirective() throws Exception {\n        assertTrue(patientExists());\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(ExtraParameters.CACHE_CONTROL_DIRECTIVE.getHeaderName(), new CacheControlDirective().setNoCache(true));\n\n        IBaseOperationOutcome result = requestBodyAndHeaders(""direct://RESOURCE_CONDITIONAL_BY_URL"",\n                ""Patient?given=Vincent&family=Freeman"", headers);\n\n        LOG.debug(""resourceConditionalByUrl: "" + result);\n        assertNotNull(result, ""resourceConditionalByUrl result"");\n        assertFalse(patientExists());\n    }\n']",incent;Url;resource;Conditional;set;BY;result;Cache;Directive;patient,8.149072527885437e-10;5.238689482212067e-10;4.220055416226387e-10;3.2014213502407074e-10;2.764863893389702e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.869450569152832, -5.753694534301758, -6.352889060974121, -5.405064582824707, -5.505812644958496, -0.016428207978606224]",0.983705997467041
3,"['    @Test\n    public void testResource() throws Exception {\n        Patient bobbyHebb = new Patient().addName(new HumanName().addGiven(""Bobby"").setFamily(""Hebb""));\n        // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter ""resource""\n        MethodOutcome result = requestBody(""direct://RESOURCE"", bobbyHebb);\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertNotNull(result.getOperationOutcome());\n        assertTrue(((OperationOutcome) result.getOperationOutcome()).getText().getDivAsString()\n                .contains(""No issues detected during validation""));\n    }\n']",Patient;Human;Name;single;Family;obby;body;Div;Hebb;obby,2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.2514647096395493e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.8500285148620605, -5.732024669647217, -6.312669277191162, -5.379785060882568, -5.474151611328125, -0.016877824440598488]",0.9832639098167419
3,"['    @Test\n    public void testResourceAsString() throws Exception {\n        Patient bobbyHebb = new Patient().addName(new HumanName().addGiven(""Bobby"").setFamily(""Hebb""));\n        // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter ""resource""\n        MethodOutcome result\n                = requestBody(""direct://RESOURCE_AS_STRING"", this.fhirContext.newXmlParser().encodeResourceToString(bobbyHebb));\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertNotNull(result.getOperationOutcome());\n        assertTrue(((OperationOutcome) result.getOperationOutcome()).getText().getDivAsString()\n                .contains(""No issues detected during validation""));\n    }\n']",Human;Div;Family;Patient;Patient;request;obby;body;Parser;instance,9.022187441587448e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.853288173675537, -5.761858940124512, -6.327634811401367, -5.3624701499938965, -5.492063045501709, -0.016750052571296692]",0.9833894371986389
3,"['    @Test\n    public void testPatchById() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.patchBody"", PATCH);\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", null);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://PATCH_BY_ID"", null, headers);\n        assertNotNull(result, ""patchById result"");\n        assertActive(result);\n    }\n']",headers;ById;Prefer;ATCH;patient;Map;Method;rest;final;Patch,1.6298145055770874e-09;1.1059455573558807e-09;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.83295202255249, -5.7075066566467285, -6.2823805809021, -5.325535297393799, -5.464916706085205, -0.017367660999298096]",0.9827823042869568
3,"['    @Test\n    public void testPatchByStringId() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.patchBody"", PATCH);\n        // parameter type is String\n        headers.put(""CamelFhir.stringId"", this.patient.getId());\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", null);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://PATCH_BY_SID"", null, headers);\n        assertActive(result);\n    }\n']",ID;request;Prefer;result;ATCH;amel;Enum;direct;rest;headers,3.026798367500305e-09;1.1641532182693481e-09;5.820766091346741e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.0372681319713593e-10,5,5,"[-5.84577751159668, -5.72503137588501, -6.306236267089844, -5.3568525314331055, -5.474003791809082, -0.01703452877700329]",0.9831096529960632
3,"['    @Test\n    public void testPatchByStringIdPreferResponseTypes() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.patchBody"", PATCH);\n        // parameter type is String\n        headers.put(""CamelFhir.stringId"", this.patient.getId());\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", null);\n\n        List<Class<? extends IBaseResource>> preferredResponseTypes = new ArrayList<>();\n        preferredResponseTypes.add(Patient.class);\n        headers.put(ExtraParameters.PREFER_RESPONSE_TYPES.getHeaderName(), preferredResponseTypes);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://PATCH_BY_SID"", null, headers);\n        assertActive(result);\n    }\n']",ID;By;ATCH;TY;PREFER;Patch;headers;Response;Types;Return,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.835681915283203, -5.735837459564209, -6.297149658203125, -5.323072910308838, -5.474168300628662, -0.017209837213158607]",0.9829373955726624
3,"['    @Test\n    public void testPatchByUrl() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.patchBody"", PATCH);\n        // parameter type is String\n        headers.put(""CamelFhir.url"", ""Patient?given=Vincent&family=Freeman"");\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", null);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://PATCH_BY_URL"", null, headers);\n\n        assertNotNull(result, ""patchByUrl result"");\n        LOG.debug(""patchByUrl: "" + result);\n        assertActive(result);\n    }\n']",url;Return;By;Patch;Url;Freeman;Patient;Url;ATCH;prefer,8.731149137020111e-10;6.83940015733242e-10;6.402842700481415e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.833057880401611, -5.710943222045898, -6.289561748504639, -5.332592964172363, -5.476232051849365, -0.017258932814002037]",0.9828891754150391
3,"['    @Test\n    public void testConfigurationWithCustomClient() throws Exception {\n        FhirEndpoint endpoint = getMandatoryEndpoint(TEST_URI_CUSTOM_CLIENT, FhirEndpoint.class);\n        IGenericClient client = endpoint.getClient();\n        assertTrue(client instanceof CustomClient);\n    }\n']",Endpoint;URI;Configuration;ir;endpoint;Endpoint;endpoint;class;EST;CLIENT,4.190951585769653e-09;3.841705620288849e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.5133991837501526e-09,5,5,"[-5.982503414154053, -5.950998783111572, -6.4695258140563965, -5.5593414306640625, -5.368945121765137, -0.015302515588700771]",0.9848139882087708
3,"['    @Test\n    public void testConfigurationWithCustomFactory() throws Exception {\n        FhirEndpoint endpoint = getMandatoryEndpoint(TEST_URI_CUSTOM_CLIENT_FACTORY, FhirEndpoint.class);\n        IGenericClient client = endpoint.getClient();\n        assertTrue(client instanceof CustomClient);\n    }\n']",Mandatory;Generic;ir;Endpoint;URI;ACTORY;endpoint;get;get;client,3.14321368932724e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.3865140974521637e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.981433391571045, -5.9455366134643555, -6.473898410797119, -5.566411972045898, -5.379706859588623, -0.015234656631946564]",0.984880805015564
3,"['    @Test\n    public void testCreateResource() throws Exception {\n        Patient patient = new Patient().addName(new HumanName().addGiven(""Vincent"").setFamily(""Freeman""));\n\n        MethodOutcome result = requestBody(""direct://RESOURCE"", patient);\n\n        LOG.debug(""resource: "" + result);\n        assertNotNull(result, ""resource result"");\n        assertTrue(result.getCreated());\n    }\n']",Human;RESOURCE;set;Body;Outcome;Created;patient;incent;add;Null,6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.863081932067871, -5.747758388519287, -6.335308074951172, -5.421459674835205, -5.458416938781738, -0.01662343740463257]",0.9835139513015747
3,"['    @Test\n    public void testCreateStringResource() throws Exception {\n        Patient patient = new Patient().addName(new HumanName().addGiven(""Vincent"").setFamily(""Freeman""));\n        String patientString = this.fhirContext.newXmlParser().encodeResourceToString(patient);\n\n        MethodOutcome result = requestBody(""direct://RESOURCE_STRING"", patientString);\n\n        LOG.debug(""resource: "" + result);\n        assertNotNull(result, ""resource result"");\n        assertTrue(result.getCreated());\n    }\n']",Human;Outcome;Name;Name;Resource;Given;Patient;result;Family;patient,1.3387762010097504e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;4.5838532969355583e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.871050834655762, -5.760470390319824, -6.356039047241211, -5.41268253326416, -5.481997489929199, -0.01646115817129612]",0.9836735725402832
3,"['    @Test\n    public void testCreateStringResourceEncodeXml() throws Exception {\n        Patient patient = new Patient().addName(new HumanName().addGiven(""Vincent"").setFamily(""Freeman""));\n        String patientString = this.fhirContext.newXmlParser().encodeResourceToString(patient);\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(ExtraParameters.ENCODE_XML.getHeaderName(), Boolean.TRUE);\n        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_STRING"", patientString, headers);\n\n        LOG.debug(""resource: "" + result);\n        assertNotNull(result, ""resource result"");\n        assertTrue(result.getCreated());\n    }\n']",Name;headers;Encode;Given;Context;Method;result;Patient;ENCODE;Map,2.561137080192566e-09;9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.856971740722656, -5.743786811828613, -6.33473014831543, -5.374663352966309, -5.489649772644043, -0.016737157478928566]",0.9834021329879761
3,"['    @Test\n    public void testOnInstance() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n        // parameter type is Class\n        headers.put(""CamelFhir.returnType"", Bundle.class);\n        // parameter type is Integer\n        headers.put(""CamelFhir.count"", 1);\n\n        Bundle result = requestBodyAndHeaders(""direct://ON_INSTANCE"", null, headers);\n\n        LOG.debug(""onInstance: "" + result);\n        assertNotNull(result, ""onInstance result"");\n        assertEquals(1, result.getEntry().size());\n    }\n']",Equals;result;result;Instance;LOG;On;Entry;final;Not;count,1.280568540096283e-08;1.1175870895385742e-08;7.450580596923828e-09;7.450580596923828e-09;6.984919309616089e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.3760443329811096e-09,5,5,"[-5.842597484588623, -5.728664875030518, -6.290853500366211, -5.3384528160095215, -5.46514368057251, -0.017187807708978653]",0.9829590320587158
3,"['    @Test\n    public void testOnServer() throws Exception {\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(""CamelFhir.returnType"", Bundle.class);\n        headers.put(""CamelFhir.count"", 1);\n        Bundle result = requestBodyAndHeaders(""direct://ON_SERVER"", null, headers);\n\n        LOG.debug(""onServer: "" + result);\n        assertNotNull(result, ""onServer result"");\n        assertEquals(1, result.getEntry().size());\n    }\n']",SERVER;Server;Bundle;direct;count;ir;put;result;on;Null,1.076841726899147e-09;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.6007106751203537e-10,5,5,"[-5.845512866973877, -5.739028453826904, -6.297407627105713, -5.355495929718018, -5.452552795410156, -0.017104608938097954]",0.9830407500267029
3,"['    @Test\n    public void testOnType() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resourceType"", Patient.class);\n        // parameter type is Class\n        headers.put(""CamelFhir.returnType"", Bundle.class);\n        // parameter type is Integer\n        headers.put(""CamelFhir.count"", 1);\n\n        Bundle result = requestBodyAndHeaders(""direct://ON_TYPE"", null, headers);\n\n        LOG.debug(""onType: "" + result);\n        assertNotNull(result, ""onType result"");\n        assertEquals(1, result.getEntry().size());\n    }\n']",Body;direct;request;Type;Patient;ON;type;result;final;new,1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;5.311449058353901e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.843611240386963, -5.7372145652771, -6.281528472900391, -5.316962718963623, -5.45011568069458, -0.017345750704407692]",0.9828039407730103
3,"['    @Test\n    public void testOnTypeWithSubsetElements() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resourceType"", Patient.class);\n        // parameter type is Class\n        headers.put(""CamelFhir.returnType"", Bundle.class);\n        // parameter type is Integer\n        headers.put(""CamelFhir.count"", 1);\n        // only include the identifier and name\n        headers.put(ExtraParameters.SUBSET_ELEMENTS.getHeaderName(), new String[] { ""identifier"", ""name"" });\n\n        Bundle result = requestBodyAndHeaders(""direct://ON_TYPE"", null, headers);\n\n        LOG.debug(""onType: "" + result);\n        assertNotNull(result, ""onType result"");\n        assertEquals(1, result.getEntry().size());\n    }\n']",Header;identifier;Type;Body;ON;on;result;Extra;the;Map,8.149072527885437e-10;4.3655745685100555e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.851611137390137, -5.744832992553711, -6.309797286987305, -5.332906246185303, -5.48409366607666, -0.01701929233968258]",0.9831247329711914
3,"['    @Test\n    public void testResource() throws Exception {\n        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");\n        assertNotEquals(date, patient.getBirthDate());\n        this.patient.setBirthDate(date);\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource\n        headers.put(""CamelFhir.resource"", this.patient);\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE"", null, headers);\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");\n    }\n']",updated;Exception;Birth;request;set;date;Birth;Resource;Birth;this,1.1641532182693481e-09;6.984919309616089e-10;4.511093720793724e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6921043172478676e-10;2.6193447411060333e-10,5,5,"[-5.816938877105713, -5.655998706817627, -6.2558817863464355, -5.328752040863037, -5.488626956939697, -0.01752861961722374]",0.9826239943504333
3,"['    @Test\n    public void testResourceNoId() throws Exception {\n        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");\n        assertNotEquals(date, patient.getBirthDate());\n        this.patient.setBirthDate(date);\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource\n        headers.put(""CamelFhir.resource"", this.patient);\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE"", null, headers);\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");\n    }\n']",Prefer;Patient;Return;api;direct;Outcome;request;ir;Date;Resource,6.402842700481415e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.827920436859131, -5.672444820404053, -6.271711826324463, -5.355514049530029, -5.493401527404785, -0.017256472259759903]",0.9828914403915405
3,"['    @Test\n    public void testResourceStringId() throws Exception {\n        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");\n        assertNotEquals(date, patient.getBirthDate());\n        this.patient.setBirthDate(date);\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource\n        headers.put(""CamelFhir.resource"", this.patient);\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.stringId"", this.patient.getIdElement().getIdPart());\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_WITH_STRING_ID"", null, headers);\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");\n    }\n']",ITH;headers;string;RESOURCE;resource;patient;Date;resource;set;api,1.0477378964424133e-09;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.834758281707764, -5.671980381011963, -6.293247699737549, -5.35452127456665, -5.515263080596924, -0.017111171036958694]",0.9830344915390015
3,"['    @Test\n    public void testResourceAsString() throws Exception {\n        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");\n        assertNotEquals(date, patient.getBirthDate());\n        this.patient.setBirthDate(date);\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource\n        headers.put(""CamelFhir.resourceAsString"", this.fhirContext.newJsonParser().encodeResourceToString(this.patient));\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_AS_STRING"", null, headers);\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");\n    }\n']",request;Return;patient;AS;updated;Birth;result;amel;Resource;Null,9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;6.402842700481415e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.000888343900442e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.827271461486816, -5.671696186065674, -6.284750461578369, -5.341203689575195, -5.512845516204834, -0.017224717885255814]",0.9829226732254028
3,"['    @Test\n    public void testResourceAsStringWithStringId() throws Exception {\n        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");\n        assertNotEquals(date, patient.getBirthDate());\n        this.patient.setBirthDate(date);\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource\n        headers.put(""CamelFhir.resourceAsString"", this.fhirContext.newJsonParser().encodeResourceToString(this.patient));\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.stringId"", this.patient.getIdElement().getIdPart());\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_AS_STRING_WITH_STRING_ID"", null, headers);\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");\n    }\n']",Exception;Resource;REPRESENTATION;request;STRING;Birth;resource;null;STRING;parse,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.84014892578125, -5.68467378616333, -6.305949687957764, -5.358462810516357, -5.526210784912109, -0.016963621601462364]",0.9831793308258057
3,"['    @Test\n    public void testResourceBySearchUrl() throws Exception {\n        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");\n        assertNotEquals(date, patient.getBirthDate());\n        this.patient.setBirthDate(date);\n        String url = ""Patient?"" + Patient.SP_IDENTIFIER + \'=\' + URLEncoder.encode(this.patient.getId(), ""UTF-8"");\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource\n        headers.put(""CamelFhir.resource"", this.patient);\n        // parameter type is String\n        headers.put(""CamelFhir.url"", url);\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_BY_SEARCH_URL"", null, headers);\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");\n    }\n']",REPRESENTATION;SP;Url;resource;SEARCH;Birth;api;patient;patient;resource,1.1932570487260818e-09;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.833467483520508, -5.677931308746338, -6.297101020812988, -5.362373352050781, -5.511253833770752, -0.01706581935286522]",0.9830789566040039
3,"['    @Test\n    public void testResourceBySearchUrlAndResourceAsString() throws Exception {\n        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");\n        assertNotEquals(date, patient.getBirthDate());\n        this.patient.setBirthDate(date);\n        String url = ""Patient?"" + Patient.SP_IDENTIFIER + \'=\' + URLEncoder.encode(this.patient.getId(), ""UTF-8"");\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource\n        headers.put(""CamelFhir.resourceAsString"", this.fhirContext.newJsonParser().encodeResourceToString(this.patient));\n        // parameter type is String\n        headers.put(""CamelFhir.url"", url);\n        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum\n        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);\n\n        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_BY_SEARCH_URL_AND_RESOURCE_AS_STRING"", null, headers);\n\n        assertNotNull(result, ""resource result"");\n        LOG.debug(""resource: "" + result);\n        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");\n    }\n']",SEARCH;STRING;As;Resource;Exception;Resource;resource;request;headers;AND,1.2223608791828156e-09;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;4.94765117764473e-10;4.511093720793724e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.839598178863525, -5.691080093383789, -6.319716930389404, -5.37733268737793, -5.536224842071533, -0.016788151115179062]",0.9833521246910095
3,"['    @Test\n    public void testSearchByUrl() throws Exception {\n        String url = ""Patient?given=Vincent&family=Freeman&_format=json"";\n        Bundle result = requestBody(""direct://SEARCH_BY_URL"", url);\n\n        LOG.debug(""searchByUrl: "" + result);\n        assertNotNull(result, ""searchByUrl result"");\n        Patient patient = (Patient) result.getEntry().get(0).getResource();\n        assertNotNull(patient);\n        assertEquals(""Freeman"", patient.getName().get(0).getFamily());\n    }\n']",format;json;Family;given;Url;search;direct;family;patient;Search,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.89015007019043, -5.776837348937988, -6.380904674530029, -5.421539783477783, -5.497323036193848, -0.016207369044423103]",0.9839232563972473
3,"['    @Test\n    public void testByUrl() throws Exception {\n        String url = ""Patient?_count=2"";\n        Bundle bundle = this.fhirClient.search()\n                .byUrl(url)\n                .returnBundle(Bundle.class).execute();\n        assertNotNull(bundle.getLink(IBaseBundle.LINK_NEXT));\n\n        String nextPageLink = bundle.getLink(""next"").getUrl();\n\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.url"", nextPageLink);\n        // parameter type is Class\n        headers.put(""CamelFhir.returnType"", Bundle.class);\n\n        IBaseBundle result = requestBodyAndHeaders(""direct://BY_URL"", null, headers);\n\n        LOG.debug(""byUrl: "" + result);\n        assertNotNull(result, ""byUrl result"");\n    }\n']",Patient;By;Exception;Link;Url;final;Url;EXT;url;Body,1.4551915228366852e-09;7.566995918750763e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.870639324188232, -5.747580528259277, -6.351326942443848, -5.386614799499512, -5.51285457611084, -0.01650337316095829]",0.98363196849823
3,"['    @Test\n    public void testNext() throws Exception {\n        String url = ""Patient?_count=2"";\n        Bundle bundle = this.fhirClient.search()\n                .byUrl(url)\n                .returnBundle(Bundle.class).execute();\n        assertNotNull(bundle.getLink(IBaseBundle.LINK_NEXT));\n\n        // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter ""bundle""\n        Bundle result = requestBody(""direct://NEXT"", bundle);\n\n        assertNotNull(result, ""next result"");\n        LOG.debug(""next: "" + result);\n    }\n']",url;undle;Patient;Null;Url;next;Client;Next;IBase;next,1.5133991837501526e-09;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.5838532969355583e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.8917131423950195, -5.776917457580566, -6.367053508758545, -5.412156581878662, -5.494395732879639, -0.016281262040138245]",0.9838505387306213
3,"['    @Test\n    public void testPrevious() throws Exception {\n        String url = ""Patient?_count=2"";\n        Bundle bundle = this.fhirClient.search()\n                .byUrl(url)\n                .returnBundle(Bundle.class).execute();\n        assertNotNull(bundle.getLink(IBaseBundle.LINK_NEXT));\n\n        String nextPageLink = bundle.getLink(""next"").getUrl();\n        bundle = this.fhirClient.loadPage().byUrl(nextPageLink).andReturnBundle(Bundle.class).execute();\n        assertNotNull(bundle.getLink(IBaseBundle.LINK_PREV));\n\n        // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter ""bundle""\n        Bundle result = requestBody(""direct://PREVIOUS"", bundle);\n\n        LOG.debug(""previous: "" + result);\n        assertNotNull(result, ""previous result"");\n    }\n']",message;previous;previous;request;next;Client;IBase;Body;undle;next,5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.861371994018555, -5.729402542114258, -6.322808265686035, -5.353641986846924, -5.4940080642700195, -0.01687512919306755]",0.9832665920257568
3,"['    @Test\n    public void testPreviousWithEncodingEnum() throws Exception {\n        String url = ""Patient?_count=2"";\n        Bundle bundle = this.fhirClient.search()\n                .byUrl(url)\n                .returnBundle(Bundle.class).execute();\n        assertNotNull(bundle.getLink(IBaseBundle.LINK_NEXT));\n\n        String nextPageLink = bundle.getLink(""next"").getUrl();\n        bundle = this.fhirClient.loadPage().byUrl(nextPageLink).andReturnBundle(Bundle.class).execute();\n        assertNotNull(bundle.getLink(IBaseBundle.LINK_PREV));\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(ExtraParameters.ENCODING_ENUM.getHeaderName(), EncodingEnum.XML);\n\n        // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter ""bundle""\n        Bundle result = requestBodyAndHeaders(""direct://PREVIOUS"", bundle, headers);\n\n        LOG.debug(""previous: "" + result);\n        assertNotNull(result, ""previous result"");\n    }\n']",IBase;Page;next;Encoding;parameter;Exception;headers;Enum;ENCODING;ML,6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.862076282501221, -5.743130207061768, -6.3412981033325195, -5.360009670257568, -5.525795936584473, -0.0166331697255373]",0.9835044145584106
3,"['    @BeforeEach\n    public void populateServer() {\n        List<IBaseResource> input = new ArrayList<>();\n\n        Patient p1 = new Patient();\n        p1.addName().setFamily(""PATIENT1"");\n        input.add(p1);\n\n        Patient p2 = new Patient();\n        p2.addName().setFamily(""PATIENT2"");\n        input.add(p2);\n\n        input.add(new Patient().addName(new HumanName().setFamily(""PATIENT3"")));\n\n        List<IBaseResource> response = fhirClient.transaction()\n                .withResources(input)\n                .encodedJson()\n                .execute();\n        assertEquals(3, response.size());\n    }\n']",Each;Human;input;Equals;ATIENT;add;Resources;Name;Family;with,1.3969838619232178e-09;6.111804395914078e-10;4.656612873077393e-10;3.128661774098873e-10;2.764863893389702e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.2369127944111824e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.823253631591797, -5.6728949546813965, -6.255509376525879, -5.330196380615234, -5.447576999664307, -0.017619866877794266]",0.9825344681739807
3,"['    @Test\n    public void testAdd() throws Exception {\n        //assert no meta\n        Meta meta = fhirClient.meta().get(Meta.class).fromResource(this.patient.getIdElement()).execute();\n        assertEquals(0, meta.getTag().size());\n        Meta inMeta = new Meta();\n        inMeta.addTag().setSystem(""urn:system1"").setCode(""urn:code1"");\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseMetaType\n        headers.put(""CamelFhir.meta"", inMeta);\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n\n        IBaseMetaType result = requestBodyAndHeaders(""direct://ADD"", null, headers);\n\n        LOG.debug(""add: "" + result);\n        assertNotNull(result, ""add result"");\n        assertEquals(1, result.getTag().size());\n    }\n']",urn;Meta;code;urn;Tag;IBase;Resource;ir;in;Hash,1.076841726899147e-09;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6921043172478676e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.833140850067139, -5.701887607574463, -6.293263912200928, -5.328759670257568, -5.488642692565918, -0.017248621210455894]",0.9828993082046509
3,"['    @Test\n    public void testDelete() throws Exception {\n        //assert no meta\n        Meta meta = fhirClient.meta().get(Meta.class).fromResource(this.patient.getIdElement()).execute();\n        assertEquals(0, meta.getTag().size());\n        Meta inMeta = new Meta();\n        inMeta.addTag().setSystem(""urn:system1"").setCode(""urn:code1"");\n        // add meta\n        meta = fhirClient.meta().add().onResource(this.patient.getIdElement()).meta(inMeta).execute();\n        assertEquals(1, meta.getTag().size());\n\n        //delete meta\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is org.hl7.fhir.instance.model.api.IBaseMetaType\n        headers.put(""CamelFhir.meta"", meta);\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n\n        IBaseMetaType result = requestBodyAndHeaders(""direct://DELETE"", null, headers);\n\n        LOG.debug(""delete: "" + result);\n        assertNotNull(result, ""delete result"");\n        assertEquals(0, result.getTag().size());\n    }\n']",Tag;DELETE;IBase;direct;delete;request;II;Tag;this;Type,1.862645149230957e-09;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.41970007866621e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1100277081131935e-10,5,5,"[-5.839653968811035, -5.704855918884277, -6.299615383148193, -5.321557998657227, -5.507924556732178, -0.017162732779979706]",0.9829837083816528
3,"['    @Test\n    public void testGetFromResource() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.metaType"", Meta.class);\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", this.patient.getIdElement());\n\n        IBaseMetaType result = requestBodyAndHeaders(""direct://GET_FROM_RESOURCE"", null, headers);\n\n        LOG.debug(""getFromResource: "" + result);\n        assertNotNull(result, ""getFromResource result"");\n        assertEquals(0, result.getTag().size());\n    }\n']",RESOURCE;ir;From;final;meta;Resource;parameter;hl;FROM;ir,1.1568772606551647e-09;6.548361852765083e-10;4.511093720793724e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.964508555829525e-10,5,5,"[-5.8343729972839355, -5.720029830932617, -6.278524398803711, -5.334197998046875, -5.4554033279418945, -0.017327239736914635]",0.9828220009803772
3,"['    @Test\n    public void testGetFromServer() throws Exception {\n        // using Class message body for single parameter ""metaType""\n        IBaseMetaType result = requestBody(""direct://GET_FROM_SERVER"", Meta.class);\n        assertNotNull(result, ""getFromServer result"");\n        LOG.debug(""getFromServer: "" + result);\n    }\n']",Body;request;message;direct;GET;result;Server;Base;result;From,3.2014213502407074e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.921825885772705, -5.848202228546143, -6.406805038452148, -5.472354412078857, -5.480854511260986, -0.015705464407801628]",0.984417200088501
3,"['    @Test\n    public void testGetFromType() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.metaType"", Meta.class);\n        // parameter type is String\n        headers.put(""CamelFhir.resourceType"", ""Patient"");\n\n        IBaseMetaType result = requestBodyAndHeaders(""direct://GET_FROM_TYPE"", null, headers);\n\n        LOG.debug(""getFromType: "" + result);\n        assertNotNull(result, ""getFromType result"");\n    }\n']",GET;parameter;put;Type;final;headers;parameter;Base;From;Type,1.6298145055770874e-09;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.869596004486084, -5.784969806671143, -6.3249735832214355, -5.351454734802246, -5.453951835632324, -0.01685016229748726]",0.9832910299301147
3,"['    @Test\n    public void testGetFromTypePreferResponseType() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.metaType"", Meta.class);\n        // parameter type is String\n        headers.put(""CamelFhir.resourceType"", ""Patient"");\n        headers.put(ExtraParameters.PREFER_RESPONSE_TYPE.getHeaderName(), Patient.class);\n\n        Meta result = requestBodyAndHeaders(""direct://GET_FROM_TYPE"", null, headers);\n\n        LOG.debug(""getFromType: "" + result);\n        assertNotNull(result, ""getFromType result"");\n    }\n']",Get;Type;Patient;Extra;ONSE;Hash;put;Body;direct;headers,1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.846834659576416, -5.761038780212402, -6.293972492218018, -5.3367228507995605, -5.444626331329346, -0.017161676660180092]",0.9829846024513245
3,"['    @Test\n    public void testEncodeRequestToXml() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // encode request to XML\n        headers.put(ExtraParameters.ENCODE_XML.getHeaderName(), Boolean.TRUE);\n        String url = ""Patient?given=Vincent&family=Freeman&_format=json"";\n\n        Bundle result = requestBodyAndHeaders(""direct://SEARCH_BY_URL"", url, headers);\n\n        LOG.debug(""searchByUrl: "" + result);\n        assertNotNull(result, ""searchByUrl result"");\n        Patient patient = (Patient) result.getEntry().get(0).getResource();\n        assertNotNull(patient);\n        assertEquals(""Freeman"", patient.getName().get(0).getFamily());\n    }\n']",ENCODE;url;encode;debug;Header;Headers;TRUE;get;to;result,6.621121428906918e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.847526550292969, -5.722146034240723, -6.318588733673096, -5.3546881675720215, -5.486212253570557, -0.01697487384080887]",0.983168363571167
3,"['    @Test\n    public void testResourceById() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resource"", Patient.class);\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", patient.getIdElement());\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_ID"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",Patient;BY;Body;api;Headers;parameter;headers;new;request;II,6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8556809425354, -5.737051010131836, -6.312342166900635, -5.370796203613281, -5.457794189453125, -0.016957996413111687]",0.9831849932670593
3,"['    @Test\n    public void testResourceByLongId() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resource"", Patient.class);\n        // parameter type is Long\n        headers.put(""CamelFhir.longId"", Long.valueOf(patient.getIdElement().getIdPart()));\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_LONG_ID"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",patient;long;request;Long;Body;Part;type;Patient;Long;parameter,1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.856927394866943, -5.740513801574707, -6.316651344299316, -5.385811805725098, -5.459205150604248, -0.016858601942658424]",0.9832828044891357
3,"['    @Test\n    public void testResourceByStringId() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resource"", Patient.class);\n        // parameter type is Long\n        headers.put(""CamelFhir.stringId"", patient.getIdElement().getIdPart());\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_ID"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",string;Part;Element;class;RESOURCE;ir;Exception;Hash;Class;ir,4.94765117764473e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.864935874938965, -5.751852989196777, -6.33065128326416, -5.38799524307251, -5.467388153076172, -0.016727427020668983]",0.9834116697311401
3,"['    @Test\n    public void testResourceByIdAndStringResource() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resourceClass"", ""Patient"");\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.id"", patient.getIdElement());\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_ID_AND_STRING_RESOURCE"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",ById;headers;Patient;STRING;headers;Map;new;Resource;RESOURCE;headers,3.4924596548080444e-09;1.6298145055770874e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.870187759399414, -5.760048866271973, -6.34267520904541, -5.392858028411865, -5.4748382568359375, -0.016609953716397285]",0.9835272431373596
3,"['    @Test\n    public void testResourceByLongIdAndStringResource() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resource"", Patient.class);\n        // parameter type is Long\n        headers.put(""CamelFhir.longId"", Long.valueOf(patient.getIdElement().getIdPart()));\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",request;Resource;value;AND;ir;Map;amel;Headers;Patient;headers,8.731149137020111e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.861279010772705, -5.747300148010254, -6.322625637054443, -5.384366989135742, -5.467385292053223, -0.016784166917204857]",0.9833557605743408
3,"['    @Test\n    public void testResourceByStringIdAndStringResource() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resource"", Patient.class);\n        // parameter type is Long\n        headers.put(""CamelFhir.stringId"", patient.getIdElement().getIdPart());\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",ir;Patient;request;Body;ir;Hash;headers;Long;Object;Element,6.693881005048752e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.874636650085449, -5.764005661010742, -6.346171855926514, -5.394853115081787, -5.475371360778809, -0.0165669247508049]",0.9835696816444397
3,"['    @Test\n    public void testResourceByStringIdAndVersion() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resource"", Patient.class);\n        // parameter type is Long\n        headers.put(""CamelFhir.stringId"", patient.getIdElement().getIdPart());\n        // parameter type is String\n        headers.put(""CamelFhir.version"", patient.getIdElement().getVersionIdPart());\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_ID_AND_VERSION"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",Response;Resource;string;Version;RESOURCE;result;BY;Body;By;patient,8.440110832452774e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.853719711303711, -5.733255386352539, -6.30886173248291, -5.362836837768555, -5.470695495605469, -0.01696479320526123]",0.9831783175468445
3,"['    @Test\n    public void testResourceByStringIdAndVersionWithResourceClass() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resourceClass"", ""Patient"");\n        // parameter type is Long\n        headers.put(""CamelFhir.stringId"", patient.getIdElement().getIdPart());\n        // parameter type is String\n        headers.put(""CamelFhir.version"", patient.getIdElement().getVersionIdPart());\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",STRING;Body;By;Resource;parameter;Class;BY;Map;headers;resource,1.1350493878126144e-09;6.402842700481415e-10;5.820766091346741e-10;4.3655745685100555e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.862709045410156, -5.746610164642334, -6.3354692459106445, -5.378196716308594, -5.479509353637695, -0.016736220568418503]",0.9834030270576477
3,"['    @Test\n    public void testResourceByiUrl() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resource"", Patient.class);\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.iUrl"", new IdType(this.patient.getId()));\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_IURL"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",resource;Patient;result;II;this;Response;parameter;parameter;api;BY,7.712515071034431e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.860830307006836, -5.7513861656188965, -6.3264360427856445, -5.377913475036621, -5.472146987915039, -0.016775140538811684]",0.9833646416664124
3,"['    @Test\n    public void testResourceByUrl() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is Class\n        headers.put(""CamelFhir.resource"", Patient.class);\n        // parameter type is String\n        headers.put(""CamelFhir.url"", this.patient.getId());\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_URL"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",headers;Patient;patient;Resource;Map;headers;BY;direct;Valid;Object,1.862645149230957e-09;1.1641532182693481e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.853673458099365, -5.738974094390869, -6.317097187042236, -5.380232334136963, -5.45603084564209, -0.016912050545215607]",0.9832301735877991
3,"['    @Test\n    public void testResourceByStringUrlAndStringResource() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.resourceClass"", ""Patient"");\n        // parameter type is org.hl7.fhir.instance.model.api.IIdType\n        headers.put(""CamelFhir.iUrl"", new IdType(this.patient.getId()));\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",resource;Valid;Class;patient;Object;STRING;II;request;Hash;parameter,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.868296146392822, -5.77029275894165, -6.3475728034973145, -5.389142036437988, -5.4789323806762695, -0.016573842614889145]",0.9835627675056458
3,"['    @Test\n    public void testResourceByUrlAndStringResource() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.resourceClass"", ""Patient"");\n        // parameter type is String\n        headers.put(""CamelFhir.url"", this.patient.getId());\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_URL_AND_STRING_RESOURCE"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",headers;Patient;AND;RESOURCE;parameter;url;headers;result;Exception;Map,2.7939677238464355e-09;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2741809263825417e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.870297908782959, -5.767026901245117, -6.346567153930664, -5.39673376083374, -5.470431804656982, -0.016581229865550995]",0.9835553765296936
3,"['    @Test\n    public void testResourceByUrlAndStringResourcePrettyPrint() throws Exception {\n        final Map<String, Object> headers = new HashMap<>();\n        // parameter type is String\n        headers.put(""CamelFhir.resourceClass"", ""Patient"");\n        // parameter type is String\n        headers.put(""CamelFhir.url"", this.patient.getId());\n        headers.put(ExtraParameters.PRETTY_PRINT.getHeaderName(), Boolean.TRUE);\n\n        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_URL_AND_STRING_RESOURCE"", null, headers);\n\n        assertValidResponse(result);\n    }\n']",Print;Resource;Extra;headers;headers;Valid;Map;amel;put;Url,1.862645149230957e-09;1.280568540096283e-09;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.882861137390137, -5.782450199127197, -6.377331733703613, -5.398772239685059, -5.488386154174805, -0.01635737530887127]",0.983775794506073
3,"['    @Test\n    public void testUnmarshalWithExplicitUTF16Charset() throws Exception {\n        MockEndpoint mock = getMockEndpoint(""mock:result"");\n        mock.setExpectedMessageCount(1);\n\n        // Message with explicit encoding in MSH\n        String charset = ""ASCII"";\n        byte[] body = HL7_MESSAGE.getBytes(Charset.forName(charset));\n        template.sendBodyAndHeader(""direct:input"", new ByteArrayInputStream(body), Exchange.CHARSET_NAME, charset);\n\n        mock.assertIsSatisfied();\n\n        MethodOutcome result = mock.getExchanges().get(0).getIn().getBody(MethodOutcome.class);\n        assertNotNull(result, ""resource result"");\n        assertTrue(result.getCreated());\n    }\n']",Exchange;arshal;CHARSET;encoding;Method;Endpoint;mock;Un;Charset;atisfied,1.2223608791828156e-09;1.076841726899147e-09;8.731149137020111e-10;6.402842700481415e-10;5.384208634495735e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9831426218152046e-10,5,5,"[-5.8994011878967285, -5.7716875076293945, -6.3850626945495605, -5.440053462982178, -5.555642127990723, -0.015872325748205185]",0.9842529892921448
3,"['    @Test\n            public void configure() {\n                from(""direct:start"").to(""beanstalk:"" + tubeName + ""?command=release"").to(""mock:result"");\n            }\n']",tube;result;start;release;configure;ock;from;direct;Name;to,3.725290298461914e-09;1.6298145055770874e-09;1.1641532182693481e-09;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-4.656612873077393e-10;-9.313225746154785e-10;-9.89530235528946e-10,5,5,"[-5.9370903968811035, -5.860337257385254, -6.419286251068115, -5.52614164352417, -5.46879768371582, -0.015435871668159962]",0.984682559967041
3,"['    @Test\n            public void configure() {\n                from(""direct:start"").to(""beanstalk:"" + tubeName + ""?command=bury"").to(""mock:result"");\n            }\n']",bury;command;direct;from;to;ock;tube;Name;to;start,2.561137080192566e-09;1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;0.0;0.0;-4.656612873077393e-10;-1.3969838619232178e-09,5,5,"[-5.953664302825928, -5.893599510192871, -6.441789627075195, -5.5423383712768555, -5.469393253326416, -0.015192858874797821]",0.9849219918251038
3,"['    @Test\n            public void configure() {\n                from(""direct:start"").to(""beanstalk:"" + tubeName + ""?command=touch"").to(""mock:result"");\n            }\n']",touch;Name;direct;result;to;from;start;to;command;ock,2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-5.943771839141846, -5.87084436416626, -6.423853397369385, -5.528074264526367, -5.4602789878845215, -0.015409108251333237]",0.9847090244293213
3,"['    @Test\n            public void configure() {\n                from(""direct:start"").to(""beanstalk:"" + tubeName + ""?command=delete"").to(""mock:result"");\n            }\n']",tube;Name;beanstalk;from;ock;start;result;delete;direct;command,2.421438694000244e-08;3.725290298461914e-09;2.7939677238464355e-09;2.3283064365386963e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;0.0;-2.3283064365386963e-10;-9.313225746154785e-10,5,5,"[-5.945857524871826, -5.88551664352417, -6.4322190284729, -5.535394668579102, -5.463706970214844, -0.015303924679756165]",0.9848125576972961
3,"['    @Test\n            public void configure() {\n                from(""direct:start"").to(""beanstalk:"" + tubeName + ""?jobPriority=1000&jobTimeToRun=5"").to(""mock:result"");\n            }\n']",Name;job;tube;Time;Priority;configure;from;to;to;Run,4.6566128730773926e-09;4.6566128730773926e-09;3.725290298461914e-09;3.259629011154175e-09;1.3969838619232178e-09;4.656612873077393e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-5.904578685760498, -5.820706844329834, -6.4024977684021, -5.502135753631592, -5.471520900726318, -0.015756160020828247]",0.984367311000824
3,"['    @Test\n            public void configure() {\n                from(""beanstalk:"" + tubeName).to(""mock:result"");\n            }\n']",tube;configure;from;beanstalk;Name;to;result;ock,1.1175870895385742e-08;4.6566128730773926e-09;2.7939677238464355e-09;2.561137080192566e-09;1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;-5.587935447692871e-09,5,5,"[-5.933667182922363, -5.841033935546875, -6.409514904022217, -5.511744499206543, -5.453554153442383, -0.015642210841178894]",0.9844794869422913
3,"['    @Test\n    public void testOperations() throws Exception {\n        Map<String, Object> headers = new HashMap<>();\n        assertFalse(gridFSBucket.find(eq(FILE_NAME)).cursor().hasNext());\n\n        headers.put(Exchange.FILE_NAME, FILE_NAME);\n        headers.put(Exchange.CONTENT_TYPE, ""text/plain"");\n        template.requestBodyAndHeaders(""direct:create"", FILE_DATA, headers);\n        assertTrue(gridFSBucket.find(eq(GridFsConstants.GRIDFS_FILE_KEY_FILENAME, FILE_NAME)).cursor().hasNext());\n        assertEquals(1, template.requestBodyAndHeaders(""direct:count"", null, headers, Long.class).longValue());\n        Exchange result = template.request(""direct:findOne"", exchange -> exchange.getMessage().setHeaders(headers));\n        assertTrue(result.getMessage().getHeader(Exchange.FILE_LENGTH, Long.class) > 0);\n        assertNotNull(result.getMessage().getHeader(Exchange.FILE_LAST_MODIFIED));\n\n        InputStream ins = result.getMessage().getBody(InputStream.class);\n        assertNotNull(ins);\n        byte b[] = new byte[2048];\n        int i = ins.read(b);\n        assertEquals(FILE_DATA, new String(b, 0, i, StandardCharsets.UTF_8));\n\n        headers.put(Exchange.FILE_NAME, ""2-"" + FILE_NAME);\n        headers.put(GridFsEndpoint.GRIDFS_CHUNKSIZE, 10);\n        headers.put(GridFsEndpoint.GRIDFS_METADATA, ""{\'foo\': \'bar\'}"");\n\n        template.requestBodyAndHeaders(""direct:create"", FILE_DATA + ""data2"", headers);\n        assertEquals(1, template.requestBodyAndHeaders(""direct:count"", null, headers, Long.class).longValue());\n        assertEquals(2, template.requestBody(""direct:count"", null, Long.class).longValue());\n\n        String s = template.requestBody(""direct:listAll"", null, String.class);\n        assertTrue(s.contains(""2-"" + FILE_NAME));\n        template.requestBodyAndHeaders(""direct:remove"", null, headers);\n        assertEquals(1, template.requestBody(""direct:count"", null, Long.class).longValue());\n        s = template.requestBodyAndHeader(""direct:listAll"", null, Exchange.FILE_NAME, ""2-"" + FILE_NAME, String.class);\n        assertFalse(s.contains(""2-"" + FILE_NAME));\n    }\n']",GRIDFS;Fs;GRIDFS;NAME;Grid;Operations;NAME;Exchange;FS;Exchange,2.4156179279088974e-09;9.313225746154785e-10;7.275957614183426e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.823766231536865, -5.6592326164245605, -6.2774481773376465, -5.329229831695557, -5.5073771476745605, -0.01737433858215809]",0.9827756285667419
3,"['    @Test\n    public void testRemoveByObjectId() {\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(Exchange.FILE_NAME, FILE_NAME);\n\n        Exchange result = template.request(\n                ""mongodb-gridfs:myDb?database={{mongodb.testDb}}&operation=create&bucket="" + getBucket(), new Processor() {\n                    @Override\n                    public void process(Exchange exchange) throws Exception {\n                        exchange.getMessage().setBody(FILE_DATA);\n                        exchange.getMessage().setHeaders(headers);\n                    }\n']",mongod;Headers;bucket;mongod;put;NAME;new;Map;gridfs;exchange,7.8580342233181e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.856858730316162, -5.709135055541992, -6.2967047691345215, -5.353240489959717, -5.4919047355651855, -0.017014838755130768]",0.98312908411026
3,"['    @Test\n    public void testTimestamp() throws Exception {\n        runTest(""direct:create"", gridFSBucket);\n    }\n']",FS;Timestamp;grid;ucket;Exception;direct;run;create,5.587935447692871e-09;3.725290298461914e-09;2.7939677238464355e-09;-1.862645149230957e-09;-2.3283064365386963e-09;-3.259629011154175e-09;-3.725290298461914e-09;-3.725290298461914e-09,5,5,"[-5.902747631072998, -5.7671589851379395, -6.354636192321777, -5.532772064208984, -5.401012420654297, -0.01619669608771801]",0.9839337468147278
3,"['    @Test\n    public void testAttribute() throws Exception {\n        runTest(""direct:create-a"", GridFSBuckets.create(mongo.getDatabase(""test""), getBucket() + ""-a""));\n    }\n']",ongo;FS;Grid;Attribute;create;Exception;create;direct;get;get,6.51925802230835e-09;1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-5.238689482212067e-10;-1.0477378964424133e-09,5,5,"[-5.920108318328857, -5.821809768676758, -6.4362897872924805, -5.545298099517822, -5.455601692199707, -0.015547731891274452]",0.9845724105834961
3,"['    @Test\n    public void testPersistentTS() throws Exception {\n        runTest(""direct:create-pts"", GridFSBuckets.create(mongo.getDatabase(""test""), getBucket() + ""-pts""));\n    }\n']",ongo;Persistent;ucket;run;pt;Exception;create;get;pt;direct,2.0954757928848267e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;0.0;-2.9103830456733704e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.923992156982422, -5.805083274841309, -6.430415153503418, -5.538425445556641, -5.46280574798584, -0.015593740157783031]",0.9845272302627563
3,"['    @Test\n    public void testCustomFileQuery() throws Exception {\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(Exchange.FILE_NAME, FILE_NAME);\n\n        Exchange result = template.request(\n                ""mongodb-gridfs:myDb?database={{mongodb.testDb}}&operation=create&bucket=customFileFilterTest"",\n                new Processor() {\n                    @Override\n                    public void process(Exchange exchange) throws Exception {\n                        exchange.getMessage().setBody(FILE_DATA);\n                        exchange.getMessage().setHeaders(headers);\n                    }\n']",database;Exchange;FILE;Headers;headers;FILE;result;my;create;File,8.149072527885437e-10;5.238689482212067e-10;5.093170329928398e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.855251312255859, -5.7017107009887695, -6.293042182922363, -5.350392818450928, -5.485384941101074, -0.01709265448153019]",0.9830526113510132
3,['    @BeforeEach\n    public void setup() throws Exception {\n        // Create the LDAPConnection\n        ldapContext = getWiredContext(service);\n\n        SimpleRegistry reg = getSimpleRegistry();\n        camel = new DefaultCamelContext(reg);\n        template = camel.createProducerTemplate();\n    }\n'],amel;Exception;Simple;camel;ap;reg;Context;ired;Simple;the,6.693881005048752e-10;5.238689482212067e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.8905792236328125, -5.718421936035156, -6.3612165451049805, -5.45745325088501, -5.474457263946533, -0.016367696225643158]",0.9837655425071716
3,['    @AfterEach\n    public void tearDown() throws Exception {\n        if (camel != null) {\n            camel.stop();\n        }\n    }\n'],Each;camel;Exception;stop;null;amel;After;tear;Down;if,1.7462298274040222e-09;1.1641532182693481e-09;3.710738383233547e-10;3.4924596548080444e-10;5.820766091346741e-11;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.0745362639427185e-10;-5.820766091346741e-10,5,5,"[-5.86457633972168, -5.67729377746582, -6.300550937652588, -5.44062614440918, -5.413595676422119, -0.017032887786626816]",0.9831113815307617
3,"['    @Test\n    public void addOne() throws Exception {\n        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));\n        camel.start();\n\n        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);\n        Exchange exchange = endpoint.createExchange();\n\n        // then we set the LDAP filter on the in body\n        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/AddOne.ldif"");\n        exchange.getIn().setBody(loc.toString());\n\n        // now we send the exchange to the endpoint, and receives the response\n        // from Camel\n        Exchange out = template.send(endpoint, exchange);\n\n        // Check the results\n        List<String> ldifResults = defaultLdapModuleOutAssertions(out);\n        assertThat(ldifResults, notNullValue());\n        assertThat(ldifResults.size(), equalTo(2)); // Container and user\n        assertThat(ldifResults.get(0), equalTo(""success""));\n        assertThat(ldifResults.get(1), equalTo(""success""));\n\n        // Check LDAP\n        SearchResult sr;\n        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);\n        assertNotNull(searchResults);\n\n        checkDN(""uid=test1"", searchResults);\n    }\n']",Route;CONTROL;Result;uid;SEARCH;org;user;add;uid;endpoint,1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.9037065505981445, -5.807506084442139, -6.4101386070251465, -5.4792046546936035, -5.59463357925415, -0.015387156046926975]",0.98473060131073
3,"['    @Test\n    public void deleteOne() throws Exception {\n        setupData(""/org/apache/camel/component/ldif/DeleteOneSetup.ldif"");\n\n        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));\n        camel.start();\n\n        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);\n        Exchange exchange = endpoint.createExchange();\n\n        // then we set the LDAP filter on the in body\n        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/DeleteOne.ldif"");\n        exchange.getIn().setBody(loc.toString());\n\n        // now we send the exchange to the endpoint, and receives the response\n        // from Camel\n        Exchange out = template.send(endpoint, exchange);\n\n        // Check the results\n        List<String> ldifResults = defaultLdapModuleOutAssertions(out);\n        assertThat(ldifResults, notNullValue());\n        assertThat(ldifResults.size(), equalTo(1));\n        assertThat(ldifResults.get(0), equalTo(""success""));\n\n        // Check LDAP\n        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);\n        // test2\n        while (searchResults.hasMore()) {\n            assertThat(searchResults.next().getName(), not(containsString(""test2"")));\n        }\n    }\n']",aming;LDAP;org;apache;Route;Name;amel;ap;loc;ldif,1.1175870895385742e-08;1.9208528101444244e-09;1.3969838619232178e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.921693325042725, -5.830681800842285, -6.421705722808838, -5.500695705413818, -5.586738586425781, -0.015188631601631641]",0.9849262237548828
3,"['    @Test\n    public void addDuplicate() throws Exception {\n        setupData(""/org/apache/camel/component/ldif/AddDuplicateSetup.ldif"");\n\n        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));\n        camel.start();\n\n        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);\n        Exchange exchange = endpoint.createExchange();\n\n        // then we set the LDAP filter on the in body\n        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/AddDuplicate.ldif"");\n        exchange.getIn().setBody(loc.toString());\n\n        // now we send the exchange to the endpoint, and receives the response\n        // from Camel\n        Exchange out = template.send(endpoint, exchange);\n\n        // Check the results\n        List<String> ldifResults = defaultLdapModuleOutAssertions(out);\n        assertThat(ldifResults, notNullValue());\n        assertThat(ldifResults.size(), equalTo(1));\n        assertThat(ldifResults.get(0), not(equalTo(""success"")));\n    }\n']",outes;setup;we;add;Route;the;component;the;INT;get,2.444721758365631e-09;1.280568540096283e-09;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.889196872711182, -5.766134262084961, -6.416369438171387, -5.437055587768555, -5.585001468658447, -0.015765313059091568]",0.9843583106994629
3,"['    @Test\n    public void modify() throws Exception {\n        setupData(""/org/apache/camel/component/ldif/ModifySetup.ldif"");\n\n        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));\n        camel.start();\n\n        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);\n        Exchange exchange = endpoint.createExchange();\n\n        // then we set the LDAP filter on the in body\n        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/Modify.ldif"");\n        exchange.getIn().setBody(loc.toString());\n\n        // now we send the exchange to the endpoint, and receives the response\n        // from Camel\n        Exchange out = template.send(endpoint, exchange);\n\n        // Check the results\n        List<String> ldifResults = defaultLdapModuleOutAssertions(out);\n        assertThat(ldifResults, notNullValue());\n        assertThat(ldifResults.size(), equalTo(1));\n        assertThat(ldifResults.get(0), equalTo(""success""));\n\n        // Check LDAP\n        SearchResult sr;\n        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);\n        assertNotNull(searchResults);\n\n        boolean uidFound = false;\n        while (searchResults.hasMore()) {\n            sr = searchResults.next();\n            if (sr.getName().contains(""uid=test4"")) {\n                uidFound = true;\n\n                // Check the attributes of the search result\n                Attributes attribs = sr.getAttributes();\n                assertNotNull(attribs);\n                Attribute attrib = attribs.get(""sn"");\n                assertNotNull(attribs);\n                assertThat(1, equalTo(attrib.size()));\n                assertThat(""5"", equalTo(attrib.get(0).toString()));\n            }\n        }\n\n        assertThat(""uid=test4 not found"", uidFound, equalTo(true));\n    }\n']",Enumeration;Result;LDAP;LDIF;ap;the;search;Body;Exchange;modify,2.7939677238464355e-09;1.862645149230957e-09;1.7462298274040222e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;7.275957614183426e-10;6.330083124339581e-10;5.820766091346741e-10;5.384208634495735e-10,5,5,"[-5.917171955108643, -5.808063983917236, -6.42238187789917, -5.488937854766846, -5.601223468780518, -0.015262247063219547]",0.9848536252975464
3,"['    @Test\n    public void modRdn() throws Exception {\n        setupData(""/org/apache/camel/component/ldif/ModRdnSetup.ldif"");\n\n        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));\n        camel.start();\n\n        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);\n        Exchange exchange = endpoint.createExchange();\n\n        // then we set the LDAP filter on the in body\n        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/ModRdn.ldif"");\n        exchange.getIn().setBody(loc.toString());\n\n        // now we send the exchange to the endpoint, and receives the response\n        // from Camel\n        Exchange out = template.send(endpoint, exchange);\n\n        // Check the results\n        List<String> ldifResults = defaultLdapModuleOutAssertions(out);\n        assertThat(ldifResults, notNullValue());\n        assertThat(ldifResults.size(), equalTo(1));\n        assertThat(ldifResults.get(0), equalTo(""success""));\n\n        // Check LDAP\n        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);\n        assertNotNull(searchResults);\n\n        checkDN(""uid=test6"", searchResults);\n    }\n']",search;Context;Results;apache;ap;org;search;Result;SEARCH;Exchange,9.313225746154785e-10;7.8580342233181e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.907660961151123, -5.810845851898193, -6.418518543243408, -5.479959011077881, -5.596956729888916, -0.015340199694037437]",0.9847768545150757
3,"['    @Test\n    public void modDn() throws Exception {\n        setupData(""/org/apache/camel/component/ldif/ModDnSetup.ldif"");\n\n        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));\n        camel.start();\n\n        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);\n        Exchange exchange = endpoint.createExchange();\n\n        // then we set the LDAP filter on the in body\n        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/ModDn.ldif"");\n        exchange.getIn().setBody(loc.toString());\n\n        // now we send the exchange to the endpoint, and receives the response\n        // from Camel\n        Exchange out = template.send(endpoint, exchange);\n\n        // Check the results\n        List<String> ldifResults = defaultLdapModuleOutAssertions(out);\n        assertThat(ldifResults, notNullValue());\n        assertThat(ldifResults.size(), equalTo(1));\n        assertThat(ldifResults.get(0), equalTo(""success""));\n\n        // Check LDAP\n        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);\n        assertNotNull(searchResults);\n\n        checkDN(""uid=test7"", searchResults);\n    }\n']",LDAP;Null;ldif;ap;Enumeration;Search;uid;component;Check;send,1.862645149230957e-09;1.2223608791828156e-09;1.0040821507573128e-09;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.908637046813965, -5.820800304412842, -6.419849872589111, -5.48825740814209, -5.5922746658325195, -0.015287840738892555]",0.9848284125328064
3,['    @Test\n    public void vaultTrackByWithSortingTest() throws Exception {\n        mockResult.expectedMinimumMessageCount(1);\n        mockError.expectedMessageCount(0);\n        MockEndpoint.assertIsSatisfied(context);\n    }\n'],Mock;expected;vault;expected;mock;Message;Count;context;Error;Result,2.7939677238464355e-09;2.7939677238464355e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0,5,5,"[-5.924330234527588, -5.844606399536133, -6.415055274963379, -5.490969657897949, -5.512007236480713, -0.01548693235963583]",0.9846323728561401
3,['    @Test\n    public void vaultTrackByCriteriaTest() throws Exception {\n        mockResult.expectedMinimumMessageCount(1);\n        mockError.expectedMessageCount(0);\n        MockEndpoint.assertIsSatisfied(context);\n    }\n'],Criteria;Track;mock;By;Minimum;Exception;Message;expected;Endpoint;expected,2.7939677238464355e-09;1.862645149230957e-09;1.6298145055770874e-09;1.2223608791828156e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10,5,5,"[-5.930456638336182, -5.846018314361572, -6.417675495147705, -5.502589702606201, -5.510834693908691, -0.015418381430208683]",0.9846999645233154
3,['    @Test\n    public void vaultTrackTest() throws Exception {\n        mockResult.expectedMinimumMessageCount(1);\n        mockError.expectedMessageCount(0);\n        MockEndpoint.assertIsSatisfied(context);\n    }\n'],atisfied;Result;Track;Endpoint;mock;Minimum;Exception;Error;expected;Message,1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9276442527771, -5.856179714202881, -6.410542011260986, -5.499208450317383, -5.51491117477417, -0.015405351296067238]",0.9847127199172974
3,['    @Test\n    public void stateMachineFeedTest() throws Exception {\n        mockResult.expectedMinimumMessageCount(1);\n        mockError.expectedMessageCount(0);\n        MockEndpoint.assertIsSatisfied(context);\n    }\n'],Mock;Result;Message;Machine;state;Minimum;Error;Count;expected;Count,2.561137080192566e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;2.3283064365386963e-10,5,5,"[-5.916205406188965, -5.838010311126709, -6.397439956665039, -5.495753288269043, -5.523690223693848, -0.015490453690290451]",0.9846289157867432
3,['    @Test\n    public void vaultTrackByTest() throws Exception {\n        mockResult.expectedMinimumMessageCount(1);\n        mockError.expectedMessageCount(0);\n        MockEndpoint.assertIsSatisfied(context);\n    }\n'],mock;mock;Count;Exception;atisfied;context;expected;Message;expected;Error,3.841705620288849e-09;1.5133991837501526e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.929265022277832, -5.855883598327637, -6.417142868041992, -5.503457069396973, -5.514503479003906, -0.015374948270618916]",0.9847426414489746
3,"['    @Test\n    public void startTrackedFlowDynamicTest() throws Exception {\n        //Expects CamelFlow is deployed on the node\n        mockResult.expectedMinimumMessageCount(1);\n        mockError.expectedMessageCount(0);\n        MockEndpoint.assertIsSatisfied(context);\n        assertEquals(""Hello world!"", mockResult.getExchanges().get(0).getIn().getBody());\n    }\n']",atisfied;Camel;context;deployed;the;Tracked;expected;Expects;Hello;node,7.916241884231567e-09;1.862645149230957e-09;1.7462298274040222e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.88778018951416, -5.779196739196777, -6.366940498352051, -5.434821128845215, -5.515617370605469, -0.016096051782369614]",0.9840328097343445
3,"['    @Test\n    public void currentNodeTimeTest() throws Exception {\n        Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, CURRENT_NODE_TIME);\n        template.send(exchange);\n        Object body = exchange.getIn().getBody();\n        assertNotNull(body);\n        Object exception = exchange.getException();\n        assertNull(exception);\n    }\n']",current;exchange;Header;send;template;Node;Exchange;Body;URRENT;Null,1.1641532182693481e-09;1.1350493878126144e-09;1.0477378964424133e-09;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.255546860396862e-10,5,5,"[-5.891171455383301, -5.774209499359131, -6.365808486938477, -5.4437761306762695, -5.476476669311523, -0.01622789539396763]",0.9839030504226685
3,"['    @Test\n    public void testGetFullTableName() {\n        MatcherAssert.assertThat(\n                Schemas.getFullTableName(TABLE_NAME, NAMESPACE),\n                Matchers.equalTo(NAMESPACE.getName() + ""."" + TABLE_NAME));\n    }\n']",AMES;NAME;Schemas;Full;TABLE;Full;TABLE;equal;Matcher;Name,1.6298145055770874e-09;1.3969838619232178e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.856654167175293, -5.732596397399902, -6.306275367736816, -5.4028143882751465, -5.4261674880981445, -0.01697135716676712]",0.9831719398498535
3,"['    @Test\n    public void testGetFullTableNameLegacy() {\n        MatcherAssert.assertThat(\n                Schemas.getFullTableName(TABLE_NAME, Namespace.create(""met"")),\n                Matchers.equalTo(TABLE_NAME)\n        );\n    }\n']",NAME;Get;Name;Table;Full;Schemas;Matcher;equal;Table;That,1.0477378964424133e-09;5.529727786779404e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.382431946694851e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.871610641479492, -5.715640068054199, -6.312807559967041, -5.409329414367676, -5.455103874206543, -0.01681499555706978]",0.9833256006240845
3,"['    @Test\n    public void testGetFullTableNameEmptyNamespace() {\n        MatcherAssert.assertThat(\n                Schemas.getFullTableName(TABLE_NAME, Namespace.EMPTY_NAMESPACE),\n                Matchers.equalTo(TABLE_NAME)\n        );\n    }\n']",NAME;TABLE;AMES;Get;Schemas;Full;ACE;Name;Namespace;get,1.6298145055770874e-09;1.1641532182693481e-09;7.566995918750763e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11,5,5,"[-5.884558200836182, -5.7514777183532715, -6.337580680847168, -5.432051181793213, -5.455791473388672, -0.016509821638464928]",0.983625590801239
3,"['    @Test\n    public void testCreateTable() {\n        mockery.checking(new Expectations(){{\n            oneOf(kvs).createTables(with(tableMapContainsEntry(TABLE_REF, getSimpleTableDefinitionAsBytes(TABLE_REF))));\n        }});\n        Schemas.createTable(kvs, TABLE_REF, getSimpleTableDefinition(TABLE_REF));\n    }\n']",REF;REF;TABLE;REF;Entry;vs;Contains;Definition;TABLE;Simple,9.604264050722122e-10;7.8580342233181e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.864843845367432, -5.733574390411377, -6.318436622619629, -5.407283306121826, -5.449428081512451, -0.016798585653305054]",0.9833417534828186
3,"['    @Test\n    public void testCreateTables() {\n        TableReference tableName1 = TableReference.createWithEmptyNamespace(TABLE_NAME + ""1"");\n        TableReference tableName2 = TableReference.createWithEmptyNamespace(TABLE_NAME + ""2"");\n        mockery.checking(new Expectations(){{\n            oneOf(kvs).createTables(with(tableMapContainsEntry(tableName1, getSimpleTableDefinitionAsBytes(tableName1))));\n            oneOf(kvs).createTables(with(tableMapContainsEntry(tableName2, getSimpleTableDefinitionAsBytes(tableName2))));\n        }});\n        Map<TableReference, TableDefinition> tables = Maps.newHashMap();\n        tables.put(tableName1, getSimpleTableDefinition(tableName1));\n        tables.put(tableName2, getSimpleTableDefinition(tableName2));\n        Schemas.createTables(kvs, tables);\n    }\n']",Create;TABLE;mockery;NAME;Namespace;vs;ables;Contains;one;vs,5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.291482476517558e-10;1.2005330063402653e-10;1.1641532182693481e-10,5,5,"[-5.831472396850586, -5.689876079559326, -6.268319129943848, -5.319537162780762, -5.468328952789307, -0.01747415028512478]",0.9826775193214417
3,"['    @Test\n    public void testDeleteTable() {\n        mockery.checking(new Expectations(){{\n            oneOf(kvs).dropTable(with(equal(TABLE_REF)));\n        }});\n        Schemas.deleteTable(kvs, TABLE_REF);\n    }\n']",Expectations;new;REF;delete;equal;one;REF;TABLE;Table;vs,9.313225746154785e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.864984035491943, -5.719446182250977, -6.315008640289307, -5.420518398284912, -5.453475475311279, -0.016773615032434464]",0.9833661913871765
3,"['    @Test\n    public void testDeleteTablesForSweepSchema() {\n        Set<TableReference> allTableNames = Sets.newHashSet();\n        allTableNames.add(TableReference.createFromFullyQualifiedName(""sweep.progress""));\n        allTableNames.add(TableReference.createFromFullyQualifiedName(""sweep.priority""));\n\n        mockery.checking(new Expectations(){{\n            oneOf(kvs).getAllTableNames(); will(returnValue(allTableNames));\n            oneOf(kvs).dropTables(allTableNames);\n            oneOf(kvs).getAllTableNames();\n        }});\n        Schemas.deleteTablesAndIndexes(SweepSchema.INSTANCE.getLatestSchema(), kvs);\n    }\n']",progress;Name;Sweep;create;Names;mockery;From;From;create;Set,4.190951585769653e-09;9.022187441587448e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.840177059173584, -5.6836090087890625, -6.285546779632568, -5.353545188903809, -5.480398654937744, -0.017218977212905884]",0.9829283356666565
3,"['    @Test\n    public void testWritePerf() throws ExecutionException, InterruptedException {\n        final long startTime = System.currentTimeMillis();\n        final Future<Pair<Long, Set<byte[]>>>\n            f1 = submitWriteJob(0, BATCH_SIZE / 4),\n            f2 = submitWriteJob(BATCH_SIZE / 4, BATCH_SIZE / 2),\n            f3 = submitWriteJob(BATCH_SIZE / 2, 3 * BATCH_SIZE / 4),\n            f4 = submitWriteJob(3 * BATCH_SIZE / 4, BATCH_SIZE);\n        final long rawBytes = f1.get().lhSide\n                              + f2.get().lhSide\n                              + f3.get().lhSide\n                              + f4.get().lhSide;\n        final long elapsedTime = System.currentTimeMillis() - startTime;\n        final double elapsedSeconds = elapsedTime / 1000.0;\n        final double megs = rawBytes / (1024.0 * 1024.0);\n        System.out.println(""MB = "" + megs);\n        System.out.println(""MB/s = "" + (megs/elapsedSeconds));\n    }\n']",megs;MB;Side;Time;Second;SIZE;final;current;Side;final,1.3387762010097504e-09;7.566995918750763e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.825392246246338, -5.643936634063721, -6.263124942779541, -5.371882915496826, -5.522351264953613, -0.017184527590870857]",0.9829623103141785
3,"['    @Test\n    public void testCreate() {\n        TableReference otherTable = TableReference.createWithEmptyNamespace(""yodog"");\n        db.createTable(TABLE, AtlasDbConstants.EMPTY_TABLE_METADATA);\n        db.createTable(otherTable, AtlasDbConstants.EMPTY_TABLE_METADATA);\n        db.createTable(TRANSACTION_TABLE, AtlasDbConstants.EMPTY_TABLE_METADATA);\n        assertEquals(ImmutableSet.of(TABLE, otherTable, TRANSACTION_TABLE),\n                db.getAllTableNames());\n    }\n']",METADATA;Atlas;TABLE;EMPTY;Atlas;TRANSACTION;Db;TABLE;Constants;other,1.57160684466362e-09;1.280568540096283e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.866418361663818, -5.74110746383667, -6.3341498374938965, -5.406551361083984, -5.478865146636963, -0.016617340967059135]",0.983519971370697
3,"['    @Test\n    public void testReadNoExist() {\n        final Cell cell = Cell.create(""r1"".getBytes(), COMMIT_TS_COLUMN);\n        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, 1L));\n        assertTrue(res.isEmpty());\n    }\n']",COMMIT;TABLE;COLUM;cell;cell;Cell;of;db;Cell;get,1.7462298274040222e-09;8.440110832452774e-10;6.402842700481415e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.890976905822754, -5.7612223625183105, -6.354348182678223, -5.460906028747559, -5.462882041931152, -0.01627340354025364]",0.9838582873344421
3,"['    @Test\n    public void testReadGood() {\n        final Cell cell = Cell.create(""r1"".getBytes(), ""2"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 1);\n        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, 2L));\n        assertEquals(1, res.size());\n        final Value value = res.get(cell);\n        assertEquals(1, value.getTimestamp());\n        assertEquals(""v1"", new String(value.getContents()));\n    }\n']",Good;final;db;get;Equals;Bytes;Value;put;TABLE;cell,1.8044374883174896e-09;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.41970007866621e-10;2.3283064365386963e-10;2.255546860396862e-10;2.1827872842550278e-10;1.964508555829525e-10;1.4551915228366852e-10,5,5,"[-5.820558071136475, -5.674449920654297, -6.2590861320495605, -5.344203472137451, -5.4513139724731445, -0.01753072813153267]",0.9826220273971558
3,"['    @Test\n    public void testReadGood2() {\n        final Cell cell = Cell.create(""r1"".getBytes(), ""2"".getBytes());\n        final Cell cell2 = Cell.create(""r"".getBytes(), ""12"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 1000);\n        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 1000);\n        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, 1001L));\n        final Value value = res.get(cell);\n        assertEquals(1000, value.getTimestamp());\n        assertEquals(""v1"", new String(value.getContents()));\n    }\n']",Good;Map;Cell;final;res;Cell;get;of;Read;new,9.313225746154785e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.2369127944111824e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.821287155151367, -5.652121067047119, -6.257504940032959, -5.341458797454834, -5.463191032409668, -0.01757231168448925]",0.9825813174247742
3,"['    @Test\n    public void testReadGood3() {\n        final Cell cell = Cell.create(""r1"".getBytes(), COMMIT_TS_COLUMN);\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), Long.MAX_VALUE - 3);\n        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, Long.MAX_VALUE - 2));\n        final Value value = res.get(cell);\n        assertEquals(Long.MAX_VALUE - 3, value.getTimestamp());\n        assertEquals(""v1"", new String(value.getContents()));\n    }\n']",TS;db;Read;final;res;Long;Long;Contents;db;of,1.6298145055770874e-09;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.510205376893282e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10,5,5,"[-5.820738315582275, -5.669173240661621, -6.259731292724609, -5.352358341217041, -5.449441909790039, -0.017516085878014565]",0.9826364517211914
3,"['    @Test\n    public void testReadGood4() {\n        final Cell cell = Cell.create(""r,1"".getBytes(), "",c,1,"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v,1"".getBytes()), 1);\n        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, 2L));\n        final Value value = res.get(cell);\n        assertEquals(1, value.getTimestamp());\n        assertEquals(""v,1"", new String(value.getContents()));\n    }\n']",Read;cell;Bytes;Contents;Cell;Timestamp;get;cell;final;of,4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.7462298274040222e-10,5,5,"[-5.816261291503906, -5.662168979644775, -6.250341892242432, -5.338412284851074, -5.442845344543457, -0.01766929402947426]",0.9824858903884888
3,"['    @Test\n    public void testReadBeforeTime() {\n        final Cell cell = Cell.create(""r1"".getBytes(), COMMIT_TS_COLUMN);\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);\n        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, 2L));\n        assertTrue(res.isEmpty());\n    }\n']",Time;Cell;Bytes;cell;db;Immutable;final;db;cell;get,1.3969838619232178e-09;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.857629776000977, -5.720798492431641, -6.310917854309082, -5.420976638793945, -5.47116756439209, -0.016719689592719078]",0.9834194183349609
3,"['    @Test\n    public void testGetRow() {\n        final Cell cell = Cell.create(""r1"".getBytes(), ""c1"".getBytes());\n        final Cell cell2 = Cell.create(""r1"".getBytes(), ""c2"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);\n        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);\n        final Map<Cell, Value> rows = db.getRows(TABLE, ImmutableList.of(""r1"".getBytes()), ColumnSelection.all(), 3);\n        assertEquals(2, rows.size());\n    }\n']",Column;ows;get;all;final;Immutable;Cell;final;List;Immutable,6.111804395914078e-10;2.6193447411060333e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.824124336242676, -5.6819748878479, -6.252528667449951, -5.327747344970703, -5.435111999511719, -0.017658518627285957]",0.9824965000152588
3,"['    @Test\n    public void testGetRange() {\n        final Cell cell = Cell.create(""r1"".getBytes(), ""c1"".getBytes());\n        final Cell cell2 = Cell.create(""r1"".getBytes(), ""c2"".getBytes());\n        final Cell cell3 = Cell.create(""r2"".getBytes(), ""c2"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);\n        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);\n        db.put(TABLE, ImmutableMap.of(cell3, ""v3"".getBytes()), 4);\n        final RangeRequest range = RangeRequest.builder().endRowExclusive(""r2"".getBytes()).build();\n        final ClosableIterator<? extends RowResult<Value>> it = db.getRange(TABLE, range, 10);\n        try {\n            final List<RowResult<Value>> list = Lists.newArrayList();\n            Iterators.addAll(list, it);\n            assertEquals(1, list.size());\n            final Map<Cell, Value> rows = db.getRows(TABLE, ImmutableList.of(""r1"".getBytes()), ColumnSelection.all(), 3);\n            assertEquals(2, rows.size());\n            final RowResult<Value> row = list.iterator().next();\n            final Map<Cell, Value> cellsFromRow = putAll(Maps.<Cell, Value>newHashMap(), row.getCells());\n            assertEquals(rows, cellsFromRow);\n        } finally {\n            it.close();\n        }\n    }\n']",Selection;Get;list;cell;Request;range;db;final;put;Bytes,2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.2369127944111824e-10,5,5,"[-5.812732219696045, -5.642951965332031, -6.236448764801025, -5.279911041259766, -5.478599548339844, -0.017916154116392136]",0.9822434782981873
3,"['    @Test\n    public void testGetRange2() {\n        final Cell cell = Cell.create("",r,1"".getBytes(), "",c,1,"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);\n        final RangeRequest range = RangeRequest.builder().build();\n        final ClosableIterator<RowResult<Value>> it = db.getRange(TABLE, range, 10);\n        try {\n            final List<RowResult<Value>> list = Lists.newArrayList();\n            Iterators.addAll(list, it);\n            assertEquals(1, list.size());\n            final RowResult<Value> row = list.iterator().next();\n            final Map<Cell, Value> cellsFromRow = putAll(Maps.<Cell, Value>newHashMap(), row.getCells());\n            final Map<Cell, Value> rows = db.getRows(TABLE, ImmutableList.of("",r,1"".getBytes()), ColumnSelection.all(), 3);\n            assertEquals(rows, cellsFromRow);\n        } finally {\n            it.close();\n        }\n    }\n']",Result;Cell;TABLE;Range;Range;cells;list;put;get;cells,2.6193447411060333e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.382431946694851e-10;1.3096723705530167e-10;1.2369127944111824e-10,5,5,"[-5.8195061683654785, -5.646236419677734, -6.238217353820801, -5.298126220703125, -5.477423191070557, -0.017791559919714928]",0.9823657870292664
3,"['    @Test\n    public void testGetRowCellOverlap() {\n        final Cell cell = Cell.create(""12"".getBytes(), ""34"".getBytes());\n        final Cell cell2 = Cell.create(""1"".getBytes(), ""23"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);\n        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);\n        final Map<Cell, Value> rows = db.getRows(TABLE, ImmutableList.of(""12"".getBytes()), ColumnSelection.all(), 3);\n        assertEquals(1, rows.size());\n    }\n']",final;Bytes;cell;rows;of;Bytes;TABLE;create;cell;ows,3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.473825588822365e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.847988605499268, -5.676382064819336, -6.2915215492248535, -5.35767126083374, -5.466649055480957, -0.017248738557100296]",0.9828991889953613
3,"['    @Test\n    public void testGetRangeCellOverlap() {\n        final Cell cell = Cell.create(""12"".getBytes(), ""34"".getBytes());\n        final Cell cell2 = Cell.create(""1"".getBytes(), ""235"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);\n        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);\n        ClosableIterator<? extends RowResult<Value>> it = db.getRange(TABLE, RangeRequest.builder().build(), 3);\n        try {\n            assertEquals(2, Iterators.size(it));\n        } finally {\n            it.close();\n        }\n        it = db.getRange(TABLE, RangeRequest.builder().endRowExclusive(""12"".getBytes()).build(), 3);\n        try {\n            assertEquals(1, Iterators.size(it));\n        } finally {\n            it.close();\n        }\n        it = db.getRange(TABLE, RangeRequest.builder().startRowInclusive(""12"".getBytes()).build(), 3);\n        try {\n            assertEquals(1, Iterators.size(it));\n        } finally {\n            it.close();\n        }\n    }\n']",cell;Closable;Exclusive;final;finally;Row;get;db;TABLE;of,4.656612873077393e-10;3.2741809263825417e-10;2.9831426218152046e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.3096723705530167e-10;1.3096723705530167e-10,5,5,"[-5.829115867614746, -5.651084899902344, -6.250577926635742, -5.2873215675354, -5.492542266845703, -0.017712393775582314]",0.9824436902999878
3,"['    @Test\n    public void testGetRangeCellOverlap2() {\n        final Cell cell = Cell.create(""1"".getBytes(), ""1"".getBytes());\n        final Cell cell2 = Cell.create(""12"".getBytes(), ""0"".getBytes());\n        final Cell cell3 = Cell.create(""1"".getBytes(), ""3"".getBytes());\n        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);\n        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);\n        db.put(TABLE, ImmutableMap.of(cell3, ""v3"".getBytes()), 2);\n        final ClosableIterator<? extends RowResult<Value>> it = db.getRange(TABLE, RangeRequest.builder().build(), 3);\n        try {\n            assertEquals(2, Iterators.size(it));\n        } finally {\n            it.close();\n        }\n    }\n']",Closable;Get;Range;final;TABLE;create;get;cell;get;final,7.203198038041592e-10;5.820766091346741e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.839169025421143, -5.660532474517822, -6.2732133865356445, -5.321714401245117, -5.488636493682861, -0.017447207123041153]",0.9827041029930115
3,"['    @Test\n    public void testDoubleWriteToTransactionTable() {\n        db.createTable(TRANSACTION_TABLE, AtlasDbConstants.EMPTY_TABLE_METADATA);\n        final Cell cell = Cell.create(""r1"".getBytes(), COMMIT_TS_COLUMN);\n        db.putUnlessExists(TRANSACTION_TABLE, ImmutableMap.of(cell, ""v1"".getBytes()));\n        try {\n            db.putUnlessExists(TRANSACTION_TABLE, ImmutableMap.of(cell, ""v2"".getBytes()));\n            fail();\n        } catch (KeyAlreadyExistsException e) {\n            // expected\n        }\n        final Map<Cell, Value> res = db.get(TRANSACTION_TABLE, ImmutableMap.of(cell, 1L));\n        final Value value = res.get(cell);\n        assertEquals(0L, value.getTimestamp());\n        assertEquals(""v1"", new String(value.getContents()));\n    }\n']",Double;Cell;cell;db;Equals;db;Equals;final;cell;Exists,1.4901161193847656e-08;7.450580596923828e-09;6.51925802230835e-09;2.561137080192566e-09;2.2118911147117615e-09;2.2118911147117615e-09;2.153683453798294e-09;1.862645149230957e-09;1.862645149230957e-09;1.5133991837501526e-09,5,5,"[-5.847626209259033, -5.684815883636475, -6.289244174957275, -5.356727123260498, -5.509699821472168, -0.017048239707946777]",0.9830962419509888
3,"['    @Test\n    public void testMetadata() {\n        db.putMetadataForTable(TABLE, ""yoyo"".getBytes());\n        final byte[] meta = db.getMetadataForTable(TABLE);\n        assertEquals(""yoyo"", new String(meta));\n    }\n']",Bytes;db;db;TABLE;oy;Table;put;For;Equals;final,9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;1.4551915228366852e-10,5,5,"[-5.876625061035156, -5.742883682250977, -6.327330112457275, -5.423794269561768, -5.438352584838867, -0.016692141070961952]",0.9834464192390442
3,"['    @Test\n    public void testCreateTables() {\n        db.putMetadataForTable(TABLE, ""yoyo"".getBytes());\n        final byte[] meta = db.getMetadataForTable(TABLE);\n        assertEquals(""yoyo"", new String(meta));\n    }\n']",meta;oy;Equals;Metadata;Bytes;TABLE;Table;For;db;new,1.0477378964424133e-09;9.313225746154785e-10;8.440110832452774e-10;7.8580342233181e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.877976894378662, -5.733407497406006, -6.339859485626221, -5.444507122039795, -5.449310779571533, -0.01655648835003376]",0.983579695224762
3,"['    @Test\n    public void testLockFile() {\n        try {\n            RocksDbKeyValueService db2 = RocksDbKeyValueService.create(""testdb""); // tempted to make IBM DB2 joke\n            assertTrue(""RocksDBKVS should protect against concurrent instances with a lock"", false);\n        } catch (RuntimeException e) {\n            assertTrue(""Unknown exception type thrown; expected IOException when two RocksDBs are pointed at same directory"", e.getCause() instanceof IOException);\n        }\n    }\n']",DB;Lock;directory;Db;against;should;IBM;concurrent;Rocks;Value,1.6298145055770874e-09;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.910869121551514, -5.7321391105651855, -6.432194232940674, -5.523359775543213, -5.585522174835205, -0.015421433374285698]",0.9846968650817871
3,"['    @Test\n    public void testProperCaseWord() throws Exception {\n        String[] words = new String[] { ""AA102"", ""nw"", ""dog"", ""daVID CHiu"", ""yu-gi-oh rules"" };\n        String[] results = new String[] { ""AA102"", ""Nw"", ""Dog"", ""David chiu"", ""Yu-gi-oh rules"" };\n        for (int i=0; i < words.length; i++) {\n            String result = TextUtils.properCaseWord(words[i]);\n            assertEquals(results[i], result);\n        }\n    }\n']",Dog;chiu;dog;Case;proper;nw;gi;words;oh;Proper,1.862645149230957e-09;1.2223608791828156e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10,5,5,"[-5.875373363494873, -5.752281665802002, -6.330878734588623, -5.381903171539307, -5.484457969665527, -0.016651576384902]",0.9834864139556885
3,"['    @Test\n    public void testProperCaseWords() throws Exception {\n        String[] words = new String[] { ""AA102"", ""nw"", ""dog"", ""daVID CHiu"", ""yu-gi-oh rules"",\n                ""b.j. penn the great,shawn sherk""};\n        String[] results = new String[] { ""AA102"", ""Nw"", ""Dog"", ""David Chiu"", ""Yu-Gi-Oh Rules"",\n                ""B.J. Penn The Great,Shawn Sherk""};\n        for (int i=0; i < words.length; i++) {\n            String result = TextUtils.properCaseWords(words[i]);\n            assertEquals(results[i], result);\n        }\n    }\n']",The;the;Chiu;Case;Dog;nw;da;sher;Words;results,1.0477378964424133e-09;8.149072527885437e-10;6.111804395914078e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.872580528259277, -5.725541114807129, -6.323794364929199, -5.374953269958496, -5.500260353088379, -0.016726255416870117]",0.9834128618240356
3,"['    @Test\n    public void testPluralization() throws Exception {\n        assertEquals("""", TextUtils.pluralize(null));\n        assertEquals("""", TextUtils.pluralize(""""));\n        assertEquals(""dogs"", TextUtils.pluralize(""dog""));\n        assertEquals(""keywords"", TextUtils.pluralize(""keywords""));\n    }\n']",Text;null;Utils;dog;dogs;Equals;Pluralization;Utils;keywords;Text,1.1641532182693481e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10,5,5,"[-5.836798191070557, -5.713262557983398, -6.291589736938477, -5.378399848937988, -5.417899131774902, -0.017271937802433968]",0.9828764796257019
3,"['    @Test\n    public void testStringForValue() throws Exception {\n        assertEquals(""0"", TextUtils.getStringForValue(0.0));\n        assertEquals(""5"", TextUtils.getStringForValue(5.0));\n        assertEquals(""100"", TextUtils.getStringForValue(100.0));\n        assertEquals(""9.2k"", TextUtils.getStringForValue(9204.0));\n        assertEquals(""9.5k"", TextUtils.getStringForValue(9499.0));\n        assertEquals(""10.0k"", TextUtils.getStringForValue(9999.0));\n        assertEquals(""100k"", TextUtils.getStringForValue(99999.0));\n        assertEquals(""100k"", TextUtils.getStringForValue(100000.0));\n        assertEquals(""1.0M"", TextUtils.getStringForValue(1000000.0));\n        assertEquals(""1.5M"", TextUtils.getStringForValue(1499999.0));\n        assertEquals(""10M"", TextUtils.getStringForValue(10000000.0));\n        assertEquals(""15M"", TextUtils.getStringForValue(14999999.0));\n        assertEquals(""100M"", TextUtils.getStringForValue(100000000.0));\n        assertEquals(""150M"", TextUtils.getStringForValue(149999990.0));\n        assertEquals(""1.0B"", TextUtils.getStringForValue(1000000000.0));\n        assertEquals(""1.5B"", TextUtils.getStringForValue(1499999900.0));\n        assertEquals(""10B"", TextUtils.getStringForValue(10000000000.0));\n        assertEquals(""15B"", TextUtils.getStringForValue(14999999000.0));\n        assertEquals(""100B"", TextUtils.getStringForValue(100000000000.0));\n        assertEquals(""150B"", TextUtils.getStringForValue(149999990000.0));\n        assertEquals(""1.0T"", TextUtils.getStringForValue(1000000000000.0));\n        assertEquals(""1.5T"", TextUtils.getStringForValue(1499999900000.0));\n        assertEquals(""10T"", TextUtils.getStringForValue(10000000000000.0));\n        assertEquals(""15T"", TextUtils.getStringForValue(14999999000000.0));\n        assertEquals(""100T"", TextUtils.getStringForValue(100000000000000.0));\n        assertEquals(""150T"", TextUtils.getStringForValue(149999990000000.0));\n        assertEquals(""1.0e+15"", TextUtils.getStringForValue(1000000000000000.0));\n        assertEquals(""1.5e+15"", TextUtils.getStringForValue(1499999900000000.0));\n\n        assertEquals(""-5"", TextUtils.getStringForValue(-5.0));\n        assertEquals(""-100"", TextUtils.getStringForValue(-100.0));\n        assertEquals(""-9.2k"", TextUtils.getStringForValue(-9204.0));\n        assertEquals(""-9.5k"", TextUtils.getStringForValue(-9499.0));\n        assertEquals(""-10.0k"", TextUtils.getStringForValue(-9999.0));\n        assertEquals(""-100k"", TextUtils.getStringForValue(-99999.0));\n        assertEquals(""-100k"", TextUtils.getStringForValue(-100000.0));\n        assertEquals(""-1.0M"", TextUtils.getStringForValue(-1000000.0));\n        assertEquals(""-1.5M"", TextUtils.getStringForValue(-1499999.0));\n        assertEquals(""-10M"", TextUtils.getStringForValue(-10000000.0));\n        assertEquals(""-15M"", TextUtils.getStringForValue(-14999999.0));\n        assertEquals(""-100M"", TextUtils.getStringForValue(-100000000.0));\n        assertEquals(""-150M"", TextUtils.getStringForValue(-149999990.0));\n        assertEquals(""-1.0B"", TextUtils.getStringForValue(-1000000000.0));\n        assertEquals(""-1.5B"", TextUtils.getStringForValue(-1499999900.0));\n        assertEquals(""-1.5B"", TextUtils.getStringForValue(-1500000001.0));\n        assertEquals(""-10B"", TextUtils.getStringForValue(-10000000000.0));\n        assertEquals(""-15B"", TextUtils.getStringForValue(-14999999000.0));\n        assertEquals(""-100B"", TextUtils.getStringForValue(-100000000000.0));\n        assertEquals(""-150B"", TextUtils.getStringForValue(-149999990000.0));\n        assertEquals(""-1.0T"", TextUtils.getStringForValue(-1000000000000.0));\n        assertEquals(""-1.5T"", TextUtils.getStringForValue(-1499999900000.0));\n        assertEquals(""-10T"", TextUtils.getStringForValue(-10000000000000.0));\n        assertEquals(""-15T"", TextUtils.getStringForValue(-14999999000000.0));\n        assertEquals(""-100T"", TextUtils.getStringForValue(-100000000000000.0));\n        assertEquals(""-150T"", TextUtils.getStringForValue(-149999990000000.0));\n        assertEquals(""-1.0e+15"", TextUtils.getStringForValue(-1000000000000000.0));\n        assertEquals(""-1.5e+15"", TextUtils.getStringForValue(-1499999900000000.0));\n    }\n']",Equals;For;Value;get;Utils;Utils;Value;For;Text;Equals,1.2732925824820995e-10;9.458744898438454e-11;8.731149137020111e-11;8.731149137020111e-11;8.36735125631094e-11;7.639755494892597e-11;7.275957614183426e-11;7.275957614183426e-11;6.548361852765083e-11;5.820766091346741e-11,5,5,"[-5.806704044342041, -5.632920265197754, -6.233748435974121, -5.259535789489746, -5.486963272094727, -0.018047524616122246]",0.9821143746376038
3,"['    @Test\n    public void testRemoveAllWhitespace() {\n        String before = ""  \\r\\n\\n\\r  \\t FOOOooo\\r\\n\\n\\n\\r\\t\\r o   \\n"";\n        String after = TextUtils.removeAllWhitespace(before);\n        assertEquals(""FOOOoooo"", after);\n    }\n']",Whitespace;ooo;before;All;OO;Remove;Utils;All;before;remove,6.693881005048752e-10;4.656612873077393e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11;-5.820766091346741e-11;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.923264503479004, -5.791325092315674, -6.4238057136535645, -5.481015205383301, -5.503672122955322, -0.015712622553110123]",0.984410285949707
3,"['    @Test\n    public void testTruncateStringToCharLength() {\n        String string = ""abcde"";\n        assertEquals(string, TextUtils.truncateStringToCharLength(string, 5, ""...""));\n        assertEquals(string, TextUtils.truncateStringToCharLength(string, 5, """"));\n        assertEquals(string, TextUtils.truncateStringToCharLength(string, 6, ""...""));\n        assertEquals(string, TextUtils.truncateStringToCharLength(string, 6, """"));\n        assertEquals(""a..."", TextUtils.truncateStringToCharLength(string, 4, ""...""));\n        assertEquals(""abcd"", TextUtils.truncateStringToCharLength(string, 4, """"));\n    }\n']",Truncate;Length;Length;truncate;abcd;Char;Text;string;string;Utils,9.022187441587448e-10;5.529727786779404e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.673470251262188e-10;1.5279510989785194e-10;1.5279510989785194e-10;1.4551915228366852e-10,5,5,"[-5.843388557434082, -5.693467140197754, -6.296583652496338, -5.349782943725586, -5.473267555236816, -0.017203275114297867]",0.9829438328742981
3,"['    @Test\n    public void testTruncateLabelString() {\n        // TODO(nackner): Add in more tests with UTF-8 characters, but they won\'t play nice with the\n        // build or people\'s Eclipse clients even if commented out.\n        String string = ""abcde"";\n        assertEquals(string, TextUtils.truncateLabelString(string, 5));\n        assertEquals(string, TextUtils.truncateLabelString(string, 6, ""...""));\n        assertEquals(""a..."", TextUtils.truncateLabelString(string, 4, ""...""));\n    }\n']",TOD;UTF;abcde;with;the;Equals;Text;characters;people's;clients,1.1641532182693481e-09;1.0477378964424133e-09;9.022187441587448e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.924884796142578, -5.776419639587402, -6.443066596984863, -5.505551338195801, -5.545434951782227, -0.015451600775122643]",0.984667181968689
3,"['    @Test\n    public void testPropertiesToXML()\n    {\n        // simple string kv pair\n        Properties p = new Properties();\n        p.setProperty(""MY_CONFIG_KEY"", ""MY_CONFIG_VALUE"");\n        String propertiesAsXML = TextUtils.storePropertiesToXMLString(p);\n        assertNotNull(propertiesAsXML);\n        p = TextUtils.loadPropertiesFromXMLString(propertiesAsXML);\n        assertNotNull(p.getProperty(""MY_CONFIG_KEY""));\n        assertEquals(""MY_CONFIG_VALUE"", p.getProperty(""MY_CONFIG_KEY""));\n\n        // embedded config\n        Properties pComplex = new Properties();\n        pComplex.setProperty(""MY_SUB_CONFIG"", TextUtils.storePropertiesToXMLString(p));\n        propertiesAsXML = TextUtils.storePropertiesToXMLString(pComplex);\n        assertNotNull(propertiesAsXML);\n        pComplex = TextUtils.loadPropertiesFromXMLString(propertiesAsXML);\n        p = TextUtils.loadPropertiesFromXMLString(pComplex.getProperty(""MY_SUB_CONFIG""));\n        assertNotNull(p.getProperty(""MY_CONFIG_KEY""));\n        assertEquals(""MY_CONFIG_VALUE"", p.getProperty(""MY_CONFIG_KEY""));\n    }\n']",pair;CONFIG;set;Properties;Properties;Properties;Text;properties;From;As,5.820766091346741e-10;4.94765117764473e-10;4.2928149923682213e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.964508555829525e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.2369127944111824e-10;1.1641532182693481e-10,5,5,"[-5.816143035888672, -5.694812297821045, -6.285060405731201, -5.314669132232666, -5.511011123657227, -0.017316460609436035]",0.9828327298164368
3,"['    @Test\n    public void testMaximalPrefix() throws Exception{\n        ArrayList<String> list1 = new ArrayList<String>(7);\n        list1.add(""abcdef"");\n        list1.add(""abcdefg"");\n        list1.add(""abcdefgh"");\n        list1.add(""abcd"");\n        list1.add(""abcdefl58a"");\n        list1.add(""abcdeeeeee"");\n        list1.add(""abcde888"");\n        assertEquals(""Wrong maximal prefix"",""abcd"",TextUtils.findMaximalPrefix(list1));\n\n        list1.clear();\n        assertEquals(""Should be empty string"","""",TextUtils.findMaximalPrefix(list1));\n        assertEquals(""Should be empty string"","""",TextUtils.findMaximalPrefix(null));\n\n        list1.add(""abcd"");\n        assertEquals(""Should be abcd"",""abcd"",TextUtils.findMaximalPrefix(list1));\n        list1.add(""efgh"");\n        list1.add(""ifht"");\n\n        assertEquals(""Should be empty string"","""",TextUtils.findMaximalPrefix(list1));\n    }\n']",abcdeeeeee;prefix;abcdef;abcdefgh;new;abcde;Prefix;List;Maximal;Maximal,1.076841726899147e-09;6.984919309616089e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.2373569663614035e-10;1.8917489796876907e-10;1.8917489796876907e-10,5,5,"[-5.842021942138672, -5.6666646003723145, -6.270890235900879, -5.288303375244141, -5.484570026397705, -0.017607685178518295]",0.9825464487075806
3,"['    @Test\n    public void testHexConverter(){\n        byte[] bytes = new byte[]{(byte)255, (byte)255, 0, 0};\n        System.out.println(Arrays.toString(bytes) +"" -> 0x"" + TextUtils.byteArrayToHexString(bytes));\n        assertEquals(""ffff0000"", TextUtils.byteArrayToHexString(bytes));\n    }\n']",to;ex;Arrays;bytes;System;byte;Text;Array;byte;Equals,9.313225746154785e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.848176956176758, -5.676383018493652, -6.272492408752441, -5.353766441345215, -5.430851459503174, -0.01745985820889473]",0.9826917052268982
3,['    @Test\n    public void testParseDate()\n    {\n        helperTestParseDate(new Date());\n    }\n'],Date;Parse;Parse;Date;new;helper;Date,1.3969838619232178e-09;9.022187441587448e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;-2.3283064365386963e-10;-1.1641532182693481e-09,5,5,"[-5.873786449432373, -5.685873031616211, -6.310632228851318, -5.4645795822143555, -5.400911331176758, -0.0169114638119936]",0.983230710029602
3,"['    @Test\n    public void testParseDateFeb29() {\n        helperTestParseDate(new Date(2012 - 1900, 1, 29));\n    }\n']",Parse;helper;Date;Date;Feb;new;Date;Parse,1.4260876923799515e-09;2.9103830456733704e-10;2.3283064365386963e-10;2.9103830456733704e-11;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.94765117764473e-10,5,5,"[-5.860647201538086, -5.689785480499268, -6.303400039672852, -5.46051549911499, -5.398043155670166, -0.01698002964258194]",0.9831634163856506
3,"['    @Test\n    public void testcleanUTF8String() throws Exception {\n        String cleanString = ""Hello World"";\n        String dirtyString = ""Hello\\u0007World"";\n\n        String cleanedString = TextUtils.cleanUTF8String(dirtyString);\n        assertEquals(cleanString, cleanedString);\n        assertEquals(cleanString, TextUtils.cleanUTF8String(cleanString));\n    }\n']",Hello;World;cleaned;UTF;Utils;dirty;clean;Utils;World;Text,2.3283064365386963e-09;9.313225746154785e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;1.1641532182693481e-10;1.4551915228366852e-11;1.4551915228366852e-11;0.0;-1.4551915228366852e-11,5,5,"[-5.873340129852295, -5.72629451751709, -6.333589553833008, -5.400045871734619, -5.460831642150879, -0.016754155978560448]",0.983385443687439
3,"['    @Test\n    public void testHashString() throws Exception {\n        String testStr = null;\n        long hash = TextUtils.hashString(testStr);\n        assertEquals(0, hash);\n\n        testStr = ""Allen cheats at Race for the Galaxy."";\n        hash = TextUtils.hashString(testStr);\n        assertEquals(1133932183, hash);\n    }\n']",hash;Exception;Allen;hash;Str;Str;Str;the;hash;at,1.0477378964424133e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.854093551635742, -5.689815044403076, -6.284790515899658, -5.369076728820801, -5.438469409942627, -0.017265494912862778]",0.9828826785087585
3,"['    @Test\n    public void testEncodeDecodeStringUTF8() throws Exception {\n        String str = ""THIS IS A \\u1234 TEST STRING"";\n        byte[] bytes = TextUtils.convertStringToBytesUtf8(str);\n        assertTrue(Arrays.equals(str.getBytes(""UTF-8""), bytes));\n        assertEquals(str, TextUtils.convertBytesToStringUtf8(bytes));\n    }\n']",STRING;UTF;str;Ut;Ut;Encode;IS;True;str;Utils,1.4551915228366852e-09;4.0745362639427185e-10;3.2014213502407074e-10;2.6921043172478676e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;7.275957614183426e-11,5,5,"[-5.8681840896606445, -5.7240142822265625, -6.321519374847412, -5.4028449058532715, -5.4756598472595215, -0.01672203466296196]",0.9834169745445251
3,"['    @Test\n    public void testEscapeHtmlBasic() {\n        String input1 = ""\\""A\\"" \\""b\\""; 1 < 2 && 3 > 2"";\n        String output1 = ""&quot;A&quot; &quot;b&quot;; 1 &lt; 2 &amp;&amp; 3 &gt; 2"";\n        assertTrue(output1.equals(TextUtils.escapeHtml(input1)));\n    }\n']",gt;Basic;escape;input;tml;quot;equals;quot;Utils;input,9.89530235528946e-10;8.149072527885437e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.9431023597717285, -5.815737247467041, -6.438408374786377, -5.456111431121826, -5.531676769256592, -0.015552896074950695]",0.984567403793335
3,"['    @Test\n    public void testEscapeHtmlWhitespaceHandling() {\n        String input2 = ""a b  c   d    e"";\n        String output2 = ""a b &nbsp;c &nbsp; d &nbsp; &nbsp;e"";\n        assertTrue(output2.equals(TextUtils.escapeHtml(input2)));\n\n        String input3 = ""line 1\\nline 2 \\n\\n line4"";\n        String output3f = ""line 1<br/>line 2 <br/><br/> line4"";\n        String output3t = ""line 1line 2  line4"";\n        assertTrue(output3f.equals(TextUtils.escapeHtml(input3, false)));\n        assertTrue(output3t.equals(TextUtils.escapeHtml(input3, true)));\n    }\n']",tml;br;escape;line;bsp;bsp;True;line;br;equals,5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.255546860396862e-10;2.1100277081131935e-10,5,5,"[-5.908316135406494, -5.772663593292236, -6.38515043258667, -5.389517307281494, -5.546751499176025, -0.016108017414808273]",0.9840211272239685
3,"['    @Test\n    public void testEscapeHtmlTwoByteUnicode() {\n        assertTrue(""&#192;"".equals(TextUtils.escapeHtml(u00C0)));\n        assertTrue(""&#256;"".equals(TextUtils.escapeHtml(u0100)));\n        assertTrue(""&#288;"".equals(TextUtils.escapeHtml(u0120)));\n    }\n']",Two;True;Text;escape;escape;escape;tml;equals;tml;Text,1.862645149230957e-09;5.529727786779404e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-5.820766091346741e-11,5,5,"[-5.901240825653076, -5.748727321624756, -6.359837055206299, -5.423929214477539, -5.4675984382629395, -0.016417769715189934]",0.9837162494659424
3,"['    @Test\n    public void testGetRowColumnSelection() {\n        Cell cell1 = Cell.create(PtBytes.toBytes(""row""), PtBytes.toBytes(""col1""));\n        Cell cell2 = Cell.create(PtBytes.toBytes(""row""), PtBytes.toBytes(""col2""));\n        Cell cell3 = Cell.create(PtBytes.toBytes(""row""), PtBytes.toBytes(""col3""));\n        byte[] val = PtBytes.toBytes(""val"");\n\n        keyValueService.put(TEST_TABLE, ImmutableMap.of(cell1, val, cell2, val, cell3, val), 0);\n\n        Map<Cell, Value> rows1 = keyValueService.getRows(\n                TEST_TABLE,\n                ImmutableSet.of(cell1.getRowName()),\n                ColumnSelection.all(),\n                1);\n        Assert.assertEquals(ImmutableSet.of(cell1, cell2, cell3), rows1.keySet());\n\n        Map<Cell, Value> rows2 = keyValueService.getRows(\n                TEST_TABLE,\n                ImmutableSet.of(cell1.getRowName()),\n                ColumnSelection.create(ImmutableList.of(cell1.getColumnName())),\n                1);\n        assertEquals(ImmutableSet.of(cell1), rows2.keySet());\n\n        Map<Cell, Value> rows3 = keyValueService.getRows(\n                TEST_TABLE,\n                ImmutableSet.of(cell1.getRowName()),\n                ColumnSelection.create(ImmutableList.of(cell1.getColumnName(), cell3.getColumnName())),\n                1);\n        assertEquals(ImmutableSet.of(cell1, cell3), rows3.keySet());\n        Map<Cell, Value> rows4 = keyValueService.getRows(\n                TEST_TABLE,\n                ImmutableSet.of(cell1.getRowName()),\n                ColumnSelection.create(ImmutableList.<byte[]>of()),\n                1);\n\n        // This has changed recently - now empty column set means\n        // that all columns are selected.\n        assertEquals(ImmutableSet.of(cell1, cell2, cell3), rows4.keySet());\n    }\n']",Selection;col;Column;put;cell;Immutable;Selection;Cell;Service;of,3.055902197957039e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.673470251262188e-10;1.4551915228366852e-10;1.3460521586239338e-10;1.3096723705530167e-10;1.3096723705530167e-10,5,5,"[-5.82375955581665, -5.670111656188965, -6.269137859344482, -5.298808574676514, -5.500760555267334, -0.017531782388687134]",0.9826210141181946
3,"['    @Test\n    public void testGetRowsAllColumns() {\n        putTestDataForSingleTimestamp();\n        Map<Cell, Value> values = keyValueService.getRows(TEST_TABLE,\n                                                          Arrays.asList(row1, row2),\n                                                          ColumnSelection.all(),\n                                                          TEST_TIMESTAMP + 1);\n        assertEquals(4, values.size());\n        assertEquals(null, values.get(Cell.create(row1, column1)));\n        assertArrayEquals(value10, values.get(Cell.create(row1, column0)).getContents());\n        assertArrayEquals(value12, values.get(Cell.create(row1, column2)).getContents());\n        assertArrayEquals(value21, values.get(Cell.create(row2, column1)).getContents());\n        assertArrayEquals(value22, values.get(Cell.create(row2, column2)).getContents());\n    }\n']",Selection;TABLE;Timestamp;IMESTAMP;TEST;create;Column;Data;column;get,6.402842700481415e-10;4.874891601502895e-10;4.874891601502895e-10;4.3655745685100555e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0913936421275139e-10,5,5,"[-5.842081546783447, -5.673213481903076, -6.276429653167725, -5.3179240226745605, -5.490840435028076, -0.01739741675555706]",0.9827530384063721
3,"['    @Test\n    public void testGetRowsWhenMultipleVersions() {\n        putTestDataForMultipleTimestamps();\n        Map<Cell, Value> result = keyValueService.getRows(\n                TEST_TABLE,\n                ImmutableSet.of(row0),\n                ColumnSelection.all(),\n                TEST_TIMESTAMP + 1);\n        assertEquals(1, result.size());\n        assertTrue(result.containsKey(Cell.create(row0, column0)));\n        assertTrue(result.containsValue(Value.create(value0_t0, TEST_TIMESTAMP)));\n\n        result = keyValueService.getRows(\n                TEST_TABLE,\n                ImmutableSet.of(row0),\n                ColumnSelection.all(),\n                TEST_TIMESTAMP + 2);\n        assertEquals(1, result.size());\n        assertTrue(result.containsKey(Cell.create(row0, column0)));\n        assertTrue(result.containsValue(Value.create(value0_t1, TEST_TIMESTAMP + 1)));\n    }\n']",Multiple;Multiple;TABLE;row;ows;Immutable;TEST;create;column;Data,6.984919309616089e-10;4.94765117764473e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0190782379359007e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.2369127944111824e-10;1.1641532182693481e-10,5,5,"[-5.8233819007873535, -5.646397113800049, -6.249584674835205, -5.307212829589844, -5.485413074493408, -0.017676906660199165]",0.9824784398078918
3,"['    @Test\n    public void testGetRowsWhenMultipleVersionsAndColumnsSelected() {\n        putTestDataForMultipleTimestamps();\n        Map<Cell, Value> result = keyValueService.getRows(\n                TEST_TABLE,\n                ImmutableSet.of(row0),\n                ColumnSelection.create(ImmutableSet.of(column0)),\n                TEST_TIMESTAMP + 1);\n        assertEquals(1, result.size());\n        assertTrue(result.containsKey(Cell.create(row0, column0)));\n        assertTrue(result.containsValue(Value.create(value0_t0, TEST_TIMESTAMP)));\n\n        result = keyValueService.getRows(\n                TEST_TABLE,\n                ImmutableSet.of(row0),\n                ColumnSelection.create(ImmutableSet.of(column0)),\n                TEST_TIMESTAMP + 2);\n        assertEquals(1, result.size());\n        assertTrue(result.containsKey(Cell.create(row0, column0)));\n        assertTrue(result.containsValue(Value.create(value0_t1, TEST_TIMESTAMP + 1)));\n    }\n']",IMESTAMP;IMESTAMP;put;Immutable;Get;TEST;Multiple;Value;Cell;TEST,6.83940015733242e-10;5.238689482212067e-10;3.4924596548080444e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.830295562744141, -5.654680252075195, -6.265694618225098, -5.329242706298828, -5.499002933502197, -0.01742834597826004]",0.9827227592468262
3,"['    @Test\n    public void testGetWhenMultipleVersions() {\n        putTestDataForMultipleTimestamps();\n        Cell cell = Cell.create(row0, column0);\n        Value val0 = Value.create(value0_t0, TEST_TIMESTAMP);\n        Value val1 = Value.create(value0_t1, TEST_TIMESTAMP + 1);\n\n        assertTrue(keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP)).isEmpty());\n\n        Map<Cell, Value> result = keyValueService.get(\n                TEST_TABLE,\n                ImmutableMap.of(cell, TEST_TIMESTAMP + 1));\n        assertTrue(result.containsKey(cell));\n        assertEquals(1, result.size());\n        assertTrue(result.containsValue(val0));\n\n        result = keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP + 2));\n\n        assertEquals(1, result.size());\n        assertTrue(result.containsKey(cell));\n        assertTrue(result.containsValue(val1));\n\n        result = keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP + 3));\n\n        assertEquals(1, result.size());\n        assertTrue(result.containsKey(cell));\n        assertTrue(result.containsValue(val1));\n    }\n']",Timestamps;For;When;Versions;Get;IMESTAMP;Cell;IMESTAMP;column;size,5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.794545650482178, -5.625099182128906, -6.225196361541748, -5.298199653625488, -5.475455284118652, -0.017978796735405922]",0.9821818470954895
3,"['    @Test\n    public void testGetRowsWithSelectedColumns() {\n        putTestDataForSingleTimestamp();\n        ColumnSelection columns1and2 = ColumnSelection.create(Arrays.asList(column1, column2));\n        Map<Cell, Value> values = keyValueService.getRows(TEST_TABLE,\n                                                          Arrays.asList(row1, row2),\n                                                          columns1and2,\n                                                          TEST_TIMESTAMP + 1);\n        assertEquals(3, values.size());\n        assertEquals(null, values.get(Cell.create(row1, column0)));\n        assertArrayEquals(value12, values.get(Cell.create(row1, column2)).getContents());\n        assertArrayEquals(value21, values.get(Cell.create(row2, column1)).getContents());\n        assertArrayEquals(value22, values.get(Cell.create(row2, column2)).getContents());\n    }\n']",IMESTAMP;Single;TEST;ows;row;Value;columns;List;Selection;column,2.852175384759903e-09;1.4551915228366852e-09;6.984919309616089e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.5279510989785194e-10;1.4551915228366852e-10,5,5,"[-5.846838474273682, -5.677260875701904, -6.282032012939453, -5.3218913078308105, -5.499515056610107, -0.017302636057138443]",0.982846200466156
3,"['    @Test\n    public void testGetLatestTimestamps() {\n        putTestDataForMultipleTimestamps();\n        Map<Cell, Long> timestamps = keyValueService.getLatestTimestamps(TEST_TABLE,\n                ImmutableMap.of(Cell.create(row0, column0), TEST_TIMESTAMP + 2));\n        assertTrue(""Incorrect number of values returned."", timestamps.size() == 1);\n        assertEquals(""Incorrect value returned."", new Long(TEST_TIMESTAMP + 1),\n                timestamps.get(Cell.create(row0, column0)));\n    }\n']",TEST;IMESTAMP;IMESTAMP;row;Immutable;Timestamps;column;Cell;new;Long,1.0477378964424133e-09;8.440110832452774e-10;7.566995918750763e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.826358318328857, -5.666824817657471, -6.270437717437744, -5.426459312438965, -5.463387489318848, -0.01708187349140644]",0.9830632209777832
3,"['    @Test\n    public void testGetWithMultipleVersions() {\n        putTestDataForMultipleTimestamps();\n        Map<Cell, Value> values = keyValueService.get(TEST_TABLE,\n                ImmutableMap.of(Cell.create(row0, column0), TEST_TIMESTAMP + 2));\n        assertTrue(""Incorrect number of values returned."", values.size() == 1);\n        assertEquals(""Incorrect value returned."", Value.create(value0_t1, TEST_TIMESTAMP + 1),\n                values.get(Cell.create(row0, column0)));\n    }\n']",of;TABLE;Service;TEST;True;Value;row;IMESTAMP;Multiple;IMESTAMP,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.852216720581055, -5.705585956573486, -6.310491561889648, -5.415412902832031, -5.485330581665039, -0.01675216294825077]",0.9833873510360718
3,"['    @Test\n    public void testGetAllTableNames() {\n        final TableReference anotherTable = TableReference.createWithEmptyNamespace(""AnotherTable"");\n        assertEquals(1, keyValueService.getAllTableNames().size());\n        assertEquals(TEST_TABLE, keyValueService.getAllTableNames().iterator().next());\n        keyValueService.createTable(anotherTable, AtlasDbConstants.GENERIC_TABLE_METADATA);\n        assertEquals(2, keyValueService.getAllTableNames().size());\n        assertTrue(keyValueService.getAllTableNames().contains(anotherTable));\n        assertTrue(keyValueService.getAllTableNames().contains(TEST_TABLE));\n        keyValueService.dropTable(anotherTable);\n        assertEquals(1, keyValueService.getAllTableNames().size());\n        assertEquals(TEST_TABLE, keyValueService.getAllTableNames().iterator().next());\n    }\n']",Db;Namespace;Reference;Names;Get;Names;Constants;Names;All;Service,2.561137080192566e-09;1.5133991837501526e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.167706593871117e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;4.3655745685100555e-10,5,5,"[-5.839432716369629, -5.706850051879883, -6.302728176116943, -5.353128433227539, -5.484558582305908, -0.017093945294618607]",0.9830514192581177
3,"['    @Test\n    public void testTableMetadata() {\n        assertEquals(AtlasDbConstants.GENERIC_TABLE_METADATA.length, keyValueService.getMetadataForTable(TEST_TABLE).length);\n        keyValueService.putMetadataForTable(TEST_TABLE, ArrayUtils.EMPTY_BYTE_ARRAY);\n        assertEquals(0, keyValueService.getMetadataForTable(TEST_TABLE).length);\n        keyValueService.putMetadataForTable(TEST_TABLE, metadata0);\n        assertTrue(Arrays.equals(metadata0, keyValueService.getMetadataForTable(TEST_TABLE)));\n    }\n']",las;Db;Constants;Arrays;Metadata;Metadata;length;TABLE;TABLE;TABLE,2.9103830456733704e-09;1.6298145055770874e-09;8.149072527885437e-10;6.984919309616089e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.876765251159668, -5.755576133728027, -6.343413829803467, -5.413689613342285, -5.484224796295166, -0.016469014808535576]",0.9836658835411072
3,['    @Test\n    public void testGetRange() {\n        testGetRange(reverseRangesSupported());\n    }\n'],reverse;Range;Supported;Get;Range;Get;anges,9.313225746154785e-10;4.0745362639427185e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-5.820766091346741e-10,5,5,"[-5.89125919342041, -5.7041778564453125, -6.337614059448242, -5.473119735717773, -5.4057488441467285, -0.01669131964445114]",0.9834471940994263
3,"['    @Test\n    public void testGetAllTimestamps() {\n        putTestDataForMultipleTimestamps();\n        final Cell cell = Cell.create(row0, column0);\n        final Set<Cell> cellSet = ImmutableSet.of(cell);\n        Multimap<Cell, Long> timestamps = keyValueService.getAllTimestamps(\n                TEST_TABLE,\n                cellSet,\n                TEST_TIMESTAMP);\n        assertEquals(0, timestamps.size());\n\n        timestamps = keyValueService.getAllTimestamps(TEST_TABLE, cellSet, TEST_TIMESTAMP + 1);\n        assertEquals(1, timestamps.size());\n        assertTrue(timestamps.containsEntry(cell, TEST_TIMESTAMP));\n\n        timestamps = keyValueService.getAllTimestamps(TEST_TABLE, cellSet, TEST_TIMESTAMP + 2);\n        assertEquals(2, timestamps.size());\n        assertTrue(timestamps.containsEntry(cell, TEST_TIMESTAMP));\n        assertTrue(timestamps.containsEntry(cell, TEST_TIMESTAMP + 1));\n\n        assertEquals(\n                timestamps,\n                keyValueService.getAllTimestamps(TEST_TABLE, cellSet, TEST_TIMESTAMP + 3));\n    }\n']",IMESTAMP;IMESTAMP;Multimap;Timestamps;TABLE;Service;Service;cell;final;cell,8.149072527885437e-10;6.693881005048752e-10;5.238689482212067e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.81055212020874, -5.646245002746582, -6.245394706726074, -5.323314666748047, -5.483222484588623, -0.017653364688158035]",0.9825016856193542
3,"['    @Test\n    public void testDelete() {\n        putTestDataForSingleTimestamp();\n        assertEquals(3, Iterators.size(keyValueService.getRange(\n                TEST_TABLE,\n                RangeRequest.all(),\n                TEST_TIMESTAMP + 1)));\n        keyValueService.delete(\n                TEST_TABLE,\n                ImmutableMultimap.of(Cell.create(row0, column0), TEST_TIMESTAMP));\n        assertEquals(3, Iterators.size(keyValueService.getRange(\n                TEST_TABLE,\n                RangeRequest.all(),\n                TEST_TIMESTAMP + 1)));\n        keyValueService.delete(\n                TEST_TABLE,\n                ImmutableMultimap.of(Cell.create(row0, column1), TEST_TIMESTAMP));\n        assertEquals(2, Iterators.size(keyValueService.getRange(\n                TEST_TABLE,\n                RangeRequest.all(),\n                TEST_TIMESTAMP + 1)));\n        keyValueService.delete(\n                TEST_TABLE,\n                ImmutableMultimap.of(Cell.create(row1, column0), TEST_TIMESTAMP));\n        assertEquals(2, Iterators.size(keyValueService.getRange(\n                TEST_TABLE,\n                RangeRequest.all(),\n                TEST_TIMESTAMP + 1)));\n        keyValueService.delete(\n                TEST_TABLE,\n                ImmutableMultimap.of(Cell.create(row1, column2), TEST_TIMESTAMP));\n        assertEquals(1, Iterators.size(keyValueService.getRange(\n                TEST_TABLE,\n                RangeRequest.all(),\n                TEST_TIMESTAMP + 1)));\n    }\n']",Delete;Range;put;IMESTAMP;TABLE;get;Request;delete;Value;TEST,4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.81800651550293, -5.640109062194824, -6.236013412475586, -5.279120445251465, -5.475520133972168, -0.017928214743733406]",0.9822314381599426
3,"['    @Test\n    public void testDeleteMultipleVersions() {\n        putTestDataForMultipleTimestamps();\n        Cell cell = Cell.create(row0, column0);\n        ClosableIterator<RowResult<Value>> result = keyValueService.getRange(\n                TEST_TABLE,\n                RangeRequest.all(),\n                TEST_TIMESTAMP + 1);\n        assertTrue(result.hasNext());\n\n        keyValueService.delete(TEST_TABLE, ImmutableMultimap.of(cell, TEST_TIMESTAMP));\n\n        result = keyValueService.getRange(TEST_TABLE, RangeRequest.all(), TEST_TIMESTAMP + 1);\n        assertTrue(!result.hasNext());\n\n        result = keyValueService.getRange(TEST_TABLE, RangeRequest.all(), TEST_TIMESTAMP + 2);\n        assertTrue(result.hasNext());\n    }\n']",Versions;Timestamps;of;TABLE;Cell;Cell;Range;EST;EST;result,1.3387762010097504e-09;5.384208634495735e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.4551915228366852e-10;1.382431946694851e-10;1.3096723705530167e-10,5,5,"[-5.834165573120117, -5.6700029373168945, -6.278507709503174, -5.362192630767822, -5.491445064544678, -0.017209719866514206]",0.9829376339912415
3,"['    @Test\n    public void testPutWithTimestamps() {\n        putTestDataForMultipleTimestamps();\n        final Cell cell = Cell.create(row0, column0);\n        final Value val1 = Value.create(value0_t1, TEST_TIMESTAMP + 1);\n        final Value val5 = Value.create(value0_t5, TEST_TIMESTAMP + 5);\n        keyValueService.putWithTimestamps(TEST_TABLE, ImmutableMultimap.of(cell, val5));\n        assertEquals(\n                val5,\n                keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP + 6)).get(cell));\n        assertEquals(\n                val1,\n                keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP + 5)).get(cell));\n        keyValueService.delete(TEST_TABLE, ImmutableMultimap.of(cell, TEST_TIMESTAMP + 5));\n    }\n']",For;IMESTAMP;put;IMESTAMP;EST;val;TABLE;Cell;Value;delete,3.5652192309498787e-10;3.055902197957039e-10;2.6193447411060333e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.801935195922852, -5.637509346008301, -6.232391357421875, -5.329498291015625, -5.466414451599121, -0.01777821034193039]",0.9823790192604065
3,['    @Test\n    public void testGetRangeWithHistory() {\n        testGetRangeWithHistory(false);\n        if (reverseRangesSupported()) {\n            testGetRangeWithHistory(true);\n        }\n    }\n'],History;reverse;Range;Range;Supported;Get;Get;Get;false;true,2.3283064365386963e-09;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;1.7462298274040222e-10;1.7462298274040222e-10;8.731149137020111e-11;4.3655745685100555e-11;1.4551915228366852e-11,5,5,"[-5.885047435760498, -5.7027668952941895, -6.309347152709961, -5.406153678894043, -5.441456317901611, -0.016900798305869102]",0.9832413196563721
3,['    @Test\n    public void testGetRangeWithTimestamps() {\n        testGetRangeWithTimestamps(false);\n        if (reverseRangesSupported()) {\n            testGetRangeWithTimestamps(true);\n        }\n    }\n'],Timestamps;Get;Timestamps;Timestamps;Range;true;reverse;Get;if;anges,7.421476766467094e-10;6.548361852765083e-10;4.656612873077393e-10;3.128661774098873e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;-5.820766091346741e-11,5,5,"[-5.8750715255737305, -5.703715801239014, -6.297262191772461, -5.394837379455566, -5.442829132080078, -0.016994329169392586]",0.9831493496894836
3,"['    @Test\n    public void testKeyAlreadyExists() {\n        // Test that it does not throw some random exceptions\n        putTestDataForSingleTimestamp();\n        try {\n            putTestDataForSingleTimestamp();\n            // Legal\n        } catch (KeyAlreadyExistsException e) {\n            Assert.fail(""Must not throw when overwriting with same value!"");\n        }\n\n        keyValueService.putWithTimestamps(\n                TEST_TABLE,\n                ImmutableMultimap.of(\n                        Cell.create(row0, column0),\n                        Value.create(value00, TEST_TIMESTAMP + 1)));\n        try {\n            keyValueService.putWithTimestamps(\n                    TEST_TABLE,\n                    ImmutableMultimap.of(\n                            Cell.create(row0, column0),\n                            Value.create(value00, TEST_TIMESTAMP + 1)));\n            // Legal\n        } catch (KeyAlreadyExistsException e) {\n            Assert.fail(""Must not throw when overwriting with same value!"");\n        }\n\n        try {\n            keyValueService.putWithTimestamps(TEST_TABLE, ImmutableMultimap.of(Cell.create(row0, column0), Value.create(value01, TEST_TIMESTAMP + 1)));\n            // Legal\n        } catch (KeyAlreadyExistsException e) {\n            // Legal\n        }\n\n        // The first try might not throw as putUnlessExists must only be exclusive with other putUnlessExists.\n        try {\n            keyValueService.putUnlessExists(TEST_TABLE, ImmutableMap.of(Cell.create(row0, column0), value00));\n            // Legal\n        } catch (KeyAlreadyExistsException e) {\n            // Legal\n        }\n\n        try {\n            keyValueService.putUnlessExists(TEST_TABLE, ImmutableMap.of(Cell.create(row0, column0), value00));\n            Assert.fail(""putUnlessExists must throw when overwriting the same cell!"");\n        } catch (KeyAlreadyExistsException e) {\n            // Legal\n        }\n    }\n']",Legal;some;fail;Timestamp;Exists;put;Key;TEST;Cell;IMESTAMP,3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.843472480773926, -5.658817291259766, -6.275878429412842, -5.324340343475342, -5.520540237426758, -0.017290333285927773]",0.9828581809997559
3,"['    @Test\n    public void testAddGCSentinelValues() {\n        putTestDataForMultipleTimestamps();\n        Cell cell = Cell.create(row0, column0);\n\n        Multimap<Cell, Long> timestampsBefore = keyValueService.getAllTimestamps(TEST_TABLE, ImmutableSet.of(cell), Long.MAX_VALUE);\n        assertEquals(2, timestampsBefore.size());\n        assertTrue(!timestampsBefore.containsEntry(cell, Value.INVALID_VALUE_TIMESTAMP));\n\n        keyValueService.addGarbageCollectionSentinelValues(TEST_TABLE, ImmutableSet.of(cell));\n\n        Multimap<Cell, Long> timestampsAfter1 = keyValueService.getAllTimestamps(TEST_TABLE, ImmutableSet.of(cell), Long.MAX_VALUE);\n        assertEquals(3, timestampsAfter1.size());\n        assertTrue(timestampsAfter1.containsEntry(cell, Value.INVALID_VALUE_TIMESTAMP));\n\n        keyValueService.addGarbageCollectionSentinelValues(TEST_TABLE, ImmutableSet.of(cell));\n\n        Multimap<Cell, Long> timestampsAfter2 = keyValueService.getAllTimestamps(TEST_TABLE, ImmutableSet.of(cell), Long.MAX_VALUE);\n        assertEquals(3, timestampsAfter2.size());\n        assertTrue(timestampsAfter2.containsEntry(cell, Value.INVALID_VALUE_TIMESTAMP));\n    }\n']",CSentinel;VALUE;Garbage;VALUE;Service;Values;timestamps;Value;Before;Sentinel,9.022187441587448e-10;5.238689482212067e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.6370904631912708e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.799682140350342, -5.617259979248047, -6.2452592849731445, -5.350802421569824, -5.500399589538574, -0.01758601702749729]",0.9825678467750549
3,"['    @Test\n    public void testGetRangeThrowsOnError() {\n        try {\n            keyValueService.getRange(TEST_NONEXISTING_TABLE, RangeRequest.all(), Long.MAX_VALUE).hasNext();\n            Assert.fail(""getRange must throw on failure"");\n        } catch (RuntimeException e) {\n            // Expected\n        }\n    }\n']",EST;Request;MAX;get;ONEXISTING;get;Value;Service;Get;Range,8.149072527885437e-10;7.8580342233181e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.905153751373291, -5.7556586265563965, -6.355889797210693, -5.458131313323975, -5.505293846130371, -0.016082093119621277]",0.9840466380119324
3,"['    @Test\n    public void testGetRangeWithHistoryThrowsOnError() {\n        try {\n            keyValueService.getRangeWithHistory(TEST_NONEXISTING_TABLE, RangeRequest.all(), Long.MAX_VALUE).hasNext();\n            Assert.fail(""getRangeWithHistory must throw on failure"");\n        } catch (RuntimeException e) {\n            // Expected\n        }\n    }\n']",Range;On;History;Runtime;on;VALUE;Range;catch;Value;Service,8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.911385536193848, -5.7579216957092285, -6.364918231964111, -5.471352577209473, -5.515725612640381, -0.01594201847910881]",0.9841845035552979
3,"['    @Test\n    public void testGetRangeOfTimestampsThrowsOnError() {\n        try {\n            keyValueService.getRangeOfTimestamps(TEST_NONEXISTING_TABLE, RangeRequest.all(), Long.MAX_VALUE).hasNext();\n            Assert.fail(""getRangeOfTimestamps must throw on failure"");\n        } catch (RuntimeException e) {\n            // Expected\n        }\n    }\n']",Throws;TABLE;fail;key;Assert;Timestamps;Expected;Error;Request;MAX,3.026798367500305e-09;2.444721758365631e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;7.712515071034431e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.89940071105957, -5.736819267272949, -6.343679904937744, -5.4606828689575195, -5.5074663162231445, -0.01616080291569233]",0.9839690923690796
3,"['    @Test\n    public void testCannotModifyValuesAfterWrite() {\n        byte[] data = new byte[1];\n        byte[] unmodifiedData = Arrays.copyOf(data, data.length);\n\n        Cell cell = Cell.create(row0, column0);\n\n        Value val = Value.create(data, TEST_TIMESTAMP + 1);\n\n        keyValueService.putWithTimestamps(TEST_TABLE, ImmutableMultimap.of(cell, val));\n\n        data[0] = (byte) 50;\n\n        assertThat(keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP + 3)).get(cell).getContents(),\n                is(unmodifiedData));\n\n        keyValueService.delete(TEST_TABLE, ImmutableMultimap.of(cell, TEST_TIMESTAMP + 1));\n    }\n']",unmodified;delete;annot;Data;unmodified;Value;byte;of;key;Values,1.1641532182693481e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.814635753631592, -5.646914482116699, -6.255642414093018, -5.35028600692749, -5.468292713165283, -0.017549822106957436]",0.9826032519340515
3,"['    @Test\n    public void testClassicWriteSkew() {\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", ""100"");\n        put(t0, ""row2"", ""col1"", ""100"");\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        Transaction t2 = startTransaction();\n        withdrawMoney(t1, true, false);\n        withdrawMoney(t2, false, false);\n\n        t1.commit();\n        try {\n            t2.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",expectecd;Write;Classic;commit;because;withdraw;Money;write;catch;Transaction,3.841705620288849e-09;2.6775524020195007e-09;2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09,5,5,"[-5.841428756713867, -5.674552917480469, -6.256845474243164, -5.31967830657959, -5.47447395324707, -0.017493009567260742]",0.982659101486206
3,"['    @Test\n    public void testClassicWriteSkew2() {\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", ""100"");\n        put(t0, ""row2"", ""col1"", ""100"");\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        Transaction t2 = startTransaction();\n        withdrawMoney(t1, true, false);\n        withdrawMoney(t2, false, false);\n\n        t2.commit();\n        try {\n            t1.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",skew;Write;throw;to;Transaction;Transaction;write;Transaction;Money;put,2.3283064365386963e-09;1.0477378964424133e-09;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.845674991607666, -5.677058219909668, -6.267154216766357, -5.3292317390441895, -5.484450817108154, -0.017362035810947418]",0.9827877879142761
3,"['    @Test(expected=TransactionFailedRetriableException.class)\n    public void testConcurrentWriteSkew() throws InterruptedException, BrokenBarrierException {\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", ""100"");\n        put(t0, ""row2"", ""col1"", ""100"");\n        t0.commit();\n\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n\n        final Transaction t1 = startTransaction();\n        ExecutorService exec = PTExecutors.newCachedThreadPool();\n        Future<?> f = exec.submit( new Callable<Void>() {\n            @Override\n            public Void call() throws Exception {\n                withdrawMoney(t1, true, false);\n                barrier.await();\n                t1.commit();\n                return null;\n            }\n']",PTExecutors;class;Concurrent;Exception;Future;col;row;Broken;Barrier;Service,7.421476766467094e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.849644660949707, -5.660344123840332, -6.298700332641602, -5.371334075927734, -5.517394542694092, -0.017008861526846886]",0.9831348657608032
3,"['    @Test\n    public void testClassicWriteSkewCell() {\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", ""100"");\n        put(t0, ""row2"", ""col1"", ""100"");\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        Transaction t2 = startTransaction();\n        withdrawMoney(t1, true, true);\n        withdrawMoney(t2, false, true);\n\n        t1.commit();\n        try {\n            t2.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",withdraw;Cell;to;it;Transaction;commit;Money;Classic;Transaction;catch,4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.857146739959717, -5.683942794799805, -6.2838921546936035, -5.34274435043335, -5.492042064666748, -0.017174333333969116]",0.9829722046852112
3,"['    @Test\n    public void testClassicWriteSkew2Cell() {\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", ""100"");\n        put(t0, ""row2"", ""col1"", ""100"");\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        Transaction t2 = startTransaction();\n        withdrawMoney(t1, true, true);\n        withdrawMoney(t2, false, true);\n\n        t2.commit();\n        try {\n            t1.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",skew;write;col;row;withdraw;ke;because;start;Transaction;Money,1.862645149230957e-09;1.280568540096283e-09;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8613104820251465, -5.683213710784912, -6.2928314208984375, -5.3506011962890625, -5.50209903717041, -0.01706792786717415]",0.9830769300460815
3,"['    @Test(expected=TransactionFailedRetriableException.class)\n    public void testConcurrentWriteSkewCell() throws InterruptedException, BrokenBarrierException {\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", ""100"");\n        put(t0, ""row2"", ""col1"", ""100"");\n        t0.commit();\n\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n\n        final Transaction t1 = startTransaction();\n        ExecutorService exec = PTExecutors.newCachedThreadPool();\n        Future<?> f = exec.submit( new Callable<Void>() {\n            @Override\n            public Void call() throws Exception {\n                withdrawMoney(t1, true, true);\n                barrier.await();\n                t1.commit();\n                return null;\n            }\n']",Concurrent;col;Exception;Service;oid;barrier;Transaction;ailed;col;Cyclic,1.1641532182693481e-09;8.731149137020111e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.8544840812683105, -5.661012172698975, -6.307923793792725, -5.377902030944824, -5.521880149841309, -0.01692611537873745]",0.9832163453102112
3,"['    @Test\n    public void testCycleWithReadOnly() {\n        // readOnly has a r/w dep on t2 and t2 has a r/w on t1 and t1 has a w/r dep on readOnly\n        // This creates a cycle that is valid under SI, but not SSI\n        // The main issue is that readOnly reads an invalid state of the world. because it reads the updated value of\n        // t1, but the old value of t2.\n\n        String initialValue = ""100"";\n        String newValue = ""101"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        put(t1, ""row1"", ""col1"", newValue);\n        Transaction t2 = startTransaction();\n        String row1Get = get(t2, ""row1"", ""col1"");\n        assertEquals(initialValue, row1Get);\n        put(t2, ""row2"", ""col1"", row1Get);\n\n        t1.commit();\n        Transaction readOnly = startTransaction();\n        assertEquals(newValue, get(readOnly, ""row1"", ""col1""));\n        assertEquals(initialValue, get(readOnly, ""row2"", ""col1""));\n\n        try {\n            t2.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",world;has;the;an;and;the;value;col;of;and,8.731149137020111e-10;4.802132025361061e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.875738620758057, -5.681135177612305, -6.364022731781006, -5.402698040008545, -5.600963115692139, -0.016269298270344734]",0.9838624596595764
3,"['    @Test\n    public void testLargerCycleWithReadOnly() {\n        String initialValue = ""100"";\n        String newValue = ""101"";\n        String newValue2 = ""102"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        put(t1, ""row1"", ""col1"", newValue);\n        Transaction t2 = startTransaction();\n        String row1Get = get(t2, ""row1"", ""col1"");\n        assertEquals(initialValue, row1Get);\n        put(t2, ""row2"", ""col1"", row1Get);\n\n        t1.commit();\n        Transaction t3 = startTransaction();\n        put(t3, ""row1"", ""col1"", newValue2);\n        t3.commit();\n        Transaction readOnly = startTransaction();\n        assertEquals(newValue2, get(readOnly, ""row1"", ""col1""));\n        assertEquals(initialValue, get(readOnly, ""row2"", ""col1""));\n\n        try {\n            t2.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",expectecd;commit;Transaction;Get;to;row;row;col;new;Transaction,3.14321368932724e-09;2.2118911147117615e-09;1.862645149230957e-09;1.6298145055770874e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.83597469329834, -5.670694351196289, -6.279793739318848, -5.320769309997559, -5.524576187133789, -0.017264556139707565]",0.982883632183075
3,"['    @Test\n    public void testNonPhantomRead() {\n        String initialValue = ""100"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        RowResult<byte[]> first = BatchingVisitables.getFirst(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));\n        put(t1, ""row22"", ""col1"", initialValue);\n\n        Transaction t2 = startTransaction();\n        put(t2, ""row11"", ""col1"", initialValue);\n        t2.commit();\n\n        t1.commit();\n    }\n']",Result;TABLE;col;start;row;Transaction;initial;atching;Transaction;Transaction,6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.837092399597168, -5.6911420822143555, -6.268216609954834, -5.331166744232178, -5.473671913146973, -0.01737293228507042]",0.9827771186828613
3,"['    @Test\n    public void testPhantomReadFail() {\n        String initialValue = ""100"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        RowResult<byte[]> first = BatchingVisitables.getFirst(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));\n        put(t1, ""row22"", ""col1"", initialValue);\n\n        Transaction t2 = startTransaction();\n        put(t2, ""row0"", ""col1"", initialValue);\n        t2.commit();\n\n        try {\n            t1.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",write;skew;it;Visitables;Conflict;to;Exception;EST;Transaction;get,1.1350493878126144e-09;9.89530235528946e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.830801010131836, -5.673864841461182, -6.2569499015808105, -5.315000534057617, -5.492530822753906, -0.017473798245191574]",0.9826779961585999
3,"['    @Test\n    public void testPhantomReadFail2() {\n        String initialValue = ""100"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));\n        put(t1, ""row22"", ""col1"", initialValue);\n\n        Transaction t2 = startTransaction();\n        put(t2, ""row3"", ""col1"", initialValue);\n        t2.commit();\n\n        try {\n            t1.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",EST;Visitables;fail;Transaction;Phantom;throw;Transaction;Read;start;start,1.6298145055770874e-09;4.874891601502895e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.835626602172852, -5.673434257507324, -6.261562824249268, -5.320614814758301, -5.489938735961914, -0.01743490621447563]",0.9827162027359009
3,"['    @Test\n    public void testCellReadWriteFailure() {\n        String initialValue = ""100"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));\n        put(t1, ""row22"", ""col1"", initialValue);\n\n        Transaction t2 = startTransaction();\n        put(t2, ""row3"", ""col1"", initialValue);\n        t2.commit();\n\n        try {\n            t1.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",expectecd;skew;to;Serializable;Range;put;it;commit;catch;row,1.1932570487260818e-09;1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8474297523498535, -5.683622360229492, -6.2840399742126465, -5.33922004699707, -5.505075454711914, -0.017166482284665108]",0.9829798936843872
3,"['    @Test\n    public void testCellReadWriteFailure2() {\n        String initialValue = ""100"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));\n        put(t1, ""row22"", ""col1"", initialValue);\n\n        Transaction t2 = startTransaction();\n        put(t2, ""row2"", ""col1"", ""101"");\n        t2.commit();\n\n        try {\n            t1.commit();\n            fail();\n        } catch (TransactionSerializableConflictException e) {\n            // this is expectecd to throw because it is a write skew\n        }\n    }\n']",skew;because;Serializable;row;Transaction;Transaction;Conflict;Failure;EST;start,2.7939677238464355e-09;9.313225746154785e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.844154357910156, -5.681951522827148, -6.277951240539551, -5.332211971282959, -5.500391960144043, -0.017247332260012627]",0.9829005599021912
3,"['    @Test\n    public void testColumnSelection() {\n        String initialValue = ""100"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row1"", ""col2"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().retainColumns(ImmutableList.of(PtBytes.toBytes(""col1""))).build()));\n        get(t1, ""row1"", ""col2"");\n\n        // We need to do at least one put so we don\'t get caught by the read only code path\n        put(t1, ""row22"", ""col2"", initialValue);\n\n        t1.commit();\n    }\n']",Selection;Column;Immutable;EST;we;Transaction;put;only;We;start,1.862645149230957e-09;7.8580342233181e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.868901252746582, -5.717981338500977, -6.337729454040527, -5.405490398406982, -5.529880523681641, -0.016473939642310143]",0.9836609959602356
3,"['    @Test\n    public void testColumnSelection2() {\n        String initialValue = ""100"";\n        Transaction t0 = startTransaction();\n        put(t0, ""row1"", ""col1"", initialValue);\n        put(t0, ""row1"", ""col2"", initialValue);\n        put(t0, ""row2"", ""col1"", initialValue);\n        t0.commit();\n\n        Transaction t1 = startTransaction();\n        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().retainColumns(ImmutableList.of(PtBytes.toBytes(""col1""))).build()));\n        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().retainColumns(ImmutableList.of(PtBytes.toBytes(""col2""))).build()));\n\n        // We need to do at least one put so we don\'t get caught by the read only code path\n        put(t1, ""row22"", ""col2"", initialValue);\n\n        t1.commit();\n    }\n']",Column;only;caught;get;by;retain;Transaction;don't;Range;TABLE,1.0477378964424133e-09;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.1464074961841106e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.8605828285217285, -5.703752040863037, -6.323371410369873, -5.38458776473999, -5.524759292602539, -0.01668897457420826]",0.9834495186805725
3,"['    @Test\n    public void testBigValue() {\n        byte[] bytes = new byte[64*1024];\n        new Random().nextBytes(bytes);\n        String encodeHexString = BaseEncoding.base16().lowerCase().encode(bytes);\n        putDirect(""row1"", ""col1"", encodeHexString, 0);\n        Pair<String, Long> pair = getDirect(""row1"", ""col1"", 1);\n        Assert.assertEquals(0L, (long)pair.getRhSide());\n        assertEquals(encodeHexString, pair.getLhSide());\n    }\n']",Big;Case;get;get;encode;new;Value;lower;pair;get,9.89530235528946e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;3.8562575355172157e-10;3.346940502524376e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10,5,5,"[-5.839338779449463, -5.669285297393799, -6.271005153656006, -5.3504319190979, -5.457724094390869, -0.017411476001143456]",0.9827392101287842
3,"['    @Test\n    public void testSpecialValues() {\n        String eight = ""00000000"";\n        String sixteen = eight + eight;\n        putDirect(""row1"", ""col1"", eight, 0);\n        putDirect(""row2"", ""col1"", sixteen, 0);\n        Pair<String, Long> direct1 = getDirect(""row1"", ""col1"", 1);\n        assertEquals(eight, direct1.lhSide);\n        Pair<String, Long> direct2 = getDirect(""row2"", ""col1"", 1);\n        assertEquals(sixteen, direct2.lhSide);\n    }\n']",col;Values;row;eight;Side;row;Direct;Pair;Equals;Long,1.280568540096283e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.673470251262188e-10;1.1641532182693481e-10,5,5,"[-5.851263523101807, -5.711782455444336, -6.296504020690918, -5.349806785583496, -5.47938346862793, -0.01709195226430893]",0.9830532670021057
3,"['    @Test\n    public void testKeyValueRows() {\n        putDirect(""row1"", ""col1"", ""v1"", 0);\n        Pair<String, Long> pair = getDirect(""row1"", ""col1"", 1);\n        assertEquals(0L, (long)pair.getRhSide());\n        assertEquals(""v1"", pair.getLhSide());\n\n        putDirect(""row1"", ""col1"", ""v2"", 2);\n        pair = getDirect(""row1"", ""col1"", 2);\n        assertEquals(0L, (long)pair.getRhSide());\n        assertEquals(""v1"", pair.getLhSide());\n\n        pair = getDirect(""row1"", ""col1"", 3);\n        assertEquals(2L, (long)pair.getRhSide());\n        assertEquals(""v2"", pair.getLhSide());\n    }\n']",Rh;Rh;Side;Pair;col;get;row;Side;col;get,1.862645149230957e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.826366424560547, -5.686173915863037, -6.254854202270508, -5.3022871017456055, -5.451939105987549, -0.017686041072010994]",0.9824694395065308
3,"['    @Test\n    public void testPrimaryKeyViolation() {\n        Cell cell = Cell.create(""r1"".getBytes(), TransactionConstants.COMMIT_TS_COLUMN);\n        keyValueService.putUnlessExists(TransactionConstants.TRANSACTION_TABLE,\n            ImmutableMap.of(cell, ""v1"".getBytes()));\n        try {\n            keyValueService.putUnlessExists(TransactionConstants.TRANSACTION_TABLE,\n                ImmutableMap.of(cell, ""v2"".getBytes()));\n            fail();\n        } catch (KeyAlreadyExistsException e) {\n            //expected\n        }\n    }\n']",TS;Exists;Transaction;cell;Transaction;TRANSACTION;expected;Transaction;TABLE;Cell,9.313225746154785e-10;6.111804395914078e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.8410139083862305, -5.68498420715332, -6.263901710510254, -5.338675022125244, -5.482216835021973, -0.017317749559879303]",0.9828313589096069
3,"['    @Test\n    public void testEmptyValue() {\n        putDirect(""row1"", ""col1"", ""v1"", 0);\n        Pair<String, Long> pair = getDirect(""row1"", ""col1"", 1);\n        assertEquals(0L, (long)pair.getRhSide());\n        assertEquals(""v1"", pair.getLhSide());\n\n        putDirect(""row1"", ""col1"", """", 2);\n        pair = getDirect(""row1"", ""col1"", 2);\n        assertEquals(0L, (long)pair.getRhSide());\n        assertEquals(""v1"", pair.getLhSide());\n\n        pair = getDirect(""row1"", ""col1"", 3);\n        assertEquals(2L, (long)pair.getRhSide());\n        assertEquals("""", pair.getLhSide());\n    }\n']",pair;col;get;Equals;Side;pair;Equals;Rh;pair;Equals,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.130438461899757e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.824906826019287, -5.680642604827881, -6.253638744354248, -5.302694797515869, -5.446674823760986, -0.017733005806803703]",0.9824233055114746
3,"['    @Test\n    public void testKeyValueRange() {\n        putDirect(""row1"", ""col1"", ""v1"", 0);\n        putDirect(""row1"", ""col2"", ""v2"", 2);\n        putDirect(""row1"", ""col4"", ""v5"", 3);\n        putDirect(""row1a"", ""col4"", ""v5"", 100);\n        putDirect(""row2"", ""col2"", ""v3"", 1);\n        putDirect(""row2"", ""col4"", ""v4"", 6);\n\n        ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().build(), 1));\n        assertEquals(1, list.size());\n        RowResult<Value> row = list.iterator().next();\n        assertEquals(1, row.getColumns().size());\n\n        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().build(), 2));\n        assertEquals(2, list.size());\n        row = list.iterator().next();\n        assertEquals(1, row.getColumns().size());\n\n        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().build(), 3));\n        assertEquals(2, list.size());\n        row = list.iterator().next();\n        assertEquals(2, row.getColumns().size());\n\n        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().endRowExclusive(PtBytes.toBytes(""row2"")).build(), 3));\n        assertEquals(1, list.size());\n        row = list.iterator().next();\n        assertEquals(2, row.getColumns().size());\n\n        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().startRowInclusive(PtBytes.toBytes(""row1a"")).build(), 3));\n        assertEquals(1, list.size());\n        row = list.iterator().next();\n        assertEquals(1, row.getColumns().size());\n    }\n']",Range;Key;put;EST;build;col;Range;col;EST;iterator,4.656612873077393e-10;4.0745362639427185e-10;1.964508555829525e-10;1.8553691916167736e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.8141560554504395, -5.655534267425537, -6.248325347900391, -5.293157577514648, -5.490205764770508, -0.017725860700011253]",0.9824303388595581
3,"['    @Test\n    public void testKeyValueEmptyRange() {\n        putDirect(""row1"", ""col1"", ""v1"", 0);\n\n        byte[] rowBytes = PtBytes.toBytes(""row1"");\n        ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().startRowInclusive(rowBytes).endRowExclusive(rowBytes).build(), 1));\n        assertTrue(list.isEmpty());\n    }\n']",Bytes;Exclusive;Empty;put;Request;Range;Immutable;Inclusive;get;Key,1.4551915228366852e-09;1.1932570487260818e-09;7.566995918750763e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.9097723960876465, -5.797525405883789, -6.3830485343933105, -5.474159240722656, -5.477844715118408, -0.015936268493533134]",0.984190046787262
3,"['    @Test\n    public void testKeyValueRangeColumnSelection() {\n        putDirect(""row1"", ""col1"", ""v1"", 0);\n        putDirect(""row1"", ""col2"", ""v2"", 2);\n        putDirect(""row1"", ""col4"", ""v5"", 3);\n        putDirect(""row1a"", ""col4"", ""v5"", 100);\n        putDirect(""row2"", ""col2"", ""v3"", 1);\n        putDirect(""row2"", ""col4"", ""v4"", 6);\n\n        List<byte[]> selectedColumns = ImmutableList.of(PtBytes.toBytes(""col2""));\n        RangeRequest simpleRange = RangeRequest.builder().retainColumns(ColumnSelection.create(selectedColumns)).build();\n        ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange, 1));\n        assertEquals(0, list.size());\n\n        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange, 2));\n        assertEquals(1, list.size());\n        RowResult<Value> row = list.iterator().next();\n        assertEquals(1, row.getColumns().size());\n\n        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange, 3));\n        assertEquals(2, list.size());\n        row = list.iterator().next();\n        assertEquals(1, row.getColumns().size());\n\n        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange.getBuilder().endRowExclusive(PtBytes.toBytes(""row2"")).build(), 3));\n        assertEquals(1, list.size());\n        row = list.iterator().next();\n        assertEquals(1, row.getColumns().size());\n\n        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange.getBuilder().startRowInclusive(PtBytes.toBytes(""row1a"")).build(), 3));\n        assertEquals(1, list.size());\n        row = list.iterator().next();\n        assertEquals(1, row.getColumns().size());\n    }\n']",Key;Request;Range;Range;Column;byte;Direct;selected;builder;Service,6.984919309616089e-10;4.656612873077393e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.255546860396862e-10,5,5,"[-5.820545196533203, -5.663840293884277, -6.268036365509033, -5.3101325035095215, -5.5024518966674805, -0.01750132627785206]",0.9826508164405823
3,"['    @Test\n    public void testKeyValueRangeWithDeletes() {\n        putDirect(""row1"", ""col1"", """", 0);\n\n        ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().build(), 1));\n        assertEquals(1, list.size());\n        RowResult<Value> row = list.iterator().next();\n        assertEquals(1, row.getColumns().size());\n    }\n']",Deletes;Key;EST;TABLE;row;Range;row;Immutable;next;size,2.6775524020195007e-09;1.862645149230957e-09;1.280568540096283e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10,5,5,"[-5.86891508102417, -5.744248390197754, -6.327530860900879, -5.424548625946045, -5.4687323570251465, -0.016573725268244743]",0.9835628867149353
3,"['    @Test\n    public void testKeyValueRanges() {\n        putDirect(""row1"", ""col1"", """", 0);\n        putDirect(""row2"", ""col1"", """", 0);\n        putDirect(""row2"", ""col2"", """", 0);\n\n        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, ImmutableList.of(RangeRequest.builder().build(), RangeRequest.builder().build()), 1);\n        assertTrue(ranges.size() >= 1);\n    }\n']",Row;row;TABLE;col;Direct;atch;anges;Direct;get;row,8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-5.890141010284424, -5.766503810882568, -6.370163440704346, -5.443577766418457, -5.502198696136475, -0.016140393912792206]",0.9839890599250793
3,"['    @Test\n    public void testKeyValueRanges2() {\n        putDirect(""row1"", ""col1"", """", 0);\n        putDirect(""row2"", ""col1"", """", 0);\n        putDirect(""row2"", ""col2"", """", 0);\n\n        final RangeRequest allRange = RangeRequest.builder().build();\n        final RangeRequest oneRange = RangeRequest.builder().startRowInclusive(""row2"".getBytes()).build();\n        final RangeRequest allRangeBatch = RangeRequest.builder().batchHint(3).build();\n        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, ImmutableList.of(allRange, oneRange, allRangeBatch), 1);\n        assertTrue(ranges.get(allRange).getResults().size()>=1);\n        assertEquals(2, ranges.get(allRangeBatch).getResults().size());\n        assertFalse(ranges.get(allRangeBatch).moreResultsAvailable());\n        assertEquals(1, ranges.get(oneRange).getResults().size());\n    }\n']",Page;Inclusive;all;Results;row;Map;get;put;Range;one,3.7834979593753815e-10;3.4924596548080444e-10;3.346940502524376e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.875993728637695, -5.704532146453857, -6.364163398742676, -5.422972202301025, -5.55002498626709, -0.016292402520775795]",0.9838395714759827
3,"['    @Test\n    public void testKeyValueRangesMany3() {\n        putDirect(""row1"", ""col1"", """", 0);\n        putDirect(""row2"", ""col1"", """", 0);\n        putDirect(""row2"", ""col2"", """", 0);\n\n        RangeRequest allRange = RangeRequest.builder().prefixRange(""row1"".getBytes()).batchHint(3).build();\n        for (int i = 0 ; i < 1000 ; i++) {\n            ClosableIterator<RowResult<Value>> range = keyValueService.getRange(TEST_TABLE, allRange, 1);\n            ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(range);\n            assertEquals(1, list.size());\n        }\n    }\n']",col;Equals;get;row;Result;put;put;col;col;Key,2.9103830456733704e-10;2.255546860396862e-10;1.964508555829525e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.867620944976807, -5.704808712005615, -6.314090251922607, -5.382593154907227, -5.499334812164307, -0.016795653849840164]",0.9833444952964783
3,"['    @Test\n    public void testKeyValueRangeReverse() {\n        if (!supportsReverse()) {\n            return;\n        }\n        putDirect(""row1"", ""col1"", """", 0);\n        putDirect(""row2"", ""col1"", """", 0);\n        putDirect(""row2"", ""col2"", """", 0);\n\n        RangeRequest allRange = RangeRequest.reverseBuilder().batchHint(3).build();\n        ClosableIterator<RowResult<Value>> range = keyValueService.getRange(TEST_TABLE, allRange, 1);\n        ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(range);\n        assertEquals(2, list.size());\n        assertEquals(""row2"", PtBytes.toString(list.iterator().next().getRowName()));\n    }\n']",reverse;all;Result;batch;EST;Range;col;put;Request;Iterator,3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.847568035125732, -5.6923017501831055, -6.281497001647949, -5.343186855316162, -5.48250675201416, -0.017216164618730545]",0.9829311966896057
3,"['    @Test\n    public void testRangePagingBatches() {\n        int totalPuts = 101;\n        for (int i = 0 ; i < totalPuts ; i++) {\n            putDirect(""row""+i, ""col1"", ""v1"", 0);\n        }\n\n        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Iterables.limit(Iterables.cycle(RangeRequest.builder().batchHint(1000).build()), 100), 1);\n        assertEquals(1, ranges.keySet().size());\n        assertEquals(totalPuts, ranges.values().iterator().next().getResults().size());\n    }\n']",col;batch;Row;Request;Results;builder;cycle;size;Value;Range,5.238689482212067e-10;4.656612873077393e-10;3.346940502524376e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.673470251262188e-10;1.4915713109076023e-10;1.1641532182693481e-10,5,5,"[-5.8739728927612305, -5.720874786376953, -6.366196155548096, -5.455584526062012, -5.511993408203125, -0.01624889113008976]",0.9838824272155762
3,"['    @Test\n    public void testRangePagingBatchesReverse() {\n        if (!supportsReverse()) {\n            return;\n        }\n        int totalPuts = 101;\n        for (int i = 0 ; i < totalPuts ; i++) {\n            putDirect(""row""+i, ""col1"", ""v1"", 0);\n        }\n\n        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Iterables.limit(Iterables.cycle(RangeRequest.reverseBuilder().batchHint(1000).build()), 100), 1);\n        assertEquals(1, ranges.keySet().size());\n        assertEquals(totalPuts, ranges.values().iterator().next().getResults().size());\n    }\n']",EST;everse;Request;Iterables;reverse;cycle;Service;Result;get;Range,1.1641532182693481e-09;3.7834979593753815e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10,5,5,"[-5.871913909912109, -5.705906391143799, -6.3498969078063965, -5.421236038208008, -5.52650785446167, -0.0164264477789402]",0.983707845211029
3,"['    @Test\n    public void testRangePagingBatchSizeOne() {\n        int totalPuts = 100;\n        for (int i = 0 ; i < totalPuts ; i++) {\n            putDirect(""row""+i, ""col1"", ""v1"", 0);\n        }\n\n        RangeRequest rangeRequest = RangeRequest.builder().batchHint(1).build();\n        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Iterables.limit(Iterables.cycle(rangeRequest), 100), 1);\n        assertEquals(1, ranges.keySet().size());\n        assertEquals(1, ranges.values().iterator().next().getResults().size());\n        assertEquals(""row0"", PtBytes.toString(ranges.values().iterator().next().getResults().iterator().next().getRowName()));\n    }\n']",uts;atch;Pt;key;Range;Set;Results;get;builder;put,9.313225746154785e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.8189894035458565e-10;1.7462298274040222e-10,5,5,"[-5.858673095703125, -5.712583065032959, -6.35118293762207, -5.431541442871094, -5.513128280639648, -0.016448142006993294]",0.9836863875389099
3,"['    @Test\n    public void testRangePagingBatchSizeOneReverse() {\n        if (!supportsReverse()) {\n            return;\n        }\n        int totalPuts = 100;\n        for (int i = 0 ; i < totalPuts ; i++) {\n            putDirect(""row""+i, ""col1"", ""v1"", 0);\n        }\n\n        RangeRequest rangeRequest = RangeRequest.reverseBuilder().batchHint(1).build();\n        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Iterables.limit(Iterables.cycle(rangeRequest), 100), 1);\n        assertEquals(1, ranges.keySet().size());\n        assertEquals(1, ranges.values().iterator().next().getResults().size());\n        assertEquals(""row99"", PtBytes.toString(ranges.values().iterator().next().getResults().iterator().next().getRowName()));\n    }\n']",anges;Size;Row;ranges;size;next;everse;Iterables;Range;Iterables,5.966285243630409e-10;4.0745362639427185e-10;3.2014213502407074e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.709850039333105e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.864585876464844, -5.698156833648682, -6.354983806610107, -5.4159770011901855, -5.540929317474365, -0.016430553048849106]",0.9837036728858948
3,"['    @Test\n    public void testRangePageBatchSizeOne() {\n        RangeRequest rangeRequest = RangeRequest.builder().batchHint(1).build();\n        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Collections.singleton(rangeRequest), 1);\n        assertEquals(1, ranges.keySet().size());\n        assertEquals(0, ranges.values().iterator().next().getResults().size());\n        assertEquals(false, ranges.values().iterator().next().moreResultsAvailable());\n    }\n']",Page;Value;Range;Row;get;atch;Size;Results;Range;Collections,1.5133991837501526e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.89450740814209, -5.762505054473877, -6.399015426635742, -5.489551544189453, -5.503852844238281, -0.015887226909399033]",0.98423832654953
3,"['    @Test\n    public void testRangeAfterTimestmap() {\n        putDirect(""row1"", ""col2"", """", 5);\n        putDirect(""row2"", ""col2"", """", 0);\n        RangeRequest rangeRequest = RangeRequest.builder().batchHint(1).build();\n        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Collections.singleton(rangeRequest), 1);\n        assertEquals(1, ranges.keySet().size());\n        TokenBackedBasicResultsPage<RowResult<Value>, byte[]> page = ranges.values().iterator().next();\n        assertTrue(!page.getResults().isEmpty() || page.moreResultsAvailable());\n    }\n']",Range;Request;Result;Request;After;Page;Service;page;anges;Range,4.0745362639427185e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.878230571746826, -5.730620861053467, -6.364752292633057, -5.432240009307861, -5.514639377593994, -0.016298852860927582]",0.983833372592926
3,"['    @Test(timeOut = 5000)\n    public void testLoadArguments() throws Exception {\n        PerformanceClient client = new PerformanceClient();\n\n        // ""--proxy-url"" has the highest priority\n        PerformanceClient.Arguments arguments = client.loadArguments(\n                getArgs(""ws://broker0.pulsar.apache.org:8080/"", ""./src/test/resources/websocket_client1.conf""));\n        assertEquals(arguments.proxyURL, ""ws://broker0.pulsar.apache.org:8080/"");\n\n        // ""webSocketServiceUrl"" written in the conf file has the second priority\n        arguments = client.loadArguments(getArgs(null, ""./src/test/resources/websocket_client1.conf""));\n        assertEquals(arguments.proxyURL, ""ws://broker1.pulsar.apache.org:8080/"");\n\n        // ""webServiceUrl"" written in the conf file has the third priority\n        arguments = client.loadArguments(getArgs(null, ""./src/test/resources/websocket_client2.conf""));\n        assertEquals(arguments.proxyURL, ""ws://broker2.pulsar.apache.org:8080/"");\n\n        // ""serviceUrl"" written in the conf file has the fourth priority\n        arguments = client.loadArguments(getArgs(null, ""./src/test/resources/websocket_client3.conf""));\n        assertEquals(arguments.proxyURL, ""wss://broker3.pulsar.apache.org:8443/"");\n\n        // The default value is ""ws://localhost:8080/""\n        arguments = client.loadArguments(getArgs(null, null));\n        assertEquals(arguments.proxyURL, ""ws://localhost:8080/"");\n\n        // If the URL does not end with ""/"", it will be added\n        arguments = client.loadArguments(getArgs(""ws://broker0.pulsar.apache.org:8080"", null));\n        assertEquals(arguments.proxyURL, ""ws://broker0.pulsar.apache.org:8080/"");\n    }\n']",time;websocket;ss;proxy;ulsar;websocket;load;arguments;Performance;written,1.3969838619232178e-09;7.130438461899757e-10;6.984919309616089e-10;6.111804395914078e-10;3.92901711165905e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8518476486206055, -5.745061874389648, -6.358839988708496, -5.38627815246582, -5.55788516998291, -0.01637367717921734]",0.9837596416473389
3,['    @Test\n    public void testGenerateDocumention() throws Exception {\n        CmdGenerateDocumentation.main(new String[]{});\n    }\n'],md;Documention;Generate;Exception;Documentation;new;main;Generate,4.307366907596588e-09;1.6298145055770874e-09;8.149072527885437e-10;6.402842700481415e-10;0.0;-9.313225746154785e-10;-1.1641532182693481e-09;-3.14321368932724e-09,5,5,"[-5.887452125549316, -5.734223365783691, -6.3518829345703125, -5.482842922210693, -5.414816379547119, -0.01649387553334236]",0.9836413860321045
3,"['    @Test\n    public void testSpecifyModuleName() throws Exception {\n        String[] args = new String[]{""-n"", ""produce"", ""-n"", ""consume""};\n        CmdGenerateDocumentation.main(args);\n    }\n']",Generate;main;args;Module;Specify;new;Name;Exception;consume;args,4.423782229423523e-09;2.3283064365386963e-09;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-5.820766091346741e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.3387762010097504e-09;-2.561137080192566e-09,5,5,"[-5.89397668838501, -5.779422760009766, -6.39413595199585, -5.5019612312316895, -5.460108280181885, -0.01597651094198227]",0.9841503500938416
3,"['    @Test(timeOut = 20000)\n    public void testMsgKey() throws Exception {\n        String argString = ""%s -r 10 -u %s -m 500"";\n        String topic = testTopic + UUID.randomUUID().toString();\n        String args = String.format(argString, topic, pulsar.getBrokerServiceUrl());\n        Thread thread = new Thread(() -> {\n            try {\n                PerformanceProducer.main(args.split("" ""));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n        thread.start();\n        Consumer<byte[]> consumer1 = pulsarClient.newConsumer().topic(topic).subscriptionName(""sub-1"")\n                .subscriptionType(SubscriptionType.Key_Shared).subscribe();\n        Consumer<byte[]> consumer2 = pulsarClient.newConsumer().topic(topic).subscriptionName(""sub-1"")\n                .subscriptionType(SubscriptionType.Key_Shared).subscribe();\n\n        int count1 = 0;\n        int count2 = 0;\n        for (int i = 0; i < 10; i++) {\n            Message<byte[]> message = consumer1.receive(1, TimeUnit.SECONDS);\n            if (message == null) {\n                break;\n            }\n            count1++;\n            consumer1.acknowledge(message);\n        }\n        for (int i = 0; i < 10; i++) {\n            Message<byte[]> message = consumer2.receive(1, TimeUnit.SECONDS);\n            if (message == null) {\n                break;\n            }\n            count2++;\n            consumer2.acknowledge(message);\n        }\n        //in key_share mode, only one consumer can get msg\n        Assert.assertTrue(count1 == 0 || count2 == 0);\n\n        consumer1.close();\n        consumer2.close();\n        thread.interrupt();\n        while (thread.isAlive()) {\n            Thread.sleep(1000);\n        }\n\n        //use msg key generator,so every consumer can get msg\n        String newArgString = ""%s -r 10 -u %s -m 500 -mk autoIncrement"";\n        String topic2 = testTopic + UUID.randomUUID().toString();\n        String newArgs = String.format(newArgString, topic2, pulsar.getBrokerServiceUrl());\n        Thread thread2 = new Thread(() -> {\n            try {\n                PerformanceProducer.main(newArgs.split("" ""));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n        thread2.start();\n\n        Consumer newConsumer1 = pulsarClient.newConsumer().topic(topic2).subscriptionName(""sub-2"")\n                .subscriptionType(SubscriptionType.Key_Shared).subscribe();\n        Consumer newConsumer2 = pulsarClient.newConsumer().topic(topic2).subscriptionName(""sub-2"")\n                .subscriptionType(SubscriptionType.Key_Shared).subscribe();\n        count1 = 0;\n        count2 = 0;\n        for (int i = 0; i < 10; i++) {\n            Message<byte[]> message = newConsumer1.receive(1, TimeUnit.SECONDS);\n            if (message == null) {\n                break;\n            }\n            count1++;\n            newConsumer1.acknowledge(message);\n        }\n        for (int i = 0; i < 10; i++) {\n            Message<byte[]> message = newConsumer2.receive(1, TimeUnit.SECONDS);\n            if (message == null) {\n                break;\n            }\n            count2++;\n            newConsumer2.acknowledge(message);\n        }\n\n        Assert.assertTrue(count1 > 0 && count2 > 0);\n        thread2.interrupt();\n        newConsumer1.close();\n        newConsumer2.close();\n    }\n']",Broker;time;Shared;Url;break;arg;Topic;args;sub;consumer,8.149072527885437e-10;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.85779333114624, -5.68787145614624, -6.336390972137451, -5.3919548988342285, -5.5488200187683105, -0.01659705676138401]",0.9835399389266968
3,"['    @Test(timeOut = 20000)\n    public void testCreatePartitions() throws Exception {\n        String argString = ""%s -r 10 -u %s -au %s -m 5 -np 10"";\n        String topic = testTopic + UUID.randomUUID().toString();\n        String args = String.format(argString, topic, pulsar.getBrokerServiceUrl(), pulsar.getWebServiceAddress());\n        Thread thread = new Thread(() -> {\n            try {\n                PerformanceProducer.main(args.split("" ""));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n        thread.start();\n        thread.join();\n        Assert.assertEquals(10, pulsar.getAdminClient().topics().getPartitionedTopicMetadata(topic).partitions);\n    }\n']",Partitioned;Partitions;topics;main;args;Producer;Service;time;Performance;Exception,1.076841726899147e-09;8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.877829074859619, -5.7312211990356445, -6.375561237335205, -5.437237739562988, -5.5360612869262695, -0.016170186921954155]",0.9839598536491394
3,"['    @Test\n    public void testNotExistIMessageFormatter() {\n        IMessageFormatter msgFormatter = PerformanceProducer.getMessageFormatter(""org.apache.pulsar.testclient.NonExistentFormatter"");\n        Assert.assertNull(msgFormatter);\n    }\n']",Producer;msg;Formatter;Existent;Formatter;apache;ulsar;org;Not;Message,1.6763806343078613e-08;4.889443516731262e-09;3.6670826375484467e-09;2.7939677238464355e-09;2.444721758365631e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10,5,5,"[-5.936611652374268, -5.845206260681152, -6.408273696899414, -5.532808780670166, -5.436809062957764, -0.015612049028277397]",0.9845091700553894
3,"['    @Test\n    public void testDefaultIMessageFormatter() {\n        IMessageFormatter msgFormatter = PerformanceProducer.getMessageFormatter(""org.apache.pulsar.testclient.DefaultMessageFormatter"");\n        Assert.assertTrue(msgFormatter instanceof DefaultMessageFormatter);\n    }\n']",Producer;IMessage;IMessage;ulsar;org;get;msg;Default;Default;Formatter,1.30385160446167e-08;1.0011717677116394e-08;3.259629011154175e-09;2.9685907065868378e-09;2.7939677238464355e-09;2.0954757928848267e-09;1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.1641532182693481e-09,5,5,"[-5.908980369567871, -5.805517196655273, -6.363388538360596, -5.486522674560547, -5.428436279296875, -0.016110599040985107]",0.9840185046195984
3,"['    @Test\n    public void testFormatMessage() {\n        String producerName = ""producer-1"";\n        long msgId = 3;\n        byte[] message = ""{ \\""producer\\"": \\""%p\\"", \\""msgId\\"": %i, \\""nanoTime\\"": %t, \\""float1\\"": %5.2f, \\""float2\\"": %-5.2f, \\""long1\\"": %12l, \\""long2\\"": %l, \\""int1\\"": %d, \\""int2\\"": %1d , \\""long3\\"": %5l,  \\""str\\"": \\""%5s\\"" }"".getBytes();\n        byte[] formatted = new DefaultMessageFormatter().formatMessage(producerName, msgId, message);\n        String jsonString = new String(formatted, StandardCharsets.UTF_8);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        JsonNode obj = null;\n        try {\n            obj = objectMapper.readValue(jsonString, JsonNode.class);\n\n        } catch(Exception jpe) {\n            Assert.fail(""Exception parsing json"");\n        }\n\n        String prod = obj.get(""producer"").asText();\n        int mid = obj.get(""msgId"").asInt();\n        long nt = obj.get(""nanoTime"").asLong();\n        float f1 = obj.get(""float1"").floatValue();\n        float f2 = obj.get(""float2"").floatValue();\n        long l1 = obj.get(""long1"").asLong();\n        long l2 = obj.get(""long2"").asLong();\n        long i1 = obj.get(""int1"").asInt();\n        long i2 = obj.get(""int2"").asInt();\n        String str = obj.get(""str"").asText();\n        long l3 = obj.get(""long3"").asLong();\n        Assert.assertEquals(producerName, prod);\n        Assert.assertEquals(msgId, mid);\n        Assert.assertTrue( nt > 0);\n        Assert.assertNotEquals(f1, f2);\n        Assert.assertNotEquals(l1, l2);\n        Assert.assertNotEquals(i1, i2);\n        Assert.assertTrue(l3 > 0);\n        Assert.assertTrue(l3 <= 99999);\n        Assert.assertTrue(i2 < 10);\n        Assert.assertTrue(0 < i2, ""i2 was "" + i2);\n        Assert.assertTrue(f2 < 100000);\n        Assert.assertTrue( -100000 < f2);\n\n    }\n']",ano;producer;Format;producer;prod;get;Node;Charsets;float;long,9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.793838024139404, -5.618869304656982, -6.232457160949707, -5.2967400550842285, -5.489770889282227, -0.01793629489839077]",0.9822236895561218
3,"['    @Test\n    public void TestGetTableId() throws Exception {\n        String tableName = ""TestGetTableId"";\n\n        sqliteUtils.createTable(\n            ""CREATE TABLE "" + tableName + ""("" +\n                ""    firstName  TEXT,"" +\n                ""    lastName  TEXT,"" +\n                ""    age INTEGER,"" +\n                ""    bool  NUMERIC,"" +\n                ""    byte  INTEGER,"" +\n                ""    short INTEGER NULL,"" +\n                ""    long INTEGER,"" +\n                ""    float NUMERIC,"" +\n                ""    double NUMERIC,"" +\n                ""    bytes BLOB, "" +\n                ""PRIMARY KEY (firstName, lastName));""\n        );\n\n        Connection connection = sqliteUtils.getConnection();\n\n        // Test getTableId\n        log.info(""verify getTableId"");\n        TableId id = JdbcUtils.getTableId(connection, tableName);\n        Assert.assertEquals(id.getTableName(), tableName);\n\n        // Test get getTableDefinition\n        log.info(""verify getTableDefinition"");\n        List<String> keyList = Lists.newArrayList();\n        keyList.add(""firstName"");\n        keyList.add(""lastName"");\n        List<String> nonKeyList = Lists.newArrayList();\n        nonKeyList.add(""age"");\n        nonKeyList.add(""long"");\n        TableDefinition table = JdbcUtils.getTableDefinition(connection, id, keyList, nonKeyList);\n        Assert.assertEquals(table.getColumns().get(0).getName(), ""firstName"");\n        Assert.assertEquals(table.getColumns().get(0).getTypeName(), ""TEXT"");\n        Assert.assertEquals(table.getColumns().get(2).getName(), ""age"");\n        Assert.assertEquals(table.getColumns().get(2).getTypeName(), ""INTEGER"");\n        Assert.assertEquals(table.getColumns().get(7).getName(), ""float"");\n        Assert.assertEquals(table.getColumns().get(7).getTypeName(), ""NUMERIC"");\n        Assert.assertEquals(table.getKeyColumns().get(0).getName(), ""firstName"");\n        Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(), ""TEXT"");\n        Assert.assertEquals(table.getKeyColumns().get(1).getName(), ""lastName"");\n        Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(), ""TEXT"");\n        Assert.assertEquals(table.getNonKeyColumns().get(0).getName(), ""age"");\n        Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(), ""INTEGER"");\n        Assert.assertEquals(table.getNonKeyColumns().get(1).getName(), ""long"");\n        Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(), ""INTEGER"");\n        // Test get getTableDefinition\n        log.info(""verify buildInsertSql"");\n        String expctedInsertStatement = ""INSERT INTO "" + tableName +\n            ""(firstName,lastName,age,bool,byte,short,long,float,double,bytes)"" +\n            "" VALUES(?,?,?,?,?,?,?,?,?,?)"";\n        String insertStatement = JdbcUtils.buildInsertSql(table);\n        Assert.assertEquals(insertStatement, expctedInsertStatement);\n        log.info(""verify buildUpdateSql"");\n        String expectedUpdateStatement = ""UPDATE "" + tableName +\n                "" SET age=? ,long=?  WHERE firstName=? AND lastName=?"";\n        String updateStatement = JdbcUtils.buildUpdateSql(table);\n        Assert.assertEquals(updateStatement, expectedUpdateStatement);\n        log.info(""verify buildDeleteSql"");\n        String expectedDeleteStatement = ""DELETE FROM "" + tableName +\n                "" WHERE firstName=? AND lastName=?"";\n        String deleteStatement = JdbcUtils.buildDeleteSql(table);\n        Assert.assertEquals(deleteStatement, expectedDeleteStatement);\n    }\n']",NUMERIC;Get;INTEGER;Table;KEY;double;last;get;verify;Table,4.147295840084553e-10;4.0745362639427185e-10;3.128661774098873e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.7826096154749393e-10;1.7462298274040222e-10,5,5,"[-5.819225788116455, -5.642284393310547, -6.233780384063721, -5.272145748138428, -5.472549915313721, -0.017970366403460503]",0.9821902513504028
3,"['    @Test\n    public void TestInsertAction() throws Exception {\n        testOpenAndWriteSink(ImmutableMap.of(""ACTION"", ""INSERT""));\n    }\n']",Action;Write;of;ACTION;Exception;Immutable;Open;INSERT;ink;Map,1.210719347000122e-08;2.561137080192566e-09;1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.2223608791828156e-09;-1.862645149230957e-09;-2.7939677238464355e-09,5,5,"[-5.891666889190674, -5.754038333892822, -6.358892917633057, -5.487879276275635, -5.42997932434082, -0.01631574146449566]",0.9838166236877441
3,['    @Test\n    public void TestNoAction() throws Exception {\n        testOpenAndWriteSink(ImmutableMap.of());\n    }\n'],Exception;Action;Map;Immutable;of;Write;Open;No;ink,4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-6.111804395914078e-10;-9.313225746154785e-10;-2.3283064365386963e-09,5,5,"[-5.869439601898193, -5.694138050079346, -6.315632343292236, -5.465034008026123, -5.396167278289795, -0.016906190663576126]",0.9832358956336975
3,"['    @Test\n    public void TestNoActionNullValue() throws Exception {\n        testOpenAndWriteSinkNullValue(ImmutableMap.of(""ACTION"", ""INSERT""));\n    }\n']",ACTION;of;INSERT;Exception;No;Value;Action;Null;ink;Value,3.725290298461914e-09;2.9103830456733704e-09;2.561137080192566e-09;1.0477378964424133e-09;9.313225746154785e-10;-9.313225746154785e-10;-1.862645149230957e-09;-1.862645149230957e-09;-1.862645149230957e-09;-2.3283064365386963e-09,5,5,"[-5.924979209899902, -5.8116607666015625, -6.405510902404785, -5.506616592407227, -5.481163501739502, -0.01566310040652752]",0.9844589233398438
3,"['    @Test\n    public void TestNoActionNullValueJson() throws Exception {\n        testOpenAndWriteSinkNullValueJson(ImmutableMap.of(""ACTION"", ""INSERT""));\n    }\n']",Open;ACTION;Null;Value;Immutable;son;Value;No;ink;Exception,2.0954757928848267e-09;1.862645149230957e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.903255462646484, -5.7863359451293945, -6.375380516052246, -5.483658313751221, -5.450655937194824, -0.016078924760222435]",0.9840496778488159
3,"['    @Test\n    public void TestNoActionJson() throws Exception {\n        testOpenAndWriteSinkJson(ImmutableMap.of(""ACTION"", ""INSERT""));\n    }\n']",ACTION;of;son;Immutable;Exception;Write;son;Open;Map;INSERT,3.725290298461914e-09;5.820766091346741e-10;1.1641532182693481e-10;-5.820766091346741e-10;-6.984919309616089e-10;-1.1641532182693481e-09;-1.862645149230957e-09;-1.862645149230957e-09;-2.3283064365386963e-09;-3.725290298461914e-09,5,5,"[-5.886677265167236, -5.756632328033447, -6.357909679412842, -5.47653865814209, -5.435793399810791, -0.016345413401722908]",0.9837875366210938
3,"['    @Test\n    public void TestUnknownAction() throws Exception {\n        Record<GenericRecord> recordRecord = mock(Record.class);\n        when(recordRecord.getProperties()).thenReturn(ImmutableMap.of(""ACTION"", ""UNKNOWN""));\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        doAnswer(a -> future.complete(null)).when(recordRecord).fail();\n        jdbcSink.write(recordRecord);\n        future.get(1, TimeUnit.SECONDS);\n    }\n']",of;UNKNOWN;future;future;Time;fail;Future;Record;Unknown;class,4.3655745685100555e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;1.964508555829525e-10,5,5,"[-5.852639198303223, -5.713334560394287, -6.304488182067871, -5.394907474517822, -5.461470127105713, -0.016931507736444473]",0.9832110404968262
3,"['    @Test\n    public void TestUpdateAction() throws Exception {\n\n        AvroSchema<Foo> schema = AvroSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).build());\n\n        Foo updateObj = new Foo();\n        updateObj.setField1(""ValueOfField3"");\n        updateObj.setField2(""ValueOfField3"");\n        updateObj.setField3(4);\n\n        byte[] updateBytes = schema.encode(updateObj);\n        Message<GenericRecord> updateMessage = mock(MessageImpl.class);\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        Record<GenericRecord> updateRecord = PulsarRecord.<GenericRecord>builder()\n                .message(updateMessage)\n                .topicName(""fake_topic_name"")\n                .ackFunction(() -> future.complete(null))\n                .build();\n\n        GenericSchema<GenericRecord> updateGenericAvroSchema;\n        updateGenericAvroSchema = new GenericAvroSchema(schema.getSchemaInfo());\n\n        Map<String, String> updateProperties = Maps.newHashMap();\n        updateProperties.put(""ACTION"", ""UPDATE"");\n        when(updateMessage.getValue()).thenReturn(updateGenericAvroSchema.decode(updateBytes));\n        when(updateMessage.getProperties()).thenReturn(updateProperties);\n        log.info(""foo:{}, Message.getValue: {}, record.getValue: {}"",\n                updateObj.toString(),\n                updateMessage.getValue().toString(),\n                updateRecord.getValue().toString());\n\n        jdbcSink.write(updateRecord);\n        future.get(1, TimeUnit.SECONDS);\n\n        // value has been written to db, read it out and verify.\n        String updateQuerySql = ""SELECT * FROM "" + tableName + "" WHERE field3=4"";\n        sqliteUtils.select(updateQuerySql, (resultSet) -> {\n            Assert.assertEquals(updateObj.getField1(), resultSet.getString(1));\n            Assert.assertEquals(updateObj.getField2(), resultSet.getString(2));\n            Assert.assertEquals(updateObj.getField3(), resultSet.getInt(3));\n        });\n    }\n']",Future;Foo;record;Function;Message;Pojo;ack;Avro;Message;topic,6.693881005048752e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.8212080001831055, -5.65643835067749, -6.25925874710083, -5.300391674041748, -5.493539810180664, -0.017629003152251244]",0.9825254678726196
3,"['    @Test\n    public void TestDeleteAction() throws Exception {\n\n        AvroSchema<Foo> schema = AvroSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).build());\n\n        Foo deleteObj = new Foo();\n        deleteObj.setField3(5);\n\n        byte[] deleteBytes = schema.encode(deleteObj);\n        Message<GenericRecord> deleteMessage = mock(MessageImpl.class);\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        Record<GenericRecord> deleteRecord = PulsarRecord.<GenericRecord>builder()\n                .message(deleteMessage)\n                .topicName(""fake_topic_name"")\n                .ackFunction(() -> future.complete(null))\n                .build();\n\n        GenericSchema<GenericRecord> deleteGenericAvroSchema = new GenericAvroSchema(schema.getSchemaInfo());\n\n        Map<String, String> deleteProperties = Maps.newHashMap();\n        deleteProperties.put(""ACTION"", ""DELETE"");\n        when(deleteMessage.getValue()).thenReturn(deleteGenericAvroSchema.decode(deleteBytes));\n        when(deleteMessage.getProperties()).thenReturn(deleteProperties);\n        log.info(""foo:{}, Message.getValue: {}, record.getValue: {}"",\n                deleteObj.toString(),\n                deleteMessage.getValue().toString(),\n                deleteRecord.getValue().toString());\n\n        jdbcSink.write(deleteRecord);\n        future.get(1, TimeUnit.SECONDS);\n\n        // value has been written to db, read it out and verify.\n        String deleteQuerySql = ""SELECT * FROM "" + tableName + "" WHERE field3=5"";\n        Assert.assertEquals(sqliteUtils.select(deleteQuerySql, (resultSet) -> {}), 0);\n    }\n']",Impl;ack;Avro;oo;topic;Schema;Message;Record;info;Generic,3.41970007866621e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.828771591186523, -5.669036865234375, -6.275873184204102, -5.31395149230957, -5.509098052978516, -0.0173967145383358]",0.9827537536621094
3,"['    @Test\n    public void testDispoableChannel() throws Exception {\n        String agentName = ""agent1"";\n        Map<String, String> properties = getPropertiesForChannel(agentName,\n                DisposableChannel.class.getName());\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, properties);\n        MaterializedConfiguration config1 = provider.getConfiguration();\n        Channel channel1 = config1.getChannels().values().iterator().next();\n        assertTrue(channel1 instanceof DisposableChannel);\n        MaterializedConfiguration config2 = provider.getConfiguration();\n        Channel channel2 = config2.getChannels().values().iterator().next();\n        assertTrue(channel2 instanceof DisposableChannel);\n        assertNotSame(channel1, channel2);\n    }\n']",agent;channel;Disposable;Channels;Configuration;Channel;instanceof;agent;properties;Name,5.820766091346741e-10;3.4924596548080444e-10;3.310560714453459e-10;3.055902197957039e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.8362627029418945, -5.693724632263184, -6.2793121337890625, -5.3304290771484375, -5.460247993469238, -0.01740667223930359]",0.982744038105011
3,"['    @Test\n    public void testReusableChannel() throws Exception {\n        String agentName = ""agent1"";\n        Map<String, String> properties = getPropertiesForChannel(agentName,\n                RecyclableChannel.class.getName());\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, properties);\n\n        MaterializedConfiguration config1 = provider.getConfiguration();\n        Channel channel1 = config1.getChannels().values().iterator().next();\n        assertTrue(channel1 instanceof RecyclableChannel);\n\n        MaterializedConfiguration config2 = provider.getConfiguration();\n        Channel channel2 = config2.getChannels().values().iterator().next();\n        assertTrue(channel2 instanceof RecyclableChannel);\n\n        assertSame(channel1, channel2);\n    }\n']",Reusable;agent;agent;Memory;For;Channel;Channel;Configuration;get;agent,2.561137080192566e-09;1.862645149230957e-09;9.313225746154785e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.837623469531536e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.844723224639893, -5.690951347351074, -6.285031795501709, -5.337167739868164, -5.468759536743164, -0.0173103678971529]",0.9828385710716248
3,"['    @Test\n    public void testUnspecifiedChannel() throws Exception {\n        String agentName = ""agent1"";\n        Map<String, String> properties = getPropertiesForChannel(agentName,\n                UnspecifiedChannel.class.getName());\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, properties);\n\n        MaterializedConfiguration config1 = provider.getConfiguration();\n        Channel channel1 = config1.getChannels().values().iterator().next();\n        assertTrue(channel1 instanceof UnspecifiedChannel);\n\n        MaterializedConfiguration config2 = provider.getConfiguration();\n        Channel channel2 = config2.getChannels().values().iterator().next();\n        assertTrue(channel2 instanceof UnspecifiedChannel);\n\n        assertSame(channel1, channel2);\n    }\n']",Unspecified;channel;agent;new;values;Name;Channel;Channel;Channel;config,7.566995918750763e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.841882705688477, -5.696202754974365, -6.28188943862915, -5.331256866455078, -5.462924480438232, -0.017360864207148552]",0.9827889800071716
3,"['    @Test\n    public void testReusableChannelNotReusedLater() throws Exception {\n        String agentName = ""agent1"";\n        Map<String, String> propertiesReusable = getPropertiesForChannel(agentName,\n                RecyclableChannel.class\n                        .getName());\n        Map<String, String> propertiesDispoable = getPropertiesForChannel(agentName,\n                DisposableChannel.class\n                        .getName());\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, propertiesReusable);\n        MaterializedConfiguration config1 = provider.getConfiguration();\n        Channel channel1 = config1.getChannels().values().iterator().next();\n        assertTrue(channel1 instanceof RecyclableChannel);\n\n        provider.setProperties(propertiesDispoable);\n        MaterializedConfiguration config2 = provider.getConfiguration();\n        Channel channel2 = config2.getChannels().values().iterator().next();\n        assertTrue(channel2 instanceof DisposableChannel);\n\n        provider.setProperties(propertiesReusable);\n        MaterializedConfiguration config3 = provider.getConfiguration();\n        Channel channel3 = config3.getChannels().values().iterator().next();\n        assertTrue(channel3 instanceof RecyclableChannel);\n\n        assertNotSame(channel1, channel3);\n    }\n']",Dispoable;config;Disposable;Channel;Provider;Configuration;agent;channel;For;Channels,5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8189894035458565e-10,5,5,"[-5.832583904266357, -5.6780219078063965, -6.268398761749268, -5.284867763519287, -5.490375518798828, -0.017593981698155403]",0.982559859752655
3,"['    @Test\n    public void testSourceThrowsExceptionDuringConfiguration() throws Exception {\n        String agentName = ""agent1"";\n        String sourceType = UnconfigurableSource.class.getName();\n        String channelType = ""memory"";\n        String sinkType = ""null"";\n        Map<String, String> properties = getProperties(agentName, sourceType,\n                channelType, sinkType);\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, properties);\n        MaterializedConfiguration config = provider.getConfiguration();\n        assertEquals(config.getSourceRunners().size(), 0);\n        assertEquals(config.getChannels().size(), 1);\n        assertEquals(config.getSinkRunners().size(), 1);\n    }\n']",Source;ink;Runners;get;Channels;agent;config;Memory;sink;Runners,3.725290298461914e-09;1.8335413187742233e-09;1.8044374883174896e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.830596923828125, -5.668084621429443, -6.268898963928223, -5.332171440124512, -5.465305328369141, -0.017502030357718468]",0.9826502203941345
3,"['    @Test\n    public void testChannelThrowsExceptionDuringConfiguration() throws Exception {\n        String agentName = ""agent1"";\n        String sourceType = ""seq"";\n        String channelType = UnconfigurableChannel.class.getName();\n        String sinkType = ""null"";\n        Map<String, String> properties = getProperties(agentName, sourceType,\n                channelType, sinkType);\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, properties);\n        MaterializedConfiguration config = provider.getConfiguration();\n        assertEquals(config.getSourceRunners().size(), 0);\n        assertEquals(config.getChannels().size(), 0);\n        assertEquals(config.getSinkRunners().size(), 0);\n    }\n']",channel;sink;Channel;Type;source;Equals;Type;Memory;Type;get,8.149072527885437e-10;6.111804395914078e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.833454132080078, -5.676121711730957, -6.270134925842285, -5.330496311187744, -5.463533401489258, -0.017478834837675095]",0.9826730489730835
3,"['    @Test\n    public void testSinkThrowsExceptionDuringConfiguration() throws Exception {\n        String agentName = ""agent1"";\n        String sourceType = ""seq"";\n        String channelType = ""memory"";\n        String sinkType = UnconfigurableSink.class.getName();\n        Map<String, String> properties = getProperties(agentName, sourceType,\n                channelType, sinkType);\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, properties);\n        MaterializedConfiguration config = provider.getConfiguration();\n        assertEquals(config.getSourceRunners().size(), 1);\n        assertEquals(config.getChannels().size(), 1);\n        assertEquals(config.getSinkRunners().size(), 0);\n    }\n']",Configuration;ink;Source;agent;Channels;size;Type;provider;Materialized;config,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.43833414465189e-10;3.7834979593753815e-10;2.473825588822365e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.83979606628418, -5.676346302032471, -6.2881317138671875, -5.34814977645874, -5.478475093841553, -0.017274750396609306]",0.9828736186027527
3,"['    @Test\n    public void testSourceAndSinkThrowExceptionDuringConfiguration()\n            throws Exception {\n        String agentName = ""agent1"";\n        String sourceType = UnconfigurableSource.class.getName();\n        String channelType = ""memory"";\n        String sinkType = UnconfigurableSink.class.getName();\n        Map<String, String> properties = getProperties(agentName, sourceType,\n                channelType, sinkType);\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, properties);\n        MaterializedConfiguration config = provider.getConfiguration();\n        assertEquals(config.getSourceRunners().size(), 0);\n        assertEquals(config.getChannels().size(), 0);\n        assertEquals(config.getSinkRunners().size(), 0);\n    }\n']",agent;ink;memory;channel;Memory;source;Materialized;new;ink;Type,6.402842700481415e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.839087963104248, -5.679802417755127, -6.276148319244385, -5.328598499298096, -5.467066287994385, -0.01743186078965664]",0.9827191829681396
3,"['    @Test\n    public void testSinkSourceMismatchDuringConfiguration() throws Exception {\n        String agentName = ""agent1"";\n        String sourceType = ""seq"";\n        String channelType = ""memory"";\n        String sinkType = ""avro"";\n        Map<String, String> properties = getProperties(agentName, sourceType,\n                channelType, sinkType);\n        properties.put(agentName + "".channels.channel1.capacity"", ""1000"");\n        properties.put(agentName + "".channels.channel1.transactionCapacity"", ""1000"");\n        properties.put(agentName + "".sources.source1.batchSize"", ""1000"");\n        properties.put(agentName + "".sinks.sink1.batch-size"", ""1000"");\n        properties.put(agentName + "".sinks.sink1.hostname"", ""10.10.10.10"");\n        properties.put(agentName + "".sinks.sink1.port"", ""1010"");\n\n        MemoryConfigurationProvider provider =\n                new MemoryConfigurationProvider(agentName, properties);\n        MaterializedConfiguration config = provider.getConfiguration();\n        assertEquals(config.getSourceRunners().size(), 1);\n        assertEquals(config.getChannels().size(), 1);\n        assertEquals(config.getSinkRunners().size(), 1);\n\n        properties.put(agentName + "".sources.source1.batchSize"", ""1001"");\n        properties.put(agentName + "".sinks.sink1.batch-size"", ""1000"");\n\n        provider = new MemoryConfigurationProvider(agentName, properties);\n        config = provider.getConfiguration();\n        assertEquals(config.getSourceRunners().size(), 0);\n        assertEquals(config.getChannels().size(), 1);\n        assertEquals(config.getSinkRunners().size(), 1);\n\n        properties.put(agentName + "".sources.source1.batchSize"", ""1000"");\n        properties.put(agentName + "".sinks.sink1.batch-size"", ""1001"");\n\n        provider = new MemoryConfigurationProvider(agentName, properties);\n        config = provider.getConfiguration();\n        assertEquals(config.getSourceRunners().size(), 1);\n        assertEquals(config.getChannels().size(), 1);\n        assertEquals(config.getSinkRunners().size(), 0);\n\n        properties.put(agentName + "".sources.source1.batchSize"", ""1001"");\n        properties.put(agentName + "".sinks.sink1.batch-size"", ""1001"");\n\n        provider = new MemoryConfigurationProvider(agentName, properties);\n        config = provider.getConfiguration();\n        assertEquals(config.getSourceRunners().size(), 0);\n        assertEquals(config.getChannels().size(), 0);\n        assertEquals(config.getSinkRunners().size(), 0);\n    }\n']",seq;Configuration;Capacity;Exception;batch;port;batch;Source;Type;hostname,1.6298145055770874e-09;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.817350387573242, -5.636236190795898, -6.259167671203613, -5.293979644775391, -5.490114688873291, -0.01776040904223919]",0.9823962450027466
3,"['    @Test(enabled = false)\n    public void testPolling() throws Exception {\n\n        // let first event fire\n        Thread.sleep(2000L);\n\n        final List<MaterializedConfiguration> events = Lists.newArrayList();\n\n        Object eventHandler = new Object() {\n            @Subscribe\n            public synchronized void handleConfigurationEvent(MaterializedConfiguration event) {\n                events.add(event);\n            }\n        };\n        eventBus.register(eventHandler);\n        configFile.setLastModified(System.currentTimeMillis());\n\n        // now wait for second event to fire\n        Thread.sleep(2000L);\n\n        Assert.assertEquals(events.size(), 1, String.valueOf(events));\n\n        MaterializedConfiguration materializedConfiguration = events.remove(0);\n\n        Assert.assertEquals(materializedConfiguration.getSourceRunners().size(),1);\n        Assert.assertEquals(materializedConfiguration.getSinkRunners().size(), 1);\n        Assert.assertEquals(materializedConfiguration.getChannels().size(), 1);\n\n\n    }\n']",Runners;ink;get;get;Polling;Configuration;Source;Equals;Configuration;second,2.444721758365631e-09;1.862645149230957e-09;7.566995918750763e-10;6.402842700481415e-10;6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10;4.2928149923682213e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.842801094055176, -5.709530830383301, -6.3126420974731445, -5.372188568115234, -5.495646953582764, -0.016919083893299103]",0.9832232594490051
3,['    @Test\n    public void testPolling() throws Exception {\n        es.awaitEvent();\n        es.reset();\n\n        FlumeConfiguration fc = cp.getFlumeConfiguration();\n        Assert.assertTrue(fc.getConfigurationErrors().isEmpty());\n        AgentConfiguration ac = fc.getConfigurationFor(AGENT_NAME);\n        Assert.assertNull(ac);\n\n        addData();\n        es.awaitEvent();\n        es.reset();\n\n        verifyProperties(cp);\n    }\n'],Agent;Flume;es;Flume;reset;cp;fc;NAME;get;ac,7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;4.2928149923682213e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.857373237609863, -5.708087921142578, -6.305792808532715, -5.383112907409668, -5.460568428039551, -0.01699163392186165]",0.983151912689209
3,"['    @Test\n    public void testBasicConfiguration() throws Exception {\n\n        EventBus eventBus = new EventBus(""test-event-bus"");\n\n        MaterializedConfiguration materializedConfiguration = new\n                SimpleMaterializedConfiguration();\n\n        SourceRunner sourceRunner = mockLifeCycle(SourceRunner.class);\n        materializedConfiguration.addSourceRunner(""test"", sourceRunner);\n\n        SinkRunner sinkRunner = mockLifeCycle(SinkRunner.class);\n        materializedConfiguration.addSinkRunner(""test"", sinkRunner);\n\n        Channel channel = mockLifeCycle(Channel.class);\n        materializedConfiguration.addChannel(""test"", channel);\n\n\n        ConfigurationProvider configurationProvider = mock(ConfigurationProvider.class);\n        when(configurationProvider.getConfiguration()).thenReturn(materializedConfiguration);\n\n        Application application = new Application();\n        eventBus.register(application);\n        eventBus.post(materializedConfiguration);\n        application.start();\n\n        Thread.sleep(1000L);\n\n        verify(sourceRunner).start();\n        verify(sinkRunner).start();\n        verify(channel).start();\n\n        application.stop();\n\n        Thread.sleep(1000L);\n\n        verify(sourceRunner).stop();\n        verify(sinkRunner).stop();\n        verify(channel).stop();\n    }\n']",Runner;ink;Configuration;ink;channel;materialized;materialized;mock;start;Channel,6.402842700481415e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9467628337442875e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.839015960693359, -5.700970649719238, -6.291647911071777, -5.321092128753662, -5.488266944885254, -0.017276858910918236]",0.982871413230896
3,"['    @Test\n    public void testFLUME1854() throws Exception {\n        File configFile = new File(baseDir, ""flume-conf.properties"");\n        Files.copy(new File(getClass().getClassLoader()\n                .getResource(""flume-conf.properties"").getFile()), configFile);\n        Random random = new Random();\n        for (int i = 0; i < 3; i++) {\n            EventBus eventBus = new EventBus(""test-event-bus"");\n            PollingPropertiesFileConfigurationProvider configurationProvider =\n                    new PollingPropertiesFileConfigurationProvider(""host1"",\n                            configFile, eventBus, 1);\n            List<LifecycleAware> components = Lists.newArrayList();\n            components.add(configurationProvider);\n            Application application = new Application(components);\n            eventBus.register(application);\n            application.start();\n            Thread.sleep(random.nextInt(10000));\n            application.stop();\n        }\n    }\n']",get;config;FLUME;Event;properties;Files;File;File;Dir;application,8.731149137020111e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10,5,5,"[-5.856832027435303, -5.704326152801514, -6.309812068939209, -5.34591817855835, -5.509692668914795, -0.01696830987930298]",0.9831748604774475
3,"['    @Test(timeOut = 10000L)\n    public void testFLUME2786() throws Exception {\n        final String agentName = ""test"";\n        final int interval = 1;\n        final long intervalMs = 1000L;\n\n        File configFile = new File(baseDir, ""flume-conf.properties"");\n        Files.copy(new File(getClass().getClassLoader()\n                .getResource(""flume-conf.properties.2786"").getFile()), configFile);\n        File mockConfigFile = spy(configFile);\n        when(mockConfigFile.lastModified()).then(new Answer<Long>() {\n            @Override\n            public Long answer(InvocationOnMock invocation) throws Throwable {\n                Thread.sleep(intervalMs);\n                return System.currentTimeMillis();\n            }\n']",mock;Config;File;Files;interval;File;Mill;Long;final;Loader,4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.861833572387695, -5.70841121673584, -6.341764450073242, -5.418979644775391, -5.529107093811035, -0.01646115817129612]",0.9836736917495728
3,"['    @Test\n    public void resolveEnvVar() {\n        environmentVariables.set(""VARNAME"", ""varvalue"");\n        String resolved = EnvVarResolverProperties.resolveEnvVars(""padding ${VARNAME} padding"");\n        Assert.assertEquals(""padding varvalue padding"", resolved);\n    }\n']",Properties;Var;padding;En;Resolver;varvalue;resolved;padding;resolve;En,4.190951585769653e-09;3.725290298461914e-09;2.444721758365631e-09;2.3283064365386963e-09;2.2118911147117615e-09;1.6298145055770874e-09;1.280568540096283e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.899132251739502, -5.818665504455566, -6.3631134033203125, -5.462795734405518, -5.451659202575684, -0.016097107902169228]",0.9840317368507385
3,"['    @Test\n    public void resolveEnvVars() {\n        environmentVariables.set(""VARNAME1"", ""varvalue1"");\n        environmentVariables.set(""VARNAME2"", ""varvalue2"");\n        String resolved = EnvVarResolverProperties\n                .resolveEnvVars(""padding ${VARNAME1} ${VARNAME2} padding"");\n        Assert.assertEquals(""padding varvalue1 varvalue2 padding"", resolved);\n    }\n']",environment;Var;En;ARNAME;resolve;Variables;ARNAME;ARNAME;padding;varvalue,2.7939677238464355e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;4.220055416226387e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.86500883102417, -5.751636505126953, -6.32495641708374, -5.397940158843994, -5.464207649230957, -0.01670597493648529]",0.9834327697753906
3,"['    @Test\n    public void getProperty() {\n        String NC_PORT = ""6667"";\n        environmentVariables.set(""NC_PORT"", NC_PORT);\n        System.setProperty(""propertiesImplementation"",\n                ""org.apache.pulsar.io.flume.node.EnvVarResolverProperties"");\n\n        Assert.assertEquals(NC_PORT, provider.getFlumeConfiguration()\n                .getConfigurationFor(""a1"")\n                .getSourceContext().get(""r1"").getParameters().get(""port""));\n    }\n']",ulsar;Variables;environment;Var;properties;PORT;io;NC;Property;flume,9.167706593871117e-10;7.8580342233181e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.854037761688232, -5.729905605316162, -6.308520317077637, -5.387661457061768, -5.464845180511475, -0.01688380353152752]",0.9832579493522644
3,['    @Test\n    public void testPropertyRead() throws Exception {\n        verifyProperties(configurationProvider);\n    }\n'],Provider;Read;Properties;Exception;verify;configuration;Property,1.862645149230957e-09;9.313225746154785e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-2.5029294192790985e-09;-2.7939677238464355e-09,5,5,"[-5.863790512084961, -5.715295314788818, -6.314403533935547, -5.451483249664307, -5.400456428527832, -0.01689200848340988]",0.983249843120575
3,"['    @Test\n    public void testPropertyRead() {\n\n        FlumeConfiguration configuration = provider.getFlumeConfiguration();\n        assertNotNull(configuration);\n\n    /*\n     * Test the known errors in the file\n     */\n        List<String> expected = Lists.newArrayList();\n        expected.add(""host5 CONFIG_ERROR"");\n        expected.add(""host5 INVALID_PROPERTY"");\n        expected.add(""host4 CONFIG_ERROR"");\n        expected.add(""host4 CONFIG_ERROR"");\n        expected.add(""host4 PROPERTY_VALUE_NULL"");\n        expected.add(""host4 PROPERTY_VALUE_NULL"");\n        expected.add(""host4 PROPERTY_VALUE_NULL"");\n        expected.add(""host4 AGENT_CONFIGURATION_INVALID"");\n        expected.add(""ch2 ATTRS_MISSING"");\n        expected.add(""host3 CONFIG_ERROR"");\n        expected.add(""host3 PROPERTY_VALUE_NULL"");\n        expected.add(""host3 AGENT_CONFIGURATION_INVALID"");\n        expected.add(""host2 PROPERTY_VALUE_NULL"");\n        expected.add(""host2 AGENT_CONFIGURATION_INVALID"");\n        List<String> actual = Lists.newArrayList();\n        for (FlumeConfigurationError error : configuration.getConfigurationErrors()) {\n            actual.add(error.getComponentName() + "" "" + error.getErrorType().toString());\n        }\n        Collections.sort(expected);\n        Collections.sort(actual);\n        assertEquals(actual, expected);\n\n        AgentConfiguration agentConfiguration =\n                configuration.getConfigurationFor(""host1"");\n        assertNotNull(agentConfiguration);\n\n        LOGGER.info(agentConfiguration.getPrevalidationConfig());\n        LOGGER.info(agentConfiguration.getPostvalidationConfig());\n\n        Set<String> sources = Sets.newHashSet(""source1"");\n        Set<String> sinks = Sets.newHashSet(""sink1"");\n        Set<String> channels = Sets.newHashSet(""channel1"");\n\n        assertEquals(agentConfiguration.getSourceSet(), sources);\n        assertEquals(agentConfiguration.getSinkSet(), sinks);\n        assertEquals(agentConfiguration.getChannelSet(), channels);\n    }\n']",Property;INVALID;CONFIGURATION;Component;INVALID;error;Errors;configuration;VALUE;file,1.3969838619232178e-09;7.566995918750763e-10;5.966285243630409e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.838351726531982, -5.697354793548584, -6.298551559448242, -5.331085681915283, -5.534790992736816, -0.01703757420182228]",0.9831067323684692
3,"['    @Test\n    public void TestOpenAndWriteSink() throws Exception {\n        Map<String, Object> conf = Maps.newHashMap();\n        StringSink stringSink = new StringSink();\n        conf.put(""name"", ""a1"");\n        conf.put(""confFile"", ""./src/test/resources/flume/source.conf"");\n        conf.put(""noReloadConf"", false);\n        conf.put(""zkConnString"", """");\n        conf.put(""zkBasePath"", """");\n        stringSink.open(conf, mockSinkContext);\n        send(stringSink, 100);\n\n        Thread.sleep(3 * 1000);\n        Transaction transaction = channel.getTransaction();\n        transaction.begin();\n        Event event = channel.take();\n\n        Assert.assertNotNull(event);\n        Assert.assertNotNull(mockRecord);\n\n        verify(mockRecord, times(100)).ack();\n        transaction.commit();\n        transaction.close();\n    }\n']",ink;Null;File;source;Exception;Null;Not;string;transaction;string,8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.0372681319713593e-10,5,5,"[-5.845548152923584, -5.70100736618042, -6.3092265129089355, -5.3655195236206055, -5.496989727020264, -0.01697217859327793]",0.9831710457801819
3,"['    @Test\n    public void TestOpenAndReadSource() throws Exception {\n        Map<String, Object> conf = Maps.newHashMap();\n        StringSource stringSource = new StringSource();\n        conf.put(""name"", ""a1"");\n        conf.put(""confFile"", ""./src/test/resources/flume/sink.conf"");\n        conf.put(""noReloadConf"", false);\n        conf.put(""zkConnString"", """");\n        conf.put(""zkBasePath"", """");\n        Event event = EventBuilder.withBody(""test event 1"", Charsets.UTF_8);\n        stringSource.open(conf, mockSourceContext);\n        Thread.sleep(3 * 1000);\n        sink.start();\n        Transaction transaction = channel.getTransaction();\n\n        transaction.begin();\n        for (int i = 0; i < 10; i++) {\n            channel.put(event);\n        }\n        transaction.commit();\n        transaction.close();\n\n        for (int i = 0; i < 5; i++) {\n            Sink.Status status = sink.process();\n            assertEquals(status, Sink.Status.READY);\n        }\n\n        assertEquals(sink.process(), Sink.Status.BACKOFF);\n        stringSource.close();\n    }\n']",Charsets;Source;sleep;open;resources;File;get;Conn;string;conf,3.14321368932724e-09;1.0477378964424133e-09;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.8429412841796875, -5.694025039672852, -6.298512935638428, -5.338262557983398, -5.5113115310668945, -0.01709570176899433]",0.9830495715141296
3,"['    @Test\n    public void testJsonSerialization() throws Exception {\n\n        final String[] keyNames = { ""key1"", ""key2"" };\n        final String key1Value = ""test1"";\n        final String key2Value = ""test2"";\n        final byte[][] keyValues = { key1Value.getBytes(), key2Value.getBytes() };\n        final String param = ""param"";\n        final String algo = ""algo"";\n        int batchSize = 10;\n        int compressionMsgSize = 10;\n\n        // serialize to json\n        byte[] data = ""payload"".getBytes();\n        Map<String, String> properties = Maps.newHashMap();\n        properties.put(""prop1"", ""value"");\n        Map<String, String> metadata1 = Maps.newHashMap();\n        metadata1.put(""version"", ""v1"");\n        metadata1.put(""ckms"", ""cmks-1"");\n        Map<String, String> metadata2 = Maps.newHashMap();\n        metadata2.put(""version"", ""v2"");\n        metadata2.put(""ckms"", ""cmks-2"");\n        Record<byte[]> recordCtx = createRecord(data, algo, keyNames, keyValues, param.getBytes(), metadata1, metadata2,\n                batchSize, compressionMsgSize, properties, true);\n        String json = Utils.serializeRecordToJson(recordCtx);\n\n        // deserialize from json and assert\n        KinesisMessageResponse kinesisJsonResponse = deSerializeRecordFromJson(json);\n        assertEquals(data, getDecoder().decode(kinesisJsonResponse.getPayloadBase64()));\n        EncryptionCtx encryptionCtxDeser = kinesisJsonResponse.getEncryptionCtx();\n        assertEquals(key1Value.getBytes(),\n                getDecoder().decode(encryptionCtxDeser.getKeysMapBase64().get(keyNames[0])));\n        assertEquals(key2Value.getBytes(),\n                getDecoder().decode(encryptionCtxDeser.getKeysMapBase64().get(keyNames[1])));\n        assertEquals(param.getBytes(), getDecoder().decode(encryptionCtxDeser.getEncParamBase64()));\n        assertEquals(algo, encryptionCtxDeser.getAlgorithm());\n        assertEquals(metadata1, encryptionCtxDeser.getKeysMetadataMap().get(keyNames[0]));\n        assertEquals(metadata2, encryptionCtxDeser.getKeysMetadataMap().get(keyNames[1]));\n        assertEquals(properties, kinesisJsonResponse.getProperties());\n\n    }\n']",deserialize;algo;properties;Value;metadata;from;param;Response;compression;json,7.421476766467094e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.82684326171875, -5.66563606262207, -6.277727127075195, -5.301496982574463, -5.5203752517700195, -0.017427409067749977]",0.982723593711853
3,"['    @Test(dataProvider=""encryption"")\n    public void testFbSerialization(boolean isEncryption) throws Exception {\n\n        final String[] keyNames = { ""key1"", ""key2"" };\n        final String param = ""param"";\n        final String algo = ""algo"";\n        int batchSize = 10;\n        int compressionMsgSize = 10;\n\n        for (int k = 0; k < 5; k++) {\n            String payloadString = RandomStringUtils.random(142342 * k, String.valueOf(System.currentTimeMillis()));\n            final String key1Value = payloadString + ""test1"";\n            final String key2Value = payloadString + ""test2"";\n            final byte[][] keyValues = { key1Value.getBytes(), key2Value.getBytes() };\n            byte[] data = payloadString.getBytes();\n            Map<String, String> properties = Maps.newHashMap();\n            properties.put(""prop1"", payloadString);\n            Map<String, String> metadata1 = Maps.newHashMap();\n            metadata1.put(""version"", ""v1"");\n            metadata1.put(""ckms"", ""cmks-1"");\n            Map<String, String> metadata2 = Maps.newHashMap();\n            metadata2.put(""version"", ""v2"");\n            metadata2.put(""ckms"", ""cmks-2"");\n            Record<byte[]> record = createRecord(data, algo, keyNames, keyValues, param.getBytes(), metadata1,\n                    metadata2, batchSize, compressionMsgSize, properties, isEncryption);\n            ByteBuffer flatBuffer = Utils.serializeRecordToFlatBuffer(record);\n\n            Message kinesisJsonResponse = Message.getRootAsMessage(flatBuffer);\n            byte[] fbPayloadBytes = new byte[kinesisJsonResponse.payloadLength()];\n            kinesisJsonResponse.payloadAsByteBuffer().get(fbPayloadBytes);\n            assertEquals(data, fbPayloadBytes);\n\n            if(isEncryption) {\n                org.apache.pulsar.io.kinesis.fbs.EncryptionCtx encryptionCtxDeser = kinesisJsonResponse.encryptionCtx();\n                byte compressionType = encryptionCtxDeser.compressionType();\n                int fbBatchSize = encryptionCtxDeser.batchSize();\n                boolean isBathcMessage = encryptionCtxDeser.isBatchMessage();\n                int fbCompressionMsgSize = encryptionCtxDeser.uncompressedMessageSize();\n                int totalKeys = encryptionCtxDeser.keysLength();\n                Map<String, Map<String, String>> fbKeyMetadataResult = Maps.newHashMap();\n                Map<String, byte[]> fbKeyValueResult = Maps.newHashMap();\n                for (int i = 0; i < encryptionCtxDeser.keysLength(); i++) {\n                    org.apache.pulsar.io.kinesis.fbs.EncryptionKey encryptionKey = encryptionCtxDeser.keys(i);\n                    String keyName = encryptionKey.key();\n                    byte[] keyValueBytes = new byte[encryptionKey.valueLength()];\n                    encryptionKey.valueAsByteBuffer().get(keyValueBytes);\n                    fbKeyValueResult.put(keyName, keyValueBytes);\n                    Map<String, String> fbMetadata = Maps.newHashMap();\n                    for (int j = 0; j < encryptionKey.metadataLength(); j++) {\n                        KeyValue encMtdata = encryptionKey.metadata(j);\n                        fbMetadata.put(encMtdata.key(), encMtdata.value());\n                    }\n                    fbKeyMetadataResult.put(keyName, fbMetadata);\n                }\n                byte[] paramBytes = new byte[encryptionCtxDeser.paramLength()];\n                encryptionCtxDeser.paramAsByteBuffer().get(paramBytes);\n\n                assertEquals(totalKeys, 2);\n                assertEquals(batchSize, fbBatchSize);\n                assertTrue(isBathcMessage);\n                assertEquals(compressionMsgSize, fbCompressionMsgSize);\n                assertEquals(keyValues[0], fbKeyValueResult.get(keyNames[0]));\n                assertEquals(keyValues[1], fbKeyValueResult.get(keyNames[1]));\n                assertEquals(metadata1, fbKeyMetadataResult.get(keyNames[0]));\n                assertEquals(metadata2, fbKeyMetadataResult.get(keyNames[1]));\n                assertEquals(compressionType, org.apache.pulsar.io.kinesis.fbs.CompressionType.LZ4);\n                assertEquals(param.getBytes(), paramBytes);\n                assertEquals(algo, encryptionCtxDeser.algo());\n            }\n\n            Map<String, String> fbproperties = Maps.newHashMap();\n            for (int i = 0; i < kinesisJsonResponse.propertiesLength(); i++) {\n                KeyValue property = kinesisJsonResponse.properties(i);\n                fbproperties.put(property.key(), property.value());\n            }\n            assertEquals(properties, fbproperties);\n\n        }\n    }\n']",Provider;batch;prop;Serialization;Encryption;Value;Value;algo;metadata;data,1.0477378964424133e-09;8.731149137020111e-10;6.402842700481415e-10;6.111804395914078e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.6921043172478676e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.822377681732178, -5.617981433868408, -6.277146816253662, -5.33048152923584, -5.519428730010986, -0.01747286133468151]",0.9826788902282715
3,"['    @Test\n    public void testDefaultCredentialProvider() throws Exception {\n        KinesisSink sink = new KinesisSink();\n        Map<String, String> credentialParam = Maps.newHashMap();\n        String awsCredentialPluginParam = new Gson().toJson(credentialParam);\n        try {\n            sink.defaultCredentialProvider(awsCredentialPluginParam);\n            Assert.fail(""accessKey and SecretKey validation not applied"");\n        } catch (IllegalArgumentException ie) {\n            // Ok..\n        }\n\n        final String accesKey = ""ak"";\n        final String secretKey = ""sk"";\n        credentialParam.put(KinesisSink.ACCESS_KEY_NAME, accesKey);\n        credentialParam.put(KinesisSink.SECRET_KEY_NAME, secretKey);\n        awsCredentialPluginParam = new Gson().toJson(credentialParam);\n        AWSCredentialsProvider credentialProvider = sink.defaultCredentialProvider(awsCredentialPluginParam)\n                .getCredentialProvider();\n        Assert.assertNotNull(credentialProvider);\n        Assert.assertEquals(credentialProvider.getCredentials().getAWSAccessKeyId(), accesKey);\n        Assert.assertEquals(credentialProvider.getCredentials().getAWSSecretKey(), secretKey);\n\n        sink.close();\n    }\n']",acces;SECRET;secret;Maps;son;Param;son;Secret;Param;ak,4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.820363521575928, -5.652000904083252, -6.262846946716309, -5.30453634262085, -5.50927209854126, -0.017554039135575294]",0.982599139213562
3,"['    @Test\n    public void testCredentialProvider() throws Exception {\n        KinesisSink sink = new KinesisSink();\n\n        final String accesKey = ""ak"";\n        final String secretKey = ""sk"";\n        Map<String, String> credentialParam = Maps.newHashMap();\n        credentialParam.put(KinesisSink.ACCESS_KEY_NAME, accesKey);\n        credentialParam.put(KinesisSink.SECRET_KEY_NAME, secretKey);\n        String awsCredentialPluginParam = new Gson().toJson(credentialParam);\n        AWSCredentialsProvider credentialProvider = sink.createCredentialProvider(null, awsCredentialPluginParam)\n                .getCredentialProvider();\n        Assert.assertEquals(credentialProvider.getCredentials().getAWSAccessKeyId(), accesKey);\n        Assert.assertEquals(credentialProvider.getCredentials().getAWSSecretKey(), secretKey);\n\n        credentialProvider = sink.createCredentialProvider(AwsCredentialProviderPluginImpl.class.getName(), ""{}"")\n                .getCredentialProvider();\n        Assert.assertNotNull(credentialProvider);\n        Assert.assertEquals(credentialProvider.getCredentials().getAWSAccessKeyId(),\n                AwsCredentialProviderPluginImpl.accessKey);\n        Assert.assertEquals(credentialProvider.getCredentials().getAWSSecretKey(),\n                AwsCredentialProviderPluginImpl.secretKey);\n        Assert.assertEquals(((BasicSessionCredentials) credentialProvider.getCredentials()).getSessionToken(),\n                AwsCredentialProviderPluginImpl.sessionToken);\n\n        sink.close();\n    }\n']",SECRET;ak;KEY;Impl;redential;son;NAME;Plugin;Exception;new,7.8580342233181e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.817036151885986, -5.6495842933654785, -6.2630109786987305, -5.300750255584717, -5.497887134552002, -0.01763884164392948]",0.982515811920166
3,"['    @Test\n    public void testCredentialProviderPlugin() throws Exception {\n        KinesisSink sink = new KinesisSink();\n\n        AWSCredentialsProvider credentialProvider = sink\n                .createCredentialProviderWithPlugin(AwsCredentialProviderPluginImpl.class.getName(), ""{}"")\n                .getCredentialProvider();\n        Assert.assertNotNull(credentialProvider);\n        Assert.assertEquals(credentialProvider.getCredentials().getAWSAccessKeyId(),\n                AwsCredentialProviderPluginImpl.accessKey);\n        Assert.assertEquals(credentialProvider.getCredentials().getAWSSecretKey(),\n                AwsCredentialProviderPluginImpl.secretKey);\n        Assert.assertEquals(((BasicSessionCredentials) credentialProvider.getCredentials()).getSessionToken(),\n                AwsCredentialProviderPluginImpl.sessionToken);\n\n        sink.close();\n    }\n']",Exception;session;Provider;AWSSecret;Impl;Plugin;sink;redential;Not;Key,5.238689482212067e-10;4.0745362639427185e-10;2.2919266484677792e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.843526363372803, -5.683999538421631, -6.2782979011535645, -5.324899673461914, -5.4790873527526855, -0.017366956919431686]",0.9827828407287598
3,"['    @Test\n    public void TestOpenAndWriteSink() throws Exception {\n        message = mock(MessageImpl.class);\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(""solrUrl"", ""http://localhost:8983/solr"");\n        configs.put(""solrMode"", ""Standalone"");\n        configs.put(""solrCollection"", ""techproducts"");\n        configs.put(""solrCommitWithinMs"", ""100"");\n        configs.put(""username"", """");\n        configs.put(""password"", """");\n        GenericSchema<GenericRecord> genericAvroSchema;\n\n        SolrGenericRecordSink sink = new SolrGenericRecordSink();\n\n        // prepare a foo Record\n        Foo obj = new Foo();\n        obj.setField1(""FakeFiled1"");\n        obj.setField2(""FakeFiled1"");\n        AvroSchema<Foo> schema = AvroSchema.of(Foo.class);\n\n        byte[] bytes = schema.encode(obj);\n        AutoConsumeSchema autoConsumeSchema = new AutoConsumeSchema();\n        autoConsumeSchema.setSchema(GenericSchemaImpl.of(schema.getSchemaInfo()));\n\n        Record<GenericRecord> record = PulsarRecord.<GenericRecord>builder()\n            .message(message)\n            .topicName(""fake_topic_name"")\n            .build();\n\n        genericAvroSchema = new GenericAvroSchema(schema.getSchemaInfo());\n\n        when(message.getValue())\n                .thenReturn(genericAvroSchema.decode(bytes));\n\n        log.info(""foo:{}, Message.getValue: {}, record.getValue: {}"",\n            obj.toString(),\n            message.getValue().toString(),\n            record.getValue().toString());\n\n        // open should success\n        sink.open(configs, null);\n    }\n']",ink;Ms;ink;Foo;Within;Record;Avro;Impl;ulsar;Sol,1.3969838619232178e-09;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.819428443908691, -5.6469597816467285, -6.262248992919922, -5.314218044281006, -5.492255210876465, -0.01759796403348446]",0.9825558662414551
3,"['    @Test\n    public void testSinkContext() throws Exception {\n        SinkContext sinkContext = mock(SinkContext.class);\n\n        Sink testSink = spy(TestSink.class);\n        testSink.open(new HashMap<>(), sinkContext);\n\n        verify(sinkContext, times(1)).recordMetric(""foo"", 1);\n    }\n']",class;new;record;ink;Map;sink;ink;Context;verify;Context,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.862992763519287, -5.710411071777344, -6.339090347290039, -5.457211971282959, -5.462881088256836, -0.0165631715208292]",0.9835733771324158
3,"['  @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = ""test exception"")\n  public void testNotifyErrors() throws Exception {\n    testBatchSource.notifyError(new RuntimeException(""test exception""));\n    testBatchSource.readNext();\n  }\n']",ify;atch;Source;Message;Reg;exception;expected;Next;Source;Errors,1.280568540096283e-09;9.313225746154785e-10;7.8580342233181e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;0.0,5,5,"[-5.944431781768799, -5.8263936042785645, -6.507733345031738, -5.627726078033447, -5.538063049316406, -0.014699372462928295]",0.9854081273078918
3,"['    @Test\n    public void testSinkContext() throws Exception {\n        SourceContext sourceContext = mock(SourceContext.class);\n\n        Source testSource = spy(TestSource.class);\n        testSource.open(new HashMap<>(), sourceContext);\n\n        verify(sourceContext, times(1)).recordMetric(""foo"", 1);\n    }\n']",spy;ink;Source;times;open;Context;Context;new;source;foo,2.0954757928848267e-09;1.862645149230957e-09;6.402842700481415e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.857274055480957, -5.698724746704102, -6.326178550720215, -5.4527668952941895, -5.460063934326172, -0.016674086451530457]",0.9834641814231873
3,"['    @Test\n    public void testGetBytesNoCopy() throws Exception {\n        byte[] originalArray = {1, 2, 3};\n        ByteBuffer wrapped = ByteBuffer.wrap(originalArray);\n        assertEquals(0, wrapped.arrayOffset());\n        assertEquals(3, wrapped.remaining());\n        assertSame(ByteBufferSchemaWrapper.getBytes(wrapped), originalArray);\n    }\n']",Byte;wrapped;byte;original;original;get;original;Array;Equals;Array,3.346940502524376e-10;3.346940502524376e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.0186340659856796e-10;8.731149137020111e-11,5,5,"[-5.839628219604492, -5.679534435272217, -6.265124797821045, -5.367063522338867, -5.415027141571045, -0.01749582216143608]",0.9826564788818359
3,"['    @Test\n    public void testGetBytesOffsetZeroDifferentLen() throws Exception {\n        byte[] originalArray = {1, 2, 3};\n        ByteBuffer wrapped = ByteBuffer.wrap(originalArray, 1, 2);\n        assertEquals(0, wrapped.arrayOffset());\n        assertEquals(2, wrapped.remaining());\n        byte[] result = ByteBufferSchemaWrapper.getBytes(wrapped);\n        assertNotSame(result, originalArray);\n        assertArrayEquals(result, new byte[] {2,3});\n    }\n']",Byte;wrap;Len;Equals;wrapped;Buffer;byte;Offset;Wrapper;byte,4.0745362639427185e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10;1.6007106751203537e-10,5,5,"[-5.835834503173828, -5.678622245788574, -6.257112503051758, -5.346587657928467, -5.43444299697876, -0.017537053674459457]",0.9826159477233887
3,"['    @Test\n    public void testGetBytesOffsetNonZero() throws Exception {\n        byte[] originalArray = {1, 2, 3};\n        ByteBuffer wrapped = ByteBuffer.wrap(originalArray);\n        wrapped.position(1);\n        assertEquals(1, wrapped.position());\n        wrapped = wrapped.slice();\n        assertEquals(1, wrapped.arrayOffset());\n        assertEquals(2, wrapped.remaining());\n        byte[] result = ByteBufferSchemaWrapper.getBytes(wrapped);\n        assertNotSame(result, originalArray);\n        assertArrayEquals(result, new byte[] {2,3});\n    }\n']",Equals;array;slice;Buffer;wrapped;wrap;Exception;original;Byte;Bytes,4.874891601502895e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.836631774902344, -5.67285680770874, -6.248760223388672, -5.31901741027832, -5.446094989776611, -0.01765523850917816]",0.9824998378753662
3,"['    @Test\n    public void testGetBytesOffsetZero() throws Exception {\n        byte[] originalArray = {1, 2, 3};\n        ByteBuffer wrapped = ByteBuffer.wrap(originalArray, 0, 2);\n        assertEquals(0, wrapped.arrayOffset());\n        assertEquals(2, wrapped.remaining());\n        byte[] result = ByteBufferSchemaWrapper.getBytes(wrapped);\n        assertNotSame(result, originalArray);\n        assertArrayEquals(result, new byte[] {1,2});\n    }\n']",Buffer;Byte;Buffer;wrapped;get;remaining;Same;byte;byte;Array,7.8580342233181e-10;3.2014213502407074e-10;2.9103830456733704e-10;1.8917489796876907e-10;1.673470251262188e-10;1.5279510989785194e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.834293365478516, -5.675676345825195, -6.2518205642700195, -5.342290878295898, -5.432380676269531, -0.01759222522377968]",0.9825615882873535
3,"['    @Test\n    public void testNoKeyValueSchema() throws Exception {\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                StringDeserializer.class.getName(), Schema.STRING);\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                ByteBufferDeserializer.class.getName(), Schema.BYTEBUFFER);\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                BytesDeserializer.class.getName(), Schema.BYTEBUFFER);\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                DoubleDeserializer.class.getName(), Schema.DOUBLE);\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                FloatDeserializer.class.getName(), Schema.FLOAT);\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                IntegerDeserializer.class.getName(), Schema.INT32);\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                LongDeserializer.class.getName(), Schema.INT64);\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                ShortDeserializer.class.getName(), Schema.INT16);\n\n        validateSchemaNoKeyValue(StringDeserializer.class.getName(), Schema.STRING,\n                KafkaAvroDeserializer.class.getName(), KafkaBytesSource.DeferredSchemaPlaceholder.INSTANCE);\n\n    }\n']",STRING;INT;STRING;Key;STRING;Deserializer;Float;validate;STRING;Name,9.38598532229662e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;3.637978807091713e-10;3.346940502524376e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.7462298274040222e-10,5,5,"[-5.815545558929443, -5.64995813369751, -6.23246955871582, -5.2400431632995605, -5.472006797790527, -0.018129240721464157]",0.9820340871810913
3,"['    @Test\n    public void testKeyValueSchema() throws Exception {\n        validateSchemaKeyValue(IntegerDeserializer.class.getName(), Schema.INT32,\n                StringDeserializer.class.getName(), Schema.STRING,\n                ByteBuffer.wrap(new IntegerSerializer().serialize(""test"", 10)),\n                ByteBuffer.wrap(new StringSerializer().serialize(""test"", ""test"")));\n    }\n']",Schema;Key;validate;Schema;Schema;Exception;wrap;new;Value;Serializer,7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.382431946694851e-10,5,5,"[-5.845127582550049, -5.696338653564453, -6.2644805908203125, -5.342369556427002, -5.433745384216309, -0.0174576323479414]",0.9826938509941101
3,"['    @Test\n    public void testInvalidConfigWillThrownException() throws Exception {\n        KafkaAbstractSink sink = new DummySink();\n        Map<String, Object> config = new HashMap<>();\n        SinkContext sc = new SinkContext() {\n            @Override\n            public int getInstanceId() {\n                return 0;\n            }\n']",Kafka;Exception;Config;Context;get;Context;ink;Exception;Object;sc,1.862645149230957e-09;1.1641532182693481e-09;6.111804395914078e-10;1.4551915228366852e-10;8.731149137020111e-11;8.731149137020111e-11;8.731149137020111e-11;7.275957614183426e-11;6.548361852765083e-11;5.820766091346741e-11,5,5,"[-5.865293979644775, -5.693648815155029, -6.287116527557373, -5.380396842956543, -5.462762832641602, -0.017056090757250786]",0.9830885529518127
3,"['    @Test\n    public void testInvalidConfigWillThrownException() throws Exception {\n        KafkaAbstractSource source = new DummySource();\n        SourceContext ctx = mock(SourceContext.class);\n        Map<String, Object> config = new HashMap<>();\n        Assert.ThrowingRunnable openAndClose = ()->{\n            try {\n                source.open(config, ctx);\n                fail();\n            } finally {\n                source.close();\n            }\n        };\n        expectThrows(NullPointerException.class, openAndClose);\n        config.put(""topic"", ""topic_1"");\n        expectThrows(NullPointerException.class, openAndClose);\n        config.put(""bootstrapServers"", ""localhost:8080"");\n        expectThrows(NullPointerException.class, openAndClose);\n        config.put(""groupId"", ""test-group"");\n        config.put(""fetchMinBytes"", -1);\n        expectThrows(IllegalArgumentException.class, openAndClose);\n        config.put(""fetchMinBytes"", 1000);\n        config.put(""autoCommitEnabled"", true);\n        config.put(""autoCommitIntervalMs"", -1);\n        expectThrows(IllegalArgumentException.class, openAndClose);\n        config.put(""autoCommitIntervalMs"", 100);\n        config.put(""sessionTimeoutMs"", -1);\n        expectThrows(IllegalArgumentException.class, openAndClose);\n        config.put(""sessionTimeoutMs"", 10000);\n        config.put(""heartbeatIntervalMs"", -100);\n        expectThrows(IllegalArgumentException.class, openAndClose);\n        config.put(""heartbeatIntervalMs"", 20000);\n        expectThrows(IllegalArgumentException.class, openAndClose);\n        config.put(""heartbeatIntervalMs"", 5000);\n        config.put(""autoOffsetReset"", ""some-value"");\n        expectThrows(IllegalArgumentException.class, openAndClose);\n        config.put(""autoOffsetReset"", ""earliest"");\n        source.open(config, ctx);\n        source.close();\n    }\n']",Will;group;topic;Servers;Source;source;Source;Enabled;Throws;Exception,1.0477378964424133e-09;5.820766091346741e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.8553691916167736e-10;1.7462298274040222e-10,5,5,"[-5.836060523986816, -5.667218208312988, -6.282779693603516, -5.320528030395508, -5.517358779907227, -0.017301464453339577]",0.9828473329544067
3,"['    @Test\n    public void shouldStartWithEmptyTopicAndStoreDataAndRecoverAllState() throws Exception {\n        // Create the empty topic ...\n        testHistoryTopicContent(false, true);\n    }\n']",Recover;History;Start;false;All;Store;Exception;empty;Empty;Content,1.3387762010097504e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;3.4924596548080444e-10;3.055902197957039e-10;0.0;-8.731149137020111e-11;-1.1641532182693481e-10,5,5,"[-5.9592695236206055, -5.848622798919678, -6.484038829803467, -5.570298194885254, -5.541682720184326, -0.014832104556262493]",0.9852774739265442
3,"['    @Test\n    public void shouldIgnoreUnparseableMessages() throws Exception {\n        try (final Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n            .topic(topicName)\n            .create()\n        ) {\n            producer.send("""");\n            producer.send(""{\\""position\\"":{\\""filename\\"":\\""my-txn-file.log\\"",\\""position\\"":39},\\""databaseName\\"":\\""db1\\"",\\""ddl\\"":\\""DROP TABLE foo;\\""}"");\n            producer.send(""{\\""source\\"":{\\""server\\"":\\""my-server\\""},\\""databaseName\\"":\\""db1\\"",\\""ddl\\"":\\""DROP TABLE foo;\\""}"");\n            producer.send(""{\\""source\\"":{\\""server\\"":\\""my-server\\""},\\""position\\"":{\\""filename\\"":\\""my-txn-file.log\\"",\\""position\\"":39},\\""databaseName\\"":\\""db1\\"",\\""ddl\\"":\\""DROP TABLE foo;\\"""");\n            producer.send(""\\""source\\"":{\\""server\\"":\\""my-server\\""},\\""position\\"":{\\""filename\\"":\\""my-txn-file.log\\"",\\""position\\"":39},\\""databaseName\\"":\\""db1\\"",\\""ddl\\"":\\""DROP TABLE foo;\\""}"");\n            producer.send(""{\\""source\\"":{\\""server\\"":\\""my-server\\""},\\""position\\"":{\\""filename\\"":\\""my-txn-file.log\\"",\\""position\\"":39},\\""databaseName\\"":\\""db1\\"",\\""ddl\\"":\\""xxxDROP TABLE foo;\\""}"");\n        }\n\n        testHistoryTopicContent(true, true);\n    }\n']",should;foo;Producer;filename;xxx;filename;position;log;log;foo,8.731149137020111e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.869682788848877, -5.718672275543213, -6.356447219848633, -5.375126838684082, -5.56036901473999, -0.016455646604299545]",0.9836789965629578
3,"['    @Test(expectedExceptions = ParsingException.class)\n    public void shouldStopOnUnparseableSQL() throws Exception {\n        try (final Producer<String> producer = pulsarClient.newProducer(Schema.STRING).topic(topicName).create()) {\n            producer.send(""{\\""source\\"":{\\""server\\"":\\""my-server\\""},\\""position\\"":{\\""filename\\"":\\""my-txn-file.log\\"",\\""position\\"":39},\\""databaseName\\"":\\""db1\\"",\\""ddl\\"":\\""xxxDROP TABLE foo;\\""}"");\n        }\n\n        testHistoryTopicContent(false, false);\n    }\n']",pulsar;expected;Producer;STRING;position;Client;db;tx;Unparseable;Exception,3.245077095925808e-09;2.0954757928848267e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.89530235528946e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.905062198638916, -5.786896705627441, -6.456650733947754, -5.513578414916992, -5.557091236114502, -0.015372365713119507]",0.9847452044487
3,"['    @Test\n    public void testExists() throws Exception {\n        // happy path\n        testHistoryTopicContent(true, false);\n        assertTrue(history.exists());\n\n        // Set history to use dummy topic\n        Configuration config = Configuration.create()\n            .with(PulsarDatabaseHistory.SERVICE_URL, brokerUrl.toString())\n            .with(PulsarDatabaseHistory.TOPIC, ""persistent://my-property/my-ns/dummytopic"")\n            .with(DatabaseHistory.NAME, ""my-db-history"")\n            .with(DatabaseHistory.SKIP_UNPARSEABLE_DDL_STATEMENTS, true)\n            .build();\n\n        history.configure(config, null, DatabaseHistoryListener.NOOP, true);\n        history.start();\n\n        // dummytopic should not exist yet\n        assertFalse(history.exists());\n    }\n']",Content;TOPIC;Exists;history;exists;property;History;NOOP;use;history,1.2223608791828156e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.384208634495735e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.875288009643555, -5.715730667114258, -6.382516860961914, -5.4603118896484375, -5.549685001373291, -0.016061797738075256]",0.9840664863586426
3,"['    @Test\n    public void openInfluxV1() throws Exception {\n        Map<String, Object> map = new HashMap<>();\n        map.put(""influxdbUrl"", ""http://localhost:8086"");\n        map.put(""database"", ""test_db"");\n\n        InfluxDBGenericRecordSink sink = new InfluxDBGenericRecordSink();\n        try {\n            sink.open(map, mock(SinkContext.class));\n        } catch (InfluxDBIOException e) {\n            // Do nothing\n        }\n        assertTrue(sink.sink instanceof org.apache.pulsar.io.influxdb.v1.InfluxDBGenericRecordSink);\n    }\n']",lux;mock;lux;open;localhost;sink;map;BI;nothing;catch,9.313225746154785e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.2369127944111824e-10;1.1641532182693481e-10,5,5,"[-5.849429130554199, -5.687839031219482, -6.286026954650879, -5.361813068389893, -5.480226993560791, -0.017137421295046806]",0.9830085635185242
3,"['    @Test\n    public void openInfluxV2() throws Exception {\n        Map<String, Object> map = new HashMap();\n        map.put(""influxdbUrl"", ""http://localhost:9999"");\n        map.put(""token"", ""xxxx"");\n        map.put(""organization"", ""example-org"");\n        map.put(""bucket"", ""example-bucket"");\n\n        InfluxDBGenericRecordSink sink = new InfluxDBGenericRecordSink();\n        try {\n            sink.open(map, mock(SinkContext.class));\n        } catch (InfluxDBIOException e) {\n            // Do nothing\n        }\n        assertTrue(sink.sink instanceof InfluxDBSink);\n    }\n']",example;xxxx;luxdb;org;lux;bucket;put;BI;put;Record,9.313225746154785e-10;8.149072527885437e-10;6.83940015733242e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8461833000183105, -5.6868672370910645, -6.295806407928467, -5.356534957885742, -5.50019645690918, -0.01707320101559162]",0.9830717444419861
3,"['    @Test(expectedExceptions = Exception.class,\n    public void openInvalidInfluxConfig() throws Exception {\n        InfluxDBGenericRecordSink sink = new InfluxDBGenericRecordSink();\n        sink.open(new HashMap<>(), mock(SinkContext.class));\n    }\n']",Record;Exception;expected;lux;Invalid;Config;open;sink;Context;mock,2.0954757928848267e-09;1.57160684466362e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.918585777282715, -5.7684760093688965, -6.424318790435791, -5.516075611114502, -5.514190196990967, -0.015607119537889957]",0.984514057636261
3,"['    @Test\n    public void testJsonSchema() {\n        JSONSchema<Cpu> schema = JSONSchema.of(Cpu.class);\n\n        AutoConsumeSchema autoConsumeSchema = new AutoConsumeSchema();\n        autoConsumeSchema.setSchema(GenericSchemaImpl.of(schema.getSchemaInfo()));\n        GenericSchema<GenericRecord> genericSchema = GenericSchemaImpl.of(autoConsumeSchema.getSchemaInfo());\n\n        assertFalse(genericSchema instanceof GenericAvroSchema);\n\n        byte[] bytes = schema.encode(cpu);\n        GenericRecord record = genericSchema.decode(bytes);\n\n        assertEquals(record.getField(""measurement""), ""cpu"");\n\n        // compare the String type\n        assertEquals(record.getField(""timestamp"").toString(), timestamp + """");\n\n        assertEquals(((GenericRecord)record.getField(""tags"")).getField(""host""), ""server-1"");\n        assertEquals(((GenericRecord)record.getField(""fields"")).getField(""value""), 10);\n    }\n']",pu;Schema;server;tags;Consume;Info;JSONSchema;schema;get;Auto,4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.3096723705530167e-10,5,5,"[-5.794644355773926, -5.632517337799072, -6.2089691162109375, -5.266645431518555, -5.431911468505859, -0.018337365239858627]",0.9818297624588013
3,"['    @Test\n    public void testAvroSchema() {\n        AvroSchema<Cpu> schema = AvroSchema.of(Cpu.class);\n\n        AutoConsumeSchema autoConsumeSchema = new AutoConsumeSchema();\n        autoConsumeSchema.setSchema(GenericSchemaImpl.of(schema.getSchemaInfo()));\n        GenericSchema<GenericRecord> genericAvroSchema = GenericSchemaImpl.of(autoConsumeSchema.getSchemaInfo());\n\n        assertTrue(genericAvroSchema instanceof GenericAvroSchema);\n\n        byte[] bytes = schema.encode(cpu);\n        GenericRecord record = genericAvroSchema.decode(bytes);\n\n        assertEquals(record.getField(""measurement""), ""cpu"");\n        assertEquals(record.getField(""timestamp""), timestamp);\n        assertEquals(((Map)record.getField(""tags"")).get(new Utf8(""host"")).toString(), ""server-1"");\n        assertEquals(((Map)record.getField(""fields"")).get(new Utf8(""value"")), 10);\n    }\n']",Avro;cpu;pu;bytes;host;Generic;cpu;auto;Field;generic,5.675246939063072e-10;2.9103830456733704e-10;2.473825588822365e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.709850039333105e-10,5,5,"[-5.793833255767822, -5.633416175842285, -6.2213945388793945, -5.283641815185547, -5.441094875335693, -0.01818203739821911]",0.9819822311401367
3,['    @Test\n    public void testOpenWriteCloseAvro() throws Exception {\n        AvroSchema<Cpu> avroSchema = AvroSchema.of(Cpu.class);\n        openWriteClose(avroSchema);\n    }\n'],Avro;pu;Close;Avro;open;Exception;avro;Close;pu;avro,2.3283064365386963e-09;1.57160684466362e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;2.9103830456733704e-10;0.0;0.0;-2.9103830456733704e-11,5,5,"[-5.89904260635376, -5.777413368225098, -6.367962837219238, -5.465208053588867, -5.444612979888916, -0.016236457973718643]",0.9838946461677551
3,['    @Test\n    public void testOpenWriteCloseJson() throws Exception {\n        JSONSchema<Cpu> jsonSchema = JSONSchema.of(Cpu.class);\n        openWriteClose(jsonSchema);\n    }\n'],Open;of;Exception;Schema;Close;pu;open;json;JSONSchema;Close,1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;7.275957614183426e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.880578994750977, -5.726901531219482, -6.334987640380859, -5.432655334472656, -5.424665451049805, -0.016740908846259117]",0.9833985567092896
3,"['    @Test(expectedExceptions = NullPointerException.class,\n    public void testRequiredConfigMissing() throws Exception {\n        Map<String, Object> map = buildValidConfigMap();\n        map.remove(""influxdbUrl"");\n        InfluxDBSinkConfig config = InfluxDBSinkConfig.load(map);\n        config.validate();\n    }\n']",Valid;Exceptions;Config;Required;remove;Map;Object;Config;load;build,1.6298145055770874e-09;6.111804395914078e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.8826117515563965, -5.756146430969238, -6.3526225090026855, -5.427022457122803, -5.486245155334473, -0.01636558398604393]",0.9837675094604492
3,"['    @Test(expectedExceptions = IllegalArgumentException.class,\n    public void testBatchConfig() throws Exception {\n        Map<String, Object> map = buildValidConfigMap();\n        map.put(""batchSize"", -1);\n        InfluxDBSinkConfig config = InfluxDBSinkConfig.load(map);\n        config.validate();\n    }\n']",batch;lux;Config;validate;BSink;class;Config;config;Map;Exception,4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.41970007866621e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.8917489796876907e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.87428617477417, -5.7333574295043945, -6.334056377410889, -5.4172163009643555, -5.470950603485107, -0.016605732962489128]",0.9835314750671387
3,"['    @Test\n    public void testOpenAndWrite() throws Exception {\n        message = mock(MessageImpl.class);\n        GenericSchema<GenericRecord> genericAvroSchema;\n        // prepare a cpu Record\n        Cpu cpu = new Cpu();\n        cpu.setMeasurement(""cpu"");\n        cpu.setModel(""lenovo"");\n        cpu.setValue(10);\n\n        Map<String, String> tags = Maps.newHashMap();\n        tags.put(""host"", ""server-1"");\n        tags.put(""region"", ""us-west"");\n\n        cpu.setTags(tags);\n        AvroSchema<Cpu> schema = AvroSchema.of(Cpu.class);\n\n        byte[] bytes = schema.encode(cpu);\n        AutoConsumeSchema autoConsumeSchema = new AutoConsumeSchema();\n        autoConsumeSchema.setSchema(GenericSchemaImpl.of(schema.getSchemaInfo()));\n\n        Record<GenericRecord> record = PulsarRecord.<GenericRecord>builder()\n            .message(message)\n            .topicName(""influx_cpu"")\n            .build();\n\n        genericAvroSchema = new GenericAvroSchema(schema.getSchemaInfo());\n\n        when(message.getValue())\n                .thenReturn(genericAvroSchema.decode(bytes));\n\n        log.info(""cpu:{}, Message.getValue: {}, record.getValue: {}"",\n            cpu.toString(),\n            message.getValue().toString(),\n            record.getValue().toString());\n\n        influxSink.open(configMap, mockSinkContext);\n\n        verify(this.influxDB, times(1)).describeDatabases();\n        verify(this.influxDB, times(1)).createDatabase(""testDB"");\n\n        doAnswer(invocationOnMock -> {\n            BatchPoints batchPoints = invocationOnMock.getArgument(0, BatchPoints.class);\n            Assert.assertNotNull(batchPoints, ""batchPoints should not be null."");\n            return null;\n        }).when(influxDB).write(any(BatchPoints.class));\n\n        influxSink.write(record);\n\n        Thread.sleep(1000);\n\n        verify(influxDB, times(1)).write(any(BatchPoints.class));\n    }\n']",Measurement;topic;Write;Impl;Message;when;Schema;Message;Generic;cpu,8.731149137020111e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.808589458465576, -5.643848896026611, -6.231864929199219, -5.277126312255859, -5.472053527832031, -0.017976924777030945]",0.9821836948394775
3,"['    @Test\n    public void TestOpenAndWriteSink() throws Exception {\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(""host"", ""localhost"");\n        configs.put(""port"", ""5673"");\n        configs.put(""virtualHost"", ""default"");\n        configs.put(""username"", ""guest"");\n        configs.put(""password"", ""guest"");\n        configs.put(""connectionName"", ""test-connection"");\n        configs.put(""requestedChannelMax"", ""0"");\n        configs.put(""requestedFrameMax"", ""0"");\n        configs.put(""connectionTimeout"", ""60000"");\n        configs.put(""handshakeTimeout"", ""10000"");\n        configs.put(""requestedHeartbeat"", ""60"");\n        configs.put(""exchangeName"", ""test-exchange"");\n        configs.put(""exchangeType"", ""fanout"");\n\n        RabbitMQSink sink = new RabbitMQSink();\n\n        // open should success\n        // rabbitmq service may need time to initialize\n        Awaitility.await().ignoreExceptions().untilAsserted(() -> sink.open(configs, null));\n\n        // write should success\n        Record<byte[]> record = build(""test-topic"", ""fakeKey"", ""fakeValue"", ""fakeRoutingKey"");\n        sink.write(record);\n\n        sink.close();\n    }\n']",fake;requested;exchange;Value;Frame;Asserted;Open;Key;Awaitility;await,1.1641532182693481e-09;5.493347998708487e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.001776687800884e-10;3.4924596548080444e-10;3.346940502524376e-10;3.128661774098873e-10;2.9103830456733704e-10,5,5,"[-5.836999416351318, -5.677464962005615, -6.322282314300537, -5.374683856964111, -5.540469646453857, -0.016833633184432983]",0.9833072423934937
3,"['    @Test\n    public void TestOpenAndWriteSink() {\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(""host"", ""localhost"");\n        configs.put(""port"", ""5672"");\n        configs.put(""virtualHost"", ""default"");\n        configs.put(""username"", ""guest"");\n        configs.put(""password"", ""guest"");\n        configs.put(""queueName"", ""test-queue"");\n        configs.put(""connectionName"", ""test-connection"");\n        configs.put(""requestedChannelMax"", ""0"");\n        configs.put(""requestedFrameMax"", ""0"");\n        configs.put(""connectionTimeout"", ""60000"");\n        configs.put(""handshakeTimeout"", ""10000"");\n        configs.put(""requestedHeartbeat"", ""60"");\n        configs.put(""prefetchCount"", ""0"");\n        configs.put(""prefetchGlobal"", ""false"");\n        configs.put(""passive"", ""false"");\n\n        RabbitMQSource source = new RabbitMQSource();\n\n        // open should success\n        // rabbitmq service may need time to initialize\n        Awaitility.await().ignoreExceptions().untilAsserted(() -> source.open(configs, null));\n    }\n']",passive;false;password;initialize;success;handshake;Write;guest;Map;etch,1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;7.8580342233181e-10;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.831735134124756, -5.679004192352295, -6.305077075958252, -5.350180149078369, -5.526840686798096, -0.017047185450792313]",0.9830971956253052
3,"['    @Test\n    public void testAvroToJson() throws IOException {\n        Schema schema = SchemaBuilder.record(""record"").fields()\n                .name(""n"").type().longType().longDefault(10)\n                .name(""l"").type().longType().longDefault(10)\n                .name(""i"").type().intType().intDefault(10)\n                .name(""b"").type().booleanType().booleanDefault(true)\n                .name(""bb"").type().bytesType().bytesDefault(""10"")\n                .name(""d"").type().doubleType().doubleDefault(10.0)\n                .name(""f"").type().floatType().floatDefault(10.0f)\n                .name(""s"").type().stringType().stringDefault(""titi"")\n                .name(""array"").type().optional().array().items(SchemaBuilder.builder().stringType())\n                .name(""map"").type().optional().map().values(SchemaBuilder.builder().intType())\n                .endRecord();\n        GenericRecord genericRecord = new GenericData.Record(schema);\n        genericRecord.put(""n"", null);\n        genericRecord.put(""l"", 1L);\n        genericRecord.put(""i"", 1);\n        genericRecord.put(""b"", true);\n        genericRecord.put(""bb"", ""10"".getBytes(StandardCharsets.UTF_8));\n        genericRecord.put(""d"", 10.0);\n        genericRecord.put(""f"", 10.0f);\n        genericRecord.put(""s"", ""toto"");\n        genericRecord.put(""array"", new String[] {""toto""});\n        genericRecord.put(""map"", ImmutableMap.of(""a"",10));\n        JsonNode jsonNode = JsonConverter.toJson(genericRecord);\n        assertEquals(jsonNode.get(""n""), NullNode.getInstance());\n        assertEquals(jsonNode.get(""l"").asLong(), 1L);\n        assertEquals(jsonNode.get(""i"").asInt(), 1);\n        assertEquals(jsonNode.get(""b"").asBoolean(), true);\n        assertEquals(jsonNode.get(""bb"").binaryValue(), ""10"".getBytes(StandardCharsets.UTF_8));\n        assertEquals(jsonNode.get(""d"").asDouble(), 10.0);\n        assertEquals(jsonNode.get(""f"").numberValue(), 10.0f);\n        assertEquals(jsonNode.get(""s"").asText(), ""toto"");\n        assertTrue(jsonNode.get(""array"").isArray());\n        assertEquals(jsonNode.get(""array"").iterator().next().asText(), ""toto"");\n        assertTrue(jsonNode.get(""map"").isObject());\n        assertEquals(jsonNode.get(""map"").elements().next().asText(), ""10"");\n        assertEquals(jsonNode.get(""map"").get(""a"").numberValue(), 10);\n    }\n']",bb;son;record;long;generic;type;IOException;type;schema;string,5.820766091346741e-10;1.7462298274040222e-10;1.673470251262188e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1459633242338896e-10;1.0186340659856796e-10;9.458744898438454e-11,5,5,"[-5.801791191101074, -5.620681285858154, -6.2064690589904785, -5.228932857513428, -5.448183059692383, -0.018493955954909325]",0.9816759824752808
3,"['    @Test\n    public void testLogicalTypesToJson() {\n        Schema decimalType = LogicalTypes.decimal(3,3).addToSchema(Schema.create(Schema.Type.BYTES));\n        Schema dateType = LogicalTypes.date().addToSchema(Schema.create(Schema.Type.INT));\n        Schema timestampMillisType = LogicalTypes.timestampMillis().addToSchema(Schema.create(Schema.Type.LONG));\n        Schema timestampMicrosType = LogicalTypes.timestampMicros().addToSchema(Schema.create(Schema.Type.LONG));\n        Schema timeMillisType = LogicalTypes.timeMillis().addToSchema(Schema.create(Schema.Type.INT));\n        Schema timeMicrosType = LogicalTypes.timeMicros().addToSchema(Schema.create(Schema.Type.LONG));\n        Schema uuidType = LogicalTypes.uuid().addToSchema(Schema.create(Schema.Type.STRING));\n        Schema schema = SchemaBuilder.record(""record"")\n                .fields()\n                .name(""amount"").type(decimalType).noDefault()\n                .name(""mydate"").type(dateType).noDefault()\n                .name(""tsmillis"").type(timestampMillisType).noDefault()\n                .name(""tsmicros"").type(timestampMicrosType).noDefault()\n                .name(""timemillis"").type(timeMillisType).noDefault()\n                .name(""timemicros"").type(timeMicrosType).noDefault()\n                .name(""myuuid"").type(uuidType).noDefault()\n                .endRecord();\n\n        final long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;\n        BigDecimal myDecimal = new BigDecimal(""10.34"");\n        UUID myUuid = UUID.randomUUID();\n        Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone(""Europe/Copenhagen""));\n        GenericRecord genericRecord = new GenericData.Record(schema);\n        genericRecord.put(""amount"", myDecimal);\n        genericRecord.put(""mydate"", (int)calendar.toInstant().getEpochSecond());\n        genericRecord.put(""tsmillis"", calendar.getTimeInMillis());\n        genericRecord.put(""tsmicros"", calendar.getTimeInMillis() * 1000);\n        genericRecord.put(""timemillis"", (int)(calendar.getTimeInMillis() % MILLIS_PER_DAY));\n        genericRecord.put(""timemicros"", (calendar.getTimeInMillis() %MILLIS_PER_DAY) * 1000);\n        genericRecord.put(""myuuid"", myUuid.toString());\n        JsonNode jsonNode = JsonConverter.toJson(genericRecord);\n        assertEquals(new BigDecimal(jsonNode.get(""amount"").asText()), myDecimal);\n        assertEquals(jsonNode.get(""mydate"").asInt(), calendar.toInstant().getEpochSecond());\n        assertEquals(jsonNode.get(""tsmillis"").asInt(), (int)calendar.getTimeInMillis());\n        assertEquals(jsonNode.get(""tsmicros"").asLong(), calendar.getTimeInMillis() * 1000);\n        assertEquals(jsonNode.get(""timemillis"").asInt(), (int)(calendar.getTimeInMillis() % MILLIS_PER_DAY));\n        assertEquals(jsonNode.get(""timemicros"").asLong(), (calendar.getTimeInMillis() %MILLIS_PER_DAY) * 1000);\n        assertEquals(UUID.fromString(jsonNode.get(""myuuid"").asText()), myUuid);\n    }\n']",Type;Types;ONG;ONG;BY;date;Logical;Type;Type;Schema,4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.778851509094238, -5.598292350769043, -6.209333896636963, -5.282620906829834, -5.465792179107666, -0.018281182274222374]",0.9818848967552185
3,"['    @Test\n    public void testExponentialWait() {\n        RandomExponentialRetry backoffRetry = new RandomExponentialRetry(5);\n        assertEquals(backoffRetry.waitInMs(0, 100), 100L);\n        assertEquals(backoffRetry.waitInMs(1, 100), 200L);\n        assertEquals(backoffRetry.waitInMs(2, 100), 400L);\n        assertEquals(backoffRetry.waitInMs(3, 100), 800L);\n        assertEquals(backoffRetry.waitInMs(4, 100), 1600L);\n        assertEquals(backoffRetry.waitInMs(5, 100), 3200L);\n        assertEquals(backoffRetry.waitInMs(6, 100), 5000L);\n    }\n']",Random;Ms;backoff;Retry;Random;Ms;Ms;In;Exponential;Equals,7.566995918750763e-10;5.238689482212067e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.4915713109076023e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.8199944496154785, -5.6669440269470215, -6.2579450607299805, -5.348801612854004, -5.453712463378906, -0.017528152093291283]",0.9826245903968811
3,"['    @Test\n    public void callWithNoRetries() throws Exception {\n        MockTime mockTime = new MockTime();\n        RandomExponentialRetry backoffRetry = new RandomExponentialRetry();\n        assertEquals(0, (int)backoffRetry.retry( () -> testFunction(0), 3, 100, ""NoRetries"", mockTime));\n        assertEquals(0L, mockTime.totalMs.get());\n        assertEquals(0L, mockTime.sleeps.size());\n    }\n']",Mock;mock;Retries;Exception;Mock;total;Retry;new;backoff;Ms,5.820766091346741e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.81093168258667, -5.662450313568115, -6.260138511657715, -5.391701698303223, -5.437554836273193, -0.017435023561120033]",0.9827160835266113
3,"['    @Test(expectedExceptions = { IOException.class })\n    public void callWithExhaustedRetries() throws Exception {\n        MockTime mockTime = new MockTime();\n        RandomExponentialRetry backoffRetry = new RandomExponentialRetry();\n        assertEquals(4, (int)backoffRetry.retry( () -> testFunction(4), 3, 100, ""ExhautstedRetries"", mockTime));\n    }\n']",Exceptions;Exponential;backoff;IOException;Random;mock;backoff;Time;Retry;Exception,1.4551915228366852e-09;1.0477378964424133e-09;9.313225746154785e-10;9.022187441587448e-10;9.022187441587448e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.854554653167725, -5.700671195983887, -6.349803447723389, -5.492957592010498, -5.483407497406006, -0.016361597925424576]",0.9837715029716492
3,"['    @Test\n    public void callWithSomeRetries() throws Exception {\n        int N = 10;\n        MockTime mockTime = new MockTime();\n        RandomExponentialRetry backoffRetry = new RandomExponentialRetry();\n        assertEquals(N, (int)backoffRetry.retry( () -> testFunction(N), N+1, 100, ""SomeRetries"", mockTime));\n        assertEquals(N, mockTime.sleeps.size());\n        for(int i = 0; i < N; i++) {\n            assertTrue(mockTime.sleeps.get(i) <=  backoffRetry.waitInMs(i, 100));\n        }\n        System.out.println(""sleeps=""+mockTime.sleeps);\n    }\n']",call;backoff;sleep;Some;Mock;Mock;new;Time;Time;Retry,5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.382431946694851e-10,5,5,"[-5.832449436187744, -5.701749324798584, -6.2819671630859375, -5.36954927444458, -5.465138912200928, -0.01717538759112358]",0.9829712510108948
3,"['    @Test\n    public void testGenericRecord() throws Exception {\n        String json = ""{\\""c\\"":\\""1\\"",\\""d\\"":1,\\""e\\"":{\\""a\\"":\\""a\\"",\\""b\\"":true,\\""d\\"":1.0,\\""f\\"":1.0,\\""i\\"":1,\\""l\\"":10}}"";\n\n        ElasticSearchSink elasticSearchSink = new ElasticSearchSink();\n        elasticSearchSink.open(ImmutableMap.of(""elasticSearchUrl"", ""http://localhost:9200"", ""schemaEnable"", ""true""), null);\n        Pair<String, String> pair = elasticSearchSink.extractIdAndDocument(new Record<GenericObject>() {\n            @Override\n            public GenericObject getValue() {\n                return new GenericObject() {\n                    @Override\n                    public SchemaType getSchemaType() {\n                        return SchemaType.BYTES;\n                    }\n']",elastic;elastic;Search;Document;ink;true;Schema;Record;elastic;extract,3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;2.219167072325945e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.845755577087402, -5.702861785888672, -6.284189224243164, -5.301808834075928, -5.481217384338379, -0.017391325905919075]",0.9827590584754944
3,"['    @Test\n    public void testIndexDelete() throws Exception {\n        String index = ""myindex-"" + UUID.randomUUID();\n        try (ElasticSearchClient client = new ElasticSearchClient(new ElasticSearchConfig()\n                .setElasticSearchUrl(""http://"" + container.getHttpHostAddress())\n                .setIndexName(index));) {\n            assertTrue(client.createIndexIfNeeded(index));\n            try {\n                MockRecord<GenericObject> mockRecord = new MockRecord<>();\n                client.indexDocument(mockRecord, Pair.of(""1"", ""{ \\""a\\"":1}""));\n                assertEquals(mockRecord.acked, 1);\n                assertEquals(mockRecord.failed, 0);\n                assertEquals(client.totalHits(index), 1);\n\n                client.deleteDocument(mockRecord, ""1"");\n                assertEquals(mockRecord.acked, 2);\n                assertEquals(mockRecord.failed, 0);\n                assertEquals(client.totalHits(index), 0);\n            } finally {\n                client.delete(index);\n            }\n        }\n    }\n']",http;Elastic;Elastic;Document;UID;Url;Pair;Document;UID;Mock,5.238689482212067e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.473825588822365e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.834112644195557, -5.662821292877197, -6.259201526641846, -5.292211532592773, -5.487464427947998, -0.017634976655244827]",0.9825196266174316
3,"['    @Test\n    public void testIndexExists() throws IOException {\n        String index = ""mynewindex-"" + UUID.randomUUID();\n        try (ElasticSearchClient client = new ElasticSearchClient(new ElasticSearchConfig()\n                .setElasticSearchUrl(""http://"" + container.getHttpHostAddress())\n                .setIndexName(index));) {\n            assertFalse(client.indexExists(index));\n            assertTrue(client.createIndexIfNeeded(index));\n            try {\n                assertTrue(client.indexExists(index));\n                assertFalse(client.createIndexIfNeeded(index));\n            } finally {\n                client.delete(index);\n            }\n        }\n    }\n']",UID;Elastic;Exists;mynewindex;Elastic;IOException;Http;Index;Exists;Client,6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.802132025361061e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.510205376893282e-10;2.473825588822365e-10,5,5,"[-5.861259937286377, -5.696014404296875, -6.296726703643799, -5.350639343261719, -5.492783069610596, -0.017055505886673927]",0.9830892086029053
3,"['    @Test\n    public void testTopicToIndexName() throws IOException {\n        try (ElasticSearchClient client = new ElasticSearchClient(new ElasticSearchConfig()\n                .setElasticSearchUrl(""http://"" + container.getHttpHostAddress())); ) {\n            assertEquals(client.topicToIndexName(""data-ks1.table1""), ""data-ks1.table1"");\n            assertEquals(client.topicToIndexName(""persistent://public/default/testesjson""), ""testesjson"");\n            assertEquals(client.topicToIndexName(""default/testesjson""), ""testesjson"");\n            assertEquals(client.topicToIndexName("".testesjson""), "".testesjson"");\n            assertEquals(client.topicToIndexName(""TEST""), ""test"");\n\n            assertThrows(RuntimeException.class, () -> client.topicToIndexName(""toto\\\\titi""));\n            assertThrows(RuntimeException.class, () -> client.topicToIndexName(""_abc""));\n            assertThrows(RuntimeException.class, () -> client.topicToIndexName(""-abc""));\n            assertThrows(RuntimeException.class, () -> client.topicToIndexName(""+abc""));\n        }\n    }\n']",Elastic;Host;Elastic;esjson;Url;Elastic;Index;Config;Name;topic,1.1932570487260818e-09;4.656612873077393e-10;4.656612873077393e-10;3.710738383233547e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.837141036987305, -5.707247257232666, -6.298461437225342, -5.335824489593506, -5.497015476226807, -0.01713906042277813]",0.9830069541931152
3,"['    @Test\n    public void testMalformedDocFails() throws Exception {\n        String index = ""indexmalformed-"" + UUID.randomUUID();\n        ElasticSearchConfig config = new ElasticSearchConfig()\n                .setElasticSearchUrl(""http://""+container.getHttpHostAddress())\n                .setIndexName(index)\n                .setBulkEnabled(true)\n                .setMalformedDocAction(ElasticSearchConfig.MalformedDocAction.FAIL);\n        try (ElasticSearchClient client = new ElasticSearchClient(config);) {\n            MockRecord<GenericObject> mockRecord = new MockRecord<>();\n            client.bulkIndex(mockRecord, Pair.of(""1"", ""{\\""a\\"":1}""));\n            client.bulkIndex(mockRecord, Pair.of(""2"", ""{\\""a\\"":\\""toto\\""}""));\n            client.flush();\n            assertNotNull(client.irrecoverableError.get());\n            assertTrue(client.irrecoverableError.get().getMessage().contains(""mapper_parsing_exception""));\n            assertEquals(mockRecord.acked, 1);\n            assertEquals(mockRecord.failed, 1);\n            assertThrows(Exception.class, () -> client.bulkIndex(mockRecord, Pair.of(""3"", ""{\\""a\\"":3}"")));\n            assertEquals(mockRecord.acked, 1);\n            assertEquals(mockRecord.failed, 2);\n        }\n    }\n']",ails;Malformed;UID;irrecoverable;failed;UID;Doc;Host;client;Elastic,3.725290298461914e-09;1.1059455573558807e-09;8.731149137020111e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.837602615356445, -5.664571762084961, -6.280335426330566, -5.304673194885254, -5.500893592834473, -0.017458101734519005]",0.9826933145523071
3,"['    @Test\n    public void testMalformedDocIgnore() throws Exception {\n        String index = ""indexmalformed2-"" + UUID.randomUUID();\n        ElasticSearchConfig config = new ElasticSearchConfig()\n                .setElasticSearchUrl(""http://""+container.getHttpHostAddress())\n                .setIndexName(index)\n                .setBulkEnabled(true)\n                .setMalformedDocAction(ElasticSearchConfig.MalformedDocAction.IGNORE);\n        try (ElasticSearchClient client = new ElasticSearchClient(config);) {\n            MockRecord<GenericObject> mockRecord = new MockRecord<>();\n            client.bulkIndex(mockRecord, Pair.of(""1"", ""{\\""a\\"":1}""));\n            client.bulkIndex(mockRecord, Pair.of(""2"", ""{\\""a\\"":\\""toto\\""}""));\n            client.flush();\n            assertNull(client.irrecoverableError.get());\n            assertEquals(mockRecord.acked, 1);\n            assertEquals(mockRecord.failed, 1);\n        }\n    }\n']",Malformed;oto;Elastic;ulk;Action;Elastic;UID;Ignore;container;Action,6.257323548197746e-10;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10,5,5,"[-5.844115257263184, -5.670262336730957, -6.276850700378418, -5.3117852210998535, -5.486110210418701, -0.017451541498303413]",0.9826997518539429
3,"['    @Test\n    public void testBulkRetry() throws Exception {\n        final String index = ""indexbulktest-"" + UUID.randomUUID();\n        ElasticSearchConfig config = new ElasticSearchConfig()\n                .setElasticSearchUrl(""http://""+container.getHttpHostAddress())\n                .setIndexName(index)\n                .setBulkEnabled(true)\n                .setMaxRetries(1000)\n                .setBulkActions(2)\n                .setRetryBackoffInMs(100)\n                // disabled, we want to have full control over flush() method\n                .setBulkFlushIntervalInMs(-1);\n\n        try (ElasticSearchClient client = new ElasticSearchClient(config);) {\n            try {\n                assertTrue(client.createIndexIfNeeded(index));\n                MockRecord<GenericObject> mockRecord = new MockRecord<>();\n                client.bulkIndex(mockRecord, Pair.of(""1"", ""{\\""a\\"":1}""));\n                client.bulkIndex(mockRecord, Pair.of(""2"", ""{\\""a\\"":2}""));\n                assertEquals(mockRecord.acked, 2);\n                assertEquals(mockRecord.failed, 0);\n                assertEquals(client.totalHits(index), 2);\n\n                ChaosContainer<?> chaosContainer = new ChaosContainer<>(container.getContainerName(), ""15s"");\n                chaosContainer.start();\n\n                client.bulkIndex(mockRecord, Pair.of(""3"", ""{\\""a\\"":3}""));\n                assertEquals(mockRecord.acked, 2);\n                assertEquals(mockRecord.failed, 0);\n                assertEquals(client.totalHits(index), 2);\n\n                chaosContainer.stop();\n                client.flush();\n                assertEquals(mockRecord.acked, 3);\n                assertEquals(mockRecord.failed, 0);\n                assertEquals(client.totalHits(index), 3);\n            } finally {\n                client.delete(index);\n            }\n        }\n    }\n']",control;Url;Elastic;disabled;ulk;have;to;Search;random;client,6.984919309616089e-10;5.820766091346741e-10;3.346940502524376e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.847303867340088, -5.673657417297363, -6.301523685455322, -5.343181133270264, -5.507981300354004, -0.017137303948402405]",0.9830085635185242
3,"['    @Test\n    public void testBulkBlocking() throws Exception {\n        final String index = ""indexblocking-"" + UUID.randomUUID();\n        ElasticSearchConfig config = new ElasticSearchConfig()\n                .setElasticSearchUrl(""http://""+container.getHttpHostAddress())\n                .setIndexName(index)\n                .setBulkEnabled(true)\n                .setMaxRetries(1000)\n                .setBulkActions(2)\n                .setBulkConcurrentRequests(2)\n                .setRetryBackoffInMs(100)\n                .setBulkFlushIntervalInMs(10000);\n        try (ElasticSearchClient client = new ElasticSearchClient(config);) {\n            assertTrue(client.createIndexIfNeeded(index));\n\n            try {\n                MockRecord<GenericObject> mockRecord = new MockRecord<>();\n                for (int i = 1; i <= 5; i++) {\n                    client.bulkIndex(mockRecord, Pair.of(Integer.toString(i), ""{\\""a\\"":"" + i + ""}""));\n                }\n\n                Awaitility.await().untilAsserted(() -> {\n                    assertThat(""acked record"", mockRecord.acked, greaterThanOrEqualTo(4));\n                    assertEquals(mockRecord.failed, 0);\n                    assertThat(""totalHits"", client.totalHits(index), greaterThanOrEqualTo(4L));\n                });\n                client.flush();\n                Awaitility.await().untilAsserted(() -> {\n                    assertEquals(mockRecord.acked, 5);\n                    assertEquals(mockRecord.failed, 0);\n                    assertEquals(client.totalHits(index), 5);\n                });\n\n                ChaosContainer<?> chaosContainer = new ChaosContainer<>(container.getContainerName(), ""30s"");\n                chaosContainer.start();\n                Thread.sleep(1000L);\n\n                // 11th bulkIndex is blocking because we have 2 pending requests, and the 3rd request is blocked.\n                long start = System.currentTimeMillis();\n                for (int i = 6; i <= 15; i++) {\n                    client.bulkIndex(mockRecord, Pair.of(Integer.toString(i), ""{\\""a\\"":"" + i + ""}""));\n                    log.info(""{} index {}"", System.currentTimeMillis(), i);\n                }\n                long elapsed = System.currentTimeMillis() - start;\n                log.info(""elapsed = {}"", elapsed);\n                assertTrue(elapsed > 29000); // bulkIndex was blocking while elasticsearch was down or busy\n\n                Thread.sleep(1000L);\n                assertEquals(mockRecord.acked, 15);\n                assertEquals(mockRecord.failed, 0);\n                assertEquals(client.records.size(), 0);\n\n                chaosContainer.stop();\n            } finally {\n                client.delete(index);\n            }\n        }\n    }\n']",Http;Elastic;Elastic;ulk;until;Enabled;UID;Blocking;index;ulk,6.693881005048752e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.851664066314697, -5.679994106292725, -6.306427478790283, -5.340002059936523, -5.518275737762451, -0.01706663891673088]",0.9830781817436218
3,['    @Test\n        public Schema getSchema() {\n            return  kvSchema;\n        }\n'],Schema;get;Schema;return;Schema,3.7834979593753815e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-8.731149137020111e-10;-1.1204974725842476e-09,5,5,"[-5.861697673797607, -5.662173748016357, -6.280381679534912, -5.42500114440918, -5.386744976043701, -0.017325131222605705]",0.9828240871429443
3,"['    @Test\n    public void testStripNullNodes() throws Exception {\n        map.put(""stripNulls"", true);\n        sink.open(map, mockSinkContext);\n        GenericRecord genericRecord = genericSchema.newRecordBuilder()\n                .set(""name"", null)\n                .set(""userName"", ""boby"")\n                .set(""email"", null)\n                .build();\n        String json = sink.stringifyValue(valueSchema, genericRecord);\n        assertEquals(json, ""{\\""userName\\"":\\""boby\\""}"");\n    }\n']",oby;user;Record;Exception;Null;strip;generic;null;generic;sink,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.86147403717041, -5.702434062957764, -6.2993388175964355, -5.3551859855651855, -5.484349727630615, -0.017041560262441635]",0.9831027984619141
3,"['    @Test\n    public void testKeepNullNodes() throws Exception {\n        map.put(""stripNulls"", false);\n        sink.open(map, mockSinkContext);\n        GenericRecord genericRecord = genericSchema.newRecordBuilder()\n                .set(""name"", null)\n                .set(""userName"", ""boby"")\n                .set(""email"", null)\n                .build();\n        String json = sink.stringifyValue(valueSchema, genericRecord);\n        assertEquals(json, ""{\\""name\\"":null,\\""userName\\"":\\""boby\\"",\\""email\\"":null}"");\n    }\n']",oby;Name;odes;Builder;Equals;sink;put;json;generic;name,1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.86018705368042, -5.710263252258301, -6.303230285644531, -5.354928016662598, -5.490793228149414, -0.016985774040222168]",0.9831576943397522
3,"['    @Test(expectedExceptions = PulsarClientException.InvalidMessageException.class)\n    public void testNullValueFailure() throws Exception {\n        String index = ""testnullvaluefail"";\n        map.put(""indexName"", index);\n        map.put(""keyIgnore"", ""false"");\n        map.put(""nullValueAction"", ""FAIL"");\n        sink.open(map, mockSinkContext);\n        MockRecordNullValue mockRecordNullValue = new MockRecordNullValue();\n        sink.write(mockRecordNullValue);\n    }\n']",Null;sink;Null;ink;Exception;Value;Null;Null;Context;index,7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-5.878970623016357, -5.728719234466553, -6.340104579925537, -5.416214466094971, -5.492415428161621, -0.016510291025042534]",0.9836251139640808
3,['    @Test\n    public void testNullValueIgnore() throws Exception {\n        testNullValue(ElasticSearchConfig.NullValueAction.IGNORE);\n    }\n'],Null;Action;Ignore;Null;Exception;Null;Elastic;IGNORE;Value;Value,1.862645149230957e-09;1.862645149230957e-09;1.280568540096283e-09;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;0.0;-2.3283064365386963e-10;-1.3969838619232178e-09,5,5,"[-5.973326683044434, -5.898865699768066, -6.450801849365234, -5.5527496337890625, -5.407264709472656, -0.015345364809036255]",0.9847717881202698
3,['    @Test\n    public void testNullValueDelete() throws Exception {\n        testNullValue(ElasticSearchConfig.NullValueAction.DELETE);\n    }\n'],Null;Exception;DELETE;Value;Delete;Elastic;Action;Value;Null;Value,1.862645149230957e-09;1.1059455573558807e-09;9.89530235528946e-10;6.984919309616089e-10;0.0;0.0;-4.0745362639427185e-10;-4.656612873077393e-10;-5.820766091346741e-10;-1.0477378964424133e-09,5,5,"[-5.9751081466674805, -5.906289577484131, -6.464172840118408, -5.556583881378174, -5.428226470947266, -0.015189453959465027]",0.9849254488945007
3,"['    @Test\n    public void testGenericRecord() throws Exception {\n        RecordSchemaBuilder valueSchemaBuilder = org.apache.pulsar.client.api.schema.SchemaBuilder.record(""value"");\n        valueSchemaBuilder.field(""c"").type(SchemaType.STRING).optional().defaultValue(null);\n        valueSchemaBuilder.field(""d"").type(SchemaType.INT32).optional().defaultValue(null);\n        RecordSchemaBuilder udtSchemaBuilder = SchemaBuilder.record(""type1"");\n        udtSchemaBuilder.field(""a"").type(SchemaType.STRING).optional().defaultValue(null);\n        udtSchemaBuilder.field(""b"").type(SchemaType.BOOLEAN).optional().defaultValue(null);\n        udtSchemaBuilder.field(""d"").type(SchemaType.DOUBLE).optional().defaultValue(null);\n        udtSchemaBuilder.field(""f"").type(SchemaType.FLOAT).optional().defaultValue(null);\n        udtSchemaBuilder.field(""i"").type(SchemaType.INT32).optional().defaultValue(null);\n        udtSchemaBuilder.field(""l"").type(SchemaType.INT64).optional().defaultValue(null);\n        GenericSchema<GenericRecord> udtGenericSchema = Schema.generic(udtSchemaBuilder.build(schemaType));\n        valueSchemaBuilder.field(""e"", udtGenericSchema).type(schemaType).optional().defaultValue(null);\n        GenericSchema<GenericRecord> valueSchema = Schema.generic(valueSchemaBuilder.build(schemaType));\n\n        GenericRecord valueGenericRecord = valueSchema.newRecordBuilder()\n                .set(""c"", ""1"")\n                .set(""d"", 1)\n                .set(""e"", udtGenericSchema.newRecordBuilder()\n                        .set(""a"", ""a"")\n                        .set(""b"", true)\n                        .set(""d"", 1.0)\n                        .set(""f"", 1.0f)\n                        .set(""i"", 1)\n                        .set(""l"", 10L)\n                        .build())\n                .build();\n\n        Record<GenericObject> genericObjectRecord = new Record<GenericObject>() {\n            @Override\n            public Optional<String> getTopicName() {\n                return Optional.of(""data-ks1.table1"");\n            }\n']",FL;optional;Generic;value;Generic;ulsar;Builder;Record;Schema;dt,3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10;1.6007106751203537e-10,5,5,"[-5.804868698120117, -5.648866176605225, -6.231832504272461, -5.2493896484375, -5.462680339813232, -0.018156984820961952]",0.982006847858429
3,"['    @Test\n    public void testKeyValueGenericRecord() throws Exception {\n        RecordSchemaBuilder keySchemaBuilder = org.apache.pulsar.client.api.schema.SchemaBuilder.record(""key"");\n        keySchemaBuilder.field(""a"").type(SchemaType.STRING).optional().defaultValue(null);\n        keySchemaBuilder.field(""b"").type(SchemaType.INT32).optional().defaultValue(null);\n        GenericSchema<GenericRecord> keySchema = Schema.generic(keySchemaBuilder.build(schemaType));\n        GenericRecord keyGenericRecord = keySchema.newRecordBuilder()\n                .set(""a"", ""1"")\n                .set(""b"", 1)\n                .build();\n\n        RecordSchemaBuilder valueSchemaBuilder = org.apache.pulsar.client.api.schema.SchemaBuilder.record(""value"");\n        valueSchemaBuilder.field(""c"").type(SchemaType.STRING).optional().defaultValue(null);\n        valueSchemaBuilder.field(""d"").type(SchemaType.INT32).optional().defaultValue(null);\n        RecordSchemaBuilder udtSchemaBuilder = SchemaBuilder.record(""type1"");\n        udtSchemaBuilder.field(""a"").type(SchemaType.STRING).optional().defaultValue(null);\n        udtSchemaBuilder.field(""b"").type(SchemaType.BOOLEAN).optional().defaultValue(null);\n        udtSchemaBuilder.field(""d"").type(SchemaType.DOUBLE).optional().defaultValue(null);\n        udtSchemaBuilder.field(""f"").type(SchemaType.FLOAT).optional().defaultValue(null);\n        udtSchemaBuilder.field(""i"").type(SchemaType.INT32).optional().defaultValue(null);\n        udtSchemaBuilder.field(""l"").type(SchemaType.INT64).optional().defaultValue(null);\n        GenericSchema<GenericRecord> udtGenericSchema = Schema.generic(udtSchemaBuilder.build(schemaType));\n        valueSchemaBuilder.field(""e"", udtGenericSchema).type(schemaType).optional().defaultValue(null);\n        GenericSchema<GenericRecord> valueSchema = Schema.generic(valueSchemaBuilder.build(schemaType));\n\n        GenericRecord valueGenericRecord = valueSchema.newRecordBuilder()\n                .set(""c"", ""1"")\n                .set(""d"", 1)\n                .set(""e"", udtGenericSchema.newRecordBuilder()\n                        .set(""a"", ""a"")\n                        .set(""b"", true)\n                        .set(""d"", 1.0)\n                        .set(""f"", 1.0f)\n                        .set(""i"", 1)\n                        .set(""l"", 10L)\n                        .build())\n                .build();\n\n        Schema<KeyValue<GenericRecord, GenericRecord>> keyValueSchema = Schema.KeyValue(keySchema, valueSchema, KeyValueEncodingType.INLINE);\n        KeyValue<GenericRecord, GenericRecord> keyValue = new KeyValue<>(keyGenericRecord, valueGenericRecord);\n        GenericObject genericObject = new GenericObject() {\n            @Override\n            public SchemaType getSchemaType() {\n                return SchemaType.KEY_VALUE;\n            }\n']",Key;Value;OOLEAN;Type;ulsar;Schema;optional;Type;optional;Record,1.1641532182693481e-09;6.984919309616089e-10;3.7834979593753815e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.802401065826416, -5.6491169929504395, -6.2245988845825195, -5.2458600997924805, -5.462155818939209, -0.018199361860752106]",0.9819652438163757
3,"['    @Test\n    public void testSslBasic() throws IOException {\n        try(ElasticsearchContainer container = new ElasticsearchContainer(ELASTICSEARCH_IMAGE)\n                .withCreateContainerCmdModifier(c -> c.withName(""elasticsearch""))\n                .withFileSystemBind(sslResourceDir, configDir + ""/ssl"")\n                .withEnv(""ELASTIC_PASSWORD"",""elastic"")  // boostrap password\n                .withEnv(""xpack.license.self_generated.type"", ""trial"")\n                .withEnv(""xpack.security.enabled"", ""true"")\n                .withEnv(""xpack.security.http.ssl.enabled"", ""true"")\n                .withEnv(""xpack.security.http.ssl.client_authentication"", ""optional"")\n                .withEnv(""xpack.security.http.ssl.key"", configDir + ""/ssl/elasticsearch.key"")\n                .withEnv(""xpack.security.http.ssl.certificate"", configDir + ""/ssl/elasticsearch.crt"")\n                .withEnv(""xpack.security.http.ssl.certificate_authorities"", configDir + ""/ssl/cacert.crt"")\n                .withEnv(""xpack.security.transport.ssl.enabled"", ""true"")\n                .withEnv(""xpack.security.transport.ssl.verification_mode"", ""certificate"")\n                .withEnv(""xpack.security.transport.ssl.key"", configDir + ""/ssl/elasticsearch.key"")\n                .withEnv(""xpack.security.transport.ssl.certificate"", configDir + ""/ssl/elasticsearch.crt"")\n                .withEnv(""xpack.security.transport.ssl.certificate_authorities"", configDir + ""/ssl/cacert.crt"")\n                .waitingFor(Wait.forLogMessage("".*(Security is enabled|Active license).*"", 1)\n                        .withStartupTimeout(Duration.ofMinutes(2)))) {\n            container.start();\n\n            ElasticSearchConfig config = new ElasticSearchConfig()\n                    .setElasticSearchUrl(""https://"" + container.getHttpHostAddress())\n                    .setIndexName(INDEX)\n                    .setUsername(""elastic"")\n                    .setPassword(""elastic"")\n                    .setSsl(new ElasticSearchSslConfig()\n                            .setEnabled(true)\n                            .setTruststorePath(sslResourceDir + ""/truststore.jks"")\n                            .setTruststorePassword(""changeit""));\n            ElasticSearchClient client = new ElasticSearchClient(config);\n            testIndexExists(client);\n        }\n    }\n']",generated;elastic;sl;mode;IMAGE;elasticsearch;ELASTICSEARCH;Create;boostrap;ssl,8.731149137020111e-10;6.83940015733242e-10;5.820766091346741e-10;4.0745362639427185e-10;3.92901711165905e-10;3.637978807091713e-10;3.2014213502407074e-10;2.473825588822365e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.84556245803833, -5.679687023162842, -6.309573173522949, -5.329741954803467, -5.524033069610596, -0.017106717452406883]",0.9830387830734253
3,"['    @Test\n    public void testSslWithHostnameVerification() throws IOException {\n        try(ElasticsearchContainer container = new ElasticsearchContainer(ELASTICSEARCH_IMAGE)\n                .withCreateContainerCmdModifier(c -> c.withName(""elasticsearch""))\n                .withFileSystemBind(sslResourceDir, configDir + ""/ssl"")\n                .withEnv(""ELASTIC_PASSWORD"",""elastic"")  // boostrap password\n                .withEnv(""xpack.license.self_generated.type"", ""trial"")\n                .withEnv(""xpack.security.enabled"", ""true"")\n                .withEnv(""xpack.security.http.ssl.enabled"", ""true"")\n                .withEnv(""xpack.security.http.ssl.supported_protocols"", ""TLSv1.2,TLSv1.1"")\n                .withEnv(""xpack.security.http.ssl.client_authentication"", ""optional"")\n                .withEnv(""xpack.security.http.ssl.key"", configDir + ""/ssl/elasticsearch.key"")\n                .withEnv(""xpack.security.http.ssl.certificate"", configDir + ""/ssl/elasticsearch.crt"")\n                .withEnv(""xpack.security.http.ssl.certificate_authorities"", configDir + ""/ssl/cacert.crt"")\n                .withEnv(""xpack.security.transport.ssl.enabled"", ""true"")\n                .withEnv(""xpack.security.transport.ssl.verification_mode"", ""full"")\n                .withEnv(""xpack.security.transport.ssl.key"", configDir + ""/ssl/elasticsearch.key"")\n                .withEnv(""xpack.security.transport.ssl.certificate"", configDir + ""/ssl/elasticsearch.crt"")\n                .withEnv(""xpack.security.transport.ssl.certificate_authorities"", configDir + ""/ssl/cacert.crt"")\n                .waitingFor(Wait.forLogMessage("".*(Security is enabled|Active license).*"", 1)\n                        .withStartupTimeout(Duration.ofMinutes(2)))) {\n            container.start();\n\n            ElasticSearchConfig config = new ElasticSearchConfig()\n                    .setElasticSearchUrl(""https://"" + container.getHttpHostAddress())\n                    .setIndexName(INDEX)\n                    .setUsername(""elastic"")\n                    .setPassword(""elastic"")\n                    .setSsl(new ElasticSearchSslConfig()\n                            .setEnabled(true)\n                            .setProtocols(""TLSv1.2"")\n                            .setHostnameVerification(true)\n                            .setTruststorePath(sslResourceDir + ""/truststore.jks"")\n                            .setTruststorePassword(""changeit""));\n            ElasticSearchClient client = new ElasticSearchClient(config);\n            testIndexExists(client);\n        }\n    }\n']",password;elasticsearch;Hostname;license;ssl;Container;ELASTIC;ssl;Container;IMAGE,6.984919309616089e-10;6.402842700481415e-10;4.729372449219227e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.847081661224365, -5.68074369430542, -6.306836128234863, -5.325153827667236, -5.522034645080566, -0.017134374007582664]",0.9830116033554077
3,"['    @Test\n    public void testSslWithClientAuth() throws IOException {\n        try(ElasticsearchContainer container = new ElasticsearchContainer(ELASTICSEARCH_IMAGE)\n                .withCreateContainerCmdModifier(c -> c.withName(""elasticsearch""))\n                .withFileSystemBind(sslResourceDir, configDir + ""/ssl"")\n                .withEnv(""ELASTIC_PASSWORD"",""elastic"")  // boostrap password\n                .withEnv(""xpack.license.self_generated.type"", ""trial"")\n                .withEnv(""xpack.security.enabled"", ""true"")\n                .withEnv(""xpack.security.http.ssl.enabled"", ""true"")\n                .withEnv(""xpack.security.http.ssl.client_authentication"", ""required"")\n                .withEnv(""xpack.security.http.ssl.key"", configDir + ""/ssl/elasticsearch.key"")\n                .withEnv(""xpack.security.http.ssl.certificate"", configDir + ""/ssl/elasticsearch.crt"")\n                .withEnv(""xpack.security.http.ssl.certificate_authorities"", configDir + ""/ssl/cacert.crt"")\n                .withEnv(""xpack.security.transport.ssl.enabled"", ""true"")\n                .withEnv(""xpack.security.transport.ssl.verification_mode"", ""full"")\n                .withEnv(""xpack.security.transport.ssl.key"", configDir + ""/ssl/elasticsearch.key"")\n                .withEnv(""xpack.security.transport.ssl.certificate"", configDir + ""/ssl/elasticsearch.crt"")\n                .withEnv(""xpack.security.transport.ssl.certificate_authorities"", configDir + ""/ssl/cacert.crt"")\n                .waitingFor(Wait.forLogMessage("".*(Security is enabled|Active license).*"", 1)\n                        .withStartupTimeout(Duration.ofMinutes(3)))) {\n            container.start();\n\n            ElasticSearchConfig config = new ElasticSearchConfig()\n                    .setElasticSearchUrl(""https://"" + container.getHttpHostAddress())\n                    .setIndexName(INDEX)\n                    .setUsername(""elastic"")\n                    .setPassword(""elastic"")\n                    .setSsl(new ElasticSearchSslConfig()\n                            .setEnabled(true)\n                            .setHostnameVerification(true)\n                            .setTruststorePath(sslResourceDir + ""/truststore.jks"")\n                            .setTruststorePassword(""changeit"")\n                            .setKeystorePath(sslResourceDir + ""/keystore.jks"")\n                            .setKeystorePassword(""changeit""));\n            ElasticSearchClient client = new ElasticSearchClient(config);\n            testIndexExists(client);\n        }\n    }\n']",Auth;license;http;ELASTIC;Elasticsearch;acert;elasticsearch;trial;Modifier;Container,1.6880221664905548e-09;4.0745362639427185e-10;3.8562575355172157e-10;3.8562575355172157e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.255546860396862e-10;2.1827872842550278e-10,5,5,"[-5.849485397338867, -5.6826863288879395, -6.316980361938477, -5.334926128387451, -5.532148838043213, -0.01701272837817669]",0.9831310510635376
3,"['    @Test\n    public void testOpenAndRead() throws Exception {\n        kafkaConnectSource = new KafkaConnectSource();\n        kafkaConnectSource.open(config, context);\n\n        // use FileStreamSourceConnector, each line is a record, need ""\\n"" and end of each record.\n        OutputStream os = Files.newOutputStream(tempFile.toPath());\n\n        String line1 = ""This is the first line\\n"";\n        os.write(line1.getBytes());\n        os.flush();\n        log.info(""write 2 lines."");\n\n        String line2 = ""This is the second line\\n"";\n        os.write(line2.getBytes());\n        os.flush();\n\n        log.info(""finish write, will read 2 lines"");\n\n        // Note: FileStreamSourceTask read the whole line as Value, and set Key as null.\n        Record<KeyValue<byte[], byte[]>> record = kafkaConnectSource.read();\n        String readBack1 = new String(record.getValue().getValue());\n        assertTrue(line1.contains(readBack1));\n        assertNull(record.getValue().getKey());\n        log.info(""read line1: {}"", readBack1);\n        record.ack();\n\n        record = kafkaConnectSource.read();\n        String readBack2 = new String(record.getValue().getValue());\n        assertTrue(line2.contains(readBack2));\n        assertNull(record.getValue().getKey());\n        assertTrue(record.getPartitionId().isPresent());\n        assertFalse(record.getPartitionIndex().isPresent());\n        log.info(""read line2: {}"", readBack2);\n        record.ack();\n\n        String line3 = ""This is the 3rd line\\n"";\n        os.write(line3.getBytes());\n        os.flush();\n\n        try {\n            kafkaConnectSource.read();\n            fail(""expected exception"");\n        } catch (Exception e) {\n            log.info(""got exception"", e);\n            assertTrue(e.getCause().getCause() instanceof org.apache.kafka.connect.errors.ConnectException);\n        }\n    }\n']",Kafka;config;Connector;get;afka;ack;second;File;write;Open,8.149072527885437e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.864805221557617, -5.70119047164917, -6.365325450897217, -5.404945373535156, -5.586519718170166, -0.016273755580186844]",0.9838579297065735
3,"['    @Test\n    public void smokeTest() throws Exception {\n        KafkaConnectSink sink = new KafkaConnectSink();\n        sink.open(props, context);\n\n        final GenericRecord rec = getGenericRecord(""value"", Schema.STRING);\n        Message msg = mock(MessageImpl.class);\n        when(msg.getValue()).thenReturn(rec);\n        when(msg.getMessageId()).thenReturn(new MessageIdImpl(1, 0, 0));\n\n        final AtomicInteger status = new AtomicInteger(0);\n        Record<GenericObject> record = PulsarRecord.<String>builder()\n                .topicName(""fake-topic"")\n                .message(msg)\n                .ackFunction(status::incrementAndGet)\n                .failFunction(status::decrementAndGet)\n                .schema(Schema.STRING)\n                .build();\n\n        sink.write(record);\n        sink.flush();\n\n        assertEquals(status.get(), 1);\n\n        sink.close();\n\n        List<String> lines = Files.readAllLines(file, StandardCharsets.US_ASCII);\n        assertEquals(lines.get(0), ""value"");\n    }\n']",smoke;Kafka;Kafka;ines;Connect;ink;Files;when;status;read,1.1641532182693481e-09;6.984919309616089e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.83892822265625, -5.641404151916504, -6.27579402923584, -5.331334114074707, -5.5099945068359375, -0.017374923452734947]",0.9827751517295837
3,"['    @Test\n    public void seekPauseResumeTest() throws Exception {\n        KafkaConnectSink sink = new KafkaConnectSink();\n        sink.open(props, context);\n\n        final GenericRecord rec = getGenericRecord(""value"", Schema.STRING);\n        Message msg = mock(MessageImpl.class);\n        when(msg.getValue()).thenReturn(rec);\n        final MessageId msgId = new MessageIdImpl(10, 10, 0);\n        when(msg.getMessageId()).thenReturn(msgId);\n\n        final AtomicInteger status = new AtomicInteger(0);\n        Record<GenericObject> record = PulsarRecord.<String>builder()\n                .topicName(""fake-topic"")\n                .message(msg)\n                .ackFunction(status::incrementAndGet)\n                .failFunction(status::decrementAndGet)\n                .schema(Schema.STRING)\n                .build();\n\n        sink.write(record);\n        sink.flush();\n\n        assertEquals(status.get(), 1);\n\n        final TopicPartition tp = new TopicPartition(""fake-topic"", 0);\n        assertNotEquals(MessageIdUtils.getOffset(msgId), 0);\n        assertEquals(sink.currentOffset(tp.topic(), tp.partition()), MessageIdUtils.getOffset(msgId));\n\n        sink.taskContext.offset(tp, 0);\n        verify(context, times(1)).seek(Mockito.anyString(), Mockito.anyInt(), any());\n        assertEquals(sink.currentOffset(tp.topic(), tp.partition()), 0);\n\n        sink.taskContext.pause(tp);\n        verify(context, times(1)).pause(tp.topic(), tp.partition());\n        sink.taskContext.resume(tp);\n        verify(context, times(1)).resume(tp.topic(), tp.partition());\n\n        sink.close();\n    }\n']",Pause;seek;Exception;Topic;Partition;Topic;props;topic;Message;Connect,9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.840206146240234, -5.634069442749023, -6.285752773284912, -5.34586763381958, -5.524080276489258, -0.017250262200832367]",0.9828977584838867
3,"['    @Test\n    public void subscriptionTypeTest() throws Exception {\n        try (KafkaConnectSink sink = new KafkaConnectSink()) {\n            log.info(""Failover is allowed"");\n            sink.open(props, context);\n        }\n\n        when(context.getSubscriptionType()).thenReturn(SubscriptionType.Exclusive);\n        try (KafkaConnectSink sink = new KafkaConnectSink()) {\n            log.info(""Exclusive is allowed"");\n            sink.open(props, context);\n        }\n\n        when(context.getSubscriptionType()).thenReturn(SubscriptionType.Key_Shared);\n        try (KafkaConnectSink sink = new KafkaConnectSink()) {\n            log.info(""Key_Shared is not allowed"");\n            sink.open(props, context);\n            fail(""expected exception"");\n        } catch (IllegalArgumentException iae) {\n            // pass\n        }\n\n        when(context.getSubscriptionType()).thenReturn(SubscriptionType.Shared);\n        try (KafkaConnectSink sink = new KafkaConnectSink()) {\n            log.info(""Shared is not allowed"");\n            sink.open(props, context);\n            fail(""expected exception"");\n        } catch (IllegalArgumentException iae) {\n            // pass\n        }\n\n        when(context.getSubscriptionType()).thenReturn(null);\n        try (KafkaConnectSink sink = new KafkaConnectSink()) {\n            log.info(""Type is required"");\n            sink.open(props, context);\n            fail(""expected exception"");\n        } catch (IllegalArgumentException iae) {\n            // pass\n        }\n\n    }\n']",Kafka;Failover;expected;Exception;Subscription;Type;Connect;Connect;Key;Connect,6.984919309616089e-10;5.820766091346741e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.840244770050049, -5.661271095275879, -6.278967380523682, -5.3120222091674805, -5.52222204208374, -0.017340010032057762]",0.9828096032142639
3,"['\t@Test // #112\n\tpublic void createsLocalDateTimeFromTimestamp() {\n\n\t\tDefaultRevisionEntity entity = new DefaultRevisionEntity();\n\t\tentity.setTimestamp(NOW.toEpochMilli());\n\n\t\tDefaultRevisionMetadata metadata = new DefaultRevisionMetadata(entity);\n\n\t\tassertThat(metadata.getRevisionDate()).hasValue(LocalDateTime.ofInstant(NOW, ZoneOffset.systemDefault()));\n\t}\n']",Revision;Revision;system;Offset;Revision;Metadata;has;Time;Value;of,1.1641532182693481e-09;1.0186340659856796e-09;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.851499557495117, -5.715972900390625, -6.317683219909668, -5.480892658233643, -5.454573631286621, -0.016551213338971138]",0.983585000038147
3,"['\t@Test\n\tpublic void testWithQueryDsl() {\n\n\t\tCountry de = new Country();\n\t\tde.code = ""de"";\n\t\tde.name = ""Deutschland"";\n\n\t\tcountryRepository.save(de);\n\n\t\tCountry found = countryRepository.findOne(QCountry.country.name.eq(""Deutschland"")).get();\n\n\t\tassertThat(found).isNotNull();\n\t\tassertThat(found.id).isEqualTo(de.id);\n\t}\n']",eq;find;One;save;de;name;found;de;Country;country,1.280568540096283e-09;1.280568540096283e-09;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10,5,5,"[-5.872629642486572, -5.775776386260986, -6.357269287109375, -5.440292835235596, -5.455028057098389, -0.016398068517446518]",0.9837356209754944
3,"['\t@Test\n\tpublic void testWithRevisions() {\n\n\t\tCountry de = new Country();\n\t\tde.code = ""de"";\n\t\tde.name = ""Deutschland"";\n\n\t\tcountryRepository.save(de);\n\n\t\tde.name = ""Germany"";\n\n\t\tcountryRepository.save(de);\n\n\t\tRevisions<Integer, Country> revisions = countryRepository.findRevisions(de.id);\n\n\t\tassertThat(revisions).hasSize(2);\n\n\t\tIterator<Revision<Integer, Country>> iterator = revisions.iterator();\n\n\t\tInteger firstRevisionNumber = iterator.next().getRevisionNumber().get();\n\t\tInteger secondRevisionNumber = iterator.next().getRevisionNumber().get();\n\n\t\tassertThat(countryRepository.findRevision(de.id, firstRevisionNumber).get().getEntity().name)\n\t\t\t\t.isEqualTo(""Deutschland"");\n\t\tassertThat(countryRepository.findRevision(de.id, secondRevisionNumber).get().getEntity().name).isEqualTo(""Germany"");\n\t}\n']",Revisions;revisions;revisions;Germany;Revisions;Deutschland;name;Number;country;second,8.731149137020111e-10;4.94765117764473e-10;4.656612873077393e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.382431946694851e-10,5,5,"[-5.833005905151367, -5.696259498596191, -6.2859296798706055, -5.384208679199219, -5.465915679931641, -0.017112577334046364]",0.9830330014228821
3,"['\t@Test // #146\n\tpublic void findRevisionShortCircuitsOnEmptyRevisionList() {\n\n\t\tfailOnEmptyRevisions();\n\n\t\tEnversRevisionRepositoryImplUnderTest<?, Object, ?> repository = new EnversRevisionRepositoryImplUnderTest<>(entityInformation, revisionEntityInformation, entityManager);\n\n\t\trepository.findRevisions(-999, PageRequest.of(0, 5));\n\t}\n']",Circuits;revision;entity;Under;On;repository;Object;Revision;Revisions;Page,2.9103830456733704e-09;2.735760062932968e-09;2.444721758365631e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.917112350463867, -5.806628227233887, -6.416190147399902, -5.488211154937744, -5.485639572143555, -0.01573961414396763]",0.9843834638595581
3,"['\t@Test\n\tpublic void testLifeCycle() {\n\n\t\tLicense license = new License();\n\t\tlicense.name = ""Schnitzel"";\n\n\t\tlicenseRepository.save(license);\n\n\t\tCountry de = new Country();\n\t\tde.code = ""de"";\n\t\tde.name = ""Deutschland"";\n\n\t\tcountryRepository.save(de);\n\n\t\tCountry se = new Country();\n\t\tse.code = ""se"";\n\t\tse.name = ""Schweden"";\n\n\t\tcountryRepository.save(se);\n\n\t\tlicense.laender = new HashSet<Country>();\n\t\tlicense.laender.addAll(Arrays.asList(de, se));\n\n\t\tlicenseRepository.save(license);\n\n\t\tde.name = ""Daenemark"";\n\n\t\tcountryRepository.save(de);\n\n\t\tOptional<Revision<Integer, License>> revision = licenseRepository.findLastChangeRevision(license.id);\n\n\t\tassertThat(revision).hasValueSatisfying(it -> {\n\n\t\t\tPage<Revision<Integer, License>> page = licenseRepository.findRevisions(license.id, PageRequest.of(0, 10));\n\t\t\tRevisions<Integer, License> revisions = Revisions.of(page.getContent());\n\t\t\tassertThat(revisions.getLatestRevision()).isEqualTo(it);\n\t\t});\n\t}\n']",License;Country;Request;Deutschland;Country;Daenemark;license;Schweden;Repository;Revisions,7.566995918750763e-10;7.275957614183426e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.874003257602453e-10,5,5,"[-5.825394630432129, -5.6861677169799805, -6.30085563659668, -5.353205680847168, -5.51774787902832, -0.01707167737185955]",0.9830732345581055
3,['\t@Test // #1\n\tpublic void returnsEmptyRevisionsForUnrevisionedEntity() {\n\t\tassertThat(countryRepository.findRevisions(100L)).isEmpty();\n\t}\n'],That;country;Repository;returns;Unrevisioned;Entity;find;Empty;Empty;For,1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;4.0745362639427185e-10;3.2014213502407074e-10;0.0;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10,5,5,"[-5.892526149749756, -5.735999584197998, -6.362452983856201, -5.49338436126709, -5.422726154327393, -0.01637520082294941]",0.983758270740509
3,"['\t@Test // #31\n\tpublic void returnsParticularRevisionForAnEntity() {\n\n\t\tCountry de = new Country();\n\t\tde.code = ""de"";\n\t\tde.name = ""Deutschland"";\n\n\t\tcountryRepository.save(de);\n\n\t\tde.name = ""Germany"";\n\n\t\tcountryRepository.save(de);\n\n\t\tRevisions<Integer, Country> revisions = countryRepository.findRevisions(de.id);\n\n\t\tassertThat(revisions).hasSize(2);\n\n\t\tIterator<Revision<Integer, Country>> iterator = revisions.iterator();\n\t\tRevision<Integer, Country> first = iterator.next();\n\t\tRevision<Integer, Country> second = iterator.next();\n\n\t\tassertThat(countryRepository.findRevision(de.id, first.getRequiredRevisionNumber())).hasValueSatisfying(it -> {\n\t\t\tassertThat(it.getEntity().name).isEqualTo(""Deutschland"");\n\t\t});\n\n\t\tassertThat(countryRepository.findRevision(de.id, second.getRequiredRevisionNumber())).hasValueSatisfying(it -> {\n\t\t\tassertThat(it.getEntity().name).isEqualTo(""Germany"");\n\t\t});\n\t}\n']",Deutschland;For;Revision;revisions;Germany;Particular;country;save;country;Repository,9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.806475639343262, -5.6671247482299805, -6.245436668395996, -5.312376022338867, -5.471149444580078, -0.017697401344776154]",0.9824582934379578
3,"['\t@Test // #55\n\tpublic void considersRevisionNumberSortOrder() {\n\n\t\tCountry de = new Country();\n\t\tde.code = ""de"";\n\t\tde.name = ""Deutschland"";\n\n\t\tcountryRepository.save(de);\n\n\t\tde.name = ""Germany"";\n\n\t\tcountryRepository.save(de);\n\n\t\tPage<Revision<Integer, Country>> page = countryRepository.findRevisions(de.id,\n\t\t\t\tPageRequest.of(0, 10, RevisionSort.desc()));\n\n\t\tassertThat(page).hasSize(2);\n\t\tassertThat(page.getContent().get(0).getRequiredRevisionNumber())\n\t\t\t\t.isGreaterThan(page.getContent().get(1).getRequiredRevisionNumber());\n\t}\n']",Revision;considers;Revision;Germany;country;new;Revision;desc;country;code,1.862645149230957e-09;1.2223608791828156e-09;1.1641532182693481e-09;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.853173732757568, -5.734289169311523, -6.329133033752441, -5.423670291900635, -5.491706371307373, -0.016555551439523697]",0.9835807681083679
3,"['\t@Test // #21\n\tpublic void findsDeletedRevisions() {\n\n\t\tCountry de = new Country();\n\t\tde.code = ""de"";\n\t\tde.name = ""Deutschland"";\n\n\t\tcountryRepository.save(de);\n\n\t\tcountryRepository.delete(de);\n\n\t\tRevisions<Integer, Country> revisions = countryRepository.findRevisions(de.id);\n\n\t\tassertThat(revisions).hasSize(2);\n\t\tassertThat(revisions.getLatestRevision().getEntity()) //\n\t\t\t\t.isNotNull() //\n\t\t\t\t.extracting(c -> c.name, c -> c.code) //\n\t\t\t\t.containsExactly(null, null);\n\t}\n']",Revisions;revisions;Deleted;country;name;Size;Country;revisions;name;delete,1.2514647096395493e-09;6.402842700481415e-10;6.111804395914078e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.710738383233547e-10;3.4924596548080444e-10,5,5,"[-5.852017402648926, -5.709593772888184, -6.307770729064941, -5.398616790771484, -5.484684944152832, -0.016823669895529747]",0.9833171963691711
3,"['\t@Test // #146\n\tpublic void shortCurcuitingWhenOffsetIsToLarge() {\n\t\tCountry de = new Country();\n\t\tde.code = ""de"";\n\t\tde.name = ""Deutschland"";\n\n\t\tcountryRepository.save(de);\n\n\t\tcountryRepository.delete(de);\n\n\t\tcheck(de, 0, 1);\n\t\tcheck(de, 1, 1);\n\t\tcheck(de, 2, 0);\n\t}\n']",short;Offset;Deutschland;Large;save;check;de;Curcuiting;check;Repository,1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;5.820766091346741e-11,5,5,"[-5.876980781555176, -5.738338947296143, -6.337906837463379, -5.431264877319336, -5.459575176239014, -0.016560593619942665]",0.9835757613182068
3,['    @Test\n    public void testPreloadingNotHappening() {\n        final JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);\n        final JsonSchema schema = factory.getSchema(INVALID_$REF_SCHEMA);\n        // not breaking - pass\n        Assertions.assertNotNull(schema);\n    }\n'],Spec;Flag;INVALID;Version;CHEMA;pass;Factory;schema;Schema;Schema,5.587935447692871e-09;2.0954757928848267e-09;1.979060471057892e-09;9.89530235528946e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.91366720199585, -5.789450168609619, -6.379671096801758, -5.479016304016113, -5.489331245422363, -0.01588710956275463]",0.98423832654953
3,"['    @Test\n    public void testPreloadingHappening() {\n        final JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);\n        final JsonSchema schema = factory.getSchema(INVALID_$REF_SCHEMA);\n        Assertions.assertThrows(JsonSchemaException.class,\n                            new Executable() {\n                                @Override\n                                public void execute() {\n                                    schema.initializeValidators();\n                                }\n']",Version;final;Instance;Flag;get;Validators;REF;class;Assertions;son,3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;8.731149137020111e-11;8.731149137020111e-11;7.275957614183426e-11,5,5,"[-5.859401226043701, -5.700686931610107, -6.289355754852295, -5.3614935874938965, -5.49370002746582, -0.017002766951918602]",0.9831409454345703
3,['    @Test\n    public void testPreloadingHappeningForCircularDependency() {\n        final JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);\n        final JsonSchema schema = factory.getSchema(CIRCULAR_$REF_SCHEMA);\n        schema.initializeValidators();\n    }\n'],REF;IRCULAR;Version;Flag;Validators;schema;Circular;final;For;schema,1.862645149230957e-09;1.57160684466362e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.912223815917969, -5.811242580413818, -6.397928237915039, -5.499981880187988, -5.4882402420043945, -0.015709688887000084]",0.984413206577301
3,"['    @ParameterizedTest\n    public void dataIsValid(boolean failFast) throws Exception {\n        String schemaPath = ""/schema/issue386-v7.json"";\n        String dataPath = ""/data/issue386.json"";\n        JsonSchema schema = getJsonSchemaFromPathV7(schemaPath, failFast);\n        JsonNode node = getJsonNodeFromPath(dataPath).get(""valid"");\n        node.forEach(testNode -> {\n            Set<ValidationMessage> errors = schema.validate(testNode.get(""data""));\n            Assertions.assertEquals(0, errors.size(), ""Expected no errors for "" + testNode.get(""data""));\n        });\n    }\n']",Parameterized;schema;Expected;boolean;Node;node;data;Fast;validate;Exception,1.3969838619232178e-09;9.313225746154785e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.881065845489502, -5.742609977722168, -6.35396671295166, -5.402148723602295, -5.520486354827881, -0.016382237896323204]",0.9837512373924255
3,"['    @Test\n    public void dataIsInvalidFailFast() throws Exception {\n        String schemaPath = ""/schema/issue386-v7.json"";\n        String dataPath = ""/data/issue386.json"";\n        JsonSchema schema = getJsonSchemaFromPathV7(schemaPath, true);\n        JsonNode node = getJsonNodeFromPath(dataPath).get(""invalid"");\n        node.forEach(testNode -> {\n            try {\n                schema.validate(testNode.get(""data""));\n                Assertions.fail();\n            } catch (JsonSchemaException e) {\n                Assertions.assertEquals(testNode.get(""expectedErrors"").get(0).asText(), e.getMessage());\n            }\n        });\n    }\n']",data;json;expected;issue;Path;Path;son;schema;Schema;get,6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.3096723705530167e-10,5,5,"[-5.878662109375, -5.730958938598633, -6.325655460357666, -5.358973979949951, -5.52387809753418, -0.016666464507579803]",0.9834716320037842
3,"['    @Test\n    public void dataIsInvalidFailSlow() throws Exception {\n        String schemaPath = ""/schema/issue386-v7.json"";\n        String dataPath = ""/data/issue386.json"";\n        JsonSchema schema = getJsonSchemaFromPathV7(schemaPath, false);\n        JsonNode node = getJsonNodeFromPath(dataPath).get(""invalid"");\n        node.forEach(testNode -> {\n            Set<ValidationMessage> errors = schema.validate(testNode.get(""data""));\n            List<String> errorMessages = errors.stream().map(x -> x.getMessage()).collect(Collectors.toList());\n            testNode.get(""expectedErrors"").forEach(expectedError -> {\n                Assertions.assertTrue(errorMessages.contains(expectedError.asText()));\n            });\n        });\n    }\n']",issue;Slow;data;Exception;invalid;data;Path;Path;data;Schema,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.255546860396862e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.879080772399902, -5.733147144317627, -6.332823753356934, -5.365797996520996, -5.513699531555176, -0.016654038801789284]",0.9834838509559631
3,"['    @Test\n    public void testNullableOneOf() throws Exception {\n        runTestFile(""data/issue425.json"");\n    }\n']",File;One;issue;data;Exception;run;json;Nullable,1.1641532182693481e-09;9.313225746154785e-10;4.0745362639427185e-10;0.0;-1.1641532182693481e-10;-6.984919309616089e-10;-9.313225746154785e-10;-4.423782229423523e-09,5,5,"[-5.939767837524414, -5.828981399536133, -6.407859802246094, -5.523836135864258, -5.439516544342041, -0.015676595270633698]",0.9844456315040588
3,['  @BeforeEach\n  public void setup() throws IOException {\n    setupSchema();\n  }\n'],Before;setup;IOException;setup;Each;Schema,9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;1.7462298274040222e-10;-9.313225746154785e-10;-1.280568540096283e-09,5,5,"[-5.848662376403809, -5.683583736419678, -6.306933879852295, -5.4788031578063965, -5.35237455368042, -0.017166482284665108]",0.9829800128936768
3,"['  @Test\n  public void firstOneValid() throws Exception {\n    String dataPath = ""/data/issue366.json"";\n\n    InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n    JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n    List<JsonNode> testNodes = node.findValues(""tests"");\n    JsonNode testNode = testNodes.get(0).get(0);\n    JsonNode dataNode = testNode.get(""data"");\n    Set<ValidationMessage> errors = jsonSchema.validate(dataNode);\n    assertTrue(errors.isEmpty());\n  }\n']",Path;json;node;tests;json;find;Content;Stream;son;Values,1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.877219200134277, -5.774705410003662, -6.350159645080566, -5.403197288513184, -5.474180221557617, -0.016485197469592094]",0.9836500287055969
3,"['  @Test\n  public void secondOneValid() throws Exception {\n    String dataPath = ""/data/issue366.json"";\n\n    InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n    JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n    List<JsonNode> testNodes = node.findValues(""tests"");\n    JsonNode testNode = testNodes.get(0).get(1);\n    JsonNode dataNode = testNode.get(""data"");\n    Set<ValidationMessage> errors = jsonSchema.validate(dataNode);\n    assertTrue(errors.isEmpty());\n  }\n']",data;issue;node;From;Path;Valid;tests;Stream;data;Stream,1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;2.9103830456733704e-10,5,5,"[-5.876572608947754, -5.774011135101318, -6.351510047912598, -5.406120300292969, -5.474390029907227, -0.016472533345222473]",0.9836624264717102
3,"['  @Test\n  public void bothValid() throws Exception {\n    String dataPath = ""/data/issue366.json"";\n\n    assertThrows(JsonSchemaException.class, () -> {\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        List<JsonNode> testNodes = node.findValues(""tests"");\n        JsonNode testNode = testNodes.get(0).get(2);\n        JsonNode dataNode = testNode.get(""data"");\n        jsonSchema.validate(dataNode);\n    });\n  }\n']",Valid;Node;odes;node;tests;issue;Stream;data;validate;Exception,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.837623469531536e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.3283064365386963e-10,5,5,"[-5.863859176635742, -5.726763725280762, -6.323597431182861, -5.379481315612793, -5.4792680740356445, -0.01681452803313732]",0.9833260774612427
3,"['  @Test\n  public void neitherValid() throws Exception {\n    String dataPath = ""/data/issue366.json"";\n\n    assertThrows(JsonSchemaException.class, () -> {\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        List<JsonNode> testNodes = node.findValues(""tests"");\n        JsonNode testNode = testNodes.get(0).get(3);\n        JsonNode dataNode = testNode.get(""data"");\n        jsonSchema.validate(dataNode);\n    });\n  }\n']",neither;Node;Valid;data;son;Throws;son;Node;Path;son,4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.055902197957039e-10;2.837623469531536e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.864296913146973, -5.729516983032227, -6.3221540451049805, -5.374898910522461, -5.478117942810059, -0.016833165660500526]",0.9833077192306519
3,"['    @Test\n    public void testValidIntegralValuesWithJavaSemantics() {\n        schemaValidatorsConfig.setJavaSemantics(true);\n        for (String validValue : validIntegralValues) {\n            assertSame(JsonType.INTEGER,\n                    getValueNodeType(DecimalNode.valueOf(new BigDecimal(validValue)), schemaValidatorsConfig),\n                    validValue);\n        }\n    }\n']",Type;get;Node;Decimal;Integral;Type;new;Same;Config;value,1.280568540096283e-09;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10;2.0372681319713593e-10,5,5,"[-5.878912448883057, -5.747714996337891, -6.326172828674316, -5.391796112060547, -5.491525650024414, -0.0165889672935009]",0.9835478663444519
3,"['    @Test\n    public void testValidIntegralValuesWithoutJavaSemantics() {\n        schemaValidatorsConfig.setJavaSemantics(false);\n        for (String validValue : validIntegralValues) {\n            assertSame(JsonType.NUMBER,\n                    getValueNodeType(DecimalNode.valueOf(new BigDecimal(validValue)), schemaValidatorsConfig),\n                    validValue);\n        }\n    }\n']",Type;Semantics;set;Value;valid;Big;Config;Decimal;schema;Java,1.6298145055770874e-09;1.3969838619232178e-09;4.802132025361061e-10;4.656612873077393e-10;3.2014213502407074e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.876593589782715, -5.741276741027832, -6.324817657470703, -5.390497207641602, -5.488917827606201, -0.016635864973068237]",0.9835017323493958
3,"['    @Test\n    public void testWithLosslessNarrowing() {\n        schemaValidatorsConfig.setLosslessNarrowing(true);\n        for (String validValue : validIntegralValues) {\n            assertSame(JsonType.INTEGER,\n                    getValueNodeType(DecimalNode.valueOf(new BigDecimal(""1.0"")), schemaValidatorsConfig),\n                    validValue);\n\n            assertSame(JsonType.NUMBER,\n                    getValueNodeType(DecimalNode.valueOf(new BigDecimal(""1.5"")), schemaValidatorsConfig),\n                    validValue);\n        }\n    }\n']",Integral;Values;son;ossless;arrowing;Big;Decimal;Decimal;Type;Node,1.1059455573558807e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.851291179656982, -5.683594226837158, -6.281869411468506, -5.322753429412842, -5.493474006652832, -0.0172888096421957]",0.9828597903251648
3,"['    @Test\n    public void testWithoutLosslessNarrowing() {\n        schemaValidatorsConfig.setLosslessNarrowing(false);\n        for (String validValue : validIntegralValues) {\n            assertSame(JsonType.NUMBER,\n                    getValueNodeType(DecimalNode.valueOf(new BigDecimal(""1.0"")), schemaValidatorsConfig),\n                    validValue);\n\n            assertSame(JsonType.NUMBER,\n                    getValueNodeType(DecimalNode.valueOf(new BigDecimal(""1.5"")), schemaValidatorsConfig),\n                    validValue);\n        }\n\n    }\n']",Integral;Values;NUMBER;son;valid;Config;Type;Without;Node;get,9.313225746154785e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10,5,5,"[-5.840594291687012, -5.678761005401611, -6.266573905944824, -5.313319683074951, -5.477043628692627, -0.017482701689004898]",0.9826691150665283
3,"['    @Test\n    public void shouldWalkWithValidation() throws URISyntaxException, IOException {\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(new URI(""http://json-schema"" +\n                "".org/draft-07/schema#""));\n        JsonNode data = mapper.readTree(Issue461Test.class.getResource(""/data/issue461-v7.json""));\n        ValidationResult result = schema.walk(data, true);\n        Assertions.assertTrue(result.getValidationMessages().isEmpty());\n    }\n']",URI;Stream;get;org;Resource;schema;Result;IOException;json;Schema,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;4.94765117764473e-10;4.656612873077393e-10;4.43833414465189e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.883635997772217, -5.774023532867432, -6.360746383666992, -5.400112152099609, -5.496947288513184, -0.01636863313615322]",0.9837647080421448
3,"['    @Test\n    public void testNumeicValues() {\n        for (String validValue : validNumericValues) {\n            assertTrue(isNumeric(validValue), validValue);\n        }\n    }\n']",umeic;Value;Value;valid;Value;True;valid;valid;valid;Values,2.3283064365386963e-09;4.656612873077393e-10;3.4924596548080444e-10;0.0;0.0;-2.9103830456733704e-11;-2.3283064365386963e-10;-2.3283064365386963e-10;-5.820766091346741e-10;-8.149072527885437e-10,5,5,"[-5.897887706756592, -5.74923038482666, -6.338634490966797, -5.441718578338623, -5.443150043487549, -0.016490239650011063]",0.983644962310791
3,"['    @Test\n    public void testNonNumeicValues() {\n        for (String invalidValue : invalidNumericValues) {\n            assertFalse(isNumeric(invalidValue), invalidValue);\n        }\n    }\n']",umeric;invalid;Value;Non;False;Values;invalid;Value;Value;Values,1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-5.820766091346741e-11;-2.0372681319713593e-10;-4.656612873077393e-10,5,5,"[-5.907560348510742, -5.74818754196167, -6.347888469696045, -5.454874515533447, -5.4548420906066895, -0.016341542825102806]",0.9837912321090698
3,"['    @Test\n    public void testGetVersionValue() {\n        SpecVersion ds = new SpecVersion();\n        Set versionFlags = EnumSet.of(\n                SpecVersion.VersionFlag.V4,\n                SpecVersion.VersionFlag.V201909);\n        Assertions.assertEquals(ds.getVersionValue(versionFlags), 9); // 0001|1000\n    }\n']",Flag;Enum;Set;Equals;Version;Get;Spec;Spec;Spec;Spec,2.3283064365386963e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.876070022583008, -5.7294464111328125, -6.305141448974609, -5.40266227722168, -5.456880569458008, -0.01679319329559803]",0.9833469986915588
3,['    @Test\n    public void testGetVersionFlags() {\n        SpecVersion ds = new SpecVersion();\n\n        long numericVersionCode = SpecVersion.VersionFlag.V201909.getVersionFlagValue()\n                | SpecVersion.VersionFlag.V6.getVersionFlagValue()\n                | SpecVersion.VersionFlag.V7.getVersionFlagValue();  // 14\n\n        Set versionFlags = ds.getVersionFlags(numericVersionCode);\n\n        assert !versionFlags.contains(SpecVersion.VersionFlag.V4);\n        assert versionFlags.contains(SpecVersion.VersionFlag.V6);\n        assert versionFlags.contains(SpecVersion.VersionFlag.V7);\n        assert versionFlags.contains(SpecVersion.VersionFlag.V201909);\n\n    }\n'],Flags;Flags;long;Version;Flags;contains;Version;Code;Version;Version,4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.1827872842550278e-10;1.8917489796876907e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.847188949584961, -5.679103374481201, -6.257450580596924, -5.323072910308838, -5.47046422958374, -0.01745927333831787]",0.9826922416687012
3,"['    @Test\n    public void testAllVersionValue() {\n        long numericVersionCode =\n                SpecVersion.VersionFlag.V201909.getVersionFlagValue()\n                        | SpecVersion.VersionFlag.V4.getVersionFlagValue()\n                        | SpecVersion.VersionFlag.V6.getVersionFlagValue()\n                        | SpecVersion.VersionFlag.V7.getVersionFlagValue();  // 15\n        Assertions.assertEquals(numericVersionCode, 15);\n\n    }\n']",Value;Flag;Spec;Flag;Value;Flag;Version;Code;Spec;Flag,3.026798367500305e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.868939399719238, -5.710655689239502, -6.293294429779053, -5.372317314147949, -5.489853858947754, -0.016898805275559425]",0.9832431674003601
3,"['    @Test\n    public void nestedOneOfsShouldStillMatchV7() throws Exception {\n        String schemaPath = ""/schema/issue383-v7.json"";\n        String dataPath = ""/data/issue383.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(0, errors.size());\n    }\n']",One;data;issue;schema;data;Path;Should;son;Path;schema,1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.897240161895752, -5.756245136260986, -6.359838008880615, -5.394018173217773, -5.505761623382568, -0.016380010172724724]",0.9837534427642822
3,"['    @Test\n    public void testComplexPropertyNamesV7() throws Exception {\n        String schemaPath = ""/schema/issue396-v7.json"";\n        String dataPath = ""/data/issue396.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n\n        final Set<String> invalidPaths = new HashSet<>();\n        node.fields().forEachRemaining(entry -> {\n            if (!entry.getValue().asBoolean())\n                invalidPaths.add(""$."" + entry.getKey());\n        });\n\n        Set<ValidationMessage> errors = schema.validate(node);\n        final Set<String> failedPaths = errors.stream().map(ValidationMessage::getPath).collect(Collectors.toSet());\n        Assertions.assertEquals(failedPaths, invalidPaths);\n    }\n']",failed;Path;Path;Names;Path;json;invalid;map;validate;Equals,5.238689482212067e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.849088191986084, -5.712881088256836, -6.305767059326172, -5.333765983581543, -5.506507873535156, -0.01704191043972969]",0.9831025004386902
3,"['    @Test\n    public void shouldFailWhenRequiredPropertiesDoNotExistInReferencedSubSchema() throws Exception {\n        String schemaPath = ""/draft2019-09/issue255.json"";\n        String dataPath = ""/data/issue255.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContent(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(2, errors.size());\n    }\n']",In;draft;Path;issue;When;Schema;Fail;Resource;schema;Message,1.6298145055770874e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.8696746826171875, -5.737843990325928, -6.334783554077148, -5.382707118988037, -5.501760482788086, -0.01663152687251568]",0.9835060238838196
3,"['    @Test\n    public void propertyNameEnumShouldFailV7() throws Exception {\n        String schemaPath = ""/schema/issue342-v7.json"";\n        String dataPath = ""/data/issue342.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(1, errors.size());\n        final ValidationMessage error = errors.iterator().next();\n        Assertions.assertEquals(""$.z"", error.getPath());\n        Assertions.assertEquals(""Property name $.z is not valid for validation: does not have a value in the enumeration [a, b, c]"", error.getMessage());\n    }\n']",Name;Fail;property;schema;json;Assertions;Equals;As;issue;As,3.725290298461914e-09;1.6298145055770874e-09;9.313225746154785e-10;4.94765117764473e-10;4.0745362639427185e-10;3.67435859516263e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.852819919586182, -5.716779708862305, -6.31315279006958, -5.348522663116455, -5.504910945892334, -0.016938891261816025]",0.983203649520874
3,"['    @Test\n    public void nestedValidation() throws IOException {\n        JsonSchema jsonSchema = schemaFactory.getSchema(schemaStr);\n        Set<ValidationMessage> validationMessages = jsonSchema.validate(mapper.readTree(person));\n\n        System.err.println(""\\n"" + Arrays.toString(validationMessages.toArray()));\n\n        assertFalse(validationMessages.isEmpty());\n\n\n    }\n']",Validation;Schema;Factory;Schema;schema;nested;Messages;read;Empty;apper,6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;3.92901711165905e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.877993106842041, -5.751248836517334, -6.349343776702881, -5.394232749938965, -5.48838472366333, -0.01654019020497799]",0.9835957288742065
3,"['    @Test\n    public void nestedTypeValidation() throws IOException, URISyntaxException {\n        URI uri = new URI(""https://json-schema.org/draft/2019-09/schema"");\n        JsonSchema jsonSchema = schemaFactory.getSchema(uri);\n        Set<ValidationMessage> validationMessages = jsonSchema.validate(mapper.readTree(invalidNestedSchema));\n\n        System.err.println(""\\n"" + Arrays.toString(validationMessages.toArray()));\n\n        assertFalse(validationMessages.isEmpty());\n    }\n']",Messages;URI;Messages;https;invalid;Messages;IOException;Exception;ur;read,8.149072527885437e-10;5.820766091346741e-10;5.675246939063072e-10;4.94765117764473e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.893020153045654, -5.797443866729736, -6.36255407333374, -5.398886203765869, -5.491207122802734, -0.016295334324240685]",0.9838365912437439
3,"['    @Test\n    public void typeValidation() throws IOException, URISyntaxException {\n        URI uri = new URI(""https://json-schema.org/draft/2019-09/schema"");\n        JsonSchema jsonSchema = schemaFactory.getSchema(uri);\n        Set<ValidationMessage> validationMessages = jsonSchema.validate(mapper.readTree(invalidSchema));\n\n        System.err.println(""\\n"" + Arrays.toString(validationMessages.toArray()));\n\n        assertFalse(validationMessages.isEmpty());\n    }\n']",type;IOException;schema;URI;son;uri;Schema;https;json;invalid,2.6775524020195007e-09;1.0477378964424133e-09;5.966285243630409e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.837623469531536e-10,5,5,"[-5.890928268432617, -5.801383018493652, -6.359487533569336, -5.3888936042785645, -5.491124153137207, -0.0163410734385252]",0.983791708946228
3,"['    @Test\n    public void shouldWorkV7() throws Exception {\n        String schemaPath = ""/schema/issue426-v7.json"";\n        String dataPath = ""/data/issue426.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(2, errors.size());\n        final JsonNode message = schema.schemaNode.get(""message"");\n        for(ValidationMessage error : errors) {\n            //validating custom message\n            Assertions.assertEquals(message.get(error.getType()).asText(),  error.getMessage());\n        }\n    }\n']",issue;Class;Node;data;Input;Resource;Set;Schema;Equals;data,9.313225746154785e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4915713109076023e-10;1.4551915228366852e-10,5,5,"[-5.849034309387207, -5.698640823364258, -6.289096832275391, -5.331898212432861, -5.495205879211426, -0.017177613452076912]",0.9829691052436829
3,"['    @Test\n    public void expectObjectNotIntegerV7() throws Exception {\n        String schemaPath = ""/schema/issue404-v7.json"";\n        String dataPath = ""/data/issue404.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(0, errors.size());\n    }\n']",issue;Path;Object;schema;json;Resource;data;Path;data;Input,9.604264050722122e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.888197898864746, -5.751294136047363, -6.346865653991699, -5.393866539001465, -5.500652313232422, -0.016466200351715088]",0.9836686253547668
3,"['    @Test(/*expected = java.lang.StackOverflowError.class*/)\n    public void testLoadingWithId() throws Exception {\n        URL url = new URL(""http://localhost:1234/self_ref/selfRef.json"");\n        JsonNode schemaJson = mapper.readTree(url);\n        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V4);\n        @SuppressWarnings(""unused"")\n        JsonSchema schema = factory.getSchema(schemaJson);\n    }\n']",URL;Ref;Stack;Version;json;url;Tree;schema;url;Factory,1.6880221664905548e-09;1.1641532182693481e-09;1.1059455573558807e-09;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;4.94765117764473e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.896352767944336, -5.790286064147949, -6.368190765380859, -5.43711519241333, -5.507780075073242, -0.016057105734944344]",0.9840710163116455
3,"['    @Test\n    public void testBignumValidator() throws Exception {\n        runTestFile(""draft4/optional/bignum.json"");\n    }\n']",ignum;draft;json;Validator;Exception;ignum;File;optional;run,2.9103830456733704e-09;1.862645149230957e-09;1.3387762010097504e-09;9.313225746154785e-10;6.984919309616089e-10;-6.984919309616089e-10;-6.984919309616089e-10;-1.0477378964424133e-09;-2.3283064365386963e-09,5,5,"[-5.972108840942383, -5.866790771484375, -6.443621635437012, -5.55134391784668, -5.445799827575684, -0.01528431847691536]",0.9848318696022034
3,"['    @Test\n    public void testFormatValidator() throws Exception {\n        runTestFile(""draft4/optional/format.json"");\n    }\n']",run;Validator;File;optional;json;draft;Exception;format;Format,2.6775524020195007e-09;9.313225746154785e-10;9.313225746154785e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-5.820766091346741e-10;-2.0954757928848267e-09;-3.026798367500305e-09,5,5,"[-5.9470133781433105, -5.836728572845459, -6.416774272918701, -5.528767108917236, -5.4440202713012695, -0.01557953841984272]",0.9845410585403442
3,"['    @Test\n    public void testComplexSchema() throws Exception {\n        runTestFile(""draft4/optional/complex.json"");\n    }\n']",run;draft;Complex;Exception;optional;File;json;Schema;complex,3.3760443329811096e-09;2.7939677238464355e-09;1.280568540096283e-09;6.984919309616089e-10;1.4551915228366852e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-1.3969838619232178e-09,5,5,"[-5.958611965179443, -5.8732476234436035, -6.448554992675781, -5.533547878265381, -5.454945087432861, -0.0153238819912076]",0.984792947769165
3,"['    @Test\n    public void testZeroTerminatedFloatsValidator() throws Exception {\n        runTestFile(""draft4/optional/zeroTerminatedFloats.json"");\n    }\n']",optional;Floats;File;run;Terminated;Floats;Terminated;Exception;Zero;Validator,3.026798367500305e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.6298145055770874e-09,5,5,"[-5.980092525482178, -5.899813175201416, -6.4698486328125, -5.557213306427002, -5.454874515533447, -0.015065810643136501]",0.9850471019744873
3,"['    @Test\n    public void testAdditionalItemsValidator() throws Exception {\n        runTestFile(""draft4/additionalItems.json"");\n    }\n']",draft;Exception;run;Validator;File;additional;Items;Items;json;Additional,8.381903171539307e-09;2.0954757928848267e-09;1.862645149230957e-09;5.820766091346741e-10;0.0;-4.656612873077393e-10;-1.3969838619232178e-09;-1.862645149230957e-09;-1.862645149230957e-09;-2.2118911147117615e-09,5,5,"[-5.938291072845459, -5.841797351837158, -6.416910648345947, -5.530899524688721, -5.447948455810547, -0.015561816282570362]",0.984558641910553
3,"['    @Test\n    public void testAdditionalPropertiesValidator() throws Exception {\n        runTestFile(""draft4/additionalProperties.json"");\n    }\n']",draft;Additional;run;additional;json;Properties;Exception;Properties;File;Validator,6.51925802230835e-09;1.3969838619232178e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.9103830456733704e-10;-6.984919309616089e-10;-6.05359673500061e-09,5,5,"[-5.962289333343506, -5.892014503479004, -6.447813034057617, -5.542977809906006, -5.449749946594238, -0.015247336588799953]",0.9848682880401611
3,"['    @Test\n    public void testAllOfValidator() throws Exception {\n        runTestFile(""draft4/allOf.json"");\n    }\n']",run;Exception;all;All;File;Validator;json;draft,4.190951585769653e-09;6.984919309616089e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.1059455573558807e-09;-1.1059455573558807e-09;-2.561137080192566e-09,5,5,"[-5.948283672332764, -5.8423285484313965, -6.425271511077881, -5.530951023101807, -5.455455303192139, -0.015486815012991428]",0.9846323728561401
3,"['    @Test\n    public void testAnyOFValidator() throws Exception {\n        runTestFile(""draft4/anyOf.json"");\n    }\n']",json;Exception;Any;OFValidator;any;File;run;draft,2.3283064365386963e-09;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-1.862645149230957e-09;-2.7939677238464355e-09,5,5,"[-5.925300121307373, -5.812819480895996, -6.387040615081787, -5.513472080230713, -5.43378210067749, -0.015867045149207115]",0.9842581748962402
3,"['    @Test\n    public void testDefaultValidator() throws Exception {\n        runTestFile(""draft4/default.json"");\n    }\n']",File;run;json;Validator;default;Exception;Default;draft,3.259629011154175e-09;9.313225746154785e-10;9.313225746154785e-10;-6.984919309616089e-10;-1.3969838619232178e-09;-1.6298145055770874e-09;-1.979060471057892e-09;-4.190951585769653e-09,5,5,"[-5.926810264587402, -5.8145856857299805, -6.392416000366211, -5.517195224761963, -5.423978328704834, -0.015876900404691696]",0.9842484593391418
3,"['    @Test\n    public void testDefinitionsValidator() throws Exception {\n        runTestFile(""draft4/definitions.json"");\n    }\n']",Exception;Definitions;json;Validator;run;draft;definitions;File,4.656612873077393e-10;1.1641532182693481e-10;1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.5133991837501526e-09,5,5,"[-5.929969310760498, -5.82708740234375, -6.406345844268799, -5.516340732574463, -5.44228982925415, -0.015729404985904694]",0.9843936562538147
3,"['    @Test\n    public void testDependenciesValidator() throws Exception {\n        runTestFile(""draft4/dependencies.json"");\n    }\n']",ependencies;json;run;Exception;Validator;dependencies;File;draft,2.0372681319713593e-09;1.2223608791828156e-09;4.656612873077393e-10;-1.1641532182693481e-10;-1.280568540096283e-09;-2.2118911147117615e-09;-3.259629011154175e-09;-4.6566128730773926e-09,5,5,"[-5.931155681610107, -5.831738471984863, -6.408664703369141, -5.536580562591553, -5.445493698120117, -0.015612518414855003]",0.984508752822876
3,"['    @Test\n    public void testEnumValidator() throws Exception {\n        runTestFile(""draft4/enum.json"");\n    }\n']",enum;json;Enum;Exception;File;run;draft;Validator,3.725290298461914e-09;1.3969838619232178e-09;1.1641532182693481e-09;4.656612873077393e-10;0.0;-4.656612873077393e-10;-9.313225746154785e-10;-2.3283064365386963e-09,5,5,"[-5.9334869384765625, -5.8203535079956055, -6.404784679412842, -5.519443988800049, -5.438819408416748, -0.015745364129543304]",0.984377920627594
3,"['    @Test\n    public void testItemsValidator() throws Exception {\n        runTestFile(""draft4/items.json"");\n    }\n']",items;Items;Validator;json;run;draft;Exception;File,3.026798367500305e-09;1.862645149230957e-09;6.984919309616089e-10;4.656612873077393e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-5.122274160385132e-09,5,5,"[-5.925851345062256, -5.807502746582031, -6.3928093910217285, -5.516494274139404, -5.434491157531738, -0.015856368467211723]",0.9842685461044312
3,"['    @Test\n    public void testMaximumValidator() throws Exception {\n        runTestFile(""draft4/maximum.json"");\n    }\n']",run;Exception;json;Validator;Maximum;maximum;draft;File,4.190951585769653e-09;1.1350493878126144e-09;6.984919309616089e-10;3.4924596548080444e-10;0.0;-4.656612873077393e-10;-9.313225746154785e-10;-4.423782229423523e-09,5,5,"[-5.931925296783447, -5.809916973114014, -6.3958048820495605, -5.51474666595459, -5.428546905517578, -0.015861177816987038]",0.9842639565467834
3,"['    @Test\n    public void testMaxItemsValidator() throws Exception {\n        runTestFile(""draft4/maxItems.json"");\n    }\n']",draft;run;File;json;Exception;Items;Max;max;Items;Validator,1.1175870895385742e-08;2.0954757928848267e-09;1.862645149230957e-09;2.3283064365386963e-10;1.1641532182693481e-10;-6.984919309616089e-10;-9.313225746154785e-10;-2.0372681319713593e-09;-2.7939677238464355e-09;-3.6088749766349792e-09,5,5,"[-5.9251532554626465, -5.815718173980713, -6.394241809844971, -5.516063213348389, -5.432404518127441, -0.015841934829950333]",0.984282910823822
3,"['    @Test\n    public void testMaxLengthValidator() throws Exception {\n        runTestFile(""draft4/maxLength.json"");\n    }\n']",File;json;draft;Length;Validator;Exception;max;Max;run;Length,3.725290298461914e-09;3.725290298461914e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;0.0;-2.3283064365386963e-10;-9.313225746154785e-10;-1.6298145055770874e-09;-2.3283064365386963e-09,5,5,"[-5.959445476531982, -5.8507866859436035, -6.429689407348633, -5.525333881378174, -5.459423542022705, -0.015431058593094349]",0.9846875071525574
3,"['    @Test\n    public void testMaxPropertiesValidator() throws Exception {\n        runTestFile(""draft4/maxProperties.json"");\n    }\n']",draft;Validator;Properties;json;run;max;File;Exception;Max;Properties,3.725290298461914e-09;3.6088749766349792e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.0477378964424133e-09;-2.3283064365386963e-10;-9.313225746154785e-10;-1.7462298274040222e-09;-2.3283064365386963e-09,5,5,"[-5.947716236114502, -5.866880893707275, -6.424550533294678, -5.521880149841309, -5.449161052703857, -0.015482354909181595]",0.9846370220184326
3,"['    @Test\n    public void testMinimumValidator() throws Exception {\n        runTestFile(""draft4/minimum.json"");\n    }\n']",json;run;Minimum;Exception;File;draft;minimum;Validator,5.820766091346741e-09;1.862645149230957e-09;0.0;-6.984919309616089e-10;-1.3969838619232178e-09;-3.259629011154175e-09;-3.4924596548080444e-09;-4.190951585769653e-09,5,5,"[-5.938767910003662, -5.820874214172363, -6.404332160949707, -5.52435302734375, -5.430624961853027, -0.015746889635920525]",0.9843765497207642
3,"['    @Test\n    public void testMinItemsValidator() throws Exception {\n        runTestFile(""draft4/minItems.json"");\n    }\n']",run;Items;Min;min;Items;json;Exception;File;Validator;draft,4.190951585769653e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.280568540096283e-09;-5.122274160385132e-09,5,5,"[-5.926669120788574, -5.8083648681640625, -6.399827003479004, -5.520423889160156, -5.437326431274414, -0.015811193734407425]",0.9843132495880127
3,"['    @Test\n    public void testMinLengthValidator() throws Exception {\n        runTestFile(""draft4/minLength.json"");\n    }\n']",Length;run;Exception;Min;min;draft;Length;Validator;json;File,4.190951585769653e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-9.313225746154785e-10;-1.6298145055770874e-09;-2.3283064365386963e-09;-2.7939677238464355e-09,5,5,"[-5.956702709197998, -5.8370537757873535, -6.425074100494385, -5.5281805992126465, -5.456707954406738, -0.015486345626413822]",0.9846329689025879
3,"['    @Test\n    public void testMinPropertiesValidator() throws Exception {\n        runTestFile(""draft4/minProperties.json"");\n    }\n']",draft;File;Properties;Properties;min;run;Exception;Min;json;Validator,3.725290298461914e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;2.3283064365386963e-10;0.0;-1.4551915228366852e-10;-4.656612873077393e-10;-1.9208528101444244e-09;-3.4924596548080444e-09,5,5,"[-5.947998046875, -5.854447841644287, -6.42371129989624, -5.530044078826904, -5.449002742767334, -0.015486580319702625]",0.9846328496932983
3,"['    @Test\n    public void testMultipleOfValidator() throws Exception {\n        runTestFile(""draft4/multipleOf.json"");\n    }\n']",json;multiple;run;Exception;draft;File;Multiple;Validator,5.122274160385132e-09;3.725290298461914e-09;-1.1641532182693481e-09;-1.3969838619232178e-09;-2.7939677238464355e-09;-3.725290298461914e-09;-5.587935447692871e-09;-5.587935447692871e-09,5,5,"[-5.948487281799316, -5.836157321929932, -6.420404434204102, -5.52632474899292, -5.439163684844971, -0.015602659434080124]",0.9845184087753296
3,"['    @Test\n    public void testNotValidator() throws Exception {\n        runTestFile(""draft4/not.json"");\n    }\n']",run;Validator;Exception;File;json;Not;draft,3.725290298461914e-09;1.6298145055770874e-09;1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;-3.4924596548080444e-10;-7.450580596923828e-09,5,5,"[-5.944009304046631, -5.830287456512451, -6.4116950035095215, -5.520580291748047, -5.438538074493408, -0.01567237079143524]",0.9844496846199036
3,"['    @Test\n    public void testOneOfValidator() throws Exception {\n        runTestFile(""draft4/oneOf.json"");\n    }\n']",one;run;File;Exception;json;draft;Validator;One,2.9685907065868378e-09;2.3283064365386963e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;-9.313225746154785e-10;-3.259629011154175e-09,5,5,"[-5.945375442504883, -5.854957103729248, -6.414796829223633, -5.51913595199585, -5.4271674156188965, -0.015647374093532562]",0.9844744205474854
3,"['    @Test\n    public void testPatternValidator() throws Exception {\n        runTestFile(""draft4/pattern.json"");\n    }\n']",Validator;run;draft;Exception;Pattern;pattern;json;File,4.423782229423523e-09;3.259629011154175e-09;2.0954757928848267e-09;1.1641532182693481e-10;0.0;0.0;-1.862645149230957e-09;-6.984919309616089e-09,5,5,"[-5.931606769561768, -5.795938014984131, -6.398108959197998, -5.517366886138916, -5.439815044403076, -0.01584017649292946]",0.984284520149231
3,"['    @Test\n    public void testPatternPropertiesValidator() throws Exception {\n        runTestFile(""draft4/patternProperties.json"");\n    }\n']",draft;run;Pattern;json;Properties;Exception;File;Properties;pattern;Validator,7.450580596923828e-09;5.587935447692871e-09;1.6298145055770874e-09;4.656612873077393e-10;0.0;-6.402842700481415e-10;-6.984919309616089e-10;-1.5133991837501526e-09;-1.5133991837501526e-09;-4.889443516731262e-09,5,5,"[-5.943330764770508, -5.8481340408325195, -6.4244818687438965, -5.525071620941162, -5.457131385803223, -0.015500900335609913]",0.9846187233924866
3,"['    @Test\n    public void testPropertiesValidator() throws Exception {\n        runTestFile(""draft4/properties.json"");\n    }\n']",draft;properties;json;Exception;Validator;File;Properties;run,6.51925802230835e-09;4.656612873077393e-10;-1.1641532182693481e-10;-4.0745362639427185e-10;-9.89530235528946e-10;-1.1641532182693481e-09;-1.9208528101444244e-09;-2.3283064365386963e-09,5,5,"[-5.914860248565674, -5.805993556976318, -6.385567665100098, -5.5067057609558105, -5.434420108795166, -0.015943894162774086]",0.9841825366020203
3,"['    @Test\n    public void testRefValidator() throws Exception {\n        runTestFile(""draft4/ref.json"");\n    }\n']",json;Validator;ref;Ref;Exception;draft;File;run,3.026798367500305e-09;2.3283064365386963e-09;1.5133991837501526e-09;-9.313225746154785e-10;-1.280568540096283e-09;-1.862645149230957e-09;-2.3283064365386963e-09;-5.587935447692871e-09,5,5,"[-5.925826072692871, -5.800602912902832, -6.388899326324463, -5.5095672607421875, -5.42735481262207, -0.015944480895996094]",0.9841819405555725
3,"['    @Test\n    public void testRefRemoteValidator() throws Exception {\n        runTestFile(""draft4/refRemote.json"");\n    }\n']",File;Remote;draft;Validator;json;Remote;Exception;ref;Ref;run,4.190951585769653e-09;3.725290298461914e-09;2.7939677238464355e-09;1.862645149230957e-09;1.6298145055770874e-09;4.656612873077393e-10;1.1641532182693481e-10;-4.656612873077393e-10;-2.3283064365386963e-09;-3.725290298461914e-09,5,5,"[-5.943490982055664, -5.830469131469727, -6.413227081298828, -5.525937557220459, -5.438301086425781, -0.015649955719709396]",0.9844717383384705
3,"['    @Test\n    public void testRefIdReference() throws Exception {\n        runTestFile(""draft4/idRef.json"");\n    }\n']",json;File;run;id;Ref;Ref;Exception;Reference;draft,5.587935447692871e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.1059455573558807e-09;6.984919309616089e-10;-2.6775524020195007e-09;-1.210719347000122e-08,5,5,"[-5.919131278991699, -5.80086612701416, -6.37911319732666, -5.504039287567139, -5.4176740646362305, -0.01604478806257248]",0.9840831160545349
3,"['    @Test\n    public void testRelativeRefRemoteValidator() throws Exception {\n        runTestFile(""draft4/relativeRefRemote.json"");\n    }\n']",Validator;Remote;json;Exception;Ref;Remote;Ref;File;relative;Relative,2.6775524020195007e-09;1.6298145055770874e-09;1.3969838619232178e-09;6.984919309616089e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-7.8580342233181e-10;-1.862645149230957e-09;-1.862645149230957e-09;-2.0954757928848267e-09,5,5,"[-5.951897621154785, -5.851092338562012, -6.425585746765137, -5.527328014373779, -5.449613094329834, -0.015491275116801262]",0.9846282005310059
3,"['    @Test\n    public void testRequiredValidator() throws Exception {\n        runTestFile(""draft4/required.json"");\n    }\n']",run;File;draft;Exception;Required;json;Validator;required,8.381903171539307e-09;5.587935447692871e-09;1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;-4.656612873077393e-10;-7.450580596923828e-09;-7.450580596923828e-09,5,5,"[-5.942415237426758, -5.839552402496338, -6.409722328186035, -5.517299652099609, -5.446099758148193, -0.01563270390033722]",0.9844889640808105
3,"['    @Test\n    public void testTypeValidator() throws Exception {\n        runTestFile(""draft4/type.json"");\n    }\n']",draft;run;File;Exception;Type;type;json;Validator,1.955777406692505e-08;0.0;-1.1641532182693481e-09;-1.6298145055770874e-09;-2.3283064365386963e-09;-2.3283064365386963e-09;-2.3283064365386963e-09;-3.259629011154175e-09,5,5,"[-5.932297229766846, -5.830872535705566, -6.398773193359375, -5.517737865447998, -5.422490119934082, -0.015806734561920166]",0.984317421913147
3,"['    @Test\n    public void testUnionTypeValidator() throws Exception {\n        runTestFile(""draft4/union_type.json"");\n    }\n']",union;Exception;type;Type;File;json;run;Validator;Union;draft,2.7939677238464355e-09;4.656612873077393e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.3969838619232178e-09;-1.3969838619232178e-09;-1.862645149230957e-09;-2.7939677238464355e-09;-3.725290298461914e-09;-4.190951585769653e-09,5,5,"[-5.939365863800049, -5.83950138092041, -6.406417369842529, -5.516994476318359, -5.434937953948975, -0.015696898102760315]",0.9844256639480591
3,"['    @Test\n    public void testUniqueItemsValidator() throws Exception {\n        runTestFile(""draft4/uniqueItems.json"");\n    }\n']",run;unique;Unique;draft;Exception;json;Items;Validator;Items;File,6.51925802230835e-09;2.561137080192566e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;4.656612873077393e-10;-8.149072527885437e-10;-1.0477378964424133e-09;-1.862645149230957e-09,5,5,"[-5.914111614227295, -5.793504238128662, -6.377070903778076, -5.506612300872803, -5.427941799163818, -0.016028130427002907]",0.9840996265411377
3,"['    @Test\n    public void testEnumObject() throws Exception {\n        runTestFile(""draft4/enumObject.json"");\n    }\n']",Object;run;enum;Object;json;Exception;File;Enum;draft,2.3283064365386963e-09;1.862645149230957e-09;0.0;-6.984919309616089e-10;-8.149072527885437e-10;-1.1641532182693481e-09;-2.7939677238464355e-09;-3.026798367500305e-09;-8.381903171539307e-09,5,5,"[-5.932246208190918, -5.822457790374756, -6.400570869445801, -5.508954048156738, -5.434023380279541, -0.015813658013939857]",0.9843107461929321
3,"['    @Test\n    public void testIdSchemaWithUrl() throws Exception {\n        runTestFile(""draft4/property.json"");\n    }\n']",File;Exception;run;json;property;Url;Schema;draft,0.0;-6.984919309616089e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.6298145055770874e-09;-2.0954757928848267e-09;-5.587935447692871e-09;-5.704350769519806e-09,5,5,"[-5.958744049072266, -5.875704765319824, -6.463231086730957, -5.548973083496094, -5.46973180770874, -0.015167967416346073]",0.9849464893341064
3,"['    @Test\n    public void testSchemaFromClasspath() throws Exception {\n        runTestFile(""draft4/classpath/schema.json"");\n    }\n']",run;Classpath;Schema;schema;Exception;classpath;From;draft;json;File,2.7939677238464355e-09;1.6298145055770874e-09;6.402842700481415e-10;2.9103830456733704e-10;-5.820766091346741e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.862645149230957e-09;-1.862645149230957e-09;-4.6566128730773926e-09,5,5,"[-5.945362091064453, -5.866837501525879, -6.423098087310791, -5.5231122970581055, -5.451809406280518, -0.015474372543394566]",0.9846446514129639
3,"['    @Test\n    public void testUUIDValidator() throws Exception {\n        runTestFile(""draft4/uuid.json"");\n    }\n']",File;draft;run;uuid;Exception;json;UIDValidator,6.51925802230835e-09;3.725290298461914e-09;2.561137080192566e-09;2.2118911147117615e-09;-2.3283064365386963e-10;-2.3283064365386963e-10;-8.149072527885437e-09,5,5,"[-5.933656215667725, -5.815815448760986, -6.402284145355225, -5.528324604034424, -5.448072910308838, -0.015686336904764175]",0.9844361543655396
3,"['    @Test\n    public void testFailFast_AllErrors() throws IOException {\n        try {\n            validateFailingFastSchemaFor(""product.schema.json"", ""product-all-errors-data.json"");\n            fail(""Exception must be thrown"");\n        } catch (JsonSchemaException e) {\n            final Set<ValidationMessage> messages = e.getValidationMessages();\n            assertEquals(1, messages.size());\n        }\n    }\n']",errors;Errors;fail;product;validate;json;All;ailing;data;For,1.862645149230957e-09;1.6007106751203537e-09;1.1641532182693481e-09;6.984919309616089e-10;5.529727786779404e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.891380310058594, -5.747929573059082, -6.360008716583252, -5.432794094085693, -5.51841926574707, -0.01619528792798519]",0.9839350581169128
3,"['    @Test\n    public void testFailFast_OneErrors() throws IOException {\n        try {\n            validateFailingFastSchemaFor(""product.schema.json"", ""product-one-error-data.json"");\n            fail(""Exception must be thrown"");\n        } catch (JsonSchemaException e) {\n            final Set<ValidationMessage> messages = e.getValidationMessages();\n            assertEquals(1, messages.size());\n        }\n    }\n']",error;fail;Fail;ailing;thrown;schema;Messages;Message;messages;final,2.561137080192566e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;7.566995918750763e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.900762557983398, -5.736827850341797, -6.355566024780273, -5.438089370727539, -5.518665790557861, -0.016188720241189003]",0.9839416146278381
3,"['    @Test\n    public void testFailFast_TwoErrors() throws IOException {\n        try {\n            validateFailingFastSchemaFor(""product.schema.json"", ""product-two-errors-data.json"");\n            fail(""Exception must be thrown"");\n        } catch (JsonSchemaException e) {\n            final Set<ValidationMessage> messages = e.getValidationMessages();\n            assertEquals(1, messages.size());\n        }\n    }\n']",json;Two;Fast;product;Validation;son;Exception;fail;product;Validation,1.3969838619232178e-09;1.2223608791828156e-09;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10,5,5,"[-5.892093181610107, -5.740543365478516, -6.348158836364746, -5.427907943725586, -5.512927532196045, -0.016282550990581512]",0.983849287033081
3,"['    @Test\n    public void testFailFast_NoErrors() throws IOException {\n        try {\n            final Set<ValidationMessage> messages = validateFailingFastSchemaFor(""product.schema.json"", ""product-no-errors-data.json"");\n            assertTrue(messages.isEmpty());\n        } catch (JsonSchemaException e) {\n            fail(""Must not get an errors"");\n        }\n    }\n']",product;Must;Errors;errors;messages;ailing;Validation;IOException;product;Schema,2.0954757928848267e-09;1.6298145055770874e-09;1.0477378964424133e-09;8.149072527885437e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.919646739959717, -5.77106237411499, -6.383360862731934, -5.462811470031738, -5.522723197937012, -0.015853552147746086]",0.9842714667320251
3,['    @AfterEach\n    public void cleanup() {\n        reset();\n    }\n'],Each;cleanup;reset;After,0.0;-4.656612873077393e-10;-4.656612873077393e-10;-2.0954757928848267e-09,5,5,"[-5.873493671417236, -5.680209159851074, -6.31011438369751, -5.4679341316223145, -5.371734142303467, -0.01705421693623066]",0.9830902814865112
3,"['    @Test\n    public void shouldWalkAnyOfProperties() {\n        walk(null, false);\n    }\n']",should;Walk;false;Properties;walk;null;Any,1.862645149230957e-09;9.313225746154785e-10;5.820766091346741e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-1.0477378964424133e-09,5,5,"[-5.895153999328613, -5.754938125610352, -6.369200229644775, -5.4900360107421875, -5.423128128051758, -0.016306594014167786]",0.9838256239891052
3,"['    @Test\n    public void shouldWalkAnyOfPropertiesWithWithPayloadAndValidation() throws Exception {\n        JsonNode data = getJsonNodeFromStreamContent(Issue451Test.class.getResourceAsStream(\n                ""/data/issue451.json""));\n        walk(data,true);\n    }\n']",Issue;son;Node;walk;data;Resource;issue;From;Stream;json,5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.929333209991455, -5.841867923736572, -6.433228015899658, -5.466012477874756, -5.504046440124512, -0.015590101480484009]",0.9845308065414429
3,"['    @Test\n    public void shouldWalkAnyOfPropertiesWithWithPayload() throws Exception {\n        JsonNode data = getJsonNodeFromStreamContent(Issue451Test.class.getResourceAsStream(\n                ""/data/issue451.json""));\n        walk(data, false);\n    }\n']",From;Content;Node;get;Issue;As;json;Node;issue;get,1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.930652141571045, -5.844394207000732, -6.423140048980713, -5.461444854736328, -5.491295337677002, -0.01566849835216999]",0.9844537377357483
3,"['    @Test\n    public void shouldWorkT2() throws Exception {\n        String schemaPath = ""/schema/issue456-v7.json"";\n        String dataPath = ""/data/issue456-T2.json"";\n        String dataT3Path = ""/data/issue456-T3.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(0, errors.size());\n    }\n']",schema;schema;data;Class;Path;Class;data;issue;data;Set,4.656612873077393e-10;3.7834979593753815e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.876946926116943, -5.7381911277771, -6.334539890289307, -5.378957748413086, -5.498978137969971, -0.016639266163110733]",0.9834985136985779
3,"['    @Test\n    public void shouldWorkT3() throws Exception {\n        String schemaPath = ""/schema/issue456-v7.json"";\n        String dataPath = ""/data/issue456-T3.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(0, errors.size());\n    }\n']",schema;Assertions;should;Resource;Class;Node;son;size;Stream;node,6.111804395914078e-10;3.5652192309498787e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.871375560760498, -5.732499122619629, -6.327538013458252, -5.376082897186279, -5.487040042877197, -0.01674981787800789]",0.9833895564079285
3,['    @BeforeEach\n    public void setup() {\n        setupSchema();\n    }\n'],Before;Schema;setup;setup;Each,1.862645149230957e-09;6.984919309616089e-10;4.656612873077393e-10;-2.9103830456733704e-10;-2.7939677238464355e-09,5,5,"[-5.8688154220581055, -5.676375865936279, -6.307574272155762, -5.467668056488037, -5.371695518493652, -0.01708703115582466]",0.9830581545829773
3,['    @AfterEach\n    public void cleanup() {\n       CollectorContext.getInstance().reset();\n    }\n'],After;Instance;Context;cleanup;get;reset;Collector;Each,1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-3.2014213502407074e-10;-1.0477378964424133e-09;-1.1641532182693481e-09,5,5,"[-5.868134021759033, -5.67374324798584, -6.299122333526611, -5.457461357116699, -5.375412940979004, -0.0171405840665102]",0.9830055832862854
3,"['    @Test\n    public void testWalk() throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        ValidationResult result = jsonSchema.walk(\n                objectMapper.readTree(getClass().getClassLoader().getResourceAsStream(""data/walk-data.json"")), false);\n        JsonNode collectedNode = (JsonNode) result.getCollectorContext().get(SAMPLE_WALK_COLLECTOR_TYPE);\n        assertEquals(collectedNode, (objectMapper.readTree(""{"" +\n                ""    \\""PROPERTY1\\"": \\""sample1\\"",""\n                + ""    \\""PROPERTY2\\"": \\""sample2\\"",""\n                + ""    \\""property3\\"": {""\n                + ""        \\""street_address\\"":\\""test-address\\"",""\n                + ""        \\""phone_number\\"": {""\n                + ""            \\""country-code\\"": \\""091\\"",""\n                + ""            \\""number\\"": \\""123456789\\""""\n                + ""          }""\n                + ""     }""\n                + ""}"")));\n    }\n']",street;IOException;walk;number;Object;json;Walk;apper;apper;Object,5.238689482212067e-10;5.093170329928398e-10;4.220055416226387e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.8518147468566895, -5.692165374755859, -6.286626815795898, -5.293915748596191, -5.504972457885742, -0.017346102744340897]",0.982803463935852
3,"['    @Test\n    public void testWalkWithDifferentListeners() throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        // This instance of schema contains all listeners.\n        ValidationResult result = jsonSchema.walk(\n                objectMapper.readTree(getClass().getClassLoader().getResourceAsStream(""data/walk-data.json"")), false);\n        JsonNode collectedNode = (JsonNode) result.getCollectorContext().get(SAMPLE_WALK_COLLECTOR_TYPE);\n        assertEquals(collectedNode, (objectMapper.readTree(""{"" +\n                ""    \\""PROPERTY1\\"": \\""sample1\\"",""\n                + ""    \\""PROPERTY2\\"": \\""sample2\\"",""\n                + ""    \\""property3\\"": {""\n                + ""        \\""street_address\\"":\\""test-address\\"",""\n                + ""        \\""phone_number\\"": {""\n                + ""            \\""country-code\\"": \\""091\\"",""\n                + ""            \\""number\\"": \\""123456789\\""""\n                + ""          }""\n                + ""     }""\n                + ""}"")));\n        // This instance of schema contains one listener removed.\n        CollectorContext collectorContext = result.getCollectorContext();\n        collectorContext.reset();\n        result = jsonSchema1.walk(\n                objectMapper.readTree(getClass().getClassLoader().getResourceAsStream(""data/walk-data.json"")), false);\n        collectedNode = (JsonNode) result.getCollectorContext().get(SAMPLE_WALK_COLLECTOR_TYPE);\n        assertEquals(collectedNode, (objectMapper.readTree(""{""\n                + ""    \\""property3\\"": {""\n                + ""        \\""street_address\\"":\\""test-address\\"",""\n                + ""        \\""phone_number\\"": {""\n                + ""            \\""country-code\\"": \\""091\\"",""\n                + ""            \\""number\\"": \\""123456789\\""""\n                + ""          }""\n                + ""     }""\n                + ""}"")));\n    }\n']",number;street;collected;Listeners;Stream;sample;instance;This;address;COLLECTOR,1.469743438065052e-09;1.3969838619232178e-09;1.1641532182693481e-09;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.862955093383789, -5.6987080574035645, -6.313925743103027, -5.313131809234619, -5.530332088470459, -0.017039449885487556]",0.9831047654151917
3,"['    @Test\n    public void shouldFailV201909() throws Exception {\n        String schemaPath = ""/schema/issue313-2019-09.json"";\n        String dataPath = ""/data/issue313.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV201909(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(2, errors.size());\n    }\n']",schema;issue;Stream;Input;Assertions;Schema;json;Validation;Schema;Input,4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;2.255546860396862e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.868363857269287, -5.725600719451904, -6.314875602722168, -5.373444080352783, -5.480289936065674, -0.016845356673002243]",0.9832956194877625
3,"['    @Test\n    public void shouldFailV7() throws Exception {\n        String schemaPath = ""/schema/issue313-v7.json"";\n        String dataPath = ""/data/issue313.json"";\n        InputStream schemaInputStream = getClass().getResourceAsStream(schemaPath);\n        JsonSchema schema = getJsonSchemaFromStreamContentV7(schemaInputStream);\n        InputStream dataInputStream = getClass().getResourceAsStream(dataPath);\n        JsonNode node = getJsonNodeFromStreamContent(dataInputStream);\n        Set<ValidationMessage> errors = schema.validate(node);\n        Assertions.assertEquals(2, errors.size());\n    }\n']",issue;should;Fail;get;Resource;schema;Input;Schema;Schema;Node,9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;2.764863893389702e-10;2.764863893389702e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.872189521789551, -5.727845191955566, -6.3198699951171875, -5.376526832580566, -5.485446453094482, -0.01678146980702877]",0.9833585619926453
3,"['    @Test\n    public void testNullableOneOf() throws Exception {\n        runTestFile(""data/issue428.json"");\n    }\n']",json;Exception;run;issue;One;File;data;Nullable,7.916241884231567e-09;1.7462298274040222e-09;9.313225746154785e-10;9.313225746154785e-10;-4.656612873077393e-10;-1.862645149230957e-09;-1.862645149230957e-09;-1.979060471057892e-09,5,5,"[-5.930907249450684, -5.814004421234131, -6.398692607879639, -5.518913745880127, -5.433716297149658, -0.015806617215275764]",0.9843176603317261
3,"['    @Test\n    public void positiveNumber() throws IOException {\n        String[][] values = augmentWithQuotes(new String[][]{\n//            maximum,                       value\n                {""1000.1"", ""1000""},\n                {""1000"", ""1E3""},\n        });\n\n        expectNoMessages(values, NUMBER);\n\n    }\n']",value;IOException;Quotes;Messages;Number;augment;expect;No;new;values,7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;-2.9103830456733704e-11;-5.820766091346741e-11;-1.7462298274040222e-10,5,5,"[-5.866905212402344, -5.702017784118652, -6.275263786315918, -5.353287220001221, -5.444025039672852, -0.017255885526537895]",0.9828922748565674
3,"['    @Test\n    public void negativeNumber() throws IOException {\n        String[][] values = augmentWithQuotes(new String[][]{\n//            maximum,                           value\n//            These values overflow 64bit IEEE 754\n                {""1.7976931348623157e+308"", ""1.7976931348623159e+308""},\n                {""1.7976931348623156e+308"", ""1.7976931348623157e+308""},\n\n//            Here, threshold is parsed as integral number, yet payload is \'number\'\n                {""1000"", ""1000.1""},\n\n//          See a {@link #doubleValueCoarsing() doubleValueCoarsing} test notes below\n//            {""1.7976931348623157e+308"",         ""1.7976931348623158e+308""},\n        });\n\n        expectSomeMessages(values, NUMBER);\n\n        expectSomeMessages(values, NUMBER, mapper, bigDecimalMapper);\n\n        expectSomeMessages(values, NUMBER, bigDecimalMapper, bigDecimalMapper);\n    }\n']",threshold;payload;Number;Quotes;IOException;below;augment;yet;parsed;Some,9.313225746154785e-10;5.384208634495735e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.673470251262188e-10;1.3096723705530167e-10,5,5,"[-5.8368988037109375, -5.657318592071533, -6.255715847015381, -5.293196201324463, -5.485118389129639, -0.01765793189406395]",0.9824970364570618
3,"['    @Test\n    public void positiveInteger() throws IOException {\n        String[][] values = augmentWithQuotes(new String[][]{\n//            maximum,                       value\n                {""9223372036854775807"", ""9223372036854775807""},\n                {""9223372036854775808"", ""9223372036854775808""},\n\n//                testIntegerTypeWithFloatMaxPositive\n                {""37.7"", ""37""},\n\n//                testMaximumDoubleValue\n                {""1E39"", ""1000""},\n        });\n\n        expectNoMessages(values, INTEGER);\n\n        expectNoMessages(values, INTEGER, bigIntegerMapper);\n    }\n']",Max;augment;Float;Maximum;INTEGER;values;new;IOException;expect;No,2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.3096723705530167e-10;6.912159733474255e-11;5.820766091346741e-11;5.820766091346741e-11;3.637978807091713e-11;2.9103830456733704e-11,5,5,"[-5.837738990783691, -5.667330741882324, -6.239771366119385, -5.277678489685059, -5.443228244781494, -0.017912056297063828]",0.9822474122047424
3,"['    @Test\n    public void negativeInteger() throws IOException {\n        String[][] values = augmentWithQuotes(new String[][]{\n//            maximum,                value\n                {""9223372036854775800"", ""9223372036854775855""},\n                {""9223372036854775807"", ""9223372036854775808""},\n                {""9223372036854775807"", new BigDecimal(String.valueOf(Double.MAX_VALUE)).add(BigDecimal.ONE).toString()},\n                {""9223372036854775806"", new BigDecimal(String.valueOf(Double.MAX_VALUE)).add(BigDecimal.ONE).toString()},\n                {""9223372036854776000"", ""9223372036854776001""},\n                {""1000"", ""1E39""},\n                {""37.7"", ""38""},\n        });\n\n        expectSomeMessages(values, INTEGER);\n\n        expectSomeMessages(values, INTEGER, mapper, bigIntegerMapper);\n    }\n']",VALUE;INTEGER;expect;Messages;Big;add;Double;ONE;Some;values,1.1641532182693481e-09;3.2741809263825417e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.8336076736450195, -5.657276630401611, -6.240690231323242, -5.269744873046875, -5.457375526428223, -0.01793758198618889]",0.982222318649292
3,"['    @Test\n    public void positiveExclusiveInteger() throws IOException {\n        String[][] values = augmentWithQuotes(new String[][]{\n//            maximum,                       value\n                {""9223372036854775000"", ""9223372036854774988""},\n                {""20"", ""10""},\n\n//                threshold outside long range\n                {""9223372036854775809"", ""9223372036854775806""},\n\n//                both threshold and value are outside long range\n                {""9223372036854775809"", ""9223372036854775808""},\n        });\n\n        expectNoMessages(values, EXCLUSIVE_INTEGER);\n\n        expectNoMessages(values, EXCLUSIVE_INTEGER, bigIntegerMapper);\n    }\n']",long;both;outside;IOException;and;positive;Messages;EXCLUSIVE;augment;value,1.1059455573558807e-09;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.8573737144470215, -5.676763534545898, -6.281501293182373, -5.322256088256836, -5.494503498077393, -0.017293613404035568]",0.9828550815582275
3,"['    @Test\n    public void negativeExclusiveInteger() throws IOException {\n        String[][] values = augmentWithQuotes(new String[][]{\n//            maximum,                       value\n                {""10"", ""20""},\n\n//                value outside long range\n                {""9223372036854775806"", ""9223372036854775808""},\n\n//                both threshold and value are outside long range\n                {""9223372036854775808"", ""9223372036854775809""},\n        });\n\n        expectSomeMessages(values, EXCLUSIVE_INTEGER);\n\n        expectSomeMessages(values, EXCLUSIVE_INTEGER, mapper, bigIntegerMapper);\n    }\n']",threshold;IOException;INTEGER;range;big;Some;both;values;Messages;long,8.440110832452774e-10;7.566995918750763e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;3.2014213502407074e-10;3.2014213502407074e-10;1.4551915228366852e-10;1.382431946694851e-10;1.1641532182693481e-10,5,5,"[-5.8590569496154785, -5.674086570739746, -6.276607036590576, -5.324055194854736, -5.486915111541748, -0.017330287024378777]",0.9828189015388489
3,"['    @Test\n    public void negativeDoubleOverflowTest() throws IOException {\n        String[][] values = new String[][]{\n//            maximum,                           value\n//                both of these get parsed into double (with a precision loss) as  1.7976931348623157E+308\n                {""1.79769313486231571E+308"", ""1.79769313486231572e+308""},\n//                while underflow in not captures in previous case (unquoted number is parsed as double)\n//                it is captured if value is passed as string, which is correctly parsed by BidDecimal\n//                thus effective comparison is between\n//                maximum 1.7976931348623157E+308  and\n//                value   1.79769313486231572e+308\n//                {""1.79769313486231571E+308"",        ""\\""1.79769313486231572e+308\\""""},\n                {""1.7976931348623157E+309"", ""1.7976931348623157e+309""},\n                {""1.7976931348623157E+309"", ""\\""1.7976931348623157e+309\\""""},\n                {""1.000000000000000000000001E+400"", ""1.000000000000000000000001E+401""},\n                {""1.000000000000000000000001E+400"", ""\\""1.000000000000000000000001E+401\\""""},\n                {""1.000000000000000000000001E+400"", ""1.000000000000000000000002E+400""},\n                {""1.000000000000000000000001E+400"", ""\\""1.000000000000000000000002E+400\\""""},\n                {""1.000000000000000000000001E+400"", ""1.0000000000000000000000011E+400""},\n                {""1.000000000000000000000001E+400"", ""\\""1.0000000000000000000000011E+400\\""""},\n        };\n\n        for (String[] aTestCycle : values) {\n            String maximum = aTestCycle[0];\n            String value = aTestCycle[1];\n            String schema = format(NUMBER, maximum);\n            SchemaValidatorsConfig config = new SchemaValidatorsConfig();\n            config.setTypeLoose(true);\n            // Schema and document parsed with just double\n            JsonSchema v = factory.getSchema(mapper.readTree(schema), config);\n            JsonNode doc = mapper.readTree(value);\n            Set<ValidationMessage> messages = v.validate(doc);\n            assertTrue(messages.isEmpty(), format(""Maximum %s and value %s are interpreted as Infinity, thus no schema violation should be reported"", maximum, value));\n\n            // document parsed with BigDecimal\n\n            doc = bigDecimalMapper.readTree(value);\n            Set<ValidationMessage> messages2 = v.validate(doc);\n            if (Double.valueOf(maximum).equals(Double.POSITIVE_INFINITY)) {\n                assertTrue(messages2.isEmpty(), format(""Maximum %s and value %s are equal, thus no schema violation should be reported"", maximum, value));\n            } else {\n                assertFalse(messages2.isEmpty(), format(""Maximum %s is smaller than value %s ,  should be validation error reported"", maximum, value));\n            }\n\n\n            // schema and document parsed with BigDecimal\n            v = factory.getSchema(bigDecimalMapper.readTree(schema), config);\n            Set<ValidationMessage> messages3 = v.validate(doc);\n            //when the schema and value are both using BigDecimal, the value should be parsed in same mechanism.\n            if (maximum.toLowerCase().equals(value.toLowerCase()) || Double.valueOf(maximum).equals(Double.POSITIVE_INFINITY)) {\n                assertTrue(messages3.isEmpty(), format(""Maximum %s and value %s are equal, thus no schema violation should be reported"", maximum, value));\n            } else {\n                assertFalse(messages3.isEmpty(), format(""Maximum %s is smaller than value %s ,  should be validation error reported"", maximum, value));\n            }\n        }\n    }\n']",precision;negative;with;previous;captured;while;correctly;comparison;in;unquoted,1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.850796222686768, -5.663809776306152, -6.289549350738525, -5.328258037567139, -5.52323055267334, -0.0171949565410614]",0.9829520583152771
3,"['    @Test\n    public void doubleValueCoarsing() throws IOException {\n        String schema = ""{ \\""$schema\\"":\\""http://json-schema.org/draft-04/schema#\\"", \\""type\\"": \\""number\\"", \\""maximum\\"": 1.7976931348623157e+308 }"";\n        String content = ""1.7976931348623158e+308"";\n\n        JsonNode doc = mapper.readTree(content);\n        JsonSchema v = factory.getSchema(mapper.readTree(schema));\n\n        Set<ValidationMessage> messages = v.validate(doc);\n        assertTrue(messages.isEmpty(), ""Validation should succeed as by default double values are used by mapper"");\n\n        doc = bigDecimalMapper.readTree(content);\n        messages = v.validate(doc);\n        // ""1.7976931348623158e+308"" == ""1.7976931348623157e+308"" == Double.MAX_VALUE\n        // new BigDecimal(""1.7976931348623158e+308"").compareTo(new BigDecimal(""1.7976931348623157e+308"")) > 0\n        assertFalse(messages.isEmpty(), ""Validation should not succeed because content is using bigDecimalMapper, and bigger than the maximum"");\n\n        /*\n         * Note: technically this is where 1.7976931348623158e+308 rounding to 1.7976931348623157e+308 could be spotted,\n         *       yet it requires a dedicated case of comparison BigDecimal to BigDecimal. Since values above\n         *       1.7976931348623158e+308 are parsed as Infinity anyways (jackson uses double as primary type with later\n         *       ""upcasting"" to BigDecimal, if property is set) adding a dedicated code block just for this one case\n         *       seems infeasible.\n         */\n        v = factory.getSchema(bigDecimalMapper.readTree(schema));\n        messages = v.validate(doc);\n        assertFalse(messages.isEmpty(), ""Validation should succeed as by default double values are used by mapper"");\n    }\n']",because;double;maximum;Value;big;values;content;of;maximum;spotted,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.859612464904785, -5.688828468322754, -6.360828876495361, -5.397774696350098, -5.591736316680908, -0.016351981088519096]",0.9837809801101685
3,"['    @Test\n    public void doubleValueCoarsingExceedRange() throws IOException {\n        String schema = ""{ \\""$schema\\"":\\""http://json-schema.org/draft-04/schema#\\"", \\""type\\"": \\""number\\"", \\""maximum\\"": 1.7976931348623159e+308 }"";\n        String content = ""1.7976931348623160e+308"";\n\n        JsonNode doc = mapper.readTree(content);\n        JsonSchema v = factory.getSchema(mapper.readTree(schema));\n\n        Set<ValidationMessage> messages = v.validate(doc);\n        assertTrue(messages.isEmpty(), ""Validation should succeed as by default double values are used by mapper"");\n\n        doc = bigDecimalMapper.readTree(content);\n        messages = v.validate(doc);\n        // ""1.7976931348623158e+308"" == ""1.7976931348623157e+308"" == Double.MAX_VALUE\n        // new BigDecimal(""1.7976931348623158e+308"").compareTo(new BigDecimal(""1.7976931348623157e+308"")) > 0\n        assertTrue(messages.isEmpty(), ""Validation should success because the bug of bigDecimalMapper, it will treat 1.7976931348623159e+308 as INFINITY"");\n\n        /*\n         * Note: technically this is where 1.7976931348623158e+308 rounding to 1.7976931348623157e+308 could be spotted,\n         *       yet it requires a dedicated case of comparison BigDecimal to BigDecimal. Since values above\n         *       1.7976931348623158e+308 are parsed as Infinity anyways (jackson uses double as primary type with later\n         *       ""upcasting"" to BigDecimal, if property is set) adding a dedicated code block just for this one case\n         *       seems infeasible.\n         */\n        v = factory.getSchema(bigDecimalMapper.readTree(schema));\n        messages = v.validate(doc);\n        assertTrue(messages.isEmpty(), ""Validation should success because the bug of bigDecimalMapper, it will treat 1.7976931348623159e+308 as INFINITY"");\n    }\n']",technically;to;the;as;because;of;maximum;Tree;org;Decimal,3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.964508555829525e-10,5,5,"[-5.854568958282471, -5.676605701446533, -6.34078311920166, -5.38247013092041, -5.58167028427124, -0.016553793102502823]",0.9835824966430664
3,"['    @BeforeEach\n    public void setUp() {\n        mapper = new ObjectMapper();\n        // due to a jackson bug, a float number which is larger than Double.POSITIVE_INFINITY cannot be convert to BigDecimal correctly\n        // https://github.com/FasterXML/jackson-databind/issues/1770\n        // https://github.com/FasterXML/jackson-databind/issues/2087\n        bigDecimalMapper = new ObjectMapper().enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n        bigIntegerMapper = new ObjectMapper().enable(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS);\n\n    }\n']",Before;Double;FL;jackson;to;Big;to;INTS;than;com,2.3283064365386963e-09;2.0954757928848267e-09;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.3655745685100555e-10,5,5,"[-5.884106159210205, -5.712823390960693, -6.35447883605957, -5.424055576324463, -5.51580810546875, -0.016391150653362274]",0.9837424755096436
3,"['    @Test\n    public void positiveNumber() throws IOException {\n        String[][] values = augmentWithQuotes(new String[][]{\n//            minimum,                       value\n                {""1000"", ""1000.1""},\n        });\n\n        expectNoMessages(values, NUMBER, mapper);\n    }\n']",Number;Quotes;NUMBER;values;Messages;augment;value;positive;No;IOException,9.313225746154785e-10;4.656612873077393e-10;3.7834979593753815e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;2.9103830456733704e-11;-1.1641532182693481e-10;-1.4551915228366852e-10;-1.7462298274040222e-10,5,5,"[-5.8726372718811035, -5.712888240814209, -6.290524005889893, -5.377198696136475, -5.452601909637451, -0.01702222228050232]",0.9831216931343079
3,"['    @Test\n    public void negativeNumber() throws IOException {\n        String[][] values = augmentWithQuotes(new String[][]{\n//            minimum,                           value\n                {""-1.7976931348623157e+308"", ""-1.7976931348623159e+308""},\n                {""-1.7976931348623156e+308"", ""-1.7976931348623157e+308""},\n                {""-1000"", ""-1E309""},\n                {""1000.1"", ""1000""},\n//          See a {@link #doubleValueCoarsing() doubleValueCoarsing} test notes below\n//            {""-1.7976931348623157e+308"",         ""-1.7976931348623158e+308""},\n        });\n\n        expectSomeMessages(values, NUMBER, mapper, mapper);\n\n        expectSomeMessages(values, NUMBER, mapper, bigDecimalMapper);\n\n        expectSomeMessages(values, NUMBER, bigDecimalMapper, bigDecimalMapper);\n    }\n']",Coarsing;negative;notes;expect;See;Some;expect;Coarsing;NUMBER;NUMBER,6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.964508555829525e-10,5,5,"[-5.829337120056152, -5.655150890350342, -6.232337951660156, -5.263722896575928, -5.454890727996826, -0.018016966059803963]",0.9821443557739258
3,"['    @Test public void sizeConstrainedSets() {\n        @Property public void shouldHold(@Size(min = 2, max = 5) Set<String> items) {\n            assertThat(items.size(), lessThanOrEqualTo(5));\n        }\n']",ets;Size;size;items;Property;Than;min;That;Set;Hold,1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8746490478515625, -5.7293291091918945, -6.317956924438477, -5.413293361663818, -5.452494144439697, -0.01674466021358967]",0.9833947420120239
3,"['    @Test public void shrinkingSizeConstrainedSets() {\n        @Property public void shouldHold(@Size(min = 2, max = 5) Set<Integer> items) {\n            failed = items;\n\n            fail();\n        }\n']",shrinking;Hold;failed;Property;Set;fail;min;items;Size;should,3.4924596548080444e-09;9.313225746154785e-10;8.731149137020111e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-1.7462298274040222e-10,5,5,"[-5.897929668426514, -5.7398810386657715, -6.345874309539795, -5.433854579925537, -5.476760387420654, -0.016397014260292053]",0.9837366938591003
3,"['    @Test public void outOfWhackSizeRange() {\n        @Property public void shouldHold(@Size(min = 4, max = 3) Set<String> items) {\n            assertThat(items.size(), lessThanOrEqualTo(3));\n        }\n']",items;Size;Set;Range;less;That;qual;Property;Hold;should,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0;0.0;0.0;-2.3283064365386963e-10,5,5,"[-5.8858819007873535, -5.734739303588867, -6.335773944854736, -5.42988920211792, -5.446191310882568, -0.01661546528339386]",0.9835218191146851
3,['    @Test public void duration() {\n        @Property public void shouldHold(Duration d) {\n        }\n'],Duration;should;duration;Property;Hold,9.313225746154785e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-1.1059455573558807e-09;-6.51925802230835e-09,5,5,"[-5.880674839019775, -5.7203192710876465, -6.3269267082214355, -5.471036434173584, -5.4042229652404785, -0.01670222170650959]",0.9834364652633667
3,['    @Test public void rangedDuration() {\n        @Property public void shouldHold(\n            @InRange(\n'],Duration;ranged;Range;Hold;In;should;Property,2.2351741790771484e-08;2.561137080192566e-09;1.280568540096283e-09;-2.3283064365386963e-10;-3.4924596548080444e-10;-1.1059455573558807e-09;-1.1641532182693481e-09,5,5,"[-5.898252487182617, -5.709527969360352, -6.342251777648926, -5.470064640045166, -5.425029754638672, -0.01657114550471306]",0.9835652709007263
3,['    @Test public void malformedMin() {\n        @Property public void shouldHold(\n            @InRange(\n'],malformed;Range;Hold;Property;In;should;Min,2.7939677238464355e-09;2.7939677238464355e-09;1.6298145055770874e-09;9.89530235528946e-10;-2.561137080192566e-09;-2.6775524020195007e-09;-4.190951585769653e-09,5,5,"[-5.899223327636719, -5.726088523864746, -6.342462539672852, -5.459257125854492, -5.429231643676758, -0.016540424898266792]",0.9835954904556274
3,['    @Test public void malformedMax() {\n        @Property public void shouldHold(\n            @InRange(\n'],Range;Hold;Property;should;In;malformed;Max,1.7462298274040222e-10;0.0;-5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-2.0954757928848267e-09,5,5,"[-5.8956499099731445, -5.719316482543945, -6.332305908203125, -5.451153755187988, -5.418656826019287, -0.016673969104886055]",0.9834643006324768
3,"['    @Test public void missingMin() {\n        @Property public void shouldHold(\n            @InRange(max = ""PT2562047788015215H30M7.999999999S"") Duration d) {\n\n            assertThat(\n                d,\n                lessThanOrEqualTo(\n                    Duration.parse(""PT2562047788015215H30M7.999999999S"")));\n        }\n']",Than;In;missing;Min;Or;PT;Range;should;qual;max,2.270098775625229e-09;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;5.820766091346741e-11;5.820766091346741e-11;0.0;-5.820766091346741e-11;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.856070041656494, -5.692444801330566, -6.263420104980469, -5.340523719787598, -5.443537712097168, -0.01740667223930359]",0.9827439188957214
3,"['    @Test public void missingMax() {\n        @Property public void shouldHold(\n            @InRange(min = ""PT-2562047788015215H-30M-8S"") Duration d) {\n\n            assertThat(\n                d,\n                greaterThanOrEqualTo(\n                    Duration.parse(""PT-2562047788015215H-30M-8S"")));\n        }\n']",min;parse;qual;Hold;should;In;Duration;That;missing;Range,1.3969838619232178e-09;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.0372681319713593e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.7462298274040222e-10;-1.7462298274040222e-10;-1.7462298274040222e-10,5,5,"[-5.859907627105713, -5.696916103363037, -6.26821756362915, -5.3490447998046875, -5.4458746910095215, -0.017319390550255775]",0.9828298687934875
3,['    @Test public void backwardsRange() {\n        @Property public void shouldHold(\n            @InRange(\n'],Property;In;Hold;should;Range;backwards;Range,1.8917489796876907e-09;-2.3283064365386963e-10;-6.984919309616089e-10;-7.566995918750763e-10;-8.149072527885437e-10;-2.7939677238464355e-09;-3.725290298461914e-09,5,5,"[-5.8892669677734375, -5.711010932922363, -6.327206134796143, -5.459230422973633, -5.40826416015625, -0.016740908846259117]",0.9833984375
3,['    @Test public void dayOfWeek() {\n        @Property public void shouldHold(DayOfWeek d) {\n        }\n'],Day;should;Property;Hold;day;Week;Week,2.3283064365386963e-10;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.1641532182693481e-09;-2.7939677238464355e-09,5,5,"[-5.91159725189209, -5.770406723022461, -6.379483699798584, -5.501560211181641, -5.435342788696289, -0.0160912424325943]",0.9840375185012817
3,['    @Test public void month() {\n        @Property public void shouldHold(Month m) {\n        }\n'],Hold;Property;month;should;Month,3.725290298461914e-09;1.6589183360338211e-09;4.656612873077393e-10;0.0;-9.313225746154785e-10,5,5,"[-5.880448818206787, -5.702027797698975, -6.321375846862793, -5.469601154327393, -5.399313926696777, -0.016803156584501266]",0.9833372235298157
3,['    @Test public void period() {\n        @Property public void shouldHold(Period p) {\n        }\n'],period;Period;Hold;Property;should,1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;2.9103830456733704e-10;-2.7939677238464355e-09,5,5,"[-5.891252040863037, -5.717103004455566, -6.350433826446533, -5.493076324462891, -5.420996189117432, -0.01647147722542286]",0.9836633205413818
3,"['    @Test public void rangedPeriod() {\n        @Property public void shouldHold(\n            @InRange(min = ""P1Y2M3D"", max = ""P36Y2M3D"") Period p) {\n\n            assertThat(\n                toBigInteger(p),\n                allOf(\n                    greaterThanOrEqualTo(toBigInteger(Period.parse(""P1Y2M3D""))),\n                    lessThanOrEqualTo(toBigInteger(Period.parse(""P36Y2M3D"")))));\n        }\n']",Period;Than;That;Hold;min;qual;to;to;Big;Or,5.820766091346741e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.0186340659856796e-10;9.458744898438454e-11;8.003553375601768e-11;5.820766091346741e-11;2.9103830456733704e-11,5,5,"[-5.856466770172119, -5.693266868591309, -6.281660556793213, -5.345829010009766, -5.458119869232178, -0.017278147861361504]",0.9828702807426453
3,"['    @Test public void malformedMin() {\n        @Property public void shouldHold(\n            @InRange(min = ""@#!@#@"", max = ""P36Y2M3D"") Period p) {\n        }\n']",Range;Period;min;Min;should;Hold;Property;In;max;malformed,3.259629011154175e-09;3.026798367500305e-09;2.7939677238464355e-09;1.6298145055770874e-09;2.3283064365386963e-10;-5.238689482212067e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-4.016328603029251e-09,5,5,"[-5.8957200050354, -5.746159076690674, -6.340158462524414, -5.427289009094238, -5.45076322555542, -0.01653432846069336]",0.9836017489433289
3,"['    @Test public void malformedMax() {\n        @Property public void shouldHold(\n            @InRange(min = ""P1Y2M3D"", max = ""*&@^#%$"") Period p) {\n        }\n']",Max;Property;In;Hold;max;Range;should;min;Period;malformed,5.587935447692871e-09;1.862645149230957e-09;2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-1.862645149230957e-09;-2.561137080192566e-09,5,5,"[-5.908660411834717, -5.772988796234131, -6.369669437408447, -5.42643404006958, -5.460914134979248, -0.016319964081048965]",0.9838125705718994
3,"['    @Test public void missingMin() {\n        @Property public void shouldHold(@InRange(max = ""P36Y2M3D"") Period p) {\n            assertThat(\n                toBigInteger(p),\n                lessThanOrEqualTo(toBigInteger(Period.parse(""P36Y2M3D""))));\n        }\n']",Period;should;Min;to;Big;less;Property;In;Or;missing,5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.0186340659856796e-10;8.731149137020111e-11;8.731149137020111e-11;7.275957614183426e-11;0.0,5,5,"[-5.868747711181641, -5.711299419403076, -6.290707111358643, -5.372574806213379, -5.44127082824707, -0.017109882086515427]",0.983035683631897
3,"['    @Test public void missingMax() {\n       @Property public void shouldHold(@InRange(min = ""P36Y2M3D"") Period p) {\n            assertThat(\n                toBigInteger(p),\n                greaterThanOrEqualTo(toBigInteger(Period.parse(""P36Y2M3D""))));\n        }\n']",Than;Period;to;greater;Or;to;Big;Period;parse;min,1.3096723705530167e-09;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;2.9103830456733704e-11;0.0;-2.9103830456733704e-11;-5.820766091346741e-11;-7.275957614183426e-11;-1.1641532182693481e-10,5,5,"[-5.875492572784424, -5.728359222412109, -6.304947376251221, -5.375927925109863, -5.447117805480957, -0.01696549728512764]",0.9831776022911072
3,"['    @Test public void backwardsRange() {\n        @Property public void shouldHold(\n            @InRange(min = ""P36Y2M3D"", max = ""P1Y2M3D"") Period p) {\n        }\n']",backwards;Period;Hold;min;should;Range;max;Property;In;Range,1.1641532182693481e-09;1.0186340659856796e-09;4.656612873077393e-10;4.656612873077393e-10;1.7462298274040222e-10;0.0;-1.1641532182693481e-10;-2.9103830456733704e-10;-3.2014213502407074e-10;-1.1641532182693481e-09,5,5,"[-5.891003131866455, -5.738101005554199, -6.332826614379883, -5.423925399780273, -5.443280220031738, -0.016634810715913773]",0.9835028052330017
3,"['    @Test public void distinctLists() {\n        @Property public void shouldHold(\n            @Size(min = 2, max = 5)\n']",Size;Property;should;distinct;ists;Hold;min;max,3.259629011154175e-09;4.656612873077393e-10;0.0;-9.313225746154785e-10;-2.0954757928848267e-09;-2.3283064365386963e-09;-2.7939677238464355e-09;-5.587935447692871e-09,5,5,"[-5.880282878875732, -5.711900234222412, -6.325021266937256, -5.4459991455078125, -5.421797275543213, -0.01676376909017563]",0.9833759665489197
3,"['    @Test public void shrinkingDistinctLists() {\n        @Property public void shouldHold(\n            @Size(min = 4, max = 5)\n']",Size;shrinking;ists;Hold;Property;Distinct;should;min;max,3.958120942115784e-09;1.3969838619232178e-09;9.313225746154785e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.984919309616089e-10;-6.984919309616089e-10;-4.6566128730773926e-09;-5.587935447692871e-09,5,5,"[-5.904067516326904, -5.727127552032471, -6.358615875244141, -5.472376823425293, -5.445663928985596, -0.016365936025977135]",0.9837672710418701
3,['    @Test public void primitive3DBooleanArray() {\n        @Property(trials = 2) public void shouldHold(boolean[][][] b) {\n        }\n'],trials;should;boolean;primitive;Array;Property;Hold;DBoolean,2.0954757928848267e-09;9.313225746154785e-10;1.7462298274040222e-10;-1.3969838619232178e-09;-1.862645149230957e-09;-2.0954757928848267e-09;-3.026798367500305e-09;-4.6566128730773926e-09,5,5,"[-5.891505718231201, -5.75223445892334, -6.339532852172852, -5.437286376953125, -5.446803092956543, -0.016500324010849]",0.9836350679397583
3,['    @Test public void wrapperBooleanArray() {\n        @Property(trials = 2) public void shouldHold(Boolean[][][] b) {\n        }\n'],trials;Boolean;Array;should;wrapper;Property;Boolean;Hold,3.725290298461914e-09;1.1641532182693481e-09;-2.9103830456733704e-10;-4.656612873077393e-10;-1.0477378964424133e-09;-1.3969838619232178e-09;-1.862645149230957e-09;-2.7939677238464355e-09,5,5,"[-5.907052040100098, -5.768798351287842, -6.359705448150635, -5.451735973358154, -5.449089527130127, -0.016294749453663826]",0.9838373064994812
3,['    @Test public void primitive3DByteArray() {\n        @Property(trials = 2) public void shouldHold(byte[][][] b) {\n        }\n'],trials;Byte;Property;Hold;primitive;byte;Array;should,9.313225746154785e-09;1.9208528101444244e-09;1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;2.9103830456733704e-10;-5.820766091346741e-11;-4.656612873077393e-10,5,5,"[-5.889360427856445, -5.732515811920166, -6.32924222946167, -5.442013263702393, -5.427346229553223, -0.01665438897907734]",0.9834834337234497
3,['    @Test public void wrapperByteArray() {\n        @Property(trials = 2) public void shouldHold(Byte[][][] b) {\n        }\n'],trials;Hold;Property;Byte;wrapper;should;Byte;Array,1.0011717677116394e-08;1.862645149230957e-09;4.656612873077393e-10;3.4924596548080444e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.904142379760742, -5.74765157699585, -6.347694396972656, -5.453531742095947, -5.441253185272217, -0.01641835644841194]",0.9837155938148499
3,['    @Test public void primitive3DCharacterArray() {\n        @Property(trials = 2) public void shouldHold(char[][][] ch) {\n        }\n'],primitive;trials;char;Array;should;ch;Property;Character;Hold,2.0954757928848267e-09;2.0954757928848267e-09;9.313225746154785e-10;7.566995918750763e-10;-5.820766091346741e-10;-1.0477378964424133e-09;-2.3283064365386963e-09;-3.026798367500305e-09;-4.190951585769653e-09,5,5,"[-5.9227447509765625, -5.780157089233398, -6.3922929763793945, -5.479658126831055, -5.4743571281433105, -0.015930403023958206]",0.9841958284378052
3,['    @Test public void wrapperCharacterArray() {\n        @Property(trials = 2) public void shouldHold(Character[][][] ch) {\n        }\n'],trials;Character;Property;Hold;ch;should;wrapper;Character;Array,1.1641532182693481e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-1.1641532182693481e-09,5,5,"[-5.932300567626953, -5.799244403839111, -6.412817001342773, -5.492948532104492, -5.4864912033081055, -0.015703234821558]",0.9844192862510681
3,['    @Test public void primitive3DDoubleArray() {\n        @Property(trials = 2) public void shouldHold(double[][][] d) {\n        }\n'],trials;DDouble;double;Array;Hold;Property;should;primitive,6.51925802230835e-09;3.725290298461914e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;-9.313225746154785e-10;-2.561137080192566e-09,5,5,"[-5.900257587432861, -5.744353294372559, -6.342719554901123, -5.4423956871032715, -5.445043563842773, -0.016480859369039536]",0.9836542010307312
3,['    @Test public void wrapperDoubleArray() {\n        @Property(trials = 2) public void shouldHold(Double[][][] d) {\n        }\n'],Double;should;Array;Hold;Property;trials;wrapper;Double,1.3969838619232178e-09;4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.6298145055770874e-09;-2.3283064365386963e-09;-2.3283064365386963e-09,5,5,"[-5.8950276374816895, -5.734620571136475, -6.334254741668701, -5.4405012130737305, -5.417454242706299, -0.016673734411597252]",0.9834645986557007
3,['    @Test public void primitive3DFloatArray() {\n        @Property(trials = 2) public void shouldHold(float[][][] f) {\n        }\n'],DFloat;primitive;should;Hold;float;Property;Array;trials,5.3551048040390015e-09;0.0;0.0;0.0;0.0;-3.4924596548080444e-10;-1.0477378964424133e-09;-1.3969838619232178e-09,5,5,"[-5.902717113494873, -5.767423152923584, -6.364552974700928, -5.459151744842529, -5.458539009094238, -0.016229186207056046]",0.9839016795158386
3,['    @Test public void wrapperFloatArray() {\n        @Property(trials = 2) public void shouldHold(Float[][][] f) {\n        }\n'],Hold;Property;Array;Float;should;wrapper;Float;trials,1.3969838619232178e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;0.0;-6.984919309616089e-10;-1.3969838619232178e-09;-5.704350769519806e-09,5,5,"[-5.892970085144043, -5.739250183105469, -6.339187145233154, -5.451138496398926, -5.422705173492432, -0.016585098579525948]",0.9835516810417175
3,['    @Test public void primitive3DIntegerArray() {\n        @Property(trials = 2) public void shouldHold(int[][][] i) {\n        }\n'],trials;Hold;should;Array;Property;primitive,4.190951585769653e-09;1.6298145055770874e-09;-2.3283064365386963e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.9021806716918945, -5.752812385559082, -6.347237586975098, -5.447521209716797, -5.454498291015625, -0.016376256942749023]",0.9837570786476135
3,['    @Test public void wrapperIntegerArray() {\n        @Property(trials = 2) public void shouldHold(Integer[][][] i) {\n        }\n'],Array;should;Hold;Property;trials;wrapper,9.313225746154785e-10;2.3283064365386963e-10;0.0;-9.313225746154785e-10;-9.313225746154785e-10;-1.6298145055770874e-09,5,5,"[-5.897326469421387, -5.74686861038208, -6.3397650718688965, -5.448942184448242, -5.428962707519531, -0.016528582200407982]",0.983607292175293
3,['    @Test public void primitive3DLongArray() {\n        @Property(trials = 2) public void shouldHold(long[][][] ell) {\n        }\n'],trials;Array;Property;ell;Hold;long;should;primitive;Long,2.561137080192566e-09;2.0954757928848267e-09;1.862645149230957e-09;4.656612873077393e-10;3.4924596548080444e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-8.149072527885437e-10;-9.313225746154785e-10,5,5,"[-5.913323879241943, -5.758545398712158, -6.375264644622803, -5.4506988525390625, -5.481713771820068, -0.016147196292877197]",0.9839824438095093
3,['    @Test public void wrapperLongArray() {\n        @Property(trials = 2) public void shouldHold(Long[][][] ell) {\n        }\n'],should;Hold;wrapper;Array;Long;Property;Long;ell;trials,1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.862645149230957e-09;-2.3283064365386963e-09;-3.725290298461914e-09,5,5,"[-5.909312725067139, -5.740448474884033, -6.366685390472412, -5.458954334259033, -5.468575954437256, -0.01625182293355465]",0.9838795065879822
3,['    @Test public void primitive3DShortArray() {\n        @Property(trials = 2) public void shouldHold(short[][][] s) {\n        }\n'],Property;short;Hold;Array;should;Short;trials;primitive,1.1641532182693481e-09;6.984919309616089e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-2.444721758365631e-09;-2.7939677238464355e-09,5,5,"[-5.886585712432861, -5.736689567565918, -6.331875324249268, -5.437254428863525, -5.433557033538818, -0.016637155786156654]",0.9835004806518555
3,['    @Test public void wrapperShortArray() {\n        @Property(trials = 2) public void shouldHold(Short[][][] s) {\n        }\n'],Array;trials;wrapper;Short;should;Hold;Short;Property,1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.2223608791828156e-09;0.0;-1.1641532182693481e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.903075218200684, -5.762167930603027, -6.359451770782471, -5.450092315673828, -5.453761577606201, -0.016313983127474785]",0.9838182330131531
3,['    @Test public void instant() {\n        @Property public void shouldHold(Instant i) {\n        }\n'],Hold;Property;should;Instant;instant,6.984919309616089e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;-2.3283064365386963e-09,5,5,"[-5.877964973449707, -5.709774971008301, -6.315896511077881, -5.458030700683594, -5.403107166290283, -0.016826484352350235]",0.9833142757415771
3,['    @Test public void rangedInstant() {\n        @Property public void shouldHold(\n            @InRange(\n'],should;Range;Hold;Property;In;Instant;ranged,2.7939677238464355e-09;6.984919309616089e-10;-4.656612873077393e-10;-6.402842700481415e-10;-9.313225746154785e-10;-3.725290298461914e-09;-5.122274160385132e-09,5,5,"[-5.9170427322387695, -5.717567443847656, -6.371209144592285, -5.494800090789795, -5.4569525718688965, -0.016196109354496002]",0.9839344620704651
3,"['    @Test public void malformedMin() {\n        @Property public void shouldHold(\n            @InRange(min = ""@#!@#@"", max = ""2012-12-31T23:59:59.999999999Z"") Instant i) {\n        }\n']",In;Min;max;Range;min;should;Property;Hold;Instant;malformed,2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;6.984919309616089e-10;5.238689482212067e-10;2.3283064365386963e-10;5.820766091346741e-11;-3.4924596548080444e-10;-7.566995918750763e-10,5,5,"[-5.901922225952148, -5.759087562561035, -6.341334342956543, -5.437130928039551, -5.466282844543457, -0.016362067312002182]",0.9837710857391357
3,"['    @Test public void malformedMax() {\n        @Property public void shouldHold(\n            @InRange(min = ""06/01/2011T23:59:59.999999999Z"", max = ""*&@^#%$"") Instant i) {\n        }\n']",min;malformed;Hold;Range;should;max;Property;In;Instant;Max,4.423782229423523e-09;3.259629011154175e-09;2.0954757928848267e-09;9.313225746154785e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-9.313225746154785e-10;-9.313225746154785e-10;-6.51925802230835e-09,5,5,"[-5.901329040527344, -5.772189140319824, -6.357728004455566, -5.431516170501709, -5.465129852294922, -0.016322895884513855]",0.9838097095489502
3,"['    @Test public void missingMin() {\n        public void shouldHold(\n            @InRange(max = ""2012-12-31T23:59:59.999999999Z"") Instant i) {\n\n            assertThat(\n                i,\n                lessThanOrEqualTo(Instant.parse(""2012-12-31T23:59:59.999999999Z"")));\n        }\n']",Min;Instant;parse;Hold;max;Or;qual;Than;missing;That,1.862645149230957e-09;8.731149137020111e-10;4.656612873077393e-10;3.4924596548080444e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-5.820766091346741e-11,5,5,"[-5.849642753601074, -5.686959743499756, -6.2623186111450195, -5.362148761749268, -5.432049751281738, -0.017392965033650398]",0.9827573895454407
3,"['    @Test public void missingMax() {\n        @Property public void shouldHold(\n            @InRange(min = ""2012-12-31T23:59:59.999999999Z"") Instant i) {\n\n            assertThat(\n                i,\n                greaterThanOrEqualTo(Instant.parse(""2012-12-31T23:59:59.999999999Z"")));\n        }\n']",Or;greater;Instant;qual;should;In;missing;parse;That;Max,4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;2.9103830456733704e-11;2.9103830456733704e-11;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.857249736785889, -5.697348594665527, -6.275518417358398, -5.367864608764648, -5.448288917541504, -0.01721077412366867]",0.9829365015029907
3,['    @Test public void backwardsRange() {\n        @Property public void shouldHold(\n            @InRange(\n'],Property;In;Hold;should;Range;backwards;Range,1.8917489796876907e-09;-2.3283064365386963e-10;-6.984919309616089e-10;-7.566995918750763e-10;-8.149072527885437e-10;-2.7939677238464355e-09;-3.725290298461914e-09,5,5,"[-5.8892669677734375, -5.711010932922363, -6.327206134796143, -5.459230422973633, -5.40826416015625, -0.016740908846259117]",0.9833984375
3,['    @Test public void offsetTime() {\n        @Property public void shouldHold(OffsetTime t) {\n        }\n'],Property;Time;offset;Time;should;Offset;Hold,1.3969838619232178e-09;-4.0745362639427185e-10;-1.862645149230957e-09;-1.862645149230957e-09;-1.862645149230957e-09;-1.979060471057892e-09;-3.725290298461914e-09,5,5,"[-5.867772102355957, -5.696542263031006, -6.2982048988342285, -5.448647975921631, -5.397602558135986, -0.01699960231781006]",0.9831441044807434
3,['    @Test public void rangedOffsetTime() {\n        @Property public void shouldHold(\n            @InRange(\n'],Hold;In;Range;ranged;Property;Time;should;Offset,5.238689482212067e-10;1.4551915228366852e-10;1.0186340659856796e-10;0.0;-2.0372681319713593e-10;-2.3283064365386963e-10;-5.820766091346741e-10;-6.402842700481415e-10,5,5,"[-5.87479305267334, -5.686558246612549, -6.30267858505249, -5.443256855010986, -5.399651527404785, -0.017019527032971382]",0.9831244945526123
3,['    @Test public void malformedMin() {\n        @Property public void shouldHold(\n            @InRange(\n'],malformed;Range;Hold;Property;In;should;Min,2.7939677238464355e-09;2.7939677238464355e-09;1.6298145055770874e-09;9.89530235528946e-10;-2.561137080192566e-09;-2.6775524020195007e-09;-4.190951585769653e-09,5,5,"[-5.899223327636719, -5.726088523864746, -6.342462539672852, -5.459257125854492, -5.429231643676758, -0.016540424898266792]",0.9835954904556274
3,['    @Test public void malformedMax() {\n        @Property public void shouldHold(\n            @InRange(\n'],Range;Hold;Property;should;In;malformed;Max,1.7462298274040222e-10;0.0;-5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-2.0954757928848267e-09,5,5,"[-5.8956499099731445, -5.719316482543945, -6.332305908203125, -5.451153755187988, -5.418656826019287, -0.016673969104886055]",0.9834643006324768
3,['    @Test public void malformedFormat() {\n        @Property public void shouldHold(\n            @InRange(\n'],Format;Hold;Range;Property;In;should;malformed,6.984919309616089e-10;5.529727786779404e-10;4.3655745685100555e-11;-3.4924596548080444e-10;-4.3655745685100555e-10;-6.984919309616089e-10;-2.6193447411060333e-09,5,5,"[-5.874485015869141, -5.683614253997803, -6.305434226989746, -5.442870140075684, -5.400331497192383, -0.017024097964167595]",0.9831199645996094
3,['    @Test public void missingMin() {\n        @Property public void shouldHold(\n            @InRange(\n'],Min;Hold;should;Property;In;Range;missing,1.1641532182693481e-09;1.1641532182693481e-09;4.656612873077393e-10;2.9103830456733704e-10;1.4551915228366852e-10;5.820766091346741e-11;-1.7462298274040222e-09,5,5,"[-5.896543025970459, -5.720088958740234, -6.337311744689941, -5.466243267059326, -5.4266438484191895, -0.01655859872698784]",0.9835777282714844
3,['    @Test public void missingMax() {\n        @Property public void shouldHold(\n            @InRange(\n'],missing;In;should;Hold;Range;Property;Max,3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;-3.4924596548080444e-10;-5.238689482212067e-10;-6.402842700481415e-10;-1.6298145055770874e-09,5,5,"[-5.889495849609375, -5.709993839263916, -6.323334693908691, -5.456620693206787, -5.407458305358887, -0.016765762120485306]",0.9833739995956421
3,['    @Test public void backwardsRange() {\n        @Property public void shouldHold(\n            @InRange(\n'],Property;In;Hold;should;Range;backwards;Range,1.8917489796876907e-09;-2.3283064365386963e-10;-6.984919309616089e-10;-7.566995918750763e-10;-8.149072527885437e-10;-2.7939677238464355e-09;-3.725290298461914e-09,5,5,"[-5.8892669677734375, -5.711010932922363, -6.327206134796143, -5.459230422973633, -5.40826416015625, -0.016740908846259117]",0.9833984375
3,['    @Test public void stringArray() {\n        @Property public void shouldHold(Foo[] f) {\n        }\n'],oo;Hold;Property;string;Array;should,1.30385160446167e-08;5.587935447692871e-09;9.313225746154785e-10;0.0;0.0;-5.587935447692871e-09,5,5,"[-5.88750696182251, -5.735487461090088, -6.342891216278076, -5.472814559936523, -5.41089391708374, -0.01656598597764969]",0.9835705757141113
3,['    @Test public void twoDLongArray() {\n        @Property(trials = 5) public void shouldHold(Long[][] ell) {\n        }\n'],trials;Long;two;Long;Array;Hold;Property;should;ell,4.773028194904327e-09;3.259629011154175e-09;2.7939677238464355e-09;6.984919309616089e-10;0.0;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.917643070220947, -5.771491527557373, -6.3899054527282715, -5.464870929718018, -5.492488384246826, -0.01596219651401043]",0.9841645359992981
3,['    @Test public void primitiveBoolean() {\n        @Property public void shouldHold(boolean b) {\n        }\n'],primitive;boolean;should;Boolean;Property;Hold,6.984919309616089e-09;9.313225746154785e-10;0.0;-2.0954757928848267e-09;-4.6566128730773926e-09;-5.21540641784668e-08,5,5,"[-5.87421989440918, -5.735817909240723, -6.321010589599609, -5.436071395874023, -5.42317533493042, -0.016746535897254944]",0.9833930134773254
3,['    @Test public void wrapperBoolean() {\n        @Property public void shouldHold(Boolean b) {\n        }\n'],Boolean;Property;wrapper;Boolean;should;Hold,6.984919309616089e-10;6.984919309616089e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.862645149230957e-09;-6.984919309616089e-09,5,5,"[-5.882558822631836, -5.739474773406982, -6.327388763427734, -5.441756725311279, -5.423840522766113, -0.016671037301421165]",0.983467161655426
3,['    @Test public void primitiveBooleanWithValuesOf() {\n        @Property public void shouldHold(@ValuesOf boolean b) {\n            values.add(b);\n        }\n'],primitive;Boolean;Values;Property;boolean;should;Values;add;values;Hold,2.444721758365631e-09;1.280568540096283e-09;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-1.3969838619232178e-09,5,5,"[-5.883681774139404, -5.75499153137207, -6.339554786682129, -5.421767234802246, -5.455276012420654, -0.016545701771974564]",0.9835904240608215
3,['    @Test public void wrapperBooleanWithValuesOf() {\n        @Property public void shouldHold(@ValuesOf Boolean b) {\n            values.add(b);\n        }\n'],should;Values;Boolean;Values;values;add;wrapper;Boolean;Hold;Property,9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.111804395914078e-10;-6.402842700481415e-10;-6.984919309616089e-10;-1.1641532182693481e-09,5,5,"[-5.885259628295898, -5.744724273681641, -6.3329877853393555, -5.419468402862549, -5.4475297927856445, -0.016630355268716812]",0.9835071563720703
3,['    @Test public void shrinkingBooleanFromTrue() {\n        @Property public void shouldHold(boolean b) {\n            values.add(b);\n\n            assumeTrue(b);\n            fail();\n        }\n'],should;Hold;True;assume;boolean;fail;From;True;values;shrinking,2.0954757928848267e-09;1.1641532182693481e-09;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;2.3283064365386963e-10;1.8917489796876907e-10;-1.1641532182693481e-10,5,5,"[-5.878383159637451, -5.714267253875732, -6.31378173828125, -5.394229888916016, -5.4729905128479, -0.016790613532066345]",0.9833495616912842
3,['    @Test public void shrinkingBooleanFromFalse() {\n        @Property public void shouldHold(boolean b) {\n            values.add(b);\n\n            assumeFalse(b);\n            fail();\n        }\n'],Boolean;False;Hold;should;boolean;assume;fail;False;add;values,1.862645149230957e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;2.0372681319713593e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11,5,5,"[-5.882814884185791, -5.711662769317627, -6.318063735961914, -5.397622585296631, -5.474544048309326, -0.01675661839544773]",0.9833829998970032
3,['    @Test public void primitiveByte() {\n        @Property public void shouldHold(byte b) {\n        }\n'],primitive;Hold;Property;should;byte;Byte,2.7939677238464355e-09;1.862645149230957e-09;1.1641532182693481e-10;0.0;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-5.89147424697876, -5.7181715965271, -6.328915119171143, -5.462883949279785, -5.411418437957764, -0.016677485778927803]",0.9834607839584351
3,"['    @Test public void rangedPrimitiveByte() {\n        @Property public void shouldHold(@InRange(min = ""-23"", max = ""34"") byte b) {\n            assertThat(b, allOf(greaterThanOrEqualTo((byte) -23), lessThanOrEqualTo((byte) 34)));\n        }\n']",Hold;byte;byte;byte;Range;ranged;less;min;Or;qual,5.122274160385132e-09;1.3969838619232178e-09;1.2223608791828156e-09;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.8858962059021, -5.738740921020508, -6.332644939422607, -5.407676696777344, -5.457304000854492, -0.01665966585278511]",0.9834784269332886
3,"['    @Test public void leftOpenEndedRangedPrimitiveByte() {\n        @Property public void shouldHold(@InRange(max = ""0"") byte b) {\n            assertThat(b, lessThanOrEqualTo((byte) 0));\n        }\n']",Primitive;anged;Ended;left;Hold;Or;should;Than;In;qual,9.313225746154785e-10;7.566995918750763e-10;7.275957614183426e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;1.8917489796876907e-10,5,5,"[-5.893286228179932, -5.738277912139893, -6.3405985832214355, -5.437007904052734, -5.467905521392822, -0.0164486113935709]",0.9836860299110413
3,"['    @Test public void rightOpenEndedRangedPrimitiveByte() {\n        @Property public void shouldHold(@InRange(min = ""0"") byte b) {\n            assertThat(b, greaterThanOrEqualTo((byte) 0));\n        }\n']",anged;should;In;byte;Property;qual;byte;greater;That;Range,2.7939677238464355e-09;1.1641532182693481e-09;7.566995918750763e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;8.731149137020111e-11;0.0;-5.820766091346741e-11;-1.7462298274040222e-10,5,5,"[-5.910329341888428, -5.756077766418457, -6.365403652191162, -5.446462154388428, -5.484297752380371, -0.016188133507966995]",0.9839422106742859
3,"['    @Test public void shrinkingPrimitivePositiveByte() {\n        @Property public void shouldHold(@InRange(min = ""3"", max = ""110"") byte b) {\n            values.add(b);\n\n            fail();\n        }\n']",min;In;Byte;Range;Property;add;Hold;max;fail;values,1.6298145055770874e-09;9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.9103830456733704e-10,5,5,"[-5.895474433898926, -5.733336448669434, -6.328344345092773, -5.408746719360352, -5.455166816711426, -0.01666259579360485]",0.9834754467010498
3,"['    @Test public void shrinkingPrimitiveNegativeByte() {\n        @Property public void shouldHold(@InRange(min = ""-101"", max = ""-13"") byte b) {\n            values.add(b);\n\n            fail();\n        }\n']",byte;values;Range;fail;should;add;Hold;Negative;Byte;min,3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.868955612182617, -5.700638771057129, -6.28870964050293, -5.384605407714844, -5.437795639038086, -0.017108123749494553]",0.983037531375885
3,['    @Test public void shrinkingPrimitiveByteStraddlingZero() {\n        @Property public void shouldHold(byte b) {\n            values.add(b);\n\n            fail();\n        }\n'],shrinking;Primitive;Straddling;Byte;add;fail;values;should;byte;Hold,2.5029294192790985e-09;6.984919309616089e-10;2.3283064365386963e-10;2.0372681319713593e-10;0.0;-1.4551915228366852e-11;-5.820766091346741e-11;-8.731149137020111e-11;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-5.891387462615967, -5.700556755065918, -6.314464569091797, -5.423526763916016, -5.4591546058654785, -0.01672496646642685]",0.9834141135215759
3,['    @Test public void wrapperByte() {\n        @Property public void shouldHold(Byte b) {\n        }\n'],should;Byte;Hold;Byte;Property;wrapper,6.984919309616089e-10;4.656612873077393e-10;0.0;-2.3283064365386963e-10;-2.9103830456733704e-10;-3.4924596548080444e-10,5,5,"[-5.890599727630615, -5.7139739990234375, -6.324846267700195, -5.462859630584717, -5.401399612426758, -0.01674712263047695]",0.9833922386169434
3,"['    @Test public void rangedWrapperByte() {\n        @Property public void shouldHold(@InRange(min = ""-3"", max = ""2"") Byte b) {\n            assertThat(b, allOf(greaterThanOrEqualTo((byte) -3), lessThanOrEqualTo((byte) 2)));\n        }\n']",Hold;ranged;all;should;Than;byte;Property;greater;Than;Byte,8.381903171539307e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.872010231018066, -5.715622425079346, -6.302363395690918, -5.388398170471191, -5.430213928222656, -0.017039097845554352]",0.9831052422523499
3,"['    @Test public void leftOpenEndedRangedWrapperByte() {\n        @Property public void shouldHold(@InRange(max = ""0"") Byte b) {\n            assertThat(b, lessThanOrEqualTo((byte) 0));\n        }\n']",Open;anged;Byte;left;Hold;Wrapper;qual;Byte;byte;Or,5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;8.731149137020111e-11;8.731149137020111e-11;1.4551915228366852e-11;-8.731149137020111e-11,5,5,"[-5.8964762687683105, -5.736016750335693, -6.346022129058838, -5.441324710845947, -5.464148998260498, -0.01643442176282406]",0.9836998581886292
3,"['    @Test public void rightOpenEndedRangedWrapperByte() {\n        @Property public void shouldHold(@InRange(min = ""0"") Byte b) {\n            assertThat(b, greaterThanOrEqualTo((byte) 0));\n        }\n']",Ended;min;Byte;should;qual;Or;greater;Wrapper;That;Than,1.2223608791828156e-09;1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;3.41970007866621e-10;5.820766091346741e-11;0.0;-5.820766091346741e-11;-8.731149137020111e-11,5,5,"[-5.914272785186768, -5.7557759284973145, -6.37067174911499, -5.451277732849121, -5.4806671142578125, -0.016163500025868416]",0.9839665293693542
3,['    @Test public void primitiveCharacter() {\n        @Property public void shouldHold(char ch) {\n        }\n'],ch;primitive;Character;Hold;should;Property;char,7.450580596923828e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;4.656612873077393e-10;-9.313225746154785e-10;-3.725290298461914e-09,5,5,"[-5.911798000335693, -5.774298667907715, -6.379382133483887, -5.496443748474121, -5.449589252471924, -0.016037162393331528]",0.9840907454490662
3,"[""    @Test public void rangedPrimitiveCharacter() {\n        @Property public void shouldHold(@InRange(minChar = 'a', maxChar = 'z') char ch) {\n            assertThat(ch, allOf(greaterThanOrEqualTo('a'), lessThanOrEqualTo('z')));\n        }\n""]",ch;char;Char;Character;qual;ch;Than;Char;less;Than,1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.91258430480957, -5.7883782386779785, -6.400546550750732, -5.463825225830078, -5.492877960205078, -0.01590799354016781]",0.9842178821563721
3,"[""    @Test public void leftOpenEndedRangedPrimitiveCharacter() {\n        @Property public void shouldHold(@InRange(maxChar = '\\u00FF') char ch) {\n            assertThat(ch, lessThanOrEqualTo('\\u00FF'));\n        }\n""]",max;Character;Range;ch;Primitive;Property;Open;char;FF;FF,1.862645149230957e-09;1.862645149230957e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-5.932831764221191, -5.789867401123047, -6.4209184646606445, -5.512582302093506, -5.514914035797119, -0.01551827136427164]",0.9846014976501465
3,"[""    @Test public void rightOpenEndedRangedPrimitiveCharacter() {\n        @Property public void shouldHold(@InRange(minChar = '\\uFF00') char ch) {\n            assertThat(ch, greaterThanOrEqualTo('\\uFF00'));\n        }\n""]",That;should;Ended;Primitive;anged;FF;ch;ch;Char;Or,1.6298145055770874e-09;1.3969838619232178e-09;1.0186340659856796e-09;9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.939071178436279, -5.798044681549072, -6.429887294769287, -5.515122413635254, -5.521285057067871, -0.01542507205158472]",0.9846932888031006
3,"[""    @Test public void shrinkingPrimitiveCharacter() {\n        @Property public void shouldHold(@InRange(minChar = ' ', maxChar = '\\u00FF') char ch) {\n            values.add(ch);\n\n            fail();\n        }\n""]",Primitive;ch;ch;add;shrinking;Char;In;values;max;Char,2.0372681319713593e-09;6.984919309616089e-10;5.820766091346741e-10;1.8917489796876907e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-2.473825588822365e-10;-3.2014213502407074e-10;-3.346940502524376e-10,5,5,"[-5.9181036949157715, -5.7609663009643555, -6.378640651702881, -5.459140777587891, -5.49274206161499, -0.01603739708662033]",0.9840903878211975
3,['    @Test public void wrapperCharacter() {\n        @Property public void shouldHold(Character ch) {\n        }\n'],ch;should;Character;Character;Property;wrapper;Hold,2.0954757928848267e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.1641532182693481e-09;6.984919309616089e-10;2.3283064365386963e-10;-4.190951585769653e-09,5,5,"[-5.9099249839782715, -5.765237331390381, -6.366445064544678, -5.490389347076416, -5.437078952789307, -0.016173822805285454]",0.9839562773704529
3,"['    @Test public void rangedWrapperCharacter() {\n        @Property public void shouldHold(@InRange(min = ""0"", max = ""9"") Character ch) {\n            assertThat(ch, allOf(greaterThanOrEqualTo(\'0\'), lessThanOrEqualTo(\'9\')));\n        }\n']",ch;Than;all;Than;That;qual;less;greater;In;Or,1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.912603855133057, -5.77040958404541, -6.386924743652344, -5.454608917236328, -5.477245330810547, -0.016093119978904724]",0.9840355515480042
3,"['    @Test public void leftOpenEndedRangedWrapperCharacter() {\n        @Property public void shouldHold(@InRange(max = ""\\u00FF"") Character ch) {\n            assertThat(ch, lessThanOrEqualTo(\'\\u00FF\'));\n        }\n']",Hold;Range;Property;Wrapper;less;ch;Open;FF;Or;max,1.0244548320770264e-08;4.6566128730773926e-09;1.862645149230957e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.4551915228366852e-11;0.0,5,5,"[-5.9478960037231445, -5.8021392822265625, -6.433863162994385, -5.5194525718688965, -5.513124465942383, -0.015398191288113594]",0.9847198724746704
3,"['    @Test public void rightOpenEndedRangedWrapperCharacter() {\n        @Property public void shouldHold(@InRange(min = ""\\uFF00"") Character ch) {\n            assertThat(ch, greaterThanOrEqualTo(\'\\uFF00\'));\n        }\n']",right;Range;anged;ch;Character;That;Open;qual;FF;FF,1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.9528937339782715, -5.808147430419922, -6.441582679748535, -5.523166656494141, -5.517980575561523, -0.015319068916141987]",0.9847976565361023
3,"['    @Test public void primitiveDouble() {\n        @Property public void shouldHold(double d) {\n            assertThat(d, greaterThanOrEqualTo(RangeAttributes.minDouble()));\n            assertThat(d, lessThan(RangeAttributes.maxDouble()));\n        }\n']",Hold;less;Double;primitive;Range;Attributes;max;Double;qual;greater,3.725290298461914e-09;1.2223608791828156e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;1.1641532182693481e-10,5,5,"[-5.879598140716553, -5.739804267883301, -6.309831619262695, -5.380796909332275, -5.445979595184326, -0.016889194026589394]",0.9832526445388794
3,"['    @Test public void rangedPrimitiveDouble() {\n        @Property public void shouldHold(@InRange(minDouble = -2.71, maxDouble = 3.14) double d) {\n            assertThat(d, allOf(greaterThanOrEqualTo(-2.71), lessThan(3.14)));\n        }\n']",Primitive;Double;Double;Double;max;Hold;In;qual;That;Than,3.725290298461914e-09;8.440110832452774e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.899494171142578, -5.747170448303223, -6.350210189819336, -5.416647911071777, -5.478031635284424, -0.016432898119091988]",0.9837014079093933
3,"['    @Test public void leftOpenEndedRangedPrimitiveDouble() {\n        @Property public void shouldHold(@InRange(maxDouble = 3.14) double d) {\n            assertThat(d, greaterThanOrEqualTo(RangeAttributes.minDouble()));\n            assertThat(d, lessThan(3.14));\n        }\n']",min;max;Double;Than;double;Range;greater;Primitive;Open;less,9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0;0.0;-2.9103830456733704e-11,5,5,"[-5.8869428634643555, -5.736461162567139, -6.3238043785095215, -5.39929723739624, -5.466503143310547, -0.01667877472937107]",0.9834595322608948
3,"['    @Test public void rightOpenEndedRangedPrimitiveDouble() {\n        @Property public void shouldHold(@InRange(minDouble = -2.71) double d) {\n            assertThat(d, greaterThanOrEqualTo(-2.71));\n            assertThat(d, lessThan(RangeAttributes.maxDouble()));\n        }\n']",Property;Hold;Double;qual;anged;greater;That;should;Attributes;That,5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;2.9103830456733704e-11,5,5,"[-5.88433837890625, -5.731936454772949, -6.313318729400635, -5.38510799407959, -5.450501918792725, -0.016855202615261078]",0.9832860231399536
3,"['    @Test public void wrapperDouble() {\n        @Property public void shouldHold(Double d) {\n            assertThat(d, greaterThanOrEqualTo(RangeAttributes.minDouble()));\n            assertThat(d, lessThan(RangeAttributes.maxDouble()));\n        }\n']",Hold;should;Double;wrapper;Double;greater;less;Double;Attributes;Double,4.423782229423523e-09;3.725290298461914e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.871687412261963, -5.720885276794434, -6.29779577255249, -5.37604284286499, -5.4319891929626465, -0.017080701887607574]",0.9830642342567444
3,"['    @Test public void rangedWrapperDouble() {\n        @Property public void shouldHold(@InRange(min = ""2.71"", max = ""3.14"") Double d) {\n            assertThat(d, allOf(greaterThanOrEqualTo(2.71), lessThan(3.14)));\n        }\n']",should;Double;qual;ranged;min;Wrapper;Or;Than;less;all,3.026798367500305e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;4.0745362639427185e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10,5,5,"[-5.911896228790283, -5.7764387130737305, -6.3651909828186035, -5.415173530578613, -5.471652507781982, -0.016312340274453163]",0.9838199615478516
3,"['    @Test public void leftOpenEndedRangedWrapperDouble() {\n        @Property public void shouldHold(@InRange(max = ""3.14"") Double d) {\n            assertThat(d, greaterThanOrEqualTo(RangeAttributes.minDouble()));\n            assertThat(d, lessThan(3.14));\n        }\n']",min;should;Ended;Hold;Double;That;Than;qual;That;Double,1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.0372681319713593e-10;5.820766091346741e-11;0.0,5,5,"[-5.897686004638672, -5.757908344268799, -6.343009948730469, -5.411129951477051, -5.472370147705078, -0.016465263441205025]",0.983669638633728
3,"['    @Test public void rightOpenEndedRangedWrapperDouble() {\n        @Property public void shouldHold(@InRange(min = ""-2.71"") Double d) {\n            assertThat(d, greaterThanOrEqualTo(-2.71));\n            assertThat(d, lessThan(RangeAttributes.maxDouble()));\n        }\n']",Than;Hold;min;less;Double;Or;Double;Property;That;max,5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.879517078399658, -5.728376865386963, -6.308448314666748, -5.385448455810547, -5.438955307006836, -0.016938891261816025]",0.9832038879394531
3,"['    @Test public void shrinkingPrimitivePositiveDouble() {\n        @Property public void shouldHold(\n            @InRange(minDouble = 555.123123123123, maxDouble = 11111.222222222) double d) {\n\n            values.add(d);\n\n            fail();\n        }\n']",shrinking;In;double;should;Double;Positive;values;add;fail;Hold,9.313225746154785e-10;4.3655745685100555e-10;3.637978807091713e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.9061689376831055, -5.75135612487793, -6.35266637802124, -5.404658794403076, -5.483927249908447, -0.016425978392362595]",0.9837083220481873
3,"['    @Test public void shrinkingPrimitiveNegativeDouble() {\n        @Property public void shouldHold(\n            @InRange(minDouble = -4400.998877665544, maxDouble = -777.012301230123) double d) {\n\n            values.add(d);\n\n            fail();\n        }\n']",Property;max;Range;Hold;add;Double;fail;double;Negative;should,4.656612873077393e-10;4.656612873077393e-10;2.473825588822365e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.4551915228366852e-11;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.905040264129639, -5.741334915161133, -6.358010768890381, -5.412424087524414, -5.49955940246582, -0.016351277008652687]",0.9837816953659058
3,['    @Test public void shrinkingPrimitiveDoubleStraddlingZero() {\n        @Property public void shouldHold(double d) {\n            values.add(d);\n\n            fail();\n        }\n'],Zero;add;fail;Hold;Primitive;Property;should;double;values;shrinking,4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;-2.9103830456733704e-11;-1.7462298274040222e-10;-5.820766091346741e-10,5,5,"[-5.899351119995117, -5.7089643478393555, -6.322107315063477, -5.422171592712402, -5.466838836669922, -0.0166331697255373]",0.9835044145584106
3,"['    @Test public void primitiveFloat() {\n        @Property public void shouldHold(float f) {\n            assertThat(f, greaterThanOrEqualTo(RangeAttributes.minFloat()));\n            assertThat(f, lessThan(RangeAttributes.maxFloat()));\n        }\n']",less;Than;qual;Range;Attributes;greater;Or;min;Attributes;Than,1.0477378964424133e-09;6.402842700481415e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.872313976287842, -5.733075141906738, -6.302600860595703, -5.37831449508667, -5.439550876617432, -0.016985539346933365]",0.9831579923629761
3,"['    @Test public void rangedPrimitiveFloat() {\n        @Property public void shouldHold(@InRange(minFloat = -2.51234F, maxFloat = 9.23423F) float f) {\n            assertThat(f, allOf(greaterThanOrEqualTo(-2.51234F), lessThan(9.23423F)));\n        }\n']",Hold;Range;should;Float;Float;In;That;min;float;all,5.122274160385132e-09;4.423782229423523e-09;4.190951585769653e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-5.9074907302856445, -5.750204086303711, -6.372802257537842, -5.430276393890381, -5.490834712982178, -0.016246074810624123]",0.9838851690292358
3,"['    @Test public void leftOpenEndedRangedPrimitiveFloat() {\n        @Property public void shouldHold(@InRange(maxFloat = 3.14F) float f) {\n            assertThat(f, greaterThanOrEqualTo(RangeAttributes.minFloat()));\n            assertThat(f, lessThanOrEqualTo(3.14F));\n        }\n']",Ended;Than;anged;Float;Or;Float;greater;less;max;qual,1.0477378964424133e-09;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.87135648727417, -5.720881938934326, -6.306248188018799, -5.381506443023682, -5.450757026672363, -0.016957644373178482]",0.983185350894928
3,"['    @Test public void rightOpenEndedRangedPrimitiveFloat() {\n        @Property public void shouldHold(@InRange(minFloat = -2.71F) float f) {\n            assertThat(f, greaterThanOrEqualTo(-2.71F));\n            assertThat(f, lessThan(RangeAttributes.maxFloat()));\n        }\n']",Ended;Float;float;Range;anged;Range;Open;greater;Hold;Than,1.6298145055770874e-09;1.0477378964424133e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.8781418800354, -5.728317737579346, -6.315248012542725, -5.384037494659424, -5.452669143676758, -0.016876887530088425]",0.9832648634910583
3,"['    @Test public void wrapperFloat() {\n        @Property public void shouldHold(Float f) {\n            assertThat(f, greaterThanOrEqualTo(RangeAttributes.minFloat()));\n            assertThat(f, lessThan(RangeAttributes.maxFloat()));\n        }\n']",should;Float;Than;greater;Or;wrapper;less;Hold;Range;Float,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10,5,5,"[-5.862489700317383, -5.709548473358154, -6.28477144241333, -5.371569633483887, -5.418690204620361, -0.01725061424076557]",0.9828974604606628
3,"['    @Test public void rangedWrapperFloat() {\n        @Property public void shouldHold(@InRange(min = ""-0.1234"", max = ""0.000123"") Float f) {\n            assertThat(f, allOf(greaterThanOrEqualTo(-0.1234F), lessThan(0.000123F)));\n        }\n']",Float;Float;Property;That;should;qual;Than;all;ranged;min,9.89530235528946e-10;8.149072527885437e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.346940502524376e-10;1.7462298274040222e-10;5.820766091346741e-11;0.0;-2.3283064365386963e-10,5,5,"[-5.897411346435547, -5.753636837005615, -6.354928016662598, -5.41925573348999, -5.468357086181641, -0.016438879072666168]",0.9836955070495605
3,"['    @Test public void leftOpenEndedRangedWrapperFloat() {\n        @Property public void shouldHold(@InRange(max = ""3.14"") Float f) {\n            assertThat(f, greaterThanOrEqualTo(RangeAttributes.minFloat()));\n            assertThat(f, lessThanOrEqualTo(3.14F));\n        }\n']",min;Range;anged;max;Open;Property;Attributes;Range;Than;Hold,1.1641532182693481e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.882974147796631, -5.743298530578613, -6.32570743560791, -5.396242141723633, -5.457070350646973, -0.016718987375497818]",0.9834200143814087
3,"['    @Test public void rightOpenEndedRangedWrapperFloat() {\n        @Property public void shouldHold(@InRange(min = ""-2.71"") Float f) {\n            assertThat(f, greaterThanOrEqualTo(-2.71F));\n            assertThat(f, lessThan(RangeAttributes.maxFloat()));\n        }\n']",Than;Or;In;Hold;qual;Range;Float;That;Float;min,1.0477378964424133e-09;6.984919309616089e-10;4.802132025361061e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.3096723705530167e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.885046005249023, -5.736440658569336, -6.324824333190918, -5.392358303070068, -5.451772689819336, -0.016778070479631424]",0.9833618998527527
3,"['    @Test public void shrinkingPrimitivePositiveFloat() {\n        @Property public void shouldHold(@InRange(minFloat = 5.123123F, maxFloat = 111.2222F) float f) {\n            values.add(f);\n\n            fail();\n        }\n']",Primitive;Property;add;Hold;Float;Range;In;should;max;Float,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.8982439041137695, -5.745580673217773, -6.349951267242432, -5.419717788696289, -5.477599143981934, -0.016429966315627098]",0.9837042689323425
3,"['  @Test\n  public void startFinishBundleDelegates() {\n    PushbackSideInputDoFnRunner runner = createRunner(ImmutableList.of(singletonView));\n\n    assertThat(underlying.started, is(true));\n    assertThat(underlying.finished, is(false));\n    runner.finishBundle();\n    assertThat(underlying.finished, is(true));\n  }\n']",Finish;Runner;finished;started;Delegates;Input;Side;create;Pushback;undle,6.984919309616089e-10;6.111804395914078e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.8661274909973145, -5.724948883056641, -6.332498073577881, -5.429043292999268, -5.457350254058838, -0.016665175557136536]",0.9834729433059692
3,"['  @Test\n  public void processElementSideInputNotReady() {\n    when(reader.isReady(Mockito.eq(singletonView), Mockito.any(BoundedWindow.class)))\n        .thenReturn(false);\n\n    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner =\n        createRunner(ImmutableList.of(singletonView));\n\n    WindowedValue<Integer> oneWindow =\n        WindowedValue.of(\n            2,\n            new Instant(-2),\n            new IntervalWindow(new Instant(-500L), new Instant(0L)),\n            PaneInfo.ON_TIME_AND_ONLY_FIRING);\n    Iterable<WindowedValue<Integer>> oneWindowPushback =\n        runner.processElementInReadyWindows(oneWindow);\n    assertThat(oneWindowPushback, containsInAnyOrder(oneWindow));\n    assertThat(underlying.inputElems, emptyIterable());\n  }\n']",Instant;Instant;Instant;Ready;Input;Window;underlying;ONLY;when;create,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.858438491821289, -5.690776824951172, -6.319586753845215, -5.397193908691406, -5.53431510925293, -0.01664934866130352]",0.9834885001182556
3,"['  @Test\n  public void processElementSideInputNotReadyMultipleWindows() {\n    when(reader.isReady(Mockito.eq(singletonView), Mockito.any(BoundedWindow.class)))\n        .thenReturn(false);\n\n    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner =\n        createRunner(ImmutableList.of(singletonView));\n\n    WindowedValue<Integer> multiWindow =\n        WindowedValue.of(\n            2,\n            new Instant(-2),\n            ImmutableList.of(\n                new IntervalWindow(new Instant(-500L), new Instant(0L)),\n                new IntervalWindow(BoundedWindow.TIMESTAMP_MIN_VALUE, new Instant(250L)),\n                GlobalWindow.INSTANCE),\n            PaneInfo.ON_TIME_AND_ONLY_FIRING);\n    Iterable<WindowedValue<Integer>> multiWindowPushback =\n        runner.processElementInReadyWindows(multiWindow);\n    assertThat(multiWindowPushback, equalTo(multiWindow.explodeWindows()));\n    assertThat(underlying.inputElems, emptyIterable());\n  }\n']",Pushback;Mockito;Pushback;Window;ON;Element;Elems;Windows;Immutable;Input,8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.2928149923682213e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.847883701324463, -5.66966438293457, -6.302102565765381, -5.3771491050720215, -5.526576519012451, -0.016910292208194733]",0.9832320213317871
3,"['  @Test\n  public void processElementSideInputNotReadySomeWindows() {\n    when(reader.isReady(Mockito.eq(singletonView), Mockito.eq(GlobalWindow.INSTANCE)))\n        .thenReturn(false);\n    when(reader.isReady(\n            Mockito.eq(singletonView),\n            org.mockito.AdditionalMatchers.not(Mockito.eq(GlobalWindow.INSTANCE))))\n        .thenReturn(true);\n\n    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner =\n        createRunner(ImmutableList.of(singletonView));\n\n    IntervalWindow littleWindow = new IntervalWindow(new Instant(-500L), new Instant(0L));\n    IntervalWindow bigWindow =\n        new IntervalWindow(BoundedWindow.TIMESTAMP_MIN_VALUE, new Instant(250L));\n    WindowedValue<Integer> multiWindow =\n        WindowedValue.of(\n            2,\n            new Instant(-2),\n            ImmutableList.of(littleWindow, bigWindow, GlobalWindow.INSTANCE),\n            PaneInfo.NO_FIRING);\n    Iterable<WindowedValue<Integer>> multiWindowPushback =\n        runner.processElementInReadyWindows(multiWindow);\n    assertThat(\n        multiWindowPushback,\n        containsInAnyOrder(WindowedValue.timestampedValueInGlobalWindow(2, new Instant(-2L))));\n    assertThat(\n        underlying.inputElems,\n        containsInAnyOrder(\n            WindowedValue.of(\n                2, new Instant(-2), ImmutableList.of(littleWindow), PaneInfo.NO_FIRING),\n            WindowedValue.of(2, new Instant(-2), ImmutableList.of(bigWindow), PaneInfo.NO_FIRING)));\n  }\n']",Element;Some;INSTANCE;FIRING;Instant;eq;In;Mockito;Input;Side,8.149072527885437e-10;5.820766091346741e-10;4.3655745685100555e-10;4.001776687800884e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.836215972900391, -5.6469926834106445, -6.269488334655762, -5.326756477355957, -5.515479564666748, -0.01737515814602375]",0.9827750325202942
3,"['  @Test\n  public void processElementSideInputReadyAllWindows() {\n    when(reader.isReady(Mockito.eq(singletonView), Mockito.any(BoundedWindow.class)))\n        .thenReturn(true);\n\n    ImmutableList<PCollectionView<?>> views = ImmutableList.of(singletonView);\n    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner = createRunner(views);\n\n    WindowedValue<Integer> multiWindow =\n        WindowedValue.of(\n            2,\n            new Instant(-2),\n            ImmutableList.of(\n                new IntervalWindow(new Instant(-500L), new Instant(0L)),\n                new IntervalWindow(BoundedWindow.TIMESTAMP_MIN_VALUE, new Instant(250L)),\n                GlobalWindow.INSTANCE),\n            PaneInfo.ON_TIME_AND_ONLY_FIRING);\n    Iterable<WindowedValue<Integer>> multiWindowPushback =\n        runner.processElementInReadyWindows(multiWindow);\n    assertThat(multiWindowPushback, emptyIterable());\n    assertThat(\n        underlying.inputElems,\n        containsInAnyOrder(ImmutableList.copyOf(multiWindow.explodeWindows()).toArray()));\n  }\n']",ON;Instant;Instant;Pushback;Interval;Immutable;Window;Windowed;Side;singleton,6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.582964953035116e-10;2.473825588822365e-10;2.4010660126805305e-10,5,5,"[-5.838653564453125, -5.658818244934082, -6.2882795333862305, -5.3585124015808105, -5.519725322723389, -0.017117967829108238]",0.9830278158187866
3,"[""  @Test\n  public void processElementNoSideInputs() {\n    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner = createRunner(ImmutableList.of());\n\n    WindowedValue<Integer> multiWindow =\n        WindowedValue.of(\n            2,\n            new Instant(-2),\n            ImmutableList.of(\n                new IntervalWindow(new Instant(-500L), new Instant(0L)),\n                new IntervalWindow(BoundedWindow.TIMESTAMP_MIN_VALUE, new Instant(250L)),\n                GlobalWindow.INSTANCE),\n            PaneInfo.ON_TIME_AND_ONLY_FIRING);\n    Iterable<WindowedValue<Integer>> multiWindowPushback =\n        runner.processElementInReadyWindows(multiWindow);\n    assertThat(multiWindowPushback, emptyIterable());\n    // Should preserve the compressed representation when there's no side inputs.\n    assertThat(underlying.inputElems, containsInAnyOrder(multiWindow));\n  }\n""]",TIME;compressed;Instant;ON;Should;Interval;Instant;IMESTAMP;inputs;MIN,1.280568540096283e-09;1.0477378964424133e-09;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.384208634495735e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.8569536209106445, -5.673016548156738, -6.320996284484863, -5.4046807289123535, -5.537334442138672, -0.01666623167693615]",0.9834718704223633
3,"['  @Test\n  public void testOnTimerCalled() {\n    PushbackSideInputDoFnRunner<Integer, Integer> runner = createRunner(ImmutableList.of());\n\n    String timerId = ""fooTimer"";\n    IntervalWindow window = new IntervalWindow(new Instant(4), new Instant(16));\n    Instant timestamp = new Instant(72);\n\n    // Mocking is not easily compatible with annotation analysis, so we manually record\n    // the method call.\n    runner.onTimer(timerId, window, new Instant(timestamp), TimeDomain.EVENT_TIME);\n\n    assertThat(\n        underlying.firedTimers,\n        contains(\n            TimerData.of(\n                timerId,\n                StateNamespaces.window(IntervalWindow.getCoder(), window),\n                timestamp,\n                TimeDomain.EVENT_TIME)));\n  }\n']",Pushback;alled;compatible;Timers;timestamp;Domain;Instant;runner;Instant;Timer,7.275957614183426e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.845794677734375, -5.69266939163208, -6.3032941818237305, -5.404049873352051, -5.508693695068359, -0.016782643273472786]",0.9833574295043945
3,"['  @Test\n  public void testValue() throws Exception {\n    ValueState<String> value = underTest.state(NAMESPACE_1, STRING_VALUE_ADDR);\n\n    // State instances are cached, but depend on the namespace.\n    assertThat(underTest.state(NAMESPACE_1, STRING_VALUE_ADDR), equalTo(value));\n    assertThat(underTest.state(NAMESPACE_2, STRING_VALUE_ADDR), not(equalTo(value)));\n\n    assertThat(value.read(), Matchers.nullValue());\n    value.write(""hello"");\n    assertThat(value.read(), equalTo(""hello""));\n    value.write(""world"");\n    assertThat(value.read(), equalTo(""world""));\n\n    value.clear();\n    assertThat(value.read(), Matchers.nullValue());\n    assertThat(underTest.state(NAMESPACE_1, STRING_VALUE_ADDR), equalTo(value));\n  }\n']",Value;VALUE;the;ACE;AMES;ACE;ADDR;Matchers;STRING;ADDR,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.6193447411060333e-10,5,5,"[-5.850373268127441, -5.747976779937744, -6.324933052062988, -5.393200397491455, -5.501066207885742, -0.01662648655474186]",0.9835110902786255
3,"['  @Test\n  public void testBag() throws Exception {\n    BagState<String> value = underTest.state(NAMESPACE_1, STRING_BAG_ADDR);\n\n    // State instances are cached, but depend on the namespace.\n    assertThat(value, equalTo(underTest.state(NAMESPACE_1, STRING_BAG_ADDR)));\n    assertThat(value, not(equalTo(underTest.state(NAMESPACE_2, STRING_BAG_ADDR))));\n\n    assertThat(value.read(), Matchers.emptyIterable());\n    value.add(""hello"");\n    assertThat(value.read(), containsInAnyOrder(""hello""));\n\n    value.add(""world"");\n    assertThat(value.read(), containsInAnyOrder(""hello"", ""world""));\n\n    value.clear();\n    assertThat(value.read(), Matchers.emptyIterable());\n    assertThat(underTest.state(NAMESPACE_1, STRING_BAG_ADDR), equalTo(value));\n  }\n']",ACE;namespace;Bag;AMES;ADDR;instances;hello;AMES;BA;hello,1.2223608791828156e-09;9.89530235528946e-10;5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.836594581604004, -5.732672691345215, -6.304018974304199, -5.365316390991211, -5.488821029663086, -0.016937484964728355]",0.9832051396369934
3,"['  @Test\n  public void testBagIsEmpty() throws Exception {\n    BagState<String> value = underTest.state(NAMESPACE_1, STRING_BAG_ADDR);\n\n    assertThat(value.isEmpty().read(), Matchers.is(true));\n    ReadableState<Boolean> readFuture = value.isEmpty();\n    value.add(""hello"");\n    assertThat(readFuture.read(), Matchers.is(false));\n\n    value.clear();\n    assertThat(readFuture.read(), Matchers.is(true));\n  }\n']",AMES;ADDR;ACE;ag;Bag;state;Boolean;under;hello;read,3.026798367500305e-09;2.6775524020195007e-09;2.3283064365386963e-09;2.0372681319713593e-09;1.1059455573558807e-09;6.984919309616089e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.888875961303711, -5.80574893951416, -6.38531494140625, -5.454864025115967, -5.505627632141113, -0.015931928530335426]",0.9841943383216858
3,"['  @Test\n  public void testMergeBagIntoSource() throws Exception {\n    BagState<String> bag1 = underTest.state(NAMESPACE_1, STRING_BAG_ADDR);\n    BagState<String> bag2 = underTest.state(NAMESPACE_2, STRING_BAG_ADDR);\n\n    bag1.add(""Hello"");\n    bag2.add(""World"");\n    bag1.add(""!"");\n\n    StateMerging.mergeBags(Arrays.asList(bag1, bag2), bag1);\n\n    // Reading the merged bag gets both the contents\n    assertThat(bag1.read(), containsInAnyOrder(""Hello"", ""World"", ""!""));\n    assertThat(bag2.read(), Matchers.emptyIterable());\n  }\n']",Hello;AMES;contents;World;Bag;read;State;BA;STRING;add,4.889443516731262e-09;2.0372681319713593e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09,5,5,"[-5.881527423858643, -5.792078971862793, -6.400373935699463, -5.430970191955566, -5.539370536804199, -0.01593732461333275]",0.9841890931129456
3,"['  @Test\n  public void testMergeBagIntoNewNamespace() throws Exception {\n    BagState<String> bag1 = underTest.state(NAMESPACE_1, STRING_BAG_ADDR);\n    BagState<String> bag2 = underTest.state(NAMESPACE_2, STRING_BAG_ADDR);\n    BagState<String> bag3 = underTest.state(NAMESPACE_3, STRING_BAG_ADDR);\n\n    bag1.add(""Hello"");\n    bag2.add(""World"");\n    bag1.add(""!"");\n\n    StateMerging.mergeBags(Arrays.asList(bag1, bag2, bag3), bag3);\n\n    // Reading the merged bag gets both the contents\n    assertThat(bag3.read(), containsInAnyOrder(""Hello"", ""World"", ""!""));\n    assertThat(bag1.read(), Matchers.emptyIterable());\n    assertThat(bag2.read(), Matchers.emptyIterable());\n  }\n']",Iterable;ACE;That;Exception;empty;bag;Reading;merged;Any;bag,1.3504177331924438e-08;9.604264050722122e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.83368444442749, -5.72700834274292, -6.322399139404297, -5.365784168243408, -5.495595455169678, -0.016900328919291496]",0.9832416772842407
3,"['  @Test\n  public void testSet() throws Exception {\n\n    SetState<String> value = underTest.state(NAMESPACE_1, STRING_SET_ADDR);\n\n    // State instances are cached, but depend on the namespace.\n    assertThat(value, equalTo(underTest.state(NAMESPACE_1, STRING_SET_ADDR)));\n    assertThat(value, not(equalTo(underTest.state(NAMESPACE_2, STRING_SET_ADDR))));\n\n    // empty\n    assertThat(value.read(), Matchers.emptyIterable());\n    assertFalse(value.contains(""A"").read());\n\n    // add\n    value.add(""A"");\n    value.add(""B"");\n    value.add(""A"");\n    assertFalse(value.addIfAbsent(""B"").read());\n    assertThat(value.read(), containsInAnyOrder(""A"", ""B""));\n\n    // remove\n    value.remove(""A"");\n    assertThat(value.read(), containsInAnyOrder(""B""));\n    value.remove(""C"");\n    assertThat(value.read(), containsInAnyOrder(""B""));\n\n    // contains\n    assertFalse(value.contains(""A"").read());\n    assertTrue(value.contains(""B"").read());\n    value.add(""C"");\n    value.add(""D"");\n\n    // readLater\n    assertThat(value.readLater().read(), containsInAnyOrder(""B"", ""C"", ""D""));\n    SetState<String> later = value.readLater();\n    assertThat(later.read(), hasItems(""C"", ""D""));\n    assertFalse(later.contains(""A"").read());\n\n    // clear\n    value.clear();\n    assertThat(value.read(), Matchers.emptyIterable());\n    assertThat(underTest.state(NAMESPACE_1, STRING_SET_ADDR), equalTo(value));\n  }\n']",cached;ADDR;ADDR;instances;the;State;Set;Set;under;empty,6.984919309616089e-10;4.220055416226387e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.964508555829525e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.8242974281311035, -5.683897972106934, -6.277926921844482, -5.313622951507568, -5.506410121917725, -0.017367074266076088]",0.9827828407287598
3,"['  @Test\n  public void testSetIsEmpty() throws Exception {\n\n    SetState<String> value = underTest.state(NAMESPACE_1, STRING_SET_ADDR);\n\n    assertThat(value.isEmpty().read(), Matchers.is(true));\n    ReadableState<Boolean> readFuture = value.isEmpty();\n    value.add(""hello"");\n    assertThat(readFuture.read(), Matchers.is(false));\n\n    value.clear();\n    assertThat(readFuture.read(), Matchers.is(true));\n  }\n']",ADDR;SET;hello;Readable;STRING;state;read;State;value;value,5.587935447692871e-09;1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;3.055902197957039e-10;2.3283064365386963e-10,5,5,"[-5.890230178833008, -5.792606353759766, -6.386604309082031, -5.461203575134277, -5.508430480957031, -0.015927469357848167]",0.984198808670044
3,"['  @Test\n  public void testMergeSetIntoSource() throws Exception {\n\n    SetState<String> set1 = underTest.state(NAMESPACE_1, STRING_SET_ADDR);\n    SetState<String> set2 = underTest.state(NAMESPACE_2, STRING_SET_ADDR);\n\n    set1.add(""Hello"");\n    set2.add(""Hello"");\n    set2.add(""World"");\n    set1.add(""!"");\n\n    StateMerging.mergeSets(Arrays.asList(set1, set2), set1);\n\n    // Reading the merged set gets both the contents\n    assertThat(set1.read(), containsInAnyOrder(""Hello"", ""World"", ""!""));\n    assertThat(set2.read(), Matchers.emptyIterable());\n  }\n']",contents;ACE;ADDR;Iterable;SET;Matchers;the;STRING;STRING;ADDR,2.3283064365386963e-09;1.979060471057892e-09;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;4.001776687800884e-10;3.7834979593753815e-10,5,5,"[-5.88620662689209, -5.772172927856445, -6.4036688804626465, -5.436153411865234, -5.555907726287842, -0.01589238829910755]",0.9842332005500793
3,"['  @Test\n  public void testMergeSetIntoNewNamespace() throws Exception {\n\n    SetState<String> set1 = underTest.state(NAMESPACE_1, STRING_SET_ADDR);\n    SetState<String> set2 = underTest.state(NAMESPACE_2, STRING_SET_ADDR);\n    SetState<String> set3 = underTest.state(NAMESPACE_3, STRING_SET_ADDR);\n\n    set1.add(""Hello"");\n    set2.add(""Hello"");\n    set2.add(""World"");\n    set1.add(""!"");\n\n    StateMerging.mergeSets(Arrays.asList(set1, set2, set3), set3);\n\n    // Reading the merged set gets both the contents\n    assertThat(set3.read(), containsInAnyOrder(""Hello"", ""World"", ""!""));\n    assertThat(set1.read(), Matchers.emptyIterable());\n    assertThat(set2.read(), Matchers.emptyIterable());\n  }\n']",the;Hello;contents;Namespace;ACE;merged;set;STRING;read;Set,2.2118911147117615e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.834989070892334, -5.71136999130249, -6.323728084564209, -5.371036052703857, -5.5033793449401855, -0.01688895933330059]",0.9832528829574585
3,"['  @Test\n  public void testMap() throws Exception {\n\n    MapState<String, Integer> value = underTest.state(NAMESPACE_1, STRING_MAP_ADDR);\n\n    // State instances are cached, but depend on the namespace.\n    assertThat(value, equalTo(underTest.state(NAMESPACE_1, STRING_MAP_ADDR)));\n    assertThat(value, not(equalTo(underTest.state(NAMESPACE_2, STRING_MAP_ADDR))));\n\n    // put\n    assertThat(value.entries().read(), Matchers.emptyIterable());\n    value.put(""A"", 1);\n    value.put(""B"", 2);\n    value.put(""A"", 11);\n    assertThat(value.putIfAbsent(""B"", 22).read(), equalTo(2));\n    assertThat(\n        value.entries().read(), containsInAnyOrder(MapEntry.of(""A"", 11), MapEntry.of(""B"", 2)));\n\n    // remove\n    value.remove(""A"");\n    assertThat(value.entries().read(), containsInAnyOrder(MapEntry.of(""B"", 2)));\n    value.remove(""C"");\n    assertThat(value.entries().read(), containsInAnyOrder(MapEntry.of(""B"", 2)));\n\n    // get\n    assertNull(value.get(""A"").read());\n    assertThat(value.get(""B"").read(), equalTo(2));\n    value.put(""C"", 3);\n    value.put(""D"", 4);\n    assertThat(value.get(""C"").read(), equalTo(3));\n\n    // iterate\n    value.put(""E"", 5);\n    value.remove(""C"");\n    assertThat(value.keys().read(), containsInAnyOrder(""B"", ""D"", ""E""));\n    assertThat(value.values().read(), containsInAnyOrder(2, 4, 5));\n    assertThat(\n        value.entries().read(),\n        containsInAnyOrder(MapEntry.of(""B"", 2), MapEntry.of(""D"", 4), MapEntry.of(""E"", 5)));\n\n    // readLater\n    assertThat(value.get(""B"").readLater().read(), equalTo(2));\n    assertNull(value.get(""A"").readLater().read());\n    assertThat(\n        value.entries().readLater().read(),\n        containsInAnyOrder(MapEntry.of(""B"", 2), MapEntry.of(""D"", 4), MapEntry.of(""E"", 5)));\n\n    // clear\n    value.clear();\n    assertThat(value.entries().read(), Matchers.emptyIterable());\n    assertThat(underTest.state(NAMESPACE_1, STRING_MAP_ADDR), equalTo(value));\n  }\n']",Map;namespace;Null;Map;under;MAP;AMES;MAP;ADDR;Entry,1.3969838619232178e-09;5.529727786779404e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.128661774098873e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.2919266484677792e-10;1.964508555829525e-10,5,5,"[-5.818230628967285, -5.690399169921875, -6.274003982543945, -5.310965538024902, -5.516427040100098, -0.017342587932944298]",0.982806921005249
3,"['  @Test\n  public void testCombiningValue() throws Exception {\n\n    GroupingState<Integer, Integer> value = underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR);\n\n    // State instances are cached, but depend on the namespace.\n    assertEquals(value, underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR));\n    assertFalse(value.equals(underTest.state(NAMESPACE_2, SUM_INTEGER_ADDR)));\n\n    assertThat(value.read(), equalTo(0));\n    value.add(2);\n    assertThat(value.read(), equalTo(2));\n\n    value.add(3);\n    assertThat(value.read(), equalTo(5));\n\n    value.clear();\n    assertThat(value.read(), equalTo(0));\n    assertThat(underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR), equalTo(value));\n  }\n']",State;AMES;Combining;Equals;Value;on;add;value;False;equal,4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6921043172478676e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.855653762817383, -5.73964786529541, -6.3190083503723145, -5.3817548751831055, -5.5045928955078125, -0.01668756827712059]",0.9834508895874023
3,"['  @Test\n  public void testCombiningIsEmpty() throws Exception {\n    GroupingState<Integer, Integer> value = underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR);\n\n    assertThat(value.isEmpty().read(), Matchers.is(true));\n    ReadableState<Boolean> readFuture = value.isEmpty();\n    value.add(5);\n    assertThat(readFuture.read(), Matchers.is(false));\n\n    value.clear();\n    assertThat(readFuture.read(), Matchers.is(true));\n  }\n']",under;ACE;INTEGER;Future;AMES;State;Grouping;Exception;read;add,2.7939677238464355e-09;1.862645149230957e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.9001145362854, -5.8317084312438965, -6.404263496398926, -5.476627826690674, -5.534843921661377, -0.015577660873532295]",0.9845430254936218
3,"['  @Test\n  public void testMergeCombiningValueIntoSource() throws Exception {\n    CombiningState<Integer, int[], Integer> value1 = underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR);\n    CombiningState<Integer, int[], Integer> value2 = underTest.state(NAMESPACE_2, SUM_INTEGER_ADDR);\n\n    value1.add(5);\n    value2.add(10);\n    value1.add(6);\n\n    assertThat(value1.read(), equalTo(11));\n    assertThat(value2.read(), equalTo(10));\n\n    // Merging clears the old values and updates the result value.\n    StateMerging.mergeCombiningValues(Arrays.asList(value1, value2), value1);\n\n    assertThat(value1.read(), equalTo(21));\n    assertThat(value2.read(), equalTo(0));\n  }\n']",Combining;List;ADDR;values;under;value;equal;Value;That;That,1.6880221664905548e-09;9.313225746154785e-10;7.275957614183426e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.837162494659424, -5.7082061767578125, -6.293580532073975, -5.352643013000488, -5.501180171966553, -0.017045896500349045]",0.983098566532135
3,"['  @Test\n  public void testMergeCombiningValueIntoNewNamespace() throws Exception {\n    CombiningState<Integer, int[], Integer> value1 = underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR);\n    CombiningState<Integer, int[], Integer> value2 = underTest.state(NAMESPACE_2, SUM_INTEGER_ADDR);\n    CombiningState<Integer, int[], Integer> value3 = underTest.state(NAMESPACE_3, SUM_INTEGER_ADDR);\n\n    value1.add(5);\n    value2.add(10);\n    value1.add(6);\n\n    StateMerging.mergeCombiningValues(Arrays.asList(value1, value2), value3);\n\n    // Merging clears the old values and updates the result value.\n    assertThat(value1.read(), equalTo(0));\n    assertThat(value2.read(), equalTo(0));\n    assertThat(value3.read(), equalTo(21));\n  }\n']",the;Merge;and;values;Merging;AMES;the;State;Combining;read,1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.055902197957039e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.822046279907227, -5.6923675537109375, -6.2744879722595215, -5.340981483459473, -5.479485511779785, -0.017328763380646706]",0.9828205108642578
3,"['  @Test\n  public void testWatermarkEarliestState() throws Exception {\n    WatermarkHoldState value = underTest.state(NAMESPACE_1, WATERMARK_EARLIEST_ADDR);\n\n    // State instances are cached, but depend on the namespace.\n    assertEquals(value, underTest.state(NAMESPACE_1, WATERMARK_EARLIEST_ADDR));\n    assertFalse(value.equals(underTest.state(NAMESPACE_2, WATERMARK_EARLIEST_ADDR)));\n\n    assertThat(value.read(), Matchers.nullValue());\n    value.add(new Instant(2000));\n    assertThat(value.read(), equalTo(new Instant(2000)));\n\n    value.add(new Instant(3000));\n    assertThat(value.read(), equalTo(new Instant(2000)));\n\n    value.add(new Instant(1000));\n    assertThat(value.read(), equalTo(new Instant(1000)));\n\n    value.clear();\n    assertThat(value.read(), equalTo(null));\n    assertThat(underTest.state(NAMESPACE_1, WATERMARK_EARLIEST_ADDR), equalTo(value));\n  }\n']",ACE;AMES;Instant;State;Watermark;State;AMES;depend;new;Watermark,9.313225746154785e-10;8.440110832452774e-10;5.238689482212067e-10;4.94765117764473e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.815889358520508, -5.657111644744873, -6.278009414672852, -5.399085521697998, -5.488498687744141, -0.017150545492768288]",0.9829956889152527
3,"['  @Test\n  public void testWatermarkLatestState() throws Exception {\n    WatermarkHoldState value = underTest.state(NAMESPACE_1, WATERMARK_LATEST_ADDR);\n\n    // State instances are cached, but depend on the namespace.\n    assertEquals(value, underTest.state(NAMESPACE_1, WATERMARK_LATEST_ADDR));\n    assertFalse(value.equals(underTest.state(NAMESPACE_2, WATERMARK_LATEST_ADDR)));\n\n    assertThat(value.read(), Matchers.nullValue());\n    value.add(new Instant(2000));\n    assertThat(value.read(), equalTo(new Instant(2000)));\n\n    value.add(new Instant(3000));\n    assertThat(value.read(), equalTo(new Instant(3000)));\n\n    value.add(new Instant(1000));\n    assertThat(value.read(), equalTo(new Instant(3000)));\n\n    value.clear();\n    assertThat(value.read(), equalTo(null));\n    assertThat(underTest.state(NAMESPACE_1, WATERMARK_LATEST_ADDR), equalTo(value));\n  }\n']",AMES;Instant;Instant;depend;ATEST;ATEST;ATER;Watermark;ACE;null,8.149072527885437e-10;6.693881005048752e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.829314231872559, -5.682035446166992, -6.299571990966797, -5.399593830108643, -5.495882987976074, -0.016948619857430458]",0.9831941723823547
3,"['  @Test\n  public void testWatermarkEndOfWindowState() throws Exception {\n    WatermarkHoldState value = underTest.state(NAMESPACE_1, WATERMARK_EOW_ADDR);\n\n    // State instances are cached, but depend on the namespace.\n    assertEquals(value, underTest.state(NAMESPACE_1, WATERMARK_EOW_ADDR));\n    assertFalse(value.equals(underTest.state(NAMESPACE_2, WATERMARK_EOW_ADDR)));\n\n    assertThat(value.read(), Matchers.nullValue());\n    value.add(new Instant(2000));\n    assertThat(value.read(), equalTo(new Instant(2000)));\n\n    value.clear();\n    assertThat(value.read(), equalTo(null));\n    assertThat(underTest.state(NAMESPACE_1, WATERMARK_EOW_ADDR), equalTo(value));\n  }\n']",Instant;are;under;ACE;new;add;instances;AMES;AMES;null,6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.840343475341797, -5.712549686431885, -6.308778762817383, -5.394659996032715, -5.488914489746094, -0.01684652827680111]",0.9832946062088013
3,"['  @Test\n  public void testWatermarkStateIsEmpty() throws Exception {\n    WatermarkHoldState value = underTest.state(NAMESPACE_1, WATERMARK_EARLIEST_ADDR);\n\n    assertThat(value.isEmpty().read(), Matchers.is(true));\n    ReadableState<Boolean> readFuture = value.isEmpty();\n    value.add(new Instant(1000));\n    assertThat(readFuture.read(), Matchers.is(false));\n\n    value.clear();\n    assertThat(readFuture.read(), Matchers.is(true));\n  }\n']",ADDR;Watermark;Boolean;EARLIEST;ACE;State;under;Matchers;read;Future,2.9103830456733704e-09;1.5425030142068863e-09;1.0477378964424133e-09;9.604264050722122e-10;9.313225746154785e-10;7.566995918750763e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.889248847961426, -5.763664245605469, -6.376491546630859, -5.471920013427734, -5.511564254760742, -0.015979677438735962]",0.984147310256958
3,"['  @Test\n  public void testSetReadable() throws Exception {\n    SetState<String> value = underTest.state(NAMESPACE_1, STRING_SET_ADDR);\n\n    // test contains\n    ReadableState<Boolean> readable = value.contains(""A"");\n    value.add(""A"");\n    assertFalse(readable.read());\n\n    // test addIfAbsent\n    value.addIfAbsent(""B"");\n    assertTrue(value.contains(""B"").read());\n  }\n']",under;state;Set;ADDR;State;Set;readable;read;contains;Readable,4.6566128730773926e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.917338848114014, -5.847560405731201, -6.405855178833008, -5.477084636688232, -5.512861728668213, -0.015567684546113014]",0.9845527410507202
3,"['  @Test\n  public void testMapReadable() throws Exception {\n    MapState<String, Integer> value = underTest.state(NAMESPACE_1, STRING_MAP_ADDR);\n\n    // test iterable, should just return a iterable view of the values contained in this map.\n    // The iterable is backed by the map, so changes to the map are reflected in the iterable.\n    ReadableState<Iterable<String>> keys = value.keys();\n    ReadableState<Iterable<Integer>> values = value.values();\n    ReadableState<Iterable<Map.Entry<String, Integer>>> entries = value.entries();\n    value.put(""A"", 1);\n    assertFalse(Iterables.isEmpty(keys.read()));\n    assertFalse(Iterables.isEmpty(values.read()));\n    assertFalse(Iterables.isEmpty(entries.read()));\n\n    // test get\n    ReadableState<Integer> get = value.get(""B"");\n    value.put(""B"", 2);\n    assertNull(get.read());\n\n    // test addIfAbsent\n    value.putIfAbsent(""C"", 3);\n    assertThat(value.get(""C"").read(), equalTo(3));\n  }\n']",The;backed;map;Iterables;keys;Map;so;should;Absent;MAP,6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.885900020599365, -5.763922691345215, -6.380800724029541, -5.390652656555176, -5.57608699798584, -0.01608596369624138]",0.9840427041053772
3,"['  @Test\n  public void testBagWithBadCoderEquality() throws Exception {\n    // Ensure two instances of the bad coder are distinct; models user who fails to\n    // override equals() or inherit from CustomCoder for StructuredCoder\n    assertThat(\n        new StringCoderWithIdentityEquality(), not(equalTo(new StringCoderWithIdentityEquality())));\n\n    BagState<String> state1 = underTest.state(NAMESPACE_1, STRING_BAG_ADDR1);\n    state1.add(""hello"");\n\n    BagState<String> state2 = underTest.state(NAMESPACE_1, STRING_BAG_ADDR2);\n    assertThat(state2.read(), containsInAnyOrder(""hello""));\n  }\n']",quality;ag;fails;BA;models;contains;AMES;who;Bad;under,2.561137080192566e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09,5,5,"[-5.878421783447266, -5.74104118347168, -6.370522499084473, -5.428078651428223, -5.522544860839844, -0.016240211203694344]",0.983890950679779
3,"['  @Test\n  public void testTrivialProcessFnPropagatesOutputWindowAndTimestamp() throws Exception {\n    // Tests that ProcessFn correctly propagates the window and timestamp of the element\n    // inside the KeyedWorkItem.\n    // The underlying DoFn is actually monolithic, so this doesn\'t test splitting.\n    DoFn<Integer, String> fn = new ToStringFn();\n\n    Instant base = Instant.now();\n\n    IntervalWindow w =\n        new IntervalWindow(\n            base.minus(Duration.standardMinutes(1)), base.plus(Duration.standardMinutes(1)));\n\n    ProcessFnTester<Integer, String, SomeRestriction, Void, SomeRestrictionTracker> tester =\n        new ProcessFnTester<>(\n            base,\n            fn,\n            BigEndianIntegerCoder.of(),\n            SerializableCoder.of(SomeRestriction.class),\n            MAX_OUTPUTS_PER_BUNDLE,\n            MAX_BUNDLE_DURATION);\n    tester.startElement(\n        WindowedValue.of(\n            KV.of(42, new SomeRestriction()),\n            base,\n            Collections.singletonList(w),\n            PaneInfo.ON_TIME_AND_ONLY_FIRING));\n\n    assertEquals(\n        Arrays.asList(\n            TimestampedValue.of(""42a"", base),\n            TimestampedValue.of(""42b"", base),\n            TimestampedValue.of(""42c"", base)),\n        tester.peekOutputElementsInWindow(w));\n  }\n']",timestamp;OUTPUT;propagates;Duration;the;the;FIRING;the;correctly;of,1.2223608791828156e-09;1.0186340659856796e-09;8.440110832452774e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.857570171356201, -5.643124580383301, -6.327831268310547, -5.4141526222229, -5.576047897338867, -0.016562938690185547]",0.9835734963417053
3,"['  @Test\n  public void testUpdatesWatermark() throws Exception {\n    DoFn<Instant, String> fn = new WatermarkUpdateFn();\n    Instant base = Instant.now();\n\n    ProcessFnTester<Instant, String, OffsetRange, Long, OffsetRangeTracker> tester =\n        new ProcessFnTester<>(\n            base,\n            fn,\n            InstantCoder.of(),\n            SerializableCoder.of(OffsetRange.class),\n            3,\n            MAX_BUNDLE_DURATION);\n\n    tester.startElement(base, new OffsetRange(0, 8));\n    assertThat(tester.takeOutputElements(), hasItems(""0"", ""1"", ""2""));\n    assertEquals(base.plus(Duration.standardSeconds(2)), tester.getWatermarkHold());\n\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));\n    assertThat(tester.takeOutputElements(), hasItems(""3"", ""4"", ""5""));\n    assertEquals(base.plus(Duration.standardSeconds(5)), tester.getWatermarkHold());\n\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));\n    assertThat(tester.takeOutputElements(), hasItems(""6"", ""7""));\n    assertEquals(null, tester.getWatermarkHold());\n  }\n']",Offset;base;URATION;Instant;oder;Duration;Second;base;Hold;standard,1.280568540096283e-09;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.815206527709961, -5.640049457550049, -6.254234790802002, -5.346897602081299, -5.498743534088135, -0.017463255673646927]",0.9826883673667908
3,"['  @Test\n  public void testResumeSetsTimer() throws Exception {\n    DoFn<Integer, String> fn = new SelfInitiatedResumeFn();\n    Instant base = Instant.now();\n    ProcessFnTester<Integer, String, SomeRestriction, Void, SomeRestrictionTracker> tester =\n        new ProcessFnTester<>(\n            base,\n            fn,\n            BigEndianIntegerCoder.of(),\n            SerializableCoder.of(SomeRestriction.class),\n            MAX_OUTPUTS_PER_BUNDLE,\n            MAX_BUNDLE_DURATION);\n\n    tester.startElement(42, new SomeRestriction());\n    assertThat(tester.takeOutputElements(), contains(""42""));\n\n    // Should resume after 5 seconds: advancing by 3 seconds should have no effect.\n    assertFalse(tester.advanceProcessingTimeBy(Duration.standardSeconds(3)));\n    assertTrue(tester.takeOutputElements().isEmpty());\n\n    // 6 seconds should be enough  should invoke the fn again.\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(3)));\n    assertThat(tester.takeOutputElements(), contains(""42""));\n\n    // Should again resume after 5 seconds: advancing by 3 seconds should again have no effect.\n    assertFalse(tester.advanceProcessingTimeBy(Duration.standardSeconds(3)));\n    assertTrue(tester.takeOutputElements().isEmpty());\n\n    // 6 seconds should again be enough.\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(3)));\n    assertThat(tester.takeOutputElements(), contains(""42""));\n  }\n']",Restriction;Should;enough;Void;Process;OUTPUT;Instant;Resume;seconds;start,5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10,5,5,"[-5.829495429992676, -5.644998550415039, -6.33280086517334, -5.459620475769043, -5.605433464050293, -0.016317149624228477]",0.9838152527809143
3,"['  @Test\n  public void testResumeCarriesOverState() throws Exception {\n    DoFn<Integer, String> fn = new CounterFn(1);\n    Instant base = Instant.now();\n    ProcessFnTester<Integer, String, OffsetRange, Long, OffsetRangeTracker> tester =\n        new ProcessFnTester<>(\n            base,\n            fn,\n            BigEndianIntegerCoder.of(),\n            SerializableCoder.of(OffsetRange.class),\n            MAX_OUTPUTS_PER_BUNDLE,\n            MAX_BUNDLE_DURATION);\n\n    tester.startElement(42, new OffsetRange(0, 3));\n    assertThat(tester.takeOutputElements(), contains(""42""));\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));\n    assertThat(tester.takeOutputElements(), contains(""43""));\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));\n    assertThat(tester.takeOutputElements(), contains(""44""));\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));\n    // After outputting all 3 items, should not output anything more.\n    assertEquals(0, tester.takeOutputElements().size());\n    // Should also not ask to resume.\n    assertFalse(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));\n  }\n']",Carries;OUTPUT;Duration;Do;Endian;now;Offset;Processing;new;ask,1.5133991837501526e-09;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.5838532969355583e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.84797477722168, -5.665818214416504, -6.343148231506348, -5.4245710372924805, -5.576834678649902, -0.016432546079158783]",0.9837017059326172
3,"['  @Test\n  public void testCheckpointsAfterNumOutputs() throws Exception {\n    int max = 100;\n    DoFn<Integer, String> fn = new CounterFn(Integer.MAX_VALUE);\n    Instant base = Instant.now();\n    int baseIndex = 42;\n\n    ProcessFnTester<Integer, String, OffsetRange, Long, OffsetRangeTracker> tester =\n        new ProcessFnTester<>(\n            base,\n            fn,\n            BigEndianIntegerCoder.of(),\n            SerializableCoder.of(OffsetRange.class),\n            max,\n            MAX_BUNDLE_DURATION);\n\n    List<String> elements;\n\n    // Create an fn that attempts to 2x output more than checkpointing allows.\n    tester.startElement(baseIndex, new OffsetRange(0, 2 * max + max / 2));\n    elements = tester.takeOutputElements();\n    assertEquals(max, elements.size());\n    // Should output the range [0, max)\n    assertThat(elements, hasItem(String.valueOf(baseIndex)));\n    assertThat(elements, hasItem(String.valueOf(baseIndex + max - 1)));\n\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));\n    elements = tester.takeOutputElements();\n    assertEquals(max, elements.size());\n    // Should output the range [max, 2*max)\n    assertThat(elements, hasItem(String.valueOf(baseIndex + max)));\n    assertThat(elements, hasItem(String.valueOf(baseIndex + 2 * max - 1)));\n\n    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));\n    elements = tester.takeOutputElements();\n    assertEquals(max / 2, elements.size());\n    // Should output the range [2*max, 2*max + max/2)\n    assertThat(elements, hasItem(String.valueOf(baseIndex + 2 * max)));\n    assertThat(elements, hasItem(String.valueOf(baseIndex + 2 * max + max / 2 - 1)));\n    assertThat(elements, not(hasItem((String.valueOf(baseIndex + 2 * max + max / 2)))));\n  }\n']",UN;MAX;Counter;Checkpoints;Output;new;attempts;Num;fn;fn,2.0954757928848267e-09;1.57160684466362e-09;1.0186340659856796e-09;9.313225746154785e-10;9.022187441587448e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.840093612670898, -5.654933929443359, -6.291240692138672, -5.366806507110596, -5.5443572998046875, -0.01698307693004608]",0.9831603169441223
3,"[""  @Test\n  public void testCheckpointsAfterDuration() throws Exception {\n    // Don't bound number of outputs.\n    int max = Integer.MAX_VALUE;\n    // But bound bundle duration - the bundle should terminate.\n    Duration maxBundleDuration = Duration.standardSeconds(1);\n    // Create an fn that attempts to 2x output more than checkpointing allows.\n    DoFn<Integer, String> fn = new CounterFn(Integer.MAX_VALUE);\n    Instant base = Instant.now();\n    int baseIndex = 42;\n\n    ProcessFnTester<Integer, String, OffsetRange, Long, OffsetRangeTracker> tester =\n        new ProcessFnTester<>(\n            base,\n            fn,\n            BigEndianIntegerCoder.of(),\n            SerializableCoder.of(OffsetRange.class),\n            max,\n            maxBundleDuration);\n\n    List<String> elements;\n\n    tester.startElement(baseIndex, new OffsetRange(0, Long.MAX_VALUE));\n    // Bundle should terminate, and should do at least some processing.\n    elements = tester.takeOutputElements();\n    assertFalse(elements.isEmpty());\n    // Bundle should have run for at least the requested duration.\n    assertThat(\n        Instant.now().getMillis() - base.getMillis(),\n        greaterThanOrEqualTo(maxBundleDuration.getMillis()));\n  }\n""]",base;bound;duration;Duration;Duration;than;attempts;checkpointing;terminate;Duration,7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.854617118835449, -5.656432628631592, -6.350348949432373, -5.475113868713379, -5.591253757476807, -0.016157636418938637]",0.9839721918106079
3,"['  @Test\n  public void testInvokesLifecycleMethods() throws Exception {\n    DoFn<Integer, String> fn = new LifecycleVerifyingFn();\n    try (ProcessFnTester<Integer, String, SomeRestriction, Void, SomeRestrictionTracker> tester =\n        new ProcessFnTester<>(\n            Instant.now(),\n            fn,\n            BigEndianIntegerCoder.of(),\n            SerializableCoder.of(SomeRestriction.class),\n            MAX_OUTPUTS_PER_BUNDLE,\n            MAX_BUNDLE_DURATION)) {\n      tester.startElement(42, new SomeRestriction());\n    }\n  }\n']",Restriction;LE;now;ester;Some;Restriction;Invokes;MAX;LE;Tracker,1.4551915228366852e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.2928149923682213e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.1827872842550278e-10,5,5,"[-5.8632965087890625, -5.736516952514648, -6.3129987716674805, -5.385324478149414, -5.50014591217041, -0.016688505187630653]",0.9834501147270203
3,"['  @Test\n  public void beforeEndOfGlobalWindowSame() {\n    FixedWindows windowFn = FixedWindows.of(Duration.standardMinutes(5));\n    Duration allowedLateness = Duration.standardMinutes(2);\n    WindowingStrategy<?, ?> strategy =\n        WindowingStrategy.globalDefault()\n            .withWindowFn(windowFn)\n            .withAllowedLateness(allowedLateness);\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(10));\n    assertThat(\n        LateDataUtils.garbageCollectionTime(window, strategy),\n        equalTo(window.maxTimestamp().plus(allowedLateness)));\n  }\n']",plus;End;Duration;Lateness;Global;Duration;Windowing;Lateness;Minutes;Duration,1.862645149230957e-09;8.731149137020111e-10;8.440110832452774e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.43833414465189e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.864187717437744, -5.651503086090088, -6.329082012176514, -5.45367956161499, -5.522031784057617, -0.016549687832593918]",0.9835864901542664
3,"['  @Test\n  public void garbageCollectionTimeAfterEndOfGlobalWindow() {\n    FixedWindows windowFn = FixedWindows.of(Duration.standardMinutes(5));\n    WindowingStrategy<?, ?> strategy = WindowingStrategy.globalDefault().withWindowFn(windowFn);\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(BoundedWindow.TIMESTAMP_MAX_VALUE));\n    assertThat(window.maxTimestamp(), equalTo(GlobalWindow.INSTANCE.maxTimestamp()));\n    assertThat(\n        LateDataUtils.garbageCollectionTime(window, strategy),\n        equalTo(GlobalWindow.INSTANCE.maxTimestamp()));\n  }\n']",Windowing;global;Windows;Time;Window;Default;End;Window;strategy;with,1.2514647096395493e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.846894264221191, -5.624212741851807, -6.3375630378723145, -5.500490188598633, -5.523407936096191, -0.01647886447608471]",0.9836561679840088
3,"['  @Test\n  public void garbageCollectionTimeAfterEndOfGlobalWindowWithLateness() {\n    FixedWindows windowFn = FixedWindows.of(Duration.standardMinutes(5));\n    Duration allowedLateness = Duration.millis(Long.MAX_VALUE);\n    WindowingStrategy<?, ?> strategy =\n        WindowingStrategy.globalDefault()\n            .withWindowFn(windowFn)\n            .withAllowedLateness(allowedLateness);\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(-100));\n    assertThat(\n        window.maxTimestamp().plus(allowedLateness),\n        Matchers.greaterThan(GlobalWindow.INSTANCE.maxTimestamp()));\n    assertThat(\n        LateDataUtils.garbageCollectionTime(window, strategy),\n        equalTo(GlobalWindow.INSTANCE.maxTimestamp()));\n  }\n']",standard;Lateness;Lateness;Minutes;Window;Duration;of;Windows;greater;Late,1.862645149230957e-09;1.3969838619232178e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.845599174499512, -5.637125015258789, -6.307680606842041, -5.461585521697998, -5.497360706329346, -0.016762128099799156]",0.9833776950836182
3,"['  @Test\n  public void testStability() {\n    StateNamespace global = StateNamespaces.global();\n    StateNamespace intervalWindow =\n        StateNamespaces.window(intervalCoder, intervalWindow(1000, 87392));\n    StateNamespace intervalWindowAndTrigger =\n        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(1000, 87392), 57);\n    StateNamespace globalWindow =\n        StateNamespaces.window(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE);\n    StateNamespace globalWindowAndTrigger =\n        StateNamespaces.windowAndTrigger(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE, 12);\n\n    assertEquals(""/"", global.stringKey());\n    assertEquals(""/gAAAAAABVWD4ogU/"", intervalWindow.stringKey());\n    assertEquals(""/gAAAAAABVWD4ogU/1L/"", intervalWindowAndTrigger.stringKey());\n    assertEquals(""//"", globalWindow.stringKey());\n    assertEquals(""//C/"", globalWindowAndTrigger.stringKey());\n  }\n']",Window;global;AAAAAA;og;Trigger;Window;Namespaces;Window;Namespaces;interval,9.022187441587448e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.8221755027771, -5.667548656463623, -6.265719890594482, -5.319619655609131, -5.476196765899658, -0.0175507590174675]",0.9826023578643799
3,"['  @Test\n  public void testIntervalWindowPrefixing() {\n    StateNamespace window = StateNamespaces.window(intervalCoder, intervalWindow(1000, 87392));\n    StateNamespace windowAndTrigger =\n        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(1000, 87392), 57);\n    assertThat(windowAndTrigger.stringKey(), Matchers.startsWith(window.stringKey()));\n    assertThat(\n        StateNamespaces.global().stringKey(),\n        Matchers.not(Matchers.startsWith(window.stringKey())));\n  }\n']",Prefixing;Trigger;Namespaces;window;window;interval;State;State;interval;window,1.6298145055770874e-09;1.1641532182693481e-09;7.421476766467094e-10;7.275957614183426e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.855658054351807, -5.702041149139404, -6.310409069061279, -5.39113187789917, -5.4745707511901855, -0.016910996288061142]",0.9832310676574707
3,"['  @Test\n  public void testGlobalWindowPrefixing() {\n    StateNamespace window =\n        StateNamespaces.window(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE);\n    StateNamespace windowAndTrigger =\n        StateNamespaces.windowAndTrigger(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE, 57);\n    assertThat(windowAndTrigger.stringKey(), Matchers.startsWith(window.stringKey()));\n    assertThat(\n        StateNamespaces.global().stringKey(),\n        Matchers.not(Matchers.startsWith(window.stringKey())));\n  }\n']",Window;INSTANCE;Namespaces;INSTANCE;Global;global;window;State;Namespaces;Matchers,1.1641532182693481e-09;7.566995918750763e-10;5.966285243630409e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.128661774098873e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.853623390197754, -5.7323222160339355, -6.312875270843506, -5.385327339172363, -5.467319011688232, -0.01686926744878292]",0.9832723140716553
3,"['  @Test\n  public void testFromStringGlobal() {\n    assertStringKeyRoundTrips(intervalCoder, StateNamespaces.global());\n  }\n']",Namespaces;Round;Key;Global;interval;From;oder;global;State;Trips,1.30385160446167e-08;3.725290298461914e-09;1.862645149230957e-09;-1.6298145055770874e-09;-2.3283064365386963e-09;-3.725290298461914e-09;-7.450580596923828e-09;-7.450580596923828e-09;-9.313225746154785e-09;-1.30385160446167e-08,5,5,"[-5.942800998687744, -5.892117500305176, -6.439600944519043, -5.549379348754883, -5.464044570922852, -0.01522432453930378]",0.984890878200531
3,"['  @Test\n  public void testFromStringIntervalWindow() {\n    assertStringKeyRoundTrips(\n        intervalCoder, StateNamespaces.window(intervalCoder, intervalWindow(1000, 8000)));\n    assertStringKeyRoundTrips(\n        intervalCoder, StateNamespaces.window(intervalCoder, intervalWindow(1000, 8000)));\n\n    assertStringKeyRoundTrips(\n        intervalCoder,\n        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(1000, 8000), 18));\n    assertStringKeyRoundTrips(\n        intervalCoder,\n        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(1000, 8000), 19));\n    assertStringKeyRoundTrips(\n        intervalCoder,\n        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(2000, 8000), 19));\n  }\n']",Round;Interval;Round;interval;Key;interval;Round;oder;interval;window,1.1641532182693481e-09;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.836449146270752, -5.670259952545166, -6.258528232574463, -5.325092792510986, -5.464472770690918, -0.017535531893372536]",0.9826173186302185
3,"['  @Test\n  public void testFromStringGlobalWindow() {\n    assertStringKeyRoundTrips(GlobalWindow.Coder.INSTANCE, StateNamespaces.global());\n    assertStringKeyRoundTrips(\n        GlobalWindow.Coder.INSTANCE,\n        StateNamespaces.window(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE));\n    assertStringKeyRoundTrips(\n        GlobalWindow.Coder.INSTANCE,\n        StateNamespaces.windowAndTrigger(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE, 18));\n  }\n']",Round;oder;Window;INSTANCE;INSTANCE;oder;Window;Window;INSTANCE;Window,2.3283064365386963e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.880637168884277, -5.743551731109619, -6.35154914855957, -5.426541328430176, -5.501353740692139, -0.01635291986167431]",0.9837800860404968
3,"['  @Test\n  public void testValueEquality() {\n    StateTag<?> fooVarInt1 = StateTags.value(""foo"", VarIntCoder.of());\n    StateTag<?> fooVarInt2 = StateTags.value(""foo"", VarIntCoder.of());\n    StateTag<?> fooBigEndian = StateTags.value(""foo"", BigEndianIntegerCoder.of());\n    StateTag<?> barVarInt = StateTags.value(""bar"", VarIntCoder.of());\n\n    assertEquals(fooVarInt1, fooVarInt2);\n    assertNotEquals(fooVarInt1, fooBigEndian);\n    assertNotEquals(fooVarInt1, barVarInt);\n  }\n']",foo;Value;Tags;Var;bar;Tags;State;foo;foo;Var,9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.41970007866621e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.873741149902344, -5.745038986206055, -6.365536689758301, -5.431365966796875, -5.5128278732299805, -0.01627422496676445]",0.9838575124740601
3,"['  @Test\n  public void testBagEquality() {\n    StateTag<?> fooVarInt1 = StateTags.bag(""foo"", VarIntCoder.of());\n    StateTag<?> fooVarInt2 = StateTags.bag(""foo"", VarIntCoder.of());\n    StateTag<?> fooBigEndian = StateTags.bag(""foo"", BigEndianIntegerCoder.of());\n    StateTag<?> barVarInt = StateTags.bag(""bar"", VarIntCoder.of());\n\n    assertEquals(fooVarInt1, fooVarInt2);\n    assertNotEquals(fooVarInt1, fooBigEndian);\n    assertNotEquals(fooVarInt1, barVarInt);\n  }\n']",Big;Endian;bag;bag;Tag;foo;Tags;foo;Tags;Var,9.313225746154785e-10;7.8580342233181e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.878523826599121, -5.763581275939941, -6.377431869506836, -5.427701473236084, -5.51547908782959, -0.016185786575078964]",0.9839445948600769
3,"['  @Test\n  public void testSetEquality() {\n    StateTag<?> fooVarInt1 = StateTags.set(""foo"", VarIntCoder.of());\n    StateTag<?> fooVarInt2 = StateTags.set(""foo"", VarIntCoder.of());\n    StateTag<?> fooBigEndian = StateTags.set(""foo"", BigEndianIntegerCoder.of());\n    StateTag<?> barVarInt = StateTags.set(""bar"", VarIntCoder.of());\n\n    assertEquals(fooVarInt1, fooVarInt2);\n    assertNotEquals(fooVarInt1, fooBigEndian);\n    assertNotEquals(fooVarInt1, barVarInt);\n  }\n']",Set;foo;foo;Tag;set;Int;State;oder;oder;Var,9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.255546860396862e-10;2.1100277081131935e-10,5,5,"[-5.868124008178711, -5.730310916900635, -6.3574442863464355, -5.422290325164795, -5.512217998504639, -0.016395840793848038]",0.9837378263473511
3,"['  @Test\n  public void testMapEquality() {\n    StateTag<?> fooStringVarInt1 = StateTags.map(""foo"", StringUtf8Coder.of(), VarIntCoder.of());\n    StateTag<?> fooStringVarInt2 = StateTags.map(""foo"", StringUtf8Coder.of(), VarIntCoder.of());\n    StateTag<?> fooStringBigEndian =\n        StateTags.map(""foo"", StringUtf8Coder.of(), BigEndianIntegerCoder.of());\n    StateTag<?> fooVarIntBigEndian =\n        StateTags.map(""foo"", VarIntCoder.of(), BigEndianIntegerCoder.of());\n    StateTag<?> barStringVarInt = StateTags.map(""bar"", StringUtf8Coder.of(), VarIntCoder.of());\n\n    assertEquals(fooStringVarInt1, fooStringVarInt2);\n    assertNotEquals(fooStringVarInt1, fooStringBigEndian);\n    assertNotEquals(fooStringBigEndian, fooVarIntBigEndian);\n    assertNotEquals(fooStringVarInt1, fooVarIntBigEndian);\n    assertNotEquals(fooStringVarInt1, barStringVarInt);\n  }\n']",State;Endian;State;of;map;oder;Tags;Tag;Var;State,4.802132025361061e-10;4.001776687800884e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.834043502807617, -5.6967878341674805, -6.310121536254883, -5.3358378410339355, -5.509186744689941, -0.0171116404235363]",0.9830339550971985
3,"['  @Test\n  public void testWatermarkBagEquality() {\n    StateTag<?> foo1 = StateTags.watermarkStateInternal(""foo"", TimestampCombiner.EARLIEST);\n    StateTag<?> foo2 = StateTags.watermarkStateInternal(""foo"", TimestampCombiner.EARLIEST);\n    StateTag<?> bar = StateTags.watermarkStateInternal(""bar"", TimestampCombiner.EARLIEST);\n\n    StateTag<?> bar2 = StateTags.watermarkStateInternal(""bar"", TimestampCombiner.LATEST);\n\n    // Same id, same fn.\n    assertEquals(foo1, foo2);\n    // Different id, same fn.\n    assertNotEquals(foo1, bar);\n    // Same id, different fn.\n    assertEquals(bar, bar2);\n  }\n']",Timestamp;EARLIEST;EARLIEST;Timestamp;id;foo;bar;Combiner;foo;Timestamp,1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;8.440110832452774e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.866644382476807, -5.74995231628418, -6.343395709991455, -5.415613651275635, -5.513089179992676, -0.016387397423386574]",0.9837461709976196
3,"['  @Test\n  public void testCombiningValueEquality() {\n    Combine.BinaryCombineIntegerFn maxFn = Max.ofIntegers();\n    Coder<Integer> input1 = VarIntCoder.of();\n    Coder<Integer> input2 = BigEndianIntegerCoder.of();\n    Combine.BinaryCombineIntegerFn minFn = Min.ofIntegers();\n\n    StateTag<?> fooCoder1Max1 = StateTags.combiningValueFromInputInternal(""foo"", input1, maxFn);\n    StateTag<?> fooCoder1Max2 = StateTags.combiningValueFromInputInternal(""foo"", input1, maxFn);\n    StateTag<?> fooCoder1Min = StateTags.combiningValueFromInputInternal(""foo"", input1, minFn);\n\n    StateTag<?> fooCoder2Max = StateTags.combiningValueFromInputInternal(""foo"", input2, maxFn);\n    StateTag<?> barCoder1Max = StateTags.combiningValueFromInputInternal(""bar"", input1, maxFn);\n\n    // Same name, coder and combineFn\n    assertEquals(fooCoder1Max1, fooCoder1Max2);\n    assertEquals(\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max2));\n\n    // Different combineFn, but we treat them as equal since we only serialize the bits.\n    assertEquals(fooCoder1Max1, fooCoder1Min);\n    assertEquals(\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Min));\n\n    // Different input coder coder.\n    assertNotEquals(fooCoder1Max1, fooCoder2Max);\n    assertNotEquals(\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),\n        StateTags.convertToBagTagInternal((StateTag) fooCoder2Max));\n\n    // These StateTags have different IDs.\n    assertNotEquals(fooCoder1Max1, barCoder1Max);\n    assertNotEquals(\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),\n        StateTags.convertToBagTagInternal((StateTag) barCoder1Max));\n  }\n']",Min;the;Combining;min;we;Combine;Different;Combine;as;Max,5.820766091346741e-10;5.529727786779404e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.862280368804932, -5.66988468170166, -6.3788838386535645, -5.4206156730651855, -5.589982032775879, -0.016281377524137497]",0.9838504195213318
3,"['  @Test\n  public void testCombiningValueWithContextEquality() {\n    CoderRegistry registry = CoderRegistry.createDefault();\n\n    Combine.BinaryCombineIntegerFn maxFn = Max.ofIntegers();\n    Combine.BinaryCombineIntegerFn minFn = Min.ofIntegers();\n\n    Coder<int[]> accum1 = maxFn.getAccumulatorCoder(registry, VarIntCoder.of());\n    Coder<int[]> accum2 = minFn.getAccumulatorCoder(registry, BigEndianIntegerCoder.of());\n\n    StateTag<?> fooCoder1Max1 =\n        StateTags.combiningValueWithContext(""foo"", accum1, CombineFnUtil.toFnWithContext(maxFn));\n    StateTag<?> fooCoder1Max2 =\n        StateTags.combiningValueWithContext(""foo"", accum1, CombineFnUtil.toFnWithContext(maxFn));\n    StateTag<?> fooCoder1Min =\n        StateTags.combiningValueWithContext(""foo"", accum1, CombineFnUtil.toFnWithContext(minFn));\n\n    StateTag<?> fooCoder2Max =\n        StateTags.combiningValueWithContext(""foo"", accum2, CombineFnUtil.toFnWithContext(maxFn));\n    StateTag<?> barCoder1Max =\n        StateTags.combiningValueWithContext(""bar"", accum1, CombineFnUtil.toFnWithContext(maxFn));\n\n    // Same name, coder and combineFn\n    assertEquals(fooCoder1Max1, fooCoder1Max2);\n    assertEquals(\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max2));\n    // Different combineFn, but we treat them as equal since we only serialize the bits.\n    assertEquals(fooCoder1Max1, fooCoder1Min);\n    assertEquals(\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Min));\n\n    // Different input coder coder.\n    assertNotEquals(fooCoder1Max1, fooCoder2Max);\n    assertNotEquals(\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),\n        StateTags.convertToBagTagInternal((StateTag) fooCoder2Max));\n\n    // These StateTags have different IDs.\n    assertNotEquals(fooCoder1Max1, barCoder1Max);\n    assertNotEquals(\n        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),\n        StateTags.convertToBagTagInternal((StateTag) barCoder1Max));\n  }\n']",quality;foo;Combining;foo;Context;of;oder;Tags;Tag;Registry,1.0477378964424133e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.582964953035116e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1100277081131935e-10,5,5,"[-5.866685390472412, -5.681764125823975, -6.372768878936768, -5.395122051239014, -5.587150573730469, -0.016364647075533867]",0.9837684035301208
3,"['  @Test\n  public void testTimerDataCoder() throws Exception {\n    CoderProperties.coderDecodeEncodeEqual(\n        TimerDataCoder.of(GlobalWindow.Coder.INSTANCE),\n        TimerData.of(\n            ""arbitrary-id"", StateNamespaces.global(), new Instant(0), TimeDomain.EVENT_TIME));\n\n    Coder<IntervalWindow> windowCoder = IntervalWindow.getCoder();\n    CoderProperties.coderDecodeEncodeEqual(\n        TimerDataCoder.of(windowCoder),\n        TimerData.of(\n            ""another-id"",\n            StateNamespaces.window(\n                windowCoder, new IntervalWindow(new Instant(0), new Instant(100))),\n            new Instant(99),\n            TimeDomain.PROCESSING_TIME));\n  }\n']",PROCESSING;oder;Interval;window;Window;new;id;window;Properties;TIME,6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.847656726837158, -5.640831470489502, -6.294565677642822, -5.389347076416016, -5.518441677093506, -0.017003705725073814]",0.9831400513648987
3,['  @Test\n  public void testCoderIsSerializableWithWellKnownCoderType() {\n    CoderProperties.coderSerializable(TimerDataCoder.of(GlobalWindow.Coder.INSTANCE));\n  }\n'],INSTANCE;Properties;Timer;Data;oder;Type;oder;oder;oder;oder,2.3283064365386963e-09;2.0954757928848267e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.076841726899147e-09;1.0477378964424133e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.906783580780029, -5.777442455291748, -6.406041622161865, -5.523547649383545, -5.450152397155762, -0.015881946310400963]",0.984243631362915
3,"['  @Test\n  public void testCompareEqual() {\n    Instant timestamp = new Instant(100);\n    StateNamespace namespace = StateNamespaces.global();\n    TimerData timer = TimerData.of(""id"", namespace, timestamp, TimeDomain.EVENT_TIME);\n\n    assertThat(\n        timer, comparesEqualTo(TimerData.of(""id"", namespace, timestamp, TimeDomain.EVENT_TIME)));\n  }\n']",Timer;Instant;Domain;Domain;timestamp;timestamp;timestamp;That;Data;of,1.862645149230957e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.816030025482178, -5.675006866455078, -6.267223834991455, -5.443200588226318, -5.436244010925293, -0.017134958878159523]",0.98301100730896
3,"['  @Test\n  public void testCompareByTimestamp() {\n    Instant firstTimestamp = new Instant(100);\n    Instant secondTimestamp = new Instant(200);\n    StateNamespace namespace = StateNamespaces.global();\n\n    TimerData firstTimer = TimerData.of(namespace, firstTimestamp, TimeDomain.EVENT_TIME);\n    TimerData secondTimer = TimerData.of(namespace, secondTimestamp, TimeDomain.EVENT_TIME);\n\n    assertThat(firstTimer, lessThan(secondTimer));\n  }\n']",EVENT;Namespace;Timer;Time;namespace;less;Timer;first;State;new,2.7939677238464355e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.7797393798828125, -5.631742000579834, -6.230041027069092, -5.455182075500488, -5.4244537353515625, -0.017474500462412834]",0.982677161693573
3,"['  @Test\n  public void testCompareByDomain() {\n    Instant timestamp = new Instant(100);\n    StateNamespace namespace = StateNamespaces.global();\n\n    TimerData eventTimer = TimerData.of(namespace, timestamp, TimeDomain.EVENT_TIME);\n    TimerData procTimer = TimerData.of(namespace, timestamp, TimeDomain.PROCESSING_TIME);\n    TimerData synchronizedProcTimer =\n        TimerData.of(namespace, timestamp, TimeDomain.SYNCHRONIZED_PROCESSING_TIME);\n\n    assertThat(eventTimer, lessThan(procTimer));\n    assertThat(eventTimer, lessThan(synchronizedProcTimer));\n    assertThat(procTimer, lessThan(synchronizedProcTimer));\n  }\n']",Than;proc;timestamp;EVENT;proc;Domain;Timer;Compare;Timer;synchronized,1.2514647096395493e-09;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.787793159484863, -5.636128902435303, -6.28094482421875, -5.465828895568848, -5.465014457702637, -0.017109647393226624]",0.9830358624458313
3,"['  @Test\n  public void testCompareByNamespace() {\n    Instant timestamp = new Instant(100);\n    IntervalWindow firstWindow = new IntervalWindow(new Instant(0), timestamp);\n    IntervalWindow secondWindow = new IntervalWindow(timestamp, new Instant(200));\n    Coder<IntervalWindow> windowCoder = IntervalWindow.getCoder();\n\n    StateNamespace firstWindowNs = StateNamespaces.window(windowCoder, firstWindow);\n    StateNamespace secondWindowNs = StateNamespaces.window(windowCoder, secondWindow);\n\n    TimerData secondEventTime = TimerData.of(firstWindowNs, timestamp, TimeDomain.EVENT_TIME);\n    TimerData thirdEventTime = TimerData.of(secondWindowNs, timestamp, TimeDomain.EVENT_TIME);\n\n    assertThat(secondEventTime, lessThan(thirdEventTime));\n  }\n']",Compare;By;Instant;Instant;Time;Instant;third;Namespaces;State;Instant,2.7939677238464355e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.788326740264893, -5.6351094245910645, -6.276370525360107, -5.438535213470459, -5.4708662033081055, -0.01721440814435482]",0.9829329252243042
3,"['  @Test\n  public void testCompareByTimerId() {\n    Instant timestamp = new Instant(100);\n    StateNamespace namespace = StateNamespaces.global();\n\n    TimerData id0Timer = TimerData.of(""id0"", namespace, timestamp, TimeDomain.EVENT_TIME);\n    TimerData id1Timer = TimerData.of(""id1"", namespace, timestamp, TimeDomain.EVENT_TIME);\n\n    assertThat(id0Timer, lessThan(id1Timer));\n  }\n']",Instant;timestamp;Timer;EVENT;TIME;State;Timer;Than;namespace;timestamp,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.814816951751709, -5.668214797973633, -6.281846046447754, -5.485159873962402, -5.446180820465088, -0.016909824684262276]",0.983232319355011
3,"['  @Test\n  public void testIsEmpty() {\n    SideInputHandler sideInputHandler =\n        new SideInputHandler(ImmutableList.of(view1), InMemoryStateInternals.<Void>forKey(null));\n\n    assertFalse(sideInputHandler.isEmpty());\n\n    // create an empty handler\n    SideInputHandler emptySideInputHandler =\n        new SideInputHandler(ImmutableList.of(), InMemoryStateInternals.<Void>forKey(null));\n\n    assertTrue(emptySideInputHandler.isEmpty());\n  }\n']",True;In;empty;Input;view;List;oid;Memory;Input;Empty,2.9103830456733704e-10;2.9103830456733704e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.8189894035458565e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.859772682189941, -5.720485210418701, -6.300004005432129, -5.378681182861328, -5.470781326293945, -0.01693056896328926]",0.9832118153572083
3,"['  @Test\n  public void testContains() {\n    SideInputHandler sideInputHandler =\n        new SideInputHandler(ImmutableList.of(view1), InMemoryStateInternals.<Void>forKey(null));\n\n    assertTrue(sideInputHandler.contains(view1));\n    assertFalse(sideInputHandler.contains(view2));\n  }\n']",Side;side;Immutable;of;Handler;List;view;Input;null;False,4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.87662410736084, -5.736788749694824, -6.345940589904785, -5.439579010009766, -5.473286151885986, -0.016456585377454758]",0.9836781024932861
3,"['  @Test\n  public void testIsReady() {\n    SideInputHandler sideInputHandler =\n        new SideInputHandler(\n            ImmutableList.of(view1, view2), InMemoryStateInternals.<Void>forKey(null));\n\n    IntervalWindow firstWindow = new IntervalWindow(new Instant(0), new Instant(WINDOW_MSECS_1));\n\n    IntervalWindow secondWindow = new IntervalWindow(new Instant(0), new Instant(WINDOW_MSECS_2));\n\n    // side input should not yet be ready\n    assertFalse(sideInputHandler.isReady(view1, firstWindow));\n\n    // add a value for view1\n    sideInputHandler.addSideInputValue(\n        view1,\n        valuesInWindow(\n            materializeValuesFor(View.asIterable(), ""Hello""), new Instant(0), firstWindow));\n\n    // now side input should be ready\n    assertTrue(sideInputHandler.isReady(view1, firstWindow));\n\n    // second window input should still not be ready\n    assertFalse(sideInputHandler.isReady(view1, secondWindow));\n  }\n']",Instant;Instant;of;Window;side;Window;Internals;first;Window;view,6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.874003257602453e-10;2.764863893389702e-10,5,5,"[-5.84644889831543, -5.668842315673828, -6.315745830535889, -5.403677463531494, -5.534707069396973, -0.016736220568418503]",0.9834030270576477
3,"['  @Test\n  public void testNewInputReplacesPreviousInput() {\n    // new input should completely replace old input\n    // the creation of the Iterable that has the side input\n    // contents happens upstream. this is also where\n    // accumulation/discarding is decided.\n\n    SideInputHandler sideInputHandler =\n        new SideInputHandler(ImmutableList.of(view1), InMemoryStateInternals.<Void>forKey(null));\n\n    IntervalWindow window = new IntervalWindow(new Instant(0), new Instant(WINDOW_MSECS_1));\n\n    // add a first value for view1\n    sideInputHandler.addSideInputValue(\n        view1,\n        valuesInWindow(materializeValuesFor(View.asIterable(), ""Hello""), new Instant(0), window));\n\n    assertThat(sideInputHandler.get(view1, window), contains(""Hello""));\n\n    // subsequent values should replace existing values\n    sideInputHandler.addSideInputValue(\n        view1,\n        valuesInWindow(\n            materializeValuesFor(View.asIterable(), ""Ciao"", ""Buongiorno""), new Instant(0), window));\n\n    assertThat(sideInputHandler.get(view1, window), contains(""Ciao"", ""Buongiorno""));\n  }\n']",accumulation;the;upstream;Handler;Immutable;existing;input;Interval;decided;Window,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.863295555114746, -5.698298454284668, -6.369988918304443, -5.445010662078857, -5.584672927856445, -0.016107430681586266]",0.9840214848518372
3,"['  @Test\n  public void testMultipleWindows() {\n    SideInputHandler sideInputHandler =\n        new SideInputHandler(ImmutableList.of(view1), InMemoryStateInternals.<Void>forKey(null));\n\n    // two windows that we\'ll later use for adding elements/retrieving side input\n    IntervalWindow firstWindow = new IntervalWindow(new Instant(0), new Instant(WINDOW_MSECS_1));\n    IntervalWindow secondWindow =\n        new IntervalWindow(new Instant(1000), new Instant(1000 + WINDOW_MSECS_2));\n\n    // add a first value for view1 in the first window\n    sideInputHandler.addSideInputValue(\n        view1,\n        valuesInWindow(\n            materializeValuesFor(View.asIterable(), ""Hello""), new Instant(0), firstWindow));\n\n    assertThat(sideInputHandler.get(view1, firstWindow), contains(""Hello""));\n\n    // add something for second window of view1\n    sideInputHandler.addSideInputValue(\n        view1,\n        valuesInWindow(\n            materializeValuesFor(View.asIterable(), ""Arrivederci""), new Instant(0), secondWindow));\n\n    assertThat(sideInputHandler.get(view1, secondWindow), contains(""Arrivederci""));\n\n    // contents for first window should be unaffected\n    assertThat(sideInputHandler.get(view1, firstWindow), contains(""Hello""));\n  }\n']",Multiple;Instant;windows;Instant;view;new;side;List;value;Window,6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.843986988067627, -5.65104866027832, -6.346467018127441, -5.438878059387207, -5.593560695648193, -0.01636323891580105]",0.9837698936462402
3,"['  @Test\n  public void testMultipleSideInputs() {\n    SideInputHandler sideInputHandler =\n        new SideInputHandler(\n            ImmutableList.of(view1, view2), InMemoryStateInternals.<Void>forKey(null));\n\n    // two windows that we\'ll later use for adding elements/retrieving side input\n    IntervalWindow firstWindow = new IntervalWindow(new Instant(0), new Instant(WINDOW_MSECS_1));\n\n    // add value for view1 in the first window\n    sideInputHandler.addSideInputValue(\n        view1,\n        valuesInWindow(\n            materializeValuesFor(View.asIterable(), ""Hello""), new Instant(0), firstWindow));\n\n    assertThat(sideInputHandler.get(view1, firstWindow), contains(""Hello""));\n\n    // view2 should not have any data\n    assertFalse(sideInputHandler.isReady(view2, firstWindow));\n\n    // also add some data for view2\n    sideInputHandler.addSideInputValue(\n        view2,\n        valuesInWindow(\n            materializeValuesFor(View.asIterable(), ""Salut""), new Instant(0), firstWindow));\n\n    assertTrue(sideInputHandler.isReady(view2, firstWindow));\n    assertThat(sideInputHandler.get(view2, firstWindow), contains(""Salut""));\n\n    // view1 should not be affected by that\n    assertThat(sideInputHandler.get(view1, firstWindow), contains(""Hello""));\n  }\n']",Instant;MSEC;affected;we'll;Internals;Instant;Instant;side;that;new,1.862645149230957e-09;1.1059455573558807e-09;8.149072527885437e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.853995323181152, -5.684368133544922, -6.3502349853515625, -5.424218654632568, -5.585219383239746, -0.016307063400745392]",0.9838252067565918
3,"['  @Test\n  public void testLateDataFilter() throws Exception {\n    MetricsContainerImpl container = new MetricsContainerImpl(""any"");\n    MetricsEnvironment.setCurrentContainer(container);\n    when(mockTimerInternals.currentInputWatermarkTime()).thenReturn(new Instant(15L));\n\n    LateDataFilter lateDataFilter =\n        new LateDataFilter(WindowingStrategy.of(WINDOW_FN), mockTimerInternals);\n\n    Iterable<WindowedValue<Integer>> actual =\n        lateDataFilter.filter(\n            ""a"",\n            ImmutableList.of(\n                createDatum(13, 13L),\n                createDatum(5, 5L), // late element, earlier than 4L.\n                createDatum(16, 16L),\n                createDatum(18, 18L)));\n\n    Iterable<WindowedValue<Integer>> expected =\n        ImmutableList.of(createDatum(13, 13L), createDatum(16, 16L), createDatum(18, 18L));\n    assertThat(expected, containsInAnyOrder(Iterables.toArray(actual, WindowedValue.class)));\n    long droppedValues =\n        container\n            .getCounter(\n                MetricName.named(\n                    LateDataDroppingDoFnRunner.class,\n                    LateDataDroppingDoFnRunner.DROPPED_DUE_TO_LATENESS))\n            .getCumulative();\n    assertEquals(1, droppedValues);\n    // Ensure that reiterating returns the same results and doesn\'t increment the counter again.\n    assertThat(expected, containsInAnyOrder(Iterables.toArray(actual, WindowedValue.class)));\n    droppedValues =\n        container\n            .getCounter(\n                MetricName.named(\n                    LateDataDroppingDoFnRunner.class,\n                    LateDataDroppingDoFnRunner.DROPPED_DUE_TO_LATENESS))\n            .getCumulative();\n    assertEquals(1, droppedValues);\n  }\n']",UE;Timer;named;Timer;mock;Windowing;Exception;Late;Late;Values,6.402842700481415e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.546585164964199e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.842104434967041, -5.618576526641846, -6.285040378570557, -5.3600382804870605, -5.525566577911377, -0.017228467389941216]",0.9829190969467163
3,['    @Test\n    public void testSameInstance() {\n      assertSameInstance(STRING_VALUE_ADDR);\n      assertSameInstance(SUM_INTEGER_ADDR);\n      assertSameInstance(STRING_BAG_ADDR);\n      assertSameInstance(STRING_SET_ADDR);\n      assertSameInstance(STRING_MAP_ADDR);\n      assertSameInstance(WATERMARK_EARLIEST_ADDR);\n    }\n'],INTEGER;ATER;SET;ADDR;STRING;Instance;BA;ADDR;Instance;Instance,9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.847633361816406, -5.673483848571777, -6.27534818649292, -5.356559753417969, -5.4144606590271, -0.017526395618915558]",0.9826264381408691
3,"['  @Test\n  public void testInvokeProcessElementOutputBounded() throws Exception {\n    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =\n        runTest(10000, Duration.ZERO, Integer.MAX_VALUE, Duration.ZERO);\n    assertFalse(res.getContinuation().shouldResume());\n    OffsetRange residualRange = res.getResidualRestriction();\n    // Should process the first 100 elements.\n    assertEquals(1000, residualRange.getFrom());\n    assertEquals(10000, residualRange.getTo());\n  }\n']",Duration;Process;Invoke;Offset;Should;Process;Range;ounded;Range;residual,1.2223608791828156e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.900424003601074, -5.779516696929932, -6.40006160736084, -5.479966163635254, -5.524796009063721, -0.01576988957822323]",0.9843538999557495
3,"[""  @Test\n  public void testInvokeProcessElementTimeBounded() throws Exception {\n    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =\n        runTest(10000, Duration.ZERO, Integer.MAX_VALUE, Duration.millis(100));\n    assertFalse(res.getContinuation().shouldResume());\n    OffsetRange residualRange = res.getResidualRestriction();\n    // Should process ideally around 30 elements - but due to timing flakiness, we can't enforce\n    // that precisely. Just test that it's not egregiously off.\n    assertThat(residualRange.getFrom(), greaterThan(10L));\n    assertThat(residualRange.getFrom(), lessThan(100L));\n    assertEquals(10000, residualRange.getTo());\n  }\n""]",Duration;Invoke;Result;Duration;mill;residual;Time;Continuation;residual;Process,1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.548361852765083e-10;6.402842700481415e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.887027740478516, -5.711731433868408, -6.4085235595703125, -5.540492534637451, -5.560529708862305, -0.015622259117662907]",0.9844990372657776
3,"['  @Test\n  public void testInvokeProcessElementTimeBoundedWithStartupDelay() throws Exception {\n    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =\n        runTest(10000, Duration.standardSeconds(3), Integer.MAX_VALUE, Duration.millis(100));\n    assertFalse(res.getContinuation().shouldResume());\n    OffsetRange residualRange = res.getResidualRestriction();\n    // Same as above, but this time it counts from the time of the first tryClaim() call\n    assertThat(residualRange.getFrom(), greaterThan(10L));\n    assertThat(residualRange.getFrom(), lessThan(100L));\n    assertEquals(10000, residualRange.getTo());\n  }\n']",the;first;Claim;Invoker;Invoke;Continuation;call;Element;From;Exception,1.6298145055770874e-09;1.5133991837501526e-09;9.89530235528946e-10;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.8415327072143555, -5.696470737457275, -6.326929092407227, -5.467106342315674, -5.505446434020996, -0.016472650691866875]",0.9836623072624207
3,"['  @Test\n  public void testInvokeProcessElementVoluntaryReturnStop() throws Exception {\n    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =\n        runTest(5, Duration.ZERO, Integer.MAX_VALUE, Duration.millis(100));\n    assertFalse(res.getContinuation().shouldResume());\n    assertNull(res.getResidualRestriction());\n  }\n']",Voluntary;Process;Splittable;VALUE;run;Tracker;Range;Invoke;Exception;Element,3.259629011154175e-09;1.6298145055770874e-09;1.076841726899147e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.87262487411499, -5.7624053955078125, -6.353709697723389, -5.457388401031494, -5.478113174438477, -0.016272934153676033]",0.9838588833808899
3,"['  @Test\n  public void testInvokeProcessElementVoluntaryReturnResume() throws Exception {\n    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =\n        runTest(10, Duration.ZERO, 5, Duration.millis(100));\n    assertTrue(res.getContinuation().shouldResume());\n    assertEquals(new OffsetRange(5, 10), res.getResidualRestriction());\n  }\n']",Voluntary;Process;Element;Process;Invoker;Result;Equals;get;Range;Offset,3.4924596548080444e-09;1.6298145055770874e-09;1.4551915228366852e-09;9.313225746154785e-10;9.313225746154785e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.8698649406433105, -5.763457298278809, -6.355625629425049, -5.465316295623779, -5.479966640472412, -0.016231883317232132]",0.9838991165161133
3,"['  @Test\n  public void testInvokeProcessElementOutputDisallowedBeforeTryClaim() throws Exception {\n    DoFn<Void, String> brokenFn =\n        new DoFn<Void, String>() {\n          @ProcessElement\n          public void process(ProcessContext c, OffsetRangeTracker tracker) {\n            c.output(""foo"");\n          }\n']",Claim;Disallowed;tracker;Invoke;new;Offset;Process;output;Range;oid,2.444721758365631e-09;1.7462298274040222e-09;6.984919309616089e-10;4.0745362639427185e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11,5,5,"[-5.900723457336426, -5.774390697479248, -6.354467868804932, -5.44288969039917, -5.496235370635986, -0.01614133082330227]",0.983988344669342
3,"['  @Test\n  public void testInvokeProcessElementOutputDisallowedAfterFailedTryClaim() throws Exception {\n    DoFn<Void, String> brokenFn =\n        new DoFn<Void, String>() {\n          @ProcessElement\n          public void process(ProcessContext c, OffsetRangeTracker tracker) {\n            assertFalse(tracker.tryClaim(6L));\n            c.output(""foo"");\n          }\n']",foo;Invoke;Claim;Tracker;Element;Try;Context;oid;Do;new,1.6298145055770874e-09;1.178705133497715e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;3.92901711165905e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.890267848968506, -5.753894329071045, -6.347170352935791, -5.4293036460876465, -5.505636692047119, -0.016270002350211143]",0.9838617444038391
3,"['  @Test\n  public void testStructuralKeyEquality() {\n    MultimapView<byte[], Integer> view =\n        InMemoryMultimapSideInputView.fromIterable(\n            ByteArrayCoder.of(),\n            ImmutableList.of(KV.of(new byte[] {0x00}, 0), KV.of(new byte[] {0x01}, 1)));\n    assertEquals(view.get(new byte[] {0x00}), ImmutableList.of(0));\n    assertEquals(view.get(new byte[] {0x01}), ImmutableList.of(1));\n    assertEquals(view.get(new byte[] {0x02}), ImmutableList.of());\n  }\n']",Side;byte;View;Array;View;Input;of;of;List;get,3.2014213502407074e-10;2.473825588822365e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.0186340659856796e-10,5,5,"[-5.849636554718018, -5.675207614898682, -6.269629955291748, -5.329878330230713, -5.473514080047607, -0.01739530824124813]",0.9827550053596497
3,"['  @Test\n  public void testValueGrouping() {\n    MultimapView<String, String> view =\n        InMemoryMultimapSideInputView.fromIterable(\n            StringUtf8Coder.of(),\n            ImmutableList.of(KV.of(""A"", ""a1""), KV.of(""A"", ""a2""), KV.of(""B"", ""b1"")));\n    assertEquals(view.get(""A""), ImmutableList.of(""a1"", ""a2""));\n    assertEquals(view.get(""B""), ImmutableList.of(""b1""));\n    assertEquals(view.get(""C""), ImmutableList.of());\n  }\n']",In;oder;Ut;of;of;of;of;get;of;Value,9.313225746154785e-10;4.0745362639427185e-10;3.055902197957039e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.2369127944111824e-10;1.1641532182693481e-10,5,5,"[-5.831017971038818, -5.6885223388671875, -6.254220008850098, -5.326163291931152, -5.442313194274902, -0.017587890848517418]",0.9825658798217773
3,"['  @Test\n  public void testProcessElementExceptionsWrappedAsUserCodeException() {\n    ThrowingDoFn fn = new ThrowingDoFn();\n    DoFnRunner<String, String> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            null,\n            null,\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(new GlobalWindows()));\n\n    thrown.expect(UserCodeException.class);\n    thrown.expectCause(is(fn.exceptionToThrow));\n\n    runner.processElement(WindowedValue.valueInGlobalWindow(""anyValue""));\n  }\n']",Exceptions;Value;Windowed;Exception;of;Strategy;User;Value;Runner;Code,1.0477378964424133e-09;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.85149621963501, -5.696576118469238, -6.279158115386963, -5.338603973388672, -5.479504108428955, -0.017229638993740082]",0.9829180836677551
3,"['  @Test\n  public void testOnTimerExceptionsWrappedAsUserCodeException() {\n    ThrowingDoFn fn = new ThrowingDoFn();\n    DoFnRunner<String, String> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            null,\n            null,\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(new GlobalWindows()));\n\n    thrown.expect(UserCodeException.class);\n    thrown.expectCause(is(fn.exceptionToThrow));\n\n    runner.onTimer(\n        ThrowingDoFn.TIMER_ID, GlobalWindow.INSTANCE, new Instant(0), TimeDomain.EVENT_TIME);\n  }\n']",IMER;Timer;on;TIME;Throwing;Strategy;Code;Timer;fn;Domain,8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.852461814880371, -5.6831889152526855, -6.288638114929199, -5.375792980194092, -5.5003838539123535, -0.016988703981041908]",0.9831547737121582
3,"['  @Test\n  public void testTimerSet() {\n    WindowFn<?, ?> windowFn = new GlobalWindows();\n    DoFnWithTimers<GlobalWindow> fn = new DoFnWithTimers(windowFn.windowCoder());\n    DoFnRunner<String, String> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            null,\n            null,\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(new GlobalWindows()));\n\n    // Setting the timer needs the current time, as it is set relative\n    Instant currentTime = new Instant(42);\n    when(mockTimerInternals.currentInputWatermarkTime()).thenReturn(currentTime);\n\n    runner.processElement(WindowedValue.valueInGlobalWindow(""anyValue""));\n\n    verify(mockTimerInternals)\n        .setTimer(\n            StateNamespaces.window(new GlobalWindows().windowCoder(), GlobalWindow.INSTANCE),\n            DoFnWithTimers.TIMER_ID,\n            currentTime.plus(DoFnWithTimers.TIMER_OFFSET),\n            TimeDomain.EVENT_TIME);\n  }\n']",it;OFFSET;window;EVENT;Instant;Global;oder;Input;IMER;Set,5.238689482212067e-10;3.7834979593753815e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.8407301902771, -5.6548943519592285, -6.290171146392822, -5.380440711975098, -5.538522243499756, -0.01694229058921337]",0.9832004308700562
3,"['  @Test\n  public void testStartBundleExceptionsWrappedAsUserCodeException() {\n    ThrowingDoFn fn = new ThrowingDoFn();\n    DoFnRunner<String, String> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            null,\n            null,\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(new GlobalWindows()));\n\n    thrown.expect(UserCodeException.class);\n    thrown.expectCause(is(fn.exceptionToThrow));\n\n    runner.startBundle();\n  }\n']",Exceptions;undle;As;Throw;runner;Windows;Runner;thrown;Cause;Code,7.2177499532699585e-09;1.862645149230957e-09;6.984919309616089e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.866082668304443, -5.698336124420166, -6.300287246704102, -5.3865532875061035, -5.483431816101074, -0.016895992681384087]",0.9832459688186646
3,"['  @Test\n  public void testFinishBundleExceptionsWrappedAsUserCodeException() {\n    ThrowingDoFn fn = new ThrowingDoFn();\n    DoFnRunner<String, String> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            null,\n            null,\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(new GlobalWindows()));\n\n    thrown.expect(UserCodeException.class);\n    thrown.expectCause(is(fn.exceptionToThrow));\n\n    runner.finishBundle();\n  }\n']",Exceptions;Code;Do;Exception;Windows;finish;Throwing;Null;fn;Simple,6.51925802230835e-09;1.0477378964424133e-09;6.111804395914078e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.850766181945801, -5.691314697265625, -6.281275749206543, -5.345396995544434, -5.486641883850098, -0.01718253456056118]",0.9829643368721008
3,"['  @Test\n  public void testOnTimerCalled() {\n    WindowFn<?, GlobalWindow> windowFn = new GlobalWindows();\n    DoFnWithTimers<GlobalWindow> fn = new DoFnWithTimers(windowFn.windowCoder());\n    DoFnRunner<String, String> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            null,\n            null,\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(windowFn));\n\n    Instant currentTime = new Instant(42);\n    Duration offset = Duration.millis(37);\n\n    // Mocking is not easily compatible with annotation analysis, so we manually record\n    // the method call.\n    runner.onTimer(\n        DoFnWithTimers.TIMER_ID,\n        GlobalWindow.INSTANCE,\n        currentTime.plus(offset),\n        TimeDomain.EVENT_TIME);\n\n    assertThat(\n        fn.onTimerInvocations,\n        contains(\n            TimerData.of(\n                DoFnWithTimers.TIMER_ID,\n                StateNamespaces.window(windowFn.windowCoder(), GlobalWindow.INSTANCE),\n                currentTime.plus(offset),\n                TimeDomain.EVENT_TIME)));\n  }\n']",Invocations;oder;IMER;fn;Runner;Do;current;On;manually;Domain,1.280568540096283e-09;9.313225746154785e-10;6.548361852765083e-10;4.511093720793724e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.851307392120361, -5.659882068634033, -6.312667369842529, -5.390073299407959, -5.548959255218506, -0.016765175387263298]",0.9833745956420898
3,"['  @Test\n  public void testBackwardsInTimeNoSkew() {\n    SkewingDoFn fn = new SkewingDoFn(Duration.ZERO);\n    DoFnRunner<Duration, Duration> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            new ListOutputManager(),\n            new TupleTag<>(),\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(new GlobalWindows()));\n\n    runner.startBundle();\n    // An element output at the current timestamp is fine.\n    runner.processElement(\n        WindowedValue.timestampedValueInGlobalWindow(Duration.ZERO, new Instant(0)));\n    thrown.expect(UserCodeException.class);\n    thrown.expectCause(isA(IllegalArgumentException.class));\n    thrown.expectMessage(""must be no earlier"");\n    thrown.expectMessage(\n        String.format(""timestamp of the current input (%s)"", new Instant(0).toString()));\n    thrown.expectMessage(\n        String.format(\n            ""the allowed skew (%s)"", PeriodFormat.getDefault().print(Duration.ZERO.toPeriod())));\n    // An element output before (current time - skew) is forbidden\n    runner.processElement(\n        WindowedValue.timestampedValueInGlobalWindow(Duration.millis(1L), new Instant(0)));\n  }\n']",forbidden;input;ERO;An;new;timestamp;process;must;runner;current,1.1641532182693481e-09;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.841313362121582, -5.625711441040039, -6.2726945877075195, -5.365835189819336, -5.557159423828125, -0.017074374482035637]",0.9830705523490906
3,"['  @Test\n  public void testSkew() {\n    SkewingDoFn fn = new SkewingDoFn(Duration.standardMinutes(10L));\n    DoFnRunner<Duration, Duration> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            new ListOutputManager(),\n            new TupleTag<>(),\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(new GlobalWindows()));\n\n    runner.startBundle();\n    // Outputting between ""now"" and ""now - allowed skew"" succeeds.\n    runner.processElement(\n        WindowedValue.timestampedValueInGlobalWindow(Duration.standardMinutes(5L), new Instant(0)));\n    thrown.expect(UserCodeException.class);\n    thrown.expectCause(isA(IllegalArgumentException.class));\n    thrown.expectMessage(""must be no earlier"");\n    thrown.expectMessage(\n        String.format(""timestamp of the current input (%s)"", new Instant(0).toString()));\n    thrown.expectMessage(\n        String.format(\n            ""the allowed skew (%s)"",\n            PeriodFormat.getDefault().print(Duration.standardMinutes(10L).toPeriod())));\n    // Outputting before ""now - allowed skew"" fails.\n    runner.processElement(\n        WindowedValue.timestampedValueInGlobalWindow(Duration.standardHours(1L), new Instant(0)));\n  }\n']",no;skew;fails;format;input;timestamped;Period;Windowing;Outputting;between,4.802132025361061e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.837969779968262, -5.636753082275391, -6.268510818481445, -5.344727516174316, -5.546449184417725, -0.01719565875828266]",0.9829512238502502
3,"['  @Test\n  public void testInfiniteSkew() {\n    SkewingDoFn fn = new SkewingDoFn(Duration.millis(Long.MAX_VALUE));\n    DoFnRunner<Duration, Duration> runner =\n        new SimpleDoFnRunner<>(\n            null,\n            fn,\n            NullSideInputReader.empty(),\n            new ListOutputManager(),\n            new TupleTag<>(),\n            Collections.emptyList(),\n            mockStepContext,\n            null,\n            Collections.emptyMap(),\n            WindowingStrategy.of(new GlobalWindows()));\n\n    runner.startBundle();\n    runner.processElement(\n        WindowedValue.timestampedValueInGlobalWindow(Duration.millis(1L), new Instant(0)));\n    runner.processElement(\n        WindowedValue.timestampedValueInGlobalWindow(\n            Duration.millis(1L), BoundedWindow.TIMESTAMP_MIN_VALUE.plus(Duration.millis(1))));\n    runner.processElement(\n        WindowedValue.timestampedValueInGlobalWindow(\n            // This is the maximum amount a timestamp in beam can move (from the maximum timestamp\n            // to the minimum timestamp).\n            Duration.millis(BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis())\n                .minus(Duration.millis(BoundedWindow.TIMESTAMP_MIN_VALUE.getMillis())),\n            BoundedWindow.TIMESTAMP_MAX_VALUE));\n  }\n']",Mill;Skewing;timestamp;move;in;Do;IMESTAMP;inite;This;ke,6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.841087818145752, -5.6032843589782715, -6.277664661407471, -5.360878944396973, -5.5421576499938965, -0.01723163202404976]",0.982915997505188
3,"['  @Test\n  public void testProcessingTimeTimerDoesNotGc() throws Exception {\n    WindowingStrategy<?, IntervalWindow> strategy =\n        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))\n            .withTimestampCombiner(TimestampCombiner.EARLIEST)\n            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)\n            .withAllowedLateness(Duration.ZERO)\n            .withTrigger(\n                Repeatedly.forever(\n                    AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.millis(10))));\n\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());\n\n    tester.advanceProcessingTime(new Instant(5000));\n    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100\n    injectElement(tester, 5);\n\n    tester.advanceProcessingTime(new Instant(10000));\n\n    tester.assertHasOnlyGlobalAndStateFor(new IntervalWindow(new Instant(0), new Instant(100)));\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(\n                equalTo(7), 2, 0, 100, PaneInfo.createPane(true, false, Timing.EARLY, 0, 0))));\n  }\n']",Element;ANES;Duration;forever;Fixed;advance;Windowed;ester;Duration;Instant,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.834485054016113, -5.637932777404785, -6.310215950012207, -5.407597541809082, -5.547760963439941, -0.016822028905153275]",0.9833186864852905
3,"['  @Test\n  public void testOnElementBufferingDiscarding() throws Exception {\n    // Test basic execution of a trigger using a non-combining window set and discarding mode.\n    MetricsContainerImpl container = new MetricsContainerImpl(""any"");\n    MetricsEnvironment.setCurrentContainer(container);\n    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =\n        ReduceFnTester.nonCombining(\n            FixedWindows.of(Duration.millis(10)),\n            mockTriggerStateMachine,\n            AccumulationMode.DISCARDING_FIRED_PANES,\n            Duration.millis(100),\n            ClosingBehavior.FIRE_IF_NON_EMPTY);\n\n    // Pane of {1, 2}\n    injectElement(tester, 1);\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    injectElement(tester, 2);\n    assertThat(\n        tester.extractOutput(),\n        contains(isSingleWindowedValue(containsInAnyOrder(1, 2), 1, 0, 10)));\n\n    // Pane of just 3, and finish\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    triggerShouldFinish(mockTriggerStateMachine);\n    injectElement(tester, 3);\n    assertThat(\n        tester.extractOutput(), contains(isSingleWindowedValue(containsInAnyOrder(3), 3, 0, 10)));\n    assertTrue(tester.isMarkedFinished(firstWindow));\n    tester.assertHasOnlyGlobalAndFinishedSetsFor(firstWindow);\n\n    // This element shouldn\'t be seen, because the trigger has finished\n    injectElement(tester, 4);\n\n    long droppedElements =\n        container\n            .getCounter(\n                MetricName.named(ReduceFnRunner.class, ReduceFnRunner.DROPPED_DUE_TO_CLOSED_WINDOW))\n            .getCumulative();\n    assertEquals(1, droppedElements);\n  }\n']",basic;non;ets;mill;Mode;set;Container;Duration;Discarding;should,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.872198581695557, -5.657985210418701, -6.378284454345703, -5.444509983062744, -5.597165107727051, -0.01616244576871395]",0.9839674830436707
3,"[""  @Test\n  public void testOnElementBufferingAccumulating() throws Exception {\n    // Test basic execution of a trigger using a non-combining window set and accumulating mode.\n    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =\n        ReduceFnTester.nonCombining(\n            FixedWindows.of(Duration.millis(10)),\n            mockTriggerStateMachine,\n            AccumulationMode.ACCUMULATING_FIRED_PANES,\n            Duration.millis(100),\n            ClosingBehavior.FIRE_IF_NON_EMPTY);\n\n    injectElement(tester, 1);\n\n    // Fires {1, 2}\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    injectElement(tester, 2);\n\n    // Fires {1, 2, 3} because we are in accumulating mode\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    triggerShouldFinish(mockTriggerStateMachine);\n    injectElement(tester, 3);\n\n    // This element shouldn't be seen, because the trigger has finished\n    injectElement(tester, 4);\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(containsInAnyOrder(1, 2), 1, 0, 10),\n            isSingleWindowedValue(containsInAnyOrder(1, 2, 3), 3, 0, 10)));\n    assertTrue(tester.isMarkedFinished(firstWindow));\n    tester.assertHasOnlyGlobalAndFinishedSetsFor(firstWindow);\n  }\n""]",accumulating;Combining;accumulating;IRED;IF;non;Behavior;Duration;ester;Duration,7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;3.7834979593753815e-10;2.9103830456733704e-10,5,5,"[-5.873512268066406, -5.674063205718994, -6.378381729125977, -5.437738418579102, -5.6008405685424805, -0.016117988154292107]",0.9840112328529358
3,"['  @Test\n  public void testSessionEowAndGcTogether() throws Exception {\n    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =\n        ReduceFnTester.nonCombining(\n            Sessions.withGapDuration(Duration.millis(10)),\n            DefaultTriggerStateMachine.of(),\n            AccumulationMode.ACCUMULATING_FIRED_PANES,\n            Duration.millis(50),\n            ClosingBehavior.FIRE_ALWAYS);\n\n    tester.setAutoAdvanceOutputWatermark(true);\n\n    tester.advanceInputWatermark(new Instant(0));\n    injectElement(tester, 1);\n    tester.advanceInputWatermark(new Instant(100));\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(\n                contains(1), 1, 1, 11, PaneInfo.createPane(true, true, Timing.ON_TIME))));\n  }\n']",Accumulation;Session;Instant;Instant;Timing;Window;mill;Duration;Reduce;ALWAYS,1.0913936421275139e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.850250244140625, -5.653966426849365, -6.304471492767334, -5.3915696144104, -5.522724628448486, -0.016902673989534378]",0.9832393527030945
3,"['  @Test\n  public void testFixedWindowsEowAndGcTogether() throws Exception {\n    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =\n        ReduceFnTester.nonCombining(\n            FixedWindows.of(Duration.millis(10)),\n            DefaultTriggerStateMachine.of(),\n            AccumulationMode.ACCUMULATING_FIRED_PANES,\n            Duration.millis(50),\n            ClosingBehavior.FIRE_ALWAYS);\n\n    tester.setAutoAdvanceOutputWatermark(true);\n\n    tester.advanceInputWatermark(new Instant(0));\n    injectElement(tester, 1);\n    tester.advanceInputWatermark(new Instant(100));\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(\n                contains(1), 1, 0, 10, PaneInfo.createPane(true, true, Timing.ON_TIME))));\n  }\n']",Interval;Together;FIRE;IRED;ane;Combining;Timing;ACCUMULATING;ALWAYS;tester,8.731149137020111e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.346940502524376e-10;3.1650415621697903e-10;3.055902197957039e-10,5,5,"[-5.853056907653809, -5.643719673156738, -6.30225133895874, -5.390372276306152, -5.525116920471191, -0.01693127304315567]",0.9832113981246948
3,"['  @Test\n  public void testFixedWindowsEowAndGcTogetherFireIfNonEmpty() throws Exception {\n    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =\n        ReduceFnTester.nonCombining(\n            FixedWindows.of(Duration.millis(10)),\n            DefaultTriggerStateMachine.of(),\n            AccumulationMode.ACCUMULATING_FIRED_PANES,\n            Duration.millis(50),\n            ClosingBehavior.FIRE_IF_NON_EMPTY);\n\n    tester.setAutoAdvanceOutputWatermark(true);\n\n    tester.advanceInputWatermark(new Instant(0));\n    injectElement(tester, 1);\n    tester.advanceInputWatermark(new Instant(100));\n\n    List<WindowedValue<Iterable<Integer>>> output = tester.extractOutput();\n    assertThat(\n        output,\n        contains(\n            isSingleWindowedValue(\n                contains(1), 1, 0, 10, PaneInfo.createPane(true, true, Timing.ON_TIME))));\n  }\n']",Duration;Together;Window;Fire;Machine;Windows;mill;ester;Instant;Empty,1.280568540096283e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.862753868103027, -5.6536478996276855, -6.320009231567383, -5.395034313201904, -5.5381059646606445, -0.01676083728671074]",0.9833789467811584
3,"['  @Test\n  public void testOnlyOneOnTimePane() throws Exception {\n    WindowingStrategy<?, IntervalWindow> strategy =\n        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(10)))\n            .withTrigger(DefaultTrigger.of())\n            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)\n            .withAllowedLateness(Duration.millis(100));\n\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());\n\n    tester.advanceInputWatermark(new Instant(0));\n\n    int value1 = 1;\n    int value2 = 3;\n\n    // A single element that should be in the ON_TIME output\n    tester.injectElements(TimestampedValue.of(value1, new Instant(1)));\n\n    // Should fire ON_TIME\n    tester.advanceInputWatermark(new Instant(10));\n\n    // The DefaultTrigger should cause output labeled LATE, even though it does not have to be\n    // labeled as such.\n    tester.injectElements(TimestampedValue.of(value2, new Instant(3)));\n\n    List<WindowedValue<Integer>> output = tester.extractOutput();\n    assertEquals(2, output.size());\n\n    assertThat(output.get(0), isWindowedValue(equalTo(value1)));\n    assertThat(output.get(1), isWindowedValue(equalTo(value1 + value2)));\n\n    assertThat(\n        output.get(0),\n        WindowMatchers.valueWithPaneInfo(PaneInfo.createPane(true, false, Timing.ON_TIME, 0, 0)));\n    assertThat(\n        output.get(1),\n        WindowMatchers.valueWithPaneInfo(PaneInfo.createPane(false, false, Timing.LATE, 1, 1)));\n  }\n']",Lateness;Timestamped;labeled;labeled;Only;of;output;Duration;Instant;Input,1.1059455573558807e-09;6.766640581190586e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.842367649078369, -5.636524677276611, -6.313529014587402, -5.42033052444458, -5.5564351081848145, -0.01670585758984089]",0.9834328889846802
3,"[""  @Test\n  public void testOnElementCombiningDiscarding() throws Exception {\n    // Test basic execution of a trigger using a non-combining window set and discarding mode.\n    WindowingStrategy<?, IntervalWindow> strategy =\n        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(10)))\n            .withTimestampCombiner(TimestampCombiner.EARLIEST)\n            .withMode(AccumulationMode.DISCARDING_FIRED_PANES)\n            .withAllowedLateness(Duration.millis(100));\n\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(\n            strategy, mockTriggerStateMachine, Sum.ofIntegers(), VarIntCoder.of());\n\n    injectElement(tester, 2);\n\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    injectElement(tester, 3);\n\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    triggerShouldFinish(mockTriggerStateMachine);\n    injectElement(tester, 4);\n\n    // This element shouldn't be seen, because the trigger has finished\n    injectElement(tester, 6);\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(equalTo(5), 2, 0, 10),\n            isSingleWindowedValue(equalTo(4), 4, 0, 10)));\n    assertTrue(tester.isMarkedFinished(firstWindow));\n    tester.assertHasOnlyGlobalAndFinishedSetsFor(firstWindow);\n  }\n""]",ANES;basic;Duration;trigger;Interval;IRED;Sum;Combiner;set;Windows,1.280568540096283e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.165929906070232e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.871148586273193, -5.638857841491699, -6.352567195892334, -5.424417495727539, -5.585936546325684, -0.016410617157816887]",0.9837232828140259
3,"['  @Test\n  public void testLateProcessingTimeTimer() throws Exception {\n    WindowingStrategy<?, IntervalWindow> strategy =\n        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))\n            .withTimestampCombiner(TimestampCombiner.EARLIEST)\n            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)\n            .withAllowedLateness(Duration.ZERO)\n            .withTrigger(\n                Repeatedly.forever(\n                    AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.millis(10))));\n\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());\n\n    tester.advanceProcessingTime(new Instant(5000));\n    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100\n    injectElement(tester, 5);\n\n    // After this advancement, the window is expired and only the GC process\n    // should be allowed to touch it\n    tester.advanceInputWatermarkNoTimers(new Instant(100));\n\n    // This should not output\n    tester.advanceProcessingTime(new Instant(6000));\n\n    assertThat(tester.extractOutput(), emptyIterable());\n  }\n']",Repeatedly;expired;Timers;to;Lateness;process;Delay;Time;the;tester,1.2223608791828156e-09;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.8430705070495605, -5.6294450759887695, -6.3313751220703125, -5.443313121795654, -5.570069789886475, -0.016541481018066406]",0.9835945963859558
3,"['  @Test\n  public void testCombiningAccumulatingProcessingTime() throws Exception {\n    WindowingStrategy<?, IntervalWindow> strategy =\n        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))\n            .withTimestampCombiner(TimestampCombiner.EARLIEST)\n            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)\n            .withAllowedLateness(Duration.ZERO)\n            .withTrigger(\n                Repeatedly.forever(\n                    AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.millis(10))));\n\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());\n\n    tester.advanceProcessingTime(new Instant(5000));\n    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100\n    injectElement(tester, 5);\n\n    tester.advanceInputWatermarkNoTimers(new Instant(100));\n    tester.advanceProcessingTimeNoTimers(new Instant(5010));\n\n    // Fires the GC/EOW timer at the same time as the processing time timer.\n    tester.fireTimers(\n        new IntervalWindow(new Instant(0), new Instant(100)),\n        TimestampedValue.of(TimeDomain.EVENT_TIME, new Instant(100)),\n        TimestampedValue.of(TimeDomain.PROCESSING_TIME, new Instant(5010)));\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(\n                equalTo(7), 2, 0, 100, PaneInfo.createPane(true, true, Timing.ON_TIME, 0, 0))));\n  }\n']",timer;processing;OW;processing;ANES;time;Timestamp;EVENT;strategy;Windowing,1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;5.966285243630409e-10;5.238689482212067e-10;4.94765117764473e-10;4.5838532969355583e-10,5,5,"[-5.832985877990723, -5.611428260803223, -6.304701328277588, -5.429088592529297, -5.555463790893555, -0.016806555911898613]",0.9833337664604187
3,"['  @Test\n  public void testFixedWindowEndOfTimeGarbageCollection() throws Exception {\n    Duration allowedLateness = Duration.standardDays(365);\n    Duration windowSize = Duration.millis(10);\n    WindowFn<Object, IntervalWindow> windowFn = FixedWindows.of(windowSize);\n\n    // This timestamp falls into a window where the end of the window is before the end of the\n    // global window - the ""end of time"" - yet its expiration time is after.\n    final Instant elementTimestamp =\n        GlobalWindow.INSTANCE.maxTimestamp().minus(allowedLateness).plus(1);\n\n    IntervalWindow window =\n        Iterables.getOnlyElement(\n            windowFn.assignWindows(\n                windowFn.new AssignContext() {\n                  @Override\n                  public Object element() {\n                    throw new UnsupportedOperationException();\n                  }\n']",expiration;Fixed;the;Timestamp;Windows;after;window;time;Interval;End,1.3969838619232178e-09;1.0477378964424133e-09;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.384208634495735e-10;5.384208634495735e-10,5,5,"[-5.850822925567627, -5.626884937286377, -6.265608310699463, -5.403169631958008, -5.52140998840332, -0.01702444814145565]",0.9831196665763855
3,"['  @Test\n  public void testCombiningAccumulatingProcessingTimeSeparateBundles() throws Exception {\n    WindowingStrategy<?, IntervalWindow> strategy =\n        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))\n            .withTimestampCombiner(TimestampCombiner.EARLIEST)\n            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)\n            .withAllowedLateness(Duration.ZERO)\n            .withTrigger(\n                Repeatedly.forever(\n                    AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.millis(10))));\n\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());\n\n    tester.advanceProcessingTime(new Instant(5000));\n    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100\n    injectElement(tester, 5);\n\n    tester.advanceInputWatermark(new Instant(100));\n    tester.advanceProcessingTime(new Instant(5011));\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(\n                equalTo(7), 2, 0, 100, PaneInfo.createPane(true, true, Timing.ON_TIME, 0, 0))));\n  }\n']",Accumulating;combining;timer;OW;Lateness;ane;processing;Mode;Timestamp;Separate,1.280568540096283e-09;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.836594104766846, -5.629540920257568, -6.3075175285339355, -5.402458190917969, -5.54228401184082, -0.016896579414606094]",0.9832453727722168
3,"['  @Test\n  public void testCombiningAccumulatingEventTime() throws Exception {\n    WindowingStrategy<?, IntervalWindow> strategy =\n        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))\n            .withTimestampCombiner(TimestampCombiner.EARLIEST)\n            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)\n            .withAllowedLateness(Duration.millis(1))\n            .withTrigger(Repeatedly.forever(AfterWatermark.pastEndOfWindow()));\n\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());\n\n    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100\n    injectElement(tester, 5);\n\n    tester.advanceInputWatermark(new Instant(1000));\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(\n                equalTo(7), 2, 0, 100, PaneInfo.createPane(true, true, Timing.ON_TIME, 0, 0))));\n  }\n']",Lateness;Event;ACCUMULATING;Exception;Sum;mill;tester;Interval;strategy;Output,9.313225746154785e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.820566654205322, -5.629937171936035, -6.261345386505127, -5.3629841804504395, -5.491222858428955, -0.01742401160299778]",0.9827269315719604
3,"[""  @Test\n  public void testOnElementCombiningAccumulating() throws Exception {\n    // Test basic execution of a trigger using a non-combining window set and accumulating mode.\n    WindowingStrategy<?, IntervalWindow> strategy =\n        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(10)))\n            .withTimestampCombiner(TimestampCombiner.EARLIEST)\n            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)\n            .withAllowedLateness(Duration.millis(100));\n\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(\n            strategy, mockTriggerStateMachine, Sum.ofIntegers(), VarIntCoder.of());\n\n    injectElement(tester, 1);\n\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    injectElement(tester, 2);\n\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    triggerShouldFinish(mockTriggerStateMachine);\n    injectElement(tester, 3);\n\n    // This element shouldn't be seen, because the trigger has finished\n    injectElement(tester, 4);\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(equalTo(3), 1, 0, 10),\n            isSingleWindowedValue(equalTo(6), 3, 0, 10)));\n    assertTrue(tester.isMarkedFinished(firstWindow));\n    tester.assertHasOnlyGlobalAndFinishedSetsFor(firstWindow);\n  }\n""]",execution;combining;of;Duration;EARLIEST;non;Accumulating;Exception;element;the,7.566995918750763e-10;5.675246939063072e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.867400646209717, -5.647790431976318, -6.346477508544922, -5.412441730499268, -5.581289768218994, -0.016471711918711662]",0.9836630821228027
3,"['  @Test\n  public void testOnElementCombiningWithContext() throws Exception {\n    // Create values at timestamps 0 .. 8, windowed into fixed windows of 2.\n    // Side input windowed into fixed windows of 4:\n    // main: [ 0 1 ] [ 2 3 ] [ 4 5 ] [ 6 7 ]\n    // side: [     100     ] [     104     ]\n    // Combine using a CombineFn ""side input + sum(main inputs)"".\n    final int firstWindowSideInput = 100;\n    final int secondWindowSideInput = 104;\n    final Integer expectedValue = firstWindowSideInput;\n    WindowingStrategy<?, IntervalWindow> mainInputWindowingStrategy =\n        WindowingStrategy.of(FixedWindows.of(Duration.millis(2)))\n            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES);\n\n    WindowMappingFn<?> sideInputWindowMappingFn =\n        FixedWindows.of(Duration.millis(4)).getDefaultWindowMappingFn();\n    when(mockView.getWindowMappingFn()).thenReturn((WindowMappingFn) sideInputWindowMappingFn);\n\n    TestOptions options = PipelineOptionsFactory.as(TestOptions.class);\n    options.setValue(expectedValue);\n\n    when(mockSideInputReader.contains(any(PCollectionView.class))).thenReturn(true);\n    when(mockSideInputReader.get(any(PCollectionView.class), any(BoundedWindow.class)))\n        .then(\n            invocation -> {\n              IntervalWindow sideInputWindow = (IntervalWindow) invocation.getArguments()[1];\n              long startMs = sideInputWindow.start().getMillis();\n              long endMs = sideInputWindow.end().getMillis();\n              // Window should have been produced by sideInputWindowingStrategy.\n              assertThat(startMs, anyOf(equalTo(0L), equalTo(4L)));\n              assertThat(endMs - startMs, equalTo(4L));\n              // If startMs == 4 (second window), equal to secondWindowSideInput.\n              return firstWindowSideInput + (int) startMs;\n            });\n\n    SumAndVerifyContextFn combineFn = new SumAndVerifyContextFn(mockView, expectedValue);\n    ReduceFnTester<Integer, Integer, IntervalWindow> tester =\n        ReduceFnTester.combining(\n            mainInputWindowingStrategy,\n            mockTriggerStateMachine,\n            combineFn,\n            VarIntCoder.of(),\n            options,\n            mockSideInputReader);\n\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    for (int i = 0; i < 8; ++i) {\n      injectElement(tester, i);\n    }\n\n    assertThat(\n        tester.extractOutput(),\n        contains(\n            isSingleWindowedValue(equalTo(0 + firstWindowSideInput), 1, 0, 2),\n            isSingleWindowedValue(equalTo(0 + 1 + firstWindowSideInput), 1, 0, 2),\n            isSingleWindowedValue(equalTo(2 + firstWindowSideInput), 3, 2, 4),\n            isSingleWindowedValue(equalTo(2 + 3 + firstWindowSideInput), 3, 2, 4),\n            isSingleWindowedValue(equalTo(4 + secondWindowSideInput), 5, 4, 6),\n            isSingleWindowedValue(equalTo(4 + 5 + secondWindowSideInput), 5, 4, 6),\n            isSingleWindowedValue(equalTo(6 + secondWindowSideInput), 7, 6, 8),\n            isSingleWindowedValue(equalTo(6 + 7 + secondWindowSideInput), 7, 6, 8)));\n  }\n']",sum;On;of;Ms;Input;invocation;side;Mill;final;Exception,7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.8692498207092285, -5.652498245239258, -6.337662696838379, -5.390920639038086, -5.569365978240967, -0.016609953716397285]",0.9835271239280701
3,"['  @Test\n  public void testWatermarkHoldAndLateData() throws Exception {\n    MetricsContainerImpl container = new MetricsContainerImpl(""any"");\n    MetricsEnvironment.setCurrentContainer(container);\n    // Test handling of late data. Specifically, ensure the watermark hold is correct.\n    Duration allowedLateness = Duration.millis(10);\n    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =\n        ReduceFnTester.nonCombining(\n            FixedWindows.of(Duration.millis(10)),\n            mockTriggerStateMachine,\n            AccumulationMode.ACCUMULATING_FIRED_PANES,\n            allowedLateness,\n            ClosingBehavior.FIRE_IF_NON_EMPTY);\n\n    // Input watermark -> null\n    assertEquals(null, tester.getWatermarkHold());\n    assertEquals(null, tester.getOutputWatermark());\n\n    // All on time data, verify watermark hold.\n    IntervalWindow expectedWindow = new IntervalWindow(new Instant(0), new Instant(10));\n    injectElement(tester, 1);\n    injectElement(tester, 3);\n    assertEquals(new Instant(1), tester.getWatermarkHold());\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    injectElement(tester, 2);\n    List<WindowedValue<Iterable<Integer>>> output = tester.extractOutput();\n    assertThat(\n        output,\n        contains(\n            isSingleWindowedValue(\n                containsInAnyOrder(1, 2, 3),\n                equalTo(new Instant(1)),\n                equalTo((BoundedWindow) expectedWindow))));\n    assertThat(\n        output.get(0).getPane(), equalTo(PaneInfo.createPane(true, false, Timing.EARLY, 0, -1)));\n\n    // There is no end-of-window hold, but the timer set by the trigger holds the watermark\n    assertThat(tester.getWatermarkHold(), nullValue());\n\n    // Nothing dropped.\n    long droppedElements =\n        container\n            .getCounter(\n                MetricName.named(ReduceFnRunner.class, ReduceFnRunner.DROPPED_DUE_TO_CLOSED_WINDOW))\n            .getCumulative();\n    assertEquals(0, droppedElements);\n\n    // Input watermark -> 4, output watermark should advance that far as well\n    tester.advanceInputWatermark(new Instant(4));\n    assertEquals(new Instant(4), tester.getOutputWatermark());\n\n    // Some late, some on time. Verify that we only hold to the minimum of on-time.\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(false);\n    tester.advanceInputWatermark(new Instant(4));\n    injectElement(tester, 2);\n    injectElement(tester, 3);\n\n    // Late data has arrived behind the _output_ watermark. The ReduceFnRunner sets a GC hold\n    // since this data is not permitted to hold up the output watermark.\n    assertThat(\n        tester.getWatermarkHold(), equalTo(expectedWindow.maxTimestamp().plus(allowedLateness)));\n\n    // Now data just ahead of the output watermark arrives and sets an earlier ""element"" hold\n    injectElement(tester, 5);\n    assertEquals(new Instant(5), tester.getWatermarkHold());\n\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n    injectElement(tester, 4);\n    output = tester.extractOutput();\n    assertThat(\n        output,\n        contains(\n            isSingleWindowedValue(\n                containsInAnyOrder(\n                    1, 2, 3, // earlier firing\n                    2, 3, 4, 5), // new elements\n                4, // timestamp\n                0, // window start\n                10))); // window end\n    assertThat(\n        output.get(0).getPane(), equalTo(PaneInfo.createPane(false, false, Timing.EARLY, 1, -1)));\n\n    // Since the element hold is cleared, there is no hold remaining\n    assertThat(tester.getWatermarkHold(), nullValue());\n\n    // All behind the output watermark -- hold is at GC time (if we imagine the\n    // trigger sets a timer for ON_TIME firing, that is actually when they\'ll be emitted)\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(false);\n    tester.advanceInputWatermark(new Instant(8));\n    injectElement(tester, 6);\n    injectElement(tester, 5);\n    assertThat(\n        tester.getWatermarkHold(), equalTo(expectedWindow.maxTimestamp().plus(allowedLateness)));\n\n    injectElement(tester, 4);\n\n    // Fire the ON_TIME pane\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);\n\n    // To get an ON_TIME pane, we need the output watermark to be held back a little; this would\n    // be done by way of the timers set by the trigger, which are mocked here\n    tester.setAutoAdvanceOutputWatermark(false);\n\n    tester.advanceInputWatermark(expectedWindow.maxTimestamp().plus(1));\n    tester.fireTimer(expectedWindow, expectedWindow.maxTimestamp(), TimeDomain.EVENT_TIME);\n\n    // Output time is end of the window, because all the new data was late, but the pane\n    // is the ON_TIME pane.\n    output = tester.extractOutput();\n    assertThat(\n        output,\n        contains(\n            isSingleWindowedValue(\n                containsInAnyOrder(\n                    1, 2, 3, // earlier firing\n                    2, 3, 4, 5, // earlier firing\n                    4, 5, 6), // new elements\n                9, // timestamp\n                0, // window start\n                10))); // window end\n    assertThat(\n        output.get(0).getPane(), equalTo(PaneInfo.createPane(false, false, Timing.ON_TIME, 2, 0)));\n\n    tester.setAutoAdvanceOutputWatermark(true);\n\n    // This is ""pending"" at the time the watermark makes it way-late.\n    // Because we\'re about to expire the window, we output it.\n    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(false);\n    injectElement(tester, 8);\n    droppedElements =\n        container\n            .getCounter(\n                MetricName.named(ReduceFnRunner.class, ReduceFnRunner.DROPPED_DUE_TO_CLOSED_WINDOW))\n            .getCumulative();\n    assertEquals(0, droppedElements);\n\n    // Exceed the GC limit, triggering the last pane to be fired\n    tester.advanceInputWatermark(new Instant(50));\n    output = tester.extractOutput();\n    // Output time is still end of the window, because the new data (8) was behind\n    // the output watermark.\n    assertThat(\n        output,\n        contains(\n            isSingleWindowedValue(\n                containsInAnyOrder(\n                    1, 2, 3, // earlier firing\n                    2, 3, 4, 5, // earlier firing\n                    4, 5, 6, // earlier firing\n                    8), // new element prior to window becoming expired\n                9, // timestamp\n                0, // window start\n                10))); // window end\n    assertThat(\n        output.get(0).getPane(), equalTo(PaneInfo.createPane(false, true, Timing.LATE, 3, 1)));\n    assertEquals(new Instant(50), tester.getOutputWatermark());\n    assertEquals(null, tester.getWatermarkHold());\n\n    // Late timers are ignored\n    tester.fireTimer(\n        new IntervalWindow(new Instant(0), new Instant(10)),\n        new Instant(12),\n        TimeDomain.EVENT_TIME);\n\n    // And because we\'re past the end of window + allowed lateness, everything should be cleaned up.\n    assertFalse(tester.isMarkedFinished(firstWindow));\n    tester.assertHasOnlyGlobalAndFinishedSetsFor();\n  }\n']",hold;Behavior;watermark;FIRE;hold;Specifically;Metrics;Impl;of;Trigger,1.076841726899147e-09;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.020410753786564e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-5.850534915924072, -5.644146919250488, -6.31035852432251, -5.3943939208984375, -5.549368381500244, -0.01680620387196541]",0.9833342432975769
3,"['    @Test\n    public void testPluginInstalled() {\n        try (TransportClient client = new PreBuiltXPackTransportClient(Settings.EMPTY)) {\n            Settings settings = client.settings();\n            assertEquals(SecurityField.NAME4, NetworkModule.TRANSPORT_TYPE_SETTING.get(settings));\n        }\n    }\n']",Pack;Network;EMPTY;NAME;settings;Plugin;Equals;Settings;Built;client,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.914005756378174, -5.79009485244751, -6.375962734222412, -5.482337951660156, -5.481266498565674, -0.015910575166344643]",0.9842153191566467
3,"['@TestLogging(""org.elasticsearch.client:TRACE,tracer:TRACE"")\n    public void cleanExporters() throws Exception {\n        Request request = new Request(""PUT"", ""/_cluster/settings"");\n        request.setJsonEntity(Strings.toString(jsonBuilder().startObject()\n                .startObject(""transient"")\n                    .nullField(""xpack.monitoring.exporters.*"")\n                .endObject().endObject()));\n        adminClient().performRequest(request);\n        adminClient().performRequest(new Request(""DELETE"", ""/.watch*""));\n    }\n']",TRACE;Exporters;org;son;request;watch;client;transient;new;Builder,3.026798367500305e-09;2.9685907065868378e-09;2.7939677238464355e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.9917988777160645, -5.957932472229004, -6.598025321960449, -5.577921390533447, -5.581001281738281, -0.014095630496740341]",0.9860033392906189
3,"['@TestLogging(""org.elasticsearch.client:TRACE"")\n    public void waitForSecuritySetup() throws Exception {\n\n        String masterNode = null;\n        String catNodesResponse = EntityUtils.toString(\n                client().performRequest(""GET"", ""/_cat/nodes?h=id,master"").getEntity(),\n                StandardCharsets.UTF_8\n        );\n        for (String line : catNodesResponse.split(""\\n"")) {\n            int indexOfStar = line.indexOf(\'*\'); // * in the node\'s output denotes it is master\n            if (indexOfStar != -1) {\n                masterNode = line.substring(0, indexOfStar).trim();\n                break;\n            }\n        }\n        assertNotNull(masterNode);\n        final String masterNodeId = masterNode;\n\n        assertBusy(() -> {\n            try {\n                Response nodeDetailsResponse = client().performRequest(""GET"", ""/_nodes"");\n                ObjectPath path = ObjectPath.createFromResponse(nodeDetailsResponse);\n                Map<String, Object> nodes = path.evaluate(""nodes"");\n                assertThat(nodes.size(), greaterThanOrEqualTo(2));\n                String masterVersion = null;\n                for (String key : nodes.keySet()) {\n                    // get the ES version number master is on\n                    if (key.startsWith(masterNodeId)) {\n                        masterVersion = path.evaluate(""nodes."" + key + "".version"");\n                        break;\n                    }\n                }\n                assertNotNull(masterVersion);\n                final String masterTemplateVersion = masterVersion;\n\n                Response response = client().performRequest(""GET"", ""/_cluster/state/metadata"");\n                ObjectPath objectPath = ObjectPath.createFromResponse(response);\n                final String mappingsPath = ""metadata.templates.security-index-template.mappings"";\n                Map<String, Object> mappings = objectPath.evaluate(mappingsPath);\n                assertNotNull(mappings);\n                assertThat(mappings.size(), greaterThanOrEqualTo(1));\n                for (String key : mappings.keySet()) {\n                    String templateVersion = objectPath.evaluate(mappingsPath + ""."" + key + """" +\n                            ""._meta.security-version"");\n                    final Version mVersion = Version.fromString(masterTemplateVersion);\n                    final Version tVersion = Version.fromString(templateVersion);\n                    assertEquals(mVersion, tVersion);\n                }\n            } catch (Exception e) {\n                throw new AssertionError(""failed to get cluster state"", e);\n            }\n        });\n\n        nodes = buildNodeAndVersions();\n        logger.info(""Nodes in cluster before test: bwc [{}], new [{}], master [{}]"", nodes.getBWCNodes(), nodes.getNewNodes(),\n                nodes.getMaster());\n\n        Map<String, String> params = Collections.singletonMap(""error_trace"", ""true"");\n        executeAgainstMasterNode(client -> {\n            // create a watch before each test, most of the time this is just overwriting...\n            assertOK(client.performRequest(""PUT"", ""/_xpack/watcher/watch/my-watch"", params, entity));\n            // just a check to see if we can execute a watch, purely optional\n            if (randomBoolean()) {\n                assertOK(client.performRequest(""POST"", ""/_xpack/watcher/watch/my-watch/_execute"", params,\n                        new StringEntity(""{ \\""record_execution\\"" : true }"", ContentType.APPLICATION_JSON)));\n            }\n            if (randomBoolean()) {\n                Map<String, String> ignore404Params = MapBuilder.newMapBuilder(params).put(""ignore"", ""404"").immutableMap();\n                Response indexExistsResponse = client.performRequest(""HEAD"", ""/.triggered_watches"", ignore404Params);\n                if (indexExistsResponse.getStatusLine().getStatusCode() == 404) {\n                    logger.info(""Created triggered watches index to ensure it gets upgraded"");\n                    client.performRequest(""PUT"", ""/.triggered_watches"");\n                }\n            }\n        });\n\n        // helping debugging output\n        executeAgainstMasterNode(client -> {\n            Map<String, String> filterPathParams = MapBuilder.newMapBuilder(params)\n                    .put(""filter_path"", ""*.template,*.index_patterns"").immutableMap();\n            Response r = client.performRequest(""GET"", ""_template/*watch*"", filterPathParams);\n            logger.info(""existing watcher templates response [{}]"", EntityUtils.toString(r.getEntity(), StandardCharsets.UTF_8));\n        });\n\n        // set logging to debug\n//        executeAgainstMasterNode(client -> {\n//            StringEntity entity = new StringEntity(""{ \\""transient\\"" : { \\""logger.org.elasticsearch.xpack.watcher\\"" : \\""TRACE\\"" } }"",\n//                    ContentType.APPLICATION_JSON);\n//            Response response = client.performRequest(""PUT"", ""_cluster/settings"", params, entity);\n//            logger.info(""cluster update settings response [{}]"", EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8));\n//        });\n    }\n']",Logging;TRACE;Exception;Setup;Bus;GET;Version;Response;For;Response,1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;5.238689482212067e-10,5,5,"[-5.937343597412109, -5.802928924560547, -6.551856994628906, -5.57454252243042, -5.666653633117676, -0.01444161031395197]",0.9856621623039246
3,"['@TestLogging(""org.elasticsearch.xpack.core.ssl.SSLService:TRACE"")\n    public void init() throws Exception {\n        Path caPath = getDataPath(LDAPCACERT_PATH);\n        /*\n         * Prior to each test we reinitialize the socket factory with a new SSLService so that we get a new SSLContext.\n         * If we re-use a SSLContext, previously connected sessions can get re-established which breaks hostname\n         * verification tests since a re-established connection does not perform hostname verification.\n         */\n        globalSettings = Settings.builder()\n            .put(""path.home"", createTempDir())\n            .put(""xpack.ssl.certificate_authorities"", caPath)\n            .build();\n        threadPool = new TestThreadPool(""LdapUserSearchSessionFactoryTests"");\n    }\n']",TRACE;ca;home;Path;org;path;we;verification;Pool;build,3.026798367500305e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.693881005048752e-10;4.94765117764473e-10,5,5,"[-6.023067951202393, -5.83366060256958, -6.633953094482422, -5.686618328094482, -5.661450386047363, -0.013625356368720531]",0.9864669442176819
3,"['    @TestGroup(enabled = true, sysProperty = ESRestTestCase.TESTS_REST)\n            public int compare(RestTestCandidate o1, RestTestCandidate o2) {\n                return o1.getTestPath().compareTo(o2.getTestPath());\n            }\n']",Property;Rest;Rest;compare;Path;get;EST;true;Path;return,3.841705620288849e-09;2.7939677238464355e-09;4.656612873077393e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-6.01770544052124, -6.000791549682617, -6.518310070037842, -5.588509559631348, -5.40243673324585, -0.014742483384907246]",0.985365629196167
3,"['@TestLogging(""org.elasticsearch.xpack.security.authc.ldap.support:DEBUG"")\n    public void init() throws Exception {\n        threadPool = new TestThreadPool(""SessionFactoryLoadBalancingTests thread pool"");\n    }\n']",org;auth;ldap;thread;Thread;new;Load;security;init;Factory,5.587935447692871e-09;3.259629011154175e-09;3.259629011154175e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-6.050816535949707, -6.001076698303223, -6.620321273803711, -5.676281929016113, -5.498466968536377, -0.0137788075953722]",0.9863156676292419
3,"['    @TestLogging(""org.elasticsearch.xpack.security.authc:DEBUG"")\n    public void testExpiredTokensDeletedAfterExpiration() throws Exception {\n        final Client client = client().filterWithHeader(Collections.singletonMap(""Authorization"",\n                UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n                        SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n        SecurityClient securityClient = new SecurityClient(client);\n        CreateTokenResponse response = securityClient.prepareCreateToken()\n                .setGrantType(""password"")\n                .setUsername(SecuritySettingsSource.TEST_USER_NAME)\n                .setPassword(new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray()))\n                .get();\n\n        Instant created = Instant.now();\n\n        InvalidateTokenResponse invalidateResponse = securityClient\n                .prepareInvalidateToken(response.getTokenString())\n                .setType(InvalidateTokenRequest.Type.ACCESS_TOKEN)\n                .get();\n        assertTrue(invalidateResponse.isCreated());\n        AtomicReference<String> docId = new AtomicReference<>();\n        assertBusy(() -> {\n            SearchResponse searchResponse = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)\n                    .setSource(SearchSourceBuilder.searchSource()\n                            .query(QueryBuilders.termQuery(""doc_type"", TokenService.INVALIDATED_TOKEN_DOC_TYPE)))\n                    .setSize(1)\n                    .setTerminateAfter(1)\n                    .get();\n            assertThat(searchResponse.getHits().getTotalHits(), equalTo(1L));\n            docId.set(searchResponse.getHits().getAt(0).getId());\n        });\n\n        // hack doc to modify the time to the day before\n        Instant dayBefore = created.minus(1L, ChronoUnit.DAYS);\n        assertTrue(Instant.now().isAfter(dayBefore));\n        client.prepareUpdate(SecurityIndexManager.SECURITY_INDEX_NAME, ""doc"", docId.get())\n                .setDoc(""expiration_time"", dayBefore.toEpochMilli())\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        AtomicBoolean deleteTriggered = new AtomicBoolean(false);\n        assertBusy(() -> {\n            if (deleteTriggered.compareAndSet(false, true)) {\n                // invalidate a invalid token... doesn\'t matter that it is bad... we just want this action to trigger the deletion\n                try {\n                    securityClient.prepareInvalidateToken(""fooobar"")\n                            .setType(randomFrom(InvalidateTokenRequest.Type.values()))\n                            .execute()\n                            .actionGet();\n                } catch (ElasticsearchSecurityException e) {\n                    assertEquals(""token malformed"", e.getMessage());\n                }\n            }\n            client.admin().indices().prepareRefresh(SecurityIndexManager.SECURITY_INDEX_NAME).get();\n            SearchResponse searchResponse = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)\n                    .setSource(SearchSourceBuilder.searchSource()\n                            .query(QueryBuilders.termQuery(""doc_type"", TokenService.INVALIDATED_TOKEN_DOC_TYPE)))\n                    .setSize(0)\n                    .setTerminateAfter(1)\n                    .get();\n            assertThat(searchResponse.getHits().getTotalHits(), equalTo(0L));\n        }, 30, TimeUnit.SECONDS);\n    }\n']",pack;Logging;After;Expiration;Grant;Auth;Instant;EST;Atomic;SECURE,2.6775524020195007e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.8896098136901855, -5.6689677238464355, -6.374271869659424, -5.453135013580322, -5.582245349884033, -0.01610027626156807]",0.9840286374092102
3,"['@TestLogging(""org.elasticsearch.xpack.security.authz.store.NativePrivilegeStore:TRACE"")\n    public void setup() {\n        requests = new ArrayList<>();\n        listener = new AtomicReference<>();\n        client = new NoOpClient(getTestName()) {\n            @Override\n            protected <Request extends ActionRequest,\n                Response extends ActionResponse,\n                RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>>\n            void doExecute(Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) {\n                NativePrivilegeStoreTests.this.requests.add(request);\n                NativePrivilegeStoreTests.this.listener.set(listener);\n            }\n        };\n        final SecurityIndexManager securityIndex = mock(SecurityIndexManager.class);\n        when(securityIndex.freeze()).thenReturn(securityIndex);\n        when(securityIndex.indexExists()).thenReturn(true);\n        when(securityIndex.isAvailable()).thenReturn(true);\n        Mockito.doAnswer(invocationOnMock -> {\n            assertThat(invocationOnMock.getArguments().length, equalTo(2));\n            assertThat(invocationOnMock.getArguments()[1], instanceOf(Runnable.class));\n            ((Runnable) invocationOnMock.getArguments()[1]).run();\n            return null;\n        }).when(securityIndex).prepareIndexIfNeededThenExecute(any(Consumer.class), any(Runnable.class));\n        Mockito.doAnswer(invocationOnMock -> {\n            assertThat(invocationOnMock.getArguments().length, equalTo(2));\n            assertThat(invocationOnMock.getArguments()[1], instanceOf(Runnable.class));\n            ((Runnable) invocationOnMock.getArguments()[1]).run();\n            return null;\n        }).when(securityIndex).checkIndexVersionThenExecute(any(Consumer.class), any(Runnable.class));\n        store = new NativePrivilegeStore(Settings.EMPTY, client, securityIndex);\n    }\n']",freeze;mock;index;client;Privilege;Logging;Arguments;Execute;Store;ock,1.57160684466362e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.897494792938232, -5.7885236740112305, -6.944220542907715, -5.973937511444092, -5.7565598487854, -0.012557720765471458]",0.9875208139419556
3,"['@TestLogging(""org.elasticsearch.xpack.security.action.user.TransportHasPrivilegesAction:TRACE,"" +\n    public void setup() {\n        final Settings settings = Settings.builder().build();\n        user = new User(randomAlphaOfLengthBetween(4, 12));\n        final ThreadPool threadPool = mock(ThreadPool.class);\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        final TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet());\n\n        final Authentication authentication = mock(Authentication.class);\n        threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication);\n        when(threadPool.getThreadContext()).thenReturn(threadContext);\n\n        when(authentication.getUser()).thenReturn(user);\n\n        AuthorizationService authorizationService = mock(AuthorizationService.class);\n        Mockito.doAnswer(invocationOnMock -> {\n            ActionListener<Role> listener = (ActionListener<Role>) invocationOnMock.getArguments()[1];\n            listener.onResponse(role);\n            return null;\n        }).when(authorizationService).roles(eq(user), any(ActionListener.class));\n\n        applicationPrivileges = new ArrayList<>();\n        NativePrivilegeStore privilegeStore = mock(NativePrivilegeStore.class);\n        Mockito.doAnswer(inv -> {\n            assertThat(inv.getArguments(), arrayWithSize(3));\n            ActionListener<List<ApplicationPrivilegeDescriptor>> listener\n                = (ActionListener<List<ApplicationPrivilegeDescriptor>>) inv.getArguments()[2];\n            logger.info(""Privileges for ({}) are {}"", Arrays.toString(inv.getArguments()), applicationPrivileges);\n            listener.onResponse(applicationPrivileges);\n            return null;\n        }).when(privilegeStore).getPrivileges(any(Collection.class), any(Collection.class), any(ActionListener.class));\n\n        action = new TransportHasPrivilegesAction(settings, threadPool, transportService, mock(ActionFilters.class),\n            mock(IndexNameExpressionResolver.class), authorizationService, privilegeStore);\n    }\n']",Logging;org;elasticsearch;Transport;TRACE;Answer;Settings;Thread;mock;Mockito,6.170012056827545e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.604264050722122e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.934447288513184, -5.696227073669434, -6.714428424835205, -5.752803325653076, -5.7968292236328125, -0.013520690612494946]",0.986570417881012
3,"['@TestLogging(""org.elasticsearch.xpack.security.audit.index:TRACE"")\n    public boolean transportSSLEnabled() {\n        return sslEnabled;\n    }\n']",index;audit;Logging;SSLE;return;security;abled;sl;Enabled;boolean,4.190951585769653e-09;3.259629011154175e-09;1.3969838619232178e-09;1.0477378964424133e-09;5.820766091346741e-10;4.656612873077393e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-8.149072527885437e-10;-9.313225746154785e-10,5,5,"[-6.029247760772705, -5.960044860839844, -6.5404276847839355, -5.616321086883545, -5.467984199523926, -0.014391789212822914]",0.9857112765312195
3,"['@TestLogging(""org.elasticsearch.xpack.ssl.RestrictedTrustManager:DEBUG"")\n    public Settings nodeSettings(int nodeOrdinal) {\n\n        Settings parentSettings = super.nodeSettings(nodeOrdinal);\n        Settings.Builder builder = Settings.builder()\n                .put(parentSettings.filter((s) -> s.startsWith(""xpack.ssl."") == false))\n                .put(nodeSSL);\n\n        restrictionsPath = configPath.resolve(""trust_restrictions.yml"");\n        restrictionsTmpPath = configPath.resolve(""trust_restrictions.tmp"");\n\n        writeRestrictions(""*.trusted"");\n        builder.put(""xpack.ssl.trust_restrictions.path"", restrictionsPath);\n        builder.put(""resource.reload.interval.high"", RESOURCE_RELOAD_MILLIS + ""ms"");\n\n        return builder.build();\n    }\n']",node;Ordinal;ms;Manager;Logging;put;parent;reload;trust;Path,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.936080455780029, -5.825113773345947, -6.515987396240234, -5.57309103012085, -5.611477375030518, -0.014635349623858929]",0.985471248626709
3,"['@TestLogging(""org.elasticsearch.cluster.service:TRACE,org.elasticsearch.discovery.zen:TRACE,org.elasticsearch.action.search:TRACE,"" +\n    public Settings nodeSettings(int nodeOrdinal) {\n        return Settings.builder().put(super.nodeSettings(nodeOrdinal))\n                .put(NetworkModule.HTTP_ENABLED.getKey(), true)\n            .put(TestZenDiscovery.USE_MOCK_PINGS.getKey(), false)\n                .build();\n    }\n']",TRACE;node;Settings;elasticsearch;action;Key;OCK;elasticsearch;return;search,4.6566128730773926e-09;4.307366907596588e-09;3.259629011154175e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.5133991837501526e-09;9.89530235528946e-10;9.313225746154785e-10,5,5,"[-6.0787672996521, -6.087522506713867, -6.655930995941162, -5.6338300704956055, -5.556351184844971, -0.01337508112192154]",0.9867138266563416
3,"['    @TestLogging(""org.elasticsearch.xpack.persistent:TRACE,org.elasticsearch.cluster.service:DEBUG,org.elasticsearch.xpack.ml.action:DEBUG"")\n    public void testDedicatedMlNode() throws Exception {\n        internalCluster().ensureAtMostNumDataNodes(0);\n        // start 2 non ml node that will never get a job allocated. (but ml apis are accessible from this node)\n        internalCluster().startNode(Settings.builder().put(MachineLearning.ML_ENABLED.getKey(), false));\n        internalCluster().startNode(Settings.builder().put(MachineLearning.ML_ENABLED.getKey(), false));\n        // start ml node\n        if (randomBoolean()) {\n            internalCluster().startNode(Settings.builder().put(MachineLearning.ML_ENABLED.getKey(), true));\n        } else {\n            // the default is based on \'xpack.ml.enabled\', which is enabled in base test class.\n            internalCluster().startNode();\n        }\n        ensureStableCluster(3);\n\n        String jobId = ""dedicated-ml-node-job"";\n        Job.Builder job = createJob(jobId, new ByteSizeValue(2, ByteSizeUnit.MB));\n        PutJobAction.Request putJobRequest = new PutJobAction.Request(job);\n        client().execute(PutJobAction.INSTANCE, putJobRequest).actionGet();\n\n        OpenJobAction.Request openJobRequest = new OpenJobAction.Request(job.getId());\n        client().execute(OpenJobAction.INSTANCE, openJobRequest).actionGet();\n        assertBusy(() -> {\n            ClusterState clusterState = client().admin().cluster().prepareState().get().getState();\n            PersistentTasksCustomMetaData tasks = clusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n            PersistentTask<?> task = tasks.getTask(MlTasks.jobTaskId(jobId));\n            DiscoveryNode node = clusterState.nodes().resolveNode(task.getExecutorNode());\n            assertThat(node.getAttributes(), hasEntry(MachineLearning.ML_ENABLED_NODE_ATTR, ""true""));\n            assertThat(node.getAttributes(), hasEntry(MachineLearning.MAX_OPEN_JOBS_NODE_ATTR, ""20""));\n            JobTaskState jobTaskState = (JobTaskState) task.getState();\n            assertNotNull(jobTaskState);\n            assertEquals(JobState.OPENED, jobTaskState.getState());\n        });\n\n        logger.info(""stop the only running ml node"");\n        internalCluster().stopRandomNode(settings -> settings.getAsBoolean(MachineLearning.ML_ENABLED.getKey(), true));\n        ensureStableCluster(2);\n        assertBusy(() -> {\n            // job should get and remain in a failed state and\n            // the status remains to be opened as from ml we didn\'t had the chance to set the status to failed:\n            assertJobTask(jobId, JobState.OPENED, false);\n        });\n\n        logger.info(""start ml node"");\n        internalCluster().startNode(Settings.builder().put(MachineLearning.ML_ENABLED.getKey(), true));\n        ensureStableCluster(3);\n        assertBusy(() -> {\n            // job should be re-opened:\n            assertJobTask(jobId, JobState.OPENED, true);\n        });\n    }\n']",default;elasticsearch;elasticsearch;org;Stable;pack;ml;on;dedicated;Learning,1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.902899742126465, -5.697708606719971, -6.507505416870117, -5.560737133026123, -5.668626308441162, -0.014987601898610592]",0.9851241707801819
3,"['    @TestLogging(""org.elasticsearch.xpack.ml.action:DEBUG,org.elasticsearch.xpack.persistent:TRACE,"" +\n    public void testLoseDedicatedMasterNode() throws Exception {\n        internalCluster().ensureAtMostNumDataNodes(0);\n        logger.info(""Starting dedicated master node..."");\n        internalCluster().startNode(Settings.builder()\n                .put(""node.master"", true)\n                .put(""node.data"", false)\n                .put(""node.ml"", false)\n                .build());\n        logger.info(""Starting ml and data node..."");\n        String mlAndDataNode = internalCluster().startNode(Settings.builder()\n                .put(""node.master"", false)\n                .build());\n        ensureStableClusterOnAllNodes(2);\n        run(""lose-dedicated-master-node-job"", () -> {\n            logger.info(""Stopping dedicated master node"");\n            internalCluster().stopRandomNode(settings -> settings.getAsBoolean(""node.master"", false));\n            assertBusy(() -> {\n                ClusterState state = client(mlAndDataNode).admin().cluster().prepareState()\n                        .setLocal(true).get().getState();\n                assertNull(state.nodes().getMasterNodeId());\n            });\n            logger.info(""Restarting dedicated master node"");\n            internalCluster().startNode(Settings.builder()\n                    .put(""node.master"", true)\n                    .put(""node.data"", false)\n                    .put(""node.ml"", false)\n                    .build());\n            ensureStableClusterOnAllNodes(2);\n        });\n    }\n']",Local;elasticsearch;org;Bus;TRACE;persistent;Starting;DEBUG;ml;edicated,2.9103830456733704e-09;2.1245796233415604e-09;1.3969838619232178e-09;9.604264050722122e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.887059211730957, -5.670994758605957, -6.398737907409668, -5.430745601654053, -5.617258071899414, -0.01602531410753727]",0.9841024279594421
3,"['    @TestLogging(""org.elasticsearch.xpack.ml.job.process.autodetect:DEBUG"")\n    public void testCanCloseClosingJob() throws Exception {\n        AutodetectCommunicator communicator = mock(AutodetectCommunicator.class);\n        AtomicInteger numberOfCommunicatorCloses = new AtomicInteger(0);\n        doAnswer(invocationOnMock -> {\n            numberOfCommunicatorCloses.incrementAndGet();\n            // This increases the chance of the two threads both getting into\n            // the middle of the AutodetectProcessManager.close() method\n            Thread.yield();\n            return null;\n        }).when(communicator).close(anyBoolean(), anyString());\n        AutodetectProcessManager manager = createManager(communicator);\n        assertEquals(0, manager.numberOfOpenJobs());\n\n        JobTask jobTask = mock(JobTask.class);\n        when(jobTask.getJobId()).thenReturn(""foo"");\n        manager.openJob(jobTask, e -> {});\n        manager.processData(jobTask, analysisRegistry, createInputStream(""""), randomFrom(XContentType.values()),\n                mock(DataLoadParams.class), (dataCounts1, e) -> {});\n\n        assertEquals(1, manager.numberOfOpenJobs());\n\n        // Close the job in a separate thread\n        Thread closeThread = new Thread(() -> manager.closeJob(jobTask, false, ""in separate thread""));\n        closeThread.start();\n        Thread.yield();\n\n        // Also close the job in the current thread, so that we have two simultaneous close requests\n        manager.closeJob(jobTask, false, ""in main test thread"");\n\n        // The 10 second timeout here is usually far in excess of what is required.  In the vast\n        // majority of cases the other thread will exit within a few milliseconds.  However, it\n        // has been observed that on some VMs the test can fail because the VM stalls at the\n        // wrong moment.  A 10 second timeout is on a par with the length of time assertBusy()\n        // would wait under these circumstances.\n        closeThread.join(10000);\n        assertFalse(closeThread.isAlive());\n\n        // Only one of the threads should have called AutodetectCommunicator.close()\n        assertEquals(1, numberOfCommunicatorCloses.get());\n        assertEquals(0, manager.numberOfOpenJobs());\n    }\n']",Logging;org;communicator;ml;autodetect;Communicator;Autodetect;Communicator;Communicator;process,2.561137080192566e-09;1.6880221664905548e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.675246939063072e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.901604652404785, -5.678055763244629, -6.495537757873535, -5.567165374755859, -5.65254020690918, -0.015108905732631683]",0.9850046634674072
3,"['@TestLogging(""org.elasticsearch.xpack.ml.action:DEBUG"")\n    public void resetLicensing() {\n        enableLicensing();\n\n        ensureStableCluster(1);\n        ensureYellow();\n    }\n']",org;Licensing;Cluster;Logging;action;Stable;elasticsearch;Yellow;reset;ensure,5.122274160385132e-09;4.423782229423523e-09;4.190951585769653e-09;3.725290298461914e-09;3.725290298461914e-09;2.3283064365386963e-09;8.149072527885437e-10;3.4924596548080444e-10;-5.820766091346741e-10;-6.984919309616089e-10,5,5,"[-5.97873592376709, -5.869658470153809, -6.484377384185791, -5.571231842041016, -5.530725479125977, -0.014760219492018223]",0.9853481650352478
3,"['@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,org.elasticsearch.xpack.watcher.WatcherIndexingListener:TRACE"")\n    public void testActionConditionWithHardFailures() throws Exception {\n        final String id = ""testActionConditionWithHardFailures"";\n\n        final ExecutableCondition scriptConditionFailsHard = mockScriptCondition(""throw new IllegalStateException(\'failed\');"");\n        final List<ExecutableCondition> actionConditionsWithFailure =\n                Arrays.asList(scriptConditionFailsHard, conditionPasses, InternalAlwaysCondition.INSTANCE);\n\n        Collections.shuffle(actionConditionsWithFailure, random());\n\n        final int failedIndex = actionConditionsWithFailure.indexOf(scriptConditionFailsHard);\n\n        putAndTriggerWatch(id, input, actionConditionsWithFailure.toArray(new Condition[actionConditionsWithFailure.size()]));\n\n        flush();\n\n        assertWatchWithMinimumActionsCount(id, ExecutionState.EXECUTED, 1);\n\n        // only one action should have failed via condition\n        final SearchResponse response = searchHistory(SearchSourceBuilder.searchSource().query(termQuery(""watch_id"", id)));\n        assertThat(response.getHits().getTotalHits(), is(1L));\n\n        final SearchHit hit = response.getHits().getAt(0);\n        final List<Object> actions = getActionsFromHit(hit.getSourceAsMap());\n\n        for (int i = 0; i < actionConditionsWithFailure.size(); ++i) {\n            final Map<String, Object> action = (Map<String, Object>)actions.get(i);\n            final Map<String, Object> condition = (Map<String, Object>)action.get(""condition"");\n            final Map<String, Object> logging = (Map<String, Object>)action.get(""logging"");\n\n            assertThat(action.get(""id""), is(""action"" + i));\n\n            if (i == failedIndex) {\n                assertThat(action.get(""status""), is(""condition_failed""));\n                assertThat(action.get(""reason""), is(""condition failed. skipping: [expected] failed hard""));\n                assertThat(condition, nullValue());\n                assertThat(logging, nullValue());\n            } else {\n                assertThat(condition.get(""type""), is(actionConditionsWithFailure.get(i).type()));\n\n                assertThat(action.get(""status""), is(""success""));\n                assertThat(condition.get(""met""), is(true));\n                assertThat(action.get(""reason""), nullValue());\n                assertThat(logging.get(""logged_text""), is(Integer.toString(i)));\n            }\n        }\n    }\n']",Logging;DEBUG;org;Query;List;id;TRACE;Failures;mock;as,2.0954757928848267e-09;1.979060471057892e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10,5,5,"[-5.998506546020508, -5.684895992279053, -6.880107402801514, -5.939152717590332, -5.803744792938232, -0.01263741496950388]",0.9874420762062073
3,"['@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,"" +\n    public void setUp() throws Exception {\n        super.setUp();\n        server = EmailServer.localhost(logger);\n    }\n']",elasticsearch;Logging;org;set;set;localhost;Email;Exception;super;Up,6.984919309616089e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.280568540096283e-09;1.1641532182693481e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.968782901763916, -5.918808460235596, -6.497371196746826, -5.587182521820068, -5.511386871337891, -0.014646039344370365]",0.9854608178138733
3,"['@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,org.elasticsearch.xpack.watcher.WatcherIndexingListener:TRACE"")\n    public void testHttpInput() throws Exception {\n        createIndex(""index"");\n        client().prepareIndex(""index"", ""type"", ""id"").setSource(""{}"", XContentType.JSON).setRefreshPolicy(IMMEDIATE).get();\n\n        InetSocketAddress address = internalCluster().httpAddresses()[0];\n        watcherClient().preparePutWatch(""_name"")\n                .setSource(watchBuilder()\n                        .trigger(schedule(interval(""5s"")))\n                        .input(httpInput(HttpRequestTemplate.builder(address.getHostString(), address.getPort())\n                                .path(""/index/_search"")\n                                .body(Strings.toString(jsonBuilder().startObject().field(""size"", 1).endObject()))\n                                .putHeader(""Content-Type"", new TextTemplate(""application/json""))))\n                        .condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 1L))\n                        .addAction(""_id"", loggingAction(""anything"")))\n                .get();\n\n        timeWarp().trigger(""_name"");\n        refresh();\n        assertWatchWithMinimumPerformedActionsCount(""_name"", 1, false);\n    }\n']",elasticsearch;its;Cluster;org;Logging;Listener;http;Compare;total;trigger,2.0954757928848267e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.97525691986084, -5.828263282775879, -6.787077903747559, -5.851230621337891, -5.73856258392334, -0.012789487838745117]",0.9872919321060181
3,"['@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,"" +\n    public void testIndexWatch() throws Exception {\n        WatcherClient watcherClient = watcherClient();\n        createIndex(""idx"");\n        // Have a sample document in the index, the watch is going to evaluate\n        client().prepareIndex(""idx"", ""type"").setSource(""field"", ""foo"").get();\n        refresh();\n        WatcherSearchTemplateRequest request = templateRequest(searchSource().query(termQuery(""field"", ""foo"")), ""idx"");\n        watcherClient.preparePutWatch(""_name"")\n                .setSource(watchBuilder()\n                        .trigger(schedule(interval(5, IntervalSchedule.Interval.Unit.SECONDS)))\n                        .input(searchInput(request))\n                        .condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 1L))\n                        .addAction(""_logger"", loggingAction(""_logging"")\n                                .setCategory(""_category"")))\n                .get();\n\n        timeWarp().trigger(""_name"");\n        assertWatchWithMinimumPerformedActionsCount(""_name"", 1);\n\n        GetWatchResponse getWatchResponse = watcherClient().prepareGetWatch().setId(""_name"").get();\n        assertThat(getWatchResponse.isFound(), is(true));\n        assertThat(getWatchResponse.getSource(), notNullValue());\n    }\n']",Logging;its;watcher;Response;pack;query;Search;Op;DEBUG;Condition,2.561137080192566e-09;1.1641532182693481e-09;7.712515071034431e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.929494380950928, -5.746318340301514, -6.543724060058594, -5.614753723144531, -5.668920993804932, -0.014493308961391449]",0.9856112003326416
3,"['    @TestLogging(""org.elasticsearch.xpack.watcher:DEBUG"")\n    public void testModifyWatches() throws Exception {\n        createIndex(""idx"");\n        WatcherSearchTemplateRequest searchRequest = templateRequest(searchSource().query(matchAllQuery()), ""idx"");\n\n        WatchSourceBuilder source = watchBuilder()\n                .trigger(schedule(interval(""5s"")))\n                .input(searchInput(searchRequest))\n                .addAction(""_id"", indexAction(""idx"", ""action""));\n\n        watcherClient().preparePutWatch(""_name"")\n                .setSource(source.condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 1L)))\n                .get();\n\n        timeWarp().clock().fastForwardSeconds(5);\n        timeWarp().trigger(""_name"");\n        assertWatchWithMinimumPerformedActionsCount(""_name"", 0, false);\n\n        watcherClient().preparePutWatch(""_name"")\n                .setSource(source.condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 0L)))\n                .get();\n\n        timeWarp().clock().fastForwardSeconds(5);\n        timeWarp().trigger(""_name"");\n        refresh();\n        assertWatchWithMinimumPerformedActionsCount(""_name"", 1, false);\n\n        watcherClient().preparePutWatch(""_name"")\n                .setSource(source\n                        .trigger(schedule(Schedules.cron(""0/1 * * * * ? 2020"")))\n                        .condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 0L)))\n                .get();\n\n        timeWarp().clock().fastForwardSeconds(5);\n        timeWarp().trigger(""_name"");\n        long count = findNumberOfPerformedActions(""_name"");\n\n        timeWarp().clock().fastForwardSeconds(5);\n        timeWarp().trigger(""_name"");\n        assertThat(count, equalTo(findNumberOfPerformedActions(""_name"")));\n    }\n']",arp;elasticsearch;arp;atches;Input;search;Exception;Forward;create;Watch,1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.870571613311768, -5.691992282867432, -6.394465446472168, -5.4423980712890625, -5.571019172668457, -0.016130071133375168]",0.9839994311332703
3,"['@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG"")\n    public void indexTestDocument() {\n        IndexResponse eventIndexResponse = client().prepareIndex(""events"", ""event"", id)\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .setSource(""level"", ""error"")\n                .get();\n        assertEquals(DocWriteResponse.Result.CREATED, eventIndexResponse.getResult());\n    }\n']",DEBUG;atcher;Source;pack;prepare;ATE;Policy;error;Equals;event,3.026798367500305e-09;1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.972919464111328, -5.905961990356445, -6.516847610473633, -5.585070610046387, -5.562154769897461, -0.014446193352341652]",0.9856577515602112
3,"['@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,"" +\n    public void testTimeThrottle(){\n        String id = randomAlphaOfLength(20);\n        PutWatchResponse putWatchResponse = watcherClient().preparePutWatch()\n                .setId(id)\n                .setSource(watchBuilder()\n                        .trigger(schedule(interval(""5s"")))\n                        .input(simpleInput())\n                        .addAction(""my-logging-action"", loggingAction(""foo""))\n                        .defaultThrottlePeriod(TimeValue.timeValueSeconds(30)))\n                .get();\n        assertThat(putWatchResponse.isCreated(), is(true));\n\n        timeWarp().trigger(id);\n        assertHistoryEntryExecuted(id);\n\n        timeWarp().clock().fastForward(TimeValue.timeValueMillis(4000));\n        timeWarp().trigger(id);\n        assertHistoryEntryThrottled(id);\n\n        timeWarp().clock().fastForwardSeconds(30);\n        timeWarp().trigger(id);\n        assertHistoryEntryExecuted(id);\n\n        assertTotalHistoryEntries(id, 3);\n    }\n']",org;logging;DEBUG;random;Throttle;Period;watch;input;Client;pack,1.862645149230957e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.8886919021606445, -5.693038463592529, -6.468303680419922, -5.582574844360352, -5.645750045776367, -0.015100568532943726]",0.9850128889083862
3,"['@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,org.elasticsearch.xpack.watcher.WatcherIndexingListener:TRACE"")\n    public void testDeactivateAndActivate() throws Exception {\n        PutWatchResponse putWatchResponse = watcherClient().preparePutWatch()\n                .setId(""_id"")\n                .setSource(watchBuilder()\n                        .trigger(schedule(interval(""1s"")))\n                        .input(simpleInput(""foo"", ""bar""))\n                        .addAction(""_a1"", indexAction(""actions"", ""action1""))\n                        .defaultThrottlePeriod(new TimeValue(0, TimeUnit.SECONDS)))\n                .get();\n\n        assertThat(putWatchResponse.isCreated(), is(true));\n\n        GetWatchResponse getWatchResponse = watcherClient().prepareGetWatch(""_id"").get();\n        assertThat(getWatchResponse, notNullValue());\n        assertThat(getWatchResponse.getStatus().state().isActive(), is(true));\n\n        logger.info(""Waiting for watch to be executed at least once"");\n        assertWatchWithMinimumActionsCount(""_id"", ExecutionState.EXECUTED, 1);\n\n        // we now know the watch is executing... lets deactivate it\n        ActivateWatchResponse activateWatchResponse = watcherClient().prepareActivateWatch(""_id"", false).get();\n        assertThat(activateWatchResponse, notNullValue());\n        assertThat(activateWatchResponse.getStatus().state().isActive(), is(false));\n\n        getWatchResponse = watcherClient().prepareGetWatch(""_id"").get();\n        assertThat(getWatchResponse, notNullValue());\n        assertThat(getWatchResponse.getStatus().state().isActive(), is(false));\n\n        // wait until no watch is executing\n        assertBusy(() -> {\n            WatcherStatsResponse statsResponse = watcherClient().prepareWatcherStats().setIncludeCurrentWatches(true).get();\n            int sum = statsResponse.getNodes().stream().map(WatcherStatsResponse.Node::getSnapshots).mapToInt(List::size).sum();\n            assertThat(sum, is(0));\n        });\n\n        logger.info(""Ensured no more watches are being executed"");\n        refresh();\n        long count1 = docCount("".watcher-history*"", ""doc"", matchAllQuery());\n\n        logger.info(""Sleeping for 5 seconds, watch history count [{}]"", count1);\n        Thread.sleep(5000);\n\n        refresh();\n        long count2 = docCount("".watcher-history*"", ""doc"", matchAllQuery());\n\n        assertThat(count2, is(count1));\n\n        // lets activate it again\n        logger.info(""Activating watch again"");\n\n        activateWatchResponse = watcherClient().prepareActivateWatch(""_id"", true).get();\n        assertThat(activateWatchResponse, notNullValue());\n        assertThat(activateWatchResponse.getStatus().state().isActive(), is(true));\n\n        getWatchResponse = watcherClient().prepareGetWatch(""_id"").get();\n        assertThat(getWatchResponse, notNullValue());\n        assertThat(getWatchResponse.getStatus().state().isActive(), is(true));\n\n        logger.info(""Sleeping for another five seconds, ensuring that watch is executed"");\n        Thread.sleep(5000);\n        refresh();\n        long count3 = docCount("".watcher-history*"", ""doc"", matchAllQuery());\n        assertThat(count3, greaterThan(count1));\n    }\n']",DEBUG;Logging;schedule;Deactivate;pack;atcher;TRACE;Period;atcher;foo,7.683411240577698e-09;4.6566128730773926e-09;3.14321368932724e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09,5,5,"[-5.888572692871094, -5.878964900970459, -6.834193229675293, -5.878593444824219, -5.740510940551758, -0.012737465091049671]",0.9873431921005249
3,"['    @Test\n    public void testPluginInstalled() {\n        try (TransportClient client = new PreBuiltTransportClient(Settings.EMPTY)) {\n            Settings settings = client.settings();\n            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));\n            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.get(settings));\n        }\n    }\n']",Built;TRANSPORT;client;Client;Settings;HTTP;NETTY;Plugin;NETTY;Client,9.313225746154785e-10;9.094947017729282e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.870169162750244, -5.73371696472168, -6.335413455963135, -5.403496265411377, -5.471338748931885, -0.016674436628818512]",0.983463704586029
3,"['    @Test\n    public void testInstallPluginTwice() {\n        for (Class<? extends Plugin> plugin :\n                Arrays.asList(ParentJoinPlugin.class, ReindexPlugin.class, PercolatorPlugin.class,\n                    MustachePlugin.class)) {\n            try {\n                new PreBuiltTransportClient(Settings.EMPTY, plugin);\n                fail(""exception expected"");\n            } catch (IllegalArgumentException ex) {\n                assertTrue(""Expected message to start with [plugin already exists: ] but was instead ["" + ex.getMessage() + ""]"",\n                        ex.getMessage().startsWith(""plugin already exists: ""));\n            }\n        }\n    }\n']",already;Plugin;Class;exists;message;new;Mustache;Plugin;with;EMPTY,5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8695526123046875, -5.700057506561279, -6.311377048492432, -5.358664512634277, -5.516334533691406, -0.016854381188750267]",0.9832868576049805
3,"['@TestMethodProviders({\n    public void logTestNameBefore() {\n        logger.info(""["" + testNameRule.getMethodName() + ""]: before test"");\n    }\n']",Providers;Method;Rule;log;Name;Before;Name;logger;get;Name,6.984919309616089e-09;6.51925802230835e-09;5.122274160385132e-09;2.561137080192566e-09;9.313225746154785e-10;2.3283064365386963e-10;0.0;0.0;-2.3283064365386963e-09;-2.7939677238464355e-09,5,5,"[-5.985778331756592, -5.977392673492432, -6.516950607299805, -5.572934627532959, -5.4593825340271, -0.014690679498016834]",0.9854167103767395
3,"['@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class)\n    public void onlyCompatibleDistributions() {\n        assumeTrue(""only rpm platforms"", isRPM());\n        assumeTrue(""only compatible distributions"", distribution().packaging.compatible);\n    }\n']",Ordering;Alphabetic;Case;assume;Ordering;only;rpm;PM;assume;distributions,1.4668330550193787e-08;3.4924596548080444e-09;2.561137080192566e-09;2.561137080192566e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10,5,5,"[-6.0307416915893555, -6.013930797576904, -6.608672618865967, -5.662937164306641, -5.523336410522461, -0.01375576201826334]",0.9863384366035461
3,"['@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class)\n    public void onlyCompatibleDistributions() {\n        assumeTrue(""only compatible distributions"", distribution().packaging.compatible);\n    }\n']",compatible;distribution;Alphabetic;distributions;only;Order;Ordering;Ordering;Case;Compatible,3.725290298461914e-09;3.725290298461914e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.280568540096283e-09;8.731149137020111e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-6.041565895080566, -6.063259124755859, -6.593598365783691, -5.633786678314209, -5.459707736968994, -0.014001123607158661]",0.9860964417457581
3,"['@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class)\n    public void onlyCompatibleDistributions() {\n        assumeTrue(""only compatible distributions"", distribution().packaging.compatible);\n    }\n']",compatible;distribution;Alphabetic;distributions;only;Order;Ordering;Ordering;Case;Compatible,3.725290298461914e-09;3.725290298461914e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.280568540096283e-09;8.731149137020111e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-6.041565895080566, -6.063259124755859, -6.593598365783691, -5.633786678314209, -5.459707736968994, -0.014001123607158661]",0.9860964417457581
3,"['@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class)\n    public void onlyCompatibleDistributions() {\n        assumeTrue(""only dpkg platforms"", isDPKG());\n        assumeTrue(""only compatible distributions"", distribution().packaging.compatible);\n    }\n']",Compatible;assume;Ordering;only;pkg;class;Distributions;DP;Case;Order,8.731149137020111e-09;6.984919309616089e-09;3.259629011154175e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;2.3283064365386963e-10;0.0,5,5,"[-6.029897689819336, -6.025297164916992, -6.617156505584717, -5.666445732116699, -5.519936561584473, -0.01371978223323822]",0.9863739013671875
3,"['@TestRuleLimitSysouts.Limit(bytes = 14000)\n    public void testTransportClient() throws URISyntaxException, IOException {\n        try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n            final String str = String.format(\n                    Locale.ROOT,\n                    ""http://localhost:%d/wildfly-%s%s/transport/employees/1"",\n                    Integer.parseInt(System.getProperty(""tests.jboss.http.port"")),\n                    Version.CURRENT,\n                    Build.CURRENT.isSnapshot() ? ""-SNAPSHOT"" : """");\n            final HttpPut put = new HttpPut(new URI(str));\n            final String body;\n            try (XContentBuilder builder = jsonBuilder()) {\n                builder.startObject();\n                {\n                    builder.field(""first_name"", ""John"");\n                    builder.field(""last_name"", ""Smith"");\n                    builder.field(""age"", 25);\n                    builder.field(""about"", ""I love to go rock climbing"");\n                    builder.startArray(""interests"");\n                    {\n                        builder.value(""sports"");\n                        builder.value(""music"");\n                    }\n                    builder.endArray();\n                }\n                builder.endObject();\n                body = Strings.toString(builder);\n            }\n            put.setEntity(new StringEntity(body, ContentType.APPLICATION_JSON));\n            try (CloseableHttpResponse response = client.execute(put)) {\n                int status = response.getStatusLine().getStatusCode();\n                assertThat(""expected a 201 response but got: "" + status + "" - body: "" + EntityUtils.toString(response.getEntity()),\n                        status, equalTo(201));\n            }\n\n            final HttpGet get = new HttpGet(new URI(str));\n            try (\n                    CloseableHttpResponse response = client.execute(get);\n                    XContentParser parser =\n                            JsonXContent.jsonXContent.createParser(\n                                    new NamedXContentRegistry(ClusterModule.getNamedXWriteables()),\n                                    DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                                    response.getEntity().getContent())) {\n                final Map<String, Object> map = parser.map();\n                assertThat(map.get(""first_name""), equalTo(""John""));\n                assertThat(map.get(""last_name""), equalTo(""Smith""));\n                assertThat(map.get(""age""), equalTo(25));\n                assertThat(map.get(""about""), equalTo(""I love to go rock climbing""));\n                final Object interests = map.get(""interests"");\n                assertThat(interests, instanceOf(List.class));\n                @SuppressWarnings(""unchecked"") final List<String> interestsAsList = (List<String>) interests;\n                assertThat(interestsAsList, containsInAnyOrder(""sports"", ""music""));\n            }\n        }\n    }\n']",Rule;employees;name;new;URRENT;name;build;transport;Locale;Transport,1.3969838619232178e-09;1.3969838619232178e-09;8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.916657447814941, -5.808269023895264, -6.488916397094727, -5.516887187957764, -5.625624656677246, -0.014950843527913094]",0.9851603507995605
3,"['    @TestGroup(enabled = false, sysProperty = ESIntegTestCase.SYSPROP_THIRDPARTY)\n    public void randomIndexTemplate() throws IOException {\n\n        // TODO move settings for random directory etc here into the index based randomized settings.\n        if (cluster().size() > 0) {\n            Settings.Builder randomSettingsBuilder =\n                setRandomIndexSettings(random(), Settings.builder());\n            if (isInternalCluster()) {\n                // this is only used by mock plugins and if the cluster is not internal we just can\'t set it\n                randomSettingsBuilder.put(INDEX_TEST_SEED_SETTING.getKey(), random().nextLong());\n            }\n\n            randomSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS, numberOfShards())\n                .put(SETTING_NUMBER_OF_REPLICAS, numberOfReplicas());\n\n            // if the test class is annotated with SuppressCodecs(""*""), it means don\'t use lucene\'s codec randomization\n            // otherwise, use it, it has assertions and so on that can find bugs.\n            SuppressCodecs annotation = getClass().getAnnotation(SuppressCodecs.class);\n            if (annotation != null && annotation.value().length == 1 && ""*"".equals(annotation.value()[0])) {\n                randomSettingsBuilder.put(""index.codec"", randomFrom(CodecService.DEFAULT_CODEC, CodecService.BEST_COMPRESSION_CODEC));\n            } else {\n                randomSettingsBuilder.put(""index.codec"", CodecService.LUCENE_DEFAULT_CODEC);\n            }\n\n            for (String setting : randomSettingsBuilder.keys()) {\n                assertThat(""non index. prefix setting set on index template, its a node setting..."", setting, startsWith(""index.""));\n            }\n            // always default delayed allocation to 0 to make sure we have tests are not delayed\n            randomSettingsBuilder.put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), 0);\n            if (randomBoolean()) {\n                randomSettingsBuilder.put(IndexModule.INDEX_QUERY_CACHE_ENABLED_SETTING.getKey(), randomBoolean());\n            }\n            PutIndexTemplateRequestBuilder putTemplate = client().admin().indices()\n                .preparePutTemplate(""random_index_template"")\n                .setPatterns(Collections.singletonList(""*""))\n                .setOrder(0)\n                .setSettings(randomSettingsBuilder);\n            assertAcked(putTemplate.execute().actionGet());\n        }\n    }\n']",ESInteg;enabled;Replicas;lucene's;REPLICAS;sys;Index;SYSP;internal;randomization,1.7462298274040222e-09;1.3969838619232178e-09;1.1423253454267979e-09;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.9281744956970215, -5.651772499084473, -6.489017009735107, -5.566786289215088, -5.671457290649414, -0.015073326416313648]",0.9850397109985352
3,"['    @Test\n    public void testReproducible() throws IOException {\n        if (ITER++ == 0) {\n            CLUSTER_SEED = cluster().seed();\n            for (int i = 0; i < SEQUENCE.length; i++) {\n                SEQUENCE[i] = randomLong();\n            }\n        } else {\n            assertEquals(CLUSTER_SEED, Long.valueOf(cluster().seed()));\n            for (int i = 0; i < SEQUENCE.length; i++) {\n                assertThat(SEQUENCE[i], equalTo(randomLong()));\n            }\n        }\n    }\n']",Reproducible;random;cluster;random;SEED;Long;seed;Long;Long;CLUSTER,9.313225746154785e-10;4.656612873077393e-10;4.147295840084553e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.845243453979492, -5.651897430419922, -6.247640132904053, -5.324115753173828, -5.470704555511475, -0.01757383532822132]",0.9825795888900757
3,"['        @TestLogging(""xyz:TRACE,foo:WARN,foo.bar:ERROR"")\n        public void annotatedTestMethod() {\n\n        }\n']",xy;foo;annotated;Method;Logging;bar;foo;TRACE;ERROR;WARN,7.450580596923828e-09;5.587935447692871e-09;4.889443516731262e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;0.0;-2.3283064365386963e-10;-6.984919309616089e-10;-3.259629011154175e-09,5,5,"[-5.962455749511719, -5.914093017578125, -6.452938079833984, -5.557585716247559, -5.473877906799316, -0.015015785582363605]",0.9850963950157166
3,"['        @TestLogging(""abc:TRACE,xyz:DEBUG"")\n        public void annotatedTestMethod2() {\n\n        }\n']",Logging;TRACE;xy;abc;Method;annotated;DEBUG,3.259629011154175e-09;2.7939677238464355e-09;1.3969838619232178e-09;9.313225746154785e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.975119590759277, -5.911859035491943, -6.443742752075195, -5.543396472930908, -5.463726997375488, -0.01510326936841011]",0.9850102066993713
3,"['        @TestLogging(""abc:INFO:WARN"")\n        public void invalidMethod() {\n\n        }\n']",Logging;abc;WARN;Method;invalid;INFO,3.725290298461914e-09;3.259629011154175e-09;6.984919309616089e-10;5.820766091346741e-10;-2.3283064365386963e-10;-3.259629011154175e-09,5,5,"[-5.916803359985352, -5.803506374359131, -6.384113311767578, -5.502320766448975, -5.452913761138916, -0.01588558405637741]",0.984239935874939
3,"['    @TestLogging(""org.elasticsearch.index.shard:TRACE,org.elasticsearch.index.engine:TRACE"")\n    public void testStressMaybeFlushOrRollTranslogGeneration() throws Exception {\n        createIndex(""test"");\n        ensureGreen();\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(""test""));\n        final IndexShard shard = test.getShardOrNull(0);\n        assertFalse(shard.shouldPeriodicallyFlush());\n        final boolean flush = randomBoolean();\n        final Settings settings;\n        if (flush) {\n            // size of the operation plus two generations of overhead.\n            settings = Settings.builder().put(""index.translog.flush_threshold_size"", ""180b"").build();\n        } else {\n            // size of the operation plus header and footer\n            settings = Settings.builder().put(""index.translog.generation_threshold_size"", ""117b"").build();\n        }\n        client().admin().indices().prepareUpdateSettings(""test"").setSettings(settings).get();\n        client().prepareIndex(""test"", ""test"", ""0"")\n                .setSource(""{}"", XContentType.JSON)\n                .setRefreshPolicy(randomBoolean() ? IMMEDIATE : NONE)\n                .get();\n        assertFalse(shard.shouldPeriodicallyFlush());\n        final AtomicBoolean running = new AtomicBoolean(true);\n        final int numThreads = randomIntBetween(2, 4);\n        final Thread[] threads = new Thread[numThreads];\n        final CyclicBarrier barrier = new CyclicBarrier(numThreads + 1);\n        for (int i = 0; i < threads.length; i++) {\n            threads[i] = new Thread(() -> {\n                try {\n                    barrier.await();\n                } catch (final InterruptedException | BrokenBarrierException e) {\n                    throw new RuntimeException(e);\n                }\n                while (running.get()) {\n                    shard.afterWriteOperation();\n                }\n            });\n            threads[i].start();\n        }\n        barrier.await();\n        final CheckedRunnable<Exception> check;\n        if (flush) {\n            final FlushStats initialStats = shard.flushStats();\n            client().prepareIndex(""test"", ""test"", ""1"").setSource(""{}"", XContentType.JSON).get();\n            check = () -> {\n                final FlushStats currentStats = shard.flushStats();\n                String msg = String.format(Locale.ROOT, ""flush stats: total=[%d vs %d], periodic=[%d vs %d]"",\n                    initialStats.getTotal(), currentStats.getTotal(), initialStats.getPeriodic(), currentStats.getPeriodic());\n                assertThat(msg, currentStats.getPeriodic(), equalTo(initialStats.getPeriodic() + 1));\n                assertThat(msg, currentStats.getTotal(), equalTo(initialStats.getTotal() + 1));\n            };\n        } else {\n            final long generation = getTranslog(shard).currentFileGeneration();\n            client().prepareIndex(""test"", ""test"", ""1"").setSource(""{}"", XContentType.JSON).get();\n            check = () -> assertEquals(\n                    generation + 1,\n                    getTranslog(shard).currentFileGeneration());\n        }\n        assertBusy(check);\n        running.set(false);\n        for (int i = 0; i < threads.length; i++) {\n            threads[i].join();\n        }\n        check.run();\n    }\n']",Logging;Content;engine;overhead;shard;TRACE;JSON;Shard;generation;Boolean,1.6298145055770874e-09;1.280568540096283e-09;1.0477378964424133e-09;9.022187441587448e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;7.712515071034431e-10;6.693881005048752e-10;6.402842700481415e-10,5,5,"[-5.897789478302002, -5.628669738769531, -6.433871746063232, -5.5279860496521, -5.638566493988037, -0.015597964636981487]",0.9845229387283325
3,"['    @TestLogging(""org.elasticsearch.index.shard:TRACE,org.elasticsearch.indices.recovery:TRACE"")\n    public void testRecoveryAfterPrimaryPromotion() throws Exception {\n        try (ReplicationGroup shards = createGroup(2)) {\n            shards.startAll();\n            int totalDocs = shards.indexDocs(randomInt(10));\n            int committedDocs = 0;\n            if (randomBoolean()) {\n                shards.flush();\n                committedDocs = totalDocs;\n            }\n\n            final IndexShard oldPrimary = shards.getPrimary();\n            final IndexShard newPrimary = shards.getReplicas().get(0);\n            final IndexShard replica = shards.getReplicas().get(1);\n            if (randomBoolean()) {\n                // simulate docs that were inflight when primary failed, these will be rolled back\n                final int rollbackDocs = randomIntBetween(1, 5);\n                logger.info(""--> indexing {} rollback docs"", rollbackDocs);\n                for (int i = 0; i < rollbackDocs; i++) {\n                    final IndexRequest indexRequest = new IndexRequest(index.getName(), ""type"", ""rollback_"" + i)\n                            .source(""{}"", XContentType.JSON);\n                    final BulkShardRequest bulkShardRequest = indexOnPrimary(indexRequest, oldPrimary);\n                    indexOnReplica(bulkShardRequest, shards, replica);\n                }\n                if (randomBoolean()) {\n                    oldPrimary.flush(new FlushRequest(index.getName()));\n                }\n            }\n\n            shards.promoteReplicaToPrimary(newPrimary).get();\n\n            // check that local checkpoint of new primary is properly tracked after primary promotion\n            assertThat(newPrimary.getLocalCheckpoint(), equalTo(totalDocs - 1L));\n            assertThat(IndexShardTestCase.getReplicationTracker(newPrimary)\n                .getTrackedLocalCheckpointForShard(newPrimary.routingEntry().allocationId().getId()).getLocalCheckpoint(),\n                equalTo(totalDocs - 1L));\n\n            // index some more\n            int moreDocs = shards.indexDocs(randomIntBetween(0, 5));\n            totalDocs += moreDocs;\n\n            // As a replica keeps a safe commit, the file-based recovery only happens if the required translog\n            // for the sequence based recovery are not fully retained and extra documents were added to the primary.\n            boolean expectSeqNoRecovery = (moreDocs == 0 || randomBoolean());\n            int uncommittedOpsOnPrimary = 0;\n            if (expectSeqNoRecovery == false) {\n                IndexMetaData.Builder builder = IndexMetaData.builder(newPrimary.indexSettings().getIndexMetaData());\n                builder.settings(Settings.builder().put(newPrimary.indexSettings().getSettings())\n                    .put(IndexSettings.INDEX_TRANSLOG_RETENTION_AGE_SETTING.getKey(), ""-1"")\n                    .put(IndexSettings.INDEX_TRANSLOG_RETENTION_SIZE_SETTING.getKey(), ""-1"")\n                    .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(), 0)\n                );\n                newPrimary.indexSettings().updateIndexMetaData(builder.build());\n                newPrimary.onSettingsChanged();\n                // Make sure the global checkpoint on the new primary is persisted properly,\n                // otherwise the deletion policy won\'t trim translog\n                assertBusy(() -> {\n                    shards.syncGlobalCheckpoint();\n                    assertThat(newPrimary.getLastSyncedGlobalCheckpoint(), equalTo(newPrimary.seqNoStats().getMaxSeqNo()));\n                });\n                newPrimary.flush(new FlushRequest().force(true));\n                if (replica.indexSettings().isSoftDeleteEnabled()) {\n                    // We need an extra flush to advance the min_retained_seqno on the new primary so ops-based won\'t happen.\n                    // The min_retained_seqno only advances when a merge asks for the retention query.\n                    newPrimary.flush(new FlushRequest().force(true));\n                }\n                uncommittedOpsOnPrimary = shards.indexDocs(randomIntBetween(0, 10));\n                totalDocs += uncommittedOpsOnPrimary;\n            }\n\n            if (randomBoolean()) {\n                uncommittedOpsOnPrimary = 0;\n                shards.syncGlobalCheckpoint();\n                newPrimary.flush(new FlushRequest());\n            }\n\n            oldPrimary.close(""demoted"", false);\n            oldPrimary.store().close();\n\n            IndexShard newReplica = shards.addReplicaWithExistingPath(oldPrimary.shardPath(), oldPrimary.routingEntry().currentNodeId());\n            shards.recoverReplica(newReplica);\n\n            if (expectSeqNoRecovery) {\n                assertThat(newReplica.recoveryState().getIndex().fileDetails(), empty());\n                assertThat(newReplica.recoveryState().getTranslog().recoveredOperations(), equalTo(totalDocs - committedDocs));\n            } else {\n                assertThat(newReplica.recoveryState().getIndex().fileDetails(), not(empty()));\n                assertThat(newReplica.recoveryState().getTranslog().recoveredOperations(), equalTo(uncommittedOpsOnPrimary));\n            }\n            // Make sure that flushing on a recovering shard is ok.\n            shards.flush();\n            shards.assertAllEqual(totalDocs);\n        }\n    }\n']",Logging;shard;simulate;that;elasticsearch;Boolean;random;Primary;Doc;final,2.3283064365386963e-09;1.1059455573558807e-09;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4560798667371273e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10,5,5,"[-5.898833274841309, -5.639822959899902, -6.420034408569336, -5.4922919273376465, -5.635896682739258, -0.01573374681174755]",0.9843893647193909
3,"['    @TestLogging(""org.elasticsearch.index.shard:TRACE,org.elasticsearch.action.resync:TRACE"")\n    public void testResyncAfterPrimaryPromotion() throws Exception {\n        // TODO: check translog trimming functionality once rollback is implemented in Lucene (ES trimming is done)\n        Map<String, String> mappings =\n            Collections.singletonMap(""type"", ""{ \\""type\\"": { \\""properties\\"": { \\""f\\"": { \\""type\\"": \\""keyword\\""} }}}"");\n        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(2, mappings))) {\n            shards.startAll();\n            int initialDocs = randomInt(10);\n\n            for (int i = 0; i < initialDocs; i++) {\n                final IndexRequest indexRequest = new IndexRequest(index.getName(), ""type"", ""initial_doc_"" + i)\n                    .source(""{ \\""f\\"": \\""normal\\""}"", XContentType.JSON);\n                shards.index(indexRequest);\n            }\n\n            boolean syncedGlobalCheckPoint = randomBoolean();\n            if (syncedGlobalCheckPoint) {\n                shards.syncGlobalCheckpoint();\n            }\n\n            final IndexShard oldPrimary = shards.getPrimary();\n            final IndexShard newPrimary = shards.getReplicas().get(0);\n            final IndexShard justReplica = shards.getReplicas().get(1);\n\n            // simulate docs that were inflight when primary failed\n            final int extraDocs = randomInt(5);\n            logger.info(""--> indexing {} extra docs"", extraDocs);\n            for (int i = 0; i < extraDocs; i++) {\n                final IndexRequest indexRequest = new IndexRequest(index.getName(), ""type"", ""extra_doc_"" + i)\n                    .source(""{ \\""f\\"": \\""normal\\""}"", XContentType.JSON);\n                final BulkShardRequest bulkShardRequest = indexOnPrimary(indexRequest, oldPrimary);\n                indexOnReplica(bulkShardRequest, shards, newPrimary);\n            }\n\n            final int extraDocsToBeTrimmed = randomIntBetween(0, 10);\n            logger.info(""--> indexing {} extra docs to be trimmed"", extraDocsToBeTrimmed);\n            for (int i = 0; i < extraDocsToBeTrimmed; i++) {\n                final IndexRequest indexRequest = new IndexRequest(index.getName(), ""type"", ""extra_trimmed_"" + i)\n                    .source(""{ \\""f\\"": \\""trimmed\\""}"", XContentType.JSON);\n                final BulkShardRequest bulkShardRequest = indexOnPrimary(indexRequest, oldPrimary);\n                // have to replicate to another replica != newPrimary one - the subject to trim\n                indexOnReplica(bulkShardRequest, shards, justReplica);\n            }\n\n            logger.info(""--> resyncing replicas seqno_stats primary {} replica {}"", oldPrimary.seqNoStats(), newPrimary.seqNoStats());\n            PrimaryReplicaSyncer.ResyncTask task = shards.promoteReplicaToPrimary(newPrimary).get();\n            if (syncedGlobalCheckPoint) {\n                assertEquals(extraDocs, task.getResyncedOperations());\n            } else {\n                assertThat(task.getResyncedOperations(), greaterThanOrEqualTo(extraDocs));\n            }\n            shards.assertAllEqual(initialDocs + extraDocs);\n            for (IndexShard replica : shards.getReplicas()) {\n                assertThat(replica.getMaxSeqNoOfUpdatesOrDeletes(),\n                    greaterThanOrEqualTo(shards.getPrimary().getMaxSeqNoOfUpdatesOrDeletes()));\n            }\n\n            // check translog on replica is trimmed\n            int translogOperations = 0;\n            try(Translog.Snapshot snapshot = getTranslog(justReplica).newSnapshot()) {\n                Translog.Operation next;\n                while ((next = snapshot.next()) != null) {\n                    translogOperations++;\n                    assertThat(""unexpected op: "" + next, (int)next.seqNo(), lessThan(initialDocs + extraDocs));\n                    assertThat(""unexpected primaryTerm: "" + next.primaryTerm(), next.primaryTerm(),\n                        is(oldPrimary.getPendingPrimaryTerm()));\n                    final Translog.Source source = next.getSource();\n                    assertThat(source.source.utf8ToString(), is(""{ \\""f\\"": \\""normal\\""}""));\n                }\n            }\n            assertThat(translogOperations, is(initialDocs + extraDocs));\n        }\n    }\n']",shard;appings;keyword;TRACE;singleton;Doc;Type;final;Exception;Boolean,1.5133991837501526e-09;9.313225746154785e-10;8.440110832452774e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;3.4924596548080444e-10;3.2741809263825417e-10,5,5,"[-5.90234375, -5.648454189300537, -6.439220905303955, -5.49941349029541, -5.642850399017334, -0.015606767497956753]",0.9845144152641296
3,"['    @TestLogging(\n    public void testWaitForPendingSeqNo() throws Exception {\n        IndexMetaData metaData = buildIndexMetaData(1);\n\n        final int pendingDocs = randomIntBetween(1, 5);\n        final BlockingEngineFactory primaryEngineFactory = new BlockingEngineFactory();\n\n        try (ReplicationGroup shards = new ReplicationGroup(metaData) {\n            @Override\n            protected EngineFactory getEngineFactory(ShardRouting routing) {\n                if (routing.primary()) {\n                    return primaryEngineFactory;\n                } else {\n                    return new InternalEngineFactory();\n                }\n            }\n        }) {\n            shards.startAll();\n            int docs = shards.indexDocs(randomIntBetween(1, 10));\n            // simulate a background global checkpoint sync at which point we expect the global checkpoint to advance on the replicas\n            shards.syncGlobalCheckpoint();\n            IndexShard replica = shards.getReplicas().get(0);\n            shards.removeReplica(replica);\n            closeShards(replica);\n\n            docs += pendingDocs;\n            primaryEngineFactory.latchIndexers(pendingDocs);\n            CountDownLatch pendingDocsDone = new CountDownLatch(pendingDocs);\n            for (int i = 0; i < pendingDocs; i++) {\n                final String id = ""pending_"" + i;\n                threadPool.generic().submit(() -> {\n                    try {\n                        shards.index(new IndexRequest(index.getName(), ""type"", id).source(""{}"", XContentType.JSON));\n                    } catch (Exception e) {\n                        throw new AssertionError(e);\n                    } finally {\n                        pendingDocsDone.countDown();\n                    }\n                });\n            }\n\n            // wait for the pending ops to ""hang""\n            primaryEngineFactory.awaitIndexersLatch();\n\n            primaryEngineFactory.allowIndexing();\n            // index some more\n            docs += shards.indexDocs(randomInt(5));\n\n            IndexShard newReplica = shards.addReplicaWithExistingPath(replica.shardPath(), replica.routingEntry().currentNodeId());\n\n            CountDownLatch recoveryStart = new CountDownLatch(1);\n            AtomicBoolean opsSent = new AtomicBoolean(false);\n            final Future<Void> recoveryFuture = shards.asyncRecoverReplica(newReplica, (indexShard, node) -> {\n                recoveryStart.countDown();\n                return new RecoveryTarget(indexShard, node, recoveryListener, l -> {\n                }) {\n                    @Override\n                    public long indexTranslogOperations(List<Translog.Operation> operations, int totalTranslogOps,\n                                                        long maxSeenAutoIdTimestamp, long maxSeqNoOfUpdates) throws IOException {\n                        opsSent.set(true);\n                        return super.indexTranslogOperations(operations, totalTranslogOps, maxSeenAutoIdTimestamp, maxSeqNoOfUpdates);\n                    }\n']",Logging;background;Doc;ending;on;point;Global;expect;Replica;sync,1.6880221664905548e-09;9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.871136665344238, -5.665586471557617, -6.325932502746582, -5.373744964599609, -5.561990737915039, -0.016688387840986252]",0.9834501147270203
3,"['    @TestLogging(\n    public void testCheckpointsAndMarkingInSync() throws Exception {\n        final IndexMetaData metaData = buildIndexMetaData(0);\n        final BlockingEngineFactory replicaEngineFactory = new BlockingEngineFactory();\n        try (\n                ReplicationGroup shards = new ReplicationGroup(metaData) {\n                    @Override\n                    protected EngineFactory getEngineFactory(final ShardRouting routing) {\n                        if (routing.primary()) {\n                            return new InternalEngineFactory();\n                        } else {\n                            return replicaEngineFactory;\n                        }\n                    }\n                };\n                AutoCloseable ignored = replicaEngineFactory // make sure we release indexers before closing\n        ) {\n            shards.startPrimary();\n            final int docs = shards.indexDocs(randomIntBetween(1, 10));\n            logger.info(""indexed [{}] docs"", docs);\n            final CountDownLatch pendingDocDone = new CountDownLatch(1);\n            final CountDownLatch pendingDocActiveWithExtraDocIndexed = new CountDownLatch(1);\n            final CountDownLatch phaseTwoStartLatch = new CountDownLatch(1);\n            final IndexShard replica = shards.addReplica();\n            final Future<Void> recoveryFuture = shards.asyncRecoverReplica(\n                    replica,\n                    (indexShard, node) -> new RecoveryTarget(indexShard, node, recoveryListener, l -> {}) {\n                        @Override\n                        public long indexTranslogOperations(final List<Translog.Operation> operations, final int totalTranslogOps,\n                                                            final long maxAutoIdTimestamp, long maxSeqNoOfUpdates)\n']",pending;Engine;outing;Primary;Sync;Checkpoints;make;routing;shards;Doc,6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.862955570220947, -5.6692118644714355, -6.308432102203369, -5.347893714904785, -5.542714595794678, -0.016930921003222466]",0.9832115769386292
3,"['    @TestLogging(""_root:DEBUG"")\n    public void testMergesHappening() throws InterruptedException, IOException, ExecutionException {\n        final int numOfShards = randomIntBetween(1, 5);\n        // some settings to keep num segments low\n        assertAcked(prepareCreate(""test"").setSettings(Settings.builder()\n                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numOfShards)\n                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)\n                .build()));\n        long id = 0;\n        final int rounds = scaledRandomIntBetween(50, 300);\n        logger.info(""Starting rounds [{}] "", rounds);\n        for (int i = 0; i < rounds; ++i) {\n            final int numDocs = scaledRandomIntBetween(100, 1000);\n            BulkRequestBuilder request = client().prepareBulk();\n            for (int j = 0; j < numDocs; ++j) {\n                request.add(Requests.indexRequest(""test"").type(""type1"").id(Long.toString(id++)).source(jsonBuilder().startObject().field(""l"", randomLong()).endObject()));\n            }\n            BulkResponse response = request.execute().actionGet();\n            refresh();\n            assertNoFailures(response);\n            IndicesStatsResponse stats = client().admin().indices().prepareStats(""test"").setSegments(true).setMerge(true).get();\n            logger.info(""index round [{}] - segments {}, total merges {}, current merge {}"", i, stats.getPrimaries().getSegments().getCount(), stats.getPrimaries().getMerge().getTotal(), stats.getPrimaries().getMerge().getCurrent());\n        }\n        final long upperNumberSegments = 2 * numOfShards * 10;\n        awaitBusy(() -> {\n            IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get();\n            logger.info(""numshards {}, segments {}, total merges {}, current merge {}"", numOfShards, stats.getPrimaries().getSegments().getCount(), stats.getPrimaries().getMerge().getTotal(), stats.getPrimaries().getMerge().getCurrent());\n            long current = stats.getPrimaries().getMerge().getCurrent();\n            long count = stats.getPrimaries().getSegments().getCount();\n            return count < upperNumberSegments && current == 0;\n        });\n        IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get();\n        logger.info(""numshards {}, segments {}, total merges {}, current merge {}"", numOfShards, stats.getPrimaries().getSegments().getCount(), stats.getPrimaries().getMerge().getTotal(), stats.getPrimaries().getMerge().getCurrent());\n        long count = stats.getPrimaries().getSegments().getCount();\n        assertThat(count, Matchers.lessThanOrEqualTo(upperNumberSegments));\n    }\n']",settings;DEBUG;Shards;SHARDS;Response;OF;Shards;Doc;keep;scaled,4.874891601502895e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.870315074920654, -5.653343200683594, -6.373391151428223, -5.430927753448486, -5.579347610473633, -0.016320550814270973]",0.9838117957115173
3,"['@TestLogging(""_root:DEBUG,org.elasticsearch.index.shard:TRACE,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.index.seqno:TRACE,org.elasticsearch.indices.recovery:TRACE"")\n    public void testRecoverWhileUnderLoadAllocateReplicasTest() throws Exception {\n        logger.info(""--> creating test index ..."");\n        int numberOfShards = numberOfShards();\n        assertAcked(prepareCreate(""test"", 1, Settings.builder().put(SETTING_NUMBER_OF_SHARDS, numberOfShards).put(SETTING_NUMBER_OF_REPLICAS, 1).put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC)));\n\n        final int totalNumDocs = scaledRandomIntBetween(200, 10000);\n        int waitFor = totalNumDocs / 10;\n        int extraDocs = waitFor;\n        try (BackgroundIndexer indexer = new BackgroundIndexer(""test"", ""type"", client(), extraDocs)) {\n            logger.info(""--> waiting for {} docs to be indexed ..."", waitFor);\n            waitForDocs(waitFor, indexer);\n            indexer.assertNoFailures();\n            logger.info(""--> {} docs indexed"", waitFor);\n\n            extraDocs = totalNumDocs / 10;\n            waitFor += extraDocs;\n            indexer.continueIndexing(extraDocs);\n            logger.info(""--> flushing the index ...."");\n            // now flush, just to make sure we have some data in the index, not just translog\n            client().admin().indices().prepareFlush().execute().actionGet();\n\n            logger.info(""--> waiting for {} docs to be indexed ..."", waitFor);\n            waitForDocs(waitFor, indexer);\n            indexer.assertNoFailures();\n            logger.info(""--> {} docs indexed"", waitFor);\n\n            extraDocs = totalNumDocs - waitFor;\n            indexer.continueIndexing(extraDocs);\n\n            logger.info(""--> allow 2 nodes for index [test] ..."");\n            // now start another node, while we index\n            allowNodes(""test"", 2);\n\n            logger.info(""--> waiting for GREEN health status ..."");\n            // make sure the cluster state is green, and all has been recovered\n            assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(""5m"").setWaitForGreenStatus());\n\n            logger.info(""--> waiting for {} docs to be indexed ..."", totalNumDocs);\n            waitForDocs(totalNumDocs, indexer);\n            indexer.assertNoFailures();\n            logger.info(""--> {} docs indexed"", totalNumDocs);\n\n            logger.info(""--> marking and waiting for indexing threads to stop ..."");\n            indexer.stop();\n            logger.info(""--> indexing threads stopped"");\n\n            logger.info(""--> refreshing the index"");\n            refreshAndAssert();\n            logger.info(""--> verifying indexed content"");\n            iterateAssertCount(numberOfShards, 10, indexer.getIds());\n        }\n    }\n']",Create;TRACE;Recover;TRACE;elasticsearch;Allocate;elasticsearch;Under;org;seqno,3.725290298461914e-09;2.2118911147117615e-09;2.0954757928848267e-09;2.0372681319713593e-09;2.0372681319713593e-09;1.862645149230957e-09;1.6298145055770874e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.280568540096283e-09,5,5,"[-5.839380741119385, -5.524704933166504, -6.940176486968994, -6.077685356140137, -5.719154357910156, -0.013532804325222969]",0.9865582585334778
3,"['@TestLogging(""_root:DEBUG,org.elasticsearch.indices.recovery:TRACE,org.elasticsearch.index.shard.service:TRACE"")\n    public void testSimpleRelocationNoIndexing() {\n        logger.info(""--> starting [node1] ..."");\n        final String node_1 = internalCluster().startNode();\n\n        logger.info(""--> creating test index ..."");\n        prepareCreate(""test"", Settings.builder()\n                .put(""index.number_of_shards"", 1)\n                .put(""index.number_of_replicas"", 0)\n        ).get();\n\n        logger.info(""--> index 10 docs"");\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(""test"", ""type"", Integer.toString(i)).setSource(""field"", ""value"" + i).execute().actionGet();\n        }\n        logger.info(""--> flush so we have an actual index"");\n        client().admin().indices().prepareFlush().execute().actionGet();\n        logger.info(""--> index more docs so we have something in the translog"");\n        for (int i = 10; i < 20; i++) {\n            client().prepareIndex(""test"", ""type"", Integer.toString(i)).setSource(""field"", ""value"" + i).execute().actionGet();\n        }\n\n        logger.info(""--> verifying count"");\n        client().admin().indices().prepareRefresh().execute().actionGet();\n        assertThat(client().prepareSearch(""test"").setSize(0).execute().actionGet().getHits().getTotalHits(), equalTo(20L));\n\n        logger.info(""--> start another node"");\n        final String node_2 = internalCluster().startNode();\n        ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(""2"").execute().actionGet();\n        assertThat(clusterHealthResponse.isTimedOut(), equalTo(false));\n\n        logger.info(""--> relocate the shard from node1 to node2"");\n        client().admin().cluster().prepareReroute()\n                .add(new MoveAllocationCommand(""test"", 0, node_1, node_2))\n                .execute().actionGet();\n\n        clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNoRelocatingShards(true).setTimeout(ACCEPTABLE_RELOCATION_TIME).execute().actionGet();\n        assertThat(clusterHealthResponse.isTimedOut(), equalTo(false));\n\n        logger.info(""--> verifying count again..."");\n        client().admin().indices().prepareRefresh().execute().actionGet();\n        assertThat(client().prepareSearch(""test"").setSize(0).execute().actionGet().getHits().getTotalHits(), equalTo(20L));\n    }\n']",Logging;elasticsearch;Cluster;internal;shard;client;put;put;of;execute,2.2118911147117615e-09;1.9208528101444244e-09;1.862645149230957e-09;1.6298145055770874e-09;1.2078089639544487e-09;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.2928149923682213e-10;4.0745362639427185e-10,5,5,"[-6.0036492347717285, -5.295895576477051, -6.733807563781738, -5.854139804840088, -5.829197406768799, -0.014586242847144604]",0.9855197668075562
3,"['    @TestLogging(""org.elasticsearch.action.bulk:TRACE,org.elasticsearch.action.search:TRACE"")\n    public void testRelocationWhileIndexingRandom() throws Exception {\n        int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4);\n        int numberOfReplicas = randomBoolean() ? 0 : 1;\n        int numberOfNodes = numberOfReplicas == 0 ? 2 : 3;\n\n        logger.info(""testRelocationWhileIndexingRandom(numRelocations={}, numberOfReplicas={}, numberOfNodes={})"", numberOfRelocations, numberOfReplicas, numberOfNodes);\n\n        String[] nodes = new String[numberOfNodes];\n        logger.info(""--> starting [node1] ..."");\n        nodes[0] = internalCluster().startNode();\n\n        logger.info(""--> creating test index ..."");\n        prepareCreate(""test"", Settings.builder()\n            .put(""index.number_of_shards"", 1)\n            .put(""index.number_of_replicas"", numberOfReplicas)\n        ).get();\n\n\n        for (int i = 2; i <= numberOfNodes; i++) {\n            logger.info(""--> starting [node{}] ..."", i);\n            nodes[i - 1] = internalCluster().startNode();\n            if (i != numberOfNodes) {\n                ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID)\n                        .setWaitForNodes(Integer.toString(i)).setWaitForGreenStatus().execute().actionGet();\n                assertThat(healthResponse.isTimedOut(), equalTo(false));\n            }\n        }\n\n        int numDocs = scaledRandomIntBetween(200, 2500);\n        try (BackgroundIndexer indexer = new BackgroundIndexer(""test"", ""type1"", client(), numDocs)) {\n            logger.info(""--> waiting for {} docs to be indexed ..."", numDocs);\n            waitForDocs(numDocs, indexer);\n            logger.info(""--> {} docs indexed"", numDocs);\n\n            logger.info(""--> starting relocations..."");\n            int nodeShiftBased = numberOfReplicas; // if we have replicas shift those\n            for (int i = 0; i < numberOfRelocations; i++) {\n                int fromNode = (i % 2);\n                int toNode = fromNode == 0 ? 1 : 0;\n                fromNode += nodeShiftBased;\n                toNode += nodeShiftBased;\n                numDocs = scaledRandomIntBetween(200, 1000);\n                logger.debug(""--> Allow indexer to index [{}] documents"", numDocs);\n                indexer.continueIndexing(numDocs);\n                logger.info(""--> START relocate the shard from {} to {}"", nodes[fromNode], nodes[toNode]);\n                client().admin().cluster().prepareReroute()\n                        .add(new MoveAllocationCommand(""test"", 0, nodes[fromNode], nodes[toNode]))\n                        .get();\n                if (rarely()) {\n                    logger.debug(""--> flushing"");\n                    client().admin().indices().prepareFlush().get();\n                }\n                ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNoRelocatingShards(true).setTimeout(ACCEPTABLE_RELOCATION_TIME).execute().actionGet();\n                assertThat(clusterHealthResponse.isTimedOut(), equalTo(false));\n                indexer.pauseIndexing();\n                logger.info(""--> DONE relocate the shard from {} to {}"", fromNode, toNode);\n            }\n            logger.info(""--> done relocations"");\n            logger.info(""--> waiting for indexing threads to stop ..."");\n            indexer.stop();\n            logger.info(""--> indexing threads stopped"");\n\n            logger.info(""--> refreshing the index"");\n            client().admin().indices().prepareRefresh(""test"").execute().actionGet();\n            logger.info(""--> searching the index"");\n            boolean ranOnce = false;\n            for (int i = 0; i < 10; i++) {\n                    logger.info(""--> START search test round {}"", i + 1);\n                    SearchHits hits = client().prepareSearch(""test"").setQuery(matchAllQuery()).setSize((int) indexer.totalIndexedDocs()).storedFields().execute().actionGet().getHits();\n                    ranOnce = true;\n                    if (hits.getTotalHits() != indexer.totalIndexedDocs()) {\n                        int[] hitIds = new int[(int) indexer.totalIndexedDocs()];\n                        for (int hit = 0; hit < indexer.totalIndexedDocs(); hit++) {\n                            hitIds[hit] = hit + 1;\n                        }\n                        IntHashSet set = IntHashSet.from(hitIds);\n                        for (SearchHit hit : hits.getHits()) {\n                            int id = Integer.parseInt(hit.getId());\n                            if (!set.remove(id)) {\n                                logger.error(""Extra id [{}]"", id);\n                            }\n                        }\n                        set.forEach((IntProcedure) value -> {\n                            logger.error(""Missing id [{}]"", value);\n                        });\n                    }\n                    assertThat(hits.getTotalHits(), equalTo(indexer.totalIndexedDocs()));\n                    logger.info(""--> DONE search test round {}"", i + 1);\n\n            }\n            if (!ranOnce) {\n                fail();\n            }\n        }\n    }\n']",ulk;TRACE;elasticsearch;random;replicas;elasticsearch;Logging;Events;Replicas;Int,9.313225746154785e-10;9.022187441587448e-10;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.886932849884033, -5.639583110809326, -6.415177822113037, -5.487136363983154, -5.627903461456299, -0.015826798975467682]",0.9842979311943054
3,"['    @TestLogging(""org.elasticsearch.action.bulk:TRACE,org.elasticsearch.action.search:TRACE"")\n    public void testRelocationWhileRefreshing() throws Exception {\n        int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4);\n        int numberOfReplicas = randomBoolean() ? 0 : 1;\n        int numberOfNodes = numberOfReplicas == 0 ? 2 : 3;\n\n        logger.info(""testRelocationWhileIndexingRandom(numRelocations={}, numberOfReplicas={}, numberOfNodes={})"", numberOfRelocations, numberOfReplicas, numberOfNodes);\n\n        String[] nodes = new String[numberOfNodes];\n        logger.info(""--> starting [node_0] ..."");\n        nodes[0] = internalCluster().startNode();\n\n        logger.info(""--> creating test index ..."");\n        prepareCreate(\n                ""test"",\n                Settings.builder()\n                        .put(""index.number_of_shards"", 1)\n                        .put(""index.number_of_replicas"", numberOfReplicas)\n                        .put(""index.refresh_interval"", -1) // we want to control refreshes\n                        .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), ""100ms""))\n                .get();\n\n        for (int i = 1; i < numberOfNodes; i++) {\n            logger.info(""--> starting [node_{}] ..."", i);\n            nodes[i] = internalCluster().startNode();\n            if (i != numberOfNodes - 1) {\n                ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID)\n                        .setWaitForNodes(Integer.toString(i + 1)).setWaitForGreenStatus().execute().actionGet();\n                assertThat(healthResponse.isTimedOut(), equalTo(false));\n            }\n        }\n\n        final Semaphore postRecoveryShards = new Semaphore(0);\n        final IndexEventListener listener = new IndexEventListener() {\n            @Override\n            public void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState currentState, @Nullable String reason) {\n                if (currentState == IndexShardState.POST_RECOVERY) {\n                    postRecoveryShards.release();\n                }\n            }\n']",replicas;refreshes;to;action;Logging;Boolean;Relocations;Replicas;search;Replicas,1.7316779121756554e-09;1.6880221664905548e-09;1.6298145055770874e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.093170329928398e-10,5,5,"[-5.893817901611328, -5.6227216720581055, -6.425693511962891, -5.516802787780762, -5.631399154663086, -0.015715673565864563]",0.9844071865081787
3,"['    @TestLogging(\n    public void testIndexAndRelocateConcurrently() throws ExecutionException, InterruptedException {\n        int halfNodes = randomIntBetween(1, 3);\n        Settings[] nodeSettings = Stream.concat(\n            Stream.generate(() -> Settings.builder().put(""node.attr.color"", ""blue"").build()).limit(halfNodes),\n            Stream.generate(() -> Settings.builder().put(""node.attr.color"", ""red"").build()).limit(halfNodes)\n            ).toArray(Settings[]::new);\n        List<String> nodes = internalCluster().startNodes(nodeSettings);\n        String[] blueNodes = nodes.subList(0, halfNodes).stream().toArray(String[]::new);\n        String[] redNodes = nodes.subList(halfNodes, nodes.size()).stream().toArray(String[]::new);\n        logger.info(""blue nodes: {}"", (Object)blueNodes);\n        logger.info(""red nodes: {}"", (Object)redNodes);\n        ensureStableCluster(halfNodes * 2);\n\n        final Settings.Builder settings = Settings.builder()\n                .put(""index.routing.allocation.exclude.color"", ""blue"")\n                .put(indexSettings())\n                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(halfNodes - 1))\n                .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), ""100ms"");\n        assertAcked(prepareCreate(""test"", settings));\n        assertAllShardsOnNodes(""test"", redNodes);\n        int numDocs = randomIntBetween(100, 150);\n        ArrayList<String> ids = new ArrayList<>();\n        logger.info("" --> indexing [{}] docs"", numDocs);\n        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs];\n        for (int i = 0; i < numDocs; i++) {\n            String id = randomRealisticUnicodeOfLength(10) + String.valueOf(i);\n            ids.add(id);\n            docs[i] = client().prepareIndex(""test"", ""type1"", id).setSource(""field1"", English.intToEnglish(i));\n        }\n        indexRandom(true, docs);\n        SearchResponse countResponse = client().prepareSearch(""test"").get();\n        assertHitCount(countResponse, numDocs);\n\n        logger.info("" --> moving index to new nodes"");\n        Settings build = Settings.builder().put(""index.routing.allocation.exclude.color"", ""red"")\n            .put(""index.routing.allocation.include.color"", ""blue"").build();\n        client().admin().indices().prepareUpdateSettings(""test"").setSettings(build).execute().actionGet();\n\n        // index while relocating\n        logger.info("" --> indexing [{}] more docs"", numDocs);\n        for (int i = 0; i < numDocs; i++) {\n            String id = randomRealisticUnicodeOfLength(10) + String.valueOf(numDocs + i);\n            ids.add(id);\n            docs[i] = client().prepareIndex(""test"", ""type1"", id).setSource(""field1"", English.intToEnglish(numDocs + i));\n        }\n        indexRandom(true, docs);\n        numDocs *= 2;\n\n        logger.info("" --> waiting for relocation to complete"");\n        ensureGreen(""test""); // move all shards to the new nodes (it waits on relocation)\n\n        final int numIters = randomIntBetween(10, 20);\n        for (int i = 0; i < numIters; i++) {\n            logger.info("" --> checking iteration {}"", i);\n            SearchResponse afterRelocation = client().prepareSearch().setSize(ids.size()).get();\n            assertNoFailures(afterRelocation);\n            assertSearchHits(afterRelocation, ids.toArray(new String[ids.size()]));\n        }\n\n    }\n']",allocation;Exception;INTERVAL;Logging;Cluster;info;color;SETTING;GLOBAL;index,1.4551915228366852e-09;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.546585164964199e-10,5,5,"[-5.862939834594727, -5.673608779907227, -6.3556342124938965, -5.414409160614014, -5.571938991546631, -0.0164040494710207]",0.9837296605110168
3,"['@TestLogging(""org.elasticsearch.snapshot:TRACE"")\n    public void testDisruptionOnSnapshotInitialization() throws Exception {\n        final Settings settings = Settings.builder()\n            .put(DEFAULT_SETTINGS)\n            .put(DiscoverySettings.COMMIT_TIMEOUT_SETTING.getKey(), ""30s"") // wait till cluster state is committed\n            .build();\n        final String idxName = ""test"";\n        configureCluster(settings, 4, null, 2);\n        final List<String> allMasterEligibleNodes = internalCluster().startMasterOnlyNodes(3);\n        final String dataNode = internalCluster().startDataOnlyNode();\n        ensureStableCluster(4);\n\n        createRandomIndex(idxName);\n\n        logger.info(""-->  creating repository"");\n        assertAcked(client().admin().cluster().preparePutRepository(""test-repo"")\n            .setType(""fs"").setSettings(Settings.builder()\n                .put(""location"", randomRepoPath())\n                .put(""compress"", randomBoolean())\n                .put(""chunk_size"", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));\n\n        // Writing incompatible snapshot can cause this test to fail due to a race condition in repo initialization\n        // by the current master and the former master. It is not causing any issues in real life scenario, but\n        // might make this test to fail. We are going to complete initialization of the snapshot to prevent this failures.\n        logger.info(""-->  initializing the repository"");\n        assertEquals(SnapshotState.SUCCESS, client().admin().cluster().prepareCreateSnapshot(""test-repo"", ""test-snap-1"")\n            .setWaitForCompletion(true).setIncludeGlobalState(true).setIndices().get().getSnapshotInfo().state());\n\n        final String masterNode1 = internalCluster().getMasterName();\n        Set<String> otherNodes = new HashSet<>();\n        otherNodes.addAll(allMasterEligibleNodes);\n        otherNodes.remove(masterNode1);\n        otherNodes.add(dataNode);\n\n        NetworkDisruption networkDisruption =\n            new NetworkDisruption(new NetworkDisruption.TwoPartitions(Collections.singleton(masterNode1), otherNodes),\n                new NetworkDisruption.NetworkUnresponsive());\n        internalCluster().setDisruptionScheme(networkDisruption);\n\n        ClusterService clusterService = internalCluster().clusterService(masterNode1);\n        CountDownLatch disruptionStarted = new CountDownLatch(1);\n        clusterService.addListener(new ClusterStateListener() {\n            @Override\n            public void clusterChanged(ClusterChangedEvent event) {\n                SnapshotsInProgress snapshots = event.state().custom(SnapshotsInProgress.TYPE);\n                if (snapshots != null && snapshots.entries().size() > 0) {\n                    if (snapshots.entries().get(0).state() == SnapshotsInProgress.State.INIT) {\n                        // The snapshot started, we can start disruption so the INIT state will arrive to another master node\n                        logger.info(""--> starting disruption"");\n                        networkDisruption.startDisrupting();\n                        clusterService.removeListener(this);\n                        disruptionStarted.countDown();\n                    }\n                }\n            }\n']",org;iscovery;wait;SETTING;repo;final;We;null;settings;Cluster,3.259629011154175e-09;3.259629011154175e-09;1.862645149230957e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;7.275957614183426e-10;6.984919309616089e-10,5,5,"[-5.920165061950684, -5.596831798553467, -6.806660175323486, -5.904625415802002, -5.801934719085693, -0.013337792828679085]",0.9867507815361023
3,"['@TestLogging(""_root:DEBUG,org.elasticsearch.cluster.service:TRACE"")\n    public void testIsolatedUnicastNodes() throws Exception {\n        List<String> nodes = startCluster(4, -1, new int[]{0});\n        // Figure out what is the elected master node\n        final String unicastTarget = nodes.get(0);\n\n        Set<String> unicastTargetSide = new HashSet<>();\n        unicastTargetSide.add(unicastTarget);\n\n        Set<String> restOfClusterSide = new HashSet<>();\n        restOfClusterSide.addAll(nodes);\n        restOfClusterSide.remove(unicastTarget);\n\n        // Forcefully clean temporal response lists on all nodes. Otherwise the node in the unicast host list\n        // includes all the other nodes that have pinged it and the issue doesn\'t manifest\n        ZenPing zenPing = ((TestZenDiscovery) internalCluster().getInstance(Discovery.class)).getZenPing();\n        if (zenPing instanceof UnicastZenPing) {\n            ((UnicastZenPing) zenPing).clearTemporalResponses();\n        }\n\n        // Simulate a network issue between the unicast target node and the rest of the cluster\n        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(unicastTargetSide, restOfClusterSide),\n                new NetworkDisconnect());\n        setDisruptionScheme(networkDisconnect);\n        networkDisconnect.startDisrupting();\n        // Wait until elected master has removed that the unlucky node...\n        ensureStableCluster(3, nodes.get(1));\n\n        // The isolate master node must report no master, so it starts with pinging\n        assertNoMaster(unicastTarget);\n        networkDisconnect.stopDisrupting();\n        // Wait until the master node sees all 3 nodes again.\n        ensureStableCluster(4);\n    }\n']",DEBUG;Cluster;Logging;org;olated;the;manifest;add;Ping;network,3.725290298461914e-09;2.6193447411060333e-09;1.862645149230957e-09;1.6298145055770874e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.89530235528946e-10;9.022187441587448e-10;9.022187441587448e-10;7.8580342233181e-10,5,5,"[-6.0291242599487305, -5.600362777709961, -6.779582977294922, -5.790289878845215, -5.8357133865356445, -0.01330744381994009]",0.9867807030677795
3,"['@TestLogging(""org.elasticsearch.discovery.zen:TRACE,org.elasticsearch.cluster.service:TRACE"")\n    public void setUp() throws Exception {\n        super.setUp();\n    }\n']",elasticsearch;elasticsearch;service;TRACE;iscovery;TRACE;set;set;Exception;zen,7.2177499532699585e-09;6.51925802230835e-09;2.561137080192566e-09;1.979060471057892e-09;1.862645149230957e-09;1.6298145055770874e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;0.0,5,5,"[-6.041447639465332, -6.044608116149902, -6.557456970214844, -5.611082077026367, -5.418848991394043, -0.014360297471284866]",0.985742449760437
3,"['@TestLogging(""_root:DEBUG"")\n    public void testNoShardRelocationsOccurWhenElectedMasterNodeFails() throws Exception {\n        Settings defaultSettings = Settings.builder()\n                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), ""1s"")\n                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), ""1"")\n                .build();\n\n        Settings masterNodeSettings = Settings.builder()\n                .put(Node.NODE_DATA_SETTING.getKey(), false)\n                .put(defaultSettings)\n                .build();\n        internalCluster().startNodes(2, masterNodeSettings);\n        Settings dateNodeSettings = Settings.builder()\n                .put(Node.NODE_MASTER_SETTING.getKey(), false)\n                .put(defaultSettings)\n                .build();\n        internalCluster().startNodes(2, dateNodeSettings);\n        ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth()\n                .setWaitForEvents(Priority.LANGUID)\n                .setWaitForNodes(""4"")\n                .setWaitForNoRelocatingShards(true)\n                .get();\n        assertThat(clusterHealthResponse.isTimedOut(), is(false));\n\n        createIndex(""test"");\n        ensureSearchable(""test"");\n        RecoveryResponse r = client().admin().indices().prepareRecoveries(""test"").get();\n        int numRecoveriesBeforeNewMaster = r.shardRecoveryStates().get(""test"").size();\n\n        final String oldMaster = internalCluster().getMasterName();\n        internalCluster().stopCurrentMasterNode();\n        assertBusy(() -> {\n            String current = internalCluster().getMasterName();\n            assertThat(current, notNullValue());\n            assertThat(current, not(equalTo(oldMaster)));\n        });\n        ensureSearchable(""test"");\n\n        r = client().admin().indices().prepareRecoveries(""test"").get();\n        int numRecoveriesAfterNewMaster = r.shardRecoveryStates().get(""test"").size();\n        assertThat(numRecoveriesAfterNewMaster, equalTo(numRecoveriesBeforeNewMaster));\n    }\n']",Relocations;Logging;TIMEOUT;DEBUG;Occur;No;Master;When;root;ING,2.561137080192566e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.4551915228366852e-09;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10,5,5,"[-5.873087406158447, -5.704582691192627, -6.50071907043457, -5.583280086517334, -5.657815456390381, -0.015009562484920025]",0.9851024150848389
3,"['@TestLogging(""org.elasticsearch.discovery.zen.publish:TRACE"")\n        public MockNode setAsMaster() {\n            this.clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .masterNodeId(discoveryNode.getId())).build();\n            return this;\n        }\n']",publish;org;TRACE;set;iscovery;iscovery;cluster;State;Logging;State,3.2014213502407074e-09;1.862645149230957e-09;1.862645149230957e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-6.010705947875977, -5.904517650604248, -6.569974899291992, -5.61149787902832, -5.564640522003174, -0.01416779775172472]",0.9859322309494019
3,"['@TestLogging(""_root:DEBUG,org.elasticsearch.cluster.service:TRACE"")\n    public void testFailWithMinimumMasterNodesConfigured() throws Exception {\n        List<String> nodes = startCluster(3);\n\n        // Figure out what is the elected master node\n        final String masterNode = internalCluster().getMasterName();\n        logger.info(""---> legit elected master node={}"", masterNode);\n\n        // Pick a node that isn\'t the elected master.\n        Set<String> nonMasters = new HashSet<>(nodes);\n        nonMasters.remove(masterNode);\n        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY));\n\n\n        // Simulate a network issue between the unlucky node and elected master node in both directions.\n\n        NetworkDisruption networkDisconnect = new NetworkDisruption(\n                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),\n                new NetworkDisruption.NetworkDisconnect());\n        setDisruptionScheme(networkDisconnect);\n        networkDisconnect.startDisrupting();\n\n        // Wait until elected master has removed that the unlucky node...\n        ensureStableCluster(2, masterNode);\n\n        // The unlucky node must report *no* master node, since it can\'t connect to master and in fact it should\n        // continuously ping until network failures have been resolved. However\n        // It may a take a bit before the node detects it has been cut off from the elected master\n        assertNoMaster(unluckyNode);\n\n        networkDisconnect.stopDisrupting();\n\n        // Wait until the master node sees all 3 nodes again.\n        ensureStableCluster(3);\n\n        // The elected master shouldn\'t have changed, since the unlucky node never could have elected himself as\n        // master since m_m_n of 2 could never be satisfied.\n        assertMaster(masterNode, nodes);\n    }\n']",Logging;Fail;Cluster;set;Partitions;Set;Disrupting;Scheme;nodes;master,1.862645149230957e-09;1.3387762010097504e-09;1.280568540096283e-09;9.313225746154785e-10;7.566995918750763e-10;5.456968210637569e-10;4.94765117764473e-10;4.911271389573812e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.003477096557617, -5.371433258056641, -6.862950801849365, -5.965729236602783, -5.813120365142822, -0.013811611570417881]",0.9862833023071289
3,"['    @TestLogging(""_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE"")\n    public void testStaleMasterNotHijackingMajority() throws Exception {\n        // 3 node cluster with unicast discovery and minimum_master_nodes set to 2:\n        final List<String> nodes = startCluster(3, 2);\n\n        // Save the current master node as old master node, because that node will get frozen\n        final String oldMasterNode = internalCluster().getMasterName();\n        for (String node : nodes) {\n            ensureStableCluster(3, node);\n        }\n        assertMaster(oldMasterNode, nodes);\n\n        // Simulating a painful gc by suspending all threads for a long time on the current elected master node.\n        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode);\n\n        // Save the majority side\n        final List<String> majoritySide = new ArrayList<>(nodes);\n        majoritySide.remove(oldMasterNode);\n\n        // Keeps track of the previous and current master when a master node transition took place on each node on the majority side:\n        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String,\n                        String>>>());\n        for (final String node : majoritySide) {\n            masters.put(node, new ArrayList<Tuple<String, String>>());\n            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {\n                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode();\n                DiscoveryNode currentMaster = event.state().nodes().getMasterNode();\n                if (!Objects.equals(previousMaster, currentMaster)) {\n                    logger.info(""node {} received new cluster state: {} \\n and had previous cluster state: {}"", node, event.state(),\n                            event.previousState());\n                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null;\n                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null;\n                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName));\n                }\n            });\n        }\n\n        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1);\n        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {\n            if (event.state().nodes().getMasterNodeId() == null) {\n                oldMasterNodeSteppedDown.countDown();\n            }\n        });\n\n        internalCluster().setDisruptionScheme(masterNodeDisruption);\n        logger.info(""freezing node [{}]"", oldMasterNode);\n        masterNodeDisruption.startDisrupting();\n\n        // Wait for the majority side to get stable\n        assertDifferentMaster(majoritySide.get(0), oldMasterNode);\n        assertDifferentMaster(majoritySide.get(1), oldMasterNode);\n\n        // the test is periodically tripping on the following assertion. To find out which threads are blocking the nodes from making\n        // progress we print a stack dump\n        boolean failed = true;\n        try {\n            assertDiscoveryCompleted(majoritySide);\n            failed = false;\n        } finally {\n            if (failed) {\n                logger.error(""discovery failed to complete, probably caused by a blocked thread: {}"",\n                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect());\n            }\n        }\n\n        // The old master node is frozen, but here we submit a cluster state update task that doesn\'t get executed,\n        // but will be queued and once the old master node un-freezes it gets executed.\n        // The old master node will send this update + the cluster state where he is flagged as master to the other\n        // nodes that follow the new master. These nodes should ignore this update.\n        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask(""sneaky-update"", new\n                ClusterStateUpdateTask(Priority.IMMEDIATE) {\n                    @Override\n                    public ClusterState execute(ClusterState currentState) throws Exception {\n                        return ClusterState.builder(currentState).build();\n                    }\n']",GCDisruption;Stale;elasticsearch;threads;all;root;TRACE;org;Long;elected,6.548361852765083e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.9094438552856445, -5.606065273284912, -6.487143039703369, -5.583390235900879, -5.681584358215332, -0.015194854699075222]",0.9849200248718262
3,"['    @TestLogging(\n    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {\n        final List<String> nodes = startCluster(3);\n\n        assertAcked(prepareCreate(""test"")\n                .setSettings(Settings.builder()\n                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))\n                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))\n                ));\n\n        ensureGreen();\n        String isolatedNode = internalCluster().getMasterName();\n        TwoPartitions partitions = isolateNode(isolatedNode);\n        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions);\n        networkDisruption.startDisrupting();\n\n        String nonIsolatedNode = partitions.getMajoritySide().iterator().next();\n\n        // make sure cluster reforms\n        ensureStableCluster(2, nonIsolatedNode);\n\n        // make sure isolated need picks up on things.\n        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40));\n\n        // restore isolation\n        networkDisruption.stopDisrupting();\n\n        for (String node : nodes) {\n            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),\n                    true, node);\n        }\n\n        logger.info(""issue a reroute"");\n        // trigger a reroute now, instead of waiting for the background reroute of RerouteService\n        assertAcked(client().admin().cluster().prepareReroute());\n        // and wait for it to finish and for the cluster to stabilize\n        ensureGreen(""test"");\n\n        // verify all cluster states are the same\n        // use assert busy to wait for cluster states to be applied (as publish_timeout has low value)\n        assertBusy(() -> {\n            ClusterState state = null;\n            for (String node : nodes) {\n                ClusterState nodeState = getNodeClusterState(node);\n                if (state == null) {\n                    state = nodeState;\n                    continue;\n                }\n                // assert nodes are identical\n                try {\n                    assertEquals(""unequal versions"", state.version(), nodeState.version());\n                    assertEquals(""unequal node count"", state.nodes().getSize(), nodeState.nodes().getSize());\n                    assertEquals(""different masters "", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId());\n                    assertEquals(""different meta data version"", state.metaData().version(), nodeState.metaData().version());\n                    assertEquals(""different routing"", state.routingTable().toString(), nodeState.routingTable().toString());\n                } catch (AssertionError t) {\n                    fail(""failed comparing cluster state: "" + t.getMessage() + ""\\n"" +\n                            ""--- cluster state of node ["" + nodes.get(0) + ""]: ---\\n"" + state +\n                            ""\\n--- cluster state ["" + node + ""]: ---\\n"" + nodeState);\n                }\n\n            }\n        });\n    }\n']",Logging;network;reforms;SETTING;Disrupting;isolation;Second;random;Data;final,1.1641532182693481e-09;8.731149137020111e-10;6.984919309616089e-10;5.529727786779404e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.846685409545898, -5.629658222198486, -6.305947780609131, -5.367679119110107, -5.554175853729248, -0.016984250396490097]",0.9831591844558716
3,"['    @TestLogging(\n    public void testMappingTimeout() throws Exception {\n        startCluster(3);\n        createIndex(""test"", Settings.builder()\n            .put(""index.number_of_shards"", 1)\n            .put(""index.number_of_replicas"", 1)\n            .put(""index.routing.allocation.exclude._name"", internalCluster().getMasterName())\n        .build());\n\n        // create one field\n        index(""test"", ""doc"", ""1"", ""{ \\""f\\"": 1 }"");\n\n        ensureGreen();\n\n        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(\n            Settings.builder().put(""indices.mapping.dynamic_timeout"", ""1ms"")));\n\n        ServiceDisruptionScheme disruption = new BlockMasterServiceOnMaster(random());\n        setDisruptionScheme(disruption);\n\n        disruption.startDisrupting();\n\n        BulkRequestBuilder bulk = client().prepareBulk();\n        bulk.add(client().prepareIndex(""test"", ""doc"", ""2"").setSource(""{ \\""f\\"": 1 }"", XContentType.JSON));\n        bulk.add(client().prepareIndex(""test"", ""doc"", ""3"").setSource(""{ \\""g\\"": 1 }"", XContentType.JSON));\n        bulk.add(client().prepareIndex(""test"", ""doc"", ""4"").setSource(""{ \\""f\\"": 1 }"", XContentType.JSON));\n        BulkResponse bulkResponse = bulk.get();\n        assertTrue(bulkResponse.hasFailures());\n\n        disruption.stopDisrupting();\n\n        assertBusy(() -> {\n            IndicesStatsResponse stats = client().admin().indices().prepareStats(""test"").clear().get();\n            for (ShardStats shardStats : stats.getShards()) {\n                assertThat(shardStats.getShardRouting().toString(),\n                    shardStats.getSeqNoStats().getGlobalCheckpoint(), equalTo(shardStats.getSeqNoStats().getLocalCheckpoint()));\n            }\n        });\n\n    }\n']",Logging;apping;Disruption;Cluster;Exception;disruption;index;Cluster;Settings;JSON,1.3387762010097504e-09;5.820766091346741e-10;4.94765117764473e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.829437255859375, -5.662575721740723, -6.270092964172363, -5.311034202575684, -5.50000524520874, -0.01748071052134037]",0.9826710820198059
3,"['    @TestLogging(""_root:DEBUG,org.elasticsearch.action.bulk:TRACE,org.elasticsearch.action.get:TRACE,"" +\n    public void testAckedIndexing() throws Exception {\n\n        final int seconds = !(TEST_NIGHTLY && rarely()) ? 1 : 5;\n        final String timeout = seconds + ""s"";\n\n        final List<String> nodes = startCluster(rarely() ? 5 : 3);\n\n        assertAcked(prepareCreate(""test"")\n            .setSettings(Settings.builder()\n                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))\n                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))\n            ));\n        ensureGreen();\n\n        ServiceDisruptionScheme disruptionScheme = addRandomDisruptionScheme();\n        logger.info(""disruption scheme [{}] added"", disruptionScheme);\n\n        final ConcurrentHashMap<String, String> ackedDocs = new ConcurrentHashMap<>(); // id -> node sent.\n\n        final AtomicBoolean stop = new AtomicBoolean(false);\n        List<Thread> indexers = new ArrayList<>(nodes.size());\n        List<Semaphore> semaphores = new ArrayList<>(nodes.size());\n        final AtomicInteger idGenerator = new AtomicInteger(0);\n        final AtomicReference<CountDownLatch> countDownLatchRef = new AtomicReference<>();\n        final List<Exception> exceptedExceptions = Collections.synchronizedList(new ArrayList<Exception>());\n\n        logger.info(""starting indexers"");\n        try {\n            for (final String node : nodes) {\n                final Semaphore semaphore = new Semaphore(0);\n                semaphores.add(semaphore);\n                final Client client = client(node);\n                final String name = ""indexer_"" + indexers.size();\n                final int numPrimaries = getNumShards(""test"").numPrimaries;\n                Thread thread = new Thread(() -> {\n                    while (!stop.get()) {\n                        String id = null;\n                        try {\n                            if (!semaphore.tryAcquire(10, TimeUnit.SECONDS)) {\n                                continue;\n                            }\n                            logger.info(""[{}] Acquired semaphore and it has {} permits left"", name, semaphore.availablePermits());\n                            try {\n                                id = Integer.toString(idGenerator.incrementAndGet());\n                                int shard = Math.floorMod(Murmur3HashFunction.hash(id), numPrimaries);\n                                logger.trace(""[{}] indexing id [{}] through node [{}] targeting shard [{}]"", name, id, node, shard);\n                                IndexResponse response =\n                                        client.prepareIndex(""test"", ""type"", id)\n                                                .setSource(""{}"", XContentType.JSON)\n                                                .setTimeout(timeout)\n                                                .get(timeout);\n                                assertEquals(DocWriteResponse.Result.CREATED, response.getResult());\n                                ackedDocs.put(id, node);\n                                logger.trace(""[{}] indexed id [{}] through node [{}], response [{}]"", name, id, node, response);\n                            } catch (ElasticsearchException e) {\n                                exceptedExceptions.add(e);\n                                final String docId = id;\n                                logger.trace(() -> new ParameterizedMessage(""[{}] failed id [{}] through node [{}]"", name, docId, node), e);\n                            } finally {\n                                countDownLatchRef.get().countDown();\n                                logger.trace(""[{}] decreased counter : {}"", name, countDownLatchRef.get().getCount());\n                            }\n                        } catch (InterruptedException e) {\n                            // fine - semaphore interrupt\n                        } catch (AssertionError | Exception e) {\n                            logger.info(() -> new ParameterizedMessage(""unexpected exception in background thread of [{}]"", node), e);\n                        }\n                    }\n                });\n\n                thread.setName(name);\n                thread.start();\n                indexers.add(thread);\n            }\n\n            int docsPerIndexer = randomInt(3);\n            logger.info(""indexing {} docs per indexer before partition"", docsPerIndexer);\n            countDownLatchRef.set(new CountDownLatch(docsPerIndexer * indexers.size()));\n            for (Semaphore semaphore : semaphores) {\n                semaphore.release(docsPerIndexer);\n            }\n            assertTrue(countDownLatchRef.get().await(1, TimeUnit.MINUTES));\n\n            for (int iter = 1 + randomInt(2); iter > 0; iter--) {\n                logger.info(""starting disruptions & indexing (iteration [{}])"", iter);\n                disruptionScheme.startDisrupting();\n\n                docsPerIndexer = 1 + randomInt(5);\n                logger.info(""indexing {} docs per indexer during partition"", docsPerIndexer);\n                countDownLatchRef.set(new CountDownLatch(docsPerIndexer * indexers.size()));\n                Collections.shuffle(semaphores, random());\n                for (Semaphore semaphore : semaphores) {\n                    assertThat(semaphore.availablePermits(), equalTo(0));\n                    semaphore.release(docsPerIndexer);\n                }\n                logger.info(""waiting for indexing requests to complete"");\n                assertTrue(countDownLatchRef.get().await(docsPerIndexer * seconds * 1000 + 2000, TimeUnit.MILLISECONDS));\n\n                logger.info(""stopping disruption"");\n                disruptionScheme.stopDisrupting();\n                for (String node : internalCluster().getNodeNames()) {\n                    ensureStableCluster(nodes.size(), TimeValue.timeValueMillis(disruptionScheme.expectedTimeToHeal().millis() +\n                        DISRUPTION_HEALING_OVERHEAD.millis()), true, node);\n                }\n                // in case of a bridge partition, shard allocation can fail ""index.allocation.max_retries"" times if the master\n                // is the super-connected node and recovery source and target are on opposite sides of the bridge\n                if (disruptionScheme instanceof NetworkDisruption &&\n                    ((NetworkDisruption) disruptionScheme).getDisruptedLinks() instanceof Bridge) {\n                    assertAcked(client().admin().cluster().prepareReroute().setRetryFailed(true));\n                }\n                ensureGreen(""test"");\n\n                logger.info(""validating successful docs"");\n                assertBusy(() -> {\n                    for (String node : nodes) {\n                        try {\n                            logger.debug(""validating through node [{}] ([{}] acked docs)"", node, ackedDocs.size());\n                            for (String id : ackedDocs.keySet()) {\n                                assertTrue(""doc ["" + id + ""] indexed via node ["" + ackedDocs.get(id) + ""] not found"",\n                                    client(node).prepareGet(""test"", ""type"", id).setPreference(""_local"").get().isExists());\n                            }\n                        } catch (AssertionError | NoShardAvailableActionException e) {\n                            throw new AssertionError(e.getMessage() + "" (checked via node ["" + node + ""]"", e);\n                        }\n                    }\n                }, 30, TimeUnit.SECONDS);\n\n                logger.info(""done validating (iteration [{}])"", iter);\n            }\n        } finally {\n            if (exceptedExceptions.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (Exception e : exceptedExceptions) {\n                    sb.append(""\\n"").append(e.getMessage());\n                }\n                logger.debug(""Indexing exceptions during disruption: {}"", sb);\n            }\n            logger.info(""shutting down indexers"");\n            stop.set(true);\n            for (Thread indexer : indexers) {\n                indexer.interrupt();\n                indexer.join(60000);\n            }\n        }\n    }\n']",Logging;elasticsearch;DEBUG;Collections;ulk;Doc;synchronized;Hash;SETTING;odes,2.561137080192566e-09;1.57160684466362e-09;1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;6.693881005048752e-10;6.111804395914078e-10;5.529727786779404e-10,5,5,"[-5.8922529220581055, -5.590105056762695, -6.47442102432251, -5.576771259307861, -5.66696310043335, -0.015398895367980003]",0.9847190380096436
3,"['    @TestLogging(""org.elasticsearch.cluster.service:TRACE"") // To ensure that we log cluster state events on TRACE level\n    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test1"",\n                masterService.getClass().getCanonicalName(),\n                Level.DEBUG,\n                ""*processing [test1]: took [1s] no change in cluster state""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test2"",\n                masterService.getClass().getCanonicalName(),\n                Level.TRACE,\n                ""*failed to execute cluster state update in [2s]*""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test3"",\n                masterService.getClass().getCanonicalName(),\n                Level.DEBUG,\n                ""*processing [test3]: took [3s] done publishing updated cluster state (version: *, uuid: *)""));\n\n        Logger clusterLogger = Loggers.getLogger(masterService.getClass().getPackage().getName());\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            masterService.currentTimeOverride = System.nanoTime();\n            masterService.submitStateUpdateTask(""test1"", new ClusterStateUpdateTask() {\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    masterService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos();\n                    return currentState;\n                }\n']",org;elasticsearch;mock;Seen;State;processing;level;took;Level;on,8.149072527885437e-10;5.529727786779404e-10;4.656612873077393e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.862916469573975, -5.700042724609375, -6.3132004737854, -5.368727207183838, -5.552402973175049, -0.016677485778927803]",0.9834607839584351
3,"['    @TestLogging(""org.elasticsearch.cluster.service:WARN"") // To ensure that we log cluster state events on WARN level\n    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n            new MockLogAppender.UnseenEventExpectation(\n                ""test1 shouldn\'t see because setting is too low"",\n                masterService.getClass().getCanonicalName(),\n                Level.WARN,\n                ""*cluster state update task [test1] took [*] above the warn threshold of *""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test2"",\n                masterService.getClass().getCanonicalName(),\n                Level.WARN,\n                ""*cluster state update task [test2] took [32s] above the warn threshold of *""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test3"",\n                masterService.getClass().getCanonicalName(),\n                Level.WARN,\n                ""*cluster state update task [test3] took [33s] above the warn threshold of *""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test4"",\n                masterService.getClass().getCanonicalName(),\n                Level.WARN,\n                ""*cluster state update task [test4] took [34s] above the warn threshold of *""));\n\n        Logger clusterLogger = Loggers.getLogger(masterService.getClass().getPackage().getName());\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(5);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            masterService.currentTimeOverride = System.nanoTime();\n            masterService.submitStateUpdateTask(""test1"", new ClusterStateUpdateTask() {\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    masterService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos();\n                    return currentState;\n                }\n']",task;cluster;Long;setting;mock;cluster;Logging;org;Unseen;we,2.7939677238464355e-09;1.280568540096283e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10,5,5,"[-5.871427059173584, -5.685567378997803, -6.339150905609131, -5.410287380218506, -5.581066608428955, -0.016351042315363884]",0.9837818145751953
3,"['    @TestLogging(""org.elasticsearch.cluster.service:TRACE"") // To ensure that we log cluster state events on TRACE level\n    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        ""test1"",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.DEBUG,\n                        ""*processing [test1]: took [1s] no change in cluster state""));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        ""test2"",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.TRACE,\n                        ""*failed to execute cluster state applier in [2s]*""));\n\n        Logger clusterLogger = Loggers.getLogger(""org.elasticsearch.cluster.service"");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(3);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(""test1"",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n']",Logger;to;Expectation;TRACE;execute;Logger;cluster;state;mock;service,5.587935447692871e-09;3.958120942115784e-09;2.153683453798294e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.2514647096395493e-09;1.2223608791828156e-09;1.1059455573558807e-09;1.0477378964424133e-09,5,5,"[-5.8800530433654785, -5.708733558654785, -6.35957670211792, -5.420867919921875, -5.587326526641846, -0.016139572486281395]",0.9839900732040405
3,"['    @TestLogging(""org.elasticsearch.cluster.service:WARN"") // To ensure that we log cluster state events on WARN level\n    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        ""test1 shouldn\'t see because setting is too low"",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        ""*cluster state applier task [test1] took [*] above the warn threshold of *""));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        ""test2"",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        ""*cluster state applier task [test2] took [32s] above the warn threshold of *""));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        ""test4"",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        ""*cluster state applier task [test3] took [34s] above the warn threshold of *""));\n\n        Logger clusterLogger = Loggers.getLogger(""org.elasticsearch.cluster.service"");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(""test1"",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n']",Logging;Mock;threshold;service;setting;cluster;Appender;new;cluster;low,8.949427865445614e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.879373550415039, -5.678114891052246, -6.3503098487854, -5.424010276794434, -5.592284679412842, -0.01622953824698925]",0.98390132188797
3,"['    @TestLogging(""_root:debug,org.elasticsearch.action.admin.cluster.tasks:trace"")\n    public void testPendingUpdateTask() throws Exception {\n        String node_0 = internalCluster().startNode();\n        internalCluster().startCoordinatingOnlyNode(Settings.EMPTY);\n\n        final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0);\n        final CountDownLatch block1 = new CountDownLatch(1);\n        final CountDownLatch invoked1 = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(""1"", new ClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) {\n                invoked1.countDown();\n                try {\n                    block1.await();\n                } catch (InterruptedException e) {\n                    fail();\n                }\n                return currentState;\n            }\n']",Update;Settings;Cluster;internal;Node;State;Coordinating;Task;Update;get,4.802132025361061e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.41970007866621e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.901103973388672, -5.740401268005371, -6.431811809539795, -5.493698596954346, -5.599429130554199, -0.015491392463445663]",0.9846279621124268
3,"['@TestLogging(""_root:DEBUG,org.elasticsearch.action.admin.cluster.state:TRACE"")\n    public void testSimpleOnlyMasterNodeElection() throws IOException {\n        logger.info(""--> start data node / non master node"");\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), true).put(Node.NODE_MASTER_SETTING.getKey(), false)\n            .put(""discovery.initial_state_timeout"", ""1s""));\n        try {\n            assertThat(client().admin().cluster().prepareState().setMasterNodeTimeout(""100ms"").execute().actionGet().getState().nodes().getMasterNodeId(), nullValue());\n            fail(""should not be able to find master"");\n        } catch (MasterNotDiscoveredException e) {\n            // all is well, no master elected\n        }\n        logger.info(""--> start master node"");\n        final String masterNodeName = internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).put(Node.NODE_MASTER_SETTING.getKey(), true));\n        assertThat(internalCluster().nonMasterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().getMasterNode().getName(), equalTo(masterNodeName));\n        assertThat(internalCluster().masterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().getMasterNode().getName(), equalTo(masterNodeName));\n\n        logger.info(""--> stop master node"");\n        internalCluster().stopCurrentMasterNode();\n\n        try {\n            assertThat(client().admin().cluster().prepareState().setMasterNodeTimeout(""100ms"").execute().actionGet().getState().nodes().getMasterNodeId(), nullValue());\n            fail(""should not be able to find master"");\n        } catch (MasterNotDiscoveredException e) {\n            // all is well, no master elected\n        }\n\n        logger.info(""--> start master node"");\n        final String nextMasterEligibleNodeName = internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).put(Node.NODE_MASTER_SETTING.getKey(), true));\n        assertThat(internalCluster().nonMasterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().getMasterNode().getName(), equalTo(nextMasterEligibleNodeName));\n        assertThat(internalCluster().masterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().getMasterNode().getName(), equalTo(nextMasterEligibleNodeName));\n    }\n']",root;TRACE;ms;admin;lection;put;timeout;initial;prepare;internal,1.6880221664905548e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.456968210637569e-10;4.94765117764473e-10,5,5,"[-5.576009273529053, -5.982987403869629, -6.885727405548096, -5.914254665374756, -5.53692626953125, -0.01406906545162201]",0.9860295653343201
3,"['@TestLogging(""_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.discovery.zen:TRACE"")\n    public void testSimpleMinimumMasterNodes() throws Exception {\n\n        Settings settings = Settings.builder()\n                .put(""discovery.zen.minimum_master_nodes"", 2)\n                .put(ZenDiscovery.PING_TIMEOUT_SETTING.getKey(), ""200ms"")\n                .put(""discovery.initial_state_timeout"", ""500ms"")\n                .build();\n\n        logger.info(""--> start first node"");\n        internalCluster().startNode(settings);\n\n        logger.info(""--> should be blocked, no master..."");\n        ClusterState state = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n        assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(true));\n        assertThat(state.nodes().getSize(), equalTo(1)); // verify that we still see the local node in the cluster state\n\n        logger.info(""--> start second node, cluster should be formed"");\n        internalCluster().startNode(settings);\n\n        ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(""2"").execute().actionGet();\n        assertThat(clusterHealthResponse.isTimedOut(), equalTo(false));\n\n        state = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n        assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(false));\n        state = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n        assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(false));\n\n        state = client().admin().cluster().prepareState().execute().actionGet().getState();\n        assertThat(state.nodes().getSize(), equalTo(2));\n        assertThat(state.metaData().indices().containsKey(""test""), equalTo(false));\n\n        createIndex(""test"");\n        NumShards numShards = getNumShards(""test"");\n        logger.info(""--> indexing some data"");\n        for (int i = 0; i < 100; i++) {\n            client().prepareIndex(""test"", ""type1"", Integer.toString(i)).setSource(""field"", ""value"").execute().actionGet();\n        }\n        // make sure that all shards recovered before trying to flush\n        assertThat(client().admin().cluster().prepareHealth(""test"").setWaitForActiveShards(numShards.totalNumShards).execute().actionGet().getActiveShards(), equalTo(numShards.totalNumShards));\n        // flush for simpler debugging\n        flushAndRefresh();\n\n        logger.info(""--> verify we the data back"");\n        for (int i = 0; i < 10; i++) {\n            assertThat(client().prepareSearch().setSize(0).setQuery(QueryBuilders.matchAllQuery()).execute().actionGet().getHits().getTotalHits(), equalTo(100L));\n        }\n\n        internalCluster().stopCurrentMasterNode();\n        awaitBusy(() -> {\n            ClusterState clusterState = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n            return clusterState.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID);\n        });\n        state = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n        assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(true));\n        // verify that both nodes are still in the cluster state but there is no master\n        assertThat(state.nodes().getSize(), equalTo(2));\n        assertThat(state.nodes().getMasterNode(), equalTo(null));\n\n        logger.info(""--> starting the previous master node again..."");\n        internalCluster().startNode(settings);\n\n        clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().setWaitForNodes(""2"").execute().actionGet();\n        assertThat(clusterHealthResponse.isTimedOut(), equalTo(false));\n\n        state = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n        assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(false));\n        state = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n        assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(false));\n\n        state = client().admin().cluster().prepareState().execute().actionGet().getState();\n        assertThat(state.nodes().getSize(), equalTo(2));\n        assertThat(state.metaData().indices().containsKey(""test""), equalTo(true));\n\n        ensureGreen();\n\n        logger.info(""--> verify we the data back after cluster reform"");\n        for (int i = 0; i < 10; i++) {\n            assertHitCount(client().prepareSearch().setSize(0).setQuery(QueryBuilders.matchAllQuery()).execute().actionGet(), 100);\n        }\n\n        internalCluster().stopRandomNonMasterNode();\n        assertBusy(() -> {\n            ClusterState state1 = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n            assertThat(state1.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(true));\n        });\n\n        logger.info(""--> starting the previous master node again..."");\n        internalCluster().startNode(settings);\n\n        ensureGreen();\n        clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(""2"").setWaitForGreenStatus().execute().actionGet();\n        assertThat(clusterHealthResponse.isTimedOut(), equalTo(false));\n\n        state = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n        assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(false));\n        state = client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();\n        assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID), equalTo(false));\n\n        state = client().admin().cluster().prepareState().execute().actionGet().getState();\n        assertThat(state.nodes().getSize(), equalTo(2));\n        assertThat(state.metaData().indices().containsKey(""test""), equalTo(true));\n\n        logger.info(""Running Cluster Health"");\n        ensureGreen();\n\n        logger.info(""--> verify we the data back"");\n        for (int i = 0; i < 10; i++) {\n            assertHitCount(client().prepareSearch().setSize(0).setQuery(QueryBuilders.matchAllQuery()).execute().actionGet(), 100);\n        }\n    }\n']",Exception;DEBUG;elasticsearch;Settings;elasticsearch;TRACE;Block;TRACE;iscovery;blocked,5.587935447692871e-09;4.6566128730773926e-09;4.540197551250458e-09;3.725290298461914e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09,5,5,"[-5.678762912750244, -5.90056848526001, -6.834599018096924, -5.8996148109436035, -5.631351470947266, -0.013648523017764091]",0.9864441752433777
3,"['    @TestLogging(""_root:DEBUG, org.elasticsearch.cluster.routing.allocation:TRACE, org.elasticsearch.cluster.action.shard:TRACE,"" +\n    public void testPrimaryReplicaResyncFailed() throws Exception {\n        String master = internalCluster().startMasterOnlyNode(Settings.EMPTY);\n        final int numberOfReplicas = between(2, 3);\n        final String oldPrimary = internalCluster().startDataOnlyNode();\n        assertAcked(\n            prepareCreate(""test"", Settings.builder().put(indexSettings())\n                .put(SETTING_NUMBER_OF_SHARDS, 1)\n                .put(SETTING_NUMBER_OF_REPLICAS, numberOfReplicas)));\n        final ShardId shardId = new ShardId(clusterService().state().metaData().index(""test"").getIndex(), 0);\n        final Set<String> replicaNodes = new HashSet<>(internalCluster().startDataOnlyNodes(numberOfReplicas));\n        ensureGreen();\n        assertAcked(\n            client(master).admin().cluster().prepareUpdateSettings()\n                .setTransientSettings(Settings.builder().put(""cluster.routing.allocation.enable"", ""none"")).get());\n        logger.info(""--> Indexing with gap in seqno to ensure that some operations will be replayed in resync"");\n        long numDocs = scaledRandomIntBetween(5, 50);\n        for (int i = 0; i < numDocs; i++) {\n            IndexResponse indexResult = index(""test"", ""doc"", Long.toString(i));\n            assertThat(indexResult.getShardInfo().getSuccessful(), equalTo(numberOfReplicas + 1));\n        }\n        final IndexShard oldPrimaryShard = internalCluster().getInstance(IndicesService.class, oldPrimary).getShardOrNull(shardId);\n        EngineTestCase.generateNewSeqNo(IndexShardTestCase.getEngine(oldPrimaryShard)); // Make gap in seqno.\n        long moreDocs = scaledRandomIntBetween(1, 10);\n        for (int i = 0; i < moreDocs; i++) {\n            IndexResponse indexResult = index(""test"", ""doc"", Long.toString(numDocs + i));\n            assertThat(indexResult.getShardInfo().getSuccessful(), equalTo(numberOfReplicas + 1));\n        }\n        final Set<String> replicasSide1 = Sets.newHashSet(randomSubsetOf(between(1, numberOfReplicas - 1), replicaNodes));\n        final Set<String> replicasSide2 = Sets.difference(replicaNodes, replicasSide1);\n        NetworkDisruption partition = new NetworkDisruption(new TwoPartitions(replicasSide1, replicasSide2), new NetworkDisconnect());\n        internalCluster().setDisruptionScheme(partition);\n        logger.info(""--> isolating some replicas during primary-replica resync"");\n        partition.startDisrupting();\n        internalCluster().stopRandomNode(InternalTestCluster.nameFilter(oldPrimary));\n        // Checks that we fails replicas in one side but not mark them as stale.\n        assertBusy(() -> {\n            ClusterState state = client(master).admin().cluster().prepareState().get().getState();\n            final IndexShardRoutingTable shardRoutingTable = state.routingTable().shardRoutingTable(shardId);\n            final String newPrimaryNode = state.getRoutingNodes().node(shardRoutingTable.primary.currentNodeId()).node().getName();\n            assertThat(newPrimaryNode, not(equalTo(oldPrimary)));\n            Set<String> selectedPartition = replicasSide1.contains(newPrimaryNode) ? replicasSide1 : replicasSide2;\n            assertThat(shardRoutingTable.activeShards(), hasSize(selectedPartition.size()));\n            for (ShardRouting activeShard : shardRoutingTable.activeShards()) {\n                assertThat(state.getRoutingNodes().node(activeShard.currentNodeId()).node().getName(), isIn(selectedPartition));\n            }\n            assertThat(state.metaData().index(""test"").inSyncAllocationIds(shardId.id()), hasSize(numberOfReplicas + 1));\n        }, 1, TimeUnit.MINUTES);\n        assertAcked(\n            client(master).admin().cluster().prepareUpdateSettings()\n                .setTransientSettings(Settings.builder().put(""cluster.routing.allocation.enable"", ""all"")).get());\n        partition.stopDisrupting();\n        partition.ensureHealthy(internalCluster());\n        logger.info(""--> stop disrupting network and re-enable allocation"");\n        assertBusy(() -> {\n            ClusterState state = client(master).admin().cluster().prepareState().get().getState();\n            assertThat(state.routingTable().shardRoutingTable(shardId).activeShards(), hasSize(numberOfReplicas));\n            assertThat(state.metaData().index(""test"").inSyncAllocationIds(shardId.id()), hasSize(numberOfReplicas + 1));\n            for (String node : replicaNodes) {\n                IndexShard shard = internalCluster().getInstance(IndicesService.class, node).getShardOrNull(shardId);\n                assertThat(shard.getLocalCheckpoint(), equalTo(numDocs + moreDocs));\n            }\n        }, 30, TimeUnit.SECONDS);\n        internalCluster().assertConsistentHistoryBetweenTranslogAndLuceneIndex();\n    }\n']",resync;enable;replayed;outing;Logging;TRACE;cked;Node;shard;Replicas,1.9208528101444244e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.766640581190586e-10;5.820766091346741e-10;5.602487362921238e-10,5,5,"[-5.8995466232299805, -5.601110458374023, -6.478536605834961, -5.56205940246582, -5.676797389984131, -0.015353113412857056]",0.9847641587257385
3,"['    @TestLogging(""org.elasticsearch.persistent:TRACE,org.elasticsearch.cluster.service:DEBUG"")\n    public void testFullClusterRestart() throws Exception {\n        PersistentTasksService service = internalCluster().getInstance(PersistentTasksService.class);\n        int numberOfTasks = randomIntBetween(1, 10);\n        String[] taskIds = new String[numberOfTasks];\n        List<PlainActionFuture<PersistentTask<TestParams>>> futures = new ArrayList<>(numberOfTasks);\n\n        for (int i = 0; i < numberOfTasks; i++) {\n            PlainActionFuture<PersistentTask<TestParams>> future = new PlainActionFuture<>();\n            futures.add(future);\n            taskIds[i] = UUIDs.base64UUID();\n            service.sendStartRequest(taskIds[i], TestPersistentTasksExecutor.NAME, new TestParams(""Blah""), future);\n        }\n\n        for (int i = 0; i < numberOfTasks; i++) {\n            assertThat(futures.get(i).get().getId(), equalTo(taskIds[i]));\n        }\n\n        PersistentTasksCustomMetaData tasksInProgress = internalCluster().clusterService().state().getMetaData()\n                .custom(PersistentTasksCustomMetaData.TYPE);\n        assertThat(tasksInProgress.tasks().size(), equalTo(numberOfTasks));\n\n        // Make sure that at least one of the tasks is running\n        assertBusy(() -> {\n            // Wait for the task to start\n            assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + ""[c]"").get()\n                    .getTasks().size(), greaterThan(0));\n        });\n\n        // Restart cluster\n        internalCluster().fullRestart();\n        ensureYellow();\n\n        tasksInProgress = internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n        assertThat(tasksInProgress.tasks().size(), equalTo(numberOfTasks));\n        // Check that cluster state is correct\n        for (int i = 0; i < numberOfTasks; i++) {\n            PersistentTask<?> task = tasksInProgress.getTask(taskIds[i]);\n            assertNotNull(task);\n        }\n\n        logger.info(""Waiting for {} tasks to start"", numberOfTasks);\n        assertBusy(() -> {\n            // Wait for all tasks to start\n            assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + ""[c]"").get()\n                            .getTasks().size(), equalTo(numberOfTasks));\n        });\n\n        logger.info(""Complete all tasks"");\n        // Complete the running task and make sure it finishes properly\n        assertThat(new TestPersistentTasksPlugin.TestTasksRequestBuilder(client()).setOperation(""finish"").get().getTasks().size(),\n                equalTo(numberOfTasks));\n\n        assertBusy(() -> {\n            // Make sure the task is removed from the cluster state\n            assertThat(((PersistentTasksCustomMetaData) internalCluster().clusterService().state().getMetaData()\n                    .custom(PersistentTasksCustomMetaData.TYPE)).tasks(), empty());\n        });\n\n    }\n']",elasticsearch;elasticsearch;Progress;Blah;send;TYPE;task;Bus;UID;Make,2.270098775625229e-09;4.94765117764473e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.892498016357422, -5.663510799407959, -6.51963472366333, -5.612588882446289, -5.657356262207031, -0.014959299005568027]",0.985152006149292
3,"['@TestLogging(""_root:DEBUG"")\n    public void testIndexCausesIndexCreation() throws Exception {\n        searchWhileCreatingIndex(false, 1); // 1 replica in our default...\n    }\n']",false;Causes;Creating;Creation;search;in;default;Index;Exception;our,4.190951585769653e-09;3.958120942115784e-09;2.9103830456733704e-09;2.2118911147117615e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;-1.1641532182693481e-10;-8.149072527885437e-10,5,5,"[-6.000037670135498, -5.978381633758545, -6.5503716468811035, -5.628391742706299, -5.505603313446045, -0.014199883677065372]",0.9859005808830261
3,"['    @TestLogging(""_root:DEBUG"")  // this fails every now and then: https://github.com/elastic/elasticsearch/issues/18121 but without\n    public void testReadonlyRepository() throws Exception {\n        Client client = client();\n        logger.info(""-->  creating repository"");\n        Path repositoryLocation = randomRepoPath();\n        assertAcked(client.admin().cluster().preparePutRepository(""test-repo"")\n                .setType(""fs"").setSettings(Settings.builder()\n                        .put(""location"", repositoryLocation)\n                        .put(""compress"", randomBoolean())\n                        .put(""chunk_size"", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));\n\n        createIndex(""test-idx"");\n        ensureGreen();\n\n        logger.info(""--> indexing some data"");\n        for (int i = 0; i < 100; i++) {\n            index(""test-idx"", ""_doc"", Integer.toString(i), ""foo"", ""bar"" + i);\n        }\n        refresh();\n\n        logger.info(""--> snapshot"");\n        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(""test-repo"", ""test-snap"").setWaitForCompletion(true).setIndices(""test-idx"").get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n\n        assertThat(client.admin().cluster().prepareGetSnapshots(""test-repo"").setSnapshots(""test-snap"").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS));\n\n        logger.info(""--> delete index"");\n        cluster().wipeIndices(""test-idx"");\n\n        logger.info(""--> create read-only URL repository"");\n        assertAcked(client.admin().cluster().preparePutRepository(""readonly-repo"")\n                .setType(""fs"").setSettings(Settings.builder()\n                        .put(""location"", repositoryLocation)\n                        .put(""compress"", randomBoolean())\n                        .put(""readonly"", true)\n                        .put(""chunk_size"", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));\n        logger.info(""--> restore index after deletion"");\n        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot(""readonly-repo"", ""test-snap"").setWaitForCompletion(true).setIndices(""test-idx"").execute().actionGet();\n        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n\n        assertThat(client.prepareSearch(""test-idx"").setSize(0).get().getHits().getTotalHits(), equalTo(100L));\n\n        logger.info(""--> list available shapshots"");\n        GetSnapshotsResponse getSnapshotsResponse = client.admin().cluster().prepareGetSnapshots(""readonly-repo"").get();\n        assertThat(getSnapshotsResponse.getSnapshots(), notNullValue());\n        assertThat(getSnapshotsResponse.getSnapshots().size(), equalTo(1));\n\n        logger.info(""--> try deleting snapshot"");\n        assertThrows(client.admin().cluster().prepareDeleteSnapshot(""readonly-repo"", ""test-snap""), RepositoryException.class, ""cannot delete snapshot from a readonly repository"");\n\n        logger.info(""--> try making another snapshot"");\n        assertThrows(client.admin().cluster().prepareCreateSnapshot(""readonly-repo"", ""test-snap-2"").setWaitForCompletion(true).setIndices(""test-idx""), RepositoryException.class, ""cannot create snapshot in a readonly repository"");\n    }\n']",Logging;root;fails;DEBUG;elastic;without;repo;repo;Exception;Create,2.0954757928848267e-09;1.3969838619232178e-09;9.89530235528946e-10;6.984919309616089e-10;5.820766091346741e-10;5.093170329928398e-10;4.3655745685100555e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.893593788146973, -5.671339988708496, -6.447944164276123, -5.503626823425293, -5.642940521240234, -0.01551827136427164]",0.9846014976501465
3,"['    @TestLogging(""org.elasticsearch.snapshots:TRACE"")\n    public void testAbortedSnapshotDuringInitDoesNotStart() throws Exception {\n        final Client client = client();\n\n        // Blocks on initialization\n        assertAcked(client.admin().cluster().preparePutRepository(""repository"")\n            .setType(""mock"").setSettings(Settings.builder()\n                .put(""location"", randomRepoPath())\n                .put(""block_on_init"", true)\n            ));\n\n        createIndex(""test-idx"");\n        final int nbDocs = scaledRandomIntBetween(100, 500);\n        for (int i = 0; i < nbDocs; i++) {\n            index(""test-idx"", ""_doc"", Integer.toString(i), ""foo"", ""bar"" + i);\n        }\n        flushAndRefresh(""test-idx"");\n        assertThat(client.prepareSearch(""test-idx"").setSize(0).get().getHits().getTotalHits(), equalTo((long) nbDocs));\n\n        // Create a snapshot\n        client.admin().cluster().prepareCreateSnapshot(""repository"", ""snap"").execute();\n        waitForBlock(internalCluster().getMasterName(), ""repository"", TimeValue.timeValueMinutes(1));\n        boolean blocked = true;\n\n        // Snapshot is initializing (and is blocked at this stage)\n        SnapshotsStatusResponse snapshotsStatus = client.admin().cluster().prepareSnapshotStatus(""repository"").setSnapshots(""snap"").get();\n        assertThat(snapshotsStatus.getSnapshots().iterator().next().getState(), equalTo(State.INIT));\n\n        final List<State> states = new CopyOnWriteArrayList<>();\n        final ClusterStateListener listener = event -> {\n            SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE);\n            for (SnapshotsInProgress.Entry entry : snapshotsInProgress.entries()) {\n                if (""snap"".equals(entry.snapshot().getSnapshotId().getName())) {\n                    states.add(entry.state());\n                }\n            }\n        };\n\n        try {\n            // Record the upcoming states of the snapshot on all nodes\n            internalCluster().getInstances(ClusterService.class).forEach(clusterService -> clusterService.addListener(listener));\n\n            // Delete the snapshot while it is being initialized\n            ActionFuture<AcknowledgedResponse> delete = client.admin().cluster().prepareDeleteSnapshot(""repository"", ""snap"").execute();\n\n            // The deletion must set the snapshot in the ABORTED state\n            assertBusy(() -> {\n                SnapshotsStatusResponse status = client.admin().cluster().prepareSnapshotStatus(""repository"").setSnapshots(""snap"").get();\n                assertThat(status.getSnapshots().iterator().next().getState(), equalTo(State.ABORTED));\n            });\n\n            // Now unblock the repository\n            unblockNode(""repository"", internalCluster().getMasterName());\n            blocked = false;\n\n            assertAcked(delete.get());\n            expectThrows(SnapshotMissingException.class, () ->\n                client.admin().cluster().prepareGetSnapshots(""repository"").setSnapshots(""snap"").get());\n\n            assertFalse(""Expecting snapshot state to be updated"", states.isEmpty());\n            assertFalse(""Expecting snapshot to be aborted and not started at all"", states.contains(State.STARTED));\n        } finally {\n            internalCluster().getInstances(ClusterService.class).forEach(clusterService -> clusterService.removeListener(listener));\n            if (blocked) {\n                unblockNode(""repository"", internalCluster().getMasterName());\n            }\n        }\n    }\n']",elasticsearch;Doc;Not;Does;Start;its;During;repository;prepare;client,6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.147295840084553e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.883368015289307, -5.717410564422607, -6.4308576583862305, -5.469189643859863, -5.609134674072266, -0.01568598486483097]",0.9844363927841187
3,"['    @TestLogging(""org.elasticsearch.common.util.concurrent:DEBUG"")\n    public void testAutoQueueSizingWithMax() throws Exception {\n        ThreadContext context = new ThreadContext(Settings.EMPTY);\n        ResizableBlockingQueue<Runnable> queue =\n                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(),\n                        5000);\n\n        int threads = randomIntBetween(1, 5);\n        int measureWindow = randomIntBetween(10, 100);\n        int max = randomIntBetween(5010, 5024);\n        logger.info(""--> auto-queue with a measurement window of {} tasks"", measureWindow);\n        QueueResizingEsThreadPoolExecutor executor =\n                new QueueResizingEsThreadPoolExecutor(\n                        ""test-threadpool"", threads, threads, 1000,\n                        TimeUnit.MILLISECONDS, queue, 10, max, fastWrapper(), measureWindow, TimeValue.timeValueMillis(1),\n                        EsExecutors.daemonThreadFactory(""queuetest""), new EsAbortPolicy(), context);\n        executor.prestartAllCoreThreads();\n        logger.info(""--> executor: {}"", executor);\n\n        // Execute a task multiple times that takes 1ms\n        executeTask(executor, measureWindow * 3);\n\n        // The queue capacity should increase, but no higher than the maximum\n        assertBusy(() -> {\n            assertThat(queue.capacity(), equalTo(max));\n        });\n        executor.shutdown();\n        executor.awaitTermination(10, TimeUnit.SECONDS);\n        context.close();\n    }\n']",org;Abort;restart;threads;measurement;threadpool;Execute;window;Logging;ILLISECONDS,7.130438461899757e-10;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.546585164964199e-10,5,5,"[-5.873591423034668, -5.673510551452637, -6.397741317749023, -5.479791164398193, -5.600819110870361, -0.015904707834124565]",0.9842211008071899
3,"['    @TestLogging(""_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE"")\n    public void testAutoGenerateIdNoDuplicates() throws Exception {\n        int numberOfIterations = scaledRandomIntBetween(10, 50);\n        for (int i = 0; i < numberOfIterations; i++) {\n            Exception firstError = null;\n            createIndex(""test"");\n            int numOfDocs = randomIntBetween(10, 100);\n            logger.info(""indexing [{}] docs"", numOfDocs);\n            List<IndexRequestBuilder> builders = new ArrayList<>(numOfDocs);\n            for (int j = 0; j < numOfDocs; j++) {\n                builders.add(client().prepareIndex(""test"", ""type"").setSource(""field"", ""value_"" + j));\n            }\n            indexRandom(true, builders);\n            logger.info(""verifying indexed content"");\n            int numOfChecks = randomIntBetween(8, 12);\n            for (int j = 0; j < numOfChecks; j++) {\n                try {\n                    logger.debug(""running search with all types"");\n                    SearchResponse response = client().prepareSearch(""test"").get();\n                    if (response.getHits().getTotalHits() != numOfDocs) {\n                        final String message = ""Count is "" + response.getHits().getTotalHits() + "" but "" + numOfDocs + "" was expected. ""\n                            + ElasticsearchAssertions.formatShardStatus(response);\n                        logger.error(""{}. search response: \\n{}"", message, response);\n                        fail(message);\n                    }\n                } catch (Exception e) {\n                    logger.error(""search for all docs types failed"", e);\n                    if (firstError == null) {\n                        firstError = e;\n                    }\n                }\n                try {\n                    logger.debug(""running search with a specific type"");\n                    SearchResponse response = client().prepareSearch(""test"").setTypes(""type"").get();\n                    if (response.getHits().getTotalHits() != numOfDocs) {\n                        final String message = ""Count is "" + response.getHits().getTotalHits() + "" but "" + numOfDocs + "" was expected. ""\n                            + ElasticsearchAssertions.formatShardStatus(response);\n                        logger.error(""{}. search response: \\n{}"", message, response);\n                        fail(message);\n                    }\n                } catch (Exception e) {\n                    logger.error(""search for all docs of a specific type failed"", e);\n                    if (firstError == null) {\n                        firstError = e;\n                    }\n                }\n            }\n            if (firstError != null) {\n                fail(firstError.getMessage());\n            }\n            internalCluster().wipeIndices(""test"");\n        }\n    }\n']",with;shard;action;Checks;search;types;docs;elasticsearch;all;Duplicates,8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.9282636642456055, -5.693862438201904, -6.44920539855957, -5.492467880249023, -5.630721569061279, -0.015433641150593758]",0.9846848249435425
3,"['    @TestLogging(""_root:DEBUG"")\n    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {\n        logger.info(""--> start 4 nodes, 3 master, 1 data"");\n\n        final Settings sharedSettings = Settings.builder()\n                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), ""1s"") // for hitting simulated network failures quickly\n                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), ""1"") // for hitting simulated network failures quickly\n                .put(""discovery.zen.join_timeout"", ""10s"")  // still long to induce failures but to long so test won\'t time out\n                .put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), ""1s"") // <-- for hitting simulated network failures quickly\n                .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2)\n                .build();\n\n        internalCluster().startMasterOnlyNodes(3, sharedSettings);\n\n        String dataNode = internalCluster().startDataOnlyNode(sharedSettings);\n\n        logger.info(""--> wait for all nodes to join the cluster"");\n        ensureStableCluster(4);\n\n        // We index data with mapping changes into cluster and have master failover at same time\n        client().admin().indices().prepareCreate(""myindex"")\n                .setSettings(Settings.builder().put(""index.number_of_shards"", 1).put(""index.number_of_replicas"", 0))\n                .get();\n        ensureGreen(""myindex"");\n\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n\n        Thread indexingThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    barrier.await();\n                } catch (InterruptedException e) {\n                    logger.warn(""Barrier interrupted"", e);\n                    return;\n                } catch (BrokenBarrierException e) {\n                    logger.warn(""Broken barrier"", e);\n                    return;\n                }\n                for (int i = 0; i < 10; i++) {\n                    // index data with mapping changes\n                    IndexResponse response = client(dataNode).prepareIndex(""myindex"", ""mytype"").setSource(""field_"" + i, ""val"").get();\n                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult());\n                }\n            }\n']",master;SETTING;join;master;Master;mapping;We;won't;indices;MASTER,4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.875300884246826, -5.714346885681152, -6.470032215118408, -5.52975606918335, -5.634130001068115, -0.01531284675002098]",0.9848037958145142
3,"['@TestLogging(""_root:DEBUG,org.elasticsearch.action.admin.indices.shards:TRACE,org.elasticsearch.cluster.service:TRACE"")\n    public void testEmpty() {\n        ensureGreen();\n        IndicesShardStoresResponse rsp = client().admin().indices().prepareShardStores().get();\n        assertThat(rsp.getStoreStatuses().size(), equalTo(0));\n    }\n']",Statuses;elasticsearch;Green;cluster;org;elasticsearch;org;admin;That;Indices,4.598405212163925e-09;4.540197551250458e-09;3.725290298461914e-09;2.6775524020195007e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09,5,5,"[-6.056692123413086, -6.127229690551758, -6.699334144592285, -5.665460586547852, -5.532758712768555, -0.013262624852359295]",0.9868249297142029
3,"['    @TestLogging(""_root:DEBUG, org.elasticsearch.transport:TRACE"")\n    public void testCloseWhileConcurrentlyConnecting() throws IOException, InterruptedException, BrokenBarrierException {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(""seed_node"", knownNodes, Version.CURRENT);\n             MockTransportService seedTransport1 = startTransport(""seed_node_1"", knownNodes, Version.CURRENT);\n             MockTransportService discoverableTransport = startTransport(""discoverable_node"", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalDiscoNode();\n            DiscoveryNode seedNode1 = seedTransport1.getLocalDiscoNode();\n            knownNodes.add(seedTransport.getLocalDiscoNode());\n            knownNodes.add(discoverableTransport.getLocalDiscoNode());\n            knownNodes.add(seedTransport1.getLocalDiscoNode());\n            Collections.shuffle(knownNodes, random());\n            List<Supplier<DiscoveryNode>> seedNodes = Arrays.asList(() -> seedNode1, () -> seedNode);\n            Collections.shuffle(seedNodes, random());\n\n            try (MockTransportService service = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool, null)) {\n                service.start();\n                service.acceptIncomingRequests();\n                try (RemoteClusterConnection connection = new RemoteClusterConnection(Settings.EMPTY, ""test-cluster"",\n                    seedNodes, service, service.getConnectionManager(), Integer.MAX_VALUE, n -> true)) {\n                    int numThreads = randomIntBetween(4, 10);\n                    Thread[] threads = new Thread[numThreads];\n                    CyclicBarrier barrier = new CyclicBarrier(numThreads + 1);\n                    for (int i = 0; i < threads.length; i++) {\n                        final int numConnectionAttempts = randomIntBetween(10, 100);\n                        threads[i] = new Thread() {\n                            @Override\n                            public void run() {\n                                try {\n                                    barrier.await();\n                                    CountDownLatch latch = new CountDownLatch(numConnectionAttempts);\n                                    for (int i = 0; i < numConnectionAttempts; i++) {\n                                        AtomicReference<Exception> executed = new AtomicReference<>();\n                                        ActionListener<Void> listener = ActionListener.wrap(\n                                            x -> {\n                                                if (executed.compareAndSet(null, new RuntimeException())) {\n                                                    latch.countDown();\n                                                } else {\n                                                    throw new AssertionError(""shit\'s been called twice"", executed.get());\n                                                }\n                                            },\n                                            x -> {\n                                                if (executed.compareAndSet(null, x)) {\n                                                    latch.countDown();\n                                                } else {\n                                                    final String message = x.getMessage();\n                                                    if ((executed.get().getClass() == x.getClass()\n                                                        && ""operation was cancelled reason [connect handler is closed]"".equals(message)\n                                                        && message.equals(executed.get().getMessage())) == false) {\n                                                        // we do cancel the operation and that means that if timing allows it, the caller\n                                                        // of a blocking call as well as the handler will get the exception from the\n                                                        // ExecutionCancelledException concurrently. unless that is the case we fail\n                                                        // if we get called more than once!\n                                                        AssertionError assertionError = new AssertionError(""shit\'s been called twice"", x);\n                                                        assertionError.addSuppressed(executed.get());\n                                                        throw assertionError;\n                                                    }\n                                                }\n                                                if (x instanceof RejectedExecutionException || x instanceof AlreadyClosedException\n                                                    || x instanceof CancellableThreads.ExecutionCancelledException) {\n                                                    // that\'s fine\n                                                } else {\n                                                    throw new AssertionError(x);\n                                                }\n                                            });\n                                        try {\n                                            connection.updateSeedNodes(null, seedNodes, listener);\n                                        } catch (Exception e) {\n                                            // it\'s ok if we\'re shutting down\n                                            assertThat(e.getMessage(), containsString(""threadcontext is already closed""));\n                                            latch.countDown();\n                                        }\n                                    }\n                                    latch.await();\n                                } catch (Exception ex) {\n                                    throw new AssertionError(ex);\n                                }\n                            }\n']",Transport;EMPTY;Broken;IOException;Exception;Mock;Write;Service;Node;Transport,7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.890929698944092, -5.6738810539245605, -6.592095375061035, -5.647393226623535, -5.689812660217285, -0.01458283606916666]",0.985522985458374
3,"['    @TestLogging(""_root:DEBUG,org.elasticsearch.action.bulk:TRACE,org.elasticsearch.index.shard:TRACE,org.elasticsearch.cluster.service:TRACE"")\n    public void testPrimaryRelocationWhileIndexing() throws Exception {\n        internalCluster().ensureAtLeastNumDataNodes(randomIntBetween(2, 3));\n        client().admin().indices().prepareCreate(""test"")\n            .setSettings(Settings.builder().put(""index.number_of_shards"", 1).put(""index.number_of_replicas"", 0))\n            .addMapping(""type"", ""field"", ""type=text"")\n            .get();\n        ensureGreen(""test"");\n        AtomicInteger numAutoGenDocs = new AtomicInteger();\n        final AtomicBoolean finished = new AtomicBoolean(false);\n        Thread indexingThread = new Thread() {\n            @Override\n            public void run() {\n                while (finished.get() == false) {\n                    IndexResponse indexResponse = client().prepareIndex(""test"", ""type"", ""id"").setSource(""field"", ""value"").get();\n                    assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n                    DeleteResponse deleteResponse = client().prepareDelete(""test"", ""type"", ""id"").get();\n                    assertEquals(DocWriteResponse.Result.DELETED, deleteResponse.getResult());\n                    client().prepareIndex(""test"", ""type"").setSource(""auto"", true).get();\n                    numAutoGenDocs.incrementAndGet();\n                }\n            }\n']",elasticsearch;DEBUG;org;service;root;finished;index;CREATED;elasticsearch;Gen,1.076841726899147e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.876936435699463, -5.649467945098877, -6.4216132164001465, -5.485053539276123, -5.629030704498291, -0.015813423320651054]",0.9843108654022217
3,"['    @TestLogging(\n    public void testRerouteRecovery() throws Exception {\n        logger.info(""--> start node A"");\n        final String nodeA = internalCluster().startNode();\n\n        logger.info(""--> create index on node: {}"", nodeA);\n        ByteSizeValue shardSize = createAndPopulateIndex(INDEX_NAME, 1, SHARD_COUNT, REPLICA_COUNT).getShards()[0].getStats().getStore().size();\n\n        logger.info(""--> start node B"");\n        final String nodeB = internalCluster().startNode();\n\n        ensureGreen();\n\n        logger.info(""--> slowing down recoveries"");\n        slowDownRecovery(shardSize);\n\n        logger.info(""--> move shard from: {} to: {}"", nodeA, nodeB);\n        client().admin().cluster().prepareReroute()\n                .add(new MoveAllocationCommand(INDEX_NAME, 0, nodeA, nodeB))\n                .execute().actionGet().getState();\n\n        logger.info(""--> waiting for recovery to start both on source and target"");\n        final Index index = resolveIndex(INDEX_NAME);\n        assertBusy(() -> {\n            IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodeA);\n            assertThat(indicesService.indexServiceSafe(index).getShard(0).recoveryStats().currentAsSource(),\n                    equalTo(1));\n            indicesService = internalCluster().getInstance(IndicesService.class, nodeB);\n            assertThat(indicesService.indexServiceSafe(index).getShard(0).recoveryStats().currentAsTarget(),\n                    equalTo(1));\n        });\n\n        logger.info(""--> request recoveries"");\n        RecoveryResponse response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();\n\n        List<RecoveryState> recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);\n        List<RecoveryState> nodeARecoveryStates = findRecoveriesForTargetNode(nodeA, recoveryStates);\n        assertThat(nodeARecoveryStates.size(), equalTo(1));\n        List<RecoveryState> nodeBRecoveryStates = findRecoveriesForTargetNode(nodeB, recoveryStates);\n        assertThat(nodeBRecoveryStates.size(), equalTo(1));\n\n        assertRecoveryState(nodeARecoveryStates.get(0), 0, RecoverySource.EmptyStoreRecoverySource.INSTANCE, true, Stage.DONE, null, nodeA);\n        validateIndexRecoveryState(nodeARecoveryStates.get(0).getIndex());\n\n        assertOnGoingRecoveryState(nodeBRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, nodeA, nodeB);\n        validateIndexRecoveryState(nodeBRecoveryStates.get(0).getIndex());\n\n        logger.info(""--> request node recovery stats"");\n        NodesStatsResponse statsResponse = client().admin().cluster().prepareNodesStats().clear().setIndices(new CommonStatsFlags(CommonStatsFlags.Flag.Recovery)).get();\n        long nodeAThrottling = Long.MAX_VALUE;\n        long nodeBThrottling = Long.MAX_VALUE;\n        for (NodeStats nodeStats : statsResponse.getNodes()) {\n            final RecoveryStats recoveryStats = nodeStats.getIndices().getRecoveryStats();\n            if (nodeStats.getNode().getName().equals(nodeA)) {\n                assertThat(""node A should have ongoing recovery as source"", recoveryStats.currentAsSource(), equalTo(1));\n                assertThat(""node A should not have ongoing recovery as target"", recoveryStats.currentAsTarget(), equalTo(0));\n                nodeAThrottling = recoveryStats.throttleTime().millis();\n            }\n            if (nodeStats.getNode().getName().equals(nodeB)) {\n                assertThat(""node B should not have ongoing recovery as source"", recoveryStats.currentAsSource(), equalTo(0));\n                assertThat(""node B should have ongoing recovery as target"", recoveryStats.currentAsTarget(), equalTo(1));\n                nodeBThrottling = recoveryStats.throttleTime().millis();\n            }\n        }\n\n        logger.info(""--> checking throttling increases"");\n        final long finalNodeAThrottling = nodeAThrottling;\n        final long finalNodeBThrottling = nodeBThrottling;\n        assertBusy(() -> {\n            NodesStatsResponse statsResponse1 = client().admin().cluster().prepareNodesStats().clear().setIndices(new CommonStatsFlags(CommonStatsFlags.Flag.Recovery)).get();\n            assertThat(statsResponse1.getNodes(), hasSize(2));\n            for (NodeStats nodeStats : statsResponse1.getNodes()) {\n                final RecoveryStats recoveryStats = nodeStats.getIndices().getRecoveryStats();\n                if (nodeStats.getNode().getName().equals(nodeA)) {\n                    assertThat(""node A throttling should increase"", recoveryStats.throttleTime().millis(), greaterThan(finalNodeAThrottling));\n                }\n                if (nodeStats.getNode().getName().equals(nodeB)) {\n                    assertThat(""node B throttling should increase"", recoveryStats.throttleTime().millis(), greaterThan(finalNodeBThrottling));\n                }\n            }\n        });\n\n\n        logger.info(""--> speeding up recoveries"");\n        restoreRecoverySpeed();\n\n        // wait for it to be finished\n        ensureGreen();\n\n        response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();\n\n        recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);\n        assertThat(recoveryStates.size(), equalTo(1));\n\n        assertRecoveryState(recoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, Stage.DONE, nodeA, nodeB);\n        validateIndexRecoveryState(recoveryStates.get(0).getIndex());\n        Consumer<String> assertNodeHasThrottleTimeAndNoRecoveries = nodeName ->  {\n            NodesStatsResponse nodesStatsResponse = client().admin().cluster().prepareNodesStats().setNodesIds(nodeName)\n                .clear().setIndices(new CommonStatsFlags(CommonStatsFlags.Flag.Recovery)).get();\n            assertThat(nodesStatsResponse.getNodes(), hasSize(1));\n            NodeStats nodeStats = nodesStatsResponse.getNodes().get(0);\n            final RecoveryStats recoveryStats = nodeStats.getIndices().getRecoveryStats();\n            assertThat(recoveryStats.currentAsSource(), equalTo(0));\n            assertThat(recoveryStats.currentAsTarget(), equalTo(0));\n            assertThat(nodeName + "" throttling should be >0"", recoveryStats.throttleTime().millis(), greaterThan(0L));\n        };\n        // we have to use assertBusy as recovery counters are decremented only when the last reference to the RecoveryTarget\n        // is decremented, which may happen after the recovery was done.\n        assertBusy(() -> assertNodeHasThrottleTimeAndNoRecoveries.accept(nodeA));\n        assertBusy(() -> assertNodeHasThrottleTimeAndNoRecoveries.accept(nodeB));\n\n        logger.info(""--> bump replica count"");\n        client().admin().indices().prepareUpdateSettings(INDEX_NAME)\n                .setSettings(Settings.builder().put(""number_of_replicas"", 1)).execute().actionGet();\n        ensureGreen();\n\n        assertBusy(() -> assertNodeHasThrottleTimeAndNoRecoveries.accept(nodeA));\n        assertBusy(() -> assertNodeHasThrottleTimeAndNoRecoveries.accept(nodeB));\n\n        logger.info(""--> start node C"");\n        String nodeC = internalCluster().startNode();\n        assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(""3"").get().isTimedOut());\n\n        logger.info(""--> slowing down recoveries"");\n        slowDownRecovery(shardSize);\n\n        logger.info(""--> move replica shard from: {} to: {}"", nodeA, nodeC);\n        client().admin().cluster().prepareReroute()\n                .add(new MoveAllocationCommand(INDEX_NAME, 0, nodeA, nodeC))\n                .execute().actionGet().getState();\n\n        response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();\n        recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);\n\n        nodeARecoveryStates = findRecoveriesForTargetNode(nodeA, recoveryStates);\n        assertThat(nodeARecoveryStates.size(), equalTo(1));\n        nodeBRecoveryStates = findRecoveriesForTargetNode(nodeB, recoveryStates);\n        assertThat(nodeBRecoveryStates.size(), equalTo(1));\n        List<RecoveryState> nodeCRecoveryStates = findRecoveriesForTargetNode(nodeC, recoveryStates);\n        assertThat(nodeCRecoveryStates.size(), equalTo(1));\n\n        assertRecoveryState(nodeARecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, false, Stage.DONE, nodeB, nodeA);\n        validateIndexRecoveryState(nodeARecoveryStates.get(0).getIndex());\n\n        assertRecoveryState(nodeBRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, Stage.DONE, nodeA, nodeB);\n        validateIndexRecoveryState(nodeBRecoveryStates.get(0).getIndex());\n\n        // relocations of replicas are marked as REPLICA and the source node is the node holding the primary (B)\n        assertOnGoingRecoveryState(nodeCRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, false, nodeB, nodeC);\n        validateIndexRecoveryState(nodeCRecoveryStates.get(0).getIndex());\n\n        if (randomBoolean()) {\n            // shutdown node with relocation source of replica shard and check if recovery continues\n            internalCluster().stopRandomNode(InternalTestCluster.nameFilter(nodeA));\n            ensureStableCluster(2);\n\n            response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();\n            recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);\n\n            nodeARecoveryStates = findRecoveriesForTargetNode(nodeA, recoveryStates);\n            assertThat(nodeARecoveryStates.size(), equalTo(0));\n            nodeBRecoveryStates = findRecoveriesForTargetNode(nodeB, recoveryStates);\n            assertThat(nodeBRecoveryStates.size(), equalTo(1));\n            nodeCRecoveryStates = findRecoveriesForTargetNode(nodeC, recoveryStates);\n            assertThat(nodeCRecoveryStates.size(), equalTo(1));\n\n            assertRecoveryState(nodeBRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, Stage.DONE, nodeA, nodeB);\n            validateIndexRecoveryState(nodeBRecoveryStates.get(0).getIndex());\n\n            assertOnGoingRecoveryState(nodeCRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, false, nodeB, nodeC);\n            validateIndexRecoveryState(nodeCRecoveryStates.get(0).getIndex());\n        }\n\n        logger.info(""--> speeding up recoveries"");\n        restoreRecoverySpeed();\n        ensureGreen();\n\n        response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();\n        recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);\n\n        nodeARecoveryStates = findRecoveriesForTargetNode(nodeA, recoveryStates);\n        assertThat(nodeARecoveryStates.size(), equalTo(0));\n        nodeBRecoveryStates = findRecoveriesForTargetNode(nodeB, recoveryStates);\n        assertThat(nodeBRecoveryStates.size(), equalTo(1));\n        nodeCRecoveryStates = findRecoveriesForTargetNode(nodeC, recoveryStates);\n        assertThat(nodeCRecoveryStates.size(), equalTo(1));\n\n        assertRecoveryState(nodeBRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, Stage.DONE, nodeA, nodeB);\n        validateIndexRecoveryState(nodeBRecoveryStates.get(0).getIndex());\n\n        // relocations of replicas are marked as REPLICA and the source node is the node holding the primary (B)\n        assertRecoveryState(nodeCRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, false, Stage.DONE, nodeB, nodeC);\n        validateIndexRecoveryState(nodeCRecoveryStates.get(0).getIndex());\n    }\n']",current;recovery;Source;Cluster;Recovery;Shards;Logging;Byte;equal;node,8.731149137020111e-10;8.149072527885437e-10;5.820766091346741e-10;4.1109160520136356e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.872862339019775, -5.658339023590088, -6.375391483306885, -5.429049015045166, -5.603940963745117, -0.016207251697778702]",0.9839233756065369
3,"['    @TestLogging(""_root:DEBUG,org.elasticsearch.indices.recovery:TRACE"")\n    public void testDisconnectsDuringRecovery() throws Exception {\n        boolean primaryRelocation = randomBoolean();\n        final String indexName = ""test"";\n        final Settings nodeSettings = Settings.builder()\n            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), TimeValue.timeValueMillis(randomIntBetween(0, 100)))\n            .build();\n        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100));\n        // start a master node\n        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings);\n\n        final String blueNodeName = internalCluster().startNode(Settings.builder().put(""node.attr.color"", ""blue"").put(nodeSettings).build());\n        final String redNodeName = internalCluster().startNode(Settings.builder().put(""node.attr.color"", ""red"").put(nodeSettings).build());\n\n        client().admin().indices().prepareCreate(indexName)\n            .setSettings(\n                Settings.builder()\n                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + ""color"", ""blue"")\n                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)\n                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)\n            ).get();\n\n        List<IndexRequestBuilder> requests = new ArrayList<>();\n        int numDocs = scaledRandomIntBetween(25, 250);\n        for (int i = 0; i < numDocs; i++) {\n            requests.add(client().prepareIndex(indexName, ""type"").setSource(""{}"", XContentType.JSON));\n        }\n        indexRandom(true, requests);\n        ensureSearchable(indexName);\n        assertHitCount(client().prepareSearch(indexName).get(), numDocs);\n\n        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName);\n        MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName);\n        MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName);\n\n        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {\n            private final AtomicInteger count = new AtomicInteger();\n\n            @Override\n            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,\n                                    TransportRequestOptions options) throws IOException {\n                logger.info(""--> sending request {} on {}"", action, connection.getNode());\n                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {\n                    // ensures that it\'s considered as valid recovery attempt by source\n                    try {\n                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()\n                            .getState().getRoutingTable().index(""test"").shard(0).getAllInitializingShards().isEmpty() == false);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    connection.sendRequest(requestId, action, request, options);\n                    try {\n                        Thread.sleep(disconnectAfterDelay.millis());\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    throw new ConnectTransportException(connection.getNode(), ""DISCONNECT: simulation disconnect after successfully sending "" + action + "" request"");\n                } else {\n                    connection.sendRequest(requestId, action, request, options);\n                }\n            }\n']",root;prepare;Disconnect;indices;Meta;RECOVER;Meta;blue;Delay;Relocation,1.2514647096395493e-09;1.076841726899147e-09;9.604264050722122e-10;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10,5,5,"[-5.879280090332031, -5.63400936126709, -6.4445085525512695, -5.5400214195251465, -5.641081809997559, -0.015556182712316513]",0.9845643043518066
3,"['@TestLogging(""_root:DEBUG"")\n    public void testAssignmentWithJustAddedNodes() throws Exception {\n        internalCluster().startNode();\n        final String index = ""index"";\n        prepareCreate(index).setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)\n            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)).get();\n        ensureGreen(index);\n\n        // close to have some unassigned started shards shards..\n        client().admin().indices().prepareClose(index).get();\n\n\n        final String masterName = internalCluster().getMasterName();\n        final ClusterService clusterService = internalCluster().clusterService(masterName);\n        final AllocationService allocationService = internalCluster().getInstance(AllocationService.class, masterName);\n        clusterService.submitStateUpdateTask(""test-inject-node-and-reroute"", new ClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // inject a node\n                ClusterState.Builder builder = ClusterState.builder(currentState);\n                builder.nodes(DiscoveryNodes.builder(currentState.nodes()).add(new DiscoveryNode(""_non_existent"",\n                        buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT)));\n\n                // open index\n                final IndexMetaData indexMetaData = IndexMetaData.builder(currentState.metaData().index(index)).state(IndexMetaData.State.OPEN).build();\n\n                builder.metaData(MetaData.builder(currentState.metaData()).put(indexMetaData, true));\n                builder.blocks(ClusterBlocks.builder().blocks(currentState.blocks()).removeIndexBlocks(index));\n                ClusterState updatedState = builder.build();\n\n                RoutingTable.Builder routingTable = RoutingTable.builder(updatedState.routingTable());\n                routingTable.addAsRecovery(updatedState.metaData().index(index));\n                updatedState = ClusterState.builder(updatedState).routingTable(routingTable.build()).build();\n\n                return allocationService.reroute(updatedState, ""reroute"");\n\n            }\n']",Logging;Fake;root;execute;Meta;Service;internal;set;internal;empty,2.3283064365386963e-09;1.8044374883174896e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.921304225921631, -5.607909679412842, -6.602616310119629, -5.675152778625488, -5.739833831787109, -0.014456650242209435]",0.9856473207473755
3,"['@TestLogging(""org.elasticsearch.index.reindex:TRACE,org.elasticsearch.action.bulk:TRACE,org.elasticsearch.search.SearchService:TRACE"")\n    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(""test"", ""test"", ""1"").setSource(""foo"", ""a""),\n                client().prepareIndex(""test"", ""test"", ""2"").setSource(""foo"", ""a""),\n                client().prepareIndex(""test"", ""test"", ""3"").setSource(""foo"", ""b""),\n                client().prepareIndex(""test"", ""test"", ""4"").setSource(""foo"", ""c""));\n        assertHitCount(client().prepareSearch(""test"").setTypes(""test"").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());\n        assertEquals(1, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());\n\n        // Reindex all the docs\n        assertThat(updateByQuery().source(""test"").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());\n        assertEquals(2, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());\n\n        // Now none of them\n        assertThat(updateByQuery().source(""test"").filter(termQuery(""foo"", ""no_match"")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());\n        assertEquals(2, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());\n\n        // Now half of them\n        assertThat(updateByQuery().source(""test"").filter(termQuery(""foo"", ""a"")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());\n        assertEquals(3, client().prepareGet(""test"", ""test"", ""2"").get().getVersion());\n        assertEquals(2, client().prepareGet(""test"", ""test"", ""3"").get().getVersion());\n        assertEquals(2, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());\n\n        // Limit with size\n        UpdateByQueryRequestBuilder request = updateByQuery().source(""test"").size(3).refresh(true);\n        request.source().addSort(""foo.keyword"", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        // Only the first three documents are updated because of sort\n        assertEquals(4, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());\n        assertEquals(4, client().prepareGet(""test"", ""test"", ""2"").get().getVersion());\n        assertEquals(3, client().prepareGet(""test"", ""test"", ""3"").get().getVersion());\n        assertEquals(2, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());\n    }\n']",Logging;TRACE;org;term;prepare;Search;search;action;client;matcher,5.587935447692871e-09;1.979060471057892e-09;1.280568540096283e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-6.014667510986328, -5.741175651550293, -6.743165969848633, -5.635653495788574, -5.79376745223999, -0.01353856734931469]",0.9865526556968689
3,"['@TestLogging(""_root:DEBUG"")\n    public void testFailuresCauseAbortDefault() throws Exception {\n        /*\n         * Create the destination index such that the copy will cause a mapping\n         * conflict on every request.\n         */\n        indexRandom(true,\n                client().prepareIndex(""dest"", ""test"", ""test"").setSource(""test"", 10) /* Its a string in the source! */);\n\n        indexDocs(100);\n\n        ReindexRequestBuilder copy = reindex().source(""source"").destination(""dest"");\n        /*\n         * Set the search size to something very small to cause there to be\n         * multiple batches for this request so we can assert that we abort on\n         * the first batch.\n         */\n        copy.source().setSize(1);\n\n        BulkByScrollResponse response = copy.get();\n        assertThat(response, matcher()\n                .batches(1)\n                .failures(both(greaterThan(0)).and(lessThanOrEqualTo(maximumNumberOfShards()))));\n        for (Failure failure: response.getBulkFailures()) {\n            assertThat(failure.getMessage(), containsString(""IllegalArgumentException[For input string: \\""words words\\""]""));\n        }\n    }\n']",Default;mapping;search;the;get;reindex;ulk;Scroll;Request;batch,9.313225746154785e-10;8.149072527885437e-10;5.529727786779404e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.945489406585693, -5.68277645111084, -6.57735013961792, -5.634973049163818, -5.721142768859863, -0.014362647198140621]",0.9857400059700012
3,"['@TestLogging(""org.elasticsearch.index.reindex:DEBUG,org.elasticsearch.action.bulk:DEBUG"")\n    public void clearAllowedOperations() {\n        ALLOWED_OPERATIONS.drainPermits();\n    }\n']",ulk;action;index;Permits;reindex;clear;org;org;rain;Allowed,2.7939677238464355e-09;1.862645149230957e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;0.0;-1.7462298274040222e-10,5,5,"[-6.0414509773254395, -6.0464653968811035, -6.591747283935547, -5.638643741607666, -5.456911087036133, -0.014038504101336002]",0.9860596060752869
3,"['  @Test\n  public void testUsesCorrectClassLoaderWhenThreadClassLoaderIsNull() throws ClassNotFoundException {\n\tThread.currentThread().setContextClassLoader(null);\n\tTypeFactory spySut = spy(mapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader));\n\tClass<?> clazz = spySut.findClass(aClassName);\n\tverify(spySut).getClassLoader();\n\tverify(spySut).classForName(any(String.class), any(Boolean.class), eq(classLoader));\n\tAssert.assertNotNull(clazz);\n\tAssert.assertEquals(classLoader, spySut.getClassLoader());\n\tAssert.assertEquals(typeModifier,spySut._modifiers[0]);\n\tAssert.assertEquals(null, Thread.currentThread().getContextClassLoader());\n  }\n']",Modifier;modifiers;Loader;spy;Loader;Correct;Class;Found;Loader;find,7.8580342233181e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.7952880859375, -5.676865577697754, -6.269628524780273, -5.371221542358398, -5.474360942840576, -0.0173500869423151]",0.9827995300292969
3,"['  @Test\npublic void testUsesCorrectClassLoaderWhenThreadClassLoaderIsNotNull() throws ClassNotFoundException {\n\tTypeFactory spySut = spy(mapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader));\n\tClass<?> clazz = spySut.findClass(aClassName);\n\tverify(spySut).getClassLoader();\n\tverify(spySut).classForName(any(String.class), any(Boolean.class), eq(classLoader));\n\tAssert.assertNotNull(clazz);\n\tAssert.assertEquals(classLoader, spySut.getClassLoader());\n\tAssert.assertEquals(typeModifier,spySut._modifiers[0]);\n}\n']",apper;with;Not;modifiers;Loader;Exception;Loader;Class;Class;Class,3.026798367500305e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.9110870361328125, -5.869395732879639, -6.694103240966797, -5.7184834480285645, -5.530255317687988, -0.014120901003479958]",0.9859783053398132
3,"['@Test\npublic void testCallingOnlyWithModifierGivesExpectedResults(){\n\tTypeFactory sut = mapper.getTypeFactory().withModifier(typeModifier);\n\tAssert.assertNull(sut.getClassLoader());\n\tAssert.assertEquals(typeModifier,sut._modifiers[0]);\n}\n']",Calling;Class;Assert;Modifier;ut;Modifier;with;Results;Modifier;modifiers,5.122274160385132e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10,5,5,"[-5.970937728881836, -6.17415189743042, -6.645049571990967, -5.455953121185303, -4.193107604980469, -0.025630587711930275]",0.974695086479187
3,"['@Test\npublic void testCallingOnlyWithClassLoaderGivesExpectedResults(){\n\tTypeFactory sut = mapper.getTypeFactory().withClassLoader(classLoader);\n\tAssert.assertNotNull(sut.getClassLoader());\n\tAssert.assertArrayEquals(null,sut._modifiers);\n}\n']",Equals;Results;Expected;Class;Class;ut;Only;Loader;Loader;Array,1.979060471057892e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2223608791828156e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-6.0304718017578125, -6.14132833480835, -6.699122428894043, -5.551761627197266, -4.875781059265137, -0.017449548467993736]",0.98270183801651
3,"['@Test\npublic void testDefaultTypeFactoryNotAffectedByWithConstructors() {\n\tTypeFactory sut = mapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader);\n\tAssert.assertEquals(classLoader, sut.getClassLoader());\n\tAssert.assertEquals(typeModifier,sut._modifiers[0]);\n\tAssert.assertNull(mapper.getTypeFactory().getClassLoader());\n\tAssert.assertArrayEquals(null,mapper.getTypeFactory()._modifiers);\n}\n']",ffected;modifiers;Loader;Array;Class;Equals;Modifier;Constructors;class;apper,6.51925802230835e-09;6.05359673500061e-09;6.05359673500061e-09;5.820766091346741e-09;5.587935447692871e-09;5.005858838558197e-09;4.889443516731262e-09;4.6566128730773926e-09;4.190951585769653e-09;3.958120942115784e-09,0,5,"[-0.11204914003610611, -4.891252040863037, -5.90554141998291, -4.05922794342041, -2.6129798889160156, -5.261937618255615]",0.8940004110336304
3,['@Test\npublic void testSetsTheCorrectClassLoderIfUsingWithModifierFollowedByWithClassLoader() {\n\tTypeFactory sut = mapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader);\n\tAssert.assertNotNull(sut.getClassLoader());\n}\n'],Class;The;Class;Using;Type;Modifier;ut;get;type;Class,2.0954757928848267e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.993557453155518, -6.119332790374756, -6.696850299835205, -5.609321117401123, -4.872418403625488, -0.01739823818206787]",0.9827521443367004
3,['@Test\npublic void testSetsTheCorrectClassLoderIfUsingWithClassLoaderFollowedByWithModifier() {\n\tTypeFactory sut = mapper.getTypeFactory().withClassLoader(classLoader).withModifier(typeModifier);\n\tAssert.assertNotNull(sut.getClassLoader());\n}\n'],By;ut;apper;Using;Modifier;Modifier;class;with;Loader;Class,1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.994801998138428, -6.125433444976807, -6.702099800109863, -5.606723308563232, -4.8940863609313965, -0.017217805609107018]",0.9829295873641968
3,"['@Test\npublic void testThreadContextClassLoaderIsUsedIfNotUsingWithClassLoader() throws ClassNotFoundException {\n\tTypeFactory spySut = spy(mapper.getTypeFactory());\n\tAssert.assertNull(spySut.getClassLoader());\n\tClass<?> clazz = spySut.findClass(aClassName);\n\tAssert.assertNotNull(clazz);\n\tverify(spySut).classForName(any(String.class), any(Boolean.class), eq(threadClassLoader));\n}\n']",any;spy;Boolean;any;Not;Loader;find;get;Assert;Loader,4.6566128730773926e-09;3.725290298461914e-09;3.725290298461914e-09;3.259629011154175e-09;3.026798367500305e-09;2.9103830456733704e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09,5,5,"[-5.932616710662842, -6.147826671600342, -6.668915271759033, -5.456882476806641, -4.399188041687012, -0.022873254492878914]",0.9773863554000854
3,"['@Test\npublic void testUsesFallBackClassLoaderIfNoThreadClassLoaderAndNoWithClassLoader() throws ClassNotFoundException {\n\tThread.currentThread().setContextClassLoader(null);\n\tTypeFactory spySut = spy(mapper.getTypeFactory());\n\tAssert.assertNull(spySut.getClassLoader());\n\tAssert.assertArrayEquals(null,spySut._modifiers);\n\tClass<?> clazz = spySut.findClass(aClassName);\n\tAssert.assertNotNull(clazz);\n\tverify(spySut).classForName(any(String.class));\n}\n']",Thread;modifiers;Class;Loader;For;Equals;Assert;Uses;get;Class,9.313225746154785e-09;6.984919309616089e-09;4.0745362639427185e-09;3.725290298461914e-09;3.725290298461914e-09;3.026798367500305e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09,5,5,"[-5.857868194580078, -6.068033218383789, -6.702000617980957, -5.678277969360352, -4.482443809509277, -0.021352997049689293]",0.9788733720779419
3,"['    @Test\n    public void testImmutablesSimpleDeserialization() throws IOException {\n        Account expected = ImmutableAccount.builder()\n                .id(1L)\n                .name(""foo"")\n                .build();\n        Account actual = MAPPER.readValue(""{\\""id\\"": 1,\\""name\\"":\\""foo\\""}"", Account.class);\n        assertEquals(expected, actual);\n    }\n']",Deserialization;expected;actual;expected;foo;MAPPER;name;builder;actual;Equals,6.111804395914078e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.0186340659856796e-10;5.820766091346741e-11;2.9103830456733704e-11;2.9103830456733704e-11,5,5,"[-5.855690002441406, -5.713162899017334, -6.276859760284424, -5.347708702087402, -5.437644004821777, -0.017302636057138443]",0.982846200466156
3,"['    @Test\n    public void testImmutablesSimpleRoundTrip() throws IOException {\n        Account original = ImmutableAccount.builder()\n                .id(1L)\n                .name(""foo"")\n                .build();\n        String json = MAPPER.writeValueAsString(original);\n        Account deserialized = MAPPER.readValue(json, Account.class);\n        assertEquals(original, deserialized);\n    }\n']",Immutables;id;Account;MAPPER;Account;deserialized;read;build;Account;original,8.149072527885437e-10;4.656612873077393e-10;3.2014213502407074e-10;2.546585164964199e-10;2.3283064365386963e-10;2.1100277081131935e-10;1.1641532182693481e-10;1.0186340659856796e-10;4.3655745685100555e-11;4.3655745685100555e-11,5,5,"[-5.861257076263428, -5.700732231140137, -6.285472869873047, -5.341784477233887, -5.446091175079346, -0.017303690314292908]",0.9828451871871948
3,"['    @Test\n    public void testImmutablesSimpleGenericDeserialization() throws IOException {\n        Key<Account> expected = ImmutableKey.<Account>builder()\n                .id(ImmutableAccount.builder()\n                        .id(1L)\n                        .name(""foo"")\n                        .build())\n                .build();\n        Key<Account> actual = MAPPER.readValue(\n                ""{\\""id\\"":{\\""id\\"": 1,\\""name\\"":\\""foo\\""}}"",\n                new TypeReference<Key<Account>>() {});\n        assertEquals(expected, actual);\n    }\n']",Immutables;foo;expected;IOException;Account;expected;Account;Reference;Account;actual,1.4260876923799515e-09;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.835940361022949, -5.675246238708496, -6.237643241882324, -5.291712760925293, -5.446347236633301, -0.017807722091674805]",0.9823498725891113
3,"['    @Test\n    public void testImmutablesSimpleGenericRoundTrip() throws IOException {\n        Key<Account> original = ImmutableKey.<Account>builder()\n                .id(ImmutableAccount.builder()\n                        .id(1L)\n                        .name(""foo"")\n                        .build())\n                .build();\n        String json = MAPPER.writeValueAsString(original);\n        Key<Account> deserialized = MAPPER.readValue(json, new TypeReference<Key<Account>>() {});\n        assertEquals(original, deserialized);\n    }\n']",deserialized;build;json;rip;Account;Immutables;Account;json;Account;Key,2.2118911147117615e-09;1.1641532182693481e-09;1.1059455573558807e-09;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.849253177642822, -5.684519290924072, -6.2603230476379395, -5.305439472198486, -5.454496383666992, -0.017586134374141693]",0.9825676083564758
3,"['    @Test\n    public void testImmutablesMultipleTypeParametersDeserialization() throws IOException {\n        Entry<Key<Account>, Account> expected = ImmutableEntry.<Key<Account>, Account>builder()\n                .key(ImmutableKey.<Account>builder()\n                        .id(ImmutableAccount.builder()\n                                .id(1L)\n                                .name(""foo"")\n                                .build())\n                        .build())\n                .value(ImmutableAccount.builder()\n                        .id(2L)\n                        .name(""bar"")\n                        .build())\n                .build();\n        Entry<Key<Account>, Account> actual = MAPPER.readValue(\n                ""{\\""key\\"":{\\""id\\"":{\\""id\\"": 1,\\""name\\"":\\""foo\\""}},\\""value\\"":{\\""id\\"":2,\\""name\\"":\\""bar\\""}}"",\n                new TypeReference<Entry<Key<Account>, Account>>() {});\n        assertEquals(expected, actual);\n    }\n']",Immutables;Equals;new;MAPPER;Parameters;Key;Entry;Reference;id;actual,3.725290298461914e-09;8.149072527885437e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.843777179718018, -5.671360015869141, -6.262613296508789, -5.271181583404541, -5.477801322937012, -0.017719419673085213]",0.9824366569519043
3,"['    @Test\n    public void testImmutablesMultipleTypeParametersRoundTrip() throws IOException {\n        Entry<Key<Account>, Account> original = ImmutableEntry.<Key<Account>, Account>builder()\n                .key(ImmutableKey.<Account>builder()\n                        .id(ImmutableAccount.builder()\n                                .id(1L)\n                                .name(""foo"")\n                                .build())\n                        .build())\n                .value(ImmutableAccount.builder()\n                        .id(2L)\n                        .name(""bar"")\n                        .build())\n                .build();\n        String json = MAPPER.writeValueAsString(original);\n        Entry<Key<Account>, Account> deserialized = MAPPER.readValue(\n                json, new TypeReference<Entry<Key<Account>, Account>>() {});\n        assertEquals(original, deserialized);\n    }\n']",Account;new;builder;Round;json;Reference;As;id;Account;Account,6.548361852765083e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.837946891784668, -5.660541534423828, -6.251381874084473, -5.261307716369629, -5.469511985778809, -0.017884070053696632]",0.9822748899459839
3,"['    @Test\n    public void testValueOfStringWithValueType() throws IOException {\n        when(objectReader.readValue((String) any())).thenReturn(pojo);\n        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);\n        when(objectReader.readValue((String) any(), (Class<?>) any())).thenCallRealMethod();\n\n        String source = """";\n        POJO result = objectReader.readValue(source, POJO.class);\n\n        assertEquals(result, pojo);\n        verify(objectReader).forType(POJO.class);\n        verify(objectReader).readValue(source);\n    }\n']",Value;Type;source;when;Value;Real;POJO;class;pojo;read,5.311449058353901e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.2369127944111824e-10,5,5,"[-5.849681377410889, -5.721663951873779, -6.275399684906006, -5.321819305419922, -5.454280853271484, -0.01734856329858303]",0.982801079750061
3,"['    @Test\n    public void testValueOfByteArrayWithValueType() throws IOException {\n        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);\n        when(objectReader.readValue((byte[]) any())).thenReturn(pojo);\n        when(objectReader.readValue((byte[]) any(), (Class<?>) any())).thenCallRealMethod();\n\n        byte[] source = ""{}"".getBytes();\n        POJO result = objectReader.readValue(source, POJO.class);\n\n        assertEquals(result, pojo);\n        verify(objectReader).forType(POJO.class);\n        verify(objectReader).readValue(source);\n    }\n']",Byte;Value;IOException;pojo;Type;Type;source;POJO;Type;Reader,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.852987766265869, -5.71678352355957, -6.2748332023620605, -5.320444583892822, -5.459578990936279, -0.017340127378702164]",0.9828093647956848
3,"['    @Test\n    public void testValueOfDataInputWithValueType() throws IOException {\n        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);\n        when(objectReader.readValue((DataInput) any())).thenReturn(pojo);\n        when(objectReader.readValue((DataInput) any(), (Class<?>) any())).thenCallRealMethod();\n\n        DataInput source = new DataInputStream(new ByteArrayInputStream(""{}"".getBytes()));\n        POJO result = objectReader.readValue(source, POJO.class);\n\n        assertEquals(result, pojo);\n        verify(objectReader).forType(POJO.class);\n        verify(objectReader).readValue(source);\n    }\n']",Type;Value;Input;verify;Equals;Stream;pojo;Stream;result;class,4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.5279510989785194e-10,5,5,"[-5.845360279083252, -5.707653522491455, -6.267672061920166, -5.3194403648376465, -5.456089496612549, -0.017427057027816772]",0.9827238917350769
3,"['    @Test\n    public void testValueOfFileWithValueType() throws IOException {\n        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);\n        when(objectReader.readValue((File) any())).thenReturn(pojo);\n        when(objectReader.readValue((File) any(), (Class<?>) any())).thenCallRealMethod();\n\n        File source = new File(""unknownpath"");\n        POJO result = objectReader.readValue(source, POJO.class);\n\n        assertEquals(result, pojo);\n        verify(objectReader).forType(POJO.class);\n        verify(objectReader).readValue(source);\n    }\n']",verify;POJO;Type;POJO;read;any;Reader;when;result;Value,7.450580596923828e-09;2.9103830456733704e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.854031085968018, -5.713223457336426, -6.280181407928467, -5.334634780883789, -5.461625576019287, -0.0172598697245121]",0.9828883409500122
3,"['    @Test\n    public void testValueOfInputStreamWithValueType() throws IOException {\n        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);\n        when(objectReader.readValue((InputStream) any())).thenReturn(pojo);\n        when(objectReader.readValue((InputStream) any(), (Class<?>) any())).thenCallRealMethod();\n\n        InputStream source = new ByteArrayInputStream(""{}"".getBytes());\n        POJO result = objectReader.readValue(source, POJO.class);\n\n        assertEquals(result, pojo);\n        verify(objectReader).forType(POJO.class);\n        verify(objectReader).readValue(source);\n    }\n']",Type;Input;Input;Input;object;object;Stream;Type;Stream;Value,8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;3.637978807091713e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.4010660126805305e-10;2.0372681319713593e-10,5,5,"[-5.8475236892700195, -5.71118688583374, -6.270683288574219, -5.318109512329102, -5.455913066864014, -0.01741030439734459]",0.9827402830123901
3,"['    @Test\n    public void testValueOfJsonNodeWithValueType() throws IOException {\n        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);\n        when(objectReader.readValue((JsonNode) any())).thenReturn(pojo);\n        when(objectReader.readValue((JsonNode) any(), (Class<?>) any())).thenCallRealMethod();\n\n        JsonNode source = new TextNode(""{}"");\n        POJO result = objectReader.readValue(source, POJO.class);\n\n        assertEquals(result, pojo);\n        verify(objectReader).forType(POJO.class);\n        verify(objectReader).readValue(source);\n    }\n']",Value;Node;when;son;Node;Node;Method;any;Class;object,8.149072527885437e-10;6.984919309616089e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.855561256408691, -5.729527473449707, -6.2835283279418945, -5.316329002380371, -5.465569019317627, -0.017268305644392967]",0.9828799366950989
3,"['    @Test\n    public void testValueOfReaderWithValueType() throws IOException {\n        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);\n        when(objectReader.readValue((Reader) any())).thenReturn(pojo);\n        when(objectReader.readValue((Reader) any(), (Class<?>) any())).thenCallRealMethod();\n\n        Reader source = new StringReader(""{}"");\n        POJO result = objectReader.readValue(source, POJO.class);\n\n        assertEquals(result, pojo);\n        verify(objectReader).forType(POJO.class);\n        verify(objectReader).readValue(source);\n    }\n']",Type;POJO;verify;pojo;Type;object;POJO;object;POJO;read,4.656612873077393e-10;3.2014213502407074e-10;3.055902197957039e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.673470251262188e-10;1.4551915228366852e-10,5,5,"[-5.848530292510986, -5.713553428649902, -6.269245147705078, -5.317661762237549, -5.454684257507324, -0.01740971766412258]",0.9827408194541931
3,"['    @Test\n    public void testValueOfURLWithValueType() throws IOException {\n        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);\n        when(objectReader.readValue((URL) any())).thenReturn(pojo);\n        when(objectReader.readValue((URL) any(), (Class<?>) any())).thenCallRealMethod();\n\n        URL source = new URL(""http://www.test.com"");\n        POJO result = objectReader.readValue(source, POJO.class);\n\n        assertEquals(result, pojo);\n        verify(objectReader).forType(POJO.class);\n        verify(objectReader).readValue(source);\n    }\n']",URL;source;Type;URL;URL;Return;source;Value;http;pojo,8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.858042240142822, -5.734696388244629, -6.300680160522461, -5.347062587738037, -5.4709272384643555, -0.01703757420182228]",0.9831068515777588
3,['    @Test\n    public void testDeserializationPresent() throws Exception {\n        checkOrangeBox(BOX_READER_PASS);\n        checkAppleBox(BOX_READER_PASS);\n\n        checkOrangeBox(BOX_READER_FAIL);\n        checkAppleBox(BOX_READER_FAIL);\n    }\n'],Box;Box;READER;Box;BOX;Exception;FAIL;Apple;PASS;READER,5.966285243630409e-10;3.4924596548080444e-10;2.764863893389702e-10;1.7462298274040222e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;4.3655745685100555e-11;0.0;0.0,5,5,"[-5.913047790527344, -5.761892795562744, -6.357061386108398, -5.441931247711182, -5.473974227905273, -0.016240328550338745]",0.9838908314704895
3,"['    @Test\n    public void testDeserializationNull() throws Exception {\n        checkOrangeBoxNull(BOX_READER_PASS, orangeBoxNullJson);\n        checkAppleBoxNull(BOX_READER_PASS, appleBoxNullJson);\n\n        checkOrangeBoxNull(BOX_READER_FAIL, orangeBoxNullJson);\n        checkAppleBoxNull(BOX_READER_FAIL, appleBoxNullJson);\n    }\n']",Orange;BOX;Apple;FAIL;FAIL;Orange;orange;BOX;orange;Box,1.6298145055770874e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.894362926483154, -5.743854522705078, -6.3400444984436035, -5.405659198760986, -5.474916458129883, -0.016539253294467926]",0.9835967421531677
3,"['    @Test\n    public void testDeserializationEmpty() throws Exception {\n        checkOrangeBoxEmpty(BOX_READER_PASS, orangeBoxEmptyJson);\n        checkAppleBoxEmpty(BOX_READER_PASS, appleBoxEmptyJson);\n\n        checkOrangeBoxEmpty(BOX_READER_FAIL, orangeBoxEmptyJson);\n        checkAppleBoxEmpty(BOX_READER_FAIL, appleBoxEmptyJson);\n    }\n']",apple;FAIL;READER;BOX;Box;son;son;apple;check;check,7.566995918750763e-10;6.693881005048752e-10;5.238689482212067e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.89188814163208, -5.750521659851074, -6.344951629638672, -5.401764869689941, -5.472996234893799, -0.01654171571135521]",0.9835942387580872
3,"['    @Test\n    public void testDeserializationMissing() throws Exception {\n        checkOrangeBoxNull(BOX_READER_PASS, orangeBoxMissingJson);\n        checkAppleBoxNull(BOX_READER_PASS, appleBoxMissingJson);\n\n        checkBoxException(BOX_READER_FAIL, orangeBoxMissingJson);\n        checkBoxException(BOX_READER_FAIL, appleBoxMissingJson);\n    }\n']",Null;apple;orange;FAIL;Box;son;READER;Box;Null;Missing,9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.885757923126221, -5.737562656402588, -6.328854084014893, -5.400028228759766, -5.470548629760742, -0.01664864458143711]",0.9834891557693481
3,['    @Test\n    public void testDeserializationPresent() throws Exception {\n        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkOrangeBox(r);\n        checkAppleBox(r);\n\n        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkOrangeBox(r);\n        checkAppleBox(r);\n    }\n'],EXTERNAL;Orange;Present;ID;ISSING;READER;EXTERNAL;Deserialization;Box;Orange,1.1059455573558807e-09;7.712515071034431e-10;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.3283064365386963e-10;1.8189894035458565e-10;1.6007106751203537e-10,5,5,"[-5.864526748657227, -5.725277900695801, -6.292608261108398, -5.366705894470215, -5.461009979248047, -0.0170134324580431]",0.9831304550170898
3,"['    @Test\n    public void testDeserializationNull() throws Exception {\n        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkOrangeBoxNull(r, orangeBoxNullJson);\n        checkAppleBoxNull(r, appleBoxNullJson);\n\n        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkOrangeBoxNull(r, orangeBoxNullJson);\n        checkAppleBoxNull(r, appleBoxNullJson);\n    }\n']",ID;ID;READER;ISSING;READER;TYPE;Deserialization;check;Null;Apple,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.860724449157715, -5.735074043273926, -6.2944488525390625, -5.34739875793457, -5.471368789672852, -0.017036519944667816]",0.9831076860427856
3,"['    @Test\n    public void testDeserializationEmpty() throws Exception {\n        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkOrangeBoxEmpty(r, orangeBoxEmptyJson);\n        checkAppleBoxEmpty(r, appleBoxEmptyJson);\n\n        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkOrangeBoxEmpty(r, orangeBoxEmptyJson);\n        checkAppleBoxEmpty(r, appleBoxEmptyJson);\n    }\n']",Feature;READER;TYPE;Deserialization;Box;Apple;EXTERNAL;check;EXTERNAL;son,5.238689482212067e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.1100277081131935e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.863887310028076, -5.735723972320557, -6.299936771392822, -5.3515706062316895, -5.4722161293029785, -0.016991281881928444]",0.9831522703170776
3,"['    @Test\n    public void testDeserializationMissing() throws Exception {\n        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkOrangeBoxNull(r, orangeBoxMissingJson);\n        checkAppleBoxNull(r, appleBoxMissingJson);\n\n        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkBoxDatabindException(r, orangeBoxMissingJson);\n        checkBoxDatabindException(r, appleBoxMissingJson);\n    }\n']",EXTERNAL;FAIL;TYPE;Feature;ISSING;PROPERTY;Feature;Databind;Exception;Null,1.382431946694851e-09;8.440110832452774e-10;6.984919309616089e-10;6.693881005048752e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.862195014953613, -5.737974166870117, -6.29762077331543, -5.348054885864258, -5.473836421966553, -0.017003236338496208]",0.9831405282020569
3,"['    @Test\n    public void testDeserializationMissingRequired() throws Exception {\n        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkReqBoxDatabindException(r, orangeBoxMissingJson);\n        checkReqBoxDatabindException(r, appleBoxMissingJson);\n\n        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);\n        checkReqBoxDatabindException(r, orangeBoxMissingJson);\n        checkReqBoxDatabindException(r, appleBoxMissingJson);\n    }\n']",PROPERTY;READER;Required;TYPE;Exception;ON;Databind;Feature;Missing;Box,4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.8561482429504395, -5.72661018371582, -6.291639804840088, -5.338221073150635, -5.465048789978027, -0.01715499721467495]",0.9829913973808289
3,['    @Test\n    public void minValueIsAvailable() {\n        assertTrue(SpeedOverGround.isAvailable(0));\n    }\n'],Speed;Available;Available;Value;Over;True;min;Ground,3.725290298461914e-09;2.7939677238464355e-09;1.862645149230957e-09;9.313225746154785e-10;2.3283064365386963e-10;-4.3655745685100555e-10;-1.862645149230957e-09;-3.026798367500305e-09,5,5,"[-5.900434494018555, -5.742882251739502, -6.367687702178955, -5.483574867248535, -5.445702075958252, -0.016260618343949318]",0.9838708639144897
3,['    @Test\n    public void minValueIsCorrect() {\n        assertTrue(SpeedOverGround.isCorrect(0));\n    }\n'],Correct;Value;Over;Speed;Ground;Correct;True;min,1.5832483768463135e-08;1.1175870895385742e-08;6.984919309616089e-09;3.725290298461914e-09;0.0;-9.313225746154785e-10;-1.862645149230957e-09;-3.725290298461914e-09,5,5,"[-5.88243293762207, -5.701789379119873, -6.322052001953125, -5.456941604614258, -5.402064323425293, -0.016839025542140007]",0.9833019375801086
3,['    @Test\n    public void maxValueIsAvailable() {\n        assertTrue(SpeedOverGround.isAvailable(1022));\n    }\n'],Value;Ground;True;Available;max;Available;Speed;Over,5.587935447692871e-09;3.026798367500305e-09;-6.984919309616089e-10;-1.3969838619232178e-09;-1.862645149230957e-09;-1.862645149230957e-09;-1.862645149230957e-09;-2.0954757928848267e-09,5,5,"[-5.885994911193848, -5.706075668334961, -6.322808742523193, -5.459178924560547, -5.407337665557861, -0.01677924208343029]",0.983360767364502
3,['    @Test\n    public void maxValueIsCorrect() {\n        assertTrue(SpeedOverGround.isCorrect(1022));\n    }\n'],Speed;Ground;Correct;max;Correct;True;Over;Value,1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;0.0;0.0;-4.0745362639427185e-10;-6.402842700481415e-10;-9.313225746154785e-10,5,5,"[-5.875250339508057, -5.686695575714111, -6.307888984680176, -5.447659969329834, -5.392017364501953, -0.017023980617523193]",0.9831200838088989
3,['    @Test\n    public void defaultValueIsNotAvailable() {\n        assertFalse(SpeedOverGround.isAvailable(1023));\n    }\n'],Speed;Ground;Not;False;Value;default;Available;Over;Available,9.313225746154785e-10;6.402842700481415e-10;2.9103830456733704e-10;2.9103830456733704e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-7.712515071034431e-10;-9.313225746154785e-10,5,5,"[-5.8788838386535645, -5.691948413848877, -6.3117780685424805, -5.454084873199463, -5.3994293212890625, -0.01692611537873745]",0.9832163453102112
3,['    @Test\n    public void defaultValueIsCorrect() {\n        assertTrue(SpeedOverGround.isCorrect(1023));\n    }\n'],Correct;Correct;Over;Ground;Speed;True;Value;default,1.5133991837501526e-09;6.984919309616089e-10;3.4924596548080444e-10;5.820766091346741e-11;-2.3283064365386963e-10;-4.94765117764473e-10;-6.984919309616089e-10;-1.280568540096283e-09,5,5,"[-5.877913475036621, -5.6914849281311035, -6.312754154205322, -5.450599193572998, -5.393817901611328, -0.016969716176390648]",0.9831734299659729
3,['    @Test\n    public void negativeValueIsNotAvailable() {\n        assertFalse(SpeedOverGround.isAvailable(-1));\n    }\n'],negative;Available;False;Over;Not;Ground;Value;Speed;Available,3.259629011154175e-09;1.280568540096283e-09;1.0477378964424133e-09;2.3283064365386963e-10;-1.1641532182693481e-09;-1.280568540096283e-09;-1.862645149230957e-09;-2.3283064365386963e-09;-2.561137080192566e-09,5,5,"[-5.884225368499756, -5.72806978225708, -6.340320110321045, -5.470242977142334, -5.428457736968994, -0.016536204144358635]",0.9835999011993408
3,['    @Test\n    public void negativeValueIsNotCorrect() {\n        assertFalse(SpeedOverGround.isCorrect(-1));\n    }\n'],Speed;negative;Value;False;Ground;Over;Correct;Correct;Not,1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-1.6298145055770874e-09;-2.7939677238464355e-09,5,5,"[-5.864129543304443, -5.673708915710449, -6.295735836029053, -5.443483829498291, -5.383598327636719, -0.01718112826347351]",0.9829656481742859
3,['    @Test\n    public void largeValueIsNotAvailable() {\n        assertFalse(SpeedOverGround.isAvailable(1100));\n    }\n'],Ground;large;Not;Over;False;Value;Available;Available;Speed,5.820766091346741e-10;4.656612873077393e-10;1.7462298274040222e-10;2.9103830456733704e-11;-5.820766091346741e-11;-3.4924596548080444e-10;-3.4924596548080444e-10;-1.1641532182693481e-09;-1.3969838619232178e-09,5,5,"[-5.880001068115234, -5.698488712310791, -6.318597316741943, -5.461328506469727, -5.400655269622803, -0.01685098186135292]",0.9832901954650879
3,['    @Test\n    public void largeValueIsNotCorrect() {\n        assertFalse(SpeedOverGround.isCorrect(1100));\n    }\n'],Correct;Ground;Not;large;Value;False;Speed;Correct;Over,9.313225746154785e-10;8.149072527885437e-10;2.9103830456733704e-10;0.0;-3.4924596548080444e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-9.89530235528946e-10;-1.3969838619232178e-09,5,5,"[-5.865686416625977, -5.675450325012207, -6.297489643096924, -5.445961952209473, -5.383167266845703, -0.017158396542072296]",0.9829879999160767
3,"['    @Test\n    public void conversionToKnotsWorks() {\n        assertEquals(0.0, SpeedOverGround.toKnots(0), DELTA);\n        assertEquals(0.1, SpeedOverGround.toKnots(1), DELTA);\n        assertEquals(90.9, SpeedOverGround.toKnots(909), DELTA);\n        assertEquals(102.2, SpeedOverGround.toKnots(1022), DELTA);\n    }\n']",DELTA;Equals;Speed;to;Ground;Over;Over;Ground;Equals;to,4.3655745685100555e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.055902197957039e-10;1.8917489796876907e-10;1.0186340659856796e-10;8.731149137020111e-11;2.9103830456733704e-11;7.275957614183426e-12;0.0,5,5,"[-5.848130702972412, -5.678417682647705, -6.275263786315918, -5.363439083099365, -5.429500102996826, -0.017407258972525597]",0.9827433824539185
3,"['    @Test\n    public void conversionReturnsOnInvalidValues() {\n        assertEquals(-10.1, SpeedOverGround.toKnots(-101), DELTA);\n        assertEquals(102.3, SpeedOverGround.toKnots(1023), DELTA);\n        assertEquals(4567.8, SpeedOverGround.toKnots(45678), DELTA);\n    }\n']",Values;conversion;On;Returns;Equals;Equals;Equals;Ground;DELTA;Ground,2.7939677238464355e-09;1.862645149230957e-09;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;-5.820766091346741e-11;-8.731149137020111e-11,5,5,"[-5.855119705200195, -5.688138484954834, -6.279387950897217, -5.370874404907227, -5.417905330657959, -0.017361918464303017]",0.9827879071235657
3,['    @Test\n    public void zeroIsAvailable() {\n        assertTrue(Longitude28.isAvailable(0));\n    }\n'],Available;Longitude;True;Available;zero,8.149072527885437e-10;-5.820766091346741e-11;-4.0745362639427185e-10;-4.656612873077393e-10;-2.2118911147117615e-09,5,5,"[-5.900849342346191, -5.724216461181641, -6.350719928741455, -5.478059768676758, -5.433645725250244, -0.01642726920545101]",0.9837069511413574
3,['    @Test\n    public void zeroIsCorrect() {\n        assertTrue(Longitude28.isCorrect(0));\n    }\n'],zero;True;Correct;Correct;Longitude,6.984919309616089e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-1.4551915228366852e-09;-1.5133991837501526e-09,5,5,"[-5.891573429107666, -5.715590000152588, -6.340377330780029, -5.467776298522949, -5.420352458953857, -0.01660373993217945]",0.9835333228111267
3,['    @Test\n    public void minValueIsAvailable() {\n        assertTrue(Longitude28.isAvailable(-180*60*10000));\n    }\n'],Available;True;min;Value;Available;Longitude,1.3387762010097504e-09;1.2514647096395493e-09;9.313225746154785e-10;2.3283064365386963e-10;-1.1641532182693481e-09;-2.444721758365631e-09,5,5,"[-5.900393486022949, -5.75700044631958, -6.3680291175842285, -5.477065563201904, -5.448962211608887, -0.01622789539396763]",0.983903169631958
3,['    @Test\n    public void minValueIsCorrect() {\n        assertTrue(Longitude28.isCorrect(-180*60*10000));\n    }\n'],min;Longitude;True;Correct;Correct;Value,1.862645149230957e-09;8.731149137020111e-10;4.3655745685100555e-10;1.1641532182693481e-10;0.0;-2.0954757928848267e-09,5,5,"[-5.8989787101745605, -5.753489017486572, -6.355604648590088, -5.465036392211914, -5.437164783477783, -0.016368165612220764]",0.9837650656700134
3,['    @Test\n    public void maxValueIsAvailable() {\n        assertTrue(Longitude28.isAvailable(180*60*10000));\n    }\n'],Value;Longitude;True;Available;max;Available,2.0954757928848267e-09;1.280568540096283e-09;2.3283064365386963e-10;0.0;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-5.889910697937012, -5.739089488983154, -6.337996482849121, -5.461175441741943, -5.429554462432861, -0.016522133722901344]",0.9836136102676392
3,['    @Test\n    public void maxValueIsCorrect() {\n        assertTrue(Longitude28.isCorrect(180*60*10000));\n    }\n'],max;Value;Correct;Longitude;True;Correct,1.4901161193847656e-08;3.725290298461914e-09;1.6298145055770874e-09;6.984919309616089e-10;-4.656612873077393e-10;-7.450580596923828e-09,5,5,"[-5.892011642456055, -5.737125873565674, -6.342106342315674, -5.458906650543213, -5.426608085632324, -0.016538197174668312]",0.9835978150367737
3,['    @Test\n    public void defaultValueIsNotAvailable() {\n        assertFalse(Longitude28.isAvailable(181*60*10000));\n    }\n'],Available;default;Value;Longitude;Not;False;Available,6.984919309616089e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;-8.149072527885437e-10,5,5,"[-5.877652645111084, -5.703000545501709, -6.311702251434326, -5.447886943817139, -5.402667999267578, -0.01690431497991085]",0.9832378625869751
3,['    @Test\n    public void defaultValueIsCorrect() {\n        assertTrue(Longitude28.isCorrect(181*60*10000));\n    }\n'],Correct;Correct;True;default;Longitude;Value,1.0477378964424133e-09;4.656612873077393e-10;1.1641532182693481e-10;-4.656612873077393e-10;-1.0477378964424133e-09;-1.3387762010097504e-09,5,5,"[-5.879698276519775, -5.710464000701904, -6.321396350860596, -5.443783760070801, -5.407573223114014, -0.01685098186135292]",0.9832901954650879
3,['    @Test\n    public void largeNegativeValueIsNotAvailable() {\n        assertFalse(Longitude28.isAvailable(-1-180*60*10000));\n    }\n'],False;Not;Longitude;Available;Available;large;Value;Negative,6.693881005048752e-10;4.656612873077393e-10;2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-1.1641532182693481e-09;-5.471520125865936e-09,5,5,"[-5.861523628234863, -5.71553897857666, -6.311731338500977, -5.443586349487305, -5.421629905700684, -0.016841135919094086]",0.983299970626831
3,['    @Test\n    public void largeNegativeValueIsNotCorrect() {\n        assertFalse(Longitude28.isCorrect(-1-180*60*10000));\n    }\n'],Correct;Correct;Not;large;Value;False;Longitude;Negative,1.3969838619232178e-09;4.656612873077393e-10;3.4924596548080444e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-7.566995918750763e-10;-2.444721758365631e-09,5,5,"[-5.85291862487793, -5.705562591552734, -6.3018903732299805, -5.430190086364746, -5.411077976226807, -0.017024917528033257]",0.9831191897392273
3,['    @Test\n    public void largeValueIsNotAvailable() {\n        assertFalse(Longitude28.isAvailable(1+180*60*10000));\n    }\n'],large;Available;Value;Available;Longitude;Not;False,1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;1.1641532182693481e-10;0.0,5,5,"[-5.875136375427246, -5.704000473022461, -6.310512542724609, -5.445293426513672, -5.403236389160156, -0.0169189665466547]",0.9832233786582947
3,['    @Test\n    public void largeValueIsNotCorrect() {\n        assertFalse(Longitude28.isCorrect(1+180*60*10000));\n    }\n'],Value;Not;large;False;Correct;Longitude;Correct,2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-8.149072527885437e-10;-1.2223608791828156e-09;-1.3969838619232178e-09,5,5,"[-5.870162487030029, -5.697185039520264, -6.307916164398193, -5.4386887550354, -5.399981498718262, -0.017005229368805885]",0.9831385612487793
3,"['    @Test\n    public void conversionToKnotsWorks() {\n        assertEquals(-180.0, Longitude28.toDegrees(Double.valueOf(-180.0*60*10000).intValue()), DELTA);\n        assertEquals(-45.1, Longitude28.toDegrees(Double.valueOf(-45.1*60*10000).intValue()), DELTA);\n        assertEquals(0.0, Longitude28.toDegrees(0), 0.00001);\n        assertEquals(45.9, Longitude28.toDegrees(Double.valueOf(45.9*60*10000).intValue()), DELTA);\n        assertEquals(180.0, Longitude28.toDegrees(Double.valueOf(180.0*60*10000).intValue()), DELTA);\n    }\n']",egrees;egrees;conversion;Longitude;to;egrees;Equals;to;Double;Value,1.5133991837501526e-09;1.3969838619232178e-09;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.9281287677586079e-10;1.7462298274040222e-10;1.673470251262188e-10;1.1641532182693481e-10,5,5,"[-5.807868957519531, -5.642185211181641, -6.219059467315674, -5.295494079589844, -5.416532516479492, -0.018160613253712654]",0.9820032715797424
3,"['    @Test\n    public void conversionReturnsOnInvalidValues() {\n        assertEquals(-201.1, Longitude28.toDegrees(Double.valueOf(-201.1*60*10000).intValue()), DELTA);\n        assertEquals(181.1, Longitude28.toDegrees(Double.valueOf(181.1*60*10000).intValue()), DELTA);\n        assertEquals(202.3, Longitude28.toDegrees(Double.valueOf(202.3*60*10000).intValue()), DELTA);\n    }\n']",Invalid;On;Returns;Values;DELTA;Double;Equals;to;value;Double,4.6566128730773926e-09;4.190951585769653e-09;3.4924596548080444e-09;1.3969838619232178e-09;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.836616516113281, -5.681934833526611, -6.259668827056885, -5.33587121963501, -5.422000885009766, -0.01762595772743225]",0.9825284481048584
3,['    @Test\n    public void zeroIsAvailable() {\n        assertTrue(Latitude27.isAvailable(0));\n    }\n'],zero;Available;Available;True;Latitude,9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;-7.275957614183426e-10,5,5,"[-5.899641513824463, -5.731466770172119, -6.354250431060791, -5.480856895446777, -5.433485507965088, -0.01638927310705185]",0.9837443232536316
3,['    @Test\n    public void zeroIsCorrect() {\n        assertTrue(Latitude27.isCorrect(0));\n    }\n'],Correct;zero;True;Correct;Latitude,1.3969838619232178e-09;5.820766091346741e-10;2.9103830456733704e-10;-1.1641532182693481e-10;-1.5133991837501526e-09,5,5,"[-5.895243167877197, -5.723938465118408, -6.34829568862915, -5.472029685974121, -5.426697254180908, -0.01650477945804596]",0.9836306571960449
3,['    @Test\n    public void minValueIsAvailable() {\n        assertTrue(Latitude27.isAvailable(-90*60*10000));\n    }\n'],Available;Latitude;Value;True;min;Available,6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-9.313225746154785e-10;-1.0477378964424133e-09,5,5,"[-5.891040325164795, -5.744966506958008, -6.356962203979492, -5.474904537200928, -5.4400739669799805, -0.01636030711233616]",0.9837726950645447
3,['    @Test\n    public void minValueIsCorrect() {\n        assertTrue(Latitude27.isCorrect(-90*60*10000));\n    }\n'],True;Correct;min;Value;Correct;Latitude,1.5133991837501526e-09;1.1059455573558807e-09;9.313225746154785e-10;-4.656612873077393e-10;-1.6298145055770874e-09;-2.3283064365386963e-09,5,5,"[-5.895553112030029, -5.74993371963501, -6.3557209968566895, -5.463926792144775, -5.437282085418701, -0.016393261030316353]",0.9837403893470764
3,['    @Test\n    public void maxValueIsAvailable() {\n        assertTrue(Latitude27.isAvailable(90*60*10000));\n    }\n'],Available;True;max;Available;Value;Latitude,8.149072527885437e-10;1.7462298274040222e-10;0.0;-4.656612873077393e-10;-6.984919309616089e-10;-1.3387762010097504e-09,5,5,"[-5.879469394683838, -5.722179889678955, -6.324007987976074, -5.454996109008789, -5.4193525314331055, -0.01670527085661888]",0.9834334850311279
3,['    @Test\n    public void maxValueIsCorrect() {\n        assertTrue(Latitude27.isCorrect(90*60*10000));\n    }\n'],Value;Latitude;Correct;True;Correct;max,3.725290298461914e-09;3.259629011154175e-09;-1.6298145055770874e-09;-1.862645149230957e-09;-1.3969838619232178e-08;-1.862645149230957e-08,5,5,"[-5.876425266265869, -5.712857723236084, -6.318278789520264, -5.447080135345459, -5.41138219833374, -0.016826249659061432]",0.9833146333694458
3,['    @Test\n    public void defaultValueIsNotAvailable() {\n        assertFalse(Latitude27.isAvailable(91*60*10000));\n    }\n'],Available;False;Available;default;Latitude;Value;Not,2.0372681319713593e-09;4.656612873077393e-10;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-6.984919309616089e-10;-1.1059455573558807e-09,5,5,"[-5.878193378448486, -5.70767068862915, -6.314795017242432, -5.448884010314941, -5.40602970123291, -0.016861414536833763]",0.9832799434661865
3,['    @Test\n    public void defaultValueIsCorrect() {\n        assertTrue(Latitude27.isCorrect(91*60*10000));\n    }\n'],Value;True;Correct;default;Latitude;Correct,3.4924596548080444e-10;2.9103830456733704e-10;0.0;-6.984919309616089e-10;-6.984919309616089e-10;-1.2223608791828156e-09,5,5,"[-5.886250019073486, -5.727253437042236, -6.3384690284729, -5.450598239898682, -5.423660755157471, -0.016642900183796883]",0.9834949374198914
3,['    @Test\n    public void largeNegativeValueIsNotAvailable() {\n        assertFalse(Latitude27.isAvailable(-1-90*60*10000));\n    }\n'],Negative;Latitude;Available;Value;Available;large;Not;False,1.6298145055770874e-09;1.3969838619232178e-09;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-5.238689482212067e-10,5,5,"[-5.853663444519043, -5.707169055938721, -6.304210662841797, -5.440165996551514, -5.417106628417969, -0.01694146916270256]",0.9832012057304382
3,['    @Test\n    public void largeNegativeValueIsNotCorrect() {\n        assertFalse(Latitude27.isCorrect(-1-90*60*10000));\n    }\n'],large;Correct;Value;False;Not;Latitude;Correct;Negative,3.026798367500305e-09;9.89530235528946e-10;5.820766091346741e-10;-2.9103830456733704e-10;-5.820766091346741e-10;-6.984919309616089e-10;-9.313225746154785e-10;-6.868503987789154e-09,5,5,"[-5.847675800323486, -5.702221870422363, -6.300141334533691, -5.431918144226074, -5.407284259796143, -0.01706441305577755]",0.9830803871154785
3,['    @Test\n    public void largeValueIsNotAvailable() {\n        assertFalse(Latitude27.isAvailable(1+90*60*10000));\n    }\n'],False;Value;Available;Available;Latitude;Not;large,8.731149137020111e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-1.1641532182693481e-09,5,5,"[-5.878695964813232, -5.712106227874756, -6.31973123550415, -5.450592517852783, -5.411220073699951, -0.01680491492152214]",0.9833354949951172
3,['    @Test\n    public void largeValueIsNotCorrect() {\n        assertFalse(Latitude27.isCorrect(1+90*60*10000));\n    }\n'],Latitude;Not;Value;Correct;False;Correct;large,1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;4.0745362639427185e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-1.3969838619232178e-09,5,5,"[-5.869670867919922, -5.700608253479004, -6.310698986053467, -5.439249515533447, -5.402164936065674, -0.016977334395051003]",0.983165979385376
3,"['    @Test\n    public void conversionToKnotsWorks() {\n        assertEquals(-90.0, Latitude27.toDegrees(Double.valueOf(-90.0*60*10000).intValue()), DELTA);\n        assertEquals(-45.1, Latitude27.toDegrees(Double.valueOf(-45.1*60*10000).intValue()), DELTA);\n        assertEquals(0.0, Latitude27.toDegrees(0), 0.00001);\n        assertEquals(45.9, Latitude27.toDegrees(Double.valueOf(45.9*60*10000).intValue()), DELTA);\n        assertEquals(90.0, Latitude27.toDegrees(Double.valueOf(90.0*60*10000).intValue()), DELTA);\n    }\n']",Latitude;Latitude;egrees;Equals;egrees;egrees;value;Latitude;Double;Value,8.731149137020111e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;2.0372681319713593e-10;1.5279510989785194e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.804973125457764, -5.639693260192871, -6.216973781585693, -5.290469646453857, -5.411976337432861, -0.01822909340262413]",0.9819360375404358
3,"['    @Test\n    public void conversionReturnsOnInvalidValues() {\n        assertEquals(-101.1, Latitude27.toDegrees(Double.valueOf(-101.1*60*10000).intValue()), DELTA);\n        assertEquals(91.1, Latitude27.toDegrees(Double.valueOf(91.1*60*10000).intValue()), DELTA);\n        assertEquals(102.3, Latitude27.toDegrees(Double.valueOf(102.3*60*10000).intValue()), DELTA);\n    }\n']",Invalid;egrees;Values;egrees;Latitude;Latitude;conversion;Double;DELTA;value,2.7939677238464355e-09;2.153683453798294e-09;1.3969838619232178e-09;1.1641532182693481e-09;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.2014213502407074e-10;2.1100277081131935e-10,5,5,"[-5.8320393562316895, -5.6767354011535645, -6.252906322479248, -5.3327860832214355, -5.414525508880615, -0.017719654366374016]",0.9824362993240356
3,"['    @Test\n    public void testConstructor() {\n\n        BasicListener bl = new BasicListener();\n\n        assertNull(bl.received);\n        assertEquals(bl.messageType, AISMessage01.class);\n    }\n']",message;Type;Null;Listener;Basic;Listener;bl;Equals;new;received,1.1641532182693481e-09;1.1641532182693481e-09;8.585629984736443e-10;6.984919309616089e-10;4.656612873077393e-10;2.9103830456733704e-10;5.820766091346741e-11;1.4551915228366852e-11;0.0;0.0,5,5,"[-5.938479900360107, -5.899587154388428, -6.427526950836182, -5.525478363037109, -5.441190242767334, -0.015429767780005932]",0.9846886396408081
3,"['    @Test\n    public void testParametrizedConstructor() {\n\n        ExtendedBasicListener ebl = new ExtendedBasicListener();\n\n        assertNull(ebl.get());\n        assertEquals(ebl.messageType, AISMessage01.class);\n    }\n']",message;Parametrized;eb;get;Null;Extended;Equals;Type;class;bl,3.725290298461914e-09;3.259629011154175e-09;5.820766091346741e-10;5.820766091346741e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.946616172790527, -5.917130470275879, -6.437554359436035, -5.534869194030762, -5.434689521789551, -0.015334212221205235]",0.9847827553749084
3,"['    @Test\n    public void testOnMessageWithExpectedMessage() {\n\n        BasicListener bl = new BasicListener();\n\n        bl.sentenceRead(AIS_01);\n        assertEquals(bl.received.toString(), MSG_01.toString());\n    }\n']",On;Message;Listener;sentence;bl;Basic;to;Expected;Message;received,2.7939677238464355e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0,5,5,"[-5.90427303314209, -5.763768196105957, -6.371240615844727, -5.466362953186035, -5.464783191680908, -0.01616690307855606]",0.9839630722999573
3,"['    @Test\n    public void testSequenceListener() {\n\n        SequenceListener sl = new SequenceListener();\n\n        sl.sentenceRead(AIS_05_1);\n        assertNull(sl.received);\n\n        sl.sentenceRead(AIS_05_2);\n        assertEquals(sl.received.toString(), MSG_05.toString());\n    }\n']",sl;sl;Listener;received;received;IS;IS;Read;sl;to,5.820766091346741e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;5.820766091346741e-11,5,5,"[-5.862426280975342, -5.707360744476318, -6.284146785736084, -5.3693318367004395, -5.428534030914307, -0.017225656658411026]",0.982921838760376
3,"['    @Test\n    public void testSequenceListenerWithIncorrectOrder() {\n\n        SequenceListener sl = new SequenceListener();\n\n        sl.sentenceRead(AIS_05_2);\n        assertNull(sl.received);\n\n        sl.sentenceRead(AIS_05_1);\n        assertNull(sl.received);\n\n        sl.sentenceRead(AIS_05_2);\n        assertEquals(sl.received.toString(), MSG_05.toString());\n    }\n']",Listener;MSG;received;sl;received;Read;Sequence;IS;IS;sl,4.0745362639427185e-10;3.637978807091713e-10;3.128661774098873e-10;2.0372681319713593e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.8433356285095215, -5.6848626136779785, -6.258457660675049, -5.333620071411133, -5.430599212646484, -0.01757078990340233]",0.9825825691223145
3,['    @Test\n    public void testSequenceListenerWithMixedOrder() {\n\n        SequenceListener sl = new SequenceListener();\n\n        sl.sentenceRead(AIS_05_1);\n        assertNull(sl.received);\n\n        sl.sentenceRead(AIS_01);\n        assertNull(sl.received);\n\n        sl.sentenceRead(AIS_05_2);\n        assertNull(sl.received);\n    }\n'],Sequence;new;received;Order;received;IS;Sequence;Read;IS;sl,4.0381564758718014e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.843564510345459, -5.666665554046631, -6.251341342926025, -5.336770534515381, -5.413415431976318, -0.017709465697407722]",0.982446551322937
3,['    @Test\n    public void testBasicListenerWithUnexpectedMessage() {\n\n        BasicListener bl = new BasicListener();\n        bl.sentenceRead(AIS_05_1);\n        bl.sentenceRead(AIS_05_2);\n\n        assertNull(bl.received);\n    }\n'],IS;Listener;bl;nexpected;Read;Listener;sentence;Listener;sentence;bl,3.4924596548080444e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.873538970947266, -5.709313869476318, -6.3083391189575195, -5.409643650054932, -5.4301276206970215, -0.016947565600275993]",0.9831953644752502
3,"['    @Test\n    public void testGenericsListener() {\n\n        GenericsListener<Integer, AISMessage01> gl = new GenericsListener<>(AISMessage01.class);\n        gl.sentenceRead(AIS_01);\n\n        assertEquals(gl.received.toString(), MSG_01.toString());\n        assertEquals(""1"", gl.dummy(1));\n    }\n']",sentence;Generics;Listener;ISMessage;gl;class;Listener;Equals;gl;gl,2.3283064365386963e-09;2.2992026060819626e-09;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.928384304046631, -5.874067306518555, -6.426427364349365, -5.512680530548096, -5.480844974517822, -0.015411573462188244]",0.984706461429596
3,"['    @Test\n    public void testGenericsListenerDefaultConstructorThrows() {\n        try {\n            GenericsListener<Integer, AISMessage01> gl = new GenericsListener<>();\n            fail(""exception not thrown, resolved to "" + gl.messageType);\n        } catch (IllegalStateException ise) {\n            assertEquals(""Cannot resolve generic type <T>, use constructor with Class<T> param."", ise.getMessage());\n        } catch (Exception e) {\n            fail(""unexpected exception thrown: "" + e.getMessage());\n        }\n    }\n']",Default;generic;ISMessage;Listener;fail;message;Generics;Constructor;with;to,1.4551915228366852e-09;1.0477378964424133e-09;7.421476766467094e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.637978807091713e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.879571914672852, -5.7452921867370605, -6.347853660583496, -5.4049177169799805, -5.52854585647583, -0.01634330302476883]",0.9837895035743713
3,"['    @Test\n    public void getPartNumber() throws Exception {\n        assertEquals(0, partA.getPartNumber());\n        assertEquals(1, partB.getPartNumber());\n    }\n']",get;part;Number;Number;Exception;Equals;Equals;get;Part;get,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;1.7462298274040222e-10;5.820766091346741e-11;-1.1641532182693481e-10;-1.8917489796876907e-10,5,5,"[-5.8831610679626465, -5.725404262542725, -6.34429407119751, -5.460483074188232, -5.422918796539307, -0.016607610508799553]",0.9835295081138611
3,"['    @Test\n    public void getName() throws Exception {\n        assertEquals(""THIS IS A CLASS B UN"", partA.getName());\n    }\n']",THIS;Name;Equals;get;get;CLASS;Exception;UN;Name;IS,7.450580596923828e-09;1.862645149230957e-09;1.3969838619232178e-09;4.656612873077393e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-1.3969838619232178e-09;-1.3969838619232178e-09;-3.259629011154175e-09,5,5,"[-5.903351306915283, -5.831913948059082, -6.39661979675293, -5.505023956298828, -5.437635898590088, -0.01587126962840557]",0.984254002571106
3,"['    @Test\n    public void getTypeOfShipAndCargoType() throws Exception {\n        assertEquals(36, partB.getTypeOfShipAndCargoType());\n    }\n']",part;Equals;argo;Type;Type;Exception;Type;get;get;Ship,3.725290298461914e-09;2.6775524020195007e-09;2.3283064365386963e-09;1.3969838619232178e-09;4.656612873077393e-10;3.4924596548080444e-10;1.7462298274040222e-10;-1.280568540096283e-09;-1.6298145055770874e-09;-1.6298145055770874e-09,5,5,"[-5.944796562194824, -5.87296724319458, -6.4417009353637695, -5.518967628479004, -5.448428630828857, -0.015459583140909672]",0.9846593141555786
3,"['    @Test\n    public void getVendorId() throws Exception {\n        // TODO correct? should be ""1234567"" according to http://www.maritec.co.za/tools/aisvdmvdodecoding/\n        assertEquals(""123"", partB.getVendorId());\n    }\n']",marite;za;should;get;endor;www;Equals;aisvd;be;http,2.240994945168495e-09;1.5133991837501526e-09;1.1059455573558807e-09;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.965198516845703, -5.878969192504883, -6.47883415222168, -5.539498329162598, -5.500328540802002, -0.015026120468974113]",0.9850863218307495
3,"['    @Test\n    public void getUnitModelCode() throws Exception {\n        // TODO correct?\n        assertEquals(13, partB.getUnitModelCode());\n    }\n']",Model;Unit;TOD;Unit;correct;Equals;get;Code;Exception;Model,1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10;-7.566995918750763e-10;-9.313225746154785e-10,5,5,"[-5.934910774230957, -5.819026470184326, -6.413260459899902, -5.507717609405518, -5.491941928863525, -0.015551135875284672]",0.9845691323280334
3,"['    @Test\n    public void getSerialNumber() throws Exception {\n        // TODO correct?\n        assertEquals(220599, partB.getSerialNumber());\n    }\n']",TOD;correct;Exception;Number;get;get;Equals;part;Number;Serial,9.022187441587448e-10;5.820766091346741e-10;4.0745362639427185e-10;1.4551915228366852e-10;5.820766091346741e-11;-1.1641532182693481e-10;-3.7834979593753815e-10;-5.820766091346741e-10;-6.402842700481415e-10;-8.149072527885437e-10,5,5,"[-5.904094219207764, -5.764452934265137, -6.365859031677246, -5.480423927307129, -5.44688606262207, -0.016192356124520302]",0.9839381575584412
3,"['    @Test\n    public void getCallSign() throws Exception {\n        assertEquals(""CALLSIG"", partB.getCallSign());\n    }\n']",part;Exception;Equals;get;Call;Sign;Call;Sign;get;ALLSIG,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-6.402842700481415e-10;-6.984919309616089e-10;-1.280568540096283e-09;-1.5133991837501526e-09;-1.5133991837501526e-09,5,5,"[-5.91560173034668, -5.7958269119262695, -6.389490127563477, -5.511466026306152, -5.441833972930908, -0.01591397635638714]",0.9842119812965393
3,"['    @Test\n    public void getBow() throws Exception {\n        assertEquals(5, partB.getBow());\n    }\n']",get;Equals;Exception;get;Bow;part;Bow,1.3969838619232178e-09;8.149072527885437e-10;4.0745362639427185e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-3.026798367500305e-09,5,5,"[-5.87809419631958, -5.721657752990723, -6.330580234527588, -5.4639410972595215, -5.400094985961914, -0.01674782671034336]",0.9833916425704956
3,"['    @Test\n    public void getStern() throws Exception {\n        assertEquals(4, partB.getStern());\n    }\n']",part;tern;tern;get;get;Exception;Equals,4.6566128730773926e-09;3.958120942115784e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;-2.3283064365386963e-10;-9.313225746154785e-10,5,5,"[-5.889062881469727, -5.770687103271484, -6.3587493896484375, -5.476503849029541, -5.425036430358887, -0.01634037122130394]",0.9837924242019653
3,"['    @Test\n    public void getPort() throws Exception {\n        assertEquals(3, partB.getPort());\n    }\n']",get;Port;Equals;Exception;Port;get;part,1.862645149230957e-09;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-8.149072527885437e-10;-9.313225746154785e-10;-5.587935447692871e-09,5,5,"[-5.879933834075928, -5.7421956062316895, -6.332446575164795, -5.464845657348633, -5.403050899505615, -0.016654038801789284]",0.9834838509559631
3,"['    @Test\n    public void getStarboard() throws Exception {\n        assertEquals(12, partB.getStarboard());\n    }\n']",get;Exception;Equals;get;Starboard;part;Starboard,7.566995918750763e-10;2.6193447411060333e-10;-2.3283064365386963e-10;-3.2014213502407074e-10;-8.731149137020111e-10;-1.280568540096283e-09;-1.367880031466484e-09,5,5,"[-5.900444030761719, -5.748073577880859, -6.368631362915039, -5.49045467376709, -5.432050704956055, -0.01627340354025364]",0.9838582873344421
3,"['    @Test\n    public void getAidType() throws Exception {\n        // Nav Type?\n        assertEquals(1, msg.getAidType());\n    }\n']",Aid;Aid;Type;Type;Exception;Equals;get;msg;get;Type,2.7939677238464355e-09;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10;-8.149072527885437e-10;-1.1059455573558807e-09,5,5,"[-5.890401363372803, -5.747271537780762, -6.355511665344238, -5.4712419509887695, -5.433648586273193, -0.016401469707489014]",0.9837324023246765
3,"['    @Test\n    public void getName() throws Exception {\n        assertEquals(""THIS IS A TEST NAME1"", msg.getName());\n    }\n']",TEST;NAME;Name;Equals;IS;THIS;get;Exception;msg;get,6.51925802230835e-09;2.6775524020195007e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;6.693881005048752e-10;2.3283064365386963e-10;0.0;-4.656612873077393e-10,5,5,"[-5.87431526184082, -5.7527570724487305, -6.337116241455078, -5.472555637359619, -5.410449981689453, -0.016560593619942665]",0.9835757613182068
3,['    @Test\n    public void getPositionAccuracy() throws Exception {\n        assertFalse(msg.getPositionAccuracy());\n    }\n'],Accuracy;Position;Position;get;msg;Accuracy;False;Exception;get,5.9371814131736755e-09;0.0;0.0;-2.3283064365386963e-10;-8.149072527885437e-10;-1.2223608791828156e-09;-1.6298145055770874e-09;-2.0954757928848267e-09;-4.190951585769653e-09,5,5,"[-5.887325286865234, -5.709502696990967, -6.3316545486450195, -5.47300910949707, -5.395528793334961, -0.01674254983663559]",0.9833968281745911
3,"['    @Test\n    public void getLongitudeInDegrees() throws Exception {\n        assertEquals(145.181, msg.getLongitudeInDegrees(), 0.001);\n    }\n']",In;Exception;Equals;msg;get;In;egrees;Longitude;Longitude;get,0.0;-5.820766091346741e-11;-3.2014213502407074e-10;-6.984919309616089e-10;-6.984919309616089e-10;-9.022187441587448e-10;-9.313225746154785e-10;-1.076841726899147e-09;-1.1641532182693481e-09;-1.2514647096395493e-09,5,5,"[-5.880864143371582, -5.746570110321045, -6.3302106857299805, -5.440530776977539, -5.418883323669434, -0.016675258055329323]",0.9834629893302917
3,"['    @Test\n    public void getLatitudeInDegrees() throws Exception {\n        assertEquals(-38.220167, msg.getLatitudeInDegrees(), 0.000001);\n    }\n']",egrees;In;In;Exception;get;Latitude;msg;get;Equals;egrees,1.862645149230957e-09;1.1641532182693481e-09;-3.4924596548080444e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10;-1.280568540096283e-09;-1.3969838619232178e-09;-1.862645149230957e-09;-3.259629011154175e-09,5,5,"[-5.86588716506958, -5.731077671051025, -6.311047554016113, -5.425353527069092, -5.406200885772705, -0.01692892797291279]",0.9832135438919067
3,"['    @Test\n    public void getBow() throws Exception {\n        assertEquals(5, msg.getBow());\n    }\n']",msg;Exception;get;Bow;get;Equals;Bow,1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-5.238689482212067e-10;-8.149072527885437e-10;-9.313225746154785e-10,5,5,"[-5.873316764831543, -5.697536468505859, -6.319327354431152, -5.460020542144775, -5.391678810119629, -0.016919083893299103]",0.9832233786582947
3,"['    @Test\n    public void getStern() throws Exception {\n        assertEquals(3, msg.getStern());\n    }\n']",tern;get;msg;Exception;Equals;get;tern,4.190951585769653e-09;5.820766091346741e-11;0.0;-1.2369127944111824e-10;-7.566995918750763e-10;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-5.879235744476318, -5.715932369232178, -6.335612773895264, -5.461711406707764, -5.413536071777344, -0.016702925786376]",0.9834358096122742
3,"['    @Test\n    public void getPort() throws Exception {\n        assertEquals(3, msg.getPort());\n    }\n']",get;Exception;Port;Port;Equals;get;msg,3.7834979593753815e-10;2.6193447411060333e-10;-8.731149137020111e-11;-1.7462298274040222e-10;-3.2014213502407074e-10;-4.0745362639427185e-10;-4.656612873077393e-10,5,5,"[-5.862898826599121, -5.683929443359375, -6.297723770141602, -5.44584321975708, -5.37310791015625, -0.017184292897582054]",0.9829624891281128
3,"['    @Test\n    public void getStarboard() throws Exception {\n        assertEquals(5, msg.getStarboard());\n    }\n']",Starboard;Starboard;get;Exception;Equals;get;msg,6.984919309616089e-10;1.7462298274040222e-10;0.0;-2.9103830456733704e-10;-4.656612873077393e-10;-4.94765117764473e-10;-5.238689482212067e-10,5,5,"[-5.889832019805908, -5.718050479888916, -6.349833965301514, -5.475549221038818, -5.41432523727417, -0.016577476635575294]",0.9835591912269592
3,"['    @Test\n    public void getTypeOfEPFD() throws Exception {\n        assertEquals(1, msg.getTypeOfEPFD());\n    }\n']",EPFD;Type;get;EPFD;get;Exception;msg;Equals;Type,1.3969838619232178e-09;6.402842700481415e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.7462298274040222e-10;-4.0745362639427185e-10;-4.656612873077393e-10;-7.712515071034431e-10;-1.0331859812140465e-09,5,5,"[-5.865474700927734, -5.699286937713623, -6.303832530975342, -5.439012050628662, -5.386192798614502, -0.017081521451473236]",0.9830635190010071
3,"['    @Test\n    public void getUtcSecond() throws Exception {\n        // UTC time stamp?\n        assertEquals(9, msg.getUtcSecond());\n    }\n']",Ut;Second;time;get;get;Exception;Equals;UTC;msg;Ut,2.0954757928848267e-09;1.280568540096283e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;0.0;-1.6007106751203537e-10;-5.820766091346741e-10,5,5,"[-5.858848571777344, -5.677027225494385, -6.291145324707031, -5.4660964012146, -5.424755573272705, -0.016906775534152985]",0.983235239982605
3,"['    @Test\n    public void getOffPositionIndicator() throws Exception {\n        assertEquals(true, msg.getOffPositionIndicator());\n    }\n']",Off;Position;msg;Equals;Exception;true;get;get;Indicator;Position,9.313225746154785e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-5.238689482212067e-10;-6.984919309616089e-10,5,5,"[-5.904693126678467, -5.736515045166016, -6.352212429046631, -5.489416599273682, -5.418257236480713, -0.016394317150115967]",0.9837393164634705
3,"['    @Test\n    public void getRegional() throws Exception {\n        // ""00001010"" ?\n        assertEquals(10, msg.getRegional());\n    }\n']",get;Exception;get;msg;Equals;Regional;Regional,1.1641532182693481e-09;-5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.0372681319713593e-10;-5.820766091346741e-10;-1.3969838619232178e-09,5,5,"[-5.892481803894043, -5.710661888122559, -6.342028617858887, -5.4501543045043945, -5.438533782958984, -0.016609953716397285]",0.9835272431373596
3,['    @Test\n    public void getRAIMFlag() throws Exception {\n        assertFalse(msg.getRAIMFlag());\n    }\n'],RAIMFlag;False;get;get;Exception;RAIMFlag;msg,8.149072527885437e-10;3.4924596548080444e-10;3.4924596548080444e-10;0.0;-1.1641532182693481e-10;-4.656612873077393e-10;-1.4842953532934189e-09,5,5,"[-5.864789962768555, -5.684464931488037, -6.300867080688477, -5.445882797241211, -5.388431072235107, -0.01709921844303608]",0.9830461144447327
3,['    @Test\n    public void getVirtualAidFlag() throws Exception {\n        assertFalse(msg.getVirtualAidFlag());\n    }\n'],Flag;Virtual;Aid;msg;Virtual;get;False;Exception;Aid;get,3.725290298461914e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.0477378964424133e-09;2.9103830456733704e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-5.238689482212067e-10;-6.984919309616089e-10;-1.0477378964424133e-09,5,5,"[-5.889726638793945, -5.722226619720459, -6.340298175811768, -5.475606441497803, -5.41208553314209, -0.016590842977166176]",0.9835460186004639
3,['    @Test\n    public void getAssignedModeFlag() throws Exception {\n        assertTrue(msg.getAssignedModeFlag());\n    }\n'],Flag;Assigned;Exception;get;True;Flag;Assigned;get;msg;Mode,1.862645149230957e-09;8.149072527885437e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-6.402842700481415e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.894096374511719, -5.729241371154785, -6.356414318084717, -5.495541572570801, -5.4351887702941895, -0.01633896306157112]",0.9837937951087952
3,"['    @Test\n    public void getNameExtension() throws Exception {\n        assertEquals(""EXTENDED NAME"", msg.getNameExtension());\n    }\n']",EXTENDED;Extension;Name;get;msg;NAME;Equals;Name;Extension;Exception,1.4901161193847656e-08;7.916241884231567e-09;2.3283064365386963e-09;1.1641532182693481e-09;8.149072527885437e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-8.149072527885437e-10,5,5,"[-5.9051594734191895, -5.794497489929199, -6.373255252838135, -5.49043083190918, -5.431065082550049, -0.016109777614474297]",0.9840192794799805
3,"['    @Test\n    public void hasLatitude() {\n        assertEquals(true, msg.hasLatitude());\n    }\n']",Latitude;Latitude;true;has;msg;Equals;has,4.6566128730773926e-09;9.313225746154785e-10;2.9103830456733704e-10;1.4551915228366852e-10;-2.3283064365386963e-10;-3.7834979593753815e-10;-4.656612873077393e-10,5,5,"[-5.9125237464904785, -5.727972507476807, -6.368642330169678, -5.467814922332764, -5.446985721588135, -0.01633591391146183]",0.9837967753410339
3,"['    @Test\n    public void hasLongitude() {\n        assertEquals(true, msg.hasLongitude());\n    }\n']",Longitude;Equals;msg;true;has;has;Longitude,4.656612873077393e-10;3.92901711165905e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-5.863999843597412, -5.677953243255615, -6.295813083648682, -5.446628093719482, -5.37883996963501, -0.017175035551190376]",0.9829716086387634
3,"['    @Test\n    public void getAltitude() throws Exception {\n        assertEquals(16, msg.getAltitude());\n    }\n']",Equals;get;Altitude;Exception;msg;get;Altitude,1.979060471057892e-09;5.820766091346741e-10;0.0;-2.3283064365386963e-09;-3.026798367500305e-09;-4.6566128730773926e-09;-1.5832483768463135e-08,5,5,"[-5.8937273025512695, -5.724915981292725, -6.337907791137695, -5.4562482833862305, -5.421245574951172, -0.01661687158048153]",0.9835205674171448
3,"['    @Test\n    public void getSpeedOverGround() throws Exception {\n        assertEquals(100.0, msg.getSpeedOverGround(), 0.1);\n    }\n']",get;Equals;Exception;Over;msg;Speed;get;Speed;Over;Ground,1.7462298274040222e-09;1.4551915228366852e-09;7.566995918750763e-10;3.4924596548080444e-10;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.868544578552246, -5.73153018951416, -6.330776214599609, -5.446927070617676, -5.405089378356934, -0.01679307594895363]",0.9833469986915588
3,"['    @Test\n    public void getPositionAccuracy() throws Exception {\n        assertEquals(true, msg.getPositionAccuracy());\n    }\n']",Position;get;Accuracy;Equals;Position;Exception;get;msg;true;Accuracy,1.3969838619232178e-09;6.984919309616089e-10;0.0;0.0;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-6.402842700481415e-10;-1.280568540096283e-09,5,5,"[-5.885446071624756, -5.716214656829834, -6.328283786773682, -5.464278697967529, -5.397766590118408, -0.016758494079113007]",0.9833810329437256
3,"['    @Test\n    public void getLongitudeInDegrees() throws Exception {\n        assertEquals(-82.91646, msg.getLongitudeInDegrees(), 0.00001);\n    }\n']",Longitude;egrees;get;Exception;msg;In;egrees;get;Equals;Longitude,1.1641532182693481e-08;2.7939677238464355e-09;1.862645149230957e-09;1.1641532182693481e-09;2.3283064365386963e-10;0.0;0.0;-9.313225746154785e-10;-1.3969838619232178e-09;-4.423782229423523e-09,5,5,"[-5.8759660720825195, -5.73016357421875, -6.3191328048706055, -5.429516315460205, -5.416081428527832, -0.01682460866868496]",0.9833161234855652
3,"['    @Test\n    public void getLatitudeInDegrees() throws Exception {\n        assertEquals(29.20575, msg.getLatitudeInDegrees(), 0.00001);\n    }\n']",egrees;Equals;Latitude;In;msg;get;get;egrees;Exception;In,9.313225746154785e-10;1.7462298274040222e-10;1.7462298274040222e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.238689482212067e-10;-8.731149137020111e-10;-9.313225746154785e-10,5,5,"[-5.8776631355285645, -5.739813327789307, -6.32861852645874, -5.438019752502441, -5.420770645141602, -0.01671183481812477]",0.9834270477294922
3,"['    @Test\n    public void getCourseOverGround() throws Exception {\n        assertEquals(30.0, msg.getCourseOverGround(), 0.1);\n    }\n']",Over;Course;Exception;msg;Over;get;get;Ground;Course;Ground,2.3283064365386963e-09;9.313225746154785e-10;5.820766091346741e-11;-6.984919309616089e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.280568540096283e-09;-1.5133991837501526e-09;-1.862645149230957e-09;-2.3283064365386963e-09,5,5,"[-5.8996663093566895, -5.7543721199035645, -6.370728015899658, -5.476025104522705, -5.438599586486816, -0.016283607110381126]",0.9838483929634094
3,"['    @Test\n    public void getTimeStamp() throws Exception {\n        assertEquals(11, msg.getTimeStamp());\n    }\n']",Time;Exception;get;msg;get;Time;Stamp;Stamp;Equals,6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10;-5.820766091346741e-10;-6.402842700481415e-10;-8.149072527885437e-10;-9.313225746154785e-10;-2.153683453798294e-09,5,5,"[-5.859412670135498, -5.687004089355469, -6.290477752685547, -5.448205471038818, -5.390517711639404, -0.01710566319525242]",0.9830397963523865
3,"['    @Test\n    public void getDTEFlag() throws Exception {\n        // 1 == false, ""not available"" (default)\n        assertEquals(false, msg.getDTEFlag());\n    }\n']",TEFlag;available;false;false;Exception;get;msg;get;default;Equals,3.4924596548080444e-09;8.149072527885437e-10;4.0745362639427185e-10;5.820766091346741e-11;-8.731149137020111e-11;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10;-7.566995918750763e-10,5,5,"[-5.8929524421691895, -5.769683361053467, -6.339302062988281, -5.447375297546387, -5.447512149810791, -0.016393261030316353]",0.9837402701377869
3,"['    @Test\n    public void getAssignedModeFlag() throws Exception {\n        // 0 == Autonomous and continuous mode (default)\n        assertEquals(false, msg.getAssignedModeFlag());\n    }\n']",continuous;Flag;Exception;msg;Flag;and;false;Assigned;get;default,1.862645149230957e-09;6.984919309616089e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.907909870147705, -5.748106479644775, -6.376783847808838, -5.477478504180908, -5.469888687133789, -0.016128193587064743]",0.9840011596679688
3,"['    @Test\n    public void getRAIMFlag() throws Exception {\n        // 0 = RAIM not in use (default)\n        assertEquals(false, msg.getRAIMFlag());\n    }\n']",Equals;in;RAIMFlag;get;default;false;Exception;msg;get;use,1.4115357771515846e-09;9.313225746154785e-10;4.94765117764473e-10;2.3283064365386963e-10;1.7462298274040222e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.6193447411060333e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.893197059631348, -5.736467361450195, -6.358821868896484, -5.468332290649414, -5.461274147033691, -0.01631445251405239]",0.9838179349899292
3,"['    @Test\n    public void getRadioStatus() throws Exception {\n        assertEquals(0, msg.getRadioStatus());\n    }\n']",Radio;Radio;get;Status;msg;Exception;Status;get;Equals,7.2177499532699585e-09;4.190951585769653e-09;3.259629011154175e-09;4.656612873077393e-10;-6.984919309616089e-10;-8.149072527885437e-10;-9.313225746154785e-10;-1.0186340659856796e-09;-2.5320332497358322e-09,5,5,"[-5.894381999969482, -5.7374491691589355, -6.347208023071289, -5.470612049102783, -5.420982360839844, -0.016496220603585243]",0.983639121055603
3,"['    @Test\n    public void hasLatitude() {\n        assertEquals(true, msg.hasLatitude());\n    }\n']",Latitude;Latitude;true;has;msg;Equals;has,4.6566128730773926e-09;9.313225746154785e-10;2.9103830456733704e-10;1.4551915228366852e-10;-2.3283064365386963e-10;-3.7834979593753815e-10;-4.656612873077393e-10,5,5,"[-5.9125237464904785, -5.727972507476807, -6.368642330169678, -5.467814922332764, -5.446985721588135, -0.01633591391146183]",0.9837967753410339
3,"['    @Test\n    public void hasLongitude() {\n        assertEquals(true, msg.hasLongitude());\n    }\n']",Longitude;Equals;msg;true;has;has;Longitude,4.656612873077393e-10;3.92901711165905e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-5.863999843597412, -5.677953243255615, -6.295813083648682, -5.446628093719482, -5.37883996963501, -0.017175035551190376]",0.9829716086387634
3,"['    @Test\n    public void getUtcYear() throws Exception {\n        assertEquals(2012, msg.getUtcYear());\n    }\n']",Year;Equals;get;Ut;Ut;get;msg;Exception;Year,1.3387762010097504e-09;1.2223608791828156e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;0.0;-2.3283064365386963e-10;-5.820766091346741e-10;-1.862645149230957e-09,5,5,"[-5.875877380371094, -5.69184684753418, -6.31443977355957, -5.482163906097412, -5.405261039733887, -0.01678299345076084]",0.9833571910858154
3,"['    @Test\n    public void getUtcMonth() throws Exception {\n        assertEquals(6, msg.getUtcMonth());\n    }\n']",msg;Month;Month;Exception;get;Ut;Equals;Ut;get,1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;1.1641532182693481e-10;-2.9103830456733704e-11;-2.3283064365386963e-10;-5.238689482212067e-10,5,5,"[-5.8778791427612305, -5.7000732421875, -6.321491241455078, -5.4742231369018555, -5.400146961212158, -0.01679331064224243]",0.9833469390869141
3,"['    @Test\n    public void getUtcDay() throws Exception {\n        assertEquals(8, msg.getUtcDay());\n    }\n']",Ut;Day;Ut;Equals;Exception;msg;get;get;Day,1.862645149230957e-09;1.3969838619232178e-09;5.820766091346741e-10;2.3283064365386963e-10;-2.6193447411060333e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.280568540096283e-09;-3.4924596548080444e-09,5,5,"[-5.880176544189453, -5.706545829772949, -6.325662612915039, -5.467480182647705, -5.403539657592773, -0.01677045039832592]",0.9833692908287048
3,"['    @Test\n    public void getUtcHour() throws Exception {\n        assertEquals(7, msg.getUtcHour());\n    }\n']",Equals;msg;get;get;Hour;Hour;Ut;Ut;Exception,8.003553375601768e-10;2.9103830456733704e-10;2.473825588822365e-10;0.0;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.529727786779404e-10,5,5,"[-5.872940540313721, -5.702080249786377, -6.318338394165039, -5.466448783874512, -5.393062114715576, -0.01687219925224781]",0.983269214630127
3,"['    @Test\n    public void getUtcMinute() throws Exception {\n        assertEquals(38, msg.getUtcMinute());\n    }\n']",Equals;Ut;Minute;Ut;get;Minute;get;Exception;msg,2.561137080192566e-09;1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;-5.820766091346741e-11;-3.4924596548080444e-10,5,5,"[-5.873741626739502, -5.71968936920166, -6.331662654876709, -5.475582599639893, -5.421346187591553, -0.01661839708685875]",0.9835188984870911
3,"['    @Test\n    public void getUtcSecond() throws Exception {\n        assertEquals(20, msg.getUtcSecond());\n    }\n']",Second;Equals;Ut;Ut;get;Exception;Second;msg;get,1.8044374883174896e-09;9.313225746154785e-10;5.529727786779404e-10;2.9103830456733704e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-8.149072527885437e-10;-9.313225746154785e-10,5,5,"[-5.8630499839782715, -5.691434860229492, -6.299502372741699, -5.445419788360596, -5.392962455749512, -0.017063943669199944]",0.9830809235572815
3,"['    @Test\n    public void getLatitudeInDegrees() throws Exception {\n        assertEquals(-29.870835, msg.getLatitudeInDegrees(), 0.000001);\n    }\n']",egrees;Equals;msg;get;Latitude;Exception;get;In;In;Latitude,1.6298145055770874e-09;1.1932570487260818e-09;4.656612873077393e-10;2.3283064365386963e-10;0.0;-1.7462298274040222e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.862645149230957e-09,5,5,"[-5.877220153808594, -5.744309902191162, -6.326050758361816, -5.4378461837768555, -5.416579246520996, -0.01672273874282837]",0.9834163188934326
3,"['    @Test\n    public void getLongitudeInDegrees() throws Exception {\n        assertEquals(31.033513, msg.getLongitudeInDegrees(), 0.000001);\n    }\n']",Longitude;Longitude;egrees;Exception;msg;Equals;get;egrees;In;In,5.122274160385132e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.984919309616089e-10;2.3283064365386963e-10;-2.9103830456733704e-10;-6.111804395914078e-10;-9.313225746154785e-10;-9.313225746154785e-10;-2.7939677238464355e-09,5,5,"[-5.874011516571045, -5.731882095336914, -6.314450263977051, -5.428167343139648, -5.416318893432617, -0.016838088631629944]",0.983302891254425
3,"['  @Test\n  public void testCanReadTemplateFilesOnTheFilesystem() throws IOException {\n    SpecificCompiler compiler = createCompiler();\n    compiler.compileToDestination(this.src, OUTPUT_DIR.getRoot());\n    assertTrue(new File(OUTPUT_DIR.getRoot(),""SimpleRecord.java"").exists());\n  }\n']",The;On;OUTPUT;Template;src;compile;Compiler;new;Specific;Can,2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-5.910699367523193, -5.805709362030029, -6.429702281951904, -5.5309648513793945, -5.48194694519043, -0.015577660873532295]",0.9845430254936218
3,"['  @Test\n  public void testPublicFieldVisibility() throws IOException {\n    SpecificCompiler compiler = createCompiler();\n    compiler.setFieldVisibility(SpecificCompiler.FieldVisibility.PUBLIC);\n    assertFalse(compiler.deprecatedFields());\n    assertTrue(compiler.publicFields());\n    assertFalse(compiler.privateFields());\n    compiler.compileToDestination(this.src, this.OUTPUT_DIR.getRoot());\n    assertTrue(this.outputFile.exists());\n    try(BufferedReader reader = new BufferedReader(new FileReader(this.outputFile))) {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        // No line, once trimmed, should start with a deprecated field declaration\n        // nor a private field declaration.  Since the nested builder uses private\n        // fields, we cannot do the second check.\n        line = line.trim();\n        assertFalse(""Line started with a deprecated field declaration: "" + line,\n                line.startsWith(""@Deprecated public int value""));\n      }\n    }\n  }\n']",OUTPUT;should;deprecated;we;output;declaration;src;the;Field;create,5.675246939063072e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.898323059082031, -5.759207248687744, -6.393979072570801, -5.436868667602539, -5.580534934997559, -0.015817293897271156]",0.9843071699142456
3,"['  @Test\n  public void testCreateAllArgsConstructor() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n    compiler.compileToDestination(this.src, this.OUTPUT_DIR.getRoot());\n    assertTrue(this.outputFile.exists());\n    boolean foundAllArgsConstructor = false;\n    try(BufferedReader reader = new BufferedReader(new FileReader(this.outputFile))) {\n      String line;\n      while (!foundAllArgsConstructor && (line = reader.readLine()) != null) {\n        foundAllArgsConstructor = line.contains(""All-args constructor"");\n      }\n    }\n    assertTrue(foundAllArgsConstructor);\n  }\n']",OUTPUT;src;Specific;DIR;output;Constructor;All;Destination;All;found,9.313225746154785e-10;8.731149137020111e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.710738383233547e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.859416484832764, -5.721135139465332, -6.299985408782959, -5.374649524688721, -5.483613967895508, -0.01689399965107441]",0.9832478761672974
3,"['  @Test\n  public void testMaxValidParameterCounts() throws Exception {\n    Schema validSchema1 = createSampleRecordSchema(SpecificCompiler.MAX_FIELD_PARAMETER_UNIT_COUNT, 0);\n    assertCompilesWithJavaCompiler(new File(OUTPUT_DIR.getRoot(), name.getMethodName() + ""1""), new SpecificCompiler(validSchema1).compile());\n\n    Schema validSchema2 = createSampleRecordSchema(SpecificCompiler.MAX_FIELD_PARAMETER_UNIT_COUNT - 2, 1);\n    assertCompilesWithJavaCompiler(new File(OUTPUT_DIR.getRoot(), name.getMethodName() + ""2""), new SpecificCompiler(validSchema1).compile());\n  }\n']",Max;Java;create;OUNT;DIR;Compiles;Sample;File;Schema;Schema,2.0954757928848267e-09;8.149072527885437e-10;5.966285243630409e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2741809263825417e-10;3.2014213502407074e-10,5,5,"[-5.855523109436035, -5.709902763366699, -6.32606840133667, -5.411565780639648, -5.473719596862793, -0.01676599681377411]",0.9833736419677734
3,"['  @Test\n  public void testInvalidParameterCounts() throws Exception {\n    Schema invalidSchema1 = createSampleRecordSchema(SpecificCompiler.MAX_FIELD_PARAMETER_UNIT_COUNT + 1, 0);\n    SpecificCompiler compiler = new SpecificCompiler(invalidSchema1);\n    assertCompilesWithJavaCompiler(new File(OUTPUT_DIR.getRoot(), name.getMethodName() + ""1""), compiler.compile());\n\n    Schema invalidSchema2 = createSampleRecordSchema(SpecificCompiler.MAX_FIELD_PARAMETER_UNIT_COUNT, 10);\n    compiler = new SpecificCompiler(invalidSchema2);\n    assertCompilesWithJavaCompiler(new File(OUTPUT_DIR.getRoot(), name.getMethodName() + ""2""), compiler.compile());\n  }\n']",invalid;Parameter;Compiler;Compiler;OUTPUT;MAX;Schema;PARAMETER;File;Specific,6.402842700481415e-10;4.0745362639427185e-10;3.8562575355172157e-10;2.9831426218152046e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;2.0372681319713593e-10,5,5,"[-5.838933944702148, -5.693933010101318, -6.302361965179443, -5.397127151489258, -5.458188056945801, -0.01704554446041584]",0.9830989241600037
3,"['  @Test\n  public void testMaxParameterCounts() throws Exception {\n    Schema validSchema1 = createSampleRecordSchema(SpecificCompiler.MAX_FIELD_PARAMETER_UNIT_COUNT, 0);\n    assertTrue(new SpecificCompiler(validSchema1).compile().size() > 0);\n\n    Schema validSchema2 = createSampleRecordSchema(SpecificCompiler.MAX_FIELD_PARAMETER_UNIT_COUNT - 2, 1);\n    assertTrue(new SpecificCompiler(validSchema2).compile().size() > 0);\n\n    Schema validSchema3 = createSampleRecordSchema(SpecificCompiler.MAX_FIELD_PARAMETER_UNIT_COUNT - 1, 1);\n    assertTrue(new SpecificCompiler(validSchema3).compile().size() > 0);\n\n    Schema validSchema4 = createSampleRecordSchema(SpecificCompiler.MAX_FIELD_PARAMETER_UNIT_COUNT + 1, 0);\n    assertTrue(new SpecificCompiler(validSchema4).compile().size() > 0);\n  }\n']",Parameter;Sample;MAX;PARAMETER;MAX;create;Schema;Max;MAX;Specific,5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;2.4010660126805305e-10;2.1827872842550278e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.831964015960693, -5.695993423461914, -6.290816783905029, -5.364028453826904, -5.477701187133789, -0.01715218462049961]",0.9829940795898438
3,['  @Test(expected=RuntimeException.class)\n  public void testCalcAllArgConstructorParameterUnitsFailure() {\n    Schema nonRecordSchema = SchemaBuilder.array().items().booleanType();\n    new SpecificCompiler().calcAllArgConstructorParameterUnits(nonRecordSchema);\n  }\n'],Exception;Arg;Schema;boolean;non;All;Parameter;non;array;cal,1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;1.7462298274040222e-10,5,5,"[-5.908246994018555, -5.789157390594482, -6.41190767288208, -5.521941661834717, -5.520485877990723, -0.015541511587798595]",0.9845786094665527
3,"['  @Test\n  public void testPublicDeprecatedFieldVisibility() throws IOException {\n    SpecificCompiler compiler = createCompiler();\n    assertTrue(compiler.deprecatedFields());\n    assertTrue(compiler.publicFields());\n    assertFalse(compiler.privateFields());\n    compiler.compileToDestination(this.src, this.OUTPUT_DIR.getRoot());\n    assertTrue(this.outputFile.exists());\n    BufferedReader reader = new BufferedReader(new FileReader(this.outputFile));\n    String line;\n    while ((line = reader.readLine()) != null) {\n      // No line, once trimmed, should start with a public field declaration\n      line = line.trim();\n      assertFalse(""Line started with a public field declaration: "" + line,\n        line.startsWith(""public int value""));\n    }\n    reader.close();\n  }\n']",Deprecated;OUTPUT;declaration;compiler;should;compiler;Destination;compiler;Compiler;DIR,1.280568540096283e-09;8.149072527885437e-10;8.003553375601768e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.055902197957039e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.879868507385254, -5.763708114624023, -6.36037015914917, -5.397655963897705, -5.533750534057617, -0.01627340354025364]",0.9838582873344421
3,"['  @Test\n  public void testPrivateFieldVisibility() throws IOException {\n    SpecificCompiler compiler = createCompiler();\n    compiler.setFieldVisibility(SpecificCompiler.FieldVisibility.PRIVATE);\n    assertFalse(compiler.deprecatedFields());\n    assertFalse(compiler.publicFields());\n    assertTrue(compiler.privateFields());\n    compiler.compileToDestination(this.src, this.OUTPUT_DIR.getRoot());\n    assertTrue(this.outputFile.exists());\n    BufferedReader reader = new BufferedReader(new FileReader(this.outputFile));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      // No line, once trimmed, should start with a public field declaration\n      // or with a deprecated public field declaration\n      line = line.trim();\n      assertFalse(""Line started with a public field declaration: "" + line,\n        line.startsWith(""public int value""));\n      assertFalse(""Line started with a deprecated field declaration: "" + line,\n        line.startsWith(""@Deprecated public int value""));\n    }\n    reader.close();\n  }\n']",Visibility;declaration;deprecated;Specific;once;DIR;starts;compile;Visibility;deprecated,5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.884084224700928, -5.761699199676514, -6.371952533721924, -5.411159038543701, -5.561645030975342, -0.016075406223535538]",0.9840531349182129
3,"['  @Test\n  public void testSettersCreatedByDefault() throws IOException {\n    SpecificCompiler compiler = createCompiler();\n    assertTrue(compiler.isCreateSetters());\n    compiler.compileToDestination(this.src, this.OUTPUT_DIR.getRoot());\n    assertTrue(this.outputFile.exists());\n    int foundSetters = 0;\n    try(BufferedReader reader = new BufferedReader(new FileReader(this.outputFile))) {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        // We should find the setter in the main class\n        line = line.trim();\n        if (line.startsWith(""public void setValue("")) {\n          foundSetters++;\n        }\n']",Setters;By;Default;Specific;compiler;output;setter;Destination;compiler;Buffered,2.3283064365386963e-09;1.3969838619232178e-09;9.313225746154785e-10;6.693881005048752e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.880229473114014, -5.7365803718566895, -6.328213214874268, -5.383329391479492, -5.514251232147217, -0.01656305603682995]",0.9835733771324158
3,"['  @Test\n  public void testSettingOutputCharacterEncoding() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n    // Generated file in default encoding\n    compiler.compileToDestination(this.src, this.OUTPUT_DIR.getRoot());\n    byte[] fileInDefaultEncoding = new byte[(int) this.outputFile.length()];\n    FileInputStream is = new FileInputStream(this.outputFile);\n    is.read(fileInDefaultEncoding);\n    is.close(); //close input stream otherwise delete might fail\n    if (!this.outputFile.delete()) {\n      throw new IllegalStateException(""unable to delete "" + this.outputFile); //delete otherwise compiler might not overwrite because src timestamp hasn\'t changed.\n    }\n    // Generate file in another encoding (make sure it has different number of bytes per character)\n    String differentEncoding = Charset.defaultCharset().equals(Charset.forName(""UTF-16"")) ? ""UTF-32"" : ""UTF-16"";\n    compiler.setOutputCharacterEncoding(differentEncoding);\n    compiler.compileToDestination(this.src, this.OUTPUT_DIR.getRoot());\n    byte[] fileInDifferentEncoding = new byte[(int) this.outputFile.length()];\n    is = new FileInputStream(this.outputFile);\n    is.read(fileInDifferentEncoding);\n    is.close();\n    // Compare as bytes\n    assertThat(""Generated file should contain different bytes after setting non-default encoding"",\n      fileInDefaultEncoding, not(equalTo(fileInDifferentEncoding)));\n    // Compare as strings\n    assertThat(""Generated files should contain the same characters in the proper encodings"",\n      new String(fileInDefaultEncoding), equalTo(new String(fileInDifferentEncoding, differentEncoding)));\n  }\n']",non;default;after;encoding;different;setting;That;Compare;src;default,2.7939677238464355e-09;1.862645149230957e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.873405456542969, -5.696493625640869, -6.399069786071777, -5.473567962646484, -5.609591484069824, -0.015817411243915558]",0.9843071699142456
3,"['  @Test\n  public void testJavaTypeWithDecimalLogicalTypeEnabled() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n    compiler.setEnableDecimalLogicalType(true);\n\n    Schema dateSchema = LogicalTypes.date()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timeSchema = LogicalTypes.timeMillis()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timestampSchema = LogicalTypes.timestampMillis()\n        .addToSchema(Schema.create(Schema.Type.LONG));\n    Schema decimalSchema = LogicalTypes.decimal(9,2)\n        .addToSchema(Schema.create(Schema.Type.BYTES));\n    Schema uuidSchema = LogicalTypes.uuid()\n        .addToSchema(Schema.create(Schema.Type.STRING));\n\n    // Date/time types should always use upper level java classes\n    // Decimal type target class depends on configuration\n    // UUID should always be CharSequence since we haven\'t added its\n    // support in SpecificRecord\n    Assert.assertEquals(""Should use Joda LocalDate for date type"",\n        ""org.joda.time.LocalDate"", compiler.javaType(dateSchema));\n    Assert.assertEquals(""Should use Joda LocalTime for time-millis type"",\n        ""org.joda.time.LocalTime"", compiler.javaType(timeSchema));\n    Assert.assertEquals(""Should use Joda DateTime for timestamp-millis type"",\n        ""org.joda.time.DateTime"", compiler.javaType(timestampSchema));\n    Assert.assertEquals(""Should use Java BigDecimal type"",\n        ""java.math.BigDecimal"", compiler.javaType(decimalSchema));\n    Assert.assertEquals(""Should use Java CharSequence type"",\n        ""java.lang.CharSequence"", compiler.javaType(uuidSchema));\n  }\n']",type;Type;compiler;Compiler;Exception;compiler;haven't;time;on;depends,9.89530235528946e-10;6.693881005048752e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.815556049346924, -5.6328816413879395, -6.312957286834717, -5.393940448760986, -5.57454252243042, -0.01685016229748726]",0.9832910299301147
3,"['  @Test\n  public void testJavaTypeWithDecimalLogicalTypeDisabled() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n    compiler.setEnableDecimalLogicalType(false);\n\n    Schema dateSchema = LogicalTypes.date()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timeSchema = LogicalTypes.timeMillis()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timestampSchema = LogicalTypes.timestampMillis()\n        .addToSchema(Schema.create(Schema.Type.LONG));\n    Schema decimalSchema = LogicalTypes.decimal(9,2)\n        .addToSchema(Schema.create(Schema.Type.BYTES));\n    Schema uuidSchema = LogicalTypes.uuid()\n        .addToSchema(Schema.create(Schema.Type.STRING));\n\n    // Date/time types should always use upper level java classes\n    // Decimal type target class depends on configuration\n    // UUID should always be CharSequence since we haven\'t added its\n    // support in SpecificRecord\n    Assert.assertEquals(""Should use Joda LocalDate for date type"",\n        ""org.joda.time.LocalDate"", compiler.javaType(dateSchema));\n    Assert.assertEquals(""Should use Joda LocalTime for time-millis type"",\n        ""org.joda.time.LocalTime"", compiler.javaType(timeSchema));\n    Assert.assertEquals(""Should use Joda DateTime for timestamp-millis type"",\n        ""org.joda.time.DateTime"", compiler.javaType(timestampSchema));\n    Assert.assertEquals(""Should use ByteBuffer type"",\n        ""java.nio.ByteBuffer"", compiler.javaType(decimalSchema));\n    Assert.assertEquals(""Should use Java CharSequence type"",\n        ""java.lang.CharSequence"", compiler.javaType(uuidSchema));\n  }\n']",Java;Disabled;upper;java;compiler;on;compiler;in;always;date,2.3283064365386963e-09;1.6880221664905548e-09;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2741809263825417e-10,5,5,"[-5.817381381988525, -5.629756450653076, -6.315539836883545, -5.398307800292969, -5.576367378234863, -0.01682402193546295]",0.9833166003227234
3,"['  @Test\n  public void testJavaTypeWithJsr310DateTimeTypes() throws Exception {\n    SpecificCompiler compiler = createCompiler(JSR310);\n\n    Schema dateSchema = LogicalTypes.date()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timeSchema = LogicalTypes.timeMillis()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timestampSchema = LogicalTypes.timestampMillis()\n        .addToSchema(Schema.create(Schema.Type.LONG));\n\n    // Date/time types should always use upper level java classes\n    Assert.assertEquals(""Should use java.time.LocalDate for date type"",\n        ""java.time.LocalDate"", compiler.javaType(dateSchema));\n    Assert.assertEquals(""Should use java.time.LocalTime for time-millis type"",\n        ""java.time.LocalTime"", compiler.javaType(timeSchema));\n    Assert.assertEquals(""Should use java.time.Instant for timestamp-millis type"",\n        ""java.time.Instant"", compiler.javaType(timestampSchema));\n  }\n']",upper;level;compiler;Compiler;java;Assert;types;Should;Specific;Exception,3.725290298461914e-09;2.6193447411060333e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;4.5838532969355583e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.816954612731934, -5.6777424812316895, -6.312912940979004, -5.3844451904296875, -5.522279739379883, -0.016937367618083954]",0.983205258846283
3,"['  @Test\n  public void testJavaUnbox() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n    compiler.setEnableDecimalLogicalType(false);\n\n    Schema intSchema = Schema.create(Schema.Type.INT);\n    Schema longSchema = Schema.create(Schema.Type.LONG);\n    Schema floatSchema = Schema.create(Schema.Type.FLOAT);\n    Schema doubleSchema = Schema.create(Schema.Type.DOUBLE);\n    Schema boolSchema = Schema.create(Schema.Type.BOOLEAN);\n    Assert.assertEquals(""Should use int for Type.INT"",\n        ""int"", compiler.javaUnbox(intSchema));\n    Assert.assertEquals(""Should use long for Type.LONG"",\n        ""long"", compiler.javaUnbox(longSchema));\n    Assert.assertEquals(""Should use float for Type.FLOAT"",\n        ""float"", compiler.javaUnbox(floatSchema));\n    Assert.assertEquals(""Should use double for Type.DOUBLE"",\n        ""double"", compiler.javaUnbox(doubleSchema));\n    Assert.assertEquals(""Should use boolean for Type.BOOLEAN"",\n        ""boolean"", compiler.javaUnbox(boolSchema));\n\n    Schema dateSchema = LogicalTypes.date()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timeSchema = LogicalTypes.timeMillis()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timestampSchema = LogicalTypes.timestampMillis()\n        .addToSchema(Schema.create(Schema.Type.LONG));\n    // Date/time types should always use upper level java classes, even though\n    // their underlying representations are primitive types\n    Assert.assertEquals(""Should use Joda LocalDate for date type"",\n        ""org.joda.time.LocalDate"", compiler.javaUnbox(dateSchema));\n    Assert.assertEquals(""Should use Joda LocalTime for time-millis type"",\n        ""org.joda.time.LocalTime"", compiler.javaUnbox(timeSchema));\n    Assert.assertEquals(""Should use Joda DateTime for timestamp-millis type"",\n        ""org.joda.time.DateTime"", compiler.javaUnbox(timestampSchema));\n  }\n']",Mill;INT;float;long;long;FL;Specific;Type;Unbox;Schema,1.0477378964424133e-09;5.238689482212067e-10;4.3655745685100555e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.79669189453125, -5.627090930938721, -6.238657474517822, -5.296860218048096, -5.502079963684082, -0.017832664772868156]",0.9823252558708191
3,"['  @Test\n  public void testJavaUnboxJsr310DateTime() throws Exception {\n    SpecificCompiler compiler = createCompiler(JSR310);\n\n    Schema dateSchema = LogicalTypes.date()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timeSchema = LogicalTypes.timeMillis()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timestampSchema = LogicalTypes.timestampMillis()\n        .addToSchema(Schema.create(Schema.Type.LONG));\n    // Date/time types should always use upper level java classes, even though\n    // their underlying representations are primitive types\n    Assert.assertEquals(""Should use java.time.LocalDate for date type"",\n        ""java.time.LocalDate"", compiler.javaUnbox(dateSchema));\n    Assert.assertEquals(""Should use java.time.LocalTime for time-millis type"",\n        ""java.time.LocalTime"", compiler.javaUnbox(timeSchema));\n    Assert.assertEquals(""Should use java.time.Instant for timestamp-millis type"",\n        ""java.time.Instant"", compiler.javaUnbox(timestampSchema));\n  }\n']",upper;classes;Compiler;use;compiler;Java;date;should;java;compiler,1.3969838619232178e-09;1.1641532182693481e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.811630725860596, -5.6650824546813965, -6.305468559265137, -5.37847900390625, -5.528266906738281, -0.017015308141708374]",0.9831286072731018
3,"['  @Test\n  public void testNullableTypesJavaUnbox() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n    compiler.setEnableDecimalLogicalType(false);\n\n    // Nullable types should return boxed types instead of primitive types\n    Schema nullableIntSchema1 = Schema.createUnion(\n        Schema.create(Schema.Type.NULL), Schema.create(Schema.Type.INT));\n    Schema nullableIntSchema2 = Schema.createUnion(\n        Schema.create(Schema.Type.INT), Schema.create(Schema.Type.NULL));\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableIntSchema1), ""java.lang.Integer"");\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableIntSchema2), ""java.lang.Integer"");\n\n    Schema nullableLongSchema1 = Schema.createUnion(\n        Schema.create(Schema.Type.NULL), Schema.create(Schema.Type.LONG));\n    Schema nullableLongSchema2 = Schema.createUnion(\n        Schema.create(Schema.Type.LONG), Schema.create(Schema.Type.NULL));\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableLongSchema1), ""java.lang.Long"");\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableLongSchema2), ""java.lang.Long"");\n\n    Schema nullableFloatSchema1 = Schema.createUnion(\n        Schema.create(Schema.Type.NULL), Schema.create(Schema.Type.FLOAT));\n    Schema nullableFloatSchema2 = Schema.createUnion(\n        Schema.create(Schema.Type.FLOAT), Schema.create(Schema.Type.NULL));\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableFloatSchema1), ""java.lang.Float"");\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableFloatSchema2), ""java.lang.Float"");\n\n    Schema nullableDoubleSchema1 = Schema.createUnion(\n        Schema.create(Schema.Type.NULL), Schema.create(Schema.Type.DOUBLE));\n    Schema nullableDoubleSchema2 = Schema.createUnion(\n        Schema.create(Schema.Type.DOUBLE), Schema.create(Schema.Type.NULL));\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableDoubleSchema1), ""java.lang.Double"");\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableDoubleSchema2), ""java.lang.Double"");\n\n    Schema nullableBooleanSchema1 = Schema.createUnion(\n        Schema.create(Schema.Type.NULL), Schema.create(Schema.Type.BOOLEAN));\n    Schema nullableBooleanSchema2 = Schema.createUnion(\n        Schema.create(Schema.Type.BOOLEAN), Schema.create(Schema.Type.NULL));\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableBooleanSchema1), ""java.lang.Boolean"");\n    Assert.assertEquals(""Should return boxed type"",\n        compiler.javaUnbox(nullableBooleanSchema2), ""java.lang.Boolean"");\n  }\n']",Nullable;NULL;Exception;Types;types;Union;Unbox;of;java;AT,5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.816417217254639, -5.660271167755127, -6.2569756507873535, -5.28361177444458, -5.494402885437012, -0.017716726288199425]",0.982439398765564
3,"['  @Test\n  public void testLogicalTypesWithMultipleFields() throws Exception {\n    Schema logicalTypesWithMultipleFields = new Schema.Parser().parse(\n        new File(""src/test/resources/logical_types_with_multiple_fields.avsc""));\n    assertCompilesWithJavaCompiler(new File(OUTPUT_DIR.getRoot(), name.getMethodName()),\n        new SpecificCompiler(logicalTypesWithMultipleFields).compile());\n  }\n']",DIR;logical;src;avsc;Types;Root;Java;OUTPUT;Multiple;fields,1.8917489796876907e-09;1.4551915228366852e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.916937351226807, -5.794938564300537, -6.408938884735107, -5.480401992797852, -5.487485408782959, -0.015813423320651054]",0.9843109250068665
3,"['  @Test\n  public void testUnionAndFixedFields() throws Exception {\n    Schema unionTypesWithMultipleFields = new Schema.Parser().parse(\n        new File(""src/test/resources/union_and_fixed_fields.avsc""));\n    assertCompilesWithJavaCompiler(new File(this.outputFile, name.getMethodName()),\n        new SpecificCompiler(unionTypesWithMultipleFields).compile());\n  }\n']",resources;File;fields;union;Method;compile;union;Exception;Schema;File,1.3969838619232178e-09;1.3969838619232178e-09;5.529727786779404e-10;5.238689482212067e-10;3.7834979593753815e-10;3.346940502524376e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.900694370269775, -5.775083065032959, -6.3880510330200195, -5.467258453369141, -5.476157188415527, -0.016059452667832375]",0.9840688109397888
3,"['  @Test\n  public void testLogicalTypesWithMultipleFieldsJsr310DateTime() throws Exception {\n    Schema logicalTypesWithMultipleFields = new Schema.Parser().parse(\n        new File(""src/test/resources/logical_types_with_multiple_fields.avsc""));\n    assertCompilesWithJavaCompiler(new File(this.outputFile, name.getMethodName()),\n        new SpecificCompiler(logicalTypesWithMultipleFields, JSR310).compile());\n  }\n']",sr;SR;Date;Multiple;Logical;Exception;new;parse;File;logical,8.440110832452774e-10;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10;3.2014213502407074e-10,5,5,"[-5.913261890411377, -5.803549289703369, -6.404573917388916, -5.476734638214111, -5.485900402069092, -0.01582656428217888]",0.9842979907989502
3,"['  @Test\n  public void testConversionInstanceWithDecimalLogicalTypeDisabled() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n    compiler.setEnableDecimalLogicalType(false);\n\n    Schema dateSchema = LogicalTypes.date()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timeSchema = LogicalTypes.timeMillis()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timestampSchema = LogicalTypes.timestampMillis()\n        .addToSchema(Schema.create(Schema.Type.LONG));\n    Schema decimalSchema = LogicalTypes.decimal(9,2)\n        .addToSchema(Schema.create(Schema.Type.BYTES));\n    Schema uuidSchema = LogicalTypes.uuid()\n        .addToSchema(Schema.create(Schema.Type.STRING));\n\n    Assert.assertEquals(""Should use DATE_CONVERSION for date type"",\n        ""DATE_CONVERSION"", compiler.conversionInstance(dateSchema));\n    Assert.assertEquals(""Should use TIME_CONVERSION for time type"",\n        ""TIME_CONVERSION"", compiler.conversionInstance(timeSchema));\n    Assert.assertEquals(""Should use TIMESTAMP_CONVERSION for date type"",\n        ""TIMESTAMP_CONVERSION"", compiler.conversionInstance(timestampSchema));\n    Assert.assertEquals(""Should use null for decimal if the flag is off"",\n        ""null"", compiler.conversionInstance(decimalSchema));\n    Assert.assertEquals(""Should use null for decimal if the flag is off"",\n        ""null"", compiler.conversionInstance(uuidSchema));\n  }\n']",Exception;flag;Disabled;set;Mill;ONG;uuid;Instance;null;decimal,6.402842700481415e-10;5.820766091346741e-10;4.802132025361061e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.802285671234131, -5.618463039398193, -6.272758483886719, -5.360017776489258, -5.543336868286133, -0.01730099506676197]",0.9828478097915649
3,"['  @Test\n  public void testConversionInstanceWithDecimalLogicalTypeEnabled() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n    compiler.setEnableDecimalLogicalType(true);\n\n    Schema dateSchema = LogicalTypes.date()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timeSchema = LogicalTypes.timeMillis()\n        .addToSchema(Schema.create(Schema.Type.INT));\n    Schema timestampSchema = LogicalTypes.timestampMillis()\n        .addToSchema(Schema.create(Schema.Type.LONG));\n    Schema decimalSchema = LogicalTypes.decimal(9,2)\n        .addToSchema(Schema.create(Schema.Type.BYTES));\n    Schema uuidSchema = LogicalTypes.uuid()\n        .addToSchema(Schema.create(Schema.Type.STRING));\n\n    Assert.assertEquals(""Should use DATE_CONVERSION for date type"",\n        ""DATE_CONVERSION"", compiler.conversionInstance(dateSchema));\n    Assert.assertEquals(""Should use TIME_CONVERSION for time type"",\n        ""TIME_CONVERSION"", compiler.conversionInstance(timeSchema));\n    Assert.assertEquals(""Should use TIMESTAMP_CONVERSION for date type"",\n        ""TIMESTAMP_CONVERSION"", compiler.conversionInstance(timestampSchema));\n    Assert.assertEquals(""Should use null for decimal if the flag is off"",\n        ""DECIMAL_CONVERSION"", compiler.conversionInstance(decimalSchema));\n    Assert.assertEquals(""Should use null for decimal if the flag is off"",\n        ""null"", compiler.conversionInstance(uuidSchema));\n  }\n']",timestamp;Mill;if;Logical;the;Exception;the;null;Conversion;ONG,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.802351474761963, -5.621133327484131, -6.275881290435791, -5.366199970245361, -5.549121856689453, -0.01723245158791542]",0.9829151630401611
3,"['  @Test\n  public void textCloning() {\n    Schema recSchema = new Schema.Parser().parse(SCHEMA);\n    Schemas.visit(recSchema, new PrintingVisitor());\n\n\n    CloningVisitor cv = new CloningVisitor(recSchema);\n    Schema trimmed = Schemas.visit(recSchema, cv);\n    Assert.assertNull(trimmed.getDoc());\n    Assert.assertNotNull(recSchema.getDoc());\n\n    SchemaCompatibility.SchemaCompatibilityType compat =\n        SchemaCompatibility.checkReaderWriterCompatibility(trimmed, recSchema).getType();\n    Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat);\n    compat = SchemaCompatibility.checkReaderWriterCompatibility(recSchema, trimmed).getType();\n    Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat);\n    Assert.assertNotNull(cv.toString());\n  }\n']",CHEMA;Cloning;Schema;rec;COM;compat;compat;new;rec;Schema,5.238689482212067e-10;4.656612873077393e-10;3.2741809263825417e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.823915958404541, -5.696927547454834, -6.267652988433838, -5.3143157958984375, -5.468923568725586, -0.017497461289167404]",0.9826546311378479
3,"['  @Test\n  public void textCloningCopyDocs() {\n    Schema recSchema = new Schema.Parser().parse(SCHEMA);\n    Schemas.visit(recSchema, new PrintingVisitor());\n\n\n    Schema trimmed = Schemas.visit(recSchema, new CloningVisitor(new CloningVisitor.PropertyCopier() {\n      @Override\n      public void copy(final Schema first, final Schema second) {\n        Schemas.copyLogicalTypes(first, second);\n        Schemas.copyAliases(first, second);\n      }\n']",Cloning;Cloning;CHEMA;new;Cloning;second;final;Schema;visit;Printing,9.89530235528946e-10;9.313225746154785e-10;7.275957614183426e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.853370666503906, -5.714747428894043, -6.287196159362793, -5.352656841278076, -5.467119216918945, -0.017132030799984932]",0.9830138683319092
3,"['  @Test(expected = IllegalStateException.class)\n  public void testCloningError1() {\n    // Visit Terminal with union\n    Schema recordSchema = new Schema.Parser().parse(\n        ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""R\\"", \\""fields\\"":[{\\""name\\"": \\""f1\\"", \\""type\\"": [\\""int\\"", \\""long\\""]}]}"");\n    new CloningVisitor(recordSchema).visitTerminal(recordSchema.getField(""f1"").schema());\n  }\n']",expected;class;Cloning;name;fields;get;Visit;Schema;Exception;Cloning,1.3969838619232178e-09;1.1059455573558807e-09;1.1059455573558807e-09;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.904722690582275, -5.821446418762207, -6.406916618347168, -5.442733287811279, -5.513391017913818, -0.015824569389224052]",0.9842999577522278
3,"['  @Test(expected = IllegalStateException.class)\n  public void testCloningError2() {\n    // After visit Non-terminal with int\n    Schema recordSchema = new Schema.Parser().parse(\n        ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""R\\"", \\""fields\\"":[{\\""name\\"": \\""f1\\"", \\""type\\"": \\""int\\""}]}"");\n    new CloningVisitor(recordSchema).afterVisitNonTerminal(recordSchema.getField(""f1"").schema());\n  }\n']",Terminal;fields;visit;Illegal;Cloning;after;Non;Cloning;After;Exception,9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.916499137878418, -5.83787727355957, -6.426800727844238, -5.462953567504883, -5.533802509307861, -0.015539281070232391]",0.9845808148384094
3,"['  @Test\n  public void testHasGeneratedJavaClass() {\n    Assert.assertTrue(Schemas.hasGeneratedJavaClass(\n        new Schema.Parser().parse(""{\\""type\\"": \\""fixed\\"", \\""name\\"": \\""N\\"", \\""size\\"": 10}"")));\n    Assert.assertFalse(Schemas.hasGeneratedJavaClass(new Schema.Parser().parse(""{\\""type\\"": \\""int\\""}"")));\n  }\n']",Class;Class;Class;Assert;fixed;True;parse;Parser;Schemas;Java,7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;2.9103830456733704e-10;2.764863893389702e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.856053829193115, -5.726217746734619, -6.314713478088379, -5.3930230140686035, -5.449424743652344, -0.016920607537031174]",0.9832216501235962
3,"['  @Test\n  public void testGetJavaClassName() {\n    Assert.assertEquals(""N"", Schemas.getJavaClassName(\n        new Schema.Parser().parse(""{\\""type\\"": \\""fixed\\"", \\""name\\"": \\""N\\"", \\""size\\"": 10}"")));\n    Assert.assertEquals(""N"", Schemas.getJavaClassName(\n        new Schema.Parser().parse(""{\\""type\\"": \\""fixed\\"", \\""name\\"": \\""N\\"", \\""size\\"": 10, \\""namespace\\"": \\""\\""}"")));\n    Assert.assertEquals(""com.example.N"", Schemas.getJavaClassName(\n        new Schema.Parser().parse(""{\\""type\\"": \\""fixed\\"", \\""name\\"": \\""N\\"", \\""size\\"": 10, \\""namespace\\"": \\""com.example\\""}"")));\n  }\n']",fixed;Java;Assert;type;Schemas;Java;Schema;Schemas;Class;Assert,5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.382431946694851e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.813204765319824, -5.696008205413818, -6.253572463989258, -5.318673610687256, -5.4373369216918945, -0.01767643727362156]",0.9824789762496948
3,"['  @Test\n  public void testVisit1() {\n    String s1 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""t1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": \\""int\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""t1."", Schemas.visit(new Schema.Parser().parse(s1), new TestVisitor()));\n  }\n']",Visit;Assert;Visitor;Schemas;Equals;Schema;new;name;Parser;name,1.3969838619232178e-09;4.3655745685100555e-10;4.2928149923682213e-10;4.147295840084553e-10;4.001776687800884e-10;3.055902197957039e-10;1.6007106751203537e-10;5.820766091346741e-11;2.9103830456733704e-11;0.0,5,5,"[-5.843894004821777, -5.746058940887451, -6.298250675201416, -5.379129886627197, -5.440637588500977, -0.017025034874677658]",0.9831190705299377
3,"['  @Test\n  public void testVisit2() {\n    String s2 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": \\""int\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""c1.\\""int\\""!"", Schemas.visit(new Schema.Parser().parse(s2), new TestVisitor()));\n\n  }\n']",Schema;type;new;new;record;Equals;name;Parser;type;Schemas,5.456968210637569e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;2.9103830456733704e-11;0.0;-2.1827872842550278e-11,5,5,"[-5.849990367889404, -5.749258518218994, -6.305939197540283, -5.3856940269470215, -5.45385217666626, -0.016893882304430008]",0.9832479953765869
3,"['  @Test\n  public void testVisit3() {\n    String s3 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""ss1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": \\""int\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""ss1."", Schemas.visit(new Schema.Parser().parse(s3), new TestVisitor()));\n\n  }\n']",Visit;Parser;new;name;type;type;name;Equals;Schemas;ss,6.402842700481415e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.0186340659856796e-10;5.820766091346741e-11;5.820766091346741e-11;5.093170329928398e-11;-4.3655745685100555e-11;-5.820766091346741e-11,5,5,"[-5.853865623474121, -5.74927282333374, -6.313211441040039, -5.387381553649902, -5.445137023925781, -0.01689927466213703]",0.9832426905632019
3,"['  @Test\n  public void testVisit4() {\n    String s4 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""st1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": \\""int\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""st1.!"", Schemas.visit(new Schema.Parser().parse(s4), new TestVisitor()));\n\n  }\n']",Visit;st;name;visit;name;type;Schemas;new;Equals;type,8.149072527885437e-10;7.130438461899757e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.1641532182693481e-10;5.820766091346741e-11;1.4551915228366852e-11;0.0;0.0;0.0,5,5,"[-5.849462032318115, -5.741667747497559, -6.314979076385498, -5.391960144042969, -5.467824459075928, -0.016813823953270912]",0.9833267331123352
3,"['  @Test\n  public void testVisit5() {\n    String s5 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": {\\""type\\"": \\""record\\"", \\""name\\"": \\""c2\\"", \\""fields\\"": "" +\n        ""[{\\""name\\"": \\""f11\\"", \\""type\\"": \\""int\\""}]}},"" +\n        ""{\\""name\\"": \\""f2\\"", \\""type\\"": \\""long\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""c1.c2.\\""int\\""!\\""long\\""!"",\n        Schemas.visit(new Schema.Parser().parse(s5), new TestVisitor()));\n\n  }\n']",Schema;fields;visit;name;type;Visitor;parse;Equals;Parser;type,3.92901711165905e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10;8.731149137020111e-11,5,5,"[-5.845246315002441, -5.758963584899902, -6.309068202972412, -5.34835958480835, -5.479034900665283, -0.016939712688326836]",0.9832029342651367
3,"['  @Test\n  public void testVisit6() {\n    String s6 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": {\\""type\\"": \\""record\\"", \\""name\\"": \\""ss2\\"", \\""fields\\"": "" +\n        ""[{\\""name\\"": \\""f11\\"", \\""type\\"": \\""int\\""}]}},"" +\n        ""{\\""name\\"": \\""f2\\"", \\""type\\"": \\""long\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""c1.ss2.!"",\n        Schemas.visit(new Schema.Parser().parse(s6), new TestVisitor()));\n\n  }\n']",Schema;Visitor;Visit;Parser;Schemas;record;parse;visit;type;long,1.4842953532934189e-09;1.3242242857813835e-09;7.566995918750763e-10;6.984919309616089e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.840080261230469, -5.749612331390381, -6.296276569366455, -5.33923864364624, -5.468685150146484, -0.017097460106015205]",0.9830478429794312
3,"['  @Test\n  public void testVisit7() {\n    String s7 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": {\\""type\\"": \\""record\\"", \\""name\\"": \\""css2\\"", \\""fields\\"": "" +\n        ""[{\\""name\\"": \\""f11\\"", \\""type\\"": \\""int\\""}]}},"" +\n        ""{\\""name\\"": \\""f2\\"", \\""type\\"": \\""long\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""c1.css2.\\""int\\""!!"",\n        Schemas.visit(new Schema.Parser().parse(s7), new TestVisitor()));\n  }\n']",css;fields;record;Parser;type;name;new;Schemas;visit;type,4.656612873077393e-10;4.511093720793724e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;4.3655745685100555e-11;2.9103830456733704e-11;2.9103830456733704e-11,5,5,"[-5.851711273193359, -5.752539157867432, -6.3166046142578125, -5.360721588134766, -5.485631942749023, -0.016840199008584023]",0.9833008050918579
3,"['  @Test(expected = UnsupportedOperationException.class)\n  public void testVisit8() {\n    String s8 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": {\\""type\\"": \\""record\\"", \\""name\\"": \\""cst2\\"", \\""fields\\"": "" +\n        ""[{\\""name\\"": \\""f11\\"", \\""type\\"": \\""int\\""}]}},"" +\n        ""{\\""name\\"": \\""f2\\"", \\""type\\"": \\""int\\""}"" +\n        ""]}"";\n    Schemas.visit(new Schema.Parser().parse(s8), new TestVisitor());\n  }\n']",record;Visitor;Schema;expected;Unsupported;Exception;new;Schemas;type;Parser,4.656612873077393e-10;4.3655745685100555e-10;2.473825588822365e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10;8.731149137020111e-11;8.731149137020111e-11,5,5,"[-5.865654945373535, -5.773638725280762, -6.337796211242676, -5.38123083114624, -5.4953293800354, -0.016556138172745705]",0.9835801720619202
3,"['  @Test\n  public void testVisit9() {\n    String s9 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": {\\""type\\"": \\""record\\"", \\""name\\"": \\""ct2\\"", \\""fields\\"": "" +\n        ""[{\\""name\\"": \\""f11\\"", \\""type\\"": \\""int\\""}]}},"" +\n        ""{\\""name\\"": \\""f2\\"", \\""type\\"": \\""long\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""c1.ct2.\\""int\\""!"", Schemas.visit(new Schema.Parser().parse(s9), new TestVisitor()));\n  }\n']",Visit;type;parse;Parser;ct;name;type;Schemas;record;type,4.656612873077393e-10;2.9103830456733704e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.0186340659856796e-10,5,5,"[-5.842710494995117, -5.75551700592041, -6.303982257843018, -5.3515143394470215, -5.47163724899292, -0.016983898356556892]",0.9831594228744507
3,"['  @Test(expected = UnsupportedOperationException.class)\n  public void testVisit10() {\n    String s10 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": {\\""type\\"": \\""record\\"", \\""name\\"": \\""ct2\\"", \\""fields\\"": "" +\n        ""[{\\""name\\"": \\""f11\\"", \\""type\\"": \\""int\\""}]}},"" +\n        ""{\\""name\\"": \\""f2\\"", \\""type\\"": \\""int\\""}"" +\n        ""]}"";\n    Schemas.visit(new Schema.Parser().parse(s10),\n        new TestVisitor() {\n          public SchemaVisitorAction visitTerminal(Schema terminal) {\n            return SchemaVisitorAction.SKIP_SUBTREE;\n          }\n']",visit;REE;SKIP;Action;Exception;Schemas;Visit;Action;Visitor;type,2.3283064365386963e-09;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.964508555829525e-10;1.7462298274040222e-10,5,5,"[-5.859726905822754, -5.756409645080566, -6.324213027954102, -5.357311248779297, -5.514804840087891, -0.016685575246810913]",0.9834528565406799
3,"['  @Test\n  public void testVisit11() {\n    String s11 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": {\\""type\\"": \\""record\\"", \\""name\\"": \\""c2\\"", \\""fields\\"": "" +\n        ""[{\\""name\\"": \\""f11\\"", \\""type\\"": \\""int\\""},{\\""name\\"": \\""f12\\"", \\""type\\"": \\""double\\""}"" +\n        ""]}},"" +\n        ""{\\""name\\"": \\""f2\\"", \\""type\\"": \\""long\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""c1.c2.\\""int\\"".!\\""long\\"".!"", Schemas.visit(new Schema.Parser().parse(s11),\n        new TestVisitor() {\n          public SchemaVisitorAction visitTerminal(Schema terminal) {\n            sb.append(terminal).append(\'.\');\n            return SchemaVisitorAction.SKIP_SIBLINGS;\n          }\n']",terminal;long;Terminal;Equals;type;double;name;Visitor;name;Schema,6.984919309616089e-10;6.402842700481415e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.2732925824820995e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;8.003553375601768e-11,5,5,"[-5.8452348709106445, -5.735136032104492, -6.303696155548096, -5.3271331787109375, -5.507722854614258, -0.017010854557156563]",0.9831330180168152
3,"['  @Test\n  public void testVisit12() {\n    String s12 = ""{\\""type\\"": \\""record\\"", \\""name\\"": \\""c1\\"", \\""fields\\"": ["" +\n        ""{\\""name\\"": \\""f1\\"", \\""type\\"": {\\""type\\"": \\""record\\"", \\""name\\"": \\""ct2\\"", \\""fields\\"": "" +\n        ""[{\\""name\\"": \\""f11\\"", \\""type\\"": \\""int\\""}]}},"" +\n        ""{\\""name\\"": \\""f2\\"", \\""type\\"": \\""long\\""}"" +\n        ""]}"";\n    Assert.assertEquals(""c1.ct2.\\""int\\""."", Schemas.visit(new Schema.Parser().parse(s12),\n        new TestVisitor() {\n          public SchemaVisitorAction visitTerminal(Schema terminal) {\n            sb.append(terminal).append(\'.\');\n            return SchemaVisitorAction.TERMINATE;\n          }\n']",TERMINATE;Visit;Terminal;terminal;Schema;Action;Schema;record;Action;Visitor,7.8580342233181e-10;3.7834979593753815e-10;3.637978807091713e-10;2.6193447411060333e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;8.731149137020111e-11;8.731149137020111e-11,5,5,"[-5.843397617340088, -5.7344207763671875, -6.2916412353515625, -5.32067346572876, -5.489818572998047, -0.017147615551948547]",0.9829984307289124
3,"['  @Test\n  public void testVisit13() {\n    String s12 = ""{\\""type\\"": \\""int\\""}"";\n    Assert.assertEquals(""\\""int\\""."", Schemas.visit(new Schema.Parser().parse(s12),\n        new TestVisitor() {\n          public SchemaVisitorAction visitTerminal(Schema terminal) {\n            sb.append(terminal).append(\'.\');\n            return SchemaVisitorAction.SKIP_SIBLINGS;\n          }\n']",terminal;terminal;Assert;return;Visitor;Terminal;SKIP;Parser;Visitor;Schemas,8.731149137020111e-10;5.820766091346741e-10;4.5838532969355583e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.382431946694851e-10;1.1641532182693481e-10,5,5,"[-5.848446369171143, -5.712336540222168, -6.277144432067871, -5.350239276885986, -5.472255706787109, -0.017163317650556564]",0.9829831123352051
3,"['  @Test\n  public void runTests() throws Exception {\n    if (! ""run"".equals(TEST_MODE)) return;\n\n    int passed = 0, failed = 0;\n\n    for (GenTest t : tests) {\n      try {\n        t.run();\n        passed++;\n      } catch (Exception e) {\n        failed++;\n        System.err.println(""Failed: "" + t.testName());\n        e.printStackTrace(System.err);\n      }\n    }\n\n    if (failed > 0) {\n      fail(String.valueOf(failed) + "" tests failed"");\n    }\n  }\n']",passed;ests;MODE;failed;equals;run;failed;err;passed;run,6.548361852765083e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6370904631912708e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.854008674621582, -5.709115505218506, -6.301539421081543, -5.3874335289001465, -5.489175796508789, -0.016863759607076645]",0.9832776188850403
3,"['  @Test\n  public void writeTests() throws Exception {\n    if (! ""write"".equals(TEST_MODE)) return;\n\n    for (GenTest t : tests) {\n      t.write();\n    }\n  }\n']",Gen;write;write;equals;ests;return;write;tests;EST;if,2.2351741790771484e-08;6.51925802230835e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;5.820766091346741e-10;2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.280568540096283e-09,5,5,"[-5.920159339904785, -5.791534900665283, -6.396242618560791, -5.50913667678833, -5.458063125610352, -0.015842169523239136]",0.9842827916145325
3,"['  @Test\n  public void testResolving() throws ParseException, MalformedURLException, IOException {\n    File file = new File(""."");\n    String currentWorkPath = file.getAbsolutePath();\n    String testIdl = currentWorkPath + File.separator + ""src"" + File.separator + ""test""\n        + File.separator + ""idl"" + File.separator + ""cycle.avdl"";\n    Idl compiler = new Idl(new File(testIdl));\n    Protocol protocol = compiler.CompilationUnit();\n    System.out.println(protocol);\n    Assert.assertEquals(5, protocol.getTypes().size());\n  }\n']",Work;separator;protocol;current;separator;current;Path;separator;Exception;Parse,6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;2.255546860396862e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.867323398590088, -5.75324821472168, -6.369253158569336, -5.444305896759033, -5.499797821044922, -0.01625627838075161]",0.9838752746582031
3,"['  @Test(expected = IllegalArgumentException.class)\n  public void testIsUnresolvedSchemaError1() {\n    // No ""org.apache.avro.compiler.idl.unresolved.name"" property\n    Schema s = SchemaBuilder.record(""R"").fields().endRecord();\n    SchemaResolver.getUnresolvedSchemaName(s);\n  }\n']",unresolved;class;expected;Unresolved;Error;Schema;property;end;avro;Record,1.076841726899147e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-5.919776916503906, -5.831967353820801, -6.425457954406738, -5.500263214111328, -5.532639980316162, -0.015397134236991405]",0.9847208857536316
3,"['  @Test(expected = IllegalArgumentException.class)\n  public void testIsUnresolvedSchemaError2() {\n    // No ""UnresolvedSchema"" property\n    Schema s = SchemaBuilder.record(""R"")\n        .prop(""org.apache.avro.compiler.idl.unresolved.name"", ""x"").fields().endRecord();\n    SchemaResolver.getUnresolvedSchemaName(s);\n  }\n']",avro;Unresolved;prop;id;Unresolved;Exception;get;Schema;Name;Unresolved,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.910796165466309, -5.824747562408447, -6.4129252433776855, -5.486893653869629, -5.516936302185059, -0.015583411790430546]",0.9845373630523682
3,"['  @Test(expected = IllegalArgumentException.class)\n  public void testIsUnresolvedSchemaError3() {\n    // Namespace not ""org.apache.avro.compiler"".\n    Schema s = SchemaBuilder.record(""UnresolvedSchema"")\n        .prop(""org.apache.avro.compiler.idl.unresolved.name"", ""x"")\n        .fields().endRecord();\n    SchemaResolver.getUnresolvedSchemaName(s);\n  }\n']",Namespace;prop;id;avro;compiler;Schema;record;Exception;Unresolved;Illegal,1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.9128007888793945, -5.816347122192383, -6.413095474243164, -5.48316764831543, -5.529190540313721, -0.01556885801255703]",0.9845516085624695
3,"['  @Test(expected = IllegalArgumentException.class)\n  public void testGetUnresolvedSchemaNameError() {\n    Schema s = SchemaBuilder.fixed(""a"").size(10);\n    SchemaResolver.getUnresolvedSchemaName(s);\n  }\n']",Argument;Unresolved;fixed;Resolver;Error;Schema;Illegal;get;Exception;Schema,3.0850060284137726e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.0372681319713593e-10,5,5,"[-5.891861915588379, -5.806844711303711, -6.387514114379883, -5.491086483001709, -5.500431537628174, -0.01578349992632866]",0.9843405485153198
3,"['  @Test\n  public void testCycleGeneration() throws ParseException, IOException {\n    final ClassLoader cl = Thread.currentThread().getContextClassLoader();\n    Idl idl = new Idl(cl.getResourceAsStream(""input/cycle.avdl""),\n            ""UTF-8"");\n    Protocol protocol = idl.CompilationUnit();\n    String json = protocol.toString();\n    LOG.info(json);\n\n    SpecificCompiler compiler = new SpecificCompiler(protocol);\n    compiler.setStringType(GenericData.StringType.String);\n    File output = new File(""./target"");\n    compiler.compileToDestination(null, output);\n\n    Map<String, Schema> schemas = new HashMap<>();\n    for (Schema schema : protocol.getTypes()) {\n      final String name = schema.getName();\n      schemas.put(name, schema);\n    }\n\n    GenericRecordBuilder rb2 = new GenericRecordBuilder(schemas.get(""SampleNode""));\n    rb2.set(""count"", 10);\n    rb2.set(""subNodes"", Collections.EMPTY_LIST);\n    GenericData.Record node = rb2.build();\n\n    GenericRecordBuilder mb = new GenericRecordBuilder(schemas.get(""Method""));\n    mb.set(""declaringClass"", ""Test"");\n    mb.set(""methodName"", ""test"");\n    GenericData.Record method = mb.build();\n\n    GenericRecordBuilder spb = new GenericRecordBuilder(schemas.get(""SamplePair""));\n    spb.set(""method"", method);\n    spb.set(""node"", node);\n    GenericData.Record sp = spb.build();\n\n    GenericRecordBuilder rb = new GenericRecordBuilder(schemas.get(""SampleNode""));\n    rb.set(""count"", 10);\n    rb.set(""subNodes"", Arrays.asList(sp));\n    GenericData.Record record = rb.build();\n\n    serDeserRecord(record);\n\n  }\n']",declaring;Cycle;set;cycle;method;File;method;Resource;Exception;Destination,8.149072527885437e-10;6.693881005048752e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.81386137008667, -5.666932582855225, -6.265496253967285, -5.311595439910889, -5.4986958503723145, -0.017524052411317825]",0.9826287031173706
3,"['  @Test\n  public void withoutSchemaMigration() throws IOException {\n    FullRecordV1 src = new FullRecordV1(true, 87231, 731L, 54.2832F, 38.321, ""Hi there"", null);\n    Assert.assertTrue(""Test schema must allow for custom coders."",\n                      ((SpecificRecordBase)src).hasCustomCoders());\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n    Encoder e = EncoderFactory.get().directBinaryEncoder(out, null);\n    DatumWriter<FullRecordV1> w = (DatumWriter<FullRecordV1>)MODEL.createDatumWriter(V1S);\n    w.write(src, e);\n    e.flush();\n\n    ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\n    Decoder d = DecoderFactory.get().directBinaryDecoder(in, null);\n    DatumReader<FullRecordV1> r = (DatumReader<FullRecordV1>)MODEL.createDatumReader(V1S);\n    FullRecordV1 dst = r.read(null, d);\n\n    Assert.assertEquals(src, dst);\n  }\n']",src;igration;custom;Assert;read;Equals;Encoder;Writer;Writer;Schema,2.3283064365386963e-09;1.3969838619232178e-09;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.82534122467041, -5.659719467163086, -6.263820648193359, -5.32992696762085, -5.48417329788208, -0.017487620934844017]",0.9826644062995911
3,"['  @Test\n  public void withSchemaMigration() throws IOException {\n    FullRecordV2 src = new FullRecordV2(true, 731, 87231, 38L, 54.2832F, ""Hi there"",\n                                        ByteBuffer.wrap(Utf8.getBytesFor(""Hello, world!"")));\n    Assert.assertTrue(""Test schema must allow for custom coders."",\n                      ((SpecificRecordBase)src).hasCustomCoders());\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n    Encoder e = EncoderFactory.get().directBinaryEncoder(out, null);\n    DatumWriter<FullRecordV2> w = (DatumWriter<FullRecordV2>)MODEL.createDatumWriter(V2S);\n    w.write(src, e);\n    e.flush();\n\n    ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\n    Decoder d = DecoderFactory.get().directBinaryDecoder(in, null);\n    DatumReader<FullRecordV1> r = (DatumReader<FullRecordV1>)MODEL.createDatumReader(V2S, V1S);\n    FullRecordV1 dst = r.read(null, d);\n\n    FullRecordV1 expected = new FullRecordV1(true, 87231, 731L, 54.2832F, 38.0, null,\n                                             ""Hello, world!"");\n    Assert.assertEquals(expected, dst);\n  }\n']",expected;dst;igration;custom;Buffer;Datum;Equals;coders;atum;Hello,8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.832530498504639, -5.66269063949585, -6.276529788970947, -5.325334072113037, -5.514459609985352, -0.017327826470136642]",0.9828214645385742
3,"['  @Test\n  public void testSetSyncInterval() {\n    JobConf jobConf = new JobConf();\n    int newSyncInterval = 100000;\n    AvroOutputFormat.setSyncInterval(jobConf, newSyncInterval);\n\n    assertEquals(newSyncInterval, jobConf.getInt(\n            AvroOutputFormat.SYNC_INTERVAL_KEY, -1));\n  }\n']",Avro;Output;Format;Interval;Sync;Conf;new;Interval;new;job,5.122274160385132e-09;2.6775524020195007e-09;1.862645149230957e-09;1.2223608791828156e-09;9.604264050722122e-10;7.8580342233181e-10;7.566995918750763e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.8673319816589355, -5.754947185516357, -6.336820602416992, -5.475108623504639, -5.441998481750488, -0.01642199233174324]",0.9837120175361633
3,"['  @Test\n  public void testNoCodec() {\n    JobConf job = new JobConf();\n    assertNull(AvroOutputFormat.getCodecFactory(job));\n\n    job = new JobConf();\n    job.set(""mapred.output.compress"", ""false"");\n    job.set(""mapred.output.compression.codec"", ""org.apache.hadoop.io.compress.BZip2Codec"");\n    assertNull(AvroOutputFormat.getCodecFactory(job));\n\n    job = new JobConf();\n    job.set(""mapred.output.compress"", ""false"");\n    job.set(AvroJob.OUTPUT_CODEC, ""bzip2"");\n    assertNull(AvroOutputFormat.getCodecFactory(job));\n  }\n']",Codec;Avro;apache;mapred;job;output;org;output;Factory;Job,6.548361852765083e-10;5.820766091346741e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.831909656524658, -5.70299768447876, -6.297533988952637, -5.382571697235107, -5.47422456741333, -0.017043201252818108]",0.9831013083457947
3,"['  @Test\n  public void testBZip2CodecUsingHadoopClass() {\n    CodecFactory avroBZip2Codec = CodecFactory.fromString(""bzip2"");\n\n    JobConf job = new JobConf();\n    job.set(""mapred.output.compress"", ""true"");\n    job.set(""mapred.output.compression.codec"", ""org.apache.hadoop.io.compress.BZip2Codec"");\n    CodecFactory factory = AvroOutputFormat.getCodecFactory(job);\n    assertNotNull(factory);\n    assertEquals(factory.getClass(), avroBZip2Codec.getClass());\n  }\n']",compress;zip;Codec;adoop;actory;mapred;adoop;Output;Zip;codec,1.3969838619232178e-09;1.280568540096283e-09;1.0186340659856796e-09;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.868405818939209, -5.7237725257873535, -6.349476337432861, -5.430450439453125, -5.502313613891602, -0.01643524318933487]",0.9836992025375366
3,"['  @Test\n  public void testBZip2CodecUsingAvroCodec() {\n    CodecFactory avroBZip2Codec = CodecFactory.fromString(""bzip2"");\n\n    JobConf job = new JobConf();\n    job.set(""mapred.output.compress"", ""true"");\n    job.set(AvroJob.OUTPUT_CODEC, ""bzip2"");\n    CodecFactory factory = AvroOutputFormat.getCodecFactory(job);\n    assertNotNull(factory);\n    assertEquals(factory.getClass(), avroBZip2Codec.getClass());\n  }\n']",Avro;Avro;mapred;Zip;Format;job;Class;Avro;Conf;Codec,2.3283064365386963e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.878958702087402, -5.772652626037598, -6.365592956542969, -5.461636066436768, -5.488326072692871, -0.0161399245262146]",0.9839897155761719
3,"['  @Test\n  public void testDeflateCodecUsingHadoopClass() {\n    CodecFactory avroDeflateCodec = CodecFactory.fromString(""deflate"");\n\n    JobConf job = new JobConf();\n    job.set(""mapred.output.compress"", ""true"");\n    job.set(""mapred.output.compression.codec"", ""org.apache.hadoop.io.compress.DeflateCodec"");\n    CodecFactory factory = AvroOutputFormat.getCodecFactory(job);\n    assertNotNull(factory);\n    assertEquals(factory.getClass(), avroDeflateCodec.getClass());\n  }\n']",adoop;factory;Codec;Deflate;Codec;Conf;job;from;Factory;Equals,1.7462298274040222e-09;4.3655745685100555e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.866786003112793, -5.718578338623047, -6.353856086730957, -5.441514015197754, -5.502103805541992, -0.01640123501420021]",0.9837325215339661
3,"['  @Test\n  public void testDeflateCodecUsingAvroCodec() {\n    CodecFactory avroDeflateCodec = CodecFactory.fromString(""deflate"");\n\n    JobConf job = new JobConf();\n    job.set(""mapred.output.compress"", ""true"");\n    job.set(AvroJob.OUTPUT_CODEC, ""deflate"");\n    CodecFactory factory = AvroOutputFormat.getCodecFactory(job);\n    assertNotNull(factory);\n    assertEquals(factory.getClass(), avroDeflateCodec.getClass());\n  }\n']",Job;true;compress;output;Codec;Job;Codec;OUTPUT;job;avro,1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;4.511093720793724e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.875552654266357, -5.766209602355957, -6.362657070159912, -5.462741374969482, -5.484289169311523, -0.016187312081456184]",0.983942985534668
3,"['  @Test\n  public void testSnappyCodecUsingHadoopClass() {\n    CodecFactory avroSnappyCodec = CodecFactory.fromString(""snappy"");\n\n    JobConf job = new JobConf();\n    job.set(""mapred.output.compress"", ""true"");\n    job.set(""mapred.output.compression.codec"", ""org.apache.hadoop.io.compress.SnappyCodec"");\n    CodecFactory factory = AvroOutputFormat.getCodecFactory(job);\n    assertNotNull(factory);\n    assertEquals(factory.getClass(), avroSnappyCodec.getClass());\n  }\n']",Conf;Codec;Snappy;Codec;mapred;apache;Conf;actory;output;job,7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.868507385253906, -5.716041564941406, -6.351624488830566, -5.448230743408203, -5.502813339233398, -0.016376256942749023]",0.9837570786476135
3,"['  @Test\n  public void testSnappyCodecUsingAvroCodec() {\n    CodecFactory avroSnappyCodec = CodecFactory.fromString(""snappy"");\n\n    JobConf job = new JobConf();\n    job.set(""mapred.output.compress"", ""true"");\n    job.set(AvroJob.OUTPUT_CODEC, ""snappy"");\n    CodecFactory factory = AvroOutputFormat.getCodecFactory(job);\n    assertNotNull(factory);\n    assertEquals(factory.getClass(), avroSnappyCodec.getClass());\n  }\n']",Job;Avro;Codec;Avro;factory;snappy;Class;new;set;get,1.3969838619232178e-09;1.280568540096283e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.87509298324585, -5.759019374847412, -6.356503486633301, -5.471392631530762, -5.483928680419922, -0.016186842694878578]",0.9839434623718262
3,"['  @Test\n  public void testGZipCodecUsingHadoopClass() {\n    CodecFactory avroDeflateCodec = CodecFactory.fromString(""deflate"");\n\n    JobConf job = new JobConf();\n    job.set(""mapred.output.compress"", ""true"");\n    job.set(""mapred.output.compression.codec"", ""org.apache.hadoop.io.compress.GZipCodec"");\n    CodecFactory factory = AvroOutputFormat.getCodecFactory(job);\n    assertNotNull(factory);\n    assertEquals(factory.getClass(), avroDeflateCodec.getClass());\n  }\n']",compression;Job;Zip;Codec;apache;job;org;compress;get;avro,4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.473825588822365e-10;2.1827872842550278e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.2005330063402653e-10;1.1641532182693481e-10,5,5,"[-5.865695953369141, -5.717568874359131, -6.347090244293213, -5.435259819030762, -5.499362468719482, -0.016458813101053238]",0.9836758971214294
3,"['  @Test\n  public void testJob() throws Exception {\n    JobConf job = new JobConf();\n    String dir = ""target/testReflectJob"";\n    Path inputPath = new Path(dir + ""/in"");\n    Path outputPath = new Path(dir + ""/out"");\n\n    outputPath.getFileSystem(job).delete(outputPath);\n    inputPath.getFileSystem(job).delete(inputPath);\n\n    writeLinesFile(new File(dir+""/in""));\n\n    job.setJobName(""reflect"");\n\n    AvroJob.setInputSchema(job, ReflectData.get().getSchema(Text.class));\n    AvroJob.setMapOutputSchema\n      (job, new Pair(new Text(""""), new Count(0L)).getSchema());\n    AvroJob.setOutputSchema(job, ReflectData.get().getSchema(WordCount.class));\n\n    AvroJob.setMapperClass(job, MapImpl.class);\n    //AvroJob.setCombinerClass(job, ReduceImpl.class);\n    AvroJob.setReducerClass(job, ReduceImpl.class);\n\n    FileInputFormat.setInputPaths(job, inputPath);\n    FileOutputFormat.setOutputPath(job, outputPath);\n\n    AvroJob.setReflect(job); // use reflection\n\n    JobClient.runJob(job);\n\n    validateCountsFile(new File(new File(dir, ""out""), ""part-00000.avro""));\n  }\n']",part;Conf;target;job;Avro;Job;new;reflect;new;dir,1.3969838619232178e-09;5.093170329928398e-10;4.656612873077393e-10;3.346940502524376e-10;3.055902197957039e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10,5,5,"[-5.8131103515625, -5.6873297691345215, -6.2802042961120605, -5.328395843505859, -5.495803356170654, -0.017355358228087425]",0.9827944040298462
3,"['  @Test\n  public void testIgnoreFilesWithoutExtension() throws Exception {\n    fs.mkdirs(inputDir);\n    Path avroFile = new Path(inputDir, ""somefile.avro"");\n    Path textFile = new Path(inputDir, ""someotherfile.txt"");\n    fs.create(avroFile).close();\n    fs.create(textFile).close();\n\n    FileInputFormat.setInputPaths(conf, inputDir);\n\n    AvroInputFormat inputFormat = new AvroInputFormat();\n    FileStatus[] statuses = inputFormat.listStatus(conf);\n    Assert.assertEquals(1, statuses.length);\n    Assert.assertEquals(""somefile.avro"", statuses[0].getPath().getName());\n\n    conf.setBoolean(AvroInputFormat.IGNORE_FILES_WITHOUT_EXTENSION_KEY, false);\n    statuses = inputFormat.listStatus(conf);\n    Assert.assertEquals(2, statuses.length);\n    Set<String> names = new HashSet<>();\n    names.add(statuses[0].getPath().getName());\n    names.add(statuses[1].getPath().getName());\n    Assert.assertTrue(names.contains(""somefile.avro""));\n    Assert.assertTrue(names.contains(""someotherfile.txt""));\n  }\n']",text;somefile;Extension;Set;File;File;Path;someotherfile;Status;Files,9.313225746154785e-10;6.402842700481415e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.82804012298584, -5.687446594238281, -6.303802490234375, -5.358622074127197, -5.511226177215576, -0.017054568976163864]",0.9830900430679321
3,"['  @Test\n  public void testToString() {\n    String datum = ""my string"";\n    AvroWrapper<CharSequence> wrapper = new AvroWrapper<>(datum);\n    assertEquals(datum, wrapper.toString());\n  }\n']",Wrapper;Wrapper;wrapper;to;Sequence;datum;string;new;datum;my,3.259629011154175e-09;1.7462298274040222e-09;1.3969838619232178e-09;-1.7462298274040222e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.280568540096283e-09,5,5,"[-5.891164302825928, -5.838113307952881, -6.3773417472839355, -5.460398197174072, -5.439249515533447, -0.016101213172078133]",0.9840277433395386
3,['  @Test\n  public void runTestsInOrder() throws Exception {\n    String pathOut = OUTPUT_DIR.getRoot().getPath();\n    testJob(pathOut);\n    testProjection(pathOut);\n  }\n'],Path;ests;In;run;Projection;Out;get;Root;get;Order,5.587935447692871e-09;3.259629011154175e-09;2.9103830456733704e-09;2.3283064365386963e-09;2.0954757928848267e-09;2.0954757928848267e-09;2.0372681319713593e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.932487487792969, -5.820834159851074, -6.425580978393555, -5.546971321105957, -5.451488494873047, -0.015545971691608429]",0.9845742583274841
3,"['  @Test\n  public void testSort() throws Exception {\n    JobConf job = new JobConf();\n    String inputPath = INPUT_DIR.getRoot().getPath();\n    Path outputPath = new Path(OUTPUT_DIR.getRoot().getPath());\n    outputPath.getFileSystem(job).delete(outputPath);\n\n    WordCountUtil.writeLinesBytesFile(inputPath);\n\n    job.setInputFormat(AvroAsTextInputFormat.class);\n    job.setOutputFormat(AvroTextOutputFormat.class);\n    job.setOutputKeyClass(Text.class);\n\n    FileInputFormat.setInputPaths(job, new Path(inputPath));\n    FileOutputFormat.setOutputPath(job, outputPath);\n\n    JobClient.runJob(job);\n\n    WordCountUtil.validateSortedFile(outputPath.toString() + ""/part-00000.avro"");\n  }\n']",OUTPUT;DIR;DIR;Path;Avro;to;Format;Root;Job;class,1.2514647096395493e-09;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.837623469531536e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.83065128326416, -5.714724063873291, -6.295019626617432, -5.36889123916626, -5.467160701751709, -0.01710660010576248]",0.9830387830734253
3,"['  @Test\n  public void testJob() throws Exception {\n    JobConf job = new JobConf();\n    Path inputPath1 = new Path(INPUT_DIR_1.getRoot().getPath());\n    Path inputPath2 = new Path(INPUT_DIR_2.getRoot().getPath());\n    Path outputPath = new Path(OUTPUT_DIR.getRoot().getPath());\n\n    outputPath.getFileSystem(job).delete(outputPath);\n\n    writeNamesFiles(new File(inputPath1.toUri().getPath()));\n    writeBalancesFiles(new File(inputPath2.toUri().getPath()));\n\n    job.setJobName(""multiple-inputs-join"");\n    AvroMultipleInputs.addInputPath(job, inputPath1, NamesMapImpl.class,\n            ReflectData.get().getSchema(NamesRecord.class));\n    AvroMultipleInputs.addInputPath(job, inputPath2, BalancesMapImpl.class,\n            ReflectData.get().getSchema(BalancesRecord.class));\n\n    Schema keySchema = ReflectData.get().getSchema(KeyRecord.class);\n    Schema valueSchema = ReflectData.get().getSchema(JoinableRecord.class);\n    AvroJob.setMapOutputSchema(job,\n            Pair.getPairSchema(keySchema, valueSchema));\n    AvroJob.setOutputSchema(job,\n            ReflectData.get().getSchema(CompleteRecord.class));\n\n    AvroJob.setReducerClass(job, ReduceImpl.class);\n    job.setNumReduceTasks(1);\n\n    FileOutputFormat.setOutputPath(job, outputPath);\n\n    AvroJob.setReflect(job);\n\n    JobClient.runJob(job);\n\n    validateCompleteFile(new File(OUTPUT_DIR.getRoot(), ""part-00000.avro""));\n  }\n']",Reducer;asks;join;Path;set;Class;File;DIR;Names;Schema,3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.964508555829525e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10,5,5,"[-5.832648754119873, -5.676053047180176, -6.3123955726623535, -5.360524654388428, -5.533936500549316, -0.016963036730885506]",0.9831801652908325
3,"['  @Test\n  public void testAvroTextRecordWriter() throws Exception {\n    File file = new File(tmpFolder.getRoot().getPath(), ""writer"");\n    Schema schema = Schema.create(Schema.Type.BYTES);\n    DatumWriter<ByteBuffer> datumWriter =\n      new GenericDatumWriter<>(schema);\n    DataFileWriter<ByteBuffer> fileWriter =\n      new DataFileWriter<>(datumWriter);\n    fileWriter.create(schema, file);\n    RecordWriter<Object, Object> rw = new AvroTextOutputFormat<>()\n      .new AvroTextRecordWriter(fileWriter, ""\\t"".getBytes(UTF8));\n\n    rw.write(null, null);\n    rw.write(null, NullWritable.get());\n    rw.write(NullWritable.get(), null);\n    rw.write(NullWritable.get(), NullWritable.get());\n\n    rw.write(""k1"", null);\n    rw.write(""k2"", NullWritable.get());\n\n    rw.write(null, ""v1"");\n    rw.write(NullWritable.get(), ""v2"");\n\n    rw.write(""k3"", ""v3"");\n    rw.write(new Text(""k4""), new Text(""v4""));\n\n    rw.close(null);\n\n    DatumReader<ByteBuffer> reader = new GenericDatumReader<>();\n    DataFileReader<ByteBuffer> fileReader =\n      new DataFileReader<>(file, reader);\n    assertEquals(""k1"", asString(fileReader.next()));\n    assertEquals(""k2"", asString(fileReader.next()));\n    assertEquals(""v1"", asString(fileReader.next()));\n    assertEquals(""v2"", asString(fileReader.next()));\n    assertEquals(""k3\\tv3"", asString(fileReader.next()));\n    assertEquals(""k4\\tv4"", asString(fileReader.next()));\n    assertFalse(""End"", fileReader.hasNext());\n  }\n']",Text;Text;create;Record;Avro;Writer;ES;writer;Equals;Writer,3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.806297302246094, -5.656981945037842, -6.24113130569458, -5.281940460205078, -5.48875093460083, -0.017822710797190666]",0.9823351502418518
3,['  @Test\n  public void runTestsInOrder() throws Exception {\n    String avroPath = OUTPUT_DIR.getRoot().getPath();\n    testJob(avroPath);\n    testProjection(avroPath);\n    testProjectionNewMethodsOne(avroPath);\n    testProjectionNewMethodsTwo(avroPath);\n    testProjection1(avroPath);\n    testJobNoreducer();\n    testProjectionNoreducer(avroPath);\n  }\n'],In;oreducer;OUTPUT;ests;Exception;get;Order;run;Projection;Two,1.3969838619232178e-09;1.367880031466484e-09;1.1932570487260818e-09;9.313225746154785e-10;5.238689482212067e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.85387659072876, -5.718128681182861, -6.302618503570557, -5.400737762451172, -5.445571422576904, -0.016957644373178482]",0.9831852316856384
3,['  @Test\n  public void testReadSequenceFile() throws Exception {\n    checkFile(new SequenceFileReader<>(file()));\n  }\n'],File;File;new;check;File;Read;Exception;Sequence;Sequence;file,1.280568540096283e-09;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;2.9103830456733704e-11;0.0;0.0;-1.1641532182693481e-10;-2.764863893389702e-10,5,5,"[-5.895902156829834, -5.737048149108887, -6.363985538482666, -5.510104179382324, -5.4161810874938965, -0.01631961204111576]",0.9838128089904785
3,"['  @Test\n  public void testSequenceFileInputFormat() throws Exception {\n    JobConf job = new JobConf();\n    Path outputPath = new Path(OUTPUT_DIR.getRoot().getPath());\n    outputPath.getFileSystem(job).delete(outputPath);\n\n    // configure input for Avro from sequence file\n    AvroJob.setInputSequenceFile(job);\n    FileInputFormat.setInputPaths(job, file().toURI().toString());\n    AvroJob.setInputSchema(job, SCHEMA);\n\n    // mapper is default, identity\n    // reducer is default, identity\n\n    // configure output for avro\n    AvroJob.setOutputSchema(job, SCHEMA);\n    FileOutputFormat.setOutputPath(job, outputPath);\n\n    JobClient.runJob(job);\n\n    checkFile(new DataFileReader<>\n              (new File(outputPath.toString() + ""/part-00000.avro""),\n               new SpecificDatumReader<>()));\n  }\n']",sequence;SCHEMA;Conf;avro;atum;Input;Avro;avro;apper;delete,6.984919309616089e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.864338397979736, -5.716137409210205, -6.342001438140869, -5.40881872177124, -5.535789966583252, -0.016446618363261223]",0.9836878776550293
3,"['  @Test\n  public void testNonAvroMapper() throws Exception {\n    JobConf job = new JobConf();\n    Path outputPath = new Path(OUTPUT_DIR.getRoot().getPath());\n    outputPath.getFileSystem(job).delete(outputPath);\n\n    // configure input for non-Avro sequence file\n    job.setInputFormat(SequenceFileInputFormat.class);\n    FileInputFormat.setInputPaths(job, file().toURI().toString());\n\n    // use a hadoop mapper that emits Avro output\n    job.setMapperClass(NonAvroMapper.class);\n\n    // reducer is default, identity\n\n    // configure output for avro\n    FileOutputFormat.setOutputPath(job, outputPath);\n    AvroJob.setOutputSchema(job, SCHEMA);\n\n    JobClient.runJob(job);\n\n    checkFile(new DataFileReader<>\n              (new File(outputPath.toString() + ""/part-00000.avro""),\n               new SpecificDatumReader<>()));\n  }\n']",apper;reducer;Path;Schema;Avro;set;emits;default;part;avro,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.880969047546387, -5.714129447937012, -6.379349708557129, -5.436450004577637, -5.55867338180542, -0.016125496476888657]",0.9840038418769836
3,"['  @Test\n  public void testNonAvroMapOnly() throws Exception {\n    JobConf job = new JobConf();\n    Path outputPath = new Path(OUTPUT_DIR.getRoot().getPath());\n    outputPath.getFileSystem(job).delete(outputPath);\n\n    // configure input for non-Avro sequence file\n    job.setInputFormat(SequenceFileInputFormat.class);\n    FileInputFormat.setInputPaths(job, file().toURI().toString());\n\n    // use a hadoop mapper that emits Avro output\n    job.setMapperClass(NonAvroOnlyMapper.class);\n\n    // configure output for avro\n    job.setNumReduceTasks(0);                     // map-only\n    FileOutputFormat.setOutputPath(job, outputPath);\n    AvroJob.setOutputSchema(job, SCHEMA);\n\n    JobClient.runJob(job);\n\n    checkFile(new DataFileReader<>\n              (new File(outputPath.toString() + ""/part-00000.avro""),\n               new SpecificDatumReader<>()));\n  }\n']",sequence;Only;output;Map;only;OUTPUT;that;Path;Format;delete,4.540197551250458e-09;9.89530235528946e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.884745121002197, -5.718723297119141, -6.3883562088012695, -5.439528942108154, -5.569121360778809, -0.016029538586735725]",0.9840981364250183
3,"['  @Test\n  public void testNonAvroReducer() throws Exception {\n    JobConf job = new JobConf();\n    Path outputPath = new Path(OUTPUT_DIR.getRoot().getPath());\n    outputPath.getFileSystem(job).delete(outputPath);\n\n    // configure input for Avro from sequence file\n    AvroJob.setInputSequenceFile(job);\n    AvroJob.setInputSchema(job, SCHEMA);\n    FileInputFormat.setInputPaths(job, file().toURI().toString());\n\n    // mapper is default, identity\n\n    // use a hadoop reducer that consumes Avro input\n    AvroJob.setMapOutputSchema(job, SCHEMA);\n    job.setReducerClass(NonAvroReducer.class);\n\n    // configure outputPath for non-Avro SequenceFile\n    job.setOutputFormat(SequenceFileOutputFormat.class);\n    FileOutputFormat.setOutputPath(job, outputPath);\n\n    // output key/value classes are default, LongWritable/Text\n\n    JobClient.runJob(job);\n\n    checkFile(new SequenceFileReader<>\n              (new File(outputPath.toString() + ""/part-00000"")));\n  }\n']",value;apper;file;hadoop;configure;Avro;job;Conf;to;Reader,5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;2.9467628337442875e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.877967357635498, -5.721074104309082, -6.390293598175049, -5.448840141296387, -5.5708136558532715, -0.015990236774086952]",0.9841369390487671
3,"['  @Test\n  public void testMapOnly() throws Exception {\n    JobConf job = new JobConf();\n    String inDir = System.getProperty(""share.dir"",""../../../share"")+""/test/data"";\n    Path input = new Path(inDir+""/weather.avro"");\n    Path output = new Path(""target/test/weather-ident"");\n\n    output.getFileSystem(job).delete(output);\n\n    job.setJobName(""identity map weather"");\n\n    AvroJob.setInputSchema(job, Weather.SCHEMA$);\n    AvroJob.setOutputSchema(job, Weather.SCHEMA$);\n\n    FileInputFormat.setInputPaths(job, input);\n    FileOutputFormat.setOutputPath(job, output);\n    FileOutputFormat.setCompressOutput(job, true);\n\n    job.setNumReduceTasks(0);                     // map-only\n\n    JobClient.runJob(job);\n\n    // check output is correct\n    DatumReader<Weather> reader = new SpecificDatumReader<>();\n    DataFileReader<Weather> check = new DataFileReader<>\n      (new File(inDir + ""/weather.avro""), reader);\n    DataFileReader<Weather> sorted = new DataFileReader<>\n      (new File(output.toString() + ""/part-00000.avro""), reader);\n\n    for (Weather w : sorted)\n      assertEquals(check.next(), w);\n\n    check.close();\n    sorted.close();\n  }\n']",weather;Weather;Map;Reduce;ident;input;atum;sorted;Avro;map,4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6921043172478676e-10;2.3283064365386963e-10,5,5,"[-5.846527099609375, -5.7094268798828125, -6.348099708557129, -5.3838605880737305, -5.549929141998291, -0.016568917781114578]",0.9835675954818726
3,"['  @Test\n  public void testSort() throws Exception {\n    JobConf job = new JobConf();\n    String inDir = ""../../../share/test/data"";\n    Path input = new Path(inDir+""/weather.avro"");\n    Path output = new Path(""target/test/weather-sort"");\n\n    output.getFileSystem(job).delete(output);\n\n    job.setJobName(""sort weather"");\n\n    AvroJob.setInputSchema(job, Weather.SCHEMA$);\n    AvroJob.setMapOutputSchema\n      (job, Pair.getPairSchema(Weather.SCHEMA$, Schema.create(Type.NULL)));\n    AvroJob.setOutputSchema(job, Weather.SCHEMA$);\n\n    AvroJob.setMapperClass(job, SortMapper.class);\n    AvroJob.setReducerClass(job, SortReducer.class);\n\n    FileInputFormat.setInputPaths(job, input);\n    FileOutputFormat.setOutputPath(job, output);\n    FileOutputFormat.setCompressOutput(job, true);\n    AvroJob.setOutputCodec(job, SNAPPY_CODEC);\n\n    JobClient.runJob(job);\n\n    // check output is correct\n    DatumReader<Weather> reader = new SpecificDatumReader<>();\n    DataFileReader<Weather> check = new DataFileReader<>\n      (new File(inDir + ""/weather-sorted.avro""), reader);\n    DataFileReader<Weather> sorted = new DataFileReader<>\n      (new File(output.toString() + ""/part-00000.avro""), reader);\n\n    for (Weather w : sorted)\n      assertEquals(check.next(), w);\n\n    check.close();\n    sorted.close();\n\n    // check that AvroMapper and AvroReducer get close() and configure() called\n    assertEquals(1, mapCloseCalls.get());\n    assertEquals(1, reducerCloseCalls.get());\n    assertEquals(1, mapConfigureCalls.get());\n    assertEquals(1, reducerConfigureCalls.get());\n\n\n  }\n']",target;Path;get;weather;Codec;new;Reducer;sort;Weather;and,1.5133991837501526e-09;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.832843780517578, -5.69803524017334, -6.33146858215332, -5.367912292480469, -5.551342487335205, -0.016747239977121353]",0.9833922386169434
3,"['  @Test\n    public void testJob() throws Exception {\n    JobConf job = new JobConf();\n    Path outputPath = new Path(DIR.getRoot().getPath() + ""/out"");\n    outputPath.getFileSystem(job).delete(outputPath);\n\n    job.setInputFormat(TextInputFormat.class);\n    FileInputFormat.setInputPaths(job, DIR.getRoot().getPath() + ""/in"");\n\n    job.setMapperClass(AvroTestConverter.class);\n    job.setNumReduceTasks(0);\n\n    FileOutputFormat.setOutputPath(job, outputPath);\n    System.out.println(createSchema());\n    AvroJob.setOutputSchema(job,\n                            Pair.getPairSchema(Schema.create(Schema.Type.LONG),\n                                               createSchema()));\n    job.setOutputFormat(AvroOutputFormat.class);\n\n    JobClient.runJob(job);\n  }\n']",Job;Type;Input;new;Avro;Schema;Format;Input;Format;Path,4.3655745685100555e-10;4.0745362639427185e-10;3.892637323588133e-10;3.710738383233547e-10;3.055902197957039e-10;2.764863893389702e-10;2.764863893389702e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.83396577835083, -5.686279773712158, -6.282040596008301, -5.348395347595215, -5.481854438781738, -0.017253659665584564]",0.9828944206237793
3,"['  @Test\n  public void testJob() throws Exception {\n    _runjob(""sasl"");\n  }\n']",runjob;Exception;as;Job,1.7462298274040222e-09;-5.820766091346741e-11;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.853987216949463, -5.68740177154541, -6.308925628662109, -5.4743876457214355, -5.353285312652588, -0.017148317769169807]",0.9829977750778198
3,"['  @Test\n  public void testhtp() throws Exception {\n    _runjob(""http"");\n  }\n']",runjob;ht;http;Exception,1.979060471057892e-09;2.3283064365386963e-10;2.3283064365386963e-10;-4.0745362639427185e-10,5,5,"[-5.8399248123168945, -5.676244735717773, -6.298769474029541, -5.47560453414917, -5.336642742156982, -0.017322905361652374]",0.982826292514801
3,"['  @Test(expected=IllegalArgumentException.class)\n  public void testWriteOutOfSortedOrder() throws IOException {\n    LOG.debug(""Writing some records to a SortedKeyValueFile..."");\n\n    Configuration conf = new Configuration();\n    SortedKeyValueFile.Writer.Options options = new SortedKeyValueFile.Writer.Options()\n        .withKeySchema(Schema.create(Schema.Type.STRING))\n        .withValueSchema(Schema.create(Schema.Type.STRING))\n        .withConfiguration(conf)\n        .withPath(new Path(mTempDir.getRoot().getPath(), ""myfile""))\n        .withIndexInterval(2);  // Index every other record.\n\n    SortedKeyValueFile.Writer<CharSequence, CharSequence> writer\n        = new SortedKeyValueFile.Writer<>(options);\n\n    Utf8 key = new Utf8();                        // re-use key, to test copied\n\n    try {\n      writer.append(key.set(""banana""), ""Banana"");\n      writer.append(key.set(""apple""), ""Apple"");  // Ruh, roh!\n    } finally {\n      writer.close();\n    }\n  }\n']",banana;IOException;other;Dir;every;apple;orted;key;Exception;Options,9.89530235528946e-10;9.89530235528946e-10;6.402842700481415e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.871677398681641, -5.69714879989624, -6.351395606994629, -5.407257080078125, -5.560722827911377, -0.01638129912316799]",0.9837521314620972
3,"['  @Test\n  public void testNamedCodecs() throws IOException {\n    Configuration conf = new Configuration();\n    Path myfile = new Path(mTempDir.getRoot().getPath(), ""myfile"");\n    Schema key = Schema.create(Schema.Type.STRING);\n    Schema value = Schema.create(Schema.Type.STRING);\n    Schema recordSchema = AvroKeyValue.getSchema(key, value);\n    DatumReader<GenericRecord> datumReader = SpecificData.get().createDatumReader(recordSchema);\n    DataFileReader<GenericRecord> reader;\n\n    SortedKeyValueFile.Writer.Options options = new SortedKeyValueFile.Writer.Options()\n        .withKeySchema(key)\n        .withValueSchema(value)\n        .withConfiguration(conf)\n        .withPath(myfile);\n\n    SortedKeyValueFile.Writer<CharSequence, CharSequence> writer;\n\n    for(String codec : new String[]{""null"", ""deflate"", ""snappy"", ""bzip2""}) {\n        LOG.debug(""Using "" + codec + ""codec for a SortedKeyValueFile..."");\n\n        options.withCodec(codec);\n\n        writer = new SortedKeyValueFile.Writer<>(options);\n        writer.close();\n\n        reader = new DataFileReader<>(\n            new FsInput(new Path(myfile, SortedKeyValueFile.DATA_FILENAME), conf),\n            datumReader);\n\n        assertEquals(codec, reader.getMetaString(""avro.codec""));\n        reader.close();\n    }\n  }\n']",myfile;Root;codec;codec;amed;Type;File;zip;Avro;Configuration,6.984919309616089e-10;5.820766091346741e-10;5.165929906070232e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.852165699005127, -5.674765586853027, -6.311642646789551, -5.364864826202393, -5.541656017303467, -0.01685965619981289]",0.983281672000885
3,"['  @Test\n  public void testDeflateClassCodec() throws IOException {\n    Configuration conf = new Configuration();\n    Path myfile = new Path(mTempDir.getRoot().getPath(), ""myfile"");\n    Schema key = Schema.create(Schema.Type.STRING);\n    Schema value = Schema.create(Schema.Type.STRING);\n    Schema recordSchema = AvroKeyValue.getSchema(key, value);\n    DatumReader<GenericRecord> datumReader = SpecificData.get().createDatumReader(recordSchema);\n    DataFileReader<GenericRecord> reader;\n\n    LOG.debug(""Using CodecFactory.deflateCodec() for a SortedKeyValueFile..."");\n    SortedKeyValueFile.Writer.Options options = new SortedKeyValueFile.Writer.Options()\n        .withKeySchema(key)\n        .withValueSchema(value)\n        .withConfiguration(conf)\n        .withPath(myfile)\n        .withCodec(CodecFactory.deflateCodec(9));\n\n    SortedKeyValueFile.Writer<CharSequence, CharSequence> writer =\n        new SortedKeyValueFile.Writer<>(options);\n    writer.close();\n\n    reader = new DataFileReader<>(\n        new FsInput(new Path(myfile, SortedKeyValueFile.DATA_FILENAME), conf),\n        datumReader);\n\n    assertEquals(""deflate"", reader.getMetaString(""avro.codec""));\n    reader.close();\n  }\n']",Codec;STRING;FILENAME;Type;Codec;atum;conf;Configuration;codec;Generic,3.055902197957039e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.8409423828125, -5.671815872192383, -6.2958807945251465, -5.353466987609863, -5.521599292755127, -0.017067575827240944]",0.9830772280693054
3,"['  @Test\n  public void testBadCodec() throws IOException {\n    LOG.debug(""Using a bad codec for a SortedKeyValueFile..."");\n\n    try {\n      SortedKeyValueFile.Writer.Options options =\n          new SortedKeyValueFile.Writer.Options().withCodec(""foobar"");\n    } catch (AvroRuntimeException e) {\n        assertEquals(""Unrecognized codec: foobar"", e.getMessage());\n    }\n  }\n']",options;Codec;Options;Options;Using;File;Writer;with;IOException;foobar,9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.055902197957039e-10,5,5,"[-5.887479782104492, -5.734943389892578, -6.336606025695801, -5.41601037979126, -5.494021415710449, -0.016466200351715088]",0.9836685061454773
3,"['  @Test\n  public void testWriter() throws IOException {\n    LOG.debug(""Writing some records to a SortedKeyValueFile..."");\n\n    Configuration conf = new Configuration();\n    SortedKeyValueFile.Writer.Options options = new SortedKeyValueFile.Writer.Options()\n        .withKeySchema(Schema.create(Schema.Type.STRING))\n        .withValueSchema(Schema.create(Schema.Type.STRING))\n        .withConfiguration(conf)\n        .withPath(new Path(mTempDir.getRoot().getPath(), ""myfile""))\n        .withIndexInterval(2);  // Index every other record.\n\n    SortedKeyValueFile.Writer<CharSequence, CharSequence> writer\n        = new SortedKeyValueFile.Writer<>(options);\n\n    try {\n      writer.append(""apple"", ""Apple"");  // Will be indexed.\n      writer.append(""banana"", ""Banana"");\n      writer.append(""carrot"", ""Carrot"");  // Will be indexed.\n      writer.append(""durian"", ""Durian"");\n    } finally {\n      writer.close();\n    }\n\n\n    LOG.debug(""Checking the generated directory..."");\n    File directory = new File(mTempDir.getRoot().getPath(), ""myfile"");\n    assertTrue(directory.exists());\n\n\n    LOG.debug(""Checking the generated index file..."");\n    File indexFile = new File(directory, SortedKeyValueFile.INDEX_FILENAME);\n    DatumReader<GenericRecord> indexReader = new GenericDatumReader<>(\n        AvroKeyValue.getSchema(options.getKeySchema(), Schema.create(Schema.Type.LONG)));\n    FileReader<GenericRecord> indexFileReader = DataFileReader.openReader(indexFile, indexReader);\n\n    List<AvroKeyValue<CharSequence, Long>> indexRecords\n        = new ArrayList<>();\n    try {\n      for (GenericRecord indexRecord : indexFileReader) {\n        indexRecords.add(new AvroKeyValue<>(indexRecord));\n      }\n    } finally {\n      indexFileReader.close();\n    }\n\n    assertEquals(2, indexRecords.size());\n    assertEquals(""apple"", indexRecords.get(0).getKey().toString());\n    LOG.debug(""apple\'s position in the file: "" + indexRecords.get(0).getValue());\n    assertEquals(""carrot"", indexRecords.get(1).getKey().toString());\n    LOG.debug(""carrot\'s position in the file: "" + indexRecords.get(1).getValue());\n\n    LOG.debug(""Checking the generated data file..."");\n    File dataFile = new File(directory, SortedKeyValueFile.DATA_FILENAME);\n    DatumReader<GenericRecord> dataReader = new GenericDatumReader<>(\n        AvroKeyValue.getSchema(options.getKeySchema(), options.getValueSchema()));\n    DataFileReader<GenericRecord> dataFileReader\n        = new DataFileReader<>(dataFile, dataReader);\n\n    try {\n      dataFileReader.seek(indexRecords.get(0).getValue());\n      assertTrue(dataFileReader.hasNext());\n      AvroKeyValue<CharSequence, CharSequence> appleRecord\n          = new AvroKeyValue<>(dataFileReader.next());\n      assertEquals(""apple"", appleRecord.getKey().toString());\n      assertEquals(""Apple"", appleRecord.getValue().toString());\n\n      dataFileReader.seek(indexRecords.get(1).getValue());\n      assertTrue(dataFileReader.hasNext());\n      AvroKeyValue<CharSequence, CharSequence> carrotRecord\n          = new AvroKeyValue<>(dataFileReader.next());\n      assertEquals(""carrot"", carrotRecord.getKey().toString());\n      assertEquals(""Carrot"", carrotRecord.getValue().toString());\n\n      assertTrue(dataFileReader.hasNext());\n      AvroKeyValue<CharSequence, CharSequence> durianRecord\n          = new AvroKeyValue<>(dataFileReader.next());\n      assertEquals(""durian"", durianRecord.getKey().toString());\n      assertEquals(""Durian"", durianRecord.getValue().toString());\n    } finally {\n      dataFileReader.close();\n    }\n  }\n']",create;banana;Durian;generated;urian;directory;record;directory;records;conf,6.402842700481415e-10;4.94765117764473e-10;4.43833414465189e-10;4.3655745685100555e-10;3.346940502524376e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.8189894035458565e-10,5,5,"[-5.855539798736572, -5.675384044647217, -6.321844577789307, -5.379843235015869, -5.553686618804932, -0.016710545867681503]",0.9834282994270325
3,"['  @Test\n  public void testReader() throws IOException {\n    Configuration conf = new Configuration();\n    SortedKeyValueFile.Writer.Options writerOptions = new SortedKeyValueFile.Writer.Options()\n        .withKeySchema(Schema.create(Schema.Type.STRING))\n        .withValueSchema(Schema.create(Schema.Type.STRING))\n        .withConfiguration(conf)\n        .withPath(new Path(mTempDir.getRoot().getPath(), ""myfile""))\n        .withIndexInterval(2);  // Index every other record.\n\n    SortedKeyValueFile.Writer<CharSequence, CharSequence> writer\n        = new SortedKeyValueFile.Writer<>(writerOptions);\n\n    try {\n      writer.append(""apple"", ""Apple"");  // Will be indexed.\n      writer.append(""banana"", ""Banana"");\n      writer.append(""carrot"", ""Carrot"");  // Will be indexed.\n      writer.append(""durian"", ""Durian"");\n    } finally {\n      writer.close();\n    }\n\n    LOG.debug(""Reading the file back using a reader..."");\n    SortedKeyValueFile.Reader.Options readerOptions = new SortedKeyValueFile.Reader.Options()\n        .withKeySchema(Schema.create(Schema.Type.STRING))\n        .withValueSchema(Schema.create(Schema.Type.STRING))\n        .withConfiguration(conf)\n        .withPath(new Path(mTempDir.getRoot().getPath(), ""myfile""));\n\n    SortedKeyValueFile.Reader<CharSequence, CharSequence> reader\n        = new SortedKeyValueFile.Reader<>(readerOptions);\n\n    try {\n      assertEquals(""Carrot"", reader.get(""carrot"").toString());\n      assertEquals(""Banana"", reader.get(""banana"").toString());\n      assertNull(reader.get(""a-vegetable""));\n      assertNull(reader.get(""beet""));\n      assertNull(reader.get(""zzz""));\n    } finally {\n      reader.close();\n    }\n  }\n']",IOException;Options;every;Carrot;myfile;Options;record;conf;myfile;the,6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.837159156799316, -5.663572788238525, -6.280492305755615, -5.331804275512695, -5.522801876068115, -0.01723737269639969]",0.9829103350639343
3,"['  @Test\n  public void testHadoopCodecFactoryDeflate(){\n    CodecFactory hadoopDeflateCodec = HadoopCodecFactory.fromHadoopString(""org.apache.hadoop.io.compress.DeflateCodec"");\n    CodecFactory avroDeflateCodec = CodecFactory.fromString(""deflate"");\n    assertTrue(hadoopDeflateCodec.getClass().equals(avroDeflateCodec.getClass()));\n  }\n']",adoop;Deflate;Codec;org;io;Codec;Deflate;adoop;Deflate;Codec,9.022187441587448e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.891961574554443, -5.761003017425537, -6.383396625518799, -5.462564945220947, -5.478432655334473, -0.016147078946232796]",0.9839825630187988
3,"['  @Test\n  public void testHadoopCodecFactorySnappy(){\n    CodecFactory hadoopSnappyCodec = HadoopCodecFactory.fromHadoopString(""org.apache.hadoop.io.compress.SnappyCodec"");\n    CodecFactory avroSnappyCodec = CodecFactory.fromString(""snappy"");\n    assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()));\n  }\n']",avro;adoop;Factory;snappy;Codec;Snappy;adoop;Codec;adoop;Snappy,1.6298145055770874e-09;1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.893768310546875, -5.752105712890625, -6.3863525390625, -5.477712631225586, -5.481802463531494, -0.016086433082818985]",0.9840422868728638
3,"['  @Test\n  public void testHadoopCodecFactoryBZip2(){\n    CodecFactory hadoopSnappyCodec = HadoopCodecFactory.fromHadoopString(""org.apache.hadoop.io.compress.BZip2Codec"");\n    CodecFactory avroSnappyCodec = CodecFactory.fromString(""bzip2"");\n    assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()));\n  }\n']",compress;org;io;adoop;from;hadoop;Factory;Codec;adoop;Snappy,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.8917489796876907e-10,5,5,"[-5.87575101852417, -5.744723320007324, -6.35034704208374, -5.438592910766602, -5.456741809844971, -0.016500910744071007]",0.9836344718933105
3,"['  @Test\n  public void testHadoopCodecFactoryGZip(){\n    CodecFactory hadoopSnappyCodec = HadoopCodecFactory.fromHadoopString(""org.apache.hadoop.io.compress.GZipCodec"");\n    CodecFactory avroSnappyCodec = CodecFactory.fromString(""deflate"");\n    assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()));\n  }\n']",Zip;from;hadoop;adoop;Codec;Codec;equals;Snappy;Codec;io,1.0477378964424133e-09;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.861601829528809, -5.723112106323242, -6.334246635437012, -5.4313507080078125, -5.451618194580078, -0.016695775091648102]",0.9834428429603577
3,"['  @Test\n  public void testHadoopCodecFactoryFail(){\n    CodecFactory hadoopSnappyCodec = HadoopCodecFactory.fromHadoopString(""org.apache.hadoop.io.compress.FooCodec"");\n    assertTrue(hadoopSnappyCodec == null);\n  }\n']",oo;from;Codec;Factory;hadoop;compress;Codec;apache;Factory;adoop,1.862645149230957e-09;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.886176586151123, -5.742260456085205, -6.366550445556641, -5.481437683105469, -5.454717636108398, -0.016274340450763702]",0.9838573932647705
3,"['  @Test\n  public void testCompareString() {\n    assertEquals(0, mComparator.compare("""", """"));\n    assertThat(mComparator.compare("""", ""a""), lessThan(0));\n    assertThat(mComparator.compare(""a"", """"), greaterThan(0));\n\n    assertEquals(0, mComparator.compare(""a"", ""a""));\n    assertThat(mComparator.compare(""a"", ""b""), lessThan(0));\n    assertThat(mComparator.compare(""b"", ""a""), greaterThan(0));\n\n    assertEquals(0, mComparator.compare(""ab"", ""ab""));\n    assertThat(mComparator.compare(""a"", ""aa""), lessThan(0));\n    assertThat(mComparator.compare(""aa"", ""a""), greaterThan(0));\n\n    assertThat(mComparator.compare(""abc"", ""abcdef""), lessThan(0));\n    assertThat(mComparator.compare(""abcdef"", ""abc""), greaterThan(0));\n  }\n']",That;That;compare;Comparator;abc;compare;compare;ab;greater;abcdef,4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.801243681460619e-10;2.473825588822365e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.382431946694851e-10,5,5,"[-5.815255165100098, -5.679414749145508, -6.239377021789551, -5.315341949462891, -5.413597106933594, -0.017878450453281403]",0.982280433177948
3,"['  @Test\n  public void testCompareUtf8() {\n    assertEquals(0, mComparator.compare(new Utf8(""""), new Utf8("""")));\n    assertThat(mComparator.compare(new Utf8(""""), new Utf8(""a"")), lessThan(0));\n    assertThat(mComparator.compare(new Utf8(""a""), new Utf8("""")), greaterThan(0));\n\n    assertEquals(0, mComparator.compare(new Utf8(""a""), new Utf8(""a"")));\n    assertThat(mComparator.compare(new Utf8(""a""), new Utf8(""b"")), lessThan(0));\n    assertThat(mComparator.compare(new Utf8(""b""), new Utf8(""a"")), greaterThan(0));\n\n    assertEquals(0, mComparator.compare(new Utf8(""ab""), new Utf8(""ab"")));\n    assertThat(mComparator.compare(new Utf8(""a""), new Utf8(""aa"")), lessThan(0));\n    assertThat(mComparator.compare(new Utf8(""aa""), new Utf8(""a"")), greaterThan(0));\n\n    assertThat(mComparator.compare(new Utf8(""abc""), new Utf8(""abcdef"")), lessThan(0));\n    assertThat(mComparator.compare(new Utf8(""abcdef""), new Utf8(""abc"")), greaterThan(0));\n  }\n']",Comparator;compare;aa;That;compare;Comparator;Than;Equals;Ut;Ut,2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.3460521586239338e-10;1.3096723705530167e-10;1.2369127944111824e-10;1.2369127944111824e-10;1.1641532182693481e-10;1.0913936421275139e-10,5,5,"[-5.804329872131348, -5.665403366088867, -6.221834182739258, -5.257288932800293, -5.434606075286865, -0.018200766295194626]",0.9819638729095459
3,"['  @Test\n  public void testCompareUtf8ToString() {\n    assertEquals(0, mComparator.compare(new Utf8(""""), """"));\n    assertThat(mComparator.compare(new Utf8(""""), ""a""), lessThan(0));\n    assertThat(mComparator.compare(new Utf8(""a""), """"), greaterThan(0));\n\n    assertEquals(0, mComparator.compare(new Utf8(""a""), ""a""));\n    assertThat(mComparator.compare(new Utf8(""a""), ""b""), lessThan(0));\n    assertThat(mComparator.compare(new Utf8(""b""), ""a""), greaterThan(0));\n\n    assertEquals(0, mComparator.compare(new Utf8(""ab""), ""ab""));\n    assertThat(mComparator.compare(new Utf8(""a""), ""aa""), lessThan(0));\n    assertThat(mComparator.compare(new Utf8(""aa""), ""a""), greaterThan(0));\n\n    assertThat(mComparator.compare(new Utf8(""abc""), ""abcdef""), lessThan(0));\n    assertThat(mComparator.compare(new Utf8(""abcdef""), ""abc""), greaterThan(0));\n  }\n']",compare;greater;Comparator;Comparator;Comparator;Than;abcdef;Equals;Comparator;Than,2.9103830456733704e-10;1.8917489796876907e-10;1.382431946694851e-10;1.3096723705530167e-10;1.2096279533579946e-10;1.0550138540565968e-10;1.0186340659856796e-10;9.822542779147625e-11;9.458744898438454e-11;9.458744898438454e-11,5,5,"[-5.805609703063965, -5.664912223815918, -6.215237617492676, -5.2498087882995605, -5.4275803565979, -0.018283173441886902]",0.9818829298019409
3,"['  @Test\n  public void testSerialize() throws IOException {\n    // Create a serializer.\n    Schema writerSchema = Schema.create(Schema.Type.STRING);\n    AvroSerializer<CharSequence> serializer = new AvroSerializer<>(writerSchema);\n\n    // Check the writer schema.\n    assertEquals(writerSchema, serializer.getWriterSchema());\n\n    // Serialize two records, \'record1\' and \'record2\'.\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    serializer.open(outputStream);\n    serializer.serialize(new AvroKey<>(""record1""));\n    serializer.serialize(new AvroKey<>(""record2""));\n    serializer.close();\n\n    // Make sure the records were serialized correctly.\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    Schema readerSchema = Schema.create(Schema.Type.STRING);\n    DatumReader<CharSequence> datumReader = new GenericDatumReader<>(readerSchema);\n    Decoder decoder = DecoderFactory.get().binaryDecoder(inputStream, null);\n    CharSequence record = null;\n\n    record = datumReader.read(record, decoder);\n    assertEquals(""record1"", record.toString());\n\n    record = datumReader.read(record, decoder);\n    assertEquals(""record2"", record.toString());\n\n    inputStream.close();\n  }\n']",sure;serializer;IOException;decoder;Avro;and;new;Check;serializer;Schema,4.656612873077393e-10;3.2741809263825417e-10;3.055902197957039e-10;2.1827872842550278e-10;2.1827872842550278e-10;2.1827872842550278e-10;1.4551915228366852e-10;1.4370016288012266e-10;1.1641532182693481e-10;1.0913936421275139e-10,5,5,"[-5.835897922515869, -5.700087070465088, -6.281433582305908, -5.322649002075195, -5.505117893218994, -0.017230460420250893]",0.9829171299934387
3,"['  @Test\n  public void testDeserialize() throws IOException {\n    // Create a deserializer.\n    Schema writerSchema = Schema.create(Schema.Type.STRING);\n    Schema readerSchema = Schema.create(Schema.Type.STRING);\n    ClassLoader classLoader = this.getClass().getClassLoader();\n    AvroKeyDeserializer<CharSequence> deserializer =\n        new AvroKeyDeserializer<>(writerSchema, readerSchema, classLoader);\n\n    // Check the schemas.\n    assertEquals(writerSchema, deserializer.getWriterSchema());\n    assertEquals(readerSchema, deserializer.getReaderSchema());\n\n    // Write some records to deserialize.\n    DatumWriter<CharSequence> datumWriter = new GenericDatumWriter<>(writerSchema);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    Encoder encoder = EncoderFactory.get().binaryEncoder(outputStream, null);\n    datumWriter.write(""record1"", encoder);\n    datumWriter.write(""record2"", encoder);\n    encoder.flush();\n\n    // Deserialize the records.\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    deserializer.open(inputStream);\n    AvroWrapper<CharSequence> record = null;\n\n    record = deserializer.deserialize(record);\n    assertEquals(""record1"", record.datum().toString());\n\n    record = deserializer.deserialize(record);\n    assertEquals(""record2"", record.datum().toString());\n\n    deserializer.close();\n  }\n']",the;Reader;STRING;deserializer;the;Type;deserialize;Avro;deserializer;Schema,5.238689482212067e-10;3.4924596548080444e-10;3.346940502524376e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;2.1827872842550278e-10;1.8917489796876907e-10;1.8189894035458565e-10,5,5,"[-5.83582878112793, -5.705660820007324, -6.289612770080566, -5.320380687713623, -5.51915168762207, -0.01714984141290188]",0.9829962849617004
3,['  @Test\n  public void testAccept() {\n    AvroSerialization<CharSequence> serialization = new AvroSerialization<>();\n\n    assertTrue(serialization.accept(AvroKey.class));\n    assertTrue(serialization.accept(AvroValue.class));\n    assertFalse(serialization.accept(AvroWrapper.class));\n    assertFalse(serialization.accept(String.class));\n  }\n'],serialization;Sequence;serialization;accept;serialization;accept;True;Avro;serialization;Wrapper,6.693881005048752e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10,5,5,"[-5.832395553588867, -5.751706600189209, -6.303630352020264, -5.383880615234375, -5.434396266937256, -0.017036285251379013]",0.9831081032752991
3,"['  @Test\n  public void testGetSerializerForKey() throws IOException {\n    // Set the writer schema in the job configuration.\n    Schema writerSchema = Schema.create(Schema.Type.STRING);\n    Job job = new Job();\n    AvroJob.setMapOutputKeySchema(job, writerSchema);\n\n    // Get a serializer from the configuration.\n    AvroSerialization serialization\n        = ReflectionUtils.newInstance(AvroSerialization.class, job.getConfiguration());\n    @SuppressWarnings(""unchecked"")\n    Serializer<AvroWrapper> serializer = serialization.getSerializer(AvroKey.class);\n    assertTrue(serializer instanceof AvroSerializer);\n    AvroSerializer avroSerializer = (AvroSerializer) serializer;\n\n    // Check that the writer schema is set correctly on the serializer.\n    assertEquals(writerSchema, avroSerializer.getWriterSchema());\n  }\n']",the;Check;configuration;Writer;the;writer;Serializer;STRING;Get;Reflection,1.1641532182693481e-09;5.020410753786564e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.5652192309498787e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.853251934051514, -5.73429536819458, -6.33239221572876, -5.384906768798828, -5.520249843597412, -0.01660878211259842]",0.9835283756256104
3,"['  @Test\n  public void testGetSerializerForValue() throws IOException {\n    // Set the writer schema in the job configuration.\n    Schema writerSchema = Schema.create(Schema.Type.STRING);\n    Job job = new Job();\n    AvroJob.setMapOutputValueSchema(job, writerSchema);\n\n    // Get a serializer from the configuration.\n    AvroSerialization serialization\n        = ReflectionUtils.newInstance(AvroSerialization.class, job.getConfiguration());\n    @SuppressWarnings(""unchecked"")\n    Serializer<AvroWrapper> serializer = serialization.getSerializer(AvroValue.class);\n    assertTrue(serializer instanceof AvroSerializer);\n    AvroSerializer avroSerializer = (AvroSerializer) serializer;\n\n    // Check that the writer schema is set correctly on the serializer.\n    assertEquals(writerSchema, avroSerializer.getWriterSchema());\n  }\n']",configuration;configuration;Serializer;in;that;new;class;Get;Set;writer,9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.85258150100708, -5.739434719085693, -6.330715656280518, -5.376646995544434, -5.516366004943848, -0.0166514590382576]",0.9834864139556885
3,"['  @Test\n  public void testGetDeserializerForKey() throws IOException {\n    // Set the reader schema in the job configuration.\n    Schema readerSchema = Schema.create(Schema.Type.STRING);\n    Job job = new Job();\n    AvroJob.setMapOutputKeySchema(job, readerSchema);\n\n    // Get a deserializer from the configuration.\n    AvroSerialization serialization\n        = ReflectionUtils.newInstance(AvroSerialization.class, job.getConfiguration());\n    @SuppressWarnings(""unchecked"")\n    Deserializer<AvroWrapper> deserializer = serialization.getDeserializer(AvroKey.class);\n    assertTrue(deserializer instanceof AvroKeyDeserializer);\n    AvroKeyDeserializer avroDeserializer = (AvroKeyDeserializer) deserializer;\n\n    // Check that the reader schema is set correctly on the deserializer.\n    assertEquals(readerSchema, avroDeserializer.getReaderSchema());\n  }\n']",Set;configuration;configuration;For;Reflection;schema;that;serialization;correctly;set,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.852046966552734, -5.7420525550842285, -6.33939266204834, -5.389193534851074, -5.525727272033691, -0.01653210073709488]",0.9836037755012512
3,"['  @Test\n  public void testGetDeserializerForValue() throws IOException {\n    // Set the reader schema in the job configuration.\n    Schema readerSchema = Schema.create(Schema.Type.STRING);\n    Job job = new Job();\n    AvroJob.setMapOutputValueSchema(job, readerSchema);\n\n    // Get a deserializer from the configuration.\n    AvroSerialization serialization\n        = ReflectionUtils.newInstance(AvroSerialization.class, job.getConfiguration());\n    @SuppressWarnings(""unchecked"")\n    Deserializer<AvroWrapper> deserializer = serialization.getDeserializer(AvroValue.class);\n    assertTrue(deserializer instanceof AvroValueDeserializer);\n    AvroValueDeserializer avroDeserializer = (AvroValueDeserializer) deserializer;\n\n    // Check that the reader schema is set correctly on the deserializer.\n    assertEquals(readerSchema, avroDeserializer.getReaderSchema());\n  }\n']",configuration;Schema;For;Set;the;Configuration;that;the;schema;Check,1.5133991837501526e-09;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.853765964508057, -5.7475786209106445, -6.34250545501709, -5.38456916809082, -5.525692462921143, -0.016525182873010635]",0.9836106300354004
3,"['  @Test\n  public void testRoundTrip() throws Exception {\n    Schema schema = Schema.create(Schema.Type.STRING);\n    assertTrue(roundTrip(schema, ""record"", null) instanceof String);\n    assertTrue(roundTrip(schema, ""record"", GenericData.class) instanceof Utf8);\n  }\n']",STRING;Generic;schema;Data;Round;Schema;record;round;create;schema,1.5133991837501526e-09;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10,5,5,"[-5.840895175933838, -5.6944804191589355, -6.29896879196167, -5.393562316894531, -5.423846244812012, -0.01721218042075634]",0.9829351902008057
3,"['    @Test\n    public void testGetAgainstTrustedCertServer() throws RepositoryException, ClientProtocolException, IOException {\n        assumeTrue(""Cannot connect to http://www.apache.org"", canConnectTo(""http://www.apache.org""));\n        RepositoryServiceImpl repositoryServiceImpl = RepositoryServiceImplTest.getRepositoryService(""https://jackrabbit.apache.org/jcr"", ConnectionOptions.builder().build());\n        HttpClient client = repositoryServiceImpl.getClient(null);\n        HttpGet get = new HttpGet(""https://jackrabbit.apache.org/jcr/index.html"");\n        String content = client.execute(get, new BasicResponseHandler());\n        assertFalse(content.isEmpty());\n    }\n']",www;annot;http;org;http;jack;execute;Impl;Service;jack,1.6298145055770874e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.885218143463135, -5.774872779846191, -6.384999752044678, -5.428949356079102, -5.516083240509033, -0.016109777614474297]",0.9840191602706909
3,"['    @Test\n    public void testGetAgainstTrustedCertServerWithSystemProperties() throws RepositoryException, ClientProtocolException, IOException {\n        assumeTrue(""Cannot connect to http://www.apache.org"", canConnectTo(""http://www.apache.org""));\n        // use dedicated trust store\n        Path keyStorePath = tmpDirectory.getRoot().toPath().resolve(""emptyPKCS12.keystore"");\n        try (InputStream is = this.getClass().getResourceAsStream(""emptyPKCS12.keystore"")) {\n            Files.copy(is, keyStorePath);\n        }\n        String oldTrustStore = System.setProperty(""javax.net.ssl.trustStore"", keyStorePath.toString());\n        String oldTrustStorePassword = System.setProperty(""javax.net.ssl.trustStorePassword"", ""storePassword"");\n        String oldDebug = System.setProperty(""javax.net.debug"", ""ssl"");\n        try {\n            ConnectionOptions connectionOptions = ConnectionOptions.builder().useSystemProperties(true).build();\n            RepositoryServiceImpl repositoryServiceImpl = RepositoryServiceImplTest.getRepositoryService(""https://jackrabbit.apache.org/jcr"", connectionOptions);\n            HttpClient client = repositoryServiceImpl.getClient(null);\n            HttpGet get = new HttpGet(""https://jackrabbit.apache.org/jcr/index.html"");\n            // connection must fail as cert is not trusted due to used trust store being empty\n            assertThrows(SSLException.class, () -> client.execute(get, new BasicResponseHandler()));\n        } finally {\n            setOrClearSystemProperty(""javax.net.ssl.trustStore"", oldTrustStore);\n            setOrClearSystemProperty(""javax.net.ssl.trustStorePassword"", oldTrustStorePassword);\n            setOrClearSystemProperty(""javax.net.debug"", oldDebug);\n        }\n    }\n']",www;Client;Trusted;Service;ssl;Options;connection;Options;trusted;fail,1.1641532182693481e-09;5.820766091346741e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.8684539794921875, -5.698184967041016, -6.373140811920166, -5.420947074890137, -5.5814385414123535, -0.016206782311201096]",0.9839238524436951
3,"['    @Test\n    public void testException() {\n\n        String wspuri = ""https://example.org/foo/"";\n        IdURICache cache = new IdURICache(wspuri);\n        String test;\n\n        // port number\n        test = ""https://example.org:443/foo/x"";\n        try {\n            cache.add(test, null);\n            fail(""should throw"");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(""Workspace mismatch: \'"" + test + ""\' not under workspace \'"" + wspuri\n                    + ""\' (position 18: \'{https://example.org}:443/foo/x\', expected: \'/foo/\')"", ex.getMessage());\n        }\n\n        // protocol\n        test = ""http://example.org/foo/x"";\n        try {\n            cache.add(test, null);\n            fail(""should throw"");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(""Workspace mismatch: \'"" + test + ""\' not under workspace \'"" + wspuri\n                    + ""\' (position 3: \'{http}://example.org/foo/x\', expected: \'s://example.org/foo/\')"", ex.getMessage());\n        }\n\n        // hostname\n        test = ""https://example.com/foo/x"";\n        try {\n            cache.add(test, null);\n            fail(""should throw"");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(""Workspace mismatch: \'"" + test + ""\' not under workspace \'"" + wspuri\n                    + ""\' (position 15: \'{https://example.}com/foo/x\', expected: \'org/foo/\')"", ex.getMessage());\n        }\n\n        // root path\n        test = ""https://example.org/bar/x"";\n        try {\n            cache.add(test, null);\n            fail(""should throw"");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(""Workspace mismatch: \'"" + test + ""\' not under workspace \'"" + wspuri\n                    + ""\' (position 19: \'{https://example.org/}bar/x\', expected: \'foo/\')"", ex.getMessage());\n        }\n\n        // too short\n        test = ""https://example.org/fo/x"";\n        try {\n            cache.add(test, null);\n            fail(""should throw"");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(""Workspace mismatch: \'"" + test + ""\' not under workspace \'"" + wspuri\n                    + ""\' (position 21: \'{https://example.org/fo}/x\', expected: \'o/\')"", ex.getMessage());\n        }\n\n        // way too short\n        test = ""https://x.org/foo/x"";\n        try {\n            cache.add(test, null);\n            fail(""should throw"");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(""Workspace mismatch: \'"" + test + ""\' not under workspace \'"" + wspuri\n                    + ""\' (position 7: \'{https://}x.org/foo/x\', expected: \'example.org/foo/\')"", ex.getMessage());\n        }\n    }\n']",position;position;number;foo;cache;foo;foo;should;example;foo,9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.857590675354004, -5.720019817352295, -6.331174850463867, -5.34122371673584, -5.550051689147949, -0.016734227538108826]",0.9834049940109253
3,"['    @Test\n    public void testWithSystemPropertiesAndIncompatibleConnectionOptions() throws RepositoryException {\n        ConnectionOptions connectionOptions = ConnectionOptions.builder().useSystemProperties(true).allowSelfSignedCertificates(true).build();\n        assertThrows(RepositoryException.class, ()->getRepositoryService(""https://jackrabbit.apache.org/jcr"", connectionOptions));\n        ConnectionOptions connectionOptions2 = ConnectionOptions.builder().useSystemProperties(true).disableHostnameVerification(true).build();\n        assertThrows(RepositoryException.class, ()->getRepositoryService(""https://jackrabbit.apache.org/jcr"", connectionOptions2));\n    }\n']",Repository;Repository;Repository;builder;System;Certificates;use;Verification;Connection;jack,8.003553375601768e-10;6.693881005048752e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;5.675246939063072e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.84424352645874, -5.723951816558838, -6.310405254364014, -5.385837078094482, -5.483792781829834, -0.016856491565704346]",0.9832848906517029
3,"['    @Test\n    public void testFromServiceParameterToServiceParameters() {\n        Map<String, String> serviceParameters = new HashMap<>();\n        serviceParameters.put(ConnectionOptions.PARAM_USE_SYSTEM_PROPERTIES, ""true"");\n        serviceParameters.put(ConnectionOptions.PARAM_MAX_CONNECTIONS, ""10"");\n        serviceParameters.put(ConnectionOptions.PARAM_ALLOW_SELF_SIGNED_CERTIFICATES, ""true"");\n        serviceParameters.put(ConnectionOptions.PARAM_DISABLE_HOSTNAME_VERIFICATION, ""true"");\n        serviceParameters.put(ConnectionOptions.PARAM_CONNECTION_TIMEOUT_MS, ""100"");\n        serviceParameters.put(ConnectionOptions.PARAM_REQUEST_TIMEOUT_MS, ""200"");\n        serviceParameters.put(ConnectionOptions.PARAM_SOCKET_TIMEOUT_MS, ""300"");\n        serviceParameters.put(ConnectionOptions.PARAM_PROXY_HOST, ""somehost"");\n        serviceParameters.put(ConnectionOptions.PARAM_PROXY_PORT, ""111"");\n        serviceParameters.put(ConnectionOptions.PARAM_PROXY_USERNAME, ""user"");\n        serviceParameters.put(ConnectionOptions.PARAM_PROXY_PASSWORD, ""password"");\n        Assert.assertEquals(serviceParameters, ConnectionOptions.fromServiceFactoryParameters(serviceParameters).toServiceFactoryParameters());\n    }\n']",SIGNED;Service;From;CONNECTIONS;PARAM;VERIFICATION;Map;Connection;CON;Parameter,2.9103830456733704e-09;1.280568540096283e-09;9.313225746154785e-10;9.022187441587448e-10;9.022187441587448e-10;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;6.257323548197746e-10;5.820766091346741e-10,5,5,"[-5.822610378265381, -5.692440032958984, -6.3296942710876465, -5.392699718475342, -5.524895668029785, -0.016790026798844337]",0.9833502769470215
3,"['    @Test\n    public void testLegacyMaxConnectionsParameter() {\n        Map<String, String> serviceParameters = new HashMap<>();\n        serviceParameters.put(""org.apache.jackrabbit.spi2davex.MaxConnections"", ""30"");\n        ConnectionOptions connectionOptions = ConnectionOptions.builder().maxConnections(30).build();\n        Assert.assertEquals(connectionOptions, ConnectionOptions.fromServiceFactoryParameters(serviceParameters));\n    }\n']",Parameters;service;Factory;Hash;service;connection;Options;ave;Max;max,3.725290298461914e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.979060471057892e-09;1.862645149230957e-09;1.8044374883174896e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10,5,5,"[-5.9089813232421875, -5.792263507843018, -6.3874993324279785, -5.473440647125244, -5.468698501586914, -0.015989063307642937]",0.9841380715370178
3,"['    @Test\n    public void testBuilder() {\n        ConnectionOptions.Builder builder = ConnectionOptions.builder();\n        builder.allowSelfSignedCertificates(true);\n        builder.disableHostnameVerification(false);\n        builder.maxConnections(10);\n        builder.connectionTimeoutMs(100);\n        builder.requestTimeoutMs(200);\n        builder.socketTimeoutMs(300);\n        builder.proxyHost(""proxyHost"");\n        builder.proxyPort(1234);\n        builder.proxyUsername(""proxyUser"");\n        builder.proxyPassword(""proxyPassword"");\n        builder.proxyProtocol(""https:"");\n        ConnectionOptions options = builder.build();\n        Assert.assertEquals(true, options.isAllowSelfSignedCertificates());\n        Assert.assertEquals(false, options.isDisableHostnameVerification());\n        Assert.assertEquals(10, options.getMaxConnections());\n        Assert.assertEquals(100, options.getConnectionTimeoutMs());\n        Assert.assertEquals(200, options.getRequestTimeoutMs());\n        Assert.assertEquals(300, options.getSocketTimeoutMs());\n        Assert.assertEquals(""proxyHost"", options.getProxyHost());\n        Assert.assertEquals(1234, options.getProxyPort());\n        Assert.assertEquals(""proxyUser"", options.getProxyUsername());\n        Assert.assertEquals(""proxyPassword"", options.getProxyPassword());\n        Assert.assertEquals(""https:"", options.getProxyProtocol());\n    }\n']",Password;User;Connection;Password;User;Ms;Max;proxy;Host;Options,4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.812117576599121, -5.68302583694458, -6.2504496574401855, -5.275184154510498, -5.46835470199585, -0.017816854640841484]",0.982340931892395
3,"['    @Test\n    public void testDavComplianceHeader() {\n\n        List<String> l;\n\n        l = FieldValueParser.tokenizeList(""1"");\n        assertArrayEquals(new String[]{""1""}, l.toArray());\n\n        l = FieldValueParser.tokenizeList(""1,2,,,,,3,,bind,"");\n        assertArrayEquals(new String[]{""1"",""2"",""3"",""bind""}, l.toArray());\n\n        l = FieldValueParser.tokenizeList(""1,2,<http://example.com/foo,bar>"");\n        assertArrayEquals(new String[]{""1"",""2"",""<http://example.com/foo,bar>""}, l.toArray());\n    }\n']",foo;to;tokenize;com;Field;foo;av;List;new;Parser,7.566995918750763e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7826096154749393e-10;1.382431946694851e-10,5,5,"[-5.833433628082275, -5.716785907745361, -6.261934280395508, -5.30322265625, -5.444255828857422, -0.01757594384253025]",0.9825776219367981
3,"['    @Test\n    public void testDoubleOutput() throws Exception {\n        StringWriter writer = new StringWriter();\n        JsonWriter jsonWriter = new JsonWriter(writer);\n\n        Node parent = createMock(Node.class);\n        Property doubleProperty = createMock(Property.class);\n        Value doublePropertyValue = createMock(Value.class);\n        expect(doubleProperty.getType()).andReturn(PropertyType.DOUBLE).anyTimes();\n        expect(doubleProperty.getName()).andReturn(""singleValued"").anyTimes();\n        expect(doubleProperty.isMultiple()).andReturn(false).anyTimes();\n        expect(doubleProperty.getValue()).andReturn(doublePropertyValue).anyTimes();\n        expect(doublePropertyValue.getType()).andReturn(PropertyType.DOUBLE).anyTimes();\n        expect(doublePropertyValue.getDouble()).andReturn(5d).anyTimes();\n        expect(doublePropertyValue.getString()).andReturn(""5"").anyTimes();\n\n        Property mvDoubleProperty = createMock(Property.class);\n        Value mvDoublePropertyValue1 = createMock(Value.class);\n        Value mvDoublePropertyValue2 = createMock(Value.class);\n        expect(mvDoubleProperty.getType()).andReturn(PropertyType.DOUBLE).anyTimes();\n        expect(mvDoubleProperty.getName()).andReturn(""multiValued"").anyTimes();\n        expect(mvDoubleProperty.isMultiple()).andReturn(true).anyTimes();\n        expect(mvDoubleProperty.getValues()).andReturn(new Value[] { mvDoublePropertyValue1, mvDoublePropertyValue2}).anyTimes();\n        expect(mvDoublePropertyValue1.getType()).andReturn(PropertyType.DOUBLE).anyTimes();\n        expect(mvDoublePropertyValue1.getDouble()).andReturn(42d).anyTimes();\n        expect(mvDoublePropertyValue1.getString()).andReturn(""42"").anyTimes();\n        expect(mvDoublePropertyValue2.getType()).andReturn(PropertyType.DOUBLE).anyTimes();\n        expect(mvDoublePropertyValue2.getDouble()).andReturn(98.6).anyTimes();\n        expect(mvDoublePropertyValue2.getString()).andReturn(""98.6"").anyTimes();\n\n        final List<Property> properties = new ArrayList<Property>();\n        properties.add(doubleProperty);\n        properties.add(mvDoubleProperty);\n        expect(parent.getProperties()).andAnswer(new IAnswer<PropertyIterator>() {\n            @Override\n            public PropertyIterator answer() throws Throwable {\n                return new PropertyIteratorAdapter(properties.iterator());\n            }\n']",Exception;Double;Double;OUBLE;Property;single;Property;Double;Value;Multiple,1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.815250873565674, -5.662868499755859, -6.248659610748291, -5.266425609588623, -5.482821941375732, -0.01786557026207447]",0.9822930693626404
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-2.6"");\n    }\n']",Repositories;abbit;Create;do;create;jack;Exception;Repositories,2.7939677238464355e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;-1.862645149230957e-09,5,5,"[-5.9110589027404785, -5.774205207824707, -6.384090423583984, -5.525364875793457, -5.423862934112549, -0.016026487573981285]",0.9841013550758362
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-1.2"");\n    }\n']",Repositories;jack;create;do;Exception;Create;abbit;Repositories,6.05359673500061e-09;3.725290298461914e-09;1.1641532182693481e-09;0.0;-2.3283064365386963e-10;-1.9208528101444244e-09;-2.3283064365386963e-09;-7.916241884231567e-09,5,5,"[-5.911117076873779, -5.775999069213867, -6.387602806091309, -5.524918556213379, -5.424330234527588, -0.016014287248253822]",0.9841132760047913
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-1.5"");\n    }\n']",Create;do;Exception;create;abbit;Repositories;jack;Repositories,6.984919309616089e-10;4.656612873077393e-10;-2.9103830456733704e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.862645149230957e-09;-1.862645149230957e-09;-6.05359673500061e-09,5,5,"[-5.909037113189697, -5.772615432739258, -6.385152816772461, -5.527168273925781, -5.423923492431641, -0.0160276610404253]",0.9841001033782959
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-1.4"");\n    }\n']",Repositories;abbit;Create;create;Exception;jack;Repositories;do,4.6566128730773926e-09;4.6566128730773926e-09;1.862645149230957e-09;1.3969838619232178e-09;-4.0745362639427185e-10;-4.656612873077393e-10;-1.862645149230957e-09;-3.259629011154175e-09,5,5,"[-5.914026737213135, -5.7806854248046875, -6.389413833618164, -5.528846740722656, -5.4268083572387695, -0.01596149429678917]",0.9841651916503906
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-1.6"");\n    }\n']",Repositories;Repositories;jack;abbit;do;Exception;create;Create,2.561137080192566e-09;1.862645149230957e-09;4.656612873077393e-10;0.0;-2.3283064365386963e-10;-2.9103830456733704e-10;-8.149072527885437e-10;-1.862645149230957e-09,5,5,"[-5.9113359451293945, -5.775875091552734, -6.386839866638184, -5.525027275085449, -5.425354957580566, -0.01601041480898857]",0.9841170907020569
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-1.0"");\n    }\n']",Repositories;create;Repositories;Exception;Create;jack;abbit;do,1.1175870895385742e-08;2.7939677238464355e-09;4.656612873077393e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.862645149230957e-09;-6.51925802230835e-09;-8.381903171539307e-09,5,5,"[-5.917269229888916, -5.782907485961914, -6.398799419403076, -5.534207344055176, -5.42431116104126, -0.015919256955385208]",0.9842066764831543
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-1.1"");\n    }\n']",abbit;Repositories;Create;jack;Exception;create;Repositories;do,4.6566128730773926e-09;3.725290298461914e-09;-2.3283064365386963e-10;-9.313225746154785e-10;-9.89530235528946e-10;-1.1641532182693481e-09;-1.862645149230957e-09;-3.259629011154175e-09,5,5,"[-5.917496681213379, -5.785722732543945, -6.397575378417969, -5.53248405456543, -5.426701068878174, -0.01590822823345661]",0.984217643737793
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-2.1"");\n    }\n']",Repositories;create;Exception;do;Repositories;Create;jack;abbit,2.3283064365386963e-09;1.6298145055770874e-09;-2.9103830456733704e-10;-4.656612873077393e-10;-1.1641532182693481e-09;-1.6880221664905548e-09;-1.862645149230957e-09;-3.725290298461914e-09,5,5,"[-5.911596298217773, -5.776974678039551, -6.387775421142578, -5.5268144607543945, -5.424184322357178, -0.016002671793103218]",0.9841247797012329
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-2.2"");\n    }\n']",Create;abbit;Exception;Repositories;do;jack;create;Repositories,3.0850060284137726e-09;2.3283064365386963e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;-1.862645149230957e-09;-4.423782229423523e-09,5,5,"[-5.9143242835998535, -5.778647422790527, -6.389883041381836, -5.5283989906311035, -5.424596786499023, -0.015977919101715088]",0.9841489195823669
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-1.3"");\n    }\n']",jack;create;Exception;do;Repositories;abbit;Repositories;Create,2.7939677238464355e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;-1.862645149230957e-09;-2.3283064365386963e-09;-4.190951585769653e-09;-4.540197551250458e-09,5,5,"[-5.912240505218506, -5.777114391326904, -6.3890700340271, -5.527743816375732, -5.425428867340088, -0.015988945960998535]",0.9841383099555969
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-2.4"");\n    }\n']",Repositories;Repositories;abbit;Create;jack;create;Exception;do,6.51925802230835e-09;5.122274160385132e-09;1.1641532182693481e-09;8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.9103830456733704e-10;-2.0954757928848267e-09,5,5,"[-5.891941547393799, -5.750056266784668, -6.365711688995361, -5.511178493499756, -5.4173359870910645, -0.016275865957140923]",0.9838559627532959
3,"['    @Test\n    public void createRepositories() throws Exception {\n        doCreateRepositories(""jackrabbit-2.0"");\n    }\n']",Repositories;Create;do;create;abbit;Exception;Repositories;jack,9.313225746154785e-09;3.4924596548080444e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;0.0;-2.7939677238464355e-09,5,5,"[-5.909343242645264, -5.771170139312744, -6.389222621917725, -5.53014612197876, -5.419665813446045, -0.016031531617045403]",0.9840962886810303
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""2.3"");\n\n        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""true"");\n        testPerformance(""2.3-expSort"", getDefaultConfig());\n        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""false"");\n    }\n']",NATIVE;Performance;Sort;Property;Engine;exp;System;Engine;get;System,3.6088749766349792e-09;3.4924596548080444e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10,5,5,"[-5.862436771392822, -5.746416091918945, -6.334615230560303, -5.429925918579102, -5.467583179473877, -0.016553441062569618]",0.9835827946662903
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""1.6"");\n    }\n']",Exception;Performance;Performance,4.0745362639427185e-10;-1.862645149230957e-09;-2.7939677238464355e-09,5,5,"[-5.884599208831787, -5.724967956542969, -6.329092979431152, -5.483599662780762, -5.383289337158203, -0.016715001314878464]",0.9834239482879639
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""1.0"");\n    }\n']",Performance;Performance;Exception,3.4924596548080444e-10;2.3283064365386963e-10;-4.0745362639427185e-10,5,5,"[-5.884415149688721, -5.733933925628662, -6.332839488983154, -5.493139266967773, -5.379149436950684, -0.016658375039696693]",0.9834796190261841
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""1.3"");\n    }\n']",Performance;Exception;Performance,0.0;-2.3283064365386963e-10;-5.820766091346741e-10,5,5,"[-5.88206148147583, -5.722760200500488, -6.3266401290893555, -5.482486724853516, -5.380403518676758, -0.01675216294825077]",0.9833873510360718
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""2.2"");\n    }\n']",Exception;Performance;Performance,2.9103830456733704e-10;-5.820766091346741e-10;-9.313225746154785e-10,5,5,"[-5.881423473358154, -5.725185394287109, -6.325453281402588, -5.482265949249268, -5.380176067352295, -0.016750052571296692]",0.9833893179893494
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""2.4"");\n\n        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""true"");\n        testPerformance(""2.4-expSort"", getDefaultConfig());\n        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""false"");\n    }\n']",Engine;Query;NATIVE;Sort;get;Engine;Performance;exp;NATIVE;true,6.51925802230835e-09;4.423782229423523e-09;2.9103830456733704e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.2223608791828156e-09;9.458744898438454e-10,5,5,"[-5.86309814453125, -5.748028755187988, -6.336709499359131, -5.432793140411377, -5.472536563873291, -0.01650853268802166]",0.9836269617080688
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""1.5"");\n    }\n']",Performance;Exception;Performance,-9.313225746154785e-10;-1.2223608791828156e-09;-1.0244548320770264e-08,5,5,"[-5.8830671310424805, -5.724116802215576, -6.327601909637451, -5.483499050140381, -5.381143569946289, -0.016735399141907692]",0.9834038615226746
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""2.1"");\n    }\n']",Performance;Exception;Performance,0.0;-5.820766091346741e-11;-4.656612873077393e-10,5,5,"[-5.881594657897949, -5.723598480224609, -6.326379776000977, -5.482165336608887, -5.379227638244629, -0.016758142039179802]",0.9833815097808838
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""1.1"");\n    }\n']",Performance;Exception;Performance,3.725290298461914e-09;-6.402842700481415e-10;-3.725290298461914e-09,5,5,"[-5.880499839782715, -5.723773956298828, -6.325949668884277, -5.482055187225342, -5.378526210784912, -0.016765175387263298]",0.9833745956420898
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""2.0"");\n    }\n']",Performance;Exception;Performance,3.4924596548080444e-09;6.984919309616089e-10;-2.3283064365386963e-10,5,5,"[-5.883752346038818, -5.732077598571777, -6.330539703369141, -5.4912567138671875, -5.378225803375244, -0.016682760789990425]",0.9834555983543396
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""1.4"");\n    }\n']",Exception;Performance;Performance,-5.820766091346741e-11;-3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-5.884357929229736, -5.724372863769531, -6.328183174133301, -5.482979774475098, -5.382719039916992, -0.016724614426493645]",0.9834144711494446
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""2.6"");\n\n        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""true"");\n        testPerformance(""2.6-expSort"", getDefaultConfig());\n        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""false"");\n    }\n']",get;System;SYSTEM;SYSTEM;Engine;System;Query;ORT;Exception;set,3.026798367500305e-09;2.7939677238464355e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09,5,5,"[-5.8628010749816895, -5.750382900238037, -6.336006164550781, -5.432569980621338, -5.47033166885376, -0.016513457521796227]",0.983622133731842
3,"['    @Test\n    public void testPerformance() throws Exception {\n        testPerformance(""1.2"");\n    }\n']",Performance;Exception;Performance,1.1641532182693481e-09;5.238689482212067e-10;-1.1641532182693481e-09,5,5,"[-5.883450031280518, -5.7253289222717285, -6.330347537994385, -5.485633373260498, -5.381913185119629, -0.016712656244635582]",0.9834262132644653
3,"['    @Test\n    public void testGetOrCreateByPath1() throws RepositoryException {\n        String path = testRoot + ""/foo"";\n        Node node = JcrUtils.getOrCreateByPath(path, ""nt:unstructured"", superuser);\n        superuser.save();\n        assertEquals(path, node.getPath());\n        assertTrue(superuser.nodeExists(path));\n\n        // existing top-level node, two new descendant nodes\n        String path2 = testRoot + ""/foo/a/b"";\n        Node node2 = JcrUtils.getOrCreateByPath(path2, ""nt:unstructured"", superuser);\n        superuser.save();\n        assertEquals(path2, node2.getPath());\n        assertTrue(superuser.nodeExists(path2));\n    }\n']",Repository;cr;foo;Path;Utils;path;Exists;Or;Path;unstructured,2.0372681319713593e-09;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.887807369232178, -5.807129383087158, -6.358968257904053, -5.409428119659424, -5.518152713775635, -0.016127020120620728]",0.9840023517608643
3,"['    @Test\n    public void testGetOrCreateByPathNoRoot() throws RepositoryException {\n        String base = testRoot + ""/foo"";\n        Node inter = JcrUtils.getOrCreateByPath(base, ""nt:unstructured"", superuser);\n        assertEquals(base, inter.getPath());\n        superuser.save();\n\n        // test what happens if getRootNode() throws\n        Session mockedSession = Mockito.spy(superuser);\n        Mockito.when(mockedSession.getRootNode()).thenThrow(new AccessDeniedException(""access denied""));\n        Mockito.when(mockedSession.getNode(""/"")).thenThrow(new AccessDeniedException(""access denied""));\n        Mockito.when(mockedSession.getItem(""/"")).thenThrow(new AccessDeniedException(""access denied""));\n        Mockito.when(mockedSession.nodeExists(""/"")).thenReturn(false);\n\n        Node result = JcrUtils.getOrCreateByPath(base + ""/bar"", false, null, null, mockedSession, false);\n        mockedSession.save();\n        assertEquals(base + ""/bar"", result.getPath());\n\n        // already exists -> nop\n        Node result2 = JcrUtils.getOrCreateByPath(base + ""/bar"", false, null, null, mockedSession, false);\n        mockedSession.save();\n        assertEquals(base + ""/bar"", result2.getPath());\n\n        // create unique\n        Node result3 = JcrUtils.getOrCreateByPath(base + ""/bar"", true, null, null, mockedSession, false);\n        mockedSession.save();\n        assertEquals(base + ""/bar0"", result3.getPath());\n\n        // already exists with createUnique == false should pass even when parent isn\'t readable\n        Mockito.when(mockedSession.getNode(base)).thenThrow(new AccessDeniedException(""access denied""));\n        Mockito.when(mockedSession.getItem(base)).thenThrow(new AccessDeniedException(""access denied""));\n        Mockito.when(mockedSession.nodeExists(base)).thenReturn(false);\n        Node result4 = JcrUtils.getOrCreateByPath(base + ""/bar"", false, null, null, mockedSession, false);\n        mockedSession.save();\n        assertEquals(base + ""/bar"", result4.getPath());\n    }\n']",Repository;foo;Utils;bar;when;Or;Get;cr;Node;Path,1.1059455573558807e-09;5.820766091346741e-10;4.911271389573812e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.851541519165039, -5.729339122772217, -6.330885410308838, -5.363129615783691, -5.541293144226074, -0.016650637611746788]",0.9834871888160706
3,"['    @Test\n    public void testQuery() throws Exception {\n        if (Constants.WINDOWS) {\n            return;\n        }\n        for (int i = 0; i < 100; i++) {\n            session.getRootNode().addNode(""node"" + i, ""nt:unstructured"");\n        }\n        session.save();\n        final QueryManager qm = session.getWorkspace().getQueryManager();\n        final AtomicBoolean stop = new AtomicBoolean(false);\n        final List<Exception> exceptions = Collections.synchronizedList(\n                new ArrayList<Exception>());\n        Thread t = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (!stop.get() && exceptions.isEmpty()) {\n                    try {\n                        // execute query\n                        String stmt = ""//*[@jcr:primaryType=\'nt:unstructured\']"";\n                        qm.createQuery(stmt, Query.XPATH).execute();\n                    } catch (RepositoryException e) {\n                        if (Constants.SUN_OS) {\n                            // on Solaris it\'s OK when the root cause\n                            // of the exception is an InterruptedIOException\n                            // the underlying file is not closed\n                            Throwable t = e;\n                            while (t.getCause() != null) {\n                                t = t.getCause();\n                            }\n                            if (!(t instanceof InterruptedIOException)) {\n                                exceptions.add(e);\n                            }\n                        } else {\n                            exceptions.add(e);\n                        }\n                    }\n                }\n            }\n']",Query;Constants;WINDOWS;synchronized;OS;Exception;Node;stmt;Atomic;exceptions,4.802132025361061e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.850927829742432, -5.657852649688721, -6.289769649505615, -5.337198734283447, -5.524387836456299, -0.017166482284665108]",0.9829798936843872
3,"['    @Test\n    public void testEmptyGlobRestriction()throws Exception{\n        Node grandchild = superuser.getNode(childNPath).addNode(""child"");\n        String ccPath = grandchild.getPath();\n        superuser.save();\n\n        // first deny access to \'path\' (read-access is granted in the test setup)\n        Privilege[] read = privilegesFromName(Privilege.JCR_READ);\n        withdrawPrivileges(path, read, Collections.EMPTY_MAP);\n\n        Session testSession = getTestSession();\n        assertFalse(testSession.nodeExists(path));\n        assertFalse(canGetNode(testSession, path));\n        assertFalse(testSession.nodeExists(childNPath));\n        assertFalse(canGetNode(testSession, childNPath));\n        assertFalse(testSession.nodeExists(ccPath));\n        assertFalse(canGetNode(testSession, ccPath));\n        assertFalse(testSession.propertyExists(childNPath + \'/\' + JcrConstants.JCR_PRIMARYTYPE));\n\n        Map<String, Value> emptyStringRestriction = new HashMap<String, Value>(getRestrictions(superuser, childNPath));\n        emptyStringRestriction.put(AccessControlConstants.P_GLOB.toString(), vf.createValue(""""));\n\n        givePrivileges(childNPath, read, emptyStringRestriction);\n        assertFalse(testSession.nodeExists(path));\n        assertFalse(canGetNode(testSession, path));\n        assertTrue(testSession.nodeExists(childNPath));\n        assertTrue(canGetNode(testSession, childNPath));\n        assertFalse(testSession.nodeExists(ccPath));\n        assertFalse(canGetNode(testSession, ccPath));\n        assertFalse(testSession.propertyExists(childNPath + \'/\' + JcrConstants.JCR_PRIMARYTYPE));\n\n        givePrivileges(ccPath, read, Collections.EMPTY_MAP);\n        assertTrue(testSession.nodeExists(ccPath));\n        assertTrue(canGetNode(testSession, ccPath));\n        assertTrue(testSession.propertyExists(ccPath + \'/\' + JcrConstants.JCR_PRIMARYTYPE));\n    }\n']",throws;setup;MAP;the;access;Restriction;Privilege;superuser;node;empty,5.529727786779404e-10;3.2014213502407074e-10;3.128661774098873e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.7462298274040222e-10,5,5,"[-5.867993354797363, -5.732719421386719, -6.351114273071289, -5.392844200134277, -5.557562828063965, -0.016351746395230293]",0.9837812185287476
3,"['    @Test\n    public void testEmptyGlobRestriction2()throws Exception{\n        Node grandchild = superuser.getNode(childNPath).addNode(""child"");\n        String ccPath = grandchild.getPath();\n        superuser.save();\n\n        // first deny access to \'path\' (read-access is granted in the test setup)\n        Privilege[] read = privilegesFromName(Privilege.JCR_READ);\n        withdrawPrivileges(path, read, Collections.EMPTY_MAP);\n\n        Session testSession = getTestSession();\n        assertFalse(testSession.nodeExists(path));\n        assertFalse(canGetNode(testSession, path));\n        assertFalse(testSession.nodeExists(childNPath));\n        assertFalse(canGetNode(testSession, childNPath));\n        assertFalse(testSession.nodeExists(ccPath));\n        assertFalse(canGetNode(testSession, ccPath));\n        assertFalse(testSession.propertyExists(childNPath + \'/\' + JcrConstants.JCR_PRIMARYTYPE));\n\n        Map<String, Value> emptyStringRestriction = new HashMap<String, Value>(getRestrictions(superuser, path));\n        emptyStringRestriction.put(AccessControlConstants.P_GLOB.toString(), vf.createValue(""""));\n\n        givePrivileges(path, read, emptyStringRestriction);\n        assertTrue(testSession.nodeExists(path));\n        assertTrue(canGetNode(testSession, path));\n        assertFalse(testSession.nodeExists(childNPath));\n        assertFalse(canGetNode(testSession, childNPath));\n        assertFalse(testSession.nodeExists(ccPath));\n        assertFalse(canGetNode(testSession, ccPath));\n        assertFalse(testSession.propertyExists(childNPath + \'/\' + JcrConstants.JCR_PRIMARYTYPE));\n    }\n']",GLOB;granted;Privileges;Restriction;Empty;Path;Session;Path;From;first,1.1059455573558807e-09;7.275957614183426e-10;5.529727786779404e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.869813919067383, -5.730756759643555, -6.355821132659912, -5.396760940551758, -5.565068244934082, -0.01629721187055111]",0.9838348627090454
3,"['    @Test\n    public void testEmptyGlobRestriction3()throws Exception{\n        Node child2 = superuser.getNode(path).addNode(""child2"");\n        String childNPath2 = child2.getPath();\n        superuser.save();\n\n        try {\n            Group group1 = getTestGroup();\n            Group group2 = getUserManager(superuser).createGroup(""group2"");\n            group2.addMember(testUser);\n            Group group3 = getUserManager(superuser).createGroup(""group3"");\n            superuser.save();\n\n            assertTrue(group1.isDeclaredMember(testUser));\n            assertTrue(group2.isDeclaredMember(testUser));\n            assertFalse(group3.isDeclaredMember(testUser));\n\n            Privilege[] read = privilegesFromName(Privilege.JCR_READ);\n\n            withdrawPrivileges(path, group1.getPrincipal(), read, Collections.EMPTY_MAP);\n            Map<String, Value> emptyStringRestriction = new HashMap<String, Value>(getRestrictions(superuser, path));\n            emptyStringRestriction.put(AccessControlConstants.P_GLOB.toString(), vf.createValue(""""));\n            givePrivileges(path, group1.getPrincipal(), read, emptyStringRestriction);\n\n            withdrawPrivileges(childNPath, group2.getPrincipal(), read, Collections.EMPTY_MAP);\n            emptyStringRestriction = new HashMap<String, Value>(getRestrictions(superuser, childNPath));\n            emptyStringRestriction.put(AccessControlConstants.P_GLOB.toString(), vf.createValue(""""));\n            givePrivileges(childNPath, group2.getPrincipal(), read, emptyStringRestriction);\n\n            withdrawPrivileges(childNPath2, group3.getPrincipal(), read, Collections.EMPTY_MAP);\n            emptyStringRestriction = new HashMap<String, Value>(getRestrictions(superuser, childNPath2));\n            emptyStringRestriction.put(AccessControlConstants.P_GLOB.toString(), vf.createValue(""""));\n            givePrivileges(childNPath2, group3.getPrincipal(), read, emptyStringRestriction);\n\n            // NOTE: test-session is created here and is expected to reflect the\n            // group membership changes made above.\n            Session testSession = getTestSession();\n            assertTrue(testSession.nodeExists(path));\n            assertTrue(testSession.nodeExists(childNPath));\n            assertFalse(testSession.nodeExists(childNPath2));\n        } finally {\n            Authorizable g2 = getUserManager(superuser).getAuthorizable(""group2"");\n            if (g2 != null) {\n                g2.remove();\n            }\n            Authorizable g3 = getUserManager(superuser).getAuthorizable(""group3"");\n            if (g3 != null) {\n                g3.remove();\n            }\n            superuser.save();\n        }\n    }\n']",Empty;CR;add;Path;privileges;give;Exception;get;Path;Privilege,1.862645149230957e-09;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.091837814077735e-10,5,5,"[-5.8471293449401855, -5.689634799957275, -6.298886775970459, -5.322232246398926, -5.522160053253174, -0.01713249832391739]",0.9830135703086853
3,"['    @Test\n    public void testRemove() throws RepositoryException {\n        Session s = repository.login(new SimpleCredentials(""admin"", ""admin"".toCharArray()));\n        Node n = s.getRootNode().addNode((""a""));\n        s.save();\n\n        n.remove();\n        s.save();\n    }\n']",login;repository;to;Array;redentials;new;Remove;Root;admin;admin,1.6298145055770874e-09;1.2223608791828156e-09;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;5.384208634495735e-10;4.656612873077393e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.875906467437744, -5.765328884124756, -6.335943222045898, -5.429971694946289, -5.463519096374512, -0.016468897461891174]",0.9836660623550415
3,"['    @Test\n    public void testInsert() throws RepositoryException {\n        ComparableArray ca = new ComparableArray(""a"", 1);\n        assertEquals(""a"", ca.toString());\n        assertEquals(1, ca.getOffset());\n\n        // insert before\n        ca.insert(""b"", 0);\n        assertEquals(""[b, a]"", ca.toString());\n        assertEquals(0, ca.getOffset());\n\n        // insert after\n        ca.insert(""c"", 3);\n        assertEquals(""[b, a, null, c]"", ca.toString());\n        assertEquals(0, ca.getOffset());\n\n        // insert inside\n        ca.insert(""d"", 2);\n        assertEquals(""[b, a, d, c]"", ca.toString());\n        assertEquals(0, ca.getOffset());\n    }\n']",Comparable;insert;insert;insert;ca;Offset;ca;Array;Equals;Equals,5.820766091346741e-10;2.9103830456733704e-10;1.8917489796876907e-10;1.7462298274040222e-10;8.731149137020111e-11;8.731149137020111e-11;8.003553375601768e-11;5.820766091346741e-11;5.093170329928398e-11;4.3655745685100555e-11,5,5,"[-5.8224101066589355, -5.674097537994385, -6.240776062011719, -5.2920002937316895, -5.4642252922058105, -0.017766732722520828]",0.9823901653289795
3,"['    @Test\n    public void testFindUserWithSpecialCharIdByPrincipalName() throws RepositoryException {\n        List<String> ids = Arrays.asList(""\'"", Text.escapeIllegalJcrChars(""\']""), Text.escape(""\']""));\n        for (String id : ids) {\n            User user = null;\n            try {\n                user = userMgr.createUser(id, ""pw"");\n                superuser.save();\n\n                boolean found = false;\n                Iterator<Authorizable> it = userMgr.findAuthorizables(""rep:principalName"", id, UserManager.SEARCH_TYPE_USER);\n                while (it.hasNext() && !found) {\n                    Authorizable a = it.next();\n                    found = id.equals(a.getID());\n                }\n                assertTrue(found);\n            } finally {\n                if (user != null) {\n                    user.remove();\n                    superuser.save();\n                }\n            }\n        }\n    }\n']",rep;Char;Principal;gr;USER;Repository;boolean;Exception;Name;By,5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.866458415985107, -5.693351745605469, -6.3083271980285645, -5.339427947998047, -5.524735450744629, -0.016950612887740135]",0.9831922650337219
3,"['    @Test\n    public void testFindUserWithSpecialCharIdByPrincipalName2() throws RepositoryException {\n        List<String> ids = Arrays.asList(""]"");\n        for (String id : ids) {\n            User user = null;\n            try {\n                user = userMgr.createUser(id, ""pw"");\n                superuser.save();\n\n                boolean found = false;\n                Iterator<Authorizable> it = userMgr.findAuthorizables(""rep:principalName"", id, UserManager.SEARCH_TYPE_USER);\n                while (it.hasNext() && !found) {\n                    Authorizable a = it.next();\n                    found = id.equals(a.getID());\n                }\n                assertTrue(found);\n            } finally {\n                if (user != null) {\n                    user.remove();\n                    superuser.save();\n                }\n            }\n        }\n    }\n']",Char;True;rep;Authorizable;TYPE;Find;SEARCH;has;Exception;Name,1.3387762010097504e-09;8.149072527885437e-10;5.820766091346741e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.861002445220947, -5.691399097442627, -6.299047946929932, -5.329980850219727, -5.517845630645752, -0.017064763233065605]",0.9830800294876099
3,"['    @Test\n    public void testQueryUserWithSpecialCharId() throws Exception {\n        List<String> ids = Arrays.asList(""\'"", ""]"");\n        for (String id : ids) {\n            User user = null;\n            try {\n                user = userMgr.createUser(id, ""pw"");\n                superuser.save();\n\n                boolean found = false;\n                String query = ""{\\""condition\\"":[{\\""named\\"":\\"""" + id + ""\\""}]}"";\n                AuthorizableQueryManager queryManager = new AuthorizableQueryManager(userMgr, superuser.getValueFactory());\n                Iterator<Authorizable> it = queryManager.execute(query);\n                while (it.hasNext() && !found) {\n                    Authorizable a = it.next();\n                    found = id.equals(a.getID());\n                }\n                assertTrue(found);\n            } finally {\n                if (user != null) {\n                    user.remove();\n                    superuser.save();\n                }\n            }\n        }\n    }\n']",gr;Char;Query;user;finally;gr;List;Manager;superuser;boolean,2.561137080192566e-09;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.3283064365386963e-10,5,5,"[-5.851889610290527, -5.668066501617432, -6.286810874938965, -5.314803600311279, -5.5073676109313965, -0.017313767224550247]",0.9828352332115173
3,"['    @Test\n    public void bundleStates() {\n        for (Bundle bundle : context.getBundles()) {\n            assertEquals(\n                String.format(""Bundle %s not active. have a look at the logs"", bundle.toString()), \n                Bundle.ACTIVE, bundle.getState());\n        }\n    }\n']",the;undles;bundle;undle;bundle;context;format;Equals;active;look,9.313225746154785e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0;0.0,5,5,"[-5.884032726287842, -5.760624408721924, -6.34303617477417, -5.423975944519043, -5.4831366539001465, -0.016391150653362274]",0.9837424755096436
3,['    @Test\n    public void listBundles() {\n        for (Bundle bundle : context.getBundles()) {\n            System.out.println(bundle);\n        }\n    }\n'],bundle;list;undle;System;get;undles;out;println;undle;context,2.2118911147117615e-09;1.3969838619232178e-09;9.313225746154785e-10;5.238689482212067e-10;4.0745362639427185e-10;3.637978807091713e-11;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-5.896852016448975, -5.744783878326416, -6.35907506942749, -5.450797080993652, -5.460474014282227, -0.0163558516651392]",0.9837770462036133
3,"['    @Test\n    public void listServices() throws InvalidSyntaxException {\n        for (ServiceReference<?> reference\n                : context.getAllServiceReferences(null, null)) {\n            System.out.println(reference);\n        }\n    }\n']",list;All;reference;System;reference;context;Invalid;Service;References;Exception,1.0477378964424133e-09;9.89530235528946e-10;6.402842700481415e-10;3.4924596548080444e-10;2.6193447411060333e-10;0.0;0.0;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.893495082855225, -5.7597737312316895, -6.330653190612793, -5.419426441192627, -5.45051383972168, -0.016550039872527122]",0.9835861325263977
3,"['  @Test\n  public void testPushImageToPrivateAuthedRegistryWithoutAuth() throws Exception {\n    registryContainerId = startAuthedRegistry(client);\n\n    // Make a DockerClient without RegistryAuth\n    final DefaultDockerClient client = DefaultDockerClient.fromEnv().build();\n\n    // Push an image to the private registry and check it fails\n    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();\n    client.build(Paths.get(dockerDirectory), LOCAL_IMAGE);\n\n    exception.expect(ImagePushFailedException.class);\n    client.push(LOCAL_IMAGE);\n  }\n']",build;Private;Path;Push;docker;Default;Directory;Image;Registry;without,1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9098405838012695, -5.800226211547852, -6.447351455688477, -5.546998500823975, -5.520631790161133, -0.015343839302659035]",0.9847733974456787
3,"['  @Test\n  public void testPushImageToPrivateAuthedRegistryWithAuth() throws Exception {\n    registryContainerId = startAuthedRegistry(client);\n\n    // Push an image to the private registry and check it succeeds\n    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();\n    client.build(Paths.get(dockerDirectory), LOCAL_IMAGE);\n    client.tag(LOCAL_IMAGE, LOCAL_IMAGE_2);\n    client.push(LOCAL_IMAGE);\n\n    // Push the same image again under a different user\n    final RegistryAuth registryAuth = RegistryAuth.builder()\n        .username(LOCAL_AUTH_USERNAME_2)\n        .password(LOCAL_AUTH_PASSWORD_2)\n        .build();\n    client.push(LOCAL_IMAGE_2, registryAuth);\n\n    // We should be able to pull it again\n    client.pull(LOCAL_IMAGE);\n    client.pull(LOCAL_IMAGE_2);\n  }\n']",under;USERNAME;UTH;Push;docker;the;image;Registry;final;final,3.725290298461914e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.888064861297607, -5.747325897216797, -6.407325744628906, -5.4960150718688965, -5.5283427238464355, -0.01581307128071785]",0.9843112826347351
3,"['  @Test\n  public void testPushImageToPrivateUnauthedRegistryWithoutAuth() throws Exception {\n    registryContainerId = startUnauthedRegistry(client);\n\n    // Make a DockerClient without RegistryAuth\n    final DefaultDockerClient client = DefaultDockerClient.fromEnv().build();\n\n    // Push an image to the private registry and check it succeeds\n    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();\n    client.build(Paths.get(dockerDirectory), LOCAL_IMAGE);\n    client.push(LOCAL_IMAGE);\n    // We should be able to pull it again\n    client.pull(LOCAL_IMAGE);\n  }\n']",Unauthed;Push;Path;ocker;final;client;Without;Private;succeeds;docker,2.0954757928848267e-09;1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.912350177764893, -5.8007121086120605, -6.448779582977295, -5.541396617889404, -5.536203861236572, -0.015292536467313766]",0.9848238229751587
3,"['  @Test\n  public void testPushImageToPrivateUnauthedRegistryWithAuth() throws Exception {\n    registryContainerId = startUnauthedRegistry(client);\n\n    // Push an image to the private registry and check it succeeds\n    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();\n    client.build(Paths.get(dockerDirectory), LOCAL_IMAGE);\n    client.push(LOCAL_IMAGE);\n    // We should be able to pull it again\n    client.pull(LOCAL_IMAGE);\n  }\n']",Auth;it;and;Registry;Private;registry;client;Push;LOCAL;final,9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;4.94765117764473e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.908552646636963, -5.804670810699463, -6.450798034667969, -5.538437843322754, -5.51789665222168, -0.01537330448627472]",0.9847442507743835
3,"['  @Test\n  public void testPushHubPublicImageWithAuth() throws Exception {\n    // Push an image to a public repo on Docker Hub and check it succeeds\n    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();\n    final DockerClient client = DefaultDockerClient\n        .fromEnv()\n        .registryAuth(RegistryAuth.builder()\n                        .username(HUB_AUTH_USERNAME)\n                        .password(HUB_AUTH_PASSWORD)\n                        .build())\n        .build();\n\n    client.build(Paths.get(dockerDirectory), HUB_PUBLIC_IMAGE);\n    client.push(HUB_PUBLIC_IMAGE);\n  }\n']",PUBLIC;password;docker;Resource;Docker;push;PUBLIC;Path;Push;Docker,1.4988472685217857e-09;1.3969838619232178e-09;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.675246939063072e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.886428356170654, -5.748219966888428, -6.363393306732178, -5.436735153198242, -5.508581638336182, -0.016225315630435944]",0.9839056134223938
3,"['  @Test\n  public void testPushHubPrivateImageWithAuth() throws Exception {\n    // Push an image to a private repo on Docker Hub and check it succeeds\n    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();\n    final DockerClient client = DefaultDockerClient\n        .fromEnv()\n        .registryAuth(RegistryAuth.builder()\n                        .username(HUB_AUTH_USERNAME)\n                        .password(HUB_AUTH_PASSWORD)\n                        .build())\n        .build();\n\n    client.build(Paths.get(dockerDirectory), HUB_PRIVATE_IMAGE);\n    client.push(HUB_PRIVATE_IMAGE);\n  }\n']",Push;password;repo;Hub;an;succeeds;Auth;Docker;registry;PRIVATE,6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.837623469531536e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.8826189041137695, -5.738032341003418, -6.35480260848999, -5.430467128753662, -5.508049964904785, -0.01631433516740799]",0.983817994594574
3,"['  @Test\n  public void testPullHubPrivateRepoWithBadAuth() throws Exception {\n    final RegistryAuth badRegistryAuth = RegistryAuth.builder()\n        .username(HUB_AUTH_USERNAME2)\n        .password(""foobar"")\n        .build();\n    exception.expect(DockerException.class);\n    exception.expectCause(isA(NotAuthorizedException.class));\n    client.pull(CIRROS_PRIVATE_LATEST, badRegistryAuth);\n  }\n']",USERNAME;Rep;Authorized;bad;Registry;Auth;Private;exception;Bad;ocker,1.3969838619232178e-09;6.984919309616089e-10;6.475602276623249e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.865538597106934, -5.718324184417725, -6.331213474273682, -5.453657627105713, -5.47338342666626, -0.01651369035243988]",0.9836217761039734
3,"['  @Test\n  public void testBuildHubPrivateRepoWithAuth() throws Exception {\n    final String dockerDirectory = Resources.getResource(""dockerDirectoryNeedsAuth"").getPath();\n    final RegistryAuth registryAuth = RegistryAuth.builder()\n        .username(HUB_AUTH_USERNAME2)\n        .password(HUB_AUTH_PASSWORD2)\n        .build();\n\n    final DefaultDockerClient client = DefaultDockerClient.fromEnv()\n        .registryAuth(registryAuth)\n        .build();\n\n    client.build(Paths.get(dockerDirectory), ""testauth"", BuildParam.pullNewerImage());\n  }\n']",UB;password;Auth;Directory;PASS;Auth;USERNAME;registry;Auth;En,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.869137763977051, -5.745699882507324, -6.354558944702148, -5.4640679359436035, -5.492297649383545, -0.01624654419720173]",0.9838846921920776
3,"['  @Test\n  public void testPullHubPrivateRepoWithAuth() throws Exception {\n    final RegistryAuth registryAuth = RegistryAuth.builder()\n        .username(HUB_AUTH_USERNAME2)\n        .password(HUB_AUTH_PASSWORD2)\n        .build();\n    client.pull(""dxia2/scratch-private:latest"", registryAuth);\n  }\n']",Registry;Registry;registry;password;builder;dxia;UTH;UB;Auth;registry,5.820766091346741e-09;3.259629011154175e-09;1.862645149230957e-09;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-5.902344703674316, -5.798344135284424, -6.394223213195801, -5.511855125427246, -5.450195789337158, -0.015896612778306007]",0.9842292070388794
3,"['  @Test\n  public void test1_26() throws Exception {\n    objectMapper.readValue(fixture(""fixtures/1.26/containerStats.json""), ContainerStats.class);\n  }\n']",ixture;json;Container;container;Exception;class;Value;object;ixtures;Stats,3.725290298461914e-09;1.862645149230957e-09;1.0477378964424133e-09;9.313225746154785e-10;7.275957614183426e-10;2.6193447411060333e-10;2.3283064365386963e-10;0.0;0.0;-1.7462298274040222e-10,5,5,"[-5.943042278289795, -5.91259241104126, -6.455747127532959, -5.569724082946777, -5.402290344238281, -0.015335503965616226]",0.9847816228866577
3,"['  @Test\n  public void testLoadFromRandomFixture() throws Exception {\n    final ContainerState containerState = objectMapper\n        .readValue(fixture(""fixtures/container-state-random.json""), ContainerState.class);\n    assertThat(containerState.paused(), is(false));\n    assertThat(containerState.restarting(), is(false));\n    assertThat(containerState.running(), is(true));\n    assertThat(containerState.exitCode(), is(0));\n    assertThat(containerState.pid(), is(27629));\n    assertThat(containerState.startedAt(), is(new Date(1412236798929L)));\n    assertThat(containerState.finishedAt(), is(new Date(-62135769600000L)));\n    assertThat(containerState.error(), is(""this is an error""));\n    assertThat(containerState.oomKilled(), is(false));\n    assertThat(containerState.status(), is(""running""));\n    \n    ContainerState.Health health = containerState.health();\n    assertThat(health.failingStreak(), is(1));\n    assertThat(health.status(), is(""starting""));\n    assertThat(health.log().size(), is(1));\n    \n    ContainerState.HealthLog log = health.log().get(0);\n    assertThat(log.start(), is(new Date(1412236801547L)));\n    assertThat(log.end(), is(new Date(1412236802697L)));\n    assertThat(log.exitCode(), is(1));\n    assertThat(log.output(), is(""output""));\n  }\n']",ixture;Random;Load;State;exit;ailing;Container;health;pid;Date,9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.111804395914078e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.79988956451416, -5.650551795959473, -6.2703728675842285, -5.344944477081299, -5.49739408493042, -0.017456108704209328]",0.9826953411102295
3,"['  @Test\n  public void testLoadFromRandomFixtureMissingProperty() throws Exception {\n    objectMapper.readValue(fixture(""fixtures/container-state-missing-property.json""),\n                           ContainerState.class);\n  }\n']",ixture;Random;ixture;property;Missing;json;Container;State;class;missing,6.51925802230835e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.7462298274040222e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.95658016204834, -5.892998218536377, -6.455843448638916, -5.543699741363525, -5.452820777893066, -0.015230430290102959]",0.9848849773406982
3,"['  @Test\n  public void testLoadInvalidConatainerStateJson() throws Exception {\n    expectedException.expect(JsonMappingException.class);\n    objectMapper.readValue(fixture(""fixtures/container-state-invalid.json""), ContainerState.class);\n\n  }\n']",json;ixtures;Value;expected;Exception;invalid;Exception;apper;Conatainer;son,2.3283064365386963e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.967819690704346, -5.952617645263672, -6.488536357879639, -5.543458461761475, -5.455482006072998, -0.01497703231871128]",0.9851345419883728
3,"['  @Test\n  public void testLoadInvalidJson() throws Exception {\n    expectedException.expect(JsonParseException.class);\n    objectMapper.readValue(fixture(""fixtures/invalid.json""), ContainerState.class);\n\n  }\n']",State;Container;apper;ixture;ixtures;son;object;Invalid;Parse;Value,1.862645149230957e-08;1.4901161193847656e-08;1.1175870895385742e-08;1.0244548320770264e-08;5.587935447692871e-09;5.587935447692871e-09;5.122274160385132e-09;4.423782229423523e-09;2.0954757928848267e-09;2.0954757928848267e-09,5,5,"[-5.990914821624756, -5.997282981872559, -6.507650852203369, -5.582024097442627, -5.397491931915283, -0.014881785959005356]",0.9852283000946045
3,"['  @Test\n  public void test1_22() throws Exception {\n    objectMapper.readValue(fixture(""fixtures/1.22/containerInfo.json""), ContainerInfo.class);\n  }\n']",Container;ixture;ixtures;Info;class;read;object;Exception;Info;json,1.862645149230957e-08;1.1175870895385742e-08;1.1175870895385742e-08;6.984919309616089e-09;4.6566128730773926e-09;3.259629011154175e-09;1.862645149230957e-09;0.0;-1.862645149230957e-09;-2.7939677238464355e-09,5,5,"[-5.95739221572876, -5.9265828132629395, -6.470579624176025, -5.582492828369141, -5.40014123916626, -0.015196498483419418]",0.9849183559417725
3,"['  @Test\n  public void test1_24() throws Exception {\n    objectMapper.readValue(fixture(""fixtures/1.24/containerInfo.json""), ContainerInfo.class);\n  }\n']",read;ixture;Info;Value;class;Container;apper;object;json;Info,3.259629011154175e-09;1.862645149230957e-09;1.862645149230957e-09;1.280568540096283e-09;2.3283064365386963e-10;0.0;-4.656612873077393e-10;-9.313225746154785e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.962515830993652, -5.927455902099609, -6.474875450134277, -5.583548545837402, -5.3938493728637695, -0.015198846347630024]",0.9849159717559814
3,"['  @Test\n  public void testJsonAlways() throws Exception {\n    final HostConfig hostConfig = objectMapper\n        .readValue(fixture(""fixtures/hostConfig/restartPolicyAlways.json""),\n                   HostConfig.class);\n    assertThat(hostConfig.restartPolicy(), is(HostConfig.RestartPolicy.always()));\n  }\n']",Policy;son;Always;Policy;apper;Policy;object;Value;Restart;Config,1.979060471057892e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.885409832000732, -5.794105529785156, -6.361486911773682, -5.441947937011719, -5.452369689941406, -0.016301199793815613]",0.9838308095932007
3,"['  @Test\n  public void testJsonUnlessStopped() throws Exception {\n    final HostConfig hostConfig = objectMapper\n        .readValue(fixture(""fixtures/hostConfig/restartPolicyUnlessStopped.json""),\n                   HostConfig.class);\n    assertThat(hostConfig.restartPolicy(), is(HostConfig.RestartPolicy.unlessStopped()));\n  }\n']",Stopped;son;Config;Host;Config;Config;Restart;Config;restart;Host,1.9208528101444244e-09;1.0477378964424133e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.884498119354248, -5.791684150695801, -6.366849899291992, -5.448599815368652, -5.458620548248291, -0.016245605424046516]",0.983885645866394
3,"['  @Test\n  public void testJsonOnFailure() throws Exception {\n    final HostConfig hostConfig = objectMapper\n        .readValue(fixture(""fixtures/hostConfig/restartPolicyOnFailure.json""),\n                   HostConfig.class);\n    assertThat(hostConfig.restartPolicy(), is(HostConfig.RestartPolicy.onFailure(5)));\n  }\n']",On;Policy;json;Host;host;on;ixture;Config;Host;host,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.8849406242370605, -5.789827823638916, -6.366589069366455, -5.455020427703857, -5.460611820220947, -0.016214055940508842]",0.983916699886322
3,"['  @Test\n  public void testReplaceBinds() {\n    final List<String> initialBinds = ImmutableList.of(""/one:/one"", ""/two:/two"");\n    final HostConfig hostConfig = HostConfig.builder()\n        .binds(initialBinds)\n        .binds(initialBinds)\n        .build();\n\n    assertThat(""Calling .binds() multiple times should replace the list each time"",\n               hostConfig.binds(), is(initialBinds));\n  }\n']",the;Bind;one;times;Calling;two;two;of;each;host,9.89530235528946e-10;8.149072527885437e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.906716823577881, -5.818404674530029, -6.408502578735352, -5.449272632598877, -5.5169572830200195, -0.015782209113240242]",0.984341561794281
3,"['  @Test\n  public void testAppendBinds() {\n    final List<String> initialBinds = ImmutableList.of(""/one:/one"", ""/two:/two"");\n    final HostConfig hostConfig = HostConfig.builder()\n        .binds(initialBinds)\n        .appendBinds(""/three:/three"")\n        .appendBinds(""/four:/four"")\n        .build();\n\n    final List<String> expected = ImmutableList.<String>builder()\n        .addAll(initialBinds)\n        .add(""/three:/three"")\n        .add(""/four:/four"")\n        .build();\n\n    assertThat(""Calling .appendBinds should append to the list, not replace"",\n               hostConfig.binds(), is(expected));\n  }\n']",Append;Config;three;four;three;Config;initial;Bind;host;Bind,1.1059455573558807e-09;6.111804395914078e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.862253189086914, -5.750675678253174, -6.31760311126709, -5.336269378662109, -5.495778560638428, -0.016889428719878197]",0.9832524061203003
3,"['  @Test\n  public void testPreventDuplicateBinds() {\n    final HostConfig hostConfig = HostConfig.builder()\n        .appendBinds(""/one:/one"")\n        .appendBinds(""/one:/one"")\n        .appendBinds(""/one:/one"")\n        .build();\n\n    assertThat(hostConfig.binds(), contains(""/one:/one""));\n  }\n']",Duplicate;Config;Host;Config;Bind;one;final;one;Bind;Bind,2.561137080192566e-09;2.0954757928848267e-09;1.862645149230957e-09;9.313225746154785e-10;8.731149137020111e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.898733615875244, -5.825867652893066, -6.415410995483398, -5.499571800231934, -5.475796699523926, -0.015727879479527473]",0.9843952655792236
3,"['  @Test\n  public void test1_24() throws Exception {\n    objectMapper.readValue(fixture(""fixtures/1.24/imageInfo.json""), ImageInfo.class);\n  }\n']",ixture;ixtures;image;class;Value;apper;json;Info;read;Info,1.1175870895385742e-08;1.1175870895385742e-08;5.587935447692871e-09;2.7939677238464355e-09;2.5029294192790985e-09;2.3283064365386963e-09;0.0;-9.313225746154785e-10;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-5.958885192871094, -5.909564018249512, -6.473525047302246, -5.577919960021973, -5.414144039154053, -0.015188279561698437]",0.9849264621734619
3,"['  @Test\n  public void testNotADigest() throws Exception {\n    assertNull(readMessage(""not-a-digest"").digest());\n  }\n']",ADigest;digest;Not;Null;read;Exception;Message;digest,4.423782229423523e-09;1.862645149230957e-09;4.656612873077393e-10;4.656612873077393e-10;0.0;-1.1641532182693481e-10;-1.9208528101444244e-09;-3.14321368932724e-09,5,5,"[-5.9170708656311035, -5.768847942352295, -6.3967366218566895, -5.521973609924316, -5.431931972503662, -0.01598319783806801]",0.9841439723968506
3,"['  @Test\n  public void testDigest_Docker16() throws Exception {\n    assertEquals(digest, readMessage(""Digest: "" + digest).digest());\n  }\n']",digest;Digest;Exception;Equals;digest;Digest;read;Message;digest;ocker,2.7939677238464355e-09;1.57160684466362e-09;1.1641532182693481e-10;-8.731149137020111e-11;-8.731149137020111e-11;-2.3283064365386963e-10;-4.656612873077393e-10;-2.3283064365386963e-09;-2.561137080192566e-09;-3.4924596548080444e-09,5,5,"[-5.902599334716797, -5.750578880310059, -6.3864922523498535, -5.508052825927734, -5.448911666870117, -0.016081036999821663]",0.9840475916862488
3,"['  @Test\n  public void testDigest_Docker18() throws Exception {\n    final String status = ""some-image-tag: digest: "" + digest + "" size: 1234"";\n    assertEquals(digest, readMessage(status).digest());\n  }\n']",digest;image;size;read;status;Message;digest;final;Digest;status,1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.9188551902771, -5.813322067260742, -6.408824920654297, -5.514037132263184, -5.459334373474121, -0.015731986612081528]",0.9843910932540894
3,"['  @Test\n  public void serializationRoundTripTest() throws Exception {\n    // Test serializing and deserializing the same Event instance works and preserves data\n    final Event event = Event.create(""create"", ""foo"", ""nginx"", Event.Type.CONTAINER, ""create"",\n        Event.Actor.create(""bar"", ImmutableMap.of(""image"", ""nginx"", ""name"", ""docker-nginx"")),\n        new Date(1487356000), 100L);\n\n    final ObjectMapper mapper = ObjectMapperProvider.objectMapper();\n\n    final String json = mapper.writeValueAsString(event);\n\n    final Event event2 = mapper.readValue(json, Event.class);\n    assertThat(event, equalTo(event2));\n  }\n']",rip;serializing;bar;Round;and;Exception;Event;event;preserves;Event,1.6298145055770874e-09;1.5425030142068863e-09;1.280568540096283e-09;1.0477378964424133e-09;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.884186744689941, -5.773338317871094, -6.374729633331299, -5.438799858093262, -5.511463165283203, -0.016110599040985107]",0.9840186238288879
3,"['  @Test\n  public void testFromDockerConfig_FullConfig() throws Exception {\n    final RegistryAuth registryAuth = RegistryAuth.fromDockerConfig(getTestFilePath(\n        ""dockerConfig/fullConfig.json"")).build();\n    assertThat(registryAuth, equalTo(DOCKER_AUTH_CONFIG));\n  }\n']",ocker;Config;equal;Full;registry;That;Config;full;json;Auth,3.259629011154175e-09;3.259629011154175e-09;2.852175384759903e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.57160684466362e-09;1.57160684466362e-09;1.5133991837501526e-09;9.313225746154785e-10,5,5,"[-5.945119380950928, -5.887850761413574, -6.445333957672119, -5.562893390655518, -5.440645694732666, -0.015269760973751545]",0.9848462343215942
3,"['  @Test\n  public void testFromDockerConfig_FullDockerCfg() throws Exception {\n    final RegistryAuth registryAuth = RegistryAuth.fromDockerConfig(getTestFilePath(\n        ""dockerConfig/fullDockerCfg"")).build();\n    assertThat(registryAuth, equalTo(DOCKER_AUTH_CONFIG));\n  }\n']",Registry;Auth;equal;Config;registry;File;fg;From;Auth;That,1.210719347000122e-08;4.190951585769653e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.2118911147117615e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.974526405334473, -5.949447154998779, -6.478873252868652, -5.5983757972717285, -5.38568115234375, -0.015084364451467991]",0.985028862953186
3,"['  @Test\n  public void testFromDockerConfig_IdentityToken() throws Exception {\n    final RegistryAuth authConfig = RegistryAuth.fromDockerConfig(getTestFilePath(\n            ""dockerConfig/identityTokenConfig.json"")).build();\n    assertThat(authConfig, equalTo(IDENTITY_TOKEN_AUTH_CONFIG));\n  }\n']",docker;Registry;identity;auth;Config;Auth;entity;auth;Registry;build,9.313225746154785e-09;8.381903171539307e-09;2.3283064365386963e-09;1.862645149230957e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10,5,5,"[-5.966047286987305, -5.902190685272217, -6.458412170410156, -5.57666015625, -5.423419952392578, -0.015176890417933464]",0.9849377274513245
3,"['  @Test\n  public void testFromDockerConfig_IncompleteConfig() throws Exception {\n    final RegistryAuth registryAuth = RegistryAuth.fromDockerConfig(getTestFilePath(\n        ""dockerConfig/incompleteConfig.json"")).build();\n    assertThat(registryAuth, equalTo(EMPTY_AUTH_CONFIG));\n  }\n']",docker;incomplete;ocker;From;Registry;final;from;Config;CONFIG;registry,7.450580596923828e-09;3.841705620288849e-09;2.9103830456733704e-09;2.0372681319713593e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;9.89530235528946e-10;9.313225746154785e-10,5,5,"[-5.958747863769531, -5.8937153816223145, -6.457111358642578, -5.5711188316345215, -5.450045585632324, -0.01512522716075182]",0.9849884510040283
3,"['  @Test\n  public void testFromDockerConfig_WrongConfigs() throws Exception {\n    final RegistryAuth registryAuth1 = RegistryAuth.fromDockerConfig(getTestFilePath(\n        ""dockerConfig/wrongConfig1.json"")).build();\n    assertThat(registryAuth1, equalTo(EMPTY_AUTH_CONFIG));\n\n    final RegistryAuth registryAuth2 = RegistryAuth.fromDockerConfig(getTestFilePath(\n        ""dockerConfig/wrongConfig2.json"")).build();\n    assertThat(registryAuth2, equalTo(EMPTY_AUTH_CONFIG));\n  }\n']",ocker;Config;From;docker;Path;equal;Auth;Config;Auth;Config,1.280568540096283e-09;1.1059455573558807e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.898213863372803, -5.8133864402771, -6.41360330581665, -5.486611843109131, -5.5135979652404785, -0.01566626876592636]",0.9844558238983154
3,"['  @Test\n  public void testFromDockerConfig_MissingConfigFile() throws Exception {\n    final Path randomPath = Paths.get(RandomStringUtils.randomAlphanumeric(16) + "".json"");\n    expectedException.expect(FileNotFoundException.class);\n    RegistryAuth.fromDockerConfig(randomPath).build();\n  }\n']",Path;Config;expected;Exception;random;Exception;json;Found;Random;Auth,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.921542644500732, -5.8008856773376465, -6.434730529785156, -5.535620212554932, -5.497836112976074, -0.015469091013073921]",0.9846498370170593
3,"['  @Test\n  public void testFromDockerConfig_MultiConfig() throws Exception {\n    final RegistryAuth myDockParsed = RegistryAuth.fromDockerConfig(getTestFilePath(\n        ""dockerConfig/multiConfig.json""), ""https://narnia.mydock.io/v1/"").build();\n    assertThat(myDockParsed, equalTo(MY_AUTH_CONFIG));\n    final RegistryAuth dockerIoParsed = RegistryAuth.fromDockerConfig(getTestFilePath(\n        ""dockerConfig/multiConfig.json""), ""https://index.docker.io/v1/"").build();\n    assertThat(dockerIoParsed, equalTo(DOCKER_AUTH_CONFIG));\n  }\n']",Config;docker;Config;Auth;UTH;File;docker;Config;docker;https,9.313225746154785e-10;9.313225746154785e-10;7.8580342233181e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.891417026519775, -5.813745021820068, -6.398104667663574, -5.461836814880371, -5.514026165008545, -0.015814127400517464]",0.9843103885650635
3,"['  @Test\n  public void testLoadFromFixture() throws Exception {\n    final Container container = objectMapper\n        .readValue(fixture(""fixtures/container-ports-as-string.json""), Container.class);\n    assertThat(container.portsAsString(), is(""0.0.0.0:80->88/tcp""));\n  }\n']",ixture;class;ports;container;Value;Container;ixture;as;Container;From,4.190951585769653e-09;1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.929077625274658, -5.896890640258789, -6.438485622406006, -5.523475646972656, -5.432065010070801, -0.015493270941078663]",0.9846262335777283
3,"['  @Test\n  public void testLoadFromFixtureMissingPorts() throws Exception {\n    final Container container = objectMapper\n            .readValue(fixture(""fixtures/container-no-ports-or-names.json""), Container.class);\n    assertThat(container.id(), is(""1009""));\n  }\n']",ixtures;Missing;Load;apper;orts;container;ixture;Exception;That;names,3.725290298461914e-09;3.4924596548080444e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.916941165924072, -5.871530055999756, -6.427459239959717, -5.501834869384766, -5.455542087554932, -0.01560160331428051]",0.9845196008682251
3,"['  @Test\n  public void testHandlesMillisecondPrecision() throws Exception {\n    assertThat(dockerDateFormat.parse(millisecondDateString), equalTo(expected));\n  }\n']",millisecond;Date;equal;docker;parse;expected;Format;Date;Exception;That,1.2223608791828156e-09;6.693881005048752e-10;5.820766091346741e-11;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-5.820766091346741e-10;-6.402842700481415e-10,5,5,"[-5.863675594329834, -5.721506595611572, -6.321229457855225, -5.494976997375488, -5.412534236907959, -0.016618279740214348]",0.9835190176963806
3,"['  @Test\n  public void testHandlesNanosecondPrecision() throws Exception {\n    assertThat(dockerDateFormat.parse(""2015-09-18T17:44:28.145855389Z""), equalTo(expected));\n  }\n']",anosecond;docker;That;Format;Date;equal;Precision;expected;Exception;parse,1.3271346688270569e-08;3.259629011154175e-09;6.984919309616089e-10;2.3283064365386963e-10;0.0;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-8.149072527885437e-10;-1.3969838619232178e-09,5,5,"[-5.8553667068481445, -5.70880126953125, -6.296148300170898, -5.498723030090332, -5.414990425109863, -0.016704684123396873]",0.9834340810775757
3,"['  @Test\n  public void testHandlesNanosecondWithLessThanNineDigits() throws Exception {\n    assertThat(dockerDateFormat.parse(""2015-09-18T17:44:28.1458553Z""), equalTo(expected));\n  }\n']",Than;Handles;parse;Nine;expected;Date;That;Exception;equal;Less,8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;-8.731149137020111e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-1.280568540096283e-09;-1.3969838619232178e-09,5,5,"[-5.874890327453613, -5.706298828125, -6.321041584014893, -5.534646034240723, -5.417006492614746, -0.016454709693789482]",0.9836798310279846
3,"['  @Test\n  public void otherTimeZones() throws Exception {\n    final Date expected =\n        new DateTime(2016, 6, 3, 6, 57, 17, 478, DateTimeZone.forOffsetHours(-4)).toDate();\n    assertThat(dockerDateFormat.parse(""2016-06-03T06:57:17.4782869-04:00""), equalTo(expected));\n  }\n']",other;Hours;Date;That;Date;parse;expected;Zone;expected;Time,2.0954757928848267e-09;1.3969838619232178e-09;1.280568540096283e-09;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.830927848815918, -5.6544084548950195, -6.272572994232178, -5.468854904174805, -5.449228763580322, -0.01698378100991249]",0.9831595420837402
3,"['  @Test\n  public void testFile() throws Exception {\n    // note: Paths.get(someURL.toUri()) is the platform-neutral way to convert a URL to a Path\n    final URL dockerDirectory = Resources.getResource(""dockerDirectory"");\n    try (CompressedDirectory dir = CompressedDirectory.create(Paths.get(dockerDirectory.toURI()));\n         BufferedInputStream fileIn = new BufferedInputStream(Files.newInputStream(dir.file()));\n         GzipCompressorInputStream gzipIn = new GzipCompressorInputStream(fileIn);\n         TarArchiveInputStream tarIn = new TarArchiveInputStream(gzipIn)) {\n\n      final List<String> names = new ArrayList<>();\n      TarArchiveEntry entry;\n      while ((entry = tarIn.getNextTarEntry()) != null) {\n        final String name = entry.getName();\n        names.add(name);\n      }\n      assertThat(names,\n                 containsInAnyOrder(""Dockerfile"", ""bin/"", ""bin/date.sh"",\n                                    ""innerDir/"", ""innerDir/innerDockerfile""));\n    }\n  }\n']",neutral;docker;inner;Path;Path;inner;bin;to;the;create,1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.867262363433838, -5.7247748374938965, -6.331863880157471, -5.388068199157715, -5.535749435424805, -0.016523189842700958]",0.983612596988678
3,"['  @Test\n  public void testFileWithIgnore() throws Exception {\n    // note: Paths.get(someURL.toUri()) is the platform-neutral way to convert a URL to a Path\n    final URL dockerDirectory = Resources.getResource(""dockerDirectoryWithIgnore"");\n    try (CompressedDirectory dir = CompressedDirectory.create(Paths.get(dockerDirectory.toURI()));\n         BufferedInputStream fileIn = new BufferedInputStream(Files.newInputStream(dir.file()));\n         GzipCompressorInputStream gzipIn = new GzipCompressorInputStream(fileIn);\n         TarArchiveInputStream tarIn = new TarArchiveInputStream(gzipIn)) {\n\n      final List<String> names = new ArrayList<>();\n      TarArchiveEntry entry;\n      while ((entry = tarIn.getNextTarEntry()) != null) {\n        final String name = entry.getName();\n        names.add(name);\n      }\n      assertThat(names, containsInAnyOrder(""Dockerfile"", ""bin/"", ""bin/date.sh"", ""subdir2/"",\n                                           ""subdir2/keep.me"", ""subdir2/do-not.ignore"",\n                                           ""subdir3/do.keep"", "".dockerignore""));\n    }\n  }\n']",keep;URL;ockerfile;URL;neutral;some;docker;Archive;Path;to,6.402842700481415e-10;5.529727786779404e-10;4.874891601502895e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.878756999969482, -5.721909999847412, -6.360165119171143, -5.410366535186768, -5.562167167663574, -0.016242438927292824]",0.9838887453079224
3,"['  @Test\n  public void testFileWithEmptyDirectory() throws Exception {\n    Path tempDir = Files.createTempDirectory(""dockerDirectoryEmptySubdirectory"");\n    tempDir.toFile().deleteOnExit();\n    assertThat(new File(tempDir.toFile(), ""emptySubDir"").mkdir(), is(true));\n\n    try (CompressedDirectory dir = CompressedDirectory.create(tempDir);\n         BufferedInputStream fileIn = new BufferedInputStream(Files.newInputStream(dir.file()));\n         GzipCompressorInputStream gzipIn = new GzipCompressorInputStream(fileIn);\n         TarArchiveInputStream tarIn = new TarArchiveInputStream(gzipIn)) {\n\n      final List<String> names = new ArrayList<>();\n      TarArchiveEntry entry;\n      while ((entry = tarIn.getNextTarEntry()) != null) {\n        final String name = entry.getName();\n        names.add(name);\n      }\n      assertThat(names, contains(""emptySubDir/""));\n    }\n  }\n']",Empty;dir;Subdirectory;empty;Sub;Compressor;File;File;On;Stream,7.566995918750763e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10,5,5,"[-5.841308116912842, -5.6911845207214355, -6.2889323234558105, -5.368146896362305, -5.4896931648254395, -0.017074257135391235]",0.9830707907676697
3,"['  @Test\n  public void testFromString() throws Exception {\n    final String json = toJson(""{\\""date\\"": \\""%s\\""}"");\n\n    final TestClass value = OBJECT_MAPPER.readValue(json, TestClass.class);\n    assertThat(value.getDate(), equalTo(referenceDateTime.toDate()));\n  }\n']",json;Value;class;MAPPER;Date;Time;json;Date;get;Date,2.3283064365386963e-09;2.153683453798294e-09;1.7462298274040222e-09;1.280568540096283e-09;9.89530235528946e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.859492778778076, -5.752009868621826, -6.337347030639648, -5.421383380889893, -5.435079097747803, -0.01671910472214222]",0.9834200143814087
3,"['  @Test\n  public void testFromNumber() throws Exception {\n    final String json = toJson(""{\\""date\\"": %s}"");\n\n    final TestClass value = OBJECT_MAPPER.readValue(json, TestClass.class);\n    assertThat(value.getDate(), equalTo(referenceDateTime.toDate()));\n  }\n']",json;son;read;get;value;date;to;MAPPER;Date;value,1.6298145055770874e-09;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.868709564208984, -5.759154796600342, -6.343870162963867, -5.450634479522705, -5.441386699676514, -0.016500206664204597]",0.9836351871490479
3,"['  @Test\n  public void testToString() throws Exception {\n    final long timestamp = 1487357474682L;\n    final String expectedJson = ""{\\""date\\"":1487357474}"";\n    final TestClass testClass = new TestClass(new Date(timestamp));\n\n    final String json = OBJECT_MAPPER.writeValueAsString(testClass);\n    assertThat(json, equalTo(expectedJson));\n  }\n']",Class;json;final;timestamp;write;long;MAPPER;As;expected;timestamp,1.280568540096283e-09;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.859199047088623, -5.758915424346924, -6.32887077331543, -5.404821872711182, -5.444356441497803, -0.01674700528383255]",0.9833924174308777
3,"['  @Test\n  public void testAttach() throws Exception {\n    when(reader.nextMessage()).thenReturn(\n        logMessage(LogMessage.Stream.STDOUT, ""hello\\n""),\n        logMessage(LogMessage.Stream.STDERR, ""oops\\n""),\n        logMessage(LogMessage.Stream.STDOUT, ""world!\\n""),\n        // need to return null to signal end of stream\n        null\n    );\n\n    final ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n    final ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n    logStream.attach(stdout, stderr);\n\n    assertThat(stdout.toString(), is(""hello\\nworld!\\n""));\n    assertThat(stderr.toString(), is(""oops\\n""));\n  }\n']",signal;stder;final;oops;stder;attach;Byte;when;world;STDERR,2.444721758365631e-09;2.153683453798294e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.870382785797119, -5.7483229637146, -6.3279500007629395, -5.371800899505615, -5.5139641761779785, -0.016608664765954018]",0.9835284948348999
3,"['  @Test\n  public void testExceptionMessageWithResponseBody() {\n    final URI uri = URI.create(""http://example.com"");\n    final String responseBody = ""uh oh"";\n    final DockerRequestException ex =\n        new DockerRequestException(""GET"", uri, 500, responseBody, new RuntimeException());\n\n    assertEquals(ex.getMessage(), ""Request error: GET http://example.com: 500, body: uh oh"");\n  }\n']",oh;Docker;uh;body;Body;Message;example;URI;URI;http,1.862645149230957e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.90435266494751, -5.815115928649902, -6.411478519439697, -5.462826251983643, -5.495903968811035, -0.015821870416402817]",0.9843026399612427
3,"['  @Test\n  public void testExceptionMessageWhenNoResponseBody() {\n    final URI uri = URI.create(""http://example.com"");\n    final String responseBody = null;\n    final DockerRequestException ex =\n        new DockerRequestException(""GET"", uri, 500, responseBody, new RuntimeException());\n\n    assertEquals(ex.getMessage(), ""Request error: GET http://example.com: 500"");\n  }\n']",GET;http;URI;Runtime;create;Request;Message;ex;error;Response,8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.903182029724121, -5.822053909301758, -6.410212993621826, -5.4824700355529785, -5.49952507019043, -0.015707341954112053]",0.9844152331352234
3,"['  @Test\n  public void testMatchFilepath() {\n    if (exception != null) {\n      expectedException.expect(exception);\n    }\n\n    final Path path = fs.getPath(pathString);\n    final boolean result = CompressedDirectory.goPathMatcher(fs, pattern).matches(path);\n\n    final String description;\n    if (matched) {\n      description = MessageFormat.format(""the pattern {0} to match {1}"", pattern, pathString);\n    } else {\n      description = MessageFormat.format(""the pattern {0} not to match {1}"", pattern, pathString);\n    }\n\n    assertThat(result, describedAs(description, is(matched)));\n  }\n']",Directory;fs;pattern;exception;else;description;Path;description;the;Exception,1.3969838619232178e-09;5.820766091346741e-10;2.9103830456733704e-10;2.1827872842550278e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.865502834320068, -5.742831707000732, -6.346316814422607, -5.403530597686768, -5.512989521026611, -0.016463972628116608]",0.9836708307266235
3,"['  @Test\n  public void testImageWithoutTag() {\n    final ImageRef sut = new ImageRef(""foobar"");\n    assertThat(sut.getImage(), equalTo(""foobar""));\n    assertThat(sut.getTag(), is(nullValue()));\n  }\n']",foobar;Image;Tag;ut;equal;get;final;Image;Value;Ref,6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;3.2014213502407074e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.853876113891602, -5.73551607131958, -6.321847915649414, -5.445391654968262, -5.4215474128723145, -0.016770919784903526]",0.9833689332008362
3,"['  @Test\n  public void testImageWithTag() {\n    final ImageRef sut = new ImageRef(""foobar:12345"");\n    assertThat(sut.getImage(), equalTo(""foobar""));\n    assertThat(sut.getTag(), is(""12345""));\n  }\n']",Image;Image;Image;get;Ref;That;ut;foobar;That;Tag,1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.8756794929504395, -5.764278411865234, -6.358194828033447, -5.47053337097168, -5.438928127288818, -0.01636335626244545]",0.9837697744369507
3,"['  @Test\n  public void testImageWithTagAndRegistry() {\n    final ImageRef sut = new ImageRef(""registry:4711/foo/bar:12345"");\n    assertThat(sut.getImage(), equalTo(""registry:4711/foo/bar""));\n    assertThat(sut.getTag(), is(""12345""));\n  }\n']",Image;Image;Image;new;Ref;registry;final;registry;get;bar,3.725290298461914e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.1932570487260818e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.916874408721924, -5.848726749420166, -6.416662693023682, -5.505399703979492, -5.457388401031494, -0.015662748366594315]",0.9844592809677124
3,"['  @Test\n  public void testImageWithDigest() {\n    final ImageRef sut = new ImageRef(""bar@sha256:12345"");\n    assertThat(sut.getImage(), equalTo(""bar@sha256:12345""));\n  }\n']",Digest;bar;Image;Image;ut;final;That;Ref;Ref;bar,1.076841726899147e-09;7.8580342233181e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.916018486022949, -5.786150932312012, -6.400455474853516, -5.511322975158691, -5.445205211639404, -0.015910105779767036]",0.9842157959938049
3,"['  @Test\n  public void testImageWithDigestAndRegistry() {\n    final ImageRef sut = new ImageRef(""registry:4711/foo/bar@sha256:12345"");\n    assertThat(sut.getImage(), equalTo(""registry:4711/foo/bar@sha256:12345""));\n  }\n']",Registry;bar;sha;registry;Image;foo;ut;final;Ref;foo,1.6298145055770874e-09;1.1641532182693481e-09;6.984919309616089e-10;5.529727786779404e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;0.0,5,5,"[-5.955803871154785, -5.866162300109863, -6.464365482330322, -5.532235622406006, -5.481312274932861, -0.015218689106404781]",0.9848965406417847
3,"['  @Test\n  public void testHostForUnixSocket() {\n    final DefaultDockerClient client = DefaultDockerClient.builder()\n        .uri(""unix:///var/run/docker.sock"").build();\n    assertThat(client.getHost(), equalTo(""localhost""));\n  }\n']",That;uri;Default;Client;For;builder;get;ock;client;Host,8.381903171539307e-09;1.862645149230957e-09;1.6298145055770874e-09;1.4551915228366852e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;5.238689482212067e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.928051948547363, -5.8854079246521, -6.446775436401367, -5.579395771026611, -5.417736053466797, -0.015358395874500275]",0.9847589135169983
3,"['  @Test\n  public void testHostForLocalHttps() {\n    final DefaultDockerClient client = DefaultDockerClient.builder()\n        .uri(""https://localhost:2375"").build();\n    assertThat(client.getHost(), equalTo(""localhost""));\n  }\n']",localhost;ttps;Host;Default;For;get;localhost;Host;Local;https,1.076841726899147e-09;8.440110832452774e-10;7.566995918750763e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-5.89194393157959, -5.821238040924072, -6.407456874847412, -5.537906646728516, -5.436149597167969, -0.01578971929848194]",0.9843342900276184
3,"['  @Test\n  public void testHostForFqdnHttps() {\n    final DefaultDockerClient client = DefaultDockerClient.builder()\n        .uri(""https://perdu.com:2375"").build();\n    assertThat(client.getHost(), equalTo(""perdu.com""));\n  }\n']",ocker;perdu;https;equal;Client;dn;build;ttps;client;perdu,3.259629011154175e-09;1.8044374883174896e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;0.0,5,5,"[-5.929959297180176, -5.866314888000488, -6.4535064697265625, -5.563612937927246, -5.4530110359191895, -0.015301575884222984]",0.9848148822784424
3,"['  @Test\n  public void testHostForIpHttps() {\n    final DefaultDockerClient client = DefaultDockerClient.builder()\n        .uri(""https://192.168.53.103:2375"").build();\n    assertThat(client.getHost(), equalTo(""192.168.53.103""));\n  }\n']",ocker;builder;Host;Client;final;Client;uri;Default;ocker;Host,1.862645149230957e-09;1.4551915228366852e-09;1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;0.0,5,5,"[-5.920907974243164, -5.875500679016113, -6.42811918258667, -5.552412509918213, -5.405744552612305, -0.015595383010804653]",0.9845256209373474
3,"['  @Test\n  public void testNoHeaders() throws Exception {\n    final DefaultDockerClient dockerClient = new DefaultDockerClient(\n        builder, clientBuilderSupplier);\n    dockerClient.info();\n\n    verify(builderMock, never()).header(anyString(), anyString());\n  }\n']",header;No;ock;any;Client;verify;ocker;client;Client;docker,3.259629011154175e-09;1.5133991837501526e-09;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.898987293243408, -5.814541339874268, -6.39762544631958, -5.521927356719971, -5.478728771209717, -0.01568668894469738]",0.9844356775283813
3,"['  @Test\n  public void testOneHeader() throws Exception {\n    builder.header(""foo"", 1);\n\n    final DefaultDockerClient dockerClient = new DefaultDockerClient(\n        builder, clientBuilderSupplier);\n    dockerClient.info();\n\n    final ArgumentCaptor<String> keyArgument = ArgumentCaptor.forClass(String.class);\n    final ArgumentCaptor<Object> valueArgument = ArgumentCaptor.forClass(Object.class);\n    verify(builderMock, times(1)).header(keyArgument.capture(), valueArgument.capture());\n\n    Assert.assertEquals(""foo"", keyArgument.getValue());\n    Assert.assertEquals(1, valueArgument.getValue());\n  }\n']",Header;docker;Client;builder;Argument;Argument;ock;client;Client;Builder,1.862645149230957e-09;1.0477378964424133e-09;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.849923133850098, -5.736752510070801, -6.328832149505615, -5.420415878295898, -5.488577365875244, -0.01658533327281475]",0.983551561832428
3,"['  @Test\n  public void testMultipleHeaders() throws Exception {\n    final Map<String, Object> headers = Maps.newHashMap();\n    headers.put(""int"", 1);\n    headers.put(""string"", ""2"");\n    headers.put(""list"", Lists.newArrayList(""a"", ""b"", ""c""));\n\n    for (final Map.Entry<String, Object> entry : headers.entrySet()) {\n      builder.header(entry.getKey(), entry.getValue());\n    }\n\n    final DefaultDockerClient dockerClient = new DefaultDockerClient(\n        builder, clientBuilderSupplier);\n    dockerClient.info();\n\n    final ArgumentCaptor<String> nameCaptor = ArgumentCaptor.forClass(String.class);\n    final ArgumentCaptor<String> valueCaptor = ArgumentCaptor.forClass(String.class);\n    verify(builderMock, times(headers.size())).header(nameCaptor.capture(), valueCaptor.capture());\n\n    int idx = 0;\n    for (final Map.Entry<String, Object> entry : headers.entrySet()) {\n      Assert.assertEquals(entry.getKey(), nameCaptor.getAllValues().get(idx));\n      Assert.assertEquals(entry.getValue(), valueCaptor.getAllValues().get(idx));\n      ++idx;\n    }\n  }\n']",Headers;Multiple;headers;headers;headers;Default;Builder;Captor;builder;Supplier,2.240994945168495e-09;9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10;1.8917489796876907e-10,5,5,"[-5.799531936645508, -5.685810089111328, -6.248863220214844, -5.312361717224121, -5.475839614868164, -0.017626777291297913]",0.9825276732444763
3,"['  @Test\n  public void testCapAddAndDrop() throws Exception {\n    final DefaultDockerClient dockerClient = new DefaultDockerClient(\n        builder, clientBuilderSupplier);\n\n    final HostConfig hostConfig = HostConfig.builder()\n        .capAdd(ImmutableList.of(""foo"", ""bar""))\n        .capAdd(ImmutableList.of(""baz"", ""qux""))\n        .build();\n\n    final ContainerConfig containerConfig = ContainerConfig.builder()\n        .hostConfig(hostConfig)\n        .build();\n\n    //noinspection unchecked\n    when(asyncInvoker.method(\n        anyString(), any(Entity.class), any(Class.class)))\n        .thenReturn(Futures.immediateFuture(ContainerCreation.builder().build()));\n\n    dockerClient.createContainer(containerConfig);\n\n    final ArgumentCaptor<String> methodArg = ArgumentCaptor.forClass(String.class);\n    final ArgumentCaptor<Entity> entityArg = ArgumentCaptor.forClass(Entity.class);\n    final ArgumentCaptor<Class> classArg = ArgumentCaptor.forClass(Class.class);\n\n    //noinspection unchecked\n    verify(asyncInvoker, times(1)).method(\n        methodArg.capture(), entityArg.capture(), classArg.capture());\n\n    final Entity expectedEntity = Entity.entity(\n        containerConfig, new Variant(MediaType.valueOf(APPLICATION_JSON), (String) null, null));\n\n    // Check that we\'ve called the right method on the underlying AsyncInvoker with the right params\n    assertThat(methodArg.getValue(), equalTo(""POST""));\n    assertThat(entityArg.getValue(), equalTo(expectedEntity));\n    assertThat(classArg.getValue(), instanceOf(Class.class));\n  }\n']",Cap;Supplier;az;times;Arg;foo;ocker;docker;final;the,1.1059455573558807e-09;9.604264050722122e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.840935230255127, -5.697598934173584, -6.339660167694092, -5.386809349060059, -5.563701629638672, -0.01657266914844513]",0.9835638999938965
3,"['  @Test\n  public void testDefaultDockerEndpoint() throws Exception {\n    when(systemDelegate.getProperty(""os.name"")).thenReturn(""linux"", ""mac"", ""other"");\n    DockerHost.setSystemDelegate(systemDelegate);\n\n    assertThat(DockerHost.defaultDockerEndpoint(), equalTo(""unix:///var/run/docker.sock""));\n    assertThat(DockerHost.defaultDockerEndpoint(), equalTo(""unix:///var/run/docker.sock""));\n    assertThat(DockerHost.defaultDockerEndpoint(), equalTo(""localhost:2375""));\n  }\n']",var;Property;Docker;Exception;Delegate;Host;default;ocker;Host;ocker,1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1100277081131935e-10;1.7462298274040222e-10,5,5,"[-5.862539768218994, -5.76255464553833, -6.36004114151001, -5.45584774017334, -5.467331886291504, -0.016342833638191223]",0.98378986120224
3,"['  @Test\n  public void testEndpointFromEnv() throws Exception {\n    when(systemDelegate.getenv(""DOCKER_HOST"")).thenReturn(""foo"", (String) null);\n    when(systemDelegate.getProperty(""os.name"")).thenReturn(""linux"");\n    DockerHost.setSystemDelegate(systemDelegate);\n\n    assertThat(DockerHost.endpointFromEnv(), equalTo(""foo""));\n    assertThat(DockerHost.endpointFromEnv(), equalTo(""unix:///var/run/docker.sock""));\n  }\n']",That;That;endpoint;Delegate;OST;null;Delegate;foo;when;var,3.259629011154175e-09;3.026798367500305e-09;1.7462298274040222e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.840975761413574, -5.744404315948486, -6.336141586303711, -5.442118167877197, -5.46134614944458, -0.016592836007475853]",0.9835440516471863
3,"['  @Test\n  public void testDefaultUnixEndpoint() throws Exception {\n    assertThat(DockerHost.defaultUnixEndpoint(), equalTo(""unix:///var/run/docker.sock""));\n  }\n']",Unix;var;run;ocker;That;equal;default;Endpoint;Endpoint;ock,3.259629011154175e-09;1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.94431734085083, -5.899261474609375, -6.45945930480957, -5.598759651184082, -5.404164791107178, -0.015243579633533955]",0.9848719239234924
3,"['  @Test\n  public void testDefaultAddress() throws Exception {\n    assertThat(DockerHost.defaultAddress(), equalTo(""localhost""));\n  }\n']",Address;Address;default;ocker;localhost;Host;That;equal;Exception;Default,4.190951585769653e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;-2.3283064365386963e-10;-8.149072527885437e-10;-1.5133991837501526e-09;-4.6566128730773926e-09,5,5,"[-5.888209819793701, -5.763777256011963, -6.3803324699401855, -5.524881839752197, -5.414697170257568, -0.01617276668548584]",0.9839571714401245
3,"['  @Test\n  public void testDefaultPort() throws Exception {\n    assertThat(DockerHost.defaultPort(), equalTo(2375));\n  }\n']",ocker;Default;That;equal;Exception;Host;default;Port;Port,1.0477378964424133e-09;5.820766091346741e-10;-2.3283064365386963e-10;-2.6193447411060333e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-1.3096723705530167e-09;-1.5133991837501526e-09;-1.6298145055770874e-09,5,5,"[-5.893135070800781, -5.7715864181518555, -6.38161563873291, -5.518136978149414, -5.410991668701172, -0.016176169738173485]",0.9839539527893066
3,"['  @Test\n  public void testPortFromEnv() throws Exception {\n    when(systemDelegate.getenv(""DOCKER_PORT"")).thenReturn(""1234"", (String) null);\n    DockerHost.setSystemDelegate(systemDelegate);\n\n    assertThat(DockerHost.portFromEnv(), equalTo(1234));\n    assertThat(DockerHost.portFromEnv(), equalTo(2375));\n  }\n']",ocker;getenv;null;That;Host;En;Return;En;Delegate;system,6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.855149745941162, -5.765501022338867, -6.3582682609558105, -5.469709396362305, -5.457708835601807, -0.016339901834726334]",0.9837929606437683
3,"['  @Test\n  public void testDefaultCertPath() throws Exception {\n    when(systemDelegate.getProperty(""user.home"")).thenReturn(""foobar"");\n    DockerHost.setSystemDelegate(systemDelegate);\n\n    assertThat(DockerHost.defaultCertPath(), equalTo(""foobar/.docker""));\n  }\n']",Docker;Delegate;docker;user;get;Host;Default;Host;ocker;set,5.587935447692871e-09;2.9103830456733704e-09;2.7939677238464355e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10,5,5,"[-5.908819675445557, -5.8439860343933105, -6.415100574493408, -5.53181791305542, -5.45863676071167, -0.015588341280817986]",0.9845325350761414
3,"['  @Test\n  public void testCertPathFromEnv() throws Exception {\n    when(systemDelegate.getenv(""DOCKER_CERT_PATH"")).thenReturn(""foo"", (String) null);\n    when(systemDelegate.getProperty(""user.home"")).thenReturn(""bar"");\n    DockerHost.setSystemDelegate(systemDelegate);\n\n    assertThat(DockerHost.certPathFromEnv(), equalTo(""foo""));\n    assertThat(DockerHost.certPathFromEnv(), nullValue());\n  }\n']",user;bar;foo;En;Host;ocker;Docker;From;home;From,9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.85819673538208, -5.768348217010498, -6.36536169052124, -5.456299781799316, -5.478143215179443, -0.016279619187116623]",0.9838521480560303
3,"['  @Test\n  public void testFromUnixSocket() throws Exception {\n    final String unixSocket = ""unix:///var/run/docker.sock"";\n    final String certPath = ""/path/to/cert"";\n    final URI unixSocketUri = new URI(unixSocket);\n\n    final DockerHost dockerHost = DockerHost.from(unixSocket, certPath);\n    assertThat(dockerHost.host(), equalTo(unixSocket));\n    assertThat(dockerHost.uri(), equalTo(unixSocketUri));\n    assertThat(dockerHost.bindUri(), equalTo(unixSocketUri));\n    assertThat(dockerHost.port(), equalTo(0));\n    assertThat(dockerHost.address(), equalTo(""localhost""));\n    assertThat(dockerHost.dockerCertPath(), equalTo(certPath));\n  }\n']",path;Docker;Host;unix;Path;docker;Unix;localhost;From;docker,5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.862391948699951, -5.7636823654174805, -6.377610206604004, -5.455214977264404, -5.492269992828369, -0.016206195577979088]",0.983924388885498
3,"['  @Test\n  public void testFromTcpSocketNoCert() throws Exception {\n    final String tcpSocket = ""tcp://127.0.0.1:2375"";\n    final DockerHost dockerHost = DockerHost.from(tcpSocket, null);\n\n    assertThat(dockerHost.host(), equalTo(""127.0.0.1:2375""));\n    assertThat(dockerHost.uri(), equalTo(new URI(""http://127.0.0.1:2375"")));\n    assertThat(dockerHost.bindUri(), equalTo(new URI(tcpSocket)));\n    assertThat(dockerHost.port(), equalTo(2375));\n    assertThat(dockerHost.address(), equalTo(""127.0.0.1""));\n    assertThat(dockerHost.dockerCertPath(), nullValue());\n  }\n']",Docker;address;docker;docker;Cert;docker;final;Host;http;That,1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.529727786779404e-10;5.384208634495735e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.867862224578857, -5.774746417999268, -6.384042263031006, -5.468387126922607, -5.483714580535889, -0.01612338423728943]",0.9840059280395508
3,"['  @Test\n  public void testFromTcpSocketWithCert() throws Exception {\n    final String tcpSocket = ""tcp://127.0.0.1:2375"";\n    final String certPath = ""/path/to/cert"";\n\n    final DockerHost dockerHost = DockerHost.from(tcpSocket, certPath);\n    assertThat(dockerHost.host(), equalTo(""127.0.0.1:2375""));\n    assertThat(dockerHost.uri(), equalTo(new URI(""https://127.0.0.1:2375"")));\n    assertThat(dockerHost.bindUri(), equalTo(new URI(tcpSocket)));\n    assertThat(dockerHost.port(), equalTo(2375));\n    assertThat(dockerHost.address(), equalTo(""127.0.0.1""));\n    assertThat(dockerHost.dockerCertPath(), equalTo(certPath));\n  }\n']",Socket;URI;Docker;Cert;cert;URI;Docker;Path;Cert;docker,9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.8707194328308105, -5.77384614944458, -6.397075176239014, -5.463657855987549, -5.500253200531006, -0.016046900302171707]",0.9840811491012573
3,"['  @Test\n  public void testFromEnv() throws Exception {\n    when(systemDelegate.getProperty(""os.name"")).thenReturn(""linux"");\n    DockerHost.setSystemDelegate(systemDelegate);\n\n    final String dockerHostEnvVar = DockerHost.defaultDockerEndpoint();\n    final boolean isUnixSocket = dockerHostEnvVar.startsWith(""unix://"");\n    final URI dockerHostUri = new URI(dockerHostEnvVar);\n\n    final String dockerHostAndPort;\n    final URI dockerHostHttpUri;\n    final URI dockerTcpUri;\n    final int dockerHostPort;\n    final String dockerHostHost;\n    if (isUnixSocket) {\n      dockerHostAndPort = dockerHostEnvVar;\n      dockerHostHttpUri = dockerHostUri;\n      dockerTcpUri = dockerHostUri;\n      dockerHostPort = 0;\n      dockerHostHost = ""localhost"";\n    } else {\n      dockerHostAndPort = dockerHostUri.getHost() + "":"" + dockerHostUri.getPort();\n      dockerHostHttpUri = new URI(""http://"" + dockerHostAndPort);\n      dockerTcpUri = new URI(""tcp://"" + dockerHostAndPort);\n      dockerHostPort = dockerHostUri.getPort();\n      dockerHostHost = dockerHostUri.getHost();\n    }\n\n    final DockerHost dockerHost = DockerHost.fromEnv();\n    assertThat(dockerHost.host(), equalTo(dockerHostAndPort));\n    assertThat(dockerHost.uri(), equalTo(dockerHostHttpUri));\n    assertThat(dockerHost.bindUri(), equalTo(dockerTcpUri));\n    assertThat(dockerHost.port(), equalTo(dockerHostPort));\n    assertThat(dockerHost.address(), equalTo(dockerHostHost));\n    assertThat(dockerHost.dockerCertPath(), nullValue());\n  }\n']",uri;os;host;port;URI;Port;URI;cp;name;Host,9.313225746154785e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.815067291259766, -5.698688507080078, -6.343944549560547, -5.388952732086182, -5.541836738586426, -0.016715001314878464]",0.9834239482879639
3,"['  @Test(expected = DockerCertificateException.class)\n  public void testBadDockerCertificates() throws Exception {\n    // try building a DockerCertificates with specifying a cert path to something that\n    // isn\'t a cert\n    DockerCertificates.builder()\n        .dockerCertPath(getResourceFile(""dockerInvalidSslDirectory""))\n        .build();\n  }\n']",docker;specifying;Exception;class;sl;to;Cert;Bad;build;Certificate,9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.957338333129883, -5.835450172424316, -6.512266159057617, -5.57734489440918, -5.552224636077881, -0.01476386096328497]",0.9853445887565613
3,"['  @Test\n  public void testNoDockerCertificatesInDir() throws Exception {\n    final Path certDir = Paths.get(System.getProperty(""java.io.tmpdir""));\n    final Optional<DockerCertificatesStore> result = DockerCertificates.builder()\n        .dockerCertPath(certDir)\n        .build();\n    assertThat(result.isPresent(), is(false));\n  }\n']",Path;docker;Docker;Certificates;Certificates;java;final;get;cert;ocker,1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.367880031466484e-09;9.604264050722122e-10;9.313225746154785e-10;6.984919309616089e-10;3.92901711165905e-10;3.7834979593753815e-10;2.9103830456733704e-10,5,5,"[-5.90463924407959, -5.7795820236206055, -6.389496803283691, -5.492188930511475, -5.4850897789001465, -0.0158883985131979]",0.9842371344566345
3,"['  @Test\n  public void testDefaultDockerCertificates() throws Exception {\n    DockerCertificates.builder()\n        .dockerCertPath(getCertPath())\n        .sslFactory(factory)\n        .build();\n\n    verify(factory).newSslContext(keyStore.capture(), password.capture(), trustStore.capture());\n\n    final KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getValue()\n        .getEntry(""key"", new KeyStore.PasswordProtection(password.getValue()));\n\n    final KeyStore caKeyStore = trustStore.getValue();\n\n    assertNotNull(pkEntry);\n    assertNotNull(pkEntry.getCertificate());\n    assertNotNull(caKeyStore.getCertificate(""o=boot2docker""));\n  }\n']",builder;Default;Password;Private;Null;Certificates;Private;ssl;Certificate;Key,4.94765117764473e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.838388919830322, -5.691914081573486, -6.287232875823975, -5.363900661468506, -5.479512691497803, -0.017146678641438484]",0.9829995036125183
3,"['  @Test\n  public void testDockerCertificatesWithMultiCa() throws Exception {\n    DockerCertificates.builder()\n        .dockerCertPath(getCertPath())\n        .caCertPath(getVariant(""ca-multi.pem""))\n        .sslFactory(factory)\n        .build();\n\n    verify(factory).newSslContext(keyStore.capture(), password.capture(), trustStore.capture());\n\n    final KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getValue()\n        .getEntry(""key"", new KeyStore.PasswordProtection(password.getValue()));\n\n    assertNotNull(pkEntry);\n    assertNotNull(pkEntry.getCertificate());\n    assertNotNull(trustStore.getValue().getCertificate(\n        ""cn=ca-test,o=internet widgits pty ltd,st=some-state,c=cr""));\n    assertNotNull(trustStore.getValue().getCertificate(\n        ""cn=ca-test-2,o=internet widgits pty ltd,st=some-state,c=cr""));\n  }\n']",td;Certificates;Ca;docker;its;ssl;ty;Store;ca;sl,6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.85210657119751, -5.698486328125, -6.3240814208984375, -5.384068012237549, -5.521054267883301, -0.016747592017054558]",0.9833917617797852
3,"['  @Test\n  public void testReadPrivateKeyPkcs1() throws Exception {\n    DockerCertificates.builder()\n        .dockerCertPath(getCertPath())\n        .clientKeyPath(getVariant(""key-pkcs1.pem""))\n        .sslFactory(factory)\n        .build();\n\n    verify(factory).newSslContext(keyStore.capture(), password.capture(), trustStore.capture());\n\n    final KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getValue()\n        .getEntry(""key"", new KeyStore.PasswordProtection(password.getValue()));\n\n    assertNotNull(pkEntry.getPrivateKey());\n  }\n']",Protection;Docker;Entry;Store;Cert;get;Context;trust;em;verify,2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.1641532182693481e-10;8.36735125631094e-11,5,5,"[-5.861324787139893, -5.717069625854492, -6.321872711181641, -5.40108585357666, -5.499904632568359, -0.016670450568199158]",0.9834677577018738
3,"['  @Test\n  public void testReadPrivateKeyPkcs8() throws Exception {\n    DockerCertificates.builder()\n        .dockerCertPath(getCertPath())\n        .clientKeyPath(getVariant(""key-pkcs8.pem""))\n        .sslFactory(factory)\n        .build();\n\n    verify(factory).newSslContext(keyStore.capture(), password.capture(), trustStore.capture());\n\n    final KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getValue()\n        .getEntry(""key"", new KeyStore.PasswordProtection(password.getValue()));\n\n    assertNotNull(pkEntry.getPrivateKey());\n  }\n']",Docker;em;ssl;cs;Key;key;Entry;new;Entry;Store,4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.858251571655273, -5.712559223175049, -6.319575786590576, -5.3980302810668945, -5.498451232910156, -0.016718752682209015]",0.9834202527999878
3,"['    @Test\n    public void test_c() throws Throwable {\n        File file = Files.findFile(getClass().getPackage().getName().replace(\'.\', \'/\')\n                                    + ""/snapshot.jpg"");\n        //System.out.println(file.length());\n        Images.clipScale(file, File.createTempFile(""abc"", ""jpg""), 256, 256);\n    }\n']",create;length;println;Files;out;get;File;jpg;Name;Package,1.5133991837501526e-09;8.149072527885437e-10;5.820766091346741e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;2.9103830456733704e-11,5,5,"[-5.875368118286133, -5.723288059234619, -6.319223403930664, -5.398358345031738, -5.4587860107421875, -0.016801046207547188]",0.9833391904830933
3,"['    @Test\n    public void test_clipScale_url() throws Throwable {\n        File file = Files.findFile(getClass().getPackage().getName().replace(\'.\', \'/\')\n                                    + ""/snapshot.jpg"");\n        Images.clipScale(file.toURI().toURL(), File.createTempFile(""abc"", ""jpg""), 256, 256);\n    }\n']",URL;snapshot;jpg;Scale;Scale;get;Images;clip;URI;file,8.731149137020111e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.473825588822365e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.879993438720703, -5.731418609619141, -6.336432456970215, -5.412755489349365, -5.452291011810303, -0.016692258417606354]",0.9834463000297546
3,"['        //å¾\x97å\x88°æ\x89\x80æ\x9c\x89å¸¦@Testç\x9a\x84æ\x96¹æ³\x95\n            public void testFailure(Failure failure) throws Exception {\n                result.addError(asTest(failure.getDescription()), failure.getException());\n            }\n']",Ã¥;as;Failure;Ã¥;Failure;Ã¦;Ã¦;add;failure;Exception,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.979674816131592, -5.863105773925781, -6.51625919342041, -5.546688079833984, -5.579306602478027, -0.014633351936936378]",0.9854732155799866
3,"['    @Test\n    public void test_speed() throws SecurityException, NoSuchMethodException {\n        final SimpleSpeedTest z = new SimpleSpeedTest();\n        final String elstr = ""num + (i - 1 + 2 - 3 + 4 - 5 + 6 - 7)-z.abc(i)"";\n        final Context context = Lang.context(""{num:0}"");\n        context.set(""z"", z);\n\n        System.out.println(""\\n"" + Strings.dup(\'=\', 100));\n\n        Stopwatch sw = Stopwatch.run(new Atom() {\n            public void run() {\n                int num = 0;\n                for (int i = 0; i < max; i++)\n                    num = num + (i - 1 + 2 - 3 + 4 - 5 + 6 - 7) - z.abc(i);\n                //System.out.println(""Num: "" + num);\n            }\n']",Num;No;final;run;new;num;sw;du;set;Security,3.4924596548080444e-10;2.764863893389702e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10;8.731149137020111e-11,5,5,"[-5.84250545501709, -5.672690391540527, -6.260824203491211, -5.317580699920654, -5.4767913818359375, -0.01748926192522049]",0.9826627969741821
3,"['    @Test\n    public void simpleRPN() throws IOException{\n        assertEquals(""11+1+"", parseRPN(""1+1+1""));\n        assertEquals(""11-"", parseRPN(""1-1""));\n        assertEquals(""11-1-"", parseRPN(""1-1-1""));\n        assertEquals(""52%1+"",parseRPN(""5%2+1""));\n        assertEquals(""152%+"",parseRPN(""1+5%2""));\n    }\n']",PN;IOException;parse;Equals;parse;PN;parse;Equals;Equals;parse,9.89530235528946e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.128661774098873e-10;2.6193447411060333e-10;2.6193447411060333e-10;1.4551915228366852e-10;-5.093170329928398e-11;-7.275957614183426e-11;-8.731149137020111e-11,5,5,"[-5.833438396453857, -5.697412014007568, -6.2633795738220215, -5.338743686676025, -5.423767566680908, -0.01755298487842083]",0.9826001524925232
3,"['    @Test\n    public void mulRPn() throws IOException{\n        assertEquals(""512+4*+3-"", parseRPN(""5+((1+2)*4)-3""));\n        assertEquals(""987*+65+412*-3+-*+"", parseRPN(""9+8*7+(6+5)*(-(4-1*2+3))""));\n    }\n']",PN;mul;RP;IOException;Equals;Equals;parse;parse;PN,1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.280568540096283e-09;7.275957614183426e-11;0.0;-5.820766091346741e-11;-4.0745362639427185e-10;-1.3969838619232178e-09,5,5,"[-5.866888046264648, -5.732028961181641, -6.3095526695251465, -5.39508581161499, -5.434985160827637, -0.016933733597397804]",0.9832088351249695
3,"['    @Test\n    public void test() throws InstantiationException, IllegalAccessException{\n        String[] a = new String[]{""a"",""b""};\n        Map<String, String[]> map = new HashMap<String, String[]>();\n        map.put(""a"", a);\n        El exp = new El(""util.test(map[\'a\'])"");\n        Context context = Lang.context();\n        context.set(""util"",StringUtil.class.newInstance());\n        context.set(""map"", map);\n        assertEquals(""ab"", exp.eval(context));\n    }\n']",eval;El;ab;context;put;new;new;Exception;map;Instance,9.313225746154785e-10;6.984919309616089e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;8.731149137020111e-11;8.731149137020111e-11;7.275957614183426e-11;5.820766091346741e-11;5.093170329928398e-11,5,5,"[-5.793848514556885, -5.643310070037842, -6.204879283905029, -5.296921253204346, -5.408524036407471, -0.01825777254998684]",0.9819079041481018
3,"['    @Test\n    public void test2(){\n        String[] a = new String[]{""a"",""b""};\n        String[] b = new String[]{""1"",""2""};\n        Map<String,Object> map = new HashMap<String,Object>();\n        map.put(""a"", a);\n        map.put(""b"", b);\n        El exp = new El(""util.test(map[\'a\'][0],map[\'b\'][0])"");  // é¢\x84ç¼\x96è¯\x91ç»\x93æ\x9e\x9cä¸ºä¸\x80ä¸ª El å¯¹è±¡\n        Context context = Lang.context();\n        context.set(""util"",new StringUtil());\n        context.set(""map"", map);\n        System.out.println(exp.eval(context));\n    }\n']",El;exp;Â¢;Ã¤;util;eval;Âº;Ã§;println;Ã¨,1.6298145055770874e-09;1.3969838619232178e-09;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.814624309539795, -5.6636505126953125, -6.241541385650635, -5.3017473220825195, -5.435837745666504, -0.017899995669722557]",0.9822592735290527
3,"['    @Test\n    public void notCalculateOneNumber() {\n        assertEquals(1, El.eval(""1""));\n        assertEquals(0.1, El.eval("".1""));\n        assertEquals(0.1d, El.eval(""0.1""));\n        assertEquals(0.1f, El.eval(""0.1f""));\n        assertEquals(0.1d, El.eval(""0.1d""));\n        assertEquals(true, El.eval(""true""));\n        assertEquals(false, El.eval(""false""));\n        assertEquals(""jk"", El.eval(""\'jk\'""));\n    }\n']",One;Equals;Number;El;Equals;El;Calculate;El;El;true,9.313225746154785e-10;6.693881005048752e-10;4.656612873077393e-10;3.7834979593753815e-10;3.5652192309498787e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8135480880737305, -5.648843765258789, -6.217013359069824, -5.288089752197266, -5.407207012176514, -0.01820392720401287]",0.9819608926773071
3,"['    @Test\n    public void simpleCalculate() {\n        // å\x8a\xa0\n        assertEquals(2, El.eval(""1+1""));\n        assertEquals(2.2, El.eval(""1.1+1.1""));\n        // å\x87\x8f\n        assertEquals(1, El.eval(""2-1""));\n        // ä¹\x98\n        assertEquals(9, El.eval(""3*3""));\n        assertEquals(0, El.eval(""3*0""));\n        // é\x99¤\n        assertEquals(3, El.eval(""9/3""));\n        assertEquals(2.2, El.eval(""4.4/2""));\n        assertEquals(9.9 / 3, El.eval(""9.9/3""));\n        // å\x8f\x96ä½\x99\n        assertEquals(1, El.eval(""5%2""));\n        assertEquals(1.0 % 0.1, El.eval(""1.0%0.1""));\n\n    }\n']",Ã¤;simple;Ã©;eval;eval;Equals;Equals;El;Equals;El,4.656612873077393e-10;3.346940502524376e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.0913936421275139e-10;1.0186340659856796e-10;1.0186340659856796e-10;1.0186340659856796e-10;8.731149137020111e-11,5,5,"[-5.830074310302734, -5.651593208312988, -6.265303611755371, -5.293124675750732, -5.501422882080078, -0.01761225424706936]",0.9825420379638672
3,"['    @Test\n    public void bit() {\n        assertEquals(-40, El.eval(""-5<<3""));\n        assertEquals(-1, El.eval(""-5>>3""));\n        assertEquals(5, El.eval(""5>>>32""));\n        assertEquals(-5, El.eval(""-5>>>32""));\n        assertEquals(1, El.eval(""5&3""));\n        assertEquals(7, El.eval(""5|3""));\n        assertEquals(-6, El.eval(""~5""));\n        assertEquals(6, El.eval(""5^3""));\n    }\n']",eval;El;El;eval;El;Equals;El;El;eval;Equals,4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.1641532182693481e-10;8.731149137020111e-11;7.275957614183426e-11;4.3655745685100555e-11;2.546585164964199e-11,5,5,"[-5.808915138244629, -5.637939453125, -6.213820457458496, -5.298030376434326, -5.412299156188965, -0.018189646303653717]",0.9819747805595398
3,"['    @Test\n    public void multiStageOperation() {\n        assertEquals(3, El.eval(""1 + 1 + 1""));\n        assertEquals(1, El.eval(""1+1-1""));\n        assertEquals(-1, El.eval(""1-1-1""));\n        assertEquals(1, El.eval(""1-(1-1)""));\n        assertEquals(7, El.eval(""1+2*3""));\n        assertEquals(2 * 4 + 2 * 3 + 4 * 5, El.eval(""2*4+2*3+4*5""));\n        assertEquals(9 + 8 * 7 + (6 + 5) * ((4 - 1 * 2 + 3)), El.eval(""9+8*7+(6+5)*((4-1*2+3))""));\n        assertEquals(.3 + .2 * .5, El.eval("".3+.2*.5""));\n        assertEquals((.5 + 0.1) * .9, El.eval(""(.5 + 0.1)*.9""));\n    }\n']",eval;Equals;El;Equals;El;El;El;El;El;Stage,3.92901711165905e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.813249588012695, -5.656611919403076, -6.233002185821533, -5.28528356552124, -5.452535629272461, -0.017956901341676712]",0.9822033643722534
3,"['    @Test\n    public void sikpSpace() {\n        // ç©ºæ\xa0¼æ£\x80æµ\x8b\n        assertEquals(3, El.eval(""    1 + 2    ""));\n    }\n']",Â©;Space;Ã¦;Ã¦;Â£;El;Âº;ik;eval;Âł,1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10,5,5,"[-5.913036346435547, -5.763528823852539, -6.376410484313965, -5.462804794311523, -5.4663896560668945, -0.01614297367632389]",0.9839867353439331
3,"['    @Test\n    public void testNull() {\n        assertEquals(null, El.eval(""null""));\n        assertTrue((Boolean) El.eval(""null == null""));\n    }\n']",Boolean;eval;El;eval;El;null;null;null;True;Equals,9.89530235528946e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;5.820766091346741e-11;0.0;-2.9103830456733704e-11;-1.7462298274040222e-10;-2.6193447411060333e-10,5,5,"[-5.867736339569092, -5.727332592010498, -6.315433025360107, -5.427497386932373, -5.429966449737549, -0.016811011359095573]",0.9833295345306396
3,"['    @Test\n    public void logical() {\n        assertEquals(true, El.eval(""2 > 1""));\n        assertEquals(false, El.eval(""2 < 1""));\n        assertEquals(true, El.eval(""2 >= 2""));\n        assertEquals(true, El.eval(""2 <= 2""));\n        assertEquals(true, El.eval(""2 == 2 ""));\n        assertEquals(true, El.eval(""1 != 2""));\n        assertEquals(true, El.eval(""!(1 == 2)""));\n        assertEquals(true, El.eval(""!false""));\n        assertEquals(true, El.eval(""true || false""));\n        assertEquals(false, El.eval(""true && false""));\n        assertEquals(false, El.eval(""false || true && false""));\n    }\n']",eval;Equals;El;Equals;true;El;false;Equals;El;Equals,2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10;8.003553375601768e-11;7.275957614183426e-11,5,5,"[-5.80174446105957, -5.650461673736572, -6.215301513671875, -5.275472640991211, -5.42978572845459, -0.018200883641839027]",0.9819636344909668
3,"['    @Test\n    public void threeTernary() {\n        assertEquals(2, El.eval(""1>0?2:3""));\n        assertEquals(2, El.eval(""1>0&&1<2?2:3""));\n    }\n']",ernary;Equals;El;Equals;El;eval;eval;three,3.259629011154175e-09;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-09,5,5,"[-5.867314338684082, -5.735861301422119, -6.320833206176758, -5.4288740158081055, -5.4471116065979, -0.016692258417606354]",0.9834461808204651
3,"['    @Test\n    public void stringTest() {\n        assertEquals(""jk"", El.eval(""\'jk\'""));\n        assertEquals(2, El.eval(""\'jk\'.length()""));\n        assertEquals(2, El.eval(""\\""jk\\"".length()""));\n        assertEquals(""jk"", El.eval(""\\""    jk   \\"".trim()""));\n        assertEquals(""j\\\\n\\\\tk"", El.eval(""\\""j\\\\n\\\\tk\\""""));\n    }\n']",El;Equals;trim;eval;length;length;El;Equals;Equals;El,1.3969838619232178e-09;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;7.275957614183426e-11;4.3655745685100555e-11;0.0,5,5,"[-5.823563575744629, -5.681417465209961, -6.254166126251221, -5.336546897888184, -5.4209513664245605, -0.017678897827863693]",0.9824764728546143
3,"['    @Test\n    public void test_issue_397_3() {\n        int expect = 1 / 1 + 10 * (1400 - 1400) / 400;\n        Object val = El.eval(""1/1+10*(1400-1400)/400"");\n        assertEquals(expect, val);\n    }\n']",issue;Equals;val;val;El;Object;expect;eval;expect,4.656612873077393e-10;0.0;-1.1641532182693481e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-2.6775524020195007e-09;-2.7939677238464355e-09,5,5,"[-5.876708507537842, -5.758990287780762, -6.334786891937256, -5.441069602966309, -5.451326370239258, -0.016492467373609543]",0.9836428165435791
3,"['    @Test\n    public void negative() {\n        assertEquals(-1, El.eval(""-1""));\n        assertEquals(0, El.eval(""-1+1""));\n        assertEquals(-1 - -1, El.eval(""-1 - -1""));\n        assertEquals(9 + 8 * 7 + (6 + 5) * (-(4 - 1 * 2 + 3)), El.eval(""9+8*7+(6+5)*(-(4-1*2+3))""));\n    }\n']",Equals;Equals;Equals;Equals;negative;El;El;El;eval;eval,2.764863893389702e-10;1.7462298274040222e-10;1.4551915228366852e-10;9.458744898438454e-11;0.0;-5.820766091346741e-11;-1.1641532182693481e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-1.5279510989785194e-10,5,5,"[-5.830726146697998, -5.6773905754089355, -6.251979351043701, -5.344453811645508, -5.425039768218994, -0.0176188126206398]",0.9825354814529419
3,"['    @Test\n    public void callMethod() {\n        assertEquals(\'j\', El.eval(""\'jk\'.charAt(0)""));\n        assertEquals(""cde"", El.eval(""\\""abcde\\"".substring(2)""));\n        assertEquals(""b"", El.eval(""\\""abcde\\"".substring(1,2)""));\n        assertEquals(true, El.eval(""\\""abcd\\"".regionMatches(2,\\""ccd\\"",1,2)""));\n        assertEquals(""bbbb"", El.eval(""\'  abab  \'.replace(\'a\',\'b\').trim()""));\n    }\n']",abab;substring;abcde;eval;Equals;replace;El;eval;Equals;Equals,5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10,5,5,"[-5.818287372589111, -5.68100118637085, -6.254452705383301, -5.33278751373291, -5.416201591491699, -0.01773558184504509]",0.9824207425117493
3,"['    @Test\n    public void test_simple_condition() {\n        Context context = Lang.context();\n        context.set(""a"", 10);\n        assertEquals(10, El.eval(context, ""a""));\n        assertEquals(20, El.eval(context, ""a + a""));\n\n        context.set(""b"", ""abc"");\n        assertEquals(25, El.eval(context, ""a + 2 +a+ b.length()""));\n\n        String s = ""a>5?\'GT 5\':\'LTE 5\'"";\n        assertEquals(""GT 5"", El.eval(context, s));\n        context.set(""a"", 5);\n        assertEquals(""LTE 5"", El.eval(context, s));\n\n        assertEquals(""jk"", El.eval(""\\""j\\""+\\""k\\""""));\n\n    }\n']",GT;abc;TE;TE;eval;simple;Equals;Equals;El;eval,6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.812159061431885, -5.665765285491943, -6.23632287979126, -5.297800540924072, -5.447715759277344, -0.017878098413348198]",0.9822807908058167
3,"['    @Test\n    public void context() {\n        Context context = Lang.context();\n        List<String> list = new ArrayList<String>();\n        list.add(""jk"");\n        context.set(""a"", list);\n        assertEquals(""jk"", El.eval(context, ""a.get((1-1))""));\n        assertEquals(""jk"", El.eval(context, ""a.get(1-1)""));\n        assertEquals(""jk"", El.eval(context, ""a.get(0)""));\n\n        assertTrue((Boolean) El.eval(Lang.context(), ""a==null""));\n        try {\n            assertTrue((Boolean) El.eval(Lang.context(), ""a.a""));\n            fail();\n        }\n        catch (Exception e) {}\n    }\n']",context;Equals;Boolean;eval;get;ang;Lang;Context;eval;eval,5.529727786779404e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.798689842224121, -5.647180080413818, -6.196137428283691, -5.253024578094482, -5.425426959991455, -0.018399279564619064]",0.9817688465118408
3,"['    @Test\n    public void array() {\n        Context context = Lang.context();\n        String[] str = new String[]{""a"", ""b"", ""c""};\n        String[][] bb = new String[][]{{""a"", ""b""}, {""c"", ""d""}};\n        context.set(""a"", str);\n        context.set(""b"", bb);\n        assertEquals(""b"", El.eval(context, ""a[1]""));\n        assertEquals(""b"", El.eval(context, ""a[1].toString()""));\n        assertEquals(""b"", El.eval(context, ""a[2-1]""));\n        assertEquals(""d"", El.eval(context, ""b[1][1]""));\n    }\n']",Lang;Context;El;array;El;El;new;str;context;Equals,3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;8.003553375601768e-11;7.275957614183426e-11,5,5,"[-5.808150291442871, -5.679624080657959, -6.230108261108398, -5.283449649810791, -5.427666187286377, -0.018016615882515907]",0.9821447134017944
3,"['    @Test\n    public void field() {\n        class abc {\n            @SuppressWarnings(""unused"")\n            public String name = ""jk"";\n        }\n        Context context = Lang.context();\n        context.set(""a"", new abc());\n        assertEquals(""jk"", El.eval(context, ""a.name""));\n        // è¿\x99ä¸ªå\x8a\x9fè\x83½æ\x94¾å¼\x83\n        // assertFalse((Boolean)El.eval(""java.lang.Boolean.FALSE""));\n        // assertFalse((Boolean)El.eval(""Boolean.FALSE""));\n    }\n']",Ã¥;Â½;El;Ã¦;unused;context;Boolean;context;False;Lang,6.984919309616089e-10;6.984919309616089e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.842552661895752, -5.685744762420654, -6.263742923736572, -5.3168816566467285, -5.46111536026001, -0.017508823424577713]",0.9826435446739197
3,"['    @Test\n    public void custom() {\n        assertEquals(2, El.eval(""max(1, 2)""));\n        assertEquals(1, El.eval(""min(1, 2)""));\n        assertEquals(""jk"", El.eval(""trim(\'    jk    \')""));\n    }\n']",custom;max;min;Equals;trim;El;El;eval;El;Equals,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;3.2014213502407074e-10;1.6007106751203537e-10;0.0;-5.820766091346741e-11;-8.731149137020111e-11;-2.3283064365386963e-10;-3.92901711165905e-10,5,5,"[-5.836681365966797, -5.684881210327148, -6.26869535446167, -5.371706008911133, -5.416101932525635, -0.017452126368880272]",0.9826991558074951
3,"['    @Test\n    public void speed() {\n        SimpleSpeedTest z = new SimpleSpeedTest();\n        int num = 4988;\n        String elstr = ""num + (i - 1 + 2 - 3 + 4 - 5 + 6 - 7)-z.abc(i)"";\n        int i = 5000;\n        Context con = Lang.context();\n        con.set(""num"", num);\n        con.set(""i"", i);\n        con.set(""z"", z);\n        assertEquals(num + (i - 1 + 2 - 3 + 4 - 5 + 6 - 7) - z.abc(i), El.eval(con, elstr));\n    }\n']",Equals;num;num;num;abc;elstr;con;Speed;abc;Simple,3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.0186340659856796e-10;1.0186340659856796e-10;8.731149137020111e-11;7.275957614183426e-11,5,5,"[-5.850800514221191, -5.680508136749268, -6.279336452484131, -5.342060089111328, -5.48455810546875, -0.01724827103316784]",0.9828994870185852
3,"['    @Test\n    public void lssue_486() {\n        assertEquals(2 + (-3), El.eval(""2+(-3)""));\n        assertEquals(2 + -3, El.eval(""2+-3""));\n        assertEquals(2 * -3, El.eval(""2*-3""));\n        assertEquals(-2 * -3, El.eval(""-2*-3""));\n        assertEquals(2 / -3, El.eval(""2/-3""));\n        assertEquals(2 % -3, El.eval(""2%-3""));\n    }\n']",eval;El;eval;Equals;El;eval;El;Equals;El;eval,3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.5279510989785194e-10;1.3096723705530167e-10;1.1641532182693481e-10;8.731149137020111e-11;8.731149137020111e-11;8.731149137020111e-11;0.0,5,5,"[-5.816381454467773, -5.660963535308838, -6.24006462097168, -5.32958984375, -5.426183700561523, -0.01781088300049305]",0.982346773147583
3,"['    @Test\n    public void map() {\n        Context context = Lang.context();\n        context.set(""a"", Lang.map(""{x:10,y:50,txt:\'Hello\'}""));\n\n        assertEquals(100, El.eval(context, ""a.get(\'x\')*10""));\n        assertEquals(100, El.eval(context, ""a.x*10""));\n        assertEquals(100, El.eval(context, ""a[\'x\']*10""));\n        assertEquals(""Hello-40"", El.eval(context, ""a.get(\'txt\')+(a.get(\'x\')-a.get(\'y\'))""));\n    }\n']",txt;El;El;Equals;txt;Equals;Equals;get;context;eval,4.656612873077393e-10;4.511093720793724e-10;2.9103830456733704e-10;2.837623469531536e-10;2.3283064365386963e-10;1.673470251262188e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.818579196929932, -5.690347671508789, -6.252068042755127, -5.318517208099365, -5.448245048522949, -0.01763520948588848]",0.9825193881988525
3,"['    @Test\n    public void list() {\n        Context context = Lang.context();\n        List<String> list = new ArrayList<String>();\n        context.set(""b"", list);\n        assertEquals(0, El.eval(context, ""b.size()""));\n        list.add("""");\n        assertEquals(1, El.eval(context, ""b.size()""));\n        El.eval(context, ""b.add(\'Q\\nQ\')"");\n        assertEquals(2, El.eval(context, ""b.size()""));\n    }\n']",List;size;El;size;eval;eval;context;context;list;Array,3.346940502524376e-10;2.255546860396862e-10;2.0372681319713593e-10;1.4551915228366852e-10;9.458744898438454e-11;8.731149137020111e-11;8.731149137020111e-11;7.275957614183426e-11;7.275957614183426e-11;7.275957614183426e-11,5,5,"[-5.812252044677734, -5.662420749664307, -6.213153839111328, -5.287148475646973, -5.410787582397461, -0.018155815079808235]",0.9820079803466797
3,"['    @Test\n    public void complexOperation() {\n        assertEquals(1000\n                     + 100.0\n                     * 99\n                     - (600 - 3 * 15)\n                     % (((68 - 9) - 3) * 2 - 100)\n                     + 10000\n                     % 7\n                     * 71, El.eval(""1000+100.0*99-(600-3*15)%(((68-9)-3)*2-100)+10000%7*71""));\n        assertEquals(6.7 - 100 > 39.6 ? true ? 4 + 5 : 6 - 1 : !(100 % 3 - 39.0 < 27) ? 8 * 2 - 199\n                                                                                     : 100 % 3,\n                     El.eval(""6.7-100>39.6 ? 5==5? 4+5:6-1 : !(100%3-39.0<27) ? 8*2-199: 100%3""));\n\n        Context vars = Lang.context();\n        vars.set(""i"", 100);\n        vars.set(""pi"", 3.14f);\n        vars.set(""d"", -3.9);\n        vars.set(""b"", (byte) 4);\n        vars.set(""bool"", false);\n        vars.set(""t"", """");\n        String t = ""i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99 ==i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99"";\n        // t =\n        // ""i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99"";\n        assertEquals(true, El.eval(vars, t));\n\n        // assertEquals(\'A\' == (\'A\') || \'B\' == \'B\' && ""ABCD"" == """" && \'A\' ==\n        // \'A\', el.eval(vars,\n        // ""\'A\' == \'A\' || \'B\' == \'B\' && \'ABCD\' == t &&  \'A\' == \'A\'""));\n        assertEquals(true || true && false && true,\n                     El.eval(vars, ""\'A\' == \'A\' || \'B\' == \'B\' && \'ABCD\' == t &&  \'A\' == \'A\'""));\n    }\n']",Lang;eval;ars;El;ars;Context;ars;pi;set;true,2.9103830456733704e-10;8.731149137020111e-11;8.003553375601768e-11;5.820766091346741e-11;4.3655745685100555e-11;2.9103830456733704e-11;0.0;-5.820766091346741e-11;-8.003553375601768e-11;-8.731149137020111e-11,5,5,"[-5.824301719665527, -5.644286155700684, -6.2426862716674805, -5.275667190551758, -5.481390476226807, -0.01787400059401989]",0.9822847843170166
3,"['    @Test\n    public void testIssues87() {\n        Context context = Lang.context();\n        context.set(""a"", new BigDecimal(""7""));\n        context.set(""b"", new BigDecimal(""3""));\n        assertEquals(10, El.eval(context, ""a.add(b).intValue()""));\n    }\n']",Context;new;eval;El;context;set;Value;context;new;Lang,4.656612873077393e-10;4.0745362639427185e-10;3.346940502524376e-10;2.3283064365386963e-10;2.255546860396862e-10;1.4551915228366852e-10;5.820766091346741e-11;5.820766091346741e-11;1.4551915228366852e-11;0.0,5,5,"[-5.8250956535339355, -5.682992458343506, -6.268137454986572, -5.3814239501953125, -5.421938419342041, -0.017422370612621307]",0.9827285408973694
3,"['    @Test\n    public void testIssue168() {\n        assertEquals(El.eval(""0.1354*((70-8)%70)*100""), 0.1354 * ((70 - 8) % 70) * 100);\n        assertEquals(El.eval(""0.1354*((70d-8)/70)*100""), 0.1354 * ((70d - 8) / 70) * 100);\n        assertEquals(El.eval(""0.5006*(70/600*100)""), 0.5006 * (70 / 600 * 100));\n    }\n']",Issue;El;Equals;Equals;El;eval;eval;Equals;eval;El,2.3283064365386963e-10;2.0372681319713593e-10;6.548361852765083e-11;0.0;0.0;0.0;0.0;-7.275957614183426e-11;-1.7462298274040222e-10;-4.656612873077393e-10,5,5,"[-5.843208312988281, -5.691637992858887, -6.275187015533447, -5.345860004425049, -5.434593200683594, -0.017438068985939026]",0.9827131032943726
3,"['    @Test\n    public void testIssue277() {\n        Context context = Lang.context();\n        context.set(""strings"", Strings.class);\n        assertEquals(""a"", El.eval(context, ""strings.trim(\\""  a  \\"")""));\n    }\n']",Lang;Equals;Issue;context;strings;context;El;set;context;class,4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.4551915228366852e-11;0.0;-5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-5.85386848449707, -5.719577789306641, -6.312441825866699, -5.418546676635742, -5.441360950469971, -0.01687208190560341]",0.9832693338394165
3,"['    @Test\n    public void testIssue277_2() {\n        Context context = Lang.context();\n        context.set(""math"", Maths.class);\n        assertEquals(2, El.eval(context, ""math.max(1, 2)""));\n    }\n']",math;El;max;Context;eval;context;context;class;set;math,1.1641532182693481e-09;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-2.9103830456733704e-10;-4.0745362639427185e-10,5,5,"[-5.850171089172363, -5.712011814117432, -6.297800540924072, -5.4153032302856445, -5.441928386688232, -0.016947682946920395]",0.9831951260566711
3,"['    @Test\n    public void testIssue279() throws InterruptedException {\n        Context context = Lang.context();\n        context.set(""math"", Maths.class);\n        System.out.println(Maths.class.toString());\n        assertEquals(""class org.nutz.lang.Maths"", El.eval(context, ""math.toString()""));\n\n        NutConf.load(""org/nutz/el/issue279/279.js"");\n        assertEquals(El.eval(""uuuid(false)""), ""abc"");\n        assertEquals(El.eval(""uuuid()""), ""abc"");\n    }\n']",abc;Math;load;math;nut;js;org;context;println;System,1.367880031466484e-09;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.0913936421275139e-10,5,5,"[-5.829302787780762, -5.702954292297363, -6.282341003417969, -5.358481407165527, -5.4604387283325195, -0.017252957448363304]",0.982895016670227
3,"['    @Test\n    public void testIssue292() {\n        Context context = Lang.context();\n        context.set(""a"", 123);\n        context.set(""b"", 20);\n        Object o = El.eval(context, ""a>b?a:b"");\n        assertEquals(123, o);\n    }\n']",eval;El;Context;Lang;Issue;set;context;context;set;Object,1.1641532182693481e-09;9.313225746154785e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;5.820766091346741e-11;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.862645149230957, -5.73781681060791, -6.312193393707275, -5.399627208709717, -5.449121952056885, -0.016838908195495605]",0.9833020567893982
3,"['    @Test\n    public void testIssue293() {\n\n        Context context = Lang.context();\n        context.set(""static"", new Issue293());\n        context.set(""a"", Issue293.class);\n\n        assertEquals(""xxx"", El.eval(context, ""a.printParam(a.info)""));\n    }\n']",El;print;Issue;Lang;Issue;Equals;Context;context;new;Param,1.3969838619232178e-09;1.1641532182693481e-09;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.7462298274040222e-10;8.731149137020111e-11;0.0,5,5,"[-5.85434627532959, -5.727756977081299, -6.322274684906006, -5.421099662780762, -5.457866191864014, -0.01674196496605873]",0.9833974242210388
3,"['    @Test\n    public void testIssue303() {\n        Context context = Lang.context();\n        Issue303 item = new Issue303(""item"");\n        item.child = new Issue303(""child"");\n        context.set(""item"", item);\n\n        assertEquals(""child"", El.eval(context, ""item.child.getName()""));\n        assertEquals(0, El.eval(context, ""item.list.size()""));\n    }\n']",Issue;item;child;child;item;Issue;Name;Issue;get;context,9.89530235528946e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.382431946694851e-10;1.1641532182693481e-10,5,5,"[-5.83649206161499, -5.700719356536865, -6.269434928894043, -5.357836723327637, -5.429497718811035, -0.017402807250618935]",0.9827477335929871
3,"['    @Test\n    public void testIssue306() throws InterruptedException {\n        int size = 100;\n        final CountDownLatch count = new CountDownLatch(size);\n        final List<Integer> error = new ArrayList<Integer>();\n        for (int index = 0; index < size; index++) {\n            new Thread() {\n                public void run() {\n                    try {\n                        El.eval(""1+1"");\n                    }\n                    catch (Exception e) {\n                        error.add(1);\n                    }\n                    finally {\n                        count.countDown();\n                    }\n                }\n']",Exception;finally;Array;final;count;run;add;final;atch;index,2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.382431946694851e-10;1.2369127944111824e-10;1.1641532182693481e-10;1.0186340659856796e-10;8.731149137020111e-11;8.731149137020111e-11;8.003553375601768e-11,5,5,"[-5.83276891708374, -5.644387722015381, -6.22914981842041, -5.2833428382873535, -5.45930814743042, -0.017930088564753532]",0.9822297096252441
3,"['    @Test\n    public void testIssue307(){\n        Context context = Lang.context();\n        List<String> list = new ArrayList<String>();\n        list.add(""jk"");\n        context.set(""list"", list);\n        context.set(""System"", System.class);\n        \n        El.eval(context, ""list.add(list.get(0))"");\n        assertEquals(2, list.size());\n    }\n']",Lang;add;Issue;context;set;System;Array;context;Equals;list,3.725290298461914e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.812023162841797, -5.6516923904418945, -6.216269493103027, -5.311085224151611, -5.403053283691406, -0.018101729452610016]",0.9820610284805298
3,"['    @Test\n    public void testIssue308(){\n        Context context = Lang.context();\n        List<String> list = new ArrayList<String>();\n        list.add(""jk"");\n        context.set(""list"", list);\n        context.set(""System"", System.class);\n        \n        El.eval(context, ""System.getenv(\'PATH\').getClass().getName()"");\n        assertEquals(""1"", Mirror.me(String.class).invoke(String.class, ""valueOf"", 1));\n        \n        assertEquals(""jk"", Mirror.me(String.class).invoke(String.class, ""valueOf"", ""jk""));\n    }\n']",PATH;getenv;System;Issue;get;set;context;List;invoke;set,1.0477378964424133e-09;9.604264050722122e-10;5.529727786779404e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.964508555829525e-10;1.382431946694851e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.807763576507568, -5.662022590637207, -6.223849296569824, -5.295058727264404, -5.421675205230713, -0.018059466034173965]",0.9821027517318726
3,"['    @Test\n    public void test_issue314() {\n        Context context = Lang.context();\n        \n        context.set(""String"", String.class);\n        \n        Issue314 i314 = new Issue314();\n        List<String> list = new ArrayList<String>();\n        list.add(""123"");\n        i314.setList(list);\n        context.set(""map"", i314);\n        \n        assertEquals(""123"", El.eval(context, ""String.valueOf(123)""));\n        assertEquals(""123"", El.eval(context, ""map.list.get(0)""));\n    }\n']",Lang;map;list;set;context;value;get;context;El;list,1.3969838619232178e-09;4.220055416226387e-10;2.0372681319713593e-10;1.964508555829525e-10;1.964508555829525e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.8135881423950195, -5.652407169342041, -6.222039699554443, -5.297042369842529, -5.433481693267822, -0.018016498535871506]",0.982144832611084
3,"['    @Test\n    public void test_issue411(){\n    \tEl el=new El(""a[0].b.isPass(\'\')?\'1\':\'2\'"");\n        Context ctx = Lang.context();\n        ctx.set(""a"",new Object[]{new org.nutz.el.issue411.Issue411.A()} );\n        assertEquals(""1"", el.eval(ctx));\n    }\n']",Issue;issue;Object;issue;new;set;new;tx;Equals;El,8.731149137020111e-10;4.656612873077393e-10;3.4924596548080444e-10;1.1641532182693481e-10;8.731149137020111e-11;2.9103830456733704e-11;-1.1641532182693481e-10;-1.4551915228366852e-10;-1.7462298274040222e-10;-1.7462298274040222e-10,5,5,"[-5.857976913452148, -5.7305426597595215, -6.311074256896973, -5.401603698730469, -5.455085277557373, -0.016843363642692566]",0.9832977056503296
3,"['    @Test\n    public void test_uu32_uu64(){\n        Context ctx = Lang.context();\n        \n        El el = new El(""uuid()"");\n        assertEquals(32, el.eval(ctx).toString().length());\n        \n        el = new El(""uuid(32)"");\n        assertTrue(26 >= el.eval(ctx).toString().length());\n        \n        el = new El(""uuid(64)"");\n        assertTrue(23 >= el.eval(ctx).toString().length());\n    }\n']",El;ctx;uuid;el;Equals;new;El;ctx;el;length,2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.2369127944111824e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;8.731149137020111e-11,5,5,"[-5.840793132781982, -5.668738842010498, -6.25804328918457, -5.329639911651611, -5.446530342102051, -0.01758449338376522]",0.9825692176818848
3,"['    @Test\n    public void test_base64(){\n        Context ctx = Lang.context();\n        \n        El el = new El(""base64(\'ä¸\xadæ\x96\x87,è\x8b±æ\x96\x87abc,ç\x81«æ\x98\x9fæ\x96\x87((%&(*\')"");\n        assertEquals(Base64.encodeToString(""ä¸\xadæ\x96\x87,è\x8b±æ\x96\x87abc,ç\x81«æ\x98\x9fæ\x96\x87((%&(*"".getBytes(Encoding.CHARSET_UTF8), false), el.eval(ctx));\n        \n        String str = Base64.encodeToString(""EEEä¸\xadæ\x96\x87"".getBytes(Encoding.CHARSET_UTF8), false);\n        el = new El(""base64(\'decode\', \\\'"" + str + ""\\\')"");\n        assertEquals(""EEEä¸\xadæ\x96\x87"", el.eval(ctx));\n    }\n']",ÂŃÃ¦;ÂŃÃ¦;Lang;EEEÃ¤;Base;Ã¦;eval;EEEÃ¤;tx;Equals,6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.848750591278076, -5.686590671539307, -6.293175220489502, -5.32911491394043, -5.4786601066589355, -0.017295489087700844]",0.9828532338142395
3,"['    @Test\n    public void test_urlencode() throws UnsupportedEncodingException {\n        String re = El.eval(""urlencode(\'ä¸\xadæ\x96\x87\')"").toString();\n        assertEquals(URLEncoder.encode(""ä¸\xadæ\x96\x87"", Encoding.UTF8), re);\n        \n        re = El.eval(""urlencode(\'ä¸\xadæ\x96\x87\', \'gbk\')"").toString();\n        assertEquals(URLEncoder.encode(""ä¸\xadæ\x96\x87"", Encoding.GBK), re);\n        \n        re = El.eval(""urlencode(\'ä¸\xadæ\x96\x87\', \'gb2312\')"").toString();\n        assertEquals(URLEncoder.encode(""ä¸\xadæ\x96\x87"", Encoding.GB2312), re);\n    }\n']",Unsupported;Encoding;GB;ÂŃÃ¦;URLEncoder;Equals;Equals;URLEncoder;UTF;re,1.3387762010097504e-09;6.693881005048752e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.844700336456299, -5.693896770477295, -6.285674571990967, -5.3264594078063965, -5.465101718902588, -0.017367660999298096]",0.9827824234962463
3,"['    @Test\n    public void test_map_get() {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(""wendal"", ""http://wendal.net"");\n        List<String> list = new ArrayList<String>();\n        list.add(""abc"");\n        assertEquals(""http://wendal.net"", El.eval(Lang.context().set(""ctx"", map), ""ctx[\'wendal\']""));\n        assertEquals(""abc"", El.eval(Lang.context().set(""list"", list), ""list[0]""));\n    }\n']",endal;map;ang;ang;Equals;net;context;set;Object;context,1.0477378964424133e-09;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.827818393707275, -5.6779069900512695, -6.254873752593994, -5.322128772735596, -5.4332756996154785, -0.01769295148551464]",0.9824626445770264
3,"['    @Test\n    public void test_el() {\n        El el = new El(""\'hi,\'+name"");\n        Context ctx = Lang.context();\n        ctx.set(""name"", ""wendal"");\n        assertEquals(""hi,wendal"", el.eval(ctx));\n    }\n']",Lang;endal;ctx;eval;el;el;new;tx;el;name,2.3283064365386963e-09;1.9208528101444244e-09;1.1641532182693481e-09;9.313225746154785e-10;8.440110832452774e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;5.820766091346741e-11,5,5,"[-5.895859241485596, -5.786284446716309, -6.3640522956848145, -5.445308208465576, -5.461549758911133, -0.01623704470694065]",0.9838939309120178
3,"['    @Test\n    public void test_el2() throws Exception {\n        El el = new El(""sayhi(name)"");\n        Context ctx = Lang.context();\n        ctx.set(""name"", ""wendal"");\n        ctx.set(""sayhi"", getClass().getMethod(""sayhi"", String.class));\n        assertEquals(""hi,wendal"", el.eval(ctx));\n    }\n']",Method;new;set;set;get;tx;Equals;Exception;context;Class,5.820766091346741e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.850903511047363, -5.724574089050293, -6.311978340148926, -5.398743629455566, -5.462998390197754, -0.016860945150256157]",0.9832804203033447
3,"['    @Test(timeout=5000, expected=Exception.class)\n    public void test_el_issue1185() {\n        Context context = Lang.context();\n        El.eval(context, ""a.b)*0.30"");\n    }\n']",el;issue;timeout;expected;Exception;Lang;eval;class;Context;context,1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;0.0;-2.0372681319713593e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.895293235778809, -5.812914848327637, -6.383086204528809, -5.49038553237915, -5.463119029998779, -0.015923598781228065]",0.98420250415802
3,"['    @Test\n    public void test_issue_1307() {\n        //assertTrue((Boolean)El.eval(""0 == 0""));\n        assertTrue((Boolean)El.eval(""0 == 0.0""));\n    }\n']",eval;El;eval;Boolean;True;Boolean;True;El;issue,1.4551915228366852e-09;6.402842700481415e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;8.731149137020111e-11;-1.1641532182693481e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.859312057495117, -5.714340686798096, -6.298711776733398, -5.414470195770264, -5.402853965759277, -0.017090780660510063]",0.9830544590950012
3,"['    @Test\n    public void test_issue_1229() {\n        Context ctx = Lang.context();\n        ctx.set(""obj"", new NutMap(""pet"", null).setv(""girls"", new ArrayList<String>()));\n        El.eval(ctx, ""obj.pet"");\n        El.eval(ctx, ""!!(obj.pet)"");\n        assertTrue((Boolean)El.eval(ctx, ""!!(obj.pet.name) == null""));\n        assertTrue((Boolean)El.eval(ctx, ""!(!(!!(obj.pet.name) == null))""));\n        assertEquals(""wendal"", El.eval(ctx, ""!!(obj.pet.name) ||| \'wendal\'""));\n        assertEquals(""dog"", El.eval(ctx, ""!!(obj.girls) ||| \'dog\'""));\n    }\n']",obj;Map;issue;obj;pet;pet;obj;pet;El;dog,4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.793032646179199, -5.661122798919678, -6.22522497177124, -5.289478778839111, -5.432401180267334, -0.01808580756187439]",0.9820767641067505
3,"['    @Test\n    public void test_issue_1475_1476() {\n        \n        Context context = Lang.context();\n        context.set(""Math"", Math.class);\n        \n        \n        //Queue<Object> rpn = new ShuntingYard().parseToRPN(""Math.max(10, 0-11)"");\n        //System.out.println(rpn);\n        \n//        Queue<Object> rpn = new ShuntingYard().parseToRPN(""Math.max(0,-10)"");\n//        System.out.println(rpn);\n        Object max = El.eval(context, ""Math.max(0,-11)"");\n        assertEquals(0, max);\n        \n        \n        assertEquals(0, El.eval(context, ""Math.max(-1,0)""));\n        assertEquals(0, El.eval(context, ""Math.max(0,-1)""));\n        assertEquals(0, El.eval(context, ""Math.max(-0,-1)""));\n        \n\n        assertEquals(0, El.eval(context, ""Math.max(-1,Math.max(-1,Math.max(-1,Math.max(-1,0))))""));\n        assertEquals(0, El.eval(context, ""Math.max(Math.max(Math.max(Math.max(0,-1),-1),-1),-1)""));\n        assertEquals(0, El.eval(context, ""Math.max(-Math.max(-Math.max(-Math.max(-0,-1),-1),-1),-1)""));\n    }\n']",Queue;Shunting;Math;Math;Math;Context;Queue;System;Equals;context,9.604264050722122e-10;3.128661774098873e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.5279510989785194e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.803855895996094, -5.628421783447266, -6.209409713745117, -5.232875823974609, -5.45229959487915, -0.01841367408633232]",0.9817548394203186
3,"['    @Test\r\n    public void test_normal_debug() {\r\n        Logs.setAdapter(new Log4jLogAdapter());\r\n        Log log4nut = Logs.getLog(Dao.class);\r\n        assertTrue(log4nut.getClass().getName().contains(Log4jLogAdapter.class.getName()));\r\n        Logger log4j = LogManager.getLogger(Dao.class);\r\n\r\n        assertEquals(log4nut.isInfoEnabled(), log4j.isInfoEnabled());\r\n        assertEquals(log4nut.isDebugEnabled(), log4j.isDebugEnabled());\r\n        assertEquals(log4nut.isTraceEnabled(), log4j.isTraceEnabled());\r\n    }\r\n']",Log;new;Trace;set;Logger;Logger;Log;Adapter;nut;class,5.238689482212067e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.831525802612305, -5.688656806945801, -6.28675651550293, -5.347670078277588, -5.470612049102783, -0.017295019701123238]",0.9828535914421082
3,['    @Test\r\n    public void testGetLogger() {\r\n        LogAdapter logAdapter = new SystemLogAdapter();\r\n        assertNotNull(logAdapter.getLogger(Log.class.getName()));\r\n    }\r\n'],Log;Logger;Adapter;log;Log;Adapter;Null;get;get;Log,6.984919309616089e-10;5.238689482212067e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.8580756187438965, -5.694846153259277, -6.3049421310424805, -5.431748390197754, -5.418729305267334, -0.0169991347938776]",0.9831445217132568
3,['    @Test\r\n    public void testCanWork() {\r\n        assertTrue(new SystemLogAdapter().canWork());\r\n    }\r\n'],Log;Work;Can;True;Adapter;System;Work;can;new,1.6298145055770874e-09;9.313225746154785e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;0.0;0.0;-5.529727786779404e-10,5,5,"[-5.8840436935424805, -5.709851264953613, -6.336823463439941, -5.475104331970215, -5.417314052581787, -0.0166330523788929]",0.9835045337677002
3,"['    @Test\r\n    public void test_upload() throws Throwable {\r\n        Request req = Request.create(getBaseURL()+""/upload/image"",METHOD.POST);\r\n        File f = File.createTempFile(""nutz"", ""data"");\r\n        FileWriter fw = new FileWriter(f);\r\n        fw.write(""abc"");\r\n        fw.flush();\r\n        fw.close();\r\n        req.getParams().put(""file"", f);\r\n        FilePostSender sender = new FilePostSender(req);\r\n        Response resp = sender.send();\r\n        assertEquals(""image&3"", resp.getContent());\r\n    }\r\n']",POST;abc;URL;Writer;write;req;data;Writer;req;resp,6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.846449375152588, -5.712712287902832, -6.32835578918457, -5.386552333831787, -5.474231719970703, -0.01689189113676548]",0.9832499623298645
3,"['    @Test\n    public void test_issue_543() {\n        get(""/adaptor/github/issue/543?d=20120924"");\n        assertEquals(200, resp.getStatus());\n\n        long ms = Times.ams(""2012-09-24"", TimeZone.getTimeZone(""Asia/Shanghai""));\n        long rems = Long.parseLong(resp.getContent());\n        assertEquals(ms, rems);\n    }\n']",rem;github;ms;Time;Shanghai;resp;get;Long;rem;Times,1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10,5,5,"[-5.871103763580322, -5.72578763961792, -6.347613334655762, -5.4765472412109375, -5.4673075675964355, -0.016371097415685654]",0.9837622046470642
3,"['    @Test\n    public void test_err_param() {\n        get(""/adaptor/err/param?id=ABC"");\n        assertEquals(200, resp.getStatus());\n\n        get(""/adaptor/err/param/ABC"");\n        assertEquals(200, resp.getStatus());\n    }\n']",param;adaptor;ABC;err;err;param;Status;get;resp;get,1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;1.1641532182693481e-10;0.0;0.0;0.0,5,5,"[-5.9110517501831055, -5.815613746643066, -6.389627456665039, -5.445966720581055, -5.473117351531982, -0.01600818708539009]",0.9841193556785583
3,"['    @Test\n    public void test_err_param_anywhere() {\n        get(""/adaptor/err/param/anywhere?id=ABC"");\n        assertEquals(200, resp.getStatus());\n\n        get(""/adaptor/err/param/anywhere/ABC"");\n        assertEquals(200, resp.getStatus());\n    }\n']",err;err;resp;ABC;Equals;anywhere;get;anywhere;resp;ABC,1.280568540096283e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.930708885192871, -5.848672389984131, -6.434144020080566, -5.475705146789551, -5.480693340301514, -0.015621085651218891]",0.9845001697540283
3,"['    @Test\n    public void test_err_param_with_pathargs() {\n        get(""/adaptor/err/param/pathargs/a?id=ABC"");\n        assertEquals(200, resp.getStatus());\n\n        get(""/adaptor/err/param/pathargs/a/ABC"");\n        assertEquals(200, resp.getStatus());\n    }\n']",param;id;ABC;get;err;Status;ABC;get;err;pathargs,3.259629011154175e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.926080226898193, -5.851406574249268, -6.427439212799072, -5.456686496734619, -5.489826679229736, -0.01568000018596649]",0.984442412853241
3,"['    @Test\n    public void test_multi_err_ctxs() {\n        get(""/adaptor/multi/err/ctxs/a?id=ABC"");\n        assertEquals(200, resp.getStatus());\n\n        get(""/adaptor/multi/err/ctxs/a/ABC"");\n        assertEquals(200, resp.getStatus());\n    }\n']",adaptor;multi;ctxs;ctxs;multi;resp;Status;err;id;get,2.6775524020195007e-09;2.3283064365386963e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.932359218597412, -5.847550868988037, -6.43138313293457, -5.4709553718566895, -5.483659267425537, -0.015632234513759613]",0.9844893217086792
3,"['    @Test\n    public void test_multi_err_ctxs2() {\n        get(""/adaptor/multi/err/ctxs2/a/b?id=ABC"");\n        assertEquals(200, resp.getStatus());\n\n        get(""/adaptor/multi/err/ctxs2/a/b/ABC"");\n        assertEquals(200, resp.getStatus());\n    }\n']",ctxs;multi;err;get;get;ABC;Status;Equals;resp;ctxs,2.0372681319713593e-09;1.1641532182693481e-09;1.1641532182693481e-09;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-1.1641532182693481e-10,5,5,"[-5.935522556304932, -5.8419623374938965, -6.438764572143555, -5.476963043212891, -5.492000102996826, -0.015567567199468613]",0.9845529794692993
3,"['    @Test\n    public void test_json_map_type() {\n        resp = post(""/adaptor/json/type"", ""{\'abc\': 123456}"");\n        if (resp.getStatus() != 200) {\n            fail();\n        }\n    }\n']",json;resp;Status;post;type;type;resp;get;abc;fail,1.5133991837501526e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;-8.731149137020111e-11,5,5,"[-5.9275617599487305, -5.825916290283203, -6.4330644607543945, -5.45387601852417, -5.4869585037231445, -0.01576625183224678]",0.9843572974205017
3,"['    @Test\n    public void test_inputstream_as_string() {\n        resp = post(""/adaptor/ins"", ""I am abc"");\n        if (resp.getStatus() != 200) {\n            fail();\n        }\n        assertEquals(""I am abc"", resp.getContent());\n    }\n']",as;post;resp;resp;Content;get;fail;Equals;get;if,1.1641532182693481e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;2.9103830456733704e-11;1.4551915228366852e-11;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.91434383392334, -5.789854049682617, -6.410995960235596, -5.4726057052612305, -5.481997489929199, -0.015889102593064308]",0.984236478805542
3,"['    @Test\n    public void test_reader_as_string() {\n        resp = post(""/adaptor/reader"", ""I am abc"");\n        if (resp.getStatus() != 200) {\n            fail();\n        }\n        assertEquals(""I am abc"", resp.getContent());\n    }\n']",resp;reader;reader;ab;Status;string;get;if;fail;Content,1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;-1.4551915228366852e-11;-5.820766091346741e-11,5,5,"[-5.904378414154053, -5.775996208190918, -6.393421173095703, -5.463340759277344, -5.470073699951172, -0.01608009822666645]",0.98404860496521
3,"['    @Test\n    public void test_default_value() {\n    \tresp = get(""/adaptor/default_value?abc=123"");\n    \tassertEquals(200, resp.getStatus());\n    \tassertEquals(""123"", resp.getContent());\n    \t\n\n    \tresp = get(""/adaptor/default_value"");\n    \tassertEquals(200, resp.getStatus());\n    \tassertEquals(""123456"", resp.getContent());\n    }\n']",adaptor;get;adaptor;resp;Equals;Content;get;Status;get;Equals,1.280568540096283e-09;1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;4.3655745685100555e-11,5,5,"[-5.86731481552124, -5.7787981033325195, -6.347340106964111, -5.399010181427002, -5.450286865234375, -0.01662789285182953]",0.9835096001625061
3,"['    @Test\n    public void test_json_err_ctx() {\n        resp = post(""/adaptor/err_ctx"", ""{}"");\n        assertEquals(200, resp.getStatus());\n        assertEquals(""true"", resp.getContent());\n        \n        resp = post(""/adaptor/err_ctx"", ""{1234,3445}"");\n        assertEquals(200, resp.getStatus());\n        assertEquals(""false"", resp.getContent());\n    }\n']",adaptor;ctx;resp;err;post;json;false;Content;resp;true,2.561137080192566e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.855352878570557, -5.7298784255981445, -6.314950466156006, -5.379591941833496, -5.460299491882324, -0.01692553050816059]",0.9832170009613037
3,"['    @Test\n    public void test_sql_date() {\n    \tresp = post(""/adaptor/sqldate"", ""checkDate=2016-01-29"");\n        assertEquals(200, resp.getStatus());\n        assertEquals(""2016-01-29"", resp.getContent());\n    }\n']",resp;sql;adaptor;resp;get;Status;Equals;resp;post;Content,1.1641532182693481e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;2.0372681319713593e-10;1.7462298274040222e-10;5.820766091346741e-11;2.9103830456733704e-11;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.883762359619141, -5.762312412261963, -6.360591411590576, -5.493754863739014, -5.462094783782959, -0.016143208369612694]",0.983986496925354
3,"['    @Test\n    public void test_array_without_param() {\n        assertEquals(200, get(""/adaptor/param_without_param"").getStatus());\n        assertEquals(""[\\""1\\"", \\""2\\"", \\""4\\"", \\""3\\""]"".replaceAll("" "", """"), get(""/adaptor/param_without_param?uids=1,2,4,3"").getContent().replaceAll("" "", """"));\n    }\n']",without;get;ids;get;without;get;Status;array;All;param,2.0954757928848267e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.920003414154053, -5.871551990509033, -6.457580089569092, -5.4450297355651855, -5.490339756011963, -0.01563798449933529]",0.984483540058136
3,"['    @Test\n    public void test_object_without_param() {\n        assertEquals(200, get(""/adaptor/object_without_param"").getStatus());\n        assertEquals(""{\\""name\\"": \\""object\\""}"".replaceAll("" "", """"), get(""/adaptor/object_without_param?name=object"").getContent().replaceAll("" "", """"));\n    }\n']",Content;adaptor;get;without;replace;get;object;object;All;without,1.862645149230957e-09;1.862645149230957e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.900334358215332, -5.830394268035889, -6.423165321350098, -5.463046550750732, -5.467148780822754, -0.0158883985131979]",0.9842371344566345
3,"['    @Test\n    public void test_path_args_and_object_without_param() {\n        assertEquals(200, get(""/adaptor/path_args_and_object_without_param/1"").getStatus());\n        assertEquals(""{\\""name\\"": \\""1\\""}"".replaceAll("" "", """"), get(""/adaptor/path_args_and_object_without_param/1?name=object"").getContent().replaceAll("" "", """"));\n    }\n']",path;args;Status;param;without;path;get;param;get;param,3.259629011154175e-09;2.0954757928848267e-09;1.57160684466362e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.914912223815918, -5.891301155090332, -6.461545944213867, -5.498014450073242, -5.466385841369629, -0.015464982017874718]",0.9846540093421936
3,"['    @Test\n    public void issue_1069() {\n        resp = post(""/adaptor/issue1069"", """");\n        assertEquals(200, resp.getStatus());\n        assertEquals("""", resp.getContent());\n        \n\n        resp = post(""/adaptor/issue1069"", ""showAdd="");\n        assertEquals(200, resp.getStatus());\n        assertEquals("""", resp.getContent());\n    }\n']",resp;Equals;Equals;get;Add;post;resp;issue;issue;get,4.0745362639427185e-10;2.1100277081131935e-10;1.8189894035458565e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;7.275957614183426e-11,5,5,"[-5.847986221313477, -5.7323198318481445, -6.321218490600586, -5.3895745277404785, -5.453958511352539, -0.016908416524529457]",0.9832337498664856
3,"['    @Test\n    public void issue_1267() {\n        resp = post(""/adaptor/issue1267"", new NutMap(""time"", ""Thu May 25 2017 07:16:32 GMT+0800 (CST)""));\n        assertEquals(200, resp.getStatus());\n        System.out.println(resp.getContent());\n        //assertEquals(""1495667792000"", resp.getContent());\n    }\n']",Nut;adaptor;issue;May;GMT;resp;ST;post;time;System,3.725290298461914e-09;2.3283064365386963e-09;1.6880221664905548e-09;1.3969838619232178e-09;1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.892050266265869, -5.784298419952393, -6.3585615158081055, -5.46334171295166, -5.480332374572754, -0.016104968264698982]",0.9840240478515625
3,"['    @Test\n    public void issue_1277() {\n        resp = post(""/adaptor/issue1277"", new NutMap(""agex"", ""124""));\n        assertEquals(200, resp.getStatus());\n        String str = resp.getContent();\n        Issue1277 issue = Json.fromJson(Issue1277.class, str);\n        assertEquals(""abc"", issue.name);\n        assertEquals(123, issue.age);\n        //assertEquals(""1495667792000"", resp.getContent());\n    }\n']",Issue;adaptor;Status;issue;new;issue;str;issue;abc;class,1.3969838619232178e-09;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.7462298274040222e-10,5,5,"[-5.853466510772705, -5.738657474517822, -6.31268310546875, -5.392951965332031, -5.457675933837891, -0.01685543730854988]",0.9832858443260193
3,"['    @Test\n    public void issue_1310() {\n        resp = post(""/adaptor/issue1310"", new NutMap(""age"", ""123""));\n        assertEquals(200, resp.getStatus());\n        String str = resp.getContent();\n        Issue1277 issue = Json.fromJson(Issue1277.class, str);\n        assertEquals(123, issue.age);\n        //assertEquals(""1495667792000"", resp.getContent());\n    }\n']",Nut;post;adaptor;resp;new;str;Equals;resp;Status;Content,1.862645149230957e-09;1.1641532182693481e-09;6.402842700481415e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.128661774098873e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.860058784484863, -5.75748348236084, -6.321824550628662, -5.402708530426025, -5.453524112701416, -0.01673153042793274]",0.9834076762199402
3,"['    @Test\n    public void re_view_with_NutMap() {\n        resp = post(""/adaptor/issue13xx"", new NutMap(""age"", ""123""));\n        assertEquals(200, resp.getStatus());\n        String str = resp.getContent();\n        assertEquals(Json.toJson(new NutMap(""id"", 1), JsonFormat.compact()), str);\n    }\n']",Map;adaptor;Nut;post;get;Equals;Status;son;id;new,2.3283064365386963e-09;2.2118911147117615e-09;1.862645149230957e-09;1.2223608791828156e-09;9.313225746154785e-10;5.820766091346741e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.866201877593994, -5.772767543792725, -6.353431224822998, -5.4230427742004395, -5.45266056060791, -0.016519788652658463]",0.9836159348487854
3,"['    @Test\n    public void test_localdt() {\n        resp = post(""/adaptor/jdk8/localdt"", new NutMap(""date"", ""2018-02-20 21:11:51""));\n        assertEquals(200, resp.getStatus());\n        String str = resp.getContent();\n        assertEquals(""2018-02-20T21:11:51"", str);\n    }\n']",new;dk;resp;locald;str;adaptor;Equals;resp;str;get,2.2118911147117615e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.1641532182693481e-10,5,5,"[-5.896365642547607, -5.821190357208252, -6.3786702156066895, -5.455900192260742, -5.46212911605835, -0.01605464331805706]",0.9840735197067261
3,"['    @Test\r\n    public void test_simple() {\r\n        get(""/views/for?to=base"");\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(getContextPath(), resp.getContent());\r\n        \r\n        get(""/views/for2?to=base"");\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(getContextPath(), resp.getContent());\r\n\r\n        get(""/views/for3?to=base"");\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(getContextPath(), resp.getContent());\r\n    }\r\n']",base;base;views;Context;resp;get;Equals;get;get;get,1.3969838619232178e-09;1.1059455573558807e-09;6.984919309616089e-10;4.94765117764473e-10;4.3655745685100555e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.5279510989785194e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.838507175445557, -5.736255645751953, -6.31604528427124, -5.342875957489014, -5.478918552398682, -0.017047535628080368]",0.9830969572067261
3,"['    @Test\r\n    public void test_raw() {\r\n        get(""/views/raw"");\r\n        assertEquals(""ABC"", resp.getContent());\r\n\r\n        get(""/views/raw2"");\r\n        assertEquals(3, resp.getContent().length());\r\n\r\n        get(""/views/raw3"");\r\n        assertEquals(3, resp.getContent().length());\r\n\r\n        get(""/views/raw4"");\r\n        assertEquals("""", resp.getContent());\r\n\r\n        get(""/views/raw5"");\r\n        assertTrue(resp.getHeader().get(""Content-Type"").startsWith(""application/json""));\r\n    }\r\n']",views;application;Content;raw;Content;views;get;views;get;True,4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.848392009735107, -5.742513656616211, -6.312145233154297, -5.328150749206543, -5.472996711730957, -0.017102381214499474]",0.9830428957939148
3,"['    // @Test\r\n    public void test_raw2() throws Throwable {\r\n        File src = new File(""H://main_qt"");\r\n        File dst = new File(""H://cache.tmp"");\r\n        RangeRange rangeRange = new RangeRange(0, src.length());\r\n        // RawView.writeFileRange(src, new FileOutputStream(dst), rangeRange);\r\n        //\r\n        // System.out.println(Lang.digest(""md5"", src));\r\n        // System.out.println(Lang.digest(""md5"", dst));\r\n\r\n        List<RangeRange> rs = new ArrayList<RawView.RangeRange>();\r\n        RawView.parseRange(""bytes=0-,-1000000,22222-22222222222"", rs, Long.MAX_VALUE);\r\n        System.out.println(Json.toJson(rs));\r\n\r\n        src = new File(""H://raw"");\r\n        FileOutputStream out = new FileOutputStream(src);\r\n        for (int i = 0; i < 255; i++) {\r\n            out.write(i);\r\n        }\r\n        out.flush();\r\n        out.close();\r\n\r\n        rs = new ArrayList<RawView.RangeRange>();\r\n        RawView.parseRange(""bytes=0-127"", rs, 256);\r\n        rangeRange = rs.get(0);\r\n        RawView.writeFileRange(src, new FileOutputStream(dst), rangeRange);\r\n        System.out.println(dst.length());\r\n        FileInputStream in = new FileInputStream(dst);\r\n        for (int i = 0; i < 128; i++) {\r\n            if (in.read() != i) {\r\n                System.out.println(""ERR"");\r\n            }\r\n        }\r\n        Streams.safeClose(in);\r\n\r\n        rs = new ArrayList<RawView.RangeRange>();\r\n        RawView.parseRange(""bytes=128-"", rs, 256);\r\n        rangeRange = rs.get(0);\r\n        RawView.writeFileRange(src, new FileOutputStream(dst), rangeRange);\r\n        in = new FileInputStream(dst);\r\n        for (int i = 0; i < 128; i++) {\r\n            if (in.read() != (i + 128)) {\r\n                System.out.println(""ERR"");\r\n            }\r\n        }\r\n        Streams.safeClose(in);\r\n\r\n        rs = new ArrayList<RawView.RangeRange>();\r\n        RawView.parseRange(""bytes=-64"", rs, 256);\r\n        rangeRange = rs.get(0);\r\n        RawView.writeFileRange(src, new FileOutputStream(dst), rangeRange);\r\n        in = new FileInputStream(dst);\r\n        for (int i = 0; i < 64; i++) {\r\n            if (in.read() != (i + 128 + 64)) {\r\n                System.out.println(""ERR"");\r\n            }\r\n        }\r\n        Streams.safeClose(in);\r\n\r\n        System.out.println(""---------------------------END"");\r\n    }\r\n']",raw;raw;digest;File;range;File;cache;main;System;VALUE,5.820766091346741e-10;4.3655745685100555e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.3096723705530167e-10,5,5,"[-5.819627285003662, -5.654289245605469, -6.266274452209473, -5.313101768493652, -5.505383014678955, -0.01751444675028324]",0.9826380610466003
3,"['    @Test\n    public void test_view_resp() {\n        get(""/views/resp/to/1"");\n        assertEquals(""hi"", resp.getContent());\n        get(""/views/resp/to/2"");\n        assertEquals(200, resp.getStatus());\n        assertEquals(""{\\""name\\"":\\""wendal\\""}"", resp.getContent());\n    }\n']",endal;resp;Content;resp;Equals;Content;to;get;resp;get,9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;2.764863893389702e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.882772922515869, -5.7900848388671875, -6.388612747192383, -5.437257766723633, -5.473863124847412, -0.016202207654714584]",0.9839282035827637
3,"['    @Test\r\n    public void test_simple() {\r\n        get(""/views/red?to=base"");\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(getContextPath(), resp.getContent());\r\n        \r\n        get(""/views/red2?to=base"");\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(getContextPath(), resp.getContent());\r\n\r\n        get(""/views/red3?to=base"");\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(getContextPath(), resp.getContent());\r\n    }\r\n']",base;base;views;to;Equals;Path;Status;resp;views;Context,1.862645149230957e-09;9.313225746154785e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.8386664390563965, -5.728248119354248, -6.315119743347168, -5.344616413116455, -5.482294082641602, -0.017052341252565384]",0.9830922484397888
3,"['    @Test\r\n    public void test_simple(){\r\n        get(""/views/jsp"");\r\n        assertEquals(""null"", resp.getContent());\r\n        get(""/views/jsp2"");\r\n        assertEquals(""null"", resp.getContent());\r\n        get(""/views/jsp3"");\r\n        assertEquals(""null"", resp.getContent());\r\n        get(""/views/jsp4"");\r\n        assertEquals(""null"", resp.getContent());\r\n    }\r\n']",views;Equals;sp;sp;null;sp;get;null;get;views,1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.860470294952393, -5.739862442016602, -6.33794641494751, -5.370608806610107, -5.486598014831543, -0.01676599681377411]",0.983373761177063
3,"['    @Test\n    public void test_issue_1212() {\n        get(""/mapping/issue1212/sayhi"");\n        assertEquals(200, resp.getStatus());\n    }\n']",sayhi;resp;Equals;get;issue;Status;get;issue;apping,1.280568540096283e-09;1.0477378964424133e-09;2.9103830456733704e-10;0.0;-1.1641532182693481e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-1.979060471057892e-09;-2.0954757928848267e-09,5,5,"[-5.933218955993652, -5.832529067993164, -6.427620887756348, -5.513661861419678, -5.4581122398376465, -0.015610991977155209]",0.9845102429389954
3,"['    @Test\r\n    public void test_json_adaptor() {\r\n        post(""/adaptor/json/pet/array"", ""{pets:[{name:\'zzh\'},{name:\'wendal\'}]}"");\r\n        assertEquals(""pets(2) array"", resp.getContent());\r\n\r\n        post(""/adaptor/json/pet/list"", ""{pets:[{name:\'zzh\'},{name:\'wendal\'}]}"");\r\n        assertEquals(""pets(2) list"", resp.getContent());\r\n    }\r\n']",endal;post;list;zz;Content;pet;ets;adaptor;post;ets,1.280568540096283e-09;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.87606143951416, -5.766810417175293, -6.366961479187012, -5.392054557800293, -5.465321063995361, -0.016573021188378334]",0.9835635423660278
3,"['    @Test\r\n    public void test_base() {\r\n        get(""/base.jsp"");\r\n        assertNotNull(resp);\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(getContextPath(), resp.getContent());\r\n    }\r\n']",Path;get;Context;Content;get;get;resp;Equals;Status;Not,1.6298145055770874e-09;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;-8.731149137020111e-11;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.893808364868164, -5.766567230224609, -6.363189697265625, -5.43527889251709, -5.44639253616333, -0.01641671545803547]",0.9837173223495483
3,"['    @Test\r\n    public void test_pathargs() {\r\n        get(""/common/pathArgs/Wendal"");\r\n        assertEquals(""Wendal"", resp.getContent());\r\n\r\n        get(""/common/pathArgs2/Wendal/12345/123456789/123/123.00/200.9/true/n"");\r\n        assertEquals(""Wendal12345123456789123123200truen"", resp.getContent());\r\n\r\n        get(""/common/pathArgs3/public/blog/200"");\r\n        assertEquals(""public&200"", resp.getContent());\r\n        get(""/common/pathArgs3/puZ"");\r\n        assertEquals(""puZ&Z"", resp.getContent());\r\n\r\n        get(""/common/pathArgs4/nutz?name=wendal"");\r\n        assertEquals(""nutz&wendal"", resp.getContent());\r\n\r\n        get(""/common/pathArgs5/nutz?user.name=wendal&user2.name=zozoh"");\r\n        assertEquals(""nutz&wendal&zozoh"", resp.getContent());\r\n    }\r\n']",endal;path;nut;pathargs;Equals;resp;pu;Equals;common;get,6.693881005048752e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.8395233154296875, -5.7189412117004395, -6.306395053863525, -5.310847759246826, -5.493431568145752, -0.017216868698596954]",0.9829304814338684
3,"['    @Test\r\n    public void test_param() {\r\n        get(""/common/param?id="" + Long.MAX_VALUE);\r\n        assertEquals("""" + Long.MAX_VALUE, resp.getContent());\r\n    }\r\n']",param;id;get;Equals;param;Content;resp;get;MAX;Long,1.862645149230957e-09;1.280568540096283e-09;1.1641532182693481e-09;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-5.913916110992432, -5.829068183898926, -6.40018367767334, -5.491912364959717, -5.43785285949707, -0.01589825563132763]",0.9842275977134705
3,"['    @Test\r\n    public void test_req_param() {\r\n        get(""/common/path?key=base"");\r\n        assertEquals(getContextPath(), resp.getContent());\r\n    }\r\n']",param;get;base;Equals;Context;resp;req;common;path;Path,2.444721758365631e-09;9.89530235528946e-10;9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.9320244789123535, -5.877417087554932, -6.43043851852417, -5.521643161773682, -5.445626735687256, -0.01550066564232111]",0.9846187233924866
3,"['    @Test\r\n    public void test_req_param2() {\r\n        get(""/common/path2?key=base"");\r\n        assertEquals(""base"", resp.getContent());\r\n        get(""/common/path2?key=T"");\r\n        assertEquals(getContextPath(), resp.getContent());\r\n    }\r\n']",param;resp;Context;get;resp;Path;base;common;get;get,1.7462298274040222e-09;1.3969838619232178e-09;9.313225746154785e-10;9.022187441587448e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.764863893389702e-10;1.4551915228366852e-10,5,5,"[-5.899566173553467, -5.844707489013672, -6.402450084686279, -5.459919452667236, -5.480518817901611, -0.015839120373129845]",0.9842856526374817
3,"['    @Test\r\n    public void test_servlet_obj() {\r\n        get(""/common/servlet_obj"");\r\n        assertEquals(200, resp.getStatus());\r\n    }\r\n']",servlet;common;Status;resp;obj;servlet;obj;get;get;Equals,3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-2.9103830456733704e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-4.0745362639427185e-10;-4.94765117764473e-10,5,5,"[-5.910271644592285, -5.804759502410889, -6.392178535461426, -5.487247943878174, -5.437803268432617, -0.01601499132812023]",0.984112560749054
3,"['    @Test\r\n    public void test_aop_trans_1() {\r\n        String name = """"+System.currentTimeMillis();\r\n        get(""/aop/test1?name=""+name);\r\n        assertEquals(200, resp.getStatus());\r\n        get(""/aop/test1/result?name=""+name);\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(""0"", resp.getContent());\r\n    }\r\n']",result;Mill;op;Equals;get;Content;Time;name;resp;current,4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10;8.731149137020111e-11,5,5,"[-5.851212024688721, -5.743714332580566, -6.323901176452637, -5.393621921539307, -5.461489200592041, -0.016805266961455345]",0.9833351373672485
3,"['    @Test\r\n    public void test_http_method_override() {\r\n        Response resp = post(""/common/httpmethods?_method=DELETE"", new NutMap(""_method"", ""DELETE""));\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(""DELETE"", resp.getContent());\r\n    }\r\n']",Nut;new;http;resp;Equals;Response;Content;override;method;Equals,5.587935447692871e-09;3.4924596548080444e-09;1.979060471057892e-09;1.6298145055770874e-09;9.604264050722122e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;2.9103830456733704e-10,5,5,"[-5.928006172180176, -5.901477336883545, -6.419676303863525, -5.48729133605957, -5.42234992980957, -0.015706755220890045]",0.9844158291816711
3,"['    @Test\r\n    public void test_issue_1220() throws IOException {\r\n        File f = File.createTempFile(""abc_"", "".json"");\r\n        org.nutz.lang.Files.write(f, ""abc"");\r\n        File f2 = File.createTempFile(""def_"", "".json"");\r\n        org.nutz.lang.Files.write(f2, ""def"");\r\n        upload(""/upload/issue1220"", new NutMap(""file"", new File[]{f, f2}));\r\n        assertEquals(200, resp.getStatus());\r\n        String cnt = resp.getContent();\r\n        System.out.println(cnt);\r\n        assertEquals(""2,3,3"", cnt);\r\n    }\r\n']",issue;abc;nut;Files;Status;File;Equals;println;def;get,6.984919309616089e-10;6.984919309616089e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.8448662757873535, -5.704432487487793, -6.311040878295898, -5.375933647155762, -5.484333515167236, -0.016963036730885506]",0.983180046081543
3,"['    @Test\r\n    public void test_upload_empty_just_r_n() throws Exception {\r\n        MockHttpServletRequest req = Mock.servlet.request();\r\n        req.setPathInfo(""/nutz/junit/uploading"");\r\n        MultipartInputStream ins = Mock.servlet.insmulti(charset);\r\n        File f = Files.findFile(""org/nutz/mvc/upload/files/_r_n.txt"");\r\n        ins.append(""theF"", f);\r\n        req.setInputStream(ins);\r\n        req.init();\r\n\r\n        /*\r\n         * é»\x98è®¤ä¸\x8då¿½ç\x95¥ç©ºæ\x96\x87ä»¶\r\n         */\r\n        Uploading up = UploadUnit.TYPE.born();\r\n        Map<String, Object> map = up.parse(req, UploadingContext.create(tmps));\r\n        assertEquals(1, map.size());\r\n        TempFile tf = (TempFile) map.get(""theF"");\r\n\r\n        assertEquals(""_r_n.txt"", tf.getSubmittedFileName());\r\n        assertTrue(Streams.equals(Streams.fileIn(f), tf.getInputStream()));\r\n    }\r\n']",Http;Input;get;Stream;Servlet;tf;File;True;uploading;Ã§,1.0011717677116394e-08;6.28642737865448e-09;3.725290298461914e-09;3.259629011154175e-09;3.026798367500305e-09;2.444721758365631e-09;1.979060471057892e-09;1.862645149230957e-09;1.5425030142068863e-09;1.5133991837501526e-09,5,5,"[-5.834895133972168, -5.698198318481445, -6.30051326751709, -5.335495948791504, -5.498091697692871, -0.017169762402772903]",0.9829767942428589
3,"['    @Test(expected = UploadUnsupportedFileTypeException.class)\r\n    public void test_limit_file_content_type_fail() throws UploadException {\r\n        MockHttpServletRequest req = Mock.servlet.request();\r\n        req.setPathInfo(""/nutz/junit/uploading"");\r\n        File blue = Files.findFile(""org/nutz/mvc/upload/files/quick/blue.png"");\r\n\r\n        MultipartInputStream ins = Mock.servlet.insmulti(charset);\r\n        ins.append(""blue"", blue);\r\n        req.setInputStream(ins);\r\n        req.init();\r\n\r\n        /*\r\n         * æ\x96\x87ä»¶è¶\x85å¤§ï¼\x8cä¼\x9aé\x99\x90å\x88¶\r\n         */\r\n        Uploading up = UploadUnit.TYPE.born();\r\n        up.parse(req,\r\n                 UploadingContext.create(tmps)\r\n                                 .setContentTypeFilter(""^image/gif$""));\r\n    }\r\n']",charset;servlet;req;Ã¤;expected;Http;Â¶;limit;Mock;Multipart,9.022187441587448e-10;7.130438461899757e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.8562575355172157e-10,5,5,"[-5.853755950927734, -5.733177661895752, -6.3422651290893555, -5.378786087036133, -5.5220112800598145, -0.01661476120352745]",0.9835225939750671
3,"['    @Test(expected = UploadUnsupportedFileNameException.class)\r\n    public void test_limit_file_name_fail() throws UploadException {\r\n        MockHttpServletRequest req = Mock.servlet.request();\r\n        req.setPathInfo(""/nutz/junit/uploading"");\r\n        File blue = Files.findFile(""org/nutz/mvc/upload/files/quick/blue.png"");\r\n\r\n        MultipartInputStream ins = Mock.servlet.insmulti(charset);\r\n        ins.append(""blue"", blue);\r\n        req.setInputStream(ins);\r\n        req.init();\r\n\r\n        /*\r\n         * æ\x96\x87ä»¶è¶\x85å¤§ï¼\x8cä¼\x9aé\x99\x90å\x88¶\r\n         */\r\n        Uploading up = UploadUnit.TYPE.born();\r\n        up.parse(req,\r\n                 UploadingContext.create(tmps)\r\n                                 .setNameFilter(""^(.+[.])(gif|jpg)$""));\r\n    }\r\n']",Ã¥;Â¶;Input;born;Upload;ins;png;blue;req;Ã¤,4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.86134672164917, -5.727960109710693, -6.3461480140686035, -5.381364345550537, -5.52515983581543, -0.016578063368797302]",0.9835585951805115
3,"['    @Test\r\n    public void test_limit_file_size_ok() throws UploadException {\r\n        MockHttpServletRequest req = Mock.servlet.request();\r\n        req.setPathInfo(""/nutz/junit/uploading"");\r\n        File blue = Files.findFile(""org/nutz/mvc/upload/files/quick/blue.png"");\r\n\r\n        MultipartInputStream ins = Mock.servlet.insmulti(charset);\r\n        ins.append(""blue"", blue);\r\n        req.setInputStream(ins);\r\n        req.init();\r\n\r\n        /*\r\n         * æ\x96\x87ä»¶è¶\x85å¤§ï¼\x8cä¼\x9aé\x99\x90å\x88¶\r\n         */\r\n        Uploading up = UploadUnit.TYPE.born();\r\n        up.parse(req, UploadingContext.create(tmps)\r\n                                      .setBufferSize(1024)\r\n                                      .setMaxFileSize(19152));\r\n    }\r\n']",Â¶;Multipart;Mock;Ã¥;ok;servlet;uploading;servlet;blue;find,1.2223608791828156e-09;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.842067241668701, -5.6991472244262695, -6.298393249511719, -5.33323860168457, -5.495777130126953, -0.017169879749417305]",0.9829765558242798
3,"['    @Test(expected = UploadOutOfSizeException.class)\r\n    public void test_limit_file_size_fail() throws UploadException {\r\n        MockHttpServletRequest req = Mock.servlet.request();\r\n        req.setPathInfo(""/nutz/junit/uploading"");\r\n        File blue = Files.findFile(""org/nutz/mvc/upload/files/quick/blue.png"");\r\n\r\n        MultipartInputStream ins = Mock.servlet.insmulti(charset);\r\n        ins.append(""blue"", blue);\r\n        req.setInputStream(ins);\r\n        req.init();\r\n\r\n        /*\r\n         * æ\x96\x87ä»¶è¶\x85å¤§ï¼\x8cä¼\x9aé\x99\x90å\x88¶\r\n         */\r\n        Uploading up = UploadUnit.TYPE.born();\r\n        // å½\x93è®¾ç½®ä¸º170,pass\r\n        // è®¾ç½®ä¸º171,fail å\x8e\x9få\x9b\xa0æ\x9cªæ\x98\x8e\r\n        // zzh: FastUploading ç\x9a\x84é\x99\x90å\x88¶ä¸\x8dæ\x98¯ç\x89¹å\x88«ç²¾ç¡®\r\n        // å\x9b\xa0ä¸ºæ\x98¯æ\x8c\x89å\x9d\x97è¯»å\x8f\x96ç\x9a\x84, æ¯\x8fæ¬¡å¾ªç\x8e¯ï¼\x8cè¦\x81è¯»1-3ä¸ªå\x9d\x97ï¼\x8cæ\x89\x80ä»¥å°ºå¯¸ç\x9a\x84é\x99\x90å\x88¶å\x90\x8c ç¼\x93å\x86²å¤§å°\x8fï¼\x8cä¹\x9fä¼\x9aæ\x9c\x89å\x85³ç³»\r\n        // å¦\x82æ\x9e\x9cç¼\x93å\x86²æ\x98¯ 171, å\x8f¯è\x83½æ\xad£å¥½è¯»å®\x8c\r\n        up.parse(req, UploadingContext.create(tmps)\r\n                                      .setBufferSize(171)\r\n                                      .setMaxFileSize(18620));\r\n    }\r\n']",Mock;Â¯;Ã§;Ã¦;Â¶;Ã¦;Ã¥;org;Â§;Ã¥,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.8874664306640625, -5.67958927154541, -6.390108585357666, -5.435452938079834, -5.577174186706543, -0.01613910309970379]",0.9839904308319092
3,"['\t@Test\n\tpublic void contextLoads() {\n\t\t// The remote config was bad so there is no bootstrap\n\t\tassertThat(this.environment.getPropertySources().contains(""bootstrap"")).isFalse();\n\t}\n']",The;Property;remote;was;That;get;bad;False;this;context,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;0.0;-8.731149137020111e-11;-1.4551915228366852e-10;-2.3283064365386963e-10,5,5,"[-5.940168380737305, -5.858152389526367, -6.471673488616943, -5.544069766998291, -5.508738994598389, -0.015110197477042675]",0.9850035309791565
3,"['\t@Test\n\tpublic void contextLoads() {\n\t\tMap res = new TestRestTemplate().getForObject(\n\t\t\t\t""http://localhost:"" + this.port + BASE_PATH + ""/env/info.foo"", Map.class);\n\t\tassertThat(res).containsKey(""propertySources"");\n\t\tMap<String, Object> property = (Map<String, Object>) res.get(""property"");\n\t\tassertThat(property).containsEntry(""value"", ""bar"");\n\t}\n']",env;Load;PATH;Template;get;BASE;Map;value;res;port,3.725290298461914e-09;3.259629011154175e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.872577667236328, -5.876813888549805, -6.405835151672363, -5.472153663635254, -5.477967739105225, -0.015774935483932495]",0.9843488335609436
3,"['\t@Test\n\tpublic void contextLoads() {\n\t\tMap res = new TestRestTemplate().getForObject(\n\t\t\t\t""http://localhost:"" + this.port + BASE_PATH + ""/env/info.foo"", Map.class);\n\t\tassertThat(res).containsKey(""propertySources"");\n\t\tMap<String, Object> property = (Map<String, Object>) res.get(""property"");\n\t\tassertThat(property).containsEntry(""value"", ""bar"");\n\t}\n']",env;Load;PATH;Template;get;BASE;Map;value;res;port,3.725290298461914e-09;3.259629011154175e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.872577667236328, -5.876813888549805, -6.405835151672363, -5.472153663635254, -5.477967739105225, -0.015774935483932495]",0.9843488335609436
3,"['\t@Test\n\tpublic void contextFails() {\n\t\ttry {\n\t\t\tnew SpringApplicationBuilder().sources(Application.class).run(\n\t\t\t\t\t""--server.port=0"", ""--spring.cloud.config.enabled=true"",\n\t\t\t\t\t""--spring.cloud.config.fail-fast=true"",\n\t\t\t\t\t""--spring.cloud.config.uri=http://server-host-doesnt-exist:1234"");\n\t\t\tfail(""failFast option did not produce an exception"");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tassertThat(e.getMessage().contains(""fail fast""))\n\t\t\t\t\t.as(""Exception not caused by fail fast"").isTrue();\n\t\t}\n\t}\n']",exist;spring;Application;cloud;option;enabled;context;spring;fail;fail,2.7939677238464355e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.867870807647705, -5.760622501373291, -6.353105068206787, -5.441897392272949, -5.5025739669799805, -0.016258390620350838]",0.9838730692863464
3,"['\t@Test\n\tpublic void stateChangedWorks() {\n\t\tConfigClientWatch watch = new ConfigClientWatch(null);\n\t\tassertThat(watch.stateChanged(null, ""1"")).isTrue();\n\t\tassertThat(watch.stateChanged(""1"", ""2"")).isTrue();\n\t\tassertThat(watch.stateChanged(""1"", null)).isTrue();\n\t\tassertThat(watch.stateChanged(""1"", ""1"")).isFalse();\n\t\twatch.close();\n\t}\n']",Watch;state;Works;Client;Client;state;True;Changed;state;Changed,6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.850493431091309, -5.710018157958984, -6.288365840911865, -5.3800177574157715, -5.430263042449951, -0.01718546450138092]",0.9829614758491516
3,"['\t@Test\n\tpublic void overrideConfigServicePropertySourceLocatorWhenBeanIsProvided() {\n\t\tTestPropertyValues.of(""spring.cloud.config.enabled=true"").applyTo(this.context);\n\t\tthis.context.register(ConfigServicePropertySourceLocatorOverrideConfig.class);\n\t\tthis.context.register(ConfigServiceBootstrapConfiguration.class);\n\t\tthis.context.refresh();\n\n\t\tConfigServicePropertySourceLocator locator = this.context\n\t\t\t\t.getBean(ConfigServicePropertySourceLocator.class);\n\n\t\tField restTemplateField = ReflectionUtils\n\t\t\t\t.findField(ConfigServicePropertySourceLocator.class, ""restTemplate"");\n\t\trestTemplateField.setAccessible(true);\n\n\t\tRestTemplate restTemplate = (RestTemplate) ReflectionUtils\n\t\t\t\t.getField(restTemplateField, locator);\n\n\t\tassertThat(restTemplate).isNotNull();\n\t}\n']",When;Property;config;Utils;register;enabled;Locator;Config;Template;Property,2.561137080192566e-09;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.875957012176514, -5.790608882904053, -6.364497661590576, -5.407147407531738, -5.524775505065918, -0.016185319051146507]",0.9839449524879456
3,"['\t@Test\n\tpublic void sunnyDay() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tConfigClientAutoConfiguration.class);\n\t\tassertThat(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context,\n\t\t\t\tConfigClientProperties.class).length).isEqualTo(1);\n\t\tcontext.close();\n\t}\n']",Application;Ancestors;bean;Annotation;Utils;Client;Names;Config;Config;Factory,2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.57160684466362e-09;1.4551915228366852e-09;1.3387762010097504e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.887420177459717, -5.816068649291992, -6.357954502105713, -5.430943965911865, -5.469188213348389, -0.016210652887821198]",0.9839200377464294
3,"['\t@Test\n\tpublic void withParent() {\n\t\tConfigurableApplicationContext context = new SpringApplicationBuilder(\n\t\t\t\tConfigClientAutoConfiguration.class).child(Object.class)\n\t\t\t\t\t\t.web(WebApplicationType.NONE).run();\n\t\tassertThat(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context,\n\t\t\t\tConfigClientProperties.class).length).isEqualTo(1);\n\t\tcontext.close();\n\t}\n']",Web;Application;bean;Spring;new;Configurable;Names;For;Client;class,9.313225746154785e-09;7.450580596923828e-09;6.51925802230835e-09;3.725290298461914e-09;3.259629011154175e-09;2.6775524020195007e-09;2.444721758365631e-09;2.2118911147117615e-09;1.076841726899147e-09;9.313225746154785e-10,5,5,"[-5.90061092376709, -5.8709635734558105, -6.404894828796387, -5.491936683654785, -5.4478325843811035, -0.015760384500026703]",0.9843631386756897
3,"['\t@Test\n\tpublic void shouldFailWithExceptionGetConfigServerInstanceFromDiscoveryClient()\n\t\t\tthrows Exception {\n\t\tgivenDiscoveryClientReturnsNoInfo();\n\n\t\texpectNoInstancesOfConfigServerException();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"",\n\t\t\t\t""spring.cloud.config.fail-fast=true"");\n\t}\n']",iscovery;From;Client;Client;given;Exception;config;config;No;cloud,6.05359673500061e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.92431116104126, -5.840611934661865, -6.405500888824463, -5.489512920379639, -5.498969554901123, -0.015574726276099682]",0.9845460653305054
3,"['\t@Test\n\tpublic void shouldFailWithMessageGetConfigServerInstanceFromDiscoveryClient()\n\t\t\tthrows Exception {\n\t\tgivenDiscoveryClientReturnsNoInfo();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"",\n\t\t\t\t""spring.cloud.config.fail-fast=false"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\t\texpectConfigClientPropertiesHasDefaultConfiguration();\n\t\tverifyDiscoveryClientCalledOnce();\n\t}\n']",spring;iscovery;Client;Config;From;Returns;Server;cloud;should;Client,2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10,5,5,"[-5.8959574699401855, -5.776931285858154, -6.364999294281006, -5.435811519622803, -5.503721237182617, -0.01612807624042034]",0.9840011596679688
3,"['\t@Test\n\tpublic void shouldSucceedGetConfigServerInstanceFromDiscoveryClient()\n\t\t\tthrows Exception {\n\t\tgivenDiscoveryClientReturnsInfo();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"",\n\t\t\t\t""spring.cloud.config.fail-fast=true"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\t\texpectConfigClientPropertiesHasConfigurationFromEureka();\n\t\tverifyDiscoveryClientCalledOnce();\n\t}\n']",iscovery;Client;ucceed;config;Has;Bootstrap;cloud;fail;spring;iscovery,4.6566128730773926e-09;3.725290298461914e-09;1.979060471057892e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.4551915228366852e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.893080711364746, -5.776435852050781, -6.354430675506592, -5.428753852844238, -5.5011467933654785, -0.016198337078094482]",0.9839321374893188
3,['\t@Test\n\tpublic void offByDefault() throws Exception {\n\t\tthis.context = new AnnotationConfigApplicationContext(\n\t\t\t\tDiscoveryClientConfigServiceBootstrapConfiguration.class);\n\n\t\tassertThat(this.context.getBeanNamesForType(DiscoveryClient.class).length)\n\t\t\t\t.isEqualTo(0);\n\t\tassertThat(this.context.getBeanNamesForType(\n\t\t\t\tDiscoveryClientConfigServiceBootstrapConfiguration.class).length)\n\t\t\t\t\t\t.isEqualTo(0);\n\t}\n'],Client;Client;new;Configuration;For;By;Exception;Type;Names;qual,3.3760443329811096e-09;2.3283064365386963e-09;1.3096723705530167e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.1059455573558807e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.884871482849121, -5.813388824462891, -6.350766658782959, -5.396144866943359, -5.465585708618164, -0.016411790624260902]",0.9837221503257751
3,"['\t@Test\n\tpublic void onWhenRequested() throws Exception {\n\t\tgivenDiscoveryClientReturnsInfo();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\t\tverifyDiscoveryClientCalledOnce();\n\t\texpectConfigClientPropertiesHasConfigurationFromEureka();\n\t}\n']",setup;iscovery;iscovery;When;Config;iscovery;iscovery;Configuration;Once;Exception,2.6775524020195007e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.693881005048752e-10;6.402842700481415e-10,5,5,"[-5.89498233795166, -5.795868873596191, -6.379483699798584, -5.458909511566162, -5.4994988441467285, -0.01596301794052124]",0.9841637015342712
3,"['\t@Test\n\tpublic void onWhenHeartbeat() throws Exception {\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\n\t\tgivenDiscoveryClientReturnsInfo();\n\t\tverifyDiscoveryClientCalledOnce();\n\n\t\tthis.context.publishEvent(new HeartbeatEvent(this.context, ""new""));\n\n\t\texpectConfigClientPropertiesHasConfigurationFromEureka();\n\t}\n']",iscovery;Bootstrap;iscovery;iscovery;Configuration;publish;Returns;spring;Setup;setup,2.7939677238464355e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.885696887969971, -5.77963399887085, -6.367084980010986, -5.44924259185791, -5.494932651519775, -0.016122328117489815]",0.984006941318512
3,"['\t@Test\n\tpublic void secureWhenRequested() throws Exception {\n\t\tthis.info = new DefaultServiceInstance(""app"", ""foo"", 443, true);\n\t\tgivenDiscoveryClientReturnsInfo();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\n\t\tverifyDiscoveryClientCalledOnce();\n\t\texpectConfigClientPropertiesHasConfiguration(""https://foo:443/"");\n\t}\n']",When;Requested;Returns;Bootstrap;Info;app;iscovery;info;Setup;Service,1.3969838619232178e-08;1.30385160446167e-08;2.7939677238464355e-09;1.862645149230957e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.8949971199035645, -5.811147212982178, -6.393553733825684, -5.453996658325195, -5.492858409881592, -0.015941079705953598]",0.9841852784156799
3,"['\t@Test\n\tpublic void multipleInstancesReturnedFromDiscovery() {\n\t\tServiceInstance info1 = new DefaultServiceInstance(""app"", ""localhost"", 8888,\n\t\t\t\ttrue);\n\t\tServiceInstance info2 = new DefaultServiceInstance(""app"", ""localhost1"", 8888,\n\t\t\t\tfalse);\n\t\tgivenDiscoveryClientReturnsInfoForMultipleInstances(info1, info2);\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\n\t\tverifyDiscoveryClientCalledOnce();\n\t\texpectConfigClientPropertiesHasMultipleUris(""https://localhost:8888/"",\n\t\t\t\t""http://localhost1:8888/"");\n\n\t}\n']",Instance;iscovery;ris;iscovery;Default;Instance;info;info;Instance;Service,1.1641532182693481e-09;1.1641532182693481e-09;8.731149137020111e-10;6.402842700481415e-10;5.384208634495735e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.876824378967285, -5.764767169952393, -6.341965198516846, -5.414891242980957, -5.470623016357422, -0.01649434305727482]",0.9836409687995911
3,"['\t@Test\n\tpublic void setsPasssword() throws Exception {\n\t\tthis.info.getMetadata().put(""password"", ""bar"");\n\t\tgivenDiscoveryClientReturnsInfo();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"");\n\n\t\tConfigClientProperties locator = this.context\n\t\t\t\t.getBean(ConfigClientProperties.class);\n\t\tCredentials credentials = locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://foo:8877/"");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""bar"");\n\t\tassertThat(credentials.getUsername()).isEqualTo(""user"");\n\t}\n']",Client;iscovery;setup;Password;password;Client;Returns;Exception;foo;Username,3.7834979593753815e-09;2.7939677238464355e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.855938911437988, -5.762911796569824, -6.344017028808594, -5.402933597564697, -5.498610496520996, -0.01649305410683155]",0.9836422204971313
3,"['\t@Test\n\tpublic void setsPath() throws Exception {\n\t\tthis.info.getMetadata().put(""configPath"", ""/bar"");\n\t\tgivenDiscoveryClientReturnsInfo();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"");\n\n\t\texpectConfigClientPropertiesHasConfiguration(""http://foo:8877/bar"");\n\t}\n']",iscovery;given;bar;Info;Configuration;Has;this;enabled;get;Properties,2.7939677238464355e-08;8.847564458847046e-09;5.587935447692871e-09;3.725290298461914e-09;3.4924596548080444e-09;2.7939677238464355e-09;1.6298145055770874e-09;1.3969838619232178e-09;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.903770446777344, -5.831903457641602, -6.385109901428223, -5.47538948059082, -5.455883979797363, -0.015934158116579056]",0.9841922521591187
3,"['\t@Test\n\tpublic void shouldFailGetConfigServerInstanceFromDiscoveryClient() throws Exception {\n\t\tgivenDiscoveryClientReturnsNoInfo();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\t\tverifyDiscoveryClientCalledOnce();\n\t\texpectConfigClientPropertiesHasDefaultConfiguration();\n\t}\n']",Client;Client;iscovery;spring;Client;iscovery;Fail;Service;config;enabled,2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;2.270098775625229e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09,5,5,"[-5.904430389404297, -5.813926696777344, -6.381966590881348, -5.468398094177246, -5.500326633453369, -0.015832901000976562]",0.9842917919158936
3,"['\t@Test\n\tpublic void shouldRetryAndSucceedGetConfigServerInstanceFromDiscoveryClient()\n\t\t\tthrows Exception {\n\t\tgivenDiscoveryClientReturnsInfoOnThirdTry();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"",\n\t\t\t\t""spring.cloud.config.retry.maxAttempts=3"",\n\t\t\t\t""spring.cloud.config.retry.initialInterval=10"",\n\t\t\t\t""spring.cloud.config.fail-fast=true"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\t\tverifyDiscoveryClientCalledThreeTimes();\n\n\t\tthis.context.publishEvent(new HeartbeatEvent(this.context, ""new""));\n\n\t\texpectConfigClientPropertiesHasConfigurationFromEureka();\n\t}\n']",Heartbeat;Try;should;Info;this;fast;fail;iscovery;On;given,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.889302730560303, -5.760240077972412, -6.374381065368652, -5.453126907348633, -5.5254058837890625, -0.016018744558095932]",0.9841088652610779
3,"['\t@Test\n\tpublic void shouldNotRetryIfNotFailFastPropertySet() throws Exception {\n\t\tgivenDiscoveryClientReturnsInfoOnThirdTry();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"",\n\t\t\t\t""spring.cloud.config.retry.maxAttempts=3"",\n\t\t\t\t""spring.cloud.config.retry.initialInterval=10"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\t\tverifyDiscoveryClientCalledOnce();\n\t\texpectConfigClientPropertiesHasDefaultConfiguration();\n\t}\n']",cloud;spring;Try;Fast;spring;Retry;iscovery;should;enabled;spring,3.259629011154175e-09;1.862645149230957e-09;1.3387762010097504e-09;1.2514647096395493e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.884555816650391, -5.754260540008545, -6.352504253387451, -5.438490867614746, -5.504245758056641, -0.016240328550338745]",0.9838908314704895
3,"['\t@Test\n\tpublic void shouldRetryAndFailWithExceptionGetConfigServerInstanceFromDiscoveryClient()\n\t\t\tthrows Exception {\n\t\tgivenDiscoveryClientReturnsNoInfo();\n\n\t\texpectNoInstancesOfConfigServerException();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"",\n\t\t\t\t""spring.cloud.config.retry.maxAttempts=3"",\n\t\t\t\t""spring.cloud.config.retry.initialInterval=10"",\n\t\t\t\t""spring.cloud.config.fail-fast=true"");\n\t}\n']",fail;config;Client;From;setup;enabled;Instances;Config;Instance;retry,1.6298145055770874e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.9059576988220215, -5.787754535675049, -6.3794474601745605, -5.468626499176025, -5.512332439422607, -0.015863055363297462]",0.984262228012085
3,"['\t@Test\n\tpublic void shouldRetryAndFailWithMessageGetConfigServerInstanceFromDiscoveryClient()\n\t\t\tthrows Exception {\n\t\tgivenDiscoveryClientReturnsNoInfo();\n\n\t\tsetup(""spring.cloud.config.discovery.enabled=true"",\n\t\t\t\t""spring.cloud.config.retry.maxAttempts=3"",\n\t\t\t\t""spring.cloud.config.retry.initialInterval=10"",\n\t\t\t\t""spring.cloud.config.fail-fast=false"");\n\n\t\texpectDiscoveryClientConfigServiceBootstrapConfigurationIsSetup();\n\t\texpectConfigClientPropertiesHasDefaultConfiguration();\n\t}\n']",Fail;should;Server;fail;spring;Returns;Interval;retry;setup;Client,2.0954757928848267e-09;1.862645149230957e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.8905253410339355, -5.759237766265869, -6.364884853363037, -5.453091144561768, -5.508451461791992, -0.016104381531476974]",0.9840245842933655
3,"[""\t@Test\n\tpublic void testDefaultStatus() {\n\t\t// UNKNOWN is better than DOWN since it doesn't stop the app from working\n\t\tassertThat(this.indicator.health().getStatus()).isEqualTo(Status.UNKNOWN);\n\t}\n""]",stop;better;That;UNKNOWN;it;DOWN;Status;qual;Status;Status,5.3551048040390015e-09;2.444721758365631e-09;1.5133991837501526e-09;1.3533281162381172e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.908480167388916, -5.8390302658081055, -6.433981895446777, -5.547633647918701, -5.47470235824585, -0.015440684743225574]",0.984677791595459
3,"['\t@Test\n\tpublic void testExceptionStatus() {\n\t\tdoThrow(new IllegalStateException()).when(this.locator)\n\t\t\t\t.locate(any(Environment.class));\n\t\tassertThat(this.indicator.health().getStatus()).isEqualTo(Status.DOWN);\n\t\tverify(this.locator, times(1)).locate(any(Environment.class));\n\t}\n']",Status;new;when;this;Exception;Illegal;ocate;State;ocate;locator,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.0372681319713593e-10;5.820766091346741e-11,5,5,"[-5.848482608795166, -5.73639440536499, -6.298309803009033, -5.408844947814941, -5.452049255371094, -0.016855672001838684]",0.9832856059074402
3,"['\t@Test\n\tpublic void testServerUp() {\n\t\tPropertySource<?> source = new MapPropertySource(""foo"",\n\t\t\t\tCollections.<String, Object>emptyMap());\n\t\tdoReturn(source).when(this.locator).locate(any(Environment.class));\n\t\tassertThat(this.indicator.health().getStatus()).isEqualTo(Status.UP);\n\t\tverify(this.locator, times(1)).locate(any(Environment.class));\n\t}\n']",foo;UP;indicator;Collections;That;verify;new;Map;Property;get,2.561137080192566e-09;9.313225746154785e-10;7.8580342233181e-10;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.847558975219727, -5.738409042358398, -6.309911727905273, -5.412625789642334, -5.469796657562256, -0.016736337915062904]",0.9834029078483582
3,"['\t@Test\n\tpublic void healthIsCached() {\n\t\tPropertySource<?> source = new MapPropertySource(""foo"",\n\t\t\t\tCollections.<String, Object>emptyMap());\n\t\tdoReturn(source).when(this.locator).locate(any(Environment.class));\n\n\t\t// not cached\n\t\tassertThat(this.indicator.health().getStatus()).isEqualTo(Status.UP);\n\n\t\t// cached\n\t\tassertThat(this.indicator.health().getStatus()).isEqualTo(Status.UP);\n\n\t\tverify(this.locator, times(1)).locate(any(Environment.class));\n\t}\n']",Environment;Source;Environment;cached;Status;UP;class;empty;Collections;Map,6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.838346004486084, -5.728488445281982, -6.272518634796143, -5.359931945800781, -5.451300144195557, -0.017192143946886063]",0.9829549193382263
3,"['\t@Test\n\tpublic void sunnyDay() {\n\t\tEnvironment body = new Environment(""app"", ""master"");\n\t\tmockRequestResponseWithoutLabel(new ResponseEntity<>(body, HttpStatus.OK));\n\t\tthis.locator.setRestTemplate(this.restTemplate);\n\n\t\tArgumentCaptor<HttpEntity> argumentCaptor = ArgumentCaptor\n\t\t\t\t.forClass(HttpEntity.class);\n\n\t\tassertThat(this.locator.locate(this.environment)).isNotNull();\n\n\t\tMockito.verify(this.restTemplate).exchange(anyString(), any(HttpMethod.class),\n\t\t\t\targumentCaptor.capture(), any(Class.class), anyString(), anyString());\n\n\t\tHttpEntity httpEntity = argumentCaptor.getValue();\n\t\tassertThat(httpEntity.getHeaders().getAccept())\n\t\t\t\t.containsExactly(MediaType.APPLICATION_JSON);\n\t}\n']",Accept;sunny;ttp;Day;Response;Entity;Rest;ocate;Class;ock,1.4551915228366852e-09;1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.835907936096191, -5.750696659088135, -6.320986747741699, -5.399576187133789, -5.467697620391846, -0.016778891906142235]",0.9833610653877258
3,"['\t@Test\n\tpublic void sunnyDayWithLabel() {\n\t\tEnvironment body = new Environment(""app"", ""master"");\n\t\tmockRequestResponseWithLabel(new ResponseEntity<>(body, HttpStatus.OK), ""v1.0.0"");\n\t\tthis.locator.setRestTemplate(this.restTemplate);\n\t\tTestPropertyValues.of(""spring.cloud.config.label:v1.0.0"")\n\t\t\t\t.applyTo(this.environment);\n\t\tassertThat(this.locator.locate(this.environment)).isNotNull();\n\t}\n']",ttp;ocate;Response;label;master;Entity;Rest;locator;spring;set,2.0954757928848267e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.9069013595581055, -5.863643646240234, -6.427926063537598, -5.512605667114258, -5.471385478973389, -0.015538342297077179]",0.9845817685127258
3,"['\t@Test\n\tpublic void sunnyDayWithLabelThatContainsASlash() {\n\t\tEnvironment body = new Environment(""app"", ""master"");\n\t\tmockRequestResponseWithLabel(new ResponseEntity<>(body, HttpStatus.OK),\n\t\t\t\t""release(_)v1.0.0"");\n\t\tthis.locator.setRestTemplate(this.restTemplate);\n\t\tTestPropertyValues.of(""spring.cloud.config.label:release/v1.0.0"")\n\t\t\t\t.applyTo(this.environment);\n\t\tassertThat(this.locator.locate(this.environment)).isNotNull();\n\t}\n']",sunny;spring;ASlash;cloud;Entity;ttp;rest;That;Environment;Environment,5.587935447692871e-09;3.725290298461914e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10,5,5,"[-5.88801908493042, -5.8339314460754395, -6.404266834259033, -5.483681678771973, -5.489280700683594, -0.015761910006403923]",0.9843616485595703
3,"['\t@Test\n\tpublic void sunnyDayWithNoSuchLabel() {\n\t\tmockRequestResponseWithLabel(\n\t\t\t\tnew ResponseEntity<Void>((Void) null, HttpStatus.NOT_FOUND),\n\t\t\t\t""nosuchlabel"");\n\t\tthis.locator.setRestTemplate(this.restTemplate);\n\t\tassertThat(this.locator.locate(this.environment)).isNull();\n\t}\n']",sunny;Response;Response;Rest;new;ttp;ocate;Request;Label;set,7.450580596923828e-09;6.111804395914078e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;1.5133991837501526e-09;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.900546073913574, -5.816487789154053, -6.428403854370117, -5.492739200592041, -5.50770902633667, -0.015624371357262135]",0.9844970703125
3,"['\t@Test\n\tpublic void failsQuietly() {\n\t\tmockRequestResponseWithoutLabel(\n\t\t\t\tnew ResponseEntity<>(""Wah!"", HttpStatus.INTERNAL_SERVER_ERROR));\n\t\tthis.locator.setRestTemplate(this.restTemplate);\n\t\tassertThat(this.locator.locate(this.environment)).isNull();\n\t}\n']",Rest;SERVER;new;Template;this;Response;set;That;rest;Response,1.7462298274040222e-09;1.5133991837501526e-09;1.1641532182693481e-09;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.902497291564941, -5.82301664352417, -6.406749248504639, -5.511147499084473, -5.483287811279297, -0.015660753473639488]",0.98446124792099
3,"['\t@Test\n\tpublic void failFast() throws Exception {\n\t\tClientHttpRequestFactory requestFactory = Mockito\n\t\t\t\t.mock(ClientHttpRequestFactory.class);\n\t\tClientHttpRequest request = Mockito.mock(ClientHttpRequest.class);\n\t\tClientHttpResponse response = Mockito.mock(ClientHttpResponse.class);\n\t\tMockito.when(requestFactory.createRequest(Mockito.any(URI.class),\n\t\t\t\tMockito.any(HttpMethod.class))).thenReturn(request);\n\t\tRestTemplate restTemplate = new RestTemplate(requestFactory);\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tdefaults.setFailFast(true);\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tMockito.when(request.getHeaders()).thenReturn(new HttpHeaders());\n\t\tMockito.when(request.execute()).thenReturn(response);\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setContentType(MediaType.APPLICATION_JSON);\n\t\tMockito.when(response.getHeaders()).thenReturn(headers);\n\t\tMockito.when(response.getStatusCode())\n\t\t\t\t.thenReturn(HttpStatus.INTERNAL_SERVER_ERROR);\n\t\tMockito.when(response.getBody())\n\t\t\t\t.thenReturn(new ByteArrayInputStream(""{}"".getBytes()));\n\t\tthis.locator.setRestTemplate(restTemplate);\n\t\tthis.expected\n\t\t\t\t.expectCause(IsInstanceOf.instanceOf(IllegalArgumentException.class));\n\t\tthis.expected.expectMessage(""fail fast property is set"");\n\t\tthis.locator.locate(this.environment);\n\t}\n']",APPLICATION;fail;Status;Locator;Source;Client;environment;ttp;locator;environment,5.238689482212067e-10;4.656612873077393e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.831923484802246, -5.727407455444336, -6.298245429992676, -5.330448627471924, -5.535073280334473, -0.01695823110640049]",0.9831847548484802
3,"['\t@Test\n\tpublic void failFastWhenNotFound() throws Exception {\n\t\tClientHttpRequestFactory requestFactory = Mockito\n\t\t\t\t.mock(ClientHttpRequestFactory.class);\n\t\tClientHttpRequest request = Mockito.mock(ClientHttpRequest.class);\n\t\tClientHttpResponse response = Mockito.mock(ClientHttpResponse.class);\n\t\tMockito.when(requestFactory.createRequest(Mockito.any(URI.class),\n\t\t\t\tMockito.any(HttpMethod.class))).thenReturn(request);\n\t\tRestTemplate restTemplate = new RestTemplate(requestFactory);\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tdefaults.setFailFast(true);\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tMockito.when(request.getHeaders()).thenReturn(new HttpHeaders());\n\t\tMockito.when(request.execute()).thenReturn(response);\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setContentType(MediaType.APPLICATION_JSON);\n\t\tMockito.when(response.getHeaders()).thenReturn(headers);\n\t\tMockito.when(response.getStatusCode()).thenReturn(HttpStatus.NOT_FOUND);\n\t\tMockito.when(response.getBody())\n\t\t\t\t.thenReturn(new ByteArrayInputStream("""".getBytes()));\n\t\tthis.locator.setRestTemplate(restTemplate);\n\t\tthis.expected\n\t\t\t\t.expectCause(IsInstanceOf.instanceOf(IllegalArgumentException.class));\n\t\tthis.expected.expectMessage(""fail fast property is set"");\n\t\tthis.locator.locate(this.environment);\n\t}\n']",fail;When;expected;fast;locator;Source;environment;expect;Cause;Not,1.3969838619232178e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.832050800323486, -5.730739116668701, -6.296645641326904, -5.3210530281066895, -5.532285690307617, -0.017007455229759216]",0.9831362366676331
3,"['\t@Test\n\tpublic void failFastWhenBothPasswordAndAuthorizationPropertiesSet() throws Exception {\n\t\tClientHttpRequestFactory requestFactory = Mockito\n\t\t\t\t.mock(ClientHttpRequestFactory.class);\n\t\tClientHttpRequest request = Mockito.mock(ClientHttpRequest.class);\n\t\tMockito.when(requestFactory.createRequest(Mockito.any(URI.class),\n\t\t\t\tMockito.any(HttpMethod.class))).thenReturn(request);\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tdefaults.setFailFast(true);\n\t\tdefaults.setUsername(""username"");\n\t\tdefaults.setPassword(""password"");\n\t\tdefaults.getHeaders().put(AUTHORIZATION, ""Basic dXNlcm5hbWU6cGFzc3dvcmQNCg=="");\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tthis.expected.expect(IllegalStateException.class);\n\t\tthis.expected.expectMessage(\n\t\t\t\t""Could not locate PropertySource and the fail fast property is set, failing"");\n\t\tthis.locator.locate(this.environment);\n\t}\n']",and;locator;Mockito;Fast;Message;locate;fail;Headers;expect;Password,1.862645149230957e-09;1.6298145055770874e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.8317060470581055, -5.740723133087158, -6.296963691711426, -5.342600345611572, -5.520524024963379, -0.016916856169700623]",0.983225405216217
3,"['\t@Test\n\tpublic void interceptorShouldAddHeadersWhenHeadersPropertySet() throws Exception {\n\t\tMockClientHttpRequest request = new MockClientHttpRequest();\n\t\tClientHttpRequestExecution execution = Mockito\n\t\t\t\t.mock(ClientHttpRequestExecution.class);\n\t\tbyte[] body = new byte[] {};\n\t\tMap<String, String> headers = new HashMap<>();\n\t\theaders.put(""X-Example-Version"", ""2.1"");\n\t\tnew ConfigServicePropertySourceLocator.GenericRequestHeaderInterceptor(headers)\n\t\t\t\t.intercept(request, body, execution);\n\t\tMockito.verify(execution).execute(request, body);\n\t\tassertThat(request.getHeaders().getFirst(""X-Example-Version"")).isEqualTo(""2.1"");\n\t}\n']",Example;Headers;body;Hash;Http;Add;new;Interceptor;put;Locator,1.862645149230957e-09;1.1059455573558807e-09;5.820766091346741e-10;5.093170329928398e-10;3.92901711165905e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.863309860229492, -5.789066791534424, -6.3304972648620605, -5.401434898376465, -5.515003204345703, -0.016352685168385506]",0.9837802052497864
3,"['\t@Test\n\tpublic void shouldAddAuthorizationHeaderWhenPasswordSet() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tString username = ""user"";\n\t\tString password = ""pass"";\n\t\tReflectionTestUtils.invokeMethod(this.locator, ""addAuthorizationToken"", defaults,\n\t\t\t\theaders, username, password);\n\t\tassertThat(headers).hasSize(1);\n\t}\n']",Service;Reflection;Locator;Config;headers;ttp;Source;Property;When;user,1.280568540096283e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.8653974533081055, -5.770797252655029, -6.322285175323486, -5.400345802307129, -5.48610258102417, -0.016544178128242493]",0.9835920333862305
3,"['\t@Test\n\tpublic void shouldAddAuthorizationHeaderWhenAuthorizationSet() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tdefaults.getHeaders().put(AUTHORIZATION, ""Basic dXNlcm5hbWU6cGFzc3dvcmQNCg=="");\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tString username = ""user"";\n\t\tString password = null;\n\t\tReflectionTestUtils.invokeMethod(this.locator, ""addAuthorizationToken"", defaults,\n\t\t\t\theaders, username, password);\n\t\tassertThat(headers).hasSize(1);\n\t}\n']",cm;password;username;username;cm;new;headers;should;Reflection;That,5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.1827872842550278e-10;1.8917489796876907e-10,5,5,"[-5.844660758972168, -5.751511096954346, -6.306611061096191, -5.371338844299316, -5.487837791442871, -0.016822850331664085]",0.9833178520202637
3,"['\t@Test\n\tpublic void shouldThrowExceptionWhenPasswordAndAuthorizationBothSet() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tdefaults.getHeaders().put(AUTHORIZATION, ""Basic dXNlcm5hbWU6cGFzc3dvcmQNCg=="");\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tString username = ""user"";\n\t\tString password = ""pass"";\n\t\tthis.expected.expect(IllegalStateException.class);\n\t\tthis.expected.expectMessage(""You must set either \'password\' or \'authorization\'"");\n\t\tReflectionTestUtils.invokeMethod(this.locator, ""addAuthorizationToken"", defaults,\n\t\t\t\theaders, username, password);\n\t}\n']",You;username;environment;expected;set;Reflection;Authorization;Service;authorization;password,1.0477378964424133e-09;7.8580342233181e-10;7.566995918750763e-10;7.566995918750763e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.854435443878174, -5.757380485534668, -6.321339130401611, -5.372900485992432, -5.51223087310791, -0.016639500856399536]",0.9834981560707092
3,"['\t@Test\n\tpublic void shouldThrowExceptionWhenNegativeReadTimeoutSet() {\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tdefaults.setRequestReadTimeout(-1);\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tthis.expected.expect(IllegalStateException.class);\n\t\tthis.expected.expectMessage(""Invalid Value for Read Timeout set."");\n\t\tReflectionTestUtils.invokeMethod(this.locator, ""getSecureRestTemplate"", defaults);\n\t}\n']",Timeout;expected;Config;Client;Value;should;this;Set;Timeout;Read,2.2118911147117615e-09;9.313225746154785e-10;9.313225746154785e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.876820087432861, -5.801648139953613, -6.368340492248535, -5.444011688232422, -5.513331413269043, -0.01602378860116005]",0.9841040372848511
3,"['\t@Test\n\tpublic void shouldThrowExceptionWhenNegativeConnectTimeoutSet() {\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tdefaults.setRequestConnectTimeout(-1);\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tthis.expected.expect(IllegalStateException.class);\n\t\tthis.expected.expectMessage(""Invalid Value for Connect Timeout set."");\n\t\tReflectionTestUtils.invokeMethod(this.locator, ""getSecureRestTemplate"", defaults);\n\t}\n']",Client;expect;Secure;Config;Illegal;Template;Request;this;Message;environment,1.7462298274040222e-09;6.184563972055912e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.875265121459961, -5.796942234039307, -6.369128227233887, -5.451747894287109, -5.514423847198486, -0.01600290648639202]",0.984124481678009
3,"['\t@Test\n\tpublic void checkInterceptorHasNoAuthorizationHeaderPresent() {\n\t\tConfigClientProperties defaults = new ConfigClientProperties(this.environment);\n\t\tdefaults.getHeaders().put(AUTHORIZATION, ""Basic dXNlcm5hbWU6cGFzc3dvcmQNCg=="");\n\t\tdefaults.getHeaders().put(""key"", ""value"");\n\t\tthis.locator = new ConfigServicePropertySourceLocator(defaults);\n\t\tRestTemplate restTemplate = ReflectionTestUtils.invokeMethod(this.locator,\n\t\t\t\t""getSecureRestTemplate"", defaults);\n\t\tIterator<ClientHttpRequestInterceptor> iterator = restTemplate.getInterceptors()\n\t\t\t\t.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tGenericRequestHeaderInterceptor genericRequestHeaderInterceptor = (GenericRequestHeaderInterceptor) iterator\n\t\t\t\t\t.next();\n\t\t\tassertThat(genericRequestHeaderInterceptor.getHeaders().get(AUTHORIZATION))\n\t\t\t\t\t.isEqualTo(null);\n\t\t}\n\t}\n']",No;Authorization;environment;Header;Present;Header;Header;Http;Client;Header,1.7462298274040222e-09;1.3969838619232178e-09;1.2223608791828156e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.868291854858398, -5.771502494812012, -6.34834623336792, -5.4050164222717285, -5.513031959533691, -0.016353271901607513]",0.9837797284126282
3,"['\t@Test\n\tpublic void vanilla() {\n\t\tthis.locator.setUri(new String[] { ""http://localhost:9999"" });\n\t\tthis.locator.setPassword(""secret"");\n\t\tCredentials credentials = this.locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://localhost:9999"");\n\t\tassertThat(credentials.getUsername()).isEqualTo(""user"");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""secret"");\n\t}\n']",set;Password;Username;vanilla;http;get;redentials;locator;That;credentials,1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.055902197957039e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.822501182556152, -5.721444129943848, -6.2721052169799805, -5.359428882598877, -5.4314775466918945, -0.017353249713778496]",0.982796311378479
3,"['\t@Test\n\tpublic void uriCreds() {\n\t\tthis.locator.setUri(new String[] { ""http://foo:bar@localhost:9999"" });\n\t\tCredentials credentials = this.locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://localhost:9999"");\n\t\tassertThat(credentials.getUsername()).isEqualTo(""foo"");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""bar"");\n\t}\n']",localhost;this;ri;bar;foo;credentials;Password;set;foo;locator,8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.836532115936279, -5.762251377105713, -6.3220133781433105, -5.401191234588623, -5.442414283752441, -0.016840433701872826]",0.9833004474639893
3,"['\t@Test\n\tpublic void explicitPassword() {\n\t\tthis.locator.setUri(new String[] { ""http://foo:bar@localhost:9999"" });\n\t\tthis.locator.setPassword(""secret"");\n\t\tCredentials credentials = this.locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://localhost:9999"");\n\t\tassertThat(credentials.getUsername()).isEqualTo(""foo"");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""secret"");\n\t}\n']",localhost;locator;http;Password;locator;set;http;secret;get;explicit,3.259629011154175e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.8528523445129395, -5.758174419403076, -6.33561372756958, -5.42129373550415, -5.454380035400391, -0.016637273132801056]",0.9835004806518555
3,"['\t@Test\n\tpublic void testIfNoColonPresentInUriCreds() {\n\t\tthis.locator.setUri(new String[] { ""http://foobar@localhost:9999"" });\n\t\tthis.locator.setPassword(""secret"");\n\t\tCredentials credentials = this.locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://localhost:9999"");\n\t\tassertThat(credentials.getUsername()).isEqualTo(""foobar"");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""secret"");\n\t}\n']",Colon;set;this;Present;new;localhost;In;red;redentials;secret,1.1641532182693481e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.0372681319713593e-10,5,5,"[-5.832638740539551, -5.729177474975586, -6.296903610229492, -5.380221843719482, -5.4511590003967285, -0.017064997926354408]",0.9830797910690308
3,"['\t@Test\n\tpublic void testIfColonPresentAtTheEndInUriCreds() {\n\t\tthis.locator.setUri(new String[] { ""http://foobar:@localhost:9999"" });\n\t\tthis.locator.setPassword(""secret"");\n\t\tCredentials credentials = this.locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://localhost:9999"");\n\t\tassertThat(credentials.getUsername()).isEqualTo(""foobar"");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""secret"");\n\t}\n']",Password;redentials;localhost;Username;ri;set;localhost;this;new;get,9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.856697082519531, -5.766201972961426, -6.348052978515625, -5.444591999053955, -5.45515251159668, -0.016471125185489655]",0.9836636781692505
3,"['\t@Test\n\tpublic void testIfColonPresentAtTheStartInUriCreds() {\n\t\tthis.locator.setUri(new String[] { ""http://:foobar@localhost:9999"" });\n\t\tCredentials credentials = this.locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://localhost:9999"");\n\t\tassertThat(credentials.getUsername()).isEqualTo("""");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""foobar"");\n\t}\n']",localhost;set;ri;ri;redentials;The;foobar;ri;foobar;redentials,4.423782229423523e-09;3.259629011154175e-09;1.862645149230957e-09;1.3969838619232178e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.857657432556152, -5.783663749694824, -6.355592727661133, -5.434121131896973, -5.469277858734131, -0.016385287046432495]",0.9837483167648315
3,"['\t@Test\n\tpublic void testIfColonPresentAtTheStartAndEndInUriCreds() {\n\t\tthis.locator.setUri(new String[] { ""http://:foobar:@localhost:9999"" });\n\t\tCredentials credentials = this.locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://localhost:9999"");\n\t\tassertThat(credentials.getUsername()).isEqualTo("""");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""foobar:"");\n\t}\n']",locator;foobar;Username;Start;this;ri;Colon;ri;localhost;redentials,1.8335413187742233e-09;1.4842953532934189e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;2.6193447411060333e-10,5,5,"[-5.869815349578857, -5.793487071990967, -6.372809410095215, -5.467901706695557, -5.450222969055176, -0.016224494203925133]",0.9839065074920654
3,"['\t@Test\n\tpublic void testIfSpacePresentAsUriCreds() {\n\t\tthis.locator.setUri(new String[] { ""http://  @localhost:9999"" });\n\t\tthis.locator.setPassword(""secret"");\n\t\tCredentials credentials = this.locator.getCredentials(0);\n\t\tassertThat(credentials.getUri()).isEqualTo(""http://localhost:9999"");\n\t\tassertThat(credentials.getUsername()).isEqualTo(""  "");\n\t\tassertThat(credentials.getPassword()).isEqualTo(""secret"");\n\t}\n']",ri;Password;Space;localhost;Present;set;redentials;http;red;redentials,1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.820760250091553, -5.724203109741211, -6.276167392730713, -5.361562728881836, -5.437217712402344, -0.01730591617524624]",0.9828429818153381
3,"['\t@Test\n\tpublic void changeNameInOverride() {\n\t\tthis.locator.setName(""one"");\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tTestPropertyValues.of(""spring.application.name:two"").applyTo(environment);\n\t\tConfigClientProperties override = this.locator.override(environment);\n\t\tassertThat(override.getName()).isEqualTo(""two"");\n\t}\n']",application;Properties;Name;environment;environment;two;locator;two;override;qual,1.862645149230957e-09;1.4260876923799515e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.880413055419922, -5.811859607696533, -6.36018705368042, -5.456220626831055, -5.479413032531738, -0.01608467288315296]",0.9840440154075623
3,"['\t@Test\n\tpublic void testThatExplicitUsernamePasswordTakePrecedence() {\n\t\tConfigClientProperties properties = new ConfigClientProperties(\n\t\t\t\tnew MockEnvironment());\n\n\t\tproperties.setUri(\n\t\t\t\tnew String[] { ""https://userInfoName:userInfoPW@localhost:8888/"" });\n\t\tproperties.setUsername(""explicitName"");\n\t\tproperties.setPassword(""explicitPW"");\n\t\tCredentials credentials = properties.getCredentials(0);\n\t\tassertThat(credentials.getPassword()).isEqualTo(""explicitPW"");\n\t\tassertThat(credentials.getUsername()).isEqualTo(""explicitName"");\n\t}\n']",Username;user;Password;Username;redentials;Precedence;properties;Properties;Name;get,1.4842953532934189e-09;9.313225746154785e-10;8.731149137020111e-10;6.111804395914078e-10;5.529727786779404e-10;5.238689482212067e-10;5.093170329928398e-10;3.055902197957039e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.832743167877197, -5.737828254699707, -6.300107479095459, -5.379380702972412, -5.467876434326172, -0.01696174591779709]",0.9831812977790833
3,"['\t@Test\n\tpublic void checkIfExceptionThrownForNegativeIndex() {\n\t\tthis.locator.setUri(\n\t\t\t\tnew String[] { ""http://localhost:8888"", ""http://localhost:8889"" });\n\t\tthis.expected.expect(IllegalStateException.class);\n\t\tthis.expected.expectMessage(""Trying to access an invalid array index"");\n\t\tCredentials credentials = this.locator.getCredentials(-1);\n\t}\n']",Exception;an;Thrown;access;expected;localhost;this;Exception;credentials;redentials,1.862645149230957e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.529727786779404e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.870983123779297, -5.76666784286499, -6.345766544342041, -5.434389591217041, -5.487639904022217, -0.016338611021637917]",0.9837940335273743
3,"['\t@Test\n\tpublic void checkIfExceptionThrownForPositiveInvalidIndex() {\n\t\tthis.locator.setUri(\n\t\t\t\tnew String[] { ""http://localhost:8888"", ""http://localhost:8889"" });\n\t\tthis.expected.expect(IllegalStateException.class);\n\t\tthis.expected.expectMessage(""Trying to access an invalid array index"");\n\t\tCredentials credentials = this.locator.getCredentials(3);\n\t}\n']",check;Invalid;access;localhost;expect;localhost;new;Positive;expected;Exception,1.3969838619232178e-09;1.1641532182693481e-09;1.1350493878126144e-09;1.0477378964424133e-09;9.74978320300579e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.869924545288086, -5.766996383666992, -6.349701881408691, -5.441288948059082, -5.486275672912598, -0.016308939084410667]",0.9838233590126038
3,"['\t@Test\n\tpublic void checkIfExceptionThrownForIndexEqualToLength() {\n\t\tthis.locator.setUri(\n\t\t\t\tnew String[] { ""http://localhost:8888"", ""http://localhost:8889"" });\n\t\tthis.expected.expect(IllegalStateException.class);\n\t\tthis.expected.expectMessage(""Trying to access an invalid array index"");\n\t\tCredentials credentials = this.locator.getCredentials(2);\n\t}\n']",redentials;localhost;invalid;Length;http;rying;expect;an;new;index,1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.883535861968994, -5.772932052612305, -6.355177402496338, -5.435232162475586, -5.496066093444824, -0.016227426007390022]",0.9839036464691162
3,"['\t@Test\n\tpublic void withHealthIndicator() {\n\t\tConfigurableApplicationContext context = new SpringApplicationBuilder(\n\t\t\t\tPropertySourceBootstrapConfiguration.class,\n\t\t\t\tConfigServiceBootstrapConfiguration.class)\n\t\t\t\t\t\t.child(ConfigClientAutoConfiguration.class)\n\t\t\t\t\t\t.web(WebApplicationType.NONE).run();\n\t\tassertThat(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context,\n\t\t\t\tConfigClientProperties.class).length).isEqualTo(1);\n\t\tassertThat(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context,\n\t\t\t\tConfigServerHealthIndicator.class).length).isEqualTo(1);\n\t\tcontext.close();\n\t}\n']",Web;with;web;Health;Source;Bootstrap;new;ONE;run;Type,2.7939677238464355e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.2514647096395493e-09;1.1641532182693481e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.86654806137085, -5.7858757972717285, -6.342920780181885, -5.405704975128174, -5.48836612701416, -0.01642199233174324]",0.9837121367454529
3,"['\t@Test(expected = EncryptionTooWeakException.class)\n\tpublic void cannotDecryptWithoutKey() {\n\t\tthis.controller.decrypt(""foo"", MediaType.TEXT_PLAIN);\n\t}\n']",Decrypt;Encryption;expected;Without;Too;Type;PLAIN;class;cannot;this,2.444721758365631e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.946007251739502, -5.839049816131592, -6.436825752258301, -5.532026767730713, -5.462240695953369, -0.015450192615389824]",0.9846686720848083
3,"['\t@Test(expected = EncryptionTooWeakException.class)\n\tpublic void cannotDecryptWithNoopEncryptor() {\n\t\tthis.controller.decrypt(""foo"", MediaType.TEXT_PLAIN);\n\t}\n']",Type;Media;TEXT;Encryptor;class;Decrypt;decrypt;this;controller;Exception,7.450580596923828e-09;6.51925802230835e-09;3.725290298461914e-09;3.026798367500305e-09;3.026798367500305e-09;5.820766091346741e-10;0.0;-1.280568540096283e-09;-1.3969838619232178e-09;-2.3283064365386963e-09,5,5,"[-5.975028991699219, -5.86495304107666, -6.485811233520508, -5.570556640625, -5.4795823097229, -0.014994648285210133]",0.9851170778274536
3,"['\t@Test(expected = InvalidCipherException.class)\n\tpublic void shouldThrowExceptionOnDecryptInvalidData() {\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(new RsaSecretEncryptor()));\n\t\tthis.controller.decrypt(""foo"", MediaType.TEXT_PLAIN);\n\t}\n']",Locator;Encryption;Type;expected;controller;Media;PLAIN;Encryptor;On;Single,4.889443516731262e-09;2.561137080192566e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.947886943817139, -5.83896017074585, -6.4482293128967285, -5.516516208648682, -5.50692892074585, -0.015301458537578583]",0.9848151206970215
3,"['\t@Test(expected = InvalidCipherException.class)\n\tpublic void shouldThrowExceptionOnDecryptWrongKey() {\n\t\tRsaSecretEncryptor encryptor = new RsaSecretEncryptor();\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(new RsaSecretEncryptor()));\n\t\tthis.controller.decrypt(encryptor.encrypt(""foo""), MediaType.TEXT_PLAIN);\n\t}\n']",Media;class;Encryptor;Controller;Encryptor;Exception;Locator;Invalid;Single;sa,1.862645149230957e-09;8.149072527885437e-10;6.984919309616089e-10;4.729372449219227e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.927264213562012, -5.790959358215332, -6.444358825683594, -5.515395641326904, -5.537526607513428, -0.01538868248462677]",0.9847291111946106
3,"['\t@Test\n\tpublic void sunnyDayRsaKey() {\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(new RsaSecretEncryptor()));\n\t\tString cipher = this.controller.encrypt(""foo"", MediaType.TEXT_PLAIN);\n\t\tassertThat(this.controller.decrypt(cipher, MediaType.TEXT_PLAIN))\n\t\t\t\t.isEqualTo(""foo"");\n\t}\n']",Type;PLAIN;PLAIN;controller;this;foo;new;Encryption;Key;controller,1.862645149230957e-09;1.7462298274040222e-09;6.984919309616089e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11,5,5,"[-5.875744819641113, -5.750673770904541, -6.3347978591918945, -5.418266773223877, -5.471835136413574, -0.01653514988720417]",0.9836007952690125
3,"['\t@Test\n\tpublic void publicKey() {\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(new RsaSecretEncryptor()));\n\t\tString key = this.controller.getPublicKey();\n\t\tassertThat(key.startsWith(""ssh-rsa"")).as(""Wrong key format: "" + key).isTrue();\n\t}\n']",Encryption;starts;Encryptor;key;Encryptor;sa;ssh;That;Key;new,1.7462298274040222e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.889519214630127, -5.737095355987549, -6.350244998931885, -5.438827037811279, -5.496480464935303, -0.016316914930939674]",0.9838154911994934
3,"['\t@Test\n\tpublic void appAndProfile() {\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(new RsaSecretEncryptor()));\n\t\t// Add space to input\n\t\tString cipher = this.controller.encrypt(""app"", ""default"", ""foo bar"",\n\t\t\t\tMediaType.TEXT_PLAIN);\n\t\tString decrypt = this.controller.decrypt(""app"", ""default"", cipher,\n\t\t\t\tMediaType.TEXT_PLAIN);\n\t\tassertThat(decrypt).as(""Wrong decrypted plaintext: "" + decrypt)\n\t\t\t\t.isEqualTo(""foo bar"");\n\t}\n']",foo;Media;plaintext;qual;Locator;bar;PLAIN;cipher;new;cipher,4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.866888523101807, -5.747564792633057, -6.3428168296813965, -5.402420520782471, -5.487480640411377, -0.01656176522374153]",0.9835745096206665
3,"['\t@Test\n\tpublic void formDataIn() {\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(new RsaSecretEncryptor()));\n\t\t// Add space to input\n\t\tString cipher = this.controller.encrypt(""foo bar="",\n\t\t\t\tMediaType.APPLICATION_FORM_URLENCODED);\n\t\tString decrypt = this.controller.decrypt(cipher + ""="",\n\t\t\t\tMediaType.APPLICATION_FORM_URLENCODED);\n\t\tassertThat(decrypt).as(""Wrong decrypted plaintext: "" + decrypt)\n\t\t\t\t.isEqualTo(""foo bar"");\n\t}\n']",sa;Media;In;FORM;Controller;decrypt;That;Encryptor;encrypt;Media,1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;7.712515071034431e-10;7.275957614183426e-10;6.984919309616089e-10,5,5,"[-5.859488010406494, -5.739889621734619, -6.3120012283325195, -5.3726019859313965, -5.473969459533691, -0.016860125586390495]",0.9832811951637268
3,"['\t@Test\n\tpublic void formDataInWithPrefix() {\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(new RsaSecretEncryptor()));\n\t\t// Add space to input\n\t\tString cipher = this.controller.encrypt(""{key:test}foo bar="",\n\t\t\t\tMediaType.APPLICATION_FORM_URLENCODED);\n\t\tString decrypt = this.controller.decrypt(cipher + ""="",\n\t\t\t\tMediaType.APPLICATION_FORM_URLENCODED);\n\t\tassertThat(decrypt).as(""Wrong decrypted plaintext: "" + decrypt)\n\t\t\t\t.isEqualTo(""foo bar"");\n\t}\n']",foo;Media;bar;Locator;Data;cipher;URLENCODED;controller;controller;Encryptor,1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.41970007866621e-10,5,5,"[-5.864197731018066, -5.753278732299805, -6.3252668380737305, -5.379201889038086, -5.485304832458496, -0.016699643805623055]",0.983439028263092
3,"['\t@Test\n\tpublic void prefixStrippedBeforeEncrypt() {\n\t\tTextEncryptor encryptor = mock(TextEncryptor.class);\n\t\twhen(encryptor.encrypt(anyString())).thenReturn(""myEncryptedValue"");\n\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(encryptor));\n\t\tthis.controller.encrypt(""{key:test}foo"", MediaType.TEXT_PLAIN);\n\n\t\tArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n\t\tverify(encryptor, atLeastOnce()).encrypt(captor.capture());\n\t\tassertThat(captor.getValue()).doesNotContain(""{key:test}"")\n\t\t\t\t.as(""Prefix must be stripped prior to encrypt"");\n\t}\n']",Encrypt;this;prior;foo;class;Encryption;encryptor;encryptor;Single;encrypt,1.280568540096283e-09;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.87217903137207, -5.738528251647949, -6.346519470214844, -5.394204616546631, -5.5311970710754395, -0.01642726920545101]",0.9837068319320679
3,"['\t@Test\n\tpublic void encryptDecyptTextWithCurlyBrace() {\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(new RsaSecretEncryptor()));\n\n\t\tString plain = ""textwith}brace"";\n']",brace;Encryption;textwith;plain;Encryptor;Encryptor;new;Locator;Text;sa,2.6775524020195007e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.1641532182693481e-09;7.34871719032526e-10;5.820766091346741e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-11;0.0,5,5,"[-5.968579292297363, -5.808192729949951, -6.465153694152832, -5.54419469833374, -5.527612686157227, -0.015116655267775059]",0.9849969148635864
3,"['\t@Test\n\tpublic void addEnvironment() {\n\t\tTextEncryptorLocator locator = new TextEncryptorLocator() {\n\n\t\t\tprivate RsaSecretEncryptor encryptor = new RsaSecretEncryptor();\n\n\t\t\t@Override\n\t\t\tpublic TextEncryptor locate(Map<String, String> keys) {\n\t\t\t\treturn this.encryptor;\n\t\t\t}\n']",Encryptor;new;Text;locate;Secret;Encryptor;keys;new;Encryptor;return,4.147295840084553e-10;3.128661774098873e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.2369127944111824e-10;8.731149137020111e-11;8.731149137020111e-11;5.820766091346741e-11;5.093170329928398e-11,5,5,"[-5.866700649261475, -5.727564811706543, -6.291776180267334, -5.385926723480225, -5.4404215812683105, -0.017000658437609673]",0.9831430315971375
3,"['\t@Test\n\tpublic void shouldDecryptEnvironment() {\n\t\t// given\n\t\tString secret = randomUUID().toString();\n\n\t\t// when\n\t\tEnvironment environment = new Environment(""name"", ""profile"", ""label"");\n\t\tenvironment.add(new PropertySource(""a"", Collections.<Object, Object>singletonMap(\n\t\t\t\tenvironment.getName(), ""{cipher}"" + this.textEncryptor.encrypt(secret))));\n\n\t\t// then\n\t\tassertThat(this.encryptor.decrypt(environment).getPropertySources().get(0)\n\t\t\t\t.getSource().get(environment.getName())).isEqualTo(secret);\n\t}\n']",Decrypt;label;qual;Property;random;That;decrypt;name;get;secret,1.1059455573558807e-09;6.984919309616089e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.828160762786865, -5.702325344085693, -6.252540588378906, -5.337116718292236, -5.4466400146484375, -0.017479656264185905]",0.9826723337173462
3,"['\t@Test\n\tpublic void shouldDecryptEnvironmentWithKey() {\n\t\t// given\n\t\tString secret = randomUUID().toString();\n\n\t\t// when\n\t\tEnvironment environment = new Environment(""name"", ""profile"", ""label"");\n\t\tenvironment.add(new PropertySource(""a"",\n\t\t\t\tCollections.<Object, Object>singletonMap(environment.getName(),\n\t\t\t\t\t\t""{cipher}{key:test}"" + this.textEncryptor.encrypt(secret))));\n\n\t\t// then\n\t\tassertThat(this.encryptor.decrypt(environment).getPropertySources().get(0)\n\t\t\t\t.getSource().get(environment.getName())).isEqualTo(secret);\n\t}\n']",Decrypt;when;random;ipher;Property;Source;Property;Key;label;singleton,7.275957614183426e-10;4.656612873077393e-10;4.656612873077393e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.5279510989785194e-10,5,5,"[-5.825549602508545, -5.696966648101807, -6.24676513671875, -5.32853889465332, -5.445838928222656, -0.017562707886099815]",0.9825906157493591
3,"['\t@Test\n\tpublic void shouldBeAbleToUseNullAsPropertyValue() {\n\n\t\t// when\n\t\tEnvironment environment = new Environment(""name"", ""profile"", ""label"");\n\t\tenvironment.add(new PropertySource(""a"",\n\t\t\t\tCollections.<Object, Object>singletonMap(environment.getName(), null)));\n\n\t\t// then\n\t\tassertThat(this.encryptor.decrypt(environment).getPropertySources().get(0)\n\t\t\t\t.getSource().get(environment.getName())).isEqualTo(null);\n\t}\n']",singleton;Use;Property;label;Be;decrypt;Map;Property;environment;get,8.731149137020111e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.847123146057129, -5.74023962020874, -6.301302909851074, -5.385680675506592, -5.469350814819336, -0.016873370856046677]",0.9832682013511658
3,"['\t\t@Test\n\t\tpublic void symmetricEncryptionEnabled() throws Exception {\n\t\t\tResponseEntity<String> entity = this.testRestTemplate\n\t\t\t\t\t.getForEntity(""/encrypt/status"", String.class);\n\t\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n\t\t}\n']",Http;Response;this;class;Code;Status;entity;Encryption;OK;Enabled,9.313225746154785e-09;5.122274160385132e-09;3.4924596548080444e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.939477920532227, -5.913503170013428, -6.4439778327941895, -5.524276256561279, -5.416776180267334, -0.015475546941161156]",0.9846435785293579
3,"['\t\t@Test\n\t\tpublic void symmetricEncryptionBootstrapConfig() throws Exception {\n\t\t\tResponseEntity<String> entity = this.testRestTemplate\n\t\t\t\t\t.getForEntity(""/encrypt/status"", String.class);\n\t\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n\t\t}\n']",Rest;Template;entity;entity;Status;That;symmetric;class;Entity;Response,2.2351741790771484e-08;9.313225746154785e-09;4.6566128730773926e-09;3.725290298461914e-09;3.725290298461914e-09;3.259629011154175e-09;2.561137080192566e-09;2.5029294192790985e-09;2.3283064365386963e-09;1.862645149230957e-09,5,5,"[-5.9495391845703125, -5.917888641357422, -6.458055019378662, -5.533071517944336, -5.4113311767578125, -0.015403356403112411]",0.984714686870575
3,"['\t\t@Test\n\t\tpublic void keystoreBootstrapConfig() throws Exception {\n\t\t\tResponseEntity<String> entity = this.testRestTemplate\n\t\t\t\t\t.getForEntity(""/encrypt/status"", String.class);\n\t\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n\t\t}\n']",encrypt;this;Exception;Response;Entity;Bootstrap;That;Status;get;entity,5.820766091346741e-09;3.6088749766349792e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9471025466918945, -5.914699077606201, -6.461648464202881, -5.539963245391846, -5.427842617034912, -0.015310968272387981]",0.9848056435585022
3,"['\t@Test\n\tpublic void testAddPrefix() {\n\t\tassertThat(this.helper.addPrefix(Collections.singletonMap(""bar"", ""spam""), ""foo""))\n\t\t\t\t.isEqualTo(""{bar:spam}foo"");\n\t}\n']",Add;singleton;Prefix;spam;Prefix;helper;this;spam;qual;add,2.7939677238464355e-09;1.1059455573558807e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.4551915228366852e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.912493705749512, -5.82269811630249, -6.411678314208984, -5.494228839874268, -5.470201015472412, -0.015751466155052185]",0.9843719601631165
3,"['\t@Test\n\tpublic void testAddNoPrefix() {\n\t\tassertThat(this.helper.addPrefix(Collections.<String, String>emptyMap(), ""foo""))\n\t\t\t\t.isEqualTo(""foo"");\n\t}\n']",empty;foo;helper;Prefix;Add;That;Prefix;qual;No;Map,2.3283064365386963e-09;1.862645149230957e-09;1.1641532182693481e-09;1.0477378964424133e-09;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-4.656612873077393e-10,5,5,"[-5.902780055999756, -5.798723220825195, -6.385069847106934, -5.489205837249756, -5.457101345062256, -0.015973694622516632]",0.9841532111167908
3,"['\t@Test\n\tpublic void testStripNoPrefix() {\n\t\tassertThat(this.helper.stripPrefix(""foo"")).isEqualTo(""foo"");\n\t}\n']",Prefix;foo;this;Prefix;No;qual;Strip;strip;helper;That,1.6298145055770874e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;-8.731149137020111e-10,5,5,"[-5.918593406677246, -5.803865909576416, -6.420125961303711, -5.533756256103516, -5.445464134216309, -0.015723302960395813]",0.9843997955322266
3,"['\t@Test\n\tpublic void testStripPrefix() {\n\t\tassertThat(this.helper.stripPrefix(""{key:foo}foo"")).isEqualTo(""foo"");\n\t}\n']",helper;Prefix;foo;foo;foo;That;Strip;this;key;qual,2.561137080192566e-09;1.1641532182693481e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-6.984919309616089e-10;-8.149072527885437e-10,5,5,"[-5.920825481414795, -5.834238529205322, -6.427917003631592, -5.519190311431885, -5.461312294006348, -0.015602659434080124]",0.9845184087753296
3,"['\t@Test\n\tpublic void testStripPrefixWithEscape() {\n\t\tassertThat(this.helper.stripPrefix(""{plain}{key:foo}foo""))\n\t\t\t\t.isEqualTo(""{key:foo}foo"");\n\t}\n']",foo;foo;strip;this;key;helper;plain;Prefix;key;qual,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-6.984919309616089e-10,5,5,"[-5.929830074310303, -5.813231468200684, -6.433159351348877, -5.5086798667907715, -5.484541416168213, -0.015576722100377083]",0.9845440983772278
3,"['\t@Test\n\tpublic void testKeysDefaults() {\n\t\tMap<String, String> keys = this.helper.getEncryptorKeys(""foo"", ""bar"", ""spam"");\n\t\tassertThat(keys.get(""name"")).isEqualTo(""foo"");\n\t\tassertThat(keys.get(""profiles"")).isEqualTo(""bar"");\n\t}\n']",profiles;foo;foo;That;this;get;helper;get;Map;That,1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;5.602487362921238e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.874897003173828, -5.800119400024414, -6.3501691818237305, -5.415789604187012, -5.458542823791504, -0.016422344371676445]",0.9837116599082947
3,"['\t@Test\n\tpublic void testKeysWithPrefix() {\n\t\tMap<String, String> keys = this.helper.getEncryptorKeys(""foo"", ""bar"",\n\t\t\t\t""{key:mykey}foo"");\n\t\tassertThat(keys.size()).isEqualTo(3);\n\t\tassertThat(keys.get(""key"")).isEqualTo(""mykey"");\n\t}\n']",Prefix;keys;key;keys;foo;mykey;foo;That;key;get,4.6566128730773926e-09;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10;2.9103830456733704e-11,5,5,"[-5.861651420593262, -5.7722272872924805, -6.320224285125732, -5.394952774047852, -5.451667785644531, -0.016726607456803322]",0.983412504196167
3,"['\t@Test\n\tpublic void testKeysWithPrefixAndEscape() {\n\t\tMap<String, String> keys = this.helper.getEncryptorKeys(""foo"", ""bar"",\n\t\t\t\t""{key:mykey}{plain}{foo:bar}foo"");\n\t\tassertThat(keys.size()).isEqualTo(3);\n\t\tassertThat(keys.get(""key"")).isEqualTo(""mykey"");\n\t}\n']",scape;Prefix;mykey;Keys;size;qual;keys;key;bar;key,2.3283064365386963e-09;1.3969838619232178e-09;1.2514647096395493e-09;1.1641532182693481e-09;9.604264050722122e-10;9.313225746154785e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.898684978485107, -5.817889213562012, -6.384713172912598, -5.433820724487305, -5.498126029968262, -0.015992114320397377]",0.984135091304779
3,"['\t@Test\n\tpublic void testTextWithCurlyBracesNoPrefix() {\n\t\tassertThat(this.helper.stripPrefix(""textwith}brac{es""))\n\t\t\t\t.isEqualTo(""textwith}brac{es"");\n\t}\n']",brac;Prefix;textwith;es;es;qual;Curly;strip;this;No,3.259629011154175e-09;1.6298145055770874e-09;1.1059455573558807e-09;9.313225746154785e-10;4.94765117764473e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.938258647918701, -5.8324480056762695, -6.43754768371582, -5.509857654571533, -5.4768524169921875, -0.015516863204538822]",0.9846030473709106
3,"['\t@Test\n\tpublic void testTextWithCurlyBracesPrefix() {\n\t\tassertThat(\n\t\t\t\tthis.helper.stripPrefix(""{key:foo}{name:bar}textwith}brac{es{and}prefix""))\n\t\t\t\t\t\t.isEqualTo(""textwith}brac{es{and}prefix"");\n\t}\n']",textwith;brac;prefix;and;That;brac;this;strip;qual;foo,1.862645149230957e-09;1.3387762010097504e-09;9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;0.0;0.0,5,5,"[-5.942395210266113, -5.851197242736816, -6.457129001617432, -5.491903781890869, -5.5112481117248535, -0.015349825844168663]",0.984767496585846
3,"['\t@Test\n\tpublic void shouldEncryptUsingApplicationAndProfiles() {\n\n\t\tthis.controller = new EncryptionController(\n\t\t\t\tnew SingleTextEncryptorLocator(Encryptors.text(""application"", ""11"")));\n\n\t\t// when\n\t\tString encrypted = this.controller.encrypt(this.application, this.profiles,\n\t\t\t\tthis.data, TEXT_PLAIN);\n\n\t\t// then\n\t\tassertThat(this.controller.decrypt(this.application, this.profiles, encrypted,\n\t\t\t\tTEXT_PLAIN)).isEqualTo(this.data);\n\t}\n']",should;profiles;Profiles;application;application;decrypt;encrypted;PLAIN;when;TEXT,1.3969838619232178e-09;1.3387762010097504e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.88074254989624, -5.757014751434326, -6.347175121307373, -5.445558071136475, -5.478524208068848, -0.01632840745151043]",0.9838041663169861
3,"['\t@Test(expected = EncryptionTooWeakException.class)\n\tpublic void shouldNotEncryptUsingNoOp() {\n\t\t// given\n\t\tString application = ""unknown"";\n\n\t\t// when\n\t\tthis.controller.encrypt(application, this.profiles, this.data, TEXT_PLAIN);\n\n\t\t// then exception is thrown\n\t}\n']",PLAIN;Using;expected;Encryption;when;thrown;class;Not;application;TEXT,8.381903171539307e-09;6.05359673500061e-09;4.190951585769653e-09;4.190951585769653e-09;3.725290298461914e-09;3.725290298461914e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.3283064365386963e-09;1.862645149230957e-09,5,5,"[-5.929754734039307, -5.783186435699463, -6.422304630279541, -5.499370098114014, -5.522645950317383, -0.01556815393269062]",0.9845523834228516
3,"['\t@Test(expected = EncryptionTooWeakException.class)\n\tpublic void shouldNotDecryptUsingNoOp() {\n\t\t// given\n\t\tString application = ""unknown"";\n\n\t\t// when\n\t\tthis.controller.decrypt(application, this.profiles, this.data, TEXT_PLAIN);\n\n\t\t// then exception is thrown\n\t}\n']",application;Encryption;Decrypt;TEXT;data;exception;this;when;profiles;Op,3.259629011154175e-09;2.7939677238464355e-09;2.473825588822365e-09;1.862645149230957e-09;1.2223608791828156e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.922520637512207, -5.782208442687988, -6.408191680908203, -5.487401962280273, -5.513957500457764, -0.01569959707558155]",0.9844229817390442
3,"['\t@Test\n\tpublic void testDefaults() {\n\t\tTextEncryptor encryptor = this.locator\n\t\t\t\t.locate(Collections.<String, String>emptyMap());\n\t\tassertThat(encryptor.decrypt(encryptor.encrypt(""foo""))).isEqualTo(""foo"");\n\t}\n']",ocate;encrypt;this;empty;Text;That;qual;foo;Map;locator,1.3969838619232178e-09;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;8.731149137020111e-11;0.0;-5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-4.0745362639427185e-10,5,5,"[-5.886829376220703, -5.761923789978027, -6.355971336364746, -5.4412841796875, -5.4723992347717285, -0.01632477343082428]",0.9838077425956726
3,"['\t@Test\n\tpublic void testDifferentKeyDefaultSecret() {\n\t\tthis.locator.setSecretLocator(new SecretLocator() {\n\n\t\t\t@Override\n\t\t\tpublic char[] locate(String secret) {\n\t\t\t\tassertThat(secret).isEqualTo(""changeme"");\n\t\t\t\t// The actual secret for ""mykey"" is the same as the keystore password\n\t\t\t\treturn ""letmein"".toCharArray();\n\t\t\t}\n']",mykey;letmein;Locator;Array;Secret;set;locate;Default;locator;Key,2.2118911147117615e-09;1.862645149230957e-09;1.3387762010097504e-09;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.903698444366455, -5.753961563110352, -6.37056827545166, -5.458792686462402, -5.510480880737305, -0.016041621565818787]",0.9840864539146423
3,"['\t@Test\n\tpublic void testDifferentKeyAndSecret() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(""key"", ""mytestkey"");\n\t\tmap.put(""secret"", ""changeme"");\n\t\tTextEncryptor encryptor = this.locator.locate(map);\n\t\tassertThat(encryptor.decrypt(encryptor.encrypt(""foo""))).isEqualTo(""foo"");\n\t}\n']",changeme;Different;encryptor;Map;secret;map;That;Hash;encryptor;Secret,2.2118911147117615e-09;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.3096723705530167e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.843220233917236, -5.712756633758545, -6.283666610717773, -5.380364418029785, -5.438932418823242, -0.017166364938020706]",0.9829801321029663
3,"['\t@Test\n\tpublic void testEscapedPlaceholdersRemoved() {\n\t\tassertThat(resolvePlaceholders(this.env, ""\\\\${abc}"")).isEqualTo(""${abc}"");\n\t\t// JSON generated from jackson will be double escaped\n\t\tassertThat(resolvePlaceholders(this.env, ""\\\\\\\\${abc}"")).isEqualTo(""${abc}"");\n\t}\n']",escaped;will;jackson;Placeholders;generated;Escaped;qual;abc;Removed;be,3.841705620288849e-09;2.3283064365386963e-09;1.862645149230957e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.280568540096283e-09;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.889564037322998, -5.805595874786377, -6.4044671058654785, -5.466832637786865, -5.499739646911621, -0.01587056554853916]",0.9842545986175537
3,"['\t@Test\n\tpublic void testCanHandle() {\n\t\tassertThat(GitSkipSslValidationCredentialsProvider\n\t\t\t\t.canHandle(""https://github.com/org/repo"")).as(\n\t\t\t\t\t\t""GitSkipSslValidationCredentialsProvider only handles HTTPS uris"")\n\t\t\t\t\t\t.isTrue();\n\t\tassertThat(GitSkipSslValidationCredentialsProvider\n\t\t\t\t.canHandle(""git@github.com:org/repo"")).as(\n\t\t\t\t\t\t""GitSkipSslValidationCredentialsProvider only handles HTTPS uris"")\n\t\t\t\t\t\t.isFalse();\n\t}\n']",com;com;org;repo;org;as;HTTPS;as;can;Handle,9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.848682403564453, -5.72907829284668, -6.290082931518555, -5.355637550354004, -5.462892532348633, -0.01709640584886074]",0.9830489158630371
3,"['\t@Test\n\tpublic void testIsInteractive() {\n\t\tassertThat(this.skipSslValidationCredentialsProvider.isInteractive()).as(\n\t\t\t\t""GitSkipSslValidationCredentialsProvider with no delegate requires no user interaction"")\n\t\t\t\t.isFalse();\n\t}\n']",it;requires;this;Interactive;no;as;False;sl;skip;Provider,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;0.0;0.0;-2.9103830456733704e-11,5,5,"[-5.914834976196289, -5.7911458015441895, -6.400552749633789, -5.491354942321777, -5.492982864379883, -0.015775756910443306]",0.9843480587005615
3,"['\t@Test\n\tpublic void testIsInteractiveWithDelegate() {\n\t\tthis.skipSslValidationCredentialsProvider = new GitSkipSslValidationCredentialsProvider(\n\t\t\t\tthis.mockDelegateCredentialsProvider);\n\n\t\twhen(this.mockDelegateCredentialsProvider.isInteractive()).thenReturn(true);\n\n\t\tassertThat(this.skipSslValidationCredentialsProvider.isInteractive()).as(\n\t\t\t\t""With a delegate provider, isInteractive value depends on the delegate"")\n\t\t\t\t.isTrue();\n\t}\n']",Delegate;redentials;on;True;Delegate;skip;sl;Skip;sl;Validation,7.566995918750763e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.1100277081131935e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.872956275939941, -5.752323150634766, -6.343854904174805, -5.414157867431641, -5.489094257354736, -0.016466904431581497]",0.9836679100990295
3,"['\t@Test\n\tpublic void testSupportsSslFailureInformationalMessage() {\n\t\tCredentialItem informationalMessage = new CredentialItem.InformationalMessage(\n\t\t\t\t""text "" + JGitText.get().sslFailureTrustExplanation + "" more text"");\n\t\tassertThat(this.skipSslValidationCredentialsProvider\n\t\t\t\t.supports(informationalMessage)).as(\n\t\t\t\t\t\t""GitSkipSslValidationCredentialsProvider should always support SSL failure InformationalMessage"")\n\t\t\t\t\t\t.isTrue();\n\n\t\tinformationalMessage = new CredentialItem.InformationalMessage(""unrelated"");\n\t\tassertThat(this.skipSslValidationCredentialsProvider\n\t\t\t\t.supports(informationalMessage)).as(\n\t\t\t\t\t\t""GitSkipSslValidationCredentialsProvider should not support unrelated InformationalMessage items"")\n\t\t\t\t\t\t.isFalse();\n\t}\n']",informational;sl;more;Item;Item;redential;That;supports;Message;unrelated,2.0227162167429924e-09;1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;3.637978807091713e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.873239040374756, -5.7698211669921875, -6.347384929656982, -5.408132076263428, -5.55530309677124, -0.016162211075425148]",0.9839677214622498
3,['\t@Test\n\tpublic void testSupportsSslFailureInformationalMessageWithDelegate() {\n\t\tthis.skipSslValidationCredentialsProvider = new GitSkipSslValidationCredentialsProvider(\n\t\t\t\tthis.mockDelegateCredentialsProvider);\n\n\t\ttestSupportsSslFailureInformationalMessage();\n\t}\n'],Supports;Informational;Provider;Delegate;redentials;this;sl;Message;Provider;Supports,3.026798367500305e-09;2.0954757928848267e-09;1.3969838619232178e-09;8.149072527885437e-10;6.766640581190586e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.892714023590088, -5.766359329223633, -6.372430801391602, -5.461559772491455, -5.482392311096191, -0.016134293749928474]",0.9839950799942017
3,"['\t@Test\n\tpublic void testSupportsSslValidationYesNoTypes() {\n\t\tCredentialItem yesNoType = new CredentialItem.YesNoType(\n\t\t\t\tJGitText.get().sslTrustNow);\n\t\tassertThat(this.skipSslValidationCredentialsProvider.supports(yesNoType)).as(\n\t\t\t\t""GitSkipSslValidationCredentialsProvider should always support the trust now YesNoType item"")\n\t\t\t\t.isTrue();\n\n\t\tyesNoType = new CredentialItem.YesNoType(\n\t\t\t\tMessageFormat.format(JGitText.get().sslTrustForRepo, ""/a/path.git""));\n\t\tassertThat(this.skipSslValidationCredentialsProvider.supports(yesNoType)).as(\n\t\t\t\t""GitSkipSslValidationCredentialsProvider should always support the trust repo YesNoType item"")\n\t\t\t\t.isTrue();\n\n\t\tyesNoType = new CredentialItem.YesNoType(JGitText.get().sslTrustAlways);\n\t\tassertThat(this.skipSslValidationCredentialsProvider.supports(yesNoType)).as(\n\t\t\t\t""GitSkipSslValidationCredentialsProvider should always support the trust always YesNoType item"")\n\t\t\t\t.isTrue();\n\n\t\tyesNoType = new CredentialItem.YesNoType(""unrelated"");\n\t\tassertThat(this.skipSslValidationCredentialsProvider.supports(yesNoType)).as(\n\t\t\t\t""GitSkipSslValidationCredentialsProvider should not support unrelated YesNoType items"")\n\t\t\t\t.isFalse();\n\t}\n']",Yes;repo;always;git;supports;always;Supports;Yes;should;new,6.984919309616089e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.839859485626221, -5.720644950866699, -6.318042278289795, -5.367784023284912, -5.561717510223389, -0.01663457602262497]",0.9835030436515808
3,['\t@Test\n\tpublic void testSupportsYesNoTypeWithDelegate() {\n\t\tthis.skipSslValidationCredentialsProvider = new GitSkipSslValidationCredentialsProvider(\n\t\t\t\tthis.mockDelegateCredentialsProvider);\n\n\t\ttestSupportsSslValidationYesNoTypes();\n\t}\n'],Delegate;Validation;Types;No;this;Provider;No;sl;Yes;Skip,7.566995918750763e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.9007248878479, -5.781452178955078, -6.379660129547119, -5.461448669433594, -5.47833776473999, -0.01606954075396061]",0.9840589761734009
3,"['\t@Test\n\tpublic void testSupportsUnrelatedCredentialItemTypes() {\n\t\tCredentialItem usernameCredentialItem = new CredentialItem.Username();\n\n\t\tboolean supportsItems = this.skipSslValidationCredentialsProvider\n\t\t\t\t.supports(usernameCredentialItem);\n\n\t\tassertThat(supportsItems).as(\n\t\t\t\t""Credential item types not related to SSL validation skipping should not be supported"")\n\t\t\t\t.isFalse();\n\t}\n']",Types;Unrelated;supports;boolean;Items;skipping;Username;to;Item;redential,4.6566128730773926e-09;3.4924596548080444e-09;2.9103830456733704e-09;2.561137080192566e-09;1.979060471057892e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.5133991837501526e-09;1.5133991837501526e-09,5,5,"[-5.912015914916992, -5.821979522705078, -6.432060241699219, -5.5077948570251465, -5.506150722503662, -0.01551404595375061]",0.9846056699752808
3,"['\t@Test\n\tpublic void testSupportsUnrelatedCredentialItemTypesWithDelegate() {\n\t\tthis.skipSslValidationCredentialsProvider = new GitSkipSslValidationCredentialsProvider(\n\t\t\t\tthis.mockDelegateCredentialsProvider);\n\t\tCredentialItem usernameCredentialItem = new CredentialItem.Username();\n\n\t\twhen(this.mockDelegateCredentialsProvider.supports(usernameCredentialItem))\n\t\t\t\t.thenReturn(true);\n\n\t\tboolean supportsItems = this.skipSslValidationCredentialsProvider\n\t\t\t\t.supports(usernameCredentialItem);\n\n\t\tassertThat(supportsItems).as(\n\t\t\t\t""GitSkipSslValidationCredentialsProvider must support the types supported by its delegate CredentialsProvider"")\n\t\t\t\t.isTrue();\n\t}\n']",this;this;Provider;by;Delegate;delegate;Skip;Git;supports;Provider,6.984919309616089e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.889272689819336, -5.7910075187683105, -6.379204750061035, -5.437977313995361, -5.534404277801514, -0.01594354398548603]",0.9841827750205994
3,['\t@Test\n\tpublic void testCheckCoreVersusJdbcVersionsGood() {\n\t\tVersionUtils.setThrownOnErrors(true);\n\t\tVersionUtils.checkCoreVersusJdbcVersions(VersionUtils.getCoreVersion());\n\t}\n'],On;db;Versions;Versus;Core;Core;Core;check;Check;Good,2.0954757928848267e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.913782119750977, -5.795726776123047, -6.382516384124756, -5.493112087249756, -5.485869407653809, -0.015817763283848763]",0.9843066930770874
3,"['\t@Test(expected = IllegalStateException.class)\n\tpublic void testCheckCoreVersusJdbcVersionsBad() {\n\t\tVersionUtils.setThrownOnErrors(true);\n\t\tVersionUtils.checkCoreVersusJdbcVersions(""xxx"");\n\t}\n']",xxx;Versus;db;Versions;Core;Illegal;expected;Exception;Check;check,1.862645149230957e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.927041530609131, -5.831908702850342, -6.405862808227539, -5.515499114990234, -5.492326259613037, -0.015512637794017792]",0.9846071600914001
3,['\t@Test\n\tpublic void testCheckCoreVersusAndroidVersionsGood() {\n\t\tVersionUtils.setThrownOnErrors(true);\n\t\tVersionUtils.checkCoreVersusAndroidVersions(VersionUtils.getCoreVersion());\n\t}\n'],Errors;Core;Versions;true;Android;Thrown;Version;Version;Versions;Versus,3.958120942115784e-09;2.3283064365386963e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.943039894104004, -5.810659408569336, -6.417842388153076, -5.538919448852539, -5.48688268661499, -0.01544185820966959]",0.9846768975257874
3,"['\t@Test(expected = IllegalStateException.class)\n\tpublic void testCheckCoreVersusAndroidVersionsBad() {\n\t\tVersionUtils.setThrownOnErrors(true);\n\t\tVersionUtils.checkCoreVersusAndroidVersions(""xxx"");\n\t}\n']",Android;xxx;Android;Bad;Versus;State;Version;Utils;Core;check,2.3865140974521637e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.529727786779404e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.948690414428711, -5.849588394165039, -6.428613662719727, -5.54418420791626, -5.491841793060303, -0.015251210890710354]",0.9848645925521851
3,"['\t@Test\n\tpublic void testConversions() throws Exception {\n\t\tField[] fields = Javax.class.getDeclaredFields();\n\t\tfor (Field field : fields) {\n\t\t\tDatabaseFieldConfig config = new JavaxPersistenceImpl().createFieldConfig(databaseType, field);\n\t\t\tif (field.getName().equals(""generatedId"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertTrue(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""id"")) {\n\t\t\t\tassertTrue(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""stuff"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertEquals(STUFF_FIELD_NAME, config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""unknown"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getDataPersister());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""foreignManyToOne"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertTrue(config.isForeign());\n\t\t\t\tassertFalse(config.isForeignCollection());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getDataPersister());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""foreignOneToOne"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertTrue(config.isForeign());\n\t\t\t\tassertFalse(config.isForeignCollection());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getDataPersister());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""foreignOneToMany"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertTrue(config.isForeignCollection());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getDataPersister());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertNull(config.getForeignCollectionForeignFieldName());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""mappedByField"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertTrue(config.isForeignCollection());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getDataPersister());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertEquals(MAPPED_BY_FIELD_NAME, config.getForeignCollectionForeignFieldName());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""joinFieldName"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertTrue(config.isForeign());\n\t\t\t\tassertFalse(config.isForeignCollection());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getDataPersister());\n\t\t\t\tassertEquals(field.getName(), config.getFieldName());\n\t\t\t\tassertEquals(JOIN_FIELD_NAME, config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""columnDefinition"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertEquals(COLUMN_DEFINITION, config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""uniqueColumn"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertTrue(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""nullableColumn"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertFalse(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""uniqueJoinColumn"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertTrue(config.isForeign());\n\t\t\t\tassertFalse(config.isForeignCollection());\n\t\t\t\tassertTrue(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""nullableJoinColumn"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertTrue(config.isForeign());\n\t\t\t\tassertFalse(config.isForeignCollection());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertFalse(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""ourEnumOrdinal"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t\tassertTrue(config.getDataPersister() instanceof EnumIntegerType);\n\t\t\t} else if (field.getName().equals(""ourEnumString"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t\tassertTrue(config.getDataPersister() instanceof EnumStringType);\n\t\t\t} else if (field.getName().equals(""version"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertTrue(config.isVersion());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""basic"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertTrue(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else if (field.getName().equals(""basicNotOptional"")) {\n\t\t\t\tassertFalse(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertFalse(config.isForeign());\n\t\t\t\tassertFalse(config.isUnique());\n\t\t\t\tassertFalse(config.isCanBeNull());\n\t\t\t\tassertFalse(config.isVersion());\n\t\t\t\tassertNull(config.getColumnName());\n\t\t\t\tassertNull(config.getColumnDefinition());\n\t\t\t} else {\n\t\t\t\tSystem.err.println(""\\n\\n\\nUnknown field: "" + field.getName());\n\t\t\t}\n\t\t}\n\t}\n']",Null;stuff;Persistence;Generated;unknown;Javax;Column;Column;Conversions;NAME,8.731149137020111e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8116254806518555, -5.665736198425293, -6.2427239418029785, -5.272676467895508, -5.512873649597168, -0.017720239236950874]",0.982435941696167
3,"['\t@Test\n\tpublic void testTableName() {\n\t\tJavaxPersistenceConfigurer configurer = new JavaxPersistenceImpl();\n\t\tassertEquals(JAVAX_ENTITY_NAME, configurer.getEntityName(Javax.class));\n\t\tassertNull(configurer.getEntityName(EntityNoName.class));\n\t}\n']",Entity;Entity;Equals;Persistence;Entity;AVAX;avax;configurer;class;configurer,2.6775524020195007e-09;2.561137080192566e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.881139755249023, -5.78410530090332, -6.368029594421387, -5.475760459899902, -5.465559005737305, -0.01612960174679756]",0.9839997887611389
3,"['\t@Test\n\tpublic void testUpperCaseFieldNames() throws Exception {\n\t\tField[] fields = Javax.class.getDeclaredFields();\n\t\tUpperCaseFieldDatabaseType ucDatabaseType = new UpperCaseFieldDatabaseType();\n\t\tfor (Field field : fields) {\n\t\t\tDatabaseFieldConfig config = new JavaxPersistenceImpl().createFieldConfig(ucDatabaseType, field);\n\t\t\tif (field.getName().equals(""id"")) {\n\t\t\t\tassertTrue(config.isId());\n\t\t\t\tassertFalse(config.isGeneratedId());\n\t\t\t\tassertEquals(""ID"", config.getFieldName());\n\t\t\t}\n\t\t}\n\t}\n']",Upper;uc;Case;Impl;fields;Database;Names;Config;create;id,8.731149137020111e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.851931095123291, -5.748167991638184, -6.291066646575928, -5.364205837249756, -5.45873498916626, -0.01699960231781006]",0.9831441640853882
3,"['\t@Test\n\tpublic void testSerializableClass() throws SQLException {\n\t\t@SuppressWarnings(""unused"")\n\t\tDao<SerializableWrapper, Integer> dao = createDao(SerializableWrapper.class, true);\n\t\tSerializableStuff stuff = new SerializableStuff();\n\t\tstuff.field1 = 12345;\n\t\tstuff.field2 = ""oejwepfjw"";\n\t\tSerializableWrapper wrapper = new SerializableWrapper();\n\t\twrapper.stuff = stuff;\n\n\t\tassertEquals(1, dao.create(wrapper));\n\n\t\tSerializableWrapper result = dao.queryForId(wrapper.id);\n\t\tassertNotNull(result);\n\t\tassertEquals(wrapper.id, result.id);\n\t\tassertEquals(wrapper.stuff, result.stuff);\n\t}\n']",Wrapper;ao;create;wrapper;ao;For;wrapper;ception;ao;Serializable,4.94765117764473e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.838197708129883, -5.7172722816467285, -6.286956310272217, -5.337277412414551, -5.466042518615723, -0.017247918993234634]",0.9828999638557434
3,"['\t@Test\n\tpublic void testCreate() throws Exception {\n\t\tDao<One, Integer> dao = createDao(One.class, true);\n\t\tOne one = new One();\n\t\tString stuff = ""fewpfjewfew"";\n\t\tone.stuff = stuff;\n\t\tone.setDao(dao);\n\t\tassertEquals(1, one.create());\n\t}\n']",jewfew;ao;stuff;One;Exception;ao;One;set;new;class,1.076841726899147e-09;9.313225746154785e-10;4.656612873077393e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.857745170593262, -5.7248215675354, -6.309126853942871, -5.411466121673584, -5.430540084838867, -0.016929514706134796]",0.9832130074501038
3,"['\t@Test(expected = SQLException.class)\n\tpublic void testCreateNoDao() throws Exception {\n\t\tOne one = new One();\n\t\tString stuff = ""fewpfjewfew"";\n\t\tone.stuff = stuff;\n\t\tone.create();\n\t}\n']",ao;expected;jewfew;stuff;one;stuff;class;create;new;ception,2.3283064365386963e-09;2.0954757928848267e-09;1.4551915228366852e-09;1.1641532182693481e-09;9.89530235528946e-10;6.984919309616089e-10;4.656612873077393e-10;4.5838532969355583e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.903759479522705, -5.792652606964111, -6.375852584838867, -5.476919651031494, -5.465394973754883, -0.01602167822420597]",0.9841058850288391
3,"['\t@Test\n\tpublic void testUpdate() throws Exception {\n\t\tDao<One, Integer> dao = createDao(One.class, true);\n\t\tOne one = new One();\n\t\tString stuff1 = ""fewpfjewfew"";\n\t\tone.stuff = stuff1;\n\t\tassertEquals(1, dao.create(one));\n\t\tString stuff2 = ""fjpfejpwewpfjewfew"";\n\t\tone.stuff = stuff2;\n\t\tassertEquals(1, one.update());\n\t\tOne one2 = dao.queryForId(one.id);\n\t\tassertEquals(stuff2, one2.stuff);\n\t}\n']",ao;Exception;jpfejp;For;Update;One;stuff;jewfew;one;One,1.862645149230957e-09;8.149072527885437e-10;6.548361852765083e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.8411407470703125, -5.726984977722168, -6.296252250671387, -5.368638038635254, -5.468069076538086, -0.01702960580587387]",0.9831146001815796
3,"['\t@Test\n\tpublic void testUpdateId() throws Exception {\n\t\tDao<One, Integer> dao = createDao(One.class, true);\n\t\tOne one = new One();\n\t\tString stuff1 = ""fewpfjewfew"";\n\t\tone.stuff = stuff1;\n\t\tassertEquals(1, dao.create(one));\n\t\tint id = one.id;\n\t\tassertNotNull(dao.queryForId(id));\n\t\tassertEquals(1, one.updateId(id + 1));\n\t\tassertNull(dao.queryForId(id));\n\t\tassertNotNull(dao.queryForId(id + 1));\n\t}\n']",ao;few;One;ao;One;one;jewfew;Update;update;Not,5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.82125186920166, -5.701636791229248, -6.266160488128662, -5.347312927246094, -5.452468395233154, -0.017401166260242462]",0.9827494621276855
3,"['\t@Test\n\tpublic void testDelete() throws Exception {\n\t\tDao<One, Integer> dao = createDao(One.class, true);\n\t\tOne one = new One();\n\t\tString stuff1 = ""fewpfjewfew"";\n\t\tone.stuff = stuff1;\n\t\tassertEquals(1, dao.create(one));\n\t\tassertNotNull(dao.queryForId(one.id));\n\t\tassertEquals(1, one.delete());\n\t\tassertNull(dao.queryForId(one.id));\n\t}\n']",One;ao;Null;one;few;ao;ao;One;Null;stuff,6.984919309616089e-10;5.238689482212067e-10;3.92901711165905e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6921043172478676e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.829112529754639, -5.713557720184326, -6.283382415771484, -5.373636245727539, -5.448154926300049, -0.017197182402014732]",0.9829498529434204
3,"['\t@Test\n\tpublic void testToString() throws Exception {\n\t\tDao<One, Integer> dao = createDao(One.class, true);\n\t\tOne one = new One();\n\t\tString stuff1 = ""fewpfjewfew"";\n\t\tone.stuff = stuff1;\n\t\tassertEquals(1, dao.create(one));\n\t\tString str = one.objectToString();\n\t\tassertTrue(str.contains(""id="" + one.id));\n\t\tassertTrue(str.contains(""stuff="" + stuff1));\n\t}\n']",One;ao;few;One;create;stuff;one;Equals;str;true,6.984919309616089e-10;6.548361852765083e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.127773430198431e-10;1.0186340659856796e-10,5,5,"[-5.8331427574157715, -5.72379732131958, -6.2872138023376465, -5.367679595947266, -5.438126087188721, -0.017216047272086143]",0.9829313158988953
3,"['\t@Test\n\tpublic void testObjectEquals() throws Exception {\n\t\tDao<One, Integer> dao = createDao(One.class, true);\n\t\tOne one = new One();\n\t\tString stuff1 = ""fewpfjewfew"";\n\t\tone.stuff = stuff1;\n\t\tassertEquals(1, dao.create(one));\n\t\tassertTrue(one.objectsEqual(one));\n\t}\n']",jewfew;Equals;ao;Equals;ao;one;few;create;new;stuff,1.9208528101444244e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.864728927612305, -5.749438762664795, -6.326675891876221, -5.412425994873047, -5.452457904815674, -0.0166955403983593]",0.9834430813789368
3,"['\t@Test(expected = IllegalArgumentException.class)\n\tpublic void testObjectEqualsNoDao() {\n\t\tOne one = new One();\n\t\tString stuff1 = ""fewpfjewfew"";\n\t\tone.stuff = stuff1;\n\t\tone.objectToString();\n\t}\n']",jewfew;No;one;Argument;One;class;Illegal;Object;new;few,1.8044374883174896e-09;1.3969838619232178e-09;1.1350493878126144e-09;1.1059455573558807e-09;9.604264050722122e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10,5,5,"[-5.908390522003174, -5.796478271484375, -6.383026123046875, -5.471011638641357, -5.486894130706787, -0.0159185528755188]",0.9842075705528259
3,"['\t@Test\n\tpublic void testExtractId() throws Exception {\n\t\tDao<One, Integer> dao = createDao(One.class, true);\n\t\tOne one = new One();\n\t\tString stuff1 = ""fewpfjewfew"";\n\t\tone.stuff = stuff1;\n\t\tassertEquals(1, dao.create(one));\n\t\tassertEquals(one.id, (int) one.extractId());\n\t}\n']",Extract;One;Equals;ao;ao;ao;One;one;stuff;create,8.149072527885437e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.850929260253906, -5.726720333099365, -6.307281494140625, -5.40005350112915, -5.445799350738525, -0.01693127304315567]",0.9832113981246948
3,"['\t@Test\n\tpublic void testForeign() throws Exception {\n\t\tDao<One, Integer> oneDao = createDao(One.class, true);\n\t\tDao<ForeignDaoEnabled, Integer> foreignDao = createDao(ForeignDaoEnabled.class, true);\n\n\t\tOne one = new One();\n\t\tString stuff = ""fewpfjewfew"";\n\t\tone.stuff = stuff;\n\t\tone.setDao(oneDao);\n\t\tassertEquals(1, one.create());\n\n\t\tForeignDaoEnabled foreign = new ForeignDaoEnabled();\n\t\tforeign.one = one;\n\t\tforeign.setDao(foreignDao);\n\t\tassertEquals(1, foreign.create());\n\n\t\tForeignDaoEnabled foreign2 = foreignDao.queryForId(foreign.id);\n\t\tassertNotNull(foreign2);\n\t\tassertEquals(one.id, foreign2.one.id);\n\t\tassertNull(foreign2.one.stuff);\n\t\tassertEquals(1, foreign2.one.refresh());\n\t\tassertEquals(stuff, foreign2.one.stuff);\n\t}\n']",ao;few;stuff;ao;ao;stuff;stuff;Null;one;set,4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;2.9831426218152046e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.830968856811523, -5.706689834594727, -6.295416831970215, -5.377536296844482, -5.472385406494141, -0.017068982124328613]",0.9830759763717651
3,"['\t@Test\n\tpublic void testException() {\n\t\tThrowable cause = new Throwable();\n\t\tString msg = ""hello"";\n\t\tSQLException e = SqlExceptionUtil.create(msg, cause);\n\t\tassertEquals(msg, e.getMessage());\n\t\tassertEquals(cause, e.getCause());\n\t}\n']",cause;Equals;cause;Equals;create;get;Cause;Util;get;Exception,2.3283064365386963e-09;1.862645149230957e-09;1.7462298274040222e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0,5,5,"[-5.84894323348999, -5.746510028839111, -6.296132564544678, -5.404996871948242, -5.438270568847656, -0.016903378069400787]",0.983238697052002
3,"['\t@Test\n\tpublic void testExceptionWithSQLException() {\n\t\tString sqlReason = ""sql exception message"";\n\t\tString sqlState = ""sql exception state"";\n\t\tThrowable cause = new SQLException(sqlReason, sqlState);\n\t\tString msg = ""hello"";\n\t\tSQLException e = SqlExceptionUtil.create(msg, cause);\n\t\tassertEquals(msg, e.getMessage());\n\t\tassertEquals(sqlState, e.getSQLState());\n\t\tassertEquals(cause, e.getCause());\n\t}\n']",exception;hello;Exception;state;msg;create;sql;cause;sql;sql,1.3969838619232178e-09;1.1059455573558807e-09;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.843894004821777, -5.732362270355225, -6.30519962310791, -5.39582633972168, -5.4867119789123535, -0.01678065024316311]",0.9833593368530273
3,"['\t@Test\n\tpublic void testConstructor() throws Exception {\n\t\t@SuppressWarnings({ ""rawtypes"" })\n\t\tConstructor[] constructors = SqlExceptionUtil.class.getDeclaredConstructors();\n\t\tassertEquals(1, constructors.length);\n\t\tconstructors[0].setAccessible(true);\n\t\tconstructors[0].newInstance();\n\t}\n']",arnings;constructors;class;Util;length;Constructor;constructors;ql;rawtypes;set,7.566995918750763e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;2.9103830456733704e-11,5,5,"[-5.861822605133057, -5.757662296295166, -6.324878692626953, -5.408333778381348, -5.448997974395752, -0.016714414581656456]",0.9834246039390564
3,"['\t@Test\n\tpublic void testTransactionManager() throws Exception {\n\t\tConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(false);\n\t\tSavepoint savePoint = createMock(Savepoint.class);\n\t\texpect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);\n\t\tconn.commit(savePoint);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType);\n\t\texpect(connectionSource.getReadWriteConnection(null)).andReturn(conn);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconnectionSource.releaseConnection(conn);\n\t\treplay(connectionSource, conn, savePoint);\n\t\tTransactionManager tm = new TransactionManager(connectionSource);\n\t\ttm.callInTransaction(new Callable<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void call() {\n\t\t\t\treturn null;\n\t\t\t}\n']",ock;Times;Transaction;Transaction;Callable;Manager;Source;Supported;Point;create,8.731149137020111e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.829123020172119, -5.676413536071777, -6.2648186683654785, -5.341950416564941, -5.490556716918945, -0.01732981763780117]",0.9828193783760071
3,"['\t@Test\n\tpublic void testTransactionManagerTableName() throws Exception {\n\t\tConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(false);\n\t\tSavepoint savePoint = createMock(Savepoint.class);\n\t\texpect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);\n\t\tconn.commit(savePoint);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType);\n\t\texpect(connectionSource.getReadWriteConnection(FOO_TABLE_NAME)).andReturn(conn);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconnectionSource.releaseConnection(conn);\n\t\treplay(connectionSource, conn, savePoint);\n\t\tTransactionManager tm = new TransactionManager(connectionSource);\n\t\ttm.callInTransaction(FOO_TABLE_NAME, new Callable<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void call() {\n\t\t\t\treturn null;\n\t\t\t}\n']",Manager;Name;Transaction;create;tm;Supported;commit;TABLE;name;expect,1.6298145055770874e-09;9.89530235528946e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.829987049102783, -5.683779716491699, -6.271564960479736, -5.3483076095581055, -5.504650592803955, -0.01719917356967926]",0.9829478859901428
3,"['\t@Test\n\tpublic void testTransactionManagerSavePointNull() throws Exception {\n\t\tConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(false);\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(null);\n\t\tconn.commit(null);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType);\n\t\texpect(connectionSource.getReadWriteConnection(null)).andReturn(conn);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconnectionSource.releaseConnection(conn);\n\t\treplay(connectionSource, conn);\n\t\tTransactionManager tm = new TransactionManager(connectionSource);\n\t\ttm.callInTransaction(new Callable<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void call() {\n\t\t\t\treturn null;\n\t\t\t}\n']",Save;Supported;Callable;ock;connection;expect;and;Transaction;Special;Type,1.1641532182693481e-09;8.440110832452774e-10;7.8580342233181e-10;6.693881005048752e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.836403846740723, -5.688732147216797, -6.272005558013916, -5.34597110748291, -5.497777462005615, -0.0172019861638546]",0.9829451441764832
3,"['\t@Test\n\tpublic void testTransactionManagerRollback() throws Exception {\n\t\tConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(false);\n\t\tSavepoint savePoint = createMock(Savepoint.class);\n\t\texpect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);\n\t\tconn.rollback(savePoint);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType);\n\t\texpect(connectionSource.getReadWriteConnection(null)).andReturn(conn);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconnectionSource.releaseConnection(conn);\n\t\treplay(connectionSource, conn, savePoint);\n\t\tTransactionManager tm = new TransactionManager(connectionSource);\n\t\ttry {\n\t\t\ttm.callInTransaction(new Callable<Void>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\tthrow new SQLException(""you better roll back!!"");\n\t\t\t\t}\n']",Manager;Commit;Auto;better;Database;Point;class;expect;expect;expect,2.3283064365386963e-09;8.440110832452774e-10;4.220055416226387e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6193447411060333e-10;2.510205376893282e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.835934162139893, -5.685065269470215, -6.280517101287842, -5.350526332855225, -5.518451690673828, -0.017092421650886536]",0.9830528497695923
3,"['\t@Test\n\tpublic void testTransactionManagerRollbackNullSavePoint() throws Exception {\n\t\tConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(false);\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(null);\n\t\tconn.rollback(null);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType);\n\t\texpect(connectionSource.getReadWriteConnection(null)).andReturn(conn);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconnectionSource.releaseConnection(conn);\n\t\treplay(connectionSource, conn);\n\t\tTransactionManager tm = new TransactionManager(connectionSource);\n\t\ttry {\n\t\t\ttm.callInTransaction(new Callable<Void>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\tthrow new SQLException(""you better roll back!!"");\n\t\t\t\t}\n']",Rollback;Manager;Point;Transaction;Database;set;class;connection;Database;back,1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.41970007866621e-10;3.383320290595293e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.833157062530518, -5.68565034866333, -6.268848896026611, -5.343121528625488, -5.50562047958374, -0.017209485173225403]",0.9829376339912415
3,"['\t@Test\n\tpublic void testTransactionManagerRollbackOtherException() throws Exception {\n\t\tConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(false);\n\t\tSavepoint savePoint = createMock(Savepoint.class);\n\t\texpect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);\n\t\tconn.rollback(savePoint);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType);\n\t\texpect(connectionSource.getReadWriteConnection(null)).andReturn(conn);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconnectionSource.releaseConnection(conn);\n\t\treplay(connectionSource, conn, savePoint);\n\t\tTransactionManager tm = new TransactionManager(connectionSource);\n\t\ttry {\n\t\t\ttm.callInTransaction(new Callable<Void>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\tthrow new Exception(""you better roll back!!"");\n\t\t\t\t}\n']",Other;Transaction;conn;better;Void;Callable;Rollback;Point;Database;connection,6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.9281287677586079e-10,5,5,"[-5.838817119598389, -5.683052062988281, -6.287869930267334, -5.358952045440674, -5.524408340454102, -0.01701214350759983]",0.9831317663192749
3,"['\t@Test\n\tpublic void testTransactionManagerAutoCommitSupported() throws Exception {\n\t\tConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(true);\n\t\texpect(conn.isAutoCommit()).andReturn(false);\n\t\tSavepoint savePoint = createMock(Savepoint.class);\n\t\texpect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);\n\t\tconn.commit(savePoint);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType);\n\t\texpect(connectionSource.getReadWriteConnection(null)).andReturn(conn);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconnectionSource.releaseConnection(conn);\n\t\treplay(connectionSource, conn, savePoint);\n\t\tTransactionManager tm = new TransactionManager(connectionSource);\n\t\ttm.callInTransaction(new Callable<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void call() {\n\t\t\t\treturn null;\n\t\t\t}\n']",ock;expect;Point;Callable;Source;Transaction;release;Source;conn;Commit,5.238689482212067e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;1.964508555829525e-10;1.8553691916167736e-10,5,5,"[-5.8317461013793945, -5.6821980476379395, -6.275594711303711, -5.348735809326172, -5.507570743560791, -0.01717749610543251]",0.9829692244529724
3,"['\t@Test\n\tpublic void testTransactionManagerAutoCommitOn() throws Exception {\n\t\tConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(true);\n\t\texpect(conn.isAutoCommit()).andReturn(true);\n\t\tconn.setAutoCommit(false);\n\t\tSavepoint savePoint = createMock(Savepoint.class);\n\t\texpect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);\n\t\tconn.commit(savePoint);\n\t\tconn.setAutoCommit(true);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType);\n\t\texpect(connectionSource.getReadWriteConnection(null)).andReturn(conn);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconnectionSource.releaseConnection(conn);\n\t\treplay(connectionSource, conn, savePoint);\n\t\tTransactionManager tm = new TransactionManager(connectionSource);\n\t\ttm.callInTransaction(new Callable<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void call() {\n\t\t\t\treturn null;\n\t\t\t}\n']",Transaction;Source;commit;Commit;ock;Transaction;Commit;Database;any;name,2.7939677238464355e-09;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;3.055902197957039e-10;2.6193447411060333e-10;2.546585164964199e-10;2.473825588822365e-10,5,5,"[-5.833773136138916, -5.682393550872803, -6.27142858505249, -5.338011264801025, -5.507249355316162, -0.017232216894626617]",0.9829154014587402
3,['\t@Test\n\tpublic void testTransactionManagerSpringWiring() {\n\t\tTransactionManager tm = new TransactionManager();\n\t\ttm.setConnectionSource(connectionSource);\n\t\ttm.initialize();\n\t}\n'],iring;Spring;Connection;Manager;new;tm;Transaction;Source;Manager;set,2.0954757928848267e-09;1.3969838619232178e-09;8.731149137020111e-10;8.149072527885437e-10;4.656612873077393e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;-8.731149137020111e-11,5,5,"[-5.878316879272461, -5.716475486755371, -6.330535888671875, -5.454570770263672, -5.419663906097412, -0.01671617291867733]",0.9834227561950684
3,['\t@Test(expected = IllegalStateException.class)\n\tpublic void testTransactionManagerNoSet() {\n\t\tTransactionManager tm = new TransactionManager();\n\t\ttm.initialize();\n\t}\n'],State;Transaction;Exception;Set;tm;Manager;Transaction;No;new;Transaction,1.367880031466484e-09;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;0.0;-5.093170329928398e-11;-5.820766091346741e-11,5,5,"[-5.888635635375977, -5.746035575866699, -6.345837593078613, -5.47072696685791, -5.444138526916504, -0.01638340950012207]",0.98375004529953
3,"['\t@Test\n\tpublic void testDaoTransactionManagerCommitted() throws Exception {\n\t\tif (connectionSource == null) {\n\t\t\treturn;\n\t\t}\n\t\tTransactionManager mgr = new TransactionManager(connectionSource);\n\t\tfinal Dao<Foo, Integer> fooDao = createDao(Foo.class, true);\n\t\ttestTransactionManager(mgr, null, fooDao);\n\t}\n']",ao;ao;ao;Manager;connection;oo;Transaction;gr;Transaction;foo,6.984919309616089e-10;6.693881005048752e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.8654093742370605, -5.7254719734191895, -6.322943210601807, -5.4275054931640625, -5.445314407348633, -0.016742199659347534]",0.9833971858024597
3,"['\t@Test\n\tpublic void testRollBack() throws Exception {\n\t\tif (connectionSource == null) {\n\t\t\treturn;\n\t\t}\n\t\tTransactionManager mgr = new TransactionManager(connectionSource);\n\t\tfinal Dao<Foo, Integer> fooDao = createDao(Foo.class, true);\n\t\ttestTransactionManager(mgr, new RuntimeException(""What!!  I protest!!""), fooDao);\n\t}\n']",connection;Roll;Source;ao;Manager;oo;gr;protest;Transaction;null,3.259629011154175e-09;2.0954757928848267e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.881478786468506, -5.752029895782471, -6.357518196105957, -5.456964492797852, -5.477339744567871, -0.01627926714718342]",0.9838523864746094
3,"['\t@Test\n\tpublic void testSpringWiredRollBack() throws Exception {\n\t\tif (connectionSource == null) {\n\t\t\treturn;\n\t\t}\n\t\tTransactionManager mgr = new TransactionManager();\n\t\tmgr.setConnectionSource(connectionSource);\n\t\tmgr.initialize();\n\t\tfinal Dao<Foo, Integer> fooDao = createDao(Foo.class, true);\n\t\ttestTransactionManager(mgr, new RuntimeException(""What!!  I protest!!""), fooDao);\n\t}\n']",Roll;Spring;oo;if;protest;gr;oo;connection;ao;Manager,1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.878917217254639, -5.739025592803955, -6.3456268310546875, -5.435798168182373, -5.484551906585693, -0.016412140801548958]",0.9837216734886169
3,"['\t@Test\n\tpublic void testNonRuntimeExceptionWiredRollBack() throws Exception {\n\t\tif (connectionSource == null) {\n\t\t\treturn;\n\t\t}\n\t\tTransactionManager mgr = new TransactionManager();\n\t\tmgr.setConnectionSource(connectionSource);\n\t\tmgr.initialize();\n\t\tfinal Dao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\ttestTransactionManager(mgr, new Exception(""What!!  I protest via an Exception!!""), dao);\n\t}\n']",protest;Runtime;connection;gr;What;initialize;Transaction;null;create;Roll,1.1641532182693481e-09;1.0477378964424133e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.8562575355172157e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.868341445922852, -5.7327117919921875, -6.329922676086426, -5.417180061340332, -5.470606327056885, -0.01663387194275856]",0.9835036993026733
3,"['\t@Test\n\tpublic void testTransactionWithinTransaction() throws Exception {\n\t\tif (connectionSource == null) {\n\t\t\treturn;\n\t\t}\n\t\tfinal TransactionManager mgr = new TransactionManager(connectionSource);\n\t\tfinal Dao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tmgr.callInTransaction(new Callable<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void call() throws Exception {\n\t\t\t\ttestTransactionManager(mgr, null, dao);\n\t\t\t\treturn null;\n\t\t\t}\n']",oo;Transaction;ao;if;Source;Manager;new;Transaction;Transaction;Manager,1.0477378964424133e-09;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.877640724182129, -5.7278666496276855, -6.335396766662598, -5.43828821182251, -5.47722053527832, -0.016490943729877472]",0.9836443066596985
3,"['\t@Test\n\tpublic void testTransactionWithinTransactionFails() throws Exception {\n\t\tif (connectionSource == null) {\n\t\t\treturn;\n\t\t}\n\t\tfinal TransactionManager mgr = new TransactionManager(connectionSource);\n\t\tfinal Dao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\ttry {\n\t\t\tmgr.callInTransaction(new Callable<Void>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\tdao.create(new Foo());\n\t\t\t\t\tmgr.callInTransaction(new Callable<Void>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\t\t\tdao.create(new Foo());\n\t\t\t\t\t\t\tthrow new SQLException(""Exception ahoy!"");\n\t\t\t\t\t\t}\n']",Callable;ails;connection;Transaction;Transaction;oo;Transaction;ao;final;ception,1.0622898116707802e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-5.860651969909668, -5.70037841796875, -6.299888610839844, -5.370235443115234, -5.515996932983398, -0.01684664562344551]",0.9832944869995117
3,"['\t@Test\n\tpublic void testConnectionLeakCreateList() throws Exception {\n\t\tfinal Dao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tfinal List<Foo> list = new ArrayList<Foo>();\n\t\tFoo foo1 = new Foo();\n\t\tfoo1.val = 1;\n\t\tlist.add(foo1);\n\t\tFoo foo2 = new Foo();\n\t\tfoo2.val = 2;\n\t\tlist.add(foo2);\n\t\tFoo foo3 = new Foo();\n\t\tfoo3.val = 3;\n\t\tlist.add(foo3);\n\t\tassertTrue(connectionSource.isOkay());\n\t\tassertEquals(0, connectionSource.getConnectionCount());\n\t\tTransactionManager.callInTransaction(connectionSource, new Callable<Boolean>() {\n\t\t\t@Override\n\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\treturn dao.create(list) >= 0;\n\t\t\t}\n']",Foo;connection;Create;ao;oo;List;ao;create;List;oo,6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.8411054611206055, -5.698416709899902, -6.283203125, -5.349547863006592, -5.485454559326172, -0.017167653888463974]",0.9829787611961365
3,"['\t@Test\n\tpublic void testNestedTransactions() throws Exception {\n\t\tfinal Dao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tfinal Foo foo = new Foo();\n\t\tassertEquals(1, dao.create(foo));\n\n\t\tFoo result = dao.queryForId(foo.id);\n\t\tassertNotNull(result);\n\n\t\ttry {\n\t\t\tTransactionManager.callInTransaction(connectionSource, new Callable<Void>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\tTransactionManager.callInTransaction(connectionSource, new Callable<Void>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\t\t\tdao.delete(foo);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n']",query;oo;Transaction;Transaction;Transaction;In;Exception;Callable;Manager;call,1.1641532182693481e-09;7.8580342233181e-10;6.111804395914078e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8454670906066895, -5.706146717071533, -6.278730392456055, -5.353661060333252, -5.480029106140137, -0.017140232026576996]",0.983005702495575
3,"['\t@Test\n\tpublic void testNestedTransactionsReleaseFails() throws Exception {\n\t\tfinal ConnectionSource connectionSource = createMock(ConnectionSource.class);\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\texpect(conn.isAutoCommitSupported()).andReturn(true).times(2);\n\t\texpect(conn.isAutoCommit()).andReturn(true).times(2);\n\t\tconn.setAutoCommit(false);\n\t\texpectLastCall().times(2);\n\t\tSavepoint savePoint = createMock(Savepoint.class);\n\t\texpect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();\n\t\texpect(conn.setSavePoint(isA(String.class))).andReturn(savePoint).times(2);\n\t\texpect(connectionSource.getDatabaseType()).andReturn(databaseType).times(2);\n\t\texpect(connectionSource.getReadWriteConnection(null)).andReturn(conn).times(2);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(true);\n\t\texpect(connectionSource.saveSpecialConnection(conn)).andReturn(false);\n\t\t// should only get one of these because we only returned save once\n\t\tconnectionSource.clearSpecialConnection(conn);\n\t\tconn.releaseSavePoint(savePoint);\n\t\texpectLastCall().andThrow(new SQLException(""testing the release to fail""));\n\t\tconn.rollback(savePoint);\n\t\texpectLastCall().times(2);\n\t\tconnectionSource.releaseConnection(conn);\n\t\texpectLastCall().times(2);\n\t\tconn.setAutoCommit(true);\n\t\texpectLastCall().times(2);\n\n\t\treplay(connectionSource, conn, savePoint);\n\t\ttry {\n\t\t\tTransactionManager.callInTransaction(connectionSource, new Callable<Void>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Void call() throws SQLException {\n\t\t\t\t\tTransactionManager.callInTransaction(connectionSource, new Callable<Void>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Void call() {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n']",connection;returned;SQLE;fail;Release;Point;Savepoint;Commit;oid;Commit,6.984919309616089e-10;6.402842700481415e-10;5.311449058353901e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.849669933319092, -5.688897132873535, -6.320629596710205, -5.370084285736084, -5.575979232788086, -0.016642313450574875]",0.9834955334663391
3,"['\t@Test\n\tpublic void testBasicStuff() throws Exception {\n\t\tOurConnectionSource cs = new OurConnectionSource();\n\t\tassertFalse(cs.isSavedConnection(createMock(DatabaseConnection.class)));\n\t\tDatabaseConnection conn = cs.getReadOnlyConnection(null);\n\t\tassertNotNull(conn);\n\t\tassertNull(cs.getSpecialConnection(null));\n\t\tcs.saveSpecialConnection(conn);\n\t\tassertSame(conn, cs.getSpecialConnection(null));\n\t\tassertTrue(cs.isSavedConnection(conn));\n\t\tassertFalse(cs.isSavedConnection(createMock(DatabaseConnection.class)));\n\t\tDatabaseConnection conn2 = cs.getReadOnlyConnection(null);\n\t\tassertSame(conn, conn2);\n\t\tassertNotNull(conn2);\n\t\tcs.clearSpecialConnection(conn);\n\t\tassertNull(cs.getSpecialConnection(null));\n\t\tassertFalse(cs.isSavedConnection(conn));\n\t\tassertNull(cs.getSavedConnection());\n\t\tcs.close();\n\t}\n']",Connection;Special;Special;Special;Connection;False;ock;Source;Connection;ock,2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.8306732177734375, -5.690685749053955, -6.2711181640625, -5.3587188720703125, -5.457407474517822, -0.017324311658740044]",0.982824981212616
3,"['\t@Test\n\tpublic void testNestedSave() throws Exception {\n\t\tOurConnectionSource cs = new OurConnectionSource();\n\t\tDatabaseConnection conn = cs.getReadOnlyConnection(null);\n\t\tcs.saveSpecialConnection(conn);\n\t\tcs.saveSpecialConnection(conn);\n\t\tcs.clearSpecialConnection(conn);\n\t\tassertEquals(conn, cs.getSpecialConnection(null));\n\t\tcs.close();\n\t}\n']",conn;Special;Save;cs;conn;Only;clear;save;get;Read,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.8663740158081055, -5.737724304199219, -6.326519012451172, -5.414766311645508, -5.464941024780273, -0.016664588823914528]",0.9834735989570618
3,['\t@Test(expected = SQLException.class)\n\tpublic void testSaveDifferentConnection() throws Exception {\n\t\tOurConnectionSource cs = new OurConnectionSource();\n\t\tDatabaseConnection conn = cs.getReadOnlyConnection(null);\n\t\tcs.saveSpecialConnection(conn);\n\t\tcs.saveSpecialConnection(createMock(DatabaseConnection.class));\n\t\tcs.close();\n\t}\n'],ock;Save;Special;save;Connection;Read;Connection;SQLE;Source;Our,2.3865140974521637e-09;1.5133991837501526e-09;1.0477378964424133e-09;8.440110832452774e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.8942155838012695, -5.774772644042969, -6.395421981811523, -5.504975318908691, -5.5087690353393555, -0.01577071100473404]",0.9843530058860779
3,['\t@Test\n\tpublic void testClearNone() {\n\t\tOurConnectionSource cs = new OurConnectionSource();\n\t\tcs.clearSpecialConnection(createMock(DatabaseConnection.class));\n\t\tcs.close();\n\t}\n'],Special;Clear;cs;class;create;Source;Our;clear;new;Database,4.6566128730773926e-09;3.725290298461914e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0,5,5,"[-5.881599426269531, -5.736961364746094, -6.348573684692383, -5.464789390563965, -5.445389747619629, -0.016448024660348892]",0.9836865067481995
3,['\t@Test\n\tpublic void testClearDifferentConnection() throws Exception {\n\t\tOurConnectionSource cs = new OurConnectionSource();\n\t\tDatabaseConnection conn = cs.getReadOnlyConnection(null);\n\t\tcs.saveSpecialConnection(conn);\n\t\tcs.clearSpecialConnection(createMock(DatabaseConnection.class));\n\t\tcs.close();\n\t}\n'],Different;cs;Connection;Source;conn;Only;Connection;Source;Database;Special,1.0477378964424133e-09;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.885441780090332, -5.749223709106445, -6.357832908630371, -5.460697650909424, -5.476476669311523, -0.016264136880636215]",0.9838674068450928
3,"['\t@Test\n\tpublic void testBasic() throws Exception {\n\t\tDao<Foo, Object> dao = createDao(Foo.class, true);\n\t\tFoo foo = new Foo();\n\t\tfoo.val = 1131233;\n\n\t\tassertEquals(0, OurConnectionProxy.insertCount);\n\t\tassertEquals(1, dao.create(foo));\n\t\tassertEquals(1, OurConnectionProxy.insertCount);\n\n\t\tFoo result = dao.queryForId(foo.id);\n\t\tassertEquals(foo.val + VALUE_INCREMENT, result.val);\n\t}\n']",Connection;val;Connection;insert;Basic;oo;true;Our;Exception;Proxy,8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.815444469451904, -5.705514430999756, -6.248885631561279, -5.348364353179932, -5.416892051696777, -0.017592107877135277]",0.9825618267059326
3,"['\t@Test\n\tpublic void testBasic() throws Exception {\n\t\tDao<Foo, Object> dao = createDao(Foo.class, true);\n\t\tFoo foo = new Foo();\n\t\tfoo.val = 100;\n\n\t\tConnectionProxy.lastValue = 0;\n\t\tassertEquals(1, dao.create(foo));\n\t\t/*\n\t\t * After we create an instance of foo, we check to see that our proxy was able to intercept the val argument.\n\t\t */\n\t\tassertEquals(foo.val, ConnectionProxy.lastValue);\n\t}\n']",intercept;val;ao;ao;oo;ao;we;oo;val;create,2.3283064365386963e-09;1.3387762010097504e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.874551296234131, -5.780607223510742, -6.342612266540527, -5.4183454513549805, -5.494297504425049, -0.016333920881152153]",0.9837987422943115
3,"['\t@Test\n\tpublic void testChangeInsertValue() throws Exception {\n\t\tDao<Foo, Object> dao = createDao(Foo.class, true);\n\t\tFoo foo = new Foo();\n\t\tfoo.val = TEST_CHANGE_FROM;\n\n\t\tConnectionProxy.lastValue = 0;\n\t\tassertEquals(1, dao.create(foo));\n\t\t/*\n\t\t * After we create an instance of foo, we check to see that our proxy was able to intercept the val argument.\n\t\t */\n\t\tassertEquals(foo.val, ConnectionProxy.lastValue);\n\n\t\tFoo result = dao.queryForId(foo.id);\n\t\tassertNotNull(result);\n\t\tassertEquals(TEST_CHANGE_TO, result.val);\n\t\tassertTrue(result.val != TEST_CHANGE_FROM);\n\t}\n']",of;we;create;able;CHANGE;TEST;For;instance;FROM;TEST,1.5133991837501526e-09;6.402842700481415e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.865019798278809, -5.766805171966553, -6.32914400100708, -5.390533924102783, -5.526834487915039, -0.016422579064965248]",0.9837116599082947
3,"['\t@Test\n\tpublic void testIsAutoCommitSupported() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tboolean supported = true;\n\t\texpect(conn.isAutoCommitSupported()).andReturn(supported);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(supported, proxy.isAutoCommitSupported());\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",Commit;conn;Database;Connection;conn;replay;expect;Proxy;close;new,2.0954757928848267e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.851254463195801, -5.726882457733154, -6.292286396026611, -5.379144191741943, -5.464635848999023, -0.01697288081049919]",0.9831703305244446
3,['\t@Test\n\tpublic void testIsAutoCommitSupportedNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertFalse(proxy.isAutoCommitSupported());\n\t\tproxy.close();\n\t}\n'],proxy;proxy;Connection;Proxy;Auto;Database;Null;Connection;proxy;close,1.6298145055770874e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.886955261230469, -5.74455451965332, -6.341644287109375, -5.460232734680176, -5.451637268066406, -0.016412727534770966]",0.9837212562561035
3,"['\t@Test\n\tpublic void testIsAutoCommit() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tboolean autoCommit = false;\n\t\texpect(conn.isAutoCommit()).andReturn(autoCommit);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(autoCommit, proxy.isAutoCommit());\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",Commit;Database;Proxy;Connection;verify;auto;create;new;class;conn,1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.859773635864258, -5.727870464324951, -6.299008369445801, -5.379148006439209, -5.466953754425049, -0.016922131180763245]",0.983220100402832
3,['\t@Test\n\tpublic void testIsAutoCommitNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertFalse(proxy.isAutoCommit());\n\t\tproxy.close();\n\t}\n'],Commit;proxy;Auto;Database;Exception;Null;null;Auto;Database;Connection,3.026798367500305e-09;1.7462298274040222e-09;1.6298145055770874e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.888282299041748, -5.7362847328186035, -6.342944622039795, -5.463029384613037, -5.4470391273498535, -0.016441810876131058]",0.9836927056312561
3,['\t@Test\n\tpublic void testSetAutoCommit() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tboolean autoCommit = false;\n\t\tconn.setAutoCommit(autoCommit);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tproxy.setAutoCommit(autoCommit);\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n'],Set;class;Exception;Database;Commit;create;close;conn;auto;Commit,1.4551915228366852e-09;9.89530235528946e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.865542888641357, -5.729910373687744, -6.30238151550293, -5.3828816413879395, -5.466084957122803, -0.0168787632137537]",0.9832628965377808
3,['\t@Test\n\tpublic void testSetAutoCommitNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tproxy.setAutoCommit(false);\n\t\tproxy.close();\n\t}\n'],Commit;Database;Proxy;Auto;Commit;set;Connection;false;close;null,5.587935447692871e-09;3.958120942115784e-09;1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.887951374053955, -5.740348815917969, -6.337927341461182, -5.452749252319336, -5.4424824714660645, -0.016502903774380684]",0.983632504940033
3,"['\t@Test\n\tpublic void testSetSavePoint() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString name = ""savepoint"";\n\t\texpect(conn.setSavePoint(name)).andReturn(null);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tproxy.setSavePoint(name);\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",savepoint;ock;replay;Set;Database;expect;Database;Proxy;Proxy;close,1.57160684466362e-09;1.3969838619232178e-09;8.440110832452774e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10,5,5,"[-5.871973037719727, -5.741576194763184, -6.315103530883789, -5.401460647583008, -5.479071617126465, -0.016656968742609024]",0.9834809899330139
3,"['\t@Test\n\tpublic void testSetSavePointNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertNull(proxy.setSavePoint(""name""));\n\t\tproxy.close();\n\t}\n']",Null;proxy;Proxy;Set;Database;close;Exception;new;Point;name,2.7939677238464355e-09;2.3283064365386963e-09;1.3969838619232178e-09;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.903186798095703, -5.762301921844482, -6.361399173736572, -5.468694686889648, -5.458710193634033, -0.016208073124289513]",0.9839226603507996
3,['\t@Test\n\tpublic void testCommit() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tconn.commit(null);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tproxy.commit(null);\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n'],Database;commit;class;proxy;conn;conn;Connection;Connection;verify;Proxy,2.6775524020195007e-09;1.862645149230957e-09;1.7462298274040222e-09;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.863446235656738, -5.726707458496094, -6.299835205078125, -5.393342018127441, -5.4491705894470215, -0.016924943774938583]",0.9832175970077515
3,['\t@Test\n\tpublic void testCommitNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tproxy.commit(null);\n\t\tproxy.close();\n\t}\n'],commit;Commit;Connection;Exception;proxy;proxy;new;close;Proxy;null,2.444721758365631e-09;1.7462298274040222e-09;1.6298145055770874e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.915065765380859, -5.772803783416748, -6.374820232391357, -5.470701694488525, -5.467108249664307, -0.016073646023869514]",0.9840548634529114
3,['\t@Test\n\tpublic void testRollback() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tconn.rollback(null);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tproxy.rollback(null);\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n'],ock;class;rollback;Database;Database;Proxy;null;proxy;Exception;conn,3.026798367500305e-09;8.731149137020111e-10;8.440110832452774e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.863673686981201, -5.730510234832764, -6.302974224090576, -5.395224094390869, -5.455118656158447, -0.016871143132448196]",0.9832704067230225
3,['\t@Test\n\tpublic void testRollbackNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tproxy.rollback(null);\n\t\tproxy.close();\n\t}\n'],Database;null;Connection;Connection;Database;Proxy;rollback;proxy;null;Rollback,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;1.7462298274040222e-10,5,5,"[-5.891445159912109, -5.752135276794434, -6.3452558517456055, -5.45523738861084, -5.446550369262695, -0.01641296222805977]",0.9837210178375244
3,"['\t@Test\n\tpublic void testExecuteStatement() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString statement = ""select foo from bar"";\n\t\tint result = 1312321;\n\t\texpect(conn.executeStatement(statement, 0)).andReturn(result);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(result, proxy.executeStatement(statement, 0));\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",bar;conn;Database;Execute;expect;execute;Database;conn;statement;conn,1.9208528101444244e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.866732120513916, -5.752333164215088, -6.331628322601318, -5.4042067527771, -5.498295307159424, -0.016513574868440628]",0.9836220145225525
3,"['\t@Test\n\tpublic void testExecuteStatementNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertEquals(0, proxy.executeStatement(""statment"", 0));\n\t\tproxy.close();\n\t}\n']",Statement;null;statment;Database;new;Proxy;proxy;Connection;proxy;Database,2.7939677238464355e-09;1.0477378964424133e-09;9.313225746154785e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-5.8903021812438965, -5.765100955963135, -6.356709003448486, -5.452406406402588, -5.4607672691345215, -0.01630471833050251]",0.9838274717330933
3,"['\t@Test\n\tpublic void testCompileStatementStringStatementTypeFieldTypeArrayInt() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString statement = ""select foo from bar"";\n\t\tStatementType type = StatementType.DELETE;\n\t\tint flags = 11253123;\n\t\texpect(conn.compileStatement(statement, type, null, flags, false)).andReturn(null);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tproxy.compileStatement(statement, type, null, flags, false);\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",Type;Field;Type;Database;verify;from;Database;conn;Statement;compile,8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.001776687800884e-10,5,5,"[-5.876090049743652, -5.765016078948975, -6.342380046844482, -5.4019927978515625, -5.523808479309082, -0.016332043334841728]",0.9838005900382996
3,"['\t@Test\n\tpublic void testCompileStatementStringStatementTypeFieldTypeArrayIntNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertNull(proxy.compileStatement(""statment"", StatementType.DELETE, null, 0, false));\n\t\tproxy.close();\n\t}\n']",Statement;Int;Connection;Array;Proxy;Proxy;Exception;proxy;null;null,2.9103830456733704e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.9420166015625, -5.844460487365723, -6.436403274536133, -5.511024475097656, -5.518798828125, -0.015293828211724758]",0.9848226308822632
3,"['\t@Test\n\tpublic void testInsert() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString statement = ""insert bar"";\n\t\tint result = 13712321;\n\t\texpect(conn.insert(statement, null, null, null)).andReturn(result);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(result, proxy.insert(statement, null, null, null));\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",ock;expect;Connection;statement;Insert;create;insert;and;new;conn,1.862645149230957e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.851813793182373, -5.7298784255981445, -6.29417610168457, -5.376638412475586, -5.478149890899658, -0.016911698505282402]",0.9832304120063782
3,"['\t@Test\n\tpublic void testInsertNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertEquals(0, proxy.insert(""statment"", null, null, null));\n\t\tproxy.close();\n\t}\n']",statment;Database;Insert;null;proxy;Database;null;null;Equals;Connection,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.764863893389702e-10;1.1641532182693481e-10;0.0,5,5,"[-5.881903648376465, -5.754870891571045, -6.340524196624756, -5.444087505340576, -5.455211162567139, -0.016450487077236176]",0.9836840629577637
3,"['\t@Test\n\tpublic void testUpdate() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString statement = ""insert bar"";\n\t\tint result = 13212321;\n\t\texpect(conn.update(statement, null, null)).andReturn(result);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(result, proxy.update(statement, null, null));\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",ock;Database;create;Update;close;Database;conn;new;Database;Exception,2.561137080192566e-09;1.1641532182693481e-09;8.149072527885437e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.857203006744385, -5.728949069976807, -6.297346591949463, -5.380042552947998, -5.482816219329834, -0.01685754582285881]",0.9832838773727417
3,"['\t@Test\n\tpublic void testUpdateNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertEquals(0, proxy.update(""statment"", null, null));\n\t\tproxy.close();\n\t}\n']",null;null;proxy;Connection;new;null;update;proxy;Proxy;close,2.3283064365386963e-09;1.862645149230957e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.888168811798096, -5.752719879150391, -6.342391014099121, -5.445204734802246, -5.456647872924805, -0.016425276175141335]",0.9837088584899902
3,"['\t@Test\n\tpublic void testDelete() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString statement = ""insert bar"";\n\t\tint result = 13872321;\n\t\texpect(conn.delete(statement, null, null)).andReturn(result);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(result, proxy.delete(statement, null, null));\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",Delete;create;ock;Connection;conn;conn;proxy;close;null;insert,9.89530235528946e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.1641532182693481e-10,5,5,"[-5.852009296417236, -5.727292537689209, -6.289861679077148, -5.373300075531006, -5.477778911590576, -0.01694522053003311]",0.9831975698471069
3,"['\t@Test\n\tpublic void testDeleteNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertEquals(0, proxy.delete(""statment"", null, null));\n\t\tproxy.close();\n\t}\n']",null;delete;Connection;Connection;null;Database;proxy;Proxy;Equals;close,4.6566128730773926e-09;3.026798367500305e-09;2.444721758365631e-09;2.3283064365386963e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1059455573558807e-09;8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-5.89101505279541, -5.768130302429199, -6.34808874130249, -5.447324275970459, -5.4545793533325195, -0.01635749265551567]",0.9837756752967834
3,"['\t@Test\n\tpublic void testQueryForOne() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString statement = ""insert bar"";\n\t\tObject result = new Object();\n\t\texpect(conn.queryForOne(statement, null, null, null, null)).andReturn(result);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(result, proxy.queryForOne(statement, null, null, null, null));\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",One;ock;expect;insert;For;proxy;query;For;Database;One,8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;3.4924596548080444e-10;3.128661774098873e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.862456798553467, -5.733545780181885, -6.333508014678955, -5.444406032562256, -5.496638298034668, -0.016410499811172485]",0.9837234020233154
3,"['\t@Test\n\tpublic void testQueryForOneNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertNull(proxy.queryForOne(""statment"", null, null, null, null));\n\t\tproxy.close();\n\t}\n']",statment;Database;Query;query;Proxy;proxy;proxy;close;proxy;null,6.51925802230835e-09;4.190951585769653e-09;2.3283064365386963e-09;2.0954757928848267e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.915273666381836, -5.797933578491211, -6.391030311584473, -5.498629093170166, -5.481904029846191, -0.01578596420586109]",0.9843379855155945
3,"['\t@Test\n\tpublic void testQueryForLongString() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString statement = ""select stuff from foo"";\n\t\tlong result = 31231231241414L;\n\t\texpect(conn.queryForLong(statement)).andReturn(result);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(result, proxy.queryForLong(statement));\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",Long;Database;Long;Exception;Connection;result;Database;Query;Connection;from,1.280568540096283e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.895749092102051, -5.77705192565918, -6.373831748962402, -5.443233489990234, -5.538928985595703, -0.015937089920043945]",0.9841892123222351
3,"['\t@Test\n\tpublic void testQueryForLongStringNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertEquals(0, proxy.queryForLong(""statment""));\n\t\tproxy.close();\n\t}\n']",Database;For;Database;proxy;query;Exception;Proxy;Proxy;close;new,3.958120942115784e-09;3.725290298461914e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.3387762010097504e-09;1.1641532182693481e-09;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.925355434417725, -5.819639205932617, -6.408742427825928, -5.508951663970947, -5.485535144805908, -0.015604419633746147]",0.9845166802406311
3,"['\t@Test\n\tpublic void testQueryForLongStringObjectArrayFieldTypeArray() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tString statement = ""select stuff from foo"";\n\t\tlong result = 3123123124141413L;\n\t\texpect(conn.queryForLong(statement, null, null)).andReturn(result);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(result, proxy.queryForLong(statement, null, null));\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",Object;Long;query;select;For;Query;statement;Connection;Array;close,2.0954757928848267e-09;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.895184516906738, -5.778096675872803, -6.3638434410095215, -5.4458184242248535, -5.507050037384033, -0.016070831567049026]",0.984057605266571
3,"['\t@Test\n\tpublic void testQueryForLongStringObjectArrayFieldTypeArrayNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertEquals(0, proxy.queryForLong(""statment"", null, null));\n\t\tproxy.close();\n\t}\n']",Database;Query;Proxy;Type;proxy;query;Null;Connection;Exception;Array,8.614733815193176e-09;3.4924596548080444e-09;2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.930550575256348, -5.830616474151611, -6.412604808807373, -5.4907660484313965, -5.492159366607666, -0.015598551370203495]",0.9845223426818848
3,['\t@Test\n\tpublic void testClose() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n'],Proxy;create;conn;conn;Database;Connection;Connection;Database;Proxy;proxy,7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10,5,5,"[-5.872345447540283, -5.731686115264893, -6.312042713165283, -5.40883731842041, -5.438941478729248, -0.016833985224366188]",0.983306884765625
3,['\t@Test\n\tpublic void testCloseNull() throws Exception {\n\t\tnew DatabaseConnectionProxy(null).close();\n\t}\n'],Null;Close;new;Exception;close;null;Proxy;Connection;Database,1.1175870895385742e-08;7.450580596923828e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;-4.656612873077393e-10;-1.6298145055770874e-09;-1.862645149230957e-09,5,5,"[-5.8868327140808105, -5.745719909667969, -6.35144567489624, -5.493739604949951, -5.4067206382751465, -0.016449667513370514]",0.983684778213501
3,['\t@Test\n\tpublic void testCloseQuietly() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tconn.closeQuietly();\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tproxy.closeQuietly();\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n'],Database;replay;Database;conn;Connection;new;close;Quietly;close;conn,1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.871576309204102, -5.732353687286377, -6.315879821777344, -5.402334690093994, -5.460033893585205, -0.016764355823397636]",0.9833752512931824
3,['\t@Test\n\tpublic void testCloseQuietlyNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tproxy.closeQuietly();\n\t\tproxy.close();\n\t}\n'],Quietly;Proxy;Proxy;Connection;Connection;Null;proxy;null;close;close,5.587935447692871e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.878637313842773, -5.741163730621338, -6.332039833068848, -5.453351020812988, -5.435487747192383, -0.016565516591072083]",0.98357093334198
3,"['\t@Test\n\tpublic void testIsClosed() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tboolean closed = true;\n\t\texpect(conn.isClosed()).andReturn(closed);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(closed, proxy.isClosed());\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",ock;Equals;close;closed;expect;Database;Exception;conn;verify;Database,1.6298145055770874e-09;7.421476766467094e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.859396934509277, -5.718916893005371, -6.293920516967773, -5.37142276763916, -5.4535017013549805, -0.0170572642236948]",0.9830874800682068
3,['\t@Test\n\tpublic void testIsClosedNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertTrue(proxy.isClosed());\n\t\tproxy.close();\n\t}\n'],Proxy;Connection;Proxy;proxy;null;Closed;proxy;new;close;Database,6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;7.275957614183426e-11;5.820766091346741e-11;5.820766091346741e-11;5.820766091346741e-11;0.0;-5.820766091346741e-11,5,5,"[-5.891907215118408, -5.750837802886963, -6.354055404663086, -5.469838619232178, -5.445520877838135, -0.01634177751839161]",0.9837910532951355
3,"['\t@Test\n\tpublic void testIsTableExists() throws Exception {\n\t\tDatabaseConnection conn = createMock(DatabaseConnection.class);\n\t\tboolean tableExists = true;\n\t\tString tableName = ""fjewfjwef"";\n\t\texpect(conn.isTableExists(tableName)).andReturn(tableExists);\n\t\tconn.close();\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);\n\t\treplay(conn);\n\t\tassertEquals(tableExists, proxy.isTableExists(tableName));\n\t\tproxy.close();\n\t\tverify(conn);\n\t}\n']",ock;we;Exception;Table;table;Exists;Exists;conn;conn;Proxy,1.862645149230957e-09;1.280568540096283e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.855553150177002, -5.7273054122924805, -6.30421257019043, -5.404547691345215, -5.458310604095459, -0.016846410930156708]",0.9832947850227356
3,"['\t@Test\n\tpublic void testIsTableExistsNull() throws Exception {\n\t\tDatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);\n\t\tassertFalse(proxy.isTableExists(""foo""));\n\t\tproxy.close();\n\t}\n']",foo;Connection;Connection;Table;proxy;Proxy;null;proxy;Proxy;proxy,2.3283064365386963e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;4.94765117764473e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-2.9103830456733704e-10;-4.656612873077393e-10,5,5,"[-5.8967742919921875, -5.775693893432617, -6.3661980628967285, -5.471949100494385, -5.46174955368042, -0.016147900372743607]",0.9839817881584167
3,['\t@Test\n\tpublic void testStuff() {\n\t\tThreadLocalSelectArg arg = new ThreadLocalSelectArg();\n\t\tassertNull(arg.getValue());\n\t\tassertFalse(arg.isValueSet());\n\t\targ.setValue(null);\n\t\tassertNull(arg.getValue());\n\t\tassertTrue(arg.isValueSet());\n\t}\n'],Stuff;Select;Select;Arg;Local;Arg;arg;Set;arg;Thread,2.3283064365386963e-09;1.6298145055770874e-09;1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.867257118225098, -5.758979797363281, -6.334251880645752, -5.431149959564209, -5.463327407836914, -0.016512518748641014]",0.9836230874061584
3,"['\t@Test\n\tpublic void testValueConst() {\n\t\tint val = 12;\n\t\tThreadLocalSelectArg arg = new ThreadLocalSelectArg(val);\n\t\tassertTrue(arg.isValueSet());\n\t\tassertEquals(val, arg.getValue());\n\t}\n']",Local;Thread;Thread;Select;arg;Set;arg;val;get;Equals,6.05359673500061e-09;4.6566128730773926e-09;4.190951585769653e-09;3.259629011154175e-09;2.3283064365386963e-09;1.6298145055770874e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;2.764863893389702e-10,5,5,"[-5.887882232666016, -5.834067344665527, -6.367270469665527, -5.480117321014404, -5.46324348449707, -0.01595093496143818]",0.9841755032539368
3,"['\t@Test\n\tpublic void testSqlTypeValueConst() {\n\t\tint val = 12;\n\t\tSqlType type = SqlType.INTEGER;\n\t\tThreadLocalSelectArg arg = new ThreadLocalSelectArg(type, val);\n\t\tassertTrue(arg.isValueSet());\n\t\tassertEquals(val, arg.getValue());\n\t\tassertEquals(type, arg.getSqlType());\n\t}\n']",Thread;Select;Const;INTEGER;Select;Value;type;Equals;True;ql,2.3283064365386963e-09;1.57160684466362e-09;1.4551915228366852e-09;1.4260876923799515e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.887168884277344, -5.810501575469971, -6.3677167892456055, -5.464852333068848, -5.507754802703857, -0.01590071991086006]",0.9842250347137451
3,"['\t@Test\n\tpublic void testColumnNameTypeValueConst() {\n\t\tint val = 12;\n\t\tString columnName = ""fewopjfewpfjwe"";\n\t\tThreadLocalSelectArg arg = new ThreadLocalSelectArg(columnName, val);\n\t\tassertTrue(arg.isValueSet());\n\t\tassertEquals(val, arg.getValue());\n\t\tassertEquals(columnName, arg.getColumnName());\n\t}\n']",Local;Const;Thread;Name;arg;Select;Column;fewop;new;arg,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.881355285644531, -5.809843063354492, -6.365595817565918, -5.4547224044799805, -5.488560676574707, -0.0160464309155941]",0.984081506729126
3,"['\t@Test\n\tpublic void testQueryRaw() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tFoo foo = new Foo();\n\t\tfoo.val = 1;\n\t\tfoo.equal = 10;\n\t\tassertEquals(1, dao.create(foo));\n\t\tQueryBuilder<Foo, Integer> qb = dao.queryBuilder();\n\t\tqb.where().eq(Foo.VAL_COLUMN_NAME, new SelectArg());\n\t\tGenericRawResults<String[]> rawResults = dao.queryRaw(qb.prepareStatementString(), Integer.toString(foo.val));\n\t\tList<String[]> results = rawResults.getResults();\n\t\tassertEquals(1, results.size());\n\t\tboolean found = false;\n\t\tString[] columnNames = rawResults.getColumnNames();\n\t\tfor (int i = 0; i < rawResults.getNumberColumns(); i++) {\n\t\t\tif (columnNames[i].equalsIgnoreCase(Foo.ID_COLUMN_NAME)) {\n\t\t\t\tassertEquals(Integer.toString(foo.id), results.get(0)[0]);\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tassertTrue(found);\n\t}\n']",Foo;ao;equal;Statement;query;COLUM;ao;oo;create;raw,1.3969838619232178e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.817767143249512, -5.696467876434326, -6.268350124359131, -5.334403038024902, -5.497886657714844, -0.017294317483901978]",0.9828543663024902
3,"['\t@Test\n\tpublic void testQueryRawColumns() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tFoo foo1 = new Foo();\n\t\tfoo1.val = 1;\n\t\tfoo1.equal = 10;\n\t\tassertEquals(1, dao.create(foo1));\n\t\tFoo foo2 = new Foo();\n\t\tfoo2.val = 10;\n\t\tfoo2.equal = 5;\n\t\tassertEquals(1, dao.create(foo2));\n\t\tQueryBuilder<Foo, Integer> qb = dao.queryBuilder();\n\t\tqb.selectRaw(""COUNT(*)"");\n\t\tGenericRawResults<String[]> rawResults = dao.queryRaw(qb.prepareStatementString());\n\t\tList<String[]> results = rawResults.getResults();\n\t\tassertEquals(1, results.size());\n\t\t// 2 rows inserted\n\t\tassertEquals(""2"", results.get(0)[0]);\n\n\t\tqb = dao.queryBuilder();\n\t\tqb.selectRaw(""MIN(val)"", ""MAX(val)"");\n\t\trawResults = dao.queryRaw(qb.prepareStatementString());\n\t\tresults = rawResults.getResults();\n\t\tassertEquals(1, results.size());\n\t\tString[] result = results.get(0);\n\t\tassertEquals(2, result.length);\n\t\t// foo1 has the maximum value\n\t\tassertEquals(Integer.toString(foo1.val), result[0]);\n\t\t// foo2 has the maximum value\n\t\tassertEquals(Integer.toString(foo2.val), result[1]);\n\t}\n']",oo;Exception;foo;foo;the;ao;Equals;oo;Column;Query,5.820766091346741e-10;5.093170329928398e-10;2.9103830456733704e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.809760093688965, -5.68244743347168, -6.25877571105957, -5.309178829193115, -5.5004658699035645, -0.01749992184340954]",0.9826521873474121
3,"['\t@Test\n\tpublic void testHaving() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\n\t\tFoo foo = new Foo();\n\t\tint val1 = 243342;\n\t\tfoo.val = val1;\n\t\tassertEquals(1, dao.create(foo));\n\t\tfoo = new Foo();\n\t\tfoo.val = val1;\n\t\tassertEquals(1, dao.create(foo));\n\t\tfoo = new Foo();\n\t\t// only one of these\n\t\tint val2 = 6543;\n\t\tfoo.val = val2;\n\t\tassertEquals(1, dao.create(foo));\n\n\t\tQueryBuilder<Foo, Integer> qb = dao.queryBuilder();\n\t\tqb.selectColumns(Foo.VAL_COLUMN_NAME);\n\t\tqb.groupBy(Foo.VAL_COLUMN_NAME);\n\t\tqb.having(""COUNT(VAL) > 1"");\n\t\tGenericRawResults<String[]> results = dao.queryRaw(qb.prepareStatementString());\n\t\tList<String[]> list = results.getResults();\n\t\t// only val2 has 2 of them\n\t\tassertEquals(1, list.size());\n\t\tassertEquals(String.valueOf(val1), list.get(0)[0]);\n\n\t\tqb.having(""COUNT(VAL) > 2"");\n\t\tresults = dao.queryRaw(qb.prepareStatementString());\n\t\tlist = results.getResults();\n\t\tassertEquals(0, list.size());\n\t}\n']",VAL;val;query;having;ao;them;Statement;Query;list;create,5.820766091346741e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.6007106751203537e-10;1.5279510989785194e-10,5,5,"[-5.79455041885376, -5.70271635055542, -6.243049144744873, -5.292089462280273, -5.4913716316223145, -0.017632868140935898]",0.982521653175354
3,"['\t@Test\n\tpublic void testGetFirstResult() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tFoo foo1 = new Foo();\n\t\tfoo1.val = 342;\n\t\tassertEquals(1, dao.create(foo1));\n\t\tFoo foo2 = new Foo();\n\t\tfoo2.val = 9045342;\n\t\tassertEquals(1, dao.create(foo2));\n\n\t\tQueryBuilder<Foo, Integer> qb = dao.queryBuilder();\n\t\tqb.selectRaw(""MAX("" + Foo.VAL_COLUMN_NAME + "")"");\n\t\tGenericRawResults<String[]> results = dao.queryRaw(qb.prepareStatementString());\n\t\tString[] result = results.getFirstResult();\n\t\tint max = Integer.parseInt(result[0]);\n\t\tif (foo1.val > foo2.val) {\n\t\t\tassertEquals(foo1.val, max);\n\t\t} else {\n\t\t\tassertEquals(foo2.val, max);\n\t\t}\n\t}\n']",query;oo;ao;oo;foo;foo;foo;Builder;Foo;Foo,4.656612873077393e-10;4.0745362639427185e-10;3.710738383233547e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.836285591125488, -5.732389450073242, -6.297350883483887, -5.381700038909912, -5.469305038452148, -0.016957174986600876]",0.9831856489181519
3,"['\t@Test\n\tpublic void testCustomColumnNames() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tFoo foo = new Foo();\n\t\tfoo.val = 1213213;\n\t\tassertEquals(1, dao.create(foo));\n\t\tfinal String idName = ""SOME_ID"";\n\t\tfinal String valName = ""SOME_VAL"";\n\t\tfinal AtomicBoolean gotResult = new AtomicBoolean(false);\n\t\tGenericRawResults<Object> results =\n\t\t\t\tdao.queryRaw(""select id as "" + idName + "", val as "" + valName + "" from foo"",\n\t\t\t\t\t\tnew RawRowMapper<Object>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Object mapRow(String[] columnNames, String[] resultColumns) {\n\t\t\t\t\t\t\t\tassertEquals(idName, columnNames[0]);\n\t\t\t\t\t\t\t\tassertEquals(valName, columnNames[1]);\n\t\t\t\t\t\t\t\tgotResult.set(true);\n\t\t\t\t\t\t\t\treturn new Object();\n\t\t\t\t\t\t\t}\n']",Foo;Column;Custom;result;foo;column;id;results;val;VAL,4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.848206043243408, -5.710079669952393, -6.300207138061523, -5.363072395324707, -5.507446765899658, -0.016918731853365898]",0.9832236766815186
3,"['\t@Test\n\tpublic void testDeleteAll() throws Exception {\n\t\tDeleteBuilder<Foo, Integer> stmtb = new DeleteBuilder<Foo, Integer>(databaseType, baseFooTableInfo, null);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(""DELETE FROM "");\n\t\tdatabaseType.appendEscapedEntityName(sb, baseFooTableInfo.getTableName());\n\t\tassertEquals(sb.toString(), stmtb.prepareStatementString());\n\t}\n']",Escaped;Name;DELETE;database;database;stmt;Exception;stmt;sb;null,1.862645149230957e-09;1.280568540096283e-09;1.1932570487260818e-09;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.865091800689697, -5.793039321899414, -6.3640971183776855, -5.449325084686279, -5.4783430099487305, -0.01621393859386444]",0.9839168190956116
3,"['\t@Test\n\tpublic void testDeleteMethod() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tFoo foo = new Foo();\n\t\tfoo.val = 123123;\n\t\tassertEquals(1, dao.create(foo));\n\n\t\tassertNotNull(dao.queryForId(foo.id));\n\t\tDeleteBuilder<Foo, Integer> db = dao.deleteBuilder();\n\t\t// no match\n\t\tdb.where().eq(Foo.VAL_COLUMN_NAME, foo.val + 1);\n\t\tassertEquals(0, db.delete());\n\t\tassertNotNull(dao.queryForId(foo.id));\n\n\t\tdb.where().reset();\n\t\tdb.where().eq(Foo.VAL_COLUMN_NAME, foo.val);\n\t\tassertEquals(1, db.delete());\n\t\tassertNull(dao.queryForId(foo.id));\n\t}\n']",ao;Delete;Builder;foo;COLUM;foo;NAME;ao;db;query,1.8044374883174896e-09;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.810548305511475, -5.7130608558654785, -6.2646307945251465, -5.33602237701416, -5.469831943511963, -0.017377736046910286]",0.9827722907066345
3,"['\t@Test\n\tpublic void testUpdateLimit() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tint num = 3;\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tdao.create(new Foo());\n\t\t}\n\t\tlong limit = 2;\n\t\tassertEquals(limit, dao.deleteBuilder().limit(limit).delete());\n\t\tint count = (int) dao.countOf();\n\t\tassertEquals(num - limit, count);\n\t\tassertNotEquals(num, count);\n\t}\n']",new;oo;Foo;count;count;delete;create;ao;create;ao,3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.1641532182693481e-10,5,5,"[-5.856334209442139, -5.730784893035889, -6.298669338226318, -5.371510028839111, -5.465541839599609, -0.016965262591838837]",0.9831778407096863
3,"['\t@Test\n\tpublic void testIterator() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tCloseableIterator<Foo> iterator = dao.iterator();\n\t\tassertFalse(iterator.hasNext());\n\n\t\tFoo foo1 = new Foo();\n\t\tassertEquals(1, dao.create(foo1));\n\n\t\tFoo foo2 = new Foo();\n\t\tassertEquals(1, dao.create(foo2));\n\n\t\titerator = dao.iterator();\n\t\tassertTrue(iterator.hasNext());\n\t\tFoo result = iterator.next();\n\t\tassertEquals(foo1.id, result.id);\n\t\tassertTrue(iterator.hasNext());\n\n\t\tresult = iterator.next();\n\t\tassertEquals(foo2.id, result.id);\n\n\t\tassertFalse(iterator.hasNext());\n\t\tassertNull(iterator.nextThrow());\n\t}\n']",foo;foo;foo;Foo;foo;iterator;id;ao;foo;oo,4.220055416226387e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.815305709838867, -5.694877624511719, -6.243839740753174, -5.313416004180908, -5.442980766296387, -0.01769435778260231]",0.9824612736701965
3,"['\t@Test\n\tpublic void testIteratorPrepared() throws Exception {\n\t\tDao<Foo, Integer> dao = createDao(Foo.class, true);\n\t\tFoo foo1 = new Foo();\n\t\tassertEquals(1, dao.create(foo1));\n\n\t\tFoo foo2 = new Foo();\n\t\tassertEquals(1, dao.create(foo2));\n\n\t\tPreparedQuery<Foo> query = dao.queryBuilder().where().eq(Foo.ID_COLUMN_NAME, foo2.id).prepare();\n\t\tCloseableIterator<Foo> iterator = dao.iterator(query);\n\t\tassertTrue(iterator.hasNext());\n\t\tFoo result = iterator.next();\n\t\tassertEquals(foo2.id, result.id);\n\t\tassertFalse(iterator.hasNext());\n\t\tassertNull(iterator.nextThrow());\n\t}\n']",Foo;ao;Closeable;ao;Foo;ao;ao;Iterator;COLUM;Equals,1.2223608791828156e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.8562575355172157e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9831426218152046e-10,5,5,"[-5.829819679260254, -5.714136123657227, -6.299896717071533, -5.398727893829346, -5.455250263214111, -0.01701413467526436]",0.9831297993659973
3,"['\t@Test(expected = IllegalStateException.class)\n\tpublic void testIteratorRemoveNoNext() throws Exception {\n\t\tDao<Foo, Object> dao = createDao(Foo.class, true);\n\t\tCloseableIterator<Foo> iterator = dao.iterator();\n\t\ttry {\n\t\t\titerator.remove();\n\t\t} finally {\n\t\t\titerator.close();\n\t\t}\n\t}\n']",iterator;Iterator;ao;oo;iterator;iterator;close;ao;Exception;Object,2.0954757928848267e-09;1.367880031466484e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.885648250579834, -5.782546520233154, -6.353967189788818, -5.453063488006592, -5.47822904586792, -0.01619000919163227]",0.9839403629302979
3,"['\t@Test(expected = IllegalStateException.class)\n\tpublic void testIteratorNextRemoveRemoveNoNext() throws Exception {\n\t\tDao<Foo, Object> dao = createDao(Foo.class, true);\n\t\tFoo foo1 = new Foo();\n\t\tassertEquals(1, dao.create(foo1));\n\t\tFoo foo2 = new Foo();\n\t\tassertEquals(1, dao.create(foo2));\n\t\tCloseableIterator<Foo> iterator = dao.iterator();\n\t\ttry {\n\t\t\titerator.next();\n\t\t\titerator.remove();\n\t\t\titerator.remove();\n\t\t} finally {\n\t\t\titerator.close();\n\t\t}\n\t}\n']",ao;Remove;Exception;Remove;foo;Equals;oo;Illegal;oo;ao,6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;6.693881005048752e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.845746994018555, -5.731959819793701, -6.299756050109863, -5.383450031280518, -5.4754862785339355, -0.016891539096832275]",0.9832502007484436
3,"['    @Test\n    public void handleRequest_shouldReturnConstantValue() {\n        ${handlerClassName} function = new ${handlerClassName}();\n        Object result = function.handleRequest(""echo"", null);\n        assertEquals(""echo"", result);\n    }\n']",function;Class;Name;echo;Request;handler;function;Constant;result;handle,3.14321368932724e-09;2.3283064365386963e-09;1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;0.0;-5.820766091346741e-11;-1.4551915228366852e-10,5,5,"[-5.890354633331299, -5.765087127685547, -6.3827314376831055, -5.464059352874756, -5.478280544281006, -0.01613394170999527]",0.9839954972267151
3,"['    @Test\n    public void handleRequest_shouldReturnConstantValue() {\n        MyDynamoDbStreamsFunction function = new MyDynamoDbStreamsFunction();\n        Object result = function.handleRequest(""echo"", null);\n        assertEquals(""echo"", result);\n    }\n']",Db;My;function;Request;ynam;ynam;should;echo;handle;Return,9.313225746154785e-10;6.402842700481415e-10;5.675246939063072e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10,5,5,"[-5.883814334869385, -5.731536388397217, -6.357968330383301, -5.446690082550049, -5.464369297027588, -0.01643899641931057]",0.9836952686309814
3,"['    @Test\n    public void handleRequest_shouldReturnConstantValue() {\n        App function = new App();\n        Object result = function.handleRequest(""echo"", null);\n        assertEquals(""echo"", result);\n    }\n']",should;function;App;Equals;echo;handle;Object;Request;result;null,2.7939677238464355e-09;8.440110832452774e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.872529983520508, -5.727255344390869, -6.335913181304932, -5.4320878982543945, -5.4534993171691895, -0.016636217013001442]",0.9835014939308167
3,"['    @Test\n    public void handleRequest_shouldReturnConstantValue() {\n        MyNettyFunction function = new MyNettyFunction();\n        Object result = function.handleRequest(""echo"", null);\n        assertEquals(""echo"", result);\n    }\n']",Object;function;should;Function;Request;echo;echo;handle;Equals;My,1.1059455573558807e-09;9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-5.889033317565918, -5.743712902069092, -6.376191139221191, -5.465309143066406, -5.475611686706543, -0.016223672777414322]",0.9839072227478027
3,"['    @Test\n    public void handleRequest_shouldReturnConstantValue() {\n        MyWafRegionalFunction function = new MyWafRegionalFunction();\n        Object result = function.handleRequest(""echo"", null);\n        assertEquals(""echo"", result);\n    }\n']",Regional;Regional;af;new;Function;Function;function;result;echo;Value,1.3969838619232178e-09;1.1059455573558807e-09;4.94765117764473e-10;4.3655745685100555e-10;4.3655745685100555e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0,5,5,"[-5.8961334228515625, -5.751518726348877, -6.379220485687256, -5.4649577140808105, -5.48347806930542, -0.01614144816994667]",0.9839881062507629
3,"['    @Test\n    public void handleRequest_shouldReturnConstantValue() {\n        MyApacheFunction function = new MyApacheFunction();\n        Object result = function.handleRequest(""echo"", null);\n        assertEquals(""echo"", result);\n    }\n']",Apache;Function;Constant;My;echo;Function;function;Request;result;Return,2.5029294192790985e-09;2.3283064365386963e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10,5,5,"[-5.881065845489502, -5.740635395050049, -6.356165409088135, -5.4489617347717285, -5.463594913482666, -0.016413431614637375]",0.9837204217910767
3,['    @Test\n    public void updateItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull() {\n        Record record = new Record().setId(1).setId2(10);\n        UpdateItemEnhancedRequest<Record> request = UpdateItemEnhancedRequest.builder(Record.class)\n                                                                          .item(record)\n                                                                          .build();\n\n        UpdateItemEnhancedResponse<Record> response = mappedTable.updateItemWithResponse(request);\n\n        assertThat(response.itemCollectionMetrics()).isNull();\n    }\n'],Collection;update;Collection;set;Metrics;request;Collection;mapped;Record;Response,1.7462298274040222e-09;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.8622565269470215, -5.705404281616211, -6.298717498779297, -5.347341060638428, -5.471700191497803, -0.017122069373726845]",0.9830237030982971
3,['    @Test\n    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {\n        Record record = new Record().setId(1).setId2(10);\n        UpdateItemEnhancedRequest<Record> request = UpdateItemEnhancedRequest.builder(Record.class)\n                                                                             .item(record)\n                                                                             .returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE)\n                                                                             .build();\n\n        UpdateItemEnhancedResponse<Record> response = mappedTable.updateItemWithResponse(request);\n\n        assertThat(response.itemCollectionMetrics()).isNotNull();\n    }\n'],Enhanced;SIZE;Enhanced;Table;Item;response;Metrics;Update;Enhanced;update,4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.8452630043029785, -5.6861653327941895, -6.278294086456299, -5.31093692779541, -5.471685886383057, -0.01745564118027687]",0.9826958179473877
3,['    @Test\n    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull() {\n        Record record = new Record().setId(1).setId2(10);\n        PutItemEnhancedRequest<Record> request = PutItemEnhancedRequest.builder(Record.class)\n                                                                       .item(record)\n                                                                       .build();\n\n        PutItemEnhancedResponse<Record> response = mappedTable.putItemWithResponse(request);\n\n        assertThat(response.itemCollectionMetrics()).isNull();\n    }\n'],Item;Null;record;Request;Put;response;Null;record;Item;build,2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.6007106751203537e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;8.003553375601768e-11,5,5,"[-5.860602378845215, -5.705730438232422, -6.297325134277344, -5.346217632293701, -5.468360900878906, -0.017148084938526154]",0.9829981327056885
3,['    @Test\n    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {\n        Record record = new Record().setId(1).setId2(10);\n        PutItemEnhancedRequest<Record> request = PutItemEnhancedRequest.builder(Record.class)\n                                                                       .item(record)\n                                                                       .returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE)\n                                                                       .build();\n\n        PutItemEnhancedResponse<Record> response = mappedTable.putItemWithResponse(request);\n\n        assertThat(response.itemCollectionMetrics()).isNotNull();\n    }\n'],return;Enhanced;mapped;Item;build;Null;Record;Metrics;Item;return,6.984919309616089e-10;5.820766091346741e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.5279510989785194e-10;1.4551915228366852e-10,5,5,"[-5.844499588012695, -5.6870880126953125, -6.277371406555176, -5.316129207611084, -5.463093280792236, -0.017467472702264786]",0.982684314250946
3,['    @Test\n    public void updateItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull() {\n        Record record = new Record().setId(1).setId2(10);\n        UpdateItemEnhancedRequest<Record> request = UpdateItemEnhancedRequest.builder(Record.class)\n                                                                          .item(record)\n                                                                          .build();\n\n        UpdateItemEnhancedResponse<Record> response = mappedTable.updateItemWithResponse(request).join();\n\n        assertThat(response.itemCollectionMetrics()).isNull();\n    }\n'],Enhanced;Item;item;set;Item;record;Metrics;Metrics;request;record,4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.964508555829525e-10;1.964508555829525e-10;1.7826096154749393e-10,5,5,"[-5.860788822174072, -5.702692031860352, -6.295533657073975, -5.343247413635254, -5.469837188720703, -0.017169294878840446]",0.9829772710800171
3,['    @Test\n    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {\n        Record record = new Record().setId(1).setId2(10);\n        UpdateItemEnhancedRequest<Record> request = UpdateItemEnhancedRequest.builder(Record.class)\n                                                                             .item(record)\n                                                                             .returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE)\n                                                                             .build();\n\n        UpdateItemEnhancedResponse<Record> response = mappedTable.updateItemWithResponse(request).join();\n\n        assertThat(response.itemCollectionMetrics()).isNotNull();\n    }\n'],return;Table;Not;item;return;Enhanced;class;Item;Metrics;mapped,4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8441081047058105, -5.6849870681762695, -6.27567720413208, -5.3063554763793945, -5.468777179718018, -0.01750366948544979]",0.9826486110687256
3,['    @Test\n    public void deleteItem_returnConsumedCapacity_unset_consumedCapacityNull() {\n        Key key = Key.builder().partitionValue(1).sortValue(10).build();\n\n        DeleteItemEnhancedResponse<Record> response = mappedTable.deleteItemWithResponse(r -> r.key(key));\n\n        assertThat(response.consumedCapacity()).isNull();\n    }\n'],build;Table;Delete;Item;delete;Key;key;consumed;Response;partition,3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.872585773468018, -5.735751628875732, -6.354940891265869, -5.459065914154053, -5.468145370483398, -0.016392439603805542]",0.983741283416748
3,['    @Test\n    public void deleteItem_returnConsumedCapacity_set_consumedCapacityNotNull() {\n        Key key = Key.builder().partitionValue(1).sortValue(10).build();\n\n        DeleteItemEnhancedResponse<Record> response =\n            mappedTable.deleteItemWithResponse(r -> r.key(key).returnConsumedCapacity(ReturnConsumedCapacity.TOTAL));\n\n        assertThat(response.consumedCapacity()).isNotNull();\n    }\n'],Item;Response;Item;delete;mapped;Null;Response;response;consumed;Null,1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.863081455230713, -5.719313144683838, -6.329102039337158, -5.426845550537109, -5.461907863616943, -0.016688857227563858]",0.9834495186805725
3,['    @Test\n    public void delete_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {\n        Key key = Key.builder().partitionValue(1).sortValue(10).build();\n\n        DeleteItemEnhancedResponse<Record> response =\n            mappedTable.deleteItemWithResponse(r -> r.key(key).returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE));\n\n        assertThat(response.itemCollectionMetrics()).isNotNull();\n    }\n'],Return;Not;Null;set;Delete;sort;Not;That;Key;Item,6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;2.9467628337442875e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.870997905731201, -5.726296901702881, -6.323843002319336, -5.415180683135986, -5.459467887878418, -0.01671547070145607]",0.9834234714508057
3,['    @Test\n    public void deleteItem_returnConsumedCapacity_unset_consumedCapacityNull() {\n        Key key = Key.builder().partitionValue(1).sortValue(10).build();\n\n        DeleteItemEnhancedResponse<Record> response = mappedTable.deleteItemWithResponse(r -> r.key(key)).join();\n\n        assertThat(response.consumedCapacity()).isNull();\n    }\n'],partition;return;Value;Consumed;Delete;Table;response;key;That;Capacity,1.1059455573558807e-09;6.039044819772243e-10;5.238689482212067e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.871194362640381, -5.729020595550537, -6.348848819732666, -5.450796127319336, -5.469377517700195, -0.016459986567497253]",0.9836747646331787
3,['    @Test\n    public void deleteItem_returnConsumedCapacity_set_consumedCapacityNotNull() {\n        Key key = Key.builder().partitionValue(1).sortValue(10).build();\n\n        DeleteItemEnhancedResponse<Record> response =\n            mappedTable.deleteItemWithResponse(r -> r.key(key).returnConsumedCapacity(ReturnConsumedCapacity.TOTAL)).join();\n\n        assertThat(response.consumedCapacity()).isNotNull();\n    }\n'],Item;Consumed;partition;delete;Response;Enhanced;Delete;Record;return;builder,6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.87042760848999, -5.723608016967773, -6.33833122253418, -5.4321465492248535, -5.470418930053711, -0.01657653972506523]",0.9835599660873413
3,['    @Test\n    public void delete_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {\n        Key key = Key.builder().partitionValue(1).sortValue(10).build();\n\n        DeleteItemEnhancedResponse<Record> response =\n            mappedTable.deleteItemWithResponse(r -> r.key(key).returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE))\n                       .join();\n\n        assertThat(response.itemCollectionMetrics()).isNotNull();\n    }\n'],Metrics;delete;Collection;Collection;partition;key;Response;Return;item;Collection,1.5133991837501526e-09;6.402842700481415e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.8683319091796875, -5.719315528869629, -6.31284236907959, -5.398281574249268, -5.464505672454834, -0.016821911558508873]",0.9833188056945801
3,['    @Test\n    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull() {\n        Record record = new Record().setId(1).setId2(10);\n        PutItemEnhancedRequest<Record> request = PutItemEnhancedRequest.builder(Record.class)\n                                                                       .item(record)\n                                                                       .build();\n\n        PutItemEnhancedResponse<Record> response = mappedTable.putItemWithResponse(request).join();\n\n        assertThat(response.itemCollectionMetrics()).isNull();\n    }\n'],Null;mapped;Enhanced;Enhanced;join;Response;request;request;Put;Metrics,9.313225746154785e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10;2.6193447411060333e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.85819149017334, -5.7012434005737305, -6.29163932800293, -5.340739727020264, -5.46492338180542, -0.01722237467765808]",0.9829250574111938
3,['    @Test\n    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {\n        Record record = new Record().setId(1).setId2(10);\n        PutItemEnhancedRequest<Record> request = PutItemEnhancedRequest.builder(Record.class)\n                                                                       .item(record)\n                                                                       .returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE)\n                                                                       .build();\n\n        PutItemEnhancedResponse<Record> response = mappedTable.putItemWithResponse(request).join();\n\n        assertThat(response.itemCollectionMetrics()).isNotNull();\n    }\n'],put;Put;Table;Return;Enhanced;build;Collection;Metrics;record;Item,4.3655745685100555e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.84127950668335, -5.6829705238342285, -6.271915435791016, -5.310492515563965, -5.460114479064941, -0.017542677000164986]",0.982610285282135
3,"['    @Test\n    public void anonymousCreationCapturesComplexTypeArguments() {\n        EnhancedType<Map<String, List<List<String>>>> enhancedType = new EnhancedType<Map<String, List<List<String>>>>(){};\n        assertThat(enhancedType.rawClass()).isEqualTo(Map.class);\n        assertThat(enhancedType.rawClassParameters().get(0).rawClass()).isEqualTo(String.class);\n        assertThat(enhancedType.rawClassParameters().get(1).rawClass()).isEqualTo(List.class);\n        assertThat(enhancedType.rawClassParameters().get(1).rawClassParameters().get(0).rawClass()).isEqualTo(List.class);\n        assertThat(enhancedType.rawClassParameters().get(1).rawClassParameters().get(0).rawClassParameters().get(0).rawClass())\n            .isEqualTo(String.class);\n    }\n']",enhanced;Complex;enhanced;Captures;Enhanced;Type;List;List;Map;Type,6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8155436515808105, -5.690598487854004, -6.243534564971924, -5.296512603759766, -5.431008338928223, -0.017847301438450813]",0.9823108911514282
3,['    @Test\n    public void customTypesWork() {\n        EnhancedType<EnhancedTypeTest> enhancedType = new EnhancedType<EnhancedTypeTest>(){};\n        assertThat(enhancedType.rawClass()).isEqualTo(EnhancedTypeTest.class);\n    }\n'],enhanced;Enhanced;Type;Enhanced;Type;custom;Type;Type;raw;new,1.9208528101444244e-09;1.862645149230957e-09;1.280568540096283e-09;9.313225746154785e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;0.0,5,5,"[-5.942437648773193, -5.897972583770752, -6.438460826873779, -5.5293660163879395, -5.424079418182373, -0.015466156415641308]",0.9846528172492981
3,['    @Test\n    public void nonStaticInnerTypesWork() {\n        EnhancedType<InnerType> enhancedType = new EnhancedType<InnerType>(){};\n        assertThat(enhancedType.rawClass()).isEqualTo(InnerType.class);\n    }\n'],Type;new;Inner;enhanced;Type;Type;raw;Type;Inner;class,4.773028194904327e-09;3.026798367500305e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.8044374883174896e-09;1.7462298274040222e-09;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.955036163330078, -5.905158519744873, -6.4676513671875, -5.5369157791137695, -5.45631217956543, -0.015193797647953033]",0.9849210381507874
3,['    @Test\n    public void staticInnerTypesWork() {\n        EnhancedType<InnerStaticType> enhancedType = new EnhancedType<InnerStaticType>(){};\n        assertThat(enhancedType.rawClass()).isEqualTo(InnerStaticType.class);\n    }\n'],Enhanced;Enhanced;static;Types;new;Inner;Type;Static;Type;Work,4.6566128730773926e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.4551915228366852e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9498419761657715, -5.8925580978393555, -6.453323841094971, -5.5211920738220215, -5.447329998016357, -0.015367669984698296]",0.9847496747970581
3,"['    @Test\n    public void helperCreationMethodsWork() {\n        assertThat(EnhancedType.of(String.class).rawClass()).isEqualTo(String.class);\n\n        assertThat(EnhancedType.listOf(String.class)).satisfies(v -> {\n            assertThat(v.rawClass()).isEqualTo(List.class);\n            assertThat(v.rawClassParameters()).hasSize(1);\n            assertThat(v.rawClassParameters().get(0).rawClass()).isEqualTo(String.class);\n        });\n\n        assertThat(EnhancedType.mapOf(String.class, Integer.class)).satisfies(v -> {\n            assertThat(v.rawClass()).isEqualTo(Map.class);\n            assertThat(v.rawClassParameters()).hasSize(2);\n            assertThat(v.rawClassParameters().get(0).rawClass()).isEqualTo(String.class);\n            assertThat(v.rawClassParameters().get(1).rawClass()).isEqualTo(Integer.class);\n        });\n    }\n']",raw;Methods;Work;Enhanced;atisfies;Parameters;Class;That;Enhanced;of,1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.3460521586239338e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10,5,5,"[-5.802708625793457, -5.64267110824585, -6.21510648727417, -5.261333465576172, -5.442793846130371, -0.018242906779050827]",0.9819225072860718
3,"['    @Test\n    public void equalityIsBasedOnInnerEquality() {\n        verifyEquals(EnhancedType.of(String.class), EnhancedType.of(String.class));\n        verifyNotEquals(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n\n        verifyEquals(new EnhancedType<Map<String, List<String>>>(){}, new EnhancedType<Map<String, List<String>>>(){});\n        verifyNotEquals(new EnhancedType<Map<String, List<String>>>(){}, new EnhancedType<Map<String,\n            List<Integer>>>(){});\n\n        TableSchema<String> tableSchema = StaticTableSchema.builder(String.class).build();\n\n        verifyNotEquals(EnhancedType.documentOf(String.class,\n                                             tableSchema,\n                                             b -> b.ignoreNulls(false)), EnhancedType.documentOf(String.class,\n                                                                                                 tableSchema,\n                                                                                                 b -> b.ignoreNulls(true)));\n        verifyEquals(EnhancedType.documentOf(String.class,\n                                                tableSchema,\n                                                b -> b.ignoreNulls(false).preserveEmptyObject(true)),\n                        EnhancedType.documentOf(String.class,\n                                                tableSchema,\n                                                b -> b.ignoreNulls(false).preserveEmptyObject(true)));\n    }\n']",equality;Inner;Equals;Enhanced;of;of;On;table;class;false,1.2514647096395493e-09;3.2014213502407074e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.2369127944111824e-10;1.2369127944111824e-10;1.1641532182693481e-10,5,5,"[-5.838657379150391, -5.682524681091309, -6.256457328796387, -5.264355659484863, -5.4711480140686035, -0.01777188666164875]",0.9823850989341736
3,['    @Test\n    public void dequeOf_ReturnsRawClassOfDeque_WhenSpecifyingClass() {\n        EnhancedType<Deque<String>> type = EnhancedType.dequeOf(String.class);\n\n        assertThat(type.rawClass()).isEqualTo(Deque.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));\n    }\n'],Type;Enhanced;Enhanced;raw;Deque;deque;Parameters;type;Class;of,5.122274160385132e-09;3.725290298461914e-09;2.7939677238464355e-09;2.0954757928848267e-09;1.7462298274040222e-09;1.57160684466362e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.914184093475342, -5.86967658996582, -6.403806209564209, -5.459936618804932, -5.465384006500244, -0.015788545832037926]",0.9843355417251587
3,['    @Test\n    public void dequeOf_ReturnsRawClassOfDeque_WhenSpecifyingEnhancedType() {\n        EnhancedType<Deque<String>> type = EnhancedType.dequeOf(EnhancedType.of(String.class));\n\n        assertThat(type.rawClass()).isEqualTo(Deque.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));\n    }\n'],Enhanced;Enhanced;Enhanced;Deque;Type;Enhanced;Enhanced;raw;contains;Class,1.0710209608078003e-08;9.778887033462524e-09;2.0954757928848267e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.2223608791828156e-09;9.313225746154785e-10,5,5,"[-5.894885540008545, -5.8358540534973145, -6.371262073516846, -5.443676471710205, -5.446028232574463, -0.0161510668694973]",0.9839786887168884
3,['    @Test\n    public void sortedSetOf_ReturnsRawClassOfDeque_WhenSpecifyingClass() {\n        EnhancedType<SortedSet<String>> type = EnhancedType.sortedSetOf(String.class);\n\n        assertThat(type.rawClass()).isEqualTo(SortedSet.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));\n    }\n'],Type;When;Type;Raw;contains;Type;type;class;raw;Class,1.3969838619232178e-09;1.1641532182693481e-09;7.275957614183426e-10;6.402842700481415e-10;6.402842700481415e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.889028072357178, -5.811919212341309, -6.361611366271973, -5.419625759124756, -5.465160369873047, -0.01628020592033863]",0.9838516116142273
3,['    @Test\n    public void sortedSetOf_ReturnsRawClassOfDeque_WhenSpecifyingEnhancedType() {\n        EnhancedType<SortedSet<String>> type = EnhancedType.sortedSetOf(EnhancedType.of(String.class));\n\n        assertThat(type.rawClass()).isEqualTo(SortedSet.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));\n    }\n'],Type;Enhanced;Type;orted;When;type;raw;type;contains;sorted,2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.882284641265869, -5.80704927444458, -6.350984573364258, -5.4153361320495605, -5.455084800720215, -0.016395723447203636]",0.9837379455566406
3,['    @Test\n    public void navigableSetOf_ReturnsRawClassOfNavigableSet_WhenSpecifyingClass() {\n        EnhancedType<NavigableSet<String>> type = EnhancedType.navigableSetOf(String.class);\n\n        assertThat(type.rawClass()).isEqualTo(NavigableSet.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));\n    }\n'],Type;Enhanced;Type;of;Set;Enhanced;Raw;Set;Class;qual,2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;6.111804395914078e-10,5,5,"[-5.925410747528076, -5.876790523529053, -6.417470455169678, -5.454949855804443, -5.466578006744385, -0.015731165185570717]",0.9843919277191162
3,['    @Test\n    public void navigableSetOf_ReturnsRawClassOfNavigableSet_WhenSpecifyingEnhancedType() {\n        EnhancedType<NavigableSet<String>> type = EnhancedType.navigableSetOf(EnhancedType.of(String.class));\n\n        assertThat(type.rawClass()).isEqualTo(NavigableSet.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));\n    }\n'],Enhanced;Type;Type;Type;Navigable;Enhanced;type;Set;Type;navigable,4.190951585769653e-09;3.725290298461914e-09;2.7939677238464355e-09;2.6775524020195007e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.918081760406494, -5.867703437805176, -6.406033992767334, -5.458719253540039, -5.452792167663574, -0.015839355066418648]",0.9842854142189026
3,['    @Test\n    public void collectionOf_ReturnsRawClassOfCollection_WhenSpecifyingClass() {\n        EnhancedType<Collection<String>> type = EnhancedType.collectionOf(String.class);\n\n        assertThat(type.rawClass()).isEqualTo(Collection.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));\n    }\n'],Type;type;Class;of;type;qual;Collection;Exactly;Parameters;class,1.1641532182693481e-09;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.9199323654174805, -5.861847400665283, -6.411440849304199, -5.4588823318481445, -5.46982479095459, -0.015767894685268402]",0.984355628490448
3,['    @Test\n    public void collectionOf_ReturnsRawClassOfCollection_WhenSpecifyingEnhancedType() {\n        EnhancedType<Collection<String>> type = EnhancedType.collectionOf(EnhancedType.of(String.class));\n\n        assertThat(type.rawClass()).isEqualTo(Collection.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));\n    }\n'],Enhanced;Enhanced;Enhanced;Enhanced;Type;collection;Parameters;Enhanced;of;class,4.190951585769653e-09;3.725290298461914e-09;3.259629011154175e-09;2.561137080192566e-09;1.862645149230957e-09;1.4551915228366852e-09;1.367880031466484e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.9033942222595215, -5.841904163360596, -6.388357639312744, -5.44944429397583, -5.445362091064453, -0.01605769246816635]",0.9840705394744873
3,"['    @Test\n    public void sortedMapOf_ReturnsRawClassOfSortedMap_WhenSpecifyingClass() {\n        EnhancedType<SortedMap<String, Integer>> type = EnhancedType.sortedMapOf(String.class, Integer.class);\n\n        assertThat(type.rawClass()).isEqualTo(SortedMap.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n    }\n']",Enhanced;Raw;Type;Enhanced;When;Returns;Parameters;Type;Specifying;type,3.259629011154175e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10,5,5,"[-5.893227577209473, -5.840977668762207, -6.3765668869018555, -5.432974815368652, -5.457805633544922, -0.016127372160553932]",0.9840019941329956
3,"['    @Test\n    public void sortedMapOf_ReturnsRawClassOfSortedMap_WhenSpecifyingEnhancedType() {\n        EnhancedType<SortedMap<String, Integer>> type =\n            EnhancedType.sortedMapOf(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n\n        assertThat(type.rawClass()).isEqualTo(SortedMap.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n    }\n']",of;Enhanced;type;raw;Enhanced;class;Returns;Map;of;Class,1.1059455573558807e-09;1.1059455573558807e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.843138694763184, -5.736985206604004, -6.28626823425293, -5.3559675216674805, -5.429721832275391, -0.017237842082977295]",0.9829098582267761
3,"['    @Test\n    public void concurrentMapOf_ReturnsRawClassOfConcurrentMap_WhenSpecifyingClass() {\n        EnhancedType<ConcurrentMap<String, Integer>> type = EnhancedType.concurrentMapOf(String.class, Integer.class);\n\n        assertThat(type.rawClass()).isEqualTo(ConcurrentMap.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n    }\n']",Concurrent;Enhanced;Map;That;Enhanced;Concurrent;concurrent;raw;Concurrent;raw,1.0186340659856796e-09;8.731149137020111e-10;5.529727786779404e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.912142753601074, -5.840448379516602, -6.400300979614258, -5.467124938964844, -5.486959934234619, -0.01576237939298153]",0.9843611717224121
3,"['    @Test\n    public void concurrentMapOf_ReturnsRawClassOfConcurrentMap_WhenSpecifyingEnhancedType() {\n        EnhancedType<ConcurrentMap<String, Integer>> type =\n            EnhancedType.concurrentMapOf(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n\n        assertThat(type.rawClass()).isEqualTo(ConcurrentMap.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n    }\n']",Enhanced;Concurrent;Parameters;Specifying;Enhanced;Map;Enhanced;class;Enhanced;Map,6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.837623469531536e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.867772102355957, -5.759444236755371, -6.315106391906738, -5.3863935470581055, -5.455291271209717, -0.01678299345076084]",0.9833570718765259
3,"['    @Test\n    public void navigableMapOf_ReturnsRawClassOfNavigableMap_WhenSpecifyingClass() {\n        EnhancedType<NavigableMap<String, Integer>> type = EnhancedType.navigableMapOf(String.class, Integer.class);\n\n        assertThat(type.rawClass()).isEqualTo(NavigableMap.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n    }\n']",Enhanced;Class;Navigable;Enhanced;contains;raw;Class;Map;That;Returns,2.0954757928848267e-09;1.862645149230957e-09;9.38598532229662e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.9139084815979, -5.873751640319824, -6.408070087432861, -5.455874919891357, -5.457330703735352, -0.015822691842913628]",0.9843018054962158
3,"['    @Test\n    public void navigableMapOf_ReturnsRawClassOfNavigableMap_WhenSpecifyingEnhancedType() {\n        EnhancedType<NavigableMap<String, Integer>> type =\n            EnhancedType.navigableMapOf(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n\n        assertThat(type.rawClass()).isEqualTo(NavigableMap.class);\n        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));\n    }\n']",Enhanced;navigable;Enhanced;Map;navigable;Map;Raw;Enhanced;Navigable;of,1.0477378964424133e-09;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10;2.219167072325945e-10,5,5,"[-5.86479377746582, -5.766060829162598, -6.32449197769165, -5.383713722229004, -5.451799392700195, -0.016780883073806763]",0.983359158039093
3,"['    @Test\n    public void documentOf_toString_doesNotRaiseNPE() {\n        TableSchema<String> tableSchema = StaticTableSchema.builder(String.class).build();\n        EnhancedType<String> type = EnhancedType.documentOf(String.class, tableSchema);\n        assertThatCode(() -> type.toString()).doesNotThrowAnyException();\n    }\n']",does;does;Type;type;Schema;Table;builder;Any;Schema;table,1.3969838619232178e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.880620002746582, -5.781209945678711, -6.36283016204834, -5.431983947753906, -5.466048717498779, -0.016337556764483452]",0.983795166015625
3,"['    @Test\n    public void documentOf_withEnhancedTypeConfiguration() {\n        TableSchema<String> tableSchema = StaticTableSchema.builder(String.class).build();\n        EnhancedType<String> type = EnhancedType.documentOf(String.class, tableSchema, b -> b.preserveEmptyObject(true));\n        assertThat(type.documentConfiguration()).isPresent();\n        assertThat(type.documentConfiguration().get().preserveEmptyObject()).isTrue();\n    }\n']",Enhanced;Table;Empty;Schema;Configuration;class;document;Schema;type;document,4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.853625297546387, -5.753929138183594, -6.312191486358643, -5.379992485046387, -5.436155319213867, -0.016960926353931427]",0.9831820726394653
3,"['    @Test\n    public void join_correctlyWrapsExpressions() {\n        Expression expression1 = Expression.builder().expression(""one"").build();\n        Expression expression2 = Expression.builder().expression(""two"").build();\n        Expression expression3 = Expression.builder().expression(""three"").build();\n\n        Expression coalescedExpression = Expression.join(Expression.join(expression1, expression2, "" AND ""),\n                                                         expression3, "" AND "");\n\n        String expectedExpression = ""((one) AND (two)) AND (three)"";\n        assertThat(coalescedExpression.expression(), is(expectedExpression));\n    }\n']",three;expected;three;two;Expression;Expression;Expression;expression;Expression;builder,4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;2.9103830456733704e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.2369127944111824e-10;1.1641532182693481e-10,5,5,"[-5.852743625640869, -5.707150936126709, -6.297688961029053, -5.344992160797119, -5.47705602645874, -0.017134256660938263]",0.9830117225646973
3,"['    @Test\n    public void joinExpressions_correctlyJoins() {\n        String result = Expression.joinExpressions(""one"", ""two"", "" AND "");\n        assertThat(result, is(""(one) AND (two)""));\n    }\n']",Joins;join;Expression;join;one;one;result;two;That;result,1.979060471057892e-09;1.280568540096283e-09;8.731149137020111e-10;6.984919309616089e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.1641532182693481e-10;2.9103830456733704e-11,5,5,"[-5.869284152984619, -5.72662878036499, -6.342324733734131, -5.439272403717041, -5.449444770812988, -0.016621913760900497]",0.9835154414176941
3,"['    @Test\n    public void joinNames_correctlyJoins() {\n        Map<String, String> names1 = new HashMap<>();\n        names1.put(""one"", ""1"");\n        names1.put(""two"", ""2"");\n        Map<String, String> names2 = new HashMap<>();\n        names2.put(""three"", ""3"");\n        names2.put(""four"", ""4"");\n\n        Map<String, String> result = Expression.joinNames(names1, names2);\n\n        assertThat(result.size(), is(4));\n        assertThat(result, hasEntry(""one"", ""1""));\n        assertThat(result, hasEntry(""two"", ""2""));\n        assertThat(result, hasEntry(""three"", ""3""));\n        assertThat(result, hasEntry(""four"", ""4""));\n    }\n']",Expression;Joins;four;result;join;size;names;names;two;has,5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6370904631912708e-10,5,5,"[-5.8045501708984375, -5.675955772399902, -6.244898796081543, -5.295223236083984, -5.450405597686768, -0.0178499948233366]",0.9823083877563477
3,"['    @Test\n    public void joinNames_correctlyJoinsEmpty() {\n        Map<String, String> names1 = new HashMap<>();\n        names1.put(""one"", ""1"");\n        names1.put(""two"", ""2"");\n        Map<String, String> names2 = new HashMap<>();\n        names2.put(""three"", ""3"");\n        names2.put(""four"", ""4"");\n\n        Map<String, String> result = Expression.joinNames(names1, null);\n        assertThat(result.size(), is(2));\n        assertThat(result, hasEntry(""one"", ""1""));\n        assertThat(result, hasEntry(""two"", ""2""));\n\n        result = Expression.joinNames(null, names2);\n        assertThat(result.size(), is(2));\n        assertThat(result, hasEntry(""three"", ""3""));\n        assertThat(result, hasEntry(""four"", ""4""));\n\n        result = Expression.joinNames(names1, Collections.emptyMap());\n        assertThat(result.size(), is(2));\n        assertThat(result, hasEntry(""one"", ""1""));\n        assertThat(result, hasEntry(""two"", ""2""));\n\n        result = Expression.joinNames(Collections.emptyMap(), names2);\n        assertThat(result.size(), is(2));\n        assertThat(result, hasEntry(""three"", ""3""));\n        assertThat(result, hasEntry(""four"", ""4""));\n    }\n']",Joins;correctly;join;three;Expression;Collections;names;join;put;Entry,5.238689482212067e-10;4.656612873077393e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.9281287677586079e-10;1.8917489796876907e-10,5,5,"[-5.796241760253906, -5.66080904006958, -6.23370885848999, -5.258884429931641, -5.477232933044434, -0.018024342134594917]",0.9821372628211975
3,"['    @Test\n    public void joinNames_conflictingKey() {\n        Map<String, String> names1 = new HashMap<>();\n        names1.put(""one"", ""1"");\n        names1.put(""two"", ""2"");\n        Map<String, String> names2 = new HashMap<>();\n        names2.put(""three"", ""3"");\n        names2.put(""two"", ""4"");\n\n        exception.expect(IllegalArgumentException.class);\n        exception.expectMessage(""two"");\n        Expression.joinNames(names1, names2);\n    }\n']",conflicting;Names;three;Key;join;expect;names;put;Hash;new,1.7462298274040222e-09;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.964508555829525e-10;1.7462298274040222e-10,5,5,"[-5.834832191467285, -5.702566146850586, -6.28697395324707, -5.341217041015625, -5.467784881591797, -0.01728072576224804]",0.9828677177429199
3,"['    @Test\n    public void joinValues_correctlyJoins() {\n        Map<String, AttributeValue> values1 = new HashMap<>();\n        values1.put(""one"", EnhancedAttributeValue.fromString(""1"").toAttributeValue());\n        values1.put(""two"", EnhancedAttributeValue.fromString(""2"").toAttributeValue());\n        Map<String, AttributeValue> values2 = new HashMap<>();\n        values2.put(""three"", EnhancedAttributeValue.fromString(""3"").toAttributeValue());\n        values2.put(""four"", EnhancedAttributeValue.fromString(""4"").toAttributeValue());\n\n        Map<String, AttributeValue> result = Expression.joinValues(values1, values2);\n\n        assertThat(result.size(), is(4));\n        assertThat(result, hasEntry(""one"", EnhancedAttributeValue.fromString(""1"").toAttributeValue()));\n        assertThat(result, hasEntry(""two"", EnhancedAttributeValue.fromString(""2"").toAttributeValue()));\n        assertThat(result, hasEntry(""three"", EnhancedAttributeValue.fromString(""3"").toAttributeValue()));\n        assertThat(result, hasEntry(""four"", EnhancedAttributeValue.fromString(""4"").toAttributeValue()));\n    }\n']",correctly;Joins;Map;Expression;one;values;four;Map;new;size,2.561137080192566e-09;1.367880031466484e-09;4.802132025361061e-10;4.656612873077393e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.5279510989785194e-10,5,5,"[-5.79042911529541, -5.663508415222168, -6.230973243713379, -5.2740559577941895, -5.455672264099121, -0.01805127039551735]",0.9821106791496277
3,"['    @Test\n    public void joinValues_conflictingKey() {\n        Map<String, AttributeValue> values1 = new HashMap<>();\n        values1.put(""one"", EnhancedAttributeValue.fromString(""1"").toAttributeValue());\n        values1.put(""two"", EnhancedAttributeValue.fromString(""2"").toAttributeValue());\n        Map<String, AttributeValue> values2 = new HashMap<>();\n        values2.put(""three"", EnhancedAttributeValue.fromString(""3"").toAttributeValue());\n        values2.put(""two"", EnhancedAttributeValue.fromString(""4"").toAttributeValue());\n\n        exception.expect(IllegalArgumentException.class);\n        exception.expectMessage(""two"");\n        Expression.joinValues(values1, values2);\n    }\n']",Expression;Values;Attribute;two;one;Enhanced;Hash;Values;put;Attribute,6.984919309616089e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.820706844329834, -5.693642616271973, -6.272945880889893, -5.3186163902282715, -5.475113868713379, -0.017460327595472336]",0.98269122838974
3,"['    @Test\n    public void getKeyMap() {\n        Map<String, AttributeValue> expectedResult = new HashMap<>();\n        expectedResult.put(""gsi_id"", AttributeValue.builder().s(""id123"").build());\n        expectedResult.put(""gsi_sort"", AttributeValue.builder().s(""id456"").build());\n        assertThat(key.keyMap(FakeItemWithIndices.getTableSchema(), ""gsi_1""), is(expectedResult));\n    }\n']",Map;Schema;Map;si;Table;new;build;Attribute;Hash;put,4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.837573051452637, -5.736994743347168, -6.29100227355957, -5.36628532409668, -5.448559761047363, -0.017112694680690765]",0.983032763004303
3,"['    @Test\n    public void getPrimaryKeyMap() {\n        Map<String, AttributeValue> expectedResult = new HashMap<>();\n        expectedResult.put(""id"", AttributeValue.builder().s(""id123"").build());\n        expectedResult.put(""sort"", AttributeValue.builder().s(""id456"").build());\n        assertThat(key.primaryKeyMap(FakeItemWithIndices.getTableSchema()), is(expectedResult));\n    }\n']",Schema;sort;build;Fake;Primary;Indices;Key;Map;Table;build,6.402842700481415e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.841302871704102, -5.711339950561523, -6.2766571044921875, -5.362090587615967, -5.433116912841797, -0.01730240136384964]",0.9828465580940247
3,"['    @Test\n    public void getPartitionKeyValue() {\n        assertThat(key.partitionKeyValue(),\n                   is(AttributeValue.builder().s(""id123"").build()));\n    }\n']",Key;Value;partition;Value;builder;build;Key;Partition;key;Value,5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-1.4551915228366852e-10,5,5,"[-5.88258171081543, -5.750072479248047, -6.344859600067139, -5.457398414611816, -5.457917213439941, -0.01638634130358696]",0.9837470650672913
3,"['    @Test\n    public void getSortKeyValue() {\n        assertThat(key.sortKeyValue(), is(Optional.of(AttributeValue.builder().s(""id456"").build())));\n    }\n']",Sort;Attribute;Key;That;Key;Optional;Value;get;key;Value,3.958120942115784e-09;3.841705620288849e-09;1.1641532182693481e-09;8.440110832452774e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.860372543334961, -5.7495646476745605, -6.332657337188721, -5.457830429077148, -5.421112060546875, -0.016634341329336166]",0.9835033416748047
3,"['    @Test\n    public void getKeyMap_partitionOnly() {\n        Map<String, AttributeValue> expectedResult = new HashMap<>();\n        expectedResult.put(""gsi_id"", AttributeValue.builder().s(""id123"").build());\n        assertThat(partitionOnlyKey.keyMap(FakeItemWithIndices.getTableSchema(), ""gsi_1""), is(expectedResult));\n    }\n']",Fake;get;Indices;partition;Only;Attribute;si;Table;get;expected,4.6566128730773926e-09;2.3283064365386963e-09;2.0954757928848267e-09;8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.876609802246094, -5.773608207702637, -6.3506669998168945, -5.428678512573242, -5.483041763305664, -0.01633673533797264]",0.9837961196899414
3,"['    @Test\n    public void getPrimaryKeyMap_partitionOnly() {\n        Map<String, AttributeValue> expectedResult = new HashMap<>();\n        expectedResult.put(""id"", AttributeValue.builder().s(""id123"").build());\n        assertThat(partitionOnlyKey.primaryKeyMap(FakeItemWithIndices.getTableSchema()), is(expectedResult));\n    }\n']",Key;Only;Result;Indices;expected;get;build;expected;Value;Key,1.6298145055770874e-09;1.6298145055770874e-09;8.149072527885437e-10;7.275957614183426e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.8614959716796875, -5.730604648590088, -6.322135925292969, -5.415124893188477, -5.454794406890869, -0.016752397641539574]",0.9833872318267822
3,"['    @Test\n    public void getPartitionKeyValue_partitionOnly() {\n        assertThat(partitionOnlyKey.partitionKeyValue(),\n                   is(AttributeValue.builder().s(""id123"").build()));\n    }\n']",partition;partition;Key;Key;get;Value;Value;Only;That;partition,2.0954757928848267e-09;1.7462298274040222e-09;1.1641532182693481e-09;9.022187441587448e-10;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.909379959106445, -5.790761470794678, -6.380383491516113, -5.47700834274292, -5.47137975692749, -0.015978271141648293]",0.9841486811637878
3,"['    @Test\n    public void getSortKeyValue_partitionOnly() {\n        assertThat(partitionOnlyKey.sortKeyValue(), is(Optional.empty()));\n    }\n']",Only;Sort;Value;sort;Optional;That;empty;Value;Key;Only,2.0954757928848267e-09;1.862645149230957e-09;1.1641532182693481e-09;9.89530235528946e-10;4.656612873077393e-10;5.820766091346741e-11;-2.3283064365386963e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.89182710647583, -5.753261089324951, -6.364987850189209, -5.489664077758789, -5.445888042449951, -0.016229303553700447]",0.9839016795158386
3,"['    @Test\n    public void numericKeys_convertsToCorrectAttributeValue() {\n        Key key = Key.builder().partitionValue(123).sortValue(45.6).build();\n\n        assertThat(key.partitionKeyValue(), is(AttributeValue.builder().n(""123"").build()));\n        assertThat(key.sortKeyValue(), is(Optional.of(AttributeValue.builder().n(""45.6"").build())));\n    }\n']",Correct;Keys;partition;Value;Attribute;Key;converts;Value;build;builder,1.3969838619232178e-09;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.8509979248046875, -5.73197078704834, -6.296468257904053, -5.390924453735352, -5.441196441650391, -0.01699620485305786]",0.9831474423408508
3,"['    @Test\n    public void stringKeys_convertsToCorrectAttributeValue() {\n        Key key = Key.builder().partitionValue(""one"").sortValue(""two"").build();\n\n        assertThat(key.partitionKeyValue(), is(AttributeValue.builder().s(""one"").build()));\n        assertThat(key.sortKeyValue(), is(Optional.of(AttributeValue.builder().s(""two"").build())));\n    }\n']",sort;partition;Value;Value;Correct;Attribute;Key;build;build;key,5.820766091346741e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.6007106751203537e-10,5,5,"[-5.842640399932861, -5.735535621643066, -6.294516563415527, -5.384955883026123, -5.4345245361328125, -0.017069803550839424]",0.983074963092804
3,"['    @Test\n    public void binaryKeys_convertsToCorrectAttributeValue() {\n        SdkBytes partition = SdkBytes.fromString(""one"", StandardCharsets.UTF_8);\n        SdkBytes sort = SdkBytes.fromString(""two"", StandardCharsets.UTF_8);\n\n        Key key = Key.builder().partitionValue(partition).sortValue(sort).build();\n\n        assertThat(key.partitionKeyValue(), is(AttributeValue.builder().b(partition).build()));\n        assertThat(key.sortKeyValue(), is(Optional.of(AttributeValue.builder().b(sort).build())));\n    }\n']",partition;Keys;Attribute;Standard;Value;UTF;Bytes;UTF;partition;sort,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.853510856628418, -5.726639747619629, -6.330737113952637, -5.389395236968994, -5.492626190185547, -0.01672942005097866]",0.9834097623825073
3,"['    @Test\n    public void toBuilder() {\n        Key keyClone = key.toBuilder().build();\n\n        assertThat(key, is(equalTo(keyClone)));\n    }\n']",to;Builder;Builder;key;Key;Clone;key;That;key;build,8.149072527885437e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.1641532182693481e-10;0.0;-1.4551915228366852e-11;-2.9103830456733704e-11;-5.820766091346741e-11;-9.458744898438454e-11,5,5,"[-5.8414506912231445, -5.673816680908203, -6.282960414886475, -5.423224925994873, -5.378495216369629, -0.01738511584699154]",0.9827651381492615
3,"['    @Test\n    public void nullPartitionKey_shouldThrowException() {\n        AttributeValue attributeValue = null;\n        assertThatThrownBy(() ->  Key.builder().partitionValue(attributeValue).build())\n         .isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""partitionValue should not be null"");\n\n        assertThatThrownBy(() ->  Key.builder().partitionValue(AttributeValue.builder().nul(true).build()).build())\n            .isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""partitionValue should not be null"");\n    }\n']",null;should;Exception;Throw;partition;partition;be;class;Thrown;has,6.05359673500061e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.853280067443848, -5.719222068786621, -6.303625583648682, -5.376245021820068, -5.48820686340332, -0.01688450574874878]",0.9832572340965271
3,['    @Test\n    public void builder_constructsStaticTableSchemaBuilder() {\n        StaticTableSchema.Builder<FakeItem> builder = TableSchema.builder(FakeItem.class);\n        assertThat(builder).isNotNull();\n    }\n'],construct;Schema;Table;class;Builder;Fake;Static;Builder;builder;builder,2.444721758365631e-09;2.0954757928848267e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.860658168792725, -5.699565410614014, -6.322846412658691, -5.443934440612793, -5.416259288787842, -0.016899744048714638]",0.9832422733306885
3,['    @Test\n    public void fromBean_constructsBeanTableSchema() {\n        BeanTableSchema<SimpleBean> beanBeanTableSchema = TableSchema.fromBean(SimpleBean.class);\n        assertThat(beanBeanTableSchema).isNotNull();\n    }\n'],Table;Schema;Bean;bean;Table;Not;from;Schema;Bean;Schema,1.979060471057892e-09;1.1641532182693481e-09;7.566995918750763e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.6007106751203537e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.894454002380371, -5.773947715759277, -6.383181095123291, -5.462196350097656, -5.456243515014648, -0.016196109354496002]",0.9839343428611755
3,['    @Test\n    public void fromImmutable_constructsImmutableTableSchema() {\n        ImmutableTableSchema<SimpleImmutable> immutableTableSchema =\n            TableSchema.fromImmutableClass(SimpleImmutable.class);\n\n        assertThat(immutableTableSchema).isNotNull();\n    }\n'],Class;Table;That;immutable;Schema;class;Schema;from;Schema;from,5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;3.4924596548080444e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0,5,5,"[-5.865694999694824, -5.70569372177124, -6.3113532066345215, -5.404699325561523, -5.440197467803955, -0.01695459708571434]",0.9831883311271667
3,['    @Test\n    public void fromClass_constructsBeanTableSchema() {\n        TableSchema<SimpleBean> tableSchema = TableSchema.fromClass(SimpleBean.class);\n        assertThat(tableSchema).isInstanceOf(BeanTableSchema.class);\n    }\n'],from;Schema;class;Schema;Bean;Schema;Simple;class;Instance;That,1.862645149230957e-09;5.238689482212067e-10;5.093170329928398e-10;4.3655745685100555e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;-2.9103830456733704e-11,5,5,"[-5.873976707458496, -5.746659278869629, -6.35521125793457, -5.445855140686035, -5.440480709075928, -0.016530225053429604]",0.9836056232452393
3,['    @Test\n    public void fromClass_constructsImmutableTableSchema() {\n        TableSchema<SimpleImmutable> tableSchema = TableSchema.fromClass(SimpleImmutable.class);\n        assertThat(tableSchema).isInstanceOf(ImmutableTableSchema.class);\n    }\n'],Instance;construct;from;Class;Table;Schema;Class;Table;Immutable;That,1.076841726899147e-09;9.313225746154785e-10;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.858521461486816, -5.704580783843994, -6.326542854309082, -5.43406867980957, -5.425950527191162, -0.016882162541151047]",0.9832594394683838
3,"['    @Test\n    public void fromClass_invalidClassThrowsException() {\n        exception.expect(IllegalArgumentException.class);\n        exception.expectMessage(""InvalidBean"");\n        TableSchema.fromClass(InvalidBean.class);\n    }\n']",Bean;Invalid;Message;Invalid;Table;from;class;expect;Exception;exception,4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;2.9103830456733704e-11,5,5,"[-5.885944843292236, -5.74283504486084, -6.356546878814697, -5.452895641326904, -5.457299709320068, -0.01640193909406662]",0.9837318658828735
3,['    @Test\n    public void defaultBuilder_defaultToFalse() {\n        EnhancedTypeDocumentConfiguration configuration =\n            EnhancedTypeDocumentConfiguration.builder().build();\n        assertThat(configuration.ignoreNulls()).isFalse();\n        assertThat(configuration.preserveEmptyObject()).isFalse();\n    }\n'],False;That;Empty;configuration;configuration;Document;preserve;Document;False;builder,4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.1641532182693481e-10;4.3655745685100555e-11;0.0;-5.820766091346741e-11,5,5,"[-5.863831996917725, -5.708056926727295, -6.294915676116943, -5.383418083190918, -5.442159175872803, -0.017072264105081558]",0.9830726385116577
3,['    @Test\n    public void equalsHashCode() {\n        EnhancedTypeDocumentConfiguration configuration =\n            EnhancedTypeDocumentConfiguration.builder()\n                                             .preserveEmptyObject(true)\n                                             .ignoreNulls(false)\n                                             .build();\n\n        EnhancedTypeDocumentConfiguration another =\n            EnhancedTypeDocumentConfiguration.builder()\n                                             .preserveEmptyObject(true)\n                                             .ignoreNulls(false)\n                                             .build();\n\n        EnhancedTypeDocumentConfiguration different =\n            EnhancedTypeDocumentConfiguration.builder()\n                                             .preserveEmptyObject(false)\n                                             .ignoreNulls(true)\n                                             .build();\n\n        assertThat(configuration).isEqualTo(another);\n        assertThat(configuration.hashCode()).isEqualTo(another.hashCode());\n        assertThat(configuration).isNotEqualTo(different);\n        assertThat(configuration.hashCode()).isNotEqualTo(different.hashCode());\n    }\n'],Hash;preserve;Enhanced;another;different;Enhanced;Document;build;Configuration;ignore,6.984919309616089e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3646862246096134e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.829734802246094, -5.652310371398926, -6.234189987182617, -5.245875835418701, -5.457406997680664, -0.01810629479587078]",0.982056736946106
3,"['    @Test\n    public void defaultConvertersThrowExceptions() {\n        assertThat(DefaultVisitor.INSTANCE.convert(EnhancedAttributeValue.nullValue())).isEqualTo(null);\n\n        assertDefaultConversionFails(EnhancedAttributeValue.fromString(""foo""));\n        assertDefaultConversionFails(EnhancedAttributeValue.fromNumber(""1""));\n        assertDefaultConversionFails(EnhancedAttributeValue.fromBoolean(true));\n        assertDefaultConversionFails(EnhancedAttributeValue.fromBytes(SdkBytes.fromUtf8String("""")));\n        assertDefaultConversionFails(EnhancedAttributeValue.fromSetOfStrings(Collections.emptyList()));\n        assertDefaultConversionFails(EnhancedAttributeValue.fromSetOfNumbers(Collections.emptyList()));\n        assertDefaultConversionFails(EnhancedAttributeValue.fromSetOfBytes(Collections.emptyList()));\n        assertDefaultConversionFails(EnhancedAttributeValue.fromListOfAttributeValues(Collections.emptyList()));\n        assertDefaultConversionFails(EnhancedAttributeValue.fromMap(Collections.emptyMap()));\n    }\n']",Visitor;Enhanced;Attribute;Default;from;Collections;Numbers;from;Bytes;Ut,6.402842700481415e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.8221516609191895, -5.673374176025391, -6.254408836364746, -5.303025245666504, -5.4563446044921875, -0.017721176147460938]",0.9824349284172058
3,"['    @Test\n    public void optionalDoubleConverterWorksCorrectly() {\n        OptionalDoubleAttributeConverter converter = OptionalDoubleAttributeConverter.create();\n\n        assertThat(transformFrom(converter, OptionalDouble.empty())).isEqualTo(nullValue().toAttributeValue());\n        assertThat(transformFrom(converter, OptionalDouble.of(-Double.MAX_VALUE))).isEqualTo(fromNumber(""-1.7976931348623157E308"").toAttributeValue());\n        assertThat(transformFrom(converter, OptionalDouble.of(-Double.MIN_VALUE))).isEqualTo(fromNumber(""-4.9E-324"").toAttributeValue());\n        assertThat(transformFrom(converter, OptionalDouble.of(0.0))).isEqualTo(fromNumber(""0.0"").toAttributeValue());\n        assertThat(transformFrom(converter, OptionalDouble.of(Double.MIN_VALUE))).isEqualTo(fromNumber(""4.9E-324"").toAttributeValue());\n        assertThat(transformFrom(converter, OptionalDouble.of(Double.MAX_VALUE))).isEqualTo(fromNumber(""1.7976931348623157E308"").toAttributeValue());\n\n        assertThat(transformTo(converter, nullValue().toAttributeValue())).isEmpty();\n        assertThat(transformTo(converter, fromNumber(""-1.7976931348623157E308""))).hasValue(-Double.MAX_VALUE);\n        assertThat(transformTo(converter, fromNumber(""-4.9E-324""))).hasValue(-Double.MIN_VALUE);\n        assertThat(transformTo(converter, fromNumber(""0.0""))).hasValue(0.0);\n        assertThat(transformTo(converter, fromNumber(""4.9E-324""))).hasValue(Double.MIN_VALUE);\n        assertThat(transformTo(converter, fromNumber(""1.7976931348623157E308""))).hasValue(Double.MAX_VALUE);\n    }\n']",optional;Correctly;MAX;Attribute;MIN;Optional;Converter;converter;Optional;Attribute,8.440110832452774e-10;7.566995918750763e-10;6.402842700481415e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.792457103729248, -5.6244587898254395, -6.228138446807861, -5.277855396270752, -5.4693450927734375, -0.01811261661350727]",0.9820505380630493
3,"['    @Test\n    public void optionalIntConverterWorksCorrectly() {\n        OptionalIntAttributeConverter converter = OptionalIntAttributeConverter.create();\n\n        assertThat(transformFrom(converter, OptionalInt.empty())).isEqualTo(nullValue().toAttributeValue());\n        assertThat(transformFrom(converter, OptionalInt.of(Integer.MIN_VALUE))).isEqualTo(fromNumber(""-2147483648"").toAttributeValue());\n        assertThat(transformFrom(converter, OptionalInt.of(0))).isEqualTo(fromNumber(""0"").toAttributeValue());\n        assertThat(transformFrom(converter, OptionalInt.of(Integer.MAX_VALUE))).isEqualTo(fromNumber(""2147483647"").toAttributeValue());\n\n        assertThat(transformTo(converter, nullValue().toAttributeValue())).isEmpty();\n        assertThat(transformTo(converter, fromNumber(""-2147483648""))).hasValue(Integer.MIN_VALUE);\n        assertThat(transformTo(converter, fromNumber(""0""))).hasValue(0);\n        assertThat(transformTo(converter, fromNumber(""2147483647""))).hasValue(Integer.MAX_VALUE);\n    }\n']",Works;Correctly;Optional;converter;MIN;From;Converter;Int;Optional;Attribute,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.813218593597412, -5.650080680847168, -6.250258445739746, -5.309612274169922, -5.463410377502441, -0.017775047570466995]",0.9823821187019348
3,"['    @Test\n    public void optionalLongConverterWorksCorrectly() {\n        OptionalLongAttributeConverter converter = OptionalLongAttributeConverter.create();\n\n        assertThat(transformFrom(converter, OptionalLong.empty())).isEqualTo(nullValue().toAttributeValue());\n        assertThat(transformFrom(converter, OptionalLong.of(Long.MIN_VALUE))).isEqualTo(fromNumber(""-9223372036854775808"").toAttributeValue());\n        assertThat(transformFrom(converter, OptionalLong.of(0))).isEqualTo(fromNumber(""0"").toAttributeValue());\n        assertThat(transformFrom(converter, OptionalLong.of(Long.MAX_VALUE))).isEqualTo(fromNumber(""9223372036854775807"").toAttributeValue());\n\n        assertThat(transformTo(converter, nullValue().toAttributeValue())).isEmpty();\n        assertThat(transformTo(converter, fromNumber(""-9223372036854775808""))).hasValue(Long.MIN_VALUE);\n        assertThat(transformTo(converter, fromNumber(""0""))).hasValue(0);\n        assertThat(transformTo(converter, fromNumber(""9223372036854775807""))).hasValue(Long.MAX_VALUE);\n    }\n']",Long;Works;Converter;Long;Attribute;Long;Correctly;Long;Long;to,3.725290298461914e-09;1.7462298274040222e-09;7.275957614183426e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.814610958099365, -5.652627468109131, -6.261742115020752, -5.319301128387451, -5.4714674949646, -0.017656058073043823]",0.9824988842010498
3,"['    @Test\n    public void InstantAsStringAttributeConverterMinTest() {\n        verifyTransform(Instant.MIN, ""-1000000000-01-01T00:00:00Z"");\n    }\n']",Min;Instant;As;Transform;verify;Attribute;MIN;Converter;Instant,2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.280568540096283e-09;4.656612873077393e-10;4.656612873077393e-10;-2.9976945370435715e-09;-1.0710209608078003e-08,5,5,"[-5.891538143157959, -5.737576007843018, -6.334764003753662, -5.480096340179443, -5.424002647399902, -0.01647218130528927]",0.9836627244949341
3,"['    @Test\n    public void InstantAsStringAttributeConverterEpochMinusOneMilliTest() {\n        verifyTransform(Instant.EPOCH.minusMillis(1), ""1969-12-31T23:59:59.999Z"");\n    }\n']",Instant;minus;Epoch;Minus;CH;Converter;EP;One;As;Transform,2.3283064365386963e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0,5,5,"[-5.858193874359131, -5.691000461578369, -6.2844085693359375, -5.469038486480713, -5.38306999206543, -0.01705128699541092]",0.98309326171875
3,"['    @Test\n    public void InstantAsStringAttributeConverterEpochTest() {\n        verifyTransform(Instant.EPOCH, ""1970-01-01T00:00:00Z"");\n    }\n']",Instant;Instant;Converter;verify;EP;CH;Transform;As;Attribute;Epoch,1.30385160446167e-08;7.450580596923828e-09;4.540197551250458e-09;3.725290298461914e-09;2.7939677238464355e-09;4.656612873077393e-10;-1.7462298274040222e-09;-4.6566128730773926e-09;-4.889443516731262e-09;-1.3737007975578308e-08,5,5,"[-5.879665374755859, -5.700953483581543, -6.297389030456543, -5.485414981842041, -5.395762920379639, -0.016802452504634857]",0.9833378195762634
3,"['    @Test\n    public void InstantAsStringAttributeConverterEpochPlusOneMilliTest() {\n        verifyTransform(Instant.EPOCH.plusMillis(1), ""1970-01-01T00:00:00.001Z"");\n    }\n']",Epoch;As;One;verify;Transform;Instant;EP;CH;plus;Converter,2.7939677238464355e-09;1.4260876923799515e-09;1.1641532182693481e-09;4.656612873077393e-10;1.1641532182693481e-10;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-6.984919309616089e-10;-7.8580342233181e-10,5,5,"[-5.854218482971191, -5.679426670074463, -6.277090549468994, -5.46807336807251, -5.3741044998168945, -0.01716296561062336]",0.9829834699630737
3,"['    @Test\n    public void InstantAsStringAttributeConverterMaxTest() {\n        verifyTransform(Instant.MAX, ""+1000000000-12-31T23:59:59.999999999Z"");\n    }\n']",Instant;Instant;MAX;As;Max;Transform;Attribute;verify;Converter,3.725290298461914e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;-1.1641532182693481e-09;-1.3969838619232178e-09;-1.7462298274040222e-09;-1.8044374883174896e-09;-1.862645149230957e-09,5,5,"[-5.91281270980835, -5.779628276824951, -6.3728508949279785, -5.492429256439209, -5.4475507736206055, -0.01605452597141266]",0.9840736389160156
3,"['    @Test\n    public void InstantAsStringAttributeConverterExceedLowerBoundTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""-1000000001-12-31T23:59:59.999999999Z"")\n                                                                       .toAttributeValue()));\n    }\n']",Lower;Value;Instant;transform;As;to;Attribute;Attribute;ails;from,1.862645149230957e-09;9.313225746154785e-10;5.820766091346741e-10;-4.3655745685100555e-11;-5.820766091346741e-11;-1.7462298274040222e-10;-2.3283064365386963e-10;-5.238689482212067e-10;-6.984919309616089e-10;-7.566995918750763e-10,5,5,"[-5.904245853424072, -5.759077548980713, -6.3597846031188965, -5.450715065002441, -5.501825332641602, -0.016113296151161194]",0.9840158224105835
3,"['    @Test\n    public void InstantAsStringAttributeConverterInvalidFormatTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""X"")\n                                                                       .toAttributeValue()));\n    }\n']",Format;Instant;Converter;transform;from;Attribute;CONVERTER;Enhanced;Value;As,1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.883529186248779, -5.724564552307129, -6.3238630294799805, -5.404110908508301, -5.460430145263672, -0.01673164777457714]",0.9834075570106506
3,"['    @Test\n    public void InstantAsStringAttributeConverterExceedHigherBoundTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""+1000000001-01-01T00:00:00Z"")\n                                                                       .toAttributeValue()));\n    }\n']",Attribute;Bound;Attribute;Value;Attribute;Exceed;ails;As;Instant;Enhanced,5.471520125865936e-09;3.026798367500305e-09;1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;0.0,5,5,"[-5.887829780578613, -5.732898235321045, -6.333590030670166, -5.422422885894775, -5.48818302154541, -0.01647300273180008]",0.983661949634552
3,"['    @Test\n    public void InstantAsStringAttributeConverterNotAcceptLocalDateTimeTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00.000000001"")\n                                                                       .toAttributeValue()));\n    }\n']",CONVERTER;Date;Enhanced;As;Accept;Attribute;Instant;Attribute;Value;Time,2.561137080192566e-09;1.2514647096395493e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;8.731149137020111e-11;2.9103830456733704e-11,5,5,"[-5.887614727020264, -5.7501091957092285, -6.332653045654297, -5.448757171630859, -5.478604793548584, -0.016342833638191223]",0.98378986120224
3,"['    @Test\n    public void InstantAsStringAttributeConverterNotAcceptOffsetTimeTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00+01:00"")\n                                                                       .toAttributeValue()));\n    }\n']",Time;Offset;from;Attribute;Attribute;transform;to;Accept;Value;Enhanced,5.587935447692871e-09;1.862645149230957e-09;1.2078089639544487e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0,5,5,"[-5.888124942779541, -5.735677719116211, -6.3209943771362305, -5.438311576843262, -5.4730682373046875, -0.016479216516017914]",0.9836558103561401
3,"['    @Test\n    public void InstantAsStringAttributeConverterNotAcceptZonedTimeTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00+01:00[Europe/Paris]"")\n                                                                       .toAttributeValue()));\n    }\n']",Value;Accept;oned;Paris;Not;transform;Attribute;Value;Enhanced;Time,7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-5.820766091346741e-11,5,5,"[-5.882477283477783, -5.724572658538818, -6.310872554779053, -5.4228315353393555, -5.473367214202881, -0.016618162393569946]",0.9835192561149597
3,"['    @Test\n    public void InstantAsStringAttributeConverterNotAcceptLocalDateTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""1988-05-21"")\n                                                                       .toAttributeValue()));\n    }\n']",Attribute;CONVERTER;ails;Local;Attribute;Enhanced;Value;Accept;Attribute;Value,2.444721758365631e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.886992454528809, -5.754167556762695, -6.3414130210876465, -5.447222709655762, -5.473974227905273, -0.016342246904969215]",0.9837905764579773
3,"['    @Test\n    public void InstantAsStringAttributeConverterNotAcceptLocalTimeTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""00:12:00.000000001"")\n                                                                       .toAttributeValue()));\n    }\n']",Time;Enhanced;Attribute;ails;Accept;from;Value;Value;Converter;Not,2.3283064365386963e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.0477378964424133e-09;7.566995918750763e-10;1.7462298274040222e-10;5.820766091346741e-11;0.0;-2.3283064365386963e-10,5,5,"[-5.879149436950684, -5.737664222717285, -6.323482990264893, -5.420382976531982, -5.46879768371582, -0.016591781750321388]",0.9835451245307922
3,"['    @Test\n    public void InstantAsStringAttributeConverterNotAcceptMonthDayTest() {\n        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""05-21"")\n                                                                       .toAttributeValue()));\n    }\n']",Not;Day;Month;from;Enhanced;CONVERTER;As;Instant;Converter;to,1.3969838619232178e-09;1.3969838619232178e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10,5,5,"[-5.884369850158691, -5.740937232971191, -6.338809013366699, -5.448079586029053, -5.4712677001953125, -0.016405105590820312]",0.9837287068367004
3,"['    @Test\n    public void localDateTimeAttributeConverterMinTest() {\n        verifyTransform(LocalDateTime.MIN, ""-999999999-01-01T00:00"");\n    }\n']",verify;Min;Date;Transform;Local;Time;Converter;Date;Time;Attribute,1.7462298274040222e-09;1.0477378964424133e-09;9.313225746154785e-10;5.238689482212067e-10;0.0;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-5.866824626922607, -5.718810081481934, -6.316134929656982, -5.477337837219238, -5.406224250793457, -0.016730593517422676]",0.9834085702896118
3,"['    @Test\n    public void localDateTimeAttributeConverterNormalTest() {\n        verifyTransform(LocalDateTime.of(0, 1, 1, 0, 0, 0, 0), ""0000-01-01T00:00"");\n    }\n']",local;Converter;Date;Normal;verify;Attribute;Local;of;Time;Transform,1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;2.3283064365386963e-10;0.0;-8.731149137020111e-11;-4.0745362639427185e-10,5,5,"[-5.845663547515869, -5.68016242980957, -6.286970615386963, -5.439840316772461, -5.40976095199585, -0.01712452992796898]",0.9830212593078613
3,"['    @Test\n    public void localDateTimeAttributeConverterMaxTest() {\n        verifyTransform(LocalDateTime.MAX, ""+999999999-12-31T23:59:59.999999999"");\n    }\n']",Attribute;Converter;Date;Time;Date;Local;local;Transform;Max;MAX,2.444721758365631e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;4.0745362639427185e-10;5.820766091346741e-11;-2.3283064365386963e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-5.866137981414795, -5.711389541625977, -6.314568519592285, -5.4703168869018555, -5.406455993652344, -0.016789207234978676]",0.983350932598114
3,"['    @Test\n    public void localDateTimeAttributeConverterLowerBoundTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""-9999999999-01-01T00:00"")\n                                                                       .toAttributeValue()));\n    }\n']",Attribute;Enhanced;local;Attribute;Time;Date;transform;from;Attribute;Value,1.862645149230957e-09;1.862645149230957e-09;1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;3.2014213502407074e-10;1.1641532182693481e-10;-8.731149137020111e-11,5,5,"[-5.877574920654297, -5.714404106140137, -6.310169219970703, -5.430520057678223, -5.464663028717041, -0.016670217737555504]",0.9834679365158081
3,"['    @Test\n    public void localDateTimeAttributeConverterHigherBoundTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""9999999999-12-31T00:00:00"")\n                                                                       .toAttributeValue()));\n    }\n']",ails;Converter;Value;Value;converter;Attribute;Attribute;Date;from;local,3.958120942115784e-09;3.841705620288849e-09;1.2223608791828156e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.8741254806518555, -5.708671569824219, -6.299288272857666, -5.425410270690918, -5.464567184448242, -0.01674266718327999]",0.983396589756012
3,"['    @Test\n    public void localDateTimeAttributeConverterExceedHigherBoundTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""9999999999-12-32T00:00:00"")\n                                                                       .toAttributeValue()));\n    }\n']",Enhanced;Date;Bound;to;from;Value;Attribute;Attribute;local;transform,1.3969838619232178e-09;1.1641532182693481e-09;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.888455390930176, -5.718474388122559, -6.318970680236816, -5.438848972320557, -5.476690769195557, -0.01652107760310173]",0.9836146235466003
3,"['    @Test\n    public void localDateTimeAttributeConverterInvalidNanoSecondsTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""0-01-01T00:00:00.9999999999"")\n                                                                       .toAttributeValue()));\n    }\n']",ails;Invalid;Attribute;ano;Value;Enhanced;to;Converter;Second;transform,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-5.882937908172607, -5.734029293060303, -6.320186138153076, -5.439533710479736, -5.473724365234375, -0.016492584720253944]",0.9836426973342896
3,"['    @Test\n    public void localDateTimeAttributeConverterNotAcceptInstantTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00.000000001Z"")\n                                                                       .toAttributeValue()));\n    }\n']",Time;Not;Date;Attribute;transform;Attribute;from;Value;converter;Value,1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10,5,5,"[-5.88002872467041, -5.723631858825684, -6.3107147216796875, -5.427398681640625, -5.4579925537109375, -0.016674086451530457]",0.9834641814231873
3,"['    @Test\n    public void localDateTimeAttributeConverterNotAcceptOffsetTimeTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00+01:00"")\n                                                                       .toAttributeValue()));\n    }\n']",Value;transform;Time;Attribute;converter;Accept;to;Converter;Value;from,3.725290298461914e-09;3.725290298461914e-09;1.862645149230957e-09;1.5133991837501526e-09;1.5133991837501526e-09;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;2.9103830456733704e-10;-4.656612873077393e-10,5,5,"[-5.889801979064941, -5.740070343017578, -6.321209907531738, -5.445385932922363, -5.4673566818237305, -0.01645294949412346]",0.9836816787719727
3,"['    @Test\n    public void localDateTimeAttributeConverterNotAcceptZonedTimeTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00+01:00[Europe/Paris]"")\n                                                                       .toAttributeValue()));\n    }\n']",Time;Attribute;Attribute;Paris;Value;Europe;converter;transform;Enhanced;Attribute,6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;0.0,5,5,"[-5.882079124450684, -5.733534336090088, -6.30927848815918, -5.424924850463867, -5.464016437530518, -0.016623320057988167]",0.9835141897201538
3,"['    @Test\n    public void localDateTimeAttributeConverterNotAcceptLocalTimeTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""00:12:00.000000001"")\n                                                                       .toAttributeValue()));\n    }\n']",Date;Not;transform;Accept;to;Attribute;local;Time;from;Value,8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0,5,5,"[-5.88199520111084, -5.734816551208496, -6.320136070251465, -5.422636985778809, -5.464367866516113, -0.01660807803273201]",0.9835290908813477
3,"['    @Test\n    public void localDateTimeAttributeConverterNotAcceptMonthDayTest() {\n        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""05-21"")\n                                                                       .toAttributeValue()));\n    }\n']",ails;Value;Date;from;Attribute;to;Converter;Accept;converter;Attribute,3.725290298461914e-09;1.1641532182693481e-09;3.4924596548080444e-10;2.3283064365386963e-10;2.1827872842550278e-11;0.0;0.0;-1.1641532182693481e-10;-1.4551915228366852e-10;-2.3283064365386963e-10,5,5,"[-5.887120246887207, -5.742081642150879, -6.34245491027832, -5.448602199554443, -5.474753379821777, -0.016369923949241638]",0.9837634563446045
3,"['    @Test\n    public void testGetPlugins() {\n        final Plugins plugins = api().plugins(3, null);\n        assertNotNull(plugins);\n        assertTrue(plugins.errors().isEmpty());\n        assertFalse(plugins.plugins().isEmpty());\n        assertNotNull(plugins.plugins().get(0).shortName());\n    }\n']",api;plugins;plugins;Empty;Plugins;null;plugins;plugins;Not;plugins,5.820766091346741e-10;5.529727786779404e-10;4.5838532969355583e-10;1.4551915228366852e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;3.637978807091713e-11;2.9103830456733704e-11;2.9103830456733704e-11,5,5,"[-5.8608880043029785, -5.70009183883667, -6.295413494110107, -5.385955333709717, -5.429225921630859, -0.017152301967144012]",0.9829939603805542
3,"['    @Test\n    public void testInstallNecessaryPlugins() {\n        final RequestStatus status = api().installNecessaryPlugins(""artifactory@2.2.1"");\n        assertNotNull(status);\n        assertTrue(status.value());\n        assertTrue(status.errors().isEmpty());\n    }\n']",ecessary;artifactory;install;Install;Status;status;True;True;Empty;status,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;2.9103830456733704e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10;8.731149137020111e-11;7.275957614183426e-11;5.820766091346741e-11,5,5,"[-5.887409687042236, -5.745584964752197, -6.357288360595703, -5.459671497344971, -5.459275722503662, -0.016349518671631813]",0.9837833046913147
3,"['@Test(groups = ""unit"", testName = ""StatisticsApiMockTest"")\n    public void testOverallLoad() throws Exception {\n        MockWebServer server = mockWebServer();\n\n        server.enqueue(new MockResponse().setBody(payloadFromResource(""/overall-load.json"")).setResponseCode(200));\n        JenkinsApi jenkinsApi = api(server.getUrl(""/""));\n        StatisticsApi api = jenkinsApi.statisticsApi();\n        try {\n            OverallLoad load = api.overallLoad();\n            assertNotNull(load);\n            assertSent(server, ""GET"", ""/overallLoad/api/json"");\n        } finally {\n            jenkinsApi.close();\n            server.shutdown();\n        }\n    }\n']",Statistics;mock;groups;Jenkins;unit;Url;server;overall;Exception;enkins,9.313225746154785e-10;9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.9864301681518555, -6.0559468269348145, -6.744320869445801, -5.727123737335205, -5.6014251708984375, -0.013068148866295815]",0.9870168566703796
3,"['@Test(groups = ""unit"", testName = ""CrumbIssuerApiMockTest"")\n    public void testGetSystemInfo() throws Exception {\n        MockWebServer server = mockWebServer();\n\n        final String value = ""04a1109fc2db171362c966ebe9fc87f0"";\n        server.enqueue(new MockResponse().setBody(""Jenkins-Crumb:"" + value).setResponseCode(200));\n        JenkinsApi jenkinsApi = api(server.getUrl(""/""));\n        CrumbIssuerApi api = jenkinsApi.crumbIssuerApi();\n        try {\n            final Crumb instance = api.crumb();\n            assertNotNull(instance);\n            assertTrue(instance.value().equals(value));\n            assertSentAccept(server, ""GET"", ""/crumbIssuer/api/xml?xpath=concat%28//crumbRequestField,%22%3A%22,//crumb%29"", MediaType.TEXT_PLAIN);\n        } finally {\n            jenkinsApi.close();\n            server.shutdown();\n        }\n    }\n']",groups;Jenkins;crumb;server;api;Accept;crumb;Issuer;Mock;Type,1.4551915228366852e-09;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-6.026285648345947, -6.076612949371338, -6.793095111846924, -5.731325626373291, -5.672177791595459, -0.012593978084623814]",0.9874849915504456
3,"['    @Test\n    public void testCascCheck() {\n        String config = payloadFromResource(""/casc.yml"");\n        RequestStatus success = api().check(config);\n        assertTrue(success.value());\n    }\n']",asc;config;ml;value;True;success;check;success;config;Status,1.1641532182693481e-09;1.0186340659856796e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-3.4924596548080444e-10,5,5,"[-5.903012275695801, -5.765746116638184, -6.365637302398682, -5.470248222351074, -5.441959381103516, -0.016256513074040413]",0.9838749170303345
3,"['    @Test\n    public void testCascApply() {\n        String config = payloadFromResource(""/casc.yml"");\n        RequestStatus success = api().apply(config);\n        assertTrue(success.value());\n    }\n']",Resource;payload;success;ml;value;Status;config;success;api;config,1.6298145055770874e-09;9.313225746154785e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.902559280395508, -5.771644592285156, -6.377280235290527, -5.4700927734375, -5.45427131652832, -0.016165612265467644]",0.9839643239974976
3,"['    @Test\n    public void testBadCascCheck() {\n        String config = payloadFromResource(""/casc-bad.yml"");\n        RequestStatus success = api().check(config);\n        assertFalse(success.value());\n    }\n']",Request;payload;config;Resource;success;asc;value;ml;asc;Status,1.5133991837501526e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.911246299743652, -5.768245697021484, -6.370375633239746, -5.471850395202637, -5.439605712890625, -0.016221093013882637]",0.9839097857475281
3,"['    @Test\n    public void testBadCascApply() {\n        String config = payloadFromResource(""/casc-bad.yml"");\n        RequestStatus success = api().apply(config);\n        assertFalse(success.value());\n    }\n']",Request;config;bad;ml;Status;api;config;asc;value;False,1.6298145055770874e-09;1.280568540096283e-09;9.313225746154785e-10;3.7834979593753815e-10;2.3283064365386963e-10;0.0;-5.820766091346741e-11;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.912230968475342, -5.770021915435791, -6.383833408355713, -5.474686145782471, -5.451749324798584, -0.016124088317155838]",0.9840052127838135
3,['    @Test\n    public void testGetSystemInfo() {\n        final SystemInfo version = api().systemInfo();\n        assertNotNull(version);\n        assertTrue(version.jenkinsVersion() != null);\n    }\n'],Info;Get;Version;version;final;version;True;Null;null;system,1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;0.0;-2.9103830456733704e-11;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.862006664276123, -5.699068069458008, -6.2928147315979, -5.418802738189697, -5.409905433654785, -0.017093945294618607]",0.9830513000488281
3,['    @Test\n    public void testQuietDown() {\n        RequestStatus success = api().quietDown();\n        assertNotNull(success);\n        assertTrue(success.value());\n    }\n'],Down;quiet;value;success;success;success;Null;Down;True;Request,4.656612873077393e-10;2.3283064365386963e-10;1.4551915228366852e-10;8.731149137020111e-11;7.275957614183426e-11;0.0;0.0;-8.731149137020111e-11;-8.731149137020111e-11;-1.1641532182693481e-10,5,5,"[-5.8686089515686035, -5.698436737060547, -6.3161797523498535, -5.441900730133057, -5.418216228485107, -0.016893062740564346]",0.9832488298416138
3,"['    @Test(dependsOnMethods = ""testQuietDown"")\n    public void testAlreadyQuietDown() {\n        RequestStatus success = api().quietDown();\n        assertNotNull(success);\n        assertTrue(success.value());\n    }\n']",On;depends;Quiet;Request;Status;Down;Down;Methods;quiet;value,5.3551048040390015e-09;3.725290298461914e-09;2.444721758365631e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;5.238689482212067e-10,5,5,"[-5.88416862487793, -5.753212928771973, -6.370039939880371, -5.4664740562438965, -5.452037811279297, -0.016313748434185982]",0.9838184714317322
3,"['    @Test(dependsOnMethods = ""testAlreadyQuietDown"")\n    public void testCancelQuietDown() {\n        RequestStatus success = api().cancelQuietDown();\n        assertNotNull(success);\n        assertTrue(success.value());\n    }\n']",Request;Null;success;Methods;True;Down;ancel;Quiet;Quiet;Not,2.3283064365386963e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;5.820766091346741e-11,5,5,"[-5.892939567565918, -5.772692680358887, -6.397681713104248, -5.48996639251709, -5.465824604034424, -0.01602015271782875]",0.984107494354248
3,"['    @Test(dependsOnMethods = ""testCancelQuietDown"")\n    public void testAlreadyCanceledQuietDown() {\n        RequestStatus success = api().cancelQuietDown();\n        assertNotNull(success);\n        assertTrue(success.value());\n    }\n']",success;Quiet;depends;Quiet;ancel;value;Not;Down;api;Down,1.5133991837501526e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.896054744720459, -5.773585319519043, -6.404929161071777, -5.487140655517578, -5.479819297790527, -0.015948470681905746]",0.9841780066490173
3,"['@Test(groups = ""unit"", testName = ""PluginManagerApiMockTest"")\n    public void testGetPlugins() throws Exception {\n        final MockWebServer server = mockWebServer();\n        server.enqueue(new MockResponse().setBody(payloadFromResource(""/plugins.json"")).setResponseCode(200));\n        \n        final JenkinsApi jenkinsApi = api(server.getUrl(""/""));\n        final PluginManagerApi api = jenkinsApi.pluginManagerApi();\n        try {\n            final Plugins plugins = api.plugins(3, null);\n            assertNotNull(plugins);\n            assertTrue(plugins.errors().isEmpty());\n            assertFalse(plugins.plugins().isEmpty());\n            assertNotNull(plugins.plugins().get(0).shortName());\n            final Map<String, Object> queryParams = Maps.newHashMap();\n            queryParams.put(""depth"", 3);\n            assertSent(server, ""GET"", ""/pluginManager/api/json"", queryParams);\n        } finally {\n            jenkinsApi.close();\n            server.shutdown();\n        }\n    }\n']",Name;Sent;Mock;enqueue;Jenkins;errors;payload;Url;json;Mock,2.0954757928848267e-09;9.89530235528946e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.998794078826904, -6.032038688659668, -6.851312637329102, -5.774539947509766, -5.725707530975342, -0.0123834777623415]",0.9876928925514221
3,"['@Test(groups = ""live"", testName = ""QueueApiLiveTest"", singleThreaded = true)\n    public void init() {\n        String config = payloadFromResource(""/freestyle-project-sleep-task.xml"");\n        RequestStatus success = api.jobsApi().create(null,""QueueTest"", config);\n        assertTrue(success.value());\n\n        config = payloadFromResource(""/freestyle-project.xml"");\n        success = api.jobsApi().create(null,""QueueTestSingleParam"", config);\n        assertTrue(success.value());\n\n        config = payloadFromResource(""/freestyle-project-sleep-task-multiple-params.xml"");\n        success = api.jobsApi().create(null,""QueueTestMultipleParams"", config);\n        assertTrue(success.value());\n    }\n']",Request;Single;Live;sleep;Name;live;success;Multiple;payload;success,1.7462298274040222e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9483442306518555, -6.077394962310791, -6.748515605926514, -5.688506603240967, -5.6417717933654785, -0.013093446381390095]",0.9869918823242188
3,"['    @Test\n    public void testGetQueue() {\n        IntegerResponse job1 = api.jobsApi().build(null, ""QueueTest"");\n        assertNotNull(job1);\n        assertTrue(job1.errors().size() == 0);\n        IntegerResponse job2 = api.jobsApi().build(null, ""QueueTest"");\n        assertNotNull(job2);\n        assertTrue(job2.errors().size() == 0);\n        List<QueueItem> queueItems = api().queue();\n        assertTrue(queueItems.size() > 0);\n        boolean foundLastKickedJob = false;\n        for (QueueItem item : queueItems) {\n            if (item.id() == job2.value()) {\n                foundLastKickedJob = true;\n                break;\n            }\n        }\n        assertTrue(foundLastKickedJob);\n    }\n']",item;Queue;icked;Get;queue;jobs;value;icked;Items;id,2.3283064365386963e-09;5.238689482212067e-10;4.511093720793724e-10;4.3655745685100555e-10;3.2014213502407074e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.832345008850098, -5.681794166564941, -6.263398170471191, -5.313971519470215, -5.479429721832275, -0.017489496618509293]",0.982662558555603
3,"['    @Test\n    public void testGetPendingQueueItem() {\n        IntegerResponse job1 = api.jobsApi().build(null,""QueueTest"");\n        assertNotNull(job1);\n        assertTrue(job1.errors().size() == 0);\n        IntegerResponse job2 = api.jobsApi().build(null,""QueueTest"");\n        assertNotNull(job2);\n        assertTrue(job2.errors().size() == 0);\n\n        // job2 is queue after job1, so while job1 runs, job2 is pending in the queue\n        QueueItem queueItem = api().queueItem(job2.value());\n        assertFalse(queueItem.cancelled());\n        assertNotNull(queueItem.why());\n        assertNull(queueItem.executable());\n    }\n']",why;Queue;runs;Null;ancelled;pending;while;in;Get;queue,1.3969838619232178e-09;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.850252151489258, -5.717774868011475, -6.326785087585449, -5.395856857299805, -5.508031368255615, -0.01668170653283596]",0.9834566712379456
3,"['    @Test\n    public void testGetRunningQueueItem() throws InterruptedException {\n        IntegerResponse job1 = api.jobsApi().build(null,""QueueTest"");\n        assertNotNull(job1);\n        assertTrue(job1.errors().size() == 0);\n        IntegerResponse job2 = api.jobsApi().build(null,""QueueTest"");\n        assertNotNull(job2);\n        assertTrue(job2.errors().size() == 0);\n\n        // job1 runs first, so we get its queueItem\n        QueueItem queueItem = getRunningQueueItem(job1.value());\n\n        // If null, it means the queueItem has been cancelled, which would not be normal in this test\n        assertNotNull(queueItem);\n        assertFalse(queueItem.cancelled());\n\n        //  We exepect this build to run, consequently:\n        //  * the why field should now be null\n        //  * the executable field should NOT be null\n        //  * the build number should be set to an integer\n        //  * the url for the build should be set to a string\n        assertNull(queueItem.why());\n        assertNotNull(queueItem.executable());\n    }\n']",Interrupted;the;field;Running;integer;consequently;this;field;why;Item,1.3969838619232178e-09;7.566995918750763e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.863385200500488, -5.720831394195557, -6.382513046264648, -5.456634521484375, -5.585527420043945, -0.015955744311213493]",0.9841708540916443
3,"['    @Test\n    public void testQueueItemSingleParameters() throws InterruptedException {\n        Map<String, List<String>> params = new HashMap<>();\n        params.put(""SomeKey"", Lists.newArrayList(""SomeVeryNewValue1""));\n        IntegerResponse job1 = api.jobsApi().buildWithParameters(null,""QueueTestSingleParam"", params);\n        assertNotNull(job1);\n        assertTrue(job1.value() > 0);\n        assertTrue(job1.errors().size() == 0);\n\n        // Jenkins will reject two consecutive build requests when the build parameter values are the same\n        // So we must set some different parameter values\n        params = new HashMap<>();\n        params.put(""SomeKey"", Lists.newArrayList(""SomeVeryNewValue2""));\n        IntegerResponse job2 = api.jobsApi().buildWithParameters(null,""QueueTestSingleParam"", params);\n        assertNotNull(job2);\n        assertTrue(job2.value() > 0);\n        assertTrue(job2.errors().size() == 0);\n\n        QueueItem queueItem = getRunningQueueItem(job1.value());\n        assertNotNull(queueItem);\n        assertFalse(queueItem.cancelled());\n\n        Map <String, String> map = Maps.newHashMap();\n        map.put(""SomeKey"", ""SomeVeryNewValue1"");\n        assertEquals(queueItem.params(), map);\n    }\n']",Queue;Param;Single;different;parameter;Map;null;value;queue;build,4.802132025361061e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.546585164964199e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.838662147521973, -5.7028350830078125, -6.32137393951416, -5.374269485473633, -5.524023056030273, -0.016811244189739227]",0.9833292961120605
3,"['    @Test\n    public void testQueueItemMultipleParameters() throws InterruptedException {\n        Map<String, List<String>> params = new HashMap<>();\n        params.put(""SomeKey1"", Lists.newArrayList(""SomeVeryNewValue1""));\n        IntegerResponse job1 = api.jobsApi().buildWithParameters(null, ""QueueTestMultipleParams"",params);\n        assertNotNull(job1);\n        assertTrue(job1.value() > 0);\n        assertTrue(job1.errors().size() == 0);\n\n        // Jenkins will reject two consecutive build requests when the build parameter values are the same\n        // So we must set some different parameter values\n        params = new HashMap<>();\n        params.put(""SomeKey1"", Lists.newArrayList(""SomeVeryNewValue2""));\n        IntegerResponse job2 = api.jobsApi().buildWithParameters(null, ""QueueTestMultipleParams"", params);\n        assertNotNull(job2);\n        assertTrue(job2.value() > 0);\n        assertTrue(job2.errors().size() == 0);\n\n        QueueItem queueItem = getRunningQueueItem(job1.value());\n        assertNotNull(queueItem);\n        assertFalse(queueItem.cancelled());\n\n        Map <String, String> map = Maps.newHashMap();\n        map.put(""SomeKey1"", ""SomeVeryNewValue1"");\n        map.put(""SomeKey2"", ""SomeValue2"");\n        map.put(""SomeKey3"", ""SomeValue3"");\n        assertEquals(queueItem.params(), map);\n    }\n']",Item;Running;Multiple;Exception;Some;Jenkins;two;Some;requests;Item,8.731149137020111e-10;6.111804395914078e-10;5.820766091346741e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.838359355926514, -5.704334735870361, -6.3286871910095215, -5.38038444519043, -5.537507057189941, -0.016710663214325905]",0.9834281802177429
3,"['    @Test\n    public void testQueueItemEmptyParameterValue() throws InterruptedException {\n        Map<String, List<String>> params = new HashMap<>();\n        params.put(""SomeKey1"", Lists.newArrayList(""""));\n        IntegerResponse job1 = api.jobsApi().buildWithParameters(null, ""QueueTestMultipleParams"",params);\n        assertNotNull(job1);\n        assertTrue(job1.value() > 0);\n        assertTrue(job1.errors().size() == 0);\n\n        QueueItem queueItem = getRunningQueueItem(job1.value());\n        assertNotNull(queueItem);\n\n        Map <String, String> map = Maps.newHashMap();\n        map.put(""SomeKey1"", """");\n        map.put(""SomeKey2"", ""SomeValue2"");\n        map.put(""SomeKey3"", ""SomeValue3"");\n        assertEquals(queueItem.params(), map);\n    }\n']",value;Parameters;Multiple;Some;job;Queue;Map;Response;Queue;Queue,6.111804395914078e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.825764179229736, -5.700616359710693, -6.288573265075684, -5.356182098388672, -5.472000598907471, -0.01722096838057041]",0.9829264879226685
3,"['    @Test\n    public void testGetCancelledQueueItem() throws InterruptedException {\n        IntegerResponse job1 = api.jobsApi().build(null,""QueueTest"");\n        assertNotNull(job1);\n        assertTrue(job1.errors().size() == 0);\n        IntegerResponse job2 = api.jobsApi().build(null, ""QueueTest"");\n        assertNotNull(job2);\n        assertTrue(job2.errors().size() == 0);\n\n        RequestStatus success = api().cancel(job2.value());\n        assertNotNull(success);\n        assertTrue(success.value());\n        assertTrue(success.errors().isEmpty());\n\n        QueueItem queueItem = api().queueItem(job2.value());\n        assertTrue(queueItem.cancelled());\n        assertNull(queueItem.why());\n        assertNull(queueItem.executable());\n    }\n']",Interrupted;Queue;errors;True;Get;ancelled;jobs;size;Not;api,1.6880221664905548e-09;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.546585164964199e-10;2.4374458007514477e-10;2.3283064365386963e-10,5,5,"[-5.837803363800049, -5.707645416259766, -6.32252836227417, -5.392644882202148, -5.4937310218811035, -0.016834337264299393]",0.9833064675331116
3,['    @Test\n    public void testCancelNonExistentQueueItem() throws InterruptedException {\n        RequestStatus success = api().cancel(123456789);\n        assertNotNull(success);\n        assertTrue(success.value());\n        assertTrue(success.errors().isEmpty());\n    }\n'],Queue;Interrupted;ancel;errors;Item;success;ancel;value;Status;success,3.259629011154175e-09;1.6007106751203537e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.7462298274040222e-10;8.731149137020111e-11,5,5,"[-5.875976085662842, -5.728588581085205, -6.354858875274658, -5.48043966293335, -5.450469017028809, -0.016391385346651077]",0.9837422370910645
3,['    @Test\n    public void testGetCrumb() {\n        final Crumb crumb = api().crumb();\n        assertNotNull(crumb);\n        assertNotNull(crumb.value());\n        assertTrue(crumb.errors().isEmpty());\n    }\n'],errors;Crumb;True;crumb;api;crumb;crumb;Not;value;Crumb,4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.4551915228366852e-10;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.866538047790527, -5.716253280639648, -6.317435264587402, -5.418240547180176, -5.431807041168213, -0.016881106421351433]",0.9832605719566345
3,"['@Test(groups = ""unit"", testName = ""SystemApiMockTest"")\n    public void testGetSystemInfo() throws Exception {\n        MockWebServer server = mockWebServer();\n\n        server.enqueue(\n            new MockResponse().setHeader(""X-Hudson"", ""1.395"").setHeader(""X-Jenkins"", JenkinsApiMetadata.BUILD_VERSION)\n                .setHeader(""X-Jenkins-Session"", ""cc323b8d"").setHeader(""X-Hudson-CLI-Port"", ""50000"")\n                .setHeader(""X-Jenkins-CLI-Port"", ""50000"").setHeader(""X-Jenkins-CLI2-Port"", ""50000"")\n                .setHeader(""X-Instance-Identity"", ""fdsa"").setHeader(""X-SSH-Endpoint"", ""127.0.1.1:46126"")\n                .setHeader(""Server"", ""Jetty(winstone-2.9)"").setResponseCode(200));\n        JenkinsApi jenkinsApi = api(server.getUrl(""/""));\n        SystemApi api = jenkinsApi.systemApi();\n        try {\n            final SystemInfo version = api.systemInfo();\n            assertNotNull(version);\n            assertTrue(version.jenkinsVersion().equalsIgnoreCase(JenkinsApiMetadata.BUILD_VERSION));\n            assertSent(server, ""HEAD"", ""/"");\n        } finally {\n            jenkinsApi.close();\n            server.shutdown();\n        }\n    }\n']",Name;enqueue;Metadata;ock;Jenkins;unit;Header;server;VERSION;pi,1.3969838619232178e-09;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-6.00459098815918, -5.973153114318848, -6.798953533172607, -5.786013603210449, -5.725119590759277, -0.012540061958134174]",0.9875383377075195
3,"['@Test(groups = ""unit"", testName = ""JobsApiMockTest"")\n    public void testGetInnerFolderJobList() throws Exception {\n        MockWebServer server = mockWebServer();\n\n        String body = payloadFromResource(""/jobsInJenkinsFolder.json"");\n        server.enqueue(new MockResponse().setBody(body).setResponseCode(200));\n        JenkinsApi jenkinsApi = api(server.url(""/"").url());\n        JobsApi api = jenkinsApi.jobsApi();\n        try {\n            JobList output = api.jobList(""Folder1/Folder 2"");\n            assertNotNull(output);\n            assertNotNull(output.jobs());\n            assertEquals(output.jobs().size(), 1);\n            assertEquals(output.jobs().get(0), Job.create(""hudson.model.FreeStyleProject"", ""Test Project"", ""http://localhost:8080/job/username"", null));\n            assertSent(server, ""GET"", ""/job/Folder1/job/Folder%202/api/json"");\n        } finally {\n            jenkinsApi.close();\n            server.shutdown();\n        }\n    }\n']",enqueue;url;Mock;GET;server;job;Response;ock;jobs;Mock,1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.944605350494385, -5.99511194229126, -6.7600812911987305, -5.7397308349609375, -5.675680160522461, -0.012998138554394245]",0.9870861172676086
3,['    @Test\n    public void testOverallLoad() {\n        OverallLoad load = api().overallLoad();\n        assertNotNull(load);\n    }\n'],api;load;Load;Not;load;Load;Overall;Load;overall;Null,6.111804395914078e-10;2.0372681319713593e-10;2.9103830456733704e-11;-2.9103830456733704e-11;-4.3655745685100555e-11;-2.1827872842550278e-10;-2.3283064365386963e-10;-2.764863893389702e-10;-2.9103830456733704e-10;-3.637978807091713e-10,5,5,"[-5.88115930557251, -5.711061477661133, -6.330117702484131, -5.456405162811279, -5.400756359100342, -0.016805032268166542]",0.9833353757858276
3,"['@Test(groups = ""unit"", testName = ""ConfigurationAsCodeApiMockTest"")\n    public void testCascCheck() throws Exception {\n        MockWebServer server = mockWebServer();\n\n        server.enqueue(new MockResponse().setResponseCode(200));\n        JenkinsApi jenkinsApi = api(server.url(""/"").url());\n        ConfigurationAsCodeApi api = jenkinsApi.configurationAsCodeApi();\n        try {\n            RequestStatus requestStatus = api.check(""random"");\n            assertNotNull(requestStatus);\n            assertTrue(requestStatus.value());\n            assertEquals(requestStatus.errors().size(), 0);\n        } finally {\n            jenkinsApi.close();\n            server.shutdown();\n        }\n    }\n']",unit;Exception;Configuration;pi;Code;asc;Code;As;Request;new,1.979060471057892e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.964388847351074, -5.980915069580078, -6.676131248474121, -5.684212684631348, -5.626622676849365, -0.013445771299302578]",0.9866443276405334
3,"['@Test(groups = ""unit"", testName = ""QueueApiMockTest"")\n    public void testGetQueue() throws Exception {\n        MockWebServer server = mockWebServer();\n        String body = payloadFromResource(""/queue.json"");\n        server.enqueue(new MockResponse().setBody(body).setResponseCode(200));\n        JenkinsApi jenkinsApi = api(server.getUrl(""/""));\n        QueueApi api = jenkinsApi.queueApi();\n        try {\n            List<QueueItem> output = api.queue();\n            assertTrue(output.size() == 2);\n            assertSent(server, ""GET"", ""/queue/api/json"");\n        } finally {\n            jenkinsApi.close();\n            server.shutdown();\n        }\n    }\n']",unit;shutdown;Response;server;Mock;Item;server;Sent;Queue;GET,1.280568540096283e-09;7.566995918750763e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.989888668060303, -6.044530868530273, -6.711533069610596, -5.676192283630371, -5.6009087562561035, -0.013300621882081032]",0.9867874383926392
3,"['@Test(groups = ""live"")\n    public String payloadFromResource(String resource) {\n        try {\n            return new String(toStringAndClose(getClass().getResourceAsStream(resource)).getBytes(Charsets.UTF_8));\n        } catch (IOException e) {\n            throw Throwables.propagate(e);\n        }\n    }\n']",Class;propagate;live;throw;get;Stream;UTF;catch;Charsets;get,2.0954757928848267e-09;1.280568540096283e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.548361852765083e-10;4.94765117764473e-10,5,5,"[-5.970038890838623, -5.923675537109375, -6.550005912780762, -5.576335906982422, -5.5645012855529785, -0.014380508102476597]",0.985722541809082
3,"['@Test(groups = ""unit"", testName = ""JenkinsApiMetadataTest"")\n   public void testEtcdApiRegistered() {\n      ApiMetadata api = Apis.withId(""jenkins"");\n\n      assertNotNull(api);\n      assertTrue(api instanceof JenkinsApiMetadata);\n      assertEquals(api.getId(), ""jenkins"");\n   }\n']",Metadata;api;unit;api;pi;Jenkins;jenkins;Jenkins;with;Name,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-6.066272258758545, -6.188182830810547, -6.671116352081299, -5.626173973083496, -5.423719882965088, -0.013747531920671463]",0.9863466620445251
3,"['    @Test\n    public void testGetLayout() throws IOException {\n        Layout defaultLayout = getDefaultLayout();\n\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getLayoutResponseMsg(defaultLayout)\n        );\n\n        layoutHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), defaultLayout);\n    }\n']",any;default;Epoch;that;with;Layout;CHECK;the;IOException;outer,5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.878222942352295, -5.733898639678955, -6.360723972320557, -5.41724157333374, -5.527855396270752, -0.01630847156047821]",0.9838237762451172
3,"['    @Test\n    public void testMalformedGetLayout() throws IOException {\n        Layout defaultLayout = getDefaultLayout();\n        defaultLayout.setLayoutServers(new LinkedList<>());\n\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getLayoutResponseMsg(defaultLayout)\n        );\n\n        layoutHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the request was completed exceptionally with the expected exception type.\n        verify(mockClientRouter).completeExceptionally(anyLong(), any(SerializerException.class));\n    }\n']",the;Malformed;mock;that;Layout;Get;Linked;Layout;IGNORE;any,3.026798367500305e-09;1.979060471057892e-09;8.731149137020111e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.881399154663086, -5.73140811920166, -6.363346576690674, -5.415081977844238, -5.518044948577881, -0.016352685168385506]",0.9837803840637207
3,"['    @Test\n    public void testBootstrapLayout() {\n        ResponseMsg responseACK = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getBootstrapLayoutResponseMsg(true)\n        );\n\n        ResponseMsg responseNACK = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getBootstrapLayoutResponseMsg(false)\n        );\n\n        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n        layoutHandler.handleMessage(responseNACK, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);\n        verify(mockClientRouter).completeRequest(responseNACK.getHeader().getRequestId(), false);\n    }\n']",Bootstrap;IGNORE;Handler;mock;Channel;value;Bootstrap;Layout;get;exceptionally,6.548361852765083e-10;5.966285243630409e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.866848468780518, -5.703817367553711, -6.33919620513916, -5.3767900466918945, -5.540874004364014, -0.016613589599728584]",0.9835235476493835
3,"['    @Test\n    public void testPrepare() throws IOException {\n        Layout defaultLayout = getDefaultLayout();\n        long defaultRank = 5L;\n        ResponseMsg responseACK = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getPrepareLayoutResponseMsg(true, defaultRank, defaultLayout)\n        );\n        ResponseMsg responseREJECT = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getPrepareLayoutResponseMsg(false, defaultRank, defaultLayout)\n        );\n\n        // Verify that the correct request was completed (once) with the appropriate value.\n        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n        ArgumentCaptor<LayoutPrepareResponse> layoutPrepareCaptor = ArgumentCaptor.forClass(LayoutPrepareResponse.class);\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(eq(responseACK.getHeader().getRequestId()), layoutPrepareCaptor.capture());\n\n        LayoutPrepareResponse layoutPrepareCaptorValue = layoutPrepareCaptor.getValue();\n        Layout retLayout = layoutPrepareCaptorValue.getLayout();\n        assertLayoutMatch(retLayout);\n\n        // Verify that the correct exception was thrown with the appropriate field set.\n        layoutHandler.handleMessage(responseREJECT, mockChannelHandlerContext);\n        ArgumentCaptor<OutrankedException> exceptionCaptor = ArgumentCaptor.forClass(OutrankedException.class);\n        verify(mockClientRouter).completeExceptionally(\n                eq(responseREJECT.getHeader().getRequestId()), exceptionCaptor.capture());\n        OutrankedException outrankedException = exceptionCaptor.getValue();\n        assertThat(outrankedException.getNewRank()).isEqualTo(defaultRank);\n\n        retLayout = outrankedException.getLayout();\n        assertLayoutMatch(retLayout);\n    }\n']",request;IOException;was;Message;REJECT;response;Captor;Channel;with;Msg,6.111804395914078e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.8658905029296875, -5.687077522277832, -6.3454437255859375, -5.386672019958496, -5.573286056518555, -0.01648918353021145]",0.9836461544036865
3,"['    @Test\n    public void testPropose() {\n        long defaultRank = 5L;\n        ResponseMsg responseACK = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getProposeLayoutResponseMsg(true, defaultRank)\n        );\n        ResponseMsg responseREJECT = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getProposeLayoutResponseMsg(false, defaultRank)\n        );\n\n        // Verify that the correct request was completed (once) with the appropriate value.\n        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);\n\n        // Verify that the correct exception was thrown with the appropriate field set.\n        layoutHandler.handleMessage(responseREJECT, mockChannelHandlerContext);\n        ArgumentCaptor<OutrankedException> exceptionCaptor = ArgumentCaptor.forClass(OutrankedException.class);\n        verify(mockClientRouter).completeExceptionally(\n                eq(responseREJECT.getHeader().getRequestId()), exceptionCaptor.capture());\n        OutrankedException outrankedException = exceptionCaptor.getValue();\n        assertThat(outrankedException.getNewRank()).isEqualTo(defaultRank);\n    }\n']",was;once;any;Cluster;Long;Propose;Check;that;request;Exception,1.2223608791828156e-09;5.238689482212067e-10;4.94765117764473e-10;4.43833414465189e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.853240489959717, -5.686966419219971, -6.309492588043213, -5.344339847564697, -5.546906471252441, -0.016895992681384087]",0.9832459688186646
3,"['    @Test\n    public void testCommit() {\n        ResponseMsg responseACK = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getCommitLayoutResponseMsg(true)\n        );\n\n        ResponseMsg responseNACK = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getCommitLayoutResponseMsg(false)\n        );\n\n        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n        layoutHandler.handleMessage(responseNACK, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);\n        verify(mockClientRouter).completeRequest(responseNACK.getHeader().getRequestId(), false);\n    }\n']",Commit;Message;get;get;response;Message;response;Msg;Basic;and,1.1059455573558807e-09;1.1059455573558807e-09;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.86014986038208, -5.698579788208008, -6.3228912353515625, -5.363938808441162, -5.529304504394531, -0.016787566244602203]",0.983352541923523
3,['    @Test\n    public void testHandleReportFailure0() {\n        testHandleReportFailure(false);\n    }\n'],Failure;Handle;Report;Handle;false;Failure;Report,3.4924596548080444e-09;3.259629011154175e-09;9.313225746154785e-10;0.0;-4.656612873077393e-10;-4.6566128730773926e-09;-5.3551048040390015e-09,5,5,"[-5.906282901763916, -5.726926803588867, -6.360809803009033, -5.498129844665527, -5.410752296447754, -0.016403814777731895]",0.9837300181388855
3,['    @Test\n    public void testHandleReportFailure1() {\n        testHandleReportFailure(true);\n    }\n'],Failure;Failure;Handle;true;Report;Handle;Report,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;-9.313225746154785e-10;-2.2118911147117615e-09,5,5,"[-5.909544467926025, -5.732604026794434, -6.36472749710083, -5.500537872314453, -5.412370204925537, -0.016351981088519096]",0.983781099319458
3,['    @Test\n    public void testHandleHealFailure0() {\n        testHandleHealFailure(false);\n    }\n'],Heal;Handle;Heal;Handle;Failure;false;Failure,2.9103830456733704e-09;1.0477378964424133e-09;2.9103830456733704e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-5.907851696014404, -5.716424465179443, -6.364903450012207, -5.501527309417725, -5.432837963104248, -0.016313983127474785]",0.9838183522224426
3,['    @Test\n    public void testHandleHealFailure1() {\n        testHandleHealFailure(true);\n    }\n'],Failure;true;Handle;Handle;Failure;Heal;Heal,2.0954757928848267e-09;7.566995918750763e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;-1.3969838619232178e-09;-3.6088749766349792e-09,5,5,"[-5.915741443634033, -5.725517749786377, -6.373480319976807, -5.504029750823975, -5.438832759857178, -0.01621006801724434]",0.9839206337928772
3,['    @Test\n    public void testHandleManagementBootstrap0() {\n        testHandleManagementBootstrap(false);\n    }\n'],false;Handle;Bootstrap;Handle;Management;Management;Bootstrap,1.0477378964424133e-09;-3.4924596548080444e-10;-8.149072527885437e-10;-9.313225746154785e-10;-9.313225746154785e-10;-2.3283064365386963e-09;-4.3655745685100555e-09,5,5,"[-5.88517951965332, -5.704972267150879, -6.332977771759033, -5.476452350616455, -5.400554656982422, -0.016723792999982834]",0.9834152460098267
3,['    @Test\n    public void testHandleManagementBootstrap1() {\n        testHandleManagementBootstrap(true);\n    }\n'],Handle;Bootstrap;true;Management;Bootstrap;Handle;Management,6.402842700481415e-10;1.7462298274040222e-10;-2.0372681319713593e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-8.149072527885437e-10;-9.313225746154785e-10,5,5,"[-5.8832221031188965, -5.704642295837402, -6.3304877281188965, -5.473578929901123, -5.394991397857666, -0.016772912815213203]",0.9833670854568481
3,"['    @Test\n    public void testHandleManagementLayout() {\n        final Layout layout = getBasicLayout(ImmutableList.of(""localhost:9000""));\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getManagementLayoutResponseMsg(layout)\n        );\n\n        managementHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), layout);\n    }\n']",Handle;with;localhost;CHECK;Message;Exceptionally;complete;response;exceptionally;was,6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.8778815269470215, -5.734797954559326, -6.383708477020264, -5.447066307067871, -5.545497894287109, -0.016063323244452477]",0.9840649962425232
3,"['    @Test\n    public void testHandleQueryNode() {\n        final NodeState state = NodeState.getNotReadyNodeState(""localhost:9000"");\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getQueryNodeResponseMsg(state)\n        );\n\n        managementHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), state);\n    }\n']",mock;we;State;Node;exceptionally;Node;CHECK;Cluster;complete;that,1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.421476766467094e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-5.908039093017578, -5.778748989105225, -6.384934902191162, -5.456684589385986, -5.56250524520874, -0.015726706013083458]",0.9843963384628296
3,"['    @Test\n    public void testHandleOrchestrator() {\n        // Test with an ORCHESTRATOR_RESPONSE of type QueryResponse.\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.IGNORE, EpochCheck.IGNORE),\n                getQueriedWorkflowResponseMsg(true)\n        );\n\n        ArgumentCaptor<QueryResponse> qrCaptor = ArgumentCaptor.forClass(QueryResponse.class);\n        managementHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), qrCaptor.capture());\n        assertTrue(qrCaptor.getValue().isActive());\n\n        // Test with an ORCHESTRATOR_RESPONSE of type CreateWorkflowResponse.\n        response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.IGNORE, EpochCheck.IGNORE),\n                getCreatedWorkflowResponseMsg(DEFAULT_UUID)\n        );\n\n        ArgumentCaptor<CreateWorkflowResponse> cwCaptor = ArgumentCaptor.forClass(CreateWorkflowResponse.class);\n        managementHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), cwCaptor.capture());\n        assertEquals(DEFAULT_UUID, cwCaptor.getValue().workflowId);\n    }\n']",Verify;an;Channel;with;IGNORE;mock;Verify;Argument;UID;never,6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.871275424957275, -5.695893287658691, -6.362525939941406, -5.412195682525635, -5.5800275802612305, -0.016269885003566742]",0.9838616251945496
3,"['    @Test\n    public void testHandlePing() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getPingResponseMsg()\n        );\n\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",the;request;exceptionally;completed;any;complete;the;Exceptionally;Throwable;was,1.5133991837501526e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.257323548197746e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.893978595733643, -5.740845203399658, -6.386395454406738, -5.455377101898193, -5.544003009796143, -0.015963252633810043]",0.9841634631156921
3,"['    @Test\n    public void testHandleRestart() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getRestartResponseMsg()\n        );\n\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",exceptionally;and;complete;Epoch;Channel;appropriate;Exceptionally;any;verify;complete,2.3283064365386963e-09;1.3969838619232178e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10,5,5,"[-5.899478912353516, -5.734668731689453, -6.387033462524414, -5.458971977233887, -5.543132781982422, -0.015954922884702682]",0.9841718077659607
3,"['    @Test\n    public void testHandleReset() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getResetResponseMsg()\n        );\n\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",exceptionally;handle;mock;Reset;Reset;once;any;response;Header;Client,1.57160684466362e-09;7.8580342233181e-10;6.984919309616089e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.904387950897217, -5.736253261566162, -6.387455463409424, -5.456979274749756, -5.54457426071167, -0.01593814603984356]",0.9841881990432739
3,"['    @Test\n    public void testHandleSeal() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getSealResponseMsg()\n        );\n\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",exceptionally;once;Response;Long;CHECK;Handler;with;Handle;Msg;that,2.3283064365386963e-09;7.566995918750763e-10;7.130438461899757e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.894294738769531, -5.731454849243164, -6.380149841308594, -5.448145389556885, -5.546025276184082, -0.016027309000492096]",0.9841004610061646
3,"['    @Test\n    public void testHandleWrongEpochError() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getWrongEpochErrorMsg(2L)\n        );\n\n        ArgumentCaptor<WrongEpochException> exceptionCaptor = ArgumentCaptor.forClass(WrongEpochException.class);\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed exceptionally (once)\n        // with the expected exception\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), exceptionCaptor.capture());\n\n        assertEquals(2L, exceptionCaptor.getValue().getCorrectEpoch());\n    }\n']",the;Epoch;Cluster;Wrong;the;with;Epoch;verify;Error;exception,1.57160684466362e-09;1.0040821507573128e-09;7.203198038041592e-10;6.548361852765083e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10,5,5,"[-5.873419284820557, -5.693373680114746, -6.341389179229736, -5.4257659912109375, -5.5385212898254395, -0.016411203891038895]",0.9837226271629333
3,"['    @Test\n    public void testHandleWrongClusterError() {\n        final UUID EXPECTED_UUID = UUID.randomUUID();\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getWrongClusterErrorMsg(getUuidMsg(EXPECTED_UUID), getUuidMsg(DEFAULT_UUID))\n        );\n\n        ArgumentCaptor<WrongClusterException> exceptionCaptor = ArgumentCaptor.forClass(WrongClusterException.class);\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed exceptionally (once)\n        // with the expected exception\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), exceptionCaptor.capture());\n\n        assertEquals(EXPECTED_UUID, exceptionCaptor.getValue().getExpectedCluster());\n        assertEquals(DEFAULT_UUID, exceptionCaptor.getValue().getActualCluster());\n    }\n']",eq;exceptionally;completed;Wrong;once;Captor;Expected;Captor;handle;was,1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;4.2928149923682213e-10;3.7834979593753815e-10,5,5,"[-5.864478588104248, -5.683111190795898, -6.341945171356201, -5.405177593231201, -5.541072845458984, -0.01655414327979088]",0.9835821390151978
3,"['    @Test\n    public void testHandleNotReadyError() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getNotReadyErrorMsg()\n        );\n\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed exceptionally (once)\n        // with the expected exception\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), any(ServerNotReadyException.class));\n    }\n']",expected;Epoch;eq;any;the;with;Cluster;Channel;mock;completed,1.0477378964424133e-09;1.0477378964424133e-09;6.402842700481415e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.882619857788086, -5.731105327606201, -6.345526218414307, -5.407044410705566, -5.519411087036133, -0.016412610188126564]",0.9837213158607483
3,"['    @Test\n    public void testHandleBootstrappedError() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getBootstrappedErrorMsg()\n        );\n\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed exceptionally (once)\n        // with the expected exception\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), any(AlreadyBootstrappedException.class));\n    }\n']",expected;Bootstrapped;once;Epoch;correct;Check;Channel;completed;request;get,2.0372681319713593e-09;1.469743438065052e-09;1.0477378964424133e-09;8.440110832452774e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.473825588822365e-10,5,5,"[-5.880059242248535, -5.720381736755371, -6.339935302734375, -5.400742530822754, -5.515323638916016, -0.016510995104908943]",0.9836246967315674
3,"['    @Test\n    public void testHandleNotBootstrappedError() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getNotBootstrappedErrorMsg()\n        );\n\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed exceptionally (once)\n        // with the expected exception\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), any(NoBootstrapException.class));\n    }\n']",correct;Bootstrap;any;handle;Header;get;Not;any;Check;Bootstrapped,3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8553691916167736e-10,5,5,"[-5.881221771240234, -5.726990222930908, -6.34607458114624, -5.410109043121338, -5.518219470977783, -0.016420116648077965]",0.9837139844894409
3,"['    @Test\n    public void testHandleUnknownError() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getUnknownErrorMsg(new Exception(""Unknown Exception Test""))\n        );\n\n        ArgumentCaptor<Exception> exceptionCaptor = ArgumentCaptor.forClass(Exception.class);\n        baseHandler.handleMessage(response, mockChannelHandlerContext);\n\n        // Verify that the correct request was completed exceptionally (once)\n        // with the expected exception\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), exceptionCaptor.capture());\n\n        assertEquals(""Unknown Exception Test"", exceptionCaptor.getValue().getMessage());\n    }\n']",correct;Unknown;Handle;completed;Argument;any;Error;Response;Request;the,5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8714165687561035, -5.711310863494873, -6.341944217681885, -5.402012348175049, -5.52901029586792, -0.016500910744071007]",0.9836344718933105
3,"['    @Test\n    public void testTokenResponseEmptyMap() {\n        Token token = new Token(0L, 0L);\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getTokenResponseMsg(\n                        TokenType.NORMAL,\n                        TokenResponse.NO_CONFLICT_KEY,\n                        TokenResponse.NO_CONFLICT_STREAM, token,\n                        Collections.emptyMap(),\n                        Collections.emptyMap())\n        );\n\n        sequencerHandler.handleMessage(response, mockChannelHandlerContext);\n        ArgumentCaptor<TokenResponse> captor = ArgumentCaptor.forClass(TokenResponse.class);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());\n\n        TokenResponse tokenResponse = captor.getValue();\n        assertEquals(token, tokenResponse.getToken());\n        assertEquals(TokenType.NORMAL, tokenResponse.getRespType());\n        assertEquals(TokenResponse.NO_CONFLICT_STREAM, tokenResponse.getConflictStream());\n        assertEquals(0, tokenResponse.getStreamTailsCount());\n        assertArrayEquals(tokenResponse.getConflictKey(), TokenResponse.NO_CONFLICT_KEY);\n        assertTrue(tokenResponse.getBackpointerMap().isEmpty());\n    }\n']",exceptionally;Verify;verify;Empty;the;we;value;request;completed;complete,9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.863968849182129, -5.698040962219238, -6.342062950134277, -5.380523204803467, -5.558001518249512, -0.016551213338971138]",0.983585000038147
3,"['    @Test\n    public void testTokenResponseDefaultMap() {\n        Token token = new Token(0L, 0L);\n        Map<UUID, Long> backPointerMap = getTokenResponseDefaultMap();\n        Map<UUID, Long> streamTails = getTokenResponseDefaultMap();\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getTokenResponseMsg(\n                        TokenType.NORMAL,\n                        TokenResponse.NO_CONFLICT_KEY,\n                        TokenResponse.NO_CONFLICT_STREAM, token,\n                        backPointerMap,\n                        streamTails)\n        );\n\n        sequencerHandler.handleMessage(response, mockChannelHandlerContext);\n        ArgumentCaptor<TokenResponse> captor = ArgumentCaptor.forClass(TokenResponse.class);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());\n\n        TokenResponse tokenResponse = captor.getValue();\n        assertEquals(token, tokenResponse.getToken());\n        assertEquals(TokenType.NORMAL, tokenResponse.getRespType());\n        assertEquals(TokenResponse.NO_CONFLICT_STREAM, tokenResponse.getConflictStream());\n        assertEquals(streamTails.size(), tokenResponse.getStreamTailsCount());\n        assertEquals(backPointerMap, tokenResponse.getBackpointerMap());\n        assertArrayEquals(tokenResponse.getConflictKey(), TokenResponse.NO_CONFLICT_KEY);\n    }\n']",Captor;get;back;was;STREAM;Throwable;Response;correct;Epoch;Exceptionally,8.149072527885437e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.872814655303955, -5.6957879066467285, -6.351151943206787, -5.3894195556640625, -5.5713887214660645, -0.016423750668764114]",0.9837104082107544
3,"['    @Test\n    public void testBootstrapSequencerResponse() {\n        ResponseMsg responseAck = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getBootstrapSequencerResponseMsg(true)\n        );\n        ResponseMsg responseNack = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getBootstrapSequencerResponseMsg(false)\n        );\n\n        sequencerHandler.handleMessage(responseAck, mockChannelHandlerContext);\n        sequencerHandler.handleMessage(responseNack, mockChannelHandlerContext);\n        // Verify that the correct request was completed with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(responseAck.getHeader().getRequestId(), true);\n        verify(mockClientRouter).completeRequest(responseNack.getHeader().getRequestId(), false);\n    }\n']",IGNORE;Channel;response;any;Response;Msg;any;CHECK;ck;the,6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10,5,5,"[-5.8674468994140625, -5.705341815948486, -6.341372966766357, -5.384608268737793, -5.547123908996582, -0.016541363671422005]",0.9835945963859558
3,"['    @Test\n    public void testSequencerTrimResponse() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getSequencerTrimResponseMsg()\n        );\n\n        sequencerHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",complete;complete;once;did;request;Cluster;Channel;any;we;complete,2.2118911147117615e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.902199745178223, -5.735312461853027, -6.3910298347473145, -5.461054801940918, -5.555009841918945, -0.015882298350334167]",0.9842430353164673
3,"['    @Test\n    public void testSequencerMetricsResponseNormal() {\n        SequencerMetrics sequencerMetricsReady = SequencerMetrics.READY;\n        SequencerMetrics sequencerMetricsNotReady = SequencerMetrics.NOT_READY;\n        SequencerMetrics sequencerMetricsUnknown = SequencerMetrics.UNKNOWN;\n        ResponseMsg responseReady = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getSequencerMetricsResponseMsg(sequencerMetricsReady)\n        );\n        ResponseMsg responseNotReady = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getSequencerMetricsResponseMsg(sequencerMetricsNotReady)\n        );\n        ResponseMsg responseUnkown = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getSequencerMetricsResponseMsg(sequencerMetricsUnknown)\n        );\n\n        sequencerHandler.handleMessage(responseReady, mockChannelHandlerContext);\n        sequencerHandler.handleMessage(responseNotReady, mockChannelHandlerContext);\n        sequencerHandler.handleMessage(responseUnkown, mockChannelHandlerContext);\n        // Verify that the correct request was completed with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(responseReady.getHeader().getRequestId(), sequencerMetricsReady);\n        verify(mockClientRouter).completeRequest(responseNotReady.getHeader().getRequestId(), sequencerMetricsNotReady);\n        verify(mockClientRouter).completeRequest(responseUnkown.getHeader().getRequestId(), sequencerMetricsUnknown);\n    }\n']",exceptionally;that;Normal;Exceptionally;completed;did;ock;the;any;Handler,1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.873311519622803, -5.699106693267822, -6.353893280029297, -5.379183292388916, -5.570761203765869, -0.016456350684165955]",0.9836784601211548
3,"['    @Test\n    public void testStreamsAddressResponseEmptyAddressMap() {\n        long defaultLogTail = 5L;\n        long defaultEpoch = 10L;\n\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getStreamsAddressResponseMsg(defaultLogTail, defaultEpoch, Collections.emptyMap())\n        );\n\n        sequencerHandler.handleMessage(response, mockChannelHandlerContext);\n        ArgumentCaptor<StreamsAddressResponse> captor = ArgumentCaptor.forClass(StreamsAddressResponse.class);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());\n\n        StreamsAddressResponse streamsAddressResponse = captor.getValue();\n        assertTrue(streamsAddressResponse.getAddressMap().isEmpty());\n        assertEquals(defaultLogTail, streamsAddressResponse.getLogTail());\n        assertEquals(defaultEpoch, streamsAddressResponse.getEpoch());\n    }\n']",Address;completed;Exceptionally;Address;Long;Argument;Epoch;Address;appropriate;Cluster,6.984919309616089e-10;6.83940015733242e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.128661774098873e-10;3.019522409886122e-10,5,5,"[-5.879351615905762, -5.67182731628418, -6.3698272705078125, -5.428839206695557, -5.583580493927002, -0.01622883416712284]",0.9839021563529968
3,"['    @Test\n    public void testStreamsAddressResponseDefaultAddressMap() {\n        long defaultLogTail = 5L;\n        long defaultEpoch = 10L;\n        Map<UUID, StreamAddressSpace> defaultMap = getDefaultAddressMap();\n\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getStreamsAddressResponseMsg(defaultLogTail, defaultEpoch, defaultMap)\n        );\n\n        sequencerHandler.handleMessage(response, mockChannelHandlerContext);\n        ArgumentCaptor<StreamsAddressResponse> captor = ArgumentCaptor.forClass(StreamsAddressResponse.class);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());\n\n        StreamsAddressResponse streamsAddressResponse = captor.getValue();\n        assertEquals(defaultLogTail, streamsAddressResponse.getLogTail());\n        assertEquals(defaultEpoch, streamsAddressResponse.getEpoch());\n        Map<UUID, StreamAddressSpace> retMap = streamsAddressResponse.getAddressMap();\n        assertEquals(retMap.size(), defaultMap.size());\n        for (UUID id : defaultMap.keySet()) {\n            assertEquals(defaultMap.get(id).toString(), retMap.get(id).toString());\n        }\n    }\n']",the;Address;sequencer;mock;Long;Epoch;long;Address;Set;ail,8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.878715515136719, -5.660693168640137, -6.386065483093262, -5.44675350189209, -5.60164737701416, -0.01609429344534874]",0.9840346574783325
3,"['    @Test\n    public void testWrite() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getWriteLogResponseMsg()\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",that;any;Throwable;Context;that;appropriate;was;Epoch;Message;we,4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.891714572906494, -5.733645439147949, -6.37589693069458, -5.445964336395264, -5.5403361320495605, -0.016066843643784523]",0.9840615391731262
3,"['    @Test\n    public void testWriteRange() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getRangeWriteLogResponseMsg()\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",any;Channel;exceptionally;Verify;request;Unit;value;and;Client;Request,9.313225746154785e-10;7.275957614183426e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.8994669914245605, -5.73240327835083, -6.385065078735352, -5.456752777099609, -5.549236297607422, -0.01595105230808258]",0.9841755032539368
3,"['    @Test\n    public void testRead() {\n        ReadResponse rr = new ReadResponse();\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getReadLogResponseMsg(rr.getAddresses())\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), rr);\n    }\n']",exceptionally;Basic;CHECK;complete;Msg;never;log;the;Long;Check,9.313225746154785e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.87337589263916, -5.727193355560303, -6.33826208114624, -5.3979902267456055, -5.514505386352539, -0.0165263544768095]",0.9836094379425049
3,"['    @Test\n    public void testInspectAddresses() {\n        List<Long> emptyAddresses = new ArrayList<>();\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getInspectAddressesResponseMsg(emptyAddresses)\n        );\n\n        ArgumentCaptor<InspectAddressesResponse> captor = ArgumentCaptor.forClass(InspectAddressesResponse.class);\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());\n        assertEquals(emptyAddresses, captor.getValue().getEmptyAddresses());\n    }\n']",Inspect;with;Addresses;Addresses;Handler;did;that;Addresses;captor;Header,1.178705133497715e-09;4.656612873077393e-10;4.220055416226387e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.87502384185791, -5.708929061889648, -6.352272987365723, -5.400000095367432, -5.537172794342041, -0.016456585377454758]",0.9836781024932861
3,"['    @Test\n    public void testTailResponse() {\n        TailsResponse sampleTailsResponse = new TailsResponse(0L, 0L, new HashMap<>());\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getTailResponseMsg(sampleTailsResponse.getEpoch(), sampleTailsResponse.getLogTail(),\n                        sampleTailsResponse.getStreamTails())\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), sampleTailsResponse);\n    }\n']",Epoch;any;completed;Long;ails;Msg;Response;value;Response;Check,8.731149137020111e-10;7.8580342233181e-10;7.130438461899757e-10;6.402842700481415e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6557245291769505e-10;2.6193447411060333e-10,5,5,"[-5.874136447906494, -5.710054874420166, -6.3534955978393555, -5.415219306945801, -5.539455413818359, -0.016374731436371803]",0.9837586283683777
3,"['    @Test\n    public void testGetCommittedTail() {\n        long sampleCommittedTail = 5L;\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getCommittedTailResponseMsg(sampleCommittedTail)\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), sampleCommittedTail);\n    }\n']",any;exceptionally;get;with;handle;never;verify;long;that;complete,1.862645149230957e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10,5,5,"[-5.884806156158447, -5.7285895347595215, -6.368434429168701, -5.432261943817139, -5.544545650482178, -0.016159629449248314]",0.9839702248573303
3,"['    @Test\n    public void testUpdateCommittedTail() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getUpdateCommittedTailResponseMsg()\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",that;and;complete;completed;Committed;get;Handler;Verify;exceptionally;ail,2.7939677238464355e-09;2.3283064365386963e-09;1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;6.83940015733242e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9041266441345215, -5.740453243255615, -6.390087604522705, -5.462626934051514, -5.552261829376221, -0.0158658716827631]",0.984259307384491
3,"['    @Test\n    public void testGetLogAddressSpace() {\n        StreamsAddressResponse addressResponse = new StreamsAddressResponse(0L, new HashMap<>());\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getLogAddressSpaceResponseMsg(addressResponse.getLogTail(), addressResponse.getEpoch(),\n                        addressResponse.getAddressMap())\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), addressResponse);\n    }\n']",Long;mock;Epoch;request;any;Epoch;that;Get;Msg;Channel,8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;6.111804395914078e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.875791549682617, -5.712438583374023, -6.3460373878479, -5.408701419830322, -5.533697128295898, -0.01642785593867302]",0.9837063550949097
3,"['    @Test\n    public void testGetTrimMark() {\n        long sampleTrimMark = 5L;\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getTrimMarkResponseMsg(sampleTrimMark)\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), sampleTrimMark);\n    }\n']",request;Trim;long;never;sample;Msg;Request;complete;verify;verify,8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.886003494262695, -5.72216796875, -6.3551435470581055, -5.422610282897949, -5.536198139190674, -0.01627727411687374]",0.9838544726371765
3,"['    @Test\n    public void testRequestKnownAddresses() {\n        KnownAddressResponse knownAddressResponse = new KnownAddressResponse(new HashSet<>());\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getKnownAddressResponseMsg(knownAddressResponse.getKnownAddresses())\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), knownAddressResponse);\n    }\n']",once;completed;the;appropriate;Long;Known;any;verify;complete;complete,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.897897243499756, -5.731964111328125, -6.387210369110107, -5.444407939910889, -5.55170202255249, -0.015997393056750298]",0.9841299057006836
3,"['    @Test\n    public void testPrefixTrim() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getTrimLogResponseMsg()\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",Trim;CHECK;Exceptionally;the;complete;any;complete;Header;completed;Check,1.5133991837501526e-09;1.3969838619232178e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.907402038574219, -5.72998571395874, -6.392343521118164, -5.465472221374512, -5.550166606903076, -0.01588335447013378]",0.9842421412467957
3,"['    @Test\n    public void testCompact() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getCompactResponseMsg()\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",that;never;mock;Context;and;Cluster;Epoch;Handler;Msg;we,1.4551915228366852e-09;1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.900805473327637, -5.732044219970703, -6.384795188903809, -5.452686309814453, -5.54242467880249, -0.015993757173419]",0.9841334819793701
3,"['    @Test\n    public void testFlushCache() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getFlushCacheResponseMsg()\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",Throwable;was;CHECK;correct;request;CHECK;Response;Header;class;ock,9.313225746154785e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.546585164964199e-10,5,5,"[-5.902430057525635, -5.746110916137695, -6.38742733001709, -5.454044818878174, -5.54551887512207, -0.015920547768473625]",0.9842055439949036
3,"['    @Test\n    public void testResetLogUnit() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),\n                getResetLogUnitResponseMsg()\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed (once) with the appropriate value,\n        // and that we did not complete exceptionally.\n        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);\n    }\n']",exceptionally;Cluster;the;and;appropriate;CHECK;get;Unit;Unit;Handler,1.1641532182693481e-09;1.0331859812140465e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.90093469619751, -5.741262435913086, -6.37932825088501, -5.445036888122559, -5.538820266723633, -0.016020270064473152]",0.984107255935669
3,"['    @Test\n    public void testTrimmedError() {\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getTrimmedErrorMsg()\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed exceptionally.\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), any(TrimmedException.class));\n    }\n']",the;class;mock;get;was;any;response;verify;completed;IGNORE,7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.88615083694458, -5.7259202003479, -6.343397617340088, -5.407263278961182, -5.521448135375977, -0.016414135694503784]",0.9837197065353394
3,"['    @Test\n    public void testOverwriteError() {\n        int causeIdWrittenByHole = OverwriteCause.SAME_DATA.getId();\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getOverwriteErrorMsg(causeIdWrittenByHole)\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        ArgumentCaptor<OverwriteException> captor = ArgumentCaptor.forClass(OverwriteException.class);\n        // Verify that the correct request was completed exceptionally.\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), captor.capture());\n        assertEquals(causeIdWrittenByHole, captor.getValue().getOverWriteCause().getId());\n    }\n']",completed;correct;IGNORE;CHECK;captor;Captor;ole;was;Argument;Cause,9.313225746154785e-10;8.149072527885437e-10;5.893525667488575e-10;5.529727786779404e-10;5.529727786779404e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.867292404174805, -5.698671817779541, -6.331939697265625, -5.388879776000977, -5.533590793609619, -0.01661558263003826]",0.983521580696106
3,"['    @Test\n    public void testDataCorruptionError() {\n        long sampleAddress = 5L;\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getDataCorruptionErrorMsg(sampleAddress)\n        );\n\n        logUnitHandler.handleMessage(response, mockChannelHandlerContext);\n        // Verify that the correct request was completed exceptionally.\n        verify(mockClientRouter, never()).completeRequest(anyLong(), any());\n        verify(mockClientRouter).completeExceptionally(\n                eq(response.getHeader().getRequestId()), any(DataCorruptionException.class));\n    }\n']",the;never;any;correct;Error;Error;Msg;get;Address;request,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.878100395202637, -5.71619176864624, -6.328725337982178, -5.38738489151001, -5.5139546394348145, -0.016618045046925545]",0.9835192561149597
3,"['    @Test\n    public void testFireHandshakeSucceeded() throws Exception {\n        // Get a HandshakeRequestMsg with specified server node id.\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getHandshakeResponseMsg(SERVER_NODEID)\n        );\n\n        when(mockChannelContext.pipeline()).thenReturn(mockChannelPipeline);\n        when(mockChannelPipeline.remove(""readTimeoutHandler"")).thenReturn(clientHandshakeHandler);\n\n        clientHandshakeHandler.channelRead(mockChannelContext, response);\n\n        verify(mockChannelContext).fireUserEventTriggered(ClientHandshakeEvent.CONNECTED);\n    }\n']",Epoch;server;Handshake;ucceeded;Cluster;Read;SERVER;specified;channel;get,1.3096723705530167e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.693881005048752e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.893536567687988, -5.741976261138916, -6.3846635818481445, -5.4365973472595215, -5.529916763305664, -0.016102386638522148]",0.9840265512466431
3,"['    @Test\n    public void testVersionMismatchHandshakeSucceeded() throws Exception {\n        // Get a HandshakeResponseMsg whose corfu_source_code_version set in the header is different\n        // from that at client side.\n        ResponseMsg response = getResponseMsg(\n            HeaderMsg.newBuilder()\n                .setVersion(\n                    ProtocolVersionMsg.newBuilder()\n                        .setCorfuSourceCodeVersion(FAKE_SERVER_VERSION)\n                        .setCapabilityVector(CompatibilityVectorUtils.getCompatibilityVectors())\n                        .build())\n                .setRequestId(requestCounter.incrementAndGet())\n                .setPriority(PriorityLevel.NORMAL)\n                .setEpoch(0L)\n                .setClusterId(getUuidMsg(DEFAULT_UUID))\n                .setClientId(getUuidMsg(DEFAULT_UUID))\n                .setIgnoreClusterId(false)\n                .setIgnoreEpoch(true)\n                .build(),\n            getHandshakeResponseMsg(SERVER_NODEID)\n        );\n\n        when(mockChannelContext.pipeline()).thenReturn(mockChannelPipeline);\n        when(mockChannelPipeline.remove(""readTimeoutHandler"")).thenReturn(clientHandshakeHandler);\n\n        clientHandshakeHandler.channelRead(mockChannelContext, response);\n\n        // Currently when versions do not match we do nothing but log warning, so the handshake\n        // is supposed to succeed.\n        verify(mockChannelContext).fireUserEventTriggered(ClientHandshakeEvent.CONNECTED);\n    }\n']",Epoch;at;Version;ucceeded;Version;Handshake;client;Cluster;whose;Vector,1.3969838619232178e-09;8.731149137020111e-10;8.149072527885437e-10;6.693881005048752e-10;6.402842700481415e-10;4.3655745685100555e-10;4.220055416226387e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.859259128570557, -5.652042388916016, -6.287471294403076, -5.33938455581665, -5.521301746368408, -0.017169294878840446]",0.9829773902893066
3,"['    @Test\n    public void testResponseDroppedBeforeHandshake() {\n        // Take out the handshake request message upon channelActive.\n        Object out = embeddedChannel.readOutbound();\n        assertTrue(out instanceof RequestMsg);\n        assertTrue(((RequestMsg) out).getPayload().hasHandshakeRequest());\n        // Get a ping ResponseMsg\n        ResponseMsg response = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getPingResponseMsg()\n        );\n\n        embeddedChannel.writeInbound(response);\n\n        // Verify that the response was correctly dropped and there is no inbound nor outbound messages.\n        assertNull(embeddedChannel.readInbound());\n        assertNull(embeddedChannel.readOutbound());\n    }\n']",read;Handshake;message;upon;Epoch;Cluster;the;embedded;out;embedded,1.6298145055770874e-09;1.2514647096395493e-09;1.1641532182693481e-09;1.0477378964424133e-09;5.820766091346741e-10;4.220055416226387e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9000563621521, -5.74147891998291, -6.409034252166748, -5.4643964767456055, -5.570730686187744, -0.015762027353048325]",0.9843615293502808
3,"['    @Test\n    public void testResponsePassedAfterHandshake() {\n        // Take out the handshake request message upon channelActive.\n        Object out = embeddedChannel.readOutbound();\n        assertTrue(out instanceof RequestMsg);\n        assertTrue(((RequestMsg) out).getPayload().hasHandshakeRequest());\n        // Get a HandshakeRequestMsg with specified server node id.\n        ResponseMsg handshakeResponse = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getHandshakeResponseMsg(SERVER_NODEID)\n        );\n        // Get a ping ResponseMsg\n        ResponseMsg pingResponse = getResponseMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getPingResponseMsg()\n        );\n\n        embeddedChannel.writeInbound(handshakeResponse);\n        embeddedChannel.writeInbound(pingResponse);\n\n        // Verify that the ping response is passed to next handler.\n        Object in = embeddedChannel.readInbound();\n        assertEquals(in, pingResponse);\n        // Verify that there is no outbound messages.\n        assertNull(embeddedChannel.readOutbound());\n    }\n']",IGNORE;Outbound;ping;no;handshake;Inbound;get;messages;Msg;Epoch,6.05359673500061e-09;3.841705620288849e-09;3.725290298461914e-09;3.259629011154175e-09;3.259629011154175e-09;2.561137080192566e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.280568540096283e-09,5,5,"[-5.88614559173584, -5.734428405761719, -6.389524459838867, -5.423037052154541, -5.584351539611816, -0.015986483544111252]",0.9841406345367432
3,"['    @Test\n    public void testGetLayoutForQuorum() {\n        final String server1 = ""server1"";\n        final String server2 = ""server2"";\n        final String server3 = ""server3"";\n\n        final List<String> servers = Arrays.asList(server1, server2, server3);\n        final Layout layout = layoutUtil.getLayout(servers);\n\n        Map<String, Layout> layouts = new HashMap<>();\n\n        servers.forEach(server -> layouts.put(server, layout));\n\n        Optional<Layout> quorumLayout = managementView.getLayoutFromQuorum(layouts, layouts.size() - 1);\n        assertThat(quorumLayout).isEqualTo(Optional.of(layout));\n\n        quorumLayout = managementView.getLayoutFromQuorum(layouts, layouts.size());\n        assertThat(quorumLayout).isEqualTo(Optional.of(layout));\n\n        quorumLayout = managementView.getLayoutFromQuorum(layouts, layouts.size() + 1);\n        assertThat(quorumLayout).isEqualTo(Optional.empty());\n    }\n']",servers;quorum;final;Layout;server;Util;Quorum;management;server;server,6.693881005048752e-10;4.3291947804391384e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.844509601593018, -5.707480430603027, -6.329135417938232, -5.362724781036377, -5.514763832092285, -0.016856491565704346]",0.9832846522331238
3,"['    @Test\n    public void testNodeStatusMap() {\n        final String server1 = ""server1"";\n        final String server2 = ""server2"";\n        final String server3 = ""server3"";\n        Layout layout = layoutUtil.getLayout(Arrays.asList(server1, server2, server3));\n        layout.setUnresponsiveServers(Arrays.asList(server1, server2));\n\n        Map<String, NodeStatus> status = managementView.getNodeStatusMap(layout);\n        assertThat(status.get(server1)).isEqualTo(NodeStatus.DOWN);\n        assertThat(status.get(server2)).isEqualTo(NodeStatus.DOWN);\n        assertThat(status.get(server3)).isEqualTo(NodeStatus.UP);\n    }\n']",View;server;Map;server;Servers;set;Layout;Node;layout;status,6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.8481268882751465, -5.725845813751221, -6.3218674659729, -5.358827590942383, -5.4849419593811035, -0.016940414905548096]",0.9832022786140442
3,"['    @Test\n    public void testLayoutComparator(){\n        Layout l1 = mock(Layout.class);\n        Layout l2 = mock(Layout.class);\n\n        when(l1.getEpoch()).thenReturn(1L);\n        when(l2.getEpoch()).thenReturn(2L);\n\n        TreeSet<Layout> descendingOrder = new TreeSet<>(Layout.LAYOUT_COMPARATOR);\n        descendingOrder.add(l1);\n        descendingOrder.add(l2);\n\n        assertEquals(l2.getEpoch(), descendingOrder.first().getEpoch());\n    }\n']",Epoch;descending;Layout;Layout;mock;Epoch;get;class;Return;descending,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.845280647277832, -5.683266639709473, -6.279177188873291, -5.3598761558532715, -5.455605506896973, -0.017293263226747513]",0.9828553199768066
3,"['    @Test\n    public void testLayoutServersHealth(){\n        Layout layout = layoutUtil.getLayout(servers);\n        ClusterStatus status = clusterHealth.getLayoutServersClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.STABLE);\n\n        layout.setUnresponsiveServers(Collections.singletonList(server3));\n        status = clusterHealth.getLayoutServersClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.DEGRADED);\n\n        layout.setUnresponsiveServers(Arrays.asList(server2, server3));\n        status = clusterHealth.getLayoutServersClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.UNAVAILABLE);\n    }\n']",servers;Unresponsive;Collections;Health;Health;Status;Layout;List;Cluster;Servers,5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;2.9103830456733704e-10;2.473825588822365e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.833113670349121, -5.673588275909424, -6.272547721862793, -5.3298845291137695, -5.4842023849487305, -0.01739882305264473]",0.9827516674995422
3,"['    @Test\n    public void testSequencerServersHealth(){\n        Layout layout = layoutUtil.getLayout(servers);\n        layout.setUnresponsiveServers(Collections.singletonList(server3));\n\n        ClusterStatus status = clusterHealth.getSequencerServersClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.STABLE);\n\n        //Unresponsive sequencer\n        layout.setUnresponsiveServers(Collections.singletonList(server1));\n        status = clusterHealth.getSequencerServersClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.UNAVAILABLE);\n    }\n']",STABLE;That;Health;Layout;Collections;servers;Health;NAVAILABLE;Util;Servers,6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10;2.764863893389702e-10,5,5,"[-5.83840799331665, -5.676111221313477, -6.277487754821777, -5.347269535064697, -5.478146076202393, -0.017305448651313782]",0.9828433394432068
3,"['    @Test\n    public void testLogUnitServersClusterHealth(){\n        Layout layout = layoutUtil.getLayout(servers);\n\n        ClusterStatus status = clusterHealth.getLogUnitServersClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.STABLE);\n\n        //invalid segment\n        layout.setUnresponsiveServers(Collections.singletonList(server3));\n        status = clusterHealth.getLogUnitServersClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.UNAVAILABLE);\n\n        //exclude unresponsive server\n        layout.getFirstSegment().getFirstStripe().getLogServers().remove(server3);\n        status = clusterHealth.getLogUnitServersClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.STABLE);\n    }\n']",invalid;unresponsive;Cluster;Health;layout;Active;Servers;layout;Servers;Util,7.566995918750763e-10;5.238689482212067e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.7826096154749393e-10;1.7826096154749393e-10,5,5,"[-5.838967800140381, -5.67313289642334, -6.278648853302002, -5.334721565246582, -5.49641227722168, -0.017296191304922104]",0.9828523993492126
3,"['    @Test\n    public void testClusterHealth() {\n        Layout layout = layoutUtil.getLayout(servers);\n        layout.setUnresponsiveServers(Collections.singletonList(server3));\n\n        //invalid log unit state\n        ClusterStatus status = clusterHealth.getClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.UNAVAILABLE);\n\n        //stable state with an unresponsive server\n        layout.getFirstSegment().getFirstStripe().getLogServers().remove(server3);\n        status = clusterHealth.getClusterHealth(\n                layout, layout.getAllActiveServers()\n        );\n        assertThat(status).isEqualTo(ClusterStatus.DEGRADED);\n    }\n']",Health;state;log;That;Servers;Layout;ADED;an;stable;Segment,8.149072527885437e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.1650415621697903e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.8487653732299805, -5.683541774749756, -6.300080299377441, -5.366718769073486, -5.5009236335754395, -0.017017416656017303]",0.9831264615058899
3,"['    @Test\n    public void checkConstructorMap() {\n        List<Class<?>> types = Arrays.asList(\n                Byte.class, Integer.class, Long.class, Boolean.class, Double.class, Float.class, String.class,\n                Layout.class, CheckpointEntryType.class, UUID.class, byte[].class, ByteBuf.class\n        );\n\n        assertThat(CorfuProtocolCommon.getConstructorMap().keySet()).containsAll(types);\n    }\n']",Class;check;as;List;Arrays;Float;types;That;uf;byte,3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.842442035675049, -5.6779303550720215, -6.251734256744385, -5.331485271453857, -5.415696620941162, -0.017688149586319923]",0.9824673533439636
3,"['    @Test\n    public void testBuildPayloadFromBuffer(){\n        final int value = 12345;\n        ByteBuf payload = Unpooled.buffer().writeInt(value);\n        Integer result = CorfuProtocolCommon.fromBuffer(payload, Integer.class);\n\n        assertThat(result).isEqualTo(value);\n    }\n']",Build;Unpooled;from;Corfu;That;Byte;qual;Buffer;From;result,9.313225746154785e-10;8.149072527885437e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.868840217590332, -5.722953796386719, -6.317279815673828, -5.417059898376465, -5.437743186950684, -0.016831407323479652]",0.9833094477653503
3,"['    @Test\n    public void testSerialize(){\n        ByteBuf buf = Unpooled.buffer();\n\n        Set<String> payload = new HashSet<>();\n        payload.add(""value1"");\n        payload.add(""value2"");\n\n        CorfuProtocolCommon.serialize(buf, payload);\n        assertThat(CorfuProtocolCommon.setFromBuffer(buf, String.class)).isEqualTo(payload);\n    }\n']",Serialize;Unpooled;buf;serialize;buf;add;That;payload;Corfu;Common,5.238689482212067e-10;4.3655745685100555e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.8331990242004395, -5.676975727081299, -6.251348972320557, -5.344851016998291, -5.414480209350586, -0.017659688368439674]",0.9824951887130737
3,"['    @Test\n    public void testConnectedAndFailedNodes() {\n        NodeConnectivity nodeState = NodeConnectivity.connectivity(\n                ""a"",\n                ImmutableMap.of(""a"", OK, ""b"", OK, ""c"", FAILED)\n        );\n\n        assertThat(nodeState.getConnectedNodes()).isEqualTo(ImmutableSet.of(""a"", ""b""));\n        assertThat(nodeState.getFailedNodes()).isEqualTo(ImmutableSet.of(""c""));\n    }\n']",Node;Immutable;Connectivity;of;of;node;Set;odes;State;Map,5.820766091346741e-10;3.41970007866621e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.884054183959961, -5.755836486816406, -6.337192535400391, -5.39301061630249, -5.482540130615234, -0.016560476273298264]",0.9835759997367859
3,"['    @Test\n    public void testFullNodeName() {\n        final String clusterName = ""mycluster"";\n        final int port = ServerUtil.getRandomOpenPort();\n\n        CorfuServerParams param = CorfuServerParams\n                .serverParamsBuilder()\n                .port(port)\n                .clusterName(clusterName)\n                .serverVersion(""1.0.0"")\n                .build();\n\n        SortedSet<CorfuServerParams> corfuServers = new TreeSet<>(Collections.singletonList(param));\n\n        CorfuClusterParams clusterParams = CorfuClusterParams.builder()\n                .name(clusterName)\n                .nodes(corfuServers)\n                .serverVersion(""1.0.0"")\n                .build();\n\n        String fqdn = clusterParams.getFullNodeName(""node"" + port);\n\n        assertThat(fqdn).isEqualTo(clusterName + ""-corfu-"" + ""node"" + port);\n    }\n']",mycluster;param;Name;server;Params;server;final;builder;Name;Servers,6.83940015733242e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.842051029205322, -5.692270755767822, -6.27725076675415, -5.306787967681885, -5.488268852233887, -0.0173965971916914]",0.9827538728713989
3,"['    @Test\n    public void testEquals() {\n        final int port = 9000;\n\n        CorfuServerParams p1 = CorfuServerParams.serverParamsBuilder()\n                .clusterName(""test-cluster"")\n                .port(port)\n                .logLevel(Level.TRACE)\n                .mode(CorfuServer.Mode.CLUSTER)\n                .persistence(CorfuServer.Persistence.DISK)\n                .stopTimeout(Duration.ofSeconds(123))\n                .serverVersion(""1.0.0"")\n                .build();\n\n        CorfuServerParams p2 = CorfuServerParams.serverParamsBuilder()\n                .clusterName(""test-cluster"")\n                .port(port)\n                .logLevel(Level.WARN)\n                .mode(CorfuServer.Mode.CLUSTER)\n                .persistence(CorfuServer.Persistence.DISK)\n                .stopTimeout(Duration.ofSeconds(555))\n                .serverVersion(""1.0.0"")\n                .build();\n\n        assertThat(p1).isEqualTo(p2);\n    }\n']",Corfu;Timeout;port;CLUSTER;final;Duration;DIS;Corfu;cluster;Params,8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.000888343900442e-10;1.673470251262188e-10;1.5279510989785194e-10,5,5,"[-5.838107109069824, -5.663034439086914, -6.263482093811035, -5.288052558898926, -5.488407611846924, -0.01763146184384823]",0.9825230836868286
3,"['    @Test(timeout = 300000)\n    public void handOfGodTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            ClientParams clientFixture = ClientParams.builder().build();\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient.createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should force remove two nodes from cluster\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            // Sequentially kill two nodes\n            server1.kill();\n            server2.kill();\n\n            // Force remove the dead nodes\n            corfuClient.getManagementView().forceRemoveNode(\n                    server1.getEndpoint(),\n                    clientFixture.getNumRetry(),\n                    clientFixture.getTimeout(),\n                    clientFixture.getPollPeriod()\n            );\n\n            corfuClient.getManagementView().forceRemoveNode(\n                    server2.getEndpoint(),\n                    clientFixture.getNumRetry(),\n                    clientFixture.getTimeout(),\n                    clientFixture.getPollPeriod()\n            );\n\n            // Verify layout contains only the node that is up\n            corfuClient.invalidateLayout();\n            Layout layout = corfuClient.getLayout();\n            assertThat(layout.getAllActiveServers()).containsExactly(server0.getEndpoint());\n\n            // Verify cluster status is STABLE\n            ClusterStatusReport clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            ScenarioUtils.waitUninterruptibly(Duration.ofSeconds(30));\n\n            // Verify data path working\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",nodes;God;workflow;Cluster;dead;Universe;cluster;nodes;kill;View,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.658389560878277e-10;6.693881005048752e-10;6.111804395914078e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.850107669830322, -5.660653114318848, -6.316160202026367, -5.364521503448486, -5.543266296386719, -0.01690208725631237]",0.9832398295402527
3,"['    @Test(timeout = 300000)\n    public void nodeDownAndPartitionTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient\n                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should stop one node and partition another one""\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            // Stop one node and partition another one\n            server1.stop(Duration.ofSeconds(10));\n            server2.disconnect(Arrays.asList(server0, server1));\n\n            waitUninterruptibly(Duration.ofSeconds(20));\n\n            // Verify cluster status\n            corfuClient.invalidateLayout();\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            // Wait for failure detector finds cluster is down before recovering\n            waitForClusterDown(table);\n\n            // Recover cluster by restarting the stopped node, removing\n            // partition and wait for layout\'s unresponsive servers to change\n            server1.start();\n            server2.reconnect(Arrays.asList(server0, server1));\n            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);\n\n            // Check that the segments are merged and all the servers are equal to 3\n            waitForLayoutChange(layout -> layout.getSegments().size() == 1 &&\n                    layout.getAllServers().size() == 3, corfuClient);\n            // wait for the cluster to be up\n            waitForClusterUp(table, ""0"");\n\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            // Verify data path working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",workflow;stop;Down;Cluster;ITER;and;server;server;Table;By,5.820766091346741e-10;5.529727786779404e-10;5.093170329928398e-10;4.2928149923682213e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.6007106751203537e-10,5,5,"[-5.850454330444336, -5.660279273986816, -6.33360481262207, -5.388666152954102, -5.5519843101501465, -0.016722621396183968]",0.9834164381027222
3,"['    @Test(timeout = 300000)\n    public void writeAfterResetTest() {\n        workflow(wf -> {\n\n                    wf.setupDocker(fixture -> {\n                        fixture.getCluster().numNodes(1);\n                    });\n\n                    wf.deploy();\n                    try {\n                        writeAfterReset(wf);\n                    } catch (Exception e) {\n                        Assertions.fail(""Test failed: "" + e);\n                    }\n\n                }\n        );\n    }\n']",timeout;write;Cluster;get;ocker;Reset;Reset;setup;Exception;After,4.656612873077393e-10;3.2014213502407074e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.4551915228366852e-10;9.458744898438454e-11;8.731149137020111e-11;8.731149137020111e-11;8.731149137020111e-11;7.275957614183426e-11,5,5,"[-5.852002143859863, -5.663025379180908, -6.267650604248047, -5.329928874969482, -5.47780704498291, -0.017416512593626976]",0.9827342629432678
3,"['    @Test(timeout = 300000)\n    public void clusterResizeTest() {\n        workflow(wf -> {\n            wf.deploy();\n            UniverseParams params = wf.getFixture().data();\n\n            ClientParams clientFixture = ClientParams.builder().build();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(params.getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table =\n                    corfuClient.createDefaultCorfuTable(TestFixtureConst.DEFAULT_STREAM_NAME);\n\n            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            List<CorfuServer> servers = Arrays.asList(\n                    corfuCluster.getServerByIndex(1),\n                    corfuCluster.getServerByIndex(2)\n            );\n\n            //should remove two nodes from corfu cluster\n            {\n                CorfuServer server0 = corfuCluster.getFirstServer();\n\n                // Sequentially remove two nodes from cluster\n                for (CorfuServer candidate : servers) {\n                    corfuClient.getManagementView().removeNode(\n                            candidate.getEndpoint(),\n                            clientFixture.getNumRetry(),\n                            clientFixture.getTimeout(),\n                            clientFixture.getPollPeriod()\n                    );\n                }\n\n                // Reset all nodes so that we do not end up with an OverwriteException.\n                for (CorfuServer candidate : servers) {\n                    corfuClient.getRuntime().getLayoutView().getRuntimeLayout()\n                            .getBaseClient(candidate.getEndpoint()).reset();\n                }\n\n                // Verify layout contains only the node that is not removed\n                corfuClient.invalidateLayout();\n                assertThat(corfuClient.getLayout().getAllServers())\n                        .containsExactly(server0.getEndpoint());\n\n                // Verify data path working fine\n                for (int x = 0; x < TestFixtureConst.DEFAULT_TABLE_ITER; x++) {\n                    assertThat(table.get(String.valueOf(x))).isEqualTo(String.valueOf(x));\n                }\n\n                if (wf.getUniverseMode() == UniverseMode.VM) {\n                    ScenarioUtils.waitUninterruptibly(Duration.ofSeconds(15));\n                }\n            }\n\n            //should add two nodes back to corfu cluster\n            {\n\n                // Sequentially add two nodes back into cluster\n                for (CorfuServer candidate : servers) {\n                    corfuClient.getManagementView().addNode(\n                            candidate.getEndpoint(),\n                            clientFixture.getNumRetry(),\n                            clientFixture.getTimeout(),\n                            clientFixture.getPollPeriod()\n                    );\n                }\n\n                // Verify layout should contain all three nodes\n                corfuClient.invalidateLayout();\n                assertThat(corfuClient.getLayout().getAllServers().size())\n                        .isEqualTo(corfuCluster.nodes().size());\n\n                // Verify data path working fine\n                for (int x = 0; x < TestFixtureConst.DEFAULT_TABLE_ITER; x++) {\n                    assertThat(table.get(String.valueOf(x))).isEqualTo(String.valueOf(x));\n                }\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",should;timeout;two;workflow;DEFAULT;servers;Corfu;Param;cluster;builder,1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;2.764863893389702e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.846916198730469, -5.658429145812988, -6.295285701751709, -5.341864109039307, -5.5154314041137695, -0.01717960648238659]",0.9829671382904053
3,"[""    @Test(timeout = 300000)\n    public void oneNodePausedTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient\n                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should pause one node and then resume\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n\n            // Pause one node and wait for layout's unresponsive servers to change\n            server1.pause();\n            waitForUnresponsiveServersChange(size -> size == 1, corfuClient);\n\n            // Verify layout, unresponsive servers should contain only one node\n            Layout layout = corfuClient.getLayout();\n            assertThat(layout.getUnresponsiveServers())\n                    .containsExactly(server1.getEndpoint());\n\n            // Verify cluster status is DEGRADED with one node down\n            ClusterStatusReport clusterStatusReport = corfuClient.getManagementView()\n                    .getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus())\n                    .isEqualTo(ClusterStatus.DEGRADED);\n            Map<String, NodeStatus> statusMap = clusterStatusReport\n                    .getClusterNodeStatusMap();\n            assertThat(statusMap.get(server1.getEndpoint())).isEqualTo(NodeStatus.DOWN);\n\n            // Verify data path working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            // Resume the stopped node and wait for layout's unresponsive servers to change\n            server1.resume();\n            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);\n\n            final Duration sleepDuration = Duration.ofSeconds(1);\n            // Verify cluster status is STABLE\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {\n                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n                Sleep.sleepUninterruptibly(sleepDuration);\n            }\n            assertThat(clusterStatusReport.getClusterStatus())\n                    .isEqualTo(ClusterStatus.STABLE);\n\n            // Verify data path working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n""]",to;deploy;workflow;node;pause;Universe;and;get;node;corfu,3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8570427894592285, -5.680953502655029, -6.368606090545654, -5.424084186553955, -5.570901870727539, -0.016333334147930145]",0.9837993383407593
3,"['    @Test(timeout = 300000)\n    public void oneNodeDownTest() {\n\n        workflow(wf -> {\n            wf.deploy();\n\n            try {\n                oneNodeDown(wf);\n            } catch (InterruptedException e) {\n                fail(""Test failed"", e);\n            }\n        });\n    }\n']",Down;one;Interrupted;failed;Node;Exception;workflow;fail;deploy;Down,8.440110832452774e-10;6.984919309616089e-10;4.220055416226387e-10;3.4924596548080444e-10;0.0;-5.820766091346741e-11;-1.1641532182693481e-10;-1.4551915228366852e-10;-2.0372681319713593e-10;-2.0372681319713593e-10,5,5,"[-5.887381076812744, -5.719478607177734, -6.343594551086426, -5.4223432540893555, -5.497978210449219, -0.016460221260786057]",0.9836745262145996
3,"['    @Test(timeout = 300_000)\n    public void fileDescriptorLeaksBaseServerResetTest() {\n\n        workflow(wf -> {\n            wf.setupDocker(fixture -> fixture.getCluster().numNodes(1));\n            wf.deploy();\n\n            try {\n                resourceLeaks(wf);\n            } catch (Exception e) {\n                fail(""Test failed"", e);\n            }\n        });\n    }\n']",timeout;deploy;catch;Cluster;ixture;Base;Leaks;Reset;failed;workflow,9.313225746154785e-10;7.421476766467094e-10;4.656612873077393e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.866098880767822, -5.6964592933654785, -6.313409805297852, -5.395796298980713, -5.48399019241333, -0.016832813620567322]",0.9833080768585205
3,"['    @Test(timeout = 600000)\n    public void rotateLinkFailureTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient\n                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should rotate link failures among cluster\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            log.info(""1st link failure rotation, disconnect between server0 and server1. "" +\n                            ""Current layout: {}"", corfuClient.getLayout()\n            );\n\n            server0.disconnect(Collections.singletonList(server1));\n\n            waitForLayoutChange(\n                    layout -> {\n                        List<String> expected = Collections.singletonList(server1.getEndpoint());\n                        return layout.getUnresponsiveServers().equals(expected);\n                    },\n                    corfuClient\n            );\n\n            ScenarioUtils.waitForClusterUp(table, ""0"");\n\n            Layout latestLayout = corfuClient.getLayout();\n\n            log.info(""Verify data path working fine"");\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            log.info(""2nd link failure rotation, disconnect between server1 and server2 "" +\n                    ""and heal previous link failure between server0 and server1"");\n            server1.disconnect(Collections.singletonList(server2));\n            server0.reconnect(Collections.singletonList(server1));\n\n            log.info(""Wait for some time to ensure cluster stabilizes Server1 should stay "" +\n                    ""in unresponsive set, no layout change"");\n            waitUninterruptibly(Duration.ofSeconds(30));\n            assertThat(corfuClient.getLayout()).isEqualTo(latestLayout);\n\n            ScenarioUtils.waitForClusterUp(table, ""0"");\n            log.info(""Verify data path working fine"");\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            log.info(""3rd link failure rotation, disconnect between server2 and server0 "" +\n                    ""and heal previous link failure between server1 and server2"");\n            server2.disconnect(Collections.singletonList(server0));\n            server1.reconnect(Collections.singletonList(server2));\n\n            log.info(""Server0 and server2 has same number of link failure ie. 1, "" +\n                    ""the one with larger endpoint should be marked as unresponsive."");\n            waitForLayoutChange(\n                    layout -> {\n                        List<String> expected = Collections.singletonList(server2.getEndpoint());\n                        return layout.getUnresponsiveServers().equals(expected);\n                    },\n                    corfuClient\n            );\n\n            log.info(""Verify data path working fine"");\n            waitUninterruptibly(Duration.ofSeconds(20));\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            log.info(""4th link failure rotation, reverse the rotating direction, "" +\n                    ""disconnect between server1 and server2 "" +\n                    ""and heal previous link failure between server1 and server2"");\n            server1.disconnect(Collections.singletonList(server2));\n            server2.reconnect(Collections.singletonList(server0));\n\n            log.info(""Wait for some time to ensure cluster stabilizes "" +\n                    ""Server1 should stay in unresponsive set, no layout change"");\n            waitUninterruptibly(Duration.ofSeconds(30));\n\n            log.info(""Verify data path working fine"");\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            log.info(""Finally stop rotation and heal all link failures."");\n            server1.reconnect(Collections.singletonList(server2));\n            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);\n\n            final Duration sleepDuration = Duration.ofSeconds(1);\n            log.info(""Verify cluster status is STABLE"");\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n\n            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {\n                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n                Sleep.sleepUninterruptibly(sleepDuration);\n            }\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            log.info(""Verify data path working fine"");\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",timeout;rotate;Link;cluster;Failure;Cluster;link;ixture;workflow;Layout,9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.855048179626465, -5.653873443603516, -6.327818393707275, -5.380958557128906, -5.552083492279053, -0.016777953132987022]",0.9833620190620422
3,"[""    @Test(timeout = 300000)\n    public void nodesPausedAndPartitionedTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient\n                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n\n            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should pause one node and partition another\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            // Pause one node and partition another one\n            server1.pause();\n            server2.disconnect(Arrays.asList(server0, server1));\n\n            waitUninterruptibly(Duration.ofSeconds(20));\n\n            // Verify cluster status\n            corfuClient.invalidateLayout();\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            // Wait for failure detector finds cluster is down before recovering\n            waitForClusterDown(table);\n\n            // Recover cluster by resuming the paused node, removing\n            // partition and wait for layout's unresponsive servers to change.\n            // Also wait for the segment merge.\n            server1.resume();\n            server2.reconnect(Arrays.asList(server0, server1));\n            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);\n            waitForLayoutChange(layout -> layout.getSegments().size() == 1, corfuClient);\n            // Verify cluster status is STABLE\n            corfuClient.invalidateLayout();\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            // Verify data path working fine\n            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n""]",ixture;timeout;ixture;workflow;ITER;pause;Duration;Corfu;node;data,1.862645149230957e-09;1.6298145055770874e-09;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.637978807091713e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.86448335647583, -5.6706767082214355, -6.376852512359619, -5.438629627227783, -5.584929943084717, -0.016214758157730103]",0.9839161038398743
3,"['    @Test(timeout = 600000)\n    public void concurrentClusterResizeTest() {\n        // Deploy a five nodes cluster\n        final int numNodes = 5;\n\n        workflow(wf -> {\n            wf.setupDocker(fixture -> fixture.getCluster().numNodes(numNodes));\n            wf.setupProcess(fixture -> fixture.getCluster().numNodes(numNodes));\n            wf.setupVm(fixture -> fixture.getCluster().numNodes(numNodes));\n\n            wf.deploy();\n\n            ClientParams clientFixture = ClientParams.builder().build();\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            assertThat(corfuCluster.nodes().size()).isEqualTo(numNodes);\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table =\n                    corfuClient.createDefaultCorfuTable(TestFixtureConst.DEFAULT_STREAM_NAME);\n            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            CorfuServer server0 = corfuCluster.getFirstServer();\n\n            // Get the servers list to be added/removed -all servers in the cluster exclude server0\n            List<CorfuServer> servers = IntStream.range(1, numNodes)\n                    .mapToObj(corfuCluster::getServerByIndex)\n                    .collect(Collectors.toList());\n\n            //should concurrently remove four nodes from cluster\n\n            // Concurrently remove four nodes from cluster\n            ExecutorService executor = Executors.newFixedThreadPool(numNodes - 1);\n\n            servers.forEach(node -> {\n                Runnable removeNodeAction = () -> corfuClient.getManagementView().removeNode(\n                        node.getEndpoint(),\n                        clientFixture.getNumRetry(),\n                        clientFixture.getTimeout(),\n                        clientFixture.getPollPeriod()\n                );\n                executor.submit(removeNodeAction);\n            });\n\n            // Wait for layout servers to change and wait for cluster to be up\n            waitForLayoutServersChange(size -> size == 1, corfuClient);\n            executor.shutdownNow();\n\n            // Verify layout contains only one node\n            corfuClient.invalidateLayout();\n            assertThat(corfuClient.getLayout().getAllServers()).containsExactly(server0.getEndpoint());\n\n            waitForClusterUp(table, ""0"");\n            // Verify data path working fine\n            for (int x = 0; x < TestFixtureConst.DEFAULT_TABLE_ITER; x++) {\n                assertThat(table.get(String.valueOf(x))).isEqualTo(String.valueOf(x));\n            }\n\n            //should concurrently add four nodes back into cluster""\n\n            // Concurrently add four nodes back into cluster and wait for cluster to stabilize\n            ExecutorService executor2 = Executors.newFixedThreadPool(numNodes - 1);\n            servers.forEach(node -> executor2.submit(() -> corfuClient.getManagementView().addNode(\n                    node.getEndpoint(),\n                    clientFixture.getNumRetry(),\n                    clientFixture.getTimeout(),\n                    clientFixture.getPollPeriod())\n            ));\n\n\n            // Check that the segments are merged and all the servers are equal to numNodes\n            waitForLayoutChange(layout -> layout.getAllServers().size() == numNodes, corfuClient);\n            waitForLayoutChange(layout -> layout.getSegments().size() == 1, corfuClient);\n            // wait for the cluster to be up\n            waitForClusterUp(table, ""0"");\n            executor2.shutdownNow();\n\n            // Verify data path working fine\n            for (int x = 0; x < TestFixtureConst.DEFAULT_TABLE_ITER; x++) {\n                assertThat(table.get(String.valueOf(x))).isEqualTo(String.valueOf(x));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",STREAM;NAME;Corfu;Corfu;DEFAULT;ITER;ixture;Universe;Const;Client,3.026798367500305e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.855623245239258, -5.65866231918335, -6.329848766326904, -5.384914398193359, -5.5467352867126465, -0.016758259385824203]",0.9833813905715942
3,"['    @Test(timeout = 300000)\n    public void oneLinkFailureTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient.createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should fail one link and then heal""\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            // Create link failure between server0 and server2\n            server0.disconnect(Collections.singletonList(server2));\n            // Server0 and server2 has same number of link failure ie. 1, the one with\n            // larger endpoint should be marked as unresponsive.\n            String serverToKick = Collections.max(\n                    Arrays.asList(server0.getEndpoint(), server2.getEndpoint())\n            );\n            waitForUnresponsiveServersChange(size -> size == 1, corfuClient);\n\n            assertThat(corfuClient.getLayout().getUnresponsiveServers())\n                    .containsExactly(serverToKick);\n\n            // Cluster status should be DEGRADED after one node is marked unresponsive\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.DEGRADED);\n\n            // Verify data path working fine\n            ScenarioUtils.waitUninterruptibly(Duration.ofSeconds(10));\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            // Repair the partition between server0 and server2\n            server0.reconnect(Collections.singletonList(server2));\n            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);\n\n            final Duration sleepDuration = Duration.ofSeconds(1);\n            // Verify cluster status is STABLE\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {\n                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n                Sleep.sleepUninterruptibly(sleepDuration);\n            }\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            // Verify data path working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",unresponsive;failure;max;ixture;STREAM;with;Link;Universe;larger;Corfu,1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.866300582885742, -5.664027214050293, -6.392977714538574, -5.4635844230651855, -5.594989776611328, -0.016058044508099556]",0.9840700626373291
3,"['    @Test(timeout = 300000)\n    public void nodeUpAndPartitionedTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient\n                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should fail the node with most link failures to unresponsive set\n            // Deploy and bootstrap three nodes\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            long currEpoch = corfuClient.getLayout().getEpoch();\n\n            log.info(""Stop server1"");\n            server1.stop(Duration.ofSeconds(10));\n            waitForNextEpoch(corfuClient, currEpoch + 1);\n            assertThat(corfuClient.getLayout().getUnresponsiveServers())\n                    .containsExactly(server1.getEndpoint());\n            currEpoch++;\n\n            // Partition the responsive server0 from both unresponsive server1\n            // and responsive server2 and reconnect server 1. Wait for layout\'s unresponsive\n            // servers to change After this, cluster becomes unavailable.\n            // NOTE: cannot use waitForClusterDown() since the partition only happens on server side,\n            // client can still connect to two nodes, write to table,\n            // so system down handler will not be triggered.\n            server0.disconnect(Arrays.asList(server1, server2));\n            server1.start();\n\n            waitForLayoutChange(l -> {\n                List<String> unresponsive = l.getUnresponsiveServers();\n                return unresponsive.size() == 1 && unresponsive.contains(server0.getEndpoint());\n            }, corfuClient);\n\n            // Verify server0 is unresponsive\n            List<String> unresponsiveServers = corfuClient.getLayout().getUnresponsiveServers();\n            assertThat(unresponsiveServers)\n                    .as(""Wrong number of unresponsive servers: %s"", unresponsiveServers)\n                    .containsExactly(server0.getEndpoint());\n            currEpoch += 2;\n\n            waitUninterruptibly(Duration.ofSeconds(20));\n\n            // Verify cluster status. Cluster status should be DEGRADED after one node is\n            // marked unresponsive\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.DEGRADED);\n\n            // Heal all the link failures\n            server0.reconnect(Arrays.asList(server1, server2));\n            waitForNextEpoch(corfuClient, currEpoch + 1);\n            currEpoch++;\n\n            Duration sleepDuration = Duration.ofSeconds(1);\n            // Verify cluster status is STABLE\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {\n                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n                Sleep.sleepUninterruptibly(sleepDuration);\n            }\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            Sleep.sleepUninterruptibly(Duration.ofSeconds(10));\n\n            // Verify data path is working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",node;to;Partitioned;link;Layout;cur;fail;ixture;Duration;and,1.979060471057892e-09;1.1641532182693481e-09;1.1204974725842476e-09;8.149072527885437e-10;6.984919309616089e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.852386474609375, -5.648409366607666, -6.333141326904297, -5.398364067077637, -5.564946174621582, -0.016664588823914528]",0.9834735989570618
3,"[""    @Test(timeout = 300000)\n    public void twoNodesDownTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient\n                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should stop two nodes and then restart\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            // Sequentially stop two nodes\n            server1.stop(Duration.ofSeconds(10));\n            server2.stop(Duration.ofSeconds(10));\n\n            // Verify cluster status is UNAVAILABLE with two node down and one node up\n            corfuClient.invalidateLayout();\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n\n            Map<String, NodeStatus> nodeStatusMap = clusterStatusReport.getClusterNodeStatusMap();\n            Map<String, ConnectivityStatus> connectivityStatusMap = clusterStatusReport\n                    .getClientServerConnectivityStatusMap();\n            ClusterStatusReliability reliability = clusterStatusReport.getClusterStatusReliability();\n\n            assertThat(connectivityStatusMap.get(server0.getEndpoint()))\n                    .isEqualTo(ConnectivityStatus.RESPONSIVE);\n            assertThat(connectivityStatusMap.get(server1.getEndpoint()))\n                    .isEqualTo(ConnectivityStatus.UNRESPONSIVE);\n            assertThat(connectivityStatusMap.get(server2.getEndpoint()))\n                    .isEqualTo(ConnectivityStatus.UNRESPONSIVE);\n\n            assertThat(nodeStatusMap.get(server0.getEndpoint())).isEqualTo(NodeStatus.NA);\n            assertThat(nodeStatusMap.get(server1.getEndpoint())).isEqualTo(NodeStatus.NA);\n            assertThat(nodeStatusMap.get(server2.getEndpoint())).isEqualTo(NodeStatus.NA);\n\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.UNAVAILABLE);\n            assertThat(reliability).isEqualTo(ClusterStatusReliability.WEAK_NO_QUORUM);\n\n            // Wait for failure detector finds cluster is down before recovering\n            waitForClusterDown(table);\n\n            // Sequentially restart two nodes and wait for layout's unresponsive servers to change\n            server1.start();\n            server2.start();\n\n            Layout initialLayout = clusterStatusReport.getLayout();\n            waitForLayoutChange(layout -> layout.getEpoch() > initialLayout.getEpoch()\n                    && layout.getUnresponsiveServers().size() == 0, corfuClient);\n\n            final Duration sleepDuration = Duration.ofSeconds(1);\n\n            // Verify cluster status is STABLE\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {\n                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n                Sleep.sleepUninterruptibly(sleepDuration);\n            }\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            // Verify data path working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n""]",two;Should;down;odes;deploy;Duration;one;Corfu;nodes;get,7.275957614183426e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.858078479766846, -5.664407253265381, -6.331657886505127, -5.387723445892334, -5.559726238250732, -0.01666329987347126]",0.9834747910499573
3,"['    @Test(timeout = 300000)\n    public void allNodesPartitionedTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            UniverseParams params = wf.getFixture().data();\n\n            CorfuCluster<CorfuServer, CorfuClusterParams> corfuCluster = wf.getUniverse()\n                    .getGroup(params.getGroupParamByIndex(0).getName());\n\n            CorfuClusterParams corfuClusterParams = corfuCluster.getParams();\n\n            assertThat(corfuCluster.nodes().size()).isEqualTo(3);\n            assertThat(corfuCluster.nodes().size()).isEqualTo(corfuClusterParams.size());\n\n            assertThat(corfuCluster.getParams().getNodesParams().size())\n                    .as(""Invalid cluster: %s, but expected 3 nodes"",\n                            corfuClusterParams.getClusterNodes()\n                    )\n                    .isEqualTo(3);\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table =\n                    corfuClient.createDefaultCorfuTable(TestFixtureConst.DEFAULT_STREAM_NAME);\n            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n\n            // Symmetrically partition all nodes and wait for failure\n            // detector to work and cluster to stabilize\n            List<CorfuServer> allServers = corfuCluster.<CorfuServer>nodes().values().asList();\n            allServers.forEach(server -> {\n                List<CorfuServer> otherServers = new ArrayList<>(allServers);\n                otherServers.remove(server);\n                server.disconnect(otherServers);\n            });\n\n            waitUninterruptibly(Duration.ofSeconds(20));\n\n            // Verify cluster and node status\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            Map<String, NodeStatus> statusMap = clusterStatusReport.getClusterNodeStatusMap();\n            corfuCluster.nodes()\n                    .values()\n                    .forEach(node ->\n                            assertThat(statusMap.get(node.getEndpoint())).isEqualTo(NodeStatus.UP)\n                    );\n\n            Map<String, ConnectivityStatus> connectivityMap = clusterStatusReport\n                    .getClientServerConnectivityStatusMap();\n\n            corfuCluster.nodes().values().forEach(node -> {\n                assertThat(connectivityMap.get(node.getEndpoint()))\n                        .isEqualTo(ConnectivityStatus.RESPONSIVE);\n            });\n\n            // Remove partitions and wait for layout\'s unresponsive servers to change\n            waitUninterruptibly(Duration.ofSeconds(10));\n            corfuCluster.nodes().values().forEach(CorfuServer::reconnect);\n\n            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);\n\n            // Verify cluster status is STABLE\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            waitForClusterUp(table, ""0"");\n\n            // Verify data path working fine\n            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n\n            corfuClient.shutdown();\n\n        });\n    }\n']",timeout;deploy;corfu;odes;Corfu;table;ixture;as;Universe;Local,6.984919309616089e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.673470251262188e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.2369127944111824e-10,5,5,"[-5.845104694366455, -5.667139530181885, -6.306758880615234, -5.3462090492248535, -5.5195770263671875, -0.017094764858484268]",0.983050525188446
3,"['    @Test(timeout = 300000)\n    public void twoLinksFailureTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient\n                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should fail two links and then heal\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            // Disconnect server0 with server1 and server2\n            server0.disconnect(Arrays.asList(server1, server2));\n            waitForLayoutChange(layout -> layout.getUnresponsiveServers()\n                    .equals(Collections.singletonList(server0.getEndpoint())), corfuClient);\n\n            // Cluster status should be DEGRADED after one node is marked unresponsive\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.DEGRADED);\n\n            // Verify data path working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            // Repair the link failure between server0 and others\n            server0.reconnect(Arrays.asList(server1, server2));\n            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);\n\n            final Duration sleepDuration = Duration.ofSeconds(1);\n            // Verify cluster status is STABLE\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {\n                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n                Sleep.sleepUninterruptibly(sleepDuration);\n            }\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            // Verify data path working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",Disconnect;timeout;deploy;with;Universe;Corfu;get;layout;and;Corfu,1.4260876923799515e-09;1.280568540096283e-09;4.511093720793724e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8539018630981445, -5.664842128753662, -6.326683044433594, -5.366771697998047, -5.549355506896973, -0.016822146251797676]",0.983318567276001
3,"['    @Test(timeout = 300000)\n    public void nodeDownAndLinkFailureTest() {\n        workflow(wf -> {\n            wf.deploy();\n\n            CorfuCluster corfuCluster = wf.getUniverse()\n                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());\n\n            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();\n\n            CorfuTable<String, String> table = corfuClient.createDefaultCorfuTable(DEFAULT_STREAM_NAME);\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                table.put(String.valueOf(i), String.valueOf(i));\n            }\n\n            //Should fail one link then one node and then heal\n            CorfuServer server0 = corfuCluster.getServerByIndex(0);\n            CorfuServer server1 = corfuCluster.getServerByIndex(1);\n            CorfuServer server2 = corfuCluster.getServerByIndex(2);\n\n            long currEpoch = corfuClient.getLayout().getEpoch();\n\n            log.info(""Stop server2 and wait for layout\'s unresponsive servers to change"");\n            server2.stop(Duration.ofSeconds(10));\n            waitForNextEpoch(corfuClient, currEpoch + 1);\n            assertThat(corfuClient.getLayout().getUnresponsiveServers()).containsExactly(server2.getEndpoint());\n            currEpoch++;\n\n            // Create link failure between server0 and server1\n            // After this, cluster becomes unavailable.\n            // NOTE: cannot use waitForClusterDown() since the partition only happens on server side, client\n            // can still connect to two nodes, write to table so system down handler will not be triggered.\n            log.info(""Create link failure between server0 and server1"");\n            server0.disconnect(Collections.singletonList(server1));\n\n            // Restart the stopped node, server0 and server1 still partitioned,\n            // wait for the one with larger endpoint be marked as unresponsive.\n            log.info(""Restart the stopped node, server0 and server1 still partitioned wait for "" +\n                    ""the one with larger endpoint be marked as unresponsive."");\n            server2.start();\n\n            waitForLayoutChange(layout -> layout.getUnresponsiveServers()\n                    .equals(Collections.singletonList(server1.getEndpoint())), corfuClient);\n\n            // Cluster status should be DEGRADED after one node is marked unresponsive\n            ClusterStatusReport clusterStatusReport = corfuClient\n                    .getManagementView()\n                    .getClusterStatus();\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.DEGRADED);\n\n            log.info(""Repair the partition between server0 and server1"");\n            server0.reconnect(Collections.singletonList(server1));\n            //TODO why we update epoch many times?\n            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);\n\n            Duration sleepDuration = Duration.ofSeconds(1);\n            // Verify cluster status is STABLE\n            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {\n                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();\n                Sleep.sleepUninterruptibly(sleepDuration);\n            }\n            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);\n\n            // Verify data path working fine\n            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {\n                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));\n            }\n\n            corfuClient.shutdown();\n        });\n    }\n']",Epoch;Epoch;Universe;table;long;Next;and;Table;Stop;corfu,9.313225746154785e-10;6.693881005048752e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8610520362854, -5.6647114753723145, -6.3767876625061035, -5.448654651641846, -5.587452411651611, -0.0161921214312315]",0.9839383959770203
3,"['    @Test\n    public void testWriteGauge() {\n        Meter.Id id = new Meter.Id(""metric"", Tags.of(""endpoint"", ""localhost:9000""),\n                null, null, Meter.Type.GAUGE);\n        LoggingMeterRegistryWithHistogramSupport registry = getInstance();\n        Stream<String> stream = registry.writeGauge(id, 20.0);\n        String line = stream.findFirst().orElseThrow(IllegalArgumentException::new);\n        assertTrue(line.contains(""metric,endpoint=localhost:9000,metric_type=gauge value=20""));\n    }\n']",metric;Histogram;contains;endpoint;type;localhost;or;write;Meter;Instance,8.440110832452774e-10;8.149072527885437e-10;6.111804395914078e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.87211799621582, -5.74900484085083, -6.320160865783691, -5.406172275543213, -5.486079216003418, -0.016571849584579468]",0.9835646152496338
3,"['    @Test\n    public void testWriteCounter() {\n        Meter.Id id = new Meter.Id(""metric"", Tags.of(""endpoint"", ""localhost:9000""),\n                null, null,\n                Meter.Type.COUNTER);\n        LoggingMeterRegistryWithHistogramSupport registry = getInstance();\n        Stream<String> stream = registry.writeCounter(id, 30);\n        String line = stream.findFirst().orElseThrow(IllegalArgumentException::new);\n        assertTrue(line.contains(""metric,endpoint=localhost:9000,metric_type=counter value=30""));\n    }\n']",OUNTER;Counter;Meter;Counter;Type;localhost;counter;metric;line;Stream,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.2919266484677792e-10;1.4551915228366852e-10,5,5,"[-5.8634233474731445, -5.734399795532227, -6.303974628448486, -5.3904924392700195, -5.472813129425049, -0.016802804544568062]",0.9833375811576843
3,"['    @Test\n    public void testWriteTimer() {\n        LoggingMeterRegistryWithHistogramSupport registry = getInstance();\n        Timer timer = new TestTimer();\n        String line = registry.writeTimer(timer).findFirst().orElseThrow(IllegalArgumentException::new);\n        assertTrue(line.contains(""metric,endpoint=localhost:9000,metric_type=timer sum=200,count=100,mean=2,upper=300""));\n    }\n']",Write;sum;registry;Timer;registry;Timer;count;metric;Timer;eter,1.076841726899147e-09;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.858226776123047, -5.708056449890137, -6.318789482116699, -5.428407669067383, -5.460608959197998, -0.016758142039179802]",0.9833813905715942
3,"['    @Test\n    public void testWriteSummary() {\n        LoggingMeterRegistryWithHistogramSupport registry = getInstance();\n        TestSummary summary = new TestSummary();\n        String line = registry.writeSummary(summary).findFirst().orElseThrow(IllegalArgumentException::new);\n        assertTrue(line.contains(""metric,endpoint=localhost:9000,metric_type=summary sum=200,count=100,mean=2,upper=300""));\n    }\n']",Histogram;Registry;Summary;summary;upper;metric;Exception;Illegal;contains;First,3.958120942115784e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.3655745685100555e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.858739376068115, -5.734248638153076, -6.312140941619873, -5.392306327819824, -5.443014621734619, -0.0169225987046957]",0.9832198023796082
3,"['    @Test\n    public void testTimerPercentiles() {\n        AggregateSink sink = new AggregateSink();\n\n        LoggingMeterRegistryWithHistogramSupport registry = getInstance(sink);\n\n        Timer timer = Timer.builder(""timer"")\n                .publishPercentileHistogram()\n                .publishPercentiles(0.99, 0.95, 0.5)\n                .tags(""endpoint"", ""localhost:9000"")\n                .register(registry);\n        for (int i = 0; i < 3; i++) {\n            timer.record(() -> {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException ie) {\n\n                }\n            });\n        }\n        assertTrue(sink.substringIsPresent(""timer_percentile,endpoint=localhost:9000,phi=0.99,metric_type=gauge""));\n        assertTrue(sink.substringIsPresent(""timer_percentile,endpoint=localhost:9000,phi=0.95,metric_type=gauge""));\n        assertTrue(sink.substringIsPresent(""timer_percentile,endpoint=localhost:9000,phi=0.5,metric_type=gauge""));\n    }\n']",Percentiles;sleep;Percentile;registry;register;timer;Histogram;percentile;timer;Logging,8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.546585164964199e-10,5,5,"[-5.841718673706055, -5.673486232757568, -6.272523403167725, -5.313669681549072, -5.494053840637207, -0.017412882298231125]",0.9827378392219543
3,"['    @Test\n    public void testSummaryPercentiles() {\n        AggregateSink sink = new AggregateSink();\n\n        LoggingMeterRegistryWithHistogramSupport registry = getInstance(sink);\n\n        DistributionSummary summary = DistributionSummary.builder(""summary"")\n                .publishPercentileHistogram()\n                .publishPercentiles(0.99, 0.95, 0.5)\n                .tags(""endpoint"", ""localhost:9000"")\n                .register(registry);\n\n        for (int i = 0; i < 3; i++) {\n            summary.record(100);\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException ie) {\n\n            }\n        }\n        assertTrue(sink.substringIsPresent(""summary_percentile,endpoint=localhost:9000,phi=0.99,metric_type=gauge value=100""));\n        assertTrue(sink.substringIsPresent(""summary_percentile,endpoint=localhost:9000,phi=0.95,metric_type=gauge value=100""));\n        assertTrue(sink.substringIsPresent(""summary_percentile,endpoint=localhost:9000,phi=0.5,metric_type=gauge value=100""));\n    }\n']",register;Summary;Histogram;Aggregate;Percentiles;percentile;localhost;Logging;summary;Present,1.3969838619232178e-09;7.566995918750763e-10;3.4924596548080444e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.964508555829525e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.849390029907227, -5.68209981918335, -6.283319473266602, -5.320179462432861, -5.497170925140381, -0.017294082790613174]",0.9828544855117798
3,['    @Test\n    public void testHandleLeadershipLoss() {\n        final LogReplicationLeadershipLossResponseMsg leadershipLoss =  LogReplicationLeadershipLossResponseMsg\n                .newBuilder().build();\n        final ResponseMsg response = ResponseMsg.newBuilder().setPayload(\n                CorfuMessage.ResponsePayloadMsg.newBuilder()\n                        .setLrLeadershipLoss(leadershipLoss).build()).build();\n        lrClient.receive(response);\n\n        ArgumentCaptor<LogReplicationRuntimeEvent> argument = ArgumentCaptor.forClass(LogReplicationRuntimeEvent.class);\n        verify(lrFsm).input(argument.capture());\n        Assertions.assertThat(argument.getValue().getType()).isEqualTo(LogReplicationRuntimeEventType.REMOTE_LEADER_LOSS);\n    }\n'],leadership;Leadership;leadership;Client;Corfu;final;Msg;Event;Replication;lr,5.529727786779404e-10;4.94765117764473e-10;4.94765117764473e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.86258602142334, -5.707365989685059, -6.320918083190918, -5.386166095733643, -5.500096321105957, -0.016769278794527054]",0.9833705425262451
3,"['    @Test\n    public void testHandleLeadershipResponse() {\n        final LogReplicationLeadershipResponseMsg leadershipResponse = LogReplicationLeadershipResponseMsg\n                .newBuilder().build();\n        final ResponseMsg response = ResponseMsg.newBuilder().setPayload(\n                CorfuMessage.ResponsePayloadMsg.newBuilder()\n                        .setLrLeadershipResponse(leadershipResponse).build()).build();\n\n        ArgumentCaptor<PayloadCase> argument = ArgumentCaptor.forClass(PayloadCase.class);\n\n        lrClient.receive(response);\n        verify(handlerMap, atLeast(1)).get(argument.capture());\n        Assertions.assertThat(argument.getValue()).isEqualTo(PayloadCase.LR_LEADERSHIP_RESPONSE);\n    }\n']",receive;leadership;Corfu;Response;Payload;final;That;Leadership;leadership;Message,6.111804395914078e-10;4.3655745685100555e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.860592365264893, -5.719071865081787, -6.327764987945557, -5.388249397277832, -5.505138874053955, -0.01669260859489441]",0.9834458231925964
3,"['    @Test\n    public void testHandleEntryAck() {\n        final LogReplicationEntryMsg entry =  LogReplicationEntryMsg\n                .newBuilder().build();\n        final ResponseMsg response = ResponseMsg.newBuilder().setPayload(\n                CorfuMessage.ResponsePayloadMsg.newBuilder()\n                        .setLrEntryAck(entry).build()).build();\n\n        ArgumentCaptor<PayloadCase> argument = ArgumentCaptor.forClass(PayloadCase.class);\n\n        lrClient.receive(response);\n        verify(handlerMap, atLeast(1)).get(argument.capture());\n        Assertions.assertThat(argument.getValue()).isEqualTo(PayloadCase.LR_ENTRY_ACK);\n    }\n']",Payload;entry;final;Corfu;ENTRY;handler;Payload;Msg;Captor;Msg,8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.729372449219227e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.346940502524376e-10;3.128661774098873e-10;2.473825588822365e-10,5,5,"[-5.862128257751465, -5.7247724533081055, -6.32327938079834, -5.37888765335083, -5.5063557624816895, -0.01671617291867733]",0.9834228754043579
3,"['    @Test\n    public void testHandleMetadataResponse() {\n        final LogReplicationMetadataResponseMsg entry =  LogReplicationMetadataResponseMsg\n                .newBuilder().build();\n        final ResponseMsg response = ResponseMsg.newBuilder().setPayload(\n                CorfuMessage.ResponsePayloadMsg.newBuilder()\n                        .setLrMetadataResponse(entry).build()).build();\n\n        ArgumentCaptor<PayloadCase> argument = ArgumentCaptor.forClass(PayloadCase.class);\n\n        lrClient.receive(response);\n        verify(handlerMap, atLeast(1)).get(argument.capture());\n        Assertions.assertThat(argument.getValue()).isEqualTo(PayloadCase.LR_METADATA_RESPONSE);\n    }\n']",Payload;Response;RES;Log;ONSE;Argument;Message;Map;Metadata;Least,5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.864058494567871, -5.731159210205078, -6.3233842849731445, -5.378442287445068, -5.499725818634033, -0.016718752682209015]",0.9834202527999878
3,"['    @Test\n    public void testHandshakeSucceed() {\n        // Get a HandshakeRequestMsg with specified server node id.\n        RequestMsg request = getRequestMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getHandshakeRequestMsg(DEFAULT_UUID, SERVER_NODEID)\n        );\n\n        embeddedChannel.writeInbound(request);\n        Object out = embeddedChannel.readOutbound();\n\n        // Verify that the handshake is complete and HandshakeResponse is sent back.\n        assertTrue(out instanceof ResponseMsg);\n        assertEquals(SERVER_NODEID, getUUID(((ResponseMsg) out).getPayload().getHandshakeResponse()\n                .getServerId()));\n    }\n']",ucceed;back;Handshake;node;Get;UID;id;Handshake;CHECK;Outbound,2.7939677238464355e-09;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10,5,5,"[-5.892845630645752, -5.738358497619629, -6.374363899230957, -5.4373979568481445, -5.543224334716797, -0.01607716642320156]",0.984051525592804
3,"['    @Test\n    public void testVersionMismatchHandshakeSucceed() {\n        // Get a HandshakeRequestMsg whose corfu_source_code_version set in the header is different\n        // from that at server side.\n        RequestMsg request = getRequestMsg(\n            HeaderMsg.newBuilder()\n                .setVersion(\n                     ProtocolVersionMsg.newBuilder()\n                    .setCorfuSourceCodeVersion(FAKE_CLIENT_VERSION)\n                    .setCapabilityVector(CompatibilityVectorUtils.getCompatibilityVectors())\n                    .build())\n                .setRequestId(requestCounter.incrementAndGet())\n                .setPriority(PriorityLevel.NORMAL)\n                .setEpoch(0L)\n                .setClusterId(getUuidMsg(DEFAULT_UUID))\n                .setClientId(getUuidMsg(DEFAULT_UUID))\n                .setIgnoreClusterId(false)\n                .setIgnoreEpoch(true)\n                .build(),\n            getHandshakeRequestMsg(DEFAULT_UUID, SERVER_NODEID)\n        );\n\n        embeddedChannel.writeInbound(request);\n        Object out = embeddedChannel.readOutbound();\n\n        // Verify that the handshake could still complete even if the versions of client and server\n        // are different.\n        assertTrue(out instanceof ResponseMsg);\n        assertEquals(SERVER_NODEID, getUUID(((ResponseMsg) out).getPayload().getHandshakeResponse()\n                .getServerId()));\n    }\n']",from;different;Epoch;whose;request;get;Protocol;Get;Version;code,7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.855140209197998, -5.649128437042236, -6.282337665557861, -5.338888645172119, -5.519885540008545, -0.017209485173225403]",0.982937753200531
3,"['    @Test\n    public void testRequestDroppedBeforeHandshake() {\n        // Get a ping RequestMsg\n        RequestMsg request = getRequestMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getPingRequestMsg()\n        );\n\n        embeddedChannel.writeInbound(request);\n\n        // Verify that the request was correctly dropped and there is no inbound nor outbound messages.\n        assertNull(embeddedChannel.readInbound());\n        assertNull(embeddedChannel.readOutbound());\n    }\n']",Dropped;there;Inbound;dropped;and;request;Request;Request;Get;Epoch,1.5133991837501526e-09;7.275957614183426e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.914538383483887, -5.758579254150391, -6.426616191864014, -5.499048233032227, -5.554790496826172, -0.015553365461528301]",0.9845671057701111
3,"['    @Test\n    public void testRequestPassedAfterHandshake() {\n        // Get a HandshakeRequestMsg with specified server node id.\n        RequestMsg handshakeRequest = getRequestMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getHandshakeRequestMsg(DEFAULT_UUID, SERVER_NODEID)\n        );\n        // Get a ping RequestMsg\n        RequestMsg pingRequest = getRequestMsg(\n                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),\n                getPingRequestMsg()\n        );\n\n        embeddedChannel.writeInbound(handshakeRequest);\n        embeddedChannel.writeInbound(pingRequest);\n\n        Object in = embeddedChannel.readInbound();\n        Object out = embeddedChannel.readOutbound();\n\n        // Verify that the ping request is passed to next handler.\n        assertEquals(in, pingRequest);\n        // Verify that the handshake is complete and HandshakeResponse is sent back.\n        assertTrue(out instanceof ResponseMsg);\n        assertEquals(SERVER_NODEID, getUUID(((ResponseMsg) out).getPayload().getHandshakeResponse()\n                .getServerId()));\n    }\n']",that;ping;Passed;UID;SERVER;SERVER;node;ping;handshake;passed,1.57160684466362e-09;1.5133991837501526e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.878574848175049, -5.715863227844238, -6.361131191253662, -5.395989894866943, -5.573307037353516, -0.016284076496958733]",0.9838479161262512
3,"['    @Test\n    public void testQueryWorkflow() {\n        // First perform a QUERY request for an inactive workflow.\n        RequestMsg request = getRequestMsg(getBasicHeader(), getQueryWorkflowRequestMsg(WORKFLOW_ID_2));\n        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n        orchestrator.handle(request, mockChannelHandlerContext, mockServerRouter);\n\n        verify(mockServerRouter).sendResponse(responseCaptor.capture(), eq(mockChannelHandlerContext));\n        ResponseMsg response = responseCaptor.getValue();\n\n        // Assert that the payload has an ORCHESTRATOR_RESPONSE, that the base\n        // header fields have remained the same, and that the queried workflow\n        // was inactive.\n        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n        assertTrue(response.getPayload().hasOrchestratorResponse());\n        assertTrue(response.getPayload().getOrchestratorResponse().hasQueryResult());\n        assertFalse(response.getPayload().getOrchestratorResponse().getQueryResult().getActive());\n\n        // Now perform a QUERY request for an active workflow.\n        request = getRequestMsg(getBasicHeader(), getQueryWorkflowRequestMsg(WORKFLOW_ID_1));\n        orchestrator.handle(request, mockChannelHandlerContext, mockServerRouter);\n\n        verify(mockServerRouter, times(2))\n                .sendResponse(responseCaptor.capture(), eq(mockChannelHandlerContext));\n        response = responseCaptor.getValue();\n\n        // Assert that the payload has an ORCHESTRATOR_RESPONSE, that the base\n        // header fields have remained the same, and that the queried workflow\n        // was active.\n        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n        assertTrue(response.getPayload().hasOrchestratorResponse());\n        assertTrue(response.getPayload().getOrchestratorResponse().hasQueryResult());\n        assertTrue(response.getPayload().getOrchestratorResponse().getQueryResult().getActive());\n    }\n']",orchestrator;the;workflow;an;Query;inactive;QUERY;active;the;fields,1.3387762010097504e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.41970007866621e-10,5,5,"[-5.881265163421631, -5.721767902374268, -6.417145252227783, -5.4665045738220215, -5.599033832550049, -0.015749353915452957]",0.9843741059303284
3,"['    @Test\n    public void testAddNodeRequestWithExisting() {\n        sendAndValidateWorkflowDispatch(getAddNodeRequestMsg(ENDPOINT_1), WORKFLOW_ID_1);\n\n        // Verify that no new workflow is run.\n        verify(orchestrator, never()).run(any(IWorkflow.class), anyInt());\n    }\n']",Dispatch;Existing;WORKFLOW;workflow;Request;Int;class;Add;never;any,3.6088749766349792e-09;2.6775524020195007e-09;2.3283064365386963e-09;2.2118911147117615e-09;1.3969838619232178e-09;1.3096723705530167e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.731149137020111e-10;3.4924596548080444e-10,5,5,"[-5.965775012969971, -5.872032642364502, -6.514614105224609, -5.616117477416992, -5.533085823059082, -0.01456192322075367]",0.9855437278747559
3,"['    @Test\n    public void testAddNodeRequestWithoutExisting() {\n        // We expect a new workflow to be created and prepare the required mocked behaviour.\n        ArgumentCaptor<AddNodeRequest> requestArgumentCaptor = ArgumentCaptor.forClass(AddNodeRequest.class);\n        AddNodeWorkflow mockWorkflow = mock(AddNodeWorkflow.class);\n        doReturn(WORKFLOW_ID_2).when(mockWorkflow).getId();\n        doReturn(mockWorkflow).when(workflowFactory).getAddNode(any(AddNodeRequest.class));\n\n        sendAndValidateWorkflowDispatch(getAddNodeRequestMsg(ENDPOINT_2), WORKFLOW_ID_2);\n\n        // Verify that a single AddNodeWorkflow was built for the given endpoint, and\n        // that the corresponding workflowId was added to the activeWorkflows map.\n        verify(workflowFactory).getAddNode(requestArgumentCaptor.capture());\n        assertEquals(ENDPOINT_2, requestArgumentCaptor.getValue().getEndpoint());\n        assertTrue(orchestrator.activeWorkflows.containsKey(WORKFLOW_ID_2));\n\n        // Verify that run() was invoked with the newly created workflow.\n        verify(orchestrator).run(eq(mockWorkflow), anyInt());\n    }\n']",the;and;was;Argument;Msg;mocked;workflow;Request;ENDP;INT,8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.880711555480957, -5.730594635009766, -6.418982982635498, -5.470280647277832, -5.585977077484131, -0.015751700848340988]",0.9843716025352478
3,"['    @Test\n    public void testRemoveNodeRequestWithExisting() {\n        sendAndValidateWorkflowDispatch(getRemoveNodeRequestMsg(ENDPOINT_1), WORKFLOW_ID_1);\n\n        // Verify that no new workflow is run.\n        verify(orchestrator, never()).run(any(IWorkflow.class), anyInt());\n    }\n']",Workflow;orchestrator;Msg;Node;new;Workflow;Dispatch;Verify;Int;Node,5.122274160385132e-09;1.877197064459324e-09;1.862645149230957e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.967743396759033, -5.8738908767700195, -6.514669418334961, -5.616574287414551, -5.530976295471191, -0.014558046124875546]",0.9855473041534424
3,"['    @Test\n    public void testAuthenticatedWebsocket() throws Exception {\n        ProgramaticClientEndpoint endpoint = new ProgramaticClientEndpoint();\n        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().configurator(new ClientConfigurator(){\n            @Override\n            public void beforeRequest(Map<String, List<String>> headers) {\n                headers.put(AUTHORIZATION.toString(), Collections.singletonList(BASIC + "" "" + FlexBase64.encodeString(""user1:password1"".getBytes(), false)));\n            }\n']",configurator;Endpoint;headers;Request;List;Collections;Client;Client;Map;Endpoint,8.731149137020111e-10;4.656612873077393e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.2369127944111824e-10,5,5,"[-5.865684509277344, -5.725666522979736, -6.311587333679199, -5.379312515258789, -5.468265056610107, -0.016882630065083504]",0.9832590818405151
3,"['    @Test\n    public void testWrappedRequest() throws Exception {\n        ProgramaticClientEndpoint endpoint = new ProgramaticClientEndpoint();\n        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().build();\n        ContainerProvider.getWebSocketContainer().connectToServer(endpoint, clientEndpointConfig, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/servletContext/wrapper""));\n        Assert.assertEquals(""wrapped"", endpoint.getResponses().poll(15, TimeUnit.SECONDS));\n        endpoint.session.close();\n        endpoint.closeLatch.await(10, TimeUnit.SECONDS);\n    }\n']",poll;ws;connect;Endpoint;atch;Client;Unit;Config;new;Config,6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.860961437225342, -5.743246555328369, -6.361067295074463, -5.4248857498168945, -5.465488910675049, -0.016552502289414406]",0.9835837483406067
3,"['    @Test\n    public void testConnectionWaitsForMessageEnd() throws Exception {\n        final CountDownLatch done = new CountDownLatch(1);\n        final AtomicReference<String> message = new AtomicReference<>();\n        WebSocketChannel channel = WebSocketClient.connectionBuilder(DefaultServer.getWorker(), DefaultServer.getBufferPool(), new URI(DefaultServer.getDefaultServerURL() + ""/""))\n                .connect().get();\n        channel.getReceiveSetter().set(new AbstractReceiveListener() {\n            @Override\n            protected void onFullTextMessage(WebSocketChannel channel, BufferedTextMessage msg) throws IOException {\n                message.set(msg.getData());\n                done.countDown();\n            }\n\n            @Override\n            protected void onError(WebSocketChannel channel, Throwable error) {\n                error.printStackTrace();\n                message.set(""error"");\n                done.countDown();\n            }\n\n            @Override\n            protected void onFullCloseMessage(WebSocketChannel channel, BufferedBinaryMessage message) throws IOException {\n                message.getData().free();\n                done.countDown();\n            }\n        });\n        channel.resumeReceives();\n        Assert.assertTrue(channel.isOpen());\n        WebSockets.sendText(""Hello World"", channel, null);\n        Thread.sleep(500);\n        serverContainer.pause(null);\n        try {\n            Assert.assertTrue(done.await(10, TimeUnit.SECONDS));\n            Assert.assertEquals(""Hello World"", message.get());\n        } finally {\n            serverContainer.resume();\n        }\n    }\n']",Message;Buffered;Message;Socket;Atomic;For;count;atch;Exception;Web,5.238689482212067e-10;3.055902197957039e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.861204147338867, -5.685243606567383, -6.323103904724121, -5.355429649353027, -5.532378196716309, -0.01685824990272522]",0.9832830429077148
3,"['    @Test\n    public void testConnectionClosedOnPause() throws Exception {\n        final CountDownLatch done = new CountDownLatch(1);\n        final AtomicReference<String> message = new AtomicReference<>();\n        WebSocketChannel channel = WebSocketClient.connectionBuilder(DefaultServer.getWorker(), DefaultServer.getBufferPool(), new URI(DefaultServer.getDefaultServerURL() + ""/""))\n                .connect().get();\n        channel.getReceiveSetter().set(new ChannelListener<WebSocketChannel>() {\n            @Override\n            public void handleEvent(WebSocketChannel channel) {\n                try {\n                    StreamSourceFrameChannel res = channel.receive();\n                    if(res == null) {\n                        return;\n                    }\n                    if (res.getType() == WebSocketFrameType.CLOSE) {\n                        message.set(""closed"");\n                        done.countDown();\n                    }\n                    Channels.drain(res, Long.MAX_VALUE);\n                } catch (IOException e) {\n                    if(message.get() == null) {\n                        e.printStackTrace();\n                        message.set(""error"");\n                        done.countDown();\n                    }\n                }\n            }\n']",receive;On;final;Web;catch;MAX;final;Channel;return;Builder,4.511093720793724e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.382431946694851e-10;1.3096723705530167e-10;1.3096723705530167e-10,5,5,"[-5.848941326141357, -5.666514873504639, -6.283778190612793, -5.315456390380859, -5.500094413757324, -0.017360396683216095]",0.9827894568443298
3,"['    @Test\n    public void testRejectWhenSuspended() throws Exception {\n        try {\n            serverContainer.pause(null);\n            WebSocketChannel channel = WebSocketClient.connectionBuilder(DefaultServer.getWorker(), DefaultServer.getBufferPool(), new URI(DefaultServer.getDefaultServerURL() + ""/""))\n                    .connect().get();\n            IoUtils.safeClose(channel);\n            Assert.fail();\n        } catch (UpgradeFailedException e) {\n            //expected\n        } finally {\n            serverContainer.resume();\n        }\n\n    }\n']",When;expected;Exception;safe;Io;finally;Web;Server;Default;Assert,9.313225746154785e-10;6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.3096723705530167e-10,5,5,"[-5.852242469787598, -5.687993049621582, -6.28666877746582, -5.360693454742432, -5.474434852600098, -0.017157459631562233]",0.9829890131950378
3,"['    @Test\n    public void testLongTextMessage() throws Exception {\n\n        final String SEC_WEBSOCKET_EXTENSIONS = ""permessage-deflate; client_no_context_takeover; client_max_window_bits"";\n        List<WebSocketExtension> extensionsList = WebSocketExtension.parse(SEC_WEBSOCKET_EXTENSIONS);\n\n        final WebSocketClientNegotiation negotiation = new WebSocketClientNegotiation(null, extensionsList);\n\n        Set<ExtensionHandshake> extensionHandshakes = new HashSet<>();\n        extensionHandshakes.add(new PerMessageDeflateHandshake(true));\n\n        final WebSocketChannel clientChannel = WebSocketClient.connect(DefaultServer.getWorker(), null, DefaultServer.getBufferPool(), OptionMap.EMPTY, new URI(DefaultServer.getDefaultServerURL()), WebSocketVersion.V13, negotiation, extensionHandshakes).get();\n\n        final LinkedBlockingDeque<String> resultQueue  = new LinkedBlockingDeque<>();\n\n        clientChannel.getReceiveSetter().set(new AbstractReceiveListener() {\n            @Override\n            protected void onFullTextMessage(WebSocketChannel channel, BufferedTextMessage message) throws IOException {\n                String data = message.getData();\n                // WebSocketLogger.ROOT_LOGGER.info(""onFullTextMessage() - Client - Received: "" + data.getBytes().length + "" bytes."");\n                resultQueue.addLast(data);\n            }\n\n            @Override\n            protected void onFullCloseMessage(WebSocketChannel channel, BufferedBinaryMessage message) throws IOException {\n                message.getData().close();\n                WebSocketLogger.ROOT_LOGGER.info(""onFullCloseMessage"");\n            }\n\n            @Override\n            protected void onError(WebSocketChannel channel, Throwable error) {\n                WebSocketLogger.ROOT_LOGGER.info(""onError"");\n                super.onError(channel, error);\n                error.printStackTrace();\n                resultQueue.add(""FAILED "" + error);\n            }\n\n        });\n        clientChannel.resumeReceives();\n\n        int LONG_MSG = 125 * 1024;\n        StringBuilder longMsg = new StringBuilder(LONG_MSG);\n\n        for (int i = 0; i < LONG_MSG; i++) {\n            longMsg.append(Integer.toString(i).charAt(0));\n        }\n\n        String message = longMsg.toString();\n        for(int j = 0; j < MSG_COUNT; ++ j) {\n\n            WebSockets.sendTextBlocking(message, clientChannel);\n            String res = resultQueue.poll(10, TimeUnit.SECONDS);\n            Assert.assertEquals(message, res);\n        }\n\n        clientChannel.sendClose();\n\n    }\n']",window;Client;Text;Handshakes;Deflate;EXTENSIONS;LOGGER;Extension;negotiation;on,6.984919309616089e-10;6.257323548197746e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.87401008605957, -5.699309349060059, -6.381223201751709, -5.414699077606201, -5.5776896476745605, -0.016215696930885315]",0.9839150905609131
3,"['    @Test\n    public void testExtensionsHeaders() throws Exception {\n\n\n        final String SEC_WEBSOCKET_EXTENSIONS = ""permessage-deflate; client_no_context_takeover; client_max_window_bits"";\n        final String SEC_WEBSOCKET_EXTENSIONS_EXPECTED = ""[permessage-deflate; client_no_context_takeover]"";  // List format\n        List<WebSocketExtension> extensions = WebSocketExtension.parse(SEC_WEBSOCKET_EXTENSIONS);\n\n        final WebSocketClientNegotiation negotiation = new WebSocketClientNegotiation(null, extensions);\n\n        Set<ExtensionHandshake> extensionHandshakes = new HashSet<>();\n        extensionHandshakes.add(new PerMessageDeflateHandshake(true));\n\n        final WebSocketChannel clientChannel = WebSocketClient.connect(DefaultServer.getWorker(), null, DefaultServer.getBufferPool(), OptionMap.EMPTY, new URI(DefaultServer.getDefaultServerURL()), WebSocketVersion.V13, negotiation, extensionHandshakes).get();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<String> result = new AtomicReference<>();\n\n        clientChannel.getReceiveSetter().set(new AbstractReceiveListener() {\n            @Override\n            protected void onFullTextMessage(WebSocketChannel channel, BufferedTextMessage message) throws IOException {\n                String data = message.getData();\n                WebSocketLogger.ROOT_LOGGER.info(""onFullTextMessage - Client - Received: "" + data.getBytes().length + "" bytes . Data: "" + data);\n                result.set(data);\n                latch.countDown();\n            }\n\n            @Override\n            protected void onFullCloseMessage(WebSocketChannel channel, BufferedBinaryMessage message) throws IOException {\n                message.getData().close();\n                WebSocketLogger.ROOT_LOGGER.info(""onFullCloseMessage"");\n            }\n\n            @Override\n            protected void onError(WebSocketChannel channel, Throwable error) {\n                WebSocketLogger.ROOT_LOGGER.info(""onError"");\n                super.onError(channel, error);\n                error.printStackTrace();\n                latch.countDown();\n            }\n\n        });\n        clientChannel.resumeReceives();\n\n        StreamSinkFrameChannel sendChannel = clientChannel.send(WebSocketFrameType.TEXT);\n        new StringWriteChannelListener(""Hello, World!"").setup(sendChannel);\n\n        latch.await(10, TimeUnit.SECONDS);\n        Assert.assertEquals(""Hello, World!"", result.get());\n        clientChannel.sendClose();\n\n        Assert.assertEquals(SEC_WEBSOCKET_EXTENSIONS_EXPECTED, debug.getResponseExtensions().toString());\n    }\n']",EXPECTED;Receive;Web;deflate;permessage;channel;SEC;new;takeover;WEBSOCKET,7.130438461899757e-10;4.656612873077393e-10;3.92901711165905e-10;3.637978807091713e-10;3.637978807091713e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10;2.764863893389702e-10;2.473825588822365e-10,5,5,"[-5.869544506072998, -5.692492961883545, -6.398591041564941, -5.439595699310303, -5.596776008605957, -0.016038335859775543]",0.984089732170105
3,"['    @Test\n    public void testStringOnMessage() throws Exception {\n        final byte[] payload = ""hello"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Stuart""));\n        client.connect();\n        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello Stuart"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",Socket;Frame;Socket;hello;latch;Web;final;Text;new;hello,5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.837623469531536e-10;2.764863893389702e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.895146369934082, -5.766107559204102, -6.40507698059082, -5.474501132965088, -5.51729154586792, -0.015872208401560783]",0.9842531085014343
3,"['    @Test\n    public void testRedirectHandling() throws Exception {\n        AnnotatedClientEndpoint.reset();\n        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/redirect""));\n\n        Assert.assertEquals(""hi Stuart (protocol=foo)"", AnnotatedClientEndpoint.message());\n\n        session.close();\n        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());\n    }\n']",deployment;URI;hi;foo;Server;An;Server;Endpoint;An;Endpoint,5.587935447692871e-09;4.6566128730773926e-09;4.190951585769653e-09;2.561137080192566e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.894349575042725, -5.80552339553833, -6.412086009979248, -5.48466157913208, -5.513282299041748, -0.01571309193968773]",0.9844096899032593
3,"['    @Test\n    public void testWebSocketInRootContext() throws Exception {\n        final byte[] payload = ""hello"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws""));\n        client.connect();\n        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",ws;Result;Socket;Socket;Web;Client;Socket;get;Exception;Socket,2.444721758365631e-09;1.280568540096283e-09;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.8754191398620605, -5.747584819793701, -6.364498615264893, -5.441237449645996, -5.492700099945068, -0.016302723437547684]",0.9838294386863708
3,"['    @Test\n    public void testAnnotatedClientEndpoint() throws Exception {\n        AnnotatedClientEndpoint.reset();\n        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));\n\n        Assert.assertEquals(""hi Bob (protocol=foo)"", AnnotatedClientEndpoint.message());\n\n        session.close();\n        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());\n    }\n']",deployment;hi;URI;ws;Endpoint;An;ated;foo;Assert;session,1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.001776687800884e-10;3.4924596548080444e-10,5,5,"[-5.900356292724609, -5.799315929412842, -6.4253716468811035, -5.4965033531188965, -5.517955303192139, -0.015624606050550938]",0.9844968318939209
3,"['    @Test\n    public void testIdleTimeout() throws Exception {\n        AnnotatedClientEndpoint.reset();\n        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));\n\n        Assert.assertEquals(""hi Bob (protocol=foo)"", AnnotatedClientEndpoint.message());\n\n        session.close();\n        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());\n    }\n']",chat;deployment;le;Endpoint;URI;Bob;session;CLOSED;protocol;Server,4.190951585769653e-09;1.862645149230957e-09;1.280568540096283e-09;1.1932570487260818e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.184563972055912e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.896747589111328, -5.788119316101074, -6.4284467697143555, -5.518348693847656, -5.5164642333984375, -0.015580359846353531]",0.9845404028892517
3,"['    @Test\n    public void testCloseReason() throws Exception {\n        MessageEndpoint.reset();\n\n        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));\n\n        Assert.assertEquals(""hi Bob (protocol=foo)"", AnnotatedClientEndpoint.message());\n\n        session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, ""Foo!""));\n        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());\n        CloseReason cr = MessageEndpoint.getReason();\n        Assert.assertEquals(CloseReason.CloseCodes.VIOLATED_POLICY.getCode(), cr.getCloseCode().getCode());\n        Assert.assertEquals(""Foo!"", cr.getReasonPhrase());\n\n    }\n']",Close;Reason;deployment;Server;Host;session;Client;Address;Close;Server,9.604264050722122e-10;9.313225746154785e-10;8.149072527885437e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.856210231781006, -5.738372325897217, -6.368752479553223, -5.437325954437256, -5.5293707847595215, -0.01624736562371254]",0.9838840365409851
3,"['    @Test\n    public void testAnnotatedClientEndpointWithConfigurator() throws Exception {\n\n\n        Session session = deployment.connectToServer(AnnotatedClientEndpointWithConfigurator.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));\n\n        Assert.assertEquals(""hi Bob (protocol=configured-proto)"", AnnotatedClientEndpointWithConfigurator.message());\n        Assert.assertEquals(""foo, bar, configured-proto"", ClientConfigurator.sentSubProtocol);\n        Assert.assertEquals(""configured-proto"", ClientConfigurator.receivedSubProtocol());\n\n        session.close();\n        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpointWithConfigurator.message());\n    }\n']",deployment;URI;proto;configured;Server;proto;An;session;received;Configurator,4.6566128730773926e-09;1.862645149230957e-09;1.2223608791828156e-09;9.022187441587448e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;4.3655745685100555e-10,5,5,"[-5.891312599182129, -5.789576053619385, -6.419349670410156, -5.4693121910095215, -5.551392555236816, -0.01567061059176922]",0.9844515323638916
3,"['    @Test\n    public void testErrorHandling() throws Exception {\n        //make a sub class\n        AnnotatedClientEndpoint c = new AnnotatedClientEndpoint() {\n\n        };\n\n        Session session = deployment.connectToServer(c, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/error""));\n        Assert.assertEquals(""hi"", ErrorEndpoint.getMessage());\n        session.getAsyncRemote().sendText(""app-error"");\n        Assert.assertEquals(""app-error"", ErrorEndpoint.getMessage());\n        Assert.assertEquals(""ERROR: java.lang.RuntimeException"", ErrorEndpoint.getMessage());\n        Assert.assertTrue(c.isOpen());\n\n        session.getBasicRemote().sendText(""io-error"");\n        Assert.assertEquals(""io-error"", ErrorEndpoint.getMessage());\n        Assert.assertEquals(""ERROR: java.io.IOException"", ErrorEndpoint.getMessage());\n        Assert.assertTrue(c.isOpen());\n        ((UndertowSession)session).forceClose();\n        Assert.assertEquals(""CLOSED"", ErrorEndpoint.getMessage());\n\n    }\n']",Handling;ws;Exception;Remote;Equals;error;Address;Host;send;default,3.725290298461914e-09;1.862645149230957e-09;9.313225746154785e-10;4.94765117764473e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.844820022583008, -5.717846393585205, -6.322761535644531, -5.370136737823486, -5.516387462615967, -0.016790496185421944]",0.9833495616912842
3,"['    @Test\n    public void testClientSideIdleTimeout() throws Exception {\n        //make a sub class\n        CountDownLatch latch = new CountDownLatch(1);\n        CloseCountdownEndpoint c = new CloseCountdownEndpoint(latch);\n\n        Session session = deployment.connectToServer(c, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));\n        session.setMaxIdleTimeout(100);\n        Assert.assertTrue(latch.await(2000, TimeUnit.MILLISECONDS));\n        Assert.assertFalse(session.isOpen());\n\n    }\n']",deployment;ws;Port;Session;Server;Time;connect;Side;session;Close,2.7939677238464355e-09;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.856226921081543, -5.760913372039795, -6.382386207580566, -5.465715408325195, -5.486213684082031, -0.01620478928089142]",0.9839258193969727
3,"['    @Test\n    public void testGenericMessageHandling() throws Exception {\n        //make a sub class\n        AnnotatedGenericClientEndpoint c = new AnnotatedGenericClientEndpoint() {\n\n        };\n\n        Session session = deployment.connectToServer(c, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/error""));\n        Assert.assertEquals(""hi"", ErrorEndpoint.getMessage());\n        session.getAsyncRemote().sendText(""app-error"");\n        Assert.assertEquals(""app-error"", ErrorEndpoint.getMessage());\n        Assert.assertEquals(""ERROR: java.lang.RuntimeException"", ErrorEndpoint.getMessage());\n        Assert.assertTrue(c.isOpen());\n\n        session.getBasicRemote().sendText(""io-error"");\n        Assert.assertEquals(""io-error"", ErrorEndpoint.getMessage());\n        Assert.assertEquals(""ERROR: java.io.IOException"", ErrorEndpoint.getMessage());\n        Assert.assertTrue(c.isOpen());\n        ((UndertowSession)session).forceClose();\n        Assert.assertEquals(""CLOSED"", ErrorEndpoint.getMessage());\n\n    }\n']",Handling;deployment;hi;Async;Client;Message;Remote;ws;Host;session,1.57160684466362e-09;1.3969838619232178e-09;1.1641532182693481e-09;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.853878498077393, -5.73239803314209, -6.339354991912842, -5.379123687744141, -5.533567905426025, -0.016573842614889145]",0.9835627675056458
3,"['    @Test\n    public void testImplicitIntegerConversion() throws Exception {\n        final byte[] payload = ""12"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/increment/2""));\n        client.connect();\n        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""14"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",increment;Unpooled;Conversion;Frame;URI;Web;Web;Socket;Socket;latch,1.280568540096283e-09;6.912159733474255e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.2928149923682213e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.895476341247559, -5.755459308624268, -6.387172222137451, -5.4619646072387695, -5.522583484649658, -0.015967946499586105]",0.984158992767334
3,"['    @Test\n    public void testEncodingAndDecodingText() throws Exception {\n        final byte[] payload = ""hello"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/encoding/Stuart""));\n        client.connect();\n        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello Stuart"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",Result;destroy;Future;Future;Socket;class;payload;Address;Default;Buffer,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;4.3655745685100555e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.909470558166504, -5.77587890625, -6.405294895172119, -5.462912559509277, -5.513300895690918, -0.015867045149207115]",0.9842581748962402
3,"['    @Test\n    public void testEncodingAndDecodingBinary() throws Exception {\n        final byte[] payload = ""hello"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/encoding/Stuart""));\n        client.connect();\n        client.send(new BinaryWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello Stuart"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",Decoding;inary;ws;Web;latch;Future;send;Socket;Web;ws,9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.020410753786564e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.909984588623047, -5.781610488891602, -6.416411399841309, -5.47374153137207, -5.527405738830566, -0.015725180506706238]",0.9843977093696594
3,"['    @Test\n    public void testEncodingWithGenericSuperclass() throws Exception {\n        final byte[] payload = ""hello"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/encodingGenerics/Stuart""));\n        client.connect();\n        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello Stuart"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",Generics;Web;Client;Socket;encoding;latch;Frame;final;latch;Client,1.280568540096283e-09;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.889046669006348, -5.7660369873046875, -6.387478828430176, -5.452621936798096, -5.508962631225586, -0.016047604382038116]",0.9840803742408752
3,"['    @Test\n    public void testRequestUri() throws Exception {\n        final byte[] payload = ""hello"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/request?a=b""));\n        client.connect();\n        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""/ws/request?a=b"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",Future;Result;Buffer;Port;Version;URI;ws;Socket;Host;Client,1.280568540096283e-09;8.149072527885437e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.8854498863220215, -5.78251314163208, -6.3887410163879395, -5.441847324371338, -5.511044025421143, -0.016042325645685196]",0.9840856790542603
3,"['    @Test\n    public void testTimeoutCloseReason() throws Exception {\n        TimeoutEndpoint.reset();\n\n        Session session = deployment.connectToServer(DoNothingEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/timeout""));\n\n        Assert.assertEquals(CloseReason.CloseCodes.CLOSED_ABNORMALLY, TimeoutEndpoint.getReason().getCloseCode());\n    }\n']",URI;Timeout;Assert;Close;connect;Host;ABNOR;Reason;Server;Endpoint,2.153683453798294e-09;1.862645149230957e-09;1.5133991837501526e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.8853044509887695, -5.7751688957214355, -6.42621374130249, -5.548428058624268, -5.49207878112793, -0.015636693686246872]",0.9844849109649658
3,"['    @Test\n    public void testThreadSafeSend() throws Exception {\n        AnnotatedClientEndpoint.reset();\n        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/threads""));\n        Set<String> expected = ThreadSafetyEndpoint.expected();\n        long end = System.currentTimeMillis() + 10000;\n        while (!expected.isEmpty() && System.currentTimeMillis() < end) {\n            expected.remove(AnnotatedClientEndpoint.message());\n        }\n        session.close();\n        Assert.assertEquals(0, expected.size());\n    }\n']",connect;ated;message;Time;Client;Port;Endpoint;Safety;Server;session,6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.862421989440918, -5.7291741371154785, -6.339258193969727, -5.428530216217041, -5.50834846496582, -0.016436416655778885]",0.9836979508399963
3,"['    @Test\n    public void testMessagesReceivedInOrder() throws Exception {\n        stacks.clear();\n        EchoSocket.receivedEchos = new FutureResult<>();\n        final ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().build();\n        final CountDownLatch done = new CountDownLatch(1);\n        final AtomicReference<String> error = new AtomicReference<>();\n        ContainerProvider.getWebSocketContainer()\n                .connectToServer(new Endpoint() {\n                                     @Override\n                                     public void onOpen(final Session session, EndpointConfig endpointConfig) {\n\n                                         try {\n                                             RemoteEndpoint.Basic rem = session.getBasicRemote();\n                                             List<String> messages = new ArrayList<>();\n                                             for (int i = 0; i < MESSAGES; i++) {\n                                                 byte[] data = new byte[2048];\n                                                 (new Random()).nextBytes(data);\n                                                 String crc = md5(data);\n                                                 rem.sendBinary(ByteBuffer.wrap(data));\n                                                 messages.add(crc);\n                                             }\n\n                                             List<String> received = EchoSocket.receivedEchos.getIoFuture().get();\n                                             StringBuilder sb = new StringBuilder();\n                                             boolean fail = false;\n                                             for (int i = 0; i < messages.size(); i++) {\n                                                 if (received.size() <= i) {\n                                                     fail = true;\n                                                     sb.append(i + "": should be "" + messages.get(i) + "" but is empty."");\n                                                 } else {\n                                                     if (!messages.get(i).equals(received.get(i))) {\n                                                         fail = true;\n                                                         sb.append(i + "": should be "" + messages.get(i) + "" but is "" + received.get(i) + "" (but found at "" + received.indexOf(messages.get(i)) + "")."");\n                                                     }\n                                                 }\n                                             }\n                                             if(fail) {\n                                                 error.set(sb.toString());\n                                             }\n                                             done.countDown();\n\n                                         } catch (Throwable t) {\n                                             System.out.println(t);\n                                         }\n                                     }\n']",Echo;Remote;Atomic;Exception;Config;Container;Config;Count;final;session,2.9103830456733704e-10;2.4374458007514477e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.854282855987549, -5.673710823059082, -6.291693210601807, -5.317345142364502, -5.501768112182617, -0.017288224771618843]",0.9828603863716125
3,"['    @Test\n    public void testErrorHandling() throws Exception {\n\n\n        ServerWebSocketContainer builder = new ServerWebSocketContainer(TestClassIntrospector.INSTANCE, DefaultServer.getWorker(), DefaultServer.getBufferPool(), Collections.EMPTY_LIST, false, false);\n\n        builder.addEndpoint(ServerEndpointConfig.Builder.create(ProgramaticErrorEndpoint.class, ""/"").configurator(new InstanceConfigurator(new ProgramaticErrorEndpoint())).build());\n        deployServlet(builder);\n\n        AnnotatedClientEndpoint c = new AnnotatedClientEndpoint();\n\n        Session session = ContainerProvider.getWebSocketContainer().connectToServer(c, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/""));\n        Assert.assertEquals(""hi"", ProgramaticErrorEndpoint.getMessage());\n        session.getAsyncRemote().sendText(""app-error"");\n        Assert.assertEquals(""app-error"", ProgramaticErrorEndpoint.getMessage());\n        Assert.assertEquals(""ERROR: java.lang.RuntimeException"", ProgramaticErrorEndpoint.getMessage());\n        Assert.assertTrue(c.isOpen());\n\n        session.getBasicRemote().sendText(""io-error"");\n        Assert.assertEquals(""io-error"", ProgramaticErrorEndpoint.getMessage());\n        Assert.assertEquals(""ERROR: java.lang.RuntimeException"", ProgramaticErrorEndpoint.getMessage());\n        Assert.assertTrue(c.isOpen());\n        ((UndertowSession) session).forceClose();\n        Assert.assertEquals(""CLOSED"", ProgramaticErrorEndpoint.getMessage());\n\n    }\n']",Error;Container;builder;Config;Endpoint;Introspector;Endpoint;Endpoint;configurator;deploy,1.1641532182693481e-09;4.656612873077393e-10;4.0745362639427185e-10;3.346940502524376e-10;3.019522409886122e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.8384222984313965, -5.691298961639404, -6.312498569488525, -5.3616623878479, -5.509641170501709, -0.016986241564154625]",0.983157217502594
3,"['    @Test\n    public void testDynamicAnnotatedEndpoint() throws Exception {\n        final byte[] payload = ""hello"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/dynamicEchoEndpoint?annotated=true""));\n        client.connect();\n        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""opened:true /dynamicEchoEndpoint hello"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",ws;Socket;Web;Frame;Text;Port;Socket;Endpoint;Host;URI,5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.890908241271973, -5.772576332092285, -6.388106346130371, -5.450719833374023, -5.510785102844238, -0.01602156087756157]",0.9841062426567078
3,"['    @Test\n    public void testDynamicProgramaticEndpoint() throws Exception {\n        final byte[] payload = ""hello"".getBytes();\n        final FutureResult latch = new FutureResult();\n\n        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/dynamicEchoEndpoint""));\n        client.connect();\n        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""/dynamicEchoEndpoint hello"".getBytes(), latch));\n        latch.getIoFuture().get();\n        client.destroy();\n    }\n']",Future;Result;hello;ws;Client;Endpoint;ynamic;Checker;Host;ynamic,1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.890590667724609, -5.772981643676758, -6.382504463195801, -5.450315475463867, -5.500210285186768, -0.016076110303401947]",0.9840524196624756
3,"['    @Test\n    public void webSocketStringStressTestCase() throws Exception {\n        List<CountDownLatch> latches = new ArrayList<>();\n        for (int i = 0; i < NUM_THREADS; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            latches.add(latch);\n            final Session session = deployment.connectToServer(new Endpoint() {\n                @Override\n                public void onOpen(Session session, EndpointConfig config) {\n                }\n']",NUM;latches;Stress;deployment;web;Array;Exception;Endpoint;Count;atch,1.862645149230957e-09;1.3387762010097504e-09;1.1059455573558807e-09;9.313225746154785e-10;6.984919309616089e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.8907036781311035, -5.70440149307251, -6.3443121910095215, -5.420567989349365, -5.500715732574463, -0.016496922820806503]",0.9836385250091553
3,"['    @Test\n    public void websocketFragmentationStressTestCase() throws Exception {\n\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final CountDownLatch done = new CountDownLatch(1);\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 10000; ++i) {\n            sb.append(""message "");\n            sb.append(i);\n        }\n        String toSend = sb.toString();\n\n        final Session session = defaultContainer.connectToServer(new Endpoint() {\n            @Override\n            public void onOpen(Session session, EndpointConfig config) {\n                session.addMessageHandler(new MessageHandler.Partial<byte[]>() {\n                    @Override\n                    public void onMessage(byte[] bytes, boolean b) {\n                        try {\n                            out.write(bytes);\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                            done.countDown();\n                        }\n                        if (b) {\n                            done.countDown();\n                        }\n                    }\n']",Partial;Server;Handler;Send;message;Exception;append;Stream;Count;Endpoint,4.889443516731262e-09;5.238689482212067e-10;2.6193447411060333e-10;2.6193447411060333e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.382431946694851e-10,5,5,"[-5.845208644866943, -5.665934085845947, -6.276426792144775, -5.303757667541504, -5.496667385101318, -0.01746056042611599]",0.9826909899711609
3,"['    @Test\n    public void testExtractHandlerType() {\n\n        Map<Class<?>, Boolean>  types = ClassUtils.getHandlerTypes(FinalIm.class);\n        Assert.assertEquals(1, types.size());\n        Assert.assertTrue(types.containsKey(ByteBuffer.class));\n\n        types = ClassUtils.getHandlerTypes(ByteBufferFromSuperClassEncoder.class);\n        Assert.assertEquals(1, types.size());\n        Assert.assertTrue(types.containsKey(ByteBuffer.class));\n\n        types = ClassUtils.getHandlerTypes(MessageHandlerImpl.class);\n        Assert.assertEquals(1, types.size());\n        Assert.assertTrue(types.containsKey(ByteBuffer.class));\n        Assert.assertFalse(types.get(ByteBuffer.class));\n\n        types = ClassUtils.getHandlerTypes(AsyncMessageHandlerImpl.class);\n        Assert.assertEquals(1, types.size());\n        Assert.assertTrue(types.containsKey(ByteBuffer.class));\n        Assert.assertTrue(types.get(ByteBuffer.class));\n\n        types = ClassUtils.getHandlerTypes(ComplexMessageHandlerImpl.class);\n        Assert.assertEquals(2, types.size());\n        Assert.assertTrue(types.containsKey(ByteBuffer.class));\n        Assert.assertFalse(types.get(ByteBuffer.class));\n        Assert.assertTrue(types.containsKey(String.class));\n        Assert.assertTrue(types.get(String.class));\n        Assert.assertFalse(types.containsKey(byte[].class));\n\n    }\n']",Handler;Im;Byte;Encoder;Buffer;Class;Assert;Handler;Buffer;Boolean,5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;2.764863893389702e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.805751323699951, -5.649886131286621, -6.222513675689697, -5.2385334968566895, -5.459101676940918, -0.018243256956338882]",0.9819222688674927
3,"['    @Test\n    public void testExtractEncoderType() {\n        Class<?> clazz = ClassUtils.getEncoderType(BinaryEncoder.class);\n        Assert.assertEquals(String.class, clazz);\n\n        Class<?> clazz2 = ClassUtils.getEncoderType(TextEncoder.class);\n        Assert.assertEquals(String.class, clazz2);\n\n        Class<?> clazz3 = ClassUtils.getEncoderType(TextStreamEncoder.class);\n        Assert.assertEquals(String.class, clazz3);\n\n        Class<?> clazz4 = ClassUtils.getEncoderType(BinaryStreamEncoder.class);\n        Assert.assertEquals(String.class, clazz4);\n    }\n']",Encoder;clazz;Class;Utils;Class;clazz;Text;Encoder;Encoder;Stream,7.421476766467094e-10;4.874891601502895e-10;4.0745362639427185e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.834466934204102, -5.6882195472717285, -6.267804145812988, -5.31777811050415, -5.447598457336426, -0.01757078990340233]",0.9825828075408936
3,"['    @Test\n    public void testAnnotatedClientEndpoint() throws Exception {\n        AnnotatedClientReconnectEndpoint endpoint = new AnnotatedClientReconnectEndpoint();\n        Session session = deployment.connectToServer(endpoint, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/""));\n\n        Assert.assertEquals(""OPEN"", endpoint.message());\n        session.getBasicRemote().sendText(""hi"");\n        Assert.assertEquals(""MESSAGE-ECHO-hi"", endpoint.message());\n        session.getBasicRemote().sendText(""close"");\n        Assert.assertEquals(""CLOSE"", endpoint.message());\n        Assert.assertEquals(""OPEN"", endpoint.message());\n        session.getBasicRemote().sendText(""hi"");\n        Assert.assertEquals(""MESSAGE-ECHO-hi"", endpoint.message());\n        session.getBasicRemote().sendText(""close"");\n        Assert.assertEquals(""CLOSE"", endpoint.message());\n        Assert.assertEquals(""OPEN"", endpoint.message());\n        session.getBasicRemote().sendText(""hi"");\n        Assert.assertEquals(""MESSAGE-ECHO-hi"", endpoint.message());\n        session.getBasicRemote().sendText(""close"");\n        Assert.assertEquals(""CLOSE"", endpoint.message());\n        Assert.assertNull(endpoint.quickMessage());\n        Assert.assertFalse(failed);\n    }\n']",connect;ECH;send;Reconnect;message;message;default;CLOSE;ated;send,6.984919309616089e-10;5.238689482212067e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.964508555829525e-10,5,5,"[-5.839105606079102, -5.701425075531006, -6.325037002563477, -5.353263854980469, -5.524206161499023, -0.016907479614019394]",0.9832347631454468
3,"['    @Test\n    public void testSimpleBasic() throws Exception {\n        //\n        final UndertowClient client = createClient();\n\n        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();\n        final CountDownLatch latch = new CountDownLatch(10);\n        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();\n        try {\n            connection.getIoThread().execute(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i < 10; i++) {\n                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);\n                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n                        connection.sendRequest(request, createClientCallback(responses, latch));\n                    }\n                }\n']",Basic;Default;OST;final;ADDRESS;Callback;connect;Under;responses;create,1.1641532182693481e-09;4.656612873077393e-10;4.0745362639427185e-10;2.546585164964199e-10;2.4010660126805305e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.83911657333374, -5.669173240661621, -6.280439853668213, -5.329174518585205, -5.487583637237549, -0.017370589077472687]",0.9827793836593628
3,"['    @Test\n    public void testSendPing() throws Exception {\n        //\n        final UndertowClient client = createClient();\n\n        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();\n        final FutureResult<Boolean> result = new FutureResult<>();\n        final CountDownLatch latch = new CountDownLatch(3);\n        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();\n        Assert.assertTrue(connection.isPingSupported());\n        try {\n            connection.getIoThread().execute(new Runnable() {\n                @Override\n                public void run() {\n                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);\n                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n                        connection.sendRequest(request, createClientCallback(responses, latch));\n                        connection.sendPing(new ClientConnection.PingListener() {\n                            @Override\n                            public void acknowledged() {\n                                result.setResult(true);\n                                latch.countDown();\n                            }\n']",worker;Address;connection;final;Host;Ping;ADDRESS;Connection;List;final,7.8580342233181e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1827872842550278e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.0913936421275139e-10;9.458744898438454e-11,5,5,"[-5.843459606170654, -5.676943778991699, -6.297369480133057, -5.34152364730835, -5.502861976623535, -0.017174215987324715]",0.9829724431037903
3,"['    @Test\n    public void testPostRequest() throws Exception {\n        //\n        final UndertowClient client = createClient();\n        final String postMessage = ""This is a post request"";\n\n        final List<String> responses = new CopyOnWriteArrayList<>();\n        final CountDownLatch latch = new CountDownLatch(10);\n        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();\n        try {\n            connection.getIoThread().execute(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i < 10; i++) {\n                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);\n                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");\n                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {\n                            @Override\n                            public void completed(ClientExchange result) {\n                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());\n                                result.setResponseListener(new ClientCallback<ClientExchange>() {\n                                    @Override\n                                    public void completed(ClientExchange result) {\n                                        new StringReadChannelListener(DefaultServer.getBufferPool()) {\n\n                                            @Override\n                                            protected void stringDone(String string) {\n                                                responses.add(string);\n                                                latch.countDown();\n                                            }\n\n                                            @Override\n                                            protected void error(IOException e) {\n                                                e.printStackTrace();\n                                                latch.countDown();\n                                            }\n                                        }.setup(result.getResponseChannel());\n                                    }\n']",TRANSFER;put;Host;completed;result;Client;Headers;Request;Exchange;request,4.307366907596588e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.844407558441162, -5.673051357269287, -6.311575889587402, -5.347087383270264, -5.513921737670898, -0.01708609238266945]",0.9830591678619385
3,"['    @Test\n    public void testConnectionClose() throws Exception {\n        //\n        final UndertowClient client = createClient();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();\n        try {\n            ClientRequest request = new ClientRequest().setPath(MESSAGE).setMethod(Methods.GET);\n            request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n            final List<ClientResponse> responses = new CopyOnWriteArrayList<>();\n            request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString());\n            connection.sendRequest(request, createClientCallback(responses, latch));\n            latch.await();\n            final ClientResponse response = responses.iterator().next();\n            Assert.assertEquals(message, response.getAttachment(RESPONSE_BODY));\n            Assert.assertEquals(false, connection.isOpen());\n        } finally {\n            IoUtils.safeClose(connection);\n        }\n\n    }\n']",OST;Path;message;EMPTY;connect;latch;ECTION;Headers;Down;final,3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.964508555829525e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.840224266052246, -5.682408332824707, -6.287619590759277, -5.330364227294922, -5.485591888427734, -0.017310017719864845]",0.9828389286994934
3,"['    @Test\n    public void testSimpleBasic() throws Exception {\n        //\n        final UndertowClient client = createClient();\n\n        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();\n        final CountDownLatch latch = new CountDownLatch(10);\n        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();\n        try {\n            connection.getIoThread().execute(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i < 10; i++) {\n                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);\n                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n                        connection.sendRequest(request, createClientCallback(responses, latch));\n                    }\n                }\n']",Basic;Default;OST;final;ADDRESS;Callback;connect;Under;responses;create,1.1641532182693481e-09;4.656612873077393e-10;4.0745362639427185e-10;2.546585164964199e-10;2.4010660126805305e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.83911657333374, -5.669173240661621, -6.280439853668213, -5.329174518585205, -5.487583637237549, -0.017370589077472687]",0.9827793836593628
3,"['    @Test\n    public void testPostRequest() throws Exception {\n        //\n        final UndertowClient client = createClient();\n        final String postMessage = ""This is a post request"";\n\n        final List<String> responses = new CopyOnWriteArrayList<>();\n        final CountDownLatch latch = new CountDownLatch(10);\n        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();\n        try {\n            connection.getIoThread().execute(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i < 10; i++) {\n                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);\n                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");\n                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {\n                            @Override\n                            public void completed(ClientExchange result) {\n                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());\n                                result.setResponseListener(new ClientCallback<ClientExchange>() {\n                                    @Override\n                                    public void completed(ClientExchange result) {\n                                        new StringReadChannelListener(DefaultServer.getBufferPool()) {\n\n                                            @Override\n                                            protected void stringDone(String string) {\n                                                responses.add(string);\n                                                latch.countDown();\n                                            }\n\n                                            @Override\n                                            protected void error(IOException e) {\n                                                e.printStackTrace();\n                                                latch.countDown();\n                                            }\n                                        }.setup(result.getResponseChannel());\n                                    }\n']",TRANSFER;put;Host;completed;result;Client;Headers;Request;Exchange;request,4.307366907596588e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.844407558441162, -5.673051357269287, -6.311575889587402, -5.347087383270264, -5.513921737670898, -0.01708609238266945]",0.9830591678619385
3,"['    @Test\n    public void testSsl() throws Exception {\n        //\n        final UndertowClient client = createClient();\n\n        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();\n        final CountDownLatch latch = new CountDownLatch(10);\n        DefaultServer.startSSLServer();\n        SSLContext context = DefaultServer.getClientSSLContext();\n        XnioSsl ssl = new UndertowXnioSsl(DefaultServer.getWorker().getXnio(), OptionMap.EMPTY, DefaultServer.SSL_BUFFER_POOL, context);\n\n        final ClientConnection connection = client.connect(new URI(DefaultServer.getDefaultServerSSLAddress()), worker, ssl, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();\n        try {\n            connection.getIoThread().execute(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i < 10; i++) {\n                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);\n                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n                        connection.sendRequest(request, createClientCallback(responses, latch));\n                    }\n                }\n']",SSLAddress;Under;Pool;Worker;SSL;SSLServer;BUFFER;new;Buffer;run,3.2014213502407074e-10;3.128661774098873e-10;2.3283064365386963e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.2369127944111824e-10;1.2369127944111824e-10;1.0186340659856796e-10;1.0186340659856796e-10,5,5,"[-5.839709758758545, -5.6768622398376465, -6.297425746917725, -5.336062908172607, -5.5099592208862305, -0.017182886600494385]",0.9829639196395874
3,"['    @Test\n    public void testConnectionClose() throws Exception {\n        //\n        final UndertowClient client = createClient();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();\n        try {\n            ClientRequest request = new ClientRequest().setPath(MESSAGE).setMethod(Methods.GET);\n            request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n            final List<ClientResponse> responses = new CopyOnWriteArrayList<>();\n            request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString());\n            connection.sendRequest(request, createClientCallback(responses, latch));\n            latch.await();\n            final ClientResponse response = responses.iterator().next();\n            Assert.assertEquals(message, response.getAttachment(RESPONSE_BODY));\n            Assert.assertEquals(false, connection.isOpen());\n        } finally {\n            IoUtils.safeClose(connection);\n        }\n\n    }\n']",OST;Path;message;EMPTY;connect;latch;ECTION;Headers;Down;final,3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.964508555829525e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.840224266052246, -5.682408332824707, -6.287619590759277, -5.330364227294922, -5.485591888427734, -0.017310017719864845]",0.9828389286994934
3,"['    @Test\n    public void testMethodSplit() {\n        byte[] in = DATA.getBytes();\n        for (int i = 0; i < in.length - 4; ++i) {\n            try {\n                testResume(i, in);\n            } catch (Throwable e) {\n                throw new RuntimeException(""Test failed at split "" + i, e);\n            }\n        }\n    }\n']",Split;DATA;in;catch;length;new;in;in;throw;byte,1.3969838619232178e-09;6.111804395914078e-10;3.4924596548080444e-10;1.7462298274040222e-10;5.820766091346741e-11;5.820766091346741e-11;0.0;0.0;-1.4551915228366852e-11;-4.3655745685100555e-11,5,5,"[-5.87349796295166, -5.698879241943359, -6.296596527099609, -5.378027439117432, -5.4815168380737305, -0.016927756369113922]",0.9832148551940918
3,"['    @Test\n    public void testOneCharacterAtATime() throws BadRequestException {\n        byte[] in = DATA.getBytes();\n        final ResponseParseState context = new ResponseParseState();\n        HttpResponseBuilder result = new HttpResponseBuilder();\n        ByteBuffer buffer = ByteBuffer.wrap(in);\n        buffer.limit(1);\n        while (context.state != ResponseParseState.PARSE_COMPLETE) {\n            HttpResponseParser.INSTANCE.handle(buffer, context, result);\n            buffer.limit(buffer.limit() + 1);\n        }\n        runAssertions(result, context);\n    }\n']",One;State;ttp;result;while;COMPLETE;Character;in;limit;Response,2.3283064365386963e-10;2.1827872842550278e-10;2.1100277081131935e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0913936421275139e-10,5,5,"[-5.881309509277344, -5.738080978393555, -6.320169925689697, -5.385473251342773, -5.501523494720459, -0.016612181439995766]",0.9835250377655029
3,"['    @Test\n    public void testSimpleBasic() throws Exception {\n        //\n        final UndertowClient client = createClient();\n\n        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();\n        final CountDownLatch latch = new CountDownLatch(10);\n        final ClientConnection connection = client.connect(ADDRESS, worker, new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, DefaultServer.getClientSSLContext()), DefaultServer.getBufferPool(), OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();\n        try {\n            connection.getIoThread().execute(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i < 10; i++) {\n                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);\n                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n                        connection.sendRequest(request, createClientCallback(responses, latch));\n                    }\n                }\n']",GET;responses;Under;worker;Copy;Pool;Under;worker;latch;Down,5.820766091346741e-10;4.001776687800884e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1827872842550278e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.833244323730469, -5.661590576171875, -6.273618221282959, -5.321935176849365, -5.48666524887085, -0.017467590048909187]",0.9826840758323669
3,"['    @Test\n    public void testPostRequest() throws Exception {\n        //\n        final UndertowClient client = createClient();\n        final String postMessage = ""This is a post request"";\n\n        final List<String> responses = new CopyOnWriteArrayList<>();\n        final CountDownLatch latch = new CountDownLatch(10);\n        final ClientConnection connection = client.connect(ADDRESS, worker, new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, DefaultServer.getClientSSLContext()), DefaultServer.getBufferPool(), OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();\n        try {\n            connection.getIoThread().execute(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i < 10; i++) {\n                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);\n                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");\n                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {\n                            @Override\n                            public void completed(ClientExchange result) {\n                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());\n                                result.setResponseListener(new ClientCallback<ClientExchange>() {\n                                    @Override\n                                    public void completed(ClientExchange result) {\n                                        new StringReadChannelListener(DefaultServer.getBufferPool()) {\n\n                                            @Override\n                                            protected void stringDone(String string) {\n                                                responses.add(string);\n                                                latch.countDown();\n                                            }\n\n                                            @Override\n                                            protected void error(IOException e) {\n                                                e.printStackTrace();\n                                                latch.countDown();\n                                            }\n                                        }.setup(result.getResponseChannel());\n                                    }\n']",ENCODING;HTTP;This;request;request;execute;Under;Headers;Client;request,6.984919309616089e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.841901779174805, -5.682708740234375, -6.319030284881592, -5.355890274047852, -5.518321990966797, -0.016985656693577766]",0.9831578135490417
3,"['    @Test\n    public void testOrderShorterFirst() {\n        HttpString a =  new HttpString(""a"");\n        HttpString aa =  new HttpString(""aa"");\n        Assert.assertEquals(-1, a.compareTo(aa));\n    }\n']",ttp;ttp;Equals;new;First;ttp;aa;ttp;new;compare,2.0954757928848267e-09;9.313225746154785e-10;4.94765117764473e-10;3.7834979593753815e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-6.402842700481415e-10;-6.984919309616089e-10;-9.89530235528946e-10,5,5,"[-5.875809192657471, -5.748932838439941, -6.3333740234375, -5.432455062866211, -5.441704750061035, -0.01661030575633049]",0.983526885509491
3,"['    @Test\n    public void testCompareShorterFirst() {\n        HttpString accept =  new HttpString(Headers.ACCEPT_STRING);\n        Assert.assertEquals(accept.compareTo(Headers.ACCEPT_CHARSET), Headers.ACCEPT.compareTo(Headers.ACCEPT_CHARSET));\n\n        HttpString acceptCharset =  new HttpString(Headers.ACCEPT_CHARSET_STRING);\n        Assert.assertEquals(acceptCharset.compareTo(Headers.ACCEPT), Headers.ACCEPT_CHARSET.compareTo(Headers.ACCEPT));\n    }\n']",Charset;CHARSET;Compare;Headers;compare;ACCEPT;ACCEPT;compare;Equals;Assert,2.1245796233415604e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0186340659856796e-09;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.8532633781433105, -5.752084255218506, -6.3360161781311035, -5.366890907287598, -5.464745044708252, -0.016861414536833763]",0.9832799434661865
3,"['    @Test\n    public void testCompare() {\n        HttpString contentType =  new HttpString(Headers.CONTENT_TYPE_STRING);\n        Assert.assertEquals(contentType.compareTo(Headers.COOKIE), Headers.CONTENT_TYPE.compareTo(Headers.COOKIE));\n\n        HttpString cookie =  new HttpString(Headers.COOKIE_STRING);\n        Assert.assertEquals(cookie.compareTo(Headers.CONTENT_TYPE), Headers.COOKIE.compareTo(Headers.CONTENT_TYPE));\n    }\n']",content;ttp;Compare;TYPE;CONTENT;CONTENT;STRING;cookie;Headers;Headers,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.831751346588135, -5.742146968841553, -6.298415184020996, -5.35333776473999, -5.437247276306152, -0.017211126163601875]",0.9829362630844116
3,"['    @Test\n    public void testSerialization() throws IOException, ClassNotFoundException {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        ObjectOutputStream so = new ObjectOutputStream(out);\n        HttpString testString = new HttpString(""test"");\n        so.writeObject(testString);\n        so.close();\n\n        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n        Object res = in.readObject();\n        Assert.assertEquals(testString, res);\n    }\n']",out;ttp;Stream;new;Output;Object;Found;new;res;close,2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.0186340659856796e-10;1.0186340659856796e-10;1.0186340659856796e-10;8.731149137020111e-11;8.36735125631094e-11,5,5,"[-5.843264579772949, -5.700510501861572, -6.2845659255981445, -5.353353500366211, -5.455916881561279, -0.0172597523778677]",0.9828883409500122
3,"['    @Test\n    public void testParseFirefoxDate() {\n\n        String firefoxHeader = ""Mon, 31 Mar 2014 09:24:49 GMT"";\n        Date firefoxDate = DateUtils.parseDate(firefoxHeader);\n\n        Assert.assertNotNull(firefoxDate);\n\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));\n        calendar.set(2014, Calendar.MARCH, 31, 9, 24, 49);\n        calendar.set(Calendar.MILLISECOND, 0);\n\n        Assert.assertEquals(calendar.getTime(), firefoxDate);\n\n\n    }\n']",Mon;Zone;Null;Time;Calendar;Date;Equals;calendar;firefox;parse,5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.3096723705530167e-10,5,5,"[-5.824485778808594, -5.6266679763793945, -6.262141704559326, -5.4369916915893555, -5.472358703613281, -0.0171622633934021]",0.9829840660095215
3,"['    @Test\n    public void testParseChromeDate() {\n\n        String chromeHeader = ""Mon, 31 Mar 2014 09:44:00 GMT"";\n        Date chromeDate = DateUtils.parseDate(chromeHeader);\n\n        Assert.assertNotNull(chromeDate);\n\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));\n        calendar.set(2014, Calendar.MARCH, 31, 9, 44, 00);\n        calendar.set(Calendar.MILLISECOND, 0);\n\n        Assert.assertEquals(calendar.getTime(), chromeDate);\n\n    }\n']",ILLISECOND;chrome;Parse;Header;calendar;chrome;Calendar;Header;chrome;Equals,7.057678885757923e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;2.837623469531536e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.824741363525391, -5.632994651794434, -6.25814151763916, -5.428439140319824, -5.46566104888916, -0.01721300184726715]",0.982934296131134
3,"['    @Test\n    public void testParseIE9Date() {\n\n        String ie9Header = ""Wed, 12 Feb 2014 04:43:29 GMT; length=142951"";\n\n        Date ie9Date = DateUtils.parseDate(ie9Header);\n        Assert.assertNotNull(ie9Date);\n\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));\n        calendar.set(2014, Calendar.FEBRUARY, 12, 4, 43, 29);\n        calendar.set(Calendar.MILLISECOND, 0);\n\n        Assert.assertEquals(calendar.getTime(), ie9Date);\n\n    }\n']",IE;parse;ILLISECOND;Calendar;FEBR;Date;ie;Header;calendar;Null,1.0477378964424133e-09;9.313225746154785e-10;8.87666828930378e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.812325954437256, -5.620808124542236, -6.2416791915893555, -5.406195163726807, -5.4619526863098145, -0.017443927004933357]",0.9827073216438293
3,"['    @Test\n    public void testPerformance() {\n\n        String ie9Header = ""Wed, 12 Feb 2014 04:43:29 GMT; length=142951"";\n\n        long timestamp = System.currentTimeMillis();\n        for (int i=0; i < 1000; i++) {\n            ie9Header.replaceAll("";.*$"", """");\n        }\n        long ts1 = System.currentTimeMillis() - timestamp;\n\n        timestamp = System.currentTimeMillis();\n\n        for (int i=0; i < 1000; i++) {\n            int index = ie9Header.indexOf(\';\');\n            final String trimmedDate = index >=0 ? ie9Header.substring(0, index) : ie9Header;\n        }\n\n        long ts2 = System.currentTimeMillis() - timestamp;\n\n        Assert.assertTrue(ts2 < ts1);\n\n    }\n']",Mill;Date;ts;ts;GMT;timestamp;ie;long;Mill;long,2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.824636459350586, -5.636592864990234, -6.239849090576172, -5.340286731719971, -5.490604877471924, -0.017541857436299324]",0.9826111197471619
3,"['    @Test\n    public void testSubstringMap() {\n\n        SubstringMap<Integer> paths = new SubstringMap<>();\n\n        for (int count = 0; count < 10; ++count) {\n            int seed = new Random().nextInt();\n\n            Random random = new Random(seed);\n            System.out.println(""Using Seed "" + seed);\n\n            List<String> parts = new ArrayList<>();\n\n            Set<String> keys = new HashSet<>();\n\n            for (int i = 0; i < NUM_TEST_VALUES; ++i) {\n                String s = null;\n                do {\n                    byte[] bytes = new byte[random.nextInt(30) + 5];\n                    random.nextBytes(bytes);\n                    s = FlexBase64.encodeString(bytes, false);\n                } while (keys.contains(s));\n                keys.add(s);\n                parts.add(s);\n                paths.put(s, i);\n                Assert.assertEquals(Integer.valueOf(i), paths.get(s, s.length()).getValue());\n                Assert.assertEquals(Integer.valueOf(i), paths.get(s + ""fooosdf"", s.length()).getValue());\n                String missing = s + ""asdfdasfasf"";\n                Assert.assertNull(paths.get(missing, missing.length()));\n            }\n\n            for (String k : paths.keys()) {\n                Assert.assertTrue(keys.remove(k));\n            }\n            Assert.assertEquals(0, keys.size());\n\n            for (int i = 0; i < NUM_TEST_VALUES; ++i) {\n                String p = parts.get(i);\n                Assert.assertEquals(Integer.valueOf(i), paths.get(p, p.length()).getValue());\n                Assert.assertEquals(Integer.valueOf(i), paths.get(p + ""asdfdsafasfw"", p.length()).getValue());\n            }\n            for (int i = 0; i < NUM_TEST_VALUES; ++i) {\n                Integer p = paths.remove(parts.get(i));\n                Assert.assertEquals(Integer.valueOf(i), p);\n            }\n        }\n    }\n']",Substring;do;Map;NUM;contains;Substring;keys;keys;Equals;Random,3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7826096154749393e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.0186340659856796e-10;9.458744898438454e-11;8.731149137020111e-11,5,5,"[-5.835853576660156, -5.639877796173096, -6.246616363525391, -5.279886722564697, -5.486484050750732, -0.017804207280278206]",0.9823533296585083
3,"['    @Test\n    public void testTokenExtraction() {\n\n        Assert.assertEquals(""--xyz"", Headers.extractTokenFromHeader(""multipart/form-data; boundary=--xyz; param=abc"", ""boundary""));\n    }\n']",boundary;Header;data;From;boundary;form;Assert;multipart;Equals;extract,1.6298145055770874e-09;9.313225746154785e-10;3.2014213502407074e-10;0.0;-4.656612873077393e-10;-6.984919309616089e-10;-1.3387762010097504e-09;-1.3969838619232178e-09;-1.5425030142068863e-09;-2.0954757928848267e-09,5,5,"[-5.937560081481934, -5.854596138000488, -6.439167022705078, -5.488332748413086, -5.476196765899658, -0.015543037094175816]",0.9845771193504333
3,"['    @Test\n    public void testCanonicalization() {\n\n        //these strings should not be touched\n        Assert.assertSame(""a/b/c"", CanonicalPathUtils.canonicalize(""a/b/c""));\n        Assert.assertSame(""a/b/c/"", CanonicalPathUtils.canonicalize(""a/b/c/""));\n        Assert.assertSame(""aaaaa"", CanonicalPathUtils.canonicalize(""aaaaa""));\n\n        //these strings should result in the same string being output\n        Assert.assertEquals(""a./b"", CanonicalPathUtils.canonicalize(""a./b""));\n        Assert.assertEquals(""a./.b"", CanonicalPathUtils.canonicalize(""a./.b""));\n\n        //removing double slash\n\n        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a//b""));\n        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a///b""));\n        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a////b""));\n\n        //removing /./\n        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a/./b""));\n        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a/././b""));\n        Assert.assertEquals(""a/b/c"", CanonicalPathUtils.canonicalize(""a/./b/./c""));\n        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a/./././b""));\n        Assert.assertEquals(""a/b/"", CanonicalPathUtils.canonicalize(""a/./././b/./""));\n        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a/./././b/.""));\n\n        //dealing with /../\n        Assert.assertEquals(""/b"", CanonicalPathUtils.canonicalize(""/a/../b""));\n        Assert.assertEquals(""/b"", CanonicalPathUtils.canonicalize(""/a/../c/../e/../b""));\n        Assert.assertEquals(""/b"", CanonicalPathUtils.canonicalize(""/a/c/../../b""));\n        Assert.assertEquals(""/"", CanonicalPathUtils.canonicalize(""/a/../..""));\n        Assert.assertEquals(""/foo"", CanonicalPathUtils.canonicalize(""/a/../../foo""));\n\n        //preserve (single) trailing /\n        Assert.assertEquals(""/a/"", CanonicalPathUtils.canonicalize(""/a/""));\n        Assert.assertEquals(""/"", CanonicalPathUtils.canonicalize(""/""));\n        Assert.assertEquals(""/bbb/a"", CanonicalPathUtils.canonicalize(""/cc/../bbb/a/.""));\n        Assert.assertEquals(""/aaa/bbb/"", CanonicalPathUtils.canonicalize(""/aaa/bbb//////""));\n    }\n']",output;should;the;removing;Path;string;aaaa;canonicalize;Same;being,5.529727786779404e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.055902197957039e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.852660655975342, -5.7317118644714355, -6.363112449645996, -5.361519813537598, -5.5598320960998535, -0.01651662215590477]",0.9836190342903137
3,"['    @Test\n    public void testCanonicalizationBackslash() {\n\n        //these strings should not be touched\n        Assert.assertSame(""a\\\\b\\\\c"", CanonicalPathUtils.canonicalize(""a\\\\b\\\\c""));\n        Assert.assertSame(""a\\\\b\\\\c\\\\"", CanonicalPathUtils.canonicalize(""a\\\\b\\\\c\\\\""));\n        Assert.assertSame(""aaaaa"", CanonicalPathUtils.canonicalize(""aaaaa""));\n\n        //these strings should result in the same string being output\n        Assert.assertEquals(""a.\\\\b"", CanonicalPathUtils.canonicalize(""a.\\\\b""));\n        Assert.assertEquals(""a.\\\\.b"", CanonicalPathUtils.canonicalize(""a.\\\\.b""));\n\n        //removing double slash\n\n        Assert.assertEquals(""a\\\\b"", CanonicalPathUtils.canonicalize(""a\\\\\\\\b""));\n        Assert.assertEquals(""a\\\\b"", CanonicalPathUtils.canonicalize(""a\\\\\\\\\\\\b""));\n        Assert.assertEquals(""a\\\\b"", CanonicalPathUtils.canonicalize(""a\\\\\\\\\\\\\\\\b""));\n\n        //removing \\.\\\n        Assert.assertEquals(""a\\\\b"", CanonicalPathUtils.canonicalize(""a\\\\.\\\\b""));\n        Assert.assertEquals(""a\\\\b"", CanonicalPathUtils.canonicalize(""a\\\\.\\\\.\\\\b""));\n        Assert.assertEquals(""a\\\\b\\\\c"", CanonicalPathUtils.canonicalize(""a\\\\.\\\\b\\\\.\\\\c""));\n        Assert.assertEquals(""a\\\\b"", CanonicalPathUtils.canonicalize(""a\\\\.\\\\.\\\\.\\\\b""));\n        Assert.assertEquals(""a\\\\b\\\\"", CanonicalPathUtils.canonicalize(""a\\\\.\\\\.\\\\.\\\\b\\\\.\\\\""));\n        Assert.assertEquals(""a\\\\b"", CanonicalPathUtils.canonicalize(""a\\\\.\\\\.\\\\.\\\\b\\\\.""));\n\n        //dealing with \\..\\\n        Assert.assertEquals(""\\\\b"", CanonicalPathUtils.canonicalize(""\\\\a\\\\..\\\\b""));\n        Assert.assertEquals(""\\\\b"", CanonicalPathUtils.canonicalize(""\\\\a\\\\..\\\\c\\\\..\\\\e\\\\..\\\\b""));\n        Assert.assertEquals(""\\\\b"", CanonicalPathUtils.canonicalize(""\\\\a\\\\c\\\\..\\\\..\\\\b""));\n        Assert.assertEquals(""/"", CanonicalPathUtils.canonicalize(""\\\\a\\\\..\\\\..""));\n        Assert.assertEquals(""\\\\foo"", CanonicalPathUtils.canonicalize(""\\\\a\\\\..\\\\..\\\\foo""));\n\n        //preserve (single) trailing \\\n        Assert.assertEquals(""\\\\a\\\\"", CanonicalPathUtils.canonicalize(""\\\\a\\\\""));\n        Assert.assertEquals(""\\\\"", CanonicalPathUtils.canonicalize(""\\\\""));\n        Assert.assertEquals(""\\\\bbb\\\\a"", CanonicalPathUtils.canonicalize(""\\\\cc\\\\..\\\\bbb\\\\a\\\\.""));\n        Assert.assertEquals(""\\\\aaa\\\\bbb\\\\"", CanonicalPathUtils.canonicalize(""\\\\aaa\\\\bbb\\\\\\\\\\\\\\\\\\\\\\\\""));\n\n        //test mixtures of both forward and back slash\n        Assert.assertEquals(""/"", CanonicalPathUtils.canonicalize(""\\\\a/..\\\\./""));\n        Assert.assertEquals(""\\\\a/"", CanonicalPathUtils.canonicalize(""\\\\a\\\\b\\\\..\\\\./""));\n        Assert.assertEquals(""/a/b/c../d..\\\\"", CanonicalPathUtils.canonicalize(""/a/b/c../d..\\\\""));\n        Assert.assertEquals(""/a/d\\\\"", CanonicalPathUtils.canonicalize(""/a/b/c/..\\\\../d\\\\.\\\\""));\n    }\n']",ackslash;touched;canonicalize;Canonicalization;should;aaaa;canonicalize;Assert;Assert;Assert,1.6298145055770874e-09;6.984919309616089e-10;6.111804395914078e-10;5.966285243630409e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.382431946694851e-10,5,5,"[-5.869261741638184, -5.717780113220215, -6.374542713165283, -5.385613918304443, -5.56904411315918, -0.016345413401722908]",0.983787477016449
3,"['    @Test\n    public void testIpV4Address() throws IOException {\n        InetAddress res = NetworkUtils.parseIpv4Address(""1.123.255.2"");\n        Assert.assertTrue(res instanceof Inet4Address);\n        Assert.assertEquals(1, res.getAddress()[0]);\n        Assert.assertEquals(123, res.getAddress()[1]);\n        Assert.assertEquals((byte)255, res.getAddress()[2]);\n        Assert.assertEquals(2, res.getAddress()[3]);\n        Assert.assertEquals(""/1.123.255.2"", res.toString());\n\n        res = NetworkUtils.parseIpv4Address(""127.0.0.1"");\n        Assert.assertTrue(res instanceof Inet4Address);\n        Assert.assertEquals(127, res.getAddress()[0]);\n        Assert.assertEquals(0, res.getAddress()[1]);\n        Assert.assertEquals((byte)0, res.getAddress()[2]);\n        Assert.assertEquals(1, res.getAddress()[3]);\n        Assert.assertEquals(""/127.0.0.1"", res.toString());\n    }\n']",Network;Inet;IOException;instanceof;Address;Address;parse;Inet;Address;Utils,5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.128661774098873e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.8011322021484375, -5.650612831115723, -6.235089302062988, -5.280489921569824, -5.454306602478027, -0.018028205260634422]",0.9821333289146423
3,"['    @Test(expected = IOException.class)\n    public void testIpV4AddressWithLeadingZero() throws IOException {\n        NetworkUtils.parseIpv4Address(""01.123.255.2"");\n    }\n']",Network;Address;parse;Utils;IOException;class;Zero;Leading;Address;IOException,2.3283064365386963e-09;1.9208528101444244e-09;1.1641532182693481e-09;8.149072527885437e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-1.0477378964424133e-09;-1.3387762010097504e-09;-2.2118911147117615e-09,5,5,"[-5.9538254737854, -5.9055633544921875, -6.4611053466796875, -5.56016206741333, -5.451051712036133, -0.015137086622416973]",0.9849768877029419
3,"['    @Test(expected = IOException.class)\n    public void testIpV4AddressToSmall() throws IOException {\n        NetworkUtils.parseIpv4Address(""01.123.255"");\n    }\n']",Network;expected;IOException;parse;Utils;Address;IOException;class;Small;Address,3.259629011154175e-09;2.3283064365386963e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-1.1641532182693481e-09,5,5,"[-5.942250728607178, -5.888006210327148, -6.456746578216553, -5.5629191398620605, -5.453578472137451, -0.015202016569674015]",0.9849129319190979
3,"['    @Test(expected = IOException.class)\n    public void testIpV4AddressToLarge() throws IOException {\n        NetworkUtils.parseIpv4Address(""01.123.255.1.1"");\n    }\n']",IOException;Network;Utils;IOException;class;expected;parse;Address;Large;Address,1.6298145055770874e-09;1.3969838619232178e-09;8.149072527885437e-10;4.656612873077393e-10;1.7462298274040222e-10;-5.238689482212067e-10;-1.3969838619232178e-09;-1.3969838619232178e-09;-2.7939677238464355e-09;-3.259629011154175e-09,5,5,"[-5.964358806610107, -5.943149089813232, -6.490352153778076, -5.583758354187012, -5.4367780685424805, -0.014933344908058643]",0.9851775765419006
3,"['    @Test(expected = IOException.class)\n    public void testIpV4AddressMultipleDots() throws IOException {\n        NetworkUtils.parseIpv4Address(""1..255.2"");\n    }\n']",Address;Network;IOException;IOException;expected;class;parse;Utils;ots;Address,6.05359673500061e-09;5.587935447692871e-09;1.862645149230957e-09;9.313225746154785e-10;0.0;-9.313225746154785e-10;-1.3969838619232178e-09;-1.6880221664905548e-09;-1.862645149230957e-09;-2.6775524020195007e-09,5,5,"[-5.954044818878174, -5.873276233673096, -6.470491886138916, -5.546083927154541, -5.483773231506348, -0.015127575956285]",0.9849862456321716
3,"['    @Test(expected = IOException.class)\n    public void testIpV4AddressMultipleDots2() throws IOException {\n        NetworkUtils.parseIpv4Address(""1..3.255.2"");\n    }\n']",ots;expected;IOException;class;IOException;Utils;Multiple;Network;Address;Address,2.561137080192566e-09;1.3969838619232178e-09;1.1641532182693481e-10;5.820766091346741e-11;-4.0745362639427185e-10;-7.8580342233181e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-1.1641532182693481e-09,5,5,"[-5.9649271965026855, -5.912765026092529, -6.479050636291504, -5.566450119018555, -5.460840702056885, -0.014993003569543362]",0.9851188063621521
3,"['    @Test(expected = IOException.class)\n    public void testIpV4Hostname() throws IOException {\n        NetworkUtils.parseIpv4Address(""localhost"");\n    }\n']",expected;parse;Address;Utils;localhost;Hostname;IOException;Network;IOException;class,1.862645149230957e-09;1.1641532182693481e-09;4.656612873077393e-10;5.820766091346741e-11;-2.3283064365386963e-10;-3.4924596548080444e-10;-1.1641532182693481e-09;-1.862645149230957e-09;-2.0954757928848267e-09;-3.958120942115784e-09,5,5,"[-5.902827739715576, -5.81581449508667, -6.391580104827881, -5.506360054016113, -5.441364765167236, -0.015907641500234604]",0.9842182397842407
3,"['    @Test(expected = IOException.class)\n    public void testIpV4Hostname2() throws IOException {\n        NetworkUtils.parseIpv4Address(""ff"");\n    }\n']",Network;Utils;Hostname;ff;class;Address;parse;IOException;expected;IOException,1.1175870895385742e-08;4.0745362639427185e-09;2.7939677238464355e-09;1.3969838619232178e-09;-1.862645149230957e-09;-1.862645149230957e-09;-2.3283064365386963e-09;-3.14321368932724e-09;-3.725290298461914e-09;-4.190951585769653e-09,5,5,"[-5.912880897521973, -5.838739395141602, -6.404664039611816, -5.517787933349609, -5.440512180328369, -0.015746068209409714]",0.9843772649765015
3,"['    @Test(expected = IOException.class)\n    public void testIpV4AddressStartsWithDot() throws IOException {\n        NetworkUtils.parseIpv4Address("".1.123.255.2"");\n    }\n']",Network;Address;expected;Utils;class;ot;Address;parse;IOException;Starts,5.587935447692871e-09;2.7939677238464355e-09;2.2118911147117615e-09;1.0477378964424133e-09;9.89530235528946e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-1.6298145055770874e-09,5,5,"[-5.9564361572265625, -5.910664081573486, -6.485948085784912, -5.58065128326416, -5.458205699920654, -0.01496693305671215]",0.9851444959640503
3,"['    @Test\n    public void testIpv6Address() throws IOException {\n        String addressString = ""2001:1db8:100:3:6:ff00:42:8329"";\n        InetAddress res = NetworkUtils.parseIpv6Address(addressString);\n        Assert.assertTrue(res instanceof Inet6Address);\n\n        int[] parts = {0x2001, 0x1db8, 0x100, 0x3, 0x6, 0xff00, 0x42, 0x8329};\n        for(int i = 0 ; i < parts.length; ++i) {\n            Assert.assertEquals(((byte)(parts[i]>>8)), res.getAddress()[i * 2]);\n            Assert.assertEquals(((byte)(parts[i])), res.getAddress()[i * 2 + 1]);\n        }\n        Assert.assertEquals(""/"" + addressString, res.toString());\n\n        addressString = ""2001:1db8:100::6:ff00:42:8329"";\n        res = NetworkUtils.parseIpv6Address(addressString);\n        Assert.assertTrue(res instanceof Inet6Address);\n\n        parts = new int[]{0x2001, 0x1db8, 0x100, 0x0, 0x6, 0xff00, 0x42, 0x8329};\n        for(int i = 0 ; i < parts.length; ++i) {\n            Assert.assertEquals(((byte)(parts[i]>>8)), res.getAddress()[i * 2]);\n            Assert.assertEquals(((byte)(parts[i])), res.getAddress()[i * 2 + 1]);\n        }\n        Assert.assertEquals(""/2001:1db8:100:0:6:ff00:42:8329"", res.toString());\n\n        addressString = ""2001:1db8:100::ff00:42:8329"";\n        res = NetworkUtils.parseIpv6Address(addressString);\n        Assert.assertTrue(res instanceof Inet6Address);\n\n        parts = new int[]{0x2001, 0x1db8, 0x100, 0x0, 0x0, 0xff00, 0x42, 0x8329};\n        for(int i = 0 ; i < parts.length; ++i) {\n            Assert.assertEquals(((byte)(parts[i]>>8)), res.getAddress()[i * 2]);\n            Assert.assertEquals(((byte)(parts[i])), res.getAddress()[i * 2 + 1]);\n        }\n        Assert.assertEquals(""/2001:1db8:100:0:0:ff00:42:8329"", res.toString());\n\n\n        addressString = ""::1"";\n        res = NetworkUtils.parseIpv6Address(addressString);\n        Assert.assertTrue(res instanceof Inet6Address);\n\n        parts = new int[]{0, 0, 0, 0, 0, 0, 0, 0x1};\n        for(int i = 0 ; i < parts.length; ++i) {\n            Assert.assertEquals(((byte)(parts[i]>>8)), res.getAddress()[i * 2]);\n            Assert.assertEquals(((byte)(parts[i])), res.getAddress()[i * 2 + 1]);\n        }\n        Assert.assertEquals(""/0:0:0:0:0:0:0:1"", res.toString());\n    }\n']",Inet;Network;ff;db;Inet;instanceof;Network;parts;length;xff,5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;1.673470251262188e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10;6.548361852765083e-11,5,5,"[-5.828159809112549, -5.6572184562683105, -6.2665934562683105, -5.295614242553711, -5.502102375030518, -0.017579691484570503]",0.982573926448822
3,"['    @Test(expected = IOException.class)\n    public void testIpV6AddressWithLeadingZero() throws IOException {\n        NetworkUtils.parseIpv6Address(""2001:1db8:100:03:6:ff00:42:8329"");\n    }\n']",parse;Network;IOException;Address;class;db;Utils;ff;Zero;Leading,1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-5.820766091346741e-10;-1.7462298274040222e-09;-2.1827872842550278e-09,5,5,"[-5.951403617858887, -5.875692367553711, -6.4580535888671875, -5.546688556671143, -5.469307899475098, -0.015206361189484596]",0.9849086999893188
3,"['    @Test(expected = IOException.class)\n    public void testIpV6AddressToSmall() throws IOException {\n        NetworkUtils.parseIpv6Address(""2001:1db8:3:6:ff00:42:8329"");\n    }\n']",IOException;class;db;Utils;Address;ff;IOException;parse;Small;Address,3.14321368932724e-09;1.3969838619232178e-09;4.656612873077393e-10;2.3283064365386963e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.1641532182693481e-09;-1.862645149230957e-09;-4.889443516731262e-09,5,5,"[-5.946804046630859, -5.874398708343506, -6.46450138092041, -5.560647964477539, -5.462975025177002, -0.015184405259788036]",0.9849303960800171
3,"['    @Test(expected = IOException.class)\n    public void testIpV6AddressToLarge() throws IOException {\n        NetworkUtils.parseIpv6Address(""2001:1db8:100:3:6:7:ff00:42:8329"");\n    }\n']",Network;IOException;expected;Utils;parse;Address;ff;db;class;IOException,6.28642737865448e-09;2.3283064365386963e-09;4.656612873077393e-10;1.1641532182693481e-10;0.0;0.0;0.0;-9.313225746154785e-10;-2.0954757928848267e-09;-2.7939677238464355e-09,5,5,"[-5.9533185958862305, -5.883244037628174, -6.47287654876709, -5.555532455444336, -5.471373558044434, -0.015112780965864658]",0.9850008487701416
3,"['    @Test(expected = IOException.class)\n    public void testIpV6AddressMultipleColons() throws IOException {\n        NetworkUtils.parseIpv6Address(""2001:1db8:100::3:6:ff00:42:8329"");\n    }\n']",Utils;Network;IOException;Address;db;expected;parse;Multiple;ff;Address,4.889443516731262e-09;4.6566128730773926e-09;2.0954757928848267e-09;1.862645149230957e-09;1.1641532182693481e-09;0.0;0.0;-4.656612873077393e-10;-1.1641532182693481e-09;-1.6298145055770874e-09,5,5,"[-5.947601795196533, -5.873223781585693, -6.458105087280273, -5.553741931915283, -5.460205078125, -0.015234656631946564]",0.9848806858062744
3,"['    @Test(expected = IOException.class)\n    public void testIpV6AddressMultipleColons2() throws IOException {\n        NetworkUtils.parseIpv6Address(""2001::100::329"");\n    }\n']",Network;Utils;Address;expected;Colons;Address;IOException;Multiple;class;parse,5.587935447692871e-09;5.3551048040390015e-09;3.725290298461914e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;-4.656612873077393e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-5.941495895385742, -5.842197895050049, -6.444643974304199, -5.541111946105957, -5.464428901672363, -0.015394316986203194]",0.9847235679626465
3,"['    @Test(expected = IOException.class)\n    public void testIpV6Hostname() throws IOException {\n        NetworkUtils.parseIpv6Address(""localhost"");\n    }\n']",Network;Hostname;IOException;IOException;class;Utils;parse;Address;localhost;expected,1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;5.820766091346741e-10;0.0;-5.820766091346741e-11;-2.3283064365386963e-10;-4.656612873077393e-10;-1.0477378964424133e-09;-2.3283064365386963e-09,5,5,"[-5.897331237792969, -5.801547050476074, -6.383360862731934, -5.499550819396973, -5.437315940856934, -0.016026604920625687]",0.9841011166572571
3,"['    @Test(expected = IOException.class)\n    public void testIpV6Hostname2() throws IOException {\n        NetworkUtils.parseIpv6Address(""ff"");\n    }\n']",expected;Utils;Network;IOException;IOException;Address;class;ff;parse;Hostname,4.6566128730773926e-09;3.958120942115784e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;1.862645149230957e-09;9.313225746154785e-10;4.656612873077393e-10;-9.313225746154785e-10;-4.423782229423523e-09,5,5,"[-5.910930633544922, -5.830440044403076, -6.399882793426514, -5.511039733886719, -5.441540718078613, -0.015807203948497772]",0.9843170642852783
3,"['    @Test(expected = IOException.class)\n    public void testIpV6AddressStartsWithColon() throws IOException {\n        NetworkUtils.parseIpv6Address("":2001:1db8:100:3:6:ff00:42:8329"");\n    }\n']",expected;Starts;Address;IOException;class;Utils;IOException;ff;Address;parse,3.725290298461914e-09;2.7939677238464355e-09;2.444721758365631e-09;1.862645149230957e-09;1.1641532182693481e-09;8.731149137020111e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-5.969699859619141, -5.89223575592041, -6.48491907119751, -5.574559211730957, -5.468025207519531, -0.014966228045523167]",0.9851452112197876
3,"['    @Test\n    public void testCodeLookup() {\n        Assert.assertEquals(""OK"", StatusCodes.getReason(StatusCodes.OK));\n    }\n']",Status;Status;Code;odes;OK;OK;odes;Assert;get;Equals,4.6566128730773926e-09;1.862645149230957e-09;1.4551915228366852e-09;1.1641532182693481e-09;1.076841726899147e-09;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.5425030142068863e-09,5,5,"[-5.895799160003662, -5.781924724578857, -6.378661632537842, -5.523604869842529, -5.406651496887207, -0.016138751059770584]",0.9839907884597778
3,"['    @Test\n    public void testCharsetParsing() {\n        Assert.assertEquals(null, Headers.extractQuotedValueFromHeader(""text/html; other-data=\\""charset=UTF-8\\"""", ""charset""));\n        Assert.assertEquals(null, Headers.extractQuotedValueFromHeader(""text/html;"", ""charset""));\n        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; charset=\\""UTF-8\\"""", ""charset""));\n        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; charset=UTF-8"", ""charset""));\n        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; charset=\\""UTF-8\\""; foo=bar"", ""charset""));\n        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; charset=UTF-8 foo=bar"", ""charset""));\n        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; badcharset=bad charset=UTF-8 foo=bar"", ""charset""));\n        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html;charset=UTF-8"", ""charset""));\n        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html;\\tcharset=UTF-8"", ""charset""));\n    }\n']",bar;bar;charset;badcharset;charset;html;bad;html;foo;other,8.731149137020111e-10;5.238689482212067e-10;4.94765117764473e-10;4.729372449219227e-10;3.5288394428789616e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.818496227264404, -5.697264671325684, -6.271371364593506, -5.296666145324707, -5.497553825378418, -0.017473680898547173]",0.9826781153678894
3,"['    @Test\n    public void testSimplePrefixCase() {\n\n        PathMatcher<String> pathMatcher = new PathMatcher<>();\n\n        pathMatcher.addPrefixPath(""prefix"", ""response"");\n        Assert.assertEquals(""response"", pathMatcher.getPrefixPath(""prefix""));\n        Assert.assertEquals(""response"", pathMatcher.getPrefixPath(""/prefix""));\n        Assert.assertEquals(""response"", pathMatcher.getPrefixPath(""/prefix/""));\n\n        pathMatcher.addPrefixPath(""/prefix"", ""new response"");\n        Assert.assertEquals(""new response"", pathMatcher.getPrefixPath(""prefix""));\n        Assert.assertEquals(""new response"", pathMatcher.getPrefixPath(""/prefix""));\n        Assert.assertEquals(""new response"", pathMatcher.getPrefixPath(""/prefix/""));\n\n        pathMatcher.addPrefixPath(""/prefix/"", ""different response"");\n        Assert.assertEquals(""different response"", pathMatcher.getPrefixPath(""prefix""));\n        Assert.assertEquals(""different response"", pathMatcher.getPrefixPath(""/prefix""));\n        Assert.assertEquals(""different response"", pathMatcher.getPrefixPath(""/prefix/""));\n\n        pathMatcher.addPrefixPath(""/prefix//////////////////////"", ""last response"");\n        Assert.assertEquals(""last response"", pathMatcher.getPrefixPath(""prefix""));\n        Assert.assertEquals(""last response"", pathMatcher.getPrefixPath(""/prefix""));\n        Assert.assertEquals(""last response"", pathMatcher.getPrefixPath(""/prefix/""));\n\n        pathMatcher.clearPaths();\n        Assert.assertNull(pathMatcher.getPrefixPath(""prefix""));\n        Assert.assertNull(pathMatcher.getPrefixPath(""/prefix""));\n        Assert.assertNull(pathMatcher.getPrefixPath(""/prefix/""));\n    }\n']",prefix;new;path;response;Path;prefix;Prefix;different;response;prefix,4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.840069770812988, -5.727581024169922, -6.308094024658203, -5.307072639465332, -5.504151821136475, -0.017157692462205887]",0.9829886555671692
3,"['    @Test\n    public void testSimpleMatchCase() {\n\n        PathMatcher<String> pathMatcher = new PathMatcher<>();\n\n        pathMatcher.addPrefixPath(""prefix"", ""response"");\n        Assert.assertEquals(""response"", pathMatcher.match(""/prefix"").getValue());\n        Assert.assertEquals(""response"", pathMatcher.match(""/prefix/"").getValue());\n\n        pathMatcher.addPrefixPath(""/prefix"", ""new response"");\n        Assert.assertEquals(""new response"", pathMatcher.match(""/prefix"").getValue());\n        Assert.assertEquals(""new response"", pathMatcher.match(""/prefix/"").getValue());\n\n        pathMatcher.addPrefixPath(""/prefix/"", ""different response"");\n        Assert.assertEquals(""different response"", pathMatcher.match(""/prefix"").getValue());\n        Assert.assertEquals(""different response"", pathMatcher.match(""/prefix/"").getValue());\n\n        pathMatcher.addPrefixPath(""/prefix//////////////////////"", ""last response"");\n        Assert.assertEquals(""last response"", pathMatcher.match(""/prefix"").getValue());\n        Assert.assertEquals(""last response"", pathMatcher.match(""/prefix/"").getValue());\n\n        pathMatcher.clearPaths();\n        Assert.assertNull(pathMatcher.match(""/prefix"").getValue());\n        Assert.assertNull(pathMatcher.match(""/prefix/"").getValue());\n    }\n']",clear;Path;Matcher;prefix;prefix;prefix;Path;prefix;Path;prefix,1.5133991837501526e-09;1.3969838619232178e-09;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.845281600952148, -5.73170804977417, -6.301131725311279, -5.298576354980469, -5.496075630187988, -0.017218157649040222]",0.9829291105270386
3,"['    @Test\n    public void testSimpleDefaultCase() {\n\n        PathMatcher<String> pathMatcher = new PathMatcher<>();\n\n        pathMatcher.addPrefixPath(""/"", ""default"");\n        Assert.assertEquals(""default"", pathMatcher.getPrefixPath(""/""));\n        Assert.assertEquals(""default"", pathMatcher.match(""/"").getValue());\n\n        pathMatcher.addPrefixPath(""//////"", ""needs normalize default"");\n        Assert.assertEquals(""needs normalize default"", pathMatcher.getPrefixPath(""/""));\n        Assert.assertEquals(""needs normalize default"", pathMatcher.match(""/"").getValue());\n\n        pathMatcher.clearPaths();\n        Assert.assertNull(pathMatcher.getPrefixPath(""/""));\n    }\n']",Prefix;Case;Prefix;clear;needs;normalize;Assert;Assert;default;path,1.1350493878126144e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1100277081131935e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.839554309844971, -5.720950603485107, -6.277777194976807, -5.326113224029541, -5.448297023773193, -0.01738101616501808]",0.9827691912651062
3,"['    @Test\n    public void testDefaultFallthrough() {\n\n        PathMatcher<String> pathMatcher = new PathMatcher<>(""default"");\n\n        // check defaults\n        Assert.assertEquals(""default"", pathMatcher.getPrefixPath(""/""));\n        Assert.assertEquals(""default"", pathMatcher.match(""/"").getValue());\n\n        // add a few items\n        pathMatcher.addPrefixPath(""/test1"", ""test1"");\n        pathMatcher.addPrefixPath(""/test2"", ""test2"");\n        pathMatcher.addPrefixPath(""/test3"", ""test3"");\n        pathMatcher.addPrefixPath(""/test4"", ""test4"");\n\n        // check matching with no matches\n        Assert.assertEquals(""default"", pathMatcher.match(""/adsfasdfdsaf"").getValue());\n        Assert.assertEquals(""default"", pathMatcher.match(""/   "").getValue());\n        Assert.assertEquals(""default"", pathMatcher.match(""/drooadfas"").getValue());\n        Assert.assertEquals(""default"", pathMatcher.match(""/thing/thing"").getValue());\n        Assert.assertEquals(""default"", pathMatcher.match("""").getValue());\n\n        // check that matching actual matches still works\n        Assert.assertEquals(""test1"", pathMatcher.match(""/test1"").getValue());\n        Assert.assertEquals(""test2"", pathMatcher.match(""/test2"").getValue());\n        Assert.assertEquals(""test3"", pathMatcher.match(""/test3"").getValue());\n        Assert.assertEquals(""test4"", pathMatcher.match(""/test4"").getValue());\n    }\n']",Fallthrough;Matcher;Prefix;asdfdsaf;Prefix;default;Path;match;path;Path,6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.864837169647217, -5.738987445831299, -6.32255220413208, -5.327663898468018, -5.523202419281006, -0.016840316355228424]",0.9833006858825684
3,"['    @Test\n    public void testDecodingWithEncodedAndDecodedSlashAndSlashDecodingDisabled() throws Exception {\n        String url = ""http://localhost:3001/by-path/wild%20card/wild%28west%29/wild"" + spaceCode + ""wolf"";\n\n        final String result = URLUtils.decode(url, Charset.defaultCharset().name(), false, new StringBuilder());\n        assertEquals(""http://localhost:3001/by-path/wild card/wild(west)/wild"" + spaceCode + ""wolf"", result);\n    }\n']",Decoding;Charset;URLUtils;Decoded;Charset;card;path;http;wild;url,2.444721758365631e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.943117618560791, -5.827715873718262, -6.483893394470215, -5.493927478790283, -5.548941612243652, -0.015214814804494381]",0.9849002361297607
3,"['    @Test\n    public void testDecodingURLMustNotMutateSpaceSymbolsCaseIfSpaceDecodingDisabled() throws Exception {\n        final String url = ""http://localhost:3001/wild"" + spaceCode + ""west"";\n\n        final String result = URLUtils.decode(url, Charset.defaultCharset().name(), false, new StringBuilder());\n        assertEquals(url, result);\n    }\n']",Case;Code;wild;Exception;Space;Disabled;Charset;Builder;west;URLUtils,2.561137080192566e-09;8.731149137020111e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.905057430267334, -5.789782524108887, -6.428203105926514, -5.50381326675415, -5.520184516906738, -0.015597025863826275]",0.9845240712165833
3,"['    @Test\n    public void testIsAbsoluteUrlRecognizingAbsolutUrls() {\n        assertTrue(URLUtils.isAbsoluteUrl(""https://some.valid.url:8080/path?query=val""));\n        assertTrue(URLUtils.isAbsoluteUrl(""http://some.valid.url:8080/path?query=val""));\n        assertTrue(URLUtils.isAbsoluteUrl(""http://some.valid.url""));\n    }\n']",Urls;Absolut;Url;url;Url;Recognizing;query;some;URLUtils;valid,1.5425030142068863e-09;9.89530235528946e-10;6.984919309616089e-10;6.402842700481415e-10;5.384208634495735e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10,5,5,"[-5.88045597076416, -5.795478343963623, -6.384048938751221, -5.433033466339111, -5.471659183502197, -0.01622801274061203]",0.9839028120040894
3,"['    @Test\n    public void testIsAbsoluteUrlRecognizingAppUrls() {\n        assertTrue(URLUtils.isAbsoluteUrl(""com.example.app:/oauth2redirect/example-provider""));\n        assertTrue(URLUtils.isAbsoluteUrl(""com.example.app:/oauth2redirect/example-provider?query=val""));\n    }\n']",Urls;redirect;Absolute;Url;app;provider;example;oauth;example;Url,2.9685907065868378e-09;2.444721758365631e-09;1.1641532182693481e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.1641532182693481e-10;0.0,5,5,"[-5.911191463470459, -5.823199272155762, -6.451919078826904, -5.520263671875, -5.487918853759766, -0.015505360439419746]",0.9846142530441284
3,"['    @Test\n    public void testIsAbsoluteUrlRecognizingRelativeUrls() {\n        assertFalse(URLUtils.isAbsoluteUrl(""relative""));\n        assertFalse(URLUtils.isAbsoluteUrl(""relative/path""));\n        assertFalse(URLUtils.isAbsoluteUrl(""relative/path?query=val""));\n        assertFalse(URLUtils.isAbsoluteUrl(""/root/relative/path""));\n    }\n']",val;Url;Url;URLUtils;relative;Absolute;Url;Absolute;URLUtils;query,1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.83940015733242e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.883205413818359, -5.786781311035156, -6.380404949188232, -5.42341423034668, -5.482514381408691, -0.01625041477382183]",0.9838809370994568
3,"['    @Test\n    public void testIsAbsoluteUrlRecognizingEmptyOrNullAsRelative() {\n        assertFalse(URLUtils.isAbsoluteUrl(null));\n        assertFalse(URLUtils.isAbsoluteUrl(""""));\n    }\n']",Url;URLUtils;Absolute;False;Or;null;Recognizing;Absolute;Url;False,3.958120942115784e-09;1.076841726899147e-09;9.022187441587448e-10;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.914522171020508, -5.800081253051758, -6.4118475914001465, -5.475556373596191, -5.488580226898193, -0.01581530086696148]",0.9843090772628784
3,"['    @Test\n    public void testIsAbsoluteUrlIgnoresSyntaxErrorsAreNotAbsolute() {\n        assertFalse(URLUtils.isAbsoluteUrl("":""));\n    }\n']",Url;Absolute;Syntax;False;Are;URLUtils;Not;Absolute;Absolute;Ignores,2.3283064365386963e-09;1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;3.7834979593753815e-10;-1.7462298274040222e-10;-3.4924596548080444e-10;-8.440110832452774e-10;-9.313225746154785e-10,5,5,"[-5.924332141876221, -5.8203229904174805, -6.4444804191589355, -5.529747009277344, -5.47410249710083, -0.015510172583162785]",0.9846094846725464
3,"['    @Test\n    public void testParsingSetCookieHeaderV0() {\n\n        Cookie cookie = Cookies.parseSetCookieHeader(""CUSTOMER=WILE_E_COYOTE; path=/; expires=Wednesday, 09-Nov-99 23:12:40 GMT"");\n        Assert.assertEquals(""CUSTOMER"", cookie.getName());\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n        Assert.assertEquals(""/"", cookie.getPath());\n        Assert.assertEquals(date(1999, 11, 9, 23, 12, 40), cookie.getExpires());\n\n\n        cookie = Cookies.parseSetCookieHeader(""SHIPPING=FEDEX; path=/foo; secure"");\n        Assert.assertEquals(""SHIPPING"", cookie.getName());\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n        Assert.assertEquals(""/foo"", cookie.getPath());\n        Assert.assertTrue(cookie.isSecure());\n\n        cookie = Cookies.parseSetCookieHeader(""SHIPPING=FEDEX"");\n        Assert.assertEquals(""SHIPPING"", cookie.getName());\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n    }\n']",foo;arsing;Header;Cookie;Cookies;ookie;expires;Nov;Path;cookie,9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.835822105407715, -5.687644004821777, -6.318423271179199, -5.3902788162231445, -5.531190872192383, -0.016773264855146408]",0.9833666086196899
3,"['    @Test\n    public void testParsingSetCookieHeaderV1() {\n        Cookie cookie = Cookies.parseSetCookieHeader(""Customer=\\""WILE_E_COYOTE\\""; Version=\\""1\\""; Path=\\""/acme\\"""");\n        Assert.assertEquals(""Customer"", cookie.getName());\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n        Assert.assertEquals(""/acme"", cookie.getPath());\n        Assert.assertEquals(1, cookie.getVersion());\n\n\n        cookie = Cookies.parseSetCookieHeader(""SHIPPING=\\""FEDEX\\""; path=\\""/foo\\""; secure; Version=\\""1\\"";"");\n        Assert.assertEquals(""SHIPPING"", cookie.getName());\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n        Assert.assertEquals(""/foo"", cookie.getPath());\n        Assert.assertTrue(cookie.isSecure());\n        Assert.assertEquals(1, cookie.getVersion());\n    }\n']",SHIPPING;foo;Header;cookie;Cookies;Customer;cookie;EDEX;Set;Customer,1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.853333950042725, -5.742074012756348, -6.330783843994141, -5.35736083984375, -5.509347438812256, -0.01676083728671074]",0.9833788275718689
3,"['    @Test\n    public void testInvalidCookie() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(1, false, Arrays.asList(""\\""; CUSTOMER=WILE_E_COYOTE""));\n\n        Assert.assertFalse(cookies.containsKey(""$Domain""));\n        Assert.assertFalse(cookies.containsKey(""$Version""));\n        Assert.assertFalse(cookies.containsKey(""$Path""));\n\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertEquals(""CUSTOMER"", cookie.getName());\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n\n        cookies = Cookies.parseRequestCookies(1, false, Arrays.asList(""; CUSTOMER=WILE_E_COYOTE""));\n\n        cookie = cookies.get(""CUSTOMER"");\n        Assert.assertEquals(""CUSTOMER"", cookie.getName());\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n\n        cookies = Cookies.parseRequestCookies(1, false, Arrays.asList(""foobar; CUSTOMER=WILE_E_COYOTE""));\n\n        cookie = cookies.get(""CUSTOMER"");\n        Assert.assertEquals(""CUSTOMER"", cookie.getName());\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n    }\n']",ookie;Cookies;cookies;USTOMER;Path;parse;cookie;Cookies;CO;cookie,1.1641532182693481e-09;1.0477378964424133e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.822686195373535, -5.697680473327637, -6.281431198120117, -5.329375743865967, -5.495451927185059, -0.0172851774841547]",0.9828633666038513
3,"['    @Test\n    public void testRequestCookieDomainPathVersion() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(1, false, Arrays.asList(\n                ""CUSTOMER=WILE_E_COYOTE; $Domain=LOONEY_TUNES; $Version=1; $Path=/""));\n\n        Assert.assertFalse(cookies.containsKey(""$Domain""));\n        Assert.assertFalse(cookies.containsKey(""$Version""));\n        Assert.assertFalse(cookies.containsKey(""$Path""));\n\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertEquals(""CUSTOMER"", cookie.getName());\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());\n        Assert.assertEquals(1, cookie.getVersion());\n        Assert.assertEquals(""/"", cookie.getPath());\n    }\n']",Domain;Cookies;cookies;LOONEY;Version;Request;OTE;OTE;CO;cookie,1.6298145055770874e-09;1.1641532182693481e-09;1.1059455573558807e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.837398052215576, -5.709381580352783, -6.3048858642578125, -5.380428791046143, -5.4924516677856445, -0.01692459173500538]",0.9832179546356201
3,"['    @Test\n    public void testMultipleRequestCookies() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(\n                ""CUSTOMER=WILE_E_COYOTE; $Domain=LOONEY_TUNES; $Version=1; $Path=/; SHIPPING=FEDEX""));\n\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertEquals(""CUSTOMER"", cookie.getName());\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());\n        Assert.assertEquals(1, cookie.getVersion());\n        Assert.assertEquals(""/"", cookie.getPath());\n\n        cookie = cookies.get(""SHIPPING"");\n        Assert.assertEquals(""SHIPPING"", cookie.getName());\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());\n        Assert.assertEquals(1, cookie.getVersion());\n        Assert.assertEquals(""/"", cookie.getPath());\n    }\n']",USTOMER;USTOMER;Cookies;Multiple;SHIPPING;Request;Cookie;UNES;as;WILE,1.8335413187742233e-09;9.458744898438454e-10;8.87666828930378e-10;6.984919309616089e-10;4.94765117764473e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.4374458007514477e-10,5,5,"[-5.828344345092773, -5.709414482116699, -6.302476406097412, -5.355413913726807, -5.494369983673096, -0.01706652157008648]",0.9830783009529114
3,"['    @Test\n    public void testEqualsInValueNotAllowed() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(""CUSTOMER=WILE_E_COYOTE=THE_COYOTE; SHIPPING=FEDEX""));\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n        cookie = cookies.get(""SHIPPING"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n    }\n']",Cookies;cookies;SHIPPING;Cookie;EDEX;Cookie;List;Map;Value;SHIPPING,1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.870199203491211, -5.770012378692627, -6.347674369812012, -5.399447441101074, -5.493061542510986, -0.01646186225116253]",0.9836729168891907
3,"['    @Test\n    public void testEmptyCookieNames() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(4, false, Arrays.asList(""=foo; CUSTOMER=WILE_E_COYOTE=THE_COYOTE; =foobar; SHIPPING=FEDEX; =bar""));\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n        cookie = cookies.get(""SHIPPING"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n        cookie = cookies.get("""");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""foo"", cookie.getValue());\n    }\n']",Names;Cookie;Empty;cookie;WILE;cookie;SHIPPING;CO;as;cookies,1.280568540096283e-09;5.820766091346741e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.83553409576416, -5.728429794311523, -6.311322212219238, -5.370904445648193, -5.483914375305176, -0.016935257241129875]",0.9832073450088501
3,"['    @Test\n    public void testEqualsInValueAllowed() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(1, true, Arrays.asList(""CUSTOMER=WILE_E_COYOTE=THE_COYOTE""));\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""WILE_E_COYOTE=THE_COYOTE"", cookie.getValue());\n    }\n']",Allowed;Cookies;WILE;cookies;get;USTOMER;Assert;THE;as;CO,2.3283064365386963e-09;1.6298145055770874e-09;1.5133991837501526e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.87533712387085, -5.769519329071045, -6.352747440338135, -5.446022987365723, -5.455211639404297, -0.01639220491051674]",0.9837415218353271
3,"['    @Test\n    public void testEqualsInValueAllowedInQuotedValue() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, true, Arrays.asList(""CUSTOMER=\\""WILE_E_COYOTE=THE_COYOTE\\""; SHIPPING=FEDEX"" ));\n        Assert.assertEquals(2, cookies.size());\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""WILE_E_COYOTE=THE_COYOTE"", cookie.getValue());\n        cookie = cookies.get(""SHIPPING"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n    }\n']",USTOMER;SHIPPING;Cookies;Value;Cookie;Assert;USTOMER;CO;EDEX;WILE,1.7462298274040222e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.280568540096283e-09;1.280568540096283e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10,5,5,"[-5.865377426147461, -5.749417781829834, -6.3465094566345215, -5.3994879722595215, -5.506155014038086, -0.01648918353021145]",0.983646035194397
3,"['    @Test\n    public void testEqualsInValueNotAllowedInQuotedValue() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(""CUSTOMER=\\""WILE_E_COYOTE=THE_COYOTE\\""; SHIPPING=FEDEX"" ));\n        Assert.assertEquals(2, cookies.size());\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""WILE_E_COYOTE=THE_COYOTE"", cookie.getValue());\n        cookie = cookies.get(""SHIPPING"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n    }\n']",USTOMER;Cookie;SHIPPING;cookies;EDEX;Request;Equals;get;USTOMER;cookies,6.05359673500061e-09;1.57160684466362e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.864989280700684, -5.7546000480651855, -6.346419811248779, -5.393689155578613, -5.505000114440918, -0.016505248844623566]",0.9836302399635315
3,"['    @Test\n    public void testCommaSeparatedCookies() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(""CUSTOMER=\\""WILE_E_COYOTE\\"", SHIPPING=FEDEX"" ), true);\n        Assert.assertEquals(2, cookies.size());\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n        cookie = cookies.get(""SHIPPING"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n\n        //also make sure semi colon works as normal\n        cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(""CUSTOMER=\\""WILE_E_COYOTE\\""; SHIPPING=FEDEX"" ), true);\n        Assert.assertEquals(2, cookies.size());\n        cookie = cookies.get(""CUSTOMER"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());\n        cookie = cookies.get(""SHIPPING"");\n        Assert.assertNotNull(cookie);\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n    }\n']",Cookies;USTOMER;SHIPPING;USTOMER;Comm;semi;size;Cookies;Cookies;EDEX,1.862645149230957e-09;1.3969838619232178e-09;1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10,5,5,"[-5.845676898956299, -5.709346294403076, -6.3204121589660645, -5.3538312911987305, -5.535934925079346, -0.016819685697555542]",0.9833210706710815
3,"['    @Test\n    public void testSimpleJSONObjectInRequestCookies() {\n        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, true, Arrays.asList(\n                ""CUSTOMER={\\""v1\\"":1, \\""id\\"":\\""some_unique_id\\"", \\""c\\"":\\""http://www.google.com?q=love me\\""};""\n                + "" $Domain=LOONEY_TUNES; $Version=1; $Path=/; SHIPPING=FEDEX""));\n\n        Cookie cookie = cookies.get(""CUSTOMER"");\n        Assert.assertEquals(""CUSTOMER"", cookie.getName());\n        Assert.assertEquals(""{\\""v1\\"":1, \\""id\\"":\\""some_unique_id\\"", \\""c\\"":\\""http://www.google.com?q=love me\\""}"",\n               cookie.getValue());\n        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());\n        Assert.assertEquals(1, cookie.getVersion());\n        Assert.assertEquals(""/"", cookie.getPath());\n\n        cookie = cookies.get(""SHIPPING"");\n        Assert.assertEquals(""SHIPPING"", cookie.getName());\n        Assert.assertEquals(""FEDEX"", cookie.getValue());\n        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());\n        Assert.assertEquals(1, cookie.getVersion());\n        Assert.assertEquals(""/"", cookie.getPath());\n    }\n']",SHIPPING;Cookie;cookies;JSONObject;LOONEY;Request;EDEX;SHIPPING;cookies;USTOMER,1.8917489796876907e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.824131965637207, -5.701879501342773, -6.2826056480407715, -5.321077346801758, -5.506826877593994, -0.017258113250136375]",0.9828899502754211
3,"['  @Test\n  public void testEvaluateWithoutRun() throws HiveException {\n    // init udf\n    Udf udf = new Udf();\n    ObjectInspector[] initArguments = {queryOI, argOI};\n    udf.initialize(initArguments);\n    //set arguments\n    DeferredObject queryObj = new DeferredJavaObject(""hello(:1)"");\n      DeferredObject argObj = new DeferredJavaObject(""name"");\n      DeferredObject[] argumentsObj = {queryObj, argObj};\n      \n      // init exec and set parameters, included\n      udf.initExec(argumentsObj);\n      udf.setParameters(argumentsObj);\n      \n      // checking var exists and its value is right\n      Var var = udf.exec.findVariable("":1"");\n      Assert.assertNotNull(var);\n      String val = (String) var.value;\n      Assert.assertEquals(val, ""name"");\n  }\n']",Hive;val;init;val;checking;df;hello;query;Exec;Object,9.313225746154785e-10;3.4924596548080444e-10;3.055902197957039e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.853809833526611, -5.722358226776123, -6.327429294586182, -5.374889850616455, -5.538315296173096, -0.016629768535494804]",0.9835078716278076
3,"['  @Test\n  public void testCreateTableDb2() throws Exception {\n    run(""create_table_db2"");\n  }\n']",create;Db;Exception;db;run;Table;table;Create,1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;0.0;-2.9103830456733704e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-5.898284435272217, -5.763084888458252, -6.394646167755127, -5.528210639953613, -5.399861812591553, -0.01617652177810669]",0.983953595161438
3,"['  @Test\n  public void testCreateTableMssql() throws Exception {\n    run(""create_table_mssql"");\n  }\n']",ssql;Exception;Table;create;run;table;Create;ssql,2.0954757928848267e-09;3.4924596548080444e-10;0.0;0.0;-2.3283064365386963e-10;-1.1641532182693481e-09;-1.280568540096283e-09;-3.725290298461914e-09,5,5,"[-5.933291435241699, -5.788086891174316, -6.4542036056518555, -5.566617012023926, -5.443767070770264, -0.015554421581327915]",0.9845659136772156
3,"['  @Test\n  public void testCreateTableMssql2() throws Exception {\n    run(""create_table_mssql2"");\n  }\n']",ssql;create;Exception;table;Create;run;Table;ssql,3.725290298461914e-09;2.561137080192566e-09;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-2.852175384759903e-09,5,5,"[-5.963361740112305, -5.815901279449463, -6.4793901443481445, -5.575468063354492, -5.468384265899658, -0.015208474360406399]",0.9849064946174622
3,"['  @Test\n  public void testCreateTableMysql() throws Exception {\n    run(""create_table_mysql"");\n  }\n']",run;Exception;Table;Create;create;ysql;mysql;table,9.313225746154785e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-4.94765117764473e-10;-1.0477378964424133e-09;-1.6298145055770874e-09;-1.862645149230957e-09,5,5,"[-5.928170680999756, -5.782157897949219, -6.441900253295898, -5.559721946716309, -5.442245960235596, -0.015640098601579666]",0.9844815731048584
3,"['  @Test\n  public void testCreateTableOra() throws Exception {\n    run(""create_table_ora"");\n  }\n']",run;Table;Exception;ora;Create;table;create;ra,8.381903171539307e-09;3.725290298461914e-09;-4.656612873077393e-10;-9.313225746154785e-10;-1.862645149230957e-09;-2.3283064365386963e-09;-3.026798367500305e-09;-9.313225746154785e-09,5,5,"[-5.8916521072387695, -5.760390758514404, -6.386561870574951, -5.5226263999938965, -5.391303539276123, -0.01627950184047222]",0.9838522672653198
3,"['  @Test\n  public void testCreateTableOra2() throws Exception {\n    run(""create_table_ora2"");\n  }\n']",Table;Create;run;ora;table;Exception;create;ra,7.450580596923828e-09;5.587935447692871e-09;4.6566128730773926e-09;3.3760443329811096e-09;9.313225746154785e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.587935447692871e-09,5,5,"[-5.882203102111816, -5.745029449462891, -6.363865852355957, -5.5043792724609375, -5.380163192749023, -0.016521664336323738]",0.9836140871047974
3,"['  @Test\n  public void testCreateTablePg() throws Exception {\n    run(""create_table_pg"");\n  }\n']",Pg;table;pg;Table;Create;Exception;run;create,1.3969838619232178e-09;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;0.0;-8.731149137020111e-11;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.885799407958984, -5.742509841918945, -6.3770928382873535, -5.527085304260254, -5.386263847351074, -0.01637531816959381]",0.9837580323219299
3,"['  @Test\n  public void testCreateTableTd() throws Exception {\n    run(""create_table_td"");\n  }\n']",create;Table;td;Exception;run;table;Create,1.1641532182693481e-09;1.7462298274040222e-10;-5.820766091346741e-11;-4.0745362639427185e-10;-1.1641532182693481e-09;-1.2223608791828156e-09;-1.4551915228366852e-09,5,5,"[-5.890170097351074, -5.755770683288574, -6.381905555725098, -5.521824836730957, -5.385988235473633, -0.01633450761437416]",0.9837982654571533
3,"['  @Test\n  public void testDeleteAll() throws Exception {\n    run(""delete_all"");\n  }\n']",run;Exception;delete;All;all;Delete,1.280568540096283e-09;4.94765117764473e-10;-4.656612873077393e-10;-5.820766091346741e-10;-9.313225746154785e-10;-1.6298145055770874e-09,5,5,"[-5.86380672454834, -5.724282741546631, -6.3381667137146, -5.490243434906006, -5.367143630981445, -0.01680843159556389]",0.9833320379257202
3,"['  @Test\n  public void testInsertMysql() throws Exception {\n    run(""insert_mysql"");\n  }\n']",ysql;Exception;run;insert;mysql;Insert,6.984919309616089e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.3969838619232178e-09,5,5,"[-5.910803318023682, -5.745144844055176, -6.410417556762695, -5.547952175140381, -5.4210333824157715, -0.015997862443327904]",0.9841294288635254
3,"['  @Test\n  public void testSelect() throws Exception {\n    run(""select"");\n  }\n']",run;Select;Exception;select,1.280568540096283e-09;-2.3283064365386963e-10;-2.9103830456733704e-10;-9.313225746154785e-10,5,5,"[-5.861588478088379, -5.711852073669434, -6.340880393981934, -5.502730846405029, -5.357266902923584, -0.01684664562344551]",0.9832946062088013
3,"['  @Test\n  public void testSelectDb2() throws Exception {\n    run(""select_db2"");\n  }\n']",db;Select;Exception;select;Db;run,1.862645149230957e-09;1.7462298274040222e-09;6.984919309616089e-10;4.656612873077393e-10;0.0;-3.259629011154175e-09,5,5,"[-5.8965864181518555, -5.7508955001831055, -6.3899383544921875, -5.5318450927734375, -5.387901306152344, -0.01626894623041153]",0.9838626980781555
3,"['  @Test\n  public void testSelectTeradata() throws Exception {\n    run(""select_teradata"");\n  }\n']",Teradata;run;select;Exception;teradata;Select,2.7008354663848877e-08;1.1175870895385742e-08;8.381903171539307e-09;-3.725290298461914e-09;-5.587935447692871e-09;-1.0011717677116394e-08,5,5,"[-5.906023979187012, -5.778417587280273, -6.415244102478027, -5.551331520080566, -5.3925275802612305, -0.01601334847509861]",0.9841142892837524
3,"['  @Test\n  public void testUpdate() throws Exception {\n    run(""update"");\n  }\n']",run;update;Update;Exception,1.862645149230957e-09;9.313225746154785e-10;-9.313225746154785e-10;-2.444721758365631e-09,5,5,"[-5.842353820800781, -5.686722755432129, -6.307527542114258, -5.478714466094971, -5.343871116638184, -0.017214640974998474]",0.9829326868057251
3,"['  @Test\n  public void testAdd() throws Exception {\n    run(""add"");\n  }\n']",Add;Exception;run;add,3.725290298461914e-09;-4.656612873077393e-10;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-5.839380264282227, -5.686783790588379, -6.307261943817139, -5.4781694412231445, -5.34044075012207, -0.01724264584481716]",0.9829051494598389
3,"['  @Test\n  public void testAssign() throws Exception {\n    run(""assign"");\n  }\n']",Assign;Exception;run;assign,1.6298145055770874e-09;9.313225746154785e-10;-1.7462298274040222e-09;-1.8044374883174896e-09,5,5,"[-5.866231441497803, -5.725903034210205, -6.358355522155762, -5.507574081420898, -5.379683494567871, -0.01662883162498474]",0.9835086464881897
3,"['  @Test\n  public void testBool() throws Exception {\n    run(""bool"");\n  }\n']",ool;Exception;bool;run,0.0;-9.313225746154785e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.865296840667725, -5.734653949737549, -6.344883441925049, -5.490764617919922, -5.363565444946289, -0.0167726781219244]",0.9833672046661377
3,"['  @Test\n  public void testBoolExpr() throws Exception {\n    run(""bool_expr"");\n  }\n']",Expr;run;expr;Exception;ool;bool,1.1641532182693481e-09;4.656612873077393e-10;-2.3283064365386963e-10;-3.7834979593753815e-10;-1.3969838619232178e-09;-2.2118911147117615e-09,5,5,"[-5.888294219970703, -5.751524448394775, -6.3796586990356445, -5.513552188873291, -5.388628005981445, -0.016378719359636307]",0.9837546944618225
3,"['  @Test\n  public void testBreak() throws Exception {\n    run(""break"");\n  }\n']",break;Break;Exception;run,8.731149137020111e-11;-4.656612873077393e-10;-5.820766091346741e-10;-1.0477378964424133e-09,5,5,"[-5.835115432739258, -5.685512065887451, -6.305569648742676, -5.48109245300293, -5.343807697296143, -0.017234092578291893]",0.9829135537147522
3,"['  @Test\n  public void testCase() throws Exception {\n    run(""case"");\n  }\n']",Exception;Case;case;run,5.238689482212067e-10;2.3283064365386963e-10;-1.7462298274040222e-10;-4.656612873077393e-10,5,5,"[-5.856239318847656, -5.710831165313721, -6.345853805541992, -5.51033878326416, -5.35831880569458, -0.016820153221488]",0.9833205342292786
3,"['  @Test\n  public void testCast() throws Exception {\n    run(""cast"");\n  }\n']",Cast;Exception;cast;run,1.862645149230957e-09;4.220055416226387e-10;5.820766091346741e-11;-4.656612873077393e-10,5,5,"[-5.858752727508545, -5.713205337524414, -6.345291614532471, -5.502831935882568, -5.362100124359131, -0.01681874692440033]",0.9833219051361084
3,"['  @Test\n  public void testCast2() throws Exception {\n    run(""cast2"");\n  }\n']",Cast;cast;Exception;run,4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;-1.6298145055770874e-09,5,5,"[-5.840266227722168, -5.691041469573975, -6.312070846557617, -5.485349655151367, -5.340184688568115, -0.017187340185046196]",0.982959508895874
3,"['  @Test\n  public void testChar() throws Exception {\n    run(""char"");\n  }\n']",Char;char;run;Exception,2.561137080192566e-09;6.984919309616089e-10;2.3283064365386963e-10;-9.313225746154785e-10,5,5,"[-5.892586708068848, -5.746583938598633, -6.375733852386475, -5.526245594024658, -5.385762691497803, -0.016351042315363884]",0.9837819337844849
3,"['  @Test\n  public void testCoalesce() throws Exception {\n    run(""coalesce"");\n  }\n']",Coalesce;run;Exception;coalesce,6.984919309616089e-10;4.656612873077393e-10;0.0;-2.5029294192790985e-09,5,5,"[-5.880216121673584, -5.703503131866455, -6.357517719268799, -5.505263805389404, -5.382842540740967, -0.016660135239362717]",0.9834778904914856
3,"['  @Test\n  public void testConcat() throws Exception {\n    run(""concat"");\n  }\n']",concat;Exception;run;Concat,1.6298145055770874e-09;8.149072527885437e-10;-2.6193447411060333e-09;-1.3737007975578308e-08,5,5,"[-5.857789993286133, -5.700324058532715, -6.329077243804932, -5.494769096374512, -5.3529744148254395, -0.016971591860055923]",0.9831716418266296
3,"['  @Test\n  public void testCreateFunction() throws Exception {\n    run(""create_function"");\n  }\n']",create;function;Create;Function;Exception;run,2.3283064365386963e-09;2.3283064365386963e-09;1.6298145055770874e-09;0.0;-1.0477378964424133e-09;-1.3969838619232178e-09,5,5,"[-5.8712358474731445, -5.737371444702148, -6.3653883934021, -5.508856296539307, -5.379086971282959, -0.016561882570385933]",0.9835745096206665
3,"['  @Test\n  public void testCreateFunction2() throws Exception {\n    run(""create_function2"");\n  }\n']",create;function;Create;Exception;Function;run,5.587935447692871e-09;4.6566128730773926e-09;-2.3283064365386963e-10;-3.4924596548080444e-10;-1.3969838619232178e-09;-3.4924596548080444e-09,5,5,"[-5.875874996185303, -5.737306118011475, -6.361767292022705, -5.502861499786377, -5.383345127105713, -0.016560006886720657]",0.9835763573646545
3,"['  @Test\n  public void testCreateFunction3() throws Exception {\n    run(""create_function3"");\n  }\n']",Function;function;Exception;Create;run;create,3.725290298461914e-09;9.313225746154785e-10;4.656612873077393e-10;-4.656612873077393e-10;-1.1641532182693481e-09;-2.6775524020195007e-09,5,5,"[-5.870905876159668, -5.728621959686279, -6.359878063201904, -5.504014492034912, -5.375726699829102, -0.016637155786156654]",0.983500599861145
3,"['  @Test\n  public void testCreateFunction4() throws Exception {\n    run(""create_function4"");\n  }\n']",run;Create;Function;Exception;create;function,1.3969838619232178e-09;0.0;-1.1641532182693481e-10;-4.656612873077393e-10;-1.6298145055770874e-09;-2.3283064365386963e-09,5,5,"[-5.889609336853027, -5.754422664642334, -6.391007900238037, -5.521833419799805, -5.405831813812256, -0.01623317413032055]",0.9838977456092834
3,"['  @Test\n  public void testCreateFunction5() throws Exception {\n    run(""create_function5"");\n  }\n']",function;create;Exception;Function;Create;run,1.862645149230957e-09;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.87823486328125, -5.74199104309082, -6.368749618530273, -5.508506774902344, -5.395898342132568, -0.01644427329301834]",0.9836903214454651
3,"['  @Test\n  public void testCreatePackage() throws Exception {\n    run(""create_package"");\n  }\n']",package;Create;run;Exception;Package;create,1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-5.861196994781494, -5.7173752784729, -6.336571216583252, -5.49329948425293, -5.3589701652526855, -0.016867978498339653]",0.9832735061645508
3,"['  @Test\n  public void testCreatePackage2() throws Exception {\n    run(""create_package2"");\n  }\n']",package;create;Create;run;Exception;Package,5.587935447692871e-09;3.725290298461914e-09;-2.3283064365386963e-10;-4.656612873077393e-10;-1.1059455573558807e-09;-1.862645149230957e-09,5,5,"[-5.86319637298584, -5.723344326019287, -6.339176177978516, -5.492341995239258, -5.36134672164917, -0.016830233857035637]",0.9833105802536011
3,"['  @Test\n  public void testCreatePackage3() throws Exception {\n    run(""create_package3"");\n  }\n']",create;run;Exception;Package;package;Create,1.862645149230957e-09;4.656612873077393e-10;1.4551915228366852e-10;0.0;0.0;-1.280568540096283e-09,5,5,"[-5.8516693115234375, -5.700131893157959, -6.320013046264648, -5.482021808624268, -5.348514556884766, -0.01708175614476204]",0.983063280582428
3,"['  @Test\n  public void testCreateProcedure() throws Exception {\n    run(""create_procedure"");\n  }\n']",run;procedure;Exception;create;Create;Procedure,1.3969838619232178e-09;1.2223608791828156e-09;5.529727786779404e-10;2.3283064365386963e-10;-4.656612873077393e-10;-2.7939677238464355e-09,5,5,"[-5.875185966491699, -5.7321858406066895, -6.362914085388184, -5.514307022094727, -5.377560138702393, -0.016556840389966965]",0.9835795760154724
3,"['  @Test\n  public void testCreateProcedure2() throws Exception {\n    run(""create_procedure2"");\n  }\n']",run;create;procedure;Exception;Procedure;Create,9.313225746154785e-10;8.149072527885437e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-1.2223608791828156e-09;-1.3387762010097504e-09,5,5,"[-5.891315460205078, -5.755364894866943, -6.377330780029297, -5.523554801940918, -5.39476203918457, -0.016292637214064598]",0.9838393926620483
3,"['  @Test\n  public void testCreateProcedure3() throws Exception {\n    run(""create_procedure3"");\n  }\n']",run;Procedure;Create;procedure;Exception;create,1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-8.149072527885437e-10,5,5,"[-5.890594005584717, -5.753233432769775, -6.381376266479492, -5.5228986740112305, -5.3928985595703125, -0.016305772587656975]",0.9838263392448425
3,"['  @Test\n  public void testCreateProcedure4() throws Exception {\n    run(""create_procedure4"");\n  }\n']",Create;procedure;create;Exception;run;Procedure,4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-7.101334631443024e-09,5,5,"[-5.895157814025879, -5.761064529418945, -6.388872146606445, -5.529244422912598, -5.4059600830078125, -0.016169482842087746]",0.9839606285095215
3,"['  @Test\n  public void testCreateProcedureNoParams() throws Exception {\n    run(""create_procedure_no_params"");\n  }\n']",run;No;Params;Exception;procedure;no;Create;params;create;Procedure,1.6298145055770874e-09;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;-4.3655745685100555e-10;-2.7939677238464355e-09;-2.9103830456733704e-09,5,5,"[-5.911614418029785, -5.79050350189209, -6.423361301422119, -5.553225517272949, -5.424918174743652, -0.01579183153808117]",0.9843322038650513
3,"['  @Test\n  public void testDatatypes() throws Exception {\n    run(""datatypes"");\n  }\n']",Datatypes;Exception;datatypes;run,2.444721758365631e-09;-1.1641532182693481e-10;-4.0745362639427185e-09;-4.6566128730773926e-09,5,5,"[-5.900073528289795, -5.782141208648682, -6.4040846824646, -5.528898239135742, -5.384525299072266, -0.016163500025868416]",0.9839665293693542
3,"['  @Test\n  public void testDate() throws Exception {\n    run(""date"");\n  }\n']",Exception;run;Date;date,0.0;-8.149072527885437e-10;-2.153683453798294e-09;-2.153683453798294e-09,5,5,"[-5.858882427215576, -5.70933198928833, -6.321718692779541, -5.499797821044922, -5.361713409423828, -0.016888374462723732]",0.9832533001899719
3,"['  @Test\n  public void testDbmsOutput() throws Exception {\n    run(""dbms_output"");\n  }\n']",run;dbms;output;Exception;Output;Dbms,9.313225746154785e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-5.8856353759765625, -5.731441974639893, -6.3672709465026855, -5.517712116241455, -5.381625175476074, -0.016488833352923393]",0.9836463928222656
3,"['  @Test\n  public void testDeclare() throws Exception {\n    run(""declare"");\n  }\n']",run;Exception;declare;Declare,1.6298145055770874e-09;0.0;0.0;-5.3551048040390015e-09,5,5,"[-5.86947774887085, -5.742157459259033, -6.376132488250732, -5.518117904663086, -5.397621154785156, -0.016408506780862808]",0.983725368976593
3,"['  @Test\n  public void testDeclare2() throws Exception {\n    run(""declare2"");\n  }\n']",declare;Exception;run;Declare,2.3283064365386963e-09;-4.511093720793724e-10;-1.3969838619232178e-09;-3.725290298461914e-09,5,5,"[-5.853099822998047, -5.699886322021484, -6.332792282104492, -5.499621391296387, -5.364410877227783, -0.01690501719713211]",0.983237087726593
3,"['  @Test\n  public void testDeclare3() throws Exception {\n    run(""declare3"");\n  }\n']",declare;run;Declare;Exception,9.89530235528946e-10;4.656612873077393e-10;-2.3283064365386963e-10;-5.238689482212067e-10,5,5,"[-5.85161018371582, -5.694179058074951, -6.332714557647705, -5.50022554397583, -5.3580827713012695, -0.01695682480931282]",0.9831862449645996
3,"['  @Test\n  public void testDeclareCondition() throws Exception {\n    run(""declare_condition"");\n  }\n']",run;condition;Condition;Declare;Exception;declare,9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-1.1641532182693481e-09,5,5,"[-5.87045955657959, -5.73046875, -6.364480495452881, -5.513556480407715, -5.3805413246154785, -0.016562234610319138]",0.9835741519927979
3,"['  @Test\n  public void testDeclareCondition2() throws Exception {\n    run(""declare_condition2"");\n  }\n']",Condition;run;Exception;declare;condition;Declare,1.3969838619232178e-09;9.313225746154785e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.1641532182693481e-09;-4.773028194904327e-09,5,5,"[-5.882843971252441, -5.74461030960083, -6.374300479888916, -5.51690149307251, -5.392300605773926, -0.016395019367337227]",0.9837385416030884
3,"['  @Test\n  public void testDecode() throws Exception {\n    run(""decode"");\n  }\n']",run;Exception;Decode;decode,1.280568540096283e-09;6.402842700481415e-10;2.3283064365386963e-10;-1.4551915228366852e-10,5,5,"[-5.841368198394775, -5.684287071228027, -6.306850910186768, -5.479618549346924, -5.3432817459106445, -0.017226124182343483]",0.982921302318573
3,"['  @Test\n  public void testEqual() throws Exception {\n    run(""equal"");\n  }\n']",qual;Exception;run;equal,4.656612873077393e-10;1.0186340659856796e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.848282814025879, -5.690242290496826, -6.316073894500732, -5.488908290863037, -5.3468708992004395, -0.0171115230768919]",0.9830339550971985
3,"['  @Test\n  public void testException() throws Exception {\n    run(""exception"");\n  }\n']",Exception;exception;run;Exception,1.0477378964424133e-09;2.3283064365386963e-10;-1.1641532182693481e-10;-1.2223608791828156e-09,5,5,"[-5.841324806213379, -5.6923112869262695, -6.306143760681152, -5.479188442230225, -5.333211898803711, -0.017250964418053627]",0.9828968644142151
3,"['  @Test\n  public void testExceptionDivideByZero() throws Exception {\n    run(""exception_divide_by_zero"");\n  }\n']",run;Exception;divide;By;zero;Zero;exception;Divide;Exception;by,4.423782229423523e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.6880221664905548e-09;1.6298145055770874e-09;9.313225746154785e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-4.656612873077393e-10,5,5,"[-5.88734769821167, -5.7253522872924805, -6.3585357666015625, -5.50719690322876, -5.3824262619018555, -0.016558833420276642]",0.9835774898529053
3,"['  @Test\n  public void testExit() throws Exception {\n    run(""exit"");\n  }\n']",run;Exception;Exit;exit,8.149072527885437e-10;2.9103830456733704e-10;0.0;-2.9103830456733704e-10,5,5,"[-5.838342666625977, -5.693657875061035, -6.309164047241211, -5.479925632476807, -5.341516494750977, -0.017205970361828804]",0.9829413294792175
3,"['  @Test\n  public void testExpr() throws Exception {\n    run(""expr"");\n  }\n']",run;Exception;expr;Expr,6.984919309616089e-10;-2.3283064365386963e-10;-1.3969838619232178e-09;-3.14321368932724e-09,5,5,"[-5.881824493408203, -5.736260414123535, -6.3843584060668945, -5.518425941467285, -5.404623031616211, -0.016345061361789703]",0.9837877750396729
3,"['  @Test\n  public void testFloat() throws Exception {\n    run(""float"");\n  }\n']",Exception;run;Float;float,0.0;-3.4924596548080444e-10;-1.1641532182693481e-09;-1.3969838619232178e-09,5,5,"[-5.874507427215576, -5.741641998291016, -6.353207588195801, -5.50878381729126, -5.368563175201416, -0.016609836369752884]",0.9835273623466492
3,"['  @Test\n  public void testForRange() throws Exception {\n    run(""for_range"");\n  }\n']",run;Range;For;Exception;range,4.190951585769653e-09;4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.8669962882995605, -5.715063095092773, -6.353368282318115, -5.516035079956055, -5.371791839599609, -0.016673969104886055]",0.9834643006324768
3,"['  @Test\n  public void testIf() throws Exception {\n    run(""if"");\n  }\n']",Exception;if;run,-1.1641532182693481e-10;-4.656612873077393e-10;-1.6298145055770874e-09,5,5,"[-5.852062225341797, -5.703514099121094, -6.332195281982422, -5.495843410491943, -5.365198612213135, -0.016908768564462662]",0.9832333922386169
3,"['  @Test\n  public void testIf2() throws Exception {\n    run(""if2"");\n  }\n']",run;if;Exception,1.3969838619232178e-09;9.313225746154785e-10;-3.7834979593753815e-10,5,5,"[-5.871542930603027, -5.721555709838867, -6.343164443969727, -5.498826503753662, -5.378328800201416, -0.016697650775313377]",0.9834409952163696
3,"['  @Test\n  public void testIf3Bteq() throws Exception {\n    run(""if3_bteq"");\n  }\n']",te;te;if;run;Exception,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;5.820766091346741e-11,5,5,"[-5.867680549621582, -5.711300849914551, -6.332643985748291, -5.4862871170043945, -5.369244575500488, -0.016857312992215157]",0.9832839965820312
3,"['  @Test\n  public void testInclude() throws Exception {\n    run(""include"");\n  }\n']",Include;include;Exception;run,1.1641532182693481e-09;0.0;-2.9103830456733704e-10;-3.4924596548080444e-10,5,5,"[-5.856195449829102, -5.71351957321167, -6.349122524261475, -5.506486415863037, -5.367543697357178, -0.016777366399765015]",0.98336261510849
3,"['  @Test\n  public void testInstr() throws Exception {\n    run(""instr"");\n  }\n']",Instr;instr;Exception;run,2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-10;-1.862645149230957e-09,5,5,"[-5.8486328125, -5.699902534484863, -6.326997756958008, -5.4954118728637695, -5.350307464599609, -0.0170136671513319]",0.9831302762031555
3,"['  @Test\n  public void testInterval() throws Exception {\n    run(""interval"");\n  }\n']",run;Interval;Exception;interval,8.149072527885437e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.863729953765869, -5.692405700683594, -6.3315300941467285, -5.498925685882568, -5.363956928253174, -0.016907010227441788]",0.9832351207733154
3,"['  @Test\n  public void testLang() throws Exception {\n    run(""lang"");\n  }\n']",run;Exception;lang;ang,-9.313225746154785e-10;-1.1059455573558807e-09;-2.3283064365386963e-09;-2.7939677238464355e-09,5,5,"[-5.853370189666748, -5.713016986846924, -6.340178489685059, -5.5091166496276855, -5.3569016456604, -0.016843128949403763]",0.9832979440689087
3,"['  @Test\n  public void testLeave() throws Exception {\n    run(""leave"");\n  }\n']",leave;Exception;run;Leave,2.3283064365386963e-10;0.0;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.852471828460693, -5.715839862823486, -6.332717418670654, -5.491246223449707, -5.363259792327881, -0.016893649473786354]",0.9832483530044556
3,"['  @Test\n  public void testLength() throws Exception {\n    run(""length"");\n  }\n']",Length;Exception;length;run,1.280568540096283e-09;0.0;-1.8044374883174896e-09;-2.3283064365386963e-09,5,5,"[-5.875865459442139, -5.726024150848389, -6.359165191650391, -5.514227390289307, -5.369015216827393, -0.016622383147478104]",0.9835150241851807
3,"['  @Test\n  public void testLen() throws Exception {\n    run(""len"");\n  }\n']",len;Exception;run;Len,1.5133991837501526e-09;-4.0745362639427185e-10;-6.984919309616089e-10;-1.862645149230957e-09,5,5,"[-5.870385646820068, -5.729076385498047, -6.350852966308594, -5.512336730957031, -5.3713698387146, -0.01663914881646633]",0.9834983944892883
3,"['  @Test\n  public void testLower() throws Exception {\n    run(""lower"");\n  }\n']",Lower;Exception;lower;run,1.6298145055770874e-09;5.820766091346741e-11;-1.1641532182693481e-10;-4.656612873077393e-10,5,5,"[-5.8480544090271, -5.707020282745361, -6.333123683929443, -5.508411884307861, -5.347512722015381, -0.016939712688326836]",0.9832029342651367
3,"['  @Test\n  public void testMultDiv() throws Exception {\n    run(""mult_div"");\n  }\n']",Div;run;Mult;mult;Exception;div,5.122274160385132e-09;3.259629011154175e-09;2.7939677238464355e-09;9.313225746154785e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-5.877109527587891, -5.72877311706543, -6.363935947418213, -5.515282154083252, -5.3776774406433105, -0.016556138172745705]",0.9835801720619202
3,"['  @Test\n  public void testNvl() throws Exception {\n    run(""nvl"");\n  }\n']",run;vl;Exception;vl,1.3969838619232178e-09;9.313225746154785e-10;-5.238689482212067e-10;-6.984919309616089e-10,5,5,"[-5.871012210845947, -5.718565464019775, -6.3640031814575195, -5.52134370803833, -5.370122909545898, -0.016618279740214348]",0.9835190176963806
3,"['  @Test\n  public void testNvl2() throws Exception {\n    run(""nvl2"");\n  }\n']",vl;Exception;run;vl,3.725290298461914e-09;1.0477378964424133e-09;9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.841451168060303, -5.684493541717529, -6.307412147521973, -5.480709075927734, -5.340889930725098, -0.017231279984116554]",0.9829164147377014
3,"['  @Test\n  public void testPrint() throws Exception {\n    run(""print"");\n  }\n']",Print;Exception;run;print,6.984919309616089e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.843899726867676, -5.688346862792969, -6.309846878051758, -5.479745864868164, -5.345401763916016, -0.01718827709555626]",0.9829586148262024
3,"['  @Test\n  public void testReplace() throws Exception {\n    run(""replace"");\n  }\n']",Replace;run;Exception;replace,4.656612873077393e-10;0.0;-2.6193447411060333e-10;-3.4924596548080444e-10,5,5,"[-5.861893177032471, -5.695236682891846, -6.330379486083984, -5.493374824523926, -5.359666347503662, -0.016948385164141655]",0.9831944108009338
3,"['  @Test\n  public void testReturn() throws Exception {\n    run(""return"");\n  }\n']",Exception;return;run;Return,1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-6.984919309616089e-10,5,5,"[-5.852163314819336, -5.7240190505981445, -6.336506366729736, -5.4878830909729, -5.3718342781066895, -0.016833750531077385]",0.9833071231842041
3,"['  @Test\n  public void testSetError() throws Exception {\n    run(""seterror"");\n  }\n']",Error;eterror;run;Set;Exception,1.6007106751203537e-09;1.0477378964424133e-09;4.656612873077393e-10;-5.820766091346741e-11;-6.984919309616089e-10,5,5,"[-5.844606399536133, -5.670907974243164, -6.300148010253906, -5.474143028259277, -5.34647274017334, -0.017283538356423378]",0.9828649759292603
3,"['  @Test\n  public void testSub() throws Exception {\n    run(""sub"");\n  }\n']",Sub;sub;Exception;run,4.190951585769653e-09;1.1641532182693481e-09;4.656612873077393e-10;-3.7834979593753815e-10,5,5,"[-5.85673713684082, -5.722964286804199, -6.347735404968262, -5.506157875061035, -5.357303619384766, -0.01679682731628418]",0.9833434820175171
3,"['  @Test\n  public void testSubstring() throws Exception {\n    run(""substring"");\n  }\n']",Exception;substring;Substring;run,0.0;-1.3969838619232178e-09;-2.0954757928848267e-09;-2.3283064365386963e-09,5,5,"[-5.887484073638916, -5.749972820281982, -6.386756420135498, -5.527278423309326, -5.3918023109436035, -0.01630331017076969]",0.9838288426399231
3,"['  @Test\n  public void testSubstr() throws Exception {\n    run(""substr"");\n  }\n']",Substr;Exception;substr;run,2.3283064365386963e-09;-5.238689482212067e-10;-1.0477378964424133e-09;-1.6298145055770874e-09,5,5,"[-5.887547016143799, -5.726100444793701, -6.383440017700195, -5.524425506591797, -5.390529155731201, -0.0164042841643095]",0.9837294220924377
3,"['  @Test\n  public void testTimestampIso() throws Exception {\n    run(""timestamp_iso"");\n  }\n']",run;so;iso;timestamp;Exception;Timestamp,1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;2.9103830456733704e-11;-1.1641532182693481e-10;-3.14321368932724e-09,5,5,"[-5.873302459716797, -5.701756477355957, -6.337019920349121, -5.522439002990723, -5.399066925048828, -0.016576772555708885]",0.9835598468780518
3,"['  @Test\n  public void testTimestamp() throws Exception {\n    run(""timestamp"");\n  }\n']",Exception;run;timestamp;Timestamp,-1.367880031466484e-09;-2.2118911147117615e-09;-2.7939677238464355e-09;-2.9103830456733704e-09,5,5,"[-5.858674049377441, -5.708606719970703, -6.3127546310424805, -5.489848613739014, -5.364696979522705, -0.016935374587774277]",0.9832073450088501
3,"['  @Test\n  public void testToChar() throws Exception {\n    run(""to_char"");\n  }\n']",Char;run;Exception;to;char,1.7462298274040222e-09;9.313225746154785e-10;1.4551915228366852e-10;-4.656612873077393e-10;-1.2223608791828156e-09,5,5,"[-5.903712272644043, -5.752816677093506, -6.395777225494385, -5.532116413116455, -5.392201900482178, -0.016211943700909615]",0.9839187860488892
3,"['  @Test\n  public void testToTimestamp() throws Exception {\n    run(""to_timestamp"");\n  }\n']",timestamp;Exception;Timestamp;to;run,3.4924596548080444e-09;-2.3283064365386963e-10;-1.3969838619232178e-09;-1.3969838619232178e-09;-4.132743924856186e-09,5,5,"[-5.873622894287109, -5.729165077209473, -6.332911014556885, -5.5005292892456055, -5.366239547729492, -0.016734696924686432]",0.9834044575691223
3,"['  @Test\n  public void testTrim() throws Exception {\n    run(""trim"");\n  }\n']",trim;run;Exception;Trim,3.4924596548080444e-09;2.0954757928848267e-09;0.0;-2.7939677238464355e-09,5,5,"[-5.8669843673706055, -5.704623699188232, -6.346059322357178, -5.498605251312256, -5.368841171264648, -0.016808079555630684]",0.9833323955535889
3,"['  @Test\n  public void testTwoPipes() throws Exception {\n    run(""twopipes"");\n  }\n']",run;twopipes;Exception;Two;ipes,9.313225746154785e-10;6.984919309616089e-10;2.3283064365386963e-10;-1.6298145055770874e-09;-2.7939677238464355e-09,5,5,"[-5.878809928894043, -5.719877243041992, -6.358403205871582, -5.522130012512207, -5.367773056030273, -0.016609368845820427]",0.9835277795791626
3,"['  @Test\n  public void testUpper() throws Exception {\n    run(""upper"");\n  }\n']",run;upper;Exception;pper,2.3283064365386963e-09;1.862645149230957e-09;-3.4924596548080444e-10;-1.862645149230957e-09,5,5,"[-5.8577961921691895, -5.727038860321045, -6.344247817993164, -5.522076606750488, -5.357051849365234, -0.016722386702895164]",0.9834166765213013
3,"['  @Test\n  public void testValuesInto() throws Exception {\n    run(""values_into"");\n  }\n']",values;run;into;Int;Values;Exception,1.4901161193847656e-08;1.30385160446167e-08;3.725290298461914e-09;2.7939677238464355e-09;0.0;-1.862645149230957e-09,5,5,"[-5.882634162902832, -5.7545390129089355, -6.374594211578369, -5.513997554779053, -5.382486343383789, -0.01642046682536602]",0.9837135076522827
3,"['  @Test\n  public void testVarScope() throws Exception {\n    run(""var_scope"");\n  }\n']",Exception;scope;Scope;run;var;Var,2.6193447411060333e-10;2.3283064365386963e-10;0.0;0.0;-3.4924596548080444e-10;-1.280568540096283e-09,5,5,"[-5.887816905975342, -5.75593900680542, -6.388611316680908, -5.535970211029053, -5.402076244354248, -0.01619751751422882]",0.9839328527450562
3,"['  @Test\n  public void testVarScope2() throws Exception {\n    run(""var_scope2"");\n  }\n']",var;scope;Var;Exception;run;Scope,6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-9.313225746154785e-10,5,5,"[-5.891898155212402, -5.755337715148926, -6.385129928588867, -5.538640022277832, -5.4055070877075195, -0.01616772450506687]",0.9839624166488647
3,"['  @Test\n  public void testWhile() throws Exception {\n    run(""while"");\n  }\n']",run;Exception;While;while,1.280568540096283e-09;-4.656612873077393e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.855992794036865, -5.714035511016846, -6.341976642608643, -5.502016067504883, -5.3672356605529785, -0.016808900982141495]",0.983331561088562
3,['  @Test\n  public void testGetDoesNotReturnNull() throws Exception {\n    JavaDataModel model = JavaDataModel.get();\n    assertNotNull(model);\n  }\n'],Null;Java;Null;get;model;Not;Get;Model;Data;Exception,1.1641532182693481e-09;8.149072527885437e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;0.0;0.0,5,5,"[-5.85368013381958, -5.700615406036377, -6.309638500213623, -5.443614959716797, -5.402965068817139, -0.017002766951918602]",0.9831410646438599
3,"['  @Test\n  public void testGetModelForSystemWhenSetTo32() throws Exception {\n    System.setProperty(DATA_MODEL_PROPERTY, ""32"");\n    assertSame(JavaDataModel.JAVA32, JavaDataModel.getModelForSystem());\n  }\n']",System;MODEL;Java;When;set;Same;Model;Exception;Model;Java,7.450580596923828e-09;6.05359673500061e-09;5.587935447692871e-09;3.725290298461914e-09;3.4924596548080444e-09;3.259629011154175e-09;2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.926302909851074, -5.841009140014648, -6.407351493835449, -5.527625560760498, -5.451551914215088, -0.015609935857355595]",0.9845112562179565
3,"['  @Test\n  public void testGetModelForSystemWhenSetTo64() throws Exception {\n    System.setProperty(DATA_MODEL_PROPERTY, ""64"");\n    assertSame(JavaDataModel.JAVA64, JavaDataModel.getModelForSystem());\n  }\n']",When;Data;Model;Model;AV;System;Data;System;Set;For,6.51925802230835e-09;4.190951585769653e-09;3.259629011154175e-09;2.561137080192566e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.926458835601807, -5.844658851623535, -6.407291889190674, -5.523991584777832, -5.449443340301514, -0.015622728504240513]",0.9844986796379089
3,"['  @Test\n  public void testGetModelForSystemWhenSetToUnknown() throws Exception {\n    System.setProperty(DATA_MODEL_PROPERTY, ""unknown"");\n    assertSame(JavaDataModel.JAVA64, JavaDataModel.getModelForSystem());\n  }\n']",DATA;MODEL;Java;Exception;Model;Data;Same;unknown;For;Data,2.3283064365386963e-09;2.153683453798294e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.896332740783691, -5.796838760375977, -6.3701066970825195, -5.496243476867676, -5.446963310241699, -0.01603810116648674]",0.9840898513793945
3,"['  @Test\n  public void testGetModelForSystemWhenUndefined() throws Exception {\n    System.clearProperty(DATA_MODEL_PROPERTY);\n    assertSame(JavaDataModel.JAVA64, JavaDataModel.getModelForSystem());\n  }\n']",Java;clear;For;PROPERTY;Property;Get;Model;Undefined;MODEL;Model,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;0.0;0.0,5,5,"[-5.905855655670166, -5.815327167510986, -6.385447025299072, -5.5066351890563965, -5.456989288330078, -0.01584181748330593]",0.9842830300331116
3,"['  @Test\n  public void testSmallBufferReuse() {\n    BytesColumnVector col = new BytesColumnVector();\n    int smallWriteSize = 1024;\n    int largeWriteSize = 1024 * 1024 * 2;\n\n    int rowIdx = 0;\n    int bytesWrittenToBytes1 = 0;\n    col.reset();\n\n    // Initial write (small value)\n    byte[] bytes1 = writeToBytesColumnVector(rowIdx, col, smallWriteSize, (byte) 1);\n    bytesWrittenToBytes1 += smallWriteSize;\n\n    // Write a large value. This should use a different byte buffer\n    rowIdx++;\n    byte[] bytes2 = writeToBytesColumnVector(rowIdx, col, largeWriteSize, (byte) 2);\n    assertFalse(bytes1 == bytes2);\n\n    // Another small write. smallBuffer should be re-used for this write\n    rowIdx++;\n    byte[] bytes3 = writeToBytesColumnVector(rowIdx, col, smallWriteSize, (byte) 1);\n    bytesWrittenToBytes1 += smallWriteSize;\n    assertTrue(bytes1 == bytes3);\n\n    // Write another large value. This should use a different byte buffer\n    rowIdx++;\n    byte[] bytes4 = writeToBytesColumnVector(rowIdx, col, largeWriteSize, (byte) 3);\n    assertFalse(bytes1 == bytes4);\n    assertFalse(bytes2 == bytes4);\n\n    // Eventually enough small writes should result in another buffer getting created\n    boolean gotNewBuffer = false;\n    // Test is dependent on getting a new buffer within 1MB.\n    // This may need to change as the implementation changes.\n    for (int i = 0; i < 1024; ++i) {\n      rowIdx++;\n      byte[] currBytes = writeToBytesColumnVector(rowIdx, col, smallWriteSize, (byte) 1);\n      if (currBytes == bytes1) {\n        bytesWrittenToBytes1 += smallWriteSize;\n      } else {\n        gotNewBuffer = true;\n        break;\n      }\n    }\n\n    assertTrue(gotNewBuffer);\n\n    // All small writes to the first buffer should be in contiguous memory\n    for (int i = 0; i < bytesWrittenToBytes1; ++i) {\n      assertEquals((byte) 1, bytes1[i]);\n    }\n  }\n']",implementation;Reuse;MB;Bytes;Small;used;This;Vector;Buffer;need,2.0954757928848267e-09;4.94765117764473e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.871160984039307, -5.6875176429748535, -6.395672798156738, -5.456792831420898, -5.622735023498535, -0.015883823856711388]",0.9842416644096375
3,"['  @Test\n  public void testFlatten() throws Exception {\n    LongColumnVector col1 = new LongColumnVector(10);\n    ListColumnVector vector = new ListColumnVector(10, col1);\n    vector.init();\n\n    // TEST - repeating NULL & no selection\n    col1.isRepeating = true;\n    vector.isRepeating = true;\n    vector.noNulls = false;\n    vector.isNull[0] = true;\n    vector.childCount = 0;\n    for(int i=0; i < 10; ++i) {\n      col1.vector[i] = i + 3;\n      vector.offsets[i] = i;\n      vector.lengths[i] = 10 + i;\n    }\n    vector.flatten(false, null, 10);\n    // make sure the vector was flattened\n    assertFalse(vector.isRepeating);\n    assertFalse(vector.noNulls);\n    // child isn\'t flattened, because parent is repeating null\n    assertTrue(col1.isRepeating);\n    assertTrue(col1.noNulls);\n    for(int i=0; i < 10; ++i) {\n      assertTrue(""isNull at "" + i, vector.isNull[i]);\n    }\n    for(int i=0; i < 10; ++i) {\n      StringBuilder buf = new StringBuilder();\n      vector.stringifyValue(buf, i);\n      assertEquals(""null"", buf.toString());\n    }\n    vector.unFlatten();\n    assertTrue(col1.isRepeating);\n    assertTrue(vector.isRepeating);\n\n    // TEST - repeating NULL & selection\n    Arrays.fill(vector.isNull, 1, 10, false);\n    int[] sel = new int[]{3, 5, 7};\n    vector.flatten(true, sel, 3);\n    for(int i=1; i < 10; i++) {\n      assertEquals(""failure at "" + i,\n          i == 3 || i == 5 || i == 7, vector.isNull[i]);\n    }\n    vector.unFlatten();\n\n    // TEST - repeating non-NULL & no-selection\n    vector.noNulls = true;\n    vector.isRepeating = true;\n    vector.offsets[0] = 0;\n    vector.lengths[0] = 3;\n    vector.childCount = 3;\n    vector.flatten(false, null, 10);\n    // make sure the vector was flattened\n    assertFalse(vector.isRepeating);\n    assertFalse(vector.noNulls);\n    assertFalse(col1.isRepeating);\n    assertFalse(col1.noNulls);\n    for(int i=0; i < 10; ++i) {\n      assertEquals(""offset at "" + i, 0, vector.offsets[i]);\n      assertEquals(""length at "" + i, 3, vector.lengths[i]);\n    }\n    for(int i=0; i < 10; ++i) {\n      StringBuilder buf = new StringBuilder();\n      vector.stringifyValue(buf, i);\n      assertEquals(""[3, 3, 3]"", buf.toString());\n    }\n    vector.unFlatten();\n    assertTrue(col1.isRepeating);\n    assertTrue(col1.noNulls);\n    assertTrue(vector.isRepeating);\n    assertTrue(vector.noNulls);\n\n    // TEST - repeating non-NULL & selection\n    Arrays.fill(vector.offsets, 1, 10, -1);\n    Arrays.fill(vector.lengths, 1, 10, -1);\n    Arrays.fill(col1.vector, 1, 10, -1);\n    vector.flatten(true, sel, 3);\n    for(int i=1; i < 10; i++) {\n      if (i == 3 || i == 5 || i == 7) {\n        assertEquals(""failure at "" + i, 0, vector.offsets[i]);\n        assertEquals(""failure at "" + i, 3, vector.lengths[i]);\n      } else {\n        assertEquals(""failure at "" + i, -1, vector.offsets[i]);\n        assertEquals(""failure at "" + i, -1, vector.lengths[i]);\n      }\n    }\n    for(int i=0; i < 3; ++i) {\n      assertEquals(""failure at "" + i, 3, col1.vector[i]);\n    }\n    for(int i=3; i < 10; ++i) {\n      assertEquals(""failure at "" + i, -1, col1.vector[i]);\n    }\n    vector.unFlatten();\n\n    // TEST - reset\n    vector.reset();\n    assertFalse(col1.isRepeating);\n    assertTrue(col1.noNulls);\n    assertFalse(vector.isRepeating);\n    assertTrue(vector.noNulls);\n    assertEquals(0, vector.childCount);\n  }\n']",NULL;Exception;se;Null;Column;vector;Flatten;Repeating;flatten;vector,9.313225746154785e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.848194122314453, -5.6804962158203125, -6.304771900177002, -5.331815242767334, -5.549737930297852, -0.01699175126850605]",0.9831516742706299
3,"['  @Test\n  public void testSet() throws Exception {\n    LongColumnVector input1 = new LongColumnVector(10);\n    ListColumnVector input = new ListColumnVector(10, input1);\n    input.init();\n    LongColumnVector output1 = new LongColumnVector(30);\n    ListColumnVector output = new ListColumnVector(10, output1);\n    output.init();\n    input.noNulls = false;\n    input.isNull[6] = true;\n    input.childCount = 11;\n    Arrays.fill(output1.vector, -1);\n    for(int i=0; i < 10; ++i) {\n      input1.vector[i] = 10 * i;\n      input.offsets[i] = i;\n      input.lengths[i] = 2;\n      output.offsets[i] = i + 2;\n      output.lengths[i] = 3;\n    }\n    output.childCount = 30;\n\n    // copy a null\n    output.isNull[3] = false;\n    output.setElement(3, 6, input);\n    assertEquals(30, output.childCount);\n    StringBuilder buf = new StringBuilder();\n    output.stringifyValue(buf, 3);\n    assertEquals(""null"", buf.toString());\n\n    // copy a value\n    output.isNull[3] = false;\n    output.setElement(3, 5, input);\n    assertEquals(30, output.offsets[3]);\n    assertEquals(2, output.lengths[3]);\n    assertEquals(32, output.childCount);\n    buf = new StringBuilder();\n    output.stringifyValue(buf, 3);\n    assertEquals(""[50, 60]"", buf.toString());\n\n    // overwrite a value\n    output.isNull[3] = false;\n    output.setElement(3, 4, input);\n    assertEquals(34, output.childCount);\n    assertEquals(34, output1.vector.length);\n    assertEquals(50, output1.vector[30]);\n    assertEquals(60, output1.vector[31]);\n    buf = new StringBuilder();\n    output.stringifyValue(buf, 3);\n    assertEquals(""[40, 50]"", buf.toString());\n\n    input.reset();\n    assertEquals(false, input1.isRepeating);\n    assertEquals(true, input.noNulls);\n    output.reset();\n    assertEquals(0, output.childCount);\n\n    input.isRepeating = true;\n    input.offsets[0] = 0;\n    input.lengths[0] = 10;\n    output.setElement(2, 7, input);\n    assertEquals(10, output.childCount);\n    buf = new StringBuilder();\n    output.stringifyValue(buf, 2);\n    assertEquals(""[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]"", buf.toString());\n  }\n']",Column;buf;output;Vector;new;input;child;Long;true;Equals,2.4010660126805305e-10;2.0372681319713593e-10;1.8553691916167736e-10;1.7462298274040222e-10;1.673470251262188e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.800015449523926, -5.650119781494141, -6.22259521484375, -5.264451503753662, -5.472611427307129, -0.01806332916021347]",0.9820988178253174
3,"['  @Test\n  public void test() throws Exception {\n    StringExpr.Finder pattern = compile(""pattern"");\n    assertNotNull(pattern);\n\n    StringExpr.Finder patternOneChar = compile(""g"");\n    assertNotNull(patternOneChar);\n\n    StringExpr.Finder patternZero = compile("""");\n    assertNotNull(patternZero);\n\n    String input1 = ""string that contains a patterN..."";\n    String input2 = ""string that contains a pattern..."";\n    String input3 = ""pattern at the start of a string"";\n    String input4 = ""string that ends with a pattern"";\n\n    assertEquals(""Testing invalid match"", -1, find(pattern, input1));\n    assertEquals(""Testing valid match"", 23, find(pattern, input2));\n    assertEquals(""Testing single-character match"", 5, find(patternOneChar, input1));\n    assertEquals(""Testing zero-length pattern"", 0, find(patternZero, input1));\n    assertEquals(""Testing match at start of string"", 0, find(pattern, input3));\n    assertEquals(""Testing match at end of string"", 24, find(pattern, input4));\n  }\n']",length;One;pattern;Char;atter;Testing;compile;Zero;pattern;Testing,6.693881005048752e-10;4.94765117764473e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.840999126434326, -5.703225612640381, -6.291419506072998, -5.337843894958496, -5.494083881378174, -0.017156872898340225]",0.982989490032196
3,"['  @Test\n  public void testFlatten() throws Exception {\n    LongColumnVector col1 = new LongColumnVector(10);\n    LongColumnVector col2 = new LongColumnVector(10);\n    UnionColumnVector vector = new UnionColumnVector(10, col1, col2);\n    vector.init();\n    col1.isRepeating = true;\n    for(int i=0; i < 10; ++i) {\n      vector.tags[i] = i % 2;\n      col1.vector[i] = i;\n      col2.vector[i] = 2 * i;\n    }\n    vector.flatten(false, null, 10);\n    assertFalse(col1.isRepeating);\n    for(int i=0; i < 10; ++i) {\n      assertEquals(i % 2, vector.tags[i]);\n      assertEquals(""col1 at "" + i, 0, col1.vector[i]);\n      assertEquals(""col2 at "" + i, 2 * i, col2.vector[i]);\n    }\n    vector.unFlatten();\n    assertTrue(col1.isRepeating);\n    for(int i=0; i < 10; ++i) {\n      StringBuilder buf = new StringBuilder();\n      vector.stringifyValue(buf, i);\n      assertEquals(""{\\""tag\\"": "" + (i % 2) + "", \\""value\\"": "" +\n          (i % 2 == 0 ? 0 : 2 * i) + ""}"", buf.toString());\n    }\n    vector.reset();\n    assertFalse(col1.isRepeating);\n  }\n']",Repeating;buf;new;Union;tags;Vector;Long;col;False;vector,4.94765117764473e-10;3.4924596548080444e-10;2.764863893389702e-10;1.964508555829525e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.382431946694851e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.81674861907959, -5.65108585357666, -6.238619804382324, -5.282527923583984, -5.487887382507324, -0.017817558720707893]",0.9823403358459473
3,"['  @Test\n  public void testSet() throws Exception {\n    LongColumnVector input1 = new LongColumnVector(10);\n    LongColumnVector input2 = new LongColumnVector(10);\n    UnionColumnVector input = new UnionColumnVector(10, input1, input2);\n    input.init();\n    LongColumnVector output1 = new LongColumnVector(10);\n    LongColumnVector output2 = new LongColumnVector(10);\n    UnionColumnVector output = new UnionColumnVector(10, output1, output2);\n    output.init();\n    input1.isRepeating = true;\n    for(int i=0; i < 10; ++i) {\n      input.tags[i] = i % 2;\n      input1.vector[i] = i + 1;\n      input2.vector[i] = i + 2;\n    }\n    output.setElement(3, 4, input);\n    StringBuilder buf = new StringBuilder();\n    output.stringifyValue(buf, 3);\n    assertEquals(""{\\""tag\\"": 0, \\""value\\"": 1}"", buf.toString());\n    input.noNulls = false;\n    input.isNull[5] = true;\n    output.setElement(3, 5, input);\n    buf = new StringBuilder();\n    output.stringifyValue(buf, 3);\n    assertEquals(""null"", buf.toString());\n    input.reset();\n    assertEquals(false, input1.isRepeating);\n    assertEquals(true, input.noNulls);\n  }\n']",Element;Repeating;Null;tag;Long;Null;Vector;output;init;input,4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.5279510989785194e-10;1.4551915228366852e-10,5,5,"[-5.8080244064331055, -5.672351837158203, -6.236546516418457, -5.279306411743164, -5.475417137145996, -0.017842384055256844]",0.9823158383369446
3,"['  @Test\n  public void testFlatten() throws Exception {\n    LongColumnVector col1 = new LongColumnVector(10);\n    LongColumnVector col2 = new LongColumnVector(10);\n    StructColumnVector vector = new StructColumnVector(10, col1, col2);\n    vector.init();\n    col1.isRepeating = true;\n    for(int i=0; i < 10; ++i) {\n      col1.vector[i] = i;\n      col2.vector[i] = 2 * i;\n    }\n    vector.flatten(false, null, 10);\n    assertFalse(col1.isRepeating);\n    for(int i=0; i < 10; ++i) {\n      assertEquals(""col1 at "" + i, 0, col1.vector[i]);\n      assertEquals(""col2 at "" + i, 2 * i, col2.vector[i]);\n    }\n    vector.unFlatten();\n    assertTrue(col1.isRepeating);\n    for(int i=0; i < 10; ++i) {\n      StringBuilder buf = new StringBuilder();\n      vector.stringifyValue(buf, i);\n      assertEquals(""[0, "" + (2 * i) + ""]"", buf.toString());\n    }\n    vector.reset();\n    assertFalse(col1.isRepeating);\n  }\n']",buf;col;vector;Builder;at;reset;Value;Flatten;vector;False,2.153683453798294e-09;1.2223608791828156e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.814681529998779, -5.655776500701904, -6.232430934906006, -5.282195091247559, -5.468254089355469, -0.01790456287562847]",0.9822547435760498
3,"['  @Test\n  public void testSet() throws Exception {\n    LongColumnVector input1 = new LongColumnVector(10);\n    LongColumnVector input2 = new LongColumnVector(10);\n    StructColumnVector input = new StructColumnVector(10, input1, input2);\n    input.init();\n    LongColumnVector output1 = new LongColumnVector(10);\n    LongColumnVector output2 = new LongColumnVector(10);\n    StructColumnVector output = new StructColumnVector(10, output1, output2);\n    output.init();\n    input1.isRepeating = true;\n    input2.noNulls = false;\n    input2.isNull[5] = true;\n    input.noNulls = false;\n    input.isNull[6] = true;\n    for(int i=0; i < 10; ++i) {\n      input1.vector[i] = i + 1;\n      input2.vector[i] = i + 2;\n    }\n    output.isNull[3] = false;\n    output.setElement(3, 6, input);\n    StringBuilder buf = new StringBuilder();\n    output.stringifyValue(buf, 3);\n    assertEquals(""null"", buf.toString());\n    output.isNull[3] = false;\n    output.setElement(3, 5, input);\n    buf = new StringBuilder();\n    output.stringifyValue(buf, 3);\n    assertEquals(""[1, null]"", buf.toString());\n    output.isNull[3] = false;\n    output.setElement(3, 4, input);\n    buf = new StringBuilder();\n    output.stringifyValue(buf, 3);\n    assertEquals(""[1, 6]"", buf.toString());\n    input.reset();\n    assertEquals(false, input1.isRepeating);\n    assertEquals(true, input.noNulls);\n  }\n']",Repeating;input;Long;Null;Equals;Column;Null;Long;input;Element,4.0745362639427185e-10;3.346940502524376e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.382431946694851e-10;1.3096723705530167e-10;1.3096723705530167e-10,5,5,"[-5.798933506011963, -5.656750202178955, -6.225072860717773, -5.259025573730469, -5.472796440124512, -0.018065905198454857]",0.9820963144302368
3,['    @Test\n    public void deleteOrderTest() {\n        String orderId = null;\n        //api.deleteOrder(orderId);\n        \n        // TODO: test validations\n        \n        \n    }\n'],null;api;delete;Order;delete;order;Order;order;TOD;validations,3.4924596548080444e-10;5.820766091346741e-11;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-3.3760443329811096e-09,5,5,"[-5.8843913078308105, -5.710865497589111, -6.30928373336792, -5.405806064605713, -5.433945655822754, -0.01691017486155033]",0.9832320213317871
3,"['    @Test\n    public void getInventoryTest() {\n        //Map<String, Integer> response = api.getInventory();\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n']",validations;Map;api;Not;Null;response;get;get;response;Inventory,9.313225746154785e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;2.9103830456733704e-11;-6.984919309616089e-10;-9.89530235528946e-10;-1.4551915228366852e-09,5,5,"[-5.879027366638184, -5.717532157897949, -6.314547538757324, -5.4126787185668945, -5.429708480834961, -0.01688087172806263]",0.9832608103752136
3,['    @Test\n    public void getOrderByIdTest() {\n        Long orderId = null;\n        //Order response = api.getOrderById(orderId);\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n'],order;get;Order;api;validations;TOD;get;ById;null;Order,4.0745362639427185e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-2.9103830456733704e-11;-5.820766091346741e-11,5,5,"[-5.886168956756592, -5.72407865524292, -6.319187641143799, -5.398042678833008, -5.437599182128906, -0.016862118616700172]",0.9832792282104492
3,['    @Test\n    public void placeOrderTest() {\n        Order body = null;\n        //Order response = api.placeOrder(body);\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n'],Order;Order;Order;place;body;api;body;null;Not;Null,1.862645149230957e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.402842700481415e-10;2.9103830456733704e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.894013404846191, -5.727686405181885, -6.328492641448975, -5.404571533203125, -5.4420647621154785, -0.016761306673288345]",0.9833782911300659
3,['    @Test\n    public void addPetTest() {\n        Pet body = null;\n        //api.addPet(body);\n        \n        // TODO: test validations\n        \n        \n    }\n'],TOD;api;Pet;body;body;Pet;add;null;add;Pet,9.313225746154785e-10;8.149072527885437e-10;4.94765117764473e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-3.2014213502407074e-10;-5.238689482212067e-10,5,5,"[-5.887889385223389, -5.717042446136475, -6.309244632720947, -5.405183792114258, -5.423673629760742, -0.01692822575569153]",0.983214259147644
3,"['    @Test\n    public void deletePetTest() {\n        Long petId = null;\n        String apiKey = null;\n        //api.deletePet(petId, apiKey);\n        \n        // TODO: test validations\n        \n        \n    }\n']",api;api;null;Long;TOD;Pet;null;Key;Pet;delete,1.3969838619232178e-09;9.89530235528946e-10;2.0372681319713593e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-1.2369127944111824e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.898205757141113, -5.741156578063965, -6.336722373962402, -5.423830032348633, -5.45054817199707, -0.016566220670938492]",0.9835703372955322
3,['    @Test\n    public void findPetsByStatusTest() {\n        List<String> status = null;\n        //List<Pet> response = api.findPetsByStatus(status);\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n'],validations;ets;Pet;ets;By;find;status;null;find;Status,1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;3.7834979593753815e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.880276679992676, -5.726707935333252, -6.316134929656982, -5.402725696563721, -5.427231788635254, -0.016900328919291496]",0.9832417964935303
3,['    @Test\n    public void findPetsByTagsTest() {\n        List<String> tags = null;\n        //List<Pet> response = api.findPetsByTags(tags);\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n'],ets;List;api;tags;tags;response;ets;Tags;List;Not,1.280568540096283e-09;4.802132025361061e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;1.4551915228366852e-11,5,5,"[-5.894158840179443, -5.739670753479004, -6.32957124710083, -5.41431999206543, -5.437018394470215, -0.016697650775313377]",0.9834411144256592
3,['    @Test\n    public void getPetByIdTest() {\n        Long petId = null;\n        //Pet response = api.getPetById(petId);\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n'],ById;Pet;get;api;Pet;validations;pet;Not;null;response,8.149072527885437e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.1641532182693481e-10;1.1641532182693481e-10;2.9103830456733704e-11;0.0,5,5,"[-5.890079021453857, -5.7253737449646, -6.322896480560303, -5.4126763343811035, -5.431665897369385, -0.016799405217170715]",0.9833409190177917
3,['    @Test\n    public void updatePetTest() {\n        Pet body = null;\n        //api.updatePet(body);\n        \n        // TODO: test validations\n        \n        \n    }\n'],Pet;Pet;TOD;validations;body;body;null;update;update;Pet,8.149072527885437e-10;5.238689482212067e-10;-5.820766091346741e-11;-5.820766091346741e-11;-1.1641532182693481e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-5.887795925140381, -5.714257717132568, -6.31196403503418, -5.4086833000183105, -5.431616306304932, -0.016881458461284637]",0.9832603335380554
3,"['    @Test\n    public void updatePetWithFormTest() {\n        Long petId = null;\n        String name = null;\n        String status = null;\n        //api.updatePetWithForm(petId, name, status);\n        \n        // TODO: test validations\n        \n        \n    }\n']",pet;Form;name;Long;name;validations;update;null;status;null,6.984919309616089e-10;6.984919309616089e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-11;1.4551915228366852e-11;-5.820766091346741e-11;-5.820766091346741e-11,5,5,"[-5.886735439300537, -5.722076892852783, -6.319915294647217, -5.3795552253723145, -5.45070743560791, -0.01689399965107441]",0.9832478165626526
3,"['    @Test\n    public void uploadFileTest() {\n        Long petId = null;\n        String additionalMetadata = null;\n        org.apache.cxf.jaxrs.ext.multipart.Attachment file = null;\n        //ModelApiResponse response = api.uploadFile(petId, additionalMetadata, file);\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n']",validations;pet;pet;Metadata;File;org;response;File;response;xf,1.6589183360338211e-09;1.2369127944111824e-09;6.984919309616089e-10;6.257323548197746e-10;5.529727786779404e-10;5.238689482212067e-10;2.9831426218152046e-10;2.9103830456733704e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.886416912078857, -5.744114398956299, -6.350697040557861, -5.413060188293457, -5.48580265045166, -0.01646186225116253]",0.9836727976799011
3,['    @Test\n    public void createUserTest() {\n        User body = null;\n        //api.createUser(body);\n        \n        // TODO: test validations\n        \n        \n    }\n'],User;create;validations;body;create;User;body;null;api;User,3.2014213502407074e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.4551915228366852e-10;5.820766091346741e-11;2.9103830456733704e-11;0.0;-2.1827872842550278e-11;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.878179550170898, -5.70237398147583, -6.294213771820068, -5.395198822021484, -5.4230780601501465, -0.01708175614476204]",0.983063280582428
3,['    @Test\n    public void createUsersWithArrayInputTest() {\n        List<User> body = null;\n        //api.createUsersWithArrayInput(body);\n        \n        // TODO: test validations\n        \n        \n    }\n'],Input;body;TOD;Input;validations;null;create;create;List;User,5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.0372681319713593e-10;5.820766091346741e-11;5.820766091346741e-11;1.4551915228366852e-11;0.0;0.0,5,5,"[-5.894053936004639, -5.720722675323486, -6.323997974395752, -5.4100165367126465, -5.44569730758667, -0.016751810908317566]",0.9833877086639404
3,['    @Test\n    public void createUsersWithListInputTest() {\n        List<User> body = null;\n        //api.createUsersWithListInput(body);\n        \n        // TODO: test validations\n        \n        \n    }\n'],Users;List;body;api;create;TOD;User;List;validations;null,1.0477378964424133e-09;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;-8.731149137020111e-11;-1.4551915228366852e-10;-1.7462298274040222e-10;-2.0372681319713593e-10;-2.3283064365386963e-10,5,5,"[-5.906707286834717, -5.731677532196045, -6.3398118019104, -5.423715114593506, -5.454226016998291, -0.016552502289414406]",0.9835837483406067
3,['    @Test\n    public void deleteUserTest() {\n        String username = null;\n        //api.deleteUser(username);\n        \n        // TODO: test validations\n        \n        \n    }\n'],delete;TOD;api;delete;validations;username;null;username;User;User,6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.1641532182693481e-09;-1.1641532182693481e-09,5,5,"[-5.874965667724609, -5.695579528808594, -6.287335395812988, -5.393440246582031, -5.418371677398682, -0.01715640351176262]",0.9829899072647095
3,['    @Test\n    public void getUserByNameTest() {\n        String username = null;\n        //User response = api.getUserByName(username);\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n'],username;get;Name;username;response;api;validations;TOD;User;response,2.0954757928848267e-09;2.0372681319713593e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.87438440322876, -5.706179141998291, -6.299593448638916, -5.389759540557861, -5.429406642913818, -0.01706652157008648]",0.9830783009529114
3,"['    @Test\n    public void loginUserTest() {\n        String username = null;\n        String password = null;\n        //String response = api.loginUser(username, password);\n        //assertNotNull(response);\n        // TODO: test validations\n        \n        \n    }\n']",validations;login;response;username;User;username;api;password;login;null,1.3969838619232178e-09;4.43833414465189e-10;3.4924596548080444e-10;2.6193447411060333e-10;1.1641532182693481e-10;8.731149137020111e-11;8.731149137020111e-11;5.820766091346741e-11;0.0;-5.820766091346741e-11,5,5,"[-5.8766584396362305, -5.708085536956787, -6.314732551574707, -5.402765274047852, -5.460015296936035, -0.01683117263019085]",0.983309805393219
3,['    @Test\n    public void logoutUserTest() {\n        //api.logoutUser();\n        \n        // TODO: test validations\n        \n        \n    }\n'],validations;logout;api;User;User;TOD;logout,2.0372681319713593e-09;1.979060471057892e-09;9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.906661510467529, -5.728895664215088, -6.3575119972229, -5.459575176239014, -5.473974704742432, -0.016287360340356827]",0.9838445782661438
3,"['    @Test\n    public void updateUserTest() {\n        String username = null;\n        User body = null;\n        //api.updateUser(username, body);\n        \n        // TODO: test validations\n        \n        \n    }\n']",User;body;api;update;username;null;validations;update;TOD;null,1.2223608791828156e-09;9.89530235528946e-10;5.820766091346741e-10;5.820766091346741e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;2.9103830456733704e-11,5,5,"[-5.873999118804932, -5.702541828155518, -6.295577526092529, -5.381284236907959, -5.436790466308594, -0.01709406077861786]",0.9830511212348938
3,['    @Test\n    public void testTypeHolderDefault() {\n        // TODO: test TypeHolderDefault\n    }\n'],Default;older;Type;older;Type;TOD;Default,1.2223608791828156e-09;5.238689482212067e-10;3.4924596548080444e-10;-5.820766091346741e-11;-4.94765117764473e-10;-9.89530235528946e-10;-1.1641532182693481e-09,5,5,"[-5.885736465454102, -5.711881160736084, -6.339102268218994, -5.481372356414795, -5.400671482086182, -0.016666464507579803]",0.9834716320037842
3,['    @Test\n    public void stringItemTest() {\n        // TODO: test stringItem\n    }\n'],string;Item;Item;TOD;string,2.3283064365386963e-09;4.656612873077393e-10;-9.313225746154785e-10;-1.280568540096283e-09;-1.3969838619232178e-09,5,5,"[-5.907181262969971, -5.763765811920166, -6.384017467498779, -5.5140299797058105, -5.4371418952941895, -0.016057340428233147]",0.9840707778930664
3,['    @Test\n    public void numberItemTest() {\n        // TODO: test numberItem\n    }\n'],number;TOD;Item;Item;number,1.862645149230957e-09;1.3969838619232178e-09;4.656612873077393e-10;0.0;-8.149072527885437e-10,5,5,"[-5.905023574829102, -5.749624252319336, -6.373339653015137, -5.520576477050781, -5.4322733879089355, -0.01612209342420101]",0.9840071797370911
3,['    @Test\n    public void integerItemTest() {\n        // TODO: test integerItem\n    }\n'],integer;Item;Item;integer;TOD,1.862645149230957e-09;-2.0954757928848267e-09;-2.561137080192566e-09;-2.7939677238464355e-09;-1.210719347000122e-08,5,5,"[-5.906477451324463, -5.752025604248047, -6.372866630554199, -5.515951633453369, -5.434486389160156, -0.016120100393891335]",0.9840090274810791
3,['    @Test\n    public void boolItemTest() {\n        // TODO: test boolItem\n    }\n'],Item;TOD;bool;bool;Item,1.5133991837501526e-09;4.94765117764473e-10;-1.1641532182693481e-10;-6.984919309616089e-10;-1.1059455573558807e-09,5,5,"[-5.888865947723389, -5.731966972351074, -6.346251964569092, -5.4921722412109375, -5.41099739074707, -0.016485314816236496]",0.9836498498916626
3,['    @Test\n    public void arrayItemTest() {\n        // TODO: test arrayItem\n    }\n'],Item;Item;array;TOD;array,2.7939677238464355e-09;4.656612873077393e-10;-1.862645149230957e-09;-2.3283064365386963e-09;-4.423782229423523e-09,5,5,"[-5.891979217529297, -5.737148761749268, -6.3543853759765625, -5.494266033172607, -5.412999153137207, -0.01642726920545101]",0.9837069511413574
3,['    @Test\n    public void testOuterEnum() {\n        // TODO: test OuterEnum\n    }\n'],Enum;TOD;Enum;Outer;Outer,1.1059455573558807e-09;6.984919309616089e-10;-2.3283064365386963e-10;-1.6298145055770874e-09;-5.122274160385132e-09,5,5,"[-5.926105976104736, -5.779703617095947, -6.406368732452393, -5.517794609069824, -5.446180820465088, -0.01586199924349785]",0.984263002872467
3,['    @Test\n    public void testClassModel() {\n        // TODO: test ClassModel\n    }\n'],Class;Model;Model;TOD;Class,7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.875688076019287, -5.697404861450195, -6.328048229217529, -5.478472709655762, -5.391729354858398, -0.01681734062731266]",0.9833231568336487
3,['    @Test\n    public void propertyClassTest() {\n        // TODO: test propertyClass\n    }\n'],property;TOD;Class;Class;property,2.7939677238464355e-09;1.1059455573558807e-09;-2.9103830456733704e-10;-7.566995918750763e-10;-1.1641532182693481e-09,5,5,"[-5.875732421875, -5.708648204803467, -6.334046840667725, -5.4764251708984375, -5.395942211151123, -0.016757555305957794]",0.9833820462226868
3,['    @Test\n    public void testArrayTest() {\n        // TODO: test ArrayTest\n    }\n'],Array;Array;TOD,-1.7462298274040222e-10;-2.3283064365386963e-10;-6.984919309616089e-10,5,5,"[-5.885928153991699, -5.71132755279541, -6.340433120727539, -5.479175090789795, -5.407015800476074, -0.01664559729397297]",0.9834921956062317
3,['    @Test\n    public void arrayOfStringTest() {\n        // TODO: test arrayOfString\n    }\n'],TOD;array;array,2.7939677238464355e-09;-1.1641532182693481e-10;-6.984919309616089e-10,5,5,"[-5.8912272453308105, -5.718791961669922, -6.3487725257873535, -5.485410213470459, -5.407356262207031, -0.016562821343541145]",0.9835736155509949
3,['    @Test\n    public void arrayArrayOfIntegerTest() {\n        // TODO: test arrayArrayOfInteger\n    }\n'],array;Array;TOD;Array;array,3.4924596548080444e-10;3.2014213502407074e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-1.0477378964424133e-09,5,5,"[-5.889798641204834, -5.709965229034424, -6.344807147979736, -5.484117031097412, -5.4048895835876465, -0.016620272770524025]",0.9835171103477478
3,['    @Test\n    public void arrayArrayOfModelTest() {\n        // TODO: test arrayArrayOfModel\n    }\n'],TOD;Array;Model;Array;Model;array;array,5.820766091346741e-10;4.656612873077393e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0;-1.1641532182693481e-10;-6.402842700481415e-10,5,5,"[-5.876988410949707, -5.692101001739502, -6.323714733123779, -5.46532678604126, -5.388435363769531, -0.016911230981349945]",0.9832309484481812
3,['    @Test\n    public void testCat() {\n        // TODO: test Cat\n    }\n'],Cat;TOD;Cat,5.820766091346741e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.880270004272461, -5.709026336669922, -6.339735984802246, -5.4928812980651855, -5.394556045532227, -0.016670100390911102]",0.9834680557250977
3,['    @Test\n    public void classNameTest() {\n        // TODO: test className\n    }\n'],class;Name;TOD;class;Name,4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.889270305633545, -5.738965034484863, -6.36179780960083, -5.5039286613464355, -5.422165870666504, -0.01633439026772976]",0.9837982654571533
3,['    @Test\n    public void colorTest() {\n        // TODO: test color\n    }\n'],TOD;color;color,0.0;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.9074249267578125, -5.739938735961914, -6.388739109039307, -5.518953323364258, -5.4321746826171875, -0.016127606853842735]",0.984001874923706
3,['    @Test\n    public void declawedTest() {\n        // TODO: test declawed\n    }\n'],TOD;declawed;declawed,2.7939677238464355e-09;1.1059455573558807e-09;8.149072527885437e-10,5,5,"[-5.877697944641113, -5.707645893096924, -6.339504718780518, -5.483697891235352, -5.405728816986084, -0.016669748350977898]",0.9834684133529663
3,['    @Test\n    public void testXmlItem() {\n        // TODO: test XmlItem\n    }\n'],ml;Item;Item;ml;TOD,6.984919309616089e-10;0.0;-8.149072527885437e-10;-8.731149137020111e-10;-9.313225746154785e-10,5,5,"[-5.8955864906311035, -5.73221492767334, -6.353569507598877, -5.4901509284973145, -5.408985614776611, -0.016470422968268394]",0.9836645722389221
3,['    @Test\n    public void attributeStringTest() {\n        // TODO: test attributeString\n    }\n'],attribute;attribute;TOD,3.4924596548080444e-09;2.3283064365386963e-09;-3.4924596548080444e-09,5,5,"[-5.89763879776001, -5.75111198425293, -6.376527786254883, -5.514817714691162, -5.429070472717285, -0.016170069575309753]",0.983959972858429
3,['    @Test\n    public void attributeNumberTest() {\n        // TODO: test attributeNumber\n    }\n'],attribute;Number;Number;TOD;attribute,9.313225746154785e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10;-1.7462298274040222e-09,5,5,"[-5.905216693878174, -5.759807586669922, -6.374887943267822, -5.520596981048584, -5.431395053863525, -0.01608983427286148]",0.984038770198822
3,['    @Test\n    public void attributeIntegerTest() {\n        // TODO: test attributeInteger\n    }\n'],TOD;attribute;attribute,6.402842700481415e-10;0.0;-5.238689482212067e-10,5,5,"[-5.910164833068848, -5.76991081237793, -6.37623929977417, -5.513340473175049, -5.435575008392334, -0.016052648425102234]",0.9840753674507141
3,['    @Test\n    public void attributeBooleanTest() {\n        // TODO: test attributeBoolean\n    }\n'],attribute;Boolean;attribute;Boolean;TOD,1.280568540096283e-09;1.1641532182693481e-09;5.820766091346741e-11;0.0;-4.889443516731262e-09,5,5,"[-5.901876926422119, -5.766340255737305, -6.3775739669799805, -5.4975905418396, -5.435055255889893, -0.016152122989296913]",0.9839776158332825
3,['    @Test\n    public void wrappedArrayTest() {\n        // TODO: test wrappedArray\n    }\n'],TOD;wrapped;Array;Array;wrapped,4.190951585769653e-09;2.0954757928848267e-09;9.313225746154785e-10;9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.868794918060303, -5.682959079742432, -6.3101911544799805, -5.460731029510498, -5.381775379180908, -0.01704191043972969]",0.9831025004386902
3,['    @Test\n    public void nameStringTest() {\n        // TODO: test nameString\n    }\n'],name;name;TOD,1.3969838619232178e-09;-1.862645149230957e-09;-7.683411240577698e-09,5,5,"[-5.884392261505127, -5.730629920959473, -6.3542704582214355, -5.496749401092529, -5.418039798736572, -0.016437118873000145]",0.983697235584259
3,['    @Test\n    public void nameNumberTest() {\n        // TODO: test nameNumber\n    }\n'],Number;TOD;Number;name;name,3.725290298461914e-09;2.7939677238464355e-09;2.3283064365386963e-09;0.0;-3.725290298461914e-09,5,5,"[-5.884740829467773, -5.724035263061523, -6.340831279754639, -5.499197006225586, -5.407521724700928, -0.016519319266080856]",0.9836162328720093
3,['    @Test\n    public void nameIntegerTest() {\n        // TODO: test nameInteger\n    }\n'],name;TOD;name,1.862645149230957e-09;-1.280568540096283e-09;-3.725290298461914e-09,5,5,"[-5.893439769744873, -5.739048004150391, -6.351640701293945, -5.501896858215332, -5.4166259765625, -0.01637367717921734]",0.9837596416473389
3,['    @Test\n    public void nameBooleanTest() {\n        // TODO: test nameBoolean\n    }\n'],Boolean;name;name;Boolean;TOD,2.0954757928848267e-09;1.862645149230957e-09;0.0;-4.656612873077393e-10;-1.6298145055770874e-09,5,5,"[-5.908915996551514, -5.773618698120117, -6.3778510093688965, -5.50045108795166, -5.4275031089782715, -0.016130773350596428]",0.9839986562728882
3,['    @Test\n    public void nameArrayTest() {\n        // TODO: test nameArray\n    }\n'],name;TOD;name;Array;Array,1.979060471057892e-09;1.862645149230957e-09;6.984919309616089e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.888881206512451, -5.740793228149414, -6.355410575866699, -5.493574619293213, -5.418034553527832, -0.016402408480644226]",0.9837313890457153
3,['    @Test\n    public void nameWrappedArrayTest() {\n        // TODO: test nameWrappedArray\n    }\n'],TOD;name;name;Array;Array;Wrapped;Wrapped,1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.5133991837501526e-09;9.313225746154785e-10;-9.313225746154785e-10;-3.026798367500305e-09,5,5,"[-5.898580074310303, -5.733082294464111, -6.365499973297119, -5.493240833282471, -5.421727657318115, -0.016367461532354355]",0.9837657809257507
3,['    @Test\n    public void prefixStringTest() {\n        // TODO: test prefixString\n    }\n'],TOD;prefix;prefix,5.587935447692871e-09;2.7939677238464355e-09;1.3969838619232178e-09,5,5,"[-5.892871379852295, -5.729301929473877, -6.364336013793945, -5.498095989227295, -5.423986911773682, -0.016367461532354355]",0.9837656617164612
3,['    @Test\n    public void prefixNumberTest() {\n        // TODO: test prefixNumber\n    }\n'],prefix;Number;Number;prefix;TOD,3.725290298461914e-09;3.725290298461914e-09;-1.862645149230957e-09;-2.7939677238464355e-09;-1.0710209608078003e-08,5,5,"[-5.896269798278809, -5.730032444000244, -6.353608131408691, -5.5023908615112305, -5.416218280792236, -0.016391737386584282]",0.9837419986724854
3,['    @Test\n    public void prefixIntegerTest() {\n        // TODO: test prefixInteger\n    }\n'],TOD;prefix;prefix,6.984919309616089e-09;1.0477378964424133e-09;-9.313225746154785e-10,5,5,"[-5.895721912384033, -5.721338272094727, -6.347159385681152, -5.4939703941345215, -5.415933609008789, -0.016469836235046387]",0.9836650490760803
3,['    @Test\n    public void prefixBooleanTest() {\n        // TODO: test prefixBoolean\n    }\n'],TOD;Boolean;Boolean;prefix;prefix,1.234002411365509e-08;-9.313225746154785e-10;-1.3969838619232178e-09;-3.725290298461914e-09;-4.6566128730773926e-09,5,5,"[-5.899255275726318, -5.7605881690979, -6.372218132019043, -5.4890360832214355, -5.437834739685059, -0.016210535541176796]",0.983920156955719
3,['    @Test\n    public void prefixArrayTest() {\n        // TODO: test prefixArray\n    }\n'],TOD;prefix;Array;Array;prefix,6.51925802230835e-09;1.5133991837501526e-09;-4.656612873077393e-10;-1.6298145055770874e-09;-2.561137080192566e-09,5,5,"[-5.897276401519775, -5.7368292808532715, -6.3636860847473145, -5.489162921905518, -5.426070690155029, -0.01635960303246975]",0.9837734699249268
3,['    @Test\n    public void prefixWrappedArrayTest() {\n        // TODO: test prefixWrappedArray\n    }\n'],prefix;Array;Wrapped;Wrapped;Array;prefix;TOD,1.979060471057892e-09;1.6298145055770874e-09;7.275957614183426e-10;6.402842700481415e-10;0.0;-2.0372681319713593e-10;-4.190951585769653e-09,5,5,"[-5.8974409103393555, -5.727471351623535, -6.360381126403809, -5.481923580169678, -5.421272277832031, -0.01644790731370449]",0.9836867451667786
3,['    @Test\n    public void namespaceStringTest() {\n        // TODO: test namespaceString\n    }\n'],namespace;namespace;TOD,6.984919309616089e-10;6.402842700481415e-10;-3.026798367500305e-09,5,5,"[-5.904144763946533, -5.757314682006836, -6.3878631591796875, -5.511723518371582, -5.437563896179199, -0.016087371855974197]",0.9840412139892578
3,['    @Test\n    public void namespaceNumberTest() {\n        // TODO: test namespaceNumber\n    }\n'],TOD;Number;Number;namespace;namespace,6.05359673500061e-09;1.862645149230957e-09;-1.280568540096283e-09;-1.862645149230957e-09;-2.7939677238464355e-09,5,5,"[-5.896787166595459, -5.739701747894287, -6.361207962036133, -5.507630348205566, -5.420113563537598, -0.016305889934301376]",0.9838263392448425
3,['    @Test\n    public void namespaceIntegerTest() {\n        // TODO: test namespaceInteger\n    }\n'],namespace;TOD;namespace,1.862645149230957e-09;4.656612873077393e-10;-3.4924596548080444e-10,5,5,"[-5.881054401397705, -5.71592903137207, -6.338678359985352, -5.495447158813477, -5.410637378692627, -0.016562234610319138]",0.9835741519927979
3,['    @Test\n    public void namespaceBooleanTest() {\n        // TODO: test namespaceBoolean\n    }\n'],Boolean;TOD;namespace;Boolean;namespace,9.313225746154785e-10;4.656612873077393e-10;0.0;-4.656612873077393e-10;-1.862645149230957e-09,5,5,"[-5.893003463745117, -5.74749755859375, -6.364921569824219, -5.489811897277832, -5.429701805114746, -0.016315624117851257]",0.9838166236877441
3,['    @Test\n    public void namespaceArrayTest() {\n        // TODO: test namespaceArray\n    }\n'],namespace;Array;namespace;Array;TOD,4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;5.820766091346741e-11;-2.444721758365631e-09,5,5,"[-5.90001106262207, -5.743628025054932, -6.371071815490723, -5.497143268585205, -5.428654193878174, -0.01627199538052082]",0.983859658241272
3,['    @Test\n    public void namespaceWrappedArrayTest() {\n        // TODO: test namespaceWrappedArray\n    }\n'],Wrapped;namespace;Wrapped;Array;Array;namespace;TOD,9.313225746154785e-10;7.566995918750763e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-1.3969838619232178e-09;-2.7939677238464355e-09,5,5,"[-5.892297744750977, -5.715444087982178, -6.354724407196045, -5.481687545776367, -5.415658950805664, -0.016538549214601517]",0.983597457408905
3,['    @Test\n    public void prefixNamespaceStringTest() {\n        // TODO: test prefixNamespaceString\n    }\n'],TOD;prefix;prefix;Namespace;Namespace,2.444721758365631e-09;9.89530235528946e-10;9.313225746154785e-10;2.3283064365386963e-10;-1.1641532182693481e-10,5,5,"[-5.885321140289307, -5.727416515350342, -6.353452205657959, -5.490783214569092, -5.41276216506958, -0.01649528183043003]",0.9836398959159851
3,['    @Test\n    public void prefixNamespaceNumberTest() {\n        // TODO: test prefixNamespaceNumber\n    }\n'],Number;TOD;prefix;Namespace;Namespace;prefix;Number,7.450580596923828e-09;6.51925802230835e-09;1.862645149230957e-09;-4.94765117764473e-10;-1.862645149230957e-09;-3.3760443329811096e-09;-4.190951585769653e-09,5,5,"[-5.890598297119141, -5.725341320037842, -6.347482681274414, -5.496606349945068, -5.408394813537598, -0.016493523493409157]",0.9836417436599731
3,['    @Test\n    public void prefixNamespaceIntegerTest() {\n        // TODO: test prefixNamespaceInteger\n    }\n'],Namespace;prefix;Namespace;TOD;prefix,1.0477378964424133e-09;4.656612873077393e-10;2.0372681319713593e-10;-1.1641532182693481e-09;-1.6298145055770874e-09,5,5,"[-5.899552345275879, -5.7457733154296875, -6.364796161651611, -5.504524230957031, -5.425199508666992, -0.016262026503682137]",0.9838694930076599
3,['    @Test\n    public void prefixNamespaceBooleanTest() {\n        // TODO: test prefixNamespaceBoolean\n    }\n'],Boolean;prefix;Boolean;Namespace;Namespace;prefix;TOD,2.0954757928848267e-09;1.3387762010097504e-09;1.1641532182693481e-09;9.022187441587448e-10;-4.656612873077393e-10;-1.1641532182693481e-09;-3.026798367500305e-09,5,5,"[-5.890422344207764, -5.742570877075195, -6.357795238494873, -5.488337993621826, -5.413247108459473, -0.01643160730600357]",0.9837026596069336
3,['    @Test\n    public void prefixNamespaceArrayTest() {\n        // TODO: test prefixNamespaceArray\n    }\n'],prefix;prefix;Array;Namespace;Array;Namespace;TOD,1.57160684466362e-09;1.1641532182693481e-09;9.313225746154785e-10;-6.984919309616089e-10;-6.984919309616089e-10;-1.7462298274040222e-09;-4.190951585769653e-09,5,5,"[-5.890768051147461, -5.736914157867432, -6.35806131362915, -5.486320495605469, -5.418011665344238, -0.016435595229268074]",0.9836987257003784
3,['    @Test\n    public void prefixNamespaceWrappedArrayTest() {\n        // TODO: test prefixNamespaceWrappedArray\n    }\n'],prefix;Namespace;Wrapped;Namespace;Wrapped;Array;Array;TOD;prefix,2.2118911147117615e-09;6.984919309616089e-10;2.9103830456733704e-10;1.1641532182693481e-10;0.0;0.0;-2.3283064365386963e-10;-3.7834979593753815e-10;-9.313225746154785e-10,5,5,"[-5.888942241668701, -5.729304790496826, -6.360508441925049, -5.4868903160095215, -5.418211460113525, -0.01645822636783123]",0.9836764931678772
3,['    @Test\n    public void testOuterComposite() {\n        // TODO: test OuterComposite\n    }\n'],Composite;TOD;Outer;Composite;Outer,1.6880221664905548e-09;3.4924596548080444e-10;-5.820766091346741e-10;-1.6298145055770874e-09;-1.862645149230957e-09,5,5,"[-5.904873371124268, -5.738732814788818, -6.386034965515137, -5.511984348297119, -5.426377296447754, -0.01619751751422882]",0.9839329719543457
3,['    @Test\n    public void myNumberTest() {\n        // TODO: test myNumber\n    }\n'],TOD;my;Number;Number;my,3.026798367500305e-09;1.0477378964424133e-09;9.313225746154785e-10;3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.889511585235596, -5.719107627868652, -6.353675365447998, -5.502658367156982, -5.415294647216797, -0.016449667513370514]",0.983684778213501
3,['    @Test\n    public void myStringTest() {\n        // TODO: test myString\n    }\n'],my;TOD;my,-4.656612873077393e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.86921501159668, -5.696591854095459, -6.323115348815918, -5.476213455200195, -5.392951965332031, -0.01685156859457493]",0.9832894802093506
3,['    @Test\n    public void myBooleanTest() {\n        // TODO: test myBoolean\n    }\n'],Boolean;my;TOD;my;Boolean,3.026798367500305e-09;4.656612873077393e-10;3.4924596548080444e-10;-1.6298145055770874e-09;-1.862645149230957e-09,5,5,"[-5.8964643478393555, -5.746074676513672, -6.365555763244629, -5.487975120544434, -5.431585311889648, -0.016308939084410667]",0.9838234186172485
3,['    @Test\n    public void testModelApiResponse() {\n        // TODO: test ModelApiResponse\n    }\n'],pi;Model;pi;Response;Response;Model;TOD,8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-3.4924596548080444e-10;-6.984919309616089e-10;-1.3969838619232178e-09,5,5,"[-5.879112243652344, -5.70898962020874, -6.33558988571167, -5.471304893493652, -5.39431619644165, -0.016773264855146408]",0.9833664894104004
3,['    @Test\n    public void codeTest() {\n        // TODO: test code\n    }\n'],code;code;TOD,9.313225746154785e-10;5.820766091346741e-11;-2.9103830456733704e-09,5,5,"[-5.944169044494629, -5.812868595123291, -6.419583320617676, -5.540683269500732, -5.456130027770996, -0.015553482808172703]",0.984566867351532
3,['    @Test\n    public void typeTest() {\n        // TODO: test type\n    }\n'],type;type;TOD,1.862645149230957e-09;7.566995918750763e-10;4.656612873077393e-10,5,5,"[-5.890827178955078, -5.749887466430664, -6.3659138679504395, -5.503868103027344, -5.421712875366211, -0.016289588063955307]",0.9838424921035767
3,['    @Test\n    public void messageTest() {\n        // TODO: test message\n    }\n'],TOD;message;message,9.313225746154785e-09;5.587935447692871e-09;6.984919309616089e-10,5,5,"[-5.909789085388184, -5.761073112487793, -6.374088764190674, -5.515762805938721, -5.420608043670654, -0.016142504289746284]",0.9839869737625122
3,['    @Test\n    public void testCategory() {\n        // TODO: test Category\n    }\n'],Category;TOD;Category,1.4842953532934189e-09;9.313225746154785e-10;-1.0477378964424133e-09,5,5,"[-5.901345729827881, -5.758638858795166, -6.373632907867432, -5.510909557342529, -5.423037528991699, -0.016183558851480484]",0.983946681022644
3,['    @Test\n    public void idTest() {\n        // TODO: test id\n    }\n'],id;TOD;id,2.7939677238464355e-09;2.3283064365386963e-09;2.3283064365386963e-10,5,5,"[-5.882280349731445, -5.72213888168335, -6.343630313873291, -5.491466999053955, -5.410473346710205, -0.016546405851840973]",0.9835895895957947
3,['    @Test\n    public void nameTest() {\n        // TODO: test name\n    }\n'],name;TOD;name,5.587935447692871e-09;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.91178035736084, -5.7732954025268555, -6.373849868774414, -5.516908645629883, -5.42357063293457, -0.016080684959888458]",0.9840478897094727
3,['    @Test\n    public void testName() {\n        // TODO: test Name\n    }\n'],TOD;Name;Name,2.7939677238464355e-09;-1.862645149230957e-09;-7.450580596923828e-09,5,5,"[-5.888466835021973, -5.731600284576416, -6.336501598358154, -5.496908187866211, -5.39915132522583, -0.016539370641112328]",0.9835965633392334
3,['    @Test\n    public void nameTest() {\n        // TODO: test name\n    }\n'],name;TOD;name,5.587935447692871e-09;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.91178035736084, -5.7732954025268555, -6.373849868774414, -5.516908645629883, -5.42357063293457, -0.016080684959888458]",0.9840478897094727
3,['    @Test\n    public void snakeCaseTest() {\n        // TODO: test snakeCase\n    }\n'],TOD;Case;Case;snake;snake,5.122274160385132e-09;2.7939677238464355e-09;1.3969838619232178e-09;-1.862645149230957e-09;-4.6566128730773926e-09,5,5,"[-5.898683071136475, -5.757006645202637, -6.375308513641357, -5.504306793212891, -5.4144062995910645, -0.01625944674015045]",0.98387211561203
3,['    @Test\n    public void propertyTest() {\n        // TODO: test property\n    }\n'],property;TOD;property,6.51925802230835e-09;-1.862645149230957e-09;-5.587935447692871e-09,5,5,"[-5.910796165466309, -5.785109996795654, -6.3938164710998535, -5.525114059448242, -5.436949253082275, -0.015919139608740807]",0.984207034111023
3,['    @Test\n    public void _123numberTest() {\n        // TODO: test _123number\n    }\n'],number;number;TOD,1.3969838619232178e-09;6.984919309616089e-10;-4.656612873077393e-10,5,5,"[-5.887391567230225, -5.703397750854492, -6.337364673614502, -5.487179279327393, -5.414304256439209, -0.016606789082288742]",0.9835302233695984
3,['    @Test\n    public void testAdditionalPropertiesBoolean() {\n        // TODO: test AdditionalPropertiesBoolean\n    }\n'],Boolean;Additional;Additional;Properties;Properties;Boolean;TOD,4.423782229423523e-09;1.5133991837501526e-09;8.149072527885437e-10;-2.3283064365386963e-10;-8.149072527885437e-10;-1.2223608791828156e-09;-2.7939677238464355e-09,5,5,"[-5.8836798667907715, -5.746940612792969, -6.344310283660889, -5.463503360748291, -5.419422149658203, -0.016538197174668312]",0.9835978150367737
3,['    @Test\n    public void nameTest() {\n        // TODO: test name\n    }\n'],name;TOD;name,5.587935447692871e-09;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.91178035736084, -5.7732954025268555, -6.373849868774414, -5.516908645629883, -5.42357063293457, -0.016080684959888458]",0.9840478897094727
3,['    @Test\n    public void testCatAllOf() {\n        // TODO: test CatAllOf\n    }\n'],Cat;All;Cat;TOD;All,3.725290298461914e-09;2.7939677238464355e-09;1.862645149230957e-09;-6.984919309616089e-10;-4.889443516731262e-09,5,5,"[-5.92546272277832, -5.783118724822998, -6.416078567504883, -5.524756908416748, -5.447636604309082, -0.015802275389432907]",0.9843219518661499
3,['    @Test\n    public void declawedTest() {\n        // TODO: test declawed\n    }\n'],TOD;declawed;declawed,2.7939677238464355e-09;1.1059455573558807e-09;8.149072527885437e-10,5,5,"[-5.877697944641113, -5.707645893096924, -6.339504718780518, -5.483697891235352, -5.405728816986084, -0.016669748350977898]",0.9834684133529663
3,['    @Test\n    public void testFileSchemaTestClass() {\n        // TODO: test FileSchemaTestClass\n    }\n'],Schema;Schema;File;Class;TOD;Class;File,1.979060471057892e-09;4.656612873077393e-10;1.7462298274040222e-10;-1.7462298274040222e-10;-1.1641532182693481e-09;-1.6880221664905548e-09;-1.862645149230957e-09,5,5,"[-5.86880350112915, -5.680832862854004, -6.310470104217529, -5.463468074798584, -5.377298831939697, -0.01705796644091606]",0.9830867052078247
3,['    @Test\n    public void fileTest() {\n        // TODO: test file\n    }\n'],TOD;file;file,6.984919309616089e-09;2.3283064365386963e-09;-1.862645149230957e-09,5,5,"[-5.920766353607178, -5.774755477905273, -6.403059482574463, -5.538719654083252, -5.439679145812988, -0.01584181748330593]",0.9842830300331116
3,['    @Test\n    public void filesTest() {\n        // TODO: test files\n    }\n'],TOD;files;files,6.984919309616089e-09;-1.1641532182693481e-09;-2.0954757928848267e-09,5,5,"[-5.8920817375183105, -5.746440410614014, -6.36232328414917, -5.508906841278076, -5.413939952850342, -0.016317619010806084]",0.9838146567344666
3,['    @Test\n    public void testAdditionalPropertiesInteger() {\n        // TODO: test AdditionalPropertiesInteger\n    }\n'],TOD;Additional;Properties;Properties;Additional,9.313225746154785e-10;1.1641532182693481e-10;5.820766091346741e-11;1.4551915228366852e-11;-8.149072527885437e-10,5,5,"[-5.8846611976623535, -5.719503879547119, -6.338151454925537, -5.476921558380127, -5.417600154876709, -0.01658756099641323]",0.9835493564605713
3,['    @Test\n    public void nameTest() {\n        // TODO: test name\n    }\n'],name;TOD;name,5.587935447692871e-09;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.91178035736084, -5.7732954025268555, -6.373849868774414, -5.516908645629883, -5.42357063293457, -0.016080684959888458]",0.9840478897094727
3,['    @Test\n    public void testAdditionalPropertiesObject() {\n        // TODO: test AdditionalPropertiesObject\n    }\n'],Object;Additional;Properties;Properties;Additional;TOD;Object,4.0745362639427185e-10;3.4924596548080444e-10;-1.7462298274040222e-10;-4.0745362639427185e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.280568540096283e-09,5,5,"[-5.865988731384277, -5.679452419281006, -6.3108744621276855, -5.459898948669434, -5.383779525756836, -0.017055153846740723]",0.9830894470214844
3,['    @Test\n    public void nameTest() {\n        // TODO: test name\n    }\n'],name;TOD;name,5.587935447692871e-09;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.91178035736084, -5.7732954025268555, -6.373849868774414, -5.516908645629883, -5.42357063293457, -0.016080684959888458]",0.9840478897094727
3,['    @Test\n    public void testReadOnlyFirst() {\n        // TODO: test ReadOnlyFirst\n    }\n'],Read;Only;First;Read;First;TOD;Only,9.313225746154785e-10;9.313225746154785e-10;2.9103830456733704e-10;1.1641532182693481e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-5.238689482212067e-10,5,5,"[-5.878568649291992, -5.710583686828613, -6.325741767883301, -5.472399711608887, -5.398273944854736, -0.016764473170042038]",0.9833752512931824
3,['    @Test\n    public void barTest() {\n        // TODO: test bar\n    }\n'],TOD;bar;bar,4.773028194904327e-09;1.862645149230957e-09;-4.6566128730773926e-09,5,5,"[-5.923666000366211, -5.804013252258301, -6.429355621337891, -5.564047336578369, -5.450350761413574, -0.015552661381661892]",0.9845676422119141
3,['    @Test\n    public void bazTest() {\n        // TODO: test baz\n    }\n'],az;az;TOD,0.0;-6.984919309616089e-10;-2.3283064365386963e-09,5,5,"[-5.913900852203369, -5.7512593269348145, -6.3925299644470215, -5.518807411193848, -5.425602436065674, -0.01609640382230282]",0.9840325713157654
3,['    @Test\n    public void testEnumTest() {\n        // TODO: test EnumTest\n    }\n'],Enum;TOD;Enum,2.0954757928848267e-09;1.979060471057892e-09;-3.259629011154175e-09,5,5,"[-5.898715019226074, -5.745144844055176, -6.356447219848633, -5.493842124938965, -5.415094375610352, -0.016370980069041252]",0.9837623238563538
3,['    @Test\n    public void enumStringTest() {\n        // TODO: test enumString\n    }\n'],enum;TOD;enum,-4.656612873077393e-10;-1.0477378964424133e-09;-2.3283064365386963e-09,5,5,"[-5.902508735656738, -5.7551374435424805, -6.380070686340332, -5.502374172210693, -5.433552265167236, -0.016168778762221336]",0.9839613437652588
3,['    @Test\n    public void enumStringRequiredTest() {\n        // TODO: test enumStringRequired\n    }\n'],Required;Required;enum;enum;TOD,9.313225746154785e-10;0.0;-9.313225746154785e-10;-1.1641532182693481e-09;-1.6298145055770874e-09,5,5,"[-5.9077324867248535, -5.758001327514648, -6.379495620727539, -5.49846076965332, -5.4468536376953125, -0.016103677451610565]",0.9840252995491028
3,"['    @Test\n    public void name() throws Exception {\n        System.out.println(""aaaa"");\n    }\n']",println;Exception;out;System;name;aaaa,1.1059455573558807e-09;5.238689482212067e-10;2.0372681319713593e-10;0.0;-3.4924596548080444e-10;-9.313225746154785e-10,5,5,"[-5.856794834136963, -5.673112392425537, -6.292367935180664, -5.45067834854126, -5.367173671722412, -0.017256589606404305]",0.982891321182251
3,['    @Test(expected = IllegalStateException.class)\n    public void shouldThrowExceptionWhenAlreadyUsed() throws Exception {\n        // simulate cucumber scenario start\n        simulateCucumberScenarioStart();\n\n        instance.addModule(binder -> {\n        });\n    }\n'],expected;Exception;Exception;When;instance;cucumber;Module;scenario;add;simulate,1.3969838619232178e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10,5,5,"[-5.918467044830322, -5.762254238128662, -6.401998996734619, -5.484447956085205, -5.512156963348389, -0.01580391824245453]",0.9843201637268066
3,"['    @Test\n    public void shouldSupportScenarioScope() {\n        simulateCucumberScenarioStart();\n\n        final ScenarioScopedClass a = instance.getInstance(ScenarioScopedClass.class);\n        a.value = 10;\n        assertEquals(10, a.value);\n\n        final ScenarioScopedClass b = instance.getInstance(ScenarioScopedClass.class);\n        assertEquals(10, b.value);\n\n        simulateCucumberScenarioStop();\n        simulateCucumberScenarioStart();\n\n        final ScenarioScopedClass c = instance.getInstance(ScenarioScopedClass.class);\n        assertEquals(0, c.value);\n\n        simulateCucumberScenarioStop();\n    }\n']",Scenario;Support;Scenario;Equals;Scenario;Scope;Scenario;Scenario;Scoped;ucumber,9.604264050722122e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.8917489796876907e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.849604606628418, -5.693068981170654, -6.283531665802002, -5.339742183685303, -5.4643964767456055, -0.017297714948654175]",0.9828509092330933
3,"['    @Test(expected = CukesRuntimeException.class)\n    public void byInvalidPattern() throws Exception {\n        generator.byPattern(""b"");\n    }\n']",Runtime;by;ukes;generator;Pattern;Exception;Invalid;Exception;class;Pattern,1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;2.3283064365386963e-10;-8.440110832452774e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.941056728363037, -5.814722061157227, -6.446436882019043, -5.548579216003418, -5.488317012786865, -0.015343721956014633]",0.9847735166549683
3,"['    @Test\n    public void byPattern1() throws Exception {\n        assertThat(generator.byPattern(""A""), ContainsPattern.matchesPattern(""[A-Z]""));\n        assertThat(generator.byPattern(""a""), ContainsPattern.matchesPattern(""[a-z]""));\n        assertThat(generator.byPattern(""0""), ContainsPattern.matchesPattern(""[0-9]""));\n\n        assertThat(generator.byPattern(""0Aa""), ContainsPattern.matchesPattern(Pattern.compile(""[0-9][A-Z][a-z]"")));\n    }\n']",generator;Pattern;by;Contains;matches;matches;Pattern;Contains;Contains;Pattern,4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.858344554901123, -5.694447994232178, -6.302779674530029, -5.381507396697998, -5.443670272827148, -0.017121952027082443]",0.9830238223075867
3,"['    @Test\n    public void withLength() throws Exception {\n        assertThat(generator.withLength(5), ContainsPattern.matchesPattern(Pattern.compile(""[A-Za-z0-9]{5}"")));\n    }\n']",with;Length;That;Contains;matches;Pattern;Pattern;compile;with;Exception,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10;0.0;-5.820766091346741e-11;-1.1641532182693481e-10;-2.473825588822365e-10,5,5,"[-5.880944728851318, -5.752573013305664, -6.334737777709961, -5.464391708374023, -5.431919097900391, -0.016485197469592094]",0.9836500287055969
3,"['    @Test\n    public void shouldExtractNoGroupsInPattern() throws Exception {\n        List<String> groups = capturer.extractGroups(""(hello)"");\n        assertThat(groups, is(empty()));\n    }\n']",should;extract;Exception;capture;groups;roups;empty;That;hello;List,2.7939677238464355e-09;2.0372681319713593e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-5.895396709442139, -5.739581108093262, -6.366334438323975, -5.470235824584961, -5.458324432373047, -0.016289588063955307]",0.9838423728942871
3,"['    @Test\n    public void shouldExtractSingleGroupInPattern() throws Exception {\n        List<String> groups = capturer.extractGroups(""{(hello)}"");\n        assertThat(groups, contains(""hello""));\n    }\n']",hello;roups;Extract;capture;contains;That;Exception;groups;extract;should,1.979060471057892e-09;9.313225746154785e-10;7.275957614183426e-10;6.402842700481415e-10;2.3283064365386963e-10;2.3283064365386963e-10;5.820766091346741e-11;1.4551915228366852e-11;-2.9103830456733704e-11;-3.4924596548080444e-10,5,5,"[-5.9012675285339355, -5.783560276031494, -6.394136905670166, -5.469614505767822, -5.46361780166626, -0.01606437936425209]",0.984063982963562
3,"['    @Test\n    public void shouldExtractTwoGroupsInPattern() throws Exception {\n        List<String> groups = capturer.extractGroups(""{(hello)}, {(world)}"");\n        assertThat(groups, contains(""hello"", ""world""));\n    }\n']",Extract;world;Two;hello;In;roups;should;world;That;hello,9.89530235528946e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.878432273864746, -5.745206356048584, -6.358542442321777, -5.45211124420166, -5.455350875854492, -0.016423985362052917]",0.9837102890014648
3,"['    @Test\n    public void shouldNotExtractGroupsInPatternWithSpacesInName() throws Exception {\n        List<String> groups = capturer.extractGroups(""{(hello world)}"");\n        assertThat(groups, is(empty()));\n    }\n']",Extract;Spaces;In;Pattern;In;empty;That;Name;should;groups,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;1.7462298274040222e-10;8.731149137020111e-11;5.820766091346741e-11;0.0;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.919379234313965, -5.796804904937744, -6.433937072753906, -5.502599716186523, -5.49131441116333, -0.015650659799575806]",0.9844712018966675
3,"['    @Test\n    public void shouldExtractGroupsInPatternWithUnderscoreInName() throws Exception {\n        List<String> groups = capturer.extractGroups(""{(hello_world)}"");\n        assertThat(groups, contains(""hello_world""));\n    }\n']",Extract;world;hello;In;Exception;capture;should;extract;roups;contains,2.9103830456733704e-09;2.7939677238464355e-09;1.862645149230957e-09;9.313225746154785e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.913328170776367, -5.787504196166992, -6.4220476150512695, -5.50300931930542, -5.494483470916748, -0.015700535848736763]",0.984421968460083
3,"['    @Test\n    public void shouldExtractDotSeparatedName() throws Exception {\n        List<String> groups = capturer.extractGroups(""{(hello.world)}"");\n        assertThat(groups, contains(""hello.world""));\n    }\n']",ot;hello;hello;Name;should;roups;extract;contains;Exception;Separated,3.725290298461914e-09;2.0954757928848267e-09;2.3283064365386963e-10;2.3283064365386963e-10;0.0;0.0;0.0;-2.3283064365386963e-10;-2.9103830456733704e-10;-3.4924596548080444e-10,5,5,"[-5.916615962982178, -5.817925930023193, -6.420284271240234, -5.4757537841796875, -5.4862470626831055, -0.015750057995319366]",0.9843733310699463
3,"['    @Test\n    public void testInflateGroups() throws Exception {\n        doReturn(Optional.of(""foo"")).when(world).get(""foo"");\n        String value = inflater.inflateGroups(""{(foo)} bar"", Sets.newHashSet(""foo""));\n        assertThat(value, equalTo(""foo bar""));\n    }\n']",Inflate;world;inflater;Hash;foo;of;Optional;foo;roups;when,2.6193447411060333e-09;2.561137080192566e-09;8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10,5,5,"[-5.883548259735107, -5.767184257507324, -6.372216701507568, -5.445154666900635, -5.48474645614624, -0.016219332814216614]",0.9839115142822266
3,"['    @Test\n    public void testInflateGroups_emptyWorld() throws Exception {\n        String value = inflater.inflateGroups(""{(foo)} bar"", Sets.newHashSet(""foo""));\n        assertThat(value, equalTo(""{(foo)} bar""));\n    }\n']",bar;bar;foo;Hash;inflater;roups;Sets;value;value;equal,4.6566128730773926e-09;3.958120942115784e-09;2.7939677238464355e-09;2.561137080192566e-09;1.7462298274040222e-09;1.3969838619232178e-09;5.820766091346741e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.8827972412109375, -5.751223564147949, -6.362567901611328, -5.449495792388916, -5.455730438232422, -0.01639466919004917]",0.9837390184402466
3,"['    @Test\n    public void testInflateGroups_multipleEmpty() throws Exception {\n        String value = inflater.inflateGroups(""{(foo)} {(bar)}"", Sets.newHashSet(""foo"", ""bar""));\n        assertThat(value, equalTo(""{(foo)} {(bar)}""));\n    }\n']",multiple;Sets;bar;bar;Exception;inflate;equal;foo;value;Hash,9.313225746154785e-10;7.34871719032526e-10;4.3655745685100555e-10;3.92901711165905e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.8842058181762695, -5.7576904296875, -6.374471664428711, -5.449467182159424, -5.46862268447876, -0.016293693333864212]",0.9838384389877319
3,"['    @Test\n    public void testInflateGroups_halfEmpty() throws Exception {\n        doReturn(Optional.of(""foo"")).when(world).get(""foo"");\n        String value = inflater.inflateGroups(""{(foo)} {(bar)}"", Sets.newHashSet(""foo"", ""bar""));\n        assertThat(value, equalTo(""foo {(bar)}""));\n    }\n']",foo;Optional;bar;roups;do;Return;Exception;roups;when;Set,2.7939677238464355e-09;1.6298145055770874e-09;1.3387762010097504e-09;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0,5,5,"[-5.8856096267700195, -5.769803047180176, -6.3731489181518555, -5.435754776000977, -5.4859747886657715, -0.01623997651040554]",0.9838913083076477
3,"['    @Test\n    public void testInflateGroups_withPlainText() throws Exception {\n        doReturn(Optional.of(""foo"")).when(world).get(""foo"");\n        String value = inflater.inflateGroups(""my {(foo)} is very {(bar)} !"", Sets.newHashSet(""foo"", ""bar""));\n        assertThat(value, equalTo(""my foo is very {(bar)} !""));\n    }\n']",Plain;very;when;Inflate;foo;bar;foo;roups;Exception;inflater,2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10,5,5,"[-5.893661022186279, -5.799148082733154, -6.423116207122803, -5.457698345184326, -5.52195405960083, -0.015796056017279625]",0.984328031539917
3,"['    @Test\n    public void testInflateGroups_multipleExist() throws Exception {\n        doReturn(Optional.of(""foo"")).when(world).get(""foo"");\n        doReturn(Optional.of(""bar"")).when(world).get(""bar"");\n        String value = inflater.inflateGroups(""{(foo)} {(bar)}"", Sets.newHashSet(""foo"", ""bar""));\n        assertThat(value, equalTo(""foo bar""));\n    }\n']",bar;Hash;of;roups;inflate;bar;roups;foo;Return;world,8.149072527885437e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.8753252029418945, -5.760354995727539, -6.356285095214844, -5.410514831542969, -5.473904132843018, -0.01649305410683155]",0.9836422204971313
3,"['    @Test\n    public void testInflateGroups_multipleSameExist() throws Exception {\n        doReturn(Optional.of(""foo"")).when(world).get(""foo"");\n        String value = inflater.inflateGroups(""{(foo)} {(foo)}"", Sets.newHashSet(""foo""));\n        assertThat(value, equalTo(""foo foo""));\n    }\n']",roups;do;get;multiple;Same;foo;foo;value;foo;Hash,6.402842700481415e-10;6.111804395914078e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.883833885192871, -5.767935752868652, -6.378859519958496, -5.45103645324707, -5.491580486297607, -0.01615024544298649]",0.9839794635772705
3,"['    @Test\n    public void testInflateGroups_multipleSameEmpty() throws Exception {\n        String value = inflater.inflateGroups(""{(foo)} {(foo)}"", Sets.newHashSet(""foo""));\n        assertThat(value, equalTo(""{(foo)} {(foo)}""));\n    }\n']",foo;Exception;Same;inflater;That;Set;value;roups;foo;equal,1.280568540096283e-09;5.820766091346741e-10;4.656612873077393e-10;2.6193447411060333e-10;5.820766091346741e-11;5.820766091346741e-11;2.9103830456733704e-11;0.0;-1.1641532182693481e-10;-2.9103830456733704e-10,5,5,"[-5.884030818939209, -5.754366397857666, -6.369251728057861, -5.454359531402588, -5.466726303100586, -0.016300730407238007]",0.9838314056396484
3,"['    @Test\n    public void shouldTransformPatternToValidRegex() throws Exception {\n        String regex = capturer.transformToRegex(""{(hello)} world"");\n        assertThat(regex, equalTo(""(.*) world""));\n    }\n']",hello;Regex;Transform;should;transform;Regex;equal;regex;That;capture,2.6775524020195007e-09;1.9208528101444244e-09;1.7462298274040222e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;0.0,5,5,"[-5.911703586578369, -5.76389217376709, -6.397371768951416, -5.481023788452148, -5.459496974945068, -0.01606144569814205]",0.9840668439865112
3,"['    @Test\n    public void shouldTransformMultiplePatternToValidRegex() throws Exception {\n        String regex = capturer.transformToRegex(""{(hello)} {(world)}"");\n        assertThat(regex, equalTo(""(.*) (.*)""));\n    }\n']",capture;regex;transform;Regex;equal;Exception;regex;should;Regex;That,1.862645149230957e-09;1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;6.693881005048752e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.906091213226318, -5.761649131774902, -6.404314994812012, -5.476672172546387, -5.461338043212891, -0.016082797199487686]",0.9840457439422607
3,"['    @Test\n    public void shouldCaptureValuesFromSimplePattern() throws Exception {\n        capturer.captureValuesFromPattern(""(.*) world"", Lists.newArrayList(""hello""), ""Hi world"");\n        verify(world).put(""hello"", ""Hi"");\n    }\n']",should;verify;hello;Pattern;Hi;Pattern;new;capture;Values;From,6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.890929698944092, -5.768615245819092, -6.367720127105713, -5.4441328048706055, -5.456042289733887, -0.01632911153137684]",0.9838035106658936
3,"['    @Test\n    public void shouldCaptureValuesFromMinimalPattern() throws Exception {\n        capturer.captureValuesFromPattern(""(.*)"", Lists.newArrayList(""hello""), ""world"");\n        verify(world).put(""hello"", ""world"");\n    }\n']",Capture;Values;hello;Values;hello;Exception;Pattern;capture;List;Lists,1.862645149230957e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.907275199890137, -5.774205207824707, -6.414579391479492, -5.492225170135498, -5.485501766204834, -0.01585390418767929]",0.9842711091041565
3,"['    @Test\n    public void shouldNotInvokeCaptureValuesFromPatternIfNoGroupsFound() throws Exception {\n        capturer.capture(""hello"", ""world"");\n        verify(capturer, never()).captureValuesFromPattern(anyString(), anyListOf(String.class), anyString());\n    }\n']",hello;capture;Exception;should;From;any;roups;From;class;Values,5.820766091346741e-10;5.165929906070232e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.1641532182693481e-10,5,5,"[-5.889155387878418, -5.76572322845459, -6.384149551391602, -5.472889423370361, -5.483151912689209, -0.016074232757091522]",0.9840541481971741
3,"['    @Test\n    public void shouldInvokeCaptureValuesFromPatternIfAtLeastOneGroupFound() throws Exception {\n        capturer.capture(""{(hello)}"", ""world"");\n        verify(capturer).captureValuesFromPattern(anyString(), anyListOf(String.class), anyString());\n    }\n']",Pattern;capture;One;Group;Capture;Values;Invoke;should;Pattern;List,3.026798367500305e-09;1.2223608791828156e-09;1.1641532182693481e-09;8.440110832452774e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.903981685638428, -5.780459403991699, -6.41746187210083, -5.494480133056641, -5.508141040802002, -0.015734920278191566]",0.9843883514404297
3,"['    @Test\n    public void shouldNotInvokeCaptureValuesFromPatternIfRegexDoesNotMatchValue() throws Exception {\n        capturer.capture(""{(hello)} Riga"", ""hello world"");\n        verify(capturer, never()).captureValuesFromPattern(anyString(), anyListOf(String.class), anyString());\n    }\n']",iga;hello;world;Values;From;Regex;any;capture;Not;Capture,1.862645149230957e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.7834979593753815e-10;3.346940502524376e-10;2.3283064365386963e-10,5,5,"[-5.880185127258301, -5.748733997344971, -6.376979351043701, -5.464937210083008, -5.479771137237549, -0.016214992851018906]",0.9839157462120056
3,"['    @Test\n    public void testBody() {\n        String body = ""{\\n"" +\n            "" \\""business\\"": {\\n"" +\n            "" \\""businessDirection\\"": 1006415,\\n"" +\n            "" \\""transactionType\\"": 101759,\\n"" +\n            "" \\""businessSegment\\"": 1022645\\n"" +\n            "" },\\n"" +\n            "" \\""contractName\\"": \\""@contractName\\"",\\n"" +\n            "" \\""underwritingYear\\"": 2015,\\n"" +\n            "" \\""businessAndParticipationType\\"": 1001011,\\n"" +\n            "" \\""agreementType\\"": \\""@agreementType\\"",\\n"" +\n            "" \\""fasClassification\\"": \\""@fasClassification\\"",\\n"" +\n            "" \\""accountingBasis\\"": 100003,\\n"" +\n            "" \\""underwritingObjectStatus\\"": 1003797,\\n"" +\n            "" \\""inceptionDate\\"": \\""2015-01-01T00:00:00.000+0000\\"",\\n"" +\n            "" \\""expirationDate\\"": \\""2015-12-31T00:00:00.000+0000\\"",\\n"" +\n            "" \\""contractCurrency\\"": \\""EUR\\"",\\n"" +\n            "" \\""profitCentre\\"": @profitCentre,\\n"" +\n            "" \\""involvedParties\\"": [\\n"" +\n            "" {\\n"" +\n            "" \\""partnerId\\"": \\""@partnerId_1\\"",\\n"" +\n            "" \\""partnerRole\\"": @partnerRole\\n"" +\n            "" },\\n"" +\n            "" {\\n"" +\n            "" \\""partnerId\\"": @partnerId_2,\\n"" +\n            "" \\""partnerRole\\"": 2173\\n"" +\n            "" }\\n"" +\n            "" ]\\n"" +\n            ""}"";\n\n        String processBody = TemplatingEngine.processBody(body);\n\n        assertTrue(processBody.contains(""\\""contractName\\"": \\""test1\\""""));\n        assertTrue(processBody.contains(""\\""profitCentre\\"": 24342""));\n    }\n']",expiration;inception;irection;urrency;as;Classification;business;Object;Classification;business,1.076841726899147e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;3.346940502524376e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.473825588822365e-10;2.255546860396862e-10;1.8917489796876907e-10,5,5,"[-5.816967964172363, -5.645061016082764, -6.237096786499023, -5.275674819946289, -5.482834339141846, -0.017898356541991234]",0.9822608828544617
3,"['    @Test\n    public void testOutputStream() throws UnsupportedEncodingException {\n        when(world.get(LOGGING_REQUEST_INCLUDES, """")).thenReturn(""all"");\n\n        RequestSpecification specification = RestAssured.given()\n            .config(config.getConfig())\n            .baseUri(""http://google.com"")\n            .param(""q"", ""hi"");\n\n        plugin.beforeRequest(specification);\n\n        specification.get();\n\n        String requestLog = testOut.toString(""UTF-8"");\n        assertThat(requestLog, is(EXPECTED_RESULT));\n    }\n']",world;Unsupported;http;LOG;Request;when;REQUEST;before;ING;EXPECTED,2.3283064365386963e-09;1.862645149230957e-09;1.280568540096283e-09;6.984919309616089e-10;5.893525667488575e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.863958835601807, -5.740567684173584, -6.33686637878418, -5.396206855773926, -5.497490406036377, -0.01659037359058857]",0.9835464954376221
3,"['    @Test\n    public void shouldNotInflateVarName() throws Exception {\n        String headerName = ""name"";\n        HttpResponseFacade mock = mock(HttpResponseFacade.class);\n        Response response = mock(Response.class);\n        when(response.getHeader(anyString())).thenReturn(headerName);\n        when(mock.response()).thenReturn(response);\n        ((HttpAssertionFacadeImpl) facade).facade = mock;\n\n        world.put(""id"", ""1"");\n        facade.varAssignedFromHeader(""{(id)}"", headerName);\n        Optional<String> value = world.get(""id"");\n        assertThat(value, CustomMatchers.equalToOptional(headerName));\n    }\n']",From;Var;header;Name;Assigned;facade;world;class;Matchers;when,4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10;2.255546860396862e-10;2.0372681319713593e-10,5,5,"[-5.831443786621094, -5.6991167068481445, -6.257129669189453, -5.30898380279541, -5.455784797668457, -0.01757149212062359]",0.9825819730758667
3,"['    @Test\n    public void shouldReturnBodyWhenEnabledWithMax() {\n        String body = ""{\\n"" +\n            ""  \\""error\\"": \\""not found\\""\\n"" +\n            ""}"";\n\n        HttpResponseFacade mock = mock(HttpResponseFacade.class);\n        when(mock.response()).thenReturn(generateResponse(\n            ""application/json"",\n            404,\n            body.getBytes()));\n\n        ((HttpAssertionFacadeImpl) facade).facade = mock;\n        world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""true"");\n        world.put(ASSERTS_STATUS_CODE_MAX_SIZE, ""100"");\n\n        validateException(\n            200,\n            ""1 expectation failed.\\n"" +\n                ""Expected status code \\""200\\"" but was \\""404\\"" with body:\\n"" +\n                ""\\""\\""\\""\\n"" +\n                body +\n                ""\\n\\""\\""\\"".\\n"");\n    }\n']",world;ttp;When;SIZE;world;Facade;ODE;should;Enabled;true,4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.861627101898193, -5.729275226593018, -6.317581653594971, -5.327942848205566, -5.528132438659668, -0.01686926744878292]",0.9832721948623657
3,"['    @Test\n    public void shouldReturnBodyWhenEnabledAndNoMax() {\n        String body = ""{\\n"" +\n            ""  \\""error\\"": \\""not found\\""\\n"" +\n            ""}"";\n\n        HttpResponseFacade mock = mock(HttpResponseFacade.class);\n        when(mock.response()).thenReturn(generateResponse(\n            ""application/json"",\n            404,\n            body.getBytes()));\n\n        ((HttpAssertionFacadeImpl) facade).facade = mock;\n        world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""true"");\n\n        validateException(\n            200,\n            ""1 expectation failed.\\n"" +\n                ""Expected status code \\""200\\"" but was \\""404\\"" with body:\\n"" +\n                ""\\""\\""\\""\\n"" +\n                body +\n                ""\\n\\""\\""\\"".\\n"");\n    }\n']",Body;was;STATUS;application;When;with;generate;when;Assertion;mock,7.566995918750763e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2378011383116245e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.546585164964199e-10,5,5,"[-5.863718032836914, -5.735803604125977, -6.3271379470825195, -5.3406267166137695, -5.534801483154297, -0.01673516444861889]",0.9834040999412537
3,"['    @Test\n    public void shouldNotReturnBodyWhenDisabled() {\n        String body = ""{\\n"" +\n            ""  \\""error\\"": \\""not found\\""\\n"" +\n            ""}"";\n\n        HttpResponseFacade mock = mock(HttpResponseFacade.class);\n        when(mock.response()).thenReturn(generateResponse(\n            ""application/json"",\n            404,\n            body.getBytes()));\n\n        ((HttpAssertionFacadeImpl) facade).facade = mock;\n        world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""false"");\n        world.put(ASSERTS_STATUS_CODE_MAX_SIZE, ""100"");\n\n        validateException(\n            200,\n            ""1 expectation failed.\\n"" +\n                ""Expected status code \\""200\\"" but was \\""404\\"".\\n"");\n    }\n']",mock;ODE;ODE;mock;failed;expectation;Assertion;ASSERTS;Bytes;put,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.7284841053187847e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.854771614074707, -5.718656539916992, -6.304100036621094, -5.335285186767578, -5.5141167640686035, -0.016970420256257057]",0.9831728935241699
3,"['    @Test\n    public void shouldNotReturnBodyWhenEnabledButLongerThanMaxSize() {\n        String body = ""{\\n"" +\n            ""  \\""error\\"": \\""not found\\""\\n"" +\n            ""}"";\n\n        HttpResponseFacade mock = mock(HttpResponseFacade.class);\n        when(mock.response()).thenReturn(generateResponse(\n            ""application/json"",\n            404,\n            body.getBytes()));\n\n        ((HttpAssertionFacadeImpl) facade).facade = mock;\n        world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""true"");\n        world.put(ASSERTS_STATUS_CODE_MAX_SIZE, ""5"");\n\n\n        validateException(\n            200,\n            ""1 expectation failed.\\n"" +\n                ""Expected status code \\""200\\"" but was \\""404\\"" with body <exceeding max size to show>.\\n"");\n    }\n']",STATUS;When;ASSERTS;SIZE;DISPLAY;ODE;response;Max;to;ttp,9.89530235528946e-10;8.003553375601768e-10;4.511093720793724e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.860076427459717, -5.731613636016846, -6.332117557525635, -5.368323802947998, -5.536960124969482, -0.016608664765954018]",0.9835284948348999
3,"['    @Test\n    public void shouldNotReturnBodyWhenEnabledButContentTypeOctet() {\n        byte[] body = RandomUtils.nextBytes(20);\n\n        HttpResponseFacade mock = mock(HttpResponseFacade.class);\n        when(mock.response()).thenReturn(generateResponse(\n            ""application/octet-stream"",\n            404,\n            body));\n\n        ((HttpAssertionFacadeImpl) facade).facade = mock;\n        world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""true"");\n        world.put(ASSERTS_STATUS_CODE_MAX_SIZE, ""5000"");\n\n        validateException(\n            200,\n            ""1 expectation failed.\\n"" +\n                ""Expected status code \\""200\\"" but was \\""404\\"" with body <binary>.\\n"");\n    }\n']",Content;DISPLAY;Enabled;STATUS;octet;Expected;STATUS;application;ODY;should,1.862645149230957e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.86704158782959, -5.72986364364624, -6.335741996765137, -5.375476360321045, -5.526989936828613, -0.01659412682056427]",0.983542799949646
3,"['    @Test\n    public void matchesDirectMatch() throws Exception {\n        assertThat(""hello"", EndsWithRegexp.endsWithRegexp(""hello""));\n    }\n']",Match;ends;matches;Direct;Ends;That;hello;Regex;Regex;Exception,4.423782229423523e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;7.8580342233181e-10;2.3283064365386963e-10;0.0;0.0;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.916396141052246, -5.776313781738281, -6.407132148742676, -5.491243362426758, -5.453413486480713, -0.015976158902049065]",0.9841508865356445
3,"['    @Test\n    public void matchesEndWith() throws Exception {\n        assertThat(""hello world"", EndsWithRegexp.endsWithRegexp(""world""));\n    }\n']",Regex;End;ends;world;Exception;matches;Regex;world;That;Ends,3.92901711165905e-10;3.4924596548080444e-10;0.0;-1.1641532182693481e-10;-2.0372681319713593e-10;-4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10;-7.566995918750763e-10,5,5,"[-5.907820701599121, -5.763638973236084, -6.389426231384277, -5.482389450073242, -5.435096740722656, -0.016187546774744987]",0.9839427471160889
3,"['    @Test\n    public void matchesEndWithRegexp() throws Exception {\n        assertThat(""hello world"", EndsWithRegexp.endsWithRegexp(""el.*world""));\n    }\n']",el;ends;Regex;Ends;Exception;matches;End;That;Regex;world,9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;5.820766091346741e-11;2.9103830456733704e-11;-5.820766091346741e-11;-2.3283064365386963e-10;-3.7834979593753815e-10;-4.3655745685100555e-10;-4.656612873077393e-10,5,5,"[-5.917201995849609, -5.776705265045166, -6.412280082702637, -5.4985551834106445, -5.449531555175781, -0.01595034822821617]",0.9841760993003845
3,"['    @Test\n    public void matchesNotEndWith() throws Exception {\n        assertThat(""hello world"", Matchers.not(EndsWithRegexp.endsWithRegexp(""hello"")));\n    }\n']",ends;End;Regex;End;Matchers;matches;Exception;Regex;hello;Not,7.566995918750763e-10;4.656612873077393e-10;3.346940502524376e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;0.0;-8.731149137020111e-11;-2.3283064365386963e-10;-3.2014213502407074e-10,5,5,"[-5.927728652954102, -5.811695098876953, -6.436676979064941, -5.506108283996582, -5.462204933166504, -0.015687040984630585]",0.9844353795051575
3,"['    @Test\n    public void matchesNotEndWithRegexp() throws Exception {\n        assertThat(""hello world"", Matchers.not(EndsWithRegexp.endsWithRegexp(""h.*o"")));\n    }\n']",Regex;Regex;Not;Matchers;matches;world;End;Exception;hello;End,1.2223608791828156e-09;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-2.0372681319713593e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-5.917011737823486, -5.790347576141357, -6.418051242828369, -5.5004167556762695, -5.457943439483643, -0.015854373574256897]",0.9842706322669983
3,"['    @Test\n    public void matchesLocationUrl() throws Exception {\n        assertThat(""http://company.com:80/webapp/orx/rest/index/types/CLIENT/nodes/6f1155df-644b-4228-89af"" +\n                ""-7d24b8fe1a8d"", EndsWithRegexp.endsWithRegexp(""/index/types/CLIENT/nodes/.+""));\n    }\n']",company;com;CLIENT;rest;index;matches;Regex;That;Url;odes,2.7939677238464355e-09;2.561137080192566e-09;1.6298145055770874e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.944111347198486, -5.87780237197876, -6.452661514282227, -5.512060642242432, -5.487033367156982, -0.015292653813958168]",0.9848237037658691
3,"['    @Test\n    public void shouldCheckFileNameGeneration() throws Exception {\n        String filename = ""My feature"";\n        String refactoredName = loadRunnerFeature.createName(filename);\n        assertThat(refactoredName, is(""My_feature""));\n    }\n']",Name;File;load;feature;filename;feature;refactored;Name;should;refactored,2.3283064365386963e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.9185943603515625, -5.783746719360352, -6.391477108001709, -5.493459224700928, -5.469856262207031, -0.01589297503232956]",0.9842326641082764
3,"['    @Test\n    public void formatShouldEscapeWhitespaces() throws Exception {\n        LoadRunnerTransaction trx = new LoadRunnerTransaction() {{\n            setName(""hello world"");\n            setTrxFlag(""LR_AUTO"");\n        }};\n        assertThat(trx.format(), containsString(""hello_world""));\n    }\n']",Runner;format;format;Transaction;Should;Name;Exception;world;tr;That,9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;2.6193447411060333e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.921557903289795, -5.75817346572876, -6.4109883308410645, -5.488101482391357, -5.523412227630615, -0.015732338652014732]",0.9843907952308655
3,"['    @Test\n    public void formatShouldEscapeDoubleQuotes() throws Exception {\n        WebCustomRequest request = new WebCustomRequest() {{\n            setBody(""hello \\""world\\"""");\n        }};\n        assertThat(request.format(), containsString(""hello \\\\\\""world\\\\\\""""));\n    }\n']",hello;Request;Web;world;request;format;Double;set;request;Should,2.0954757928848267e-09;6.984919309616089e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.473825588822365e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0,5,5,"[-5.91679048538208, -5.755492210388184, -6.391073226928711, -5.440672397613525, -5.489777565002441, -0.016130423173308372]",0.9839990735054016
3,"['    @Test\n    public void snapshotNumberShouldBeLessThan10Digits() {\n        FilterableRequestSpecification requestSpec = mock(FilterableRequestSpecification.class);\n        when(requestSpec.getURI()).thenReturn(""http://www.google.com"");\n        when(requestSpec.getHeaders()).thenReturn(new Headers());\n\n        WebCustomRequest request = mapper.map(requestSpec);\n        assertThat(request, hasProperty(""snapshot"", CustomMatchers.stringWithLength(lessThanOrEqualTo(15)))); //10 digits + t + .inf\n    }\n']",snapshot;google;Number;Should;Than;Be;Filterable;Custom;string;Headers,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.220055416226387e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.861337184906006, -5.7195916175842285, -6.323662281036377, -5.4127984046936035, -5.488761901855469, -0.016651811078190804]",0.9834860563278198
3,"['    @Test\n    public void byteArrayValueIsCheckedAsString() throws Exception {\n        BasicAttributes entity = new BasicAttributes(true);\n        entity.put(""userPassword"", new byte[]{50, 82, 115, 48, 67, 99, 54, 74});\n\n        Whitebox.setInternalState(entityFacade, ""entity"", entity);\n\n        entityFacade.entityHasAttributeWithValue(""userpassword"", ""2Rs0Cc6J"");\n    }\n']",Value;put;userpassword;entity;Attributes;byte;byte;set;Password;Basic,4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.85593318939209, -5.724007606506348, -6.2992024421691895, -5.372235298156738, -5.439334392547607, -0.01709863170981407]",0.9830467104911804
3,"['    @Test\n    public void charArrayValueIsCheckedAsString() throws Exception {\n        BasicAttributes entity = new BasicAttributes(true);\n        entity.put(""userPassword"", new char[]{\'h\', \'e\', \'l\', \'l\', \'o\'});\n\n        Whitebox.setInternalState(entityFacade, ""entity"", entity);\n\n        entityFacade.entityHasAttributeWithValue(""userpassword"", ""hello"");\n    }\n']",Checked;userpassword;Facade;Attribute;char;Value;As;Attributes;user;Basic,1.3969838619232178e-09;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.8548784255981445, -5.730241775512695, -6.305845260620117, -5.3720479011535645, -5.441418647766113, -0.017060311511158943]",0.9830842614173889
3,"['    @Test\n    public void stringValueIsCheckedAsString() throws Exception {\n        BasicAttributes entity = new BasicAttributes(true);\n        entity.put(""userPassword"", ""hello"");\n\n        Whitebox.setInternalState(entityFacade, ""entity"", entity);\n\n        entityFacade.entityHasAttributeWithValue(""userpassword"", ""hello"");\n    }\n']",Password;As;entity;Value;hello;entity;entity;State;set;put,1.3969838619232178e-09;1.0477378964424133e-09;7.275957614183426e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.868533611297607, -5.724742889404297, -6.308962821960449, -5.383535861968994, -5.436338424682617, -0.01700183004140854]",0.9831418991088867
3,"['    @Test\n    public void intArrayValueIsCheckedAsString() throws Exception {\n        BasicAttributes entity = new BasicAttributes(true);\n        entity.put(""userPassword"", new int[]{1, 2, 3});\n\n        Whitebox.setInternalState(entityFacade, ""entity"", entity);\n\n        entityFacade.entityHasAttributeWithValue(""userpassword"", ""{1,2,3}"");\n    }\n']",Password;Checked;Facade;Basic;entity;Attributes;user;entity;new;Exception,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.843569278717041, -5.695310592651367, -6.271678447723389, -5.354574680328369, -5.42076301574707, -0.017450837418437004]",0.982700526714325
3,"['    @Test\n    public void intValueIsCheckedAsString() throws Exception {\n        BasicAttributes entity = new BasicAttributes(true);\n        entity.put(""userPassword"", 3);\n\n        Whitebox.setInternalState(entityFacade, ""entity"", entity);\n\n        entityFacade.entityHasAttributeWithValue(""userpassword"", ""3"");\n    }\n']",Password;set;userpassword;user;entity;Has;Attribute;Attributes;entity;Basic,9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;4.0745362639427185e-10;3.055902197957039e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.864838600158691, -5.710593223571777, -6.29864501953125, -5.380437850952148, -5.43412971496582, -0.017103202641010284]",0.9830422401428223
3,"['    @Test\n    public void compare_sameTree() throws Exception {\n        assertThat(comparator.compare(""cn=root"", ""cn=b,cn=root""), is(more()));\n        assertThat(comparator.compare(""cn=a,cn=root"", ""cn=root""), is(less()));\n        assertThat(comparator.compare(""cn=a,cn=root"", ""cn=a,cn=root""), is(same()));\n    }\n']",cn;cn;cn;Tree;cn;compare;compare;more;cn;Exception,6.984919309616089e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.843276500701904, -5.718613147735596, -6.295436382293701, -5.377464771270752, -5.431205749511719, -0.01717234030365944]",0.9829743504524231
3,"['    @Test\n    public void compare_differentTrees() throws Exception {\n        assertThat(comparator.compare(""cn=a,cn=root"", ""cn=b,cn=root""), is(more()));\n        assertThat(comparator.compare(""cn=b,cn=root"", ""cn=a,cn=root""), is(less()));\n    }\n']",rees;cn;less;compare;Exception;root;cn;root;root;cn,9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.511093720793724e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.869930267333984, -5.754242420196533, -6.348763942718506, -5.425294399261475, -5.451893329620361, -0.01656973920762539]",0.9835667610168457
3,"['    @Test\n    public void sort() throws Exception {\n        List<String> dns = new ArrayList<>(Arrays.asList(\n            ""cn=root"",\n            ""cn=a,cn=root"",\n            ""cn=b,cn=root"",\n            ""cn=c,cn=a,cn=root""\n        ));\n        Collections.sort(dns, comparator);\n        assertThat(dns.get(0), is(""cn=root""));\n        assertThat(dns.get(1), is(""cn=a,cn=root""));\n        assertThat(dns.get(2), is(""cn=c,cn=a,cn=root""));\n        assertThat(dns.get(3), is(""cn=b,cn=root""));\n    }\n']",root;root;root;cn;cn;cn;get;comparator;cn;cn,4.94765117764473e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10;1.964508555829525e-10;1.7462298274040222e-10,5,5,"[-5.83487606048584, -5.68966817855835, -6.244424819946289, -5.280096530914307, -5.442286968231201, -0.01782516948878765]",0.9823327660560608
3,"['    @Test\n    public void read() throws Exception {\n        Map<String, Attributes> entities = LDIFUtils.read(getClass().getResourceAsStream(""/example.ldif""));\n        assertThat(entities.size(), is(4));\n    }\n']",LDIFUtils;Stream;size;Exception;Class;Attributes;example;Map;As;get,5.122274160385132e-09;2.7939677238464355e-09;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10;-3.4924596548080444e-10,5,5,"[-5.8986124992370605, -5.773077011108398, -6.361799240112305, -5.462226390838623, -5.443058490753174, -0.0162817295640707]",0.9838500022888184
3,"['    @Test\n    public void readSingleEntity() throws Exception {\n        String ldif = ""dn: dc=example,dc=com\\n"" +\n            ""objectClass: domain\\n"" +\n            ""objectClass: top\\n"" +\n            ""dc: example\\n"";\n        Map<String, Attributes> entities = LDIFUtils.read(new ByteArrayInputStream(ldif.getBytes()));\n        assertThat(entities.size(), is(1));\n        String dn = ""dc=example,dc=com"";\n        Attributes entity = entities.get(dn);\n        assertThat(entity, notNullValue());\n\n        assertThat(entity.get(""dn""), nullValue());\n        assertThat(entity.get(""dc"").get(), is(""example""));\n        assertThat(entity.get(""objectClass"").contains(""domain""), is(true));\n        assertThat(entity.get(""objectClass"").contains(""top""), is(true));\n    }\n']",LDIFUtils;if;example;Single;example;ldif;entities;Class;object;dn,6.402842700481415e-10;5.238689482212067e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.382431946694851e-10,5,5,"[-5.829472064971924, -5.700864315032959, -6.273763179779053, -5.319278240203857, -5.479915142059326, -0.017384061589837074]",0.9827661514282227
3,"['    @Test\n    public void readMultipleEntities() throws Exception {\n        String ldif = ""dn: dc=example,dc=com\\n"" +\n            ""objectClass: domain\\n"" +\n            ""objectClass: top\\n"" +\n            ""dc: example\\n"" +\n            ""\\n"" +\n            ""dn: ou=Users,dc=example,dc=com\\n"" +\n            ""objectClass: organizationalUnit\\n"" +\n            ""objectClass: top\\n"" +\n            ""ou: Users\\n"";\n\n        Map<String, Attributes> entities = LDIFUtils.read(new ByteArrayInputStream(ldif.getBytes()));\n        assertThat(entities.size(), is(2));\n        assertThat(entities.containsKey(""dc=example,dc=com""), is(true));\n        assertThat(entities.containsKey(""ou=Users,dc=example,dc=com""), is(true));\n    }\n']",LDIFUtils;Users;example;dn;if;entities;com;example;ldif;top,1.5861587598919868e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.83249568939209, -5.6947712898254395, -6.268592834472656, -5.303979396820068, -5.476919174194336, -0.017495235428214073]",0.9826568961143494
3,"['    @Test\n    public void readWithLineBreaks() throws Exception {\n        String ldif = ""dn: dc=example,dc=com\\n"" +\n            ""objectClass: top\\n"" +\n            ""test: this is\\n"" +\n            "" multi-line text\\n"" +\n            ""dc: example\\n"";\n        Map<String, Attributes> entities = LDIFUtils.read(new ByteArrayInputStream(ldif.getBytes()));\n        assertThat(entities.size(), is(1));\n        Attributes entity = entities.get(""dc=example,dc=com"");\n        assertThat(entity.get(""test"").get(), is(""this is multi-line text""));\n\n    }\n']",dn;com;Line;ldif;Class;Map;Attributes;text;example;this,5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.41970007866621e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.859350204467773, -5.725271224975586, -6.306629657745361, -5.35880708694458, -5.48089599609375, -0.016954831779003143]",0.9831880927085876
