Project_Group,Test_case,Tokens(Sorted by Importance),Attribution_Scores(Sorted),Predicted_Class,True_Class,Test_Pred_Logit,Test_Confidence_Score
1,"['@Test\npublic void testAddRemoveRenewAction() throws IOException, InterruptedException {\n    TestFileSystem tfs = new TestFileSystem();\n    renewer.addRenewAction(tfs);\n    for (int i = 0; i < 60; i++) {\n        Thread.sleep(RENEW_CYCLE);\n        if (tfs.testToken.renewCount > 0) {\n            renewer.removeRenewAction(tfs);\n            break;\n        }\n    }\n    assertTrue(""Token not renewed even after 1 minute"", tfs.testToken.renewCount > 0);\n    assertTrue(""Token not removed"", tfs.testToken.renewCount < MAX_RENEWALS);\n    assertTrue(""Token not cancelled"", tfs.testToken.cancelled);\n}']",sleep;Interrupted;renewer;cancelled;Action;Action;renewer;Exception;ancelled;Renew,5.587935447692871e-09;4.190951585769653e-09;1.6880221664905548e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10,0,0,"[-0.000800408364739269, -7.410727024078369, -9.755298614501953, -10.819064140319824, -9.752143859863281, -9.734841346740723]",0.9991999268531799
1,"['@Test\npublic void testRunWriteAfterRead() {\n    final Function1<CancelIndicator, Integer> _function = (CancelIndicator it) -> {\n        return Integer.valueOf(this.sharedState.incrementAndGet());\n    };\n    this.requestManager.<Integer>runRead(_function);\n    final Function0<Object> _function_1 = () -> {\n        return null;\n    };\n    final Function2<CancelIndicator, Object, Integer> _function_2 = (CancelIndicator $0,Object $1) -> {\n        int _xblockexpression = ((int) (0));\n        {\n            Assert.assertEquals(1, this.sharedState.get());\n            _xblockexpression = this.sharedState.incrementAndGet();\n        }\n        return Integer.valueOf(_xblockexpression);\n    };\n    this.requestManager.<Object, Integer>runWrite(_function_1, _function_2).join();\n    Assert.assertEquals(2, this.sharedState.get());\n}']",blockexpression;blockexpression;shared;After;Equals;function;Get;return;Indicator;Indicator,6.05359673500061e-09;4.6566128730773926e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.6775524020195007e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09,1,1,"[-7.854948043823242, -0.0007272697403095663, -8.81425952911377, -10.677054405212402, -9.35046672821045, -9.42734146118164]",0.9992730021476746
1,"['@Test\npublic void testToMetricResponse() throws Exception {\n    String subscriptionId = ""12345"";\n    long ts = 1000L;\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag(""tag1"", ""value1""));\n    Metric m = Metric.newBuilder().name(""sys.cpu.user"").value(ts, 2.0).tags(tags).tag(VISIBILITY_TAG, ""(a&b)|(c&d)"").build();\n    String json = JsonUtil.getObjectMapper().writeValueAsString(MetricResponse.fromMetric(m, subscriptionId));\n    String expected = ""{\\""metric\\"":\\""sys.cpu.user\\"",\\""timestamp\\"":1000,\\""value\\"":2.0,\\""tags\\"":[{\\""tag1\\"":\\""value1\\""},{\\""viz\\"":\\""(a&b)|(c&d)\\""}],\\""subscriptionId\\"":\\""12345\\"",\\""complete\\"":false}"";\n    Assert.assertEquals(expected, json);\n}']",timestamp;tags;apper;long;Array;Metric;TAG;Object;VIS;Response,6.984919309616089e-09;1.862645149230957e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10,2,3,"[-8.9746675491333, -8.401293754577637, -0.003271230263635516, -5.936801433563232, -9.145700454711914, -8.693918228149414]",0.9967341423034668
1,"['@Test\npublic void testToFile() throws Exception {\n    item = new PathData(""."", conf);\n    assertEquals(new File(testDir.toString()), item.toFile());\n    item = new PathData(""d1/f1"", conf);\n    assertEquals(new File(testDir + ""/d1/f1""), item.toFile());\n    item = new PathData(testDir + ""/d1/f1"", conf);\n    assertEquals(new File(testDir + ""/d1/f1""), item.toFile());\n}']",Data;Path;Path;File;File;new;to;conf;Data;conf,3.3760443329811096e-09;2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.5133991837501526e-09;1.2223608791828156e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,3,4,"[-7.661023139953613, -7.28182315826416, -5.664482116699219, -0.494361013174057, -0.9551483392715454, -7.325185298919678]",0.6099604964256287
1,"['@Test\npublic void test_parseLString() throws Exception {\n    DateFormat format = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, Locale.US);\n    try {\n        Date date = format.parse(format.format(current).toString());\n        assertEquals(current.getDate(), date.getDate());\n        assertEquals(current.getDay(), date.getDay());\n        assertEquals(current.getMonth(), date.getMonth());\n        assertEquals(current.getYear(), date.getYear());\n        assertEquals(current.getHours(), date.getHours());\n        assertEquals(current.getMinutes(), date.getMinutes());\n    } catch(ParseException pe) {\n    fail(""ParseException was thrown for current Date.""); }\n    try {\n        format.parse(""January 16, 1970 8:03:52 PM CET"");\n        fail(""ParseException was not thrown."");\n    } catch(ParseException pe) { }\n}']",get;Time;format;parse;CET;Year;Month;get;Parse;get,2.3283064365386963e-09;1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10,2,2,"[-8.428157806396484, -8.214123725891113, -0.004213622305542231, -5.724278450012207, -8.84735107421875, -8.092586517333984]",0.9957953691482544
1,"['@Test\npublic void testRemoveContext() throws IOException {\n    String dir = buildBufferDir(ROOT, 0);\n    String contextCfgItemName = ""application_1340842292563_0004.app.cache.dirs"";\n    conf.set(contextCfgItemName, dir);\n    LocalDirAllocator localDirAllocator = new LocalDirAllocator(contextCfgItemName);\n    localDirAllocator.getLocalPathForWrite(""p1/x"", SMALL_FILE_SIZE, conf);\n    assertTrue(LocalDirAllocator.isContextValid(contextCfgItemName));\n    LocalDirAllocator.removeContext(contextCfgItemName);\n    assertFalse(LocalDirAllocator.isContextValid(contextCfgItemName));\n}']",application;fg;Buffer;remove;Name;fg;conf;Item;fg;Allocator,3.725290298461914e-09;3.725290298461914e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.153683453798294e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09,4,4,"[-8.7249116897583, -9.472306251525879, -8.601095199584961, -7.560858726501465, -0.001026103738695383, -9.409917831420898]",0.9989743232727051
1,"['@Test\npublic void testSimple() throws Exception {\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    DrainDispatcher dispatcher = ((DrainDispatcher) (rm.getRMContext().getDispatcher()));\n    RMApp app = rm.submitApp(1024);\n    dispatcher.await();\n    MockNM amNodeManager = rm.registerNode(""amNM:1234"", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    dispatcher.await();\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    dispatcher.await();\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId, ""job"", ""user"", RUNNING, 0, 0, 0, 0, 0, 0, ""jobfile""));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf, appAttemptId, mockJob);\n    MockNM nodeManager1 = rm.registerNode(""h1:1234"", 10240);\n    MockNM nodeManager2 = rm.registerNode(""h2:1234"", 10240);\n    MockNM nodeManager3 = rm.registerNode(""h3:1234"", 10240);\n    dispatcher.await();\n    ContainerRequestEvent event1 = createReq(jobId, 1, 1024, new String[]{ ""h1"" });\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 = createReq(jobId, 2, 1024, new String[]{ ""h2"" });\n    allocator.sendRequest(event2);\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    dispatcher.await();\n    Assert.assertEquals(""No of assignments must be 0"", 0, assigned.size());\n    ContainerRequestEvent event3 = createReq(jobId, 3, 1024, new String[]{ ""h3"" });\n    allocator.sendRequest(event3);\n    assigned = allocator.schedule();\n    dispatcher.await();\n    Assert.assertEquals(""No of assignments must be 0"", 0, assigned.size());\n    nodeManager1.nodeHeartbeat(true);\n    nodeManager2.nodeHeartbeat(true);\n    nodeManager3.nodeHeartbeat(true);\n    dispatcher.await();\n    assigned = allocator.schedule();\n    dispatcher.await();\n    checkAssignments(new ContainerRequestEvent[]{ event1, event2, event3 }, assigned, false);\n}']",mock;Job;mock;am;AMLaunched;await;rain;send;schedule;await,6.984919309616089e-09;4.190951585769653e-09;3.259629011154175e-09;2.0954757928848267e-09;1.862645149230957e-09;1.8044374883174896e-09;1.6298145055770874e-09;1.469743438065052e-09;1.3387762010097504e-09;9.89530235528946e-10,0,0,"[-0.0012196014868095517, -7.262576580047607, -8.989134788513184, -9.921486854553223, -8.482751846313477, -8.898466110229492]",0.9987812638282776
1,"['@Test\npublic void shouldHighPriorityNodeStartElectionFirst() {\n    final AtomicBoolean highPrioElectionTriggered = spy(new AtomicBoolean());\n    final AtomicBoolean lowPrioElectionTriggered = spy(new AtomicBoolean());\n    final int targetPriority = 4;\n    final PriorityElectionTimer timerHighPrio = new PriorityElectionTimer(Duration.ofMillis(100), threadContext, () -> highPrioElectionTriggered.set(true), log, targetPriority, targetPriority);\n    final PriorityElectionTimer timerLowPrio = new PriorityElectionTimer(Duration.ofMillis(100), threadContext, () -> lowPrioElectionTriggered.set(true), log, targetPriority, 1);\n    timerLowPrio.reset();\n    timerHighPrio.reset();\n    Awaitility.await().until(highPrioElectionTriggered::get);\n    Awaitility.await().until(lowPrioElectionTriggered::get);\n    final var inorder = Mockito.inOrder(highPrioElectionTriggered, lowPrioElectionTriggered);\n    inorder.verify(highPrioElectionTriggered).set(true);\n    inorder.verify(lowPrioElectionTriggered).set(true);\n}']",in;spy;Mill;inorder;Boolean;Atomic;Awaitility;Timer;Triggered;Triggered,6.51925802230835e-09;4.6566128730773926e-09;3.259629011154175e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.4551915228366852e-09,1,0,"[-7.699942588806152, -0.0008447177824564278, -8.90688705444336, -10.48600959777832, -9.105181694030762, -9.052224159240723]",0.9991556406021118
1,"['@Test\npublic void testApiAuthToken() {\n    ApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>>newHashSet(Controller.class), URI).iterator().next();\n    Assert.assertEquals(""TOKEN"", apiDoc.getAuth().getType());\n    Assert.assertEquals("""", apiDoc.getAuth().getScheme());\n    Assert.assertEquals(""abc"", apiDoc.getAuth().getTesttokens().iterator().next());\n    for (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n        if (apiMethodDoc.getPath().contains(""/inherit"")) {\n            Assert.assertEquals(""TOKEN"", apiMethodDoc.getAuth().getType());\n            Assert.assertEquals("""", apiMethodDoc.getAuth().getScheme());\n            Assert.assertEquals(""abc"", apiMethodDoc.getAuth().getTesttokens().iterator().next());\n        }\n        if (apiMethodDoc.getPath().contains(""/override"")) {\n            Assert.assertEquals(""TOKEN"", apiMethodDoc.getAuth().getType());\n            Assert.assertEquals(""Bearer"", apiMethodDoc.getAuth().getScheme());\n            Assert.assertEquals(""xyz"", apiMethodDoc.getAuth().getTesttokens().iterator().next());\n        }\n    }\n}']",xy;URI;Class;okens;Scheme;Controller;class;iterator;Auth;Path,9.313225746154785e-09;7.450580596923828e-09;7.450580596923828e-09;5.296897143125534e-09;4.6566128730773926e-09;4.190951585769653e-09;3.026798367500305e-09;2.561137080192566e-09;2.3283064365386963e-09;2.0954757928848267e-09,3,3,"[-9.485387802124023, -8.973779678344727, -8.306533813476562, -0.012345799244940281, -4.447378158569336, -9.104814529418945]",0.987730085849762
1,"['@Test\npublic void testDelegationTokenSecretManager() throws Exception {\n    DelegationTokenSecretManager dtSecretManager = cluster.getNameNode().getNamesystem().getDelegationTokenSecretManager();\n    Token<DelegationTokenIdentifier> token = generateDelegationToken(""SomeUser"", ""JobTracker"");\n    try {\n        dtSecretManager.renewToken(token, ""FakeRenewer"");\n        Assert.fail(""should have failed"");\n    } catch (AccessControlException ace) {\n    }\n    dtSecretManager.renewToken(token, ""JobTracker"");\n    DelegationTokenIdentifier identifier = new DelegationTokenIdentifier();\n    byte[] tokenId = token.getIdentifier();\n    identifier.readFields(new DataInputStream(new ByteArrayInputStream(tokenId)));\n    Assert.assertTrue(null != dtSecretManager.retrievePassword(identifier));\n    LOG.info(""Sleep to expire the token"");\n    Thread.sleep(6000);\n    try {\n        dtSecretManager.retrievePassword(identifier);\n        Assert.fail(""Token should have expired"");\n    } catch (InvalidToken e) {\n    }\n    dtSecretManager.renewToken(token, ""JobTracker"");\n    LOG.info(""Sleep beyond the max lifetime"");\n    Thread.sleep(5000);\n    try {\n        dtSecretManager.renewToken(token, ""JobTracker"");\n        Assert.fail(""should have been expired"");\n    } catch (InvalidToken it) {\n    }\n}']",sleep;sleep;the;renew;Password;Sleep;True;beyond;token;Fake,3.259629011154175e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.5425030142068863e-09;1.280568540096283e-09;9.313225746154785e-10;7.8580342233181e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,0,1,"[-0.0007717015105299652, -7.514191150665283, -9.578248023986816, -10.645642280578613, -9.587801933288574, -9.649262428283691]",0.9992285966873169
1,"['@Test\npublic void testClientUpdateWithDelayedRevoke() throws Exception {\n    OzoneConfiguration conf = new OzoneConfiguration();\n    SCMUpdateServiceGrpcServer server = new SCMUpdateServiceGrpcServer(getUpdateServiceConfig(conf), mockCRLStore);\n    ClientCRLStore clientCRLStore = new ClientCRLStore();\n    SCMUpdateClientConfiguration updateClientConfiguration = conf.getObject(SCMUpdateClientConfiguration.class);\n    updateClientConfiguration.setClientCrlCheckInterval(Duration.ofSeconds(2));\n    conf.setFromObject(updateClientConfiguration);\n    SCMUpdateServiceGrpcClient client = new SCMUpdateServiceGrpcClient(""localhost"", conf, clientCRLStore);\n    server.start();\n    client.start();\n    try {\n        List<BigInteger> certIds = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            BigInteger certId = mockCRLStore.issueCert();\n            certIds.add(certId);\n        }\n        revokeCertNow(certIds.get(0));\n        server.notifyCrlUpdate();\n        GenericTestUtils.waitFor(() -> client.getUpdateCount() == 1, 100, 2000);\n        Assert.assertEquals(1, client.getUpdateCount());\n        Assert.assertEquals(0, client.getErrorCount());\n        revokeCert(certIds.get(5), Instant.now().plus(Duration.ofSeconds(5)));\n        server.notifyCrlUpdate();\n        GenericTestUtils.waitFor(() -> client.getUpdateCount() > 1, 100, 2000);\n        Assert.assertEquals(2, client.getUpdateCount());\n        Assert.assertEquals(0, client.getErrorCount());\n        Assert.assertEquals(1, client.getClientCRLStore().getPendingCrlIds().size());\n        GenericTestUtils.waitFor(() -> client.getPendingCrlRemoveCount() == 1, 100, 20000);\n        Assert.assertTrue(client.getClientCRLStore().getPendingCrlIds().isEmpty());\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        client.stop(true);\n        server.stop();\n    }\n}']",mock;Instant;Interval;plus;RLStore;wait;Grpc;localhost;new;Delayed,1.1175870895385742e-08;3.725290298461914e-09;3.259629011154175e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.3283064365386963e-09;1.7462298274040222e-09;1.7462298274040222e-09,0,0,"[-0.0008186326595023274, -7.48143196105957, -9.29409122467041, -10.603242874145508, -9.603141784667969, -9.558765411376953]",0.9991815686225891
1,"['@Test\npublic void testReadSkip() throws Exception {\n    FileSystem fs = cluster.getFileSystem();\n    long tStart = System.currentTimeMillis();\n    bench.getConf().setLong(""test.io.skip.size"", 1);\n    bench.randomReadTest(fs);\n    long execTime = System.currentTimeMillis() - tStart;\n    bench.analyzeResult(fs, TestType.TEST_TYPE_READ_SKIP, execTime);\n}']",bench;fs;File;Skip;Mill;get;Mill;exec;Long;set,1.862645149230957e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,2,4,"[-9.121295928955078, -8.839167594909668, -0.000794214429333806, -8.015142440795898, -9.548811912536621, -8.888669967651367]",0.9992061257362366
1,"['@Test\npublic void getFieldNamesTest() {\n    List<String> names = EnumUtil.getFieldNames(TestEnum.class);\n    Assert.assertEquals(CollUtil.newArrayList(""type"", ""name""), names);\n}']",Enum;List;Enum;Field;class;Names;Coll;List;get;Names,1.210719347000122e-08;9.778887033462524e-09;7.450580596923828e-09;5.587935447692871e-09;3.259629011154175e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;0.0,3,3,"[-9.833881378173828, -9.242565155029297, -8.721681594848633, -0.0007650309125892818, -7.858738899230957, -9.641948699951172]",0.9992352724075317
1,"['@Test\npublic void testReadBackward() throws Exception {\n    FileSystem fs = cluster.getFileSystem();\n    long tStart = System.currentTimeMillis();\n    bench.getConf().setLong(""test.io.skip.size"", -DEFAULT_BUFFER_SIZE);\n    bench.randomReadTest(fs);\n    long execTime = System.currentTimeMillis() - tStart;\n    bench.analyzeResult(fs, TestType.TEST_TYPE_READ_BACKWARD, execTime);\n}']",Mill;long;long;io;fs;get;Start;bench;skip;current,1.775333657860756e-09;6.984919309616089e-10;6.984919309616089e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10,2,4,"[-9.118833541870117, -8.859566688537598, -0.00077622797107324, -8.045647621154785, -9.565999031066895, -8.918875694274902]",0.9992239475250244
1,"['@Test\npublic void testReadRandom() throws Exception {\n    FileSystem fs = cluster.getFileSystem();\n    long tStart = System.currentTimeMillis();\n    bench.getConf().setLong(""test.io.skip.size"", 0);\n    bench.randomReadTest(fs);\n    long execTime = System.currentTimeMillis() - tStart;\n    bench.analyzeResult(fs, TestType.TEST_TYPE_READ_RANDOM, execTime);\n}']",get;bench;Read;System;bench;Result;Time;System;fs;System,1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,2,4,"[-9.147327423095703, -8.856827735900879, -0.0007798014557920396, -8.028197288513184, -9.576986312866211, -8.909088134765625]",0.9992203712463379
1,"['@Test\npublic void testEviction() throws Exception {\n    final int CAPACITY = 3;\n    PeerCache cache = PeerCache.getInstance(CAPACITY, 100000);\n    DatanodeID dnIds[] = new DatanodeID[CAPACITY + 1];\n    FakePeer peers[] = new FakePeer[CAPACITY + 1];\n    for (int i = 0; i < dnIds.length; ++i) {\n        dnIds[i] = new DatanodeID(""192.168.0.1"",\n        ""fakehostname_"" + i, ""fake_storage_id_"" + i,\n        100, 101, 102);\n        peers[i] = new FakePeer(dnIds[i], false);\n    }\n    for (int i = 0; i < CAPACITY; ++i) {\n        cache.put(dnIds[i], peers[i]);\n    }\n    assertEquals(CAPACITY, cache.size());\n    cache.put(dnIds[CAPACITY], peers[CAPACITY]);\n    assertEquals(CAPACITY, cache.size());\n    assertSame(null, cache.get(dnIds[0], false));\n    for (int i = 1; i < CAPACITY; ++i) {\n        Peer peer = cache.get(dnIds[i], false);\n        assertSame(peers[i], peer);\n        assertTrue(!peer.isClosed());\n        peer.close();\n    }\n    assertEquals(1, cache.size());\n    cache.close();\n}']",Fake;Closed;Same;CAPACITY;Peer;Datanode;Same;Peer;Eviction;cache,7.450580596923828e-09;6.170012056827545e-09;6.05359673500061e-09;6.05359673500061e-09;5.238689482212067e-09;4.6566128730773926e-09;3.725290298461914e-09;3.725290298461914e-09;3.259629011154175e-09;3.259629011154175e-09,0,4,"[-0.0012281740782782435, -7.024969577789307, -9.271410942077637, -10.311436653137207, -9.053476333618164, -9.276235580444336]",0.9987726807594299
1,"['@Test\npublic void testHftpDefaultPorts() throws IOException {\n    resetFileSystem();\n    Configuration conf = new Configuration();\n    URI uri = URI.create();\n    HftpFileSystem fs = ((HftpFileSystem) (FileSystem.get(uri, conf)));\n    assertEquals(DFS_NAMENODE_HTTP_PORT_DEFAULT, fs.getDefaultPort());\n    assertEquals(DFS_NAMENODE_HTTPS_PORT_DEFAULT, fs.getDefaultSecurePort());\n    assertEquals(uri, fs.getUri());\n    assertEquals(""127.0.0.1:"" + DFSConfigKeys.DFS_NAMENODE_HTTPS_PORT_DEFAULT, fs.getCanonicalServiceName());\n}']",HTTP;FSConfig;reset;DEFAULT;URI;Secure;uri;get;File;get,1.6763806343078613e-08;7.916241884231567e-09;6.51925802230835e-09;6.05359673500061e-09;5.587935447692871e-09;4.6566128730773926e-09;4.190951585769653e-09;3.958120942115784e-09;3.725290298461914e-09;3.725290298461914e-09,4,4,"[-4.5535383224487305, -4.626882553100586, -1.9147862195968628, -2.5764126777648926, -0.2887326180934906, -4.9543352127075195]",0.7492125034332275
1,"['@Test\npublic void testExpiredRequestAllocationOnAnyHost() throws Exception {\n    MockClusterResourceManager spyManager = spy(new MockClusterResourceManager(callback, state));\n    ContainerManager spyContainerManager = spy(new ContainerManager(containerPlacementMetadataStore, state, spyManager, true, false, mock(LocalityManager.class), faultDomainManager, config));\n    spyAllocator = Mockito.spy(new ContainerAllocator(spyManager, config, state, true, spyContainerManager));\n    spyAllocator.requestResources(new HashMap<String, String>() {\n        {\n            put(""0"", ""hostname-0"");\n            put(""1"", ""hostname-1"");\n        }\n    });\n    spyAllocatorThread = new Thread(spyAllocator);\n    spyAllocatorThread.start();\n    Thread.sleep(1000);\n    assertTrue(state.preferredHostRequests.get() == 2);\n    assertTrue(state.expiredPreferredHostRequests.get() == 2);\n    verify(spyContainerManager, times(1)).handleExpiredRequest(eq(""0""), eq(""hostname-0""), any(SamzaResourceRequest.class), any(ContainerAllocator.class), any(ResourceRequestState.class));\n    verify(spyContainerManager, times(1)).handleExpiredRequest(eq(""1""), eq(""hostname-1""), any(SamzaResourceRequest.class), any(ContainerAllocator.class), any(ResourceRequestState.class));\n    ArgumentCaptor<SamzaResourceRequest> cancelledRequestCaptor = ArgumentCaptor.forClass(SamzaResourceRequest.class);\n    verify(spyManager, atLeast(2)).cancelResourceRequest(cancelledRequestCaptor.capture());\n    assertTrue(cancelledRequestCaptor.getAllValues().stream().map(( resourceRequest) -> resourceRequest.getPreferredHost()).collect(Collectors.toSet()).size() > 2);\n    assertTrue(state.matchedResourceRequests.get() == 0);\n    assertTrue(state.anyHostRequests.get() > 2);\n    spyAllocator.stop();\n}']",request;Resource;Mock;Cluster;state;Manager;Samza;Preferred;Allocator;Request,1.862645149230957e-08;1.6763806343078613e-08;1.4901161193847656e-08;1.1175870895385742e-08;9.313225746154785e-09;8.381903171539307e-09;8.032657206058502e-09;6.984919309616089e-09;6.868503987789154e-09;6.51925802230835e-09,1,0,"[-5.0482916831970215, -0.010776183567941189, -7.314958095550537, -8.512393951416016, -6.039005279541016, -6.861217975616455]",0.9892816543579102
1,"['@Test\npublic void testUnqualifiedUriContents() throws Exception {\n    dirString = ""d1"";\n    item = new PathData(dirString, conf);\n    PathData[] items = item.getDirectoryContents();\n    assertEquals(sortedString(""d1/f1"", ""d1/f1.1"", ""d1/f2""), sortedString(items));\n}']",Contents;Path;Path;new;dir;Exception;Contents;items;ri;item,9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,3,4,"[-9.827751159667969, -9.22436237335205, -8.569212913513184, -0.0007509748684242368, -7.975117206573486, -9.650654792785645]",0.9992493987083435
1,"['@Test\npublic void assertDurationIsInRange(long expectedMillis) {\n    long minimum = (long) ((double) expectedMillis * 0.90);\n    long maximum =\n    Math.max((long) ((double) expectedMillis * 1.10), 10);\n    long waitMillis = Math.max(expectedMillis * 10, 10);\n    long duration = getDurationMillis(waitMillis);\n    if (duration < minimum) {\n        Assert.fail(""expected duration: "" + expectedMillis +\n        "" minimum duration: "" + minimum +\n        "" actual duration too short: "" + duration);\n    } else if (duration > maximum) {\n        Assert.fail(""expected duration: "" + expectedMillis +\n        "" maximum duration: "" + maximum +\n        "" actual duration too long: "" + duration);\n    }\n}']",Duration;expected;long;maximum;Mill;expected;long;Mill;long;duration,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,2,2,"[-9.091083526611328, -8.826820373535156, -0.0007383481133729219, -8.170560836791992, -9.646079063415527, -8.939443588256836]",0.9992617964744568
1,"['@Test\npublic void testGeneratedBlock() throws Exception {\n    LOG.info(""Test testGeneratedBlock started."");\n    long blockSize = 8192L;\n    int stripeLength = 3;\n    mySetup(stripeLength, -1);\n    Path file1 = new Path(""/user/dhruba/raidtest/file1"");\n    Path destPath = new Path(""/destraid/user/dhruba/raidtest"");\n    long crc1 = TestRaidDfs.createTestFile(fileSys, file1, 1, 7, blockSize);\n    long file1Len = fileSys.getFileStatus(file1).getLen();\n    LOG.info(""Test testGeneratedBlock created test files"");\n    Configuration localConf = new Configuration(conf);\n    localConf.set(RAID_LOCATION_KEY, ""/destraid"");\n    localConf.setInt(""raid.blockfix.interval"", 1000);\n    localConf.setLong(""raid.blockfix.filespertask"", 2L);\n    try {\n        cnode = RaidNode.createRaidNode(null, localConf);\n        TestRaidDfs.waitForFileRaided(LOG, fileSys, file1, destPath);\n        cnode.stop();\n        cnode.join();\n        FileStatus srcStat = fileSys.getFileStatus(file1);\n        DistributedFileSystem dfs = ((DistributedFileSystem) (fileSys));\n        LocatedBlocks locs = RaidDFSUtil.getBlockLocations(dfs, file1.toUri().getPath(), 0, srcStat.getLen());\n        String[] corruptFiles = RaidDFSUtil.getCorruptFiles(conf);\n        assertEquals(corruptFiles.length, 0);\n        assertEquals(0, cnode.blockFixer.filesFixed());\n        corruptBlock(locs.get(0).getBlock().getBlockName());\n        reportCorruptBlocks(dfs, file1, new int[]{ 0 }, blockSize);\n        corruptFiles = RaidDFSUtil.getCorruptFiles(conf);\n        assertEquals(corruptFiles.length, 1);\n        assertEquals(corruptFiles[0], file1.toUri().getPath());\n        cnode = RaidNode.createRaidNode(null, localConf);\n        long start = System.currentTimeMillis();\n        while ((cnode.blockFixer.filesFixed() < 1) && ((System.currentTimeMillis() - start) < 120000)) {\n            LOG.info(""Test testGeneratedBlock waiting for files to be fixed."");\n            Thread.sleep(1000);\n        }\n        assertEquals(1, cnode.blockFixer.filesFixed());\n        cnode.stop();\n        cnode.join();\n        cnode = null;\n        dfs = getDFS(conf, dfs);\n        assertTrue(TestRaidDfs.validateFile(dfs, file1, file1Len, crc1));\n        locs = RaidDFSUtil.getBlockLocations(dfs, file1.toUri().getPath(), 0, srcStat.getLen());\n        corruptBlock(locs.get(0).getBlock().getBlockName());\n        reportCorruptBlocks(dfs, file1, new int[]{ 0 }, blockSize);\n        try {\n            Thread.sleep(5 * 1000);\n        } catch (InterruptedException ignore) {\n        }\n        try {\n            TestRaidDfs.validateFile(dfs, file1, file1Len, crc1);\n            fail(""Expected exception not thrown"");\n        } catch (ChecksumException ce) {\n        } catch (BlockMissingException bme) {\n        }\n    } catch (Exception e) {\n        LOG.info((""Test testGeneratedBlock Exception "" + e) + StringUtils.stringifyException(e));\n        throw e;\n    } finally {\n        myTearDown();\n    }\n    LOG.info(""Test testGeneratedBlock completed."");\n}']",stop;For;LOG;stripe;interval;Configuration;RAID;corrupt;File;fs,1.1175870895385742e-08;6.28642737865448e-09;4.423782229423523e-09;4.190951585769653e-09;3.725290298461914e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.2118911147117615e-09;2.0954757928848267e-09,0,1,"[-0.0011650687083601952, -7.009149074554443, -9.343753814697266, -10.590458869934082, -9.477144241333008, -9.544004440307617]",0.9988355040550232
1,"['@Test\npublic void testVersion2ClientVersion2Server() throws Exception {\n    ProtocolSignature.resetCache();\n    TestImpl2 impl = new TestImpl2();\n    server = new RPC.Builder(conf).setProtocol(TestProtocol2.class).setInstance(impl).setBindAddress(ADDRESS).setPort(0).setNumHandlers(2).setVerbose(false).build();\n    server.addProtocol(RPC_WRITABLE, TestProtocol0.class, impl);\n    server.start();\n    addr = NetUtils.getConnectAddress(server);\n    Version2Client client = new Version2Client();\n    client.ping();\n    assertEquals(""hello"", client.echo(""hello""));\n    assertEquals(-3, client.echo(3));\n}']",ping;Net;PC;Handlers;Signature;Address;Equals;start;Address;conf,3.725290298461914e-08;5.820766091346741e-09;5.587935447692871e-09;4.773028194904327e-09;4.6566128730773926e-09;4.190951585769653e-09;3.841705620288849e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09,0,4,"[-0.0035900920629501343, -6.525193691253662, -7.758838176727295, -8.848440170288086, -6.692044734954834, -8.091004371643066]",0.9964163303375244
1,"['@Test\npublic void testDelegationTokenWithRealUser() throws IOException {\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(REAL_USER);\n    final UserGroupInformation proxyUgi = UserGroupInformation.createProxyUserForTesting(PROXY_USER, ugi, GROUP_NAMES);\n    try {\n        Token<?>[] tokens = proxyUgi.doAs(new PrivilegedExceptionAction<Token<?>[]>() {\n            @Override\n            public Token<?>[] run() throws IOException {\n                return cluster.getFileSystem().addDelegationTokens(""RenewerUser"", null);\n            }\n        });\n        DelegationTokenIdentifier identifier = new DelegationTokenIdentifier();\n        byte[] tokenId = tokens[0].getIdentifier();\n        identifier.readFields(new DataInputStream(new ByteArrayInputStream(tokenId)));\n        Assert.assertEquals(identifier.getUser().getUserName(), PROXY_USER);\n        Assert.assertEquals(identifier.getUser().getRealUser().getUserName(), REAL_USER);\n    } catch (InterruptedException e) {\n    }\n}']",Privileged;GROUP;Array;read;Input;REAL;Group;Delegation;new;User,5.3551048040390015e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.94765117764473e-10,1,4,"[-7.87342643737793, -0.0007568117580376565, -8.959556579589844, -10.572975158691406, -9.23996353149414, -8.990507125854492]",0.9992434978485107
1,"['@Test\npublic void testWithStringAndConfForBuggyPath() throws Exception {\n    dirString = ""file"" ;\n    testDir = new Path(dirString);\n    item = new PathData(dirString, conf);\n    assertEquals(""file:/tmp"", testDir.toString());\n    checkPathData();\n}']",file;dir;Dir;Dir;dir;item;new;to;check;For,4.190951585769653e-09;3.4924596548080444e-09;3.3760443329811096e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10,4,4,"[-9.055278778076172, -9.201345443725586, -7.7232584953308105, -5.529592514038086, -0.004759411793202162, -9.024118423461914]",0.9952518939971924
1,"['@Test\nvoid canOffsetMutableClock() {\n    final var offset = Duration.ofMinutes(10);\n    final var response = endpoint.modify(""add"", null, offset.toMillis());\n    final var offsetMinimum = Instant.now().plus(offset).truncatedTo(ChronoUnit.MILLIS);\n    final var offsetMaximum = Instant.now().plus(offset.plus(Duration.ofMinutes(1)));\n    assertThat(response.getStatus()).isEqualTo(200);\n    assertThat(response.getBody()).isNotNull().asInstanceOf(instanceOfRecord).satisfies(( body) -> assertThat(body.instant).isBetween(offsetMinimum, offsetMaximum));\n}']",Instant;Minutes;Offset;Mill;endpoint;Chron;Maximum;offset;final;Unit,2.7939677238464355e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;4.94765117764473e-10;4.94765117764473e-10,2,2,"[-9.02548885345459, -8.82088565826416, -0.0007943335804156959, -8.088500022888184, -9.555058479309082, -8.817482948303223]",0.999206006526947
1,"['@Test\npublic void testModTime() throws IOException {\n    Configuration conf = new Configuration();\n    MiniDFSCluster cluster = new MiniDFSCluster(conf, numDatanodes, true, null);\n    cluster.waitActive();\n    InetSocketAddress addr = new InetSocketAddress(""localhost"", cluster.getNameNodePort());\n    DFSClient client = new DFSClient(addr, conf);\n    DatanodeInfo[] info = client.datanodeReport(LIVE);\n    assertEquals(""Number of Datanodes "", numDatanodes, info.length);\n    FileSystem fileSys = cluster.getFileSystem();\n    int replicas = numDatanodes - 1;\n    assertTrue(fileSys instanceof DistributedFileSystem);\n    try {\n        System.out.println(""Creating testdir1 and testdir1/test1.dat."");\n        Path dir1 = new Path(""testdir1"");\n        Path file1 = new Path(dir1, ""test1.dat"");\n        writeFile(fileSys, file1, replicas);\n        FileStatus stat = fileSys.getFileStatus(file1);\n        long mtime1 = stat.getModificationTime();\n        assertTrue(mtime1 != 0);\n        stat = fileSys.getFileStatus(dir1);\n        long mdir1 = stat.getModificationTime();\n        System.out.println(""Creating testdir1/test2.dat."");\n        Path file2 = new Path(dir1, ""test2.dat"");\n        writeFile(fileSys, file2, replicas);\n        stat = fileSys.getFileStatus(file2);\n        stat = fileSys.getFileStatus(dir1);\n        assertTrue(stat.getModificationTime() >= mdir1);\n        mdir1 = stat.getModificationTime();\n        Path dir2 = new Path(""testdir2/"").makeQualified(fileSys);\n        System.out.println(""Creating testdir2 "" + dir2);\n        assertTrue(fileSys.mkdirs(dir2));\n        stat = fileSys.getFileStatus(dir2);\n        long mdir2 = stat.getModificationTime();\n        Path newfile = new Path(dir2, ""testnew.dat"");\n        System.out.println(((""Moving "" + file1) + "" to "") + newfile);\n        fileSys.rename(file1, newfile);\n        stat = fileSys.getFileStatus(newfile);\n        assertTrue(stat.getModificationTime() == mtime1);\n        stat = fileSys.getFileStatus(dir1);\n        assertTrue(stat.getModificationTime() != mdir1);\n        mdir1 = stat.getModificationTime();\n        stat = fileSys.getFileStatus(dir2);\n        assertTrue(stat.getModificationTime() != mdir2);\n        mdir2 = stat.getModificationTime();\n        System.out.println(""Deleting testdir2/testnew.dat."");\n        assertTrue(fileSys.delete(newfile, true));\n        stat = fileSys.getFileStatus(dir1);\n        assertTrue(stat.getModificationTime() == mdir1);\n        stat = fileSys.getFileStatus(dir2);\n        assertTrue(stat.getModificationTime() != mdir2);\n        mdir2 = stat.getModificationTime();\n        cleanupFile(fileSys, file2);\n        cleanupFile(fileSys, dir1);\n        cleanupFile(fileSys, dir2);\n    } catch (IOException e) {\n        info = client.datanodeReport(ALL);\n        printDatanodeReport(info);\n        throw e;\n    } finally {\n        fileSys.close();\n        cluster.shutdown();\n    }\n}']",wait;stat;cluster;IVE;Configuration;FSClient;new;Time;Configuration;stat,5.21540641784668e-08;1.1175870895385742e-08;7.450580596923828e-09;6.05359673500061e-09;5.587935447692871e-09;5.3551048040390015e-09;3.958120942115784e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09,2,2,"[-7.023311614990234, -7.574241638183594, -0.0021944984328001738, -8.024319648742676, -8.665655136108398, -8.152763366699219]",0.9978079199790955
1,"['@Test\npublic void testWithDirStringAndConf() throws Exception {\n    dirString = ""d1"";\n    item = new PathData(dirString, conf);\n    checkPathData();\n    dirString = ""d1/"";\n    item = new PathData(dirString, conf);\n    checkPathData();\n}']",Path;Path;item;item;dir;Data;dir;dir;new;Conf,3.725290298461914e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.0372681319713593e-09;1.7462298274040222e-09;1.3969838619232178e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10,4,4,"[-9.73055648803711, -10.005935668945312, -9.08344841003418, -7.568353176116943, -0.0007825411157682538, -9.951650619506836]",0.9992177486419678
1,"['@Test\npublic void testActivateSamples() throws Exception {\n    UUID collectionExerciseId = UUID.randomUUID();\n    UUID surveyId = UUID.randomUUID();\n    UUID sampleSummaryId = UUID.randomUUID();\n    SampleLink sampleLink = new SampleLink();\n    sampleLink.setSampleSummaryId(sampleSummaryId);\n    sampleLink.setCollectionExerciseId(collectionExerciseId);\n    List<SampleLink> sampleLinks = new ArrayList<>();\n    sampleLinks.add(sampleLink);\n    CollectionExercise collectionExercise = new CollectionExercise();\n    collectionExercise.setId(collectionExerciseId);\n    collectionExercise.setSurveyId(surveyId);\n    Event event = new Event();\n    event.setTimestamp(new Timestamp(System.currentTimeMillis()));\n    when(collectionExerciseRepository.findOneById(collectionExerciseId)).thenReturn(collectionExercise);\n    when(sampleLinkRepository.findByCollectionExerciseId(collectionExerciseId)).thenReturn(sampleLinks);\n    when(eventRepository.findOneByCollectionExerciseAndTag(collectionExercise, go_live.name())).thenReturn(event);\n    sampleSummaryService.activateSamples(collectionExerciseId);\n    sampleSummaryService.sampleSummaryValidated(true, collectionExerciseId);\n    sampleSummaryService.sampleSummaryDistributed(true, collectionExerciseId);\n    verify(collectionExerciseRepository, times(3)).findOneById(collectionExerciseId);\n    verify(sampleSummaryActivationPublisher, times(1)).sendSampleSummaryActivation(collectionExerciseId, sampleSummaryId, surveyId);\n    verify(collectionExerciseService, times(1)).transitionCollectionExercise(collectionExercise, EXECUTE);\n    verify(collectionExerciseService, times(1)).transitionCollectionExercise(collectionExercise, VALIDATE);\n    verify(collectionExerciseService, times(1)).transitionCollectionExercise(collectionExercise, EXECUTION_COMPLETE);\n    verify(collectionExerciseService, times(1)).transitionCollectionExercise(collectionExercise, GO_LIVE);\n}']",Survey;EXECUTE;Timestamp;random;UID;event;new;UID;UID;UID,1.862645149230957e-09;1.6880221664905548e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10,2,2,"[-8.943195343017578, -8.751283645629883, -0.0008011230966076255, -8.144830703735352, -9.446303367614746, -8.854851722717285]",0.9991992115974426
1,"['@Test\npublic class Test {\n    public void testPendingAndInvalidate() throws Exception {\n        final Configuration CONF = new HdfsConfiguration();\n        MiniDFSCluster cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(DATANODE_COUNT).build();\n        cluster.waitActive();\n        FSNamesystem namesystem = cluster.getNamesystem();\n        BlockManager bm = namesystem.getBlockManager();\n        DistributedFileSystem fs = cluster.getFileSystem();\n        try {\n            Path filePath = new Path(""/tmp.txt"");\n            DFSTestUtil.createFile(fs, filePath, 1024, (short) 3, 0L);\n            for (DataNode dn : cluster.getDataNodes()) {\n                DataNodeTestUtils.setHeartbeatsDisabledForTests(dn, true);\n            }\n            LocatedBlock block = NameNodeAdapter.getBlockLocations(\n            cluster.getNameNode(), filePath.toString(), 0, 1).get(0);\n            cluster.getNamesystem().writeLock();\n            try {\n                bm.findAndMarkBlockAsCorrupt(block.getBlock(), block.getLocations()[0],\n                ""STORAGE_ID"", ""TEST"");\n            } finally {\n                cluster.getNamesystem().writeUnlock();\n            }\n            BlockManagerTestUtil.computeAllPendingWork(bm);\n            BlockManagerTestUtil.updateState(bm);\n            assertEquals(bm.getPendingReconstructionBlocksCount(), 1L);\n            BlockInfo storedBlock = bm.getStoredBlock(block.getBlock().getLocalBlock());\n            assertEquals(bm.pendingReconstruction.getNumReplicas(storedBlock), 2);\n            fs.delete(filePath, true);\n            int retries = 10;\n            long pendingNum = bm.getPendingReconstructionBlocksCount();\n            while (pendingNum != 0 && retries-- > 0) {\n                Thread.sleep(1000);\n                BlockManagerTestUtil.updateState(bm);\n                pendingNum = bm.getPendingReconstructionBlocksCount();\n            }\n            assertEquals(pendingNum, 0L);\n        } finally {\n            cluster.shutdown();\n        }\n    }\n}']",Active;write;Lock;cluster;Invalidate;DF;Configuration;Mini;DF;tmp,5.587935447692871e-09;1.979060471057892e-09;1.862645149230957e-09;1.3387762010097504e-09;1.2223608791828156e-09;1.0477378964424133e-09;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10,0,1,"[-0.0008624648326076567, -7.437546253204346, -9.455672264099121, -10.463891983032227, -9.415388107299805, -9.371291160583496]",0.9991377592086792
1,"['@Test\npublic void testMinAllowedValue() {\n    long millis = _validMinTime;\n    DateTime dateTime = new DateTime(millis, DateTimeZone.UTC);\n    LocalDateTime localDateTime = dateTime.toLocalDateTime();\n    int year = localDateTime.getYear();\n    int month = localDateTime.getMonthOfYear();\n    int day = localDateTime.getDayOfMonth();\n    Assert.assertEquals(year, 1971);\n    Assert.assertEquals(month, 1);\n    Assert.assertEquals(day, 1);\n}']",Min;mill;Local;Zone;Date;Local;year;Date;Day;date,1.5133991837501526e-09;1.3969838619232178e-09;8.149072527885437e-10;7.566995918750763e-10;7.275957614183426e-10;7.275957614183426e-10;7.130438461899757e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10,2,2,"[-9.069855690002441, -8.781889915466309, -0.0007737264968454838, -8.111507415771484, -9.62881851196289, -8.881706237792969]",0.9992266893386841
1,"['@Test\npublic void createDefaultDirectoryManagerPath() throws IOException {\n    Path path = Paths.get(System.getProperty(""user.dir""));\n    DirectoryManager dm = DirectoryManagerFactory.createDirectoryManager(\n    path, true);\n    assertTrue(dm instanceof DirectoryManagerImpl);\n    DirectoryManagerImpl dmi = (DirectoryManagerImpl) dm;\n    assertTrue(dmi.readOnly);\n    assertEquals(path, dmi.directory);\n}']",Path;read;Directory;Path;dir;True;Default;true;mi;user,4.889443516731262e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10,4,4,"[-9.26447582244873, -9.636509895324707, -8.52390193939209, -7.262251377105713, -0.0011431594612076879, -9.405522346496582]",0.9988574981689453
1,"['@Test\nvoid testBytes() throws InterruptedException {\n    final CountDownLatch countDownLatch = new CountDownLatch(1);\n    final Metrics metrics = new Metrics();\n    final LongAdder longAdder = new LongAdder();\n    final long input = 100;\n    final int loopCount = 10000;\n    Thread adder = new Thread(() -> {\n        try {\n            countDownLatch.await();\n        } catch (InterruptedException ignore) {\n        }\n        for (int i = 0; i < loopCount; ++i) {\n            metrics.addBytes(input);\n        }\n    });\n    Thread getter = new Thread(() -> {\n        try {\n            countDownLatch.await();\n        } catch (InterruptedException ignore) {\n        }\n        for (int i = 0; i < loopCount; ++i) {\n            longAdder.add(metrics.bytesThenReset());\n        }\n    });\n    adder.start();\n    getter.start();\n    countDownLatch.countDown();\n    adder.join();\n    longAdder.add(metrics.bytesThenReset());\n    Assertions.assertEquals(loopCount * input, longAdder.sum());\n}']",Count;Interrupted;Count;Assertions;Down;await;long;Interrupted;catch;Then,2.153683453798294e-09;1.7462298274040222e-09;1.57160684466362e-09;1.57160684466362e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;7.8580342233181e-10;5.820766091346741e-10,1,1,"[-5.73137092590332, -0.00369437737390399, -8.940499305725098, -10.439068794250488, -8.930021286010742, -8.78901481628418]",0.9963124394416809
1,"['@Test\npublic void shouldOnlyHandleRequestsOfSubscribedTypes() {\n    serverTransport.subscribe(0, COMMAND, new DirectlyResponder());\n    serverTransport.subscribe(0, UNKNOWN, new FailingResponder());\n    final var requestFuture = clientTransport.sendRequest(() -> AtomixTransportTest.serverAddress, new Request(""messageABC""), REQUEST_TIMEOUT);\n    final var response = requestFuture.join();\n    assertThat(response.byteArray()).isEqualTo(""messageABC"".getBytes());\n}']",subscribe;TIMEOUT;join;Subscribed;server;ailing;Future;Responder;Address;ABC,1.30385160446167e-08;1.234002411365509e-08;8.847564458847046e-09;5.587935447692871e-09;5.587935447692871e-09;4.6566128730773926e-09;4.190951585769653e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09,0,0,"[-0.0029500082600861788, -6.852214813232422, -7.998244762420654, -8.926909446716309, -6.793812274932861, -8.114734649658203]",0.9970543384552002
1,"['@Test\npublic void testQualifiedUriContents() throws Exception {\n    dirString = fs.makeQualified(new Path(""d1"")).toString();\n    item = new PathData(dirString, conf);\n    PathData[] items = item.getDirectoryContents();\n    assertEquals(sortedString(dirString + ""/f1"", dirString + ""/f1.1"", dirString + ""/f2""), sortedString(items));\n}']",conf;dir;Path;sorted;Equals;Qualified;Data;fs;items;new,2.7939677238464355e-09;2.6775524020195007e-09;2.3283064365386963e-09;1.862645149230957e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,3,4,"[-10.036147117614746, -9.442635536193848, -8.728520393371582, -0.0007344171172007918, -7.831345558166504, -9.862110137939453]",0.9992659687995911
1,"['@Test\npublic void servicesCanCallOtherServices() throws InterruptedException {\n    ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n    Mono<String> chain =\n    Mono.just(request(""X"")).compose(stub::sayHello).map(ChainedCallIntegrationTest::bridge).doOnSuccess(System.out::println).as(stub::sayHelloRespStream).map(ChainedCallIntegrationTest::bridge).doOnNext(System.out::println).compose(stub::sayHelloBothStream).map(ChainedCallIntegrationTest::bridge).doOnNext(System.out::println).as(stub::sayHelloReqStream).map(ChainedCallIntegrationTest::bridge).doOnSuccess(System.out::println).compose(stub::sayHello).map(HelloResponse::getMessage).doOnSuccess(System.out::println);\n    StepVerifier.create(chain).expectNext(""[<{[X]}> :: </[X]/> :: <\\\\[X]\\\\> :: <([X])>]"").expectComplete().verify(Duration.ofSeconds(2));\n}']",Duration;verify;expect;bridge;Other;Services;channel;println;println;Resp,1.1920928955078125e-07;1.6763806343078613e-08;7.450580596923828e-09;7.2177499532699585e-09;6.984919309616089e-09;6.984919309616089e-09;6.51925802230835e-09;5.587935447692871e-09;4.6566128730773926e-09;3.958120942115784e-09,1,1,"[-7.996210098266602, -0.0011264891363680363, -7.482636451721191, -10.486193656921387, -9.095973014831543, -9.357361793518066]",0.9988741278648376
1,"['@Test\nvoid writesAndReadsCustomFieldsConvertedClass() {\n    List<Object> converters = new ArrayList<>();\n    converters.add(BigDecimalToStringConverter.INSTANCE);\n    converters.add(StringToBigDecimalConverter.INSTANCE);\n    CustomConversions customConversions = new CouchbaseCustomConversions(converters);\n    converter.setCustomConversions(customConversions);\n    converter.afterPropertiesSet();\n    ((CouchbaseMappingContext) (converter.getMappingContext())).setSimpleTypeHolder(customConversions.getSimpleTypeHolder());\n    CouchbaseDocument converted = new CouchbaseDocument();\n    final String valueStr = ""12.345"";\n    final BigDecimal value = new BigDecimal(valueStr);\n    final String value2Str = ""0.6789"";\n    final BigDecimal value2 = new BigDecimal(value2Str);\n    List<BigDecimal> listOfValues = new ArrayList<>();\n    listOfValues.add(value);\n    listOfValues.add(value2);\n    Map<String, BigDecimal> mapOfValues = new HashMap<>();\n    mapOfValues.put(""val1"", value);\n    mapOfValues.put(""val2"", value2);\n    CustomFieldsEntity entity = new CustomFieldsEntity(value, listOfValues, mapOfValues);\n    converter.write(entity, converted);\n    CouchbaseDocument source = new CouchbaseDocument();\n    source.put(""_class"", CustomFieldsEntity.class.getName());\n    source.put(""decimalValue"", valueStr);\n    CouchbaseList listOfValuesDoc = new CouchbaseList();\n    listOfValuesDoc.put(valueStr);\n    listOfValuesDoc.put(value2Str);\n    source.put(""listOfDecimalValues"", listOfValuesDoc);\n    CouchbaseDocument mapOfValuesDoc = new CouchbaseDocument();\n    mapOfValuesDoc.put(""val1"", valueStr);\n    mapOfValuesDoc.put(""val2"", value2Str);\n    source.put(""mapOfDecimalValues"", mapOfValuesDoc);\n    assertThat(valueStr).isEqualTo(((CouchbaseList) (converted.getContent().get(""listOfDecimalValues""))).get(0));\n    assertThat(value2Str).isEqualTo(((CouchbaseList) (converted.getContent().get(""listOfDecimalValues""))).get(1));\n    assertThat(converted.export().toString()).isEqualTo(source.export().toString());\n    CustomFieldsEntity readConverted = converter.read(CustomFieldsEntity.class, source);\n    assertThat(readConverted.value).isEqualTo(value);\n    assertThat(readConverted.listOfValues.get(0)).isEqualTo(listOfValues.get(0));\n    assertThat(readConverted.listOfValues.get(1)).isEqualTo(listOfValues.get(1));\n    assertThat(readConverted.mapOfValues.get(""val1"")).isEqualTo(mapOfValues.get(""val1""));\n    assertThat(readConverted.mapOfValues.get(""val2"")).isEqualTo(mapOfValues.get(""val2""));\n}']",add;Hash;apping;apping;Big;Decimal;Array;Decimal;Document;Big,2.6193447411060333e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;7.8580342233181e-10;6.111804395914078e-10;6.111804395914078e-10;5.238689482212067e-10,3,3,"[-10.074997901916504, -9.554352760314941, -8.881446838378906, -0.0005766874528490007, -8.200014114379883, -9.906327247619629]",0.999423623085022
1,"['@Test\npublic void testProcessAction_ok() {\n    final Mock mockResponse = mock(ActionResponse.class);\n    PortletMode mode = PortletMode.VIEW;\n    Map<String, String> initParams = new HashMap<String, String>();\n    initParams.put(""viewNamespace"", ""/view"");\n    Map<String, String[]> requestParams = new HashMap<String, String[]>();\n    requestParams.put(ACTION_PARAM, new String[] { ""/view/testAction"" });\n    requestParams.put(MODE_PARAM, new String[] { mode.toString() });\n    initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE,\n    ""true"");\n    initPortletConfig(initParams, new HashMap<String, Object>());\n    initRequest(requestParams, new HashMap<String, Object>(),\n    new HashMap<String, Object>(), PortletMode.VIEW,\n    WindowState.NORMAL, true, null);\n    setupActionFactory(""/view"", ""testAction"", ""success"",\n    EasyMock.createNiceMock(ValueStack.class));\n    try {\n        dispatcher\n        .setActionProxyFactory((ActionProxyFactory) mockActionFactory\n        .proxy());\n        dispatcher.init((PortletConfig) mockConfig.proxy());\n        dispatcher.processAction((ActionRequest) mockRequest.proxy(),\n        (ActionResponse) mockResponse.proxy());\n    } catch (Exception e) {\n        e.printStackTrace();\n        fail(""Error occured"");\n    }\n}']",mock;class;Action;Action;NORMAL;Mode;setup;dispatcher;AMES;final,1.210719347000122e-08;9.313225746154785e-09;7.450580596923828e-09;4.190951585769653e-09;4.190951585769653e-09;3.958120942115784e-09;3.958120942115784e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09,1,4,"[-5.457554340362549, -0.25960615277290344, -3.5988218784332275, -3.6533875465393066, -3.3664309978485107, -1.9906327724456787]",0.7713553309440613
1,"['@Test\npublic void testRender_ok() {\n    final Mock mockResponse = mock(RenderResponse.class);\n    mockResponse.stubs().method(ANYTHING);\n    PortletMode mode = PortletMode.VIEW;\n    Map<String, String[]> requestParams = new HashMap<String, String[]>();\n    requestParams.put(ACTION_PARAM, new String[]{""/view/testAction""});\n    requestParams.put(EVENT_ACTION, new String[]{""true""});\n    requestParams.put(MODE_PARAM, new String[]{mode.toString()});\n    Map<String, Object> sessionMap = new HashMap<String, Object>();\n    Map<String, String> initParams = new HashMap<String, String>();\n    initParams.put(""viewNamespace"", ""/view"");\n    initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE, ""true"");\n    initPortletConfig(initParams, new HashMap<String, Object>());\n    initRequest(requestParams, new HashMap<String, Object>(), sessionMap, PortletMode.VIEW, WindowState.NORMAL, false, null);\n    setupActionFactory(""/view"", ""testAction"", ""success"", EasyMock.createNiceMock(ValueStack.class));\n    mockInvocation.expects(once()).method(""getStack"").will(\n    returnValue(null));\n    try {\n        dispatcher\n        .setActionProxyFactory((ActionProxyFactory) mockActionFactory\n        .proxy());\n        dispatcher.init((PortletConfig) mockConfig.proxy());\n        dispatcher.render((RenderRequest) mockRequest.proxy(),\n        (RenderResponse) mockResponse.proxy());\n    } catch (Exception e) {\n        e.printStackTrace();\n        fail(""Error occured"");\n    }\n}']",mock;mock;ock;Value;once;Request;Portlet;dispatcher;null;Map,6.51925802230835e-09;5.587935447692871e-09;5.3551048040390015e-09;5.122274160385132e-09;4.6566128730773926e-09;4.6566128730773926e-09;3.958120942115784e-09;3.4924596548080444e-09;3.4924596548080444e-09;3.3760443329811096e-09,1,4,"[-5.023855209350586, -0.3728220462799072, -4.43089485168457, -5.574219703674316, -4.042697906494141, -1.30421781539917]",0.6887877583503723
1,"['@Test\npublic void createDirectoryManagerIoException() throws IOException {\n    DirectoryManagerFactory.createDirectoryManager(\n    ""/nonexisting-directory/123456789/hopefully"", true);\n}']",hopefully;Manager;Manager;directory;isting;create;Exception;create;Directory;true,3.725290298461914e-09;2.9103830456733704e-09;2.561137080192566e-09;2.3283064365386963e-09;1.862645149230957e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.731149137020111e-10;8.731149137020111e-10,4,4,"[-9.925078392028809, -10.14208698272705, -9.368744850158691, -7.93187952041626, -0.0005737089086323977, -10.107796669006348]",0.9994264841079712
1,"['@Test\npublic void testCwdContents() throws Exception {\n    dirString = Path.CUR_DIR;\n    item = new PathData(dirString, conf);\n    PathData[] items = item.getDirectoryContents();\n    assertEquals(sortedString(""d1"", ""d2""), sortedString(items));\n}']",orted;Equals;DIR;wd;items;conf;Exception;items;Contents;get,6.51925802230835e-09;6.28642737865448e-09;1.9208528101444244e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10,3,4,"[-9.823092460632324, -9.177122116088867, -8.524680137634277, -0.0008021951070986688, -7.876274585723877, -9.62414264678955]",0.9991982579231262
1,"['@Test\npublic void testNodeMetricsDb() {\n    ManualClock clock = new ManualClock();\n    NodeMetricsDb db = new NodeMetricsDb();\n    List<NodeMetrics.MetricValue> values = new ArrayList<>();\n    for (int i = 0; i < 40; i++) {\n        values.add(new NodeMetrics.MetricValue(""host0"", ""cpu.util"", clock.instant().getEpochSecond(), 0.9f));\n        clock.advance(Duration.ofHours(1));\n    }\n    db.add(values);\n    assertEquals(29, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.cpu,    List.of(""host0"")).measurementCount());\n    assertEquals( 0, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.memory, List.of(""host0"")).measurementCount());\n    db.gc(clock);\n    assertEquals(23, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.cpu,    List.of(""host0"")).measurementCount());\n    assertEquals( 0, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.memory, List.of(""host0"")).measurementCount());\n}']",minus;Metric;measurement;cpu;Hours;Duration;minus;Window;Hours;minus,4.6566128730773926e-09;3.026798367500305e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09,2,2,"[-9.083883285522461, -8.750556945800781, -0.0006833125371485949, -8.371861457824707, -9.673084259033203, -9.053433418273926]",0.9993170499801636
1,"['@Test\npublic void testHftpCustomDefaultPorts() throws IOException {\n    resetFileSystem();\n    Configuration conf = new Configuration();\n    conf.setInt(""dfs.http.port"", 123);\n    conf.setInt(""dfs.https.port"", 456);\n    URI uri = URI.create();\n    HftpFileSystem fs = ((HftpFileSystem) (FileSystem.get(uri, conf)));\n    assertEquals(123, fs.getDefaultPort());\n    assertEquals(456, fs.getDefaultSecurePort());\n    assertEquals(uri, fs.getUri());\n    assertEquals(""127.0.0.1:456"", fs.getCanonicalServiceName());\n}']",port;Service;Canonical;ft;Equals;set;Secure;Configuration;File;fs,1.4435499906539917e-08;9.313225746154785e-09;8.381903171539307e-09;7.450580596923828e-09;6.752088665962219e-09;6.51925802230835e-09;6.51925802230835e-09;5.587935447692871e-09;5.122274160385132e-09;5.122274160385132e-09,2,4,"[-6.231073379516602, -4.024757385253906, -0.0918322429060936, -2.756274461746216, -6.332610130310059, -5.951728820800781]",0.9122582674026489
1,"['@Test\npublic void testProcessAction_ok() {\n    final Mock mockResponse = mock(ActionResponse.class);\n    PortletMode mode = PortletMode.VIEW;\n    Map<String, String> initParams = new HashMap<String, String>();\n    initParams.put(""viewNamespace"", ""/view"");\n    Map<String, String[]> requestParams = new HashMap<String, String[]>();\n    requestParams.put(ACTION_PARAM, new String[]{""/view/testAction""});\n    requestParams.put(MODE_PARAM, new String[]{mode.toString()});\n    initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE, ""true"");\n    initPortletConfig(initParams, new HashMap<String, Object>());\n    initRequest(requestParams, new HashMap<String, Object>(), new HashMap<String, Object>(), PortletMode.VIEW, WindowState.NORMAL, true, null);\n    setupActionFactory(""/view"", ""testAction"", ""success"", EasyMock.createNiceMock(ValueStack.class));\n    try {\n        dispatcher\n        .setActionProxyFactory((ActionProxyFactory) mockActionFactory\n        .proxy());\n        dispatcher.init((PortletConfig) mockConfig.proxy());\n        dispatcher.processAction((ActionRequest) mockRequest.proxy(),\n        (ActionResponse) mockResponse.proxy());\n    } catch (Exception e) {\n        e.printStackTrace();\n        fail(""Error occured"");\n    }\n}']",final;ock;Response;mock;mock;ok;Response;Namespace;init;Stack,1.1175870895385742e-08;5.587935447692871e-09;5.587935447692871e-09;4.423782229423523e-09;4.190951585769653e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;1.979060471057892e-09;1.8044374883174896e-09,1,4,"[-5.443049907684326, -0.3518005907535553, -3.378797769546509, -3.0611183643341064, -2.777209997177124, -1.9030182361602783]",0.7034203410148621
1,"['@Test\npublic void testShortCircuited() {\n    HystrixCommandKey key = Factory.asKey(""CMD-Health-G"");\n    stream = HealthCountsStream.getInstance(key, 10, 100);\n    final CountDownLatch latch = new CountDownLatch(1);\n    stream.observe().take(10).subscribe(getSubscriber(latch));\n    CommandStreamTest.Command failure1 = Command.from(groupKey, key, FAILURE, 20);\n    CommandStreamTest.Command failure2 = Command.from(groupKey, key, FAILURE, 20);\n    CommandStreamTest.Command failure3 = Command.from(groupKey, key, FAILURE, 20);\n    CommandStreamTest.Command shortCircuit1 = Command.from(groupKey, key, SUCCESS);\n    CommandStreamTest.Command shortCircuit2 = Command.from(groupKey, key, SUCCESS);\n    failure1.observe();\n    failure2.observe();\n    failure3.observe();\n    try {\n        Thread.sleep(100);\n    } catch (InterruptedException ie) {\n        fail(ie.getMessage());\n    }\n    shortCircuit1.observe();\n    shortCircuit2.observe();\n    try {\n        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n    } catch (InterruptedException ex) {\n        fail(""Interrupted ex"");\n    }\n    assertTrue(shortCircuit1.isResponseShortCircuited());\n    assertTrue(shortCircuit2.isResponseShortCircuited());\n    System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n    assertEquals(3L, stream.getLatest().getErrorCount());\n    assertEquals(3L, stream.getLatest().getTotalRequests());\n}']",Subscriber;Down;subscribe;Count;Down;Unit;Interrupted;sleep;atch;observe,3.6670826375484467e-09;3.259629011154175e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.2223608791828156e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,0,0,"[-0.0007781338645145297, -7.485147476196289, -9.636312484741211, -10.69329833984375, -9.611358642578125, -9.694892883300781]",0.9992220401763916
1,"['@Test\npublic void testBuildDTServiceName() {\n    assertEquals(""127.0.0.1:123"", SecurityUtil.buildDTServiceName(URI.create()));\n    assertEquals(""127.0.0.1:123"", SecurityUtil.buildDTServiceName(URI.create()));\n    assertEquals(""127.0.0.1:123"", SecurityUtil.buildDTServiceName(URI.create()));\n    assertEquals(""127.0.0.1:123"", SecurityUtil.buildDTServiceName(URI.create()));\n}']",TService;build;TService;Name;Name;Security;create;Equals;build;Equals,1.5133991837501526e-09;1.280568540096283e-09;1.1932570487260818e-09;1.0477378964424133e-09;8.294591680169106e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10,4,4,"[-9.881453514099121, -10.094045639038086, -9.386631965637207, -7.66249418258667, -0.0006918897270224988, -10.003628730773926]",0.9993083477020264
1,"['@Test\npublic void testSetrepIncWithUnderReplicatedBlocks() throws Exception {\n    Configuration conf = new HdfsConfiguration();\n    final short REPLICATION_FACTOR = 2;\n    final String FILE_NAME = ""/testFile"";\n    final Path FILE_PATH = new Path(FILE_NAME);\n    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION_FACTOR + 1).build();\n    try {\n        final FileSystem fs = cluster.getFileSystem();\n        DFSTestUtil.createFile(fs, FILE_PATH, 1L, REPLICATION_FACTOR, 1L);\n        DFSTestUtil.waitReplication(fs, FILE_PATH, REPLICATION_FACTOR);\n        final BlockManager bm = cluster.getNamesystem().getBlockManager();\n        ExtendedBlock b = DFSTestUtil.getFirstBlock(fs, FILE_PATH);\n        DatanodeDescriptor dn = bm.blocksMap.nodeIterator(b.getLocalBlock()).next();\n        bm.addToInvalidates(b.getLocalBlock(), dn);\n        bm.blocksMap.removeNode(b.getLocalBlock(), dn);\n        FsShell shell = new FsShell(conf);\n        assertEquals(0, shell.run(new String[]{ ""-setrep"", ""-w"", Integer.toString(1 + REPLICATION_FACTOR), FILE_NAME }));\n    } finally {\n        cluster.shutdown();\n    }\n}']",REPLICATION;ACTOR;finally;Extended;Setrep;ACTOR;create;Manager;REPLICATION;PATH,4.0745362639427185e-09;2.444721758365631e-09;2.0954757928848267e-09;1.862645149230957e-09;1.57160684466362e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.382431946694851e-09;1.0477378964424133e-09;1.0477378964424133e-09,0,0,"[-0.0009154658182524145, -7.290859222412109, -9.56747817993164, -10.697319984436035, -9.579161643981934, -9.54430103302002]",0.9990849494934082
1,"['@Test\npublic void testWebHdfsDoAs() throws Exception {\n    LOG.info(""START: testWebHdfsDoAs()"");\n    ((Log4JLogger) (LOG)).getLogger().setLevel(ALL);\n    ((Log4JLogger) (LOG)).getLogger().setLevel(ALL);\n    final UserGroupInformation ugi = UserGroupInformation.createRemoteUser(REAL_USER);\n    LOG.info(""ugi.getShortUserName()="" + ugi.getShortUserName());\n    final WebHdfsFileSystem webhdfs = WebHdfsTestUtil.getWebHdfsFileSystemAs(ugi, config);\n    final Path root = new Path(""/"");\n    cluster.getFileSystem().setPermission(root, new FsPermission(((short) (0777))));\n    {\n        final URL url = WebHdfsTestUtil.toUrl(webhdfs, GETHOMEDIRECTORY, root, new DoAsParam(PROXY_USER));\n        final HttpURLConnection conn = ((HttpURLConnection) (url.openConnection()));\n        final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, SC_OK);\n        conn.disconnect();\n        final Object responsePath = m.get(Path.class.getSimpleName());\n        LOG.info(""responsePath="" + responsePath);\n        Assert.assertEquals(""/user/"" + PROXY_USER, responsePath);\n    }\n    {\n        final URL url = WebHdfsTestUtil.toUrl(webhdfs, GETHOMEDIRECTORY, root, new DoAsParam(PROXY_USER) {\n            @Override\n            public String getName() {\n                return ""DOas"";\n            }\n        });\n        final HttpURLConnection conn = ((HttpURLConnection) (url.openConnection()));\n        final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, SC_OK);\n        conn.disconnect();\n        final Object responsePath = m.get(Path.class.getSimpleName());\n        LOG.info(""responsePath="" + responsePath);\n        Assert.assertEquals(""/user/"" + PROXY_USER, responsePath);\n    }\n    final Path f = new Path(""/testWebHdfsDoAs/a.txt"");\n    {\n        final PutOpParam.Op op = Op.CREATE;\n        final URL url = WebHdfsTestUtil.toUrl(webhdfs, op, f, new DoAsParam(PROXY_USER));\n        HttpURLConnection conn = ((HttpURLConnection) (url.openConnection()));\n        conn = WebHdfsTestUtil.twoStepWrite(webhdfs, op, conn);\n        final FSDataOutputStream out = WebHdfsTestUtil.write(webhdfs, op, conn, 4096);\n        out.write(""Hello, webhdfs user!"".getBytes());\n        out.close();\n        final FileStatus status = webhdfs.getFileStatus(f);\n        LOG.info(""status.getOwner()="" + status.getOwner());\n        Assert.assertEquals(PROXY_USER, status.getOwner());\n    }\n    {\n        final PostOpParam.Op op = Op.APPEND;\n        final URL url = WebHdfsTestUtil.toUrl(webhdfs, op, f, new DoAsParam(PROXY_USER));\n        HttpURLConnection conn = ((HttpURLConnection) (url.openConnection()));\n        conn = WebHdfsTestUtil.twoStepWrite(webhdfs, op, conn);\n        final FSDataOutputStream out = WebHdfsTestUtil.write(webhdfs, op, conn, 4096);\n        out.write(""\\nHello again!"".getBytes());\n        out.close();\n        final FileStatus status = webhdfs.getFileStatus(f);\n        LOG.info(""status.getOwner()="" + status.getOwner());\n        LOG.info(""status.getLen()  ="" + status.getLen());\n        Assert.assertEquals(PROXY_USER, status.getOwner());\n    }\n}']",ttp;Url;Permission;Web;Name;Simple;get;URL;get;df,1.7462298274040222e-09;1.6298145055770874e-09;1.57160684466362e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0186340659856796e-09,1,4,"[-7.393156051635742, -0.0016088649863377213, -8.524174690246582, -9.96589183807373, -8.582232475280762, -7.489035129547119]",0.9983922839164734
1,"['@Test\npublic void testInitFirstVerifyCallBacks() throws Exception {\n    DefaultMetricsSystem.shutdown();\n    new ConfigBuilder().add(""*.period"", 8).add(""test.sink.test.class"", TestSink.class.getName()).add(""test.*.source.filter.exclude"", ""s0"").add(""test.source.s1.metric.filter.exclude"", ""X*"").add(""test.sink.sink1.metric.filter.exclude"", ""Y*"").add(""test.sink.sink2.metric.filter.exclude"", ""Y*"").save(TestMetricsConfig.getTestFilename(""hadoop-metrics2-test""));\n    MetricsSystemImpl ms = new MetricsSystemImpl(""Test"");\n    ms.start();\n    ms.register(""s0"", ""s0 desc"", new TestSource(""s0rec""));\n    TestSource s1 = ms.register(""s1"", ""s1 desc"", new TestSource(""s1rec""));\n    s1.c1.incr();\n    s1.xxx.incr();\n    s1.g1.set(2);\n    s1.yyy.incr(2);\n    s1.s1.add(0);\n    MetricsSink sink1 = mock(MetricsSink.class);\n    MetricsSink sink2 = mock(MetricsSink.class);\n    ms.registerSink(""sink1"", ""sink1 desc"", sink1);\n    ms.registerSink(""sink2"", ""sink2 desc"", sink2);\n    ms.publishMetricsNow();\n    try {\n        verify(sink1, timeout(200).times(2)).putMetrics(r1.capture());\n        verify(sink2, timeout(200).times(2)).putMetrics(r2.capture());\n    } finally {\n        ms.stop();\n        ms.shutdown();\n    }\n    List<MetricsRecord> mr1 = r1.getAllValues();\n    List<MetricsRecord> mr2 = r2.getAllValues();\n    checkMetricsRecords(mr1);\n    assertEquals(""output"", mr1, mr2);\n}']",mock;put;register;desc;ink;put;Metrics;class;sink;ink,8.940696716308594e-08;1.1175870895385742e-08;9.313225746154785e-09;7.450580596923828e-09;7.450580596923828e-09;6.51925802230835e-09;6.51925802230835e-09;6.51925802230835e-09;6.28642737865448e-09;6.05359673500061e-09,0,3,"[-0.7100265026092529, -0.7113807201385498, -6.402883529663086, -7.541394233703613, -4.846721649169922, -4.911510467529297]",0.4916312098503113
1,"['@Test\npublic void canSerializeAdditionalProperties() throws Exception {\n    Foo foo = new Foo();\n    foo.bar = ""hello.world"";\n    foo.baz = new ArrayList<>();\n    foo.baz.add(""hello"");\n    foo.baz.add(""hello.world"");\n    foo.qux = new HashMap<>();\n    foo.qux.put(""hello"", ""world"");\n    foo.qux.put(""a.b"", ""c.d"");\n    foo.qux.put(""bar.a"", ""ttyy"");\n    foo.qux.put(""bar.b"", ""uuzz"");\n    foo.additionalProperties = new HashMap<>();\n    foo.additionalProperties.put(""bar"", ""baz"");\n    foo.additionalProperties.put(""a.b"", ""c.d"");\n    foo.additionalProperties.put(""properties.bar"", ""barbar"");\n    String serialized = new JacksonAdapter().serialize(foo);\n    Assert.assertEquals(""{\\""$type\\"":\\""foo\\"",\\""properties\\"":{\\""bar\\"":\\""hello.world\\"",\\""props\\"":{\\""baz\\"":[\\""hello\\"",\\""hello.world\\""],\\""q\\"":{\\""qux\\"":{\\""hello\\"":\\""world\\"",\\""a.b\\"":\\""c.d\\"",\\""bar.b\\"":\\""uuzz\\"",\\""bar.a\\"":\\""ttyy\\""}}}},\\""bar\\"":\\""baz\\"",\\""a.b\\"":\\""c.d\\"",\\""properties.bar\\"":\\""barbar\\""}"", serialized);\n}']",Jackson;Map;serialized;List;Assert;Hash;Adapter;world;qu;barbar,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;4.94765117764473e-10;4.729372449219227e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10,3,3,"[-9.91615104675293, -9.372783660888672, -8.771785736083984, -0.000659248442389071, -8.075016975402832, -9.748332023620605]",0.9993410706520081
1,"['@Test\npublic void testFormatMultipleUTF8() {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(""a "", ""b, "");\n    params.put(""c"", ""32626&"");\n    Assert.assertTrue(""a =b%2C+&c=32626%26"".equals(KeyValueFormatter.format(params, true)) || ""c=32626%26&a =b%2C+"".equals(KeyValueFormatter.format(params, true)));\n}']",params;Format;params;params;format;params;Formatter;Map;Multiple;params,1.57160684466362e-09;1.280568540096283e-09;1.280568540096283e-09;9.89530235528946e-10;8.731149137020111e-10;7.275957614183426e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;2.3283064365386963e-10,3,3,"[-9.847707748413086, -9.304494857788086, -8.739646911621094, -0.0006852186052128673, -8.055379867553711, -9.663468360900879]",0.9993150234222412
1,"['@Test\npublic void TestSimpleDiamond() {\n    Node x = new Node(4);\n    Node n = new Node(1).addkid(new Node(2).addkid(x)).addkid(new Node(3).addkid(x));\n    Graph g = new Graph(n);\n    MHGDominatorsFinder<Node> finder = new MHGDominatorsFinder<Node>(g);\n    DominatorTree<Node> tree = new DominatorTree<Node>(finder);\n    assertThat(tree.getHeads().size(), is(1));\n    DominatorNode<Node> head = tree.getHeads().get(0);\n    assertThat(head.getGode().id, is(1));\n    Set<Integer> kids = kid_ids(head);\n    assertThat(kids.size(), is(3));\n    assertThat(kids, contains(2, 3, 4));\n}']",Diamond;Set;Node;addkid;That;kids;Node;Head;Node;That,6.28642737865448e-09;3.259629011154175e-09;2.7939677238464355e-09;2.2118911147117615e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.6298145055770874e-09,3,3,"[-9.826345443725586, -9.069778442382812, -8.352997779846191, -0.004890622571110725, -5.42976188659668, -9.317577362060547]",0.9951213002204895
1,"['@Test\npublic void testContinuousScheduling() throws Exception {\n    FairScheduler fs = new FairScheduler();\n    Configuration conf = createConfiguration();\n    conf.setBoolean(CONTINUOUS_SCHEDULING_ENABLED, true);\n    fs.reinitialize(conf, resourceManager.getRMContext());\n    Assert.assertTrue(""Continuous scheduling should be enabled."", fs.isContinuousSchedulingEnabled());\n    RMNode node1 = MockNodes.newNodeInfo(1, Resources.createResource(8 * 1024, 8), 1, ""127.0.0.1"");\n    NodeAddedSchedulerEvent nodeEvent1 = new NodeAddedSchedulerEvent(node1);\n    fs.handle(nodeEvent1);\n    Assert.assertEquals(fs.getClusterCapacity().getMemory(), 8 * 1024);\n    Assert.assertEquals(fs.getClusterCapacity().getVirtualCores(), 8);\n    ApplicationAttemptId appAttemptId = createAppAttemptId(this.APP_ID++, this.ATTEMPT_ID++);\n    fs.addApplication(appAttemptId, ""queue11"", ""user11"");\n    List<ResourceRequest> ask = new ArrayList<ResourceRequest>();\n    ResourceRequest request = createResourceRequest(1024, 1, ANY, 1, 1, true);\n    ask.add(request);\n    fs.allocate(appAttemptId, ask, new ArrayList<ContainerId>(), null, null);\n    Thread.sleep(fs.getConf().getContinuousSchedulingSleepMs() + 500);\n    Resource consumption = fs.applications.get(appAttemptId).getCurrentConsumption();\n    Assert.assertEquals(1024, consumption.getMemory());\n    Assert.assertEquals(1, consumption.getVirtualCores());\n}']",sleep;RMNode;Ms;Fair;consumption;Continuous;Resources;scheduling;Virtual;Equals,6.984919309616089e-09;3.958120942115784e-09;2.0954757928848267e-09;1.9208528101444244e-09;1.7462298274040222e-09;1.280568540096283e-09;1.2223608791828156e-09;1.1059455573558807e-09;9.313225746154785e-10;7.8580342233181e-10,0,0,"[-0.0008249455713666975, -7.388206958770752, -9.68248176574707, -10.78127384185791, -9.625252723693848, -9.77422046661377]",0.9991752505302429
1,"['@Test\npublic void testSetName() throws Exception {\n    Configuration conf = new Configuration();\n    WritableName.setName(SimpleWritable.class, testName);\n    Class<?> test = WritableName.getClass(testName, conf);\n    assertTrue(test.equals(SimpleWritable.class));\n}']",Writable;Writable;Name;new;Name;Class;get;Simple;class;equals,2.561137080192566e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;3.4924596548080444e-10,4,4,"[-9.998353958129883, -10.145740509033203, -9.38591194152832, -7.871565341949463, -0.0005934861255809665, -10.049922943115234]",0.9994066953659058
1,"['@Test\npublic void testAddAndRetrieve() throws Exception {\n    PeerCache cache = PeerCache.getInstance(3, 100000);\n    DatanodeID dnId = new DatanodeID(""192.168.0.1"",\n    ""fakehostname"", ""fake_storage_id"",\n    100, 101, 102);\n    FakePeer peer = new FakePeer(dnId, false);\n    cache.put(dnId, peer);\n    assertTrue(!peer.isClosed());\n    assertEquals(1, cache.size());\n    assertEquals(peer, cache.get(dnId, false));\n    assertEquals(0, cache.size());\n    cache.close();\n}']",fakehostname;dn;Closed;peer;Instance;Peer;size;storage;get;close,3.958120942115784e-09;2.561137080192566e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;9.313225746154785e-10,0,4,"[-0.001095052808523178, -7.229553699493408, -9.074779510498047, -10.208719253540039, -8.985278129577637, -9.283312797546387]",0.9989055395126343
1,"['@Test\npublic void testRead() throws Exception {\n    FileSystem fs = cluster.getFileSystem();\n    long tStart = System.currentTimeMillis();\n    bench.readTest(fs);\n    long execTime = System.currentTimeMillis() - tStart;\n    bench.analyzeResult(fs, TestType.TEST_TYPE_READ, execTime);\n}']",Start;EST;File;READ;System;Time;current;fs;System;Mill,1.1932570487260818e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,2,4,"[-9.132537841796875, -8.843244552612305, -0.0007952864980325103, -8.001999855041504, -9.591883659362793, -8.877802848815918]",0.9992050528526306
1,"['@Test\nvoid writesAndReadsClassContainingCustomConvertedObjects() {\n    List<Object> converters = new ArrayList<>();\n    converters.add(BigDecimalToStringConverter.INSTANCE);\n    converters.add(StringToBigDecimalConverter.INSTANCE);\n    CustomConversions customConversions = new CouchbaseCustomConversions(converters);\n    converter.setCustomConversions(customConversions);\n    converter.afterPropertiesSet();\n    ((CouchbaseMappingContext) (converter.getMappingContext())).setSimpleTypeHolder(customConversions.getSimpleTypeHolder());\n    CouchbaseDocument converted = new CouchbaseDocument();\n    final String weightStr = ""12.34"";\n    final BigDecimal weight = new BigDecimal(weightStr);\n    final CustomObject addy = new CustomObject(weight);\n    List<CustomObject> listOfObjects = new ArrayList<>();\n    listOfObjects.add(addy);\n    Map<String, CustomObject> mapOfObjects = new HashMap<>();\n    mapOfObjects.put(""obj0"", addy);\n    mapOfObjects.put(""obj1"", addy);\n    CustomObjectEntity entity = new CustomObjectEntity(addy, listOfObjects, mapOfObjects);\n    converter.write(entity, converted);\n    CouchbaseDocument source = new CouchbaseDocument();\n    source.put(""_class"", CustomObjectEntity.class.getName());\n    CouchbaseDocument objectDoc = new CouchbaseDocument();\n    objectDoc.put(""weight"", weightStr);\n    source.put(""object"", objectDoc);\n    CouchbaseList listOfObjectsDoc = new CouchbaseList();\n    listOfObjectsDoc.put(objectDoc);\n    source.put(""listOfObjects"", listOfObjectsDoc);\n    CouchbaseDocument mapOfObjectsDoc = new CouchbaseDocument();\n    mapOfObjectsDoc.put(""obj0"", objectDoc);\n    mapOfObjectsDoc.put(""obj1"", objectDoc);\n    source.put(""mapOfObjects"", mapOfObjectsDoc);\n    assertThat(converted.export().toString()).isEqualTo(source.export().toString());\n    CustomObjectEntity readConverted = converter.read(CustomObjectEntity.class, source);\n    assertThat(readConverted.object.weight).isEqualTo(addy.weight);\n    assertThat(readConverted.listOfObjects.get(0).weight).isEqualTo(listOfObjects.get(0).weight);\n    assertThat(readConverted.mapOfObjects.get(""obj0"").weight).isEqualTo(mapOfObjects.get(""obj0"").weight);\n    assertThat(readConverted.mapOfObjects.get(""obj1"").weight).isEqualTo(mapOfObjects.get(""obj1"").weight);\n}']",write;weight;INSTANCE;Custom;Object;list;Hash;Entity;obj;add,2.0954757928848267e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10,3,3,"[-10.07486343383789, -9.52853012084961, -8.838001251220703, -0.0005827635759487748, -8.205169677734375, -9.915045738220215]",0.9994174242019653
1,['@Test\npublic void shouldContainSyncCommitteeAggregates() throws Exception {\n    primaryNode.start();\n    primaryNode.startEventListener(List.of(contribution_and_proof));\n    secondaryNode.start();\n    secondaryNode.startEventListener(List.of(contribution_and_proof));\n    validatorClient.start();\n    primaryNode.waitForEpoch(1);\n    secondaryNode.waitForFullSyncCommitteeAggregate();\n    validatorClient.stop();\n    secondaryNode.stop();\n    primaryNode.stop();\n    assertThat(primaryNode.getContributionAndProofEvents().stream().filter(( proof) -> proof.message.aggregatorIndex.isGreaterThanOrEqualTo(8)).count()).isGreaterThan(0);\n    assertThat(secondaryNode.getContributionAndProofEvents().stream().filter(( proof) -> proof.message.aggregatorIndex.isLessThan(8)).count()).isGreaterThan(0);\n}'],start;Aggregate;Event;contribution;wait;stop;That;Full;Client;secondary,2.7939677238464355e-09;2.0954757928848267e-09;1.862645149230957e-09;1.4260876923799515e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10,0,0,"[-0.0008405489497818053, -7.407554626464844, -9.558699607849121, -10.610723495483398, -9.54568099975586, -9.613541603088379]",0.9991598129272461
1,"['@Test\npublic void testHftpCustomUriPortWithDefaultPorts() throws IOException {\n    resetFileSystem();\n    Configuration conf = new Configuration();\n    URI uri = URI.create() ;\n    HftpFileSystem fs = ((HftpFileSystem) (FileSystem.get(uri, conf)));\n    assertEquals(DFS_NAMENODE_HTTP_PORT_DEFAULT, fs.getDefaultPort());\n    assertEquals(DFS_NAMENODE_HTTPS_PORT_DEFAULT, fs.getDefaultSecurePort());\n    assertEquals(uri, fs.getUri());\n    assertEquals(""127.0.0.1:"" + DFSConfigKeys.DFS_NAMENODE_HTTPS_PORT_DEFAULT, fs.getCanonicalServiceName());\n}']",HTTPS;ft;reset;Name;ri;fs;HTTPS;URI;File;get,1.0128132998943329e-08;9.313225746154785e-09;4.190951585769653e-09;4.190951585769653e-09;3.725290298461914e-09;3.259629011154175e-09;3.259629011154175e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09,4,4,"[-5.671375274658203, -6.077540874481201, -3.7925846576690674, -3.3949482440948486, -0.06596303731203079, -6.205691814422607]",0.9361655712127686
1,"['@Test\npublic void appliesOuterTimeout() {\n    final WaitStrategy underTest = new WaitAllStrategy()\n    .withStrategy(strategy1)\n    .withStartupTimeout(Duration.ofMillis(10));\n    doAnswer(invocation -> {\n        Uninterruptibles.sleepUninterruptibly(20, TimeUnit.MILLISECONDS);\n        return null;\n    }).when(strategy1).waitUntilReady(eq(container));\n    assertThrows(""The outer strategy timeout applies"", TimeoutException.class, () -> {\n        underTest.waitUntilReady(container);\n    });\n}']",class;Mill;Wait;Uninterruptibly;invocation;The;wait;with;ILLISECONDS;Wait,1.1175870895385742e-08;7.450580596923828e-09;6.984919309616089e-09;6.752088665962219e-09;5.820766091346741e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.190951585769653e-09;4.190951585769653e-09,1,0,"[-5.205216407775879, -0.007311017718166113, -6.526618003845215, -10.201974868774414, -8.698838233947754, -8.95755386352539]",0.9927156567573547
1,"['@Test\nvoid logWithExtras() {\n    Instant start = Instant.now();\n    List<LogData> logDataList = logExporter.getFinishedLogItems();\n    assertThat(logDataList).hasSize(1);\n    LogData logData = logDataList.get(0);\n    assertThat(logData.getResource()).isEqualTo(resource);\n    assertThat(logData.getInstrumentationLibraryInfo()).isEqualTo(instrumentationLibraryInfo);\n    assertThat(logData.getBody().asString()).isEqualTo(""log message 1"");\n    assertThat(logData.getEpochNanos()).isGreaterThanOrEqualTo(TimeUnit.MILLISECONDS.toNanos(start.toEpochMilli())).isLessThanOrEqualTo(TimeUnit.MILLISECONDS.toNanos(Instant.now().toEpochMilli()));\n    assertThat(logData.getSeverity()).isEqualTo(INFO);\n    assertThat(logData.getSeverityText()).isEqualTo(""INFO"");\n    assertThat(logData.getAttributes().size()).isEqualTo(3);\n    assertThat(logData.getAttributes().get(EXCEPTION_TYPE)).isEqualTo(IllegalStateException.class.getName());\n    assertThat(logData.getAttributes().get(EXCEPTION_MESSAGE)).isEqualTo(""Error!"");\n    assertThat(logData.getAttributes().get(EXCEPTION_STACKTRACE)).contains(""logWithExtras"");\n}']",ILLISECONDS;Epoch;Time;now;start;everity;instrumentation;Instant;STACKTRACE;Unit,1.1350493878126144e-09;8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,2,2,"[-9.023412704467773, -8.846685409545898, -0.000842692912556231, -7.936054706573486, -9.558923721313477, -8.806682586669922]",0.9991577863693237
1,"['@Test\npublic void testRender_ok() {\n    final Mock mockResponse = mock(RenderResponse.class);\n    mockResponse.stubs().method(ANYTHING);\n    PortletMode mode = PortletMode.VIEW;\n    Map<String, String[]> requestParams = new HashMap<String, String[]>();\n    requestParams.put(ACTION_PARAM, new String[] { ""/view/testAction"" });\n    requestParams.put(EVENT_ACTION, new String[] { ""true"" });\n    requestParams.put(MODE_PARAM, new String[] { mode.toString() });\n    Map<String, Object> sessionMap = new HashMap<String, Object>();\n    Map<String, String> initParams = new HashMap<String, String>();\n    initParams.put(""viewNamespace"", ""/view"");\n    initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE,\n    ""true"");\n    initPortletConfig(initParams, new HashMap<String, Object>());\n    initRequest(requestParams, new HashMap<String, Object>(), sessionMap,\n    PortletMode.VIEW, WindowState.NORMAL, false, null);\n    setupActionFactory(""/view"", ""testAction"", ""success"",\n    EasyMock.createNiceMock(ValueStack.class));\n    mockInvocation.expects(once()).method(""getStack"")\n    .will(returnValue(null));\n    try {\n        dispatcher\n        .setActionProxyFactory((ActionProxyFactory) mockActionFactory\n        .proxy());\n        dispatcher.init((PortletConfig) mockConfig.proxy());\n        dispatcher.render((RenderRequest) mockRequest.proxy(),\n        (RenderResponse) mockResponse.proxy());\n    } catch (Exception e) {\n        e.printStackTrace();\n        fail(""Error occured"");\n    }\n}']",method;catch;mock;ock;method;init;Request;Render;mock;Invocation,1.30385160446167e-08;5.587935447692871e-09;5.587935447692871e-09;3.4924596548080444e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.7939677238464355e-09,1,4,"[-5.23352575302124, -0.15363746881484985, -4.905300140380859, -6.1182050704956055, -4.685476779937744, -2.135000467300415]",0.8575828671455383
1,"['@Test\npublic void testExpiry() throws Exception {\n    final int CAPACITY = 3;\n    final int EXPIRY_PERIOD = 10;\n    PeerCache cache = PeerCache.getInstance(CAPACITY, EXPIRY_PERIOD);\n    DatanodeID dnIds[] = new DatanodeID[CAPACITY];\n    FakePeer peers[] = new FakePeer[CAPACITY];\n    for (int i = 0; i < CAPACITY; ++i) {\n        dnIds[i] = new DatanodeID(""192.168.0.1"",\n        ""fakehostname_"" + i, ""fake_storage_id"",\n        100, 101, 102);\n        peers[i] = new FakePeer(dnIds[i], false);\n    }\n    for (int i = 0; i < CAPACITY; ++i) {\n        cache.put(dnIds[i], peers[i]);\n    }\n    Thread.sleep(EXPIRY_PERIOD * 50);\n    assertEquals(0, cache.size());\n    for (int i = 0; i < CAPACITY; ++i) {\n        assertTrue(peers[i].isClosed());\n    }\n    Thread.sleep(EXPIRY_PERIOD * 50);\n    cache.close();\n}']",sleep;OD;Fake;PER;PER;final;cache;Cache;EXPIR;cache,7.450580596923828e-09;3.259629011154175e-09;2.0954757928848267e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09,0,4,"[-0.0009453595266677439, -7.153064727783203, -9.812691688537598, -11.067740440368652, -10.040213584899902, -9.934489250183105]",0.9990550875663757
1,"['@Test\nvoid shouldCompleteLogWhenCancelledByClient(SessionProtocol protocol) {\n    final ClientFactory factory = ClientFactory.builder().build();\n    final WebClient client = WebClient.builder(server.uri(protocol)).factory(factory).build();\n    final CompletableFuture<AggregatedHttpResponse> responseFuture = client.get(""/reset"").aggregate();\n    await().untilAtomic(ctxRef, Matchers.notNullValue());\n    factory.close();\n    final RequestLog log = ctxRef.get().log().whenComplete().join();\n    if (protocol.isMultiplex()) {\n        assertThat(log.responseCause()).isInstanceOf(ClosedStreamException.class).hasMessageContaining(""received a RST_STREAM frame: CANCEL"");\n        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class).hasCauseInstanceOf(ClosedStreamException.class);\n    } else {\n        assertThat(log.responseCause()).isInstanceOf(ClosedSessionException.class);\n        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class).hasCauseInstanceOf(ClosedSessionException.class);\n    }\n}']",Future;frame;ctx;Completable;final;join;join;omic;response;ancelled,9.313225746154785e-09;9.313225746154785e-09;8.381903171539307e-09;6.05359673500061e-09;5.587935447692871e-09;3.958120942115784e-09;3.725290298461914e-09;3.725290298461914e-09;3.259629011154175e-09;3.14321368932724e-09,1,4,"[-1.3000102043151855, -0.3221279978752136, -7.377774238586426, -8.629853248596191, -6.605746746063232, -7.251430511474609]",0.7246055603027344
1,"['@Test\npublic void testBuildTokenServiceSockAddr() {\n    assertEquals(""127.0.0.1:123"", SecurityUtil.buildTokenService(new InetSocketAddress(""LocalHost"", 123)).toString());\n    assertEquals(""127.0.0.1:123"", SecurityUtil.buildTokenService(new InetSocketAddress(""127.0.0.1"", 123)).toString());\n    assertEquals(""127.0.0.1:123"", SecurityUtil.buildTokenService(NetUtils.createSocketAddr(""127.0.0.1"", 123)).toString());\n}']",Service;Socket;Inet;Inet;Net;to;Security;to;Service;Security,2.3283064365386963e-09;1.979060471057892e-09;1.57160684466362e-09;1.3969838619232178e-09;9.313225746154785e-10;8.440110832452774e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10,4,4,"[-9.838621139526367, -10.076772689819336, -9.366640090942383, -7.883160591125488, -0.0006000387365929782, -10.080299377441406]",0.9994001388549805
1,"['@Test\npublic void testWrite() throws Exception {\n    FileSystem fs = cluster.getFileSystem();\n    long tStart = System.currentTimeMillis();\n    bench.writeTest(fs);\n    long execTime = System.currentTimeMillis() - tStart;\n    bench.analyzeResult(fs, TestType.TEST_TYPE_WRITE, execTime);\n}']",exec;bench;long;write;Type;EST;Exception;Time;fs;current,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;7.275957614183426e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,2,4,"[-9.12093734741211, -8.847114562988281, -0.0008029097807593644, -7.98123025894165, -9.596256256103516, -8.876709938049316]",0.9991974234580994
1,"['  @Test(expected = IllegalArgumentException.class)\n  public void testConstructor1() throws IOException {\n    new OffsetRange(0, 0);\n  }\n']",Range;Argument;expected;class;new;Exception;IOException;Illegal;Offset;Constructor,2.7939677238464355e-09;-4.0745362639427185e-10;-4.656612873077393e-10;-5.820766091346741e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-1.0477378964424133e-09;-1.280568540096283e-09;-4.190951585769653e-09;-4.889443516731262e-09,5,5,"[-5.553816795349121, -4.949392795562744, -5.292428970336914, -6.4534993171691895, -5.484554290771484, -0.021954473108053207]",0.9782847762107849
1,"['  @Test(expected = IllegalArgumentException.class)\n  public void testConstructor2() throws IOException {\n    new OffsetRange(-1, 0);\n  }\n']",Offset;Exception;class;new;Illegal;expected;Argument;IOException;Range;Constructor,3.4924596548080444e-09;9.604264050722122e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;-4.656612873077393e-10;-6.402842700481415e-10;-8.731149137020111e-10;-1.862645149230957e-09;-2.3283064365386963e-09,5,5,"[-5.555437088012695, -4.868288516998291, -5.299125671386719, -6.458946228027344, -5.490665912628174, -0.022491484880447388]",0.9777595400810242
1,"['  @Test(expected = IllegalArgumentException.class)\n  public void testConstructor3() throws IOException {\n    new OffsetRange(-3, -1);\n  }\n']",Exception;IOException;new;Illegal;expected;Argument;Range;class;Constructor;Offset,2.561137080192566e-09;1.862645149230957e-09;1.1641532182693481e-09;-4.656612873077393e-10;-9.313225746154785e-10;-1.367880031466484e-09;-2.0954757928848267e-09;-2.3865140974521637e-09;-3.026798367500305e-09;-6.05359673500061e-09,5,5,"[-5.548426628112793, -4.956913948059082, -5.285789489746094, -6.4406657218933105, -5.471468925476074, -0.022032607346773148]",0.9782083630561829
1,"['  @Test(expected = IllegalArgumentException.class)\n  public void testConstructor4() throws IOException {\n    new OffsetRange(-3, 100);\n  }\n']",Offset;new;Range;Argument;Exception;IOException;class;Illegal;Constructor;expected,7.450580596923828e-09;5.3551048040390015e-09;3.725290298461914e-09;8.149072527885437e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-1.1059455573558807e-09;-1.862645149230957e-09;-2.3283064365386963e-09,5,5,"[-5.560600280761719, -4.953598499298096, -5.29266357421875, -6.44400691986084, -5.481829643249512, -0.02192310243844986]",0.9783154726028442
1,"['  @Test\n  public void testCompare() throws IOException {\n    OffsetRange r1 = new OffsetRange(0, 1);\n    OffsetRange r2 = new OffsetRange(1, 3);\n    OffsetRange r3 = new OffsetRange(1, 3);\n    OffsetRange r4 = new OffsetRange(3, 4);\n\n    assertEquals(0, OffsetRange.ReverseComparatorOnMin.compare(r2, r3));\n    assertEquals(0, OffsetRange.ReverseComparatorOnMin.compare(r2, r2));\n    assertTrue(OffsetRange.ReverseComparatorOnMin.compare(r2, r1) < 0);\n    assertTrue(OffsetRange.ReverseComparatorOnMin.compare(r2, r4) > 0);\n  }\n']",Equals;IOException;Range;Offset;Range;Comparator;Comparator;Range;Offset;Offset,1.4260876923799515e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.257323548197746e-10;5.238689482212067e-10,5,5,"[-5.4808349609375, -5.022748947143555, -5.423677921295166, -6.48233699798584, -5.498831272125244, -0.02100391313433647]",0.979215145111084
1,"['  @Test\n  public void testReaddirBasic() throws IOException {\n    // Get inodeId of /tmp\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n\n    // Create related part of the XDR request\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    handle.serialize(xdr_req);\n    xdr_req.writeLongAsHyper(0); // cookie\n    xdr_req.writeLongAsHyper(0); // verifier\n    xdr_req.writeInt(100); // count\n\n    READDIR3Response response = nfsd.readdir(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    List<Entry3> dirents = response.getDirList().getEntries();\n    assertTrue(dirents.size() == 5); // inculding dot, dotdot\n\n    // Test start listing from f2\n    status = nn.getRpcServer().getFileInfo(testdir + ""/f2"");\n    long f2Id = status.getFileId();\n\n    // Create related part of the XDR request\n    xdr_req = new XDR();\n    handle = new FileHandle(dirId, namenodeId);\n    handle.serialize(xdr_req);\n    xdr_req.writeLongAsHyper(f2Id); // cookie\n    xdr_req.writeLongAsHyper(0); // verifier\n    xdr_req.writeInt(100); // count\n\n    response = nfsd.readdir(xdr_req.asReadOnlyWrap(), securityHandler,\n        new InetSocketAddress(""localhost"", 1234));\n    dirents = response.getDirList().getEntries();\n    assertTrue(dirents.size() == 1);\n    Entry3 entry = dirents.get(0);\n    assertTrue(entry.getName().equals(""f3""));\n\n    // When the cookie is deleted, list starts over no including dot, dotdot\n    hdfs.delete(new Path(testdir + ""/f2""), false);\n\n    response = nfsd.readdir(xdr_req.asReadOnlyWrap(), securityHandler,\n        new InetSocketAddress(""localhost"", 1234));\n    dirents = response.getDirList().getEntries();\n    assertTrue(dirents.size() == 2); // No dot, dotdot\n  }\n']",inculding;part;related;part;dotdot;DR;of;inode;status;Inet,1.909211277961731e-08;8.381903171539307e-09;4.423782229423523e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.076841726899147e-09,5,5,"[-5.458200931549072, -5.000088214874268, -5.371129035949707, -6.44834566116333, -5.446489334106445, -0.021777428686618805]",0.9784579873085022
1,"['  @Test\n  public void testReaddirPlus() throws IOException {\n    // Get inodeId of /tmp\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    \n    // Create related part of the XDR request\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    handle.serialize(xdr_req);\n    xdr_req.writeLongAsHyper(0); // cookie\n    xdr_req.writeLongAsHyper(0); // verifier\n    xdr_req.writeInt(100); // dirCount\n    xdr_req.writeInt(1000); // maxCount\n\n    READDIRPLUS3Response responsePlus = nfsd.readdirplus(xdr_req\n        .asReadOnlyWrap(), securityHandler, new InetSocketAddress(""localhost"",\n        1234));\n    List<EntryPlus3> direntPlus = responsePlus.getDirListPlus().getEntries();\n    assertTrue(direntPlus.size() == 5); // including dot, dotdot\n\n    // Test start listing from f2\n    status = nn.getRpcServer().getFileInfo(testdir + ""/f2"");\n    long f2Id = status.getFileId();\n\n    // Create related part of the XDR request\n    xdr_req = new XDR();\n    handle = new FileHandle(dirId, namenodeId);\n    handle.serialize(xdr_req);\n    xdr_req.writeLongAsHyper(f2Id); // cookie\n    xdr_req.writeLongAsHyper(0); // verifier\n    xdr_req.writeInt(100); // dirCount\n    xdr_req.writeInt(1000); // maxCount\n\n    responsePlus = nfsd.readdirplus(xdr_req.asReadOnlyWrap(), securityHandler,\n        new InetSocketAddress(""localhost"", 1234));\n    direntPlus = responsePlus.getDirListPlus().getEntries();\n    assertTrue(direntPlus.size() == 1);\n    EntryPlus3 entryPlus = direntPlus.get(0);\n    assertTrue(entryPlus.getName().equals(""f3""));\n\n    // When the cookie is deleted, list starts over no including dot, dotdot\n    hdfs.delete(new Path(testdir + ""/f2""), false);\n\n    responsePlus = nfsd.readdirplus(xdr_req.asReadOnlyWrap(), securityHandler,\n        new InetSocketAddress(""localhost"", 1234));\n    direntPlus = responsePlus.getDirListPlus().getEntries();\n    assertTrue(direntPlus.size() == 2); // No dot, dotdot\n  }\n']",inode;serialize;Plus;serialize;Plus;amenode;Inet;the;Readdir;of,2.2118911147117615e-09;1.3969838619232178e-09;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.461305141448975, -4.997701644897461, -5.377133369445801, -6.454635143280029, -5.451730728149414, -0.02171875536441803]",0.9785153865814209
1,"['  @Test\n  public void testAlterWriteRequest() throws IOException {\n    int len = 20;\n    byte[] data = new byte[len];\n    ByteBuffer buffer = ByteBuffer.wrap(data);\n\n    for (int i = 0; i < len; i++) {\n      buffer.put((byte) i);\n    }\n    buffer.flip();\n    int originalCount = buffer.array().length;\n    WRITE3Request request = new WRITE3Request(new FileHandle(), 0, data.length,\n        WriteStableHow.UNSTABLE, buffer);\n\n    WriteCtx writeCtx1 = new WriteCtx(request.getHandle(), request.getOffset(),\n        request.getCount(), WriteCtx.INVALID_ORIGINAL_COUNT,\n        request.getStableHow(), request.getData(), null, 1, false,\n        WriteCtx.DataState.NO_DUMP);\n\n    Assert.assertTrue(writeCtx1.getData().array().length == originalCount);\n\n    // Now change the write request\n    OpenFileCtx.alterWriteRequest(request, 12);\n\n    WriteCtx writeCtx2 = new WriteCtx(request.getHandle(), request.getOffset(),\n        request.getCount(), originalCount, request.getStableHow(),\n        request.getData(), null, 2, false, WriteCtx.DataState.NO_DUMP);\n    ByteBuffer appendedData = writeCtx2.getData();\n\n    int position = appendedData.position();\n    int limit = appendedData.limit();\n    Assert.assertTrue(position == 12);\n    Assert.assertTrue(limit - position == 8);\n    Assert.assertTrue(appendedData.get(position) == (byte) 12);\n    Assert.assertTrue(appendedData.get(position + 1) == (byte) 13);\n    Assert.assertTrue(appendedData.get(position + 2) == (byte) 14);\n    Assert.assertTrue(appendedData.get(position + 7) == (byte) 19);\n\n    // Test current file write offset is at boundaries\n    buffer.position(0);\n    request = new WRITE3Request(new FileHandle(), 0, data.length,\n        WriteStableHow.UNSTABLE, buffer);\n    OpenFileCtx.alterWriteRequest(request, 1);\n    WriteCtx writeCtx3 = new WriteCtx(request.getHandle(), request.getOffset(),\n        request.getCount(), originalCount, request.getStableHow(),\n        request.getData(), null, 2, false, WriteCtx.DataState.NO_DUMP);\n    appendedData = writeCtx3.getData();\n    position = appendedData.position();\n    limit = appendedData.limit();\n    Assert.assertTrue(position == 1);\n    Assert.assertTrue(limit - position == 19);\n    Assert.assertTrue(appendedData.get(position) == (byte) 1);\n    Assert.assertTrue(appendedData.get(position + 18) == (byte) 19);\n\n    // Reset buffer position before test another boundary\n    buffer.position(0);\n    request = new WRITE3Request(new FileHandle(), 0, data.length,\n        WriteStableHow.UNSTABLE, buffer);\n    OpenFileCtx.alterWriteRequest(request, 19);\n    WriteCtx writeCtx4 = new WriteCtx(request.getHandle(), request.getOffset(),\n        request.getCount(), originalCount, request.getStableHow(),\n        request.getData(), null, 2, false, WriteCtx.DataState.NO_DUMP);\n    appendedData = writeCtx4.getData();\n    position = appendedData.position();\n    limit = appendedData.limit();\n    Assert.assertTrue(position == 19);\n    Assert.assertTrue(limit - position == 1);\n    Assert.assertTrue(appendedData.get(position) == (byte) 19);\n  }\n']",True;Request;IOException;len;Stable;wrap;Buffer;Write;byte;alter,6.402842700481415e-10;5.238689482212067e-10;4.802132025361061e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.418325901031494, -5.071022033691406, -5.401336669921875, -6.444951057434082, -5.4287261962890625, -0.021426159888505936]",0.9788016080856323
1,"['  @Test\n  public void testCheckCommit() throws IOException {\n    DFSClient dfsClient = Mockito.mock(DFSClient.class);\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\n    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);\n    Mockito.when(fos.getPos()).thenReturn((long) 0);\n\n    NfsConfiguration conf = new NfsConfiguration();\n    conf.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, false);\n    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,\n        new ShellBasedIdMapping(conf), false, conf);\n\n    COMMIT_STATUS ret;\n\n    // Test inactive open file context\n    ctx.setActiveStatusForTest(false);\n    Channel ch = Mockito.mock(Channel.class);\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_CTX);\n\n    ctx.getPendingWritesForTest().put(new OffsetRange(5, 10),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE);\n\n    // Test request with non zero commit offset\n    ctx.setActiveStatusForTest(true);\n    Mockito.when(fos.getPos()).thenReturn((long) 10);\n    ctx.setNextOffsetForTest(10);\n    COMMIT_STATUS status = ctx.checkCommitInternal(5, null, 1, attr, false);\n    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);\n    // Do_SYNC state will be updated to FINISHED after data sync\n    ret = ctx.checkCommit(dfsClient, 5, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);\n    \n    status = ctx.checkCommitInternal(10, ch, 1, attr, false);\n    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);\n    ret = ctx.checkCommit(dfsClient, 10, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);\n\n    ConcurrentNavigableMap<Long, CommitCtx> commits = ctx\n        .getPendingCommitsForTest();\n    Assert.assertTrue(commits.size() == 0);\n    ret = ctx.checkCommit(dfsClient, 11, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_WAIT);\n    Assert.assertTrue(commits.size() == 1);\n    long key = commits.firstKey();\n    Assert.assertTrue(key == 11);\n\n    // Test request with zero commit offset\n    commits.remove(new Long(11));\n    // There is one pending write [5,10]\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_WAIT);\n    Assert.assertTrue(commits.size() == 1);\n    key = commits.firstKey();\n    Assert.assertTrue(key == 9);\n\n    // Empty pending writes\n    ctx.getPendingWritesForTest().remove(new OffsetRange(5, 10));\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);\n  }\n']",File;null;DF;Mockito;Pos;Mockito;Offset;Channel;COMMIT;Commit,6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.94765117764473e-10;4.94765117764473e-10;4.874891601502895e-10,5,5,"[-5.453794479370117, -5.065751075744629, -5.408846378326416, -6.453197479248047, -5.419773101806641, -0.021294767037034035]",0.9789303541183472
1,"['  @Test\n  public void testCheckCommitLargeFileUpload() throws IOException {\n    DFSClient dfsClient = Mockito.mock(DFSClient.class);\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\n    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);\n    Mockito.when(fos.getPos()).thenReturn((long) 0);\n\n    NfsConfiguration conf = new NfsConfiguration();\n    conf.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, true);\n    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,\n        new ShellBasedIdMapping(conf), false, conf);\n\n    COMMIT_STATUS ret;\n\n    // Test inactive open file context\n    ctx.setActiveStatusForTest(false);\n    Channel ch = Mockito.mock(Channel.class);\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_CTX);\n\n    ctx.getPendingWritesForTest().put(new OffsetRange(10, 15),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE);\n\n    // Test request with non zero commit offset\n    ctx.setActiveStatusForTest(true);\n    Mockito.when(fos.getPos()).thenReturn((long) 8);\n    ctx.setNextOffsetForTest(10);\n    COMMIT_STATUS status = ctx.checkCommitInternal(5, null, 1, attr, false);\n    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);\n    // Do_SYNC state will be updated to FINISHED after data sync\n    ret = ctx.checkCommit(dfsClient, 5, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);\n    \n    // Test commit sequential writes\n    status = ctx.checkCommitInternal(10, ch, 1, attr, false);\n    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);\n    ret = ctx.checkCommit(dfsClient, 10, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);\n\n    // Test commit non-sequential writes\n    ConcurrentNavigableMap<Long, CommitCtx> commits = ctx\n        .getPendingCommitsForTest();\n    Assert.assertTrue(commits.size() == 1);\n    ret = ctx.checkCommit(dfsClient, 16, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_SUCCESS);\n    Assert.assertTrue(commits.size() == 1);\n    \n    // Test request with zero commit offset\n    commits.remove(new Long(10));\n    // There is one pending write [10,15]\n    ret = ctx.checkCommitInternal(0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);\n    \n    ret = ctx.checkCommitInternal(9, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);\n    Assert.assertTrue(commits.size() == 2);\n\n    // Empty pending writes. nextOffset=10, flushed pos=8\n    ctx.getPendingWritesForTest().remove(new OffsetRange(10, 15));\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);\n    \n    // Empty pending writes\n    ctx.setNextOffsetForTest((long) 8); // flushed pos = 8\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);\n    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);\n    \n  }\n']",Write;Mockito;Large;null;Mockito;Offset;WRITE;Channel;null;COMMIT,1.7462298274040222e-09;1.2514647096395493e-09;1.1641532182693481e-09;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10,5,5,"[-5.469130516052246, -5.029581546783447, -5.37923002243042, -6.435469150543213, -5.43680477142334, -0.021555552259087563]",0.978675127029419
1,"['  @Test\n  public void testCheckCommitAixCompatMode() throws IOException {\n    DFSClient dfsClient = Mockito.mock(DFSClient.class);\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\n    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);\n\n    NfsConfiguration conf = new NfsConfiguration();\n    conf.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, false);\n    // Enable AIX compatibility mode.\n    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,\n        new ShellBasedIdMapping(new NfsConfiguration()), true, conf);\n    \n    // Test fall-through to pendingWrites check in the event that commitOffset\n    // is greater than the number of bytes we\'ve so far flushed.\n    Mockito.when(fos.getPos()).thenReturn((long) 2);\n    COMMIT_STATUS status = ctx.checkCommitInternal(5, null, 1, attr, false);\n    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_FINISHED);\n    \n    // Test the case when we actually have received more bytes than we\'re trying\n    // to commit.\n    ctx.getPendingWritesForTest().put(new OffsetRange(0, 10),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n    Mockito.when(fos.getPos()).thenReturn((long) 10);\n    ctx.setNextOffsetForTest((long)10);\n    status = ctx.checkCommitInternal(5, null, 1, attr, false);\n    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);\n  }\n']",case;Writes;put;new;Range;dump;new;to;new;Commit,9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.499208450317383, -5.033557891845703, -5.407189846038818, -6.458454608917236, -5.462060451507568, -0.02112332358956337]",0.9790982007980347
1,"['  @Test\n  public void testCheckCommitFromRead() throws IOException {\n    DFSClient dfsClient = Mockito.mock(DFSClient.class);\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\n    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);\n    Mockito.when(fos.getPos()).thenReturn((long) 0);\n    NfsConfiguration config = new NfsConfiguration();\n\n    config.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, false);\n    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,\n        new ShellBasedIdMapping(config), false, config);\n\n    FileHandle h = new FileHandle(1); // fake handle for ""/dumpFilePath""\n    COMMIT_STATUS ret;\n    WriteManager wm = new WriteManager(new ShellBasedIdMapping(config), config, false);\n    assertTrue(wm.addOpenFileStream(h, ctx));\n    \n    // Test inactive open file context\n    ctx.setActiveStatusForTest(false);\n    Channel ch = Mockito.mock(Channel.class);\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);\n    assertEquals( COMMIT_STATUS.COMMIT_INACTIVE_CTX, ret);\n    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 0));\n    \n    ctx.getPendingWritesForTest().put(new OffsetRange(10, 15),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE, ret);\n    assertEquals(Nfs3Status.NFS3ERR_IO, wm.commitBeforeRead(dfsClient, h, 0));\n    \n    // Test request with non zero commit offset\n    ctx.setActiveStatusForTest(true);\n    Mockito.when(fos.getPos()).thenReturn((long) 10);\n    ctx.setNextOffsetForTest((long)10);\n    COMMIT_STATUS status = ctx.checkCommitInternal(5, ch, 1, attr, false);\n    assertEquals(COMMIT_STATUS.COMMIT_DO_SYNC, status);\n    // Do_SYNC state will be updated to FINISHED after data sync\n    ret = ctx.checkCommit(dfsClient, 5, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_FINISHED, ret);\n    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 5));\n \n    status = ctx.checkCommitInternal(10, ch, 1, attr, true);\n    assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);\n    ret = ctx.checkCommit(dfsClient, 10, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_FINISHED, ret);\n    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 10));\n\n    ConcurrentNavigableMap<Long, CommitCtx> commits = ctx\n        .getPendingCommitsForTest();\n    assertTrue(commits.size() == 0);\n    ret = ctx.checkCommit(dfsClient, 11, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_WAIT, ret);\n    assertEquals(0, commits.size()); // commit triggered by read doesn\'t wait\n    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 11));\n\n    // Test request with zero commit offset\n    // There is one pending write [5,10]\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_WAIT, ret);\n    assertEquals(0, commits.size());\n    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 0));\n\n    // Empty pending writes\n    ctx.getPendingWritesForTest().remove(new OffsetRange(10, 15));\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_FINISHED, ret);\n    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 0));\n  }\n']",Read;df;DF;FSClient;check;open;Mockito;Pos;Writes;Boolean,7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.383320290595293e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.465437412261963, -5.035806655883789, -5.394471645355225, -6.445087432861328, -5.4418816566467285, -0.021420558914542198]",0.9788073301315308
1,"['  @Test\n  public void testCheckCommitFromReadLargeFileUpload() throws IOException {\n    DFSClient dfsClient = Mockito.mock(DFSClient.class);\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\n    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);\n    Mockito.when(fos.getPos()).thenReturn((long) 0);\n    NfsConfiguration config = new NfsConfiguration();\n\n    config.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, true);\n    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,\n        new ShellBasedIdMapping(config), false, config);\n\n    FileHandle h = new FileHandle(1); // fake handle for ""/dumpFilePath""\n    COMMIT_STATUS ret;\n    WriteManager wm = new WriteManager(new ShellBasedIdMapping(config), config, false);\n    assertTrue(wm.addOpenFileStream(h, ctx));\n    \n    // Test inactive open file context\n    ctx.setActiveStatusForTest(false);\n    Channel ch = Mockito.mock(Channel.class);\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);\n    assertEquals( COMMIT_STATUS.COMMIT_INACTIVE_CTX, ret);\n    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 0));\n    \n    ctx.getPendingWritesForTest().put(new OffsetRange(10, 15),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE, ret);\n    assertEquals(Nfs3Status.NFS3ERR_IO, wm.commitBeforeRead(dfsClient, h, 0));\n    \n    // Test request with non zero commit offset\n    ctx.setActiveStatusForTest(true);\n    Mockito.when(fos.getPos()).thenReturn((long) 6);\n    ctx.setNextOffsetForTest((long)10);\n    COMMIT_STATUS status = ctx.checkCommitInternal(5, ch, 1, attr, false);\n    assertEquals(COMMIT_STATUS.COMMIT_DO_SYNC, status);\n    // Do_SYNC state will be updated to FINISHED after data sync\n    ret = ctx.checkCommit(dfsClient, 5, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_FINISHED, ret);\n    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 5));\n \n    // Test request with sequential writes\n    status = ctx.checkCommitInternal(9, ch, 1, attr, true);\n    assertTrue(status == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);\n    ret = ctx.checkCommit(dfsClient, 9, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_SPECIAL_WAIT, ret);\n    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 9));\n\n    // Test request with non-sequential writes\n    ConcurrentNavigableMap<Long, CommitCtx> commits = ctx\n        .getPendingCommitsForTest();\n    assertTrue(commits.size() == 0);\n    ret = ctx.checkCommit(dfsClient, 16, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_SPECIAL_SUCCESS, ret);\n    assertEquals(0, commits.size()); // commit triggered by read doesn\'t wait\n    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 16));\n\n    // Test request with zero commit offset\n    // There is one pending write [10,15]\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_SPECIAL_WAIT, ret);\n    assertEquals(0, commits.size());\n    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 0));\n\n    // Empty pending writes\n    ctx.getPendingWritesForTest().remove(new OffsetRange(10, 15));\n    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);\n    assertEquals(COMMIT_STATUS.COMMIT_SPECIAL_WAIT, ret);\n    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 0));\n  }\n']",Large;fs;inactive;Keys;dump;Commit;class;commit;att;Client,7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.637978807091713e-10;3.637978807091713e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.468379974365234, -5.035303592681885, -5.386447429656982, -6.432765483856201, -5.438477993011475, -0.021483682096004486]",0.9787454605102539
1,"['  @Test\n  public void testWriteStableHow() throws IOException, InterruptedException {\n    NfsConfiguration config = new NfsConfiguration();\n    DFSClient client = null;\n    MiniDFSCluster cluster = null;\n    RpcProgramNfs3 nfsd;\n    SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class);\n    Mockito.when(securityHandler.getUser()).thenReturn(\n        System.getProperty(""user.name""));\n    String currentUser = System.getProperty(""user.name"");\n    config.set(\n            DefaultImpersonationProvider.getTestProvider().\n                getProxySuperuserGroupConfKey(currentUser),\n            ""*"");\n    config.set(\n            DefaultImpersonationProvider.getTestProvider().\n                getProxySuperuserIpConfKey(currentUser),\n            ""*"");\n    ProxyUsers.refreshSuperUserGroupsConfiguration(config);\n\n    try {\n      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();\n      cluster.waitActive();\n      client = new DFSClient(DFSUtilClient.getNNAddress(config), config);\n      int namenodeId = Nfs3Utils.getNamenodeId(config);\n\n      // Use emphral port in case tests are running in parallel\n      config.setInt(""nfs3.mountd.port"", 0);\n      config.setInt(""nfs3.server.port"", 0);\n      \n      // Start nfs\n      Nfs3 nfs3 = new Nfs3(config);\n      nfs3.startServiceInternal(false);\n      nfsd = (RpcProgramNfs3) nfs3.getRpcProgram();\n\n      HdfsFileStatus status = client.getFileInfo(""/"");\n      FileHandle rootHandle = new FileHandle(status.getFileId(), namenodeId);\n      // Create file1\n      CREATE3Request createReq = new CREATE3Request(rootHandle, ""file1"",\n          Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);\n      XDR createXdr = new XDR();\n      createReq.serialize(createXdr);\n      CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(),\n          securityHandler, new InetSocketAddress(""localhost"", 1234));\n      FileHandle handle = createRsp.getObjHandle();\n\n      // Test DATA_SYNC\n      byte[] buffer = new byte[10];\n      for (int i = 0; i < 10; i++) {\n        buffer[i] = (byte) i;\n      }\n      WRITE3Request writeReq = new WRITE3Request(handle, 0, 10,\n          WriteStableHow.DATA_SYNC, ByteBuffer.wrap(buffer));\n      XDR writeXdr = new XDR();\n      writeReq.serialize(writeXdr);\n      nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler,\n          new InetSocketAddress(""localhost"", 1234));\n\n      waitWrite(nfsd, handle, 60000);\n\n      // Readback\n      READ3Request readReq = new READ3Request(handle, 0, 10);\n      XDR readXdr = new XDR();\n      readReq.serialize(readXdr);\n      READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(),\n          securityHandler, new InetSocketAddress(""localhost"", 1234));\n\n      assertTrue(Arrays.equals(buffer, readRsp.getData().array()));\n\n      // Test FILE_SYNC\n\n      // Create file2\n      CREATE3Request createReq2 = new CREATE3Request(rootHandle, ""file2"",\n          Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);\n      XDR createXdr2 = new XDR();\n      createReq2.serialize(createXdr2);\n      CREATE3Response createRsp2 = nfsd.create(createXdr2.asReadOnlyWrap(),\n          securityHandler, new InetSocketAddress(""localhost"", 1234));\n      FileHandle handle2 = createRsp2.getObjHandle();\n\n      WRITE3Request writeReq2 = new WRITE3Request(handle2, 0, 10,\n          WriteStableHow.FILE_SYNC, ByteBuffer.wrap(buffer));\n      XDR writeXdr2 = new XDR();\n      writeReq2.serialize(writeXdr2);\n      nfsd.write(writeXdr2.asReadOnlyWrap(), null, 1, securityHandler,\n          new InetSocketAddress(""localhost"", 1234));\n\n      waitWrite(nfsd, handle2, 60000);\n\n      // Readback\n      READ3Request readReq2 = new READ3Request(handle2, 0, 10);\n      XDR readXdr2 = new XDR();\n      readReq2.serialize(readXdr2);\n      READ3Response readRsp2 = nfsd.read(readXdr2.asReadOnlyWrap(),\n          securityHandler, new InetSocketAddress(""localhost"", 1234));\n\n      assertTrue(Arrays.equals(buffer, readRsp2.getData().array()));\n      // FILE_SYNC should sync the file size\n      status = client.getFileInfo(""/file2"");\n      assertTrue(status.getLen() == 10);\n\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",Interrupted;current;Group;Superuser;pc;Provider;set;User;get;Proxy,1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.478221416473389, -4.9805908203125, -5.376749038696289, -6.431555271148682, -5.481552600860596, -0.02167559415102005]",0.9785576462745667
1,"['  @Test\n  public void testOOOWrites() throws IOException, InterruptedException {\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = null;\n    RpcProgramNfs3 nfsd;\n    final int bufSize = 32;\n    final int numOOO = 3;\n    SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class);\n    Mockito.when(securityHandler.getUser()).thenReturn(\n        System.getProperty(""user.name""));\n    String currentUser = System.getProperty(""user.name"");\n    config.set(\n        DefaultImpersonationProvider.getTestProvider().\n            getProxySuperuserGroupConfKey(currentUser),\n        ""*"");\n    config.set(\n        DefaultImpersonationProvider.getTestProvider().\n            getProxySuperuserIpConfKey(currentUser),\n        ""*"");\n    ProxyUsers.refreshSuperUserGroupsConfiguration(config);\n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n\n    try {\n      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();\n      cluster.waitActive();\n\n      Nfs3 nfs3 = new Nfs3(config);\n      nfs3.startServiceInternal(false);\n      nfsd = (RpcProgramNfs3) nfs3.getRpcProgram();\n\n      DFSClient dfsClient = new DFSClient(DFSUtilClient.getNNAddress(config),\n          config);\n      int namenodeId = Nfs3Utils.getNamenodeId(config);\n      HdfsFileStatus status = dfsClient.getFileInfo(""/"");\n      FileHandle rootHandle = new FileHandle(status.getFileId(), namenodeId);\n\n      CREATE3Request createReq = new CREATE3Request(rootHandle,\n          ""out-of-order-write"" + System.currentTimeMillis(),\n          Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);\n      XDR createXdr = new XDR();\n      createReq.serialize(createXdr);\n      CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(),\n          securityHandler, new InetSocketAddress(""localhost"", 1234));\n      FileHandle handle = createRsp.getObjHandle();\n\n      byte[][] oooBuf = new byte[numOOO][bufSize];\n      for (int i = 0; i < numOOO; i++) {\n        Arrays.fill(oooBuf[i], (byte) i);\n      }\n\n      for (int i = 0; i < numOOO; i++) {\n        final long offset = (numOOO - 1 - i) * bufSize;\n        WRITE3Request writeReq = new WRITE3Request(handle, offset, bufSize,\n            WriteStableHow.UNSTABLE, ByteBuffer.wrap(oooBuf[i]));\n        XDR writeXdr = new XDR();\n        writeReq.serialize(writeXdr);\n        nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler,\n            new InetSocketAddress(""localhost"", 1234));\n      }\n\n      waitWrite(nfsd, handle, 60000);\n      READ3Request readReq = new READ3Request(handle, bufSize, bufSize);\n      XDR readXdr = new XDR();\n      readReq.serialize(readXdr);\n      READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(),\n          securityHandler, new InetSocketAddress(""localhost"", config.getInt(\n              NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY,\n              NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)));\n      assertTrue(Arrays.equals(oooBuf[1], readRsp.getData().array()));\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",pc;fs;pc;Proxy;Mini;port;pc;Proxy;ock;Provider,4.6566128730773926e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10,5,5,"[-5.463548183441162, -4.999791622161865, -5.386537075042725, -6.43670129776001, -5.472827434539795, -0.021587984636425972]",0.9786433577537537
1,"['  @Test\n  public void testOverlappingWrites() throws IOException, InterruptedException {\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = null;\n    RpcProgramNfs3 nfsd;\n    final int bufSize = 32;\n    SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class);\n    Mockito.when(securityHandler.getUser()).thenReturn(\n        System.getProperty(""user.name""));\n    String currentUser = System.getProperty(""user.name"");\n    config.set(\n        DefaultImpersonationProvider.getTestProvider().\n            getProxySuperuserGroupConfKey(currentUser),\n        ""*"");\n    config.set(\n        DefaultImpersonationProvider.getTestProvider().\n            getProxySuperuserIpConfKey(currentUser),\n        ""*"");\n    ProxyUsers.refreshSuperUserGroupsConfiguration(config);\n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n\n    try {\n      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();\n      cluster.waitActive();\n\n      Nfs3 nfs3 = new Nfs3(config);\n      nfs3.startServiceInternal(false);\n      nfsd = (RpcProgramNfs3) nfs3.getRpcProgram();\n\n      DFSClient dfsClient = new DFSClient(DFSUtilClient.getNNAddress(config),\n          config);\n      int namenodeId = Nfs3Utils.getNamenodeId(config);\n      HdfsFileStatus status = dfsClient.getFileInfo(""/"");\n      FileHandle rootHandle = new FileHandle(status.getFileId(), namenodeId);\n\n      CREATE3Request createReq = new CREATE3Request(rootHandle,\n          ""overlapping-writes"" + System.currentTimeMillis(),\n          Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);\n      XDR createXdr = new XDR();\n      createReq.serialize(createXdr);\n      CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(),\n          securityHandler, new InetSocketAddress(""localhost"", 1234));\n      FileHandle handle = createRsp.getObjHandle();\n      byte[] buffer = new byte[bufSize];\n      for (int i = 0; i < bufSize; i++) {\n        buffer[i] = (byte) i;\n      }\n      int[][] ranges = new int[][] {\n          {0, 10},\n          {5, 7},\n          {5, 5},\n          {10, 6},\n          {18, 6},\n          {20, 6},\n          {28, 4},\n          {16, 2},\n          {25, 4}\n      };\n      for (int i = 0; i < ranges.length; i++) {\n        int x[] = ranges[i];\n        byte[] tbuffer = new byte[x[1]];\n        for (int j = 0; j < x[1]; j++) {\n          tbuffer[j] = buffer[x[0] + j];\n        }\n        WRITE3Request writeReq = new WRITE3Request(handle, (long)x[0], x[1],\n            WriteStableHow.UNSTABLE, ByteBuffer.wrap(tbuffer));\n        XDR writeXdr = new XDR();\n        writeReq.serialize(writeXdr);\n        nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler,\n            new InetSocketAddress(""localhost"", 1234));\n      }\n\n      waitWrite(nfsd, handle, 60000);\n      READ3Request readReq = new READ3Request(handle, 0, bufSize);\n      XDR readXdr = new XDR();\n      readReq.serialize(readXdr);\n      READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(),\n          securityHandler, new InetSocketAddress(""localhost"", config.getInt(\n              NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY,\n              NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)));\n\n      assertTrue(Arrays.equals(buffer, readRsp.getData().array()));\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",in;Conf;get;in;tests;Proxy;Impersonation;Exception;Interrupted;ock,3.725290298461914e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.4115357771515846e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09,5,5,"[-5.45339298248291, -4.998982906341553, -5.380675315856934, -6.4349565505981445, -5.463231563568115, -0.021709540858864784]",0.978524386882782
1,"['  @Test\n  public void testCheckSequential() throws IOException {\n    DFSClient dfsClient = Mockito.mock(DFSClient.class);\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\n    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);\n    Mockito.when(fos.getPos()).thenReturn((long) 0);\n    NfsConfiguration config = new NfsConfiguration();\n\n    config.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, false);\n    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,\n        new ShellBasedIdMapping(config), false, config);\n    \n    ctx.getPendingWritesForTest().put(new OffsetRange(5, 10),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n    ctx.getPendingWritesForTest().put(new OffsetRange(10, 15),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n    ctx.getPendingWritesForTest().put(new OffsetRange(20, 25),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n\n    assertTrue(!ctx.checkSequential(5, 4));\n    assertTrue(ctx.checkSequential(9, 5));\n    assertTrue(ctx.checkSequential(10, 5));\n    assertTrue(ctx.checkSequential(14, 5));\n    assertTrue(!ctx.checkSequential(15, 5));\n    assertTrue(!ctx.checkSequential(20, 5));\n    assertTrue(!ctx.checkSequential(25, 5));\n    assertTrue(!ctx.checkSequential(999, 5));\n  }\n']",Mockito;Write;Pos;new;fs;Open;Sequential;get;Writes;att,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.220055416226387e-10,5,5,"[-5.417438507080078, -5.095466613769531, -5.44257926940918, -6.4617228507995605, -5.421186923980713, -0.02109624445438385]",0.9791247248649597
1,"['  @Test\n  public void testHttpServer() throws Exception {\n    Nfs3 nfs = new Nfs3(conf);\n    nfs.startServiceInternal(false);\n    RpcProgramNfs3 nfsd = (RpcProgramNfs3) nfs.getRpcProgram();\n    Nfs3HttpServer infoServer = nfsd.getInfoServer();\n\n    String urlRoot = infoServer.getServerURI().toString();\n\n    // Check default servlets.\n    String pageContents = DFSTestUtil.urlGet(new URL(urlRoot + ""/jmx""));\n    assertTrue(""Bad contents: "" + pageContents,\n        pageContents.contains(""java.lang:type=""));\n    System.out.println(""pc:"" + pageContents);\n\n    int port = infoServer.getSecurePort();\n    assertTrue(""Can\'t get https port"", port > 0);\n  }\n']",Exception;contains;Contents;mx;Http;URL;Get;port;servlets;pc,1.6298145055770874e-09;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.475837230682373, -5.073500156402588, -5.475620269775391, -6.507410526275635, -5.45431661605835, -0.02061605639755726]",0.9795950055122375
1,"['  @Test(timeout = 60000)\n  public void testGetattr() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    XDR xdr_req = new XDR();\n    GETATTR3Request req = new GETATTR3Request(handle);\n    req.serialize(xdr_req);\n    \n    // Attempt by an unpriviledged user should fail.\n    GETATTR3Response response1 = nfsd.getattr(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    GETATTR3Response response2 = nfsd.getattr(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",security;serialize;Unpriviledged;security;getattr;rap;Incorrect;Incorrect;new;amenode,2.7939677238464355e-09;1.57160684466362e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.87666828930378e-10;8.149072527885437e-10;7.130438461899757e-10;6.548361852765083e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.48254919052124, -5.045275688171387, -5.4206695556640625, -6.477136611938477, -5.452642440795898, -0.021066129207611084]",0.9791542291641235
1,"['  @Test(timeout = 60000)\n  public void testSetattr() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    SetAttr3 symAttr = new SetAttr3(0, 1, 0, 0, null, null,\n        EnumSet.of(SetAttrField.UID));\n    SETATTR3Request req = new SETATTR3Request(handle, symAttr, false, null);\n    req.serialize(xdr_req);\n\n    // Attempt by an unprivileged user should fail.\n    SETATTR3Response response1 = nfsd.setattr(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    SETATTR3Response response2 = nfsd.setattr(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",Setattr;Enum;amenode;pc;Info;Incorrect;DR;amenode;sym;should,1.2223608791828156e-09;1.1059455573558807e-09;8.149072527885437e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.483127593994141, -5.016875267028809, -5.392635822296143, -6.452025890350342, -5.461717128753662, -0.021382052451372147]",0.978844940662384
1,"['  @Test(timeout = 60000)\n  public void testLookup() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    LOOKUP3Request lookupReq = new LOOKUP3Request(handle, ""bar"");\n    XDR xdr_req = new XDR();\n    lookupReq.serialize(xdr_req);\n\n    // Attempt by an unpriviledged user should fail.\n    LOOKUP3Response response1 = nfsd.lookup(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    LOOKUP3Response response2 = nfsd.lookup(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",amenode;File;bar;Server;status;LOOKUP;Utils;long;lookup;handle,1.4551915228366852e-09;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.4841766357421875, -5.038778305053711, -5.434837818145752, -6.492574691772461, -5.449045658111572, -0.02103029564023018]",0.979189395904541
1,"['  @Test(timeout = 60000)\n  public void testAccess() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    XDR xdr_req = new XDR();\n    ACCESS3Request req = new ACCESS3Request(handle);\n    req.serialize(xdr_req);\n\n    // Attempt by an unpriviledged user should fail.\n    ACCESS3Response response1 = nfsd.access(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    ACCESS3Response response2 = nfsd.access(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",amenode;bar;serialize;amenode;Exception;by;Handle;dr;get;req,6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.482893466949463, -5.059459686279297, -5.446500301361084, -6.485085487365723, -5.447417259216309, -0.020867211744189262]",0.97934889793396
1,"['  @Test(timeout = 60000)\n  public void testReadlink() throws Exception {\n    // Create a symlink first.\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    SYMLINK3Request req = new SYMLINK3Request(handle, ""fubar"", new SetAttr3(),\n        ""bar"");\n    req.serialize(xdr_req);\n    \n    SYMLINK3Response response = nfsd.symlink(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response.getStatus());\n\n    // Now perform readlink operations.\n    FileHandle handle2 = response.getObjFileHandle();\n    XDR xdr_req2 = new XDR();\n    READLINK3Request req2 = new READLINK3Request(handle2);\n    req2.serialize(xdr_req2);\n\n    // Attempt by an unpriviledged user should fail.\n    READLINK3Response response1 = nfsd.readlink(xdr_req2.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    READLINK3Response response2 = nfsd.readlink(xdr_req2.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",should;Attempt;fail;timeout;readlink;an;user;Exception;dir;df,7.450580596923828e-09;5.587935447692871e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.8335413187742233e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09,5,5,"[-5.398160934448242, -5.079963207244873, -5.386566638946533, -6.429978847503662, -5.395427703857422, -0.021706273779273033]",0.9785274863243103
1,"['  @Test(timeout = 60000)\n  public void testRead() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n\n    READ3Request readReq = new READ3Request(handle, 0, 5);\n    XDR xdr_req = new XDR();\n    readReq.serialize(xdr_req);\n\n    // Attempt by an unpriviledged user should fail.\n    READ3Response response1 = nfsd.read(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    READ3Response response2 = nfsd.read(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",Read;amenode;bar;DR;FS;Socket;long;READ;Utils;dr,1.280568540096283e-09;7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.482860088348389, -5.055510520935059, -5.435085296630859, -6.482274055480957, -5.453115463256836, -0.020923014730215073]",0.9792943596839905
1,"['  @Test(timeout = 120000)\n  public void testEncryptedReadWrite() throws Exception {\n    final int len = 8192;\n\n    final Path zone = new Path(""/zone"");\n    hdfs.mkdirs(zone);\n    dfsAdmin.createEncryptionZone(zone, TEST_KEY, NO_TRASH);\n\n    final byte[] buffer = new byte[len];\n    for (int i = 0; i < len; i++) {\n      buffer[i] = (byte) i;\n    }\n\n    final String encFile1 = ""/zone/myfile"";\n    createFileUsingNfs(encFile1, buffer);\n    commit(encFile1, len);\n    assertArrayEquals(""encFile1 not equal"",\n        getFileContentsUsingNfs(encFile1, len),\n        getFileContentsUsingDfs(encFile1, len));\n\n    /*\n     * Same thing except this time create the encrypted file using DFS.\n     */\n    final String encFile2 = ""/zone/myfile2"";\n    final Path encFile2Path = new Path(encFile2);\n    DFSTestUtil.createFile(hdfs, encFile2Path, len, (short) 1, 0xFEED);\n    assertArrayEquals(""encFile2 not equal"",\n        getFileContentsUsingNfs(encFile2, len),\n        getFileContentsUsingDfs(encFile2, len));\n  }\n']",Using;File;Write;Contents;except;FEED;the;Contents;fs;Contents,8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;5.529727786779404e-10;4.802132025361061e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.505397319793701, -4.779799461364746, -5.358086109161377, -6.444715976715088, -5.51874303817749, -0.023035312071442604]",0.9772278666496277
1,"['  @Test(timeout = 60000)\n  public void testWrite() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n\n    byte[] buffer = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buffer[i] = (byte) i;\n    }\n\n    WRITE3Request writeReq = new WRITE3Request(handle, 0, 10,\n        WriteStableHow.DATA_SYNC, ByteBuffer.wrap(buffer));\n    XDR xdr_req = new XDR();\n    writeReq.serialize(xdr_req);\n\n    // Attempt by an unpriviledged user should fail.\n    WRITE3Response response1 = nfsd.write(xdr_req.asReadOnlyWrap(),\n        null, 1, securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    WRITE3Response response2 = nfsd.write(xdr_req.asReadOnlyWrap(),\n        null, 1, securityHandler,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect response:"", null, response2);\n  }\n']",unpriviledged;Attempt;Unpriviledged;priviledged;should;Attempt;return;Equals;df;response,4.307366907596588e-09;3.725290298461914e-09;2.2118911147117615e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.462226867675781, -5.072660446166992, -5.425819396972656, -6.469954490661621, -5.446776866912842, -0.0209895558655262]",0.9792293310165405
1,"['  @Test(timeout = 60000)\n  public void testCreate() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    CREATE3Request req = new CREATE3Request(handle, ""fubar"",\n        Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);\n    req.serialize(xdr_req);\n    \n    // Attempt by an unpriviledged user should fail.\n    CREATE3Response response1 = nfsd.create(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    CREATE3Response response2 = nfsd.create(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",Incorrect;pc;fail;return;security;code;new;should;unpriviledged;Address,3.3760443329811096e-09;3.259629011154175e-09;3.14321368932724e-09;2.7939677238464355e-09;2.561137080192566e-09;2.0954757928848267e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09,5,5,"[-5.484719276428223, -4.927435874938965, -5.363925457000732, -6.429886817932129, -5.472243309020996, -0.022134870290756226]",0.978108286857605
1,"['  @Test(timeout = 60000)\n  public void testMkdir() throws Exception {//FixME\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    MKDIR3Request req = new MKDIR3Request(handle, ""fubar1"", new SetAttr3());\n    req.serialize(xdr_req);\n    \n    // Attempt to mkdir by an unprivileged user should fail.\n    MKDIR3Response response1 = nfsd.mkdir(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    XDR xdr_req2 = new XDR();\n    MKDIR3Request req2 = new MKDIR3Request(handle, ""fubar2"", new SetAttr3());\n    req2.serialize(xdr_req2);\n    \n    // Attempt to mkdir by a privileged user should pass.\n    MKDIR3Response response2 = nfsd.mkdir(xdr_req2.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",pass;dir;unprivileged;dir;handle;localhost;ubar;Status;Attempt;Fix,1.0913936421275139e-09;9.313225746154785e-10;8.87666828930378e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.001776687800884e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.47456693649292, -4.997725486755371, -5.378582954406738, -6.454571723937988, -5.460399150848389, -0.021616799756884575]",0.9786151647567749
1,"['  @Test(timeout = 60000)\n  public void testSymlink() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    SYMLINK3Request req = new SYMLINK3Request(handle, ""fubar"", new SetAttr3(),\n        ""bar"");\n    req.serialize(xdr_req);\n\n    // Attempt by an unprivileged user should fail.\n    SYMLINK3Response response1 = nfsd.symlink(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a privileged user should pass.\n    SYMLINK3Response response2 = nfsd.symlink(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",Unpriviledged;code;Handler;security;Incorrect;privileged;ubar;Handler;as;new,1.4668330550193787e-08;8.149072527885437e-09;4.6566128730773926e-09;3.725290298461914e-09;3.6088749766349792e-09;2.7939677238464355e-09;2.444721758365631e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.477292537689209, -4.959666728973389, -5.366690158843994, -6.434109687805176, -5.457625389099121, -0.021974649280309677]",0.9782650470733643
1,"['  @Test(timeout = 60000)\n  public void testRemove() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    REMOVE3Request req = new REMOVE3Request(handle, ""bar"");\n    req.serialize(xdr_req);\n\n    // Attempt by an unpriviledged user should fail.\n    REMOVE3Response response1 = nfsd.remove(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    REMOVE3Response response2 = nfsd.remove(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",Status;amenode;unpriviledged;ACCES;handle;Handle;Read;fs;dir;Socket,1.0622898116707802e-09;8.149072527885437e-10;6.111804395914078e-10;5.238689482212067e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.492075443267822, -5.033414363861084, -5.424534320831299, -6.47925329208374, -5.4553303718566895, -0.021071849390864372]",0.9791486263275146
1,"['  @Test(timeout = 60000)\n  public void testRmdir() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    RMDIR3Request req = new RMDIR3Request(handle, ""foo"");\n    req.serialize(xdr_req);\n\n    // Attempt by an unprivileged user should fail.\n    RMDIR3Response response1 = nfsd.rmdir(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a privileged user should pass.\n    RMDIR3Response response2 = nfsd.rmdir(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",Socket;localhost;privileged;unprivileged;serialize;amenode;dir;Inet;foo;Read,2.0954757928848267e-09;1.9208528101444244e-09;1.862645149230957e-09;1.4551915228366852e-09;1.280568540096283e-09;1.2514647096395493e-09;1.0477378964424133e-09;1.0331859812140465e-09;8.731149137020111e-10;8.731149137020111e-10,5,5,"[-5.491977691650391, -5.043463230133057, -5.423887729644775, -6.474539756774902, -5.441028594970703, -0.021078968420624733]",0.9791417717933655
1,"['  @Test(timeout = 60000)\n  public void testRename() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    RENAME3Request req = new RENAME3Request(handle, ""bar"", handle, ""fubar"");\n    req.serialize(xdr_req);\n    \n    // Attempt by an unprivileged user should fail.\n    RENAME3Response response1 = nfsd.rename(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a privileged user should pass.\n    RENAME3Response response2 = nfsd.rename(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",timeout;serialize;DR;dir;ubar;pc;by;response;ENAME;File,1.4551915228366852e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.638867150992155e-10;5.529727786779404e-10;4.656612873077393e-10,5,5,"[-5.488859176635742, -5.050738334655762, -5.433459281921387, -6.478376865386963, -5.442437171936035, -0.020989088341593742]",0.9792296290397644
1,"['  @Test(timeout = 60000)\n  public void testReaddir() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    XDR xdr_req = new XDR();\n    READDIR3Request req = new READDIR3Request(handle, 0, 0, 100);\n    req.serialize(xdr_req);\n\n    // Attempt by an unpriviledged user should fail.\n    READDIR3Response response1 = nfsd.readdir(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    READDIR3Response response2 = nfsd.readdir(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",unpriviledged;Handler;serialize;localhost;Inet;timeout;Incorrect;Address;Handler;amenode,2.9103830456733704e-09;2.7939677238464355e-09;1.280568540096283e-09;1.2223608791828156e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.87666828930378e-10,5,5,"[-5.485553741455078, -5.062916278839111, -5.432121276855469, -6.480710983276367, -5.443601608276367, -0.02092091366648674]",0.9792962670326233
1,"['  @Test(timeout = 60000)\n  public void testReaddirplus() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    XDR xdr_req = new XDR();\n    READDIRPLUS3Request req = new READDIRPLUS3Request(handle, 0, 0, 3, 2);\n    req.serialize(xdr_req);\n    \n    // Attempt by an unprivileged user should fail.\n    READDIRPLUS3Response response1 = nfsd.readdirplus(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a privileged user should pass.\n    READDIRPLUS3Response response2 = nfsd.readdirplus(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",pc;dir;Server;OK;READDIRPLUS;READDIRPLUS;return;File;Handle;DR,1.6298145055770874e-09;6.984919309616089e-10;6.984919309616089e-10;3.346940502524376e-10;3.2741809263825417e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.4994940757751465, -5.030306339263916, -5.420177936553955, -6.479921340942383, -5.4617695808410645, -0.021051889285445213]",0.9791680574417114
1,"['  @Test(timeout = 60000)\n  public void testFsstat() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    XDR xdr_req = new XDR();\n    FSSTAT3Request req = new FSSTAT3Request(handle);\n    req.serialize(xdr_req);\n    \n    // Attempt by an unpriviledged user should fail.\n    FSSTAT3Response response1 = nfsd.fsstat(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    FSSTAT3Response response2 = nfsd.fsstat(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",Unpriviledged;return;df;amenode;Handler;serialize;priviledged;Status;get;by,1.076841726899147e-09;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.637978807091713e-10;3.637978807091713e-10,5,5,"[-5.481680393218994, -5.063397407531738, -5.440323829650879, -6.476236343383789, -5.447242736816406, -0.020888926461338997]",0.9793278574943542
1,"['  @Test(timeout = 60000)\n  public void testFsinfo() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    XDR xdr_req = new XDR();\n    FSINFO3Request req = new FSINFO3Request(handle);\n    req.serialize(xdr_req);\n    \n    // Attempt by an unpriviledged user should fail.\n    FSINFO3Response response1 = nfsd.fsinfo(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    FSINFO3Response response2 = nfsd.fsinfo(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",Handler;Unpriviledged;fsinfo;rap;new;serialize;by;new;Response;Fsinfo,5.587935447692871e-09;5.005858838558197e-09;4.6566128730773926e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.2514647096395493e-09;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;8.440110832452774e-10,5,5,"[-5.482716083526611, -5.063297271728516, -5.439330577850342, -6.476696491241455, -5.446511268615723, -0.020892078056931496]",0.9793247580528259
1,"['  @Test(timeout = 60000)\n  public void testPathconf() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    XDR xdr_req = new XDR();\n    PATHCONF3Request req = new PATHCONF3Request(handle);\n    req.serialize(xdr_req);\n    \n    // Attempt by an unpriviledged user should fail.\n    PATHCONF3Response response1 = nfsd.pathconf(xdr_req.asReadOnlyWrap(),\n        securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    PATHCONF3Response response2 = nfsd.pathconf(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,\n        response2.getStatus());\n  }\n']",security;pc;timeout;df;Handler;Server;unpriviledged;Address;Socket;fs,9.313225746154785e-09;1.862645149230957e-09;1.5133991837501526e-09;1.3387762010097504e-09;9.313225746154785e-10;8.87666828930378e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.482935905456543, -5.0598602294921875, -5.4388275146484375, -6.483052730560303, -5.449492931365967, -0.020892545580863953]",0.9793242812156677
1,"['  @Test(timeout = 60000)\n  public void testCommit() throws Exception {\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    XDR xdr_req = new XDR();\n    COMMIT3Request req = new COMMIT3Request(handle, 0, 5);\n    req.serialize(xdr_req);\n\n    Channel ch = Mockito.mock(Channel.class);\n\n    // Attempt by an unpriviledged user should fail.\n    COMMIT3Response response1 = nfsd.commit(xdr_req.asReadOnlyWrap(),\n        ch, 1, securityHandlerUnpriviledged,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,\n        response1.getStatus());\n\n    // Attempt by a priviledged user should pass.\n    COMMIT3Response response2 = nfsd.commit(xdr_req.asReadOnlyWrap(),\n        ch, 1, securityHandler,\n        new InetSocketAddress(""localhost"", 1234));\n    assertEquals(""Incorrect COMMIT3Response:"", null, response2);\n  }\n']",Status;Socket;Incorrect;serialize;Incorrect;status;Unpriviledged;ACCES;commit;new,2.3283064365386963e-09;1.280568540096283e-09;1.1059455573558807e-09;1.0331859812140465e-09;9.313225746154785e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10,5,5,"[-5.493074417114258, -5.062862873077393, -5.44285774230957, -6.478114128112793, -5.4497809410095215, -0.02081887796521187]",0.9793963432312012
1,"['  @Test(timeout=10000)\n  public void testIdempotent() {\n    Object[][] procedures = {\n        { Nfs3Constant.NFSPROC3.NULL, 1 },\n        { Nfs3Constant.NFSPROC3.GETATTR, 1 },\n        { Nfs3Constant.NFSPROC3.SETATTR, 1 },\n        { Nfs3Constant.NFSPROC3.LOOKUP, 1 },\n        { Nfs3Constant.NFSPROC3.ACCESS, 1 },\n        { Nfs3Constant.NFSPROC3.READLINK, 1 },\n        { Nfs3Constant.NFSPROC3.READ, 1 },\n        { Nfs3Constant.NFSPROC3.WRITE, 1 },\n        { Nfs3Constant.NFSPROC3.CREATE, 0 },\n        { Nfs3Constant.NFSPROC3.MKDIR, 0 },\n        { Nfs3Constant.NFSPROC3.SYMLINK, 0 },\n        { Nfs3Constant.NFSPROC3.MKNOD, 0 },\n        { Nfs3Constant.NFSPROC3.REMOVE, 0 },\n        { Nfs3Constant.NFSPROC3.RMDIR, 0 },\n        { Nfs3Constant.NFSPROC3.RENAME, 0 },\n        { Nfs3Constant.NFSPROC3.LINK, 0 },\n        { Nfs3Constant.NFSPROC3.READDIR, 1 },\n        { Nfs3Constant.NFSPROC3.READDIRPLUS, 1 },\n        { Nfs3Constant.NFSPROC3.FSSTAT, 1 },\n        { Nfs3Constant.NFSPROC3.FSINFO, 1 },\n        { Nfs3Constant.NFSPROC3.PATHCONF, 1 },\n        { Nfs3Constant.NFSPROC3.COMMIT, 1 } };\n    for (Object[] procedure : procedures) {\n      boolean idempotent = procedure[1].equals(Integer.valueOf(1));\n      Nfs3Constant.NFSPROC3 proc = (Nfs3Constant.NFSPROC3)procedure[0];\n      if (idempotent) {\n        Assert.assertTrue((""Procedure "" + proc + "" should be idempotent""),\n            proc.isIdempotent());\n      } else {\n        Assert.assertFalse((""Procedure "" + proc + "" should be non-idempotent""),\n            proc.isIdempotent());\n      }\n    }\n  }\n']",procedures;NULL;ENAME;READDIR;Constant;READ;Constant;fs;OOKUP;WRITE,1.3969838619232178e-09;1.2514647096395493e-09;9.022187441587448e-10;6.984919309616089e-10;6.257323548197746e-10;5.529727786779404e-10;5.456968210637569e-10;5.238689482212067e-10;4.802132025361061e-10;3.4924596548080444e-10,5,5,"[-5.468803882598877, -5.0014848709106445, -5.371382236480713, -6.415748596191406, -5.465927600860596, -0.02168947644531727]",0.9785440564155579
1,"['  @Test\n  public void testDeprecatedKeys() {\n    NfsConfiguration conf = new NfsConfiguration();\n    conf.setInt(""nfs3.server.port"", 998);\n    assertTrue(conf.getInt(NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY, 0) == 998);\n\n    conf.setInt(""nfs3.mountd.port"", 999);\n    assertTrue(conf.getInt(NfsConfigKeys.DFS_NFS_MOUNTD_PORT_KEY, 0) == 999);\n\n    conf.set(""dfs.nfs.exports.allowed.hosts"", ""host1"");\n    assertTrue(conf.get(CommonConfigurationKeys.NFS_EXPORTS_ALLOWED_HOSTS_KEY)\n        .equals(""host1""));\n\n    conf.setInt(""dfs.nfs.exports.cache.expirytime.millis"", 1000);\n    assertTrue(conf.getInt(\n        Nfs3Constant.NFS_EXPORTS_CACHE_EXPIRYTIME_MILLIS_KEY, 0) == 1000);\n\n    conf.setInt(""hadoop.nfs.userupdate.milly"", 10);\n    assertTrue(conf.getInt(IdMappingConstant.USERGROUPID_UPDATE_MILLIS_KEY, 0) == 10);\n\n    conf.set(""dfs.nfs3.dump.dir"", ""/nfs/tmp"");\n    assertTrue(conf.get(NfsConfigKeys.DFS_NFS_FILE_DUMP_DIR_KEY).equals(\n        ""/nfs/tmp""));\n\n    conf.setBoolean(""dfs.nfs3.enableDump"", false);\n    assertTrue(conf.getBoolean(NfsConfigKeys.DFS_NFS_FILE_DUMP_KEY, true) == false);\n\n    conf.setInt(""dfs.nfs3.max.open.files"", 500);\n    assertTrue(conf.getInt(NfsConfigKeys.DFS_NFS_MAX_OPEN_FILES_KEY, 0) == 500);\n\n    conf.setInt(""dfs.nfs3.stream.timeout"", 6000);\n    assertTrue(conf.getInt(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_KEY, 0) == 6000);\n\n    conf.set(""dfs.nfs3.export.point"", ""/dir1"");\n    assertTrue(conf.get(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY).equals(""/dir1""));\n  }\n']",Configuration;Boolean;EXPORTS;Keys;server;adoop;ILLIS;ACHE;EXPORTS;files,8.440110832452774e-10;5.675246939063072e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.92901711165905e-10;3.92901711165905e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.445277690887451, -5.064426898956299, -5.416853904724121, -6.4542717933654785, -5.4421305656433105, -0.02120257169008255]",0.9790207147598267
1,"['  @Test\n  public void testGetAccessRightsForUserGroup() throws IOException {\n    Nfs3FileAttributes attr = Mockito.mock(Nfs3FileAttributes.class);\n    Mockito.when(attr.getUid()).thenReturn(2);\n    Mockito.when(attr.getGid()).thenReturn(3);\n    Mockito.when(attr.getMode()).thenReturn(448); // 700\n    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSREG.toValue());\n    assertEquals(""No access should be allowed as UID does not match attribute over mode 700"",\n      0, Nfs3Utils.getAccessRightsForUserGroup(3, 3, null, attr));\n    Mockito.when(attr.getUid()).thenReturn(2);\n    Mockito.when(attr.getGid()).thenReturn(3);\n    Mockito.when(attr.getMode()).thenReturn(56); // 070\n    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSREG.toValue());\n    assertEquals(""No access should be allowed as GID does not match attribute over mode 070"",\n      0, Nfs3Utils.getAccessRightsForUserGroup(2, 4, null, attr));\n    Mockito.when(attr.getUid()).thenReturn(2);\n    Mockito.when(attr.getGid()).thenReturn(3);\n    Mockito.when(attr.getMode()).thenReturn(7); // 007\n    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSREG.toValue());\n    assertEquals(""Access should be allowed as mode is 007 and UID/GID do not match"",\n      61 /* RWX */, Nfs3Utils.getAccessRightsForUserGroup(1, 4, new int[] {5, 6}, attr));\n    Mockito.when(attr.getUid()).thenReturn(2);\n    Mockito.when(attr.getGid()).thenReturn(10);\n    Mockito.when(attr.getMode()).thenReturn(288); // 440\n    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSREG.toValue());\n    assertEquals(""Access should be allowed as mode is 440 and Aux GID does match"",\n      1 /* R */, Nfs3Utils.getAccessRightsForUserGroup(3, 4, new int[] {5, 16, 10}, attr));\n    Mockito.when(attr.getUid()).thenReturn(2);\n    Mockito.when(attr.getGid()).thenReturn(10);\n    Mockito.when(attr.getMode()).thenReturn(448); // 700\n    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSDIR.toValue());\n    assertEquals(""Access should be allowed for dir as mode is 700 and UID does match"",\n      31 /* Lookup */, Nfs3Utils.getAccessRightsForUserGroup(2, 4, new int[] {5, 16, 10}, attr));\n    assertEquals(""No access should be allowed for dir as mode is 700 even though GID does match"",\n      0, Nfs3Utils.getAccessRightsForUserGroup(3, 10, new int[] {5, 16, 4}, attr));\n    assertEquals(""No access should be allowed for dir as mode is 700 even though AuxGID does match"",\n      0, Nfs3Utils.getAccessRightsForUserGroup(3, 20, new int[] {5, 10}, attr));\n    \n    Mockito.when(attr.getUid()).thenReturn(2);\n    Mockito.when(attr.getGid()).thenReturn(10);\n    Mockito.when(attr.getMode()).thenReturn(457); // 711\n    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSDIR.toValue());\n    assertEquals(""Access should be allowed for dir as mode is 711 and GID matches"",\n        2 /* Lookup */, Nfs3Utils.getAccessRightsForUserGroup(3, 10, new int[] {5, 16, 11}, attr));\n  }\n']",Mockito;Get;when;Type;Mockito;ock;Type;For;mode;when,1.0477378964424133e-09;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.440213203430176, -5.092103004455566, -5.425142288208008, -6.434739112854004, -5.395365238189697, -0.02125473879277706]",0.9789695739746094
1,"['  @Test\n  public void testEviction() throws IOException {\n    NfsConfiguration conf = new NfsConfiguration();\n    conf.set(FileSystem.FS_DEFAULT_NAME_KEY, ""hdfs://localhost"");\n\n    // Only one entry will be in the cache\n    final int MAX_CACHE_SIZE = 1;\n\n    DFSClientCache cache = new DFSClientCache(conf, MAX_CACHE_SIZE);\n\n    int namenodeId = Nfs3Utils.getNamenodeId(conf);\n    DFSClient c1 = cache.getDfsClient(""test1"", namenodeId);\n    assertTrue(cache.getDfsClient(""test1"", namenodeId)\n        .toString().contains(""ugi=test1""));\n    assertEquals(c1, cache.getDfsClient(""test1"", namenodeId));\n    assertFalse(isDfsClientClose(c1));\n\n    cache.getDfsClient(""test2"", namenodeId);\n    assertTrue(isDfsClientClose(c1));\n    assertTrue(""cache size should be the max size or less"",\n        cache.getClientCache().size() <= MAX_CACHE_SIZE);\n  }\n']",Eviction;ugi;localhost;cache;set;Configuration;fs;Only;FSClient;ACHE,1.3387762010097504e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.477451324462891, -5.079195499420166, -5.473782539367676, -6.5257954597473145, -5.441413402557373, -0.020609749481081963]",0.979601263999939
1,"['  @Test\n  public void testGetUserGroupInformationSecure() throws IOException {\n    String userName = ""user1"";\n    String currentUser = ""test-user"";\n\n\n    NfsConfiguration conf = new NfsConfiguration();\n    conf.set(FileSystem.FS_DEFAULT_NAME_KEY, ""hdfs://localhost"");\n    UserGroupInformation currentUserUgi\n            = UserGroupInformation.createRemoteUser(currentUser);\n    currentUserUgi.setAuthenticationMethod(KERBEROS);\n    UserGroupInformation.setLoginUser(currentUserUgi);\n\n    DFSClientCache cache = new DFSClientCache(conf);\n    UserGroupInformation ugiResult\n            = cache.getUserGroupInformation(userName, currentUserUgi);\n\n    assertThat(ugiResult.getUserName(), is(userName));\n    assertThat(ugiResult.getRealUser(), is(currentUserUgi));\n    assertThat(\n            ugiResult.getAuthenticationMethod(),\n            is(UserGroupInformation.AuthenticationMethod.PROXY));\n  }\n']",Authentication;Secure;conf;Authentication;That;get;That;user;Remote;conf,2.7939677238464355e-09;1.862645149230957e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.2223608791828156e-09;1.076841726899147e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.87666828930378e-10,5,5,"[-5.475543022155762, -5.055919647216797, -5.436136245727539, -6.484295845031738, -5.4370832443237305, -0.021014302968978882]",0.9792048335075378
1,"['  @Test\n  public void testGetUserGroupInformation() throws IOException {\n    String userName = ""user1"";\n    String currentUser = ""currentUser"";\n\n    UserGroupInformation currentUserUgi = UserGroupInformation\n            .createUserForTesting(currentUser, new String[0]);\n    NfsConfiguration conf = new NfsConfiguration();\n    conf.set(FileSystem.FS_DEFAULT_NAME_KEY, ""hdfs://localhost"");\n    DFSClientCache cache = new DFSClientCache(conf);\n    UserGroupInformation ugiResult\n            = cache.getUserGroupInformation(userName, currentUserUgi);\n\n    assertThat(ugiResult.getUserName(), is(userName));\n    assertThat(ugiResult.getRealUser(), is(currentUserUgi));\n    assertThat(\n            ugiResult.getAuthenticationMethod(),\n            is(UserGroupInformation.AuthenticationMethod.PROXY));\n  }\n']",ugi;Get;df;User;Group;FS;Result;Cache;new;IOException,5.456968210637569e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.4683098793029785, -5.030966758728027, -5.432887554168701, -6.500740051269531, -5.460966110229492, -0.021094026044011116]",0.9791268706321716
1,"['  @Test\n  public void testNumExports() throws Exception {\n    Assert.assertEquals(mountd.getExports().size(),\n        viewFs.getChildFileSystems().length);\n  }\n']",Child;Exports;size;mount;Exception;Fs;length;get;System;get,1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10;1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.5488667488098145, -4.93105411529541, -5.408337593078613, -6.526870250701904, -5.486670017242432, -0.021422892808914185]",0.9788049459457397
1,"['  @Test\n  public void testPaths() throws Exception {\n    Assert.assertEquals(hdfs1.resolvePath(new Path(""/user1/file1"")),\n        viewFs.resolvePath(new Path(""/hdfs1/file1"")));\n    Assert.assertEquals(hdfs1.resolvePath(new Path(""/user1/file2"")),\n        viewFs.resolvePath(new Path(""/hdfs1/file2"")));\n    Assert.assertEquals(hdfs2.resolvePath(new Path(""/user2/dir2"")),\n        viewFs.resolvePath(new Path(""/hdfs2/dir2"")));\n  }\n']",resolve;Assert;Equals;Path;resolve;Path;Path;new;Path;user,6.912159733474255e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.5014824867248535, -5.015090465545654, -5.510939598083496, -6.564053058624268, -5.4515180587768555, -0.020672107115387917]",0.9795399904251099
1,"['  @Test\n  public void testFileStatus() throws Exception {\n    HdfsFileStatus status = nn1.getRpcServer().getFileInfo(""/user1/file1"");\n    FileStatus st = viewFs.getFileStatus(new Path(""/hdfs1/file1""));\n    Assert.assertEquals(st.isDirectory(), status.isDirectory());\n\n    HdfsFileStatus status2 = nn2.getRpcServer().getFileInfo(""/user2/dir2"");\n    FileStatus st2 = viewFs.getFileStatus(new Path(""/hdfs2/dir2""));\n    Assert.assertEquals(st2.isDirectory(), status2.isDirectory());\n  }\n']",pc;Path;Assert;new;Status;File;Status;st;Info;File,2.2118911147117615e-09;7.275957614183426e-10;6.548361852765083e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.476171970367432, -5.023873805999756, -5.455292224884033, -6.545358180999756, -5.4101643562316895, -0.021168025210499763]",0.97905433177948
1,"['  @Test (timeout = 60000)\n  public void testNfsAccessNN1() throws Exception {\n    HdfsFileStatus status = nn1.getRpcServer().getFileInfo(""/user1/file1"");\n    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs1.getUri());\n    testNfsGetAttrResponse(status.getFileId(), namenodeId, Nfs3Status.NFS3_OK);\n  }\n']",NN;Server;Exception;ri;Status;get;get;Get;df;amenode,6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.1641532182693481e-10,5,5,"[-5.524302959442139, -4.9531073570251465, -5.414898872375488, -6.528049945831299, -5.449717044830322, -0.02148846536874771]",0.9787407517433167
1,"['  @Test (timeout = 60000)\n  public void testNfsAccessNN2() throws Exception {\n    HdfsFileStatus status = nn2.getRpcServer().getFileInfo(""/user2/dir2"");\n    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs2.getUri());\n    testNfsGetAttrResponse(status.getFileId(), namenodeId, Nfs3Status.NFS3_OK);\n  }\n']",NN;get;fs;Get;Info;OK;fs;ri;Utils;get,1.3969838619232178e-09;7.8580342233181e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.524713039398193, -4.95139217376709, -5.4148759841918945, -6.525588035583496, -5.453087329864502, -0.021488115191459656]",0.9787409901618958
1,"['  @Test (timeout = 60000)\n  public void testWrongNfsAccess() throws Exception {\n    DFSTestUtil.createFile(viewFs, new Path(""/hdfs1/file3""), 0, (short) 1, 0);\n    HdfsFileStatus status = nn1.getRpcServer().getFileInfo(""/user1/file3"");\n    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs2.getUri());\n    testNfsGetAttrResponse(status.getFileId(), namenodeId,\n        Nfs3Status.NFS3ERR_IO);\n  }\n']",amenode;amenode;Util;short;File;Fs;status;File;Status;Access,1.4551915228366852e-09;1.0477378964424133e-09;5.165929906070232e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.41970007866621e-10;3.346940502524376e-10;2.9831426218152046e-10,5,5,"[-5.525854110717773, -4.964478492736816, -5.452907085418701, -6.518581390380859, -5.483859539031982, -0.021097995340824127]",0.9791231155395508
1,"['  @Test (timeout = 60000)\n  public void testNfsWriteNN1() throws Exception {\n    HdfsFileStatus status = nn1.getRpcServer().getFileInfo(""/user1/write1"");\n    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs1.getUri());\n    testNfsWriteResponse(status.getFileId(), namenodeId);\n  }\n']",timeout;NN;amenode;Write;amenode;pc;fs;Server;fs;user,1.1641532182693481e-09;1.1641532182693481e-09;9.89530235528946e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.53872537612915, -4.9413652420043945, -5.418346405029297, -6.5302958488464355, -5.467846870422363, -0.0214174073189497]",0.9788103103637695
1,"['  @Test (timeout = 60000)\n  public void testNfsWriteNN2() throws Exception {\n    HdfsFileStatus status = nn2.getRpcServer().getFileInfo(""/user2/write2"");\n    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs2.getUri());\n    testNfsWriteResponse(status.getFileId(), namenodeId);\n  }\n']",timeout;fs;NN;Status;ri;df;Write;user;status;config,2.7939677238464355e-09;1.1059455573558807e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.5404534339904785, -4.940314292907715, -5.419787883758545, -6.528031826019287, -5.4701828956604, -0.021404922008514404]",0.9788225293159485
1,"['  @Test (timeout = 60000)\n  public void testNfsRenameMultiNN() throws Exception {\n    HdfsFileStatus fromFileStatus = nn1.getRpcServer().getFileInfo(""/user1"");\n    int fromNNId = Nfs3Utils.getNamenodeId(config, hdfs1.getUri());\n    FileHandle fromHandle =\n        new FileHandle(fromFileStatus.getFileId(), fromNNId);\n\n    HdfsFileStatus toFileStatus = nn2.getRpcServer().getFileInfo(""/user2"");\n    int toNNId = Nfs3Utils.getNamenodeId(config, hdfs2.getUri());\n    FileHandle toHandle = new FileHandle(toFileStatus.getFileId(), toNNId);\n\n    HdfsFileStatus statusBeforeRename =\n        nn1.getRpcServer().getFileInfo(""/user1/renameMultiNN"");\n    Assert.assertEquals(statusBeforeRename.isDirectory(), false);\n\n    testNfsRename(fromHandle, ""renameMultiNN"",\n        toHandle, ""renameMultiNNFail"", Nfs3Status.NFS3ERR_INVAL);\n\n    HdfsFileStatus statusAfterRename =\n        nn2.getRpcServer().getFileInfo(""/user2/renameMultiNNFail"");\n    Assert.assertEquals(statusAfterRename, null);\n\n    statusAfterRename = nn1.getRpcServer().getFileInfo(""/user1/renameMultiNN"");\n    Assert.assertEquals(statusAfterRename.isDirectory(), false);\n  }\n']",Status;ename;Status;Server;amenode;status;ename;Equals;ename;Status,5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.464855670928955, -5.059629917144775, -5.401540756225586, -6.454471111297607, -5.407149791717529, -0.02137516811490059]",0.9788516759872437
1,"['  @Test (timeout = 60000)\n  public void testNfsRenameSingleNN() throws Exception {\n    HdfsFileStatus fromFileStatus = nn1.getRpcServer().getFileInfo(""/user1"");\n    int fromNNId = Nfs3Utils.getNamenodeId(config, hdfs1.getUri());\n    FileHandle fromHandle =\n        new FileHandle(fromFileStatus.getFileId(), fromNNId);\n\n    HdfsFileStatus statusBeforeRename =\n        nn1.getRpcServer().getFileInfo(""/user1/renameSingleNN"");\n    Assert.assertEquals(statusBeforeRename.isDirectory(), false);\n\n    testNfsRename(fromHandle, ""renameSingleNN"",\n        fromHandle, ""renameSingleNNSucess"", Nfs3Status.NFS3_OK);\n\n    HdfsFileStatus statusAfterRename =\n        nn1.getRpcServer().getFileInfo(""/user1/renameSingleNNSucess"");\n    Assert.assertEquals(statusAfterRename.isDirectory(), false);\n\n    statusAfterRename =\n        nn1.getRpcServer().getFileInfo(""/user1/renameSingleNN"");\n    Assert.assertEquals(statusAfterRename, null);\n  }\n']",ename;from;fs;Exception;Handle;NN;NNSucess;amenode;Equals;from,8.149072527885437e-10;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.511093720793724e-10;4.0745362639427185e-10;3.92901711165905e-10;3.8198777474462986e-10,5,5,"[-5.441928863525391, -5.0216193199157715, -5.370527267456055, -6.429903507232666, -5.416362285614014, -0.021869920194149017]",0.9783675074577332
1,"['  @Test\n  public void testEviction() throws IOException, InterruptedException {\n    NfsConfiguration conf = new NfsConfiguration();\n\n    // Only two entries will be in the cache\n    conf.setInt(NfsConfigKeys.DFS_NFS_MAX_OPEN_FILES_KEY, 2);\n\n    DFSClient dfsClient = Mockito.mock(DFSClient.class);\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\n    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);\n    Mockito.when(fos.getPos()).thenReturn((long) 0);\n\n    OpenFileCtx context1 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n    OpenFileCtx context2 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n    OpenFileCtx context3 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n    OpenFileCtx context4 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n    OpenFileCtx context5 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n\n    OpenFileCtxCache cache = new OpenFileCtxCache(conf, 10 * 60 * 100);\n\n    boolean ret = cache.put(new FileHandle(1), context1);\n    assertTrue(ret);\n    Thread.sleep(1000);\n    ret = cache.put(new FileHandle(2), context2);\n    assertTrue(ret);\n    ret = cache.put(new FileHandle(3), context3);\n    assertFalse(ret);\n    assertTrue(cache.size() == 2);\n\n    // Wait for the oldest stream to be evict-able, insert again\n    Thread.sleep(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT);\n    assertTrue(cache.size() == 2);\n\n    ret = cache.put(new FileHandle(3), context3);\n    assertTrue(ret);\n    assertTrue(cache.size() == 2);\n    assertTrue(cache.get(new FileHandle(1)) == null);\n\n    // Test inactive entry is evicted immediately\n    context3.setActiveStatusForTest(false);\n    ret = cache.put(new FileHandle(4), context4);\n    assertTrue(ret);\n\n    // Now the cache has context2 and context4\n    // Test eviction failure if all entries have pending work.\n    context2.getPendingWritesForTest().put(new OffsetRange(0, 100),\n        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));\n    context4.getPendingCommitsForTest().put(new Long(100),\n        new CommitCtx(0, null, 0, attr));\n    Thread.sleep(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT);\n    ret = cache.put(new FileHandle(5), context5);\n    assertFalse(ret);\n  }\n']",dump;Eviction;sleep;context;will;FS;DF;when;dump;new,8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.449531555175781, -4.9969096183776855, -5.388535976409912, -6.447398662567139, -5.472633361816406, -0.021643048152327538]",0.9785894751548767
1,"['  @Test\n  public void testScan() throws IOException, InterruptedException {\n    NfsConfiguration conf = new NfsConfiguration();\n\n    // Only two entries will be in the cache\n    conf.setInt(NfsConfigKeys.DFS_NFS_MAX_OPEN_FILES_KEY, 2);\n\n    DFSClient dfsClient = Mockito.mock(DFSClient.class);\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\n    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);\n    Mockito.when(fos.getPos()).thenReturn((long) 0);\n\n    OpenFileCtx context1 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n    OpenFileCtx context2 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n    OpenFileCtx context3 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n    OpenFileCtx context4 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",\n        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));\n\n    OpenFileCtxCache cache = new OpenFileCtxCache(conf, 10 * 60 * 100);\n\n    // Test cleaning expired entry\n    boolean ret = cache.put(new FileHandle(1), context1);\n    assertTrue(ret);\n    ret = cache.put(new FileHandle(2), context2);\n    assertTrue(ret);\n    Thread.sleep(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT + 1);\n    cache.scan(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT);\n    assertTrue(cache.size() == 0);\n\n    // Test cleaning inactive entry\n    ret = cache.put(new FileHandle(3), context3);\n    assertTrue(ret);\n    ret = cache.put(new FileHandle(4), context4);\n    assertTrue(ret);\n    context3.setActiveStatusForTest(false);\n    cache.scan(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_DEFAULT);\n    assertTrue(cache.size() == 1);\n    assertTrue(cache.get(new FileHandle(3)) == null);\n    assertTrue(cache.get(new FileHandle(4)) != null);\n  }\n']",sleep;when;two;cleaning;Exception;KEY;Handle;df;the;ret,1.1059455573558807e-09;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.448326587677002, -4.986757278442383, -5.371303081512451, -6.4470977783203125, -5.4679107666015625, -0.02182081714272499]",0.9784155488014221
1,"['  @Test(timeout = 60000)\n  public void testClientAccessPrivilegeForRemove() throws Exception {\n    // Configure ro access for nfs1 service\n    config.set(""dfs.nfs.exports.allowed.hosts"", ""* ro"");\n\n    // Start nfs\n    Nfs3 nfs = new Nfs3(config);\n    nfs.startServiceInternal(false);\n\n    RpcProgramNfs3 nfsd = (RpcProgramNfs3) nfs.getRpcProgram();\n\n    // Create a remove request\n    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);\n    long dirId = status.getFileId();\n    int namenodeId = Nfs3Utils.getNamenodeId(config);\n\n    XDR xdr_req = new XDR();\n    FileHandle handle = new FileHandle(dirId, namenodeId);\n    handle.serialize(xdr_req);\n    xdr_req.writeString(""f1"");\n\n    // Remove operation\n    REMOVE3Response response = nfsd.remove(xdr_req.asReadOnlyWrap(),\n        securityHandler, new InetSocketAddress(""localhost"", 1234));\n\n    // Assert on return code\n    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,\n        response.getStatus());\n\n  }\n']",Privilege;Inet;FS;code;Assert;config;amenode;security;long;pc,2.3283064365386963e-09;1.367880031466484e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.505899429321289, -5.017885684967041, -5.426278591156006, -6.479971408843994, -5.471125602722168, -0.021040916442871094]",0.9791790246963501
1,"['  @Test\n  public void testHdfsExportPoint() throws IOException {\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = null;\n\n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n    config.set(""nfs.http.address"", ""0.0.0.0:0"");\n\n    try {\n      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();\n      cluster.waitActive();\n\n      // Start nfs\n      final Nfs3 nfsServer = new Nfs3(config);\n      nfsServer.startServiceInternal(false);\n\n      Mountd mountd = nfsServer.getMountd();\n      RpcProgramMountd rpcMount = (RpcProgramMountd) mountd.getRpcProgram();\n      assertTrue(rpcMount.getExports().size() == 1);\n\n      String exportInMountd = rpcMount.getExports().get(0);\n      assertTrue(exportInMountd.equals(""/""));\n\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",IOException;Configuration;Configuration;Export;case;Mini;DF;port;are;wait,8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10,5,5,"[-5.47620964050293, -5.096506118774414, -5.447690010070801, -6.496504306793213, -5.440284729003906, -0.02066848799586296]",0.9795435070991516
1,"['  @Test\n  public void testViewFsMultipleExportPoint() throws IOException {\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = null;\n    String clusterName = RandomStringUtils.randomAlphabetic(10);\n\n    String exportPoint = ""/hdfs1,/hdfs2"";\n    config.setStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY, exportPoint);\n    config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,\n        FsConstants.VIEWFS_SCHEME + ""://"" + clusterName);\n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n    config.set(""nfs.http.address"", ""0.0.0.0:0"");\n\n    try {\n      cluster =\n          new MiniDFSCluster.Builder(config).nnTopology(\n              MiniDFSNNTopology.simpleFederatedTopology(2))\n              .numDataNodes(2)\n              .build();\n      cluster.waitActive();\n      DistributedFileSystem hdfs1 = cluster.getFileSystem(0);\n      DistributedFileSystem hdfs2 = cluster.getFileSystem(1);\n      cluster.waitActive();\n      Path base1 = new Path(""/user1"");\n      Path base2 = new Path(""/user2"");\n      hdfs1.delete(base1, true);\n      hdfs2.delete(base2, true);\n      hdfs1.mkdirs(base1);\n      hdfs2.mkdirs(base2);\n      ConfigUtil.addLink(config, clusterName, ""/hdfs1"",\n          hdfs1.makeQualified(base1).toUri());\n      ConfigUtil.addLink(config, clusterName, ""/hdfs2"",\n          hdfs2.makeQualified(base2).toUri());\n\n      // Start nfs\n      final Nfs3 nfsServer = new Nfs3(config);\n      nfsServer.startServiceInternal(false);\n\n      Mountd mountd = nfsServer.getMountd();\n      RpcProgramMountd rpcMount = (RpcProgramMountd) mountd.getRpcProgram();\n      assertTrue(rpcMount.getExports().size() == 2);\n\n      String exportInMountd1 = rpcMount.getExports().get(0);\n      assertTrue(exportInMountd1.equals(""/hdfs1""));\n\n      String exportInMountd2 = rpcMount.getExports().get(1);\n      assertTrue(exportInMountd2.equals(""/hdfs2""));\n\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",Multiple;new;odes;Random;Configuration;NNTopology;Builder;Public;fs;System,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.479905128479004, -4.97391414642334, -5.379769325256348, -6.445411682128906, -5.50081205368042, -0.02159731835126877]",0.9786341190338135
1,"['  @Test\n  public void testViewFsInternalExportPoint() throws IOException {\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = null;\n    String clusterName = RandomStringUtils.randomAlphabetic(10);\n\n    String exportPoint = ""/hdfs1/subpath"";\n    config.setStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY, exportPoint);\n    config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,\n        FsConstants.VIEWFS_SCHEME + ""://"" + clusterName);\n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n    config.set(""nfs.http.address"", ""0.0.0.0:0"");\n\n    try {\n      cluster =\n          new MiniDFSCluster.Builder(config).nnTopology(\n              MiniDFSNNTopology.simpleFederatedTopology(2))\n              .numDataNodes(2)\n              .build();\n      cluster.waitActive();\n      DistributedFileSystem hdfs1 = cluster.getFileSystem(0);\n      DistributedFileSystem hdfs2 = cluster.getFileSystem(1);\n      cluster.waitActive();\n      Path base1 = new Path(""/user1"");\n      Path base2 = new Path(""/user2"");\n      hdfs1.delete(base1, true);\n      hdfs2.delete(base2, true);\n      hdfs1.mkdirs(base1);\n      hdfs2.mkdirs(base2);\n      ConfigUtil.addLink(config, clusterName, ""/hdfs1"",\n          hdfs1.makeQualified(base1).toUri());\n      ConfigUtil.addLink(config, clusterName, ""/hdfs2"",\n          hdfs2.makeQualified(base2).toUri());\n      Path subPath = new Path(base1, ""subpath"");\n      hdfs1.delete(subPath, true);\n      hdfs1.mkdirs(subPath);\n\n      // Start nfs\n      final Nfs3 nfsServer = new Nfs3(config);\n      nfsServer.startServiceInternal(false);\n\n      Mountd mountd = nfsServer.getMountd();\n      RpcProgramMountd rpcMount = (RpcProgramMountd) mountd.getRpcProgram();\n      assertTrue(rpcMount.getExports().size() == 1);\n\n      String exportInMountd = rpcMount.getExports().get(0);\n      assertTrue(exportInMountd.equals(exportPoint));\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",tests;CHEM;POINT;Point;Configuration;File;random;in;IOException;Mini,9.313225746154785e-10;9.022187441587448e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.493319511413574, -4.9573564529418945, -5.372920513153076, -6.446411609649658, -5.506555080413818, -0.02166544646024704]",0.9785675406455994
1,"['  @Test\n  public void testViewFsRootExportPoint() throws IOException {\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = null;\n    String clusterName = RandomStringUtils.randomAlphabetic(10);\n\n    String exportPoint = ""/"";\n    config.setStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY, exportPoint);\n    config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,\n        FsConstants.VIEWFS_SCHEME + ""://"" + clusterName);\n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n    config.set(""nfs.http.address"", ""0.0.0.0:0"");\n\n    try {\n      cluster =\n          new MiniDFSCluster.Builder(config).nnTopology(\n              MiniDFSNNTopology.simpleFederatedTopology(2))\n              .numDataNodes(2)\n              .build();\n      cluster.waitActive();\n      DistributedFileSystem hdfs1 = cluster.getFileSystem(0);\n      DistributedFileSystem hdfs2 = cluster.getFileSystem(1);\n      cluster.waitActive();\n      Path base1 = new Path(""/user1"");\n      Path base2 = new Path(""/user2"");\n      hdfs1.delete(base1, true);\n      hdfs2.delete(base2, true);\n      hdfs1.mkdirs(base1);\n      hdfs2.mkdirs(base2);\n      ConfigUtil.addLink(config, clusterName, ""/hdfs1"",\n          hdfs1.makeQualified(base1).toUri());\n      ConfigUtil.addLink(config, clusterName, ""/hdfs2"",\n          hdfs2.makeQualified(base2).toUri());\n\n      exception.expect(FileSystemException.class);\n      exception.\n          expectMessage(""Only HDFS is supported as underlyingFileSystem, ""\n              + ""fs scheme:viewfs"");\n      // Start nfs\n      final Nfs3 nfsServer = new Nfs3(config);\n      nfsServer.startServiceInternal(false);\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",Data;Public;File;Configuration;Export;fs;Distributed;Mini;Point;DEFAULT,4.6566128730773926e-09;3.259629011154175e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.463334083557129, -4.982456684112549, -5.372195243835449, -6.440549850463867, -5.485330104827881, -0.021717356517910957]",0.9785167574882507
1,"['  @Test\n  public void testHdfsInternalExportPoint() throws IOException {\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = null;\n\n    String exportPoint = ""/myexport1"";\n    config.setStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY, exportPoint);\n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n    config.set(""nfs.http.address"", ""0.0.0.0:0"");\n    Path base = new Path(exportPoint);\n\n    try {\n      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();\n      cluster.waitActive();\n      DistributedFileSystem hdfs = cluster.getFileSystem(0);\n      hdfs.delete(base, true);\n      hdfs.mkdirs(base);\n\n      // Start nfs\n      final Nfs3 nfsServer = new Nfs3(config);\n      nfsServer.startServiceInternal(false);\n\n      Mountd mountd = nfsServer.getMountd();\n      RpcProgramMountd rpcMount = (RpcProgramMountd) mountd.getRpcProgram();\n      assertTrue(rpcMount.getExports().size() == 1);\n\n      String exportInMountd = rpcMount.getExports().get(0);\n      assertTrue(exportInMountd.equals(exportPoint));\n\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",new;Path;in;parallel;Point;delete;http;Configuration;address;Cluster,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.511093720793724e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.471297264099121, -5.078949928283691, -5.4185309410095215, -6.46928071975708, -5.453281402587891, -0.02091566100716591]",0.9793015718460083
1,"['  @Test\n  public void testInvalidFsExport() throws IOException {\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = null;\n\n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n    config.set(""nfs.http.address"", ""0.0.0.0:0"");\n\n    try {\n      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();\n      cluster.waitActive();\n      config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,\n          FsConstants.LOCAL_FS_URI.toString());\n\n      exception.expect(FileSystemException.class);\n      exception.\n          expectMessage(""Only HDFS is supported as underlyingFileSystem, ""\n              + ""fs scheme:file"");\n      // Start nfs\n      final Nfs3 nfsServer = new Nfs3(config);\n      nfsServer.startServiceInternal(false);\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",Invalid;underlying;IOException;finally;wait;Public;fs;in;Configuration;expect,2.0954757928848267e-09;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.2928149923682213e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.486021995544434, -5.074556827545166, -5.449947834014893, -6.4872660636901855, -5.457067966461182, -0.020696161314845085]",0.9795165061950684
1,"['  @Test\n  public void testStart() throws IOException {\n    // Start minicluster\n    NfsConfiguration config = new NfsConfiguration();\n    MiniDFSCluster cluster = new MiniDFSCluster.Builder(config).numDataNodes(1)\n        .build();\n    cluster.waitActive();\n    \n    // Use emphral port in case tests are running in parallel\n    config.setInt(""nfs3.mountd.port"", 0);\n    config.setInt(""nfs3.server.port"", 0);\n    \n    int newTimeoutMillis = 1000; // 1s\n    // Set the new portmap rpc timeout values and check\n    config.setInt(NfsConfigKeys.NFS_UDP_CLIENT_PORTMAP_TIMEOUT_MILLIS_KEY,\n                  newTimeoutMillis);\n    assertTrue(config.getInt(\n                      NfsConfigKeys.NFS_UDP_CLIENT_PORTMAP_TIMEOUT_MILLIS_KEY,\n          0) == newTimeoutMillis);\n\n    // Start nfs\n    Nfs3 nfs3 = new Nfs3(config);\n    nfs3.startServiceInternal(false);\n\n    RpcProgramMountd mountd = (RpcProgramMountd) nfs3.getMountd()\n        .getRpcProgram();\n    mountd.nullOp(new XDR(), 1234, InetAddress.getByName(""localhost""));\n    assertTrue(mountd.getPortmapUdpTimeoutMillis() == newTimeoutMillis);\n    RpcProgramNfs3 nfsd = (RpcProgramNfs3) nfs3.getRpcProgram();\n    nfsd.nullProcedure();\n    assertTrue(nfsd.getPortmapUdpTimeoutMillis() == newTimeoutMillis);\n    \n    cluster.shutdown();\n  }\n']",Start;tests;in;Timeout;ILLIS;Keys;new;emphral;Config;are,1.1641532182693481e-09;1.0477378964424133e-09;5.820766091346741e-10;5.093170329928398e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.001776687800884e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.435721397399902, -5.054959774017334, -5.400498867034912, -6.451950550079346, -5.456514835357666, -0.021321605890989304]",0.9789040684700012
1,"['  @Test\n  public void testContains() throws Exception {\n    DatanodeDescriptor nodeNotInMap = \n      DFSTestUtil.getDatanodeDescriptor(""8.8.8.8"", ""/d2/r4"");\n    for (int i=0; i < dataNodes.length; i++) {\n      assertTrue(cluster.contains(dataNodes[i]));\n    }\n    assertFalse(cluster.contains(nodeNotInMap));\n  }\n']",Datanode;Descriptor;Descriptor;DFSTest;In;node;Datanode;get;cluster;Util,2.3865140974521637e-09;1.6443664208054543e-09;1.2223608791828156e-09;8.294591680169106e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10;2.1100277081131935e-10;1.7462298274040222e-10,5,5,"[-5.518302917480469, -5.010704040527344, -5.44936990737915, -6.521161079406738, -5.462626934051514, -0.020909355953335762]",0.9793077111244202
1,"['  @Test\n  public void testNumOfChildren() throws Exception {\n    assertEquals(cluster.getNumOfLeaves(), dataNodes.length);\n  }\n']",cluster;odes;Children;data;length;Num;get;Exception;Num;Equals,1.280568540096283e-09;9.89530235528946e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;-2.9103830456733704e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.0477378964424133e-09,5,5,"[-5.543020725250244, -4.938021183013916, -5.363958835601807, -6.494153022766113, -5.4365363121032715, -0.02187003754079342]",0.9783673882484436
1,"['  @Test\n  public void testCreateInvalidTopology() throws Exception {\n    NetworkTopology invalCluster =\n        NetworkTopology.getInstance(new Configuration());\n    DatanodeDescriptor invalDataNodes[] = new DatanodeDescriptor[] {\n        DFSTestUtil.getDatanodeDescriptor(""1.1.1.1"", ""/d1/r1""),\n        DFSTestUtil.getDatanodeDescriptor(""2.2.2.2"", ""/d1/r1""),\n        DFSTestUtil.getDatanodeDescriptor(""3.3.3.3"", ""/d1"")\n    };\n    invalCluster.add(invalDataNodes[0]);\n    invalCluster.add(invalDataNodes[1]);\n    try {\n      invalCluster.add(invalDataNodes[2]);\n      fail(""expected InvalidTopologyException"");\n    } catch (NetworkTopology.InvalidTopologyException e) {\n      assertTrue(e.getMessage().startsWith(""Failed to add ""));\n      assertTrue(e.getMessage().contains(\n          ""You cannot have a rack and a non-rack node at the same "" +\n          ""level of the network topology.""));\n    }\n  }\n']",Datanode;Datanode;Datanode;new;Descriptor;inval;Invalid;Topology;Datanode;Topology,3.958120942115784e-09;1.979060471057892e-09;1.367880031466484e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;7.712515071034431e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.475747108459473, -5.034850120544434, -5.4161882400512695, -6.467984199523926, -5.46512508392334, -0.021144447848200798]",0.9790775179862976
1,"['  @Test\n  public void testRacks() throws Exception {\n    assertEquals(cluster.getNumOfRacks(), 6);\n    assertTrue(cluster.isOnSameRack(dataNodes[0], dataNodes[1]));\n    assertFalse(cluster.isOnSameRack(dataNodes[1], dataNodes[2]));\n    assertTrue(cluster.isOnSameRack(dataNodes[2], dataNodes[3]));\n    assertTrue(cluster.isOnSameRack(dataNodes[3], dataNodes[4]));\n    assertFalse(cluster.isOnSameRack(dataNodes[4], dataNodes[5]));\n    assertTrue(cluster.isOnSameRack(dataNodes[5], dataNodes[6]));\n  }\n']",cluster;cluster;Same;acks;Same;True;Same;data;odes;data,7.712515071034431e-10;7.421476766467094e-10;6.111804395914078e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.469630718231201, -5.075526237487793, -5.454845428466797, -6.493991374969482, -5.392856597900391, -0.02101675420999527]",0.9792024493217468
1,"[""  @Test\n  public void testGetDistance() throws Exception {\n    assertEquals(cluster.getDistance(dataNodes[0], dataNodes[0]), 0);\n    assertEquals(cluster.getDistance(dataNodes[0], dataNodes[1]), 2);\n    assertEquals(cluster.getDistance(dataNodes[0], dataNodes[3]), 4);\n    assertEquals(cluster.getDistance(dataNodes[0], dataNodes[6]), 6);\n    // verify the distance is zero as long as two nodes have the same path.\n    // They don't need to refer to the same object.\n    NodeBase node1 = new NodeBase(dataNodes[0].getHostName(),\n        dataNodes[0].getNetworkLocation());\n    NodeBase node2 = new NodeBase(dataNodes[0].getHostName(),\n        dataNodes[0].getNetworkLocation());\n    assertEquals(0, cluster.getDistance(node1, node2));\n    // verify the distance can be computed by path.\n    // They don't need to refer to the same object or parents.\n    NodeBase node3 = new NodeBase(dataNodes[3].getHostName(),\n        dataNodes[3].getNetworkLocation());\n    NodeBase node4 = new NodeBase(dataNodes[6].getHostName(),\n        dataNodes[6].getNetworkLocation());\n    assertEquals(0, NetworkTopology.getDistanceByPath(node1, node2));\n    assertEquals(4, NetworkTopology.getDistanceByPath(node2, node3));\n    assertEquals(6, NetworkTopology.getDistanceByPath(node2, node4));\n  }\n""]",cluster;parents;Equals;Distance;Distance;Node;two;refer;nodes;Get,1.0186340659856796e-09;6.111804395914078e-10;5.384208634495735e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.429190635681152, -5.116067886352539, -5.445098400115967, -6.463972568511963, -5.407714366912842, -0.020962240174412727]",0.9792559146881104
1,"['  @Test\n  public void testSortByDistance() throws Exception {\n    DatanodeDescriptor[] testNodes = new DatanodeDescriptor[3];\n    \n    // array contains both local node & local rack node\n    testNodes[0] = dataNodes[1];\n    testNodes[1] = dataNodes[2];\n    testNodes[2] = dataNodes[0];\n    cluster.setRandomSeed(0xDEADBEEF);\n    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);\n    assertTrue(testNodes[0] == dataNodes[0]);\n    assertTrue(testNodes[1] == dataNodes[1]);\n    assertTrue(testNodes[2] == dataNodes[2]);\n\n    // array contains both local node & local rack node & decommissioned node\n    DatanodeDescriptor[] dtestNodes = new DatanodeDescriptor[5];\n    dtestNodes[0] = dataNodes[8];\n    dtestNodes[1] = dataNodes[12];\n    dtestNodes[2] = dataNodes[11];\n    dtestNodes[3] = dataNodes[9];\n    dtestNodes[4] = dataNodes[10];\n    cluster.setRandomSeed(0xDEADBEEF);\n    cluster.sortByDistance(dataNodes[8], dtestNodes, dtestNodes.length - 2);\n    assertTrue(dtestNodes[0] == dataNodes[8]);\n    assertTrue(dtestNodes[1] == dataNodes[11]);\n    assertTrue(dtestNodes[2] == dataNodes[12]);\n    assertTrue(dtestNodes[3] == dataNodes[9]);\n    assertTrue(dtestNodes[4] == dataNodes[10]);\n\n    // array contains local node\n    testNodes[0] = dataNodes[1];\n    testNodes[1] = dataNodes[3];\n    testNodes[2] = dataNodes[0];\n    cluster.setRandomSeed(0xDEADBEEF);\n    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);\n    assertTrue(testNodes[0] == dataNodes[0]);\n    assertTrue(testNodes[1] == dataNodes[1]);\n    assertTrue(testNodes[2] == dataNodes[3]);\n\n    // array contains local rack node\n    testNodes[0] = dataNodes[5];\n    testNodes[1] = dataNodes[3];\n    testNodes[2] = dataNodes[1];\n    cluster.setRandomSeed(0xDEADBEEF);\n    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);\n    assertTrue(testNodes[0] == dataNodes[1]);\n    assertTrue(testNodes[1] == dataNodes[3]);\n    assertTrue(testNodes[2] == dataNodes[5]);\n\n    // array contains local rack node which happens to be in position 0\n    testNodes[0] = dataNodes[1];\n    testNodes[1] = dataNodes[5];\n    testNodes[2] = dataNodes[3];\n    cluster.setRandomSeed(0xDEADBEEF);\n    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);\n    assertTrue(testNodes[0] == dataNodes[1]);\n    assertTrue(testNodes[1] == dataNodes[3]);\n    assertTrue(testNodes[2] == dataNodes[5]);\n\n    // Same as previous, but with a different random seed to test randomization\n    testNodes[0] = dataNodes[1];\n    testNodes[1] = dataNodes[5];\n    testNodes[2] = dataNodes[3];\n    cluster.setRandomSeed(0xDEAD);\n    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);\n    assertTrue(testNodes[0] == dataNodes[1]);\n    assertTrue(testNodes[1] == dataNodes[3]);\n    assertTrue(testNodes[2] == dataNodes[5]);\n\n    // Array of just rack-local nodes\n    // Expect a random first node\n    DatanodeDescriptor first = null;\n    boolean foundRandom = false;\n    for (int i=5; i<=7; i++) {\n      testNodes[0] = dataNodes[5];\n      testNodes[1] = dataNodes[6];\n      testNodes[2] = dataNodes[7];\n      cluster.sortByDistance(dataNodes[i], testNodes, testNodes.length);\n      if (first == null) {\n        first = testNodes[0];\n      } else {\n        if (first != testNodes[0]) {\n          foundRandom = true;\n          break;\n        }\n      }\n    }\n    assertTrue(""Expected to find a different first location"", foundRandom);\n\n    // Array of just remote nodes\n    // Expect random first node\n    first = null;\n    for (int i = 1; i <= 4; i++) {\n      testNodes[0] = dataNodes[13];\n      testNodes[1] = dataNodes[14];\n      testNodes[2] = dataNodes[15];\n      cluster.sortByDistance(dataNodes[i], testNodes, testNodes.length);\n      if (first == null) {\n        first = testNodes[0];\n      } else {\n        if (first != testNodes[0]) {\n          foundRandom = true;\n          break;\n        }\n      }\n    }\n    assertTrue(""Expected to find a different first location"", foundRandom);\n\n    //Reader is not a datanode, but is in one of the datanode\'s rack.\n    testNodes[0] = dataNodes[0];\n    testNodes[1] = dataNodes[5];\n    testNodes[2] = dataNodes[8];\n    Node rackClient = new NodeBase(""/d3/r1/25.25.25"");\n    cluster.setRandomSeed(0xDEADBEEF);\n    cluster.sortByDistance(rackClient, testNodes, testNodes.length);\n    assertTrue(testNodes[0] == dataNodes[8]);\n    assertTrue(testNodes[1] == dataNodes[5]);\n    assertTrue(testNodes[2] == dataNodes[0]);\n\n    //Reader is not a datanode , but is in one of the datanode\'s data center.\n    testNodes[0] = dataNodes[8];\n    testNodes[1] = dataNodes[5];\n    testNodes[2] = dataNodes[0];\n    Node dcClient = new NodeBase(""/d1/r2/25.25.25"");\n    cluster.setRandomSeed(0xDEADBEEF);\n    cluster.sortByDistance(dcClient, testNodes, testNodes.length);\n    assertTrue(testNodes[0] == dataNodes[0]);\n    assertTrue(testNodes[1] == dataNodes[5]);\n    assertTrue(testNodes[2] == dataNodes[8]);\n\n  }\n']",Distance;odes;sort;Datanode;rack;Datanode;By;Distance;Descriptor;eed,2.7939677238464355e-09;1.775333657860756e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10,5,5,"[-5.402856349945068, -5.061513423919678, -5.3810038566589355, -6.41920804977417, -5.435414791107178, -0.021665211766958237]",0.9785677790641785
1,"['  @Test\n  public void testRemove() throws Exception {\n    for(int i=0; i<dataNodes.length; i++) {\n      cluster.remove(dataNodes[i]);\n    }\n    for(int i=0; i<dataNodes.length; i++) {\n      assertFalse(cluster.contains(dataNodes[i]));\n    }\n    assertEquals(0, cluster.getNumOfLeaves());\n    assertEquals(0, cluster.clusterMap.getChildren().size());\n    for(int i=0; i<dataNodes.length; i++) {\n      cluster.add(dataNodes[i]);\n    }\n  }\n']",data;Exception;data;Children;False;Map;data;add;size;Remove,8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.675246939063072e-10;5.529727786779404e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10,5,5,"[-5.505073070526123, -5.053843975067139, -5.463659763336182, -6.522197246551514, -5.448049545288086, -0.02067631110548973]",0.9795359969139099
1,"['  @Test\n  public void testChooseRandomExcludedNode() {\n    String scope = ""~"" + NodeBase.getPath(dataNodes[0]);\n    Map<Node, Integer> frequency = pickNodesAtRandom(100, scope, null);\n\n    for (Node key : dataNodes) {\n      // all nodes except the first should be more than zero\n      assertTrue(frequency.get(key) > 0 || key == dataNodes[0]);\n    }\n  }\n']",Random;scope;frequency;odes;scope;than;should;Node;frequency;get,2.0954757928848267e-09;1.0477378964424133e-09;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.498950004577637, -5.017523765563965, -5.43523645401001, -6.511336326599121, -5.475337982177734, -0.02096574194729328]",0.9792525172233582
1,"['  @Test\n  public void testChooseRandomExcludedRack() {\n    Map<Node, Integer> frequency = pickNodesAtRandom(100, ""~"" + ""/d2"", null);\n    // all the nodes on the second rack should be zero\n    for (int j = 0; j < dataNodes.length; j++) {\n      int freq = frequency.get(dataNodes[j]);\n      if (dataNodes[j].getNetworkLocation().startsWith(""/d2"")) {\n        assertEquals(0, freq);\n      } else {\n        assertTrue(freq > 0);\n      }\n    }\n  }\n']",Network;rack;frequency;pick;fre;frequency;fre;data;ack;if,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.496478080749512, -4.987788677215576, -5.36775016784668, -6.43851900100708, -5.462719440460205, -0.021660195663571358]",0.9785727262496948
1,"['  @Test\n  public void testChooseRandomExcludedNodeList() {\n    String scope = ""~"" + NodeBase.getPath(dataNodes[0]);\n    Set<Node> excludedNodes = new HashSet<>();\n    excludedNodes.add(dataNodes[3]);\n    excludedNodes.add(dataNodes[5]);\n    excludedNodes.add(dataNodes[7]);\n    excludedNodes.add(dataNodes[9]);\n    excludedNodes.add(dataNodes[13]);\n    excludedNodes.add(dataNodes[18]);\n    Map<Node, Integer> frequency = pickNodesAtRandom(100, scope, excludedNodes);\n\n    assertEquals(""dn[3] should be excluded"", 0,\n        frequency.get(dataNodes[3]).intValue());\n    assertEquals(""dn[5] should be exclude18d"", 0,\n        frequency.get(dataNodes[5]).intValue());\n    assertEquals(""dn[7] should be excluded"", 0,\n        frequency.get(dataNodes[7]).intValue());\n    assertEquals(""dn[9] should be excluded"", 0,\n        frequency.get(dataNodes[9]).intValue());\n    assertEquals(""dn[13] should be excluded"", 0,\n        frequency.get(dataNodes[13]).intValue());\n    assertEquals(""dn[18] should be excluded"", 0,\n        frequency.get(dataNodes[18]).intValue());\n    for (Node key : dataNodes) {\n      if (excludedNodes.contains(key)) {\n        continue;\n      }\n      // all nodes except the first should be more than zero\n      assertTrue(frequency.get(key) > 0 || key == dataNodes[0]);\n    }\n  }\n']",Node;more;List;Node;except;new;Random;Random;frequency;scope,1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.408629894256592, -5.038334369659424, -5.382113933563232, -6.4280781745910645, -5.439468860626221, -0.021752700209617615]",0.9784823060035706
1,"['  @Test\n  public void testChooseRandomExcludeAllNodes() {\n    String scope = ""~"" + NodeBase.getPath(dataNodes[0]);\n    Set<Node> excludedNodes = new HashSet<>();\n    for (int i = 0; i < dataNodes.length; i++) {\n      excludedNodes.add(dataNodes[i]);\n    }\n    Map<Node, Integer> frequency = pickNodesAtRandom(100, scope, excludedNodes);\n    for (Node key : dataNodes) {\n      // all nodes except the first should be more than zero\n      assertTrue(frequency.get(key) == 0);\n    }\n  }\n']",frequency;key;True;length;Random;except;excluded;pick;scope;Set,2.3283064365386963e-09;2.0954757928848267e-09;1.979060471057892e-09;1.3969838619232178e-09;1.280568540096283e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.499354839324951, -4.965155124664307, -5.377025127410889, -6.448941230773926, -5.47829532623291, -0.021679794415831566]",0.9785535335540771
1,"['  @Test(timeout=180000)\n  public void testInvalidNetworkTopologiesNotCachedInHdfs() throws Exception {\n    // start a cluster\n    Configuration conf = new HdfsConfiguration();\n    MiniDFSCluster cluster = null;\n    try {\n      // bad rack topology\n      String racks[] = { ""/a/b"", ""/c"" };\n      String hosts[] = { ""foo1.example.com"", ""foo2.example.com"" };\n      cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).\n          racks(racks).hosts(hosts).build();\n      cluster.waitActive();\n      \n      NamenodeProtocols nn = cluster.getNameNodeRpc();\n      Assert.assertNotNull(nn);\n      \n      // Wait for one DataNode to register.\n      // The other DataNode will not be able to register up because of the rack mismatch.\n      DatanodeInfo[] info;\n      while (true) {\n        info = nn.getDatanodeReport(DatanodeReportType.LIVE);\n        Assert.assertFalse(info.length == 2);\n        if (info.length == 1) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      // Set the network topology of the other node to the match the network\n      // topology of the node that came up.\n      int validIdx = info[0].getHostName().equals(hosts[0]) ? 0 : 1;\n      int invalidIdx = validIdx == 1 ? 0 : 1;\n      StaticMapping.addNodeToRack(hosts[invalidIdx], racks[validIdx]);\n      LOG.info(""datanode "" + validIdx + "" came up with network location "" + \n        info[0].getNetworkLocation());\n\n      // Restart the DN with the invalid topology and wait for it to register.\n      cluster.restartDataNode(invalidIdx);\n      Thread.sleep(5000);\n      while (true) {\n        info = nn.getDatanodeReport(DatanodeReportType.LIVE);\n        if (info.length == 2) {\n          break;\n        }\n        if (info.length == 0) {\n          LOG.info(""got no valid DNs"");\n        } else if (info.length == 1) {\n          LOG.info(""got one valid DN: "" + info[0].getHostName() +\n              "" (at "" + info[0].getNetworkLocation() + "")"");\n        }\n        Thread.sleep(1000);\n      }\n      Assert.assertEquals(info[0].getNetworkLocation(),\n                          info[1].getNetworkLocation());\n    } finally {\n      if (cluster != null) {\n        cluster.shutdown();\n      }\n    }\n  }\n']",invalid;timeout;Host;topology;Network;came;new;the;Invalid;Configuration,5.587935447692871e-09;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10,5,5,"[-5.4482502937316895, -4.980813980102539, -5.31512451171875, -6.393083572387695, -5.455801963806152, -0.022279908880591393]",0.9779664278030396
1,"['  @Test\n  public void testBackwardCompatibility() {\n    // Test 1 - old configuration key with decimal \n    // umask value should be handled when set using \n    // FSPermission.setUMask() API\n    FsPermission perm = new FsPermission((short)18);\n    Configuration conf = new Configuration();\n    FsPermission.setUMask(conf, perm);\n    assertEquals(18, FsPermission.getUMask(conf).toShort());\n\n    // Test 2 - new configuration key is handled\n    conf = new Configuration();\n    conf.set(FsPermission.UMASK_LABEL, ""022"");\n    assertEquals(18, FsPermission.getUMask(conf).toShort());\n\n    // Test 3 - equivalent valid umask\n    conf = new Configuration();\n    conf.set(FsPermission.UMASK_LABEL, ""0022"");\n    assertEquals(18, FsPermission.getUMask(conf).toShort());\n\n    // Test 4 - invalid umask\n    conf = new Configuration();\n    conf.set(FsPermission.UMASK_LABEL, ""1222"");\n    try {\n      FsPermission.getUMask(conf);\n      fail(""expect IllegalArgumentException happen"");\n    } catch (IllegalArgumentException e) {\n     //pass, exception successfully trigger\n    }\n\n    // Test 5 - invalid umask\n    conf = new Configuration();\n    conf.set(FsPermission.UMASK_LABEL, ""01222"");\n    try {\n      FsPermission.getUMask(conf);\n      fail(""expect IllegalArgumentException happen"");\n    } catch (IllegalArgumentException e) {\n     //pass, exception successfully trigger\n    }\n  }\n']",successfully;using;Backward;with;Short;valid;pass;when;umask;Configuration,1.1641532182693481e-09;1.1059455573558807e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.4266533851623535, -5.116450786590576, -5.444701671600342, -6.450567722320557, -5.402682304382324, -0.021017571911215782]",0.9792017340660095
1,"['  @Test\n  public void testCreate() throws Exception {\n    Configuration conf = new HdfsConfiguration();\n    conf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY, true);\n    conf.set(FsPermission.UMASK_LABEL, ""000"");\n    MiniDFSCluster cluster = null;\n    FileSystem fs = null;\n\n    try {\n      cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build();\n      cluster.waitActive();\n      fs = FileSystem.get(conf);\n      FsPermission rootPerm = checkPermission(fs, ""/"", null);\n      FsPermission inheritPerm = FsPermission.createImmutable(\n          (short)(rootPerm.toShort() | 0300));\n\n      FsPermission dirPerm = new FsPermission((short)0777);\n      fs.mkdirs(new Path(""/a1/a2/a3""), dirPerm);\n      checkPermission(fs, ""/a1"", dirPerm);\n      checkPermission(fs, ""/a1/a2"", dirPerm);\n      checkPermission(fs, ""/a1/a2/a3"", dirPerm);\n\n      dirPerm = new FsPermission((short)0123);\n      FsPermission permission = FsPermission.createImmutable(\n        (short)(dirPerm.toShort() | 0300));\n      fs.mkdirs(new Path(""/aa/1/aa/2/aa/3""), dirPerm);\n      checkPermission(fs, ""/aa/1"", permission);\n      checkPermission(fs, ""/aa/1/aa/2"", permission);\n      checkPermission(fs, ""/aa/1/aa/2/aa/3"", dirPerm);\n\n      FsPermission filePerm = new FsPermission((short)0444);\n      Path p = new Path(""/b1/b2/b3.txt"");\n      FSDataOutputStream out = fs.create(p, filePerm,\n          true, conf.getInt(CommonConfigurationKeys.IO_FILE_BUFFER_SIZE_KEY, 4096),\n          fs.getDefaultReplication(p), fs.getDefaultBlockSize(p), null);\n      out.write(123);\n      out.close();\n      checkPermission(fs, ""/b1"", inheritPerm);\n      checkPermission(fs, ""/b1/b2"", inheritPerm);\n      checkPermission(fs, ""/b1/b2/b3.txt"", filePerm);\n      \n      conf.set(FsPermission.UMASK_LABEL, ""022"");\n      permission = \n        FsPermission.createImmutable((short)0666);\n      FileSystem.mkdirs(fs, new Path(""/c1""), new FsPermission(permission));\n      FileSystem.create(fs, new Path(""/c1/c2.txt""),\n          new FsPermission(permission));\n      checkPermission(fs, ""/c1"", permission);\n      checkPermission(fs, ""/c1/c2.txt"", permission);\n    } finally {\n      try {\n        if(fs != null) fs.close();\n      } catch(Exception e) {\n        LOG.error(StringUtils.stringifyException(e));\n      }\n      try {\n        if(cluster != null) cluster.shutdown();\n      } catch(Exception e) {\n        LOG.error(StringUtils.stringifyException(e));\n      }\n    }\n  }\n']",mkdir;LABEL;fs;mkdir;Path;new;check;set;Data;check,2.270098775625229e-09;8.731149137020111e-10;8.731149137020111e-10;5.529727786779404e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.472066879272461, -4.905572891235352, -5.3660407066345215, -6.44124698638916, -5.511090278625488, -0.02216017059981823]",0.9780835509300232
1,"['  @Test\n  public void testFilePermission() throws Exception {\n    final Configuration conf = new HdfsConfiguration();\n    conf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY, true);\n    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build();\n    cluster.waitActive();\n\n    try {\n      nnfs = FileSystem.get(conf);\n      // test permissions on files that do not exist\n      assertFalse(nnfs.exists(CHILD_FILE1));\n      try {\n        nnfs.setPermission(CHILD_FILE1, new FsPermission((short)0777));\n        assertTrue(false);\n      }\n      catch(java.io.FileNotFoundException e) {\n        LOG.info(""GOOD: got "" + e);\n      }\n      \n      // make sure nn can take user specified permission (with default fs\n      // permission umask applied)\n      FSDataOutputStream out = nnfs.create(CHILD_FILE1, new FsPermission(\n          (short) 0777), true, 1024, (short) 1, 1024, null);\n      FileStatus status = nnfs.getFileStatus(CHILD_FILE1);\n      // FS_PERMISSIONS_UMASK_DEFAULT is 0022\n      assertTrue(status.getPermission().toString().equals(""rwxr-xr-x""));\n      nnfs.delete(CHILD_FILE1, false);\n      \n      // following dir/file creations are legal\n      nnfs.mkdirs(CHILD_DIR1);\n      status = nnfs.getFileStatus(CHILD_DIR1);\n      assertThat(""Expect 755 = 777 (default dir) - 022 (default umask)"",\n          status.getPermission().toString(), is(""rwxr-xr-x""));\n      out = nnfs.create(CHILD_FILE1);\n      status = nnfs.getFileStatus(CHILD_FILE1);\n      assertTrue(status.getPermission().toString().equals(""rw-r--r--""));\n      byte data[] = new byte[FILE_LEN];\n      RAN.nextBytes(data);\n      out.write(data);\n      out.close();\n      nnfs.setPermission(CHILD_FILE1, new FsPermission(""700""));\n      status = nnfs.getFileStatus(CHILD_FILE1);\n      assertTrue(status.getPermission().toString().equals(""rwx------""));\n\n      // mkdirs with null permission\n      nnfs.mkdirs(CHILD_DIR3, null);\n      status = nnfs.getFileStatus(CHILD_DIR3);\n      assertThat(""Expect 755 = 777 (default dir) - 022 (default umask)"",\n          status.getPermission().toString(), is(""rwxr-xr-x""));\n\n      // following read is legal\n      byte dataIn[] = new byte[FILE_LEN];\n      FSDataInputStream fin = nnfs.open(CHILD_FILE1);\n      int bytesRead = fin.read(dataIn);\n      assertTrue(bytesRead == FILE_LEN);\n      for(int i=0; i<FILE_LEN; i++) {\n        assertEquals(data[i], dataIn[i]);\n      }\n\n      // test execution bit support for files\n      nnfs.setPermission(CHILD_FILE1, new FsPermission(""755""));\n      status = nnfs.getFileStatus(CHILD_FILE1);\n      assertTrue(status.getPermission().toString().equals(""rwxr-xr-x""));\n      nnfs.setPermission(CHILD_FILE1, new FsPermission(""744""));\n      status = nnfs.getFileStatus(CHILD_FILE1);\n      assertTrue(status.getPermission().toString().equals(""rwxr--r--""));\n      nnfs.setPermission(CHILD_FILE1, new FsPermission(""700""));\n      \n      ////////////////////////////////////////////////////////////////\n      // test illegal file/dir creation\n      UserGroupInformation userGroupInfo = \n        UserGroupInformation.createUserForTesting(USER_NAME, GROUP_NAMES );\n      \n      userfs = DFSTestUtil.getFileSystemAs(userGroupInfo, conf);\n\n      // make sure mkdir of a existing directory that is not owned by \n      // this user does not throw an exception.\n      userfs.mkdirs(CHILD_DIR1);\n      \n      // illegal mkdir\n      assertTrue(!canMkdirs(userfs, CHILD_DIR2));\n\n      // illegal file creation\n      assertTrue(!canCreate(userfs, CHILD_FILE2));\n\n      // illegal file open\n      assertTrue(!canOpen(userfs, CHILD_FILE1));\n\n      nnfs.setPermission(ROOT_PATH, new FsPermission((short)0755));\n      nnfs.setPermission(CHILD_DIR1, new FsPermission(""777""));\n      nnfs.setPermission(new Path(""/""), new FsPermission((short)0777));\n      final Path RENAME_PATH = new Path(""/foo/bar"");\n      userfs.mkdirs(RENAME_PATH);\n      assertTrue(canRename(userfs, RENAME_PATH, CHILD_DIR1));\n      // test permissions on files that do not exist\n      assertFalse(userfs.exists(CHILD_FILE3));\n      try {\n        userfs.setPermission(CHILD_FILE3, new FsPermission((short) 0777));\n        fail(""setPermission should fail for non-exist file"");\n      } catch (java.io.FileNotFoundException ignored) {\n      }\n\n      // Make sure any user can create file in root.\n      nnfs.setPermission(ROOT_PATH, new FsPermission(""777""));\n\n      testSuperCanChangeOwnerGroup();\n      testNonSuperCanChangeToOwnGroup();\n      testNonSuperCannotChangeToOtherGroup();\n      testNonSuperCannotChangeGroupForOtherFile();\n      testNonSuperCannotChangeGroupForNonExistentFile();\n      testNonSuperCannotChangeOwner();\n      testNonSuperCannotChangeOwnerForOtherFile();\n      testNonSuperCannotChangeOwnerForNonExistentFile();\n    } finally {\n      cluster.shutdown();\n    }\n  }\n']",Output;Permission;Exception;new;File;Builder;out;DF;delete;true,1.862645149230957e-09;1.4115357771515846e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.43018102645874, -5.055137634277344, -5.399962425231934, -6.446051597595215, -5.445143699645996, -0.021407023072242737]",0.9788205027580261
1,"['  @Test(timeout = 5000)\n  public void testDelete() throws Exception {\n    fs.setPermission(linkParent, new FsPermission((short) 0555));\n    doDeleteLinkParentNotWritable();\n\n    fs.setPermission(linkParent, new FsPermission((short) 0777));\n    fs.setPermission(targetParent, new FsPermission((short) 0555));\n    fs.setPermission(target, new FsPermission((short) 0555));\n    doDeleteTargetParentAndTargetNotWritable();\n  }\n']",Writable;Delete;Exception;fs;fs;Target;short;fs;Not;short,1.3387762010097504e-09;1.1641532182693481e-09;9.604264050722122e-10;9.313225746154785e-10;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.55069637298584, -4.945621967315674, -5.4198079109191895, -6.491085529327393, -5.523052215576172, -0.02116008847951889]",0.9790621995925903
1,"['  @Test\n  public void testAclDelete() throws Exception {\n    fs.setAcl(linkParent, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    doDeleteLinkParentNotWritable();\n\n    fs.setAcl(linkParent, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    fs.setAcl(targetParent, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    fs.setAcl(target, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    doDeleteTargetParentAndTargetNotWritable();\n  }\n']",Delete;target;Arrays;READ;fs;List;Entry;Delete;USER;Arrays,2.3283064365386963e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;5.966285243630409e-10,5,5,"[-5.463478088378906, -4.938902378082275, -5.357968807220459, -6.404474258422852, -5.462416648864746, -0.022254960611462593]",0.9779908657073975
1,"['  @Test(timeout = 5000)\n  public void testReadWhenTargetNotReadable() throws Exception {\n    fs.setPermission(target, new FsPermission((short) 0000));\n    doReadTargetNotReadable();\n  }\n']",Permission;Read;short;target;Readable;Not;When;timeout;Exception;Target,1.5133991837501526e-09;9.89530235528946e-10;8.149072527885437e-10;5.820766091346741e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;8.731149137020111e-11,5,5,"[-5.582126617431641, -4.8424153327941895, -5.385561466217041, -6.505634307861328, -5.514764308929443, -0.02199692279100418]",0.978243350982666
1,"['  @Test\n  public void testAclReadTargetNotReadable() throws Exception {\n    fs.setAcl(target, Arrays.asList(\n      aclEntry(ACCESS, USER, READ_WRITE),\n      aclEntry(ACCESS, USER, user.getUserName(), NONE),\n      aclEntry(ACCESS, GROUP, READ),\n      aclEntry(ACCESS, OTHER, READ)));\n    doReadTargetNotReadable();\n  }\n']",GROUP;Readable;Exception;cl;Read;Not;Not;Entry;fs;Target,1.862645149230957e-09;9.167706593871117e-10;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.53798770904541, -5.018475532531738, -5.4268059730529785, -6.502413272857666, -5.4804768562316895, -0.02082868479192257]",0.9793867468833923
1,"['  @Test(timeout = 5000)\n  public void testFileStatus() throws Exception {\n    fs.setPermission(target, new FsPermission((short) 0000));\n    doGetFileLinkStatusTargetNotReadable();\n  }\n']",timeout;Exception;target;short;File;Target;Status;set;do;Readable,9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.1641532182693481e-10;1.0186340659856796e-10,5,5,"[-5.577568531036377, -4.847113609313965, -5.402953147888184, -6.512707233428955, -5.519489288330078, -0.02186572179198265]",0.9783716201782227
1,"['  @Test\n  public void testAclGetFileLinkStatusTargetNotReadable() throws Exception {\n    fs.setAcl(target, Arrays.asList(\n      aclEntry(ACCESS, USER, READ_WRITE),\n      aclEntry(ACCESS, USER, user.getUserName(), NONE),\n      aclEntry(ACCESS, GROUP, READ),\n      aclEntry(ACCESS, OTHER, READ)));\n    doGetFileLinkStatusTargetNotReadable();\n  }\n']",cl;do;Get;Exception;Link;Link;OTHER;Name;File;set,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.585629984736443e-10;7.057678885757923e-10;6.984919309616089e-10;6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.531790733337402, -4.974780559539795, -5.3583855628967285, -6.443878650665283, -5.470190525054932, -0.021609917283058167]",0.9786219000816345
1,"['  @Test(timeout = 5000)\n  public void testRenameLinkTargetNotWritableFC() throws Exception {\n    fs.setPermission(target, new FsPermission((short) 0555));\n    fs.setPermission(targetParent, new FsPermission((short) 0555));\n    doRenameLinkTargetNotWritableFC();\n  }\n']",timeout;new;Parent;FC;fs;FC;Link;Permission;new;target,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.568549633026123, -4.9038190841674805, -5.423652172088623, -6.515036106109619, -5.508004665374756, -0.02140784077346325]",0.9788195490837097
1,"['  @Test\n  public void testAclRenameTargetNotWritableFC() throws Exception {\n    fs.setAcl(target, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    fs.setAcl(targetParent, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    doRenameLinkTargetNotWritableFC();\n  }\n']",EXECUTE;ename;Target;Writable;List;FC;ename;cl;Not;do,2.7939677238464355e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10,5,5,"[-5.481113433837891, -5.079119682312012, -5.4555792808532715, -6.491532802581787, -5.452157974243164, -0.020678063854575157]",0.9795342683792114
1,"['  @Test(timeout = 5000)\n  public void testRenameSrcNotWritableFC() throws Exception {\n    fs.setPermission(linkParent, new FsPermission((short) 0555));\n    doRenameSrcNotWritableFC();\n  }\n']",Permission;Permission;FC;Not;Parent;ename;Writable;Not;timeout;ename,2.0372681319713593e-09;9.604264050722122e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.5766401290893555, -4.847705841064453, -5.409354209899902, -6.524264335632324, -5.518456935882568, -0.02182198315858841]",0.9784144163131714
1,"['  @Test\n  public void testAclRenameSrcNotWritableFC() throws Exception {\n    fs.setAcl(linkParent, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    doRenameSrcNotWritableFC();\n  }\n']",FC;USER;set;ALL;link;cl;cl;OTHER;cl;Exception,3.259629011154175e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.53256368637085, -5.027932167053223, -5.438320636749268, -6.505030155181885, -5.467379093170166, -0.02078770287334919]",0.9794268608093262
1,"['  @Test(timeout = 5000)\n  public void testRenameLinkTargetNotWritableFS() throws Exception {\n    fs.setPermission(target, new FsPermission((short) 0555));\n    fs.setPermission(targetParent, new FsPermission((short) 0555));\n    doRenameLinkTargetNotWritableFS();\n  }\n']",FS;Permission;Permission;timeout;FS;Target;short;Exception;Not;target,5.820766091346741e-10;5.675246939063072e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.581995964050293, -4.89995002746582, -5.422626972198486, -6.510043621063232, -5.52011775970459, -0.021347511559724808]",0.9788787364959717
1,"['  @Test\n  public void testAclRenameTargetNotWritableFS() throws Exception {\n    fs.setAcl(target, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    fs.setAcl(targetParent, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    doRenameLinkTargetNotWritableFS();\n  }\n']",EXECUTE;List;READ;ename;User;EXECUTE;ename;Arrays;ALL;do,1.775333657860756e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.485889911651611, -5.063538074493408, -5.440454959869385, -6.483799934387207, -5.461966037750244, -0.020793424919247627]",0.9794212579727173
1,"['  @Test(timeout = 5000)\n  public void testRenameSrcNotWritableFS() throws Exception {\n    fs.setPermission(linkParent, new FsPermission((short) 0555));\n    doRenameSrcNotWritableFS();\n  }\n']",timeout;Exception;rc;set;Not;do;fs;Parent;FS;Permission,6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;2.9103830456733704e-11,5,5,"[-5.590749263763428, -4.84708309173584, -5.412573337554932, -6.521749973297119, -5.532072067260742, -0.021706273779273033]",0.9785274863243103
1,"['  @Test\n  public void testAclRenameSrcNotWritableFS() throws Exception {\n    fs.setAcl(linkParent, Arrays.asList(\n      aclEntry(ACCESS, USER, ALL),\n      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),\n      aclEntry(ACCESS, GROUP, ALL),\n      aclEntry(ACCESS, OTHER, ALL)));\n    doRenameSrcNotWritableFS();\n  }\n']",FS;cl;fs;Parent;rc;ALL;ACCESS;Entry;READ;Writable,1.7462298274040222e-09;1.280568540096283e-09;1.1641532182693481e-09;9.022187441587448e-10;6.402842700481415e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.538364410400391, -5.019538879394531, -5.433947563171387, -6.501471996307373, -5.480367660522461, -0.020790038630366325]",0.9794245958328247
1,"['  @Test\n  public void testAccess() throws Exception {\n    fs.setPermission(target, new FsPermission((short) 0002));\n    fs.setAcl(target, Arrays.asList(\n        aclEntry(ACCESS, USER, ALL),\n        aclEntry(ACCESS, GROUP, NONE),\n        aclEntry(ACCESS, USER, user.getShortUserName(), WRITE),\n        aclEntry(ACCESS, OTHER, WRITE)));\n    FileContext myfc = user.doAs(new PrivilegedExceptionAction<FileContext>() {\n      @Override\n      public FileContext run() throws IOException {\n        return FileContext.getFileContext(conf);\n      }\n']",fs;Permission;cl;conf;cl;set;USER;Exception;do;Entry,1.862645149230957e-09;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.489164352416992, -5.029792308807373, -5.453816890716553, -6.502053737640381, -5.482518196105957, -0.020825881510972977]",0.9793893694877625
1,"['  @Test\n  public void testGroupMappingRefresh() throws Exception {\n    DFSAdmin admin = new DFSAdmin(config);\n    String [] args =  new String[]{""-refreshUserToGroupsMappings""};\n    Groups groups = Groups.getUserToGroupsMappingService(config);\n    String user = UserGroupInformation.getCurrentUser().getUserName();\n    System.out.println(""first attempt:"");\n    List<String> g1 = groups.getGroups(user);\n    String [] str_groups = new String [g1.size()];\n    g1.toArray(str_groups);\n    System.out.println(Arrays.toString(str_groups));\n    \n    System.out.println(""second attempt, should be same:"");\n    List<String> g2 = groups.getGroups(user);\n    g2.toArray(str_groups);\n    System.out.println(Arrays.toString(str_groups));\n    for(int i=0; i<g2.size(); i++) {\n      assertEquals(""Should be same group "", g1.get(i), g2.get(i));\n    }\n    admin.run(args);\n    System.out.println(""third attempt(after refresh command), should be different:"");\n    List<String> g3 = groups.getGroups(user);\n    g3.toArray(str_groups);\n    System.out.println(Arrays.toString(str_groups));\n    for(int i=0; i<g3.size(); i++) {\n      assertFalse(""Should be different group: "" + g1.get(i) + "" and "" + g3.get(i), \n          g1.get(i).equals(g3.get(i)));\n    }\n    \n    // test time out\n    Thread.sleep(groupRefreshTimeoutSec*1100);\n    System.out.println(""fourth attempt(after timeout), should be different:"");\n    List<String> g4 = groups.getGroups(user);\n    g4.toArray(str_groups);\n    System.out.println(Arrays.toString(str_groups));\n    for(int i=0; i<g4.size(); i++) {\n      assertFalse(""Should be different group "", g3.get(i).equals(g4.get(i)));\n    }\n  }\n']",Group;str;False;refresh;run;Current;System;attempt;different;attempt,5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.4259772300720215, -5.049167156219482, -5.402517795562744, -6.43724250793457, -5.449415683746338, -0.021448679268360138]",0.9787797331809998
1,"['  @Test\n  public void testRefreshSuperUserGroupsConfiguration() throws Exception {\n    final String SUPER_USER = ""super_user"";\n    final List<String> groupNames1 = new ArrayList<>();\n    groupNames1.add(""gr1"");\n    groupNames1.add(""gr2"");\n    final List<String> groupNames2 = new ArrayList<>();\n    groupNames2.add(""gr3"");\n    groupNames2.add(""gr4"");\n\n    //keys in conf\n    String userKeyGroups = DefaultImpersonationProvider.getTestProvider().\n        getProxySuperuserGroupConfKey(SUPER_USER);\n    String userKeyHosts = DefaultImpersonationProvider.getTestProvider().\n        getProxySuperuserIpConfKey (SUPER_USER);\n    \n    config.set(userKeyGroups, ""gr3,gr4,gr5""); // superuser can proxy for this group\n    config.set(userKeyHosts,""127.0.0.1"");\n    ProxyUsers.refreshSuperUserGroupsConfiguration(config);\n    \n    UserGroupInformation ugi1 = mock(UserGroupInformation.class);\n    UserGroupInformation ugi2 = mock(UserGroupInformation.class);\n    UserGroupInformation suUgi = mock(UserGroupInformation.class);\n    when(ugi1.getRealUser()).thenReturn(suUgi);\n    when(ugi2.getRealUser()).thenReturn(suUgi);\n\n    when(suUgi.getShortUserName()).thenReturn(SUPER_USER); // super user\n    when(suUgi.getUserName()).thenReturn(SUPER_USER+""L""); // super user\n     \n    when(ugi1.getShortUserName()).thenReturn(""user1"");\n    when(ugi2.getShortUserName()).thenReturn(""user2"");\n    \n    when(ugi1.getUserName()).thenReturn(""userL1"");\n    when(ugi2.getUserName()).thenReturn(""userL2"");\n\n    // set groups for users\n    when(ugi1.getGroups()).thenReturn(groupNames1);\n    when(ugi2.getGroups()).thenReturn(groupNames2);\n\n\n    // check before\n    try {\n      ProxyUsers.authorize(ugi1, ""127.0.0.1"");\n      fail(""first auth for "" + ugi1.getShortUserName() + "" should\'ve failed "");\n    } catch (AuthorizationException e) {\n      // expected\n      System.err.println(""auth for "" + ugi1.getUserName() + "" failed"");\n    }\n    try {\n      ProxyUsers.authorize(ugi2, ""127.0.0.1"");\n      System.err.println(""auth for "" + ugi2.getUserName() + "" succeeded"");\n      // expected\n    } catch (AuthorizationException e) {\n      fail(""first auth for "" + ugi2.getShortUserName() + "" should\'ve succeeded: "" + e.getLocalizedMessage());\n    }\n    \n    // refresh will look at configuration on the server side\n    // add additional resource with the new value\n    // so the server side will pick it up\n    String rsrc = ""testGroupMappingRefresh_rsrc.xml"";\n    addNewConfigResource(rsrc, userKeyGroups, ""gr2"", userKeyHosts, ""127.0.0.1"");  \n    \n    DFSAdmin admin = new DFSAdmin(config);\n    String [] args = new String[]{""-refreshSuperUserGroupsConfiguration""};\n    admin.run(args);\n    \n    try {\n      ProxyUsers.authorize(ugi2, ""127.0.0.1"");\n      fail(""second auth for "" + ugi2.getShortUserName() + "" should\'ve failed "");\n    } catch (AuthorizationException e) {\n      // expected\n      System.err.println(""auth for "" + ugi2.getUserName() + "" failed"");\n    }\n    try {\n      ProxyUsers.authorize(ugi1, ""127.0.0.1"");\n      System.err.println(""auth for "" + ugi1.getUserName() + "" succeeded"");\n      // expected\n    } catch (AuthorizationException e) {\n      fail(""second auth for "" + ugi1.getShortUserName() + "" should\'ve succeeded: "" + e.getLocalizedMessage());\n    }\n    \n    \n  }\n']",Exception;user;SUPER;User;USER;Impersonation;Provider;mock;mock;super,8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.463193893432617, -4.972629547119141, -5.361640930175781, -6.418188095092773, -5.455826759338379, -0.0220013540238142]",0.9782388806343079
1,"['  @Test\n  public void testMkdirWithExistingDirClear() throws IOException {\n    testMkdirWithExistingDir(BLANK_TEST_UMASK, BLANK_PERMISSIONS);\n  }\n']",Dir;ISSIONS;Clear;Existing;Existing;UMAS;PER;BLANK;IOException;dir,8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.0745362639427185e-10;2.3283064365386963e-10;-3.4924596548080444e-10;-5.238689482212067e-10;-8.731149137020111e-10;-1.0477378964424133e-09,5,5,"[-5.596312522888184, -4.862480640411377, -5.408013343811035, -6.526058197021484, -5.510663032531738, -0.021664513275027275]",0.9785684943199158
1,"['  @Test\n  public void testMkdirWithExistingDirOpen() throws IOException {\n    testMkdirWithExistingDir(WIDE_OPEN_TEST_UMASK, WIDE_OPEN_PERMISSIONS);\n  }\n']",dir;PER;Existing;IDE;UMAS;Dir;OPEN;OPEN;dir;IDE,8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;0.0;-1.1641532182693481e-10;-3.4924596548080444e-10,5,5,"[-5.570069313049316, -4.878973484039307, -5.391058921813965, -6.519294738769531, -5.502170562744141, -0.021759815514087677]",0.9784752130508423
1,"['  @Test\n  public void testMkdirWithExistingDirMiddle() throws IOException {\n    testMkdirWithExistingDir(USER_GROUP_OPEN_TEST_UMASK,\n        USER_GROUP_OPEN_PERMISSIONS);\n  }\n']",OPEN;Existing;GROUP;Middle;dir;UMAS;USER;EST;Dir;Dir,1.7462298274040222e-09;1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;7.130438461899757e-10;6.402842700481415e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.568276405334473, -4.928232192993164, -5.407355308532715, -6.518072605133057, -5.488880157470703, -0.021375633776187897]",0.9788511991500854
1,"['  @Test\n  public void testMkdirRecursiveWithNonExistingDirClear() throws IOException {\n    // by default parent directories have -wx------ bits set\n    testMkdirRecursiveWithNonExistingDir(BLANK_TEST_UMASK, BLANK_PERMISSIONS, \n        PARENT_PERMS_FOR_BLANK_PERMISSIONS);\n  }\n']",PERMS;ISSIONS;BLANK;wx;Recursive;ISSIONS;PER;BLANK;Existing;Recursive,2.7939677238464355e-09;2.2118911147117615e-09;2.153683453798294e-09;1.3969838619232178e-09;1.280568540096283e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.550553798675537, -4.944330215454102, -5.420773029327393, -6.5139079093933105, -5.504382610321045, -0.021207589656114578]",0.9790157079696655
1,"['\t@Test public void testQualifiedNameConverter() throws Exception {\n\t\t\tpublic String getDelimiter() {\n\t\t\t\treturn ""!"";\n\t\t\t}\n']",get;Qualified;Exception;Converter;Name;return;Delimiter,2.2118911147117615e-09;1.3969838619232178e-09;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10;-9.313225746154785e-10;-1.6298145055770874e-09,5,5,"[-5.57094144821167, -5.01130485534668, -5.396127223968506, -6.5027995109558105, -5.49932336807251, -0.020806968212127686]",0.9794080257415771
1,"['\t@Test public void testQualifiedNameConverter_emptyDelimiter() throws Exception {\n\t\t\tpublic String getDelimiter() {\n\t\t\t\treturn """";\n\t\t\t}\n']",get;return;Converter;Delimiter;Exception;Qualified;Name;Delimiter;empty,1.367880031466484e-09;1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;1.1641532182693481e-10;2.9103830456733704e-11;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.609975814819336, -4.958098888397217, -5.393396854400635, -6.52455997467041, -5.503082275390625, -0.020993990823626518]",0.9792248606681824
1,['\t@Test public void testQualifiedNameConverter_nullDelimiter() throws Exception {\n\t\t\tpublic String getDelimiter() {\n\t\t\t\treturn null;\n\t\t\t}\n'],Delimiter;null;Delimiter;null;Exception;Converter;get;Qualified;return;Name,1.7462298274040222e-09;1.3969838619232178e-09;1.1350493878126144e-09;6.984919309616089e-10;0.0;-1.1641532182693481e-10;-4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.5133991837501526e-09,5,5,"[-5.599017143249512, -4.959482192993164, -5.403833389282227, -6.533849239349365, -5.509284019470215, -0.020937491208314896]",0.9792801737785339
1,"['\t@Test public void testCreateNull() {\n\tpublic void testAppendNull() {\n\t\ttry {\n\t\t\tQualifiedName.create().append((String) null);\n\t\t\tfail(""Exception expected"");\n\t\t} catch (IllegalArgumentException e) {}\n\t}\n']",Create;fail;Exception;Null;append;null;Exception;Argument;Null;Name,6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.4551915228366852e-11;0.0;-5.820766091346741e-11,5,5,"[-5.5804948806762695, -4.907308578491211, -5.37844705581665, -6.491485595703125, -5.464982509613037, -0.02176179736852646]",0.9784733057022095
1,['\t@Test public void testWrapper() throws Exception {\n\t\t\tpublic String apply(String from) {\n\t\t\t\treturn from;\n\t\t\t}\n'],Wrapper;from;from;return;apply;Exception,2.0954757928848267e-09;5.820766091346741e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-5.820766091346741e-10;-9.313225746154785e-10,5,5,"[-5.655102252960205, -4.906793594360352, -5.434940338134766, -6.535844326019287, -5.549077033996582, -0.020813973620533943]",0.979401171207428
1,['\t@Test public void testInstanceBinding() throws Exception {\n\t\t\tpublic Date bindDate() {\n\t\t\t\treturn date;\n\t\t\t}\n'],date;bind;Exception;return;Date;Date;Instance;inding,6.984919309616089e-10;3.4924596548080444e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.280568540096283e-09;-2.3865140974521637e-09,5,5,"[-5.637375831604004, -4.951571941375732, -5.42904806137085, -6.530569076538086, -5.519010543823242, -0.020702583715319633]",0.9795102477073669
1,"['\t@Test public void testProviderClassDeactivation() throws Exception {\n\t\tpublic String get() {\n\t\t\t return ""foo"";\n\t\t}\n']",Deactivation;Exception;return;Class;get;Provider;foo,1.862645149230957e-09;1.8917489796876907e-10;1.7462298274040222e-10;0.0;-5.820766091346741e-10;-1.1641532182693481e-09;-1.6298145055770874e-09,5,5,"[-5.605629920959473, -4.935499668121338, -5.443849086761475, -6.548611640930176, -5.518299102783203, -0.020847365260124207]",0.9793684482574463
1,['\t@Test public void testProviderInstanceBinding() throws Exception {\n\t\t\tpublic Date get() {\n\t\t\t\treturn null;\n\t\t\t}\n'],Instance;Provider;return;Exception;null;Date;get;inding,2.0954757928848267e-09;1.1641532182693481e-09;1.1641532182693481e-09;3.2014213502407074e-10;-6.984919309616089e-10;-8.149072527885437e-10;-1.1641532182693481e-09;-2.3283064365386963e-09,5,5,"[-5.637718677520752, -4.93407678604126, -5.4400954246521, -6.544986724853516, -5.526284694671631, -0.020728623494505882]",0.9794847369194031
1,['\t@Test public void testSingletonBinding() throws Exception {\n\t\t\tpublic Class<Foo> bindFoo() {\n\t\t\t\treturn Foo.class;\n\t\t\t}\n'],class;Singleton;oo;return;Exception;Class;Foo;oo;bind;inding,2.7939677238464355e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.7462298274040222e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-9.313225746154785e-10;-1.6007106751203537e-09;-1.9208528101444244e-09;-4.6566128730773926e-09,5,5,"[-5.608354091644287, -4.920777797698975, -5.47188138961792, -6.552680015563965, -5.523782730102539, -0.02079564332962036]",0.9794191122055054
1,['\t@Test public void testEagerSingletonBinding() throws Exception {\n\t\t\tpublic Class<Foo> bindFoo() {\n\t\t\t\treturn Foo.class;\n\t\t\t}\n'],bind;oo;Class;ager;Foo;return;class;Exception;oo;Singleton,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;3.4924596548080444e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-4.0745362639427185e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-5.614063739776611, -4.934793472290039, -5.474290370941162, -6.558138847351074, -5.519047260284424, -0.02067175693809986]",0.9795404672622681
1,"['\t@Test public void testSerialize_02() throws Exception {\n\tpublic void _testSerialize_03() throws Exception {\n\t\tmodel.setGenerated(GeneratedEnum.DIFFERENT_NAME);\n\t\tString result = serialize(model);\n\t\tassertEquals(""generated DifferentLiteral"", result);\n\t}\n']",Generated;Exception;model;serialize;Different;NAME;result;set;Generated;generated,2.6775524020195007e-09;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;0.0;0.0,5,5,"[-5.5537614822387695, -5.023674011230469, -5.442698955535889, -6.528378486633301, -5.462330341339111, -0.020698731765151024]",0.9795140027999878
1,['\t@Test public void testXtextGrammarUoW() throws Exception {\n\t\t\tpublic Boolean exec(EObject state) throws Exception {\n\t\t\t\tcallCount[0]++;\n\t\t\t\treturn false;\n\t\t\t}\n'],state;Count;Exception;EO;return;text;Exception;Boolean;false;ject,1.979060471057892e-09;9.313225746154785e-10;5.238689482212067e-10;3.4924596548080444e-10;5.820766091346741e-11;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10,5,5,"[-5.584510803222656, -5.013864994049072, -5.4287824630737305, -6.5362138748168945, -5.4756178855896, -0.02063835971057415]",0.979573130607605
1,"['\t@Test\n\tpublic void testBug322875_01() throws Exception {\n\t\tString testGrammar = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\\n "" +\n\t\t\t\t"" import \'classpath:/org/eclipse/xtext/xtext/XtextValidationTest.ecore\'  "" +\n\t\t\t\t"" import \'http://www.eclipse.org/2008/Xtext\' as xtext\\n"" +\n\t\t\t\t""Bug322875 returns Bug322875: referencesETypeFromClasspathPackage=[xtext::Grammar];"";\n\t\tXtextResource resource = getResourceFromStringAndExpect(testGrammar,1);\n\t\tassertFalse(resource.getErrors().toString(), resource.getErrors().isEmpty());\n\t\tassertBug322875(resource);\n\t}\n']",foo;grammar;classpath;rammar;Expect;rammar;returns;Terminals;From;From,1.5133991837501526e-09;1.3969838619232178e-09;1.076841726899147e-09;8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.528160095214844, -5.074072360992432, -5.500187397003174, -6.523200035095215, -5.436939716339111, -0.020343462005257607]",0.9798620939254761
1,"['\t@Test\n\tpublic void testBug322875_01_b() throws Exception {\n\t\tString testGrammar = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\\n "" +\n\t\t\t\t"" import \'http://www.eclipse.org/2008/Xtext\' as xtext\\n"" +\n\t\t\t\t"" import \'classpath:/org/eclipse/xtext/xtext/XtextValidationTest.ecore\'  "" +\n\t\t\t\t""Bug322875 returns Bug322875: referencesETypeFromClasspathPackage=[xtext::Grammar];"";\n\t\tXtextResource resource = getResourceFromStringAndExpect(testGrammar,1);\n\t\tassertFalse(resource.getErrors().toString(), resource.getErrors().isEmpty());\n\t\tassertBug322875(resource);\n\t}\n']",returns;Bug;references;grammar;From;Validation;text;with;From;import,1.1175870895385742e-08;5.587935447692871e-09;3.958120942115784e-09;2.3283064365386963e-09;1.5133991837501526e-09;1.3387762010097504e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.5373358726501465, -5.068026065826416, -5.482593059539795, -6.5119123458862305, -5.431377410888672, -0.020460965111851692]",0.97974693775177
1,"['\t@Test\n\tpublic void testBug322875_02() throws Exception {\n\t\tURIConverter.URI_MAP.put(URI.createURI(""platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore""), URI.createURI(getClass().getResource(""/model/Ecore.ecore"").toExternalForm()));\n\t\tString testGrammar = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\\n "" +\n\t\t\t\t"" import \'platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore\'  "" +\n\t\t\t\t""Model returns EClass: name=ID;"";\n\t\tXtextResource resource = getResourceFromString(testGrammar);\n\t\tDiagnostic diag = Diagnostician.INSTANCE.validate(resource.getContents().get(0));\n\t\tassertNotNull(""diag"", diag);\n\t\tassertEquals(diag.toString(), 0, diag.getChildren().size());\n\t\tassertEquals(""diag.isOk"", Diagnostic.OK, diag.getSeverity());\n\t}\n']",URI;Diagnostician;rammar;Form;common;to;to;Bar;Resource;core,6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;3.2014213502407074e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.255546860396862e-10,5,5,"[-5.503617763519287, -5.071086883544922, -5.479044437408447, -6.5237908363342285, -5.453953742980957, -0.02047661505639553]",0.9797316193580627
1,"['\t@Test\n\tpublic void testBug322875_04() throws Exception {\n\t\tString testGrammarNsURI = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\\n "" +\n\t\t\t\t"" import \'http://www.eclipse.org/emf/2002/Ecore\'  "" +\n\t\t\t\t""Model returns EClass: name=ID;"";\n\t\tString testGrammarPlatformPlugin = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\\n "" +\n\t\t\t\t"" import \'platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore\'  "" +\n\t\t\t\t""Model returns EClass: name=ID;"";\n\t\tXtextResource resourceOk = getResourceFromString(testGrammarNsURI);\n\t\tXtextResource resourceOk2 = (XtextResource) resourceOk.getResourceSet().createResource(URI.createURI(""unused.xtext""));\n\t\tresourceOk2.load(new StringInputStream(testGrammarPlatformPlugin), null);\n\t\tDiagnostic diagOK = Diagnostician.INSTANCE.validate(resourceOk.getContents().get(0));\n\t\tassertNotNull(""diag"", diagOK);\n\t\tassertEquals(diagOK.toString(), 0, diagOK.getChildren().size());\n\t\tdiagOK = Diagnostician.INSTANCE.validate(resourceOk2.getContents().get(0));\n\t\tassertNotNull(""diag"", diagOK);\n\t\tassertEquals(diagOK.toString(), 0, diagOK.getChildren().size());\n\t}\n']",with;diag;clipse;grammar;Bug;foo;Ns;clipse;clipse;to,7.566995918750763e-10;7.566995918750763e-10;7.275957614183426e-10;6.548361852765083e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.471406936645508, -5.1241044998168945, -5.489714622497559, -6.501866340637207, -5.406743049621582, -0.020481053739786148]",0.9797272682189941
1,"['\t@Test\n\tpublic void testBug_280413_03() throws Exception {\n\t\tXtextResource resource = getResourceFromString(\n\t\t\t\t""grammar org.foo.Bar with org.eclipse.xtext.common.Terminals\\n"" +\n\t\t\t\t""import \'classpath:/org/eclipse/xtext/Xtext.ecore\' as xtext\\n"" +\n\t\t\t\t""ParserRule returns xtext::ParserRule: name = ID;"");\n\t\tassertTrue(resource.getErrors().toString(), resource.getErrors().isEmpty());\n\t\tassertTrue(resource.getWarnings().toString(), resource.getWarnings().isEmpty());\n\n\t\tDiagnostic diag = Diagnostician.INSTANCE.validate(resource.getContents().get(0));\n\t\tassertNotNull(""diag"", diag);\n\t\tassertEquals(diag.getSeverity(), Diagnostic.OK);\n\t\tassertTrue(diag.getChildren().toString(), diag.getChildren().isEmpty());\n\t}\n']",Diagnostic;arnings;grammar;arnings;Resource;Resource;Children;Parser;classpath;OK,1.8917489796876907e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;9.022187441587448e-10;9.022187441587448e-10;6.693881005048752e-10,5,5,"[-5.537945747375488, -5.0077385902404785, -5.456788063049316, -6.516021728515625, -5.4653825759887695, -0.02081315591931343]",0.9794019460678101
1,"['\t@Test public void testNegatedTokenNotEOF_2() throws Exception {\n\t\tString grammarAsText =\n\t\t\t\t""grammar test with org.eclipse.xtext.common.Terminals\\n"" +\n\t\t\t\t\t\t""generate test \'http://test\'\\n"" +\n\t\t\t\t\t\t""A: foo=DUMMY;\\n"" +\n\t\t\t\t\t\t""terminal DUMMY: !(EOF | ID);"";\n\t\tGrammar grammar = (Grammar) getModel(grammarAsText);\n\t\tXtextValidator validator = get(XtextValidator.class);\n\t\tValidatingMessageAcceptor messageAcceptor = new ValidatingMessageAcceptor(null, true, false);\n\t\tTerminalRule terminal = (TerminalRule) grammar.getRules().get(1);\n\t\tNegatedToken token = (NegatedToken)terminal.getAlternatives();\n\t\tmessageAcceptor.expectedContext(((Alternatives)token.getTerminal()).getElements().get(0));\n\t\tconfigureValidator(validator, messageAcceptor, token);\n\t\tvalidator.checkNegatedTokenNotEOF(token);\n\t\tmessageAcceptor.validate();\n\t}\n\n\tpublic class ValidatingMessageAcceptor extends AbstractValidationMessageAcceptor {\n\n\t\tprivate final Set<EObject> contexts;\n\t\tprivate boolean error;\n\t\tprivate boolean warning;\n\t\tprivate boolean info;\n\n\t\tpublic ValidatingMessageAcceptor(EObject context, boolean error, boolean warning) {\n\t\t\tthis.contexts = Sets.newHashSet();\n\t\t\tif (context != null)\n\t\t\t\tcontexts.add(context);\n\t\t\tthis.error = error;\n\t\t\tthis.warning = warning;\n\t\t}\n\t\t\n\t\tpublic void expectedContext(EObject... contexts) {\n\t\t\tthis.contexts.addAll(Arrays.asList(contexts));\n\t\t}\n']",boolean;error;warning;EO;UMMY;warning;extends;org;class;Exception,2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.57160684466362e-09;1.4842953532934189e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.4990410804748535, -5.097772121429443, -5.409967422485352, -6.463363170623779, -5.44355583190918, -0.020770657807588577]",0.9794435501098633
1,"['\t@Test\n\tpublic void testSimpeCase01() throws Exception {\n\t\tEClassInfo a = addClass(""a"");\n\t\tEClassInfo b = addClass(""b"");\n\t\tEClassInfo c = addClass(""c"");\n\t\tb.addSupertype(a);\n\t\tc.addSupertype(a);\n\t\taddAttribute(b, INT, ""f1"");\n\t\taddAttribute(c, INT, ""f1"");\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, c.getEClass().getEStructuralFeatures().size());\n\n\t\tliftUpFeatures();\n\n\t\tassertEquals(1, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, c.getEClass().getEStructuralFeatures().size());\n\t}\n']",Simpe;Class;lift;add;Structural;Class;Structural;Structural;Class;add,4.423782229423523e-09;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.553912162780762, -5.058913707733154, -5.476354598999023, -6.506100654602051, -5.449323654174805, -0.020409690216183662]",0.9797971844673157
1,"['\t@Test\n\tpublic void testSimpeCase02() throws Exception {\n\t\t// no uplift for less than two children\n\t\tEClassInfo a = addClass(""a"");\n\t\tEClassInfo b = addClass(""b"");\n\t\tb.addSupertype(a);\n\t\taddAttribute(b, INT, ""f1"");\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\n\t\tliftUpFeatures();\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\t}\n']",get;Info;Class;Class;add;Structural;Structural;Class;add;less,1.862645149230957e-09;1.57160684466362e-09;1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;5.311449058353901e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.575357437133789, -5.016338348388672, -5.488688945770264, -6.533409118652344, -5.4785871505737305, -0.02038784883916378]",0.97981858253479
1,"['\t@Test\n\tpublic void testRecursiveUplift01() throws Exception {\n\t\t// no uplift for less than two children\n\t\tEClassInfo a = addClass(""a"");\n\t\tEClassInfo b = addClass(""b"");\n\t\tEClassInfo c = addClass(""c"");\n\t\tEClassInfo d = addClass(""d"");\n\t\tEClassInfo e = addClass(""e"");\n\t\tb.addSupertype(a);\n\t\tc.addSupertype(a);\n\t\td.addSupertype(c);\n\t\te.addSupertype(c);\n\n\t\taddAttribute(b, INT, ""f1"");\n\t\taddAttribute(d, INT, ""f1"");\n\t\taddAttribute(e, INT, ""f1"");\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, c.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, d.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, e.getEClass().getEStructuralFeatures().size());\n\n\t\tliftUpFeatures();\n\n\t\tassertEquals(1, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, c.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, d.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, e.getEClass().getEStructuralFeatures().size());\n\t}\n']",uplift;Features;Structural;Class;Features;get;Class;size;Info;add,7.566995918750763e-10;6.111804395914078e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.518720626831055, -5.085111141204834, -5.46963357925415, -6.482621192932129, -5.451098442077637, -0.020440759137272835]",0.9797666072845459
1,"['\t@Test\n\tpublic void testNikolaus() throws Exception {\n\t\t// no uplift for less than two children\n\t\tEClassInfo a = addClass(""a"");\n\t\tEClassInfo b = addClass(""b"");\n\t\tEClassInfo c = addClass(""c"");\n\t\tEClassInfo d = addClass(""d"");\n\t\tEClassInfo e = addClass(""e"");\n\t\tb.addSupertype(a);\n\t\tc.addSupertype(a);\n\t\td.addSupertype(b);\n\t\td.addSupertype(c);\n\t\te.addSupertype(b);\n\t\te.addSupertype(c);\n\n\t\taddAttribute(b, STRING, ""f2"");\n\t\taddAttribute(c, STRING, ""f2"");\n\t\taddAttribute(d, INT, ""f1"");\n\t\taddAttribute(e, INT, ""f1"");\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, c.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, d.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, e.getEClass().getEStructuralFeatures().size());\n\n\t\tliftUpFeatures();\n\n\t\tassertEquals(1, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, c.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, d.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, e.getEClass().getEStructuralFeatures().size());\n\t}\n']",Nikolaus;Info;Class;STRING;two;Features;Class;Class;no;size,2.852175384759903e-09;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.504665374755859, -5.0814208984375, -5.472833633422852, -6.484281063079834, -5.459719181060791, -0.020468322560191154]",0.9797398447990417
1,"['\t@Test\n\tpublic void testImcompatipleFeatures() throws Exception {\n\t\tEClassInfo a = addClass(""a"");\n\t\tEClassInfo b = addClass(""b"");\n\t\tEClassInfo c = addClass(""c"");\n\t\tb.addSupertype(a);\n\t\tc.addSupertype(a);\n\t\taddAttribute(b, INT, ""f1"");\n\t\taddAttribute(c, STRING, ""f1"");\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, c.getEClass().getEStructuralFeatures().size());\n\n\t\tliftUpFeatures();\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, c.getEClass().getEStructuralFeatures().size());\n\t}\n']",Imcompatiple;Structural;Info;Class;Class;get;Supertype;add;Attribute;Equals,1.5133991837501526e-09;1.1350493878126144e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.562697410583496, -5.0233154296875, -5.492499828338623, -6.530611038208008, -5.473108291625977, -0.02040174789726734]",0.979805052280426
1,"['\t@Test\n\tpublic void testReferences() throws Exception {\n\t\tEClassInfo a = addClass(""a"");\n\t\tEClassInfo b = addClass(""b"");\n\t\tEClassInfo c = addClass(""c"");\n\t\tEClassInfo d = addClass(""d"");\n\t\tb.addSupertype(a);\n\t\tc.addSupertype(a);\n\t\taddReference(b, d, ""r1"");\n\t\taddReference(c, d, ""r1"");\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, c.getEClass().getEStructuralFeatures().size());\n\n\t\tliftUpFeatures();\n\n\t\tassertEquals(1, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, c.getEClass().getEStructuralFeatures().size());\n\t}\n']",Structural;Structural;Info;Class;add;add;Class;Class;Structural;Reference,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5418901443481445, -5.068169116973877, -5.4717936515808105, -6.501523494720459, -5.4454827308654785, -0.020441226661205292]",0.9797663688659668
1,"['\t@Test\n\tpublic void testConfigurationOfLiftedReference() throws Exception {\n\t\tEClassInfo a = addClass(""a"");\n\t\tEClassInfo b = addClass(""b"");\n\t\tEClassInfo c = addClass(""c"");\n\n\t\tb.addSupertype(a);\n\t\tc.addSupertype(a);\n\t\tEReference refB = addReference(b, a, ""ref"");\n\t\trefB.setContainment(true);\n\t\tEReference refC = addReference(c, a, ""ref"");\n\t\trefC.setContainment(true);\n\n\t\tassertEquals(0, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, c.getEClass().getEStructuralFeatures().size());\n\n\t\tliftUpFeatures();\n\n\t\tassertEquals(1, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, c.getEClass().getEStructuralFeatures().size());\n\n\t\tEReference refA = (EReference) a.getEClass().getEStructuralFeatures().get(0);\n\t\tassertTrue(refA.isContainment());\n\t}\n']",ifted;Configuration;Info;Reference;EReference;EReference;Structural;Reference;EReference;add,2.2992026060819626e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.280568540096283e-09;9.604264050722122e-10;6.402842700481415e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.514062881469727, -5.081427574157715, -5.4798264503479, -6.493426322937012, -5.443669319152832, -0.02045547589659691]",0.9797523021697998
1,"['\t@Test\n\tpublic void testDublicateDerivedFeature() throws Exception {\n\t\tEClassInfo a = addClass(""a"");\n\t\tEClassInfo b = addClass(""b"");\n\t\tEClassInfo c = addClass(""c"");\n\t\tb.addSupertype(a);\n\t\tc.addSupertype(b);\n\t\taddAttribute(a, INT, ""f"");\n\t\taddAttribute(c, INT, ""f"");\n\n\t\tassertEquals(1, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(1, c.getEClass().getEStructuralFeatures().size());\n\n\t\tinitializeHelper();\n\t\thelper.removeDuplicateDerivedFeatures();\n\n\t\tassertEquals(1, a.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, b.getEClass().getEStructuralFeatures().size());\n\t\tassertEquals(0, c.getEClass().getEStructuralFeatures().size());\n\t}\n']",Info;Derived;Structural;Structural;Info;Class;Equals;Class;Class;get,1.4842953532934189e-09;6.693881005048752e-10;5.529727786779404e-10;5.384208634495735e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-5.555497646331787, -5.035215377807617, -5.498027324676514, -6.5309882164001465, -5.47833776473999, -0.020304329693317413]",0.9799004197120667
1,"['\t@Test public void testContainsCompatibleFeature_01() throws Exception {\n\tpublic void testChangeable(){\n\t\tEcorePackage pack = EcorePackage.eINSTANCE;\n\t\tEClass eClass = pack.getEClass();\n\t\tEClassInfo objectUnderTest = new EClassifierInfo.EClassInfo(eClass, false, Collections.<String>emptySet(), null);\n\t\tEcoreFactory fac = EcoreFactory.eINSTANCE;\n\t\tEReference reference = fac.createEReference();\n\t\treference.setName(""newReference"");\n\t\treference.setEType(eClass);\n\t\treference.setChangeable(true);\n\t\treference.setContainment(true);\n\t\teClass.getEStructuralFeatures().add(reference);\n\t\tassertEquals(true,objectUnderTest.containsCompatibleFeature(""newReference"", false, true, eClass, new StringBuilder()));\n\t\treference.setChangeable(false);\n\t\tassertEquals(false,objectUnderTest.containsCompatibleFeature(""newReference"", false, true, eClass, new StringBuilder()));\n\t}\n']",Package;Classifier;EReference;Contains;Builder;Class;set;empty;Exception;Factory,1.2223608791828156e-09;1.1641532182693481e-09;8.294591680169106e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10,5,5,"[-5.489950656890869, -5.121670722961426, -5.492539882659912, -6.517491340637207, -5.390039920806885, -0.020458394661545753]",0.979749321937561
1,"['\t@Test public void testEditGroupWithCardinality_03() throws Exception {\n\tpublic void performTest(String toBeDeleted) throws Exception {\n\t\tString grammarAsText = \n\t\t\t""grammar TestLanguage with org.eclipse.xtext.common.Terminals\\n"" +\n\t\t\t""generate test \'myEcoreModel\'\\n"" +\n\t\t\t""Root: value=Test;\\n"" +\n\t\t\t""Test: ("" + toBeDeleted.trim() + "" \'foo\')*;"";\n\t\tXtextResource resource = getResourceFromString(grammarAsText);\n\t\tGrammar g = (Grammar) resource.getContents().get(0);\n\t\tParserRule rule = (ParserRule) g.getRules().get(1);\n\t\tassertEquals(""*"", rule.getAlternatives().getCardinality());\n\t\tresource.update(grammarAsText.indexOf(toBeDeleted), toBeDeleted.length(), """");\n\t\t// make sure we did a partial parse pass\n\t\tassertSame(rule, ((Grammar) resource.getContents().get(0)).getRules().get(1));\n\t\tassertEquals(""*"", rule.getAlternatives().getCardinality());\n\t}\n']",Root;grammar;with;index;Deleted;generate;As;to;value;Be,3.725290298461914e-09;1.6007106751203537e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.532500267028809, -4.986565113067627, -5.398043632507324, -6.467062950134277, -5.46525764465332, -0.02132137306034565]",0.9789043068885803
1,"['\t@Test public void testBug285605() throws Exception {\n\tpublic void acceptWarning(String message, EObject object, EStructuralFeature feature, int index, String code,\n\t\t\tString... issueData) {\n\t\tif (code.equals(OverriddenValueInspector.ISSUE_CODE)) {\n\t\t\tString expectation = ""The assigned value of feature \'feature\' will possibly override itself because it is used inside of a loop."";\n\t\t\tassertEquals(expectation, message);\n\t\t} else {\n\t\t\tsuper.acceptWarning(message, object, feature, index, code, issueData);\n\t\t}\n\t}\n']",accept;Bug;Exception;message;object;super;Overridden;Structural;Warning;itself,1.6880221664905548e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.093170329928398e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.569370269775391, -5.091717720031738, -5.472814559936523, -6.528192043304443, -5.454095840454102, -0.020100820809602737]",0.9800998568534851
1,['\t@Test public void testRelativeContext() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],get;Iterator;iterator;Contents;Context;All;Exception;EO;resource;return,7.566995918750763e-10;7.275957614183426e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;-5.820766091346741e-11;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-5.5804338455200195, -4.970292091369629, -5.40686559677124, -6.533867359161377, -5.499643325805664, -0.02095733769237995]",0.9792606234550476
1,['\t@Test public void testRelativePath() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],iterator;Path;return;All;get;resource;EO;Contents;ject;Exception,3.026798367500305e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10;-2.7939677238464355e-09,5,5,"[-5.579588890075684, -4.969789028167725, -5.409102916717529, -6.534420967102051, -5.506340980529785, -0.020925350487232208]",0.979292094707489
1,['\t@Test public void testReexports2() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],Contents;Reexports;ject;EO;All;get;Exception;iterator;resource;return,2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;2.3283064365386963e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-1.1350493878126144e-09,5,5,"[-5.57214879989624, -4.976030349731445, -5.398265838623047, -6.542051315307617, -5.487119674682617, -0.02102901041507721]",0.9791905283927917
1,['\t@Test public void testLocalElementsNotFromIndex() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],iterator;Exception;return;get;From;Iterator;All;resource;Contents;Not,1.1204974725842476e-09;9.313225746154785e-10;9.313225746154785e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.527770042419434, -5.054821491241455, -5.309237480163574, -6.4402971267700195, -5.399069786071777, -0.021648531779646873]",0.9785842299461365
1,['\t@Test public void testImportsWithoutWildcard() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],Wildcard;Iterator;Imports;All;iterator;return;Contents;EO;ject;get,2.3283064365386963e-09;6.402842700481415e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-6.984919309616089e-10;-8.731149137020111e-10,5,5,"[-5.580142974853516, -4.99016809463501, -5.420710563659668, -6.544458866119385, -5.492030143737793, -0.020772408694028854]",0.9794419407844543
1,['\t@Test public void testDuplicateImportsAreIgnored() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],ject;Duplicate;Ignored;resource;Exception;get;return;All;EO;Iterator,3.259629011154175e-09;2.3283064365386963e-09;1.6298145055770874e-09;1.1641532182693481e-09;-9.313225746154785e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-3.6088749766349792e-09;-4.190951585769653e-09;-4.6566128730773926e-09,5,5,"[-5.570565700531006, -5.006358623504639, -5.39636754989624, -6.5364508628845215, -5.48054838180542, -0.020869547501206398]",0.9793466925621033
1,['\t@Test public void testUnambiguousImportAreShadowed_00() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],Are;Exception;ject;All;get;Contents;resource;Iterator;return;EO,1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;-4.0745362639427185e-10,5,5,"[-5.5426740646362305, -4.966183185577393, -5.334478378295898, -6.45621919631958, -5.445955753326416, -0.02182909846305847]",0.9784074425697327
1,['\t@Test public void testUnambiguousImportAreShadowed_01() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],Shadowed;iterator;resource;EO;Exception;get;All;ject;Iterator;Contents,1.6065314412117004e-08;6.984919309616089e-09;3.259629011154175e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;-1.862645149230957e-09;-1.862645149230957e-09,5,5,"[-5.534823417663574, -4.963693618774414, -5.334604740142822, -6.462990760803223, -5.435831069946289, -0.02191178873181343]",0.9783265590667725
1,['\t@Test public void testUnambiguousImportAreShadowed_02() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn resource.getAllContents();\n\t\t\t}\n'],iterator;resource;Import;ject;EO;return;Exception;Iterator;get;Shadowed,1.3969838619232178e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.542771339416504, -4.980208396911621, -5.346892356872559, -6.472764015197754, -5.437684059143066, -0.021678978577256203]",0.9785543084144592
1,['\t@Test public void testMultipleFiles() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn res1.getAllContents();\n\t\t\t}\n'],EO;ject;Files;return;iterator;Exception;All;get;Iterator;Multiple,6.402842700481415e-10;1.4551915228366852e-10;1.1641532182693481e-10;5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-6.548361852765083e-10;-9.313225746154785e-10,5,5,"[-5.567981243133545, -4.906532287597656, -5.378378391265869, -6.510559558868408, -5.4953999519348145, -0.021657630801200867]",0.9785752296447754
1,['\t@Test public void testResourceSetReferencingResourceSet() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn res1.getAllContents();\n\t\t\t}\n'],iterator;EO;Exception;Set;Resource;All;ject;return;Resource;get,1.979060471057892e-09;1.6298145055770874e-09;1.280568540096283e-09;1.1350493878126144e-09;1.0477378964424133e-09;4.656612873077393e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.564462184906006, -4.987326145172119, -5.38346004486084, -6.527530193328857, -5.479536056518555, -0.021102430298924446]",0.9791186451911926
1,['\t@Test public void testResourceSetReferencingResourceSet2() throws Exception {\n\t\t\tpublic Iterator<EObject> iterator() {\n\t\t\t\treturn res2.getAllContents();\n\t\t\t}\n'],Set;iterator;Contents;return;res;ject;Resource;Resource;All;EO,1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;-4.656612873077393e-10;-6.402842700481415e-10;-1.0477378964424133e-09,5,5,"[-5.515665054321289, -5.005558490753174, -5.315458297729492, -6.45554256439209, -5.403377532958984, -0.021951207891106606]",0.9782879948616028
1,"['\t@Test public void testLaziness() throws Exception {\n\t\t\t\tpublic Iterator<IEObjectDescription> iterator() {\n\t\t\t\t\tnumberOfCalls++;\n\t\t\t\t\treturn singleton(\n\t\t\t\t\t\t\t(IEObjectDescription) new EObjectDescription(QualifiedName.create(name),\n\t\t\t\t\t\t\t\t\tEcorePackage.Literals.EATTRIBUTE, null)).iterator();\n\t\t\t\t}\n']",Object;Iterator;Description;Description;Package;ject;Name;singleton;iterator;iterator,2.3283064365386963e-09;1.6880221664905548e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.546304225921631, -5.0532426834106445, -5.443535327911377, -6.521578311920166, -5.46750545501709, -0.02051667496562004]",0.9796922206878662
1,"['\t@Test\n\tpublic void testNoSuitableDelegate() {\n\t\tTestableDelegatingScopeProvider testMe = new TestableDelegatingScopeProvider();\n\t\ttestMe.setWrapper(this);\n\t\tAssert.assertEquals(1, testMe.invocationCount);\n\t\t\n\t\tIDelegatingScopeProvider.setWrapper(testMe, null);\n\t\tAssert.assertEquals(2, testMe.invocationCount);\n\t}\n']",Delegating;Delegating;invocation;No;Assert;Me;set;Me;Wrapper;Count,2.0372681319713593e-09;1.8917489796876907e-09;1.3969838619232178e-09;8.440110832452774e-10;7.130438461899757e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.570337772369385, -4.9835896492004395, -5.460010528564453, -6.5319318771362305, -5.468366622924805, -0.020801248028874397]",0.979413628578186
1,"['\t@Test\n\tpublic void testOneSuitableDelegate_01() {\n\t\tTestableDelegatingScopeProvider root = new TestableDelegatingScopeProvider();\n\t\tTestableDelegatingScopeProvider delegating = new TestableDelegatingScopeProvider(root);\n\t\t\n\t\tdelegating.setWrapper(this);\n\t\tAssert.assertEquals(1, delegating.invocationCount);\n\t\tAssert.assertEquals(1, root.invocationCount);\n\t\t\n\t\tIDelegatingScopeProvider.setWrapper(delegating, null);\n\t\tAssert.assertEquals(2, delegating.invocationCount);\n\t\tAssert.assertEquals(2, root.invocationCount);\n\t}\n']",Delegating;able;able;root;delegating;delegating;Provider;One;Assert;set,7.275957614183426e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.456968210637569e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.551743507385254, -5.035594463348389, -5.460724830627441, -6.50809383392334, -5.469293117523193, -0.02054879069328308]",0.9796609878540039
1,"['\t@Test\n\tpublic void testOneSuitableDelegate_02() {\n\t\tfinal int[] invocationCount = new int[] { 0 };\n\t\tAbstractGlobalScopeDelegatingScopeProvider root = new AbstractGlobalScopeDelegatingScopeProvider() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic IScope getScope(EObject context, EReference reference) {\n\t\t\t\treturn IScope.NULLSCOPE;\n\t\t\t}\n']",Provider;Scope;Reference;IS;Scope;ope;Abstract;invocation;Delegating;IS,8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.592451095581055, -4.951958656311035, -5.391432285308838, -6.484884738922119, -5.4886474609375, -0.021234549582004547]",0.97898930311203
1,"['\t@Test\n\tpublic void testTwoSuitableDelegates_02() {\n\t\tfinal int[] invocationCount = new int[] { 0 };\n\t\tAbstractGlobalScopeDelegatingScopeProvider first = new AbstractGlobalScopeDelegatingScopeProvider() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic IScope getScope(EObject context, EReference reference) {\n\t\t\t\treturn IScope.NULLSCOPE;\n\t\t\t}\n']",EO;return;IS;Delegating;Two;first;Provider;Abstract;Global;Delegating,1.5133991837501526e-09;8.440110832452774e-10;6.984919309616089e-10;4.802132025361061e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.589092254638672, -4.951748371124268, -5.389157772064209, -6.483224391937256, -5.487325191497803, -0.02126757614314556]",0.9789569973945618
1,['\t@Test public void testGetByEObject_01() throws Exception {\n\t\tpublic EObject getEObjectOrProxy() {\n\t\t\tEObject element = super.getEObjectOrProxy();\n\t\t\tInternalEObject result = (InternalEObject) EcoreFactory.eINSTANCE.create(element.eClass());\n\t\t\tresult.eSetProxyURI(EcoreUtil.getURI(element));\n\t\t\treturn result;\n\t\t}\n'],core;ject;ject;Exception;Internal;element;ject;ject;Util;URI,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.675246939063072e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10,5,5,"[-5.571016788482666, -5.050824165344238, -5.445891380310059, -6.5273518562316895, -5.461492538452148, -0.020442277193069458]",0.9797652363777161
1,['\t@Test public void testSimple() throws Exception {\n\t\t\tpublic Injector createInjector() {\n\t\t\t\treturn Guice.createInjector(new org.eclipse.xtext.index.IndexTestLanguageRuntimeModule(){\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic java.lang.Class<? extends org.eclipse.xtext.scoping.IScopeProvider> bindIScopeProvider() {\n\t\t\t\t\t\treturn OptimizedScopeProvider.class;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n'],Injector;Simple;create;Runtime;bind;Injector;clipse;create;new;Exception,2.444721758365631e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.153683453798294e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.6007106751203537e-09;1.0477378964424133e-09;1.0477378964424133e-09,5,5,"[-5.583103179931641, -5.018537521362305, -5.474839210510254, -6.53053092956543, -5.495390892028809, -0.020335284993052483]",0.9798702001571655
1,['\t@Test public void testScopeContainsNotT2() throws Exception {\n\tpublic void tearDown() throws Exception {\n\t\tresource1 = null;\n\t\tresource2 = null;\n\t\tglobalScopeProvider = null;\n\t\tsuper.tearDown();\n\t\t\n\t}\n'],global;ear;Not;Exception;Exception;super;Provider;Down;null;resource,1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.560305595397949, -5.053414821624756, -5.4390869140625, -6.548352241516113, -5.465524673461914, -0.020448818802833557]",0.9797588586807251
1,"['\t@Test public void testBug236425() throws Exception {\n\t\t\tpublic Iterator<INode> iterator() {\n\t\t\t\treturn Iterators.filter(node.getAsTreeIterable().iterator(), new Predicate<INode>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean apply(INode input) {\n\t\t\t\t\t\treturn input.getSyntaxErrorMessage() != null;\n\t\t\t\t\t}\n']",INode;Iterable;boolean;Error;INode;null;return;Iterator;apply;iterator,1.6589183360338211e-09;9.313225746154785e-10;7.8580342233181e-10;6.111804395914078e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.542773246765137, -5.04395055770874, -5.439337253570557, -6.518537521362305, -5.477595329284668, -0.02057156339287758]",0.9796385765075684
1,"['\t@Test public void testIssuesInOtherResource() throws Exception {\n\t\t\tpublic Injector createInjector() {\n\t\t\t\treturn Guice.createInjector(new org.eclipse.xtext.XtextRuntimeModule() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void configureFileExtensions(Binder binder) {\n\t\t\t\t\t\tbinder.bind(String.class).annotatedWith(Names.named(Constants.FILE_EXTENSIONS)).toInstance(""xtexterror"");\n\t\t\t\t\t}\n']",In;clipse;Injector;Injector;inder;return;Issues;File;named;Guice,1.5133991837501526e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;8.731149137020111e-10;8.731149137020111e-10;6.984919309616089e-10,5,5,"[-5.555501937866211, -5.057309150695801, -5.480524063110352, -6.523531436920166, -5.454794406890869, -0.020345797762274742]",0.9798598885536194
1,"['\t@Test public void testShadowingPathes() throws Exception {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eResource().getURI().toString().contains(""folder%20""+uriContains);\n\t\t\t}\n']",folder;URI;Pathes;Exception;input;Contains;ject;to;EO;boolean,1.862645149230957e-09;1.7462298274040222e-09;8.149072527885437e-10;7.8580342233181e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-5.586888790130615, -4.982876777648926, -5.440903186798096, -6.54131555557251, -5.501388072967529, -0.020672457292675972]",0.9795397520065308
1,"['\t@Test\n\tpublic void testNoneExistingFile() throws Exception {\n\t\tString path = ""fileNotExists"";\n\t\tSet<URI> uris = new PathTraverser().findAllResourceUris(path, everythingButDummy);\n\t\tassertTrue(uris.isEmpty());\n\t}\n']",ummy;Existing;new;True;Exists;Resource;All;Path;None;ris,1.3969838619232178e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.550121307373047, -4.898946762084961, -5.396103858947754, -6.518189907073975, -5.491687297821045, -0.02170662395656109]",0.9785271286964417
1,"['\t@Test\n\tpublic void testEmptyFolder() throws Exception {\n\t\tString path = pathTo(""emptyFolder"");\n\t\tSet<URI> uris = new PathTraverser().findAllResourceUris(path, everythingButDummy);\n\t\tassertTrue(uris.isEmpty());\n\t}\n']",ummy;Folder;ur;True;URI;Traverser;path;ur;new;ris,2.0954757928848267e-09;1.862645149230957e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.473825588822365e-10,5,5,"[-5.5471415519714355, -4.913576126098633, -5.398654937744141, -6.518142223358154, -5.487523078918457, -0.02161388285458088]",0.9786181449890137
1,"['\t@Test\n\tpublic void testNonEmptyFolder() throws Exception {\n\t\tString path = pathTo(""nonemptyFolder"");\n\t\tSet<URI> uris = new PathTraverser().findAllResourceUris(path, everythingButDummy);\n\t\tassertEquals(2, uris.size());\n\t}\n']",Traverser;URI;Exception;Resource;ummy;All;ur;new;path;path,1.076841726899147e-09;9.89530235528946e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.548095703125, -4.910880088806152, -5.398072719573975, -6.519496917724609, -5.485902786254883, -0.021637799218297005]",0.9785946011543274
1,"['\t@Test\n\tpublic void testArchive() throws Exception {\n\t\tString path = pathTo(""nonemptyJar.jar"");\n\t\tSet<URI> uris = new PathTraverser().findAllResourceUris(path, everythingButDummy);\n\t\tassertEquals(3, uris.size());\n\t}\n']",Resource;path;new;ur;URI;Exception;size;nonempty;Set;find,1.1641532182693481e-09;1.0477378964424133e-09;7.566995918750763e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.555291175842285, -4.914747714996338, -5.409420490264893, -6.519863605499268, -5.497350215911865, -0.021479249000549316]",0.9787498116493225
1,['\t@Test public void testLoadMatchNone() throws Exception {\n\t\t\tpublic boolean matches(URI uri) {\n\t\t\t\treturn false;\n\t\t\t}\n'],boolean;Exception;return;Load;matches;None;ur;false;URI;Match,3.4924596548080444e-10;2.9103830456733704e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-7.566995918750763e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-1.1641532182693481e-09;-1.1932570487260818e-09,5,5,"[-5.626444339752197, -4.921786785125732, -5.423984527587891, -6.541550159454346, -5.537045478820801, -0.020894180983304977]",0.979322612285614
1,['\t@Test public void testLoadMatchAll() throws Exception {\n\t\t\tpublic boolean matches(URI uri) {\n\t\t\t\treturn true;\n\t\t\t}\n'],All;URI;matches;true;return;Exception;Load;boolean;ur;Match,1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-11;0.0;-1.7462298274040222e-10;-4.656612873077393e-10;-8.731149137020111e-10;-9.313225746154785e-10;-1.1059455573558807e-09,5,5,"[-5.6265435218811035, -4.923539161682129, -5.417323112487793, -6.538776397705078, -5.536263465881348, -0.020918112248182297]",0.9792991280555725
1,"['\t@Test public void testParseClassPath() throws Exception {\n\tpublic String pathTo(String string) throws Exception {\n//\t\tURL resource = getClass().getClassLoader().getResource();\n\t\tFile base = new File(""./src/""+getClass().getName().replace(\'.\', \'/\') + "".java"");\n\t\tURI fileURI = URI.createFileURI(base.getAbsolutePath());\n//\t\tSystem.out.println(fileURI);\n\t\t// this is a hack used in order to get a file URI for a bundleresource:/ URL\n//\t\tFile f = (File) get(resource,""handler.bundleEntry.file"");\n//\t\tif (f!=null)\n//\t\t\tfileURI = URI.createFileURI(f.getAbsolutePath());\n\t\t\n\t\tURI fileURI2 = URI.createURI(string);\n\t\treturn fileURI2.resolve(fileURI).toFileString();\n\t}\n']",Exception;Path;Class;resource;resource;File;java;replace;URI;path,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.516605854034424, -5.025568008422852, -5.440364360809326, -6.502093315124512, -5.474639892578125, -0.020832771435379982]",0.9793827533721924
1,['\t@Test public void testGetLeafNodes_01() {\n\t\t\tpublic Iterator<INode> iterator() {\n\t\t\t\treturn new AbstractIterator<INode>() {\n\n\t\t\t\t\tprivate BidiTreeIterator<AbstractNode> delegate = node.basicIterator();\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected INode computeNext() {\n\t\t\t\t\t\tif (delegate.hasPrevious())\n\t\t\t\t\t\t\treturn delegate.previous();\n\t\t\t\t\t\treturn endOfData();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n'],INode;Tree;Node;Get;protected;Abstract;Data;Iterator;Next;delegate,1.076841726899147e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.5475287437438965, -5.018589496612549, -5.354687213897705, -6.470852851867676, -5.465095043182373, -0.021240733563899994]",0.9789832830429077
1,"['\t@Test\n\tpublic void testEmptyText() {\n\t\tassertLineAndColumn("""", 0, 1, 1);\n\t}\n']",Column;Text;Empty;Line,7.450580596923828e-09;3.259629011154175e-09;2.7939677238464355e-09;-4.656612873077393e-10,5,5,"[-5.656414985656738, -4.897294521331787, -5.420633792877197, -6.52918004989624, -5.505367279052734, -0.02113289386034012]",0.9790887236595154
1,"['\t@Test(expected=IndexOutOfBoundsException.class)\n\tpublic void testExceedsOffset() {\n\t\tassertLineAndColumn("""", 1, -1, -1);\n\t}\n']",Exception;ounds;class;Exceed;Out;Line;Column;expected;Index;Offset,4.656612873077393e-10;2.3283064365386963e-10;-5.820766091346741e-11;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-9.313225746154785e-10;-2.0954757928848267e-09,5,5,"[-5.654429912567139, -4.926210880279541, -5.393357276916504, -6.510425090789795, -5.50506591796875, -0.021077219396829605]",0.9791434407234192
1,"['\t@Test(expected=IndexOutOfBoundsException.class)\n\tpublic void testNegativeOffset() {\n\t\tassertLineAndColumn("""", -1, -1, -1);\n\t}\n']",Negative;expected;ounds;Out;Line;Exception;Offset;Index;class;Column,1.7462298274040222e-09;1.3969838619232178e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;0.0;-4.656612873077393e-10;-6.402842700481415e-10;-6.984919309616089e-10,5,5,"[-5.649148941040039, -4.955639362335205, -5.388250827789307, -6.510290145874023, -5.4908318519592285, -0.020964808762073517]",0.9792535305023193
1,"['\t@Test\n\tpublic void testSingleCharText() {\n\t\tassertLineAndColumn(""a"", 0, 1, 1);\n\t\tassertLineAndColumn(""a"", 1, 1, 2);\n\t}\n']",Single;Char;Line;Text;Column;Line;Column,1.3969838619232178e-09;1.3969838619232178e-09;5.820766091346741e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-9.313225746154785e-10,5,5,"[-5.62188720703125, -4.888897895812988, -5.398277759552002, -6.502747058868408, -5.491035461425781, -0.02152475155889988]",0.9787052273750305
1,"['\t@Test\n\tpublic void testTwoCharsText() {\n\t\tassertLineAndColumn(""ab"", 0, 1, 1);\n\t\tassertLineAndColumn(""ab"", 1, 1, 2);\n\t\tassertLineAndColumn(""ab"", 2, 1, 3);\n\t}\n']",Text;Line;ab;Column;Column;Line;Two;ab;ab;Line,2.6775524020195007e-09;1.280568540096283e-09;9.89530235528946e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;-4.656612873077393e-10;-5.238689482212067e-10;-5.238689482212067e-10;-6.984919309616089e-10,5,5,"[-5.602643966674805, -4.952198505401611, -5.413114547729492, -6.495957374572754, -5.483902454376221, -0.02109741047024727]",0.9791237115859985
1,"['\t@Test\n\tpublic void testPointsToLineBreak() {\n\t\tassertLineAndColumn(""\\n"", 0, 1, 1);\n\t\tassertLineAndColumn(""\\r\\n"", 0, 1, 1);\n\t}\n']",Column;Break;Line;Column;Line;Points;Line,3.725290298461914e-09;3.4924596548080444e-10;-9.313225746154785e-10;-1.6298145055770874e-09;-2.0954757928848267e-09;-2.7939677238464355e-09;-4.190951585769653e-09,5,5,"[-5.611200332641602, -4.901849269866943, -5.40311861038208, -6.505832672119141, -5.498495578765869, -0.02140714041888714]",0.9788203835487366
1,"['\t@Test\n\tpublic void testPointsToBackslashNInWindowsLineBreak() {\n\t\tassertLineAndColumn(""\\r\\n"", 1, 1, 2);\n\t\tassertLineAndColumn(""a\\r\\n"", 2, 1, 3);\n\t\tassertLineAndColumn(""a\\r\\n"", 3, 2, 1);\n\t}\n']",In;Line;Line;ackslash;Break;Column;Line;Line;Points;Column,1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;0.0;-8.731149137020111e-11;-2.3283064365386963e-10;-4.0745362639427185e-10;-6.984919309616089e-10,5,5,"[-5.593656539916992, -4.943782329559326, -5.42241907119751, -6.509162425994873, -5.488339900970459, -0.02111106738448143]",0.9791101217269897
1,['\t@Test public void testErrors1() throws Exception {\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\twith(DummyTestLanguageStandaloneSetup.class);\n\t}\n'],ummy;Exception;Standalone;with;class;set;super;Errors;Setup;set,3.7834979593753815e-09;1.862645149230957e-09;1.1059455573558807e-09;9.313225746154785e-10;5.820766091346741e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-3.4924596548080444e-10,5,5,"[-5.5873494148254395, -4.969407081604004, -5.455472469329834, -6.55697774887085, -5.486278533935547, -0.020742051303386688]",0.9794715642929077
1,"['\t@Test\n\tpublic void testFillIdToEObjectMap() {\n\t\tEPackage pack = EcoreFactory.eINSTANCE.createEPackage();\n\t\tEClass root = createEClass(pack, ""Root"");\n\t\tEClass someType = createEClass(pack, ""SomeType"");\n\n\t\tEReference ref1 = addEReference(root, someType, ""ref1"", false);\n\t\tEReference ref2 = addEReference(root, someType, ""ref2"", true);\n\n\t\tEFactory factory = pack.getEFactoryInstance();\n\t\tEObject rootObject = factory.create(root);\n\t\tEObject someTypeObject1 = factory.create(someType);\n\t\tEObject someTypeObject2 = factory.create(someType);\n\t\trootObject.eSet(ref1, someTypeObject1);\n\t\trootObject.eSet(ref2, someTypeObject2);\n\n\t\tList<EObject> map = new ArrayList<>();\n\t\tSerializationUtil.fillIdToEObjectMap(rootObject, map);\n\t\tassertTrue(map.contains(rootObject));\n\t\tassertTrue(map.contains(someTypeObject1));\n\t\tassertFalse(map.contains(someTypeObject2));\n\t\tassertEquals(2, map.size());\n\t}\n']",INSTANCE;EPackage;some;Fill;core;Instance;fill;Root;Array;Map,1.862645149230957e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.525666236877441, -5.091607570648193, -5.47643518447876, -6.4877400398254395, -5.428635120391846, -0.020433984696865082]",0.9797734022140503
1,"['\t@Test\n\tpublic void testSyntaxErrorMessage() throws IOException {\n\t\tfinal String message = ""hi"";\n\t\tString [] issueCodes = { null, ""issue"" };\n\t\tString [][] issueDatas = { null, {null}, {""issue data""}};\n\t\t\n\t\tfor (String[] issueData : issueDatas) {\n\t\t\tfor (String issueCode : issueCodes) {\n\t\t\t\tSyntaxErrorMessage sem = new SyntaxErrorMessage(message, issueCode, issueData);\n\t\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream ();\n\t\t\t\tDataOutputStream dout = new DataOutputStream(out);\n\t\t\t\tSerializationUtil.writeSyntaxErrorMessage(dout, null, sem);\n\t\t\t\tdout.close();\n\t\t\t\tbyte[] array = out.toByteArray();\n\t\t\t\tByteArrayInputStream in = new ByteArrayInputStream(array); \n\t\t\t\tDataInputStream din = new DataInputStream(in);\n\t\t\t\tSyntaxErrorMessage sem2 = SerializationUtil.readSyntaxErrorMessage(din, null);\n\t\t\t\tassertEquals(sem, sem2); \n\t\t\t}\n\t\t}\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream ();\n\t\tDataOutputStream dout = new DataOutputStream(out);\n\t\tSerializationUtil.writeSyntaxErrorMessage(dout, null, null);\n\t\tdout.close();\n\t\tbyte[] array = out.toByteArray();\n\t\tByteArrayInputStream in = new ByteArrayInputStream(array); \n\t\tDataInputStream din = new DataInputStream(in);\n\t\tSyntaxErrorMessage readMessage = SerializationUtil.readSyntaxErrorMessage(din, null);\n\t\tassertNull(readMessage);\n\t}\n']",Error;Syntax;Message;Syntax;read;read;Serialization;Error;Error;Input,1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.45365047454834, -5.090034008026123, -5.394837856292725, -6.446360111236572, -5.430795669555664, -0.021166624501347542]",0.9790557026863098
1,"['\t@Test\n\tpublic void testClone_2() throws Exception {\n\t\tResourceSetImpl sourceSet = new DerivedStateAwareResourceSet();\n\t\tDerivedStateAwareResource resource = (DerivedStateAwareResource) sourceSet.createResource(URI\n\t\t\t\t.createURI(""http://derived.res""));\n\t\tboolean stateToCheck = !resource.isFullyInitialized();\n\t\tresource.setFullyInitialized(stateToCheck);\n\t\t\n\t\tResource targetRes = EcoreUtil2.clone(new DerivedStateAwareResourceSet(), sourceSet).getResources().get(0);\n\t\t\n\t\tassertTrue(targetRes instanceof DerivedStateAwareResource);\n\t\tassertEquals(""FullyInitialized flag not copied "", stateToCheck, ((DerivedStateAwareResource) targetRes).isFullyInitialized());\n\t}\n']",core;Derived;res;URI;ware;Resource;ully;Derived;State;source,1.280568540096283e-09;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.51314115524292, -5.000187873840332, -5.417957305908203, -6.494809627532959, -5.451239109039307, -0.021232331171631813]",0.9789915084838867
1,"['\t@Test public void testModifyAndRead() throws Exception {\n\t\t\tpublic void uncaughtException(Thread t, Throwable e) {\n\t\t\t\texceptions.add(e);\n\t\t\t}\n']",Read;uncaught;Exception;Thread;Throwable;Exception;exceptions;Modify;add,1.1641532182693481e-09;1.0477378964424133e-09;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;1.1641532182693481e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.584527492523193, -5.010909557342529, -5.325511455535889, -6.459654808044434, -5.433422088623047, -0.02144809439778328]",0.9787802696228027
1,['\t@Test \n\tpublic void testValidatorExists_0() {\n\t\tassertValidatorExists();\n\t}\n'],Exists;Exists;Validator;Validator,3.4924596548080444e-10;3.4924596548080444e-10;-2.3283064365386963e-10;-5.820766091346741e-10,5,5,"[-5.640136241912842, -4.867222785949707, -5.453190326690674, -6.559751510620117, -5.521080017089844, -0.021169891580939293]",0.9790524840354919
1,['\t@Test \n\tpublic void testValidatorExists_1() {\n\t\tassertValidatorExists();\n\t}\n'],Exists;Validator;Exists;Validator,2.270098775625229e-09;1.1641532182693481e-09;6.984919309616089e-10;-9.604264050722122e-10,5,5,"[-5.643187999725342, -4.8627119064331055, -5.449880123138428, -6.559706211090088, -5.521697521209717, -0.02120642177760601]",0.9790167212486267
1,"['\t@Test\n\tpublic void testDirsAndFilesAreCreated() throws Exception {\n\t\tFile dir = null;\n\t\tFile textFile = null;\n\t\tFile binFile = null;\n\t\ttry {\n\t\t\tJavaIoFileSystemAccess fileSystemAccess = new JavaIoFileSystemAccess(\n\t\t\t\t\tIResourceServiceProvider.Registry.INSTANCE, new IEncodingProvider.Runtime());\n\n\t\t\tFile tmpDir = configureFileSystemAccess(fileSystemAccess);\n\t\t\tfileSystemAccess.generateFile(""tmp/X"", ""XX"");\n\t\t\tfileSystemAccess.generateFile(""tmp/Y"", new StringInputStream(""\\1\\2\\3""));\n\n\t\t\tdir = new File(tmpDir, ""tmp"");\n\t\t\tassertTrue(dir.exists());\n\t\t\tassertTrue(dir.isDirectory());\n\n\t\t\ttextFile = new File(dir, ""X"");\n\t\t\tassertTrue(textFile.exists());\n\t\t\tassertTrue(textFile.isFile());\n\t\t\tassertEquals(""XX"", fileSystemAccess.readTextFile(""tmp/X""));\n\n\t\t\tbinFile = new File(dir, ""Y"");\n\t\t\tassertTrue(binFile.exists());\n\t\t\tassertFalse(fileSystemAccess.isFile(""tmp"", IFileSystemAccess.DEFAULT_OUTPUT)); // isFile evaluates to false for directories\n\t\t\tassertTrue(fileSystemAccess.isFile(""tmp/Y"", IFileSystemAccess.DEFAULT_OUTPUT));\n\t\t\tassertTrue(binFile.isFile());\n\t\t\tInputStream stream = fileSystemAccess.readBinaryFile(""tmp/Y"");\n\t\t\ttry {\n\t\t\t\tassertEquals(""\\1\\2\\3"", new String(ByteStreams.toByteArray(stream)));\n\t\t\t} finally {\n\t\t\t\tstream.close();\n\t\t\t}\n\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (textFile != null)\n\t\t\t\t\ttextFile.delete();\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (binFile != null)\n\t\t\t\t\t\tbinFile.delete();\n\t\t\t\t} finally {\n\t\t\t\t\tif (dir != null)\n\t\t\t\t\t\tdir.delete();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n']",DEFAULT;text;Equals;null;bin;bin;tmp;File;irs;Service,8.149072527885437e-10;5.675246939063072e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.483999729156494, -4.991207122802734, -5.381913185119629, -6.444231986999512, -5.489404201507568, -0.02149849943816662]",0.9787308573722839
1,"['\t@Test\n\tpublic void testURI() throws Exception {\n\t\tJavaIoFileSystemAccess fileSystemAccess = new JavaIoFileSystemAccess();\n\t\tfileSystemAccess.setOutputPath(""testOutput"", ""/testDir"");\n\t\tURI uri = fileSystemAccess.getURI(""testFile"", ""testOutput"");\n\t\tString expectedUri = new File(new File(File.separator + ""testDir""), ""testFile"").toURI().toString();\n\t\tassertEquals(expectedUri, uri.toString());\n\t}\n']",Java;Equals;Access;Dir;Output;Access;to;System;File;new,8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.5395731925964355, -5.0101423263549805, -5.445499897003174, -6.532853603363037, -5.476542949676514, -0.020766571164131165]",0.9794475436210632
1,"['\t@Test\n\tpublic void testEncoding() throws Exception {\n\t\tFile file = null;\n\t\tFileInputStream fileInputStream = null;\n\t\ttry {\n\t\t\tJavaIoFileSystemAccess fileSystemAccess = new JavaIoFileSystemAccess(\n\t\t\t\t\tIResourceServiceProvider.Registry.INSTANCE, new IEncodingProvider() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic String getEncoding(URI uri) {\n\t\t\t\t\t\t\treturn ""ISO-8859-1"";\n\t\t\t\t\t\t}\n']",null;Encoding;Service;Provider;file;Input;return;Encoding;Encoding;ur,1.1059455573558807e-09;7.8580342233181e-10;6.693881005048752e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.518636226654053, -4.955429553985596, -5.369065761566162, -6.457645893096924, -5.499186992645264, -0.02160513401031494]",0.9786266088485718
1,"['\t@Test\n\tpublic void testTraceIsCreated() throws Exception {\n\t\tFile file = null;\n\t\ttry {\n\n\t\t\tJavaIoFileSystemAccess fileSystemAccess = new JavaIoFileSystemAccess(\n\t\t\t\t\tIResourceServiceProvider.Registry.INSTANCE, new IEncodingProvider.Runtime(),\n\t\t\t\t\tnew TraceFileNameProvider(), new TraceRegionSerializer());\n\n\t\t\tFile tmpDir = configureFileSystemAccess(fileSystemAccess);\n\t\t\tSourceRelativeURI uri = new SourceRelativeURI(URI.createURI(""foo/bar""));\n\t\t\tCharSequenceTraceWrapper wrapper = new CharSequenceTraceWrapper();\n\t\t\tfileSystemAccess.generateFile(""tmp/X"", wrapper.wrapWithTraceData(""XX"", uri, 0, 10, 0, 1));\n\n\t\t\tfile = new File(tmpDir, ""tmp/X"");\n\t\t\tassertTrue(file.exists());\n\t\t\tassertTrue(file.isFile());\n\t\t\tassertEquals(""XX"", fileSystemAccess.readTextFile(""tmp/X""));\n\n\t\t\tfile = new File(tmpDir, ""tmp/.X._trace"");\n\t\t\tassertTrue(file.exists());\n\t\t\tassertTrue(file.isFile());\n\n\t\t} finally {\n\t\t\tif (file != null)\n\t\t\t\tfile.delete();\n\t\t}\n\t}\n']",Exception;Sequence;Created;foo;Char;wrap;Relative;System;Registry;tmp,2.3283064365386963e-09;1.076841726899147e-09;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.505929470062256, -5.027472972869873, -5.430644989013672, -6.48552131652832, -5.4680891036987305, -0.02096107229590416]",0.9792571067810059
1,"['\t@Test\n\tpublic void testConstructor() {\n\t\tTraceRegion region = new TraceRegion(0, 1, 0, 0, true, 2, 3, 0, 0, null, newURI());\n\t\tassertEquals(0, region.getMyOffset());\n\t\tassertEquals(1, region.getMyLength());\n\t\tassertEquals(2, region.getMergedAssociatedLocation().getOffset());\n\t\tassertEquals(3, region.getMergedAssociatedLocation().getLength());\n\t\tassertEquals(newURI(), region.getAssociatedSrcRelativePath());\n\t\tassertNull(region.getParent());\n\t\tassertTrue(region.getNestedRegions().isEmpty());\n\t}\n']",Trace;Trace;Path;Location;URI;region;Constructor;Associated;Offset;get,1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.577553749084473, -5.0102763175964355, -5.386480331420898, -6.472385406494141, -5.479416847229004, -0.02096445858478546]",0.9792537689208984
1,"['\t@Test\n\tpublic void testConstructorWithParent() {\n\t\tTraceRegion parent = new TraceRegion(0, 1, 0, 0, true, 2, 3, 0, 0, null, newURI());\n\t\tTraceRegion region = new TraceRegion(0, 1, 0, 0, true, 2, 3, 0, 0, parent, null);\n\t\tassertEquals(newURI(), region.getAssociatedSrcRelativePath());\n\t\tassertEquals(parent, region.getParent());\n\t}\n']",URI;Parent;Constructor;null;get;Region;Equals;parent;Path;Relative,1.280568540096283e-09;1.1641532182693481e-09;1.1059455573558807e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.729372449219227e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.573659896850586, -5.027990341186523, -5.435227394104004, -6.4910807609558105, -5.46982479095459, -0.02064945362508297]",0.9795624017715454
1,"['\t@Test(expected = IllegalArgumentException.class)\n\tpublic void testConstructorInvalidArgs_01() {\n\t\tnew TraceRegion(-1, 0, 0, 0, true, 0, 0, 0, 0, null, newURI());\n\t}\n']",URI;Invalid;Args;Region;class;new;true;null;expected;Exception,2.444721758365631e-09;2.0954757928848267e-09;1.0477378964424133e-09;1.0477378964424133e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;0.0,5,5,"[-5.620621204376221, -4.892360210418701, -5.409995079040527, -6.51557731628418, -5.4873785972595215, -0.02144494466483593]",0.978783369064331
1,"['\t@Test(expected = IllegalArgumentException.class)\n\tpublic void testConstructorInvalidArgs_02() {\n\t\tnew TraceRegion(0, -1, 0, 0, true, 0, 0, 0, 0, null, newURI());\n\t}\n']",URI;Region;Invalid;Argument;Constructor;Exception;Args;Trace;true;null,2.153683453798294e-09;9.313225746154785e-10;6.984919309616089e-10;3.4924596548080444e-10;3.2014213502407074e-10;1.1641532182693481e-10;0.0;0.0;-5.820766091346741e-11;-2.3283064365386963e-10,5,5,"[-5.613670349121094, -4.897600173950195, -5.399461269378662, -6.513201713562012, -5.479373931884766, -0.0215165838599205]",0.9787132740020752
1,"['\t@Test(expected = IllegalArgumentException.class)\n\tpublic void testConstructorInvalidArgs_03() {\n\t\tnew TraceRegion(0, 0, -1, 0, true, 0, 0, 0, 0, null, newURI());\n\t}\n']",Illegal;expected;Constructor;Exception;null;new;Argument;Args;new;Invalid,1.0477378964424133e-09;9.313225746154785e-10;7.421476766467094e-10;5.238689482212067e-10;4.0745362639427185e-10;2.3283064365386963e-10;0.0;0.0;-2.1827872842550278e-10;-2.3283064365386963e-10,5,5,"[-5.616683006286621, -4.901240825653076, -5.4004364013671875, -6.51124382019043, -5.480093002319336, -0.02147306501865387]",0.9787558317184448
1,"['\t@Test(expected = IllegalArgumentException.class)\n\tpublic void testConstructorInvalidArgs_04() {\n\t\tnew TraceRegion(0, 0, 0, -1, true, 0, 0, 0, 0, null, newURI());\n\t}\n']",Args;expected;Exception;Invalid;null;new;new;Argument;Region;Constructor,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;2.764863893389702e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.9103830456733704e-10,5,5,"[-5.620173931121826, -4.899599552154541, -5.399466514587402, -6.507936000823975, -5.4816670417785645, -0.02147551439702511]",0.9787534475326538
1,"['\t@Test(expected = IllegalArgumentException.class)\n\tpublic void testConstructorInvalidArgs_05() {\n\t\tnew TraceRegion(0, 0, 0, 0, true, 0, 0, 0, 0, null, null);\n\t}\n']",Illegal;null;Argument;class;true;Args;new;null;Invalid;Exception,9.313225746154785e-10;5.238689482212067e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.0745362639427185e-10,5,5,"[-5.636586666107178, -4.899580478668213, -5.398810386657715, -6.501089572906494, -5.487802982330322, -0.021402940154075623]",0.9788246154785156
1,"['\t@Test\n\tpublic void testLeafIterator_NoChildren() {\n\t\tTraceRegion region = new TraceRegion(0, 1, 1, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tIterator<AbstractTraceRegion> iter = region.leafIterator();\n\t\tassertEquals(Collections.singleton(region).iterator(), iter);\n\t}\n']",No;Collections;new;Region;singleton;true;iter;Trace;region;null,1.4842953532934189e-09;1.3387762010097504e-09;8.731149137020111e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.566263198852539, -4.977622032165527, -5.420809268951416, -6.502175807952881, -5.4683661460876465, -0.02107756771147251]",0.9791430234909058
1,"['\t@Test\n\tpublic void testLeafIterator_OneChild() {\n\t\tTraceRegion parent = new TraceRegion(0, 1, 1, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tTraceRegion region = new TraceRegion(0, 1, 1, 2, true, 2, 3, 0, 0, parent, null);\n\t\tIterator<AbstractTraceRegion> iter = parent.leafIterator();\n\t\tassertEquals(Collections.singleton(region).iterator(), iter);\n\t}\n']",Child;Trace;Region;leaf;new;parent;iterator;true;Trace;parent,2.2118911147117615e-09;1.6880221664905548e-09;1.0477378964424133e-09;8.149072527885437e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.557619094848633, -5.013155460357666, -5.427350997924805, -6.489656925201416, -5.454759120941162, -0.020914725959300995]",0.9793024659156799
1,"['\t@Test\n\tpublic void testLeafIterator_GrandChild() {\n\t\tTraceRegion root = new TraceRegion(0, 1, 1, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tTraceRegion parent = new TraceRegion(0, 1, 1, 2, true, 2, 3, 0, 0, root, null);\n\t\tTraceRegion region = new TraceRegion(0, 1, 1, 2, true, 2, 3, 0, 0, parent, null);\n\t\tIterator<AbstractTraceRegion> iter = root.leafIterator();\n\t\tassertEquals(Collections.singleton(region).iterator(), iter);\n\t}\n']",Collections;leaf;URI;region;root;new;root;Trace;Abstract;singleton,1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.560688495635986, -5.031473636627197, -5.447024345397949, -6.492790699005127, -5.452324867248535, -0.02069779671728611]",0.9795149564743042
1,"['\t@Test\n\tpublic void testLeafIterator_TwoChildren_NoGaps() {\n\t\tTraceRegion parent = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tTraceRegion first = new TraceRegion(0, 1, 0, 1, true, 2, 3, 0, 0, parent, null);\n\t\tTraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, parent, null);\n\t\tIterator<AbstractTraceRegion> iter = parent.leafIterator();\n\t\tassertEquals(Arrays.asList(first, second).iterator(), iter);\n\t}\n']",URI;Leaf;Trace;Trace;Iterator;Region;new;Region;parent;Trace,2.7939677238464355e-09;2.735760062932968e-09;2.444721758365631e-09;1.979060471057892e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;8.731149137020111e-10;7.8580342233181e-10;5.820766091346741e-10,5,5,"[-5.564048767089844, -5.042675495147705, -5.448375225067139, -6.474945068359375, -5.455630302429199, -0.020617807283997536]",0.9795932769775391
1,"['\t@Test\n\tpublic void testLeafIterator_OneChild_LeftGap() {\n\t\tfinal TraceRegion parent = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tAbstractTraceRegion first = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(0, 1, 0, 1), true, new LocationData(2, 3, 0, 0, null), parent) {};\n\t\tTraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, parent, null);\n\t\tIterator<AbstractTraceRegion> iter = parent.leafIterator();\n\t\tassertEquals(Arrays.asList(first, second).iterator(), iter);\n\t}\n']",Leaf;as;ap;leaf;Trace;Stateful;first;Abstract;Information;Iterator,1.7462298274040222e-09;1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.56437349319458, -5.005189895629883, -5.4172868728637695, -6.476987361907959, -5.459725379943848, -0.020986054092645645]",0.9792326092720032
1,"['\t@Test\n\tpublic void testLeafIterator_OneChild_RightGap() {\n\t\tfinal TraceRegion parent = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tAbstractTraceRegion first = new TraceRegion(0, 1, 0, 1, true, 3, 4, 0, 0, parent, null);\n\t\tAbstractTraceRegion second = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(1, 1, 1, 2), true, new LocationData(2, 3, 0, 0, null), parent) {};\n\t\tIterator<AbstractTraceRegion> iter = parent.leafIterator();\n\t\tassertEquals(Arrays.asList(first, second).iterator(), iter);\n\t}\n']",Child;URI;ap;Text;Trace;Region;parent;Arrays;Iterator;Data,1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10;7.8580342233181e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;5.238689482212067e-10;4.3655745685100555e-10,5,5,"[-5.5639214515686035, -5.0205206871032715, -5.417259216308594, -6.472927093505859, -5.456873893737793, -0.02090270258486271]",0.979314386844635
1,"['\t@Test\n\tpublic void testLeafIterator_OneGrandChild_LeftGap() {\n\t\tfinal TraceRegion root = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tAbstractTraceRegion first = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(0, 1, 0, 1), true, new LocationData(2, 3, 0, 0, null), root) {};\n\t\tTraceRegion parent = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, root, null);\n\t\tTraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, parent, null);\n\t\tIterator<AbstractTraceRegion> iter = root.leafIterator();\n\t\tassertEquals(Arrays.asList(first, second).iterator(), iter);\n\t}\n']",Leaf;Trace;final;One;Iterator;Trace;null;List;Trace;Iterator,6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.553598403930664, -5.019040584564209, -5.417529582977295, -6.469991207122803, -5.452794075012207, -0.020974380895495415]",0.9792439341545105
1,"['\t@Test\n\tpublic void testLeafIterator_OneGrandChild_RightGap() {\n\t\tfinal TraceRegion root = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tTraceRegion parent = new TraceRegion(0, 1, 0, 1, true, 3, 4, 0, 0, root, null);\n\t\tTraceRegion first = new TraceRegion(0, 1, 0, 1, true, 3, 4, 0, 0, parent, null);\n\t\tAbstractTraceRegion second = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(1, 1, 1, 2), true, new LocationData(2, 3, 0, 0, null), root) {};\n\t\tIterator<AbstractTraceRegion> iter = root.leafIterator();\n\t\tassertEquals(Arrays.asList(first, second).iterator(), iter);\n\t}\n']",root;Child;Trace;Line;Trace;parent;Arrays;Region;Trace;final,2.3283064365386963e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;3.637978807091713e-10;3.2014213502407074e-10,5,5,"[-5.5511088371276855, -5.012730121612549, -5.409890651702881, -6.464858531951904, -5.457382678985596, -0.021049905568361282]",0.9791700839996338
1,"['\t@Test\n\tpublic void testLeafIterator_TwoGrandChildren_NoGaps_01() {\n\t\tTraceRegion root = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tTraceRegion parent = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, root, null);\n\t\tTraceRegion first = new TraceRegion(0, 1, 0, 1, true, 2, 3, 0, 0, parent, null);\n\t\tTraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, parent, null);\n\t\tIterator<AbstractTraceRegion> iter = root.leafIterator();\n\t\tassertEquals(Arrays.asList(first, second).iterator(), iter);\n\t}\n']",Trace;root;Arrays;Region;Children;Trace;Iterator;true;new;null,1.0477378964424133e-09;6.402842700481415e-10;6.402842700481415e-10;4.5838532969355583e-10;4.3655745685100555e-10;4.220055416226387e-10;3.346940502524376e-10;3.055902197957039e-10;2.473825588822365e-10;2.4010660126805305e-10,5,5,"[-5.540765285491943, -5.057895183563232, -5.442177772521973, -6.468514442443848, -5.448785305023193, -0.020677829161286354]",0.9795345067977905
1,"['\t@Test\n\tpublic void testLeafIterator_TwoGrandChildren_NoGaps_02() {\n\t\tTraceRegion root = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());\n\t\tTraceRegion firstParent = new TraceRegion(0, 1, 0, 1, true, 2, 3, 0, 0, root, null);\n\t\tTraceRegion first = new TraceRegion(0, 1, 0, 1, true, 2, 3, 0, 0, firstParent, null);\n\t\tTraceRegion secondParent = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, root, null);\n\t\tTraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, secondParent, null);\n\t\tIterator<AbstractTraceRegion> iter = root.leafIterator();\n\t\tassertEquals(Arrays.asList(first, second).iterator(), iter);\n\t}\n']",Trace;Trace;URI;Iterator;Trace;Trace;first;Region;Trace;Iterator,9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.548158168792725, -5.037867546081543, -5.4275617599487305, -6.462986469268799, -5.452407360076904, -0.02083779126405716]",0.9793779253959656
1,"['\t@Test\n\tpublic void testLeafIterator_TwoChildren_WithGaps() {\n\t\tfinal TraceRegion parent = new TraceRegion(0, 3, 0, 3, true, 2, 3, 0, 0, null, newURI());\n\t\tTraceRegion first = new TraceRegion(0, 1, 0, 1, true, 2, 3, 0, 0, parent, null);\n\t\tAbstractTraceRegion second = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(1, 1, 1, 2), true, new LocationData(2, 3, 0, 0, null), parent) {};\n\t\tAbstractTraceRegion third = new TraceRegion(2, 1, 2, 3, true, 3, 4, 0, 0, parent, null);\n\t\tIterator<AbstractTraceRegion> iter = parent.leafIterator();\n\t\tassertEquals(Arrays.asList(first, second, third).iterator(), iter);\n\t}\n']",Region;Two;Text;aps;new;Trace;Location;URI;Information;Stateful,1.3387762010097504e-09;1.0477378964424133e-09;9.89530235528946e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.545821189880371, -5.022185802459717, -5.416298866271973, -6.466499328613281, -5.457757472991943, -0.020973680540919304]",0.9792448282241821
1,"['\t@Test\n\tpublic void testAnnotate_01() {\n\t\tTraceRegion region = new TraceRegion(0, 1, 0, 0, true, 2, 3, 0, 0, null, newURI());\n\t\tassertEquals(""<2:3[a]"", region.getAnnotatedString(""a""));\n\t}\n']",Region;An;true;region;ated;ate;Trace;Trace;region;new,8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;-2.9103830456733704e-11;-1.1641532182693481e-10,5,5,"[-5.574640274047852, -4.967231750488281, -5.451432704925537, -6.513175964355469, -5.474143028259277, -0.020940760150551796]",0.9792769551277161
1,"['\t@Test\n\tpublic void testAnnotate_02() {\n\t\tTraceRegion region = new TraceRegion(1, 1, 0, 0, true, 2, 3, 0, 0, null, newURI());\n\t\tassertEquals(""a<2:3[b]c"", region.getAnnotatedString(""abc""));\n\t}\n']",Trace;region;Region;Region;new;true;An;abc;An;get,2.561137080192566e-09;1.280568540096283e-09;8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.4551915228366852e-10;0.0,5,5,"[-5.571863651275635, -4.9736738204956055, -5.449939727783203, -6.5119194984436035, -5.477540016174316, -0.020899783819913864]",0.9793171286582947
1,"['\t@Test\n\tpublic void testAnnotate_03() {\n\t\tTraceRegion parent = new TraceRegion(0, 4, 0, 0, true, 1, 2, 0, 0, null, newURI());\n\t\tnew TraceRegion(0, 1, 0, 0, true, 3, 4, 0, 0, parent, null);\n\t\tnew TraceRegion(2, 1, 0, 0, true, 5, 6, 0, 0, parent, null);\n\t\tnew TraceRegion(3, 1, 0, 0, true, 7, 8, 0, 0, parent, null);\n\t\tassertEquals(""<1:2[<3:4[a]b<5:6[c]<7:8[d]]e"", parent.getAnnotatedString(""abcde""));\n\t}\n']",abcde;ated;Region;URI;new;Trace;Equals;null;null;parent,2.0954757928848267e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.521924018859863, -5.037902355194092, -5.436174392700195, -6.466408729553223, -5.440577507019043, -0.02095138281583786]",0.9792665839195251
1,"['\t@Test\n\tpublic void testAnnotate_04() {\n\t\tTraceRegion root = new TraceRegion(0, 4, 0, 0, true, 1, 2, 0, 0, null, newURI());\n\t\tTraceRegion parent = new TraceRegion(1, 2, 0, 0, true, 3, 4, 0, 0, root, null);\n\t\tnew TraceRegion(2, 1, 0, 0, true, 5, 6, 0, 0, parent, null);\n\t\tassertEquals(""<1:2[a<3:4[b<5:6[c]]d]e"", root.getAnnotatedString(""abcde""));\n\t}\n']",abcde;Region;Trace;ate;get;Equals;new;URI;new;null,6.868503987789154e-09;1.4551915228366852e-09;1.3969838619232178e-09;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.523756504058838, -5.054745197296143, -5.459744453430176, -6.4839935302734375, -5.442096710205078, -0.02069522812962532]",0.9795174598693848
1,"['    @Test\n    public void testMin() throws Exception {\n        Assert.assertEquals(1.0D, m.min(), 0.0D);\n    }\n']",min;Exception;Min;Assert;Equals,1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;-3.4924596548080444e-10;-8.149072527885437e-10,5,5,"[-5.580528259277344, -4.925249099731445, -5.335691928863525, -6.444829940795898, -5.506976127624512, -0.0217294879257679]",0.9785048961639404
1,"['    @Test\n    public void testMax() throws Exception {\n        Assert.assertEquals(100.0D, m.max(), 0.0D);\n    }\n']",Exception;max;Assert;Max;Equals,9.313225746154785e-10;-1.7462298274040222e-10;-6.402842700481415e-10;-6.984919309616089e-10;-7.566995918750763e-10,5,5,"[-5.5899224281311035, -4.976657390594482, -5.339620113372803, -6.44121789932251, -5.495492935180664, -0.021356264129281044]",0.978870153427124
1,"['    @Test\n    public void testAvg() throws Exception {\n        int sum = 0;\n        for (int i = 1; i <= 100; i++) {\n            sum += i;\n        }\n        Assert.assertEquals((sum / 100.0D), m.avg(), 0.0D);\n    }\n']",Avg;av;sum;sum;Exception;Equals;Assert;sum,1.3969838619232178e-09;7.566995918750763e-10;6.402842700481415e-10;-8.731149137020111e-11;-2.3283064365386963e-10;-3.2014213502407074e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-5.519771099090576, -5.007686138153076, -5.331078052520752, -6.415446758270264, -5.47764778137207, -0.021578418090939522]",0.978652834892273
1,"['    @Test\n    public void testCount() throws Exception {\n        Assert.assertEquals(100.0D, m.count(), 0.0D);\n    }\n']",Assert;Equals;count;Exception;Count,2.6193447411060333e-10;1.7462298274040222e-10;5.820766091346741e-11;0.0;-6.984919309616089e-10,5,5,"[-5.583017826080322, -5.020518779754639, -5.349874019622803, -6.447960376739502, -5.4671950340271, -0.021139662712812424]",0.9790821075439453
1,"['    @Test\n    public void test50thPercentile() throws Exception {\n        Assert.assertEquals(50.0D, m.getPercentile(50), 0.0D);\n    }\n']",Percentile;Exception;Percentile;th;Equals;get;Assert,1.862645149230957e-09;9.313225746154785e-10;2.3283064365386963e-10;-1.7462298274040222e-10;-1.7462298274040222e-10;-3.2014213502407074e-10;-5.238689482212067e-10,5,5,"[-5.606050491333008, -4.888676643371582, -5.385671138763428, -6.498209476470947, -5.524068355560303, -0.021514249965548515]",0.9787155389785767
1,"['    @Test\n    public void test75thPercentile() throws Exception {\n        Assert.assertEquals(75.0D, m.getPercentile(75), 0.0D);\n    }\n']",Exception;Equals;Assert;get;Percentile;Percentile;th,3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;2.9103830456733704e-11;-6.984919309616089e-10;-1.3387762010097504e-09;-1.8044374883174896e-09,5,5,"[-5.610189437866211, -4.905210971832275, -5.382129192352295, -6.4903154373168945, -5.529757499694824, -0.02137831784784794]",0.9788486957550049
1,"['    @Test\n    public void test90thPercentile() throws Exception {\n        Assert.assertEquals(90.0D, m.getPercentile(90), 0.0D);\n    }\n']",th;Percentile;Assert;Percentile;get;Exception;Equals,2.270098775625229e-09;6.984919309616089e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-1.0040821507573128e-09,5,5,"[-5.604778289794922, -4.883704662322998, -5.378166198730469, -6.495194911956787, -5.526832103729248, -0.02158600091934204]",0.9786453247070312
1,"['    @Test\n    public void test99thPercentile() throws Exception {\n        Assert.assertEquals(99.0D, m.getPercentile(99), 0.0D);\n    }\n']",Exception;Percentile;th;get;Equals;Percentile;Assert,1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.4551915228366852e-10;-2.3283064365386963e-10;-5.820766091346741e-10;-7.566995918750763e-10,5,5,"[-5.610951900482178, -4.902516841888428, -5.382457733154297, -6.489621162414551, -5.528266906738281, -0.021401304751634598]",0.978826105594635
1,"['    @Test\n    public void testSerialization() throws Exception {\n        MetricParser metricParser = new MetricParser();\n        Tag t1 = new Tag(""tag1=value1"");\n        Tag t2 = new Tag(""tag2=value2"");\n        Tag avg = new Tag(""sample=avg"");\n        Tag min = new Tag(""sample=min"");\n        Tag max = new Tag(""sample=max"");\n        Tag sum = new Tag(""sample=sum"");\n        Tag count = new Tag(""sample=count"");\n        Tag p50 = new Tag(""sample=50p"");\n        Tag p75 = new Tag(""sample=75p"");\n        Tag p90 = new Tag(""sample=90p"");\n        Tag p99 = new Tag(""sample=99p"");\n\n        List<Tag> tags = new ArrayList<>();\n        tags.add(t1);\n        tags.add(t2);\n        m.initialize(""sys.cpu.user"", tags);\n\n        byte[] bytes = m.serialize(m);\n        String puts = new String(bytes);\n        for (String put : puts.split(""\\n"")) {\n            Metric metric = metricParser.parse(put);\n            Assert.assertEquals(""sys.cpu.user_summarized"", metric.getName());\n            metric.getTags().forEach(t -> {\n                Assert.assertTrue(\n                        t.equals(t1) || t.equals(t2) || t.equals(avg) || t.equals(min) || t.equals(max) || t.equals(sum)\n                                || t.equals(count) || t.equals(p50) || t.equals(p75) || t.equals(p90) || t.equals(p99));\n            });\n        }\n    }\n']",cpu;cpu;Tag;Parser;summarized;new;initialize;add;Assert;put,1.7462298274040222e-09;1.0477378964424133e-09;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.378652572631836, -5.09672212600708, -5.41942834854126, -6.450596332550049, -5.414581298828125, -0.021418925374746323]",0.9788087010383606
1,"['    @Test\n    public void testWrite() throws Exception {\n        Thread t = new Thread(server);\n        t.start();\n        setupPlugin();\n        while (!server.ready()) {\n            Thread.sleep(1000);\n        }\n        Assert.assertEquals(0, plugin.write(createMetric()));\n        Thread.sleep(100);\n        Assert.assertTrue(server.messageReceived());\n        plugin.shutdown();\n        server.shutdown();\n        t.join();\n    }\n']",Metric;sleep;Exception;plugin;new;server;server;setup;Thread;while,1.862645149230957e-09;1.2223608791828156e-09;1.1059455573558807e-09;7.566995918750763e-10;6.693881005048752e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;1.6007106751203537e-10,5,5,"[-5.5145673751831055, -5.01552152633667, -5.460806369781494, -6.486159801483154, -5.505885124206543, -0.02071215957403183]",0.9795008897781372
1,"['    @Test\n    public void testWriteAfterServerRestart() throws Exception {\n        Thread t = new Thread(server);\n        t.start();\n        setupPlugin();\n        while (!server.ready()) {\n            Thread.sleep(1000);\n        }\n        Assert.assertEquals(0, plugin.write(createMetric()));\n        Thread.sleep(100);\n        Assert.assertTrue(server.messageReceived());\n        server.shutdown();\n        t.join();\n        Thread.sleep(2000);\n\n        server.create();\n        Thread t2 = new Thread(server);\n        t2.start();\n        // Need to call this again because the server is not guaranteed to be\n        // listening on the same local port as the first time that it was\n        // started\n        setupPlugin();\n        while (!server.ready()) {\n            Thread.sleep(1000);\n            // Keep sending metrics to plugin to force reconnect\n            int result = plugin.write(createMetric());\n            System.out.println(""Wrote to client, result: "" + result);\n            Assert.assertEquals(0, result);\n        }\n        Assert.assertEquals(0, plugin.write(createMetric()));\n        Thread.sleep(1000);\n        Assert.assertTrue(server.messageReceived());\n        plugin.shutdown();\n        server.shutdown();\n        t2.join();\n    }\n']",setup;ready;join;Server;Exception;out;Received;to;start;create,1.3969838619232178e-09;6.693881005048752e-10;5.602487362921238e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.444787502288818, -5.058680057525635, -5.3957438468933105, -6.4297099113464355, -5.445440769195557, -0.021363966166973114]",0.9788626432418823
1,"['    @Test\n    public void testParseWithEscapedCharacters() {\n\n        MetricParser parser = new MetricParser();\n        Metric m = parser.parse(""put mymetric 12341234 5.0 tag1=value1,value1 tag2=value2=value2"");\n\n        Assert.assertEquals(""mymetric"", m.getName());\n        Assert.assertEquals(12341234, (long) m.getValue().getTimestamp());\n        Assert.assertEquals(5.0, (double) m.getValue().getMeasure(), 0);\n        List<Tag> expected = new ArrayList<>();\n        expected.add(new Tag(""tag1"", ""value1,value1""));\n        expected.add(new Tag(""tag2"", ""value2=value2""));\n        Assert.assertEquals(expected, m.getTags());\n    }\n']",Metric;Parser;parser;Parser;Timestamp;Characters;Measure;double;Tag;put,4.423782229423523e-09;3.725290298461914e-09;1.862645149230957e-09;1.6298145055770874e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10,5,5,"[-5.495449542999268, -5.054413795471191, -5.436045169830322, -6.491886138916016, -5.468104362487793, -0.02079284004867077]",0.979421854019165
1,"['    @Test\n    public void testParseMalformatted() {\n\n        MetricParser parser = new MetricParser();\n        try {\n            // parser should throw an exception\n            parser.parse(""put mymetric 12341234 5.0 tag1 tag2=value2"");\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n\n        }\n    }\n']",Malformatted;Exception;Parser;Metric;Illegal;catch;should;mymetric;Argument;Parser,1.1059455573558807e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;5.384208634495735e-10;4.220055416226387e-10;3.7834979593753815e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.530797004699707, -4.976152420043945, -5.430966854095459, -6.46976375579834, -5.5040388107299805, -0.021082820370793343]",0.9791378974914551
1,"['    @Test\n    public void testListParse() {\n        String value = ""tag1=value1,tag2=value2"";\n        List<Tag> tags = new TagListParser().parse(value);\n        Assert.assertEquals(2, tags.size());\n        Assert.assertEquals(new Tag(""tag1"", ""value1""), tags.get(0));\n        Assert.assertEquals(new Tag(""tag2"", ""value2""), tags.get(1));\n    }\n']",Parser;Tag;Tag;parse;tag;Assert;Assert;Equals;value;Tag,1.6298145055770874e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;6.257323548197746e-10;5.748006515204906e-10;5.529727786779404e-10;3.4924596548080444e-10,5,5,"[-5.515953063964844, -5.047690391540527, -5.4473137855529785, -6.509698867797852, -5.450870037078857, -0.020749406889081]",0.9794643521308899
1,"['    @Test\n    public void testListCombine() {\n        List<Tag> tags = new ArrayList<>();\n        tags.add(new Tag(""tag1"", ""value1""));\n        tags.add(new Tag(""tag2"", ""value2""));\n        String combined = new TagListParser().combine(tags);\n        Assert.assertEquals(""tag1=value1,tag2=value2"", combined);\n    }\n']",List;Array;List;List;tags;value;new;value;Combine;Tag,1.1059455573558807e-09;1.0477378964424133e-09;8.149072527885437e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.1641532182693481e-10;6.548361852765083e-11;2.9103830456733704e-11;0.0,5,5,"[-5.467517375946045, -5.080668926239014, -5.362049102783203, -6.42567777633667, -5.395249843597412, -0.021516118198633194]",0.9787136912345886
1,"['    @Test\n    public void testListCombineMap() {\n        Map<String, String> map = new TreeMap<>();\n        map.put(""tag1"", ""value1"");\n        map.put(""tag2"", ""value2"");\n        String combined = new TagListParser().combine(map);\n        Assert.assertEquals(""tag1=value1,tag2=value2"", combined);\n    }\n']",tag;Combine;combined;Assert;map;map;tag;Map;map;value,1.0477378964424133e-09;9.89530235528946e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.3096723705530167e-10,5,5,"[-5.5444865226745605, -4.97970724105835, -5.4024434089660645, -6.483519554138184, -5.499237537384033, -0.021130559965968132]",0.9790911078453064
1,"['    @Test\n    public void testParseTagsWithCommas() {\n\n        try {\n            String s = ""tag1=value1,tag2=3.4.3_(default\\\\,_Date\\\\,_Time)_"";\n            new TagListParser().parse(s);\n        } catch (Exception e) {\n            Assert.fail(e.getMessage());\n        }\n    }\n']",Parser;Date;Tags;tag;parse;Parse;new;Tag;Assert;value,1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.539798736572266, -5.012971878051758, -5.407419681549072, -6.473597049713135, -5.48374080657959, -0.020977532491087914]",0.9792409539222717
1,"['    @Test\n    public void testEquals() {\n        Metric m1 = Metric.newBuilder().name(""m1"").tag(""t1"", ""v1"").tag(""t2"", ""v2"").value(1, 0.0).build();\n        Metric m2 = Metric.newBuilder().name(""m1"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(1, 0.0).build();\n\n        assertTrue(m1.equals(m2));\n        assertTrue(m2.equals(m1));\n\n        Metric m3 = Metric.newBuilder().name(""m1"").tag(""t1"", ""v1"").value(1, 0.0).build();\n        assertFalse(m1.equals(m3));\n\n        Metric m4 = Metric.newBuilder().name(""m4"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(1, 0.0).build();\n        assertFalse(m1.equals(m4));\n\n        Metric m5 = Metric.newBuilder().name(""m1"").tag(""t3"", ""v3"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(1, 0.0)\n                .build();\n        assertFalse(m1.equals(m5));\n\n        Metric m6 = Metric.newBuilder().name(""m1"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(2, 0.0).build();\n        assertFalse(m1.equals(m6));\n\n        Metric m7 = Metric.newBuilder().name(""m1"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(1, 1.0).build();\n        assertFalse(m1.equals(m7));\n    }\n']",Equals;Builder;new;name;equals;Metric;Builder;Metric;new;new,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;5.966285243630409e-10;4.729372449219227e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.427849769592285, -5.103854179382324, -5.443843364715576, -6.451743125915527, -5.417391300201416, -0.021024690940976143]",0.9791948795318604
1,"['    @Test\n    public void testJson() throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n\n        String expectedJson = ""{\\""name\\"":\\""m1\\"",\\""timestamp\\"":1,\\""measure\\"":1.0,\\""tags\\"":[{\\""k1\\"":\\""v1\\""}]}"";\n\n        Metric m1 = Metric.newBuilder().name(""m1"").tag(""k1"", ""v1"").value(1, 1.0).build();\n\n        Metric expectedMetric = mapper.readValue(expectedJson, Metric.class);\n\n        assertTrue(m1.equals(expectedMetric));\n\n        expectedJson = ""{\\""name\\"":\\""m1\\"",\\""tags\\"":[{\\""k1\\"":\\""v1\\""}],\\""timestamp\\"":5,\\""measure\\"":5.0}"";\n        expectedMetric = mapper.readValue(expectedJson, Metric.class);\n\n        assertEquals((long) expectedMetric.getValue().getTimestamp(), 5L);\n        assertEquals(expectedMetric.getValue().getMeasure(), 5.0D, 0.0);\n\n    }\n']",Equals;Metric;get;Metric;IOException;expected;son;Metric;build;Measure,1.076841726899147e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.462039947509766, -5.07729434967041, -5.430790901184082, -6.479287147521973, -5.469402313232422, -0.02082541584968567]",0.979390025138855
1,"['    @Test\n    public void testBasicAuth() throws Exception {\n        BasicAuthLogin login = new BasicAuthLogin();\n        login.setUsername(""test"");\n        login.setPassword(""pass"");\n        testSerialization(login);\n    }\n']",new;login;Basic;Serialization;Username;Password;login;Basic;pass;login,6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.55340576171875, -5.011120319366455, -5.435673713684082, -6.50747013092041, -5.48962926864624, -0.02073095738887787]",0.9794824719429016
1,"['    @Test\n    public void testCreateSubscription() throws Exception {\n        CreateSubscription create = new CreateSubscription();\n        create.setSubscriptionId(""1234"");\n        testSerialization(create);\n    }\n']",Serialization;Subscription;new;Create;Create;Subscription;create;Create;Exception;create,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;0.0,5,5,"[-5.537326812744141, -5.005075454711914, -5.437983512878418, -6.515541076660156, -5.476803779602051, -0.02086826227605343]",0.9793479442596436
1,"['    @Test\n    public void testCloseSubscription() throws Exception {\n        CloseSubscription close = new CloseSubscription();\n        close.setSubscriptionId(""1234"");\n        testSerialization(close);\n    }\n']",Serialization;Subscription;Subscription;close;Exception;Close;set;Subscription;Close;close,2.3283064365386963e-09;1.862645149230957e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.545619010925293, -5.017446041107178, -5.4295196533203125, -6.515841484069824, -5.465007781982422, -0.020838841795921326]",0.9793767929077148
1,"['    @Test\n    public void testAddSubscription() throws Exception {\n        AddSubscription add = new AddSubscription();\n        add.setSubscriptionId(""1234"");\n        add.setMetric(""sys.cpu.user"");\n        testSerialization(add);\n    }\n']",Serialization;Metric;sys;new;Exception;Add;Subscription;add;set;Add,3.14321368932724e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.6007106751203537e-10;0.0,5,5,"[-5.5231146812438965, -5.0803914070129395, -5.4679718017578125, -6.511526107788086, -5.451080322265625, -0.0204155296087265]",0.9797914624214172
1,"['    @Test\n    public void testRemoveSubscription() throws Exception {\n        RemoveSubscription remove = new RemoveSubscription();\n        remove.setSubscriptionId(""1234"");\n        remove.setMetric(""sys.cpu.user"");\n        testSerialization(remove);\n    }\n']",Metric;user;remove;Exception;set;remove;set;remove;Remove;Subscription,1.076841726899147e-09;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.511093720793724e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-5.535877227783203, -5.067941665649414, -5.448454856872559, -6.512388229370117, -5.453915119171143, -0.02051457203924656]",0.9796945452690125
1,"['    @Test(expected = IllegalArgumentException.class)\n    public void testSessionIdNull() throws Exception {\n        AuthCache.getAuthorizations("""");\n    }\n']",expected;Authorizations;class;Auth;Session;get;Null;Exception;Exception;Cache,9.313225746154785e-10;5.820766091346741e-10;2.6193447411060333e-10;2.3283064365386963e-10;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-8.731149137020111e-10,5,5,"[-5.525453090667725, -4.9633588790893555, -5.363158226013184, -6.467714309692383, -5.464813709259033, -0.0216787438839674]",0.9785545468330383
1,"['    @Test\n    public void testGetAuths() throws Exception {\n        Authorizations a = AuthCache.getAuthorizations(cookie);\n        Assert.assertEquals(""A,B,C"", a.toString());\n    }\n']",Get;cookie;Cache;to;get;Assert;Auth;Equals;Authorizations;Auth,1.280568540096283e-09;9.313225746154785e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-3.7834979593753815e-10;-4.94765117764473e-10;-6.984919309616089e-10,5,5,"[-5.536370277404785, -4.953788757324219, -5.350848197937012, -6.458395957946777, -5.455236434936523, -0.021819068118929863]",0.9784172177314758
1,"['    @Test(expected = BadCredentialsException.class)\n    public void testBasicAuthenticationFailure() {\n        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(""test"", ""test2"");\n        AuthenticationService.getAuthenticationManager().authenticate(token);\n    }\n']",expected;redentials;Authentication;Authentication;Authentication;Exception;Password;token;Service;Failure,1.862645149230957e-09;1.6298145055770874e-09;8.731149137020111e-10;8.294591680169106e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10,5,5,"[-5.527929306030273, -5.0106329917907715, -5.386168956756592, -6.499607086181641, -5.44322395324707, -0.021274695172905922]",0.9789501428604126
1,"['    @Test\n    public void testBasicAuthenticationLogin() {\n        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(""test"", ""test1"");\n        Authentication auth = AuthenticationService.getAuthenticationManager().authenticate(token);\n        Collection<? extends GrantedAuthority> authorizations = auth.getAuthorities();\n        authorizations.forEach(a -> {\n            Assert.assertTrue(\n                    a.getAuthority().equals(""A"") || a.getAuthority().equals(""B"") || a.getAuthority().equals(""C""));\n        });\n    }\n']",Login;authorizations;Authority;Authentication;Username;Authentication;Authentication;auth;authorizations;Password,1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.480981826782227, -5.059871673583984, -5.437900543212891, -6.477203369140625, -5.425835609436035, -0.021019088104367256]",0.9792002439498901
1,"['    @Test\n    public void testX509AuthenticationLogin() {\n        PreAuthenticatedAuthenticationToken token = new PreAuthenticatedAuthenticationToken(""example.com"",\n                ""doesn\'t matter what I put here"");\n        Authentication auth = AuthenticationService.getAuthenticationManager().authenticate(token);\n        Collection<? extends GrantedAuthority> authorizations = auth.getAuthorities();\n        authorizations.forEach(a -> {\n            Assert.assertTrue(\n                    a.getAuthority().equals(""D"") || a.getAuthority().equals(""E"") || a.getAuthority().equals(""F""));\n        });\n    }\n']",new;matter;Authentication;put;auth;Authenticated;Granted;Authentication;Login;authorizations,9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;6.257323548197746e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.506633281707764, -5.014191627502441, -5.4405436515808105, -6.471384525299072, -5.4755096435546875, -0.020993875339627266]",0.9792249798774719
1,"['    @Test(expected = UsernameNotFoundException.class)\n    public void testX509AuthenticationLoginFailed() {\n        PreAuthenticatedAuthenticationToken token = new PreAuthenticatedAuthenticationToken(""bad.example.com"",\n                ""doesn\'t matter what I put here"");\n        Authentication auth = AuthenticationService.getAuthenticationManager().authenticate(token);\n        Collection<? extends GrantedAuthority> authorizations = auth.getAuthorities();\n        authorizations.forEach(a -> {\n            Assert.assertTrue(\n                    a.getAuthority().equals(""D"") || a.getAuthority().equals(""E"") || a.getAuthority().equals(""F""));\n        });\n    }\n']",what;matter;new;Authenticated;Authentication;Authentication;ailed;Username;here;True,1.4901161193847656e-08;4.6566128730773926e-09;4.423782229423523e-09;4.190951585769653e-09;3.3760443329811096e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.509808540344238, -4.99214506149292, -5.424993515014648, -6.4841108322143555, -5.47714900970459, -0.021174443885684013]",0.9790481328964233
1,"['    @Test\n    public void testMovingAverage() throws Exception {\n        SortedMapIterator source = new SortedMapIterator(table);\n        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();\n        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);\n        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n\n        for (int i = 4; i < 100; i++) {\n            checkNextResult(iter, new double[] { i - 4, i - 3, i - 2, i - 1, i });\n        }\n        assertFalse(iter.hasTop());\n    }\n']",seek;Average;table;Series;Grouping;Option;new;double;Grouping;Map,2.0954757928848267e-09;1.7462298274040222e-09;9.313225746154785e-10;8.585629984736443e-10;8.003553375601768e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10,5,5,"[-5.481614112854004, -5.02238655090332, -5.390461444854736, -6.454110145568848, -5.4791579246521, -0.021283095702528954]",0.9789419174194336
1,"['    @Test\n    public void testMultipleTimeSeriesMovingAverage() throws Exception {\n        table.clear();\n        long ts = System.currentTimeMillis();\n        List<Tag> tags1 = new ArrayList<>();\n        tags1.add(new Tag(""host"", ""r01n01""));\n        List<Tag> tags2 = new ArrayList<>();\n        tags2.add(new Tag(""host"", ""r01n02""));\n        for (int i = 0; i < 100; i++) {\n            ts += 1000;\n            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags1);\n            byte[] row = MetricAdapter.encodeRowKey(m);\n            Key k = new Key(row, tags1.get(0).join().getBytes(StandardCharsets.UTF_8),\n                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));\n            table.put(k, v);\n            Metric m2 = new Metric(""sys.cpu.user"", ts, i * 2.0D, tags2);\n            byte[] row2 = MetricAdapter.encodeRowKey(m2);\n            Key k2 = new Key(row2, tags2.get(0).join().getBytes(StandardCharsets.UTF_8),\n                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n            Value v2 = new Value(MetricAdapter.encodeValue(m2.getValue().getMeasure()));\n            table.put(k2, v2);\n        }\n        SortedMapIterator source = new SortedMapIterator(table);\n        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();\n        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);\n        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n\n        // this section changed when the key structure changed so that identical\n        // colFam values sorted consecutively within an given time period\n        for (int i = 4; i < 100; i++) {\n            checkNextResult(iter, new double[] { i - 4, i - 3, i - 2, i - 1, i });\n        }\n        for (int i = 4; i < 100; i++) {\n            checkNextResult(iter, new double[] { (i - 4) * 2, (i - 3) * 2, (i - 2) * 2, (i - 1) * 2, i * 2 });\n        }\n        assertFalse(iter.hasTop());\n\n    }\n']",Mill;ts;Multiple;Bytes;ts;table;Measure;user;Bytes;cpu,3.4924596548080444e-09;1.862645149230957e-09;1.1641532182693481e-09;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.477138996124268, -4.9924421310424805, -5.363452434539795, -6.447747707366943, -5.510153770446777, -0.021514367312192917]",0.9787154197692871
1,"['    @Test\n    public void testTimeSeriesDropOff() throws Exception {\n        table.clear();\n        long ts = System.currentTimeMillis();\n        List<Tag> tags1 = new ArrayList<>();\n        tags1.add(new Tag(""host"", ""r01n01""));\n        List<Tag> tags2 = new ArrayList<>();\n        tags2.add(new Tag(""host"", ""r01n02""));\n        for (int i = 0; i < 100; i++) {\n            ts += 1000;\n            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags1);\n            byte[] row = MetricAdapter.encodeRowKey(m);\n            Key k = new Key(row, tags1.get(0).join().getBytes(StandardCharsets.UTF_8),\n                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));\n            table.put(k, v);\n            if (i < 50) {\n                // only populate this series 50 times\n                Metric m2 = new Metric(""sys.cpu.user"", ts, i * 2.0D, tags2);\n                byte[] row2 = MetricAdapter.encodeRowKey(m2);\n                Key k2 = new Key(row2, tags2.get(0).join().getBytes(StandardCharsets.UTF_8),\n                        MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n                Value v2 = new Value(MetricAdapter.encodeValue(m2.getValue().getMeasure()));\n                table.put(k2, v2);\n            }\n        }\n\n        SortedMapIterator source = new SortedMapIterator(table);\n        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();\n        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);\n        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n\n        // this section changed when the key structure changed so that identical\n        // colFam values sorted consecutively within an given time period\n        for (int i = 4; i < 100; i++) {\n            System.out.println(i);\n            checkNextResult(iter, new double[] { i - 4, i - 3, i - 2, i - 1, i });\n        }\n        for (int i = 4; i < 50; i++) {\n            System.out.println(i);\n            checkNextResult(iter, new double[] { (i - 4) * 2, (i - 3) * 2, (i - 2) * 2, (i - 1) * 2, i * 2 });\n        }\n        assertFalse(iter.hasTop());\n    }\n']",current;Series;Key;long;ts;Exception;times;Metric;clear;List,1.862645149230957e-09;1.5133991837501526e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;7.712515071034431e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.476202487945557, -4.982507705688477, -5.312206745147705, -6.416974067687988, -5.49704647064209, -0.021944677457213402]",0.9782944917678833
1,"['    @Test\n    public void testAdditionalTimeSeries() throws Exception {\n        table.clear();\n        long ts = System.currentTimeMillis();\n        List<Tag> tags1 = new ArrayList<>();\n        tags1.add(new Tag(""host"", ""r01n01""));\n        List<Tag> tags2 = new ArrayList<>();\n        tags2.add(new Tag(""host"", ""r01n02""));\n        for (int i = 0; i < 100; i++) {\n            ts += 1000;\n            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags1);\n            byte[] row = MetricAdapter.encodeRowKey(m);\n            Key k = new Key(row, tags1.get(0).join().getBytes(StandardCharsets.UTF_8),\n                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));\n            table.put(k, v);\n            if (i > 50) {\n                // only populate this series 50 times\n                Metric m2 = new Metric(""sys.cpu.user"", ts, i * 2.0D, tags2);\n                byte[] row2 = MetricAdapter.encodeRowKey(m2);\n                Key k2 = new Key(row2, tags2.get(0).join().getBytes(StandardCharsets.UTF_8),\n                        MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n                Value v2 = new Value(MetricAdapter.encodeValue(m2.getValue().getMeasure()));\n                table.put(k2, v2);\n            }\n        }\n        SortedMapIterator source = new SortedMapIterator(table);\n        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();\n        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);\n        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n\n        // this section changed when the key structure changed so that identical\n        // colFam values sorted consecutively within an given time period\n        for (int i = 4; i < 100; i++) {\n            checkNextResult(iter, new double[] { i - 4, i - 3, i - 2, i - 1, i });\n        }\n        for (int i = 55; i < 100; i++) {\n            checkNextResult(iter, new double[] { (i - 4) * 2, (i - 3) * 2, (i - 2) * 2, (i - 1) * 2, i * 2 });\n        }\n\n        assertFalse(iter.hasTop());\n\n    }\n']",Additional;ts;sys;series;Exception;Row;sys;long;row;user,1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.511093720793724e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.466062068939209, -5.006736755371094, -5.318148612976074, -6.418081283569336, -5.4916887283325195, -0.02181125245988369]",0.9784250259399414
1,"['    @Test\n    public void testManySparseTimeSeries() throws Exception {\n        table.clear();\n        long ts = System.currentTimeMillis();\n        List<Tag> tags1 = new ArrayList<>();\n        tags1.add(new Tag(""host"", ""r01n01""));\n        List<Tag> tags2 = new ArrayList<>();\n        tags2.add(new Tag(""host"", ""r01n02""));\n        List<Tag> tags3 = new ArrayList<>();\n        tags3.add(new Tag(""host"", ""r01n03""));\n        for (int i = 0; i < 100; i++) {\n            ts += 1000;\n            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags1);\n            byte[] row = MetricAdapter.encodeRowKey(m);\n            Key k = new Key(row, tags1.get(0).join().getBytes(StandardCharsets.UTF_8),\n                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));\n            table.put(k, v);\n            // jitter the time on the second time series\n            Metric m2 = new Metric(""sys.cpu.user"", ts + 50, i * 2.0D, tags2);\n            byte[] row2 = MetricAdapter.encodeRowKey(m2);\n            Key k2 = new Key(row2, tags2.get(0).join().getBytes(StandardCharsets.UTF_8),\n                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts + 50);\n            Value v2 = new Value(MetricAdapter.encodeValue(m2.getValue().getMeasure()));\n            table.put(k2, v2);\n            Metric m3 = new Metric(""sys.cpu.user"", ts, i * 3.0D, tags3);\n            byte[] row3 = MetricAdapter.encodeRowKey(m3);\n            Key k3 = new Key(row3, tags3.get(0).join().getBytes(StandardCharsets.UTF_8),\n                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n            Value v3 = new Value(MetricAdapter.encodeValue(m3.getValue().getMeasure()));\n            table.put(k3, v3);\n        }\n\n        SortedMapIterator source = new SortedMapIterator(table);\n        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();\n        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);\n        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n\n        LinkedList<Double> first = new LinkedList<>();\n        first.add(0D);\n        first.add(1D);\n        first.add(2D);\n        first.add(3D);\n        first.add(4D);\n        LinkedList<Double> second = new LinkedList<>();\n        second.add(0D);\n        second.add(2D);\n        second.add(4D);\n        second.add(6D);\n        second.add(8D);\n        LinkedList<Double> third = new LinkedList<>();\n        third.add(0D);\n        third.add(3D);\n        third.add(6D);\n        third.add(9D);\n        third.add(12D);\n\n        // this section changed when the key structure changed so that identical\n        // colFam values sorted consecutively within an given time period\n        for (int i = 4; i < 100; i++) {\n            checkNextResult(iter, first);\n            shiftAndAdd(first, 1);\n        }\n        for (int i = 4; i < 100; i++) {\n            System.out.println(i);\n            checkNextResult(iter, second);\n            shiftAndAdd(second, 2);\n        }\n        for (int i = 4; i < 100; i++) {\n            checkNextResult(iter, third);\n            shiftAndAdd(third, 3);\n        }\n        assertFalse(iter.hasTop());\n    }\n']",get;Charsets;Value;time;Metric;second;Time;Value;byte;cpu,2.3283064365386963e-09;1.5425030142068863e-09;1.2223608791828156e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.492069721221924, -4.952495098114014, -5.34630012512207, -6.443377494812012, -5.520191192626953, -0.021782442927360535]",0.9784530997276306
1,"['    @Test\n    public void testConstantTimeRate() throws Exception {\n        SortedMapIterator source = new SortedMapIterator(table);\n        RateIterator iter = new RateIterator();\n        IteratorSetting settings = new IteratorSetting(100, RateIterator.class);\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n        for (int i = 0; i < 99; i++) {\n            assertTrue(iter.hasTop());\n            assertEquals(0.001D, MetricAdapter.decodeValue(iter.getTopValue().get()), 0.0D);\n            iter.next();\n        }\n        assertFalse(iter.hasTop());\n    }\n']",Constant;Rate;source;Map;decode;False;SCAN;AMS;iter;iter,2.0954757928848267e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.346940502524376e-10;3.346940502524376e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10,5,5,"[-5.486049175262451, -5.03239107131958, -5.3913187980651855, -6.46362829208374, -5.482167720794678, -0.02116522379219532]",0.9790571928024292
1,"['    @Test\n    public void testRateWithTimeJitter() throws Exception {\n        table.clear();\n        Random r = new Random(111131131L);\n        long ts = System.currentTimeMillis();\n        for (int i = 1; i <= 100; i++) {\n            ts += 1000 + r.nextInt(100);\n            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags);\n            byte[] row = MetricAdapter.encodeRowKey(m);\n            Key k = new Key(row, tags.get(0).join().getBytes(StandardCharsets.UTF_8),\n                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));\n            table.put(k, v);\n        }\n\n        SortedMapIterator source = new SortedMapIterator(table);\n        source.seek(new Range(), EMPTY_COL_FAMS, true);\n        long prevTs = -1L;\n        Double prevValue = null;\n        List<Double> expected = new ArrayList<>();\n        while (source.hasTop()) {\n            Key k = source.getTopKey();\n            Value v = source.getTopValue();\n            if (prevTs != -1L) {\n                Double thisValue = MetricAdapter.decodeValue(v.get());\n                expected.add((thisValue + (prevValue * -1)) / (k.getTimestamp() - prevTs));\n            }\n            prevTs = k.getTimestamp();\n            prevValue = MetricAdapter.decodeValue(v.get());\n            source.next();\n        }\n\n        assertEquals(99, expected.size());\n        source = new SortedMapIterator(table);\n        RateIterator iter = new RateIterator();\n        IteratorSetting settings = new IteratorSetting(100, RateIterator.class);\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n        for (int i = 0; i < 99; i++) {\n            assertTrue(iter.hasTop());\n            assertEquals(expected.get(i), MetricAdapter.decodeValue(iter.getTopValue().get()), 0.0D);\n            iter.next();\n        }\n        assertFalse(iter.hasTop());\n    }\n']",Rate;Exception;Random;Metric;new;System;Metric;expected;Measure;Key,2.3283064365386963e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.498233795166016, -4.887812614440918, -5.310417652130127, -6.414757251739502, -5.511369705200195, -0.022500809282064438]",0.9777504205703735
1,"['    @Test\n    public void testCounterRate() throws Exception {\n        table.clear();\n        long ts = System.currentTimeMillis();\n        for (int j = 0; j < 10; j++) {\n            for (int i = 1; i <= 10; i++) {\n                ts += 1000;\n                Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags);\n                byte[] row = MetricAdapter.encodeRowKey(m);\n                Key k = new Key(row, tags.get(0).join().getBytes(StandardCharsets.UTF_8),\n                        MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n                Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));\n                table.put(k, v);\n            }\n        }\n\n        SortedMapIterator source = new SortedMapIterator(table);\n        RateIterator iter = new RateIterator();\n        IteratorSetting settings = new IteratorSetting(100, RateIterator.class);\n\n        QueryRequest.RateOption option = new QueryRequest.RateOption();\n        option.setCounter(true);\n        option.setCounterMax(0);\n        RateIterator.setRateOptions(settings, option);\n\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n        for (int i = 0; i < 99; i++) {\n            assertTrue(iter.hasTop());\n            assertEquals(0.001D, MetricAdapter.decodeValue(iter.getTopValue().get()), 0.0D);\n            iter.next();\n        }\n        assertFalse(iter.hasTop());\n    }\n']",orted;orted;Iterator;Map;Exception;Key;Iterator;table;Qual;Rate,4.6566128730773926e-09;3.725290298461914e-09;1.862645149230957e-09;1.280568540096283e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.460446834564209, -5.0446319580078125, -5.335855960845947, -6.422156810760498, -5.473058700561523, -0.021565701812505722]",0.9786651730537415
1,"['    @Test\n    public void testCounterRateWithMax() throws Exception {\n        table.clear();\n        long ts = System.currentTimeMillis();\n        for (int j = 0; j < 10; j++) {\n            for (int i = 0; i < 10; i++) {\n                ts += 1000;\n                Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags);\n                byte[] row = MetricAdapter.encodeRowKey(m);\n                Key k = new Key(row, tags.get(0).join().getBytes(StandardCharsets.UTF_8),\n                        MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n                Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));\n                table.put(k, v);\n            }\n        }\n\n        SortedMapIterator source = new SortedMapIterator(table);\n        RateIterator iter = new RateIterator();\n        IteratorSetting settings = new IteratorSetting(100, RateIterator.class);\n\n        QueryRequest.RateOption option = new QueryRequest.RateOption();\n        option.setCounter(true);\n        option.setCounterMax(10);\n        RateIterator.setRateOptions(settings, option);\n\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n        for (int i = 0; i < 99; i++) {\n            assertTrue(iter.hasTop());\n            assertEquals(0.001D, MetricAdapter.decodeValue(iter.getTopValue().get()), 0.0D);\n            iter.next();\n        }\n        assertFalse(iter.hasTop());\n    }\n']",source;System;Key;encode;Bytes;long;Measure;Metric;Qual;Mill,9.604264050722122e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.488605499267578, -5.01759147644043, -5.3307647705078125, -6.4190826416015625, -5.490262508392334, -0.021582618355751038]",0.9786486029624939
1,"['    @Test\n    public void testCounterRateWithReset() throws Exception {\n        table.clear();\n        long ts = System.currentTimeMillis();\n        for (int j = 0; j < 10; j++) {\n            for (int i = 0; i < 10; i++) {\n                ts += 1000;\n                Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags);\n                byte[] row = MetricAdapter.encodeRowKey(m);\n                Key k = new Key(row, tags.get(0).join().getBytes(StandardCharsets.UTF_8),\n                        MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);\n                Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));\n                table.put(k, v);\n            }\n        }\n\n        SortedMapIterator source = new SortedMapIterator(table);\n        RateIterator iter = new RateIterator();\n        IteratorSetting settings = new IteratorSetting(100, RateIterator.class);\n\n        QueryRequest.RateOption option = new QueryRequest.RateOption();\n        option.setCounter(true);\n        option.setCounterMax(Long.MAX_VALUE);\n        option.setResetValue(1);\n        RateIterator.setRateOptions(settings, option);\n\n        iter.init(source, settings.getOptions(), SCAN_IE);\n        iter.seek(new Range(), EMPTY_COL_FAMS, true);\n        for (int i = 0; i < 99; i++) {\n            assertTrue(iter.hasTop());\n            assertEquals(((i + 1) % 10 == 0 ? 0.0D : 0.001D), MetricAdapter.decodeValue(iter.getTopValue().get()),\n                    0.0D);\n            iter.next();\n        }\n        assertFalse(iter.hasTop());\n    }\n']",Map;Iterator;Query;Metric;orted;Counter;Key;Iterator;new;Metric,4.6566128730773926e-09;3.725290298461914e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.280568540096283e-09;9.313225746154785e-10;8.585629984736443e-10,5,5,"[-5.47981071472168, -5.031937599182129, -5.331335544586182, -6.417974472045898, -5.485060214996338, -0.02154458500444889]",0.9786858558654785
1,"['    @Test(expected = IllegalArgumentException.class)\n    public void testDefaultMissing() throws Exception {\n        SortedMap<Key, Value> table = new TreeMap<>();\n        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);\n        MetricAgeOffIterator iter = new MetricAgeOffIterator();\n        HashMap<String, String> options = new HashMap<>();\n        iter.init(source, options, null);\n    }\n']",Metric;iter;Map;Missing;Map;options;Iterator;orted;init;Off,1.979060471057892e-09;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.5266594886779785, -4.94646692276001, -5.338778018951416, -6.442053318023682, -5.490281105041504, -0.02184612676501274]",0.978390634059906
1,"['    @Test\n    public void testDefault() throws Exception {\n        SortedMap<Key, Value> table = new TreeMap<>();\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0], new byte[0], new byte[0],\n                TEST_TIME), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 1), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 2), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 3), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 4), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 5), EMPTY_VALUE);\n\n        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);\n        MetricAgeOffIterator iter = new MetricAgeOffIterator();\n        HashMap<String, String> options = new HashMap<>();\n        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));\n        iter.init(source, options, null);\n        iter.seek(new Range(), columnFamilies, true);\n        int seen = 0;\n        while (iter.hasTop()) {\n            Key k = iter.getTopKey();\n            Assert.assertTrue(k.getTimestamp() >= TEST_TIME && k.getTimestamp() <= TEST_TIME + 5);\n            seen++;\n            iter.next();\n        }\n        Assert.assertEquals(6, seen);\n    }\n']",Exception;EMPTY;Key;Metric;Key;Tree;EMPTY;encode;Value;new,2.2118911147117615e-09;8.87666828930378e-10;8.149072527885437e-10;7.275957614183426e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.405961513519287, -5.036010265350342, -5.391639232635498, -6.447750091552734, -5.469040393829346, -0.021574335172772408]",0.9786567091941833
1,"['    @Test\n    public void testMixed() throws Exception {\n        SortedMap<Key, Value> table = new TreeMap<>();\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME), new byte[0], new byte[0], new byte[0],\n                TEST_TIME), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 1), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 1), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 2), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 2), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 3), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 3), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 4), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 4), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 5), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 5), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0], new byte[0], new byte[0],\n                TEST_TIME), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 1), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 2), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 3), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 4), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 5), EMPTY_VALUE);\n\n        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);\n        MetricAgeOffIterator iter = new MetricAgeOffIterator();\n        HashMap<String, String> options = new HashMap<>();\n        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));\n        iter.init(source, options, null);\n        iter.seek(new Range(), columnFamilies, true);\n        int seen = 0;\n        while (iter.hasTop()) {\n            Key k = iter.getTopKey();\n            Assert.assertTrue(k.getTimestamp() >= TEST_TIME && k.getTimestamp() <= TEST_TIME + 5);\n            seen++;\n            iter.next();\n        }\n        Assert.assertEquals(12, seen);\n    }\n']",Map;orted;TEST;TEST;encode;new;TEST;TEST;encode;Value,2.2118911147117615e-09;8.731149137020111e-10;8.440110832452774e-10;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.392935276031494, -5.032742977142334, -5.383830547332764, -6.4425435066223145, -5.462162494659424, -0.02173088677227497]",0.9785035252571106
1,"['    @Test\n    public void testAgeoffMixed() throws Exception {\n        SortedMap<Key, Value> table = new TreeMap<>();\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (3 * ONE_DAY)), new byte[0],\n                new byte[0], new byte[0], TEST_TIME - (3 * ONE_DAY)), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (2 * ONE_DAY)), new byte[0],\n                new byte[0], new byte[0], TEST_TIME - (2 * ONE_DAY)), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (1 * ONE_DAY)), new byte[0],\n                new byte[0], new byte[0], TEST_TIME - (1 * ONE_DAY)), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME), new byte[0], new byte[0], new byte[0],\n                TEST_TIME), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + ONE_DAY), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + ONE_DAY), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + (2 * ONE_DAY)), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + (2 * ONE_DAY)), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (3 * ONE_DAY)), new byte[0],\n                new byte[0], new byte[0], TEST_TIME - (3 * ONE_DAY)), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (2 * ONE_DAY)), new byte[0],\n                new byte[0], new byte[0], TEST_TIME - (2 * ONE_DAY)), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (1 * ONE_DAY)), new byte[0],\n                new byte[0], new byte[0], TEST_TIME - (1 * ONE_DAY)), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0], new byte[0], new byte[0],\n                TEST_TIME), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + ONE_DAY), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + ONE_DAY), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + (2 * ONE_DAY)), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + (2 * ONE_DAY)), EMPTY_VALUE);\n\n        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);\n        MetricAgeOffIterator iter = new MetricAgeOffIterator();\n        HashMap<String, String> options = new HashMap<>();\n        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));\n        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""sys.cpu.user"", Integer.toString(2 * ONE_DAY));\n        iter.init(source, options, null);\n        iter.seek(new Range(), columnFamilies, true);\n        int seen = 0;\n        while (iter.hasTop()) {\n            Key k = iter.getTopKey();\n            Assert.assertTrue(\n                    k.getTimestamp() >= (TEST_TIME - (2 * ONE_DAY)) && k.getTimestamp() <= TEST_TIME + (2 * ONE_DAY));\n            seen++;\n            iter.next();\n        }\n        Assert.assertEquals(7, seen);\n\n    }\n']",TEST;TEST;TEST;TIME;TIME;Ageoff;TEST;TEST;Row;Key,2.444721758365631e-09;1.57160684466362e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.348130226135254, -5.030575275421143, -5.342390060424805, -6.425932884216309, -5.454025745391846, -0.02221963368356228]",0.9780253767967224
1,"['    @Test\n    public void testSeekPastEndKey() throws Exception {\n        SortedMap<Key, Value> table = new TreeMap<>();\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0], new byte[0], new byte[0],\n                TEST_TIME), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 1), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 2), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 3), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 4), EMPTY_VALUE);\n        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0], new byte[0],\n                new byte[0], TEST_TIME + 5), EMPTY_VALUE);\n\n        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);\n        MetricAgeOffIterator iter = new MetricAgeOffIterator();\n        HashMap<String, String> options = new HashMap<>();\n        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""default"", Integer.toString(1));\n        iter.init(source, options, null);\n        iter.seek(new Range(new Key(""sys.cpu.user""), true,\n                new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0], new byte[0],\n                        new byte[0], TEST_TIME + 3),\n                true), columnFamilies, true);\n        int seen = 0;\n        while (iter.hasTop()) {\n            Key k = iter.getTopKey();\n            Assert.assertTrue(k.getTimestamp() >= TEST_TIME && k.getTimestamp() <= TEST_TIME + 5);\n            seen++;\n            iter.next();\n        }\n        Assert.assertEquals(0, seen);\n    }\n']",TEST;Seek;TIME;TIME;TIME;Row;Key;TEST;Key;Metric,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.384208634495735e-10,5,5,"[-5.403621196746826, -5.032581806182861, -5.362656116485596, -6.4279704093933105, -5.462550640106201, -0.02180507220327854]",0.9784309267997742
1,"['    @Test(expected = IllegalArgumentException.class)\n    public void testDefaultMissing() throws Exception {\n        MetricAgeOffFilter filter = new MetricAgeOffFilter();\n        HashMap<String, String> options = new HashMap<>();\n        filter.init(null, options, null);\n    }\n']",filter;Age;Hash;options;expected;init;new;Metric;Map;Default,1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.551448345184326, -4.9475812911987305, -5.366479873657227, -6.474178314208984, -5.508519172668457, -0.02147679775953293]",0.9787521958351135
1,"['    @Test\n    public void testDefault() throws Exception {\n        MetricAgeOffFilter filter = new MetricAgeOffFilter();\n        HashMap<String, String> options = new HashMap<>();\n        options.put(MetricAgeOffFilter.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));\n        filter.init(null, options, null);\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0],\n                new byte[0], new byte[0], TEST_TIME), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 1), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 2), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 3), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 4), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 5), null));\n    }\n']",new;TEST;Filter;DAY;Key;TIME;TEST;init;accept;TEST,3.026798367500305e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10,5,5,"[-5.422843933105469, -4.996291637420654, -5.358952522277832, -6.432867527008057, -5.4807209968566895, -0.02189546264708042]",0.9783425331115723
1,"['    @Test\n    public void testMixed() throws Exception {\n        MetricAgeOffFilter filter = new MetricAgeOffFilter();\n        HashMap<String, String> options = new HashMap<>();\n        options.put(MetricAgeOffFilter.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));\n        filter.init(null, options, null);\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME), new byte[0],\n                new byte[0], new byte[0], TEST_TIME), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 1), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 1), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 2), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 2), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 3), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 3), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 4), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 4), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 5), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 5), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0],\n                new byte[0], new byte[0], TEST_TIME), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 1), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 2), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 3), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 4), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + 5), null));\n    }\n']",DAY;accept;TIME;TIME;accept;TEST;TIME;null;TIME;Metric,3.259629011154175e-09;1.2223608791828156e-09;1.1059455573558807e-09;1.076841726899147e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10,5,5,"[-5.41454553604126, -4.994770526885986, -5.3543171882629395, -6.4326677322387695, -5.479991912841797, -0.021969400346279144]",0.9782701730728149
1,"['    @Test\n    public void testAgeoffMixed() throws Exception {\n        MetricAgeOffFilter filter = new MetricAgeOffFilter();\n        HashMap<String, String> options = new HashMap<>();\n        options.put(MetricAgeOffFilter.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));\n        options.put(MetricAgeOffFilter.AGE_OFF_PREFIX + ""sys.cpu.user"", Integer.toString(2 * ONE_DAY));\n        filter.init(null, options, null);\n        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (3 * ONE_DAY)),\n                new byte[0], new byte[0], new byte[0], TEST_TIME - (3 * ONE_DAY)), null));\n        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (2 * ONE_DAY)),\n                new byte[0], new byte[0], new byte[0], TEST_TIME - (2 * ONE_DAY)), null));\n        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (1 * ONE_DAY)),\n                new byte[0], new byte[0], new byte[0], TEST_TIME - (1 * ONE_DAY)), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME), new byte[0],\n                new byte[0], new byte[0], TEST_TIME), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + ONE_DAY), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + ONE_DAY), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + (2 * ONE_DAY)),\n                new byte[0], new byte[0], new byte[0], TEST_TIME + (2 * ONE_DAY)), null));\n        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (3 * ONE_DAY)),\n                new byte[0], new byte[0], new byte[0], TEST_TIME - (3 * ONE_DAY)), null));\n        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (2 * ONE_DAY)),\n                new byte[0], new byte[0], new byte[0], TEST_TIME - (2 * ONE_DAY)), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (1 * ONE_DAY)),\n                new byte[0], new byte[0], new byte[0], TEST_TIME - (1 * ONE_DAY)), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0],\n                new byte[0], new byte[0], TEST_TIME), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + ONE_DAY), new byte[0],\n                new byte[0], new byte[0], TEST_TIME + ONE_DAY), null));\n        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + (2 * ONE_DAY)),\n                new byte[0], new byte[0], new byte[0], TEST_TIME + (2 * ONE_DAY)), null));\n    }\n']",idle;REFIX;Ageoff;accept;Exception;Filter;options;user;Metric;ixed,1.979060471057892e-09;1.6880221664905548e-09;1.5133991837501526e-09;1.2223608791828156e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10,5,5,"[-5.441723823547363, -4.891541481018066, -5.3356757164001465, -6.4417314529418945, -5.4989914894104, -0.02259649708867073]",0.9776570200920105
1,"['    @Test\n    public void testRegex1() throws Exception {\n        String tags = ""tag1=value1,tag2=value2,tag3=value3"";\n        StringBuffer pattern = new StringBuffer();\n        pattern.append(""(^|.*,)"");\n        pattern.append(""tag2"");\n        pattern.append(""="");\n        pattern.append(""value2"");\n        pattern.append(""(,.*|$)"");\n        Pattern p = Pattern.compile(pattern.toString());\n        assertTrue(p.matcher(tags).matches());\n    }\n']",Buffer;Regex;tags;tag;pattern;Exception;pattern;append;pattern;matches,1.5133991837501526e-09;1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.7462298274040222e-10,5,5,"[-5.524394989013672, -5.022500991821289, -5.463853359222412, -6.505104064941406, -5.493649005889893, -0.020633572712540627]",0.9795778393745422
1,"['    @Test\n    public void testRegex2() throws Exception {\n        String tags = ""tag1=value1,tag2=value2,tag3=value3"";\n        StringBuffer pattern = new StringBuffer();\n        pattern.append(""(^|.*,)"");\n        pattern.append(""tag2"");\n        pattern.append(""="");\n        pattern.append(""value\\\\d"");\n        pattern.append(""(,.*|$)"");\n        Pattern p = Pattern.compile(pattern.toString());\n        assertTrue(p.matcher(tags).matches());\n    }\n']",Buffer;tag;to;compile;value;matcher;pattern;True;Pattern;tags,1.0477378964424133e-09;8.731149137020111e-10;4.656612873077393e-10;4.3655745685100555e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.525402069091797, -5.017894744873047, -5.464836120605469, -6.506523132324219, -5.495577335357666, -0.020645949989557266]",0.9795657396316528
1,"['    @Test\n    public void testRegex3() throws Exception {\n        String tags = ""tag1=value1,tag2=value2,tag3=value3"";\n        StringBuffer pattern = new StringBuffer();\n        pattern.append(""(^|.*,)"");\n        pattern.append(""tag2"");\n        pattern.append(""="");\n        pattern.append(""(value2|value3)"");\n        pattern.append(""(,.*|$)"");\n        Pattern p = Pattern.compile(pattern.toString());\n        assertTrue(p.matcher(tags).matches());\n    }\n']",compile;tags;value;pattern;Buffer;pattern;append;append;tag;Exception,8.003553375601768e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.5088791847229, -5.041851997375488, -5.438327789306641, -6.46203088760376, -5.475034236907959, -0.020826349034905434]",0.9793891310691833
1,"['    @Test\n    public void testSerialization() throws IOException, ClassNotFoundException {\n\n        long start = System.currentTimeMillis();\n        WrappedGorillaCompressor originalCompressor = new WrappedGorillaCompressor(start);\n        long t = start;\n\n        for (int x = 1; x <= 10; x++) {\n            originalCompressor.addValue(t, 10);\n            t = t + 1000;\n        }\n        originalCompressor.close();\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(outputStream);\n        oos.writeObject(originalCompressor);\n        oos.close();\n\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n        ObjectInputStream ois = new ObjectInputStream(inputStream);\n        WrappedGorillaCompressor copyCompressor = (WrappedGorillaCompressor) ois.readObject();\n\n        GorillaDecompressor d = new GorillaDecompressor(new LongArrayInput(copyCompressor.getCompressorOutput()));\n\n        LinkedList<Pair> q = new LinkedList<>();\n        Pair p = null;\n        while ((p = d.readPair()) != null) {\n            q.add(p);\n        }\n\n        Assert.assertEquals(10, q.size());\n        Assert.assertEquals(start, q.peekFirst().getTimestamp());\n        Assert.assertEquals(start + 9000, q.peekLast().getTimestamp());\n    }\n']",Assert;Assert;Mill;Array;Equals;start;Compressor;System;peek;Compressor,1.7462298274040222e-09;1.6880221664905548e-09;9.89530235528946e-10;8.149072527885437e-10;6.548361852765083e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.488117218017578, -4.944408416748047, -5.303915977478027, -6.411677360534668, -5.499202728271484, -0.022207975387573242]",0.9780368208885193
1,"['    @Test\n    public void testHDFSWrite() throws Exception {\n\n        try {\n            Configuration configuration = new Configuration();\n            FileSystem fs = FileSystem.get(new URI(""hdfs://localhost:8020""), configuration);\n            GorillaStore store = new GorillaStore(fs, ""mymetric"", new timely.Configuration());\n\n            long start = System.currentTimeMillis();\n            WrappedGorillaCompressor originalCompressor = new WrappedGorillaCompressor(start);\n            long t = start;\n\n            for (int x = 1; x <= 10; x++) {\n                originalCompressor.addValue(t, 10);\n                t = t + 1000;\n            }\n            originalCompressor.close();\n\n            store.writeCompressor(""mymetric"", originalCompressor);\n\n            List<WrappedGorillaCompressor> archived = store.readCompressors(fs, new Path(""/timely/cache/mymetric""));\n\n            for (WrappedGorillaCompressor c : archived) {\n\n                GorillaDecompressor d = new GorillaDecompressor(new LongArrayInput(c.getCompressorOutput()));\n                LinkedList<Pair> q = new LinkedList<>();\n                Pair p = null;\n                while ((p = d.readPair()) != null) {\n                    q.add(p);\n                }\n            }\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n']",Path;read;mymetric;Exception;File;air;fs;store;Gorilla;System,8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.5238423347473145, -4.905909061431885, -5.326999187469482, -6.418735504150391, -5.523662090301514, -0.022116446867585182]",0.9781262278556824
1,"['    @Test\n    public void testDownsampleIterator() throws TimelyException {\n\n        long BASETIME = System.currentTimeMillis();\n        // align basetime to a downsample period\n        BASETIME = BASETIME - (BASETIME % (1000 * 60));\n        DataStoreCache mmStore = getMetricMemoryStore1(BASETIME);\n\n        QueryRequest query = new QueryRequest();\n        query.setStart(BASETIME);\n        query.setEnd(BASETIME + 1440000);\n        query.setMsResolution(true);\n        QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();\n        subQuery.setDownsample(Optional.of(""1m-avg""));\n        subQuery.setMetric(""metric.number.1"");\n        subQuery.addTag(""host"", "".*"");\n        query.setQueries(Collections.singleton(subQuery));\n\n        SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> itr = null;\n        try {\n            long firstTimestamp = -1;\n            long lastTimestamp = -1;\n            int numSamples = 0;\n            itr = mmStore.setupIterator(query, subQuery, new Authorizations(), Long.MAX_VALUE);\n            while (itr.hasTop()) {\n                itr.next();\n                Map<Set<Tag>, Aggregation> aggregations = AggregationIterator.decodeValue(itr.getTopValue());\n                for (Map.Entry<Set<Tag>, Aggregation> entry : aggregations.entrySet()) {\n                    for (Sample s : entry.getValue()) {\n                        numSamples++;\n                        if (firstTimestamp == -1) {\n                            firstTimestamp = s.timestamp;\n                        }\n                        lastTimestamp = s.timestamp;\n                    }\n                }\n            }\n            Assert.assertEquals(""First timestamp incorrect"", BASETIME, firstTimestamp);\n            Assert.assertEquals(""Last timestamp incorrect"", BASETIME + 1440000, lastTimestamp);\n            Assert.assertEquals(""Number of samples incorrect"", 50, numSamples);\n        } catch (IOException | ClassNotFoundException e) {\n            LOG.error(""exception in test"", e);\n        }\n    }\n']",Downsample;Exception;set;Timely;set;BASETIME;long;Map;Iterator;to,1.2514647096395493e-09;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.524715423583984, -4.7048821449279785, -5.355355262756348, -6.472712993621826, -5.558021545410156, -0.023434575647115707]",0.9768377542495728
1,"['    @Test\n    public void testRateIterator() throws TimelyException {\n\n        long BASETIME = System.currentTimeMillis();\n        // align basetime to a downsample period\n        BASETIME = BASETIME - (BASETIME % 1000);\n        DataStoreCache mmStore = getMetricMemoryStore2(BASETIME);\n\n        QueryRequest query = new QueryRequest();\n        query.setStart(BASETIME);\n        query.setEnd(BASETIME + 1440000);\n        query.setMsResolution(true);\n        QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();\n        subQuery.setDownsample(Optional.of(""1ms-avg""));\n        subQuery.setMetric(""metric.number.1"");\n        subQuery.addTag(""host"", "".*"");\n        QueryRequest.RateOption rateOption = new QueryRequest.RateOption();\n        rateOption.setCounter(false);\n        subQuery.setRate(true);\n        subQuery.setRateOptions(rateOption);\n        query.setQueries(Collections.singleton(subQuery));\n\n        int x = 0;\n        SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> itr = null;\n        try {\n            // long firstTimestamp = Long.MAX_VALUE;\n            long firstTimestamp = -1;\n            long lastTimestamp = -1;\n            int numSamples = 0;\n            itr = mmStore.setupIterator(query, subQuery, new Authorizations(), Long.MAX_VALUE);\n            while (itr.hasTop()) {\n                itr.next();\n                Map<Set<Tag>, Aggregation> aggregations = AggregationIterator.decodeValue(itr.getTopValue());\n                for (Map.Entry<Set<Tag>, Aggregation> entry : aggregations.entrySet()) {\n                    for (Sample s : entry.getValue()) {\n                        numSamples++;\n                        if (firstTimestamp == -1) {\n                            firstTimestamp = s.timestamp;\n                        }\n                        lastTimestamp = s.timestamp;\n                        // if (s.timestamp < firstTimestamp) {\n                        // firstTimestamp = s.timestamp;\n                        // }\n                        // if (s.timestamp > lastTimestamp) {\n                        // lastTimestamp = s.timestamp;\n                        // }\n                    }\n                }\n            }\n            Assert.assertEquals(""First timestamp incorrect"", BASETIME + 1000, firstTimestamp);\n            Assert.assertEquals(""Last timestamp incorrect"", BASETIME + 1440000, lastTimestamp);\n            Assert.assertEquals(""Number of samples incorrect"", 2880, numSamples);\n        } catch (IOException | ClassNotFoundException e) {\n            LOG.error(""exception in test"", e);\n        }\n    }\n']",long;BASETIME;Iterator;Timestamp;Timestamp;to;align;basetime;ASETIME;ASETIME,2.7939677238464355e-09;2.7939677238464355e-09;2.735760062932968e-09;2.444721758365631e-09;2.0954757928848267e-09;1.862645149230957e-09;1.7462298274040222e-09;1.7462298274040222e-09;1.280568540096283e-09;1.0477378964424133e-09,5,5,"[-5.531505107879639, -4.833522796630859, -5.339533805847168, -6.462823867797852, -5.55659294128418, -0.02238762564957142]",0.9778611063957214
1,"['    @Test\n    public void testOne() {\n\n        GorillaStore gStore = new GorillaStore();\n\n        long now = System.currentTimeMillis();\n        gStore.addValue(now += 100, 1.123);\n        gStore.addValue(now += 100, 2.314);\n        gStore.addValue(now += 100, 3.856);\n        gStore.addValue(now += 100, 4.7678);\n        gStore.addValue(now += 100, 5.8966);\n        gStore.addValue(now += 100, 6.0976);\n        gStore.addValue(now += 100, 1.2345);\n\n        List<WrappedGorillaDecompressor> decompressorList = gStore.getDecompressors(0, Long.MAX_VALUE);\n        Pair pair = null;\n        for (WrappedGorillaDecompressor w : decompressorList) {\n            while ((pair = w.readPair()) != null) {\n                System.out.println(pair.getTimestamp() + "" --> "" + pair.getDoubleValue());\n            }\n        }\n\n        System.out.println(""---------------"");\n\n        gStore.addValue(now += 100, 2.3456);\n        gStore.addValue(now += 100, 3.4567);\n\n        decompressorList = gStore.getDecompressors(0, Long.MAX_VALUE);\n        pair = null;\n        for (WrappedGorillaDecompressor w : decompressorList) {\n            while ((pair = w.readPair()) != null) {\n                System.out.println(pair.getTimestamp() + "" --> "" + pair.getDoubleValue());\n            }\n        }\n    }\n']",One;Decompressor;out;Long;Timestamp;Decompressor;now;current;Time;Wrapped,1.6298145055770874e-09;9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.43833414465189e-10,5,5,"[-5.44672155380249, -4.980123519897461, -5.292583465576172, -6.389981746673584, -5.473994731903076, -0.022332603111863136]",0.9779149293899536
1,"['    @Test\n    public void testExtentOfStorage() {\n\n        GorillaStore gStore = new GorillaStore();\n\n        HashMap<String, String> tags = new HashMap<>();\n        tags.put(""host"", ""localhost"");\n\n        long start = System.currentTimeMillis();\n        long timestamp = start;\n\n        for (int x = 1; x <= 100; x++) {\n\n            System.out.println(""adding value x:"" + x);\n            gStore.addValue(timestamp, 2.0);\n            timestamp = timestamp + 1000;\n\n            if (x % 10 == 0) {\n                gStore.archiveCurrentCompressor();\n            }\n            if (x < 50) {\n                continue;\n            }\n\n            System.out.println(""fetching values x:"" + x);\n            long totalObservations = 0;\n\n            List<WrappedGorillaDecompressor> decompressorList = gStore.getDecompressors(start, timestamp);\n            Pair pair = null;\n            for (WrappedGorillaDecompressor w : decompressorList) {\n                while ((pair = w.readPair()) != null) {\n                    totalObservations++;\n                    // System.out.println(pair.getTimestamp() + "" --> "" +\n                    // pair.getDoubleValue());\n                }\n            }\n\n            Assert.assertEquals(""Unexpected number of total observations"", x, totalObservations);\n\n        }\n\n    }\n']",put;start;Pair;timestamp;new;Gorilla;Map;Observations;etching;Wrapped,4.94765117764473e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;1.7462298274040222e-10,5,5,"[-5.507000923156738, -4.941867828369141, -5.309074878692627, -6.407336235046387, -5.502073287963867, -0.022116562351584435]",0.9781262278556824
1,"['    @Test\n    public void testOne() throws TimelyException {\n\n        long now = System.currentTimeMillis();\n        DataStoreCache mmStore = getMetricMemoryStore1(now);\n\n        QueryRequest query = new QueryRequest();\n        query.setStart(now);\n        query.setEnd(now + 100000);\n        query.setMsResolution(true);\n        QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();\n        subQuery.setDownsample(Optional.of(""5s-avg""));\n        subQuery.setMetric(""mymetric"");\n        subQuery.addTag(""host"", "".*"");\n        query.setQueries(Collections.singleton(subQuery));\n\n        try {\n            List<QueryResponse> responseList = mmStore.query(query);\n            for (QueryResponse response : responseList) {\n                System.out.println(response.toString());\n            }\n        } catch (TimelyException e) {\n            e.printStackTrace();\n        }\n    }\n']",Query;Request;Query;query;One;long;Resolution;println;Downsample;Timely,1.862645149230957e-08;3.725290298461914e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;2.3283064365386963e-09,5,5,"[-5.473628997802734, -5.066220283508301, -5.372621059417725, -6.454707145690918, -5.4784393310546875, -0.021114451810717583]",0.9791069030761719
1,"['    @Test\n    public void testStorage() throws TimelyException {\n\n        long now = System.currentTimeMillis();\n        DataStoreCache mmStore = getMetricMemoryStore2(now);\n\n        QueryRequest query = new QueryRequest();\n        query.setStart(now);\n        query.setEnd(now + 86400000);\n        query.setMsResolution(true);\n        QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();\n        subQuery.setDownsample(Optional.of(""5m-avg""));\n        subQuery.setMetric(""metric.number.1"");\n        subQuery.addTag(""host"", "".*"");\n        query.setQueries(Collections.singleton(subQuery));\n\n        try {\n            List<QueryResponse> responseList = mmStore.query(query);\n            for (QueryResponse response : responseList) {\n                System.out.println(response.toString());\n            }\n        } catch (TimelyException e) {\n            e.printStackTrace();\n        }\n    }\n']",println;Ms;Time;Query;Request;response;Sub;Query;Cache;set,1.7462298274040222e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.89530235528946e-10;9.313225746154785e-10;5.820766091346741e-10;4.802132025361061e-10;4.511093720793724e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.511026382446289, -4.931692600250244, -5.326972961425781, -6.417876720428467, -5.516092777252197, -0.022009050473570824]",0.9782313704490662
1,"['    @Test\n    public void TestExtentOfStorage() {\n        DataStoreCache mmStore = new DataStoreCache(configuration);\n\n        HashMap<String, String> tags = new HashMap<>();\n        tags.put(""host"", ""localhost"");\n\n        long start = System.currentTimeMillis();\n        long timestamp = start;\n\n        for (int x = 1; x <= 100; x++) {\n\n            Metric m = createMetric(""test.metric"", tags, 2.0, timestamp);\n            mmStore.store(m);\n            mmStore.flushCaches(-1);\n            timestamp = timestamp + 60000;\n\n            QueryRequest query = new QueryRequest();\n            query.setStart(start);\n            query.setEnd(start + 86400000);\n            query.setMsResolution(true);\n            QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();\n            // subQuery.setDownsample(Optional.of(""5m-avg""));\n            subQuery.setMetric(""test.metric"");\n            query.setQueries(Collections.singleton(subQuery));\n\n            try {\n                List<QueryResponse> responseList = mmStore.query(query);\n                long totalObservations = 0;\n                for (QueryResponse r : responseList) {\n                    totalObservations += r.getDps().size();\n                }\n                Assert.assertEquals(""Unexpected number of total observations"", x, totalObservations);\n\n            } catch (TimelyException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n    }\n']",List;localhost;current;Time;metric;Metric;mm;Request;Query;total,1.0186340659856796e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.496022701263428, -4.950944423675537, -5.322482109069824, -6.416720390319824, -5.496003150939941, -0.022038552910089493]",0.9782024025917053
1,"['    @Test\n    public void testCreateDeserialization() throws Exception {\n        // @formatter:off\n\t\tString json = ""{ ""\n\t\t\t\t       + ""\\""operation\\"" : \\""create\\"",""\n\t\t\t\t       + "" \\""sessionId\\"": \\""1234\\""""\n\t\t\t\t    + ""}"";\n\t\t// @formatter:on\n        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);\n        Assert.assertNotNull(request);\n        Assert.assertEquals(CreateSubscription.class, request.getClass());\n        Assert.assertEquals(""1234"", ((CreateSubscription) request).getSessionId());\n    }\n']",formatter;formatter;off;Create;json;Request;operation;read;Subscription;Session,2.852175384759903e-09;1.7462298274040222e-09;1.2223608791828156e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10,5,5,"[-5.529443264007568, -5.025358200073242, -5.436141014099121, -6.474609851837158, -5.48319149017334, -0.02080673538148403]",0.9794081449508667
1,"['    @Test\n    public void testRemoveDeserialization() throws Exception {\n        // @formatter:off\n\t\tString json = ""{ ""\n\t\t\t\t       + ""\\""operation\\"" : \\""remove\\"",""\n\t\t\t\t       + "" \\""sessionId\\"": \\""1234\\"",""\n\t\t\t\t       + "" \\""metric\\"" : \\""sys.cpu.user\\""""\n\t\t\t\t    + ""}"";\n\t\t// @formatter:on\n        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);\n        Assert.assertNotNull(request);\n        Assert.assertEquals(RemoveSubscription.class, request.getClass());\n        Assert.assertEquals(""1234"", ((RemoveSubscription) request).getSessionId());\n        Assert.assertEquals(""sys.cpu.user"", ((RemoveSubscription) request).getMetric());\n    }\n']",Web;formatter;get;metric;Web;Subscription;Util;read;Value;Assert,8.149072527885437e-10;5.820766091346741e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.90084392670542e-10,5,5,"[-5.499929904937744, -5.066220760345459, -5.454866886138916, -6.48122501373291, -5.471188068389893, -0.020617924630641937]",0.9795931577682495
1,"['    @Test\n    public void testCloseDeserialization() throws Exception {\n        // @formatter:off\n\t\tString json = ""{ ""\n\t\t\t\t       + ""\\""operation\\"" : \\""close\\"",""\n\t\t\t\t       + "" \\""sessionId\\"": \\""1234\\""""\n\t\t\t\t    + ""}"";\n\t\t// @formatter:on\n        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);\n        Assert.assertNotNull(request);\n        Assert.assertEquals(CloseSubscription.class, request.getClass());\n        Assert.assertEquals(""1234"", ((CloseSubscription) request).getSessionId());\n    }\n']",formatter;json;off;Close;son;json;operation;formatter;Value;Session,1.5133991837501526e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.527987003326416, -5.022975444793701, -5.437439918518066, -6.47622537612915, -5.483282566070557, -0.020820043981075287]",0.9793952107429504
1,"['    @Test\n    public void testAddDeserialization() throws Exception {\n        // @formatter:off\n\t\tString json = ""{"" +\n\t\t\t\t\t\t""\\""operation\\"" : \\""add\\"","" +\n\t\t\t\t\t\t""\\""sessionId\\"" : \\""1234\\"","" +\n\t\t\t\t\t    "" \\""metric\\"" : \\""sys.cpu.user\\"""" +\n\t\t\t\t\t  ""}"";\n\t\t// @formatter:on\n        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);\n        Assert.assertNotNull(request);\n        Assert.assertEquals(AddSubscription.class, request.getClass());\n        Assert.assertEquals(""1234"", ((AddSubscription) request).getSessionId());\n        Assert.assertEquals(""sys.cpu.user"", ((AddSubscription) request).getMetric());\n        Assert.assertEquals(false, ((AddSubscription) request).getTags().isPresent());\n        Assert.assertEquals(false, ((AddSubscription) request).getStartTime().isPresent());\n    }\n']",formatter;Socket;Exception;Present;metric;Time;Request;Subscription;cpu;Value,1.280568540096283e-09;6.984919309616089e-10;6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.489232540130615, -5.07754373550415, -5.4383931159973145, -6.468976974487305, -5.459125995635986, -0.02073434367775917]",0.9794792532920837
1,"['    @Test\n    public void testAddDeserializationWithTime() throws Exception {\n        // @formatter:off\n\t\tString json = ""{"" +\n\t\t\t\t\t\t""\\""operation\\"" : \\""add\\"","" +\n\t\t\t\t\t\t""\\""sessionId\\"" : \\""1234\\"","" +\n\t\t\t\t\t    ""\\""metric\\"" : \\""sys.cpu.user\\"","" +\n\t\t\t\t\t\t""\\""startTime\\"" : \\""1000\\"""" +\n\t\t\t\t\t  ""}"";\n\t\t// @formatter:on\n        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);\n        Assert.assertNotNull(request);\n        Assert.assertEquals(AddSubscription.class, request.getClass());\n        Assert.assertEquals(""1234"", ((AddSubscription) request).getSessionId());\n        Assert.assertEquals(""sys.cpu.user"", ((AddSubscription) request).getMetric());\n        Assert.assertEquals(false, ((AddSubscription) request).getTags().isPresent());\n        Assert.assertEquals(true, ((AddSubscription) request).getStartTime().isPresent());\n        long time = ((AddSubscription) request).getStartTime().get();\n        Assert.assertEquals(1000L, time);\n    }\n']",formatter;Socket;Deserialization;formatter;metric;time;Start;long;user;operation,1.280568540096283e-09;1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.483487606048584, -5.084075927734375, -5.40790319442749, -6.4549994468688965, -5.465601444244385, -0.020848648622632027]",0.9793670773506165
1,"['    @Test\n    public void testAddDeserializationWithTimeAndTags() throws Exception {\n        // @formatter:off\n\t\tString json = ""{"" +\n\t\t\t\t\t\t""\\""operation\\"" : \\""add\\"","" +\n\t\t\t\t\t\t""\\""sessionId\\"" : \\""1234\\"","" +\n\t\t\t\t\t    ""\\""metric\\"" : \\""sys.cpu.user\\"","" +\n\t\t\t\t\t\t""\\""tags\\"" : {"" +\n\t\t\t\t\t       ""\\""tag2\\"" : \\""value2\\"","" +\n\t\t\t\t\t       ""\\""tag1\\"" : \\""value1\\"""" +\n\t\t\t\t\t    ""},"" +\n\t\t\t\t\t\t""\\""startTime\\"" : \\""1000\\"","" +\n\t\t\t\t\t    ""\\""endTime\\"" : \\""2000\\""""+\n\t\t\t\t\t  ""}"";\n\t\t// @formatter:on\n        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);\n        Assert.assertNotNull(request);\n        Assert.assertEquals(AddSubscription.class, request.getClass());\n        Assert.assertEquals(""1234"", ((AddSubscription) request).getSessionId());\n        Assert.assertEquals(""sys.cpu.user"", ((AddSubscription) request).getMetric());\n        Assert.assertEquals(true, ((AddSubscription) request).getTags().isPresent());\n        Map<String, String> tags = ((AddSubscription) request).getTags().get();\n        Assert.assertTrue(tags.containsKey(""tag1""));\n        Assert.assertEquals(""value1"", tags.get(""tag1""));\n        Assert.assertTrue(tags.containsKey(""tag2""));\n        Assert.assertEquals(""value2"", tags.get(""tag2""));\n        Assert.assertEquals(true, ((AddSubscription) request).getStartTime().isPresent());\n        long start = ((AddSubscription) request).getStartTime().get();\n        Assert.assertEquals(1000L, start);\n        Assert.assertEquals(true, ((AddSubscription) request).getEndTime().isPresent());\n        long end = ((AddSubscription) request).getEndTime().get();\n        Assert.assertEquals(2000L, end);\n    }\n']",Deserialization;Bytes;Socket;Subscription;user;Present;json;start;Value;Assert,1.5133991837501526e-09;5.820766091346741e-10;4.656612873077393e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.9281287677586079e-10,5,5,"[-5.438379287719727, -5.10377311706543, -5.416059494018555, -6.430910110473633, -5.432287216186523, -0.021069515496492386]",0.9791510105133057
1,"['    @Test\n    public void testAddDeserializationWithStartAndDelayTimeAndTags() throws Exception {\n        // @formatter:off\n\t\tString json = ""{"" +\n\t\t\t\t\t\t""\\""operation\\"" : \\""add\\"","" +\n\t\t\t\t\t\t""\\""sessionId\\"" : \\""1234\\"","" +\n\t\t\t\t\t    ""\\""metric\\"" : \\""sys.cpu.user\\"","" +\n\t\t\t\t\t\t""\\""tags\\"" : {"" +\n\t\t\t\t\t       ""\\""tag2\\"" : \\""value2\\"","" +\n\t\t\t\t\t       ""\\""tag1\\"" : \\""value1\\"""" +\n\t\t\t\t\t    ""},"" +\n\t\t\t\t\t\t""\\""startTime\\"" : \\""1000\\"","" +\n\t\t\t\t\t    ""\\""delayTime\\"" : \\""500\\"""" +\n\t\t\t\t\t  ""}"";\n\t\t// @formatter:on\n        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);\n        Assert.assertNotNull(request);\n        Assert.assertEquals(AddSubscription.class, request.getClass());\n        Assert.assertEquals(""1234"", ((AddSubscription) request).getSessionId());\n        Assert.assertEquals(""sys.cpu.user"", ((AddSubscription) request).getMetric());\n        Assert.assertEquals(true, ((AddSubscription) request).getTags().isPresent());\n        Map<String, String> tags = ((AddSubscription) request).getTags().get();\n        Assert.assertTrue(tags.containsKey(""tag1""));\n        Assert.assertEquals(""value1"", tags.get(""tag1""));\n        Assert.assertTrue(tags.containsKey(""tag2""));\n        Assert.assertEquals(""value2"", tags.get(""tag2""));\n        Assert.assertEquals(true, ((AddSubscription) request).getStartTime().isPresent());\n        long time = ((AddSubscription) request).getStartTime().get();\n        Assert.assertEquals(1000L, time);\n        long delay = ((AddSubscription) request).getDelayTime().get();\n        Assert.assertEquals(500L, delay);\n    }\n']",formatter;formatter;Exception;Subscription;Present;Equals;get;Subscription;Subscription;Tags,6.05359673500061e-09;2.0954757928848267e-09;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;2.7284841053187847e-10;2.473825588822365e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.437809467315674, -5.100072383880615, -5.399986743927002, -6.425232410430908, -5.436559200286865, -0.02115880511701107]",0.9790634512901306
1,"['    @Test\n    public void testToKeys() {\n        Meta one = new Meta(""sys.cpu.user"", ""tag1"", ""value1"");\n        List<Key> keys = one.toKeys();\n        Assert.assertTrue(keys.contains(new Key(""m:sys.cpu.user"")));\n        Assert.assertTrue(keys.contains(new Key(""t:sys.cpu.user"", ""tag1"")));\n        Assert.assertTrue(keys.contains(new Key(""v:sys.cpu.user"", ""tag1"", ""value1"")));\n    }\n']",Keys;Meta;cpu;value;value;contains;Key;cpu;keys;Assert,1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.49108362197876, -5.04064416885376, -5.418590068817139, -6.459045886993408, -5.447848796844482, -0.021119587123394012]",0.9791017770767212
1,"['    @Test\n    public void testResponse1() throws Exception {\n        SearchLookupResponse response = new SearchLookupResponse();\n        response.setType(""LOOKUP"");\n        response.setMetric(""sys.cpu.user"");\n        response.putTag(""host"", ""localhost"");\n        response.putTag(""rack"", ""r1"");\n        response.setTime(1500);\n        List<Result> results = new ArrayList<>();\n        Result r1 = new Result();\n        r1.setMetric(""sys.cpu.idle"");\n        r1.setTsuid(""000011000008203D00"");\n        r1.putTag(""host"", ""localhost"");\n        r1.putTag(""rack"", ""r1"");\n        Result r2 = new Result();\n        r2.setMetric(""sys.cpu.user"");\n        r2.setTsuid(""000011000008203D01"");\n        r2.putTag(""host"", ""localhost"");\n        r2.putTag(""rack"", ""r1"");\n        results.add(r1);\n        results.add(r2);\n        response.setResults(results);\n        response.setTotalResults(results.size());\n        String r = JsonUtil.getObjectMapper().writeValueAsString(response);\n        String expected = ""{\\""type\\"":\\""LOOKUP\\"",\\""metric\\"":\\""sys.cpu.user\\"",\\""tags\\"":{\\""rack\\"":\\""r1\\"",\\""host\\"":\\""localhost\\""},\\""limit\\"":0,\\""time\\"":1500,\\""totalResults\\"":2,\\""results\\"":[{\\""tags\\"":{\\""rack\\"":\\""r1\\"",\\""host\\"":\\""localhost\\""},\\""metric\\"":\\""sys.cpu.idle\\"",\\""tsuid\\"":\\""000011000008203D00\\""},{\\""tags\\"":{\\""rack\\"":\\""r1\\"",\\""host\\"":\\""localhost\\""},\\""metric\\"":\\""sys.cpu.user\\"",\\""tsuid\\"":\\""000011000008203D01\\""}]}"";\n        Assert.assertEquals(expected, r);\n        SearchLookupResponse slr = JsonUtil.getObjectMapper().readValue(r, SearchLookupResponse.class);\n        Assert.assertEquals(response, slr);\n    }\n']",Response;Metric;response;Metric;Lookup;Array;Object;Result;response;Metric,1.5133991837501526e-09;8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.405655384063721, -5.081666946411133, -5.420358180999756, -6.45951509475708, -5.443342208862305, -0.021240850910544395]",0.9789832830429077
1,"['    @Test\n    public void testGenerateHtml() throws Exception {\n        Configuration cfg = TestConfiguration.createMinimalConfigurationForTest();\n        MetaCache cache = MetaCacheFactory.getCache(cfg);\n        cache.add(new Meta(""sys.cpu.user"", ""host"", ""localhost""));\n        cache.add(new Meta(""sys.cpu.user"", ""instance"", ""0""));\n        cache.add(new Meta(""sys.cpu.idle"", ""host"", ""localhost""));\n        cache.add(new Meta(""sys.cpu.idle"", ""instance"", ""0""));\n        TestMetricsResponse r = new TestMetricsResponse(cfg);\n        String html = r.generateHtml().toString();\n        Assert.assertTrue(html.contains(""<td>sys.cpu.idle</td>""));\n        Assert.assertTrue(html.contains(""<td>host=localhost instance=0 </td>""));\n        Assert.assertTrue(html.contains(""<td>sys.cpu.user</td>""));\n        Assert.assertTrue(html.contains(""<td>host=localhost instance=0 </td>""));\n    }\n']",Minimal;localhost;Configuration;html;create;Assert;Meta;Configuration;True;cf,1.280568540096283e-09;9.604264050722122e-10;9.313225746154785e-10;5.529727786779404e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.499059200286865, -5.017500400543213, -5.44607400894165, -6.467925548553467, -5.485973834991455, -0.020939476788043976]",0.9792782068252563
1,"['    @Test\n    public void testGenerateHtmlWithIgnoredTags() throws Exception {\n        Configuration cfg = TestConfiguration.createMinimalConfigurationForTest();\n        cfg.getMetricsReportIgnoredTags().add(""instance"");\n        MetaCache cache = MetaCacheFactory.getCache(cfg);\n        cache.add(new Meta(""sys.cpu.user"", ""host"", ""localhost""));\n        cache.add(new Meta(""sys.cpu.user"", ""instance"", ""0""));\n        cache.add(new Meta(""sys.cpu.idle"", ""host"", ""localhost""));\n        cache.add(new Meta(""sys.cpu.idle"", ""instance"", ""0""));\n        TestMetricsResponse r = new TestMetricsResponse(cfg);\n        String html = r.generateHtml().toString();\n        Assert.assertTrue(html.contains(""<td>sys.cpu.idle</td>""));\n        Assert.assertTrue(html.contains(""<td>host=localhost </td>""));\n        Assert.assertTrue(html.contains(""<td>sys.cpu.user</td>""));\n        Assert.assertTrue(html.contains(""<td>host=localhost </td>""));\n    }\n']",Tags;tml;localhost;sys;html;Configuration;host;html;Cache;Metrics,5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10;2.546585164964199e-10;2.473825588822365e-10,5,5,"[-5.5153937339782715, -4.983977317810059, -5.440357685089111, -6.468217372894287, -5.496903419494629, -0.021081186830997467]",0.9791394472122192
1,"['    @Test\n    public void testSuggestResponseEmpty() throws Exception {\n        SuggestResponse response = new SuggestResponse();\n        String r = JsonUtil.getObjectMapper().writeValueAsString(response);\n        Assert.assertEquals(""[]"", r);\n    }\n']",Suggest;response;Value;Response;Util;get;Object;son;Empty;apper,8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.5550856590271, -4.983222007751465, -5.43740177154541, -6.4965691566467285, -5.4896697998046875, -0.020925818011164665]",0.9792917370796204
1,"['    @Test\n    public void testSuggestResponse() throws Exception {\n        SuggestResponse response = new SuggestResponse();\n        response.addSuggestion(""sys.cpu.idle"");\n        response.addSuggestion(""sys.cpu.user"");\n        String r = JsonUtil.getObjectMapper().writeValueAsString(response);\n        Assert.assertEquals(""[\\""sys.cpu.idle\\"",\\""sys.cpu.user\\""]"", r);\n    }\n']",son;apper;add;Suggestion;Response;Exception;new;write;user;cpu,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.512911319732666, -5.061336994171143, -5.463803768157959, -6.503885269165039, -5.470056056976318, -0.020526601001620293]",0.9796825051307678
1,"['    @Test\n    public void testAggregatorsResponseEmpty() throws Exception {\n        AggregatorsResponse response = new AggregatorsResponse();\n        String r = JsonUtil.getObjectMapper().writeValueAsString(response);\n        Assert.assertEquals(""[]"", r);\n    }\n']",Aggregators;new;Exception;Response;As;Equals;Object;Response;Aggregators;apper,1.3387762010097504e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.3655745685100555e-10;2.3283064365386963e-10;0.0;-1.7462298274040222e-10;-1.7462298274040222e-10,5,5,"[-5.514568328857422, -5.031243801116943, -5.3541460037231445, -6.431056976318359, -5.436071872711182, -0.02148321457207203]",0.9787458181381226
1,"['    @Test\n    public void testAggregatorsResponse() throws Exception {\n        AggregatorsResponse response = new AggregatorsResponse();\n        response.addAggregator(""min"");\n        response.addAggregator(""max"");\n        String r = JsonUtil.getObjectMapper().writeValueAsString(response);\n        Assert.assertEquals(""[\\""min\\"",\\""max\\""]"", r);\n    }\n']",Response;add;Aggregators;response;Value;response;Aggregator;son;apper;Aggregators,1.4260876923799515e-09;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.517919063568115, -5.035283088684082, -5.407496929168701, -6.467466354370117, -5.475161552429199, -0.020962240174412727]",0.9792559146881104
1,"['    @Test\n    public void testEmptyResponse() throws Exception {\n        String r = JsonUtil.getObjectMapper().writeValueAsString(Collections.emptyList());\n        Assert.assertEquals(""[]"", r);\n    }\n']",Collections;Response;son;As;Exception;List;Equals;Object;Empty;Assert,1.1641532182693481e-09;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;0.0;-7.275957614183426e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.9103830456733704e-10,5,5,"[-5.559735298156738, -4.99556827545166, -5.416893482208252, -6.500209808349609, -5.477818489074707, -0.020958153530955315]",0.9792598485946655
1,"['    @Test\n    public void testOneResponse() throws Exception {\n        QueryResponse r = new QueryResponse();\n        r.setMetric(""sys.cpu.user"");\n        r.putTag(""host"", ""localhost"");\n        r.putTag(""rack"", ""r1"");\n        r.putDps(""1234567890"", 4.5);\n        r.putDps(""1234567900"", 3.5);\n        r.putDps(""1234567910"", 2.5);\n        String result = JsonUtil.getObjectMapper().writeValueAsString(Collections.singletonList(r));\n        String expected = ""[{\\""metric\\"":\\""sys.cpu.user\\"",\\""tags\\"":{\\""rack\\"":\\""r1\\"",\\""host\\"":\\""localhost\\""},\\""aggregatedTags\\"":[],\\""dps\\"":{\\""1234567890\\"":4.5,\\""1234567900\\"":3.5,\\""1234567910\\"":2.5}}]"";\n        Assert.assertEquals(expected, result);\n    }\n']",cpu;Response;Metric;Exception;cpu;Assert;Tag;Collections;rack;singleton,3.14321368932724e-09;2.7939677238464355e-09;2.561137080192566e-09;2.066371962428093e-09;1.6298145055770874e-09;1.3387762010097504e-09;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10,5,5,"[-5.432818412780762, -5.070262908935547, -5.460973262786865, -6.483841419219971, -5.465585708618164, -0.020875150337815285]",0.9793412089347839
1,"['    @Test\n    public void testNumberFormat() {\n        String m = ""sys.cpu.user"";\n        long time = System.currentTimeMillis();\n        double value = ThreadLocalRandom.current().nextDouble(0.0D, 100.0D);\n        String put = MessageFormat.format(FMT, m, time, value, ""host=localhost"", ""rack=r1"");\n        NumberFormat formattedDouble = DecimalFormat.getInstance();\n        formattedDouble.setMaximumFractionDigits(3);\n        String newValue = formattedDouble.format(value);\n        Assert.assertEquals(""put sys.cpu.user "" + time + "" "" + newValue + "" host=localhost rack=r1"", put);\n    }\n']",cpu;Double;time;Format;MT;Mill;next;sys;long;Local,1.8044374883174896e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;9.89530235528946e-10;8.731149137020111e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.524142742156982, -4.776756286621094, -5.368630409240723, -6.468879222869873, -5.561281681060791, -0.022724106907844543]",0.977532148361206
1,"['    @Test\n    public void testContents() {\n        Meta one = new Meta(""sys.cpu.user"", ""tag1"", ""value1"");\n        Meta two = new Meta(""sys.cpu.user"", ""tag2"", ""value2"");\n        Meta three = new Meta(""sys.cpu.user"", ""tag3"", ""value3"");\n        MetaKeySet mks = new MetaKeySet();\n        mks.addAll(one.toKeys());\n        mks.addAll(two.toKeys());\n        mks.addAll(three.toKeys());\n        Assert.assertEquals(7, mks.size());\n        Assert.assertTrue(mks.contains(new Key(""m:sys.cpu.user"")));\n        Assert.assertTrue(mks.contains(new Key(""t:sys.cpu.user"", ""tag1"")));\n        Assert.assertTrue(mks.contains(new Key(""t:sys.cpu.user"", ""tag2"")));\n        Assert.assertTrue(mks.contains(new Key(""t:sys.cpu.user"", ""tag3"")));\n        Assert.assertTrue(mks.contains(new Key(""v:sys.cpu.user"", ""tag1"", ""value1"")));\n        Assert.assertTrue(mks.contains(new Key(""v:sys.cpu.user"", ""tag2"", ""value2"")));\n        Assert.assertTrue(mks.contains(new Key(""v:sys.cpu.user"", ""tag3"", ""value3"")));\n    }\n']",add;Meta;Contents;ks;contains;tag;All;Keys;sys;Meta,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.411775588989258, -5.126607894897461, -5.464986324310303, -6.459677696228027, -5.375247478485107, -0.02104780450463295]",0.9791721701622009
1,"['    @Test\n    public void testToMutations() {\n        Meta one = new Meta(""sys.cpu.user"", ""tag1"", ""value1"");\n        Meta two = new Meta(""sys.cpu.user"", ""tag2"", ""value2"");\n        Meta three = new Meta(""sys.cpu.user"", ""tag3"", ""value3"");\n        MetaKeySet mks = new MetaKeySet();\n        mks.addAll(one.toKeys());\n        mks.addAll(two.toKeys());\n        mks.addAll(three.toKeys());\n        List<Mutation> muts = mks.toMutations();\n        Mutation e1 = new Mutation(""m:sys.cpu.user"");\n        e1.put("""", """", MetaKeySet.NULL_VALUE);\n        Mutation e2 = new Mutation(""t:sys.cpu.user"");\n        e2.put(""tag1"", """", MetaKeySet.NULL_VALUE);\n        e2.put(""tag2"", """", MetaKeySet.NULL_VALUE);\n        e2.put(""tag3"", """", MetaKeySet.NULL_VALUE);\n        Mutation e3 = new Mutation(""v:sys.cpu.user"");\n        e3.put(""tag1"", ""value1"", MetaKeySet.NULL_VALUE);\n        e3.put(""tag2"", ""value2"", MetaKeySet.NULL_VALUE);\n        e3.put(""tag3"", ""value3"", MetaKeySet.NULL_VALUE);\n        Assert.assertEquals(3, muts.size());\n        Assert.assertTrue(muts.contains(e1));\n        Assert.assertTrue(muts.contains(e2));\n        Assert.assertTrue(muts.contains(e3));\n    }\n']",cpu;Meta;utation;utation;cpu;new;sys;Meta;put;user,1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.398210525512695, -5.124764442443848, -5.43168306350708, -6.440432071685791, -5.394961357116699, -0.021206539124250412]",0.9790168404579163
1,"['    @Test\n    public void simple() {\n        Aggregation asample = new Aggregation(new Avg());\n        for (int i = 10; i < 30; i++) {\n            asample.add(i, i - 10);\n        }\n        for (int i = 10; i < 30; i++) {\n            asample.add(i, i);\n        }\n        int i = 0;\n        for (Sample sample : asample) {\n            assertEquals(10 + i, sample.timestamp);\n            assertTrue(sample.timestamp < 30);\n            assertEquals(i + 5, (int) sample.value);\n            i++;\n        }\n        assertEquals(20, i);\n        asample = new Aggregation(new Sum());\n        for (int j = 0; j < 5; j++) {\n            for (int k = 10; k < 100; k++) {\n                asample.add(k, j + 0.);\n            }\n        }\n        i = 0;\n        for (Sample sample : asample) {\n            assertEquals(10 + i, sample.timestamp);\n            assertEquals((1 + 2 + 3 + 4), sample.value, 0.0D);\n            i++;\n        }\n        assertEquals(100 - 10, i);\n    }\n']",Aggregation;new;Sum;Avg;asample;add;Equals;sample;asample;timestamp,2.153683453798294e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.460521221160889, -5.0771684646606445, -5.3776774406433105, -6.413321018218994, -5.456892490386963, -0.021237699314951897]",0.9789862036705017
1,"['    @Test\n    public void simple() {\n        Downsample dsample = new Downsample(10, 30, 1, new Avg());\n        for (int i = 10; i < 30; i++) {\n            dsample.add(i, i - 10);\n        }\n        int i = 0;\n        for (Sample sample : dsample) {\n            assertEquals(10 + i, sample.timestamp);\n            assertTrue(sample.timestamp < 30);\n            assertEquals(i, (int) sample.value);\n            i++;\n        }\n        assertEquals(20, i);\n        dsample = new Downsample(10, 100, 7, new Sum());\n        for (int j = 0; j < 5; j++) {\n            for (int k = 10; k < 100; k++) {\n                dsample.add(k, j + 0.);\n            }\n        }\n        i = 0;\n        for (Sample sample : dsample) {\n            assertEquals((1 + 2 + 3 + 4) * Math.min(7, (100 - (10 + i * 7))), sample.value, 0.0D);\n            assertEquals(10 + i * 7, sample.timestamp);\n            i++;\n        }\n        assertEquals((100 - 10) / 7 + 1, i);\n        dsample = new Downsample(10, 30, 10, new Avg());\n        for (int j = 10; j < 30; j++) {\n            for (int k = 0; k < 10; k++) {\n                dsample.add(j, k + 0.);\n            }\n        }\n        for (int j = 0; j < 100; j++) {\n            dsample.add(15, 0);\n        }\n        i = 0;\n        for (Sample sample : dsample) {\n            if (i == 0) {\n                assertEquals(2.25, sample.value, 0.0D);\n            } else {\n                assertEquals(4.5, sample.value, 0.0D);\n            }\n            assertEquals(10 * i + 10, sample.timestamp);\n            i++;\n        }\n        assertEquals(2, i);\n    }\n']",new;Sum;Downsample;timestamp;Equals;simple;new;Equals;sample;add,1.6298145055770874e-09;9.313225746154785e-10;6.912159733474255e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.419343948364258, -5.078582286834717, -5.3555073738098145, -6.409924030303955, -5.4471893310546875, -0.021565118804574013]",0.9786656498908997
1,"['    @Test\n    public void testCombineTrivial() throws Exception {\n        Downsample ds = new Downsample(0, 1000, 100, new Avg());\n        for (int i = 0; i < 1000; i += 100) {\n            ds.add(i, .2);\n        }\n        Downsample result = Downsample.combineDownsample(Collections.singleton(ds), null);\n        int count = 0;\n        for (Sample s : result) {\n            assertEquals(.2, s.value, 0.0D);\n            count++;\n        }\n        assertEquals(10, count);\n    }\n']",Downsample;combine;singleton;new;Collections;new;Downsample;null;result;result,9.89530235528946e-10;9.022187441587448e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.514327049255371, -5.014093399047852, -5.430403709411621, -6.47802209854126, -5.504508972167969, -0.020875267684459686]",0.9793410897254944
1,"['    @Test\n    public void testCombineMissingReport() throws Exception {\n        Downsample ds = new Downsample(0, 1000, 100, new Avg());\n        for (int i = 0; i < 1000; i += 100) {\n            if (i != 700) {\n                ds.add(i, .2);\n            }\n        }\n        Downsample result = Downsample.combineDownsample(Collections.singleton(ds), null);\n        int count = 0;\n        for (Sample s : result) {\n            assertEquals(.2, s.value, 0.0D);\n            count++;\n        }\n        assertEquals(9, count);\n    }\n']",Sample;Report;count;new;Collections;Combine;combine;Missing;singleton;null,6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10,5,5,"[-5.501256942749023, -5.033605098724365, -5.431381702423096, -6.479860782623291, -5.495871543884277, -0.020826933905482292]",0.9793883562088013
1,"['    @Test\n    public void testDownsampleStartCalculation() throws Exception {\n        long queryStart = System.currentTimeMillis() - 86400000;\n        long period = 60000;\n        long keyTimestamp = queryStart + (86400000 / 2 + 3256);\n\n        Set<Long> expectedStartTimes = new HashSet<>();\n        for (long i = queryStart; i < queryStart + 86400000; i += period) {\n            expectedStartTimes.add(i);\n        }\n        assertEquals(1440, expectedStartTimes.size());\n\n        long sampleStart = keyTimestamp - ((keyTimestamp - queryStart) % period);\n        assertTrue(expectedStartTimes.contains(sampleStart));\n\n    }\n']",Calculation;Timestamp;contains;Downsample;query;long;query;Start;Timestamp;period,4.249159246683121e-09;1.6298145055770874e-09;1.4551915228366852e-09;1.0186340659856796e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10,5,5,"[-5.55521297454834, -4.844293594360352, -5.3569440841674805, -6.49202823638916, -5.568845748901367, -0.022026892751455307]",0.978213906288147
1,"['    @Test\n    public void simpleGetOneSample() throws Exception {\n        // check that data gets pulled out\n        AggregationIterator iter = new AggregationIterator();\n        Map<Set<Tag>, Aggregation> samples = runQuery(iter, testData1, 100);\n        assertEquals(1, samples.size());\n        for (Entry<Set<Tag>, Aggregation> entry : samples.entrySet()) {\n            Set<Tag> tags = entry.getKey();\n            assertEquals(1, tags.size());\n            assertEquals(Collections.singleton(new Tag(""host"", "".*"")), tags);\n            long ts = 0;\n            int count = 0;\n            for (Sample sample : entry.getValue()) {\n                assertEquals(ts, sample.timestamp);\n                ts += 100;\n                assertEquals(0.2, sample.value, 0.0001);\n                count++;\n            }\n            assertEquals(1000, ts);\n            assertEquals(10, count);\n        }\n    }\n']",count;count;Data;Exception;Sample;simple;iter;Query;run;Get,1.862645149230957e-09;1.6298145055770874e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.515313625335693, -4.897583484649658, -5.346646308898926, -6.415871620178223, -5.507807731628418, -0.022188037633895874]",0.9780561923980713
1,"['    @Test\n    public void simpleAggregatedSample() throws Exception {\n        AggregationIterator iter = new AggregationIterator();\n        Map<Set<Tag>, Aggregation> samples = runQuery(iter, testData2, 100);\n        assertEquals(1, samples.size());\n        for (Entry<Set<Tag>, Aggregation> entry : samples.entrySet()) {\n            Set<Tag> tags = entry.getKey();\n            assertEquals(1, tags.size());\n            assertEquals(Collections.singleton(new Tag(""host"", "".*"")), tags);\n            long ts = 0;\n            int count = 0;\n            for (Sample sample : entry.getValue()) {\n                assertEquals(ts, sample.timestamp);\n                ts += 100;\n                assertEquals(count == 0 ? 0.2 : (count == 10 ? 0.5 : 0.35), sample.value, 0.0001);\n                count++;\n            }\n            assertEquals(11, count);\n        }\n    }\n']",value;Equals;run;Aggregation;iter;entry;Tag;Set;size;Aggregated,5.587935447692871e-09;2.0954757928848267e-09;1.862645149230957e-09;1.7462298274040222e-09;1.5425030142068863e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.604264050722122e-10,5,5,"[-5.5124945640563965, -4.962795734405518, -5.367986679077148, -6.435275554656982, -5.508010387420654, -0.021582268178462982]",0.9786489605903625
1,"['    @Test\n    public void simpleGetOneSample() throws Exception {\n        // check that data gets pulled out\n        DownsampleIterator iter = new DownsampleIterator();\n        Map<Set<Tag>, Downsample> samples = runQuery(iter, testData1, 100, -1);\n        assertEquals(1, samples.size());\n        for (Entry<Set<Tag>, Downsample> entry : samples.entrySet()) {\n            Set<Tag> tags = entry.getKey();\n            assertEquals(1, tags.size());\n            assertEquals(Collections.singleton(new Tag(""host"", ""host1"")), tags);\n            long ts = 0;\n            for (Sample sample : entry.getValue()) {\n                assertEquals(ts, sample.timestamp);\n                ts += 100;\n                assertEquals(0.2, sample.value, 0.0001);\n            }\n            assertEquals(1000, ts);\n        }\n    }\n']",Collections;out;One;Exception;Query;run;singleton;Downsample;host;tags,5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.487607479095459, -5.023778915405273, -5.3904523849487305, -6.451889991760254, -5.477418422698975, -0.021259406581521034]",0.9789651036262512
1,"['    @Test\n    public void simpleGetTwoSamples() throws Exception {\n        DownsampleIterator iter = new DownsampleIterator();\n        Map<Set<Tag>, Downsample> samples = runQuery(iter, testData2, 100, -1);\n        assertEquals(2, samples.size());\n        for (Tag tag : new Tag[] { new Tag(""host"", ""host1""), new Tag(""host"", ""host2"") }) {\n            Downsample dsample = samples.get(Collections.singleton(tag));\n            assertNotNull(dsample);\n            long ts = 0;\n            double value = .2;\n            if (tag.getValue().equals(""host2"")) {\n                value = .5;\n            }\n            int count = 0;\n            for (Sample sample : dsample) {\n                assertEquals(ts, sample.timestamp);\n                ts += 100;\n                assertEquals(value, sample.value, 0.0001);\n                count++;\n            }\n            assertEquals(10, count);\n        }\n    }\n']",Data;Get;Downsample;simple;samples;sample;sample;Two;run;count,3.259629011154175e-09;1.280568540096283e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.480474948883057, -4.988332748413086, -5.363091945648193, -6.433154582977295, -5.481878757476807, -0.021672794595360756]",0.9785603880882263
1,"['    @Test\n    public void simpleTestDownsampling() throws Exception {\n        DownsampleIterator iter = new DownsampleIterator();\n        Map<Set<Tag>, Downsample> samples = runQuery(iter, testData2, 200, -1);\n        assertEquals(2, samples.size());\n        for (Tag tag : new Tag[] { new Tag(""host"", ""host1""), new Tag(""host"", ""host2"") }) {\n            Downsample dsample = samples.get(Collections.singleton(tag));\n            assertNotNull(dsample);\n            long ts = 0;\n            double value = .2;\n            if (tag.getValue().equals(""host2"")) {\n                value = .5;\n            }\n            int count = 0;\n            for (Sample sample : dsample) {\n                assertEquals(ts, sample.timestamp);\n                ts += 200;\n                assertEquals(value, sample.value, 0.0001);\n                count++;\n            }\n            assertEquals(5, count);\n        }\n    }\n']",timestamp;sample;Downsampling;ts;ts;iter;Iterator;count;Downsample;Data,5.587935447692871e-09;1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.6193447411060333e-10,5,5,"[-5.473193168640137, -5.015730381011963, -5.360930919647217, -6.42407751083374, -5.465649604797363, -0.021610617637634277]",0.978621244430542
1,"['    @Test\n    public void memoryEstimatorTestSmallObjects() {\n        long maxMemory = 1000;\n        long start = System.currentTimeMillis();\n        long period = 500l;\n        long sizeOfObjects = 20;\n        SampleObject o = new SampleObject();\n        DownsampleMemoryEstimator memoryEstimator = new DownsampleMemoryEstimator(maxMemory, start, period);\n        boolean shouldReturn = false;\n        for (long x = 100; x <= 5000; x += 100) {\n            long timestamp = start + x;\n            o.setSizeInBytes(o.sizeInBytes() + sizeOfObjects);\n            shouldReturn = memoryEstimator.shouldReturnBasedOnMemoryUsage(timestamp, o);\n            if (memoryEstimator.isNewBucket()) {\n                long memoryPercentageUsedCalculated = Math.round((double) o.sizeInBytes() / maxMemory * 100);\n                long memoryPercentageUsedEstimate = Math.round(memoryEstimator.getMemoryUsedPercentage());\n                long percentError = Math.round(Math.abs(memoryPercentageUsedCalculated - memoryPercentageUsedEstimate)\n                        / memoryPercentageUsedCalculated * 100);\n                assertTrue(percentError == 0);\n            }\n\n            if (shouldReturn) {\n                o.setSizeInBytes(0);\n                memoryEstimator.reset();\n            }\n        }\n        assertTrue(shouldReturn);\n    }\n']",Percentage;Sample;Time;Bytes;Mill;Percentage;Memory;Calculated;Return;Small,7.275957614183426e-10;6.984919309616089e-10;6.548361852765083e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;5.020410753786564e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.5415940284729, -4.747791290283203, -5.328063011169434, -6.440435409545898, -5.557477951049805, -0.023165078833699226]",0.9771012663841248
1,"['    @Test\n    public void memoryEstimatorTestLargeObjects() {\n        long maxMemory = 10000;\n        long start = System.currentTimeMillis();\n        long period = 500l;\n        long sizeOfObjects = 200;\n        SampleObject o = new SampleObject();\n        DownsampleMemoryEstimator memoryEstimator = new DownsampleMemoryEstimator(maxMemory, start, period);\n        boolean shouldReturn = false;\n        for (long x = 100; x <= 5000; x += 100) {\n            long timestamp = start + x;\n            o.setSizeInBytes(o.sizeInBytes() + sizeOfObjects);\n            shouldReturn = memoryEstimator.shouldReturnBasedOnMemoryUsage(timestamp, o);\n            if (memoryEstimator.isNewBucket()) {\n                long memoryPercentageUsedCalculated = Math.round((double) o.sizeInBytes() / maxMemory * 100);\n                long memoryPercentageUsedEstimate = Math.round(memoryEstimator.getMemoryUsedPercentage());\n                long percentError = Math.round(Math.abs(memoryPercentageUsedCalculated - memoryPercentageUsedEstimate)\n                        / memoryPercentageUsedCalculated * 100);\n                assertTrue(percentError == 0);\n                assertTrue(memoryEstimator.isHighVolumeBuckets());\n            }\n\n            if (shouldReturn) {\n                o.setSizeInBytes(0);\n                memoryEstimator.reset();\n            }\n        }\n        assertTrue(shouldReturn);\n    }\n']",Percentage;Estimator;timestamp;timestamp;uckets;Used;Size;should;long;Estimator,2.7939677238464355e-09;2.6775524020195007e-09;1.4842953532934189e-09;9.89530235528946e-10;9.458744898438454e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10,5,5,"[-5.532649993896484, -4.734492301940918, -5.326436519622803, -6.4409098625183105, -5.552451133728027, -0.023347003385424614]",0.9769232869148254
1,"['    @Test\n    public void testDownsampleCombining() throws Exception {\n\n        int numTagVariations = 2;\n        int sampleInterval = 50;\n        int elapsedTime = 100;\n        int skipInterval = 10;\n        SortedMap<Key, Value> testData3 = createTestData3(elapsedTime, skipInterval, numTagVariations);\n        DownsampleIterator iter = new DownsampleIterator();\n        Map<Set<Tag>, Downsample> samples = runQuery(iter, testData3, sampleInterval, 1000);\n        assertEquals(numTagVariations, samples.size());\n        long totalBuckets = 0;\n        for (Entry<Set<Tag>, Downsample> entry : samples.entrySet()) {\n            totalBuckets = totalBuckets + entry.getValue().getNumBuckets();\n        }\n        assertEquals((elapsedTime / sampleInterval) * numTagVariations, totalBuckets);\n    }\n']",total;Downsample;uckets;total;Query;elapsed;Variations;sample;num;Downsample,1.3387762010097504e-09;1.280568540096283e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.494327545166016, -4.962949752807617, -5.351803779602051, -6.469420909881592, -5.507832050323486, -0.02168014459311962]",0.978553056716919
1,"['    @Test\n    public void testVersion() throws Exception {\n        final TestServer m = new TestServer(conf);\n        m.run();\n        try (Socket sock = new Socket(""127.0.0.1"", 54321);\n                PrintWriter writer = new PrintWriter(sock.getOutputStream(), true);) {\n            writer.write(""version\\n"");\n            writer.flush();\n            while (1 != m.getTcpRequests().getCount()) {\n                Thread.sleep(5);\n            }\n            Assert.assertEquals(1, m.getTcpRequests().getResponses().size());\n            Assert.assertEquals(VersionRequest.class, m.getTcpRequests().getResponses().get(0).getClass());\n            VersionRequest v = (VersionRequest) m.getTcpRequests().getResponses().get(0);\n            Assert.assertEquals(VersionRequest.VERSION, v.getVersion());\n        } finally {\n            m.shutdown();\n        }\n    }\n']",Version;Server;flush;Version;Request;Requests;cp;new;sock;Version,3.259629011154175e-09;2.0954757928848267e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.463661193847656, -5.086173057556152, -5.394468307495117, -6.424850940704346, -5.419661045074463, -0.021234549582004547]",0.97898930311203
1,"['    @Test\n    public void testPut() throws Exception {\n        final TestServer m = new TestServer(conf);\n        m.run();\n        try (Socket sock = new Socket(""127.0.0.1"", 54321);\n                PrintWriter writer = new PrintWriter(sock.getOutputStream(), true);) {\n            writer.write(""put sys.cpu.user "" + TEST_TIME + "" 1.0 tag1=value1 tag2=value2\\n"");\n            writer.flush();\n            while (1 != m.getTcpRequests().getCount()) {\n                Thread.sleep(5);\n            }\n            Assert.assertEquals(1, m.getTcpRequests().getResponses().size());\n            Assert.assertEquals(MetricRequest.class, m.getTcpRequests().getResponses().get(0).getClass());\n            final MetricRequest actual = (MetricRequest) m.getTcpRequests().getResponses().get(0);\n            // @formatter:off\n            final MetricRequest expected = new MetricRequest(\n                    Metric.newBuilder()\n                            .name(""sys.cpu.user"")\n                            .value(TEST_TIME, 1.0D)\n                            .tag(new Tag(""tag1"", ""value1""))\n                            .tag(new Tag(""tag2"", ""value2""))\n                            .build()\n            );\n            // @formatter on\n            Assert.assertEquals(expected, actual);\n        } finally {\n            m.shutdown();\n        }\n    }\n']",TEST;user;off;flush;Metric;ock;cp;cp;Request;Print,2.6775524020195007e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.470293998718262, -5.03206729888916, -5.377694606781006, -6.4424920082092285, -5.4643449783325195, -0.021408773958683014]",0.9788186550140381
1,"['    @Test\n    public void testPutMultiple() throws Exception {\n\n        final TestServer m = new TestServer(conf);\n        m.run();\n        try (Socket sock = new Socket(""127.0.0.1"", 54321);\n                PrintWriter writer = new PrintWriter(sock.getOutputStream(), true)) {\n            // @formatter:off\n            writer.write(""put sys.cpu.user "" + TEST_TIME + "" 1.0 tag1=value1 tag2=value2\\n""\n                       + ""put sys.cpu.idle "" + (TEST_TIME + 1) + "" 1.0 tag3=value3 tag4=value4\\n"");\n            writer.flush();\n            while (2 != m.getTcpRequests().getCount()) {\n                Thread.sleep(5);\n            }\n            Assert.assertEquals(2, m.getTcpRequests().getResponses().size());\n            Assert.assertEquals(MetricRequest.class, m.getTcpRequests().getResponses().get(0).getClass());\n            MetricRequest actual = (MetricRequest) m.getTcpRequests().getResponses().get(0);\n            MetricRequest expected = new MetricRequest(\n                    Metric.newBuilder()\n                            .name(""sys.cpu.user"")\n                            .value(TEST_TIME, 1.0D)\n                            .tag(new Tag(""tag1"", ""value1""))\n                            .tag(new Tag(""tag2"", ""value2""))\n                            .build()\n            );\n            Assert.assertEquals(expected, actual);\n\n            Assert.assertEquals(MetricRequest.class, m.getTcpRequests().getResponses().get(1).getClass());\n            actual = (MetricRequest) m.getTcpRequests().getResponses().get(1);\n            expected = new MetricRequest(\n                    Metric.newBuilder()\n                        .name(""sys.cpu.idle"")\n                        .value(TEST_TIME + 1, 1.0D)\n                        .tag(new Tag(""tag3"", ""value3""))\n                        .tag(new Tag(""tag4"", ""value4""))\n                        .build()\n            );\n            // @formatter:on\n            Assert.assertEquals(expected, actual);\n\n        } finally {\n            m.shutdown();\n        }\n    }\n']",Socket;cpu;Server;Put;run;TIME;actual;formatter;Print;Assert,6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.4810075759887695, -5.025240421295166, -5.37262487411499, -6.422266006469727, -5.4572296142578125, -0.02149675041437149]",0.9787326455116272
1,"['    @Test\n    public void testPutMultipleBinary() throws Exception {\n\n        FlatBufferBuilder builder = new FlatBufferBuilder(1);\n\n        int[] metric = new int[2];\n        Map<String, String> t = new HashMap<>();\n        t.put(""tag1"", ""value1"");\n        t.put(""tag2"", ""value2"");\n        metric[0] = createMetric(builder, ""sys.cpu.user"", TEST_TIME, 1.0D, t);\n        t = new HashMap<>();\n        t.put(""tag3"", ""value3"");\n        t.put(""tag4"", ""value4"");\n        metric[1] = createMetric(builder, ""sys.cpu.idle"", TEST_TIME + 1, 1.0D, t);\n\n        int metricVector = timely.api.flatbuffer.Metrics.createMetricsVector(builder, metric);\n\n        timely.api.flatbuffer.Metrics.startMetrics(builder);\n        timely.api.flatbuffer.Metrics.addMetrics(builder, metricVector);\n        int metrics = timely.api.flatbuffer.Metrics.endMetrics(builder);\n        timely.api.flatbuffer.Metrics.finishMetricsBuffer(builder, metrics);\n\n        ByteBuffer binary = builder.dataBuffer();\n        byte[] data = new byte[binary.remaining()];\n        binary.get(data, 0, binary.remaining());\n        LOG.debug(""Sending {} bytes"", data.length);\n\n        final TestServer m = new TestServer(conf);\n        m.run();\n        try (Socket sock = new Socket(""127.0.0.1"", 54321);) {\n            sock.getOutputStream().write(data);\n            sock.getOutputStream().flush();\n            while (2 != m.getTcpRequests().getCount()) {\n                LOG.debug(""Thread sleeping"");\n                Thread.sleep(5);\n            }\n            Assert.assertEquals(2, m.getTcpRequests().getResponses().size());\n            Assert.assertEquals(MetricRequest.class, m.getTcpRequests().getResponses().get(0).getClass());\n            // @formatter:off\n            MetricRequest actual = (MetricRequest) m.getTcpRequests().getResponses().get(0);\n            MetricRequest expected = new MetricRequest(\n                    Metric.newBuilder()\n                            .name(""sys.cpu.user"")\n                            .value(TEST_TIME, 1.0D)\n                            .tag(new Tag(""tag1"", ""value1""))\n                            .tag(new Tag(""tag2"", ""value2""))\n                            .build()\n            );\n            Assert.assertEquals(expected, actual);\n\n            Assert.assertEquals(MetricRequest.class, m.getTcpRequests().getResponses().get(1).getClass());\n            actual = (MetricRequest) m.getTcpRequests().getResponses().get(1);\n            expected = new MetricRequest(\n                    Metric.newBuilder()\n                            .name(""sys.cpu.idle"")\n                            .value(TEST_TIME + 1, 1.0D)\n                            .tag(new Tag(""tag3"", ""value3""))\n                            .tag(new Tag(""tag4"", ""value4""))\n                            .build()\n            );\n            // @formatter:on\n            Assert.assertEquals(expected, actual);\n\n        } finally {\n            m.shutdown();\n        }\n    }\n']",Metric;Flat;remaining;idle;new;data;new;bytes;api;Metrics,9.313225746154785e-10;8.440110832452774e-10;7.8580342233181e-10;6.621121428906918e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.46536111831665, -5.046276092529297, -5.396887302398682, -6.4394917488098145, -5.467036724090576, -0.021239567548036575]",0.9789842963218689
1,"['    @Test\n    public void testPutInvalidTimestamp() throws Exception {\n        final TestServer m = new TestServer(conf);\n        m.run();\n        try (Socket sock = new Socket(""127.0.0.1"", 54321);\n                PrintWriter writer = new PrintWriter(sock.getOutputStream(), true);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));) {\n            writer.write(""put sys.cpu.user "" + TEST_TIME + ""Z"" + "" 1.0 tag1=value1 tag2=value2\\n"");\n            writer.flush();\n            sleepUninterruptibly(WAIT_SECONDS, TimeUnit.SECONDS);\n            Assert.assertEquals(0, m.getTcpRequests().getCount());\n        } finally {\n            m.shutdown();\n        }\n    }\n']",Timestamp;Put;Exception;put;sleep;conf;Uninterruptibly;Socket;shutdown;Stream,1.8044374883174896e-09;1.1641532182693481e-09;8.440110832452774e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.502732276916504, -4.996271133422852, -5.357769012451172, -6.424513816833496, -5.485962390899658, -0.02154656872153282]",0.9786840081214905
1,"['    @Test\n    public void testPersistence() throws Exception {\n        final Server s = new Server(conf);\n        s.run();\n        try {\n            put(""sys.cpu.user "" + TEST_TIME + "" 1.0 tag1=value1 tag2=value2"",\n                    ""sys.cpu.idle "" + (TEST_TIME + 1) + "" 1.0 tag3=value3 tag4=value4"",\n                    ""sys.cpu.idle "" + (TEST_TIME + 2) + "" 1.0 tag3=value3 tag4=value4"");\n            sleepUninterruptibly(WAIT_SECONDS, TimeUnit.SECONDS);\n        } finally {\n            s.shutdown();\n        }\n        final ZooKeeperInstance inst = new ZooKeeperInstance(mac.getClientConfig());\n        final Connector connector = inst.getConnector(""root"", new PasswordToken(""secret"".getBytes(UTF_8)));\n        assertTrue(connector.namespaceOperations().exists(""timely""));\n        assertTrue(connector.tableOperations().exists(""timely.metrics""));\n        assertTrue(connector.tableOperations().exists(""timely.meta""));\n        int count = 0;\n        for (final Entry<Key, Value> entry : connector.createScanner(""timely.metrics"", Authorizations.EMPTY)) {\n            LOG.info(""Entry: "" + entry);\n            final double value = ByteBuffer.wrap(entry.getValue().get()).getDouble();\n            assertEquals(1.0, value, 1e-9);\n            count++;\n        }\n        assertEquals(6, count);\n        count = 0;\n        for (final Entry<Key, Value> entry : connector.createScanner(""timely.meta"", Authorizations.EMPTY)) {\n            LOG.info(""Meta entry: "" + entry);\n            count++;\n        }\n        assertEquals(10, count);\n        // count w/out versioning iterator to make sure that the optimization\n        // for writing is working\n        connector.tableOperations().removeIterator(""timely.meta"", ""vers"", EnumSet.of(IteratorScope.scan));\n        // wait for zookeeper propagation\n        sleepUninterruptibly(WAIT_SECONDS, TimeUnit.SECONDS);\n        count = 0;\n        for (final Entry<Key, Value> entry : connector.createScanner(""timely.meta"", Authorizations.EMPTY)) {\n            LOG.info(""Meta no vers iter: "" + entry);\n            count++;\n        }\n        assertEquals(10, count);\n    }\n']",TEST;count;idle;cpu;run;cpu;sleep;EST;final;metrics,1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.444827079772949, -5.000680923461914, -5.361783981323242, -6.433962345123291, -5.472112655639648, -0.021788625046610832]",0.9784471392631531
1,"['    @TestAnnotation(""libcore.java.lang.OldClassTest$ExtendTestClass"")\n        public void setCount(int value) {\n\n        }\n']",java;Class;libcore;Count;value;Class;set;lang;Annotation;Extend,2.066371962428093e-09;1.6298145055770874e-09;1.280568540096283e-09;4.656612873077393e-10;1.1641532182693481e-10;5.820766091346741e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-1.280568540096283e-09;-1.3969838619232178e-09,5,5,"[-5.555029392242432, -4.849165439605713, -5.405048847198486, -6.493249416351318, -5.490562915802002, -0.022077850997447968]",0.9781641960144043
1,"['    @TestAnnotation(""libcore.java.lang.OldClassTest$PublicTestClass"")\n        public Object getLocalClass() {\n            class LocalClass {}\n            Object returnedObject = new LocalClass();\n            return returnedObject;\n        }\n']",Annotation;Class;Class;Object;Old;return;Object;Object;class;Object,3.026798367500305e-09;1.280568540096283e-09;1.1059455573558807e-09;5.820766091346741e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.52479887008667, -4.968236923217773, -5.466209888458252, -6.507964611053467, -5.492202281951904, -0.020998427644371986]",0.9792203903198242
1,['        @TestAnno\n        public void annotatedMethod(){}\n\n'],Method;annotated;Anno,2.561137080192566e-09;1.862645149230957e-09;-3.259629011154175e-09,5,5,"[-5.541065216064453, -4.796847343444824, -5.421663284301758, -6.539000034332275, -5.491804599761963, -0.022413503378629684]",0.9778358340263367
1,"['  @Test\n  public void shouldCollectToList() {\n    // given\n    final RecordingExporter exporter = new RecordingExporter();\n    exporter.export(new TestRecord(1));\n    exporter.export(new TestRecord(2));\n    exporter.export(new TestRecord(3));\n\n    // when\n    final List<Record<TestValue>> list =\n        records(VALUE_TYPE, TestValue.class).collect(Collectors.toList());\n\n    // then\n    assertThat(list).extracting(Record::getPosition).containsExactly(1L, 2L, 3L);\n  }\n']",Recording;extracting;collect;exporter;Record;Exporter;new;TYPE;new;new,1.7462298274040222e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.532463073730469, -5.021610736846924, -5.454826831817627, -6.507960796356201, -5.462285995483398, -0.0207754448056221]",0.9794389009475708
1,"['  @Test\n  public void shouldReadConfiguration() {\n    // when\n    final SampleConfiguration actual =\n        sutConfigurationFactory.create(\n            null,\n            ""config-test"",\n            ""TestConfigurationFactoryTestSample.yaml"",\n            SampleConfiguration.class);\n\n    // then\n    assertThat(actual.getSetting()).isEqualTo(""test"");\n    assertThat(actual.getTimeout()).isEqualTo(Duration.ofSeconds(3));\n    assertThat(actual.getSize()).isEqualTo(DataSize.ofMegabytes(2));\n    assertThat(actual.getArgs()).containsOnly(entry(""foo"", ""bar""));\n  }\n']",Timeout;aml;Duration;Sample;null;Args;Configuration;Size;That;entry,1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.491228103637695, -5.066325664520264, -5.456608772277832, -6.486703395843506, -5.452376842498779, -0.020719164982438087]",0.9794939756393433
1,"['  @Test\n  public void shouldReadEmptyConfiguration()\n      throws InvocationTargetException, NoSuchMethodException, InstantiationException,\n']",Exception;Such;Method;Exception;should;Instantiation;Exception;No;Target;Configuration,2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;6.984919309616089e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.580502033233643, -4.731583595275879, -5.403065204620361, -6.5035719871521, -5.545561790466309, -0.02274543233215809]",0.9775111675262451
1,"['  @Test\n  public void shouldOverlayEnvironmentSettingsOverConfigurationReadFromFile()\n      throws InvocationTargetException, NoSuchMethodException, InstantiationException,\n']",Read;Exception;Instantiation;Invocation;Such;should;Configuration;No;Environment;Exception,1.7462298274040222e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;3.4924596548080444e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.570237159729004, -4.791845798492432, -5.404705047607422, -6.534687042236328, -5.522981643676758, -0.02229483053088188]",0.9779518842697144
1,"['  @Test\n  public void shouldSkipElementsBasedOnPredicate() {\n    // given\n    final Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5);\n    final IntegerStream wrapper = new IntegerStream(stream);\n\n    // when\n    final List<Integer> result = wrapper.skipUntil(i -> i == 3).asList();\n\n    // then\n    assertThat(result).containsExactly(3, 4, 5);\n  }\n']",should;Until;Exactly;Predicate;Stream;On;Based;That;Skip;of,1.280568540096283e-09;1.1641532182693481e-09;8.731149137020111e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.540716171264648, -4.980381965637207, -5.426495552062988, -6.502788543701172, -5.498758316040039, -0.02100379765033722]",0.9792152643203735
1,"['  @Test\n  public void shouldReadMsgPack() {\n    // given\n    final ByteArrayBuilder builder = new ByteArrayBuilder();\n    given.accept(builder);\n\n    final byte[] givenBytes = builder.value;\n    final DirectBuffer buf = new UnsafeBuffer(givenBytes);\n\n    final MsgPackReader reader = new MsgPackReader();\n    reader.wrap(buf, 0, buf.capacity());\n\n    // when/then\n    assertion.accept(reader);\n    assertThat(reader.getOffset()).isEqualTo(givenBytes.length);\n  }\n']",Pack;accept;Unsafe;accept;given;Builder;Builder;capacity;final;byte,1.3387762010097504e-09;9.313225746154785e-10;7.712515071034431e-10;6.402842700481415e-10;6.111804395914078e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.510766506195068, -5.021183013916016, -5.450831890106201, -6.519913673400879, -5.4894938468933105, -0.02074998989701271]",0.9794638156890869
1,['  @Test\n  public void testEncodedMapHeaderLength() {\n    assertThat(MsgPackWriter.getEncodedMapHeaderLenght(0x0f)).isEqualTo(1);\n    assertThat(MsgPackWriter.getEncodedMapHeaderLenght(0xffff)).isEqualTo(3);\n    assertThat(MsgPackWriter.getEncodedMapHeaderLenght(0x7fff_ffff)).isEqualTo(5);\n  }\n'],Pack;That;Map;Writer;Pack;qual;Header;Header;That;Lengh,1.862645149230957e-09;1.7462298274040222e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10,5,5,"[-5.4817986488342285, -5.100679874420166, -5.470753192901611, -6.524230480194092, -5.379812240600586, -0.020752443000674248]",0.9794614315032959
1,['  @Test\n  public void testEncodedArayHeaderLength() {\n    assertThat(MsgPackWriter.getEncodedArrayHeaderLenght(0x0f)).isEqualTo(1);\n    assertThat(MsgPackWriter.getEncodedArrayHeaderLenght(0xffff)).isEqualTo(3);\n    assertThat(MsgPackWriter.getEncodedArrayHeaderLenght(0x7fff_ffff)).isEqualTo(5);\n  }\n'],Header;That;Msg;Pack;Lengh;Header;Pack;Encoded;Writer;That,1.2223608791828156e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.536221027374268, -5.015713691711426, -5.496090888977051, -6.563579082489014, -5.451457977294922, -0.020588379353284836]",0.9796221256256104
1,['  @Test\n  public void testEncodedBinaryValueLength() {\n    assertThat(MsgPackWriter.getEncodedBinaryValueLength(0xff)).isEqualTo(2 + 0xff);\n    assertThat(MsgPackWriter.getEncodedBinaryValueLength(0xffff)).isEqualTo(3 + 0xffff);\n    assertThat(MsgPackWriter.getEncodedBinaryValueLength(0x7fff_fffa)).isEqualTo(5 + 0x7fff_fffa);\n  }\n'],Pack;Msg;Encoded;inary;qual;xff;Writer;Msg;inary;Writer,3.259629011154175e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10,5,5,"[-5.544847011566162, -5.016049385070801, -5.462764739990234, -6.53676176071167, -5.449283123016357, -0.02074216678738594]",0.9794714450836182
1,['  @Test\n  public void testEncodedBooleanValueLength() {\n    assertThat(MsgPackWriter.getEncodedBooleanValueLength()).isEqualTo(1);\n  }\n'],Writer;Boolean;Length;Encoded;Boolean;Value;That;get;qual;Encoded,2.3283064365386963e-09;2.153683453798294e-09;6.83940015733242e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.570508003234863, -4.827606201171875, -5.413190841674805, -6.514460563659668, -5.525692462921143, -0.021976398304104805]",0.9782634377479553
1,['  @Test\n  public void testEncodedLongValueLength() {\n    assertThat(MsgPackWriter.getEncodedLongValueLength(0x7f)).isEqualTo(1);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(0xff)).isEqualTo(2);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(0xffff)).isEqualTo(3);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(0xffff_ffffL)).isEqualTo(5);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(0x7fff_ffff_ffff_ffffL)).isEqualTo(9);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(-0x20)).isEqualTo(1);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(Byte.MIN_VALUE)).isEqualTo(2);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(Short.MIN_VALUE)).isEqualTo(3);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(Integer.MIN_VALUE)).isEqualTo(5);\n    assertThat(MsgPackWriter.getEncodedLongValueLength(Long.MIN_VALUE)).isEqualTo(9);\n  }\n'],Pack;ffff;Pack;Value;Msg;Long;get;Msg;Pack;MIN,2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.1059455573558807e-09;1.076841726899147e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.405959606170654, -5.084105014801025, -5.501692295074463, -6.485631942749023, -5.36240291595459, -0.02120198681950569]",0.9790211915969849
1,['  @Test\n  public void testEncodedStringHeaderLength() {\n    assertThat(MsgPackWriter.getEncodedStringHeaderLength(0x1f)).isEqualTo(1);\n    assertThat(MsgPackWriter.getEncodedStringHeaderLength(0xff)).isEqualTo(2);\n    assertThat(MsgPackWriter.getEncodedStringHeaderLength(0xffff)).isEqualTo(3);\n    assertThat(MsgPackWriter.getEncodedStringHeaderLength(0x7fff_ffff)).isEqualTo(5);\n  }\n'],Pack;Writer;ffff;Msg;Pack;Msg;That;That;Msg;Pack,2.7939677238464355e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2514647096395493e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.525471210479736, -5.009671688079834, -5.491710186004639, -6.561379909515381, -5.44415283203125, -0.0207265205681324]",0.9794867038726807
1,['  @Test\n  public void testEncodedStringLength() {\n    assertThat(MsgPackWriter.getEncodedStringLength(0x1f)).isEqualTo(1 + 0x1f);\n    assertThat(MsgPackWriter.getEncodedStringLength(0xff)).isEqualTo(2 + 0xff);\n    assertThat(MsgPackWriter.getEncodedStringLength(0xffff)).isEqualTo(3 + 0xffff);\n    assertThat(MsgPackWriter.getEncodedStringLength(0x7fff_fffa)).isEqualTo(5 + 0x7fff_fffa);\n  }\n'],Msg;Length;Pack;Encoded;Writer;Length;Encoded;qual;Msg;Encoded,2.3283064365386963e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.547072410583496, -4.982181549072266, -5.452780246734619, -6.513885021209717, -5.468173027038574, -0.020962122827768326]",0.9792560338973999
1,"['  @Test\n  public void testWriteMessage() throws Exception {\n    // given\n    final MsgPackWriter writer = new MsgPackWriter();\n    writer.wrap(actualValueBuffer, WRITE_OFFSET);\n\n    final ByteArrayBuilder builder = new ByteArrayBuilder();\n    expectedValueWriter.accept(builder);\n    final byte[] expectedValue = builder.value;\n\n    // when\n    actualValueWriter.accept(writer);\n\n    // then\n    assertThat(writer.getOffset()).isEqualTo(WRITE_OFFSET + expectedValue.length);\n    assertThatBuffer(actualValueBuffer).hasBytes(expectedValue, WRITE_OFFSET);\n  }\n']",Pack;Ms;Writer;Write;Message;OFFSET;Ms;Bytes;Value;actual,2.3283064365386963e-09;1.7462298274040222e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10,5,5,"[-5.474034309387207, -5.026291847229004, -5.407898902893066, -6.479910850524902, -5.445471286773682, -0.02131367102265358]",0.9789118766784668
1,"['  @Test\n  public void skipValue() {\n    // given\n    final ByteArrayBuilder builder = new ByteArrayBuilder();\n    given.accept(builder);\n\n    final DirectBuffer buffer = new UnsafeBuffer(builder.value);\n\n    final MsgPackReader reader = new MsgPackReader();\n    reader.wrap(buffer, 0, buffer.capacity());\n\n    // when\n    reader.skipValue();\n\n    // then\n    assertThat(reader.getOffset()).isEqualTo(buffer.capacity());\n  }\n']",accept;wrap;Value;Pack;new;Reader;Buffer;Ms;buffer;Builder,1.57160684466362e-09;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10,5,5,"[-5.510260105133057, -5.021457672119141, -5.452540874481201, -6.522175312042236, -5.485043048858643, -0.020758163183927536]",0.979455828666687
1,"['  @Test\n  public void shouldReadToken() {\n    // given\n    final MsgPackReader reader = new MsgPackReader();\n    final ByteArrayBuilder builder = new ByteArrayBuilder();\n    given.accept(builder);\n    final DirectBuffer buf = new UnsafeBuffer(builder.value);\n    reader.wrap(buf, 0, buf.capacity());\n\n    // when\n    final MsgPackToken msgPackToken = reader.readToken();\n\n    // then\n    assertThat(reader.getOffset()).isEqualTo(buf.capacity());\n    assertThat(msgPackToken.getType()).isEqualTo(expectedType);\n    assertion.accept(msgPackToken);\n  }\n']",builder;Ms;Pack;Byte;Offset;new;Builder;buf;Ms;Type,1.862645149230957e-09;9.604264050722122e-10;9.313225746154785e-10;7.8580342233181e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;4.802132025361061e-10,5,5,"[-5.500667572021484, -5.032520771026611, -5.439737796783447, -6.5014801025390625, -5.454801559448242, -0.02094169333577156]",0.9792760610580444
1,"['  @Test\n  public void shouldNotReadNegativeSize() throws Exception {\n    // given\n    final MsgPackWriter writer = new MsgPackWriter();\n    writer.wrap(actualValueBuffer, WRITE_OFFSET);\n\n    // then\n    exception.expect(MsgpackWriterException.class);\n    exception.expectMessage(expectedExceptionMessage);\n\n    // when\n    codeUnderTest.accept(writer);\n  }\n']",when;Size;Pack;Exception;actual;writer;expect;accept;Writer;Pack,1.6880221664905548e-09;1.1059455573558807e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10,5,5,"[-5.520291328430176, -4.9779815673828125, -5.44911003112793, -6.546815872192383, -5.45149040222168, -0.021139197051525116]",0.9790826439857483
1,"['  @Test\n  public void shouldNotReadNegativeValue() {\n    // given\n    final DirectBuffer negativeTestingBuf = new UnsafeBuffer(testingBuf);\n    reader.wrap(negativeTestingBuf, 0, negativeTestingBuf.capacity());\n\n    // then\n    exception.expect(MsgpackReaderException.class);\n    exception.expectMessage(exceptionMessage);\n\n    // when\n    codeUnderTest.accept(reader);\n  }\n']",uf;Buffer;Read;Not;Unsafe;code;given;final;wrap;reader,1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;7.130438461899757e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.542229652404785, -4.9649553298950195, -5.459860801696777, -6.5313215255737305, -5.4952874183654785, -0.020930837839841843]",0.9792866706848145
1,"['  @Test\n  public void shouldNotReadInvalidSequence() {\n    // given\n    reader.wrap(NEVER_USED_BUF, 0, NEVER_USED_BUF.capacity());\n\n    // then\n    exception.expect(MsgpackReaderException.class);\n    exception.expectMessage(expectedExceptionMessage);\n\n    // when\n    codeUnderTest.accept(reader);\n  }\n']",BU;wrap;NEVER;BU;exception;expect;Sequence;NEVER;class;Message,9.313225746154785e-10;8.731149137020111e-10;6.548361852765083e-10;4.656612873077393e-10;4.656612873077393e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.548788547515869, -4.939271450042725, -5.480719089508057, -6.552134037017822, -5.485108852386475, -0.021012669429183006]",0.9792065620422363
1,"['  @Test\n  public void shouldExportJobRecordWithCustomHeaders() {\n    // when\n    exporterBrokerRule.deployProcess(\n        Bpmn.createExecutableProcess(""process"")\n            .startEvent()\n            .serviceTask(\n                ""task"",\n                t -> t.zeebeJobType(""test"").zeebeTaskHeader(""x"", ""1"").zeebeTaskHeader(""y"", ""2""))\n            .endEvent()\n            .done(),\n        ""process.bpmn"");\n\n    final var processInstanceKey = exporterBrokerRule.createProcessInstance(""process"", Map.of());\n\n    // then\n    await(""index templates need to be created"").untilAsserted(this::assertIndexSettings);\n    final var jobCreated =\n        RecordingExporter.jobRecords(JobIntent.CREATED)\n            .withProcessInstanceKey(processInstanceKey)\n            .getFirst();\n\n    assertRecordExported(jobCreated);\n  }\n']",Job;deploy;Task;zeebe;Task;exporter;exporter;zeebe;job;await,1.1641532182693481e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.490436553955078, -5.048977851867676, -5.465150356292725, -6.4806318283081055, -5.43781852722168, -0.020871881395578384]",0.9793445467948914
1,"['  @Test\n  public void shouldExportJobRecordWithOverlappingCustomHeaders() {\n    // when\n    exporterBrokerRule.deployProcess(\n        Bpmn.createExecutableProcess(""process"")\n            .startEvent()\n            .serviceTask(\n                ""task"",\n                t -> t.zeebeJobType(""test"").zeebeTaskHeader(""x"", ""1"").zeebeTaskHeader(""x.y"", ""2""))\n            .endEvent()\n            .done(),\n        ""process.bpmn"");\n\n    final var processInstanceKey = exporterBrokerRule.createProcessInstance(""process"", Map.of());\n\n    // then\n    await(""index templates need to be created"").untilAsserted(this::assertIndexSettings);\n    final var jobCreated =\n        RecordingExporter.jobRecords(JobIntent.CREATED)\n            .withProcessInstanceKey(processInstanceKey)\n            .getFirst();\n\n    assertRecordExported(jobCreated);\n  }\n']",zeebe;Header;CREATED;Header;deploy;zeebe;Intent;should;Map;job,1.979060471057892e-09;1.0477378964424133e-09;8.585629984736443e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;7.275957614183426e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.4920125007629395, -4.9988484382629395, -5.390490531921387, -6.420959949493408, -5.443812370300293, -0.021606767550110817]",0.9786249995231628
1,"['  @Test\n  public void shouldExportJobBatchRecordWithOverlappingCustomHeaders() {\n    // when\n    exporterBrokerRule.deployProcess(\n        Bpmn.createExecutableProcess(""process"")\n            .startEvent()\n            .serviceTask(\n                ""task"",\n                t -> t.zeebeJobType(""test"").zeebeTaskHeader(""x"", ""1"").zeebeTaskHeader(""x.y"", ""2""))\n            .endEvent()\n            .done(),\n        ""process.bpmn"");\n\n    final var processInstanceKey = exporterBrokerRule.createProcessInstance(""process"", Map.of());\n\n    await(""index templates need to be created"").untilAsserted(this::assertIndexSettings);\n    final var jobCreated =\n        RecordingExporter.jobRecords(JobIntent.CREATED)\n            .withProcessInstanceKey(processInstanceKey)\n            .getFirst();\n\n    jobWorker =\n        exporterBrokerRule.createJobWorker(\n            ""test"", ((client, job) -> client.newCompleteCommand(job.getKey()).send()));\n\n    // then\n    final var jobBatchActivated =\n        RecordingExporter.jobBatchRecords(JobBatchIntent.ACTIVATED).withType(""test"").getFirst();\n\n    assertThat(jobBatchActivated.getValue().getJobKeys()).contains(jobCreated.getKey());\n    assertRecordExported(jobBatchActivated);\n  }\n']",Export;Header;zeebe;Job;zeebe;Intent;Event;task;Task;with,1.4551915228366852e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.1059455573558807e-09;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.478920936584473, -5.0556535720825195, -5.430668830871582, -6.449141502380371, -5.437045574188232, -0.02108200453221798]",0.9791385531425476
1,"['  @Test\n  public void shouldExportEvenIfElasticNotInitiallyReachable() {\n    // given\n    elastic.withPort(SocketUtil.getNextAddress().getPort());\n    configuration = getDefaultConfiguration();\n    configuration.index.prefix = ""zeebe"";\n    esClient = createElasticsearchClient(configuration);\n\n    // when\n    exporterBrokerRule.configure(""es"", ElasticsearchExporter.class, configuration);\n    exporterBrokerRule.start();\n    exporterBrokerRule.publishMessage(""message"", ""123"");\n    elastic.start();\n\n    // then\n    RecordingExporter.messageRecords()\n        .withCorrelationKey(""123"")\n        .withName(""message"")\n        .forEach(r -> TestUtil.waitUntil(() -> wasExported(r)));\n    assertIndexSettings();\n  }\n']",exporter;Broker;Initially;should;exporter;Broker;Even;es;with;elastic,1.0040821507573128e-09;8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.485915660858154, -5.055624485015869, -5.469269275665283, -6.494264602661133, -5.448998928070068, -0.02075898088514805]",0.9794548749923706
1,"['  @Test\n  public void shouldNotFailOnOpenIfElasticIsUnreachable() {\n    // given\n    final ElasticsearchClient client =\n        Mockito.spy(new ElasticsearchClient(config, LoggerFactory.getLogger(""test"")));\n    final ElasticsearchExporter exporter = createExporter(client);\n    config.index.createTemplate = true;\n\n    // when - then : only fails when trying to export, not before\n    openExporter(exporter);\n    assertThatThrownBy(testHarness::export).isInstanceOf(ElasticsearchExporterException.class);\n  }\n']",to;Harness;fails;Template;Not;when;Elasticsearch;index;open;export,2.0954757928848267e-09;1.862645149230957e-09;1.5133991837501526e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.693881005048752e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.553583145141602, -4.962427616119385, -5.431211948394775, -6.469906330108643, -5.4810919761657715, -0.021184246987104416]",0.9790385365486145
1,"['  @Test\n  public void shouldCreateIndexTemplates() {\n    // given\n    config.index.prefix = ""foo-bar"";\n    config.index.createTemplate = true;\n    config.index.deployment = true;\n    config.index.process = true;\n    config.index.error = true;\n    config.index.incident = true;\n    config.index.job = true;\n    config.index.jobBatch = true;\n    config.index.message = true;\n    config.index.messageSubscription = true;\n    config.index.variable = true;\n    config.index.variableDocument = true;\n    config.index.processInstance = true;\n    config.index.processInstanceCreation = true;\n    config.index.processMessageSubscription = true;\n\n    // when\n    createAndOpenExporter();\n    testHarness.export();\n\n    // then\n    verify(esClient).putComponentTemplate(""foo-bar"", ""foo-bar"", ZEEBE_RECORD_TEMPLATE_JSON);\n\n    verify(esClient).putIndexTemplate(ValueType.DEPLOYMENT);\n    verify(esClient).putIndexTemplate(ValueType.PROCESS);\n    verify(esClient).putIndexTemplate(ValueType.ERROR);\n    verify(esClient).putIndexTemplate(ValueType.INCIDENT);\n    verify(esClient).putIndexTemplate(ValueType.JOB);\n    verify(esClient).putIndexTemplate(ValueType.JOB_BATCH);\n    verify(esClient).putIndexTemplate(ValueType.MESSAGE);\n    verify(esClient).putIndexTemplate(ValueType.MESSAGE_SUBSCRIPTION);\n    verify(esClient).putIndexTemplate(ValueType.VARIABLE);\n    verify(esClient).putIndexTemplate(ValueType.VARIABLE_DOCUMENT);\n    verify(esClient).putIndexTemplate(ValueType.PROCESS_INSTANCE);\n    verify(esClient).putIndexTemplate(ValueType.PROCESS_INSTANCE_CREATION);\n    verify(esClient).putIndexTemplate(ValueType.PROCESS_MESSAGE_SUBSCRIPTION);\n  }\n']",Harness;export;ATCH;Message;Create;RECORD;Creation;INCIDENT;error;config,7.450580596923828e-09;1.862645149230957e-09;8.949427865445614e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.419809818267822, -5.062242031097412, -5.411404609680176, -6.452308654785156, -5.433516025543213, -0.021396638825535774]",0.9788307547569275
1,"['  @Test\n  public void shouldExportEnabledValueTypes() {\n    // given\n    config.index.event = true;\n    config.index.deployment = true;\n    config.index.process = true;\n    config.index.error = true;\n    config.index.incident = true;\n    config.index.job = true;\n    config.index.jobBatch = true;\n    config.index.message = true;\n    config.index.messageSubscription = true;\n    config.index.variable = true;\n    config.index.variableDocument = true;\n    config.index.processInstance = true;\n    config.index.processInstanceCreation = true;\n    config.index.processMessageSubscription = true;\n\n    createAndOpenExporter();\n\n    final ValueType[] valueTypes =\n        new ValueType[] {\n          ValueType.DEPLOYMENT,\n          ValueType.PROCESS,\n          ValueType.ERROR,\n          ValueType.INCIDENT,\n          ValueType.JOB,\n          ValueType.JOB_BATCH,\n          ValueType.MESSAGE,\n          ValueType.MESSAGE_SUBSCRIPTION,\n          ValueType.VARIABLE,\n          ValueType.VARIABLE_DOCUMENT,\n          ValueType.PROCESS_INSTANCE,\n          ValueType.PROCESS_INSTANCE_CREATION,\n          ValueType.PROCESS_MESSAGE_SUBSCRIPTION\n        };\n\n    // when - then\n    final Context.RecordFilter filter = testHarness.getContext().getFilter();\n\n    assertThat(Arrays.stream(valueTypes).map(filter::acceptValue)).containsOnly(true);\n  }\n']",ARIABLE;Context;CREATION;INSTANCE;Enabled;Type;ATCH;OB;job;Value,1.3504177331924438e-08;3.259629011154175e-09;2.2118911147117615e-09;2.0954757928848267e-09;1.9208528101444244e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09,5,5,"[-5.391968250274658, -4.992105007171631, -5.34713077545166, -6.4109978675842285, -5.44069242477417, -0.022333651781082153]",0.977914035320282
1,"['  @Test\n  public void shouldNotExportDisabledValueTypes() {\n    // given\n    config.index.event = true;\n    config.index.deployment = false;\n    config.index.error = false;\n    config.index.incident = false;\n    config.index.job = false;\n    config.index.jobBatch = false;\n    config.index.message = false;\n    config.index.messageSubscription = false;\n    config.index.variable = false;\n    config.index.variableDocument = false;\n    config.index.processInstance = false;\n    config.index.processInstanceCreation = false;\n    config.index.processMessageSubscription = false;\n\n    createAndOpenExporter();\n\n    final ValueType[] valueTypes =\n        new ValueType[] {\n          ValueType.DEPLOYMENT,\n          ValueType.ERROR,\n          ValueType.INCIDENT,\n          ValueType.JOB,\n          ValueType.JOB_BATCH,\n          ValueType.MESSAGE,\n          ValueType.MESSAGE_SUBSCRIPTION,\n          ValueType.VARIABLE,\n          ValueType.VARIABLE_DOCUMENT,\n          ValueType.PROCESS_INSTANCE,\n          ValueType.PROCESS_INSTANCE_CREATION,\n          ValueType.PROCESS_MESSAGE_SUBSCRIPTION\n        };\n\n    // when - then\n    final Context.RecordFilter filter = testHarness.getContext().getFilter();\n\n    assertThat(Arrays.stream(valueTypes).map(filter::acceptValue)).containsOnly(false);\n  }\n']",INSTANCE;Harness;Exporter;Type;Types;Subscription;OB;Type;ESSAGE;Type,2.7939677238464355e-09;2.6775524020195007e-09;1.7462298274040222e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.417489051818848, -4.968048572540283, -5.360095500946045, -6.434235095977783, -5.456906318664551, -0.02221275493502617]",0.978032112121582
1,"['  @Test\n  public void shouldExportEnabledRecordTypes() {\n    // given\n    config.index.command = true;\n    config.index.event = true;\n    config.index.rejection = true;\n    config.index.deployment = true;\n\n    createAndOpenExporter();\n\n    final RecordType[] recordTypes =\n        new RecordType[] {RecordType.COMMAND, RecordType.EVENT, RecordType.COMMAND_REJECTION};\n\n    // when - then\n    final Context.RecordFilter filter = testHarness.getContext().getFilter();\n\n    assertThat(Arrays.stream(recordTypes).map(filter::acceptType)).containsOnly(true);\n  }\n']",Harness;REJECTION;rejection;Record;Record;Exporter;config;index;config;record,9.022187441587448e-10;7.712515071034431e-10;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.524971961975098, -5.0240559577941895, -5.437561988830566, -6.495173931121826, -5.46632719039917, -0.020867444574832916]",0.9793486595153809
1,"['  @Test\n  public void shouldNotExportDisabledRecordTypes() {\n    // given\n    config.index.command = false;\n    config.index.event = false;\n    config.index.rejection = false;\n    config.index.deployment = true;\n\n    createAndOpenExporter();\n\n    final RecordType[] recordTypes =\n        new RecordType[] {RecordType.COMMAND, RecordType.EVENT, RecordType.COMMAND_REJECTION};\n\n    // when - then\n    final Context.RecordFilter filter = testHarness.getContext().getFilter();\n\n    assertThat(Arrays.stream(recordTypes).map(filter::acceptType)).containsOnly(false);\n  }\n']",rejection;Disabled;false;filter;command;create;Only;config;map;config,1.3387762010097504e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10,5,5,"[-5.515836715698242, -5.028961658477783, -5.445678234100342, -6.504122257232666, -5.463614463806152, -0.0208339374512434]",0.9793815016746521
1,['  @Test\n  public void shouldUpdateLastPositionOnFlush() {\n    // given\n    when(esClient.shouldFlush()).thenReturn(true);\n\n    // when\n    createAndOpenExporter();\n    final Record record =\n        testHarness.export(\n            r ->\n                r.getMetadata()\n                    .setValueType(ValueType.PROCESS_INSTANCE)\n                    .setRecordType(RecordType.EVENT));\n\n    // then\n    assertThat(testHarness.getController().getPosition()).isEqualTo(record.getPosition());\n  }\n'],es;Position;Record;EVENT;Record;PROCESS;Flush;when;Client;Record,2.3283064365386963e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;6.257323548197746e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.515803813934326, -5.024930477142334, -5.452695846557617, -6.484776973724365, -5.458575248718262, -0.020882155746221542]",0.9793343544006348
1,['  @Test\n  public void shouldFlushOnClose() {\n    // given\n    createAndOpenExporter();\n\n    // when\n    testHarness.close();\n\n    // then\n    verify(esClient).flush();\n  }\n'],when;On;create;should;Flush;verify;Exporter;given;Harness;Open,1.3969838619232178e-09;8.731149137020111e-10;7.566995918750763e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.545492172241211, -4.949917316436768, -5.4156293869018555, -6.527190685272217, -5.473276138305664, -0.021321840584278107]",0.9789038896560669
1,['  @Test\n  public void shouldFlushAfterDelay() {\n    // given\n    config.index.event = true;\n    config.index.processInstance = true;\n    config.bulk.delay = 10;\n\n    // scenario: bulk size is not reached still we want to flush\n    config.bulk.size = Integer.MAX_VALUE;\n    when(esClient.shouldFlush()).thenReturn(false);\n    createAndOpenExporter();\n\n    // when\n    testHarness.export(\n        r ->\n            r.getMetadata()\n                .setValueType(ValueType.PROCESS_INSTANCE)\n                .setRecordType(RecordType.EVENT));\n\n    // then\n    assertThat(testHarness.getController().getScheduledTasks()).hasSize(1);\n    assertThat(testHarness.getController().getScheduledTasks().get(0).getDelay())\n        .isEqualTo(Duration.ofSeconds(config.bulk.delay));\n\n    // and\n    testHarness.getController().runScheduledTasks(Duration.ofSeconds(config.bulk.delay));\n    verify(esClient).flush();\n  }\n'],es;That;That;Flush;flush;to;delay;export;qual;Delay,1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.467806816101074, -5.096139907836914, -5.4666032791137695, -6.50127649307251, -5.445737838745117, -0.02059316821396351]",0.9796174168586731
1,"['  @Test\n  public void shouldUpdatePositionAfterDelay() {\n    // given\n    config.index.event = true;\n    createAndOpenExporter();\n\n    // when\n    final List<Record> exported =\n        testHarness.stream(\n                r ->\n                    r.getMetadata()\n                        .setValueType(ValueType.PROCESS_INSTANCE)\n                        .setRecordType(RecordType.EVENT))\n            .export(4);\n    testHarness.getController().runScheduledTasks(Duration.ofSeconds(config.bulk.delay));\n\n    // then record was indexed and the exporter record position was updated\n    verify(esClient, times(4)).index(any());\n    assertThat(testHarness.getController().getPosition()).isEqualTo(exported.get(3).getPosition());\n  }\n']",Harness;Type;event;when;final;List;Metadata;Type;set;Record,5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.504859924316406, -5.057029724121094, -5.460226535797119, -6.4840312004089355, -5.454333305358887, -0.020702233538031578]",0.9795107245445251
1,"['  @Test\n  public void shouldNotHandleFlushException() {\n    // given\n    when(esClient.shouldFlush()).thenReturn(true);\n    doThrow(new ElasticsearchExporterException(""expected"")).when(esClient).flush();\n\n    createAndOpenExporter();\n\n    // when\n    assertThatThrownBy(() -> testHarness.export())\n        .isInstanceOf(ElasticsearchExporterException.class)\n        .withFailMessage(""expected"");\n\n    // then\n    verify(esClient, times(1)).flush();\n  }\n']",By;Instance;Elasticsearch;should;when;es;Return;do;export;given,6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.499107360839844, -5.064037322998047, -5.493343830108643, -6.52827787399292, -5.413568496704102, -0.020653540268540382]",0.9795582890510559
1,"['  @Test\n  public void shouldFailOnWrongPrefix() {\n    // given\n    config.index.prefix = ""prefix_withunderscore"";\n\n    createExporterAndTestHarness();\n\n    // then\n    assertThatThrownBy(() -> testHarness.configure(""els"", config))\n        .isInstanceOf(ExporterException.class)\n        .withFailMessage(\n            ""Elasticsearch prefix must not contain underscore. Current value: ""\n                + config.index.prefix);\n  }\n']",On;prefix;prefix;withunderscore;Wrong;prefix;els;Prefix;index;config,5.122274160385132e-09;5.005858838558197e-09;2.2118911147117615e-09;1.9208528101444244e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;7.712515071034431e-10,5,5,"[-5.493653297424316, -5.0598225593566895, -5.442575454711914, -6.477328777313232, -5.417442798614502, -0.020982902497053146]",0.979235827922821
1,"['  @Test\n  public void shouldExportRecords() {\n    // given\n    elasticConfigurator.accept(elastic);\n    elastic.start();\n\n    // given\n    configuration = getDefaultConfiguration();\n    exporterConfigurator.accept(configuration);\n\n    // when\n    exporterBrokerRule.configure(""es"", ElasticsearchExporter.class, configuration);\n    exporterBrokerRule.start();\n    exporterBrokerRule.performSampleWorkload();\n\n    // then\n\n    // assert index settings for all created indices\n    esClient = createElasticsearchClient(configuration);\n    assertIndexSettings();\n\n    // assert all records which where recorded during the tests where exported\n    exporterBrokerRule.visitExportedRecords(\n        r -> {\n          if (configuration.shouldIndexRecord(r)) {\n            assertRecordExported(r);\n          }\n        });\n  }\n']",elastic;perform;Settings;indices;configuration;start;es;Workload;Configurator;Configuration,8.149072527885437e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.4822001457214355, -5.0614542961120605, -5.45774507522583, -6.49094295501709, -5.46329927444458, -0.02072967402637005]",0.9794837236404419
1,"['  @Test\n  public void shouldThrowExceptionIfFailToFlushBulk() {\n    // given\n    final int bulkSize = 10;\n\n    final Record<VariableRecordValue> recordMock = mock(Record.class);\n    when(recordMock.getPartitionId()).thenReturn(1);\n    when(recordMock.getValueType()).thenReturn(ValueType.PROCESS_INSTANCE);\n\n    // bulk contains records that fail on flush\n    IntStream.range(0, bulkSize)\n        .forEach(\n            i -> {\n              when(recordMock.getKey()).thenReturn(RECORD_KEY + i);\n              when(recordMock.toJson()).thenReturn(""invalid-json-"" + i);\n              client.index(recordMock);\n            });\n\n    // and one valid record\n    when(recordMock.getKey()).thenReturn(RECORD_KEY + bulkSize);\n    when(recordMock.toJson()).thenReturn(""{}"");\n    client.index(recordMock);\n\n    // when/then\n    assertThatThrownBy(client::flush)\n        .isInstanceOf(ElasticsearchExporterException.class)\n        .hasMessageContaining(\n            ""Failed to flush 10 item(s) of bulk request [type: mapper_parsing_exception, reason: failed to parse]"");\n  }\n']",flush;Partition;Each;Exporter;fail;records;should;type;arsing;bulk,5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.4829583168029785, -5.022915840148926, -5.393654823303223, -6.4277873039245605, -5.438591957092285, -0.02147819846868515]",0.9787507057189941
1,"['  @Test\n  public void shouldIgnoreRecordIfDuplicateOfLast() {\n    // given\n    final Record<VariableRecordValue> recordMock = mock(Record.class);\n    when(recordMock.getPartitionId()).thenReturn(1);\n    when(recordMock.getValueType()).thenReturn(ValueType.PROCESS_INSTANCE);\n    when(recordMock.getKey()).thenReturn(RECORD_KEY + 1);\n    when(recordMock.toJson()).thenReturn(""{}"");\n\n    client.index(recordMock);\n    assertThat(bulkRequest).hasSize(1);\n\n    // when\n    client.index(recordMock);\n\n    // then\n    assertThat(bulkRequest).hasSize(1);\n  }\n']",Ignore;Partition;mock;ock;Duplicate;client;Type;ulk;to;has,3.346940502524376e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.87666828930378e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.512981414794922, -5.027241230010986, -5.424602031707764, -6.462186336517334, -5.440036773681641, -0.021119821816682816]",0.9791015386581421
1,"['  @Test\n  public void shouldFlushOnMemoryLimit() {\n    // given\n    final var bulkMemoryLimit = 1024;\n    final var recordSize = 2;\n\n    configuration.bulk.memoryLimit = bulkMemoryLimit;\n    configuration.bulk.size = Integer.MAX_VALUE;\n    configuration.bulk.delay = Integer.MAX_VALUE;\n\n    final var variableValue1 = ""x"".repeat(bulkMemoryLimit / recordSize);\n    final var variableValue2 = ""y"".repeat(bulkMemoryLimit / recordSize);\n    final Function<String, String> jsonRecord =\n        (String value) -> String.format(""{\\""value\\"":\\""%s\\""}"", value);\n\n    final VariableRecordValue recordValue = mock(VariableRecordValue.class);\n    when(recordValue.getValue()).thenReturn(variableValue1);\n\n    final Record<VariableRecordValue> recordMock = mock(Record.class);\n    when(recordMock.getKey()).thenReturn(1L);\n    when(recordMock.getPartitionId()).thenReturn(1);\n    when(recordMock.getValueType()).thenReturn(ValueType.VARIABLE);\n    when(recordMock.getValue()).thenReturn(recordValue);\n    when(recordMock.toJson()).thenReturn(jsonRecord.apply(variableValue1));\n\n    // when\n    client.index(recordMock);\n\n    assertThat(client.shouldFlush()).isFalse();\n\n    when(recordMock.getKey()).thenReturn(2L);\n    when(recordMock.toJson()).thenReturn(jsonRecord.apply(variableValue2));\n\n    client.index(recordMock);\n\n    // then\n    assertThat(client.shouldFlush()).isTrue();\n  }\n']",Partition;mock;On;ock;when;format;get;Value;Flush;should,3.259629011154175e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.4524245262146, -5.016848564147949, -5.355428218841553, -6.422637462615967, -5.447800636291504, -0.021799705922603607]",0.9784361720085144
1,"['  @Test\n  public void shouldGetSubscriptionHashCode() {\n    assertThat(getSubscriptionHashCode(wrapString(""a""))).isEqualTo(97);\n    assertThat(getSubscriptionHashCode(wrapString(""b""))).isEqualTo(98);\n    assertThat(getSubscriptionHashCode(wrapString(""c""))).isEqualTo(99);\n    assertThat(getSubscriptionHashCode(wrapString(""foobar""))).isEqualTo(-1268878963);\n  }\n']",Subscription;Subscription;Get;Code;Hash;get;foobar;get;wrap;That,3.4924596548080444e-09;1.1641532182693481e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.520472526550293, -5.016765117645264, -5.496099948883057, -6.556215763092041, -5.466769695281982, -0.02058931440114975]",0.9796212911605835
1,['  @Test\n  public void shouldGetZeroSubscriptionHashCodeIfEmpty() {\n    assertThat(getSubscriptionHashCode(new UnsafeBuffer())).isEqualTo(0);\n  }\n'],Zero;Hash;get;Buffer;qual;should;Hash;Code;That;Empty,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;0.0;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.563256740570068, -4.861230850219727, -5.426764011383057, -6.532837867736816, -5.509438514709473, -0.02171175740659237]",0.9785222411155701
1,"['  @Test\n  public void shouldGetPartitionIdForCorrelationKey() {\n    assertThat(getSubscriptionPartitionId(wrapString(""a""), 10)).isEqualTo(7 + START_PARTITION_ID);\n    assertThat(getSubscriptionPartitionId(wrapString(""b""), 3)).isEqualTo(2 + START_PARTITION_ID);\n    assertThat(getSubscriptionPartitionId(wrapString(""c""), 11)).isEqualTo(0 + START_PARTITION_ID);\n    assertThat(getSubscriptionPartitionId(wrapString(""foobar""), 100))\n        .isEqualTo(63 + START_PARTITION_ID);\n  }\n']",Partition;That;Get;START;qual;foobar;Subscription;get;qual;Subscription,1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;8.731149137020111e-10;8.440110832452774e-10;8.149072527885437e-10,5,5,"[-5.497844696044922, -5.040199279785156, -5.437894344329834, -6.468566417694092, -5.474970817565918, -0.02087480016052723]",0.9793415665626526
1,"['  @Test\n  public void shouldConvertJsonSerializableToJson() {\n    // given\n\n    // when\n    final String json = actualRecordSupplier.get().toJson();\n\n    // then\n    JsonUtil.assertEquality(json, expectedJson);\n  }\n']",should;when;Record;get;son;to;Util;given;actual;expected,1.3969838619232178e-09;1.0477378964424133e-09;6.984919309616089e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;2.9103830456733704e-11;0.0;-5.820766091346741e-11,5,5,"[-5.535447120666504, -4.9502153396606445, -5.431469917297363, -6.501914024353027, -5.496150016784668, -0.021229879930615425]",0.9789938926696777
1,"['  @Test\n  public void shouldEncodeDecodeBrokerInfo() {\n    // given\n    final int nodeId = 123;\n    final int partitionsCount = 345;\n    final int clusterSize = 567;\n    final int replicationFactor = 789;\n    final Map<DirectBuffer, DirectBuffer> addresses = new HashMap<>();\n    addresses.put(wrapString(""foo""), wrapString(""192.159.12.1:23""));\n    addresses.put(wrapString(""bar""), wrapString(""zeebe-0.cluster.loc:12312""));\n    final Map<Integer, PartitionRole> partitionRoles = new HashMap<>();\n    partitionRoles.put(1, PartitionRole.FOLLOWER);\n    partitionRoles.put(2, PartitionRole.LEADER);\n    partitionRoles.put(231, PartitionRole.FOLLOWER);\n    final Map<Integer, PartitionHealthStatus> partitionHealthStatuses = new HashMap<>();\n    partitionHealthStatuses.put(1, PartitionHealthStatus.HEALTHY);\n    partitionHealthStatuses.put(2, PartitionHealthStatus.UNHEALTHY);\n    partitionHealthStatuses.put(123, PartitionHealthStatus.HEALTHY);\n\n    final BrokerInfo brokerInfo =\n        new BrokerInfo()\n            .setNodeId(nodeId)\n            .setPartitionsCount(partitionsCount)\n            .setClusterSize(clusterSize)\n            .setReplicationFactor(replicationFactor);\n\n    addresses.forEach(brokerInfo::addAddress);\n    partitionRoles.forEach(brokerInfo::addPartitionRole);\n    partitionHealthStatuses.forEach(brokerInfo::addPartitionHealth);\n\n    // when\n    encodeDecode(brokerInfo);\n\n    // then\n    assertThat(brokerInfo.getNodeId()).isEqualTo(nodeId);\n    assertThat(brokerInfo.getPartitionsCount()).isEqualTo(partitionsCount);\n    assertThat(brokerInfo.getClusterSize()).isEqualTo(clusterSize);\n    assertThat(brokerInfo.getReplicationFactor()).isEqualTo(replicationFactor);\n    assertThat(brokerInfo.getAddresses()).containsAllEntriesOf(addresses);\n    assertThat(brokerInfo.getPartitionRoles()).containsAllEntriesOf(partitionRoles);\n    assertThat(brokerInfo.getPartitionHealthStatuses())\n        .containsAllEntriesOf(partitionHealthStatuses);\n  }\n']",Decode;Node;node;Count;Broker;Partitions;Replication;encode;Buffer;addresses,3.958120942115784e-09;3.725290298461914e-09;3.725290298461914e-09;2.0954757928848267e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.486159801483154, -4.926074504852295, -5.351363182067871, -6.415545463562012, -5.491453170776367, -0.02214139886200428]",0.978101909160614
1,['  @Test\n  public void shouldEncodeDecodeBrokerInfoWithEmptyMaps() {\n    // given\n    final int nodeId = 123;\n    final int partitionsCount = 345;\n    final int clusterSize = 567;\n    final int replicationFactor = 789;\n\n    final BrokerInfo brokerInfo =\n        new BrokerInfo()\n            .setNodeId(nodeId)\n            .setPartitionsCount(partitionsCount)\n            .setClusterSize(clusterSize)\n            .setReplicationFactor(replicationFactor);\n\n    // when\n    encodeDecode(brokerInfo);\n\n    // then\n    assertThat(brokerInfo.getNodeId()).isEqualTo(nodeId);\n    assertThat(brokerInfo.getPartitionsCount()).isEqualTo(partitionsCount);\n    assertThat(brokerInfo.getClusterSize()).isEqualTo(clusterSize);\n    assertThat(brokerInfo.getReplicationFactor()).isEqualTo(replicationFactor);\n    assertThat(brokerInfo.getAddresses()).isEmpty();\n    assertThat(brokerInfo.getPartitionRoles()).isEmpty();\n    assertThat(brokerInfo.getPartitionHealthStatuses()).isEmpty();\n  }\n'],should;encode;Broker;broker;cluster;Decode;Info;Info;broker;partitions,1.862645149230957e-09;1.1641532182693481e-09;8.149072527885437e-10;4.94765117764473e-10;4.94765117764473e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.1100277081131935e-10,5,5,"[-5.503353595733643, -5.042677879333496, -5.397660255432129, -6.4199137687683105, -5.457735538482666, -0.021171176806092262]",0.9790513515472412
1,['  @Test\n  public void shouldEncodeDecodeNullValues() {\n    // given\n    final BrokerInfo brokerInfo = new BrokerInfo();\n\n    // when\n    encodeDecode(brokerInfo);\n\n    // then\n    assertThat(brokerInfo.getNodeId()).isEqualTo(BrokerInfoEncoder.nodeIdNullValue());\n    assertThat(brokerInfo.getPartitionsCount())\n        .isEqualTo(BrokerInfoEncoder.partitionsCountNullValue());\n    assertThat(brokerInfo.getClusterSize()).isEqualTo(BrokerInfoEncoder.clusterSizeNullValue());\n    assertThat(brokerInfo.getReplicationFactor())\n        .isEqualTo(BrokerInfoEncoder.replicationFactorNullValue());\n    assertThat(brokerInfo.getAddresses()).isEmpty();\n    assertThat(brokerInfo.getPartitionRoles()).isEmpty();\n    assertThat(brokerInfo.getPartitionHealthStatuses()).isEmpty();\n  }\n'],Broker;broker;Addresses;should;Partitions;Decode;Null;qual;broker;Partition,2.0954757928848267e-09;1.57160684466362e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1496013030409813e-09;1.1059455573558807e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10,5,5,"[-5.4909467697143555, -5.069398403167725, -5.427257061004639, -6.46847677230835, -5.429910182952881, -0.020958388224244118]",0.9792596101760864
1,"['  @Test\n  public void shouldSerializePOJO() {\n    // given\n    final POJOArray pojo = new POJOArray();\n    final ValueArray<MinimalPOJO> iterator1 = pojo.simpleArray();\n    iterator1.add().setLongProp(123L);\n    iterator1.add().setLongProp(456L);\n    iterator1.add().setLongProp(789L);\n\n    final int writeLength = pojo.getLength();\n\n    // when\n    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(resultBuffer, 0);\n\n    // then\n    final Map<String, Object> msgPackMap =\n        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());\n    assertThat(msgPackMap)\n        .containsOnly(entry(""simpleArray"", ""[{longProp=123}, {longProp=456}, {longProp=789}]""));\n  }\n']",Unsafe;simple;msg;byte;POJO;Util;Pack;Pack;write;result,1.3387762010097504e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.493493556976318, -5.028170108795166, -5.420865535736084, -6.4729533195495605, -5.470688343048096, -0.021060761064291]",0.9791594743728638
1,"['  @Test\n  public void shouldSerializePOJOWithEmptyArray() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final int writeLength = pojo.getLength();\n\n    // when\n    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(resultBuffer, 0);\n\n    // then\n    final Map<String, Object> msgPackMap =\n        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());\n    assertThat(msgPackMap).containsOnly(entry(""simpleArray"", ""[]""));\n  }\n']",Buffer;Unsafe;Pack;Unsafe;contains;POJO;entry;Pack;Length;Serialize,1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10,5,5,"[-5.518010139465332, -5.016129493713379, -5.38349723815918, -6.442258834838867, -5.443821907043457, -0.02137831784784794]",0.9788485765457153
1,"['  @Test\n  public void shouldSerializePOJOAfterReset() {\n    // given\n    final POJOArray pojo = new POJOArray();\n    pojo.simpleArray().add().setLongProp(124);\n    pojo.reset();\n\n    final int writeLength = pojo.getLength();\n\n    // when\n    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(resultBuffer, 0);\n\n    // then\n    final Map<String, Object> msgPackMap =\n        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());\n    assertThat(msgPackMap).containsOnly(entry(""simpleArray"", ""[]""));\n  }\n']",Pack;Serialize;Pack;POJOAfter;msg;should;Ms;POJOArray;Buffer;Length,2.561137080192566e-09;1.9208528101444244e-09;1.6298145055770874e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.076841726899147e-09;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.511089324951172, -5.025020122528076, -5.436641216278076, -6.482113361358643, -5.469424247741699, -0.020928969606757164]",0.9792885184288025
1,"['  @Test\n  public void shouldSerializePOJOWithDefaultValues() {\n    // given\n    final POJOArray pojo = new POJOArray();\n    final ValueArray<MinimalPOJO> iterator1 = pojo.simpleArray();\n    iterator1.add().setLongProp(123L);\n\n    final int writeLength = pojo.getLength();\n\n    // when\n    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(resultBuffer, 0);\n\n    // then\n    final Map<String, Object> msgPackMap =\n        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());\n    assertThat(msgPackMap).containsOnly(entry(""simpleArray"", ""[{longProp=123}]""));\n  }\n']",Serialize;msg;Minimal;Default;Util;Buffer;Array;Ms;That;write,2.444721758365631e-09;1.1059455573558807e-09;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10,5,5,"[-5.510797023773193, -4.998358726501465, -5.408487319946289, -6.475864887237549, -5.468377113342285, -0.02125275507569313]",0.9789714813232422
1,"['  @Test\n  public void shouldSerializeAfterPartiallyReadEntries() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              encodeSimpleArrayProp(w);\n            });\n\n    pojo.wrap(buffer);\n    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n\n    final int writeLength = pojo.getLength();\n\n    // when\n    final UnsafeBuffer pojoBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(pojoBuffer, 0);\n\n    // then\n    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(pojoBuffer, 0, pojoBuffer.capacity());\n    assertThat(msgPackMap)\n        .containsOnly(\n            entry(\n                ""simpleArray"",\n                ""[{longProp=123}, {longProp=456}, {longProp=789}, {longProp=555}, {longProp=777}]""));\n  }\n']",Pack;Map;Pack;pojo;Serialize;POJOArray;Entries;That;Pack;Minimal,2.2118911147117615e-09;1.3969838619232178e-09;9.89530235528946e-10;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.454108238220215, -5.074478626251221, -5.408291816711426, -6.408963203430176, -5.419802665710449, -0.02131250500679016]",0.978912889957428
1,"['  @Test\n  public void shouldNotSerializeRemovedEntry() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              encodeSimpleArrayProp(w);\n            });\n\n    pojo.wrap(buffer);\n    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n\n    // when\n    iterator.remove();\n\n    // then\n    final int writeLength = pojo.getLength();\n    final UnsafeBuffer pojoBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(pojoBuffer, 0);\n\n    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(pojoBuffer, 0, pojoBuffer.capacity());\n    assertThat(msgPackMap)\n        .containsOnly(\n            entry(\n                ""simpleArray"", ""[{longProp=123}, {longProp=456}, {longProp=555}, {longProp=777}]""));\n  }\n']",Pack;POJOArray;Pack;Msg;Map;given;buffer;Header;Pack;wrap,2.7939677238464355e-09;2.0081643015146255e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.43833414465189e-10,5,5,"[-5.4614577293396, -5.073749542236328, -5.4451141357421875, -6.468166351318359, -5.438567638397217, -0.02093912474811077]",0.979278564453125
1,"['  @Test\n  public void shouldSerializeAppendedEntry() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              encodeSimpleArrayProp(w);\n            });\n\n    pojo.wrap(buffer);\n    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n\n    // when\n    pojo.simpleArray().add().setLongProp(999L);\n\n    // then\n    final int writeLength = pojo.getLength();\n    final UnsafeBuffer pojoBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(pojoBuffer, 0);\n\n    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(pojoBuffer, 0, pojoBuffer.capacity());\n    assertThat(msgPackMap)\n        .containsOnly(\n            entry(\n                ""simpleArray"",\n                ""[{longProp=123}, {longProp=456}, {longProp=789}, {longProp=555}, {longProp=777}, {longProp=999}]""));\n  }\n']",Msg;That;encode;Header;msg;msg;Appended;Minimal;Ms;wrap,2.7939677238464355e-09;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.5838532969355583e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.455839157104492, -5.078271865844727, -5.430348873138428, -6.446316719055176, -5.431519985198975, -0.021066714078187943]",0.9791536331176758
1,"['  @Test\n  public void shouldSerializeInbetweenAddedEntry() {\n    // given\n    final POJOArray pojo = new POJOArray();\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              encodeSimpleArrayProp(w);\n            });\n\n    pojo.wrap(buffer);\n    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n\n    // when\n    pojo.simpleArrayProp.add().setLongProp(999L);\n\n    // then\n    final int writeLength = pojo.getLength();\n    final UnsafeBuffer pojoBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(pojoBuffer, 0);\n\n    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(pojoBuffer, 0, pojoBuffer.capacity());\n    assertThat(msgPackMap)\n        .containsOnly(\n            entry(\n                ""simpleArray"",\n                ""[{longProp=123}, {longProp=456}, {longProp=789}, {longProp=999}, {longProp=555}, {longProp=777}]""));\n  }\n']",Inbetween;Pack;Msg;Map;when;Direct;That;encode;Buffer;Pack,1.7462298274040222e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.457404613494873, -5.042176246643066, -5.385653018951416, -6.405455112457275, -5.442950248718262, -0.02151518315076828]",0.978714644908905
1,"['  @Test\n  public void shouldDeserializePOJO() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(3);\n              encodeSimpleArrayProp(w);\n\n              w.writeString(wrapString(""emptyDefaultArray""));\n              w.writeArrayHeader(1);\n\n              w.writeMapHeader(1);\n              w.writeString(wrapString(""longProp""));\n              w.writeInteger(753L);\n\n              w.writeString(wrapString(""notEmptyDefaultArray""));\n              w.writeArrayHeader(0);\n            });\n\n    // when\n    pojo.wrap(buffer);\n\n    // then\n    final Iterator<MinimalPOJO> iterator1 = pojo.simpleArray().iterator();\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(123L);\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(456L);\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(789L);\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(555L);\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(777L);\n    assertThat(iterator1.hasNext()).isFalse();\n  }\n']",Pack;Header;buffer;buffer;Header;POJO;POJO;qual;pojo;Long,2.3283064365386963e-09;1.0477378964424133e-09;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.386655807495117, -5.112345218658447, -5.454832077026367, -6.435145378112793, -5.381572246551514, -0.021305035799741745]",0.9789204001426697
1,['  @Test\n  public void shouldDeserializePOJOWithDefaultValues() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              encodeSimpleArrayProp(w);\n            });\n\n    // when\n    pojo.wrap(buffer);\n\n    // then\n    final Iterator<MinimalPOJO> iterator1 = pojo.simpleArray().iterator();\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(123L);\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(456L);\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(789L);\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(555L);\n    assertThat(iterator1.hasNext()).isTrue();\n    assertThat(iterator1.next().getLongProp()).isEqualTo(777L);\n    assertThat(iterator1.hasNext()).isFalse();\n  }\n'],Minimal;Msg;POJOArray;Deserialize;Buffer;Values;Map;POJO;Prop;Iterator,1.57160684466362e-09;1.5133991837501526e-09;1.3969838619232178e-09;8.731149137020111e-10;8.731149137020111e-10;7.712515071034431e-10;7.639755494892597e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.464235305786133, -5.10407018661499, -5.4705047607421875, -6.4658708572387695, -5.420523643493652, -0.020710056647658348]",0.9795029163360596
1,['  @Test\n  public void shouldFailOnInitialRemove() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              encodeSimpleArrayProp(w);\n            });\n\n    pojo.wrap(buffer);\n    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();\n\n    // then\n    exception.expect(IllegalStateException.class);\n\n    // when\n    iterator.remove();\n  }\n'],Buffer;pojo;Illegal;Map;write;final;buffer;expect;encode;iterator,1.0477378964424133e-09;9.89530235528946e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.4988813400268555, -5.012922286987305, -5.44471549987793, -6.490204811096191, -5.46909761428833, -0.021014302968978882]",0.9792048335075378
1,['  @Test\n  public void shouldFailOnRemovingEntryTwice() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              encodeSimpleArrayProp(w);\n            });\n\n    pojo.wrap(buffer);\n    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();\n    iterator.next();\n    iterator.remove();\n\n    // then\n    exception.expect(IllegalStateException.class);\n\n    // when\n    iterator.remove();\n  }\n'],POJOArray;iterator;should;final;pojo;On;given;Array;iterator;buffer,1.862645149230957e-09;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.49749755859375, -5.026992321014404, -5.443301677703857, -6.458130836486816, -5.456622123718262, -0.02103613130748272]",0.9791836142539978
1,['  @Test\n  public void shouldFailOnRemovingWhenEntryHasBeenAddedBefore() {\n    // given\n    final POJOArray pojo = new POJOArray();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              encodeSimpleArrayProp(w);\n            });\n\n    pojo.wrap(buffer);\n    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();\n    iterator.next();\n    pojo.simpleArray().add().setLongProp(999L);\n\n    // then\n    exception.expect(IllegalStateException.class);\n\n    // when\n    iterator.remove();\n  }\n'],Buffer;Removing;pojo;when;Pack;iterator;Entry;buffer;expect;pojo,1.5133991837501526e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.495645999908447, -5.0290608406066895, -5.450329780578613, -6.4809770584106445, -5.465473175048828, -0.020924532786011696]",0.9792928695678711
1,"['  @Test\n  public void shouldAddFirstEntryToSimpleArrayProp() {\n    // given\n    final POJOArray pojo = new POJOArray();\n    final ValueArray<MinimalPOJO> iterator = pojo.simpleArray();\n\n    // when\n    iterator.add().setLongProp(741L);\n\n    // then\n    final int length = pojo.getLength();\n    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[length]);\n    pojo.write(resultBuffer, 0);\n\n    final Map<String, Object> msgPackMap =\n        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());\n    assertThat(msgPackMap).containsOnly(entry(""simpleArray"", ""[{longProp=741}]""));\n  }\n']",msg;Pack;Pack;iterator;POJOArray;Minimal;Prop;Unsafe;msg;pojo,1.6298145055770874e-09;1.280568540096283e-09;1.280568540096283e-09;1.1350493878126144e-09;1.1059455573558807e-09;1.0477378964424133e-09;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.5188727378845215, -5.003214359283447, -5.418635368347168, -6.479926586151123, -5.471663475036621, -0.02111947163939476]",0.9791019558906555
1,['  @Test\n  public void shouldIterateOverModifiedArray() {\n    // given\n    final POJOArray pojo = new POJOArray();\n    final ValueArray<MinimalPOJO> array = pojo.simpleArray();\n\n    // when\n    array.add().setLongProp(123L);\n\n    // then\n    final Iterator<MinimalPOJO> iterator = array.iterator();\n    assertThat(iterator.hasNext()).isTrue();\n    assertThat(iterator.next().getLongProp()).isEqualTo(123L);\n    assertThat(iterator.hasNext()).isFalse();\n  }\n'],Value;iterator;Over;when;That;given;final;That;iterator;iterator,6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.492359638214111, -5.017573356628418, -5.403876781463623, -6.468294620513916, -5.462263107299805, -0.021258005872368813]",0.9789663553237915
1,['  @Test\n  public void shouldDeserializePOJOWithUndeclaredProperties() {\n    // given\n    final MinimalPOJO pojo = new MinimalPOJO();\n\n    // when\n    pojo.wrap(MSG_PACK);\n\n    // then\n    assertThat(pojo.getLongProp()).isEqualTo(123L);\n  }\n'],Und;Long;should;Prop;pojo;final;given;get;That;pojo,1.6298145055770874e-09;1.5133991837501526e-09;1.1641532182693481e-09;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;1.6007106751203537e-10;1.1641532182693481e-10,5,5,"[-5.53078556060791, -4.9828901290893555, -5.420979022979736, -6.48838472366333, -5.469293594360352, -0.02119813673198223]",0.9790248274803162
1,['  @Test\n  public void shouldIncludeUndeclaredPropertiesInLengthEstimation() {\n    // given\n    final MinimalPOJO pojo = new MinimalPOJO();\n    pojo.wrap(MSG_PACK);\n\n    // when\n    final long writeLength = pojo.getLength();\n\n    // then\n    assertThat(writeLength).isEqualTo(MSG_PACK.capacity());\n  }\n'],capacity;POJO;clared;ACK;Length;write;when;should;wrap;qual,3.259629011154175e-09;2.3283064365386963e-09;1.7462298274040222e-09;1.0477378964424133e-09;8.440110832452774e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.5838532969355583e-10,5,5,"[-5.5311431884765625, -4.973490238189697, -5.418750762939453, -6.4916253089904785, -5.492181301116943, -0.02117047645151615]",0.979051947593689
1,"['  @Test\n  public void shouldSerializeUndeclaredProperties() {\n    // given\n    final MinimalPOJO pojo = new MinimalPOJO();\n    pojo.wrap(MSG_PACK);\n\n    final MutableDirectBuffer writeBuffer = new UnsafeBuffer(new byte[pojo.getLength()]);\n\n    // when\n    pojo.write(writeBuffer, 0);\n\n    // then\n    final Map<String, Object> serialized = asMap(writeBuffer, 0, writeBuffer.capacity());\n\n    assertThat(serialized).hasSize(2);\n    assertThat(serialized).contains(entry(""longProp"", 123L), entry(""undeclaredProp"", 456L));\n  }\n']",Serialize;Unsafe;POJO;Und;when;serialized;Buffer;Mutable;given;Buffer,2.9103830456733704e-09;2.2118911147117615e-09;1.0186340659856796e-09;7.566995918750763e-10;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.508124828338623, -5.039275169372559, -5.431510925292969, -6.486570358276367, -5.474033355712891, -0.02084234356880188]",0.9793733358383179
1,"['  @Test\n  public void shouldDropUndeclaredPropertiesOnReset() {\n    // given\n    final MinimalPOJO pojo = new MinimalPOJO();\n    pojo.wrap(MSG_PACK);\n\n    final MutableDirectBuffer writeBuffer = new UnsafeBuffer(new byte[pojo.getLength()]);\n\n    // when\n    pojo.reset();\n\n    // then\n    pojo.wrap(\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              w.writeString(wrapString(""longProp""));\n              w.writeInteger(123L);\n            }));\n    pojo.write(writeBuffer, 0);\n\n    final Map<String, Object> serialized = asMap(writeBuffer, 0, writeBuffer.capacity());\n    assertThat(serialized).containsExactly(entry(""longProp"", 123L));\n  }\n']",Pack;Reset;encode;clared;Buffer;wrap;long;ACK;pojo;Direct,1.3969838619232178e-09;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10,5,5,"[-5.456993579864502, -5.055713176727295, -5.422891139984131, -6.435271739959717, -5.447290897369385, -0.02118833176791668]",0.9790345430374146
1,"['  @Test\n  public void shouldFailReadingInvalidUndeclaredProperty() {\n    // given\n    final MinimalPOJO pojo = new MinimalPOJO();\n\n    final MutableDirectBuffer msgPack =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(2);\n              w.writeString(wrapString(""longProp""));\n              w.writeInteger(123L);\n              w.writeInteger(789L);\n              w.writeInteger(123L);\n            });\n\n    // then\n    exception.expect(RuntimeException.class);\n    exception.expectMessage(""Could not deserialize object"");\n\n    // when\n    pojo.wrap(msgPack);\n  }\n']",wrap;pojo;when;exception;Message;deserialize;long;Pack;Minimal;exception,3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.6088749766349792e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.482748031616211, -5.056153297424316, -5.468582630157471, -6.485850811004639, -5.458223342895508, -0.02074485272169113]",0.9794689416885376
1,"['    @Test\n    public void shouldResetObjectBeforeReadingValue() {\n      // given\n      final var property = new StringProperty(""property"", ""default"");\n      final var unpackedObject = new UnpackedObject();\n\n      unpackedObject.declareProperty(property);\n\n      final var buffer = new UnsafeBuffer(ByteBuffer.allocate(100));\n\n      unpackedObject.write(buffer, 0);\n\n      final var spyUnpackedObject = spy(unpackedObject);\n\n      // when\n      spyUnpackedObject.wrap(buffer);\n\n      // then\n      final var orderOfInvocations = Mockito.inOrder(spyUnpackedObject);\n      orderOfInvocations.verify(spyUnpackedObject).reset();\n      orderOfInvocations.verify(spyUnpackedObject).read(Mockito.any());\n    }\n']",spy;Invocations;Object;Reset;Unpacked;ockito;when;write;new;Byte,1.0477378964424133e-09;8.294591680169106e-10;7.8580342233181e-10;7.275957614183426e-10;7.130438461899757e-10;6.402842700481415e-10;6.111804395914078e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.525832176208496, -5.041431903839111, -5.443348407745361, -6.475046634674072, -5.46343994140625, -0.020766571164131165]",0.9794475436210632
1,"['    @Test\n    public void newPropertiesShouldHaveDefaultValueAfterReadingOldSerialization() {\n      // given\n\n      // set the new property to a value that is different from the default value\n      addedProperty.setValue(true);\n\n      // when\n      newSchemaObject.wrap(bufferSerializedWithOldSchema);\n\n      // then\n      assertThat(addedProperty.getValue())\n          .describedAs(""value of added property after reading"")\n          .isFalse();\n    }\n']",Properties;wrap;added;Reading;As;Serialization;Serialized;different;Default;when,9.604264050722122e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10,5,5,"[-5.501438617706299, -5.043389797210693, -5.435391902923584, -6.4616475105285645, -5.449917793273926, -0.02096959389746189]",0.9792488813400269
1,"['    @Test\n    public void shouldNotAccumulateSizeWithUndeclaredProperties() {\n\n      // given\n      newSchemaObject.wrap(bufferSerializedWithOldSchema);\n      final int length = newSchemaObject.getLength();\n\n      final var buffer = new UnsafeBuffer(ByteBuffer.allocate(100));\n      newSchemaObject.write(buffer, 0);\n\n      // when\n      newSchemaObject.wrap(buffer);\n\n      // then\n      assertThat(newSchemaObject.getLength()).isEqualTo(length);\n    }\n']",Buffer;Schema;Schema;Not;Object;Serialized;buffer;when;length;clared,8.149072527885437e-10;7.8580342233181e-10;6.548361852765083e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.50799560546875, -5.033478736877441, -5.416623115539551, -6.448295593261719, -5.4572367668151855, -0.021081769838929176]",0.9791390299797058
1,"['  @Test\n  public void shouldReturnDefaultValueForMissingProperty() {\n    // given\n    final MutableDirectBuffer msgPackBuffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              w.writeString(wrapString(""noDefaultValueProp""));\n              w.writeInteger(123123L);\n            });\n\n    final long defaultValue = -1L;\n    final DefaultValuesPOJO pojo = new DefaultValuesPOJO(defaultValue);\n\n    // when\n    pojo.wrap(msgPackBuffer);\n\n    // then\n    assertThat(pojo.getNoDefaultValueProperty()).isEqualTo(123123L);\n    assertThat(pojo.getDefaultValueProperty()).isEqualTo(defaultValue);\n  }\n']",Msg;write;Map;write;final;Missing;Buffer;encode;qual;should,1.3969838619232178e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.4757232666015625, -5.062831878662109, -5.465973377227783, -6.489769458770752, -5.460476875305176, -0.020726755261421204]",0.9794865846633911
1,"['  @Test\n  public void shouldNotReturnDefaultValueForExistingProperty() {\n    // given\n    final MutableDirectBuffer msgPackBuffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(2);\n              w.writeString(wrapString(""noDefaultValueProp""));\n              w.writeInteger(123123L);\n              w.writeString(wrapString(""defaultValueProp""));\n              w.writeInteger(987L);\n            });\n\n    final long defaultValue = -1L;\n    final DefaultValuesPOJO pojo = new DefaultValuesPOJO(defaultValue);\n\n    // when\n    pojo.wrap(msgPackBuffer);\n\n    // then\n    assertThat(pojo.getNoDefaultValueProperty()).isEqualTo(123123L);\n    assertThat(pojo.getDefaultValueProperty()).isEqualTo(987L);\n  }\n']",msg;Pack;should;Buffer;No;Header;final;pojo;Mutable;given,1.280568540096283e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.487398624420166, -5.043797969818115, -5.44257116317749, -6.4708476066589355, -5.458182334899902, -0.020943211391568184]",0.9792746901512146
1,"['  @Test\n  public void shouldReturnDefaultValueAfterReset() {\n    // given\n    final MutableDirectBuffer msgPackBuffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(2);\n              w.writeString(wrapString(""noDefaultValueProp""));\n              w.writeInteger(123123L);\n              w.writeString(wrapString(""defaultValueProp""));\n              w.writeInteger(987L);\n            });\n\n    final long defaultValue = -1L;\n    final DefaultValuesPOJO pojo = new DefaultValuesPOJO(defaultValue);\n    pojo.wrap(msgPackBuffer);\n\n    // when\n    pojo.reset();\n\n    // then\n    assertThat(pojo.getDefaultValueProperty()).isEqualTo(defaultValue);\n  }\n']",default;wrap;reset;default;POJO;final;Value;Default;no;default,6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.458563327789307, -5.044571399688721, -5.41510009765625, -6.435925006866455, -5.4511919021606445, -0.02127142623066902]",0.9789531230926514
1,"['  @Test\n  public void shouldWriteDefaultValue() {\n    // given\n    final long defaultValue = -1L;\n    final DefaultValuesPOJO pojo = new DefaultValuesPOJO(defaultValue);\n    pojo.setNoDefaultValueProperty(123123L);\n\n    final UnsafeBuffer buf = new UnsafeBuffer(new byte[pojo.getLength()]);\n\n    // when\n    pojo.write(buf, 0);\n\n    // then\n    final MsgPackReader reader = new MsgPackReader();\n    reader.wrap(buf, 0, buf.capacity());\n    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(buf, 0, buf.capacity());\n\n    assertThat(msgPackMap).hasSize(2);\n    assertThat(msgPackMap)\n        .contains(entry(""noDefaultValueProp"", 123123L), entry(""defaultValueProp"", defaultValue));\n  }\n']",Pack;contains;msg;Value;msg;reader;Buffer;Property;write;msg,2.3865140974521637e-09;9.604264050722122e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.524226188659668, -5.004316806793213, -5.408257961273193, -6.47042179107666, -5.482935905456543, -0.02110406383872032]",0.9791169762611389
1,"['  @Test\n  public void shouldSupportDefaultValuesForAllPropertyTypes() {\n    // given\n    final MutableDirectBuffer msgPackBuffer = encodeMsgPack((w) -> w.writeMapHeader(0));\n\n    final MutableDirectBuffer packedMsgPackBuffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n              w.writeInteger(123L);\n              w.writeInteger(456L);\n            });\n\n    final AllTypesDefaultValuesPOJO pojo =\n        new AllTypesDefaultValuesPOJO(\n            POJOEnum.FOO,\n            654L,\n            123,\n            ""defaultString"",\n            packedMsgPackBuffer,\n            wrapString(""defaultBinary""),\n            new POJONested());\n\n    // when\n    pojo.wrap(msgPackBuffer);\n\n    // then\n    assertThat(pojo.getEnum()).isEqualTo(POJOEnum.FOO);\n    assertThat(pojo.getLong()).isEqualTo(654L);\n    assertThat(pojo.getInt()).isEqualTo(123);\n    assertThatBuffer(pojo.getString()).hasBytes(wrapString(""defaultString""));\n    assertThatBuffer(pojo.getPacked()).hasBytes(packedMsgPackBuffer);\n    assertThatBuffer(pojo.getBinary()).hasBytes(wrapString(""defaultBinary""));\n    assertThat(pojo.getNestedObject().getLong()).isEqualTo(-1L);\n  }\n']",Buffer;Direct;That;Msg;Header;POJOEnum;Mutable;write;default;Bytes,1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;6.693881005048752e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10,5,5,"[-5.436813831329346, -5.036967754364014, -5.412023067474365, -6.430736064910889, -5.433889389038086, -0.0215164665132761]",0.97871333360672
1,"['  @Test\n  public void shouldSerializePOJO() {\n    // given\n    final POJO pojo = new POJO();\n    pojo.setEnum(POJOEnum.BAR);\n    pojo.setLong(456456L);\n    pojo.setInt(123);\n    pojo.setString(BUF1);\n    pojo.setBinary(BUF2);\n    pojo.setPacked(MSGPACK_BUF1);\n\n    pojo.nestedObject().setLong(24L);\n\n    final int writeLength = pojo.getLength();\n\n    // when\n    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[writeLength]);\n    pojo.write(resultBuffer, 0);\n\n    // then\n    final Map<String, Object> msgPackMap =\n        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());\n    assertThat(msgPackMap).hasSize(7);\n    assertThat(msgPackMap)\n        .contains(\n            entry(""enumProp"", POJOEnum.BAR.toString()),\n            entry(""longProp"", 456456L),\n            entry(""intProp"", 123L),\n            entry(""stringProp"", ""foo""),\n            entry(""binaryProp"", BUF2.byteArray()));\n\n    final Map<String, Object> packedProp = (Map<String, Object>) msgPackMap.get(""packedProp"");\n    assertThat(packedProp).containsExactly(entry(""foo"", 123123L));\n\n    final Map<String, Object> objectProp = (Map<String, Object>) msgPackMap.get(""objectProp"");\n    assertThat(objectProp).containsExactly(entry(""foo"", 24L));\n  }\n']",Pack;Serialize;msg;Pack;Pack;Pack;packed;msg;Map;as,1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.400060653686523, -5.076141834259033, -5.410775661468506, -6.431064128875732, -5.418838977813721, -0.021500833332538605]",0.9787285327911377
1,"['  @Test\n  public void shouldDeserializePOJO() {\n    // given\n    final POJO pojo = new POJO();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(7);\n\n              w.writeString(wrapString(""enumProp""));\n              w.writeString(wrapString(POJOEnum.BAR.toString()));\n\n              w.writeString(wrapString(""binaryProp""));\n              w.writeBinary(BUF1);\n\n              w.writeString(wrapString(""stringProp""));\n              w.writeString(BUF2);\n\n              w.writeString(wrapString(""packedProp""));\n              w.writeRaw(MSGPACK_BUF1);\n\n              w.writeString(wrapString(""longProp""));\n              w.writeInteger(88888L);\n\n              w.writeString(wrapString(""intProp""));\n              w.writeInteger(123L);\n\n              w.writeString(wrapString(""objectProp""));\n              w.writeRaw(MSGPACK_BUF1);\n            });\n\n    // when\n    pojo.wrap(buffer);\n\n    // then\n    assertThat(pojo.getEnum()).isEqualByComparingTo(POJOEnum.BAR);\n    assertThat(pojo.getLong()).isEqualTo(88888L);\n    assertThat(pojo.getInt()).isEqualTo(123);\n    assertThatBuffer(pojo.getPacked()).hasBytes(MSGPACK_BUF1);\n    assertThatBuffer(pojo.getBinary()).hasBytes(BUF1);\n    assertThatBuffer(pojo.getString()).hasBytes(BUF2);\n    assertThat(pojo.nestedObject().getLong()).isEqualTo(123123L);\n  }\n']",Msg;encode;POJO;Raw;enum;MSGPACK;POJO;final;write;pojo,3.725290298461914e-09;1.280568540096283e-09;1.076841726899147e-09;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.360786437988281, -5.101268291473389, -5.443879127502441, -6.438817977905273, -5.381609916687012, -0.021537818014621735]",0.978692352771759
1,"['  @Test\n  public void shouldNotDeserializePOJOWithWrongValueType() {\n    // given\n    final POJO pojo = new POJO();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n\n              w.writeString(wrapString(""stringProp""));\n              w.writeFloat(123123.123123d);\n            });\n\n    // then\n    exception.expect(RuntimeException.class);\n    exception.expectMessage(\n        ""Could not deserialize object [POJO]. Deserialization stuck at offset 13"");\n\n    // when\n    pojo.wrap(buffer);\n  }\n']",POJO;Deserialization;object;write;Wrong;class;wrap;new;Runtime;Deserialize,1.5133991837501526e-08;1.0244548320770264e-08;5.587935447692871e-09;4.6566128730773926e-09;3.725290298461914e-09;3.026798367500305e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3865140974521637e-09,5,5,"[-5.4906206130981445, -5.0385260581970215, -5.464714527130127, -6.483759880065918, -5.459564685821533, -0.02084117755293846]",0.9793744087219238
1,"['  @Test\n  public void shouldNotDeserializePOJOWithWrongKeyType() {\n    // given\n    final POJO pojo = new POJO();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n\n              w.writeInteger(123123L);\n              w.writeFloat(123123.123123d);\n            });\n\n    // then\n    exception.expect(RuntimeException.class);\n    exception.expectMessage(\n        ""Could not deserialize object [POJO]. Deserialization stuck at offset 2"");\n\n    // when\n    pojo.wrap(buffer);\n  }\n']",write;new;Deserialization;Deserialize;Map;Key;POJO;at;Buffer;expect,6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.8562575355172157e-10;2.764863893389702e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.494452476501465, -5.030072212219238, -5.461357593536377, -6.485853672027588, -5.465559959411621, -0.020866628736257553]",0.9793495535850525
1,"['  @Test\n  public void shouldNotDeserializePOJOFromNonMap() {\n    // given\n    final POJO pojo = new POJO();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeString(wrapString(""stringProp""));\n              w.writeFloat(123123.123123d);\n            });\n\n    // then\n    exception.expect(RuntimeException.class);\n    exception.expectMessage(\n        ""Could not deserialize object [POJO]. Deserialization stuck at offset 1"");\n\n    // when\n    pojo.wrap(buffer);\n  }\n']",Non;Direct;expect;object;write;Deserialize;expect;POJO;wrap;offset,9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.5074663162231445, -5.037644863128662, -5.463578224182129, -6.485873222351074, -5.459067344665527, -0.02078058198094368]",0.9794338345527649
1,"['  @Test\n  public void shouldFailDeserializationWithMissingRequiredValues() {\n    // given\n    final POJO pojo = new POJO();\n\n    final DirectBuffer buf1 = encodeMsgPack((w) -> w.writeMapHeader(0));\n\n    // when\n    final Throwable error = catchThrowable(() -> pojo.wrap(buf1));\n\n    // then\n    assertThat(error)\n        .isInstanceOf(RuntimeException.class)\n        .hasMessageContaining(""Could not deserialize object"")\n        .hasCause(new RuntimeException(""Property \'enumProp\' has no valid value""));\n  }\n']",pojo;Required;Pack;should;Could;wrap;error;Map;Direct;Runtime,1.6589183360338211e-09;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.508455276489258, -5.018795490264893, -5.457206726074219, -6.4926252365112305, -5.460144996643066, -0.0209150779992342]",0.9793022274971008
1,"['  @Test\n  public void shouldFailDeserializationWithOversizedIntegerValue() {\n    // given\n    final POJO pojo = new POJO();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(1);\n\n              w.writeString(wrapString(""intProp""));\n              w.writeInteger(Integer.MAX_VALUE + 1L);\n            });\n\n    // then\n    exception.expect(RuntimeException.class);\n    exception.expectMessage(""Could not deserialize object"");\n\n    // when\n    pojo.wrap(buffer);\n  }\n']",expect;Msg;encode;versized;new;given;when;POJO;Header;write,1.862645149230957e-09;1.8044374883174896e-09;1.280568540096283e-09;7.8580342233181e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.2014213502407074e-10,5,5,"[-5.494800090789795, -5.029086589813232, -5.4368205070495605, -6.44105339050293, -5.4571852684021, -0.02108725719153881]",0.9791335463523865
1,"['  @Test\n  public void shouldFailDeserializationWithUndersizedIntegerValue() {\n    // given\n    final POJO pojo = new POJO();\n\n    final DirectBuffer buffer =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(6);\n\n              w.writeString(wrapString(""enumProp""));\n              w.writeString(wrapString(POJOEnum.BAR.toString()));\n\n              w.writeString(wrapString(""binaryProp""));\n              w.writeBinary(BUF1);\n\n              w.writeString(wrapString(""stringProp""));\n              w.writeString(BUF2);\n\n              w.writeString(wrapString(""packedProp""));\n              w.writeRaw(MSGPACK_BUF1);\n\n              w.writeString(wrapString(""longProp""));\n              w.writeInteger(88888L);\n\n              w.writeString(wrapString(""intProp""));\n              w.writeInteger(Integer.MIN_VALUE - 1L);\n            });\n\n    // then\n    exception.expect(RuntimeException.class);\n    exception.expectMessage(""Could not deserialize object"");\n\n    // when\n    pojo.wrap(buffer);\n  }\n']",MSGPACK;Fail;Msg;Undersized;pojo;POJO;new;inary;Raw;Prop,1.57160684466362e-09;9.313225746154785e-10;8.149072527885437e-10;6.693881005048752e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.393492698669434, -5.0904221534729, -5.441057205200195, -6.4404802322387695, -5.4016923904418945, -0.021367698907852173]",0.9788590669631958
1,"['  @Test\n  public void shouldFailSerializationWithMissingRequiredValues() {\n    // given\n    final POJO pojo = new POJO();\n\n    final UnsafeBuffer buf = new UnsafeBuffer(new byte[1024]);\n\n    // then\n    exception.expect(MsgpackPropertyException.class);\n    exception.expectMessage(\n        ""Property \'enumProp\' is invalid: Expected a value or default value to be set before writing, but has nothing"");\n\n    // when\n    pojo.write(buf, 0);\n  }\n']",should;POJO;Fail;buf;invalid;expect;write;pojo;Buffer;byte,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.764863893389702e-10,5,5,"[-5.5329670906066895, -4.98417329788208, -5.46650505065918, -6.522943496704102, -5.493846893310547, -0.02082226239144802]",0.9793930053710938
1,"['  @Test\n  public void shouldFailLengthEstimationWithMissingRequiredValues() {\n    // given\n    final POJO pojo = new POJO();\n\n    // then\n    exception.expect(MsgpackPropertyException.class);\n    exception.expectMessage(\n        ""Property \'enumProp\' is invalid: Expected a value or default value to be specified, but has nothing"");\n\n    // when\n    pojo.getLength();\n  }\n']",Length;should;pojo;Fail;exception;Message;to;be;POJO;has,2.0954757928848267e-09;1.280568540096283e-09;1.2223608791828156e-09;1.0477378964424133e-09;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.542524814605713, -4.966635227203369, -5.447184085845947, -6.5217204093933105, -5.493389129638672, -0.020995626226067543]",0.979223370552063
1,"['  @Test\n  public void shouldDeserializeWithReusedPOJO() {\n    // given\n    final POJO pojo = new POJO();\n\n    final DirectBuffer buf1 =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(7);\n\n              w.writeString(wrapString(""enumProp""));\n              w.writeString(wrapString(POJOEnum.BAR.toString()));\n\n              w.writeString(wrapString(""binaryProp""));\n              w.writeBinary(BUF1);\n\n              w.writeString(wrapString(""stringProp""));\n              w.writeString(BUF2);\n\n              w.writeString(wrapString(""packedProp""));\n              w.writeRaw(MSGPACK_BUF1);\n\n              w.writeString(wrapString(""longProp""));\n              w.writeInteger(88888L);\n\n              w.writeString(wrapString(""intProp""));\n              w.writeInteger(123);\n\n              w.writeString(wrapString(""objectProp""));\n              w.writeRaw(MSGPACK_BUF1);\n            });\n    pojo.wrap(buf1);\n\n    final DirectBuffer buf2 =\n        encodeMsgPack(\n            (w) -> {\n              w.writeMapHeader(7);\n\n              w.writeString(wrapString(""enumProp""));\n              w.writeString(wrapString(POJOEnum.FOO.toString()));\n\n              w.writeString(wrapString(""binaryProp""));\n              w.writeBinary(BUF2);\n\n              w.writeString(wrapString(""stringProp""));\n              w.writeString(BUF1);\n\n              w.writeString(wrapString(""packedProp""));\n              w.writeRaw(MSGPACK_BUF2);\n\n              w.writeString(wrapString(""longProp""));\n              w.writeInteger(7777L);\n\n              w.writeString(wrapString(""intProp""));\n              w.writeInteger(456);\n\n              w.writeString(wrapString(""objectProp""));\n              w.writeRaw(MSGPACK_BUF3);\n            });\n\n    // when\n    pojo.reset();\n    pojo.wrap(buf2);\n\n    // then\n    assertThat(pojo.getEnum()).isEqualByComparingTo(POJOEnum.FOO);\n    assertThat(pojo.getLong()).isEqualTo(7777L);\n    assertThat(pojo.getInt()).isEqualTo(456);\n    assertThatBuffer(pojo.getPacked()).hasBytes(MSGPACK_BUF2);\n    assertThatBuffer(pojo.getBinary()).hasBytes(BUF2);\n    assertThatBuffer(pojo.getString()).hasBytes(BUF1);\n    assertThat(pojo.nestedObject().getLong()).isEqualTo(24L);\n  }\n']",Deserialize;Msg;Map;encode;POJOEnum;MSGPACK;buf;inary;Header;pojo,1.7462298274040222e-09;1.1641532182693481e-09;5.820766091346741e-10;5.675246939063072e-10;5.384208634495735e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.370242595672607, -5.104856491088867, -5.4464111328125, -6.439901828765869, -5.392740726470947, -0.021405506879091263]",0.9788219928741455
1,"['  @Test\n  public void shouldAppendValues() {\n    // when\n    addIntValues(array, 1, 2, 3);\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 1, 2, 3);\n  }\n']",should;Values;Values;array;Int;Values;when;array;add;Int,9.313225746154785e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.238689482212067e-10;-6.402842700481415e-10,5,5,"[-5.529610633850098, -4.967345714569092, -5.405867576599121, -6.489955425262451, -5.484010696411133, -0.021316122263669968]",0.978909432888031
1,"['  @Test\n  public void shouldAddValueAtBeginning() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    // reset iterator to append at beginning\n    array.iterator();\n    addIntValues(array, 4, 5, 6);\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 4, 5, 6, 1, 2, 3);\n  }\n']",Decode;array;Int;add;array;given;at;Beginning;encode;Values,1.8917489796876907e-09;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.529207706451416, -5.025604724884033, -5.411993026733398, -6.470874786376953, -5.473001003265381, -0.02096422389149666]",0.9792540073394775
1,"['  @Test\n  public void shouldAddValueInBetween() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    iterator.next();\n    addIntValues(array, 4, 5, 6);\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 1, 4, 5, 6, 2, 3);\n  }\n']",Between;Value;In;given;should;add;Add;Decode;next;array,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;6.111804395914078e-10,5,5,"[-5.524569988250732, -5.016976833343506, -5.4017333984375, -6.4661126136779785, -5.475845813751221, -0.021083520725369453]",0.9791371822357178
1,"['  @Test\n  public void shouldAddValuesAtEndAfterRead() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n    addIntValues(array, 4, 5, 6);\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 1, 2, 3, 4, 5, 6);\n  }\n']",Values;iterator;array;iterator;Decode;array;next;array;array;should,1.862645149230957e-09;5.820766091346741e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.530078887939453, -5.01517915725708, -5.410192966461182, -6.478853702545166, -5.481792449951172, -0.020989088341593742]",0.9792296290397644
1,"['  @Test\n  public void shouldUpdateValues() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    iterator.next().setValue(4);\n    iterator.next().setValue(5);\n    iterator.next().setValue(6);\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 4, 5, 6);\n  }\n']",encode;should;when;Int;Values;Update;next;array;add;iterator,2.444721758365631e-09;1.3387762010097504e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.536490440368652, -5.0035319328308105, -5.425288677215576, -6.486043453216553, -5.49614143371582, -0.020902352407574654]",0.9793145656585693
1,"['  @Test\n  public void shouldSerializeValuesAfterPartialRead() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    iterator.next();\n    iterator.next();\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 1, 2, 3);\n  }\n']",encode;Values;Partial;Read;array;given;add;iterator;iterator;array,1.7462298274040222e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.473825588822365e-10,5,5,"[-5.516780853271484, -4.971634864807129, -5.3665571212768555, -6.452049255371094, -5.462319374084473, -0.02167489565908909]",0.9785581827163696
1,"['  @Test\n  public void shouldRemoveValueAtBeginning() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    iterator.next();\n    iterator.remove();\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 2, 3);\n  }\n']",should;Decode;Beginning;Values;array;add;Int;iterator;final;Values,1.280568540096283e-09;9.604264050722122e-10;9.313225746154785e-10;5.238689482212067e-10;4.874891601502895e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.4551915228366852e-11,5,5,"[-5.541986465454102, -4.986584186553955, -5.413289546966553, -6.48689079284668, -5.481056213378906, -0.02111421898007393]",0.979107141494751
1,"['  @Test\n  public void shouldRemoveValueInBetween() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    iterator.next();\n    iterator.next();\n    iterator.remove();\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 1, 3);\n  }\n']",Decode;iterator;In;final;array;next;next;array;Value;Int,9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.2369127944111824e-10;1.1641532182693481e-10,5,5,"[-5.5287346839904785, -4.99406099319458, -5.402738571166992, -6.480111122131348, -5.475355625152588, -0.021198837086558342]",0.9790242910385132
1,"['  @Test\n  public void shouldRemoveValueAtEnd() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n    iterator.remove();\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, 1, 2);\n  }\n']",iterator;remove;Remove;Int;Iterator;next;Int;array;iterator;Value,6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11,5,5,"[-5.501898765563965, -5.02119779586792, -5.39363956451416, -6.4593634605407715, -5.463005542755127, -0.021251820027828217]",0.9789724349975586
1,"['  @Test\n  public void shouldRemoveAllValues() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    iterator.next();\n    iterator.remove();\n    iterator.next();\n    iterator.remove();\n    iterator.next();\n    iterator.remove();\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array);\n  }\n']",encode;Iterator;should;add;next;iterator;iterator;Remove;Int;Value,1.3387762010097504e-09;1.2223608791828156e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.5320611000061035, -4.993110656738281, -5.429487705230713, -6.500250339508057, -5.49830961227417, -0.020942160859704018]",0.9792755842208862
1,"['  @Test\n  public void shouldNotInvalidElementOnRemove() {\n    // given\n    addIntValues(array, 1, 2, 3);\n\n    // when\n    final Iterator<IntegerValue> iterator = array.iterator();\n    final IntegerValue element = iterator.next();\n    iterator.remove();\n\n    // then\n    assertThat(element.getValue()).isEqualTo(1);\n    encodeAndDecode(array);\n    assertIntValues(array, 2, 3);\n  }\n']",Int;add;Values;next;Iterator;Values;element;qual;Value;That,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.5149993896484375, -5.019960403442383, -5.443116664886475, -6.49525785446167, -5.469925403594971, -0.0208955816924572]",0.9793212413787842
1,"['  @Test\n  public void shouldUpdateWithSmallerValue() {\n    // given\n    final ArrayValue<StringValue> array = new ArrayValue<>(new StringValue());\n    addStringValues(array, ""foo"", ""bar"", ""baz"");\n\n    // when\n    final Iterator<StringValue> iterator = array.iterator();\n    StringValue element = iterator.next();\n    element.wrap(BufferUtil.wrapString(""a""));\n    element = iterator.next();\n    element.wrap(BufferUtil.wrapString(""b""));\n    element = iterator.next();\n    element.wrap(BufferUtil.wrapString(""c""));\n\n    // then\n    encodeAndDecode(array);\n    assertStringValues(array, ""a"", ""b"", ""c"");\n  }\n']",Smaller;Decode;Values;final;element;Array;bar;iterator;wrap;element,1.1641532182693481e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.480856895446777, -5.001806259155273, -5.433828353881836, -6.489846229553223, -5.482460975646973, -0.021157987415790558]",0.9790642857551575
1,"['  @Test\n  public void shouldUpdateWithBiggerValue() {\n    // given\n    final ArrayValue<StringValue> array = new ArrayValue<>(new StringValue());\n    addStringValues(array, ""foo"", ""bar"", ""baz"");\n\n    // when\n    final Iterator<StringValue> iterator = array.iterator();\n    StringValue element = iterator.next();\n    element.wrap(BufferUtil.wrapString(""hello""));\n    element = iterator.next();\n    element.wrap(BufferUtil.wrapString(""world""));\n    element = iterator.next();\n    element.wrap(BufferUtil.wrapString(""friend""));\n\n    // then\n    encodeAndDecode(array);\n    assertStringValues(array, ""hello"", ""world"", ""friend"");\n  }\n']",new;hello;array;Value;Buffer;Decode;Update;next;array;Value,1.1059455573558807e-09;1.076841726899147e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.465456962585449, -5.010246753692627, -5.4454474449157715, -6.497025489807129, -5.469527244567871, -0.021159037947654724]",0.9790632724761963
1,"['  @Test\n  public void shouldIncreaseInternalBufferWhenAddingToEnd() {\n    // given\n    final int valueCount = 10_000;\n\n    final Integer[] values =\n        IntStream.iterate(0, (i) -> ++i)\n            .limit(valueCount)\n            .boxed()\n            .collect(Collectors.toList())\n            .toArray(new Integer[valueCount]);\n\n    // when\n    addIntValues(array, values);\n\n    // then\n    encodeAndDecode(array);\n    assertIntValues(array, values);\n  }\n']",Collectors;Adding;End;should;values;final;when;to;encode;Count,1.1059455573558807e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.511380195617676, -4.983766555786133, -5.400704383850098, -6.461137294769287, -5.487407684326172, -0.02132965810596943]",0.9788963198661804
1,"['  @Test\n  public void shouldIncreaseInternalBufferWhenAddingToBeginning() {\n    // given\n    final int valueCount = 10_000;\n    final List<Integer> generatedList =\n        IntStream.iterate(0, (i) -> ++i).limit(valueCount).boxed().collect(Collectors.toList());\n    final List<Integer> reverseList = new ArrayList<>(generatedList);\n    Collections.reverse(generatedList);\n\n    final Integer[] values = generatedList.toArray(new Integer[valueCount]);\n\n    // when\n    for (final Integer value : values) {\n      // reset cursor to first position\n      array.iterator();\n      array.add().setValue(value);\n    }\n\n    // then\n    encodeAndDecode(array);\n\n    final Integer[] resultValues = reverseList.toArray(new Integer[valueCount]);\n    assertIntValues(array, resultValues);\n  }\n']",Buffer;When;Beginning;Int;boxed;iterate;iterator;Count;value;final,1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.490370750427246, -5.020860195159912, -5.4097394943237305, -6.473912715911865, -5.479218482971191, -0.02113557793200016]",0.9790862202644348
1,"['\t@Test\n\tpublic void testIssue151() {\n\t\tJSONDoc jsonDoc = jsondocScanner.getJSONDoc("""", """", Lists.newArrayList(""org.jsondoc.core.issues.issue151""), true, MethodDisplay.URI);\n\t\tAssert.assertEquals(2, jsonDoc.getObjects().keySet().size());\n\t\tAssert.assertEquals(1, jsonDoc.getObjects().get(""bargroup"").size());\n\t\tAssert.assertEquals(1, jsonDoc.getObjects().get(""foogroup"").size());\n\t}\n']",jsondoc;org;JSONDoc;new;Method;issue;foogroup;Lists;json;json,2.35741026699543e-09;1.4551915228366852e-09;1.3096723705530167e-09;1.076841726899147e-09;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10,5,5,"[-5.558501720428467, -5.006415843963623, -5.428410530090332, -6.499213695526123, -5.454594135284424, -0.02093842439353466]",0.9792792797088623
1,"['\t@Test\n\tpublic void testApiErrorsDoc() throws Exception {\n\n\t\tfinal ApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>>newHashSet(Test3Controller.class),\n\t\t\t\tMethodDisplay.URI).iterator().next();\n\n\t\tfinal Set<ApiMethodDoc> methods = apiDoc.getMethods();\n\t\tfinal ApiMethodDoc apiMethodDoc = methods.iterator().next();\n\t\tfinal List<ApiErrorDoc> apiErrors = apiMethodDoc.getApierrors();\n\n\t\tAssert.assertEquals(1, methods.size());\n\t\tAssert.assertEquals(3, apiErrors.size());\n\t\tAssert.assertEquals(""1000"", apiErrors.get(0).getCode());\n\t\tAssert.assertEquals(""method-level annotation should be applied"",\n\t\t\t\t""A test error #1"", apiErrors.get(0).getDescription());\n\t\tAssert.assertEquals(""2000"", apiErrors.get(1).getCode());\n\t\tAssert.assertEquals(""400"", apiErrors.get(2).getCode());\n\n\t}\n']",annotation;Apierrors;pi;Equals;applied;be;Assert;Doc;Description;final,8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;4.802132025361061e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5033464431762695, -5.072936534881592, -5.456261157989502, -6.522261619567871, -5.43273401260376, -0.020660080015659332]",0.9795518517494202
1,"['\t@Test\n\tpublic void testApiDoc() {\n\t\tSet<Class<?>> classes = new HashSet<Class<?>>();\n\t\tclasses.add(TestController.class);\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""test-controller"", apiDoc.getName());\n\t\tAssert.assertEquals(""a-test-controller"", apiDoc.getDescription());\n\t\tAssert.assertEquals(""1.0"", apiDoc.getSupportedversions().getSince());\n\t\tAssert.assertEquals(""2.12"", apiDoc.getSupportedversions().getUntil());\n\t\tAssert.assertEquals(ApiAuthType.NONE.name(), apiDoc.getAuth().getType());\n\t\tAssert.assertEquals(DefaultJSONDocScanner.ANONYMOUS, apiDoc.getAuth().getRoles().get(0));\n\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/name"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""200 - OK"", apiMethodDoc.getResponsestatuscode());\n\t\t\t\tfor (ApiParamDoc apiParamDoc : apiMethodDoc.getPathparameters()) {\n\t\t\t\t\tif(apiParamDoc.getName().equals(""name"")) {\n\t\t\t\t\t\tAssert.assertEquals(""string"", apiParamDoc.getJsondocType().getOneLineText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (apiMethodDoc.getPath().contains(""/age"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""204"", apiMethodDoc.getResponsestatuscode());\n\t\t\t\tAssert.assertEquals(""integer"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""integer"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tfor (ApiParamDoc apiParamDoc : apiMethodDoc.getPathparameters()) {\n\t\t\t\t\tif(apiParamDoc.getName().equals(""age"")) {\n\t\t\t\t\t\tAssert.assertEquals(""integer"", apiParamDoc.getJsondocType().getOneLineText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (apiMethodDoc.getPath().contains(""/avg"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""long"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""long"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tfor (ApiParamDoc apiParamDoc : apiMethodDoc.getPathparameters()) {\n\t\t\t\t\tif(apiParamDoc.getName().equals(""avg"")) {\n\t\t\t\t\t\tAssert.assertEquals(""long"", apiParamDoc.getJsondocType().getOneLineText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (apiMethodDoc.getPath().contains(""/map"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""map[string, integer]"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""map[string, integer]"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tfor (ApiParamDoc apiParamDoc : apiMethodDoc.getPathparameters()) {\n\t\t\t\t\tif(apiParamDoc.getName().equals(""map"")) {\n\t\t\t\t\t\tAssert.assertEquals(""map[string, integer]"", apiParamDoc.getJsondocType().getOneLineText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (apiMethodDoc.getPath().contains(""/parametrizedList"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""list of string"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""list of string"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tfor (ApiParamDoc apiParamDoc : apiMethodDoc.getPathparameters()) {\n\t\t\t\t\tif(apiParamDoc.getName().equals(""parametrizedList"")) {\n\t\t\t\t\t\tAssert.assertEquals(""list of string"", apiParamDoc.getJsondocType().getOneLineText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\tif (apiMethodDoc.getPath().contains(""/wildcardParametrizedList"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""list of wildcard"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""list of wildcard"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tfor (ApiParamDoc apiParamDoc : apiMethodDoc.getPathparameters()) {\n\t\t\t\t\tif(apiParamDoc.getName().equals(""wildcardParametrizedList"")) {\n\t\t\t\t\t\tAssert.assertEquals(""list of wildcard"", apiParamDoc.getJsondocType().getOneLineText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (apiMethodDoc.getPath().contains(""/LongArray"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""array of long"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""array of long"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tfor (ApiParamDoc apiParamDoc : apiMethodDoc.getPathparameters()) {\n\t\t\t\t\tif(apiParamDoc.getName().equals(""LongArray"")) {\n\t\t\t\t\t\tAssert.assertEquals(""array of long"", apiParamDoc.getJsondocType().getOneLineText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (apiMethodDoc.getPath().contains(""/longArray"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""array of long"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""array of long"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tfor (ApiParamDoc apiParamDoc : apiMethodDoc.getPathparameters()) {\n\t\t\t\t\tif(apiParamDoc.getName().equals(""longArray"")) {\n\t\t\t\t\t\tAssert.assertEquals(""array of long"", apiParamDoc.getJsondocType().getOneLineText());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/version"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""1.0"", apiMethodDoc.getSupportedversions().getSince());\n\t\t\t\tAssert.assertEquals(""2.12"", apiMethodDoc.getSupportedversions().getUntil());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/child"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""child"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/pizza"")) {\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t\tAssert.assertEquals(""customPizzaObject"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/multiple-request-methods"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getVerb().size());\n\t\t\t\tIterator<ApiVerb> iterator = apiMethodDoc.getVerb().iterator();\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, iterator.next());\n\t\t\t\tAssert.assertEquals(ApiVerb.POST, iterator.next());\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tclasses.clear();\n\t\tclasses.add(TestControllerWithBasicAuth.class);\n\t\tapiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""test-controller-with-basic-auth"", apiDoc.getName());\n\t\tAssert.assertEquals(ApiAuthType.BASIC_AUTH.name(), apiDoc.getAuth().getType());\n\t\tAssert.assertEquals(""ROLE_USER"", apiDoc.getAuth().getRoles().get(0));\n\t\tAssert.assertEquals(""ROLE_ADMIN"", apiDoc.getAuth().getRoles().get(1));\n\t\tAssert.assertTrue(apiDoc.getAuth().getTestusers().size() > 0);\n\t\t\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/basicAuth"")) {\n\t\t\t\tAssert.assertEquals(ApiAuthType.BASIC_AUTH.name(), apiMethodDoc.getAuth().getType());\n\t\t\t\tAssert.assertEquals(""ROLE_USER"", apiMethodDoc.getAuth().getRoles().get(0));\n\t\t\t\tAssert.assertTrue(apiMethodDoc.getAuth().getTestusers().size() > 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/noAuth"")) {\n\t\t\t\tAssert.assertEquals(ApiAuthType.NONE.name(), apiMethodDoc.getAuth().getType());\n\t\t\t\tAssert.assertEquals(DefaultJSONDocScanner.ANONYMOUS, apiMethodDoc.getAuth().getRoles().get(0));\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/undefinedAuthWithAuthOnClass"")) {\n\t\t\t\tAssert.assertEquals(ApiAuthType.BASIC_AUTH.name(), apiMethodDoc.getAuth().getType());\n\t\t\t\tAssert.assertEquals(""ROLE_USER"", apiMethodDoc.getAuth().getRoles().get(0));\n\t\t\t\tAssert.assertEquals(""ROLE_ADMIN"", apiMethodDoc.getAuth().getRoles().get(1));\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tclasses.clear();\n\t\tclasses.add(TestControllerWithNoAuthAnnotation.class);\n\t\tapiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""test-controller-with-no-auth-annotation"", apiDoc.getName());\n\t\tAssert.assertNull(apiDoc.getAuth());\n\t\t\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/basicAuth"")) {\n\t\t\t\tAssert.assertEquals(ApiAuthType.BASIC_AUTH.name(), apiMethodDoc.getAuth().getType());\n\t\t\t\tAssert.assertEquals(""ROLE_USER"", apiMethodDoc.getAuth().getRoles().get(0));\n\t\t\t\tAssert.assertTrue(apiMethodDoc.getAuth().getTestusers().size() > 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/noAuth"")) {\n\t\t\t\tAssert.assertEquals(ApiAuthType.NONE.name(), apiMethodDoc.getAuth().getType());\n\t\t\t\tAssert.assertEquals(DefaultJSONDocScanner.ANONYMOUS, apiMethodDoc.getAuth().getRoles().get(0));\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/undefinedAuthWithoutAuthOnClass"")) {\n\t\t\t\tAssert.assertNull(apiMethodDoc.getAuth());\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tclasses.clear();\n\t\tclasses.add(TestOldStyleServlets.class);\n\t\tapiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""test-old-style-servlets"", apiDoc.getName());\n\t\t\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/oldStyle"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getPathparameters().size());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/oldStyleWithList"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getPathparameters().size());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/oldStyleWithMap"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getPathparameters().size());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/oldStyleMixed"")) {\n\t\t\t\tAssert.assertEquals(3, apiMethodDoc.getPathparameters().size());\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getQueryparameters().size());\n\t\t\t\tAssert.assertEquals(""qTest"", apiMethodDoc.getQueryparameters().iterator().next().getDefaultvalue());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/oldStyleResponseObject"")) {\n\t\t\t\tAssert.assertEquals(""list"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/oldStyleBodyObject"")) {\n\t\t\t\tAssert.assertEquals(""list"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t}\n\t\t\n\t\tclasses.clear();\n\t\tclasses.add(TestErrorsAndWarningsAndHints.class);\n\t\tapiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""test-errors-warnings-hints"", apiDoc.getName());\n\t\tApiMethodDoc apiMethodDoc = apiDoc.getMethods().iterator().next();\n\t\tAssert.assertEquals(1, apiMethodDoc.getJsondocerrors().size());\n\t\tAssert.assertEquals(1, apiMethodDoc.getJsondocwarnings().size());\n\t\tAssert.assertEquals(2, apiMethodDoc.getJsondochints().size());\n\t\t\n\t\tclasses.clear();\n\t\tclasses.add(TestErrorsAndWarningsAndHintsMethodSummary.class);\n\t\tapiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.SUMMARY).iterator().next();\n\t\tapiMethodDoc = apiDoc.getMethods().iterator().next();\n\t\tAssert.assertEquals(1, apiMethodDoc.getJsondocerrors().size());\n\t\tAssert.assertEquals(1, apiMethodDoc.getJsondocwarnings().size());\n\t\tAssert.assertEquals(3, apiMethodDoc.getJsondochints().size());\n\t\t\n\t\tclasses.clear();\n\t\tclasses.add(InterfaceController.class);\n\t\tapiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""interface-controller"", apiDoc.getName());\n\t\tapiMethodDoc = apiDoc.getMethods().iterator().next();\n\t\tAssert.assertNotNull(apiMethodDoc);\n\t\tAssert.assertEquals(""/interface"", apiMethodDoc.getPath().iterator().next());\n\t\t\n\t\tclasses.clear();\n\t\tclasses.add(TestDeclaredMethods.class);\n\t\tapiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""test-declared-methods"", apiDoc.getName());\n\t\tAssert.assertEquals(2, apiDoc.getMethods().size());\n\t\t\n\t\t\n\t\tclasses.clear();\n\t\tclasses.add(TestMultipleParamsWithSameMethod.class);\n\t\tapiDoc = jsondocScanner.getApiDocs(classes, MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(3, apiDoc.getMethods().size());\n\t\t\n\t}\n']",Display;Jsondoc;iterator;Jsondoc;Scanner;pi;Doc;Bodyobject;OUS;Response,1.0477378964424133e-09;1.0186340659856796e-09;7.494236342608929e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10,5,5,"[-5.419007301330566, -5.122594833374023, -5.380283355712891, -6.440665245056152, -5.372075080871582, -0.02146723121404648]",0.9787615537643433
1,"['\t@Test\n\tpublic void testNotEqual() {\n\t\tfirst = new ApiMethodDoc();\n\t\tfirst.setPath(Sets.newHashSet(""/first""));\n\t\tfirst.setVerb(Sets.newHashSet(ApiVerb.GET));\n\t\tsecond = new ApiMethodDoc();\n\t\tsecond.setPath(Sets.newHashSet(""/second""));\n\t\tsecond.setVerb(Sets.newHashSet(ApiVerb.GET));\n\t\tAssert.assertNotEquals(0, first.compareTo(second));\n\t}\n']",Doc;Method;first;Hash;second;GET;ets;Path;new;first,1.280568540096283e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.525439739227295, -5.046908855438232, -5.454261779785156, -6.512845516204834, -5.437084197998047, -0.020741350948810577]",0.979472279548645
1,"['\t@Test\n\tpublic void testEqual() {\n\t\tfirst = new ApiMethodDoc();\n\t\tfirst.setPath(Sets.newHashSet(""/test""));\n\t\tfirst.setVerb(Sets.newHashSet(ApiVerb.GET));\n\t\tsecond = new ApiMethodDoc();\n\t\tsecond.setPath(Sets.newHashSet(""/test""));\n\t\tsecond.setVerb(Sets.newHashSet(ApiVerb.GET));\n\t\tAssert.assertEquals(0, first.compareTo(second));\n\t}\n']",Doc;Method;Hash;Equals;second;Set;second;new;set;ets,1.0477378964424133e-09;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.512871742248535, -5.093153953552246, -5.484012603759766, -6.551466941833496, -5.408005714416504, -0.020441809669137]",0.9797655940055847
1,"['\t@Test\n\tpublic void testNotEqualMultipleVerbs() {\n\t\tfirst = new ApiMethodDoc();\n\t\tfirst.setPath(Sets.newHashSet(""/first""));\n\t\tfirst.setVerb(Sets.newHashSet(ApiVerb.GET, ApiVerb.POST));\n\t\tsecond = new ApiMethodDoc();\n\t\tsecond.setPath(Sets.newHashSet(""/second""));\n\t\tsecond.setVerb(Sets.newHashSet(ApiVerb.GET, ApiVerb.POST));\n\t\tAssert.assertNotEquals(0, first.compareTo(second));\n\t\t\n\t\tsecond.setPath(Sets.newHashSet(""/first""));\n\t\tsecond.setVerb(Sets.newHashSet(ApiVerb.PUT, ApiVerb.POST));\n\t\tAssert.assertNotEquals(0, first.compareTo(second));\n\t}\n']",Equals;Multiple;Doc;POST;Ver;Doc;ets;POST;Path;Ver,8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.548361852765083e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.4626078605651855, -5.090438365936279, -5.470195293426514, -6.510443687438965, -5.4040632247924805, -0.02080930396914482]",0.9794057011604309
1,"['\t@Test\n\tpublic void testEqualMultipleVerbs() {\n\t\tfirst = new ApiMethodDoc();\n\t\tfirst.setPath(Sets.newHashSet(""/test""));\n\t\tfirst.setVerb(Sets.newHashSet(ApiVerb.GET, ApiVerb.POST));\n\t\tsecond = new ApiMethodDoc();\n\t\tsecond.setPath(Sets.newHashSet(""/test""));\n\t\tsecond.setVerb(Sets.newHashSet(ApiVerb.GET, ApiVerb.POST));\n\t\tAssert.assertEquals(0, first.compareTo(second));\n\t\t\n\t\tsecond.setVerb(Sets.newHashSet(ApiVerb.POST, ApiVerb.GET));\n\t\tAssert.assertEquals(0, first.compareTo(second));\n\t}\n']",Ap;Doc;pi;second;Hash;Ver;Multiple;Ap;second;POST,1.7462298274040222e-09;9.313225746154785e-10;6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10,5,5,"[-5.433771133422852, -5.134716510772705, -5.493901252746582, -6.537673473358154, -5.358253002166748, -0.02073761448264122]",0.9794759154319763
1,"['\t@Test\n\tpublic void testUndefinedVisibilityAndStageDoc() {\n\t\tSet<Class<?>> classes = new HashSet<Class<?>>();\n\t\tclasses.add(UndefinedVisibilityAndStage.class);\n\t\tApiObjectDoc apiObjectDoc = jsondocScanner.getApiObjectDocs(classes).iterator().next();\n\t\tAssert.assertEquals(""undefinedvisibilityandstage"", apiObjectDoc.getName());\n\t\tAssert.assertEquals(ApiVisibility.UNDEFINED, apiObjectDoc.getVisibility());\n\t\tAssert.assertEquals(ApiStage.UNDEFINED, apiObjectDoc.getStage());\n\t}\n']",undefinedvisibilityandstage;Undefined;Doc;Stage;Equals;Stage;Undefined;Stage;new;Doc,1.4260876923799515e-09;9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.522741794586182, -5.032381057739258, -5.384096622467041, -6.455962181091309, -5.438863754272461, -0.02124680206179619]",0.9789773225784302
1,"['\t@Test\n\tpublic void testTemplateApiObjectDoc() {\n\t\tSet<Class<?>> classes = new HashSet<Class<?>>();\n\t\tclasses.add(TemplateApiObject.class);\n\t\tApiObjectDoc apiObjectDoc = jsondocScanner.getApiObjectDocs(classes).iterator().next();\n\t\tAssert.assertEquals(""templateapiobject"", apiObjectDoc.getName());\n\t\tIterator<ApiObjectFieldDoc> iterator = apiObjectDoc.getFields().iterator();\n\t\tAssert.assertEquals(""id"", iterator.next().getName());\n\t\tAssert.assertEquals(""name"", iterator.next().getName());\n\t}\n']",Set;Set;new;Name;next;Scanner;add;Doc;pi;Object,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.530618190765381, -5.027646541595459, -5.39270544052124, -6.46872615814209, -5.440847396850586, -0.021177127957344055]",0.9790455102920532
1,"['\t@Test\n\tpublic void testNoNameApiObjectDoc() {\n\t\tSet<Class<?>> classes = new HashSet<Class<?>>();\n\t\tclasses.add(NoNameApiObject.class);\n\t\tApiObjectDoc apiObjectDoc = jsondocScanner.getApiObjectDocs(classes).iterator().next();\n\t\tAssert.assertEquals(""nonameapiobject"", apiObjectDoc.getName());\n\t\tAssert.assertEquals(""id"", apiObjectDoc.getFields().iterator().next().getName());\n\t\tAssert.assertEquals(1, apiObjectDoc.getJsondochints().size());\n\t}\n']",Scanner;Doc;jsondoc;Jsondochints;pi;iterator;api;size;Class;add,1.673470251262188e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.4551915228366852e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.558536529541016, -5.028984546661377, -5.43444299697876, -6.513057708740234, -5.46305513381958, -0.020700950175523758]",0.9795119762420654
1,"['\t@Test\n\tpublic void testEnumObjectDoc() {\n\t\tSet<Class<?>> classes = new HashSet<Class<?>>();\n\t\tclasses.add(TestEnum.class);\n\t\tApiObjectDoc childDoc = jsondocScanner.getApiObjectDocs(classes).iterator().next(); \n\t\tAssert.assertEquals(""test-enum"", childDoc.getName());\n\t\tAssert.assertEquals(0, childDoc.getFields().size());\n\t\tAssert.assertEquals(TestEnum.TESTENUM1.name(), childDoc.getAllowedvalues()[0]);\n\t\tAssert.assertEquals(TestEnum.TESTENUM2.name(), childDoc.getAllowedvalues()[1]);\n\t\tAssert.assertEquals(TestEnum.TESTENUM3.name(), childDoc.getAllowedvalues()[2]);\n\t}\n']",Enum;Object;Doc;Enum;Doc;Doc;Equals;name;Doc;Enum,1.3387762010097504e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.545738697052002, -5.032601356506348, -5.437854290008545, -6.516502857208252, -5.44716215133667, -0.020776495337486267]",0.9794379472732544
1,"['\t@Test\n\tpublic void testApiObjectDoc() {\n\t\tSet<Class<?>> classes = new HashSet<Class<?>>();\n\t\tclasses.add(TestObject.class);\n\t\tApiObjectDoc childDoc = jsondocScanner.getApiObjectDocs(classes).iterator().next(); \n\t\tAssert.assertEquals(""test-object"", childDoc.getName());\n\t\tAssert.assertEquals(14, childDoc.getFields().size());\n\t\tAssert.assertEquals(""1.0"", childDoc.getSupportedversions().getSince());\n\t\tAssert.assertEquals(""2.12"", childDoc.getSupportedversions().getUntil());\n\t\tAssert.assertEquals(ApiVisibility.PUBLIC, childDoc.getVisibility());\n\t\tAssert.assertEquals(ApiStage.PRE_ALPHA, childDoc.getStage());\n\t\t\n\t\tfor (ApiObjectFieldDoc fieldDoc : childDoc.getFields()) {\n\t\t\tif(fieldDoc.getName().equals(""wildcardParametrized"")) {\n\t\t\t\tAssert.assertEquals(""list"", fieldDoc.getJsondocType().getType().get(0));\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""unparametrizedList"")) {\n\t\t\t\tAssert.assertEquals(""list"", fieldDoc.getJsondocType().getType().get(0));\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""parametrizedList"")) {\n\t\t\t\tAssert.assertEquals(""list of string"", fieldDoc.getJsondocType().getOneLineText());\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""name"")) {\n\t\t\t\tAssert.assertEquals(""string"", fieldDoc.getJsondocType().getType().get(0));\n\t\t\t\tAssert.assertEquals(""name"", fieldDoc.getName());\n\t\t\t\tAssert.assertEquals(""true"", fieldDoc.getRequired());\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""age"")) {\n\t\t\t\tAssert.assertEquals(""integer"", fieldDoc.getJsondocType().getType().get(0));\n\t\t\t\tAssert.assertEquals(""age"", fieldDoc.getName());\n\t\t\t\tAssert.assertEquals(""false"", fieldDoc.getRequired());\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""avg"")) {\n\t\t\t\tAssert.assertEquals(""long"", fieldDoc.getJsondocType().getType().get(0));\n\t\t\t\tAssert.assertEquals(""avg"", fieldDoc.getName());\n\t\t\t\tAssert.assertEquals(""false"", fieldDoc.getRequired());\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""map"")) {\n\t\t\t\tAssert.assertEquals(""map"", fieldDoc.getJsondocType().getType().get(0));\n\t\t\t\tAssert.assertEquals(""string"", fieldDoc.getJsondocType().getMapKey().getType().get(0));\n\t\t\t\tAssert.assertEquals(""integer"", fieldDoc.getJsondocType().getMapValue().getType().get(0));\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""LongArray"")) {\n\t\t\t\tAssert.assertEquals(""array of long"", fieldDoc.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""LongArray"", fieldDoc.getName());\n\t\t\t\tAssert.assertEquals(""false"", fieldDoc.getRequired());\n\t\t\t}\n\n\t\t\tif(fieldDoc.getName().equals(""longArray"")) {\n\t\t\t\tAssert.assertEquals(""array of long"", fieldDoc.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""longArray"", fieldDoc.getName());\n\t\t\t\tAssert.assertEquals(""false"", fieldDoc.getRequired());\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""fooBar"")) {\n\t\t\t\tAssert.assertEquals(""string"", fieldDoc.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""foo_bar"", fieldDoc.getName());\n\t\t\t\tAssert.assertEquals(""false"", fieldDoc.getRequired());\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""version"")) {\n\t\t\t\tAssert.assertEquals(""string"", fieldDoc.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""1.0"", fieldDoc.getSupportedversions().getSince());\n\t\t\t\tAssert.assertEquals(""2.12"", fieldDoc.getSupportedversions().getUntil());\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""test-enum"")) {\n\t\t\t\tAssert.assertEquals(""test-enum"", fieldDoc.getName());\n\t\t\t\tAssert.assertEquals(TestEnum.TESTENUM1.name(), fieldDoc.getAllowedvalues()[0]);\n\t\t\t\tAssert.assertEquals(TestEnum.TESTENUM2.name(), fieldDoc.getAllowedvalues()[1]);\n\t\t\t\tAssert.assertEquals(TestEnum.TESTENUM3.name(), fieldDoc.getAllowedvalues()[2]);\n\t\t\t}\n\t\t\t\n\t\t\tif(fieldDoc.getName().equals(""test-enum-with-allowed-values"")) {\n\t\t\t\tAssert.assertEquals(""A"", fieldDoc.getAllowedvalues()[0]);\n\t\t\t\tAssert.assertEquals(""B"", fieldDoc.getAllowedvalues()[1]);\n\t\t\t\tAssert.assertEquals(""C"", fieldDoc.getAllowedvalues()[2]);\n\t\t\t}\n\n\t\t\tif(fieldDoc.getName().equals(""orderedProperty"")) {\n\t\t\t\tAssert.assertEquals(""orderedProperty"", fieldDoc.getName());\n\t\t\t\tAssert.assertEquals(1, fieldDoc.getOrder().intValue());\n\t\t\t} else {\n\t\t\t\tAssert.assertEquals(Integer.MAX_VALUE, fieldDoc.getOrder().intValue());\n\t\t\t}\n\n\t\t}\n\t}\n']",Object;classes;Until;jsondoc;Equals;One;Doc;Visibility;Supportedversions;true,2.7939677238464355e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.2223608791828156e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.693881005048752e-10;5.238689482212067e-10,5,5,"[-5.46017599105835, -5.077481269836426, -5.387446880340576, -6.450955867767334, -5.3960723876953125, -0.02140282280743122]",0.9788246154785156
1,"['\t@Test\n\tpublic void testApiHeadersOnClass() {\n\t\tfinal ApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>>newHashSet(ApiHeadersController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""ApiHeadersController"", apiDoc.getName());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif(apiMethodDoc.getPath().contains(""/api-headers-controller-method-one"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getHeaders().size());\n\t\t\t}\n\t\t\tif(apiMethodDoc.getPath().contains(""/api-headers-controller-method-two"")) {\n\t\t\t\tAssert.assertEquals(3, apiMethodDoc.getHeaders().size());\n\t\t\t}\n\t\t}\n\t}\n']",Scanner;controller;URI;headers;pi;contains;api;iterator;Doc;Set,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.539135932922363, -5.07470178604126, -5.432350158691406, -6.493934631347656, -5.4126996994018555, -0.02074146643280983]",0.9794721603393555
1,"['\t@Test\n\tpublic void testApiDoc() {\n\t\tSet<Class<?>> classes = new HashSet<Class<?>>();\n\t\tclasses.add(TestFlow.class);\n\t\t\n\t\tList<ApiMethodDoc> apiMethodDocs = new ArrayList<ApiMethodDoc>();\n\t\tApiMethodDoc apiMethodDoc = new ApiMethodDoc();\n\t\tapiMethodDoc.setId(""F1"");\n\t\tapiMethodDocs.add(apiMethodDoc);\n\t\t\n\t\tSet<ApiFlowDoc> apiFlowDocs = jsondocScanner.getApiFlowDocs(classes, apiMethodDocs);\n\t\tfor (ApiFlowDoc apiFlowDoc : apiFlowDocs) {\n\t\t\tif(apiFlowDoc.getName().equals(""flow"")) {\n\t\t\t\tAssert.assertEquals(""A test flow"", apiFlowDoc.getDescription());\n\t\t\t\tAssert.assertEquals(3, apiFlowDoc.getSteps().size());\n\t\t\t\tAssert.assertEquals(""F1"", apiFlowDoc.getSteps().get(0).getApimethodid());\n\t\t\t\tAssert.assertEquals(""F2"", apiFlowDoc.getSteps().get(1).getApimethodid());\n\t\t\t\tAssert.assertEquals(""Flows A"", apiFlowDoc.getGroup());\n\t\t\t\tAssert.assertNotNull(apiFlowDoc.getSteps().get(0).getApimethoddoc());\n\t\t\t\tAssert.assertEquals(""F1"", apiFlowDoc.getSteps().get(0).getApimethoddoc().getId());\n\t\t\t}\n\t\t\t\n\t\t\tif(apiFlowDoc.getName().equals(""flow2"")) {\n\t\t\t\tAssert.assertEquals(""A test flow 2"", apiFlowDoc.getDescription());\n\t\t\t\tAssert.assertEquals(3, apiFlowDoc.getSteps().size());\n\t\t\t\tAssert.assertEquals(""F4"", apiFlowDoc.getSteps().get(0).getApimethodid());\n\t\t\t\tAssert.assertEquals(""F5"", apiFlowDoc.getSteps().get(1).getApimethodid());\n\t\t\t\tAssert.assertEquals(""Flows B"", apiFlowDoc.getGroup());\n\t\t\t}\n\t\t}\n\t}\n']",jsondoc;Apimethoddoc;Doc;Apimethodid;size;Step;Apimethodid;pi;Array;Flow,1.0186340659856796e-09;8.731149137020111e-10;6.402842700481415e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.1827872842550278e-10,5,5,"[-5.483384609222412, -5.074023723602295, -5.381803035736084, -6.444395065307617, -5.42077112197876, -0.021249135956168175]",0.9789749383926392
1,"['\t@Test\n\tpublic void testApiObjectDocWithHibernateValidator() {\n\t\tSet<ApiObjectDoc> apiObjectDocs = jsondocScanner.getApiObjectDocs(Sets.<Class<?>>newHashSet(HibernateValidatorPojo.class));\n\t\tIterator<ApiObjectDoc> iterator = apiObjectDocs.iterator();\n\t\tApiObjectDoc next = iterator.next();\n\t\tSet<ApiObjectFieldDoc> fields = next.getFields();\n\t\tfor (ApiObjectFieldDoc apiObjectFieldDoc : fields) {\n\t\t\tif(apiObjectFieldDoc.getName().equals(""id"")) {\n\t\t\t\tIterator<String> formats = apiObjectFieldDoc.getFormat().iterator();\n\t\t\t\tAssert.assertEquals(""a not empty id"", formats.next());\n\t\t\t\tAssert.assertEquals(""length must be between 2 and 2147483647"", formats.next());\n\t\t\t\tAssert.assertEquals(""must be less than or equal to 9"", formats.next());\n\t\t\t}\n\t\t}\n\t}\n']",Scanner;Field;Set;Hash;fields;iterator;Name;Class;new;id,2.2118911147117615e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5202860832214355, -5.039358139038086, -5.397411823272705, -6.463334560394287, -5.4582014083862305, -0.021051771938800812]",0.9791682958602905
1,"['\t@Test\n\tpublic void testApiGlobalDoc() {\n\t\tApiGlobalDoc apiGlobalDoc = jsondocScanner.getApiGlobalDoc(Sets.<Class<?>>newHashSet(Global.class), Sets.<Class<?>>newHashSet(), Sets.<Class<?>>newHashSet());\n\t\tAssert.assertNotNull(apiGlobalDoc);\n\t\tAssert.assertEquals(1, apiGlobalDoc.getSections().size());\n\t\tApiGlobalSectionDoc sectionDoc = apiGlobalDoc.getSections().iterator().next();\n\t\tAssert.assertEquals(""title"", sectionDoc.getTitle());\n\t\tAssert.assertEquals(3, sectionDoc.getParagraphs().size());\n\t\t\n\t\tapiGlobalDoc = jsondocScanner.getApiGlobalDoc(Sets.<Class<?>>newHashSet(), Sets.<Class<?>>newHashSet(Changelog.class), Sets.<Class<?>>newHashSet());\n\t\tAssert.assertNotNull(apiGlobalDoc);\n\t\tAssert.assertEquals(1, apiGlobalDoc.getChangelogset().getChangelogs().size());\n\n\t\tapiGlobalDoc = jsondocScanner.getApiGlobalDoc(Sets.<Class<?>>newHashSet(MultipleGlobalSections.class), Sets.<Class<?>>newHashSet(), Sets.<Class<?>>newHashSet());\n\t\tAssert.assertNotNull(apiGlobalDoc);\n\t\tAssert.assertEquals(3, apiGlobalDoc.getSections().size());\n\t\t\n\t\tApiGlobalSectionDoc[] apiGlobalSectionDocs = apiGlobalDoc.getSections().toArray(new ApiGlobalSectionDoc[apiGlobalDoc.getSections().size()]);\n\t\tAssert.assertEquals(""section1"", apiGlobalSectionDocs[0].getTitle());\n\t\tAssert.assertEquals(""abc"", apiGlobalSectionDocs[1].getTitle());\n\t\tAssert.assertEquals(""198xyz"", apiGlobalSectionDocs[2].getTitle());\n\t\t\n\t\tapiGlobalDoc = jsondocScanner.getApiGlobalDoc(Sets.<Class<?>>newHashSet(), Sets.<Class<?>>newHashSet(), Sets.<Class<?>>newHashSet(Migration.class));\n\t\tAssert.assertNotNull(apiGlobalDoc);\n\t\tAssert.assertEquals(1, apiGlobalDoc.getMigrationset().getMigrations().size());\n\t\t\n\t\tapiGlobalDoc = jsondocScanner.getApiGlobalDoc(Sets.<Class<?>>newHashSet(AllTogether.class), Sets.<Class<?>>newHashSet(AllTogether.class), Sets.<Class<?>>newHashSet(AllTogether.class));\n\t\tAssert.assertNotNull(apiGlobalDoc);\n\t\tAssert.assertEquals(1, apiGlobalDoc.getSections().size());\n\t\tAssert.assertEquals(1, apiGlobalDoc.getMigrationset().getMigrations().size());\n\t\tAssert.assertEquals(1, apiGlobalDoc.getChangelogset().getChangelogs().size());\n\t}\n']",Changelogset;Paragraph;Changelogs;Scanner;Section;Scanner;Doc;Null;ets;jsondoc,7.2177499532699585e-09;3.3760443329811096e-09;2.6775524020195007e-09;1.2223608791828156e-09;1.076841726899147e-09;9.89530235528946e-10;8.731149137020111e-10;8.149072527885437e-10;6.83940015733242e-10;6.402842700481415e-10,5,5,"[-5.443551540374756, -5.084526062011719, -5.361994743347168, -6.417037010192871, -5.393887042999268, -0.02161714993417263]",0.9786148071289062
1,"['\t@Test\n\tpublic void testApiVisibility() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(Controller.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(ApiVisibility.PUBLIC, apiDoc.getVisibility());\n\t\tAssert.assertEquals(ApiStage.BETA, apiDoc.getStage());\n\t\t\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif(apiMethodDoc.getPath().contains(""/inherit"")) {\n\t\t\t\tAssert.assertEquals(ApiVisibility.PUBLIC, apiMethodDoc.getVisibility());\n\t\t\t\tAssert.assertEquals(ApiStage.BETA, apiMethodDoc.getStage());\n\t\t\t}\n\t\t\tif(apiMethodDoc.getPath().contains(""/override"")) {\n\t\t\t\tAssert.assertEquals(ApiVisibility.PRIVATE, apiMethodDoc.getVisibility());\n\t\t\t\tAssert.assertEquals(ApiStage.GA, apiMethodDoc.getStage());\n\t\t\t}\n\t\t}\n\t\t\n\t\tapiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(Controller2.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(ApiVisibility.UNDEFINED, apiDoc.getVisibility());\n\t\tAssert.assertEquals(ApiStage.UNDEFINED, apiDoc.getStage());\n\t\t\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif(apiMethodDoc.getPath().contains(""/only-method"")) {\n\t\t\t\tAssert.assertEquals(ApiVisibility.PRIVATE, apiMethodDoc.getVisibility());\n\t\t\t\tAssert.assertEquals(ApiStage.DEPRECATED, apiMethodDoc.getStage());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n']",Hash;PUBLIC;inherit;Controller;Visibility;PRIVATE;Doc;Display;Equals;jsondoc,6.548361852765083e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.220055416226387e-10;4.0745362639427185e-10;4.001776687800884e-10;3.7834979593753815e-10,5,5,"[-5.482321262359619, -5.116878509521484, -5.438709735870361, -6.474275588989258, -5.402394771575928, -0.020761899650096893]",0.9794521331787109
1,"['\t@Test\n\tpublic void testPathWithMethodDisplayURI() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(Controller.class), MethodDisplay.URI).iterator().next();\n\n\t\tboolean allRight = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\treturn \n\t\t\t\t\t\tinput.getPath().contains(""/path1"") && \n\t\t\t\t\t\tinput.getPath().contains(""/path2"") && \n\t\t\t\t\t\tinput.getDisplayedMethodString().contains(""/path1"") &&\n\t\t\t\t\t\tinput.getDisplayedMethodString().contains(""/path2"");\n\t\t\t}\n']",Match;pi;all;next;Displayed;input;Path;input;Method;contains,1.3387762010097504e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.507052421569824, -5.014987468719482, -5.429851055145264, -6.515872478485107, -5.457319736480713, -0.021044068038463593]",0.9791756868362427
1,"['\t@Test\n\tpublic void testPathWithMethodDisplayMethod() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(Controller.class), MethodDisplay.METHOD).iterator().next();\n\t\t\n\t\tboolean allRight = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\treturn \n\t\t\t\t\t\tinput.getPath().contains(""/path1"") && \n\t\t\t\t\t\tinput.getPath().contains(""/path2"") && \n\t\t\t\t\t\tinput.getDisplayedMethodString().contains(""path"") &&\n\t\t\t\t\t\t!input.getDisplayedMethodString().contains(""/path1"");\n\t\t\t}\n']",jsondoc;get;pi;contains;Doc;contains;Displayed;api;input;Doc,2.852175384759903e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.51673698425293, -5.001892566680908, -5.426117420196533, -6.502630710601807, -5.4617509841918945, -0.02111118473112583]",0.9791101217269897
1,"['\t@Test\n\tpublic void testReflex() throws NoSuchMethodException, SecurityException, ClassNotFoundException, JsonGenerationException, JsonMappingException, IOException {\n\t\tmapper.setSerializationInclusion(Include.NON_NULL);\n\t\tJSONDocType jsonDocType = new JSONDocType();\n\t\t\n\t\tMethod method = JSONDocTypeBuilderTest.class.getMethod(""getString"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""string"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""integer"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getInt"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""int"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getLong"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""long"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getlong"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""long"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getListString"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""list of string"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getListSetString"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""list of set of string"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getStringArray"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""array of string"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getIntegerArray"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""array of integer"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getListOfStringArray"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""array of list of string"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getSetOfStringArray"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""array of set of string"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getList"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""list"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getListOfWildcard"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""list of wildcard"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getListOfWildcardArray"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""array of list of wildcard"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getListArray"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""array of list"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getSetArray"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""array of set"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMap"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getHashMap"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""hashmap"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapStringInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[string, integer]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapListOfStringInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[list of string, integer]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapStringSetOfInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[string, set of integer]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapListOfStringSetOfInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[list of string, set of integer]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapListOfSetOfStringSetOfInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[list of set of string, set of integer]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapWildcardInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[wildcard, integer]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapWildcardWildcard"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[wildcard, wildcard]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapListOfWildcardWildcard"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[list of wildcard, wildcard]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapMapInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[map, integer]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getMapMapStringLongInteger"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""map[map[string, long], integer]"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getResponseEntityString"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""responseentity of string"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getResponseEntityListOfString"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""responseentity of list of string"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getParentPojoList"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""list of my_parent"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\n\t\t\n\t\tjsonDocType = new JSONDocType();\n\t\tmethod = JSONDocTypeBuilderTest.class.getMethod(""getSpecializedWGenericsPojo"");\n\t\tJSONDocTypeBuilder.build(jsonDocType, method.getReturnType(), method.getGenericReturnType());\n\t\tSystem.out.println(mapper.writeValueAsString(jsonDocType));\n\t\tSystem.out.println(jsonDocType.getOneLineText());\n\t\tAssert.assertEquals(""fooPojo of T"", jsonDocType.getOneLineText());\n\t\tSystem.out.println(""---------------------------"");\t\t\n\t}\n']",Type;JSONDoc;get;Builder;Method;Return;Long;Serialization;Type;JSONDoc,9.313225746154785e-09;4.190951585769653e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.444721758365631e-09;2.3283064365386963e-09;1.979060471057892e-09,5,5,"[-5.410904407501221, -5.094656944274902, -5.429126739501953, -6.456640720367432, -5.388994216918945, -0.021346813067793846]",0.9788793921470642
1,"['\t@Test\n\tpublic void testTemplate() throws IOException, IllegalArgumentException, IllegalAccessException, InstantiationException {\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tSet<Class<?>> classes = Sets.<Class<?>>newHashSet(MyEnum.class);\n\t\t\n\t\tMap<String, Object> template = JSONDocTemplateBuilder.build(MyEnum.class, classes);\n\t\tSystem.out.println(mapper.writeValueAsString(template));\n\t}\n']",Template;template;Hash;Object;write;JSONDoc;Illegal;As;apper;Exception,1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.576518535614014, -4.936197280883789, -5.435220718383789, -6.51568078994751, -5.518672943115234, -0.021038932725787163]",0.9791809320449829
1,"['\t@Test\n\tpublic void thatTemplateIsMappedToStringCorrectly() throws Exception {\n\t\tfinal ObjectMapper mapper = new ObjectMapper();\n\t\tSet<Class<?>> classes = Sets.<Class<?>>newHashSet(Unordered.class, Ordered.class);\n\n\t\tMap<String, Object> unorderedTemplate = JSONDocTemplateBuilder.build(Unordered.class, classes);\n\t\tAssert.assertEquals(""{\\""aField\\"":\\""\\"",\\""xField\\"":\\""\\""}"", mapper.writeValueAsString(unorderedTemplate));\n\n\t\tMap<String, Object> orderedTemplate = JSONDocTemplateBuilder.build(Ordered.class, classes);\n\t\tAssert.assertEquals(""{\\""xField\\"":\\""\\"",\\""aField\\"":\\""\\"",\\""bField\\"":\\""\\""}"", mapper.writeValueAsString(orderedTemplate));\n\t}\n']",Template;JSONDoc;apped;Template;that;classes;Template;Set;ordered;apper,1.7462298274040222e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.5362701416015625, -4.979029655456543, -5.4173479080200195, -6.4405598640441895, -5.51101541519165, -0.021119821816682816]",0.9791016578674316
1,"['    @Test\n    public void getJSONDoc() throws IOException {\n    \tJSONDocScanner jsondocScanner = new DefaultJSONDocScanner();\n        JSONDoc jsondoc = jsondocScanner.getJSONDoc(version, basePath, Lists.newArrayList(""org.jsondoc.core.util""), true, MethodDisplay.URI);\n        assertEquals(1, jsondoc.getApis().size());\n\n        int countApis = 0;\n        for (String string : jsondoc.getApis().keySet()) {\n            countApis += jsondoc.getApis().get(string).size();\n        }\n        assertEquals(4, countApis);\n\n        assertEquals(3, jsondoc.getObjects().size());\n        \n        int countFlows = 0;\n        for (String string : jsondoc.getFlows().keySet()) {\n        \tcountFlows += jsondoc.getFlows().get(string).size();\n        }\n        assertEquals(2, countFlows);\n\n        int countObjects = 0;\n        for (String string : jsondoc.getObjects().keySet()) {\n            countObjects += jsondoc.getObjects().get(string).size();\n        }\n        assertEquals(10, countObjects);\n\n        Set<ApiVerb> apiVerbs = getAllTestedApiVerbs(jsondoc);\n        assertEquals(ApiVerb.values().length, apiVerbs.size());\n\n        log.debug(objectMapper.writeValueAsString(jsondoc));\n    }\n']",IOException;new;Object;version;get;ested;log;org;Verbs;JSONDoc,1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.966285243630409e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.4052557945251465, -5.114226818084717, -5.3943986892700195, -6.438419818878174, -5.400951862335205, -0.021383803337812424]",0.9788433313369751
1,"['\t@Test\n\tpublic void testTemplate() throws JsonGenerationException, JsonMappingException, IOException, IllegalArgumentException, IllegalAccessException, InstantiationException {\n\t\tSet<Class<?>> classes = Sets.<Class<?>>newHashSet(StackOverflowTemplateSelf.class, StackOverflowTemplateObjectOne.class, StackOverflowTemplateObjectTwo.class);\n\t\t\n\t\tStackOverflowTemplateSelf objectSelf = new StackOverflowTemplateSelf();\n\t\tMap<String, Object> template = JSONDocTemplateBuilder.build(objectSelf.getClass(), classes);\n\t\tSystem.out.println(mapper.writeValueAsString(template));\n\t\t\n\t\tStackOverflowTemplateObjectOne objectOne = new StackOverflowTemplateObjectOne();\n\t\ttemplate = JSONDocTemplateBuilder.build(objectOne.getClass(), classes);\n\t\tSystem.out.println(mapper.writeValueAsString(template));\n\t\t\n\t\tStackOverflowTemplateObjectTwo objectTwo = new StackOverflowTemplateObjectTwo();\n\t\ttemplate = JSONDocTemplateBuilder.build(objectTwo.getClass(), classes);\n\t\tSystem.out.println(mapper.writeValueAsString(template));\n\t}\n']",Template;classes;Exception;Template;Template;Map;Template;Illegal;apper;build,3.4924596548080444e-09;8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.528517246246338, -4.987682819366455, -5.443605422973633, -6.504683971405029, -5.48602819442749, -0.020976364612579346]",0.9792420864105225
1,"['\t@Test\n\tpublic void typeOneTwo() throws JsonGenerationException, JsonMappingException, IOException {\n\t\tSet<Class<?>> classes = Sets.<Class<?>>newHashSet(NotAnnotatedStackOverflowObjectOne.class, NotAnnotatedStackOverflowObjectTwo.class);\n\t\t\n\t\tNotAnnotatedStackOverflowObjectOne typeOne = new NotAnnotatedStackOverflowObjectOne();\n\t\tMap<String, Object> template = JSONDocTemplateBuilder.build(typeOne.getClass(), classes);\n\t\tSystem.out.println(mapper.writeValueAsString(template));\n\t}\n']",type;Template;Class;Not;One;template;Not;Two;son;Exception,8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.569515228271484, -4.956707954406738, -5.4112935066223145, -6.491987705230713, -5.492297172546387, -0.021170709282159805]",0.9790518283843994
1,"['\t@Test\n\tpublic void testTemplate() throws IOException, IllegalArgumentException, IllegalAccessException, InstantiationException {\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tSet<Class<?>> classes = Sets.<Class<?>>newHashSet(TemplateObject.class);\n\t\t\n\t\tMap<String, Object> template = JSONDocTemplateBuilder.build(TemplateObject.class, classes);\n\n\t\tAssert.assertEquals(0, template.get(""my_id""));\n\t\tAssert.assertEquals(0, template.get(""idint""));\n\t\tAssert.assertEquals(0, template.get(""idlong""));\n\t\tAssert.assertEquals("""", template.get(""name""));\n\t\tAssert.assertEquals("""", template.get(""gender""));\n\t\tAssert.assertEquals(true, template.get(""bool""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""intarrarr""));\n\t\tAssert.assertEquals(new JSONDocTemplate(), template.get(""sub_obj""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""untypedlist""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""subsubobjarr""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""stringlist""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""stringarrarr""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""integerarr""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""stringarr""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""intarr""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""subobjlist""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""wildcardlist""));\n\t\tAssert.assertEquals(new ArrayList(), template.get(""longlist""));\n\t\tAssert.assertEquals("""", template.get(""namechar""));\n\t\tAssert.assertEquals(new HashMap(), template.get(""map""));\n\t\tAssert.assertEquals(new HashMap(), template.get(""mapstringinteger""));\n\t\tAssert.assertEquals(new HashMap(), template.get(""mapsubobjinteger""));\n\t\tAssert.assertEquals(new HashMap(), template.get(""mapintegersubobj""));\n\t\tAssert.assertEquals(new HashMap(), template.get(""mapintegerlistsubsubobj""));\n\t\t\n\t\tSystem.out.println(mapper.writeValueAsString(template));\n\t}\n']",Instantiation;Template;gender;untypedlist;Template;JSONDoc;Builder;namechar;Assert;integerarr,1.57160684466362e-09;1.3969838619232178e-09;1.3969838619232178e-09;8.440110832452774e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.093170329928398e-10;4.94765117764473e-10,5,5,"[-5.430235385894775, -5.050593376159668, -5.429270267486572, -6.4478678703308105, -5.439179420471191, -0.021326623857021332]",0.9788991808891296
1,"['\t@Test\n\tpublic void testTemplateWithConstant() throws Exception {\n        final ObjectMapper mapper = new ObjectMapper();\n        final Set<Class<?>> classes = Sets.<Class<?>>newHashSet(ClassWithConstant.class);\n\n        final Map<String, Object> template = JSONDocTemplateBuilder.build(ClassWithConstant.class, classes);\n        Assert.assertEquals("""", template.get(""identifier""));\n        Assert.assertEquals(null, template.get(THIS_IS_A_CONSTANT));\n\n        final String serializedTemplate =\n            ""{"" +\n                ""\\""identifier\\"":\\""\\"""" +\n            ""}"";\n\n        assertThat(mapper.writeValueAsString(template), is(serializedTemplate));\n\t}\n']",classes;Constant;Set;new;serialized;template;Template;That;Object;template,5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.2928149923682213e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.523205280303955, -4.956040859222412, -5.439844608306885, -6.482926845550537, -5.499806880950928, -0.021214241161942482]",0.979009211063385
1,"['\t@Test\n\tpublic void testTemplate() throws IOException, IllegalArgumentException, IllegalAccessException, InstantiationException {\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tSet<Class<?>> classes = Sets.<Class<?>>newHashSet(NoAnnotationPojo.class);\n\t\t\n\t\tMap<String, Object> template = JSONDocTemplateBuilder.build(NoAnnotationPojo.class, classes);\n\t\tSystem.out.println(mapper.writeValueAsString(template));\n\t}\n']",Argument;Builder;Pojo;Template;classes;Set;new;Object;Illegal;Annotation,6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.575284481048584, -4.931034564971924, -5.425283908843994, -6.512875080108643, -5.5106201171875, -0.021163472905755043]",0.9790589213371277
1,"['\t@Test\n\tpublic void testInvisible() {\n\t\tJSONDoc jsonDoc = jsondocScanner.getJSONDoc(""version"", ""basePath"", Lists.newArrayList(""org.jsondoc.springmvc.issues.invisible""), true, MethodDisplay.URI);\n\t\tAssert.assertEquals(1, jsonDoc.getObjects().keySet().size());\n\t\tfor (String string : jsonDoc.getObjects().keySet()) {\n\t\t\tAssert.assertEquals(2, jsonDoc.getObjects().get(string).size());\n\t\t}\n\t\tfor (ApiDoc apiDoc : jsonDoc.getApis().get("""")) {\n\t\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\t\tAssert.assertEquals(""Resource Interface"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n']",Jsondoc;JSONDoc;URI;api;Scanner;Resource;Interface;Array;string;vc,9.022187441587448e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.526541709899902, -5.059682369232178, -5.422691345214844, -6.492184162139893, -5.437130928039551, -0.020825065672397614]",0.9793902635574341
1,"['\t@Test\n\tpublic void testIssue151() {\n\t\tJSONDoc jsonDoc = jsondocScanner.getJSONDoc(""version"", ""basePath"", Lists.newArrayList(""org.jsondoc.springmvc.issues.issue151""), true, MethodDisplay.URI);\n\t\tAssert.assertEquals(2, jsonDoc.getObjects().keySet().size());\n\t\tAssert.assertEquals(1, jsonDoc.getObjects().get(""bargroup"").size());\n\t\tAssert.assertEquals(1, jsonDoc.getObjects().get(""foogroup"").size());\n\t}\n']",vc;JSONDoc;Doc;Method;JSONDoc;jsondoc;base;Lists;Equals;Doc,2.3283064365386963e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10,5,5,"[-5.544716835021973, -5.019299507141113, -5.419338226318359, -6.495412826538086, -5.4543585777282715, -0.02095325104892254]",0.9792647361755371
1,"['\t@Test\n\tpublic void testApiVerb() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\t\tAssert.assertEquals(2, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/status-one"")) {\n\t\t\t\tAssert.assertEquals(""201 - Created"", apiMethodDoc.getResponsestatuscode());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/status-two"")) {\n\t\t\t\tAssert.assertEquals(""200 - OK"", apiMethodDoc.getResponsestatuscode());\n\t\t\t}\n\t\t}\n\t}\n']",jsondoc;Scanner;Responsestatuscode;OK;Method;two;Name;status;Doc;pi,2.2992026060819626e-09;6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.525703430175781, -5.075870037078857, -5.453189849853516, -6.505429267883301, -5.418134689331055, -0.020653890445828438]",0.9795579314231873
1,"['\t@Test\n\tpublic void testMergeApiDoc() {\n\t\tSet<Class<?>> controllers = new LinkedHashSet<Class<?>>();\n\t\tcontrollers.add(SpringController.class);\n\t\tSet<ApiDoc> apiDocs = jsondocScanner.getApiDocs(controllers, MethodDisplay.URI);\n\n\t\tApiDoc apiDoc = apiDocs.iterator().next();\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getDescription());\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\t\tAssert.assertNotNull(apiDoc.getGroup());\n\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tAssert.assertEquals(MethodDisplay.URI, apiMethodDoc.getDisplayMethodAs());\n\t\t\tAssert.assertNull(apiMethodDoc.getAuth());\n\t\t\tAssert.assertNull(apiMethodDoc.getSupportedversions());\n\t\t\tAssert.assertTrue(apiMethodDoc.getApierrors().isEmpty());\n\t\t\tAssert.assertNull(apiMethodDoc.getId());\n\t\t\tAssert.assertEquals("""", apiMethodDoc.getSummary());\n\t\t\tAssert.assertEquals("""", apiMethodDoc.getDescription());\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/api/string/{name}"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getHeaders().size());\n\t\t\t\tSet<ApiHeaderDoc> headers = apiMethodDoc.getHeaders();\n\t\t\t\tIterator<ApiHeaderDoc> headersIterator = headers.iterator();\n\t\t\t\tApiHeaderDoc headerTest = headersIterator.next();\n\t\t\t\tAssert.assertEquals(""header"", headerTest.getName());\n\t\t\t\tAssert.assertEquals(""test"", headerTest.getAllowedvalues()[0]);\n\t\t\t\tApiHeaderDoc headerTwo = headersIterator.next();\n\t\t\t\tAssert.assertEquals(""header-two"", headerTwo.getName());\n\t\t\t\tAssert.assertEquals(""header-test"", headerTwo.getAllowedvalues()[0]);\n\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""POST"", apiMethodDoc.getVerb().iterator().next().name());\n\t\t\t\tAssert.assertEquals(""application/json"", apiMethodDoc.getProduces().iterator().next());\n\t\t\t\tAssert.assertEquals(""application/json"", apiMethodDoc.getConsumes().iterator().next());\n\t\t\t\tAssert.assertEquals(""201 - Created"", apiMethodDoc.getResponsestatuscode());\n\n\t\t\t\tSet<ApiParamDoc> queryparameters = apiMethodDoc.getQueryparameters();\n\t\t\t\tAssert.assertEquals(4, queryparameters.size());\n\t\t\t\tIterator<ApiParamDoc> qpIterator = queryparameters.iterator();\n\t\t\t\tApiParamDoc apiParamDoc = qpIterator.next();\n\t\t\t\tAssert.assertEquals(""delete"", apiParamDoc.getName());\n\t\t\t\tAssert.assertEquals(""true"", apiParamDoc.getRequired());\n\t\t\t\tAssert.assertEquals(null, apiParamDoc.getDefaultvalue());\n\t\t\t\tAssert.assertEquals(0, apiParamDoc.getAllowedvalues().length);\n\t\t\t\tapiParamDoc = qpIterator.next();\n\t\t\t\tAssert.assertEquals(""id"", apiParamDoc.getName());\n\t\t\t\tAssert.assertEquals(""true"", apiParamDoc.getRequired());\n\t\t\t\tAssert.assertTrue(apiParamDoc.getDefaultvalue().isEmpty());\n\t\t\t\tapiParamDoc = qpIterator.next();\n\t\t\t\tAssert.assertEquals("""", apiParamDoc.getName());\n\t\t\t\tAssert.assertEquals(""true"", apiParamDoc.getRequired());\n\t\t\t\tAssert.assertEquals("""", apiParamDoc.getDefaultvalue());\n\n\t\t\t\tapiParamDoc = qpIterator.next();\n\t\t\t\tAssert.assertEquals(""user"", apiParamDoc.getName());\n\t\t\t\tAssert.assertEquals(""false"", apiParamDoc.getRequired());\n\t\t\t\tAssert.assertEquals(""admin"", apiParamDoc.getDefaultvalue());\n\n\t\t\t\tSet<ApiParamDoc> pathparameters = apiMethodDoc.getPathparameters();\n\t\t\t\tIterator<ApiParamDoc> ppIterator = pathparameters.iterator();\n\t\t\t\tapiParamDoc = ppIterator.next();\n\t\t\t\tapiParamDoc = apiMethodDoc.getPathparameters().iterator().next();\n\t\t\t\tAssert.assertEquals(""test"", apiParamDoc.getName());\n\t\t\t}\n\t\t}\n\n\t}\n']",Apierrors;Doc;Hash;Set;Class;Methods;Spring;header;Description;Controller,6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.46135139465332, -5.110569000244141, -5.409712314605713, -6.455723285675049, -5.408527374267578, -0.02102258987724781]",0.9791968464851379
1,"['\t@Test\n\tpublic void getJSONDoc() throws IOException {\n\t\tJSONDocScanner jsondocScanner = new Spring3JSONDocScanner();\n\t\tJSONDoc jsondoc = jsondocScanner.getJSONDoc(version, basePath, Lists.newArrayList(""org.jsondoc.springmvc.issues.issue174""), true, MethodDisplay.URI);\n\n\t\tMap<String, Set<ApiObjectDoc>> objects = jsondoc.getObjects();\n\t\tfor (Set<ApiObjectDoc> values : objects.values()) {\n\t\t\tfor (ApiObjectDoc apiObjectDoc : values) {\n\t\t\t\tSystem.out.println(apiObjectDoc.getName());\n\t\t\t}\n\t\t}\n\t}\n']",Scanner;JSONDoc;spring;Scanner;objects;Doc;api;Name;Spring;objects,1.8335413187742233e-09;1.4842953532934189e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.518620014190674, -5.026143550872803, -5.420372009277344, -6.515180587768555, -5.460824966430664, -0.020949749276041985]",0.9792681932449341
1,"['\t@Test\n\tpublic void testApiVerb() {\n\t\tApiObjectDoc buildObject = SpringObjectBuilder.buildObject(MyObject.class);\n\t\tAssert.assertEquals(""MyObject"", buildObject.getName());\n\t\tAssert.assertEquals(3, buildObject.getFields().size());\n\t}\n']",Spring;Assert;Assert;My;Ver;Object;build;Name;get;Doc,2.561137080192566e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.57770299911499, -4.970051288604736, -5.43015718460083, -6.513208866119385, -5.462563514709473, -0.021052822470664978]",0.9791672229766846
1,"['\t@Test\n\tpublic void testPath() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\n\t\tboolean slashPath = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\treturn input.getPath().contains(""/path"");\n\t\t\t}\n']",Spring;Display;contains;get;Method;new;api;Methods;Method;input,9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.540571689605713, -5.005529880523682, -5.39924955368042, -6.4924750328063965, -5.444197177886963, -0.021204322576522827]",0.9790188074111938
1,"['\t@Test\n\tpublic void testPath2() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController2.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController2"", apiDoc.getName());\n\n\t\tboolean none = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\tSystem.out.println(input.getPath());\n\t\t\t\treturn input.getPath().contains(""/"");\n\t\t\t}\n']",jsondoc;any;apply;Match;api;boolean;Controller;from;get;class,1.1350493878126144e-09;8.731149137020111e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.532180309295654, -5.012808322906494, -5.427195072174072, -6.507389068603516, -5.449211120605469, -0.021016404032707214]",0.9792030453681946
1,"['\t@Test\n\tpublic void testPath3() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController3.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController3"", apiDoc.getName());\n\n\t\tboolean allRight = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\tboolean allRight =\n\t\t\t\t\t\t\t\tinput.getPath().contains(""/path1/path3"") && \n\t\t\t\t\t\t\t\tinput.getPath().contains(""/path1/path4"") && \n\t\t\t\t\t\t\t\tinput.getPath().contains(""/path2/path3"") && \n\t\t\t\t\t\t\t\tinput.getPath().contains(""/path2/path4"");     \n\t\t\t\treturn allRight;\n\t\t\t}\n']",Scanner;any;Hash;Class;Controller;Spring;jsondoc;input;boolean;Fluent,1.3096723705530167e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.517495632171631, -5.057063579559326, -5.439050197601318, -6.494776248931885, -5.443530559539795, -0.020773576572537422]",0.9794408082962036
1,"['\t@Test\n\tpublic void testPath4() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController4.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController4"", apiDoc.getName());\n\n\t\tboolean allRight = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\tboolean allRight =\n\t\t\t\t\t\t\t\tinput.getPath().contains(""/path""); \n\t\t\t\treturn allRight;\n\t\t\t}\n']",Doc;input;jsondoc;get;all;Right;Path;Class;Method;boolean,6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10,5,5,"[-5.5368828773498535, -5.015577793121338, -5.417257308959961, -6.49810791015625, -5.4536542892456055, -0.02101815491914749]",0.9792011976242065
1,"['\t@Test\n\tpublic void testPath5() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController5.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController5"", apiDoc.getName());\n\t\t\n\t\tboolean allRight = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\tboolean allRight = input.getPath().contains(""/path"") && input.getPath().contains(""/path2"");\n\t\t\t\treturn allRight;\n\t\t\t}\n']",Predicate;Path;Method;jsondoc;pi;boolean;Methods;Match;Doc;Path,1.6007106751203537e-09;1.5133991837501526e-09;6.693881005048752e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.546797275543213, -4.991535663604736, -5.417880535125732, -6.4959492683410645, -5.469033241271973, -0.021077219396829605]",0.9791434407234192
1,"['\t@Test\n\tpublic void testPath6() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController6.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController6"", apiDoc.getName());\n\n\t\tboolean allRight = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\treturn input.getPath().contains(""/api/widget/frame"");\n\t\t\t}\n']",Methods;Hash;next;Path;contains;Method;Fluent;api;Method;get,3.725290298461914e-09;2.7939677238464355e-09;1.979060471057892e-09;1.862645149230957e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.514181137084961, -5.038536071777344, -5.3741631507873535, -6.473177909851074, -5.398928165435791, -0.02144121192395687]",0.9787870049476624
1,"['\t@Test\n\tpublic void testPathWithMethodDisplayMethod() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController5.class), MethodDisplay.METHOD).iterator().next();\n\t\tboolean allRight = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n\t\t\t@Override\n\t\t\tpublic boolean apply(ApiMethodDoc input) {\n\t\t\t\tboolean allRight = input.getPath().contains(""/path"") && input.getPath().contains(""/path2"") && input.getDisplayedMethodString().contains(""none"");\n\t\t\t\treturn allRight;\n\t\t\t}\n']",Path;api;Spring;Doc;all;Method;Method;from;contains;Displayed,2.7939677238464355e-09;1.1641532182693481e-09;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6921043172478676e-10,5,5,"[-5.535872459411621, -4.988042831420898, -5.423152446746826, -6.51778507232666, -5.473589897155762, -0.02106846496462822]",0.9791519045829773
1,"['    @Test\n    public void testApiVerb() {\n\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController.class), MethodDisplay.URI).iterator().next();\n\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\tAssert.assertEquals(3, apiDoc.getMethods().size());\n\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t    if (apiMethodDoc.getPath().contains(""/consumes-one"")) {\n\t\tAssert.assertEquals(1, apiMethodDoc.getConsumes().size());\n\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, apiMethodDoc.getConsumes().iterator().next());\n\t    }\n\t    if (apiMethodDoc.getPath().contains(""/consumes-two"")) {\n\t\tAssert.assertEquals(2, apiMethodDoc.getConsumes().size());\n\t\tIterator<String> iterator = apiMethodDoc.getConsumes().iterator();\n\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, iterator.next());\n\t\tAssert.assertEquals(MediaType.APPLICATION_XML_VALUE, iterator.next());\n\t    }\n\t    if (apiMethodDoc.getPath().contains(""/consumes-three"")) {\n\t\tAssert.assertEquals(1, apiMethodDoc.getConsumes().size());\n\t\tString consumes = apiMethodDoc.getConsumes().iterator().next();\n\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, consumes);\n\t    }\n\t}\n\n\tapiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController2.class), MethodDisplay.URI).iterator().next();\n\tAssert.assertEquals(""SpringController2"", apiDoc.getName());\n\tAssert.assertEquals(3, apiDoc.getMethods().size());\n\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t    if (apiMethodDoc.getPath().contains(""/consumes-one"")) {\n\t\tAssert.assertEquals(1, apiMethodDoc.getConsumes().size());\n\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, apiMethodDoc.getConsumes().iterator().next());\n\t    }\n\t    if (apiMethodDoc.getPath().contains(""/consumes-two"")) {\n\t\tAssert.assertEquals(2, apiMethodDoc.getConsumes().size());\n\t\tIterator<String> iterator = apiMethodDoc.getConsumes().iterator();\n\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, iterator.next());\n\t\tAssert.assertEquals(MediaType.APPLICATION_XML_VALUE, iterator.next());\n\t    }\n\t    if (apiMethodDoc.getPath().contains(""/consumes-three"")) {\n\t\tAssert.assertEquals(1, apiMethodDoc.getConsumes().size());\n\t\tAssert.assertEquals(MediaType.APPLICATION_XML_VALUE, apiMethodDoc.getConsumes().iterator().next());\n\t    }\n\t}\n    }\n']",Media;Scanner;URI;jsondoc;Media;Equals;VALUE;Doc;URI;jsondoc,1.1641532182693481e-09;8.149072527885437e-10;6.693881005048752e-10;6.693881005048752e-10;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.423025131225586, -5.149828910827637, -5.4144744873046875, -6.441081523895264, -5.349571704864502, -0.021234549582004547]",0.97898930311203
1,"['\t@Test\n\tpublic void testQueryParam() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\t\tAssert.assertEquals(3, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-one"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getQueryparameters().size());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-two"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getQueryparameters().size());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-three"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getQueryparameters().size());\n\t\t\t\tIterator<ApiParamDoc> iterator = apiMethodDoc.getQueryparameters().iterator();\n\t\t\t\tApiParamDoc param = iterator.next();\n\t\t\t\tAssert.assertEquals(""param"", param.getName());\n\t\t\t\tAssert.assertEquals(""value"", param.getAllowedvalues()[0]);\n\t\t\t\tApiParamDoc param2 = iterator.next();\n\t\t\t\tAssert.assertEquals(""param2"", param2.getName());\n\t\t\t\tAssert.assertEquals(""value2"", param2.getAllowedvalues()[0]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tapiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController2.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController2"", apiDoc.getName());\n\t\tAssert.assertEquals(2, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-one"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getQueryparameters().size());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-two"")) {\n\t\t\t\tAssert.assertEquals(3, apiMethodDoc.getQueryparameters().size());\n\t\t\t}\n\t\t}\n\t\t\n\t\tapiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController3.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController3"", apiDoc.getName());\n\t\tAssert.assertEquals(4, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-one"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getQueryparameters().size());\n\t\t\t\tIterator<ApiParamDoc> iterator = apiMethodDoc.getQueryparameters().iterator();\n\t\t\t\tApiParamDoc param = iterator.next();\n\t\t\t\tApiParamDoc queryParam = iterator.next();\n\t\t\t\tAssert.assertEquals(""name"", queryParam.getName());\n\t\t\t\tAssert.assertEquals(""true"", queryParam.getRequired());\n\t\t\t\tAssert.assertEquals(""string"", queryParam.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals("""", queryParam.getDefaultvalue());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-two"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getQueryparameters().size());\n\t\t\t\tIterator<ApiParamDoc> iterator = apiMethodDoc.getQueryparameters().iterator();\n\t\t\t\tApiParamDoc param = iterator.next();\n\t\t\t\tApiParamDoc queryParam = iterator.next();\n\t\t\t\tAssert.assertEquals(""name"", queryParam.getName());\n\t\t\t\tAssert.assertEquals(""false"", queryParam.getRequired());\n\t\t\t\tAssert.assertEquals(""string"", queryParam.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""test"", queryParam.getDefaultvalue());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-three"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getQueryparameters().size());\n\t\t\t\tIterator<ApiParamDoc> iterator = apiMethodDoc.getQueryparameters().iterator();\n\t\t\t\tApiParamDoc param = iterator.next();\n\t\t\t\tApiParamDoc queryParam = iterator.next();\n\t\t\t\tAssert.assertEquals("""", queryParam.getName());\n\t\t\t\tAssert.assertEquals(""true"", queryParam.getRequired());\n\t\t\t\tAssert.assertEquals(""string"", queryParam.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals("""", queryParam.getDefaultvalue());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-four"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getQueryparameters().size());\n\t\t\t\tIterator<ApiParamDoc> iterator = apiMethodDoc.getQueryparameters().iterator();\n\t\t\t\tApiParamDoc param = iterator.next();\n\t\t\t\tApiParamDoc queryParam = iterator.next();\n\t\t\t\tAssert.assertEquals(""value"", queryParam.getName());\n\t\t\t\tAssert.assertEquals(""false"", queryParam.getRequired());\n\t\t\t\tAssert.assertEquals(""string"", queryParam.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals("""", queryParam.getDefaultvalue());\n\t\t\t}\n\t\t}\n\t\t\n\t\tapiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController4.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController4"", apiDoc.getName());\n\t\tAssert.assertEquals(2, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getQueryparameters().size());\n\t\t\t\tApiParamDoc param = apiMethodDoc.getQueryparameters().iterator().next();\n\t\t\t\tAssert.assertEquals(""name"", param.getName());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/two"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getQueryparameters().size());\n\t\t\t}\n\t\t}\n\t\t\n\t\tapiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController5.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController5"", apiDoc.getName());\n\t\tAssert.assertEquals(1, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getQueryparameters().size());\n\t\t\t\tApiParamDoc param = apiMethodDoc.getQueryparameters().iterator().next();\n\t\t\t\tAssert.assertEquals(""modelAttributePojo"", param.getName());\n\t\t\t\tAssert.assertEquals(""modelattributepojo"", param.getJsondocType().getOneLineText());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n']",Scanner;Class;jsondoc;get;Doc;Method;ets;jsondoc;pi;Spring,1.0477378964424133e-09;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.4264140129089355, -5.163991451263428, -5.418015003204346, -6.444591999053955, -5.346116065979004, -0.02113114297389984]",0.979090690612793
1,"['    @Test\n    public void testGetMapping() {\n        ApiDoc\n            apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(RequestMappingController.class), MethodDisplay.URI).iterator().next();\n        Assert.assertEquals(""RequestMappingController"", apiDoc.getName());\n\n        boolean getMethodPresent = FluentIterable.from(apiDoc.getMethods()).anyMatch(new Predicate<ApiMethodDoc>() {\n            @Override\n            public boolean apply(ApiMethodDoc input) {\n                return input.getMethod().equals(""get"");\n            }\n']",Predicate;Doc;Request;apping;Method;apping;URI;api;api;input,8.731149137020111e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.480490207672119, -5.049551963806152, -5.401078701019287, -6.469437122344971, -5.42431116104126, -0.021274110302329063]",0.978950560092926
1,"['\t@Test\n\tpublic void testApiHeadersOnClass() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringApiHeadersController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringApiHeadersController"", apiDoc.getName());\n\t\tAssert.assertEquals(3, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/spring-api-headers-controller-method-one"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getHeaders().size());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/spring-api-headers-controller-method-two"")) {\n\t\t\t\tAssert.assertEquals(3, apiMethodDoc.getHeaders().size());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/spring-api-headers-controller-method-three"")) {\n\t\t\t\tAssert.assertEquals(4, apiMethodDoc.getHeaders().size());\n\t\t\t\tIterator<ApiHeaderDoc> headers = apiMethodDoc.getHeaders().iterator();\n\t\t\t\tApiHeaderDoc h1 = headers.next();\n\t\t\t\tApiHeaderDoc h2 = headers.next();\n\t\t\t\tApiHeaderDoc h4 = headers.next();\n\t\t\t\tAssert.assertEquals(""h4"", h4.getName());\n\t\t\t\tApiHeaderDoc h5 = headers.next();\n\t\t\t\tAssert.assertEquals(""h5"", h5.getName());\n\t\t\t}\n\t\t}\n\t}\n']",Scanner;Doc;URI;three;ets;Class;method;jsondoc;Doc;get,2.2118911147117615e-09;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.92901711165905e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.480196952819824, -5.143147945404053, -5.4466962814331055, -6.467744827270508, -5.375254154205322, -0.020713910460472107]",0.9794992804527283
1,"['\t@Test\n\tpublic void testPathVariable() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\t\tAssert.assertEquals(2, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-one/{id}/{string}"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getPathparameters().size());\n\t\t\t\tIterator<ApiParamDoc> iterator = apiMethodDoc.getPathparameters().iterator();\n\t\t\t\tApiParamDoc id = iterator.next();\n\t\t\t\tAssert.assertEquals("""", id.getName());\n\t\t\t\tAssert.assertEquals(""long"", id.getJsondocType().getOneLineText());\n\t\t\t\tApiParamDoc name = iterator.next();\n\t\t\t\tAssert.assertEquals(""name"", name.getName());\n\t\t\t\tAssert.assertEquals(""string"", name.getJsondocType().getOneLineText());\n\t\t\t}\n\t\t\t\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-one/{id}/{string}/{test}"")) {\n\t\t\t\tAssert.assertEquals(3, apiMethodDoc.getPathparameters().size());\n\t\t\t\tIterator<ApiParamDoc> iterator = apiMethodDoc.getPathparameters().iterator();\n\t\t\t\tApiParamDoc id = iterator.next();\n\t\t\t\tAssert.assertEquals(""id"", id.getName());\n\t\t\t\tAssert.assertEquals(""long"", id.getJsondocType().getOneLineText());\n\t\t\t\tApiParamDoc name = iterator.next();\n\t\t\t\tAssert.assertEquals(""name"", name.getName());\n\t\t\t\tAssert.assertEquals(""string"", name.getJsondocType().getOneLineText());\n\t\t\t\tApiParamDoc test = iterator.next();\n\t\t\t\tAssert.assertEquals("""", test.getName());\n\t\t\t\tAssert.assertEquals(""long"", test.getJsondocType().getOneLineText());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n']",Doc;Scanner;Jsondoc;Pathparameters;Hash;Class;Pathparameters;Display;Pathparameters;Line,1.280568540096283e-09;1.0331859812140465e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.548361852765083e-10;6.402842700481415e-10;4.874891601502895e-10;3.7834979593753815e-10,5,5,"[-5.45551872253418, -5.117478370666504, -5.416487216949463, -6.458411693572998, -5.3798418045043945, -0.021103480830788612]",0.9791176319122314
1,"['\t@Test\n\tpublic void testPathVariableWithJSONDoc() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController2.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController2"", apiDoc.getName());\n\t\tAssert.assertEquals(1, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/param-one/{id}/{string}"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getPathparameters().size());\n\t\t\t\tIterator<ApiParamDoc> iterator = apiMethodDoc.getPathparameters().iterator();\n\t\t\t\tApiParamDoc id = iterator.next();\n\t\t\t\tAssert.assertEquals("""", id.getName());\n\t\t\t\tAssert.assertEquals(""long"", id.getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""description for id"", id.getDescription());\n\t\t\t\tApiParamDoc name = iterator.next();\n\t\t\t\tAssert.assertEquals(""name"", name.getName());\n\t\t\t\tAssert.assertEquals(""string"", name.getJsondocType().getOneLineText());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n']",jsondoc;Jsondoc;URI;Variable;Line;Controller;Doc;next;Path;Path,1.9208528101444244e-09;1.0186340659856796e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.477277755737305, -5.105947017669678, -5.378734111785889, -6.439415454864502, -5.367000579833984, -0.021346695721149445]",0.9788796305656433
1,"['\t@Test\n\tpublic void testBodyOne() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\t\tAssert.assertEquals(2, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/body-one"")) {\n\t\t\t\tAssert.assertNotNull(apiMethodDoc.getBodyobject());\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/body-two"")) {\n\t\t\t\tAssert.assertNotNull(apiMethodDoc.getBodyobject());\n\t\t\t\tAssert.assertEquals(""body"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t}\n\t}\n']",Scanner;api;Jsondoc;ets;Bodyobject;One;Doc;Assert;Line;next,7.8580342233181e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.533492088317871, -5.072934627532959, -5.453027248382568, -6.506115436553955, -5.408572196960449, -0.020684368908405304]",0.9795281887054443
1,"['\t@Test\n\tpublic void testApiVerb() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\t\tAssert.assertEquals(3, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/response-one"")) {\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/response-two"")) {\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/response-three"")) {\n\t\t\t\tAssert.assertEquals(""map[string, integer]"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t}\n\t\t}\n\t}\n']",Scanner;Jsondoc;Ver;Line;get;Doc;Equals;Path;two;Spring,9.313225746154785e-10;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.52019739151001, -5.093072891235352, -5.44714879989624, -6.499028205871582, -5.400968551635742, -0.020682265982031822]",0.9795301556587219
1,"['\t@Test\n\tpublic void testApiVerb() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringApiVerbController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringApiVerbController"", apiDoc.getName());\n\t\tAssert.assertEquals(2, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/api-verb/spring-api-verb-controller-method-one"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getVerb().size());\n\t\t\t\tAssert.assertEquals(ApiVerb.GET, apiMethodDoc.getVerb().iterator().next());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/api-verb/spring-api-verb-controller-method-two"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getVerb().size());\n\t\t\t}\n\t\t}\n\t\t\n\t\tapiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringApiVerbController2.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringApiVerbController2"", apiDoc.getName());\n\t\tAssert.assertEquals(1, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/api-verb-2/spring-api-verb-controller-method-one"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getVerb().size());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n']",iterator;ets;Doc;Equals;Name;size;URI;pi;contains;Controller,7.8580342233181e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.49345588684082, -5.134944438934326, -5.435940742492676, -6.460556983947754, -5.3667683601379395, -0.020806150510907173]",0.9794088006019592
1,"['\t@Test\n\tpublic void testApiVerb() {\n\t\tApiDoc apiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController"", apiDoc.getName());\n\t\tAssert.assertEquals(3, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/produces-one"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getProduces().size());\n\t\t\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, apiMethodDoc.getProduces().iterator().next());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/produces-two"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getProduces().size());\n\t\t\t\tIterator<String> iterator = apiMethodDoc.getProduces().iterator();\n\t\t\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, iterator.next());\n\t\t\t\tAssert.assertEquals(MediaType.APPLICATION_XML_VALUE, iterator.next());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/produces-three"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getProduces().size());\n\t\t\t\tString produces = apiMethodDoc.getProduces().iterator().next();\n\t\t\t\tAssert.assertEquals(""application/json"", produces);\n\t\t\t}\n\t\t}\n\t\t\n\t\tapiDoc = jsondocScanner.getApiDocs(Sets.<Class<?>> newHashSet(SpringController2.class), MethodDisplay.URI).iterator().next();\n\t\tAssert.assertEquals(""SpringController2"", apiDoc.getName());\n\t\tAssert.assertEquals(3, apiDoc.getMethods().size());\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif (apiMethodDoc.getPath().contains(""/produces-one"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getProduces().size());\n\t\t\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, apiMethodDoc.getProduces().iterator().next());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/produces-two"")) {\n\t\t\t\tAssert.assertEquals(2, apiMethodDoc.getProduces().size());\n\t\t\t\tIterator<String> iterator = apiMethodDoc.getProduces().iterator();\n\t\t\t\tAssert.assertEquals(MediaType.APPLICATION_JSON_VALUE, iterator.next());\n\t\t\t\tAssert.assertEquals(MediaType.APPLICATION_XML_VALUE, iterator.next());\n\t\t\t}\n\t\t\tif (apiMethodDoc.getPath().contains(""/produces-three"")) {\n\t\t\t\tAssert.assertEquals(1, apiMethodDoc.getProduces().size());\n\t\t\t\tAssert.assertEquals(MediaType.APPLICATION_XML_VALUE, apiMethodDoc.getProduces().iterator().next());\n\t\t\t}\n\t\t}\n\t}\n']",JSON;application;ML;Media;jsondoc;jsondoc;Doc;Media;Scanner;Equals,8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10,5,5,"[-5.433185577392578, -5.133553504943848, -5.404604911804199, -6.459941864013672, -5.367735385894775, -0.02121354080736637]",0.9790098667144775
1,"['\t@Test\n\tpublic void testMergeApiDoc() {\n\t\tSet<Class<?>> controllers = new LinkedHashSet<Class<?>>();\n\t\tcontrollers.add(SpringController.class);\n\t\tSet<ApiDoc> apiDocs = jsondocScanner.getApiDocs(controllers, MethodDisplay.URI);\n\t\t\n\t\tApiDoc apiDoc = apiDocs.iterator().next();\n\t\tAssert.assertEquals(""A spring controller"", apiDoc.getDescription());\n\t\tAssert.assertEquals(""Spring controller"", apiDoc.getName());\n\t\t\n\t\tfor (ApiMethodDoc apiMethodDoc : apiDoc.getMethods()) {\n\t\t\tif(apiMethodDoc.getPath().contains(""/api/string/{name}"")) {\n\t\t\t\tAssert.assertNotNull(apiMethodDoc.getAuth());\n\t\t\t\tAssert.assertNotNull(apiMethodDoc.getSupportedversions());\n\t\t\t\tAssert.assertFalse(apiMethodDoc.getApierrors().isEmpty());\n\t\t\t\t\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getBodyobject().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""string"", apiMethodDoc.getResponse().getJsondocType().getOneLineText());\n\t\t\t\tAssert.assertEquals(""/api/string/{name}"", apiMethodDoc.getPath().iterator().next());\n\t\t\t\tAssert.assertEquals(""POST"", apiMethodDoc.getVerb().iterator().next().name());\n\t\t\t\tAssert.assertEquals(""application/json"", apiMethodDoc.getProduces().iterator().next());\n\t\t\t\tAssert.assertEquals(""application/json"", apiMethodDoc.getConsumes().iterator().next());\n\t\t\t\tAssert.assertEquals(""201 - Created"", apiMethodDoc.getResponsestatuscode());\n\t\t\t\t\n\t\t\t\tSet<ApiHeaderDoc> headers = apiMethodDoc.getHeaders();\n\t\t\t\tApiHeaderDoc header = headers.iterator().next();\n\t\t\t\tAssert.assertEquals(""header"", header.getName());\n\t\t\t\tAssert.assertEquals(""test"", header.getAllowedvalues()[0]);\n\t\t\t\t\n\t\t\t\tSet<ApiParamDoc> queryparameters = apiMethodDoc.getQueryparameters();\n\t\t\t\tAssert.assertEquals(3, queryparameters.size());\n\t\t\t\tIterator<ApiParamDoc> qpIterator = queryparameters.iterator();\n\t\t\t\tApiParamDoc apiParamDoc = qpIterator.next();\n\t\t\t\tAssert.assertEquals(""delete"", apiParamDoc.getName());\n\t\t\t\tAssert.assertEquals(""true"", apiParamDoc.getRequired());\n\t\t\t\tAssert.assertEquals(null, apiParamDoc.getDefaultvalue());\n\t\t\t\tAssert.assertEquals(0, apiParamDoc.getAllowedvalues().length);\n\t\t\t\tapiParamDoc = qpIterator.next();\n\t\t\t\tAssert.assertEquals(""id"", apiParamDoc.getName());\n\t\t\t\tAssert.assertEquals(""true"", apiParamDoc.getRequired());\n\t\t\t\tAssert.assertTrue(apiParamDoc.getDefaultvalue().isEmpty());\n\t\t\t\tapiParamDoc = qpIterator.next();\n\t\t\t\tAssert.assertEquals(""myquery"", apiParamDoc.getName());\n\t\t\t\tAssert.assertEquals(""true"", apiParamDoc.getRequired());\n\t\t\t\tAssert.assertEquals("""", apiParamDoc.getDefaultvalue());\n\t\t\t\t\n\t\t\t\tSet<ApiParamDoc> pathparameters = apiMethodDoc.getPathparameters();\n\t\t\t\tIterator<ApiParamDoc> ppIterator = pathparameters.iterator();\n\t\t\t\tapiParamDoc = ppIterator.next();\n\t\t\t\tapiParamDoc = apiMethodDoc.getPathparameters().iterator().next();\n\t\t\t\tAssert.assertEquals(""test"", apiParamDoc.getName());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n']",Type;Type;One;Line;Supportedversions;URI;Headers;string;string;POST,3.725290298461914e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.076841726899147e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.455166339874268, -5.034205436706543, -5.33788537979126, -6.42346715927124, -5.420268535614014, -0.021878201514482498]",0.9783595204353333
1,"['    @Test\n    public void getJSONDoc() throws IOException {\n        JSONDocScanner jsondocScanner = new Spring3JSONDocScanner();\n        JSONDoc jsondoc = jsondocScanner.getJSONDoc(version, basePath, Lists.newArrayList(""org.jsondoc.springmvc.controller""), true, MethodDisplay.URI);\n\n        Map<String, Set<ApiObjectDoc>> objects = jsondoc.getObjects();\n        for (Set<ApiObjectDoc> values : objects.values()) {\n            for (ApiObjectDoc apiObjectDoc : values) {\n                System.out.println(apiObjectDoc.getName());\n            }\n        }\n\n    }\n']",objects;Object;URI;get;Object;Scanner;new;values;api;get,4.6566128730773926e-09;2.7939677238464355e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09,5,5,"[-5.466209411621094, -5.059789180755615, -5.393832206726074, -6.4449357986450195, -5.440367698669434, -0.021269675344228745]",0.9789549112319946
1,"['    @Test\n    public void findsNestedObject() throws Exception {\n        JSONDocScanner jsondocScanner = new Spring3JSONDocScanner();\n        JSONDoc jsondoc = jsondocScanner.getJSONDoc(version, basePath, Lists.newArrayList(""org.jsondoc.springmvc.controller""), true, MethodDisplay.URI);\n\n        Map<String, Set<ApiObjectDoc>> objects = jsondoc.getObjects();\n        for (Set<ApiObjectDoc> values : objects.values()) {\n            assertContainsDoc(values, ""NestedObject1"");\n        }\n    }\n']",vc;JSONDoc;finds;base;org;jsondoc;ested;pi;Set;URI,1.3969838619232178e-09;8.149072527885437e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.503974914550781, -5.025672435760498, -5.418467044830322, -6.496759414672852, -5.455646514892578, -0.021072549745440483]",0.9791479110717773
1,"['    @Test\n    public void findsDeeplyNestedObjects() throws Exception {\n        JSONDocScanner jsondocScanner = new Spring3JSONDocScanner();\n        JSONDoc jsondoc = jsondocScanner.getJSONDoc(version, basePath, Lists.newArrayList(""org.jsondoc.springmvc.controller""), true, MethodDisplay.URI);\n\n        Map<String, Set<ApiObjectDoc>> objects = jsondoc.getObjects();\n        for (Set<ApiObjectDoc> values : objects.values()) {\n            assertContainsDoc(values, ""NestedObject2"");\n            assertContainsDoc(values, ""NestedObject3"");\n        }\n    }\n']",ested;JSONDoc;JSONDoc;version;jsondoc;vc;JSONDoc;finds;ested;Contains,8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.509034156799316, -5.007850646972656, -5.402251720428467, -6.481552600860596, -5.463342666625977, -0.021236415952444077]",0.9789875149726868
1,"['  @Test\n  public void testGetReconDbDir() throws Exception {\n\n    String filePath = folder.getRoot().getAbsolutePath();\n    OzoneConfiguration configuration = new OzoneConfiguration();\n    configuration.set(""TEST_DB_DIR"", filePath);\n\n    File file = new ReconUtils().getReconDbDir(configuration,\n        ""TEST_DB_DIR"");\n    Assert.assertEquals(filePath, file.getAbsolutePath());\n  }\n']",Dir;folder;Db;Dir;Path;Get;Utils;Path;Path;DIR,9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.500021457672119, -5.018501281738281, -5.436455726623535, -6.517147541046143, -5.479337215423584, -0.020923249423503876]",0.9792940020561218
1,"['  @Test\n  public void testCreateTarFile() throws Exception {\n\n    File tempSnapshotDir = null;\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    File tarFile = null;\n\n    try {\n      String testDirName = System.getProperty(""java.io.tmpdir"");\n      if (!testDirName.endsWith(""/"")) {\n        testDirName += ""/"";\n      }\n      testDirName += ""TestCreateTarFile_Dir"" + System.currentTimeMillis();\n      tempSnapshotDir = new File(testDirName);\n      tempSnapshotDir.mkdirs();\n\n      File file = new File(testDirName + ""/temp1.txt"");\n      OutputStreamWriter writer = new OutputStreamWriter(\n          new FileOutputStream(file), UTF_8);\n      writer.write(""Test data 1"");\n      writer.close();\n\n      file = new File(testDirName + ""/temp2.txt"");\n      writer = new OutputStreamWriter(\n          new FileOutputStream(file), UTF_8);\n      writer.write(""Test data 2"");\n      writer.close();\n\n      tarFile = createTarFile(Paths.get(testDirName));\n      Assert.assertNotNull(tarFile);\n\n    } finally {\n      org.apache.hadoop.io.IOUtils.closeStream(fis);\n      org.apache.hadoop.io.IOUtils.closeStream(fos);\n      FileUtils.deleteDirectory(tempSnapshotDir);\n      FileUtils.deleteQuietly(tarFile);\n    }\n  }\n']",Mill;mkdir;Exception;Input;File;write;write;tar;current;ends,1.6298145055770874e-09;8.731149137020111e-10;8.440110832452774e-10;5.966285243630409e-10;4.656612873077393e-10;4.511093720793724e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.504162788391113, -4.937882423400879, -5.40892219543457, -6.483597755432129, -5.524559497833252, -0.021460579708218575]",0.9787680506706238
1,"['  @Test\n  public void testUntarCheckpointFile() throws Exception {\n\n    File newDir = folder.newFolder();\n\n    File file1 = Paths.get(newDir.getAbsolutePath(), ""file1"")\n        .toFile();\n    String str = ""File1 Contents"";\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n        new FileOutputStream(file1.getAbsoluteFile()), UTF_8));\n    writer.write(str);\n    writer.close();\n\n    File file2 = Paths.get(newDir.getAbsolutePath(), ""file2"")\n        .toFile();\n    str = ""File2 Contents"";\n    writer = new BufferedWriter(new OutputStreamWriter(\n        new FileOutputStream(file2.getAbsoluteFile()), UTF_8));\n    writer.write(str);\n    writer.close();\n\n    //Create test tar file.\n    File tarFile = createTarFile(newDir.toPath());\n    File outputDir = folder.newFolder();\n    new ReconUtils().untarCheckpointFile(tarFile, outputDir.toPath());\n\n    assertTrue(outputDir.isDirectory());\n    assertTrue(outputDir.listFiles().length == 2);\n  }\n']",Untar;Files;Create;UTF;Utils;folder;file;File;tar;File,2.444721758365631e-09;1.1059455573558807e-09;1.0477378964424133e-09;7.275957614183426e-10;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.472607612609863, -5.038046360015869, -5.4367170333862305, -6.463741302490234, -5.456308841705322, -0.021089473739266396]",0.9791313409805298
1,"['  @Test\n  public void testMakeHttpCall() throws Exception {\n    String url = ""http://localhost:9874/dbCheckpoint"";\n    File file1 = Paths.get(folder.getRoot().getPath(), ""file1"")\n        .toFile();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n        new FileOutputStream(file1.getAbsoluteFile()), UTF_8));\n    writer.write(""File 1 Contents"");\n    writer.close();\n    InputStream fileInputStream = new FileInputStream(file1);\n\n    String contents;\n    URLConnectionFactory connectionFactoryMock =\n        mock(URLConnectionFactory.class);\n    HttpURLConnection urlConnectionMock = mock(HttpURLConnection.class);\n    when(urlConnectionMock.getInputStream()).thenReturn(fileInputStream);\n    when(connectionFactoryMock.openConnection(any(URL.class), anyBoolean()))\n        .thenReturn(urlConnectionMock);\n    try (InputStream inputStream = new ReconUtils()\n        .makeHttpCall(connectionFactoryMock, url, false).getInputStream()) {\n      contents = IOUtils.toString(inputStream, Charset.defaultCharset());\n    }\n\n    assertEquals(""File 1 Contents"", contents);\n  }\n']",localhost;Make;Recon;connection;Call;ock;http;writer;open;when,5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.4657487869262695, -5.064216136932373, -5.442049980163574, -6.481673240661621, -5.4474358558654785, -0.020934922620654106]",0.979282796382904
1,"['  @Test\n  public void testGetLastKnownDB() throws IOException {\n    File newDir = folder.newFolder();\n\n    File file1 = Paths.get(newDir.getAbsolutePath(), ""valid_1"")\n        .toFile();\n    String str = ""File1 Contents"";\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n        new FileOutputStream(file1.getAbsoluteFile()), UTF_8));\n    writer.write(str);\n    writer.close();\n\n    File file2 = Paths.get(newDir.getAbsolutePath(), ""valid_2"")\n        .toFile();\n    str = ""File2 Contents"";\n    writer = new BufferedWriter(new OutputStreamWriter(\n        new FileOutputStream(file2.getAbsoluteFile()), UTF_8));\n    writer.write(str);\n    writer.close();\n\n\n    File file3 = Paths.get(newDir.getAbsolutePath(), ""invalid_3"")\n        .toFile();\n    str = ""File3 Contents"";\n    writer = new BufferedWriter(new OutputStreamWriter(\n        new FileOutputStream(file3.getAbsoluteFile()), UTF_8));\n    writer.write(str);\n    writer.close();\n\n    ReconUtils reconUtils = new ReconUtils();\n    File latestValidFile = reconUtils.getLastKnownDB(newDir, ""valid"");\n    assertTrue(latestValidFile.getName().equals(""valid_2""));\n  }\n']",recon;new;IOException;equals;Buffered;Utils;str;writer;to;latest,1.3969838619232178e-09;1.3969838619232178e-09;1.076841726899147e-09;6.548361852765083e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.439736843109131, -5.043974876403809, -5.43265438079834, -6.455195903778076, -5.442183971405029, -0.02128741517663002]",0.9789374470710754
1,"['  @Test\n  public void testStart() throws Exception {\n\n    OMMetadataManager omMetadataManager = getOMMetadataManager();\n\n    //Take checkpoint of the above OM DB.\n    DBCheckpoint checkpoint = omMetadataManager.getStore()\n        .getCheckpoint(true);\n    File snapshotFile = new File(\n        checkpoint.getCheckpointLocation().getParent() + ""/"" +\n            ""om.snapshot.db_"" + System.currentTimeMillis());\n    checkpoint.getCheckpointLocation().toFile().renameTo(snapshotFile);\n\n    //Create new Recon OM Metadata manager instance.\n    File reconOmDbDir = temporaryFolder.newFolder();\n    OzoneConfiguration configuration = new OzoneConfiguration();\n    configuration.set(OZONE_RECON_OM_SNAPSHOT_DB_DIR, reconOmDbDir\n        .getAbsolutePath());\n    FileUtils.copyDirectory(snapshotFile.getParentFile(), reconOmDbDir);\n\n    ReconOMMetadataManager reconOMMetadataManager =\n        new ReconOmMetadataManagerImpl(configuration, new ReconUtils());\n    reconOMMetadataManager.start(configuration);\n\n    Assert.assertNotNull(reconOMMetadataManager.getBucketTable());\n    Assert.assertNotNull(reconOMMetadataManager.getVolumeTable()\n        .get(""/sampleVol""));\n    Assert.assertNotNull(reconOMMetadataManager.getBucketTable()\n        .get(""/sampleVol/bucketOne""));\n    Assert.assertNotNull(reconOMMetadataManager.getKeyTable(getBucketLayout())\n        .get(""/sampleVol/bucketOne/key_one""));\n    Assert.assertNotNull(reconOMMetadataManager.getKeyTable(getBucketLayout())\n        .get(""/sampleVol/bucketOne/key_two""));\n  }\n']",configuration;Not;Not;start;Assert;Null;Checkpoint;Not;checkpoint;File,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.442789554595947, -5.025097370147705, -5.380869388580322, -6.457704067230225, -5.458556175231934, -0.021560918539762497]",0.9786697626113892
1,"['  @Test\n  public void testUpdateOmDB() throws Exception {\n\n    OMMetadataManager omMetadataManager = getOMMetadataManager();\n    //Make sure OM Metadata reflects the keys that were inserted.\n    Assert.assertNotNull(omMetadataManager.getKeyTable(getBucketLayout())\n        .get(""/sampleVol/bucketOne/key_one""));\n    Assert.assertNotNull(omMetadataManager.getKeyTable(getBucketLayout())\n        .get(""/sampleVol/bucketOne/key_two""));\n\n    //Take checkpoint of OM DB.\n    DBCheckpoint checkpoint = omMetadataManager.getStore()\n        .getCheckpoint(true);\n    Assert.assertNotNull(checkpoint.getCheckpointLocation());\n\n    //Create new Recon OM Metadata manager instance.\n    File reconOmDbDir = temporaryFolder.newFolder();\n    OzoneConfiguration configuration = new OzoneConfiguration();\n    configuration.set(OZONE_RECON_OM_SNAPSHOT_DB_DIR, reconOmDbDir\n        .getAbsolutePath());\n    ReconOMMetadataManager reconOMMetadataManager =\n        new ReconOmMetadataManagerImpl(configuration, new ReconUtils());\n    reconOMMetadataManager.start(configuration);\n\n    //Before accepting a snapshot, the metadata should have null tables.\n    Assert.assertNull(reconOMMetadataManager.getBucketTable());\n\n    //Update Recon OM DB with the OM DB checkpoint location.\n    reconOMMetadataManager.updateOmDB(\n        checkpoint.getCheckpointLocation().toFile());\n\n    //Now, the tables should have been initialized.\n    Assert.assertNotNull(reconOMMetadataManager.getBucketTable());\n\n    // Check volume and bucket entries.\n    Assert.assertNotNull(reconOMMetadataManager.getVolumeTable()\n        .get(""/sampleVol""));\n    Assert.assertNotNull(reconOMMetadataManager.getBucketTable()\n        .get(""/sampleVol/bucketOne""));\n\n    //Verify Keys inserted in OM DB are available in Recon OM DB.\n    Assert.assertNotNull(reconOMMetadataManager.getKeyTable(getBucketLayout())\n        .get(""/sampleVol/bucketOne/key_one""));\n    Assert.assertNotNull(reconOMMetadataManager.getKeyTable(getBucketLayout())\n        .get(""/sampleVol/bucketOne/key_two""));\n\n  }\n']",Exception;DB;Table;BCheckpoint;Key;get;ucket;Null;OM;one,1.979060471057892e-09;1.5133991837501526e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.452115535736084, -5.060279369354248, -5.40062141418457, -6.463295936584473, -5.438241004943848, -0.021276328712701797]",0.9789484143257141
1,"['  @Test\n  public void testReprocessOMDB() throws Exception{\n\n    Map<ContainerKeyPrefix, Integer> keyPrefixesForContainer =\n        reconContainerMetadataManager.getKeyPrefixesForContainer(1);\n    assertTrue(keyPrefixesForContainer.isEmpty());\n\n    keyPrefixesForContainer = reconContainerMetadataManager\n        .getKeyPrefixesForContainer(2);\n    assertTrue(keyPrefixesForContainer.isEmpty());\n\n    Pipeline pipeline = getRandomPipeline();\n\n    List<OmKeyLocationInfo> omKeyLocationInfoList = new ArrayList<>();\n    BlockID blockID1 = new BlockID(1, 1);\n    OmKeyLocationInfo omKeyLocationInfo1 = getOmKeyLocationInfo(blockID1,\n        pipeline);\n\n    BlockID blockID2 = new BlockID(2, 1);\n    OmKeyLocationInfo omKeyLocationInfo2\n        = getOmKeyLocationInfo(blockID2, pipeline);\n\n    omKeyLocationInfoList.add(omKeyLocationInfo1);\n    omKeyLocationInfoList.add(omKeyLocationInfo2);\n\n    OmKeyLocationInfoGroup omKeyLocationInfoGroup = new\n        OmKeyLocationInfoGroup(0, omKeyLocationInfoList);\n\n    writeDataToOm(reconOMMetadataManager,\n        ""key_one"",\n        ""bucketOne"",\n        ""sampleVol"",\n        Collections.singletonList(omKeyLocationInfoGroup));\n\n    ContainerKeyMapperTask containerKeyMapperTask =\n        new ContainerKeyMapperTask(reconContainerMetadataManager);\n    containerKeyMapperTask.reprocess(reconOMMetadataManager);\n\n    keyPrefixesForContainer =\n        reconContainerMetadataManager.getKeyPrefixesForContainer(1);\n    assertEquals(1, keyPrefixesForContainer.size());\n    String omKey = omMetadataManager.getOzoneKey(""sampleVol"",\n        ""bucketOne"", ""key_one"");\n    ContainerKeyPrefix containerKeyPrefix = new ContainerKeyPrefix(1,\n        omKey, 0);\n    assertEquals(1,\n        keyPrefixesForContainer.get(containerKeyPrefix).intValue());\n\n    keyPrefixesForContainer =\n        reconContainerMetadataManager.getKeyPrefixesForContainer(2);\n    assertEquals(1, keyPrefixesForContainer.size());\n    containerKeyPrefix = new ContainerKeyPrefix(2, omKey,\n        0);\n    assertEquals(1,\n        keyPrefixesForContainer.get(containerKeyPrefix).intValue());\n\n    // Test if container key counts are updated\n    assertEquals(1, reconContainerMetadataManager.getKeyCountForContainer(1L));\n    assertEquals(1, reconContainerMetadataManager.getKeyCountForContainer(2L));\n    assertEquals(0, reconContainerMetadataManager.getKeyCountForContainer(3L));\n\n    // Test if container count is updated\n    assertEquals(2, reconContainerMetadataManager.getCountForContainers());\n  }\n']",OMDB;Map;Block;pipeline;new;Container;Prefixes;Prefixes;Reprocess;recon,3.3760443329811096e-09;1.3969838619232178e-09;1.3969838619232178e-09;8.149072527885437e-10;7.712515071034431e-10;6.984919309616089e-10;6.83940015733242e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.476077556610107, -4.901010036468506, -5.333717346191406, -6.432336330413818, -5.477640628814697, -0.02248985320329666]",0.9777612686157227
1,"['  @Test\n  public void testProcessOMEvents() throws IOException {\n    Map<ContainerKeyPrefix, Integer> keyPrefixesForContainer =\n        reconContainerMetadataManager.getKeyPrefixesForContainer(1);\n    assertTrue(keyPrefixesForContainer.isEmpty());\n\n    keyPrefixesForContainer = reconContainerMetadataManager\n        .getKeyPrefixesForContainer(2);\n    assertTrue(keyPrefixesForContainer.isEmpty());\n\n    Pipeline pipeline = getRandomPipeline();\n\n    List<OmKeyLocationInfo> omKeyLocationInfoList = new ArrayList<>();\n    BlockID blockID1 = new BlockID(1, 1);\n    OmKeyLocationInfo omKeyLocationInfo1 = getOmKeyLocationInfo(blockID1,\n        pipeline);\n\n    BlockID blockID2 = new BlockID(2, 1);\n    OmKeyLocationInfo omKeyLocationInfo2\n        = getOmKeyLocationInfo(blockID2, pipeline);\n\n    omKeyLocationInfoList.add(omKeyLocationInfo1);\n    omKeyLocationInfoList.add(omKeyLocationInfo2);\n\n    OmKeyLocationInfoGroup omKeyLocationInfoGroup = new\n        OmKeyLocationInfoGroup(0, omKeyLocationInfoList);\n\n    String bucket = ""bucketOne"";\n    String volume = ""sampleVol"";\n    String key = ""key_one"";\n    String omKey = omMetadataManager.getOzoneKey(volume, bucket, key);\n    OmKeyInfo omKeyInfo = buildOmKeyInfo(volume, bucket, key,\n        omKeyLocationInfoGroup);\n\n    OMDBUpdateEvent keyEvent1 = new OMDBUpdateEvent.\n        OMUpdateEventBuilder<String, OmKeyInfo>()\n        .setKey(omKey)\n        .setValue(omKeyInfo)\n        .setTable(omMetadataManager.getKeyTable(getBucketLayout()).getName())\n        .setAction(OMDBUpdateEvent.OMDBUpdateAction.PUT)\n        .build();\n\n    BlockID blockID3 = new BlockID(1, 2);\n    OmKeyLocationInfo omKeyLocationInfo3 =\n        getOmKeyLocationInfo(blockID3, pipeline);\n\n    BlockID blockID4 = new BlockID(3, 1);\n    OmKeyLocationInfo omKeyLocationInfo4\n        = getOmKeyLocationInfo(blockID4, pipeline);\n\n    omKeyLocationInfoList = new ArrayList<>();\n    omKeyLocationInfoList.add(omKeyLocationInfo3);\n    omKeyLocationInfoList.add(omKeyLocationInfo4);\n    omKeyLocationInfoGroup = new OmKeyLocationInfoGroup(0,\n        omKeyLocationInfoList);\n\n    String key2 = ""key_two"";\n    writeDataToOm(reconOMMetadataManager, key2, bucket, volume, Collections\n        .singletonList(omKeyLocationInfoGroup));\n\n    omKey = omMetadataManager.getOzoneKey(volume, bucket, key2);\n    OMDBUpdateEvent keyEvent2 = new OMDBUpdateEvent.\n        OMUpdateEventBuilder<String, OmKeyInfo>()\n        .setKey(omKey)\n        .setAction(OMDBUpdateEvent.OMDBUpdateAction.DELETE)\n        .setTable(omMetadataManager.getKeyTable(getBucketLayout()).getName())\n        .build();\n\n    OMUpdateEventBatch omUpdateEventBatch = new OMUpdateEventBatch(new\n        ArrayList<OMDBUpdateEvent>() {{\n          add(keyEvent1);\n          add(keyEvent2);\n        }});\n\n    ContainerKeyMapperTask containerKeyMapperTask =\n        new ContainerKeyMapperTask(reconContainerMetadataManager);\n    containerKeyMapperTask.reprocess(reconOMMetadataManager);\n\n    keyPrefixesForContainer = reconContainerMetadataManager\n        .getKeyPrefixesForContainer(1);\n    assertEquals(1, keyPrefixesForContainer.size());\n\n    keyPrefixesForContainer = reconContainerMetadataManager\n        .getKeyPrefixesForContainer(2);\n    assertTrue(keyPrefixesForContainer.isEmpty());\n\n    keyPrefixesForContainer = reconContainerMetadataManager\n        .getKeyPrefixesForContainer(3);\n    assertEquals(1, keyPrefixesForContainer.size());\n\n    assertEquals(1, reconContainerMetadataManager.getKeyCountForContainer(1L));\n    assertEquals(0, reconContainerMetadataManager.getKeyCountForContainer(2L));\n    assertEquals(1, reconContainerMetadataManager.getKeyCountForContainer(3L));\n\n    // Process PUT & DELETE event.\n    containerKeyMapperTask.process(omUpdateEventBatch);\n\n    keyPrefixesForContainer = reconContainerMetadataManager\n        .getKeyPrefixesForContainer(1);\n    assertEquals(1, keyPrefixesForContainer.size());\n\n    keyPrefixesForContainer = reconContainerMetadataManager\n        .getKeyPrefixesForContainer(2);\n    assertEquals(1, keyPrefixesForContainer.size());\n\n    keyPrefixesForContainer = reconContainerMetadataManager\n        .getKeyPrefixesForContainer(3);\n    assertTrue(keyPrefixesForContainer.isEmpty());\n\n    assertEquals(1, reconContainerMetadataManager.getKeyCountForContainer(1L));\n    assertEquals(1, reconContainerMetadataManager.getKeyCountForContainer(2L));\n    assertEquals(0, reconContainerMetadataManager.getKeyCountForContainer(3L));\n\n    // Test if container count is updated\n    assertEquals(3, reconContainerMetadataManager.getCountForContainers());\n  }\n']",OME;Process;IOException;key;Prefix;new;Builder;Event;Event;Block,1.862645149230957e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.472739219665527, -4.857836723327637, -5.3371100425720215, -6.442693710327148, -5.483206748962402, -0.022782370448112488]",0.9774751663208008
1,"['  @Test\n  public void testReprocess() throws Exception {\n    NSSummary nonExistentSummary =\n            reconNamespaceSummaryManager.getNSSummary(BUCKET_ONE_OBJECT_ID);\n    Assert.assertNull(nonExistentSummary);\n\n    populateOMDB();\n\n    // write a NSSummary prior to reprocess and verify it got cleaned up after.\n    NSSummary staleNSSummary = new NSSummary();\n    reconNamespaceSummaryManager.storeNSSummary(-1L, staleNSSummary);\n    NSSummaryTask nsSummaryTask = new NSSummaryTask(\n            reconNamespaceSummaryManager);\n    nsSummaryTask.reprocess(reconOMMetadataManager);\n\n    Assert.assertNull(reconNamespaceSummaryManager.getNSSummary(-1L));\n    NSSummary nsSummaryForBucket1 =\n            reconNamespaceSummaryManager.getNSSummary(BUCKET_ONE_OBJECT_ID);\n    NSSummary nsSummaryForBucket2 =\n            reconNamespaceSummaryManager.getNSSummary(BUCKET_TWO_OBJECT_ID);\n    Assert.assertNotNull(nsSummaryForBucket1);\n    Assert.assertNotNull(nsSummaryForBucket2);\n\n    Assert.assertEquals(1, nsSummaryForBucket1.getNumOfFiles());\n    Assert.assertEquals(2, nsSummaryForBucket2.getNumOfFiles());\n\n    Assert.assertEquals(KEY_ONE_SIZE, nsSummaryForBucket1.getSizeOfFiles());\n    Assert.assertEquals(KEY_TWO_OLD_SIZE + KEY_FOUR_SIZE,\n            nsSummaryForBucket2.getSizeOfFiles());\n\n    int[] fileDistBucket1 = nsSummaryForBucket1.getFileSizeBucket();\n    int[] fileDistBucket2 = nsSummaryForBucket2.getFileSizeBucket();\n    Assert.assertEquals(ReconConstants.NUM_OF_BINS, fileDistBucket1.length);\n    Assert.assertEquals(ReconConstants.NUM_OF_BINS, fileDistBucket2.length);\n\n    Assert.assertEquals(1, fileDistBucket1[0]);\n    for (int i = 1; i < ReconConstants.NUM_OF_BINS; ++i) {\n      Assert.assertEquals(0, fileDistBucket1[i]);\n    }\n    Assert.assertEquals(1, fileDistBucket2[1]);\n    Assert.assertEquals(1, fileDistBucket2[2]);\n    for (int i = 0; i < ReconConstants.NUM_OF_BINS; ++i) {\n      if (i == 1 || i == 2) {\n        continue;\n      }\n      Assert.assertEquals(0, fileDistBucket2[i]);\n    }\n\n    // Bucket one has one dir, bucket two has none.\n    Set<Long> childDirBucketOne = nsSummaryForBucket1.getChildDir();\n    Set<Long> childDirBucketTwo = nsSummaryForBucket2.getChildDir();\n    Assert.assertEquals(1, childDirBucketOne.size());\n    bucketOneAns.clear();\n    bucketOneAns.add(DIR_ONE_OBJECT_ID);\n    Assert.assertEquals(bucketOneAns, childDirBucketOne);\n    Assert.assertEquals(0, childDirBucketTwo.size());\n\n    // Dir 1 has two dir: dir2 and dir3.\n    NSSummary nsSummaryInDir1 = reconNamespaceSummaryManager\n            .getNSSummary(DIR_ONE_OBJECT_ID);\n    Assert.assertNotNull(nsSummaryInDir1);\n    Set<Long> childDirForDirOne = nsSummaryInDir1.getChildDir();\n    Assert.assertEquals(2, childDirForDirOne.size());\n    dirOneAns.clear();\n    dirOneAns.add(DIR_TWO_OBJECT_ID);\n    dirOneAns.add(DIR_THREE_OBJECT_ID);\n    Assert.assertEquals(dirOneAns, childDirForDirOne);\n\n    NSSummary nsSummaryInDir2 = reconNamespaceSummaryManager\n            .getNSSummary(DIR_TWO_OBJECT_ID);\n    Assert.assertEquals(1, nsSummaryInDir2.getNumOfFiles());\n    Assert.assertEquals(KEY_THREE_SIZE, nsSummaryInDir2.getSizeOfFiles());\n\n    int[] fileDistForDir2 = nsSummaryInDir2.getFileSizeBucket();\n    Assert.assertEquals(ReconConstants.NUM_OF_BINS, fileDistForDir2.length);\n    Assert.assertEquals(1, fileDistForDir2[fileDistForDir2.length - 1]);\n    for (int i = 0; i < ReconConstants.NUM_OF_BINS - 1; ++i) {\n      Assert.assertEquals(0, fileDistForDir2[i]);\n    }\n    Assert.assertEquals(0, nsSummaryInDir2.getChildDir().size());\n\n    // bucket should have empty dirName\n    Assert.assertEquals(0, nsSummaryForBucket1.getDirName().length());\n    Assert.assertEquals(0, nsSummaryForBucket2.getDirName().length());\n    // check dirName is correctly written\n    Assert.assertEquals(DIR_ONE, nsSummaryInDir1.getDirName());\n    Assert.assertEquals(DIR_TWO, nsSummaryInDir2.getDirName());\n  }\n']",KEY;KEY;Assert;UCKET;Equals;OBJECT;prior;store;write;ONE,2.3283064365386963e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.94765117764473e-10;4.874891601502895e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.427283763885498, -5.056692600250244, -5.359055519104004, -6.4320969581604, -5.423640727996826, -0.02172132208943367]",0.9785128831863403
1,"[""  @Test\n  public void testProcess() throws Exception {\n    NSSummary nonExistentSummary =\n            reconNamespaceSummaryManager.getNSSummary(BUCKET_ONE_OBJECT_ID);\n    Assert.assertNull(nonExistentSummary);\n\n    populateOMDB();\n\n    // Events for keyTable change:\n    // put file5 under bucket 2\n    String omPutKey = BUCKET_TWO_OBJECT_ID + OM_KEY_PREFIX + FILE_FIVE;\n    OmKeyInfo omPutKeyInfo = buildOmKeyInfo(VOL, BUCKET_TWO, KEY_FIVE,\n            FILE_FIVE, KEY_FIVE_OBJECT_ID, BUCKET_TWO_OBJECT_ID, KEY_FIVE_SIZE);\n    OMDBUpdateEvent keyEvent1 = new OMDBUpdateEvent.\n            OMUpdateEventBuilder<String, OmKeyInfo>()\n            .setKey(omPutKey)\n            .setValue(omPutKeyInfo)\n            .setTable(omMetadataManager.getKeyTable(getBucketLayout())\n            .getName())\n            .setAction(OMDBUpdateEvent.OMDBUpdateAction.PUT)\n            .build();\n\n    // delete file 1 under bucket 1\n    String omDeleteKey = BUCKET_ONE_OBJECT_ID + OM_KEY_PREFIX + FILE_ONE;\n    OmKeyInfo omDeleteInfo = buildOmKeyInfo(VOL, BUCKET_ONE, KEY_ONE, FILE_ONE,\n            KEY_ONE_OBJECT_ID, BUCKET_ONE_OBJECT_ID);\n    OMDBUpdateEvent keyEvent2 = new OMDBUpdateEvent.\n            OMUpdateEventBuilder<String, OmKeyInfo>()\n            .setKey(omDeleteKey)\n            .setValue(omDeleteInfo)\n            .setTable(omMetadataManager.getKeyTable(getBucketLayout())\n            .getName())\n            .setAction(OMDBUpdateEvent.OMDBUpdateAction.DELETE)\n            .build();\n\n    // update file 2's size under bucket 2\n    String omUpdateKey = BUCKET_TWO_OBJECT_ID + OM_KEY_PREFIX + FILE_TWO;\n    OmKeyInfo omOldInfo = buildOmKeyInfo(VOL, BUCKET_TWO, KEY_TWO, FILE_TWO,\n            KEY_TWO_OBJECT_ID, BUCKET_TWO_OBJECT_ID, KEY_TWO_OLD_SIZE);\n    OmKeyInfo omUpdateInfo = buildOmKeyInfo(VOL, BUCKET_TWO, KEY_TWO, FILE_TWO,\n            KEY_TWO_OBJECT_ID, BUCKET_TWO_OBJECT_ID, KEY_TWO_UPDATE_SIZE);\n    OMDBUpdateEvent keyEvent3 = new OMDBUpdateEvent.\n            OMUpdateEventBuilder<String, OmKeyInfo>()\n            .setKey(omUpdateKey)\n            .setValue(omUpdateInfo)\n            .setOldValue(omOldInfo)\n            .setTable(omMetadataManager.getKeyTable(getBucketLayout())\n            .getName())\n            .setAction(OMDBUpdateEvent.OMDBUpdateAction.UPDATE)\n            .build();\n\n    // Events for DirectoryTable change:\n    // add dir 4 under bucket 1\n    String omDirPutKey1 = BUCKET_ONE_OBJECT_ID + OM_KEY_PREFIX + DIR_FOUR;\n    OmDirectoryInfo omDirPutValue1 = buildOmDirInfo(DIR_FOUR,\n            DIR_FOUR_OBJECT_ID, BUCKET_ONE_OBJECT_ID);\n    OMDBUpdateEvent keyEvent4 = new OMDBUpdateEvent.\n            OMUpdateEventBuilder<String, OmDirectoryInfo>()\n            .setKey(omDirPutKey1)\n            .setValue(omDirPutValue1)\n            .setAction(OMDBUpdateEvent.OMDBUpdateAction.PUT)\n            .setTable(omMetadataManager.getDirectoryTable().getName())\n            .build();\n\n    // add dir 5 under bucket 2\n    String omDirPutKey2 = BUCKET_TWO_OBJECT_ID + OM_KEY_PREFIX + DIR_FIVE;\n    OmDirectoryInfo omDirPutValue2 = buildOmDirInfo(DIR_FIVE,\n            DIR_FIVE_OBJECT_ID, BUCKET_TWO_OBJECT_ID);\n    OMDBUpdateEvent keyEvent5 = new OMDBUpdateEvent.\n            OMUpdateEventBuilder<String, OmDirectoryInfo>()\n            .setKey(omDirPutKey2)\n            .setValue(omDirPutValue2)\n            .setAction(OMDBUpdateEvent.OMDBUpdateAction.PUT)\n            .setTable(omMetadataManager.getDirectoryTable().getName())\n            .build();\n\n    // delete dir 3 under dir 1\n    String omDirDeleteKey = DIR_ONE_OBJECT_ID + OM_KEY_PREFIX + DIR_THREE;\n    OmDirectoryInfo omDirDeleteValue = buildOmDirInfo(DIR_FIVE,\n            DIR_THREE_OBJECT_ID, DIR_ONE_OBJECT_ID);\n    OMDBUpdateEvent keyEvent6 = new OMDBUpdateEvent.\n            OMUpdateEventBuilder<String, OmDirectoryInfo>()\n            .setKey(omDirDeleteKey)\n            .setValue(omDirDeleteValue)\n            .setAction(OMDBUpdateEvent.OMDBUpdateAction.DELETE)\n            .setTable(omMetadataManager.getDirectoryTable().getName())\n            .build();\n\n    // rename dir1\n    String omDirUpdateKey = BUCKET_ONE_OBJECT_ID + OM_KEY_PREFIX + DIR_ONE;\n    OmDirectoryInfo omDirOldValue = buildOmDirInfo(DIR_ONE,\n            DIR_ONE_OBJECT_ID, BUCKET_ONE_OBJECT_ID);\n    OmDirectoryInfo omDirUpdateValue = buildOmDirInfo(DIR_ONE_RENAME,\n            DIR_ONE_OBJECT_ID, BUCKET_ONE_OBJECT_ID);\n    OMDBUpdateEvent keyEvent7 = new OMDBUpdateEvent.\n            OMUpdateEventBuilder<String, OmDirectoryInfo>()\n            .setKey(omDirUpdateKey)\n            .setValue(omDirUpdateValue)\n            .setOldValue(omDirOldValue)\n            .setAction(OMDBUpdateEvent.OMDBUpdateAction.UPDATE)\n            .setTable(omMetadataManager.getDirectoryTable().getName())\n            .build();\n\n    OMUpdateEventBatch omUpdateEventBatch = new OMUpdateEventBatch(\n            new ArrayList<OMDBUpdateEvent>() {{\n              add(keyEvent1);\n              add(keyEvent2);\n              add(keyEvent3);\n              add(keyEvent4);\n              add(keyEvent5);\n              add(keyEvent6);\n              add(keyEvent7);\n          }});\n\n    NSSummaryTask nsSummaryTask = new NSSummaryTask(\n            reconNamespaceSummaryManager);\n    nsSummaryTask.reprocess(reconOMMetadataManager);\n    nsSummaryTask.process(omUpdateEventBatch);\n\n    // file 5 is added under bucket 2, so bucket 2 has 3 keys now\n    // file 1 is gone, so bucket 1 is empty now\n    // file 2 is updated with new datasize,\n    // so file size dist for bucket 2 should be updated\n    NSSummary nsSummaryForBucket1 =\n            reconNamespaceSummaryManager.getNSSummary(BUCKET_ONE_OBJECT_ID);\n    Assert.assertNotNull(nsSummaryForBucket1);\n    Assert.assertEquals(0, nsSummaryForBucket1.getNumOfFiles());\n\n    Set<Long> childDirBucket1 = nsSummaryForBucket1.getChildDir();\n    // after put dir4, bucket1 now has two child dirs: dir1 and dir4\n    Assert.assertEquals(2, childDirBucket1.size());\n    bucketOneAns.clear();\n    bucketOneAns.add(DIR_ONE_OBJECT_ID);\n    bucketOneAns.add(DIR_FOUR_OBJECT_ID);\n    Assert.assertEquals(bucketOneAns, childDirBucket1);\n\n    NSSummary nsSummaryForBucket2 =\n            reconNamespaceSummaryManager.getNSSummary(BUCKET_TWO_OBJECT_ID);\n    Assert.assertNotNull(nsSummaryForBucket2);\n    Assert.assertEquals(3, nsSummaryForBucket2.getNumOfFiles());\n    // key 4 + key 5 + updated key 2\n    Assert.assertEquals(KEY_FOUR_SIZE + KEY_FIVE_SIZE + KEY_TWO_UPDATE_SIZE,\n            nsSummaryForBucket2.getSizeOfFiles());\n\n    int[] fileSizeDist = nsSummaryForBucket2.getFileSizeBucket();\n    Assert.assertEquals(ReconConstants.NUM_OF_BINS, fileSizeDist.length);\n    // 1023L and 100L\n    Assert.assertEquals(2, fileSizeDist[0]);\n    // 2050L\n    Assert.assertEquals(1, fileSizeDist[2]);\n    for (int i = 0; i < ReconConstants.NUM_OF_BINS; ++i) {\n      if (i == 0 || i == 2) {\n        continue;\n      }\n      Assert.assertEquals(0, fileSizeDist[i]);\n    }\n\n    // after put dir5, bucket 2 now has one dir\n    Set<Long> childDirBucket2 = nsSummaryForBucket2.getChildDir();\n    Assert.assertEquals(1, childDirBucket2.size());\n    bucketTwoAns.add(DIR_FIVE_OBJECT_ID);\n    Assert.assertEquals(bucketTwoAns, childDirBucket2);\n\n    // after delete dir 3, dir 1 now has only one dir: dir2\n    NSSummary nsSummaryForDir1 = reconNamespaceSummaryManager\n            .getNSSummary(DIR_ONE_OBJECT_ID);\n    Assert.assertNotNull(nsSummaryForDir1);\n    Set<Long> childDirForDir1 = nsSummaryForDir1.getChildDir();\n    Assert.assertEquals(1, childDirForDir1.size());\n    dirOneAns.clear();\n    dirOneAns.add(DIR_TWO_OBJECT_ID);\n    Assert.assertEquals(dirOneAns, childDirForDir1);\n\n    // after renaming dir1, check its new name\n    Assert.assertEquals(DIR_ONE_RENAME, nsSummaryForDir1.getDirName());\n  }\n""]",IVE;VOL;FILE;REFIX;bucket;KEY;OBJECT;OBJECT;Summary;KEY,7.450580596923828e-09;3.725290298461914e-09;3.259629011154175e-09;1.949956640601158e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5570549294352531e-09;1.4551915228366852e-09;1.280568540096283e-09;1.1059455573558807e-09,5,5,"[-5.463835716247559, -5.008454322814941, -5.400383472442627, -6.466620445251465, -5.465935707092285, -0.021444479003548622]",0.9787838459014893
1,"['  @Test\n  public void testReprocess() throws IOException {\n    OmKeyInfo omKeyInfo1 = mock(OmKeyInfo.class);\n    given(omKeyInfo1.getKeyName()).willReturn(""key1"");\n    given(omKeyInfo1.getVolumeName()).willReturn(""vol1"");\n    given(omKeyInfo1.getBucketName()).willReturn(""bucket1"");\n    given(omKeyInfo1.getDataSize()).willReturn(1000L);\n\n    OmKeyInfo omKeyInfo2 = mock(OmKeyInfo.class);\n    given(omKeyInfo2.getKeyName()).willReturn(""key2"");\n    given(omKeyInfo2.getVolumeName()).willReturn(""vol1"");\n    given(omKeyInfo2.getBucketName()).willReturn(""bucket1"");\n    given(omKeyInfo2.getDataSize()).willReturn(100000L);\n\n    OmKeyInfo omKeyInfo3 = mock(OmKeyInfo.class);\n    given(omKeyInfo3.getKeyName()).willReturn(""key3"");\n    given(omKeyInfo3.getVolumeName()).willReturn(""vol1"");\n    given(omKeyInfo3.getBucketName()).willReturn(""bucket1"");\n    given(omKeyInfo3.getDataSize()).willReturn(1125899906842624L * 4); // 4PB\n\n    OMMetadataManager omMetadataManager = mock(OmMetadataManagerImpl.class);\n    TypedTable<String, OmKeyInfo> keyTable = mock(TypedTable.class);\n\n    TypedTable.TypedTableIterator mockKeyIter = mock(TypedTable\n        .TypedTableIterator.class);\n    TypedTable.TypedKeyValue mockKeyValue = mock(\n        TypedTable.TypedKeyValue.class);\n\n    when(keyTable.iterator()).thenReturn(mockKeyIter);\n    when(omMetadataManager.getKeyTable(getBucketLayout())).thenReturn(keyTable);\n    when(mockKeyIter.hasNext())\n        .thenReturn(true)\n        .thenReturn(true)\n        .thenReturn(true)\n        .thenReturn(false);\n    when(mockKeyIter.next()).thenReturn(mockKeyValue);\n    when(mockKeyValue.getValue())\n        .thenReturn(omKeyInfo1)\n        .thenReturn(omKeyInfo2)\n        .thenReturn(omKeyInfo3);\n\n    // Reprocess could be called from table having existing entries. Adding\n    // an entry to simulate that.\n    fileCountBySizeDao.insert(\n        new FileCountBySize(""vol1"", ""bucket1"", 1024L, 10L));\n\n    Pair<String, Boolean> result =\n        fileSizeCountTask.reprocess(omMetadataManager);\n    assertTrue(result.getRight());\n\n    assertEquals(3, fileCountBySizeDao.count());\n    Record3<String, String, Long> recordToFind = dslContext\n        .newRecord(FILE_COUNT_BY_SIZE.VOLUME,\n        FILE_COUNT_BY_SIZE.BUCKET,\n        FILE_COUNT_BY_SIZE.FILE_SIZE)\n        .value1(""vol1"")\n        .value2(""bucket1"")\n        .value3(1024L);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n    // file size upper bound for 100000L is 131072L (next highest power of 2)\n    recordToFind.value3(131072L);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n    // file size upper bound for 4PB is Long.MAX_VALUE\n    recordToFind.value3(Long.MAX_VALUE);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n  }\n']",Key;Typed;Key;key;mock;Iter;Value;iterator;Om;mock,9.313225746154785e-09;4.6566128730773926e-09;3.026798367500305e-09;2.4156179279088974e-09;2.3283064365386963e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3096723705530167e-09;1.1641532182693481e-09,5,5,"[-5.457208633422852, -5.036702632904053, -5.387374401092529, -6.460380554199219, -5.425268173217773, -0.021532801911234856]",0.9786973595619202
1,"['  @Test\n  public void testProcess() {\n    // Write 2 keys.\n    OmKeyInfo toBeDeletedKey = mock(OmKeyInfo.class);\n    given(toBeDeletedKey.getVolumeName()).willReturn(""vol1"");\n    given(toBeDeletedKey.getBucketName()).willReturn(""bucket1"");\n    given(toBeDeletedKey.getKeyName()).willReturn(""deletedKey"");\n    given(toBeDeletedKey.getDataSize()).willReturn(2000L); // Bin 1\n    OMDBUpdateEvent event = new OMUpdateEventBuilder()\n        .setAction(PUT)\n        .setKey(""deletedKey"")\n        .setValue(toBeDeletedKey)\n        .setTable(OmMetadataManagerImpl.KEY_TABLE)\n        .build();\n\n    OmKeyInfo toBeUpdatedKey = mock(OmKeyInfo.class);\n    given(toBeUpdatedKey.getVolumeName()).willReturn(""vol1"");\n    given(toBeUpdatedKey.getBucketName()).willReturn(""bucket1"");\n    given(toBeUpdatedKey.getKeyName()).willReturn(""updatedKey"");\n    given(toBeUpdatedKey.getDataSize()).willReturn(10000L); // Bin 4\n    OMDBUpdateEvent event2 = new OMUpdateEventBuilder()\n        .setAction(PUT)\n        .setKey(""updatedKey"")\n        .setValue(toBeUpdatedKey)\n        .setTable(OmMetadataManagerImpl.KEY_TABLE)\n        .build();\n\n    OMUpdateEventBatch omUpdateEventBatch =\n        new OMUpdateEventBatch(Arrays.asList(event, event2));\n    fileSizeCountTask.process(omUpdateEventBatch);\n\n    // Verify 2 keys are in correct bins.\n    assertEquals(2, fileCountBySizeDao.count());\n    Record3<String, String, Long> recordToFind = dslContext\n        .newRecord(FILE_COUNT_BY_SIZE.VOLUME,\n            FILE_COUNT_BY_SIZE.BUCKET,\n            FILE_COUNT_BY_SIZE.FILE_SIZE)\n        .value1(""vol1"")\n        .value2(""bucket1"")\n        .value3(2048L);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n    // file size upper bound for 10000L is 16384L (next highest power of 2)\n    recordToFind.value3(16384L);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n\n    // Add new key.\n    OmKeyInfo newKey = mock(OmKeyInfo.class);\n    given(newKey.getVolumeName()).willReturn(""vol1"");\n    given(newKey.getBucketName()).willReturn(""bucket1"");\n    given(newKey.getKeyName()).willReturn(""newKey"");\n    given(newKey.getDataSize()).willReturn(1000L); // Bin 0\n    OMDBUpdateEvent putEvent = new OMUpdateEventBuilder()\n        .setAction(PUT)\n        .setKey(""newKey"")\n        .setValue(newKey)\n        .setTable(OmMetadataManagerImpl.KEY_TABLE)\n        .build();\n\n    // Update existing key.\n    OmKeyInfo updatedKey = mock(OmKeyInfo.class);\n    given(updatedKey.getVolumeName()).willReturn(""vol1"");\n    given(updatedKey.getBucketName()).willReturn(""bucket1"");\n    given(updatedKey.getKeyName()).willReturn(""updatedKey"");\n    given(updatedKey.getDataSize()).willReturn(50000L); // Bin 6\n    OMDBUpdateEvent updateEvent = new OMUpdateEventBuilder()\n        .setAction(UPDATE)\n        .setKey(""updatedKey"")\n        .setValue(updatedKey)\n        .setOldValue(toBeUpdatedKey)\n        .setTable(OmMetadataManagerImpl.KEY_TABLE)\n        .build();\n\n    // Delete another existing key.\n    OMDBUpdateEvent deleteEvent = new OMUpdateEventBuilder()\n        .setAction(DELETE)\n        .setKey(""deletedKey"")\n        .setValue(toBeDeletedKey)\n        .setTable(OmMetadataManagerImpl.KEY_TABLE)\n        .build();\n\n    omUpdateEventBatch = new OMUpdateEventBatch(\n        Arrays.asList(updateEvent, putEvent, deleteEvent));\n    fileSizeCountTask.process(omUpdateEventBatch);\n\n    assertEquals(4, fileCountBySizeDao.count());\n    recordToFind.value3(1024L);\n    assertEquals(1, fileCountBySizeDao.findById(recordToFind)\n        .getCount().longValue());\n    recordToFind.value3(2048L);\n    assertEquals(0, fileCountBySizeDao.findById(recordToFind)\n        .getCount().longValue());\n    recordToFind.value3(16384L);\n    assertEquals(0, fileCountBySizeDao.findById(recordToFind)\n        .getCount().longValue());\n    recordToFind.value3(65536L);\n    assertEquals(1, fileCountBySizeDao.findById(recordToFind)\n        .getCount().longValue());\n  }\n']",Arrays;OMDBUpdate;OMUpdate;Process;OMUpdate;updated;new;OMUpdate;Be;Metadata,1.4551915228366852e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;8.149072527885437e-10;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10,5,5,"[-5.464192867279053, -5.030766010284424, -5.389843940734863, -6.445172309875488, -5.4425859451293945, -0.02147761546075344]",0.9787513017654419
1,"['  @Test\n  public void testReprocessAtScale() throws IOException {\n    // generate mocks for 2 volumes, 500 buckets each volume\n    // and 42 keys in each bucket.\n    List<OmKeyInfo> omKeyInfoList = new ArrayList<>();\n    List<Boolean> hasNextAnswer = new ArrayList<>();\n    for (int volIndex = 1; volIndex <= 2; volIndex++) {\n      for (int bktIndex = 1; bktIndex <= 500; bktIndex++) {\n        for (int keyIndex = 1; keyIndex <= 42; keyIndex++) {\n          OmKeyInfo omKeyInfo = mock(OmKeyInfo.class);\n          given(omKeyInfo.getKeyName()).willReturn(""key"" + keyIndex);\n          given(omKeyInfo.getVolumeName()).willReturn(""vol"" + volIndex);\n          given(omKeyInfo.getBucketName()).willReturn(""bucket"" + bktIndex);\n          // Place keys in each bin\n          long fileSize = (long)Math.pow(2, keyIndex + 9) - 1L;\n          given(omKeyInfo.getDataSize()).willReturn(fileSize);\n          omKeyInfoList.add(omKeyInfo);\n          hasNextAnswer.add(true);\n        }\n      }\n    }\n    hasNextAnswer.add(false);\n\n    OMMetadataManager omMetadataManager = mock(OmMetadataManagerImpl.class);\n    TypedTable<String, OmKeyInfo> keyTable = mock(TypedTable.class);\n\n    TypedTable.TypedTableIterator mockKeyIter = mock(TypedTable\n        .TypedTableIterator.class);\n    TypedTable.TypedKeyValue mockKeyValue = mock(\n        TypedTable.TypedKeyValue.class);\n\n    when(keyTable.iterator()).thenReturn(mockKeyIter);\n    when(omMetadataManager.getKeyTable(getBucketLayout())).thenReturn(keyTable);\n    when(mockKeyIter.hasNext())\n        .thenAnswer(AdditionalAnswers.returnsElementsOf(hasNextAnswer));\n    when(mockKeyIter.next()).thenReturn(mockKeyValue);\n    when(mockKeyValue.getValue())\n        .thenAnswer(AdditionalAnswers.returnsElementsOf(omKeyInfoList));\n\n    Pair<String, Boolean> result =\n        fileSizeCountTask.reprocess(omMetadataManager);\n    assertTrue(result.getRight());\n\n    // 2 volumes * 500 buckets * 42 bins = 42000 rows\n    assertEquals(42000, fileCountBySizeDao.count());\n    Record3<String, String, Long> recordToFind = dslContext\n        .newRecord(FILE_COUNT_BY_SIZE.VOLUME,\n            FILE_COUNT_BY_SIZE.BUCKET,\n            FILE_COUNT_BY_SIZE.FILE_SIZE)\n        .value1(""vol1"")\n        .value2(""bucket1"")\n        .value3(1024L);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n    // file size upper bound for 100000L is 131072L (next highest power of 2)\n    recordToFind.value1(""vol1"");\n    recordToFind.value3(131072L);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n    recordToFind.value2(""bucket500"");\n    recordToFind.value3(Long.MAX_VALUE);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n  }\n']",mock;Reprocess;mock;Iterator;get;mock;generate;mock;Typed;Typed,3.3178366720676422e-09;2.444721758365631e-09;2.3283064365386963e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10,5,5,"[-5.501667022705078, -4.958513259887695, -5.34932804107666, -6.434189796447754, -5.479778289794922, -0.021867938339710236]",0.9783692955970764
1,"['  @Test\n  public void testProcessAtScale() {\n    // Write 10000 keys.\n    List<OMDBUpdateEvent> omDbEventList = new ArrayList<>();\n    List<OmKeyInfo> omKeyInfoList = new ArrayList<>();\n    for (int volIndex = 1; volIndex <= 10; volIndex++) {\n      for (int bktIndex = 1; bktIndex <= 100; bktIndex++) {\n        for (int keyIndex = 1; keyIndex <= 10; keyIndex++) {\n          OmKeyInfo omKeyInfo = mock(OmKeyInfo.class);\n          given(omKeyInfo.getKeyName()).willReturn(""key"" + keyIndex);\n          given(omKeyInfo.getVolumeName()).willReturn(""vol"" + volIndex);\n          given(omKeyInfo.getBucketName()).willReturn(""bucket"" + bktIndex);\n          // Place keys in each bin\n          long fileSize = (long)Math.pow(2, keyIndex + 9) - 1L;\n          given(omKeyInfo.getDataSize()).willReturn(fileSize);\n          omKeyInfoList.add(omKeyInfo);\n          omDbEventList.add(new OMUpdateEventBuilder()\n              .setAction(PUT)\n              .setKey(""key"" + keyIndex)\n              .setValue(omKeyInfo)\n              .setTable(OmMetadataManagerImpl.KEY_TABLE)\n              .build());\n        }\n      }\n    }\n\n    OMUpdateEventBatch omUpdateEventBatch =\n        new OMUpdateEventBatch(omDbEventList);\n    fileSizeCountTask.process(omUpdateEventBatch);\n\n    // Verify 2 keys are in correct bins.\n    assertEquals(10000, fileCountBySizeDao.count());\n    Record3<String, String, Long> recordToFind = dslContext\n        .newRecord(FILE_COUNT_BY_SIZE.VOLUME,\n            FILE_COUNT_BY_SIZE.BUCKET,\n            FILE_COUNT_BY_SIZE.FILE_SIZE)\n        .value1(""vol1"")\n        .value2(""bucket1"")\n        .value3(2048L);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n    recordToFind.value1(""vol10"");\n    recordToFind.value2(""bucket100"");\n    // file size upper bound for 10000L is 16384L (next highest power of 2)\n    recordToFind.value3(16384L);\n    assertEquals(1L,\n        fileCountBySizeDao.findById(recordToFind).getCount().longValue());\n\n    // Process 500 deletes and 500 updates\n    omDbEventList = new ArrayList<>();\n    for (int volIndex = 1; volIndex <= 1; volIndex++) {\n      for (int bktIndex = 1; bktIndex <= 100; bktIndex++) {\n        for (int keyIndex = 1; keyIndex <= 10; keyIndex++) {\n          OmKeyInfo omKeyInfo = mock(OmKeyInfo.class);\n          given(omKeyInfo.getKeyName()).willReturn(""key"" + keyIndex);\n          given(omKeyInfo.getVolumeName()).willReturn(""vol"" + volIndex);\n          given(omKeyInfo.getBucketName()).willReturn(""bucket"" + bktIndex);\n          if (keyIndex <= 5) {\n            long fileSize = (long)Math.pow(2, keyIndex + 9) - 1L;\n            given(omKeyInfo.getDataSize()).willReturn(fileSize);\n            omDbEventList.add(new OMUpdateEventBuilder()\n                .setAction(DELETE)\n                .setKey(""key"" + keyIndex)\n                .setValue(omKeyInfo)\n                .setTable(OmMetadataManagerImpl.KEY_TABLE)\n                .build());\n          } else {\n            // update all the files with keyIndex > 5 to filesize 1023L\n            // so that they get into first bin\n            given(omKeyInfo.getDataSize()).willReturn(1023L);\n            omDbEventList.add(new OMUpdateEventBuilder()\n                .setAction(UPDATE)\n                .setKey(""key"" + keyIndex)\n                .setValue(omKeyInfo)\n                .setTable(OmMetadataManagerImpl.KEY_TABLE)\n                .setOldValue(\n                    omKeyInfoList.get((volIndex * bktIndex) + keyIndex))\n                .build());\n          }\n        }\n      }\n    }\n\n    omUpdateEventBatch = new OMUpdateEventBatch(omDbEventList);\n    fileSizeCountTask.process(omUpdateEventBatch);\n\n    assertEquals(10000, fileCountBySizeDao.count());\n    recordToFind = dslContext\n        .newRecord(FILE_COUNT_BY_SIZE.VOLUME,\n            FILE_COUNT_BY_SIZE.BUCKET,\n            FILE_COUNT_BY_SIZE.FILE_SIZE)\n        .value1(""vol1"")\n        .value2(""bucket1"")\n        .value3(1024L);\n    // The update events on keys 6-10 should now put them under first bin 1024L\n    assertEquals(5, fileCountBySizeDao.findById(recordToFind)\n        .getCount().longValue());\n    recordToFind.value2(""bucket100"");\n    assertEquals(5, fileCountBySizeDao.findById(recordToFind)\n        .getCount().longValue());\n    recordToFind.value3(2048L);\n    assertEquals(0, fileCountBySizeDao.findById(recordToFind)\n        .getCount().longValue());\n    // Volumes 2 - 10 should not be affected by this process\n    recordToFind.value1(""vol2"");\n    assertEquals(1, fileCountBySizeDao.findById(recordToFind)\n        .getCount().longValue());\n  }\n']",OMUpdate;OMDBUpdate;List;Builder;Db;Write;add;set;om;om,2.3865140974521637e-09;1.862645149230957e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.459920883178711, -5.058080673217773, -5.382105350494385, -6.43861722946167, -5.445430755615234, -0.021350780501961708]",0.9788756370544434
1,"['  @Test\n  public void testRegisterTask() {\n    String taskName = ""Dummy_"" + System.currentTimeMillis();\n    DummyReconDBTask dummyReconDBTask =\n        new DummyReconDBTask(taskName, DummyReconDBTask.TaskType.ALWAYS_PASS);\n    reconTaskController.registerTask(dummyReconDBTask);\n    assertTrue(reconTaskController.getRegisteredTasks().size() == 1);\n    assertTrue(reconTaskController.getRegisteredTasks()\n        .get(dummyReconDBTask.getTaskName()) == dummyReconDBTask);\n  }\n']",Time;ALWAYS;dummy;Name;PASS;Recon;DBTask;recon;Register;ummy,5.587935447692871e-09;2.3865140974521637e-09;1.9208528101444244e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.2078089639544487e-09;1.076841726899147e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.502255916595459, -4.9679646492004395, -5.384546756744385, -6.484313488006592, -5.478423595428467, -0.021555552259087563]",0.978675127029419
1,"['  @Test\n  public void testConsumeOMEvents() throws Exception {\n    ReconOmTask reconOmTaskMock = getMockTask(""MockTask"");\n    when(reconOmTaskMock.process(any(OMUpdateEventBatch.class)))\n        .thenReturn(new ImmutablePair<>(""MockTask"", true));\n    reconTaskController.registerTask(reconOmTaskMock);\n    OMUpdateEventBatch omUpdateEventBatchMock = mock(OMUpdateEventBatch.class);\n    when(omUpdateEventBatchMock.getLastSequenceNumber()).thenReturn(100L);\n    when(omUpdateEventBatchMock.isEmpty()).thenReturn(false);\n\n    long startTime = System.currentTimeMillis();\n    reconTaskController.consumeOMEvents(\n        omUpdateEventBatchMock,\n        mock(OMMetadataManager.class));\n\n    verify(reconOmTaskMock, times(1))\n        .process(any());\n    long endTime = System.currentTimeMillis();\n\n    reconTaskStatusDao = getDao(ReconTaskStatusDao.class);\n    ReconTaskStatus reconTaskStatus = reconTaskStatusDao.findById(""MockTask"");\n    long taskTimeStamp = reconTaskStatus.getLastUpdatedTimestamp();\n    long seqNumber = reconTaskStatus.getLastUpdatedSeqNumber();\n\n    Assert.assertTrue(startTime <= taskTimeStamp\n        && taskTimeStamp <= endTime);\n    Assert.assertEquals(seqNumber,\n        omUpdateEventBatchMock.getLastSequenceNumber());\n  }\n']",Sequence;Number;mock;current;end;Time;start;ock;recon;any,9.167706593871117e-10;9.022187441587448e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.523645401000977, -4.9087395668029785, -5.359782695770264, -6.47463321685791, -5.513786315917969, -0.021885665133595467]",0.9783520698547363
1,"['  @Test\n  public void testFailedTaskRetryLogic() throws Exception {\n    String taskName = ""Dummy_"" + System.currentTimeMillis();\n\n    DummyReconDBTask dummyReconDBTask =\n        new DummyReconDBTask(taskName, DummyReconDBTask.TaskType.FAIL_ONCE);\n    reconTaskController.registerTask(dummyReconDBTask);\n\n    long currentTime = System.currentTimeMillis();\n    OMUpdateEventBatch omUpdateEventBatchMock = mock(OMUpdateEventBatch.class);\n    when(omUpdateEventBatchMock.isEmpty()).thenReturn(false);\n    when(omUpdateEventBatchMock.getLastSequenceNumber()).thenReturn(100L);\n\n    reconTaskController.consumeOMEvents(omUpdateEventBatchMock,\n        mock(OMMetadataManager.class));\n    assertFalse(reconTaskController.getRegisteredTasks().isEmpty());\n    assertEquals(dummyReconDBTask, reconTaskController.getRegisteredTasks()\n        .get(dummyReconDBTask.getTaskName()));\n\n    reconTaskStatusDao = getDao(ReconTaskStatusDao.class);\n    ReconTaskStatus dbRecord = reconTaskStatusDao.findById(taskName);\n\n    Assert.assertEquals(taskName, dbRecord.getTaskName());\n    Assert.assertTrue(\n        dbRecord.getLastUpdatedTimestamp() > currentTime);\n\n    Assert.assertEquals(Long.valueOf(100L), dbRecord.getLastUpdatedSeqNumber());\n  }\n']",ONCE;Time;Long;mock;OMUpdate;System;current;current;Time;ock,1.7171259969472885e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.478612422943115, -5.027365684509277, -5.350067138671875, -6.461112976074219, -5.458495140075684, -0.021532101556658745]",0.9786979556083679
1,"['  @Test\n  public void testBadBehavedTaskIsIgnored() throws Exception {\n    String taskName = ""Dummy_"" + System.currentTimeMillis();\n    DummyReconDBTask dummyReconDBTask =\n        new DummyReconDBTask(taskName, DummyReconDBTask.TaskType.ALWAYS_FAIL);\n    reconTaskController.registerTask(dummyReconDBTask);\n\n    OMUpdateEventBatch omUpdateEventBatchMock = mock(OMUpdateEventBatch.class);\n    when(omUpdateEventBatchMock.isEmpty()).thenReturn(false);\n    when(omUpdateEventBatchMock.getLastSequenceNumber()).thenReturn(100L);\n\n    OMMetadataManager omMetadataManagerMock = mock(OMMetadataManager.class);\n    for (int i = 0; i < 2; i++) {\n      reconTaskController.consumeOMEvents(omUpdateEventBatchMock,\n          omMetadataManagerMock);\n\n      assertFalse(reconTaskController.getRegisteredTasks().isEmpty());\n      assertEquals(dummyReconDBTask, reconTaskController.getRegisteredTasks()\n          .get(dummyReconDBTask.getTaskName()));\n    }\n\n    //Should be ignored now.\n    reconTaskController.consumeOMEvents(omUpdateEventBatchMock,\n        omMetadataManagerMock);\n    assertTrue(reconTaskController.getRegisteredTasks().isEmpty());\n\n    reconTaskStatusDao = getDao(ReconTaskStatusDao.class);\n    ReconTaskStatus dbRecord = reconTaskStatusDao.findById(taskName);\n\n    Assert.assertEquals(taskName, dbRecord.getTaskName());\n    Assert.assertEquals(Long.valueOf(0L), dbRecord.getLastUpdatedTimestamp());\n    Assert.assertEquals(Long.valueOf(0L), dbRecord.getLastUpdatedSeqNumber());\n  }\n']",Ignored;be;register;Sequence;Mill;ALWAYS;db;DBTask;om;Recon,3.026798367500305e-09;2.7939677238464355e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;7.421476766467094e-10;7.275957614183426e-10;5.966285243630409e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.453549385070801, -5.0285186767578125, -5.375815391540527, -6.459068298339844, -5.4536967277526855, -0.02153373509645462]",0.9786965847015381
1,"['  @Test\n  public void testReInitializeTasks() throws Exception {\n\n    ReconOMMetadataManager omMetadataManagerMock = mock(\n        ReconOMMetadataManager.class);\n    ReconOmTask reconOmTaskMock =\n        getMockTask(""MockTask2"");\n    when(reconOmTaskMock.reprocess(omMetadataManagerMock))\n        .thenReturn(new ImmutablePair<>(""MockTask2"", true));\n    when(omMetadataManagerMock.getLastSequenceNumberFromDB()\n    ).thenReturn(100L);\n\n    long startTime = System.currentTimeMillis();\n    reconTaskController.registerTask(reconOmTaskMock);\n    reconTaskController.reInitializeTasks(omMetadataManagerMock);\n    long endTime = System.currentTimeMillis();\n\n    verify(reconOmTaskMock, times(1))\n        .reprocess(omMetadataManagerMock);\n\n    verify(omMetadataManagerMock, times(1)\n    ).getLastSequenceNumberFromDB();\n\n    ReconTaskStatus reconTaskStatus = reconTaskStatusDao.findById(""MockTask2"");\n    long taskTimeStamp = reconTaskStatus.getLastUpdatedTimestamp();\n    long seqNumber = reconTaskStatus.getLastUpdatedSeqNumber();\n\n    Assert.assertTrue(startTime <= taskTimeStamp\n        && taskTimeStamp <= endTime);\n    Assert.assertEquals(seqNumber,\n        omMetadataManagerMock.getLastSequenceNumberFromDB());\n  }\n']",Metadata;mock;Assert;end;Stamp;ock;times;Metadata;verify;Task,1.7462298274040222e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.526046276092529, -4.871809959411621, -5.342469215393066, -6.452669143676758, -5.505122661590576, -0.022314416244626045]",0.9779325723648071
1,"['  @Test\n  public void testPut() throws Exception {\n    OzoneConfiguration configuration = createNewTestPath();\n    OmMetadataManagerImpl metaMgr = new OmMetadataManagerImpl(configuration);\n\n    // Create 1 volume, 2 keys and write to source OM DB.\n    String volumeKey = metaMgr.getVolumeKey(""sampleVol"");\n    OmVolumeArgs args =\n        OmVolumeArgs.newBuilder()\n            .setVolume(""sampleVol"")\n            .setAdminName(""bilbo"")\n            .setOwnerName(""bilbo"")\n            .build();\n    metaMgr.getVolumeTable().put(volumeKey, args);\n\n    OmKeyInfo firstKey = getOmKeyInfo(""sampleVol"", ""bucketOne"", ""key_one"");\n    metaMgr.getKeyTable(getBucketLayout())\n        .put(""/sampleVol/bucketOne/key_one"", firstKey);\n\n    OmKeyInfo secondKey = getOmKeyInfo(""sampleVol"", ""bucketOne"", ""key_two"");\n    metaMgr.getKeyTable(getBucketLayout())\n        .put(""/sampleVol/bucketOne/key_two"", secondKey);\n\n    // Write the secondKey to the target OM DB.\n    OzoneConfiguration conf2 = createNewTestPath();\n    OmMetadataManagerImpl reconOmmetaMgr = new OmMetadataManagerImpl(conf2);\n    reconOmmetaMgr.getKeyTable(getBucketLayout())\n        .put(""/sampleVol/bucketOne/key_two"", secondKey);\n\n    RDBStore rdbStore = (RDBStore) metaMgr.getStore();\n    RocksDB rocksDB = rdbStore.getDb();\n    // Get all updates from source DB. (3 PUTs)\n    TransactionLogIterator transactionLogIterator =\n        rocksDB.getUpdatesSince(0);\n    List<byte[]> writeBatches = new ArrayList<>();\n\n    while(transactionLogIterator.isValid()) {\n      TransactionLogIterator.BatchResult result =\n          transactionLogIterator.getBatch();\n      result.writeBatch().markWalTerminationPoint();\n      WriteBatch writeBatch = result.writeBatch();\n      writeBatches.add(writeBatch.data());\n      transactionLogIterator.next();\n    }\n\n    // OMDBUpdatesHandler has access to target DB. Hence it has only the\n    // ""secondKey"".\n    OMDBUpdatesHandler omdbUpdatesHandler =\n        new OMDBUpdatesHandler(reconOmmetaMgr);\n    for (byte[] data : writeBatches) {\n      WriteBatch writeBatch = new WriteBatch(data);\n      // Capture the 3 PUT events from source DB.\n      writeBatch.iterate(omdbUpdatesHandler);\n    }\n\n    List<OMDBUpdateEvent> events = omdbUpdatesHandler.getEvents();\n    assertEquals(3, events.size());\n\n    OMDBUpdateEvent volEvent = events.get(0);\n    assertEquals(PUT, volEvent.getAction());\n    assertEquals(volumeKey, volEvent.getKey());\n    assertEquals(args.getVolume(), ((OmVolumeArgs)volEvent.getValue())\n        .getVolume());\n\n    OMDBUpdateEvent keyEvent = events.get(1);\n    assertEquals(PUT, keyEvent.getAction());\n    assertEquals(""/sampleVol/bucketOne/key_one"", keyEvent.getKey());\n    assertNull(keyEvent.getOldValue());\n\n    OMDBUpdateEvent updateEvent = events.get(2);\n    assertEquals(UPDATE, updateEvent.getAction());\n    assertEquals(""/sampleVol/bucketOne/key_two"", updateEvent.getKey());\n    assertNotNull(updateEvent.getOldValue());\n    assertEquals(secondKey.getKeyName(),\n        ((OmKeyInfo)updateEvent.getOldValue()).getKeyName());\n  }\n']",configuration;Configuration;Put;Metadata;Exception;Om;Impl;OM;Manager;DB,1.862645149230957e-09;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.453424453735352, -5.024737358093262, -5.404769420623779, -6.466890811920166, -5.445827960968018, -0.021446695551276207]",0.9787816405296326
1,"['  @Test\n  public void testDelete() throws Exception {\n\n    OzoneConfiguration configuration = createNewTestPath();\n    OmMetadataManagerImpl metaMgr = new OmMetadataManagerImpl(configuration);\n\n    OzoneConfiguration conf2 = createNewTestPath();\n    OmMetadataManagerImpl metaMgrCopy = new OmMetadataManagerImpl(conf2);\n\n    // Write 1 volume, 1 key into source and target OM DBs.\n    String volumeKey = metaMgr.getVolumeKey(""sampleVol"");\n    String nonExistVolumeKey = metaMgr.getVolumeKey(""nonExistingVolume"");\n    OmVolumeArgs args =\n        OmVolumeArgs.newBuilder()\n            .setVolume(""sampleVol"")\n            .setAdminName(""bilbo"")\n            .setOwnerName(""bilbo"")\n            .build();\n    metaMgr.getVolumeTable().put(volumeKey, args);\n    metaMgrCopy.getVolumeTable().put(volumeKey, args);\n\n    OmKeyInfo omKeyInfo = getOmKeyInfo(""sampleVol"", ""bucketOne"", ""key_one"");\n    metaMgr.getKeyTable(getBucketLayout())\n        .put(""/sampleVol/bucketOne/key_one"", omKeyInfo);\n    metaMgrCopy.getKeyTable(getBucketLayout())\n        .put(""/sampleVol/bucketOne/key_one"", omKeyInfo);\n\n    // Delete the volume and key from target DB.\n    metaMgr.getKeyTable(getBucketLayout())\n        .delete(""/sampleVol/bucketOne/key_one"");\n    metaMgr.getVolumeTable().delete(volumeKey);\n    // Delete a non-existing volume and key\n    metaMgr.getKeyTable(getBucketLayout())\n        .delete(""/sampleVol/bucketOne/key_two"");\n    metaMgr.getVolumeTable().delete(metaMgr.getVolumeKey(""nonExistingVolume""));\n\n    RDBStore rdbStore = (RDBStore) metaMgr.getStore();\n    RocksDB rocksDB = rdbStore.getDb();\n    TransactionLogIterator transactionLogIterator =\n        rocksDB.getUpdatesSince(3);\n    List<byte[]> writeBatches = new ArrayList<>();\n\n    while(transactionLogIterator.isValid()) {\n      TransactionLogIterator.BatchResult result =\n          transactionLogIterator.getBatch();\n      result.writeBatch().markWalTerminationPoint();\n      WriteBatch writeBatch = result.writeBatch();\n      writeBatches.add(writeBatch.data());\n      transactionLogIterator.next();\n    }\n\n    // OMDBUpdatesHandler has access to target DB. So it has the volume and\n    // key.\n    OMDBUpdatesHandler omdbUpdatesHandler =\n        new OMDBUpdatesHandler(metaMgrCopy);\n    for (byte[] data : writeBatches) {\n      WriteBatch writeBatch = new WriteBatch(data);\n      writeBatch.iterate(omdbUpdatesHandler);\n    }\n\n    List<OMDBUpdateEvent> events = omdbUpdatesHandler.getEvents();\n    assertEquals(4, events.size());\n\n    OMDBUpdateEvent keyEvent = events.get(0);\n    assertEquals(OMDBUpdateEvent.OMDBUpdateAction.DELETE, keyEvent.getAction());\n    assertEquals(""/sampleVol/bucketOne/key_one"", keyEvent.getKey());\n    assertEquals(omKeyInfo, keyEvent.getValue());\n\n    OMDBUpdateEvent volEvent = events.get(1);\n    assertEquals(OMDBUpdateEvent.OMDBUpdateAction.DELETE, volEvent.getAction());\n    assertEquals(volumeKey, volEvent.getKey());\n    assertNotNull(volEvent.getValue());\n    OmVolumeArgs volumeInfo = (OmVolumeArgs) volEvent.getValue();\n    assertEquals(""sampleVol"", volumeInfo.getVolume());\n\n    // Assert the values of non existent keys are set to null.\n    OMDBUpdateEvent nonExistKey = events.get(2);\n    assertEquals(OMDBUpdateEvent.OMDBUpdateAction.DELETE,\n        nonExistKey.getAction());\n    assertEquals(""/sampleVol/bucketOne/key_two"", nonExistKey.getKey());\n    assertNull(nonExistKey.getValue());\n\n    OMDBUpdateEvent nonExistVolume = events.get(3);\n    assertEquals(OMDBUpdateEvent.OMDBUpdateAction.DELETE,\n        nonExistVolume.getAction());\n    assertEquals(nonExistVolumeKey, nonExistVolume.getKey());\n    assertNull(nonExistVolume.getValue());\n  }\n']",Table;Exception;Key;DB;Delete;Table;Layout;Table;sample;Key,1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.474164009094238, -4.995242118835449, -5.432387351989746, -6.490970134735107, -5.470958232879639, -0.021285664290189743]",0.9789392948150635
1,"['  @Test\n  public void testGetKeyType() throws IOException {\n    OzoneConfiguration configuration = createNewTestPath();\n    OmMetadataManagerImpl metaMgr = new OmMetadataManagerImpl(configuration);\n\n    assertEquals(String.class, omdbDefinition.getKeyType(\n        metaMgr.getKeyTable(getBucketLayout()).getName()).get());\n    assertEquals(OzoneTokenIdentifier.class, omdbDefinition.getKeyType(\n        metaMgr.getDelegationTokenTable().getName()).get());\n  }\n']",IOException;create;Metadata;Identifier;Type;Manager;md;Key;Table;Get,1.3969838619232178e-09;1.1350493878126144e-09;1.076841726899147e-09;9.89530235528946e-10;7.8580342233181e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.478750228881836, -5.0239033699035645, -5.469926834106445, -6.554841041564941, -5.467341423034668, -0.020825881510972977]",0.979389488697052
1,"['  @Test\n  public void testGetValueType() throws IOException {\n    OzoneConfiguration configuration = createNewTestPath();\n    OmMetadataManagerImpl metaMgr = new OmMetadataManagerImpl(configuration);\n\n    assertEquals(OmKeyInfo.class, omdbDefinition.getValueType(\n        metaMgr.getKeyTable(getBucketLayout()).getName()).get());\n    assertEquals(OmVolumeArgs.class, omdbDefinition.getValueType(\n        metaMgr.getVolumeTable().getName()).get());\n    assertEquals(OmBucketInfo.class, omdbDefinition.getValueType(\n        metaMgr.getBucketTable().getName()).get());\n  }\n']",New;Value;Metadata;Key;Impl;Info;Equals;ucket;Table;get,8.381903171539307e-09;2.3283064365386963e-09;2.270098775625229e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2514647096395493e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10,5,5,"[-5.491908073425293, -5.0140838623046875, -5.4430832862854, -6.547961235046387, -5.455298900604248, -0.021015703678131104]",0.9792035818099976
1,"['  @Test\n  public void testReprocess() {\n    OMMetadataManager omMetadataManager = mock(OmMetadataManagerImpl.class);\n    // Mock 5 rows in each table and test the count\n    for (String tableName: tableCountTask.getTaskTables()) {\n      TypedTable<String, Object> table = mock(TypedTable.class);\n      TypedTable.TypedTableIterator mockIter = mock(TypedTable\n          .TypedTableIterator.class);\n      when(table.iterator()).thenReturn(mockIter);\n      when(omMetadataManager.getTable(tableName)).thenReturn(table);\n      when(mockIter.hasNext())\n          .thenReturn(true)\n          .thenReturn(true)\n          .thenReturn(true)\n          .thenReturn(true)\n          .thenReturn(true)\n          .thenReturn(false);\n    }\n\n    Pair<String, Boolean> result = tableCountTask.reprocess(omMetadataManager);\n    assertTrue(result.getRight());\n\n    assertEquals(5L, getCountForTable(KEY_TABLE));\n    assertEquals(5L, getCountForTable(VOLUME_TABLE));\n    assertEquals(5L, getCountForTable(BUCKET_TABLE));\n    assertEquals(5L, getCountForTable(OPEN_KEY_TABLE));\n    assertEquals(5L, getCountForTable(DELETED_TABLE));\n  }\n']",Iter;Next;VOLUME;UCKET;Reprocess;when;Iter;mock;KEY;ock,2.7939677238464355e-09;1.7462298274040222e-09;1.280568540096283e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.499659061431885, -4.872066497802734, -5.363907337188721, -6.4411444664001465, -5.484695911407471, -0.022422246634960175]",0.9778273701667786
1,"['  @Test\n  public void testProcess() {\n    ArrayList<OMDBUpdateEvent> events = new ArrayList<>();\n    // Create 5 put, 1 delete and 1 update event for each table\n    for (String tableName: tableCountTask.getTaskTables()) {\n      for (int i=0; i<5; i++) {\n        events.add(getOMUpdateEvent(""item"" + i, null, tableName, PUT));\n      }\n      // for delete event, if value is set to null, the counter will not be\n      // decremented. This is because the value will be null if item does not\n      // exist in the database and there is no need to delete.\n      events.add(getOMUpdateEvent(""item0"", mock(OmKeyInfo.class), tableName,\n          DELETE));\n      events.add(getOMUpdateEvent(""item1"", null, tableName, UPDATE));\n    }\n    OMUpdateEventBatch omUpdateEventBatch = new OMUpdateEventBatch(events);\n    tableCountTask.process(omUpdateEventBatch);\n\n    // Verify 4 items in each table. (5 puts - 1 delete + 0 update)\n    assertEquals(4L, getCountForTable(KEY_TABLE));\n    assertEquals(4L, getCountForTable(VOLUME_TABLE));\n    assertEquals(4L, getCountForTable(BUCKET_TABLE));\n    assertEquals(4L, getCountForTable(OPEN_KEY_TABLE));\n    assertEquals(4L, getCountForTable(DELETED_TABLE));\n\n    // add a new key and simulate delete on non-existing item (value: null)\n    ArrayList<OMDBUpdateEvent> newEvents = new ArrayList<>();\n    for (String tableName: tableCountTask.getTaskTables()) {\n      newEvents.add(getOMUpdateEvent(""item5"", null, tableName, PUT));\n      // This delete event should be a noop since value is null\n      newEvents.add(getOMUpdateEvent(""item0"", null, tableName, DELETE));\n    }\n\n    omUpdateEventBatch = new OMUpdateEventBatch(newEvents);\n    tableCountTask.process(omUpdateEventBatch);\n\n    // Verify 5 items in each table. (1 new put + 0 delete)\n    assertEquals(5L, getCountForTable(KEY_TABLE));\n    assertEquals(5L, getCountForTable(VOLUME_TABLE));\n    assertEquals(5L, getCountForTable(BUCKET_TABLE));\n    assertEquals(5L, getCountForTable(OPEN_KEY_TABLE));\n    assertEquals(5L, getCountForTable(DELETED_TABLE));\n  }\n']",UT;OMDBUpdate;delete;Array;process;Create;items;new;key;TABLE,1.4551915228366852e-09;9.022187441587448e-10;6.984919309616089e-10;5.238689482212067e-10;5.093170329928398e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.471823692321777, -4.948416709899902, -5.357727527618408, -6.442235469818115, -5.47148323059082, -0.022048931568861008]",0.9781923890113831
1,"['  @Test\n  public void testReconSchemaCreated() throws Exception {\n    Connection connection = getConnection();\n    // Verify table definition\n    DatabaseMetaData metaData = connection.getMetaData();\n    ResultSet resultSet = metaData.getColumns(null, null,\n        CLUSTER_GROWTH_DAILY_TABLE_NAME, null);\n\n    List<Pair<String, Integer>> expectedPairs = new ArrayList<>();\n\n    expectedPairs.add(new ImmutablePair<>(""timestamp"", Types.TIMESTAMP));\n    expectedPairs.add(new ImmutablePair<>(""datanode_id"", Types.INTEGER));\n    expectedPairs.add(new ImmutablePair<>(""datanode_host"", Types.VARCHAR));\n    expectedPairs.add(new ImmutablePair<>(""rack_id"", Types.VARCHAR));\n    expectedPairs.add(new ImmutablePair<>(""available_size"", Types.BIGINT));\n    expectedPairs.add(new ImmutablePair<>(""used_size"", Types.BIGINT));\n    expectedPairs.add(new ImmutablePair<>(""container_count"", Types.INTEGER));\n    expectedPairs.add(new ImmutablePair<>(""block_count"", Types.INTEGER));\n\n    List<Pair<String, Integer>> actualPairs = new ArrayList<>();\n\n    while (resultSet.next()) {\n      actualPairs.add(new ImmutablePair<>(resultSet.getString(""COLUMN_NAME""),\n          resultSet.getInt(""DATA_TYPE"")));\n    }\n\n    Assert.assertEquals(8, actualPairs.size());\n    Assert.assertEquals(expectedPairs, actualPairs);\n\n    ResultSet resultSetFileCount = metaData.getColumns(null, null,\n        FILE_COUNT_BY_SIZE_TABLE_NAME, null);\n\n    List<Pair<String, Integer>> expectedPairsFileCount = new ArrayList<>();\n    expectedPairsFileCount.add(\n        new ImmutablePair<>(""volume"", Types.VARCHAR));\n    expectedPairsFileCount.add(\n        new ImmutablePair<>(""bucket"", Types.VARCHAR));\n    expectedPairsFileCount.add(\n        new ImmutablePair<>(""file_size"", Types.BIGINT));\n    expectedPairsFileCount.add(\n        new ImmutablePair<>(""count"", Types.BIGINT));\n\n    List<Pair<String, Integer>> actualPairsFileCount = new ArrayList<>();\n    while(resultSetFileCount.next()) {\n      actualPairsFileCount.add(new ImmutablePair<>(resultSetFileCount.getString(\n          ""COLUMN_NAME""), resultSetFileCount.getInt(\n              ""DATA_TYPE"")));\n    }\n    assertEquals(""Unexpected number of columns"",\n        4, actualPairsFileCount.size());\n    assertEquals(""Columns Do not Match "",\n        expectedPairsFileCount, actualPairsFileCount);\n  }\n']",Schema;Recon;Created;NAME;datanode;INTEGER;table;INT;rack;definition,7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.391223907470703, -4.992188930511475, -5.351741313934326, -6.415688514709473, -5.450605392456055, -0.022262537851929665]",0.9779835343360901
1,"['  @Test\n  public void testClusterGrowthDailyCRUDOperations() throws Exception {\n    // Verify table exists\n    Connection connection = getConnection();\n\n    DatabaseMetaData metaData = connection.getMetaData();\n    ResultSet resultSet = metaData.getTables(null, null,\n        CLUSTER_GROWTH_DAILY_TABLE_NAME, null);\n\n    while (resultSet.next()) {\n      Assert.assertEquals(CLUSTER_GROWTH_DAILY_TABLE_NAME,\n          resultSet.getString(""TABLE_NAME""));\n    }\n\n    ClusterGrowthDailyDao dao = getDao(ClusterGrowthDailyDao.class);\n    long now = System.currentTimeMillis();\n    ClusterGrowthDaily newRecord = new ClusterGrowthDaily();\n    newRecord.setTimestamp(new Timestamp(now));\n    newRecord.setDatanodeId(10);\n    newRecord.setDatanodeHost(""host1"");\n    newRecord.setRackId(""rack1"");\n    newRecord.setAvailableSize(1024L);\n    newRecord.setUsedSize(512L);\n    newRecord.setContainerCount(10);\n    newRecord.setBlockCount(25);\n\n    // Create\n    dao.insert(newRecord);\n\n    // Read\n    ClusterGrowthDaily dbRecord =\n        dao.findById(getDslContext().newRecord(CLUSTER_GROWTH_DAILY.TIMESTAMP,\n            CLUSTER_GROWTH_DAILY.DATANODE_ID)\n            .value1(new Timestamp(now)).value2(10));\n\n    Assert.assertEquals(""host1"", dbRecord.getDatanodeHost());\n    Assert.assertEquals(""rack1"", dbRecord.getRackId());\n    Assert.assertEquals(Long.valueOf(1024), dbRecord.getAvailableSize());\n    Assert.assertEquals(Long.valueOf(512), dbRecord.getUsedSize());\n    Assert.assertEquals(Integer.valueOf(10), dbRecord.getContainerCount());\n    Assert.assertEquals(Integer.valueOf(25), dbRecord.getBlockCount());\n\n    // Update\n    dbRecord.setUsedSize(700L);\n    dbRecord.setBlockCount(30);\n    dao.update(dbRecord);\n\n    // Read updated\n    dbRecord =\n        dao.findById(getDslContext().newRecord(CLUSTER_GROWTH_DAILY.TIMESTAMP,\n            CLUSTER_GROWTH_DAILY.DATANODE_ID)\n            .value1(new Timestamp(now)).value2(10));\n\n    Assert.assertEquals(Long.valueOf(700), dbRecord.getUsedSize());\n    Assert.assertEquals(Integer.valueOf(30), dbRecord.getBlockCount());\n\n    // Delete\n    dao.deleteById(getDslContext().newRecord(CLUSTER_GROWTH_DAILY.TIMESTAMP,\n        CLUSTER_GROWTH_DAILY.DATANODE_ID)\n        .value1(new Timestamp(now)).value2(10));\n\n    // Verify\n    dbRecord =\n        dao.findById(getDslContext().newRecord(CLUSTER_GROWTH_DAILY.TIMESTAMP,\n            CLUSTER_GROWTH_DAILY.DATANODE_ID)\n            .value1(new Timestamp(now)).value2(10));\n\n    Assert.assertNull(dbRecord);\n  }\n']",CRUDOperations;rowth;Timestamp;Cluster;ById;Timestamp;Verify;rowth;rack;ables,1.1757947504520416e-08;3.725290298461914e-09;3.026798367500305e-09;2.6775524020195007e-09;1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.493293285369873, -4.851596832275391, -5.369719505310059, -6.462570667266846, -5.528039455413818, -0.022368507459759712]",0.9778798222541809
1,"['  @Test\n  public void testFileCountBySizeCRUDOperations() throws SQLException {\n    Connection connection = getConnection();\n\n    DatabaseMetaData metaData = connection.getMetaData();\n    ResultSet resultSet = metaData.getTables(null, null,\n        FILE_COUNT_BY_SIZE_TABLE_NAME, null);\n\n    while (resultSet.next()) {\n      Assert.assertEquals(FILE_COUNT_BY_SIZE_TABLE_NAME,\n          resultSet.getString(""TABLE_NAME""));\n    }\n\n    FileCountBySizeDao fileCountBySizeDao = getDao(FileCountBySizeDao.class);\n    UtilizationSchemaDefinition utilizationSchemaDefinition =\n        getSchemaDefinition(UtilizationSchemaDefinition.class);\n\n    FileCountBySize newRecord = new FileCountBySize();\n    newRecord.setVolume(""vol1"");\n    newRecord.setBucket(""bucket1"");\n    newRecord.setFileSize(1024L);\n    newRecord.setCount(1L);\n\n    fileCountBySizeDao.insert(newRecord);\n\n    Record3<String, String, Long> recordToFind = utilizationSchemaDefinition\n        .getDSLContext().newRecord(FILE_COUNT_BY_SIZE.VOLUME,\n            FILE_COUNT_BY_SIZE.BUCKET,\n            FILE_COUNT_BY_SIZE.FILE_SIZE)\n        .value1(""vol1"")\n        .value2(""bucket1"")\n        .value3(1024L);\n    FileCountBySize dbRecord = fileCountBySizeDao.findById(recordToFind);\n    assertEquals(Long.valueOf(1), dbRecord.getCount());\n\n    dbRecord.setCount(2L);\n    fileCountBySizeDao.update(dbRecord);\n\n    dbRecord = fileCountBySizeDao.findById(recordToFind);\n    assertEquals(Long.valueOf(2), dbRecord.getCount());\n\n    Table<FileCountBySizeRecord> fileCountBySizeRecordTable =\n        fileCountBySizeDao.getTable();\n    List<UniqueKey<FileCountBySizeRecord>> tableKeys =\n        fileCountBySizeRecordTable.getKeys();\n    for (UniqueKey key : tableKeys) {\n      String name = key.getName();\n    }\n  }\n']",FILE;Database;Long;record;Size;ucket;DS;result;while;vol,1.280568540096283e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.426148891448975, -4.986994743347168, -5.379003524780273, -6.450608730316162, -5.457533359527588, -0.021920770406723022]",0.9783178567886353
1,"['  @Test\n  public void testSchemaCreated() throws Exception {\n\n    Connection connection = getConnection();\n    // Verify table definition\n    DatabaseMetaData metaData = connection.getMetaData();\n    ResultSet resultSet = metaData.getColumns(null, null,\n        RECON_TASK_STATUS_TABLE_NAME, null);\n\n    List<Pair<String, Integer>> expectedPairs = new ArrayList<>();\n\n    expectedPairs.add(new ImmutablePair<>(""task_name"", Types.VARCHAR));\n    expectedPairs.add(new ImmutablePair<>(""last_updated_timestamp"",\n        Types.BIGINT));\n    expectedPairs.add(new ImmutablePair<>(""last_updated_seq_number"",\n        Types.BIGINT));\n\n    List<Pair<String, Integer>> actualPairs = new ArrayList<>();\n\n    while (resultSet.next()) {\n      actualPairs.add(new ImmutablePair<>(\n          resultSet.getString(""COLUMN_NAME""),\n          resultSet.getInt(""DATA_TYPE"")));\n    }\n\n    Assert.assertEquals(3, actualPairs.size());\n    Assert.assertEquals(expectedPairs, actualPairs);\n  }\n']",Created;task;STATUS;Result;Column;Set;expected;NAME;meta;new,1.862645149230957e-09;1.1641532182693481e-09;1.0477378964424133e-09;7.8580342233181e-10;6.984919309616089e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.44602632522583, -4.989750385284424, -5.358315944671631, -6.450117111206055, -5.470986843109131, -0.021854175254702568]",0.9783830046653748
1,"['  @Test\n  public void testReconTaskStatusCRUDOperations() throws Exception {\n    // Verify table exists\n    Connection connection = getConnection();\n    DatabaseMetaData metaData = connection.getMetaData();\n    ResultSet resultSet = metaData.getTables(null, null,\n        RECON_TASK_STATUS_TABLE_NAME, null);\n\n    while (resultSet.next()) {\n      Assert.assertEquals(RECON_TASK_STATUS_TABLE_NAME,\n          resultSet.getString(""TABLE_NAME""));\n    }\n\n    ReconTaskStatusDao dao = getDao(ReconTaskStatusDao.class);\n    long now = System.currentTimeMillis();\n    ReconTaskStatus newRecord = new ReconTaskStatus();\n    newRecord.setTaskName(""HelloWorldTask"");\n    newRecord.setLastUpdatedTimestamp(now);\n    newRecord.setLastUpdatedSeqNumber(100L);\n\n    // Create\n    dao.insert(newRecord);\n\n    ReconTaskStatus newRecord2 = new ReconTaskStatus();\n    newRecord2.setTaskName(""GoodbyeWorldTask"");\n    newRecord2.setLastUpdatedTimestamp(now);\n    newRecord2.setLastUpdatedSeqNumber(200L);\n    // Create\n    dao.insert(newRecord2);\n\n    // Read\n    ReconTaskStatus dbRecord = dao.findById(""HelloWorldTask"");\n\n    Assert.assertEquals(""HelloWorldTask"", dbRecord.getTaskName());\n    Assert.assertEquals(Long.valueOf(now), dbRecord.getLastUpdatedTimestamp());\n    Assert.assertEquals(Long.valueOf(100), dbRecord.getLastUpdatedSeqNumber());\n\n    // Update\n    dbRecord.setLastUpdatedSeqNumber(150L);\n    dao.update(dbRecord);\n\n    // Read updated\n    dbRecord = dao.findById(""HelloWorldTask"");\n    Assert.assertEquals(Long.valueOf(150), dbRecord.getLastUpdatedSeqNumber());\n\n    // Delete\n    dao.deleteById(""GoodbyeWorldTask"");\n\n    // Verify\n    dbRecord = dao.findById(""GoodbyeWorldTask"");\n\n    Assert.assertNull(dbRecord);\n  }\n']",CRUDOperations;ao;Recon;exists;Exception;ables;Connection;Time;Updated;Equals,1.5133991837501526e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.42404842376709, -5.001770973205566, -5.3536858558654785, -6.433730602264404, -5.46238374710083, -0.021955056115984917]",0.9782841801643372
1,"['  @Test\n  public void testSchemaSetup() throws SQLException {\n    assertNotNull(getInjector());\n    assertNotNull(getConfiguration());\n    assertNotNull(getDslContext());\n    assertNotNull(getConnection());\n    RECON_DAO_LIST.forEach(dao -> {\n      assertNotNull(getDao(dao));\n    });\n    ReconTaskStatusDao dao = getDao(ReconTaskStatusDao.class);\n    dao.insert(new ReconTaskStatus(""TestTask"", 1L, 2L));\n    assertEquals(1, dao.findAll().size());\n\n    int numRows = getDslContext().delete(RECON_TASK_STATUS).execute();\n    assertEquals(1, numRows);\n    assertEquals(0, dao.findAll().size());\n  }\n']",sl;DA;Each;delete;get;Injector;Recon;RECON;ao;Status,2.0954757928848267e-09;1.1641532182693481e-09;8.440110832452774e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.500965595245361, -5.056486129760742, -5.480663776397705, -6.532114505767822, -5.454301834106445, -0.020560937002301216]",0.9796488881111145
1,"['  @Test\n  public void testSchemaSetup() throws SQLException {\n    assertNotNull(getInjector());\n    assertNotNull(getConfiguration());\n    assertNotNull(getDslContext());\n    assertNotNull(getConnection());\n    RECON_DAO_LIST.forEach(dao -> {\n      assertNotNull(getDao(dao));\n    });\n    ReconTaskStatusDao dao = getDao(ReconTaskStatusDao.class);\n    dao.insert(new ReconTaskStatus(""TestTask"", 1L, 2L));\n    assertEquals(1, dao.findAll().size());\n  }\n']",Schema;Configuration;RECON;Setup;Recon;ao;Null;DA;Recon;Context,1.57160684466362e-09;1.0477378964424133e-09;9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.51655912399292, -4.972152233123779, -5.4408769607543945, -6.507154941558838, -5.48746395111084, -0.021136395633220673]",0.979085385799408
1,"['  @Test\n  public void testIfStatsSchemaCreated() throws Exception {\n    Connection connection = getConnection();\n    // Verify table definition\n    DatabaseMetaData metaData = connection.getMetaData();\n    ResultSet resultSet = metaData.getColumns(null, null,\n        GLOBAL_STATS_TABLE_NAME, null);\n\n    List<Pair<String, Integer>> expectedPairs = new ArrayList<>();\n\n    expectedPairs.add(new ImmutablePair<>(""key"", Types.VARCHAR));\n    expectedPairs.add(new ImmutablePair<>(""value"", Types.BIGINT));\n    expectedPairs.add(new ImmutablePair<>(""last_updated_timestamp"",\n        Types.TIMESTAMP));\n\n    List<Pair<String, Integer>> actualPairs = new ArrayList<>();\n\n    while (resultSet.next()) {\n      actualPairs.add(new ImmutablePair<>(resultSet.getString(""COLUMN_NAME""),\n          resultSet.getInt(""DATA_TYPE"")));\n    }\n\n    Assert.assertEquals(3, actualPairs.size());\n    Assert.assertEquals(expectedPairs, actualPairs);\n  }\n']",Schema;GLOBAL;Column;IMESTAMP;Types;Immutable;add;INT;value;ARCHAR,9.167706593871117e-10;7.8580342233181e-10;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.446972846984863, -4.981657981872559, -5.357176780700684, -6.441950798034668, -5.478824138641357, -0.02189149707555771]",0.9783462882041931
1,"['  @Test\n  public void testGlobalStatsCRUDOperations() throws Exception {\n    Connection connection = getConnection();\n\n    DatabaseMetaData metaData = connection.getMetaData();\n    ResultSet resultSet = metaData.getTables(null, null,\n        GLOBAL_STATS_TABLE_NAME, null);\n\n    while (resultSet.next()) {\n      Assert.assertEquals(GLOBAL_STATS_TABLE_NAME,\n          resultSet.getString(""TABLE_NAME""));\n    }\n\n    GlobalStatsDao dao = getDao(GlobalStatsDao.class);\n\n    long now = System.currentTimeMillis();\n    GlobalStats newRecord = new GlobalStats();\n    newRecord.setLastUpdatedTimestamp(new Timestamp(now));\n    newRecord.setKey(""key1"");\n    newRecord.setValue(500L);\n\n    // Create\n    dao.insert(newRecord);\n    GlobalStats newRecord2 = new GlobalStats();\n    newRecord2.setLastUpdatedTimestamp(new Timestamp(now + 1000L));\n    newRecord2.setKey(""key2"");\n    newRecord2.setValue(10L);\n    dao.insert(newRecord2);\n\n    // Read\n    GlobalStats dbRecord = dao.findById(""key1"");\n\n    Assert.assertEquals(""key1"", dbRecord.getKey());\n    Assert.assertEquals(Long.valueOf(500), dbRecord.getValue());\n    Assert.assertEquals(new Timestamp(now), dbRecord.getLastUpdatedTimestamp());\n\n    dbRecord = dao.findById(""key2"");\n    Assert.assertEquals(""key2"", dbRecord.getKey());\n    Assert.assertEquals(Long.valueOf(10), dbRecord.getValue());\n    Assert.assertEquals(new Timestamp(now + 1000L),\n        dbRecord.getLastUpdatedTimestamp());\n\n    // Update\n    dbRecord.setValue(100L);\n    dbRecord.setLastUpdatedTimestamp(new Timestamp(now + 2000L));\n    dao.update(dbRecord);\n\n    // Read updated\n    dbRecord = dao.findById(""key2"");\n\n    Assert.assertEquals(new Timestamp(now + 2000L),\n        dbRecord.getLastUpdatedTimestamp());\n    Assert.assertEquals(Long.valueOf(100L), dbRecord.getValue());\n\n    // Delete\n    dao.deleteById(""key1"");\n\n    // Verify\n    dbRecord = dao.findById(""key1"");\n\n    Assert.assertNull(dbRecord);\n  }\n']",Timestamp;connection;Connection;Set;Timestamp;get;now;TABLE;next;Timestamp,2.561137080192566e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.1932570487260818e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.422031879425049, -5.025643348693848, -5.363549709320068, -6.453963279724121, -5.464773654937744, -0.021711289882659912]",0.9785227179527283
1,"['  @Test\n  public void testMissingRecordRetained() {\n    Set<ContainerReplica> replicas = new HashSet<>();\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    // Missing record should be retained\n    assertTrue(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, missingRecord()));\n    // Under / Over / Mis replicated should not be retained as if a container is\n    // missing then it is not in any other category.\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, underReplicatedRecord()));\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, overReplicatedRecord()));\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, misReplicatedRecord()));\n\n    replicas = generateReplicas(container, CLOSED, CLOSED, CLOSED);\n    status = new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, missingRecord()));\n  }\n']",replicas;Replica;Retained;Missing;under;Status;Container;new;retained;Record,1.862645149230957e-09;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.499724388122559, -5.040536403656006, -5.452611446380615, -6.489474296569824, -5.480348587036133, -0.02074415236711502]",0.9794695377349854
1,"['  @Test\n  public void testUnderReplicatedRecordRetainedAndUpdated() {\n    // under replicated container\n    Set<ContainerReplica> replicas =\n        generateReplicas(container, CLOSED, CLOSED);\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n\n    UnhealthyContainersRecord rec = underReplicatedRecord();\n    assertTrue(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, rec));\n    // The record actual count should be updated from 1 -> 2\n    assertEquals(2, rec.getActualReplicaCount().intValue());\n    assertEquals(1, rec.getReplicaDelta().intValue());\n\n    // Missing / Over / Mis replicated should not be retained\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, missingRecord()));\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, overReplicatedRecord()));\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, misReplicatedRecord()));\n\n    // Container is now replicated OK - should be removed.\n    replicas = generateReplicas(container, CLOSED, CLOSED, CLOSED);\n    status = new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, rec));\n  }\n']",Set;Retained;replicas;mis;new;generate;container;Delta;Or;False,1.6298145055770874e-09;9.313225746154785e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.464478015899658, -4.9837517738342285, -5.341925144195557, -6.391036510467529, -5.444052696228027, -0.02211061678826809]",0.9781320095062256
1,"['  @Test\n  public void testOverReplicatedRecordRetainedAndUpdated() {\n    // under replicated container\n    Set<ContainerReplica> replicas =\n        generateReplicas(container, CLOSED, CLOSED, CLOSED, CLOSED);\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n\n    UnhealthyContainersRecord rec = overReplicatedRecord();\n    assertTrue(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, rec));\n    // The record actual count should be updated from 5 -> 4\n    assertEquals(4, rec.getActualReplicaCount().intValue());\n    assertEquals(-1, rec.getReplicaDelta().intValue());\n\n    // Missing / Over / Mis replicated should not be retained\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, missingRecord()));\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, underReplicatedRecord()));\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, misReplicatedRecord()));\n\n    // Container is now replicated OK - should be removed.\n    replicas = generateReplicas(container, CLOSED, CLOSED, CLOSED);\n    status = new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, rec));\n  }\n']",status;Status;The;replicated;Container;Equals;retain;should;status;now,1.4551915228366852e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.4905924797058105, -4.965351581573486, -5.34962272644043, -6.396019458770752, -5.463438987731934, -0.0219980888068676]",0.9782419800758362
1,"['  @Test\n  public void testMisReplicatedRecordRetainedAndUpdated() {\n    // under replicated container\n    Set<ContainerReplica> replicas =\n        generateReplicas(container, CLOSED, CLOSED, CLOSED);\n    when(placementPolicy.validateContainerPlacement(\n        Mockito.anyList(), Mockito.anyInt()))\n        .thenReturn(new ContainerPlacementStatusDefault(2, 3, 5));\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n\n    UnhealthyContainersRecord rec = misReplicatedRecord();\n    assertTrue(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, rec));\n    // The record actual count should be updated from 1 -> 2\n    assertEquals(2, rec.getActualReplicaCount().intValue());\n    assertEquals(1, rec.getReplicaDelta().intValue());\n    assertNotNull(rec.getReason());\n\n    // Missing / Over / Mis replicated should not be retained\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, missingRecord()));\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, underReplicatedRecord()));\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, overReplicatedRecord()));\n\n    // Container is now placed OK - should be removed.\n    when(placementPolicy.validateContainerPlacement(\n        Mockito.anyList(), Mockito.anyInt()))\n        .thenReturn(new ContainerPlacementStatusDefault(3, 3, 5));\n    status = new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertFalse(ContainerHealthTask.ContainerHealthRecords\n        .retainOrUpdateRecord(status, rec));\n  }\n']",Mockito;Replicated;Updated;any;Mis;Mockito;CLOSED;Replicated;Int;retain,2.2118911147117615e-09;2.0954757928848267e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.440847873687744, -5.063476085662842, -5.408327579498291, -6.432742595672607, -5.4289374351501465, -0.021360699087381363]",0.9788656830787659
1,"['  @Test\n  public void testCorrectRecordsGenerated() {\n    Set<ContainerReplica> replicas =\n        generateReplicas(container, CLOSED, CLOSED, CLOSED);\n\n    // HEALTHY container - no records generated.\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    List<UnhealthyContainers> records =\n        ContainerHealthTask.ContainerHealthRecords\n            .generateUnhealthyRecords(status, (long)1234567);\n    assertEquals(0, records.size());\n\n    // Over-replicated - expect 1 over replicated record\n    replicas =\n        generateReplicas(container, CLOSED, CLOSED, CLOSED, CLOSED, CLOSED);\n    status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    records = ContainerHealthTask.ContainerHealthRecords\n        .generateUnhealthyRecords(status, (long)1234567);\n    assertEquals(1, records.size());\n    UnhealthyContainers rec = records.get(0);\n    assertEquals(UnHealthyContainerStates.OVER_REPLICATED.toString(),\n        rec.getContainerState());\n    assertEquals(3, rec.getExpectedReplicaCount().intValue());\n    assertEquals(5, rec.getActualReplicaCount().intValue());\n    assertEquals(-2, rec.getReplicaDelta().intValue());\n\n    // Under and Mis Replicated - expect 2 records - mis and under replicated\n    replicas =\n        generateReplicas(container, CLOSED, CLOSED);\n    when(placementPolicy.validateContainerPlacement(\n        Mockito.anyList(), Mockito.anyInt()))\n        .thenReturn(new ContainerPlacementStatusDefault(1, 2, 5));\n    status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    records = ContainerHealthTask.ContainerHealthRecords\n        .generateUnhealthyRecords(status, (long)1234567);\n    assertEquals(2, records.size());\n\n    rec = findRecordForState(records, UnHealthyContainerStates.MIS_REPLICATED);\n    assertEquals(UnHealthyContainerStates.MIS_REPLICATED.toString(),\n        rec.getContainerState());\n    assertEquals(2, rec.getExpectedReplicaCount().intValue());\n    assertEquals(1, rec.getActualReplicaCount().intValue());\n    assertEquals(1, rec.getReplicaDelta().intValue());\n    assertNotNull(rec.getReason());\n\n    rec = findRecordForState(records,\n        UnHealthyContainerStates.UNDER_REPLICATED);\n    assertEquals(UnHealthyContainerStates.UNDER_REPLICATED.toString(),\n        rec.getContainerState());\n    assertEquals(3, rec.getExpectedReplicaCount().intValue());\n    assertEquals(2, rec.getActualReplicaCount().intValue());\n    assertEquals(1, rec.getReplicaDelta().intValue());\n\n    // Missing Record - expect just a single missing record even though\n    // it is mis-replicated too\n    replicas.clear();\n    when(placementPolicy.validateContainerPlacement(\n        Mockito.anyList(), Mockito.anyInt()))\n        .thenReturn(new ContainerPlacementStatusDefault(1, 2, 5));\n    status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    records = ContainerHealthTask.ContainerHealthRecords\n        .generateUnhealthyRecords(status, (long)1234567);\n    assertEquals(1, records.size());\n    rec = records.get(0);\n    assertEquals(UnHealthyContainerStates.MISSING.toString(),\n        rec.getContainerState());\n    assertEquals(3, rec.getExpectedReplicaCount().intValue());\n    assertEquals(0, rec.getActualReplicaCount().intValue());\n    assertEquals(3, rec.getReplicaDelta().intValue());\n  }\n']",Generated;Correct;Mockito;any;List;Unhealthy;Expected;Delta;Replicas;placement,1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.7834979593753815e-10,5,5,"[-5.45005464553833, -4.992721080780029, -5.3500823974609375, -6.414061546325684, -5.458915710449219, -0.021967068314552307]",0.9782724380493164
1,"['  @Test\n  public void testRecordNotGeneratedIfAlreadyExists() {\n    Set<String> existingRec = new HashSet<>();\n    for (UnHealthyContainerStates s : UnHealthyContainerStates.values()) {\n      existingRec.add(s.toString());\n    }\n\n    // Over-replicated\n    Set<ContainerReplica> replicas = generateReplicas(\n        container, CLOSED, CLOSED, CLOSED, CLOSED, CLOSED);\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    List<UnhealthyContainers> records =\n        ContainerHealthTask.ContainerHealthRecords\n            .generateUnhealthyRecords(status, existingRec, (long)1234567);\n    assertEquals(0, records.size());\n\n    // Missing\n    replicas.clear();\n    status = new ContainerHealthStatus(container, replicas, placementPolicy);\n    records = ContainerHealthTask.ContainerHealthRecords\n        .generateUnhealthyRecords(status, existingRec, (long)1234567);\n    assertEquals(0, records.size());\n\n    // Under and Mis-Replicated\n    replicas = generateReplicas(container, CLOSED, CLOSED);\n    when(placementPolicy.validateContainerPlacement(\n        Mockito.anyList(), Mockito.anyInt()))\n        .thenReturn(new ContainerPlacementStatusDefault(1, 2, 5));\n    status = new ContainerHealthStatus(container, replicas, placementPolicy);\n    records = ContainerHealthTask.ContainerHealthRecords\n        .generateUnhealthyRecords(status, existingRec, (long)1234567);\n    assertEquals(0, records.size());\n  }\n']",when;new;Default;Int;container;placement;Policy;Placement;replicas;Status,1.6298145055770874e-09;1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;6.693881005048752e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.4838738441467285, -4.941845417022705, -5.367994785308838, -6.446444034576416, -5.496212959289551, -0.021884266287088394]",0.9783534407615662
1,"['  @Test\n  public void testHealthyContainer() {\n    Set<ContainerReplica> replicas = generateReplicas(container,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED);\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertTrue(status.isHealthy());\n    assertFalse(status.isOverReplicated());\n    assertFalse(status.isUnderReplicated());\n    assertEquals(0, status.replicaDelta());\n    assertFalse(status.isMissing());\n    assertEquals(false, status.isMisReplicated());\n    assertEquals(0, status.misReplicatedDelta());\n\n    assertEquals(container, status.getContainer());\n    assertEquals((long)123456, status.getContainerID());\n    assertEquals(3, status.getReplicationFactor());\n    assertEquals(3, status.getReplicaCount());\n  }\n']",Container;Replica;container;placement;container;Replica;Under;State;false;Count,1.5133991837501526e-09;1.0477378964424133e-09;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.675246939063072e-10;5.238689482212067e-10;5.238689482212067e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.477023124694824, -5.0173797607421875, -5.407071590423584, -6.44906759262085, -5.480104923248291, -0.02126372419297695]",0.9789607524871826
1,"['  @Test\n  public void testHealthyContainerWithExtraUnhealthyReplica() {\n    Set<ContainerReplica> replicas = generateReplicas(container,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.UNHEALTHY);\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertTrue(status.isHealthy());\n    assertFalse(status.isOverReplicated());\n    assertFalse(status.isUnderReplicated());\n    assertEquals(0, status.replicaDelta());\n    assertFalse(status.isMissing());\n    assertEquals(false, status.isMisReplicated());\n    assertEquals(0, status.misReplicatedDelta());\n  }\n']",Unhealthy;Replica;replicas;State;Replica;container;placement;replica;Missing;Replica,1.076841726899147e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.92901711165905e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.509500026702881, -4.987985134124756, -5.431685447692871, -6.487031936645508, -5.4948859214782715, -0.021095076575875282]",0.9791259765625
1,"['  @Test\n  public void testMissingContainer() {\n    Set<ContainerReplica> replicas = new HashSet<>();\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertFalse(status.isHealthy());\n    assertFalse(status.isOverReplicated());\n    assertFalse(status.isUnderReplicated());\n    assertEquals(3, status.replicaDelta());\n    assertTrue(status.isMissing());\n    assertEquals(false, status.isMisReplicated());\n    assertEquals(0, status.misReplicatedDelta());\n  }\n']",Replica;Hash;status;Health;Container;Set;new;Delta;Equals;Policy,1.0477378964424133e-09;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.541277885437012, -4.963706016540527, -5.414022922515869, -6.504062652587891, -5.514695644378662, -0.02110791578888893]",0.9791132807731628
1,"['  @Test\n  public void testUnderReplicatedContainer() {\n    Set<ContainerReplica> replicas = generateReplicas(container,\n        ContainerReplicaProto.State.CLOSED);\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertFalse(status.isHealthy());\n    assertFalse(status.isMissing());\n    assertFalse(status.isOverReplicated());\n    assertTrue(status.isUnderReplicated());\n    assertEquals(2, status.replicaDelta());\n    assertEquals(false, status.isMisReplicated());\n    assertEquals(0, status.misReplicatedDelta());\n  }\n']",generate;placement;Proto;replicas;Mis;Replicas;mis;Policy;Replicated;Replica,1.1641532182693481e-09;9.89530235528946e-10;7.8580342233181e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.511093720793724e-10,5,5,"[-5.535860538482666, -4.976373672485352, -5.4250688552856445, -6.478959560394287, -5.509144306182861, -0.02105165645480156]",0.9791683554649353
1,"['  @Test\n  public void testOverReplicatedContainer() {\n    Set<ContainerReplica> replicas = generateReplicas(container,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED);\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertFalse(status.isHealthy());\n    assertFalse(status.isMissing());\n    assertFalse(status.isUnderReplicated());\n    assertTrue(status.isOverReplicated());\n    assertEquals(-1, status.replicaDelta());\n    assertEquals(false, status.isMisReplicated());\n    assertEquals(0, status.misReplicatedDelta());\n  }\n']",CLOSED;Replica;Replicated;Over;Health;Set;replicas;CLOSED;Missing;Status,1.7898855730891228e-09;1.7462298274040222e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;5.529727786779404e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.505191326141357, -4.989109039306641, -5.4341816902160645, -6.489266395568848, -5.493625164031982, -0.02109566144645214]",0.9791253209114075
1,"['  @Test\n  public void testMisReplicated() {\n    Set<ContainerReplica> replicas = generateReplicas(container,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED,\n        ContainerReplicaProto.State.CLOSED);\n    when(placementPolicy.validateContainerPlacement(\n        Mockito.anyList(), Mockito.anyInt()))\n        .thenReturn(new ContainerPlacementStatusDefault(1, 2, 5));\n    ContainerHealthStatus status =\n        new ContainerHealthStatus(container, replicas, placementPolicy);\n    assertFalse(status.isHealthy());\n    assertFalse(status.isMissing());\n    assertFalse(status.isUnderReplicated());\n    assertFalse(status.isOverReplicated());\n    assertEquals(0, status.replicaDelta());\n    assertTrue(status.isMisReplicated());\n    assertEquals(1, status.misReplicatedDelta());\n  }\n']",Replicated;Mockito;Replicas;Replica;Container;when;new;Set;placement;CLOSED,2.270098775625229e-09;9.89530235528946e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.2014213502407074e-10,5,5,"[-5.505466461181641, -5.0167555809021, -5.396866798400879, -6.434832572937012, -5.469656467437744, -0.02126302383840084]",0.9789614677429199
1,"['  @Test\n  public void testRun() throws Exception {\n    UnhealthyContainersDao unHealthyContainersTableHandle =\n        getDao(UnhealthyContainersDao.class);\n\n    ContainerHealthSchemaManager containerHealthSchemaManager =\n        new ContainerHealthSchemaManager(\n            getSchemaDefinition(ContainerSchemaDefinition.class),\n            unHealthyContainersTableHandle);\n    ReconStorageContainerManagerFacade scmMock =\n        mock(ReconStorageContainerManagerFacade.class);\n    MockPlacementPolicy placementMock = new MockPlacementPolicy();\n    ContainerManager containerManagerMock = mock(ContainerManager.class);\n    StorageContainerServiceProvider scmClientMock =\n        mock(StorageContainerServiceProvider.class);\n    ContainerReplica unhealthyReplicaMock = mock(ContainerReplica.class);\n    when(unhealthyReplicaMock.getState()).thenReturn(State.UNHEALTHY);\n    ContainerReplica healthyReplicaMock = mock(ContainerReplica.class);\n    when(healthyReplicaMock.getState()).thenReturn(State.CLOSED);\n\n    // Create 6 containers. The first 5 will have various unhealthy states\n    // defined below. The container with ID=6 will be healthy.\n    List<ContainerInfo> mockContainers = getMockContainers(6);\n    when(scmMock.getScmServiceProvider()).thenReturn(scmClientMock);\n    when(scmMock.getContainerManager()).thenReturn(containerManagerMock);\n    when(containerManagerMock.getContainers()).thenReturn(mockContainers);\n    for (ContainerInfo c : mockContainers) {\n      when(containerManagerMock.getContainer(c.containerID())).thenReturn(c);\n      when(scmClientMock.getContainerWithPipeline(c.getContainerID()))\n          .thenReturn(new ContainerWithPipeline(c, null));\n    }\n    // Under replicated\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(1L)))\n        .thenReturn(getMockReplicas(1L, State.CLOSED, State.UNHEALTHY));\n\n    // return all UNHEALTHY replicas for container ID 2 -> UNDER_REPLICATED\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(2L)))\n        .thenReturn(getMockReplicas(2L, State.UNHEALTHY));\n\n    // return 0 replicas for container ID 3 -> Missing\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(3L)))\n        .thenReturn(Collections.emptySet());\n\n    // Return 5 Healthy -> Over replicated\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(4L)))\n        .thenReturn(getMockReplicas(4L, State.CLOSED, State.CLOSED,\n        State.CLOSED, State.CLOSED, State.CLOSED));\n\n    // Mis-replicated\n    Set<ContainerReplica> misReplicas = getMockReplicas(5L,\n        State.CLOSED, State.CLOSED, State.CLOSED);\n    placementMock.setMisRepWhenDnPresent(\n        misReplicas.iterator().next().getDatanodeDetails().getUuid());\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(5L)))\n        .thenReturn(misReplicas);\n\n    // Return 3 Healthy -> Healthy container\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(6L)))\n        .thenReturn(getMockReplicas(6L,\n            State.CLOSED, State.CLOSED, State.CLOSED));\n\n    List<UnhealthyContainers> all = unHealthyContainersTableHandle.findAll();\n    Assert.assertTrue(all.isEmpty());\n\n    long currentTime = System.currentTimeMillis();\n    ReconTaskStatusDao reconTaskStatusDao = getDao(ReconTaskStatusDao.class);\n    ReconTaskConfig reconTaskConfig = new ReconTaskConfig();\n    reconTaskConfig.setMissingContainerTaskInterval(Duration.ofSeconds(2));\n    ContainerHealthTask containerHealthTask =\n        new ContainerHealthTask(scmMock.getContainerManager(),\n            scmMock.getScmServiceProvider(),\n            reconTaskStatusDao, containerHealthSchemaManager,\n            placementMock, reconTaskConfig);\n    containerHealthTask.start();\n    LambdaTestUtils.await(6000, 1000, () ->\n        (unHealthyContainersTableHandle.count() == 5));\n    UnhealthyContainers rec =\n        unHealthyContainersTableHandle.fetchByContainerId(1L).get(0);\n    assertEquals(""UNDER_REPLICATED"", rec.getContainerState());\n    assertEquals(2, rec.getReplicaDelta().intValue());\n\n    rec = unHealthyContainersTableHandle.fetchByContainerId(2L).get(0);\n    assertEquals(""UNDER_REPLICATED"", rec.getContainerState());\n    assertEquals(3, rec.getReplicaDelta().intValue());\n\n    List<UnhealthyContainers> unhealthyContainers =\n        containerHealthSchemaManager.getUnhealthyContainers(\n            ALL_REPLICAS_UNHEALTHY, 0, Integer.MAX_VALUE);\n    assertEquals(1, unhealthyContainers.size());\n    assertEquals(2L,\n        unhealthyContainers.get(0).getContainerId().longValue());\n    assertEquals(0,\n        unhealthyContainers.get(0).getActualReplicaCount().intValue());\n\n    rec = unHealthyContainersTableHandle.fetchByContainerId(3L).get(0);\n    assertEquals(""MISSING"", rec.getContainerState());\n    assertEquals(3, rec.getReplicaDelta().intValue());\n\n    rec = unHealthyContainersTableHandle.fetchByContainerId(4L).get(0);\n    assertEquals(""OVER_REPLICATED"", rec.getContainerState());\n    assertEquals(-2, rec.getReplicaDelta().intValue());\n\n    rec = unHealthyContainersTableHandle.fetchByContainerId(5L).get(0);\n    assertEquals(""MIS_REPLICATED"", rec.getContainerState());\n    assertEquals(1, rec.getReplicaDelta().intValue());\n    assertEquals(2, rec.getExpectedReplicaCount().intValue());\n    assertEquals(1, rec.getActualReplicaCount().intValue());\n    assertNotNull(rec.getReason());\n\n    ReconTaskStatus taskStatus =\n        reconTaskStatusDao.findById(containerHealthTask.getTaskName());\n    Assert.assertTrue(taskStatus.getLastUpdatedTimestamp() >\n        currentTime);\n\n    // Now run the job again, to check that relevant records are updated or\n    // removed as appropriate. Need to adjust the return value for all the mocks\n    // Under replicated -> Delta goes from 2 to 1\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(1L)))\n        .thenReturn(getMockReplicas(1L, State.CLOSED, State.CLOSED));\n\n    // ID 2 was missing - make it healthy now\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(2L)))\n        .thenReturn(getMockReplicas(2L,\n            State.CLOSED, State.CLOSED, State.CLOSED));\n\n    // return 0 replicas for container ID 3 -> Still Missing\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(3L)))\n        .thenReturn(Collections.emptySet());\n\n    // Return 4 Healthy -> Delta changes from -2 to -1\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(4L)))\n        .thenReturn(getMockReplicas(4L, State.CLOSED, State.CLOSED,\n            State.CLOSED, State.CLOSED));\n\n    // Was mis-replicated - make it healthy now\n    placementMock.setMisRepWhenDnPresent(null);\n\n    LambdaTestUtils.await(6000, 1000, () ->\n        (unHealthyContainersTableHandle.count() == 3));\n    rec = unHealthyContainersTableHandle.fetchByContainerId(1L).get(0);\n    assertEquals(""UNDER_REPLICATED"", rec.getContainerState());\n    assertEquals(1, rec.getReplicaDelta().intValue());\n\n    // This container is now healthy, it should not be in the table any more\n    assertEquals(0,\n        unHealthyContainersTableHandle.fetchByContainerId(2L).size());\n\n    rec = unHealthyContainersTableHandle.fetchByContainerId(3L).get(0);\n\n    assertEquals(""MISSING"", rec.getContainerState());\n    assertEquals(3, rec.getReplicaDelta().intValue());\n\n    rec = unHealthyContainersTableHandle.fetchByContainerId(4L).get(0);\n    assertEquals(""OVER_REPLICATED"", rec.getContainerState());\n    assertEquals(-1, rec.getReplicaDelta().intValue());\n\n    // This container is now healthy, it should not be in the table any more\n    assertEquals(0,\n        unHealthyContainersTableHandle.fetchByContainerId(5L).size());\n  }\n']",un;ao;Unhealthy;mock;Containers;Definition;Recon;new;Container;Placement,8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.465477466583252, -5.04021692276001, -5.406979084014893, -6.441634178161621, -5.44566011428833, -0.021322306245565414]",0.9789034128189087
1,"['  @Test\n  public void testDeletedContainer() throws Exception {\n    UnhealthyContainersDao unHealthyContainersTableHandle =\n        getDao(UnhealthyContainersDao.class);\n\n    ContainerHealthSchemaManager containerHealthSchemaManager =\n        new ContainerHealthSchemaManager(\n            getSchemaDefinition(ContainerSchemaDefinition.class),\n            unHealthyContainersTableHandle);\n    ReconStorageContainerManagerFacade scmMock =\n        mock(ReconStorageContainerManagerFacade.class);\n    MockPlacementPolicy placementMock = new MockPlacementPolicy();\n    ContainerManager containerManagerMock = mock(ContainerManager.class);\n    StorageContainerServiceProvider scmClientMock =\n        mock(StorageContainerServiceProvider.class);\n\n    // Create 2 containers. The first is OPEN will no replicas, the second is\n    // CLOSED with no replicas.\n    List<ContainerInfo> mockContainers = getMockContainers(2);\n    when(scmMock.getScmServiceProvider()).thenReturn(scmClientMock);\n    when(scmMock.getContainerManager()).thenReturn(containerManagerMock);\n    when(containerManagerMock.getContainers()).thenReturn(mockContainers);\n    for (ContainerInfo c : mockContainers) {\n      when(containerManagerMock.getContainer(c.containerID())).thenReturn(c);\n      when(scmClientMock.getContainerWithPipeline(c.getContainerID()))\n          .thenReturn(new ContainerWithPipeline(c, null));\n    }\n    // Container State OPEN with no replicas\n    when(containerManagerMock.getContainer(ContainerID.valueOf(1L)).getState())\n        .thenReturn(HddsProtos.LifeCycleState.OPEN);\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(1L)))\n        .thenReturn(Collections.emptySet());\n    when(scmClientMock.getContainerWithPipeline(1))\n        .thenReturn(new ContainerWithPipeline(mockContainers.get(0), null));\n\n    // Container State CLOSED with no replicas\n    when(containerManagerMock.getContainer(ContainerID.valueOf(2L)).getState())\n        .thenReturn(HddsProtos.LifeCycleState.CLOSED);\n    when(containerManagerMock.getContainerReplicas(ContainerID.valueOf(2L)))\n        .thenReturn(Collections.emptySet());\n    ContainerInfo mockDeletedContainer = getMockDeletedContainer(2);\n    when(scmClientMock.getContainerWithPipeline(2))\n        .thenReturn(new ContainerWithPipeline(mockDeletedContainer, null));\n\n    List<UnhealthyContainers> all = unHealthyContainersTableHandle.findAll();\n    Assert.assertTrue(all.isEmpty());\n\n    long currentTime = System.currentTimeMillis();\n    ReconTaskStatusDao reconTaskStatusDao = getDao(ReconTaskStatusDao.class);\n    ReconTaskConfig reconTaskConfig = new ReconTaskConfig();\n    reconTaskConfig.setMissingContainerTaskInterval(Duration.ofSeconds(2));\n    ContainerHealthTask containerHealthTask =\n        new ContainerHealthTask(scmMock.getContainerManager(),\n            scmMock.getScmServiceProvider(),\n            reconTaskStatusDao, containerHealthSchemaManager,\n            placementMock, reconTaskConfig);\n    containerHealthTask.start();\n    LambdaTestUtils.await(6000, 1000, () ->\n        (unHealthyContainersTableHandle.count() == 1));\n    UnhealthyContainers rec =\n        unHealthyContainersTableHandle.fetchByContainerId(1L).get(0);\n    assertEquals(""MISSING"", rec.getContainerState());\n    assertEquals(3, rec.getReplicaDelta().intValue());\n\n    ReconTaskStatus taskStatus =\n        reconTaskStatusDao.findById(containerHealthTask.getTaskName());\n    Assert.assertTrue(taskStatus.getLastUpdatedTimestamp() >\n        currentTime);\n  }\n']",Exception;OPEN;mock;Schema;un;mock;Service;Containers;ock;ipeline,1.5133991837501526e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.469756603240967, -5.033905982971191, -5.370654106140137, -6.417943000793457, -5.434467315673828, -0.02160385064780712]",0.9786277413368225
1,"['  @Test\n  public void testProcessPipelineReport() throws IOException {\n\n    // Check with pipeline which does not exist in Recon.\n    Pipeline pipeline = getRandomPipeline();\n    PipelineID pipelineID = pipeline.getId();\n    HddsProtos.PipelineID pipelineIDProto =  pipelineID.getProtobuf();\n\n    ReconPipelineManager reconPipelineManagerMock = mock(\n        ReconPipelineManager.class);\n    when(reconPipelineManagerMock.getPipeline(pipelineID)).thenReturn(pipeline);\n\n    StorageContainerServiceProvider scmServiceProviderMock = mock(\n        StorageContainerServiceProvider.class);\n    when(scmServiceProviderMock.getPipeline(pipelineIDProto))\n        .thenReturn(pipeline);\n\n    OzoneConfiguration configuration = new OzoneConfiguration();\n\n    ReconPipelineReportHandler handler =\n        new ReconPipelineReportHandler(new ReconSafeModeManager(),\n            reconPipelineManagerMock, SCMContext.emptyContext(),\n            configuration, scmServiceProviderMock);\n\n    EventPublisher eventPublisherMock = mock(EventPublisher.class);\n    PipelineReport report = mock(PipelineReport.class);\n    when(report.getPipelineID()).thenReturn(pipelineIDProto);\n\n    handler.processPipelineReport(report, pipeline.getNodes().get(0),\n        eventPublisherMock);\n\n    // Verify that the new pipeline was added to pipeline manager.\n    verify(reconPipelineManagerMock, times(1))\n        .addPipeline(pipeline);\n    verify(reconPipelineManagerMock, times(1))\n        .getPipeline(pipelineID);\n\n    // Check with pipeline which already exists in Recon.\n    pipeline = getRandomPipeline();\n    pipelineID = pipeline.getId();\n    pipelineIDProto =  pipelineID.getProtobuf();\n\n    when(reconPipelineManagerMock.containsPipeline(pipelineID))\n        .thenReturn(true);\n    when(reconPipelineManagerMock.getPipeline(pipelineID))\n        .thenReturn(pipeline);\n    when(report.getPipelineID()).thenReturn(pipelineIDProto);\n\n    handler.processPipelineReport(report, pipeline.getNodes().get(0),\n        eventPublisherMock);\n\n    // Verify that the pipeline was not added to pipeline manager.\n    verify(reconPipelineManagerMock, times(0))\n        .addPipeline(pipeline);\n    verify(reconPipelineManagerMock, times(1))\n        .getPipeline(pipelineID);\n  }\n']",ipeline;IDProto;manager;mock;pipeline;Container;Recon;ock;class;in,1.6298145055770874e-09;1.2369127944111824e-09;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.478543281555176, -5.054737091064453, -5.405144691467285, -6.436036109924316, -5.430834770202637, -0.021254388615489006]",0.9789699912071228
1,"['  @Test\n  public void testProcessICR() throws IOException, NodeNotFoundException {\n\n    ContainerID containerID = ContainerID.valueOf(100L);\n    DatanodeDetails datanodeDetails = randomDatanodeDetails();\n    IncrementalContainerReportFromDatanode reportMock =\n        mock(IncrementalContainerReportFromDatanode.class);\n    when(reportMock.getDatanodeDetails()).thenReturn(datanodeDetails);\n    IncrementalContainerReportProto containerReport =\n        getIncrementalContainerReportProto(containerID,\n            State.OPEN,\n            datanodeDetails.getUuidString());\n    when(reportMock.getReport()).thenReturn(containerReport);\n\n    final String path =\n        GenericTestUtils.getTempPath(UUID.randomUUID().toString());\n    Path scmPath = Paths.get(path, ""scm-meta"");\n    final OzoneConfiguration conf = new OzoneConfiguration();\n    conf.set(HddsConfigKeys.OZONE_METADATA_DIRS, scmPath.toString());\n    NetworkTopology clusterMap = new NetworkTopologyImpl(conf);\n    EventQueue eventQueue = new EventQueue();\n    SCMStorageConfig storageConfig = new SCMStorageConfig(conf);\n    this.versionManager =\n        Mockito.mock(HDDSLayoutVersionManager.class);\n    Mockito.when(versionManager.getMetadataLayoutVersion())\n        .thenReturn(maxLayoutVersion());\n    Mockito.when(versionManager.getSoftwareLayoutVersion())\n        .thenReturn(maxLayoutVersion());\n\n    NodeManager nodeManager = new SCMNodeManager(conf, storageConfig,\n        eventQueue, clusterMap, SCMContext.emptyContext(), versionManager);\n\n    nodeManager.register(datanodeDetails, null, null);\n\n    ReconContainerManager containerManager = getContainerManager();\n    ReconIncrementalContainerReportHandler reconIcr =\n        new ReconIncrementalContainerReportHandler(nodeManager,\n            containerManager, SCMContext.emptyContext());\n    EventPublisher eventPublisherMock = mock(EventPublisher.class);\n\n    reconIcr.onMessage(reportMock, eventPublisherMock);\n    nodeManager.addContainer(datanodeDetails, containerID);\n    assertTrue(containerManager.containerExist(containerID));\n    assertEquals(1, containerManager.getContainerReplicas(containerID).size());\n    assertEquals(OPEN, containerManager.getContainer(containerID).getState());\n  }\n']",mock;Version;random;Manager;version;Version;when;Software;Process;Temp,3.259629011154175e-09;2.3283064365386963e-09;1.862645149230957e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.494298458099365, -4.965066432952881, -5.385252952575684, -6.455465316772461, -5.491674900054932, -0.021595684811472893]",0.978635847568512
1,"['  @Test\n  public void testProcessICRStateMismatch() throws IOException {\n\n    // Recon container state is ""OPEN"".\n    // Replica state could be any Non OPEN state.\n    long containerId = 11;\n    for (State state : Arrays.asList(State.CLOSING, State.QUASI_CLOSED,\n        State.CLOSED)) {\n      ContainerWithPipeline containerWithPipeline = getTestContainer(\n          containerId++, OPEN);\n      ContainerID containerID =\n          containerWithPipeline.getContainerInfo().containerID();\n\n      ReconContainerManager containerManager = getContainerManager();\n      containerManager.addNewContainer(containerWithPipeline);\n\n      DatanodeDetails datanodeDetails =\n          containerWithPipeline.getPipeline().getFirstNode();\n      NodeManager nodeManagerMock = mock(NodeManager.class);\n      when(nodeManagerMock.getNodeByUuid(any())).thenReturn(datanodeDetails);\n      IncrementalContainerReportFromDatanode reportMock =\n          mock(IncrementalContainerReportFromDatanode.class);\n      when(reportMock.getDatanodeDetails())\n          .thenReturn(containerWithPipeline.getPipeline().getFirstNode());\n\n      IncrementalContainerReportProto containerReport =\n          getIncrementalContainerReportProto(containerID, state,\n              datanodeDetails.getUuidString());\n      when(reportMock.getReport()).thenReturn(containerReport);\n      ReconIncrementalContainerReportHandler reconIcr =\n          new ReconIncrementalContainerReportHandler(nodeManagerMock,\n              containerManager, SCMContext.emptyContext());\n\n      reconIcr.onMessage(reportMock, mock(EventPublisher.class));\n      assertTrue(containerManager.containerExist(containerID));\n      assertEquals(1,\n          containerManager.getContainerReplicas(containerID).size());\n      LifeCycleState expectedState = getContainerStateFromReplicaState(state);\n      LifeCycleState actualState =\n          containerManager.getContainer(containerID).getState();\n      assertEquals(String.format(""Expecting %s in "" +\n              ""container state for replica state %s"", expectedState,\n          state), expectedState, actualState);\n    }\n  }\n']",mock;ock;state;get;Arrays;be;long;IOException;class;get,1.5133991837501526e-09;1.5133991837501526e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10,5,5,"[-5.481882572174072, -4.991156101226807, -5.367365837097168, -6.424629211425781, -5.4598236083984375, -0.021735670045018196]",0.9784988760948181
1,"['  @Test\n  public void testReconNodeDB() throws IOException, NodeNotFoundException {\n    ReconStorageConfig scmStorageConfig = new ReconStorageConfig(conf);\n    EventQueue eventQueue = new EventQueue();\n    NetworkTopology clusterMap = new NetworkTopologyImpl(conf);\n    Table<UUID, DatanodeDetails> nodeTable =\n        ReconSCMDBDefinition.NODES.getTable(store);\n    ReconNodeManager reconNodeManager = new ReconNodeManager(conf,\n        scmStorageConfig, eventQueue, clusterMap, nodeTable, versionManager);\n    ReconNewNodeHandler reconNewNodeHandler =\n        new ReconNewNodeHandler(reconNodeManager);\n    assertTrue(reconNodeManager.getAllNodes().isEmpty());\n\n    DatanodeDetails datanodeDetails = randomDatanodeDetails();\n    String uuidString = datanodeDetails.getUuidString();\n\n    // Register a random datanode.\n    reconNodeManager.register(datanodeDetails, null, null);\n    reconNewNodeHandler.onMessage(reconNodeManager.getNodeByUuid(uuidString),\n        null);\n\n    assertEquals(1, reconNodeManager.getAllNodes().size());\n    assertNotNull(reconNodeManager.getNodeByUuid(uuidString));\n\n    // If any commands are added to the eventQueue without using the onMessage\n    // interface, then they should be filtered out and not returned to the DN\n    // when it heartbeats.\n    // This command should never be returned by Recon\n    reconNodeManager.addDatanodeCommand(datanodeDetails.getUuid(),\n        new SetNodeOperationalStateCommand(1234,\n        DECOMMISSIONING, 0));\n\n    // This one should be returned\n    reconNodeManager.addDatanodeCommand(datanodeDetails.getUuid(),\n        new ReregisterCommand());\n\n    // OperationalState sanity check\n    final DatanodeDetails dnDetails =\n        reconNodeManager.getNodeByUuid(datanodeDetails.getUuidString());\n    assertEquals(HddsProtos.NodeOperationalState.IN_SERVICE,\n        dnDetails.getPersistedOpState());\n    assertEquals(dnDetails.getPersistedOpState(),\n        reconNodeManager.getNodeStatus(dnDetails)\n            .getOperationalState());\n    assertEquals(dnDetails.getPersistedOpStateExpiryEpochSec(),\n        reconNodeManager.getNodeStatus(dnDetails)\n            .getOpStateExpiryEpochSeconds());\n\n    // Upon processing the heartbeat, the illegal command should be filtered out\n    List<SCMCommand> returnedCmds =\n        reconNodeManager.processHeartbeat(datanodeDetails,\n            defaultLayoutVersionProto());\n    assertEquals(1, returnedCmds.size());\n    assertEquals(SCMCommandProto.Type.reregisterCommand,\n        returnedCmds.get(0).getType());\n\n    // Now feed a DECOMMISSIONED heartbeat of the same DN\n    datanodeDetails.setPersistedOpState(\n        HddsProtos.NodeOperationalState.DECOMMISSIONED);\n    datanodeDetails.setPersistedOpStateExpiryEpochSec(12345L);\n    reconNodeManager.processHeartbeat(datanodeDetails,\n        defaultLayoutVersionProto());\n    // Check both persistedOpState and NodeStatus#operationalState\n    assertEquals(HddsProtos.NodeOperationalState.DECOMMISSIONED,\n        dnDetails.getPersistedOpState());\n    assertEquals(dnDetails.getPersistedOpState(),\n        reconNodeManager.getNodeStatus(dnDetails)\n            .getOperationalState());\n    assertEquals(12345L, dnDetails.getPersistedOpStateExpiryEpochSec());\n    assertEquals(dnDetails.getPersistedOpStateExpiryEpochSec(),\n        reconNodeManager.getNodeStatus(dnDetails)\n            .getOpStateExpiryEpochSeconds());\n\n    // Close the DB, and recreate the instance of Recon Node Manager.\n    eventQueue.close();\n    reconNodeManager.close();\n    reconNodeManager = new ReconNodeManager(conf, scmStorageConfig, eventQueue,\n        clusterMap, nodeTable, versionManager);\n\n    // Verify that the node information was persisted and loaded back.\n    assertEquals(1, reconNodeManager.getAllNodes().size());\n    assertNotNull(\n        reconNodeManager.getNodeByUuid(datanodeDetails.getUuidString()));\n  }\n']",by;command;This;should;be;interface;DB;This;Recon;should,2.6775524020195007e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10,5,5,"[-5.44911003112793, -5.043084144592285, -5.402218818664551, -6.458139419555664, -5.447748184204102, -0.021360699087381363]",0.9788658022880554
1,"['  @Test\n  public void testUpdateNodeOperationalStateFromScm() throws Exception {\n    ReconStorageConfig scmStorageConfig = new ReconStorageConfig(conf);\n    EventQueue eventQueue = new EventQueue();\n    NetworkTopology clusterMap = new NetworkTopologyImpl(conf);\n    Table<UUID, DatanodeDetails> nodeTable =\n        ReconSCMDBDefinition.NODES.getTable(store);\n    ReconNodeManager reconNodeManager = new ReconNodeManager(conf,\n        scmStorageConfig, eventQueue, clusterMap, nodeTable, versionManager);\n\n\n    DatanodeDetails datanodeDetails = randomDatanodeDetails();\n    HddsProtos.Node node = mock(HddsProtos.Node.class);\n\n    LambdaTestUtils.intercept(NodeNotFoundException.class, () -> {\n      reconNodeManager.updateNodeOperationalStateFromScm(node, datanodeDetails);\n    });\n\n    reconNodeManager.register(datanodeDetails, null, null);\n    assertEquals(IN_SERVICE, reconNodeManager\n        .getNodeByUuid(datanodeDetails.getUuidString()).getPersistedOpState());\n\n    when(node.getNodeOperationalStates(eq(0)))\n        .thenReturn(DECOMMISSIONING);\n    reconNodeManager.updateNodeOperationalStateFromScm(node, datanodeDetails);\n    assertEquals(DECOMMISSIONING, reconNodeManager\n        .getNodeByUuid(datanodeDetails.getUuidString()).getPersistedOpState());\n    List<DatanodeDetails> nodes =\n        reconNodeManager.getNodes(DECOMMISSIONING, null);\n    assertEquals(1, nodes.size());\n    assertEquals(datanodeDetails.getUuid(), nodes.get(0).getUuid());\n  }\n']",DECOM;Operational;intercept;Operational;dds;Queue;State;ODES;DECOM;new,8.731149137020111e-10;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.499265670776367, -4.994830131530762, -5.409289360046387, -6.465572834014893, -5.475502014160156, -0.021307136863470078]",0.9789183735847473
1,"['  @Test\n  public void testDatanodeUpdate() throws IOException {\n    ReconStorageConfig scmStorageConfig = new ReconStorageConfig(conf);\n    EventQueue eventQueue = new EventQueue();\n    NetworkTopology clusterMap = new NetworkTopologyImpl(conf);\n    Table<UUID, DatanodeDetails> nodeTable =\n        ReconSCMDBDefinition.NODES.getTable(store);\n    ReconNodeManager reconNodeManager = new ReconNodeManager(conf,\n        scmStorageConfig, eventQueue, clusterMap, nodeTable, versionManager);\n    ReconNewNodeHandler reconNewNodeHandler =\n        new ReconNewNodeHandler(reconNodeManager);\n    assertTrue(reconNodeManager.getAllNodes().isEmpty());\n\n    DatanodeDetails datanodeDetails = randomDatanodeDetails();\n    datanodeDetails.setHostName(""hostname1"");\n    String uuidString = datanodeDetails.getUuidString();\n\n    // Register ""hostname1"" datanode.\n    reconNodeManager.register(datanodeDetails, null, null);\n    reconNewNodeHandler.onMessage(reconNodeManager.getNodeByUuid(uuidString),\n        null);\n\n    assertEquals(1, reconNodeManager.getAllNodes().size());\n    assertNotNull(reconNodeManager.getNodeByUuid(uuidString));\n    assertEquals(""hostname1"",\n        reconNodeManager.getNodeByUuid(uuidString).getHostName());\n\n    datanodeDetails.setHostName(""hostname2"");\n    // Upon processing the heartbeat, the illegal command should be filtered out\n    List<SCMCommand> returnedCmds =\n        reconNodeManager.processHeartbeat(datanodeDetails,\n            defaultLayoutVersionProto());\n    assertEquals(1, returnedCmds.size());\n    assertEquals(SCMCommandProto.Type.reregisterCommand,\n        returnedCmds.get(0).getType());\n\n  }\n']",Datanode;IOException;Update;Queue;Recon;Config;Message;Topology;DBDefinition;Event,1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.294591680169106e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.966285243630409e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.420164108276367, -5.058416843414307, -5.397736072540283, -6.448233604431152, -5.427115440368652, -0.02151774987578392]",0.9787120819091797
1,"['  @Test\n  public void testAddNewOpenContainer() throws IOException {\n    ContainerWithPipeline containerWithPipeline =\n        getTestContainer(LifeCycleState.OPEN);\n    ContainerID containerID =\n        containerWithPipeline.getContainerInfo().containerID();\n    ContainerInfo containerInfo = containerWithPipeline.getContainerInfo();\n\n    ReconContainerManager containerManager = getContainerManager();\n    assertFalse(containerManager.containerExist(containerID));\n    assertFalse(getContainerTable().isExist(containerID));\n\n    containerManager.addNewContainer(containerWithPipeline);\n\n    assertTrue(containerManager.containerExist(containerID));\n\n    List<ContainerInfo> containers =\n        containerManager.getContainers(LifeCycleState.OPEN);\n    assertEquals(1, containers.size());\n    assertEquals(containerInfo, containers.get(0));\n    NavigableSet<ContainerID> containersInPipeline =\n        getPipelineManager().getContainersInPipeline(\n            containerWithPipeline.getPipeline().getId());\n    assertEquals(1, containersInPipeline.size());\n    assertEquals(containerID, containersInPipeline.first());\n\n    // Verify container DB.\n    SCMHAManager scmhaManager = containerManager.getSCMHAManager();\n    scmhaManager.getDBTransactionBuffer().close();\n    assertTrue(getContainerTable().isExist(containerID));\n  }\n']",Containers;Container;Open;Navigable;size;container;Table;Containers;Equals;Set,6.693881005048752e-10;6.402842700481415e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.464081764221191, -5.049131870269775, -5.426511287689209, -6.446188449859619, -5.42405366897583, -0.021269910037517548]",0.9789546728134155
1,"['  @Test\n  public void testAddNewClosedContainer() throws IOException {\n    ContainerWithPipeline containerWithPipeline = getTestContainer(CLOSED);\n    ContainerID containerID =\n        containerWithPipeline.getContainerInfo().containerID();\n    ContainerInfo containerInfo = containerWithPipeline.getContainerInfo();\n\n    ReconContainerManager containerManager = getContainerManager();\n    assertFalse(containerManager.containerExist(containerID));\n    assertFalse(getContainerTable().isExist(containerID));\n\n    containerManager.addNewContainer(containerWithPipeline);\n\n    assertTrue(containerManager.containerExist(containerID));\n\n    List<ContainerInfo> containers = containerManager.getContainers(CLOSED);\n    assertEquals(1, containers.size());\n    assertEquals(containerInfo, containers.get(0));\n    // Verify container DB.\n    SCMHAManager scmhaManager = containerManager.getSCMHAManager();\n    scmhaManager.getDBTransactionBuffer().close();\n    assertTrue(getContainerTable().isExist(containerID));\n  }\n']",container;ipeline;New;container;Table;get;Table;Buffer;New;Info,3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.514145851135254, -5.023324966430664, -5.46007776260376, -6.503576755523682, -5.465837478637695, -0.020807085558772087]",0.9794079065322876
1,"['  @Test\n  public void testCheckAndAddNewContainer() throws Exception {\n    ContainerID containerID = ContainerID.valueOf(100L);\n    ReconContainerManager containerManager = getContainerManager();\n    assertFalse(containerManager.containerExist(containerID));\n    DatanodeDetails datanodeDetails = randomDatanodeDetails();\n    containerManager.checkAndAddNewContainer(containerID,\n        OPEN, datanodeDetails);\n    assertTrue(containerManager.containerExist(containerID));\n\n    // Doing it one more time should not change any state.\n    containerManager.checkAndAddNewContainer(containerID, OPEN,\n        datanodeDetails);\n    assertTrue(containerManager.containerExist(containerID));\n    assertEquals(LifeCycleState.OPEN,\n        getContainerManager().getContainer(containerID).getState());\n  }\n']",Life;Cycle;container;Container;Datanode;Recon;state;datanode;Container;Details,2.7939677238464355e-09;1.979060471057892e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.485418319702148, -5.067994117736816, -5.464195728302002, -6.50160026550293, -5.453623294830322, -0.02067164145410061]",0.9795406460762024
1,"['  @Test\n  public void testCheckAndAddNewContainerBatch() throws IOException {\n    List<ContainerReplicaProto> containerReplicaProtoList = new LinkedList<>();\n    ReconContainerManager containerManager = getContainerManager();\n    State[] stateTypes = State.values();\n    LifeCycleState[] lifeCycleStateTypes = LifeCycleState.values();\n    int lifeCycleStateCount = lifeCycleStateTypes.length;\n    for (int i = 200; i < 300; i++) {\n      assertFalse(containerManager.containerExist(ContainerID.valueOf(i)));\n      ContainerReplicaProto.Builder ciBuilder =\n          ContainerReplicaProto.newBuilder();\n      ContainerReplicaProto crp = ciBuilder.\n          setContainerID(i).\n          setState(stateTypes[i % lifeCycleStateCount]).build();\n      containerReplicaProtoList.add(crp);\n    }\n\n    containerManager.checkAndAddNewContainerBatch(containerReplicaProtoList);\n    for (long i = 200L; i < 300L; i++) {\n      assertTrue(containerManager.containerExist(ContainerID.valueOf(i)));\n    }\n\n    // Doing it one more time should not change any state.\n    containerManager.checkAndAddNewContainerBatch(containerReplicaProtoList);\n    for (int i = 200; i < 300; i++) {\n      assertTrue(containerManager.containerExist(ContainerID.valueOf(i)));\n      assertEquals(lifeCycleStateTypes[i % lifeCycleStateCount],\n          getContainerManager().\n            getContainer(ContainerID.valueOf(i)).getState());\n    }\n  }\n']",New;atch;List;Proto;Container;Replica;check;set;State;new,9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.452007293701172, -5.046112537384033, -5.386355400085449, -6.428048133850098, -5.446339130401611, -0.021456846967339516]",0.9787716865539551
1,"['  @Test\n  public void testUpdateContainerStateFromOpen() throws Exception {\n    ContainerWithPipeline containerWithPipeline =\n        getTestContainer(LifeCycleState.OPEN);\n    ContainerID containerID =\n        containerWithPipeline.getContainerInfo().containerID();\n\n    // Adding container #100.\n    getContainerManager().addNewContainer(containerWithPipeline);\n    assertEquals(LifeCycleState.OPEN,\n        getContainerManager().getContainer(containerID).getState());\n\n    DatanodeDetails datanodeDetails = randomDatanodeDetails();\n\n    // First report with ""CLOSED"" replica state moves container state to\n    // ""CLOSING"".\n    getContainerManager().checkAndAddNewContainer(containerID, State.CLOSED,\n        datanodeDetails);\n    assertEquals(CLOSING,\n        getContainerManager().getContainer(containerID).getState());\n  }\n']",OPEN;OPEN;container;get;Container;Details;New;Container;ipeline;Life,8.731149137020111e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.4873433113098145, -5.0658698081970215, -5.454129695892334, -6.505319595336914, -5.426390171051025, -0.02083580568432808]",0.9793797731399536
1,"['  @Test\n  public void testUpdateAndRemoveContainerReplica() throws IOException {\n    // Sanity checking updateContainerReplica and ContainerReplicaHistory\n\n    // Init Container 1\n    final long cIDlong1 = 1L;\n    final ContainerID containerID1 = ContainerID.valueOf(cIDlong1);\n\n    // Init DN01\n    final UUID uuid1 = UUID.randomUUID();\n    final DatanodeDetails datanodeDetails1 = DatanodeDetails.newBuilder()\n        .setUuid(uuid1).setHostName(""host1"").setIpAddress(""127.0.0.1"").build();\n    ContainerReplica containerReplica1 = ContainerReplica.newBuilder()\n        .setContainerID(containerID1).setContainerState(State.OPEN)\n        .setDatanodeDetails(datanodeDetails1).setSequenceId(1001L).build();\n\n    final ReconContainerManager containerManager = getContainerManager();\n    final Map<Long, Map<UUID, ContainerReplicaHistory>> repHistMap =\n        containerManager.getReplicaHistoryMap();\n    // Should be empty at the beginning\n    Assert.assertEquals(0, repHistMap.size());\n\n    // Put a replica info and call updateContainerReplica\n    Pipeline pipeline = getRandomPipeline();\n    getPipelineManager().addPipeline(pipeline);\n    for (int i = 1; i <= 10; i++) {\n      final ContainerInfo info = newContainerInfo(i, pipeline);\n      containerManager.addNewContainer(\n          new ContainerWithPipeline(info, pipeline));\n    }\n\n    containerManager.updateContainerReplica(containerID1, containerReplica1);\n    // Should have 1 container entry in the replica history map\n    Assert.assertEquals(1, repHistMap.size());\n    // Should only have 1 entry for this replica (on DN01)\n    Assert.assertEquals(1, repHistMap.get(cIDlong1).size());\n    ContainerReplicaHistory repHist1 = repHistMap.get(cIDlong1).get(uuid1);\n    Assert.assertEquals(uuid1, repHist1.getUuid());\n    // Because this is a new entry, first seen time equals last seen time\n    assertEquals(repHist1.getLastSeenTime(), repHist1.getFirstSeenTime());\n    assertEquals(containerReplica1.getSequenceId().longValue(),\n        repHist1.getBcsId());\n\n    // Let\'s update the entry again\n    containerReplica1 = ContainerReplica.newBuilder()\n        .setContainerID(containerID1).setContainerState(State.OPEN)\n        .setDatanodeDetails(datanodeDetails1).setSequenceId(1051L).build();\n    containerManager.updateContainerReplica(containerID1, containerReplica1);\n    // Should still have 1 entry in the replica history map\n    Assert.assertEquals(1, repHistMap.size());\n    // Now last seen time should be larger than first seen time\n    Assert.assertTrue(repHist1.getLastSeenTime() > repHist1.getFirstSeenTime());\n    assertEquals(1051L, repHist1.getBcsId());\n\n    // Init DN02\n    final UUID uuid2 = UUID.randomUUID();\n    final DatanodeDetails datanodeDetails2 = DatanodeDetails.newBuilder()\n        .setUuid(uuid2).setHostName(""host2"").setIpAddress(""127.0.0.2"").build();\n    final ContainerReplica containerReplica2 = ContainerReplica.newBuilder()\n        .setContainerID(containerID1).setContainerState(State.OPEN)\n        .setDatanodeDetails(datanodeDetails2).setSequenceId(1051L).build();\n\n    // Add replica to DN02\n    containerManager.updateContainerReplica(containerID1, containerReplica2);\n\n    // Should still have 1 container entry in the replica history map\n    Assert.assertEquals(1, repHistMap.size());\n    // Should have 2 entries for this replica (on DN01 and DN02)\n    Assert.assertEquals(2, repHistMap.get(cIDlong1).size());\n    ContainerReplicaHistory repHist2 = repHistMap.get(cIDlong1).get(uuid2);\n    Assert.assertEquals(uuid2, repHist2.getUuid());\n    // Because this is a new entry, first seen time equals last seen time\n    assertEquals(repHist2.getLastSeenTime(), repHist2.getFirstSeenTime());\n    assertEquals(1051L, repHist2.getBcsId());\n\n    // Remove replica from DN01\n    containerManager.removeContainerReplica(containerID1, containerReplica1);\n    // Should still have 1 container entry in the replica history map\n    Assert.assertEquals(1, repHistMap.size());\n    // Should have 1 entry for this replica\n    Assert.assertEquals(1, repHistMap.get(cIDlong1).size());\n    // And the only entry should match DN02\n    Assert.assertEquals(uuid2,\n        repHistMap.get(cIDlong1).keySet().iterator().next());\n  }\n']",DN;Container;IOException;Update;the;Init;Should;uuid;Remove;Sequence,9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.454029083251953, -5.042702674865723, -5.374845504760742, -6.42735481262207, -5.452277660369873, -0.021499667316675186]",0.978729784488678
1,"['  @Test\n  public void testInitialize() throws IOException {\n\n    // Get 3 OPEN pipelines from SCM.\n    List<Pipeline> pipelinesFromScm = getPipelines(3);\n\n    // Recon has 2 pipelines in ALLOCATED state. (1 is valid and 1 is obsolete)\n\n    // Valid pipeline in Allocated state.\n    Pipeline validPipeline = Pipeline.newBuilder()\n        .setReplicationConfig(\n            new StandaloneReplicationConfig(ReplicationFactor.ONE))\n        .setId(pipelinesFromScm.get(0).getId())\n        .setNodes(pipelinesFromScm.get(0).getNodes())\n        .setState(Pipeline.PipelineState.ALLOCATED)\n\n        .build();\n\n    // Invalid pipeline.\n    Pipeline invalidPipeline = Pipeline.newBuilder()\n        .setReplicationConfig(\n            new StandaloneReplicationConfig(ReplicationFactor.ONE))\n        .setId(PipelineID.randomId())\n        .setNodes(Collections.singletonList(randomDatanodeDetails()))\n        .setState(Pipeline.PipelineState.CLOSED)\n        .build();\n\n    NetworkTopology clusterMap = new NetworkTopologyImpl(conf);\n    EventQueue eventQueue = new EventQueue();\n    this.versionManager =\n        Mockito.mock(HDDSLayoutVersionManager.class);\n    Mockito.when(versionManager.getMetadataLayoutVersion())\n        .thenReturn(maxLayoutVersion());\n    Mockito.when(versionManager.getSoftwareLayoutVersion())\n        .thenReturn(maxLayoutVersion());\n    NodeManager nodeManager = new SCMNodeManager(conf, scmStorageConfig,\n        eventQueue, clusterMap, SCMContext.emptyContext(), versionManager);\n\n    try (ReconPipelineManager reconPipelineManager =\n             ReconPipelineManager.newReconPipelineManager(\n                 conf,\n                 nodeManager,\n                 ReconSCMDBDefinition.PIPELINES.getTable(store),\n                 eventQueue,\n                 scmhaManager,\n                 scmContext)) {\n      scmContext = new SCMContext.Builder().setIsInSafeMode(true)\n              .setLeader(true).setIsPreCheckComplete(true)\n              .setSCM(mock(StorageContainerManager.class)).build();\n      reconPipelineManager.setScmContext(scmContext);\n      reconPipelineManager.addPipeline(validPipeline);\n      reconPipelineManager.addPipeline(invalidPipeline);\n\n      reconPipelineManager.initializePipelines(pipelinesFromScm);\n      List<Pipeline> newReconPipelines = reconPipelineManager.getPipelines();\n\n      // Test if the number of pipelines in SCM is as expected.\n      assertEquals(3, newReconPipelines.size());\n\n      // Test if new pipelines from SCM are picked up.\n      for (Pipeline pipeline : pipelinesFromScm) {\n        assertTrue(reconPipelineManager.containsPipeline(pipeline.getId()));\n      }\n\n      // Test if existing pipeline state is updated.\n      assertEquals(Pipeline.PipelineState.OPEN, reconPipelineManager\n          .getPipeline(validPipeline.getId()).getPipelineState());\n\n      // Test if obsolete pipelines in Recon are removed.\n      assertFalse(reconPipelineManager.containsPipeline(\n          invalidPipeline.getId()));\n    }\n  }\n']",Allocated;Mockito;ALLOCATED;IOException;Initialize;pipelines;OPEN;ipelines;Recon;Mockito,1.0477378964424133e-09;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.438860893249512, -5.03087043762207, -5.417314529418945, -6.452049732208252, -5.452549934387207, -0.021406905725598335]",0.9788206815719604
1,"['  @Test\n  public void testAddPipeline() throws IOException {\n\n    Pipeline pipeline = getRandomPipeline();\n    NetworkTopology clusterMap = new NetworkTopologyImpl(conf);\n    EventQueue eventQueue = new EventQueue();\n    this.versionManager =\n        Mockito.mock(HDDSLayoutVersionManager.class);\n    Mockito.when(versionManager.getMetadataLayoutVersion())\n        .thenReturn(maxLayoutVersion());\n    Mockito.when(versionManager.getSoftwareLayoutVersion())\n        .thenReturn(maxLayoutVersion());\n    NodeManager nodeManager = new SCMNodeManager(conf, scmStorageConfig,\n        eventQueue, clusterMap, SCMContext.emptyContext(), versionManager);\n\n    ReconPipelineManager reconPipelineManager =\n        ReconPipelineManager.newReconPipelineManager(\n            conf,\n            nodeManager,\n            ReconSCMDBDefinition.PIPELINES.getTable(store),\n            eventQueue,\n            scmhaManager,\n            scmContext);\n\n    assertFalse(reconPipelineManager.containsPipeline(pipeline.getId()));\n    reconPipelineManager.addPipeline(pipeline);\n    assertTrue(reconPipelineManager.containsPipeline(pipeline.getId()));\n  }\n']",Map;version;cluster;cluster;new;Layout;Add;ha;Mockito;Queue,9.604264050722122e-10;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.147295840084553e-10,5,5,"[-5.470473766326904, -5.019870758056641, -5.387751579284668, -6.41763973236084, -5.437804222106934, -0.02160000056028366]",0.9786316156387329
1,"['  @Test\n  public void testStubbedReconPipelineFactory() throws IOException {\n\n    NodeManager nodeManagerMock = mock(NodeManager.class);\n\n    ReconPipelineManager reconPipelineManager =\n        ReconPipelineManager.newReconPipelineManager(\n            conf,\n            nodeManagerMock,\n            ReconSCMDBDefinition.PIPELINES.getTable(store),\n            new EventQueue(),\n            scmhaManager,\n            scmContext);\n\n    PipelineFactory pipelineFactory = reconPipelineManager.getPipelineFactory();\n    assertTrue(pipelineFactory instanceof ReconPipelineFactory);\n    ReconPipelineFactory reconPipelineFactory =\n        (ReconPipelineFactory) pipelineFactory;\n    assertTrue(reconPipelineFactory.getProviders().isEmpty());\n    for (ReplicationType type  : reconPipelineFactory.getProviders().keySet()) {\n      PipelineProvider pipelineProvider =\n          reconPipelineFactory.getProviders().get(type);\n      assertTrue(pipelineProvider instanceof ReconPipelineProvider);\n    }\n  }\n']",mock;Event;ipeline;Manager;ock;Manager;class;Recon;DBDefinition;Set,9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.474416732788086, -5.0318217277526855, -5.429154872894287, -6.486579895019531, -5.448915481567383, -0.021153202280402184]",0.97906893491745
1,"['  @Test\n  public void testAdminOnlyEndpoints() {\n    // Get all classes with @Path annotation anywhere in recon.\n    Reflections reflections = new Reflections(\n        ""org.apache.hadoop.ozone.recon"",\n        new TypeAnnotationsScanner(),\n        new SubTypesScanner());\n    Set<Class<?>> allEndpoints =\n        reflections.getTypesAnnotatedWith(Path.class);\n\n    Assert.assertFalse(allEndpoints.isEmpty());\n\n    // If an endpoint is added, it must be explicitly added to this set or be\n    // marked with @AdminOnly for this test to pass.\n    Set<Class<?>> nonAdminEndpoints = new HashSet<>();\n    nonAdminEndpoints.add(UtilizationEndpoint.class);\n    nonAdminEndpoints.add(ClusterStateEndpoint.class);\n    nonAdminEndpoints.add(MetricsProxyEndpoint.class);\n    nonAdminEndpoints.add(NodeEndpoint.class);\n    nonAdminEndpoints.add(PipelineEndpoint.class);\n    nonAdminEndpoints.add(TaskStatusService.class);\n\n    Assert.assertTrue(allEndpoints.containsAll(nonAdminEndpoints));\n\n    Set<Class<?>> adminEndpoints = Sets.difference(allEndpoints,\n        nonAdminEndpoints);\n\n    for (Class<?> endpoint: nonAdminEndpoints) {\n      Assert.assertFalse(String.format(""Endpoint class %s has been "" +\n              ""declared as non admin in this test, but is marked as "" +\n              ""@AdminOnly."", endpoint),\n          endpoint.isAnnotationPresent(AdminOnly.class));\n    }\n\n    for (Class<?> endpoint: adminEndpoints) {\n      Assert.assertTrue(String.format(""Endpoint class %s must be marked as "" +\n              ""@AdminOnly or explicitly declared as non admin in this test."",\n          endpoint),\n          endpoint.isAnnotationPresent(AdminOnly.class));\n    }\n  }\n']",pass;Reflections;Annotations;to;Admin;Assert;this;endpoint;apache;Hash,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;7.8580342233181e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.464499473571777, -5.0356974601745605, -5.434967517852783, -6.471140384674072, -5.4660773277282715, -0.021093793213367462]",0.9791272282600403
1,"['  @Test\n  public void testAdminFilterOzoneAdminsOnly() throws Exception {\n    OzoneConfiguration conf = new OzoneConfiguration();\n    conf.setStrings(OzoneConfigKeys.OZONE_ADMINISTRATORS, ""ozone"");\n    testAdminFilterWithPrincipal(conf, ""ozone"", true);\n    testAdminFilterWithPrincipal(conf, ""reject"", false);\n\n    conf.setStrings(OzoneConfigKeys.OZONE_ADMINISTRATORS,\n        OzoneConfigKeys.OZONE_ADMINISTRATORS_WILDCARD);\n    testAdminFilterWithPrincipal(conf, ""other"", true);\n  }\n']",Exception;Keys;new;Configuration;Admin;Config;conf;zone;zone;true,1.280568540096283e-09;8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.384208634495735e-10;5.384208634495735e-10;5.238689482212067e-10,5,5,"[-5.470726490020752, -5.084770679473877, -5.483543395996094, -6.515960216522217, -5.431501388549805, -0.020620377734303474]",0.9795907735824585
1,"['  @Test\n  public void testAdminFilterReconAdminsOnly() throws Exception {\n    OzoneConfiguration conf = new OzoneConfiguration();\n    conf.setStrings(ReconConfigKeys.OZONE_RECON_ADMINISTRATORS, ""recon"");\n    testAdminFilterWithPrincipal(conf, ""recon"", true);\n    testAdminFilterWithPrincipal(conf, ""reject"", false);\n\n    conf.setStrings(ReconConfigKeys.OZONE_RECON_ADMINISTRATORS,\n        OzoneConfigKeys.OZONE_ADMINISTRATORS_WILDCARD);\n    testAdminFilterWithPrincipal(conf, ""other"", true);\n  }\n']",ILDCARD;Admins;Filter;ADMINISTRATORS;new;Keys;Only;ADMINISTRATORS;Config;zone,2.473825588822365e-09;1.280568540096283e-09;1.0477378964424133e-09;1.0040821507573128e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.475492000579834, -5.073681831359863, -5.486911296844482, -6.517877101898193, -5.435183525085449, -0.020636841654777527]",0.9795746207237244
1,"['  @Test\n  public void testAdminFilterOzoneAndReconAdmins() throws Exception {\n    OzoneConfiguration conf = new OzoneConfiguration();\n    conf.setStrings(OzoneConfigKeys.OZONE_ADMINISTRATORS, ""ozone"");\n    conf.setStrings(ReconConfigKeys.OZONE_RECON_ADMINISTRATORS, ""recon"");\n    testAdminFilterWithPrincipal(conf, ""ozone"", true);\n    testAdminFilterWithPrincipal(conf, ""recon"", true);\n    testAdminFilterWithPrincipal(conf, ""reject"", false);\n\n    conf.setStrings(OzoneConfigKeys.OZONE_ADMINISTRATORS,\n        OzoneConfigKeys.OZONE_ADMINISTRATORS_WILDCARD);\n    conf.setStrings(ReconConfigKeys.OZONE_RECON_ADMINISTRATORS,\n        OzoneConfigKeys.OZONE_ADMINISTRATORS_WILDCARD);\n    testAdminFilterWithPrincipal(conf, ""other"", true);\n  }\n']",Exception;recon;Filter;Strings;ADMINISTRATORS;ILDCARD;Principal;zone;Principal;ozone,8.731149137020111e-10;8.003553375601768e-10;6.984919309616089e-10;6.402842700481415e-10;6.039044819772243e-10;5.675246939063072e-10;5.529727786779404e-10;5.529727786779404e-10;5.384208634495735e-10;4.94765117764473e-10,5,5,"[-5.45399284362793, -5.0938801765441895, -5.452889442443848, -6.471841812133789, -5.4145307540893555, -0.020912274718284607]",0.9793049693107605
1,"['  @Test\n  public void testAdminFilterNoAdmins() throws Exception {\n    testAdminFilterWithPrincipal(new OzoneConfiguration(), ""reject"", false);\n  }\n']",Admins;new;Configuration;Exception;false;Admin;Principal;reject;No;Filter,1.0477378964424133e-09;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0;-3.7834979593753815e-10,5,5,"[-5.5511369705200195, -4.9505205154418945, -5.430415630340576, -6.526875972747803, -5.49000883102417, -0.021157637238502502]",0.9790646433830261
1,"['  @Test\n  public void testUtility() {\n    String[] names = NSSummaryEndpoint.parseRequestPath(TEST_PATH_UTILITY);\n    Assert.assertArrayEquals(TEST_NAMES, names);\n    String keyName = NSSummaryEndpoint.getKeyName(names);\n    Assert.assertEquals(TEST_KEY_NAMES, keyName);\n    String subpath = NSSummaryEndpoint.buildSubpath(PARENT_DIR, ""file1.txt"");\n    Assert.assertEquals(TEST_PATH_UTILITY, subpath);\n  }\n']",Utility;txt;EST;Request;PATH;subpath;Endpoint;Path;names;PATH,1.6298145055770874e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;3.4924596548080444e-10,5,5,"[-5.478085517883301, -5.028492450714111, -5.409660339355469, -6.49371337890625, -5.375403881072998, -0.021572118625044823]",0.97865891456604
1,"[""  @Test\n  public void testBasic() throws Exception {\n    // Test volume basics\n    Response volResponse = nsSummaryEndpoint.getBasicInfo(VOL_PATH);\n    NamespaceSummaryResponse volResponseObj =\n            (NamespaceSummaryResponse) volResponse.getEntity();\n    Assert.assertEquals(EntityType.VOLUME, volResponseObj.getEntityType());\n    Assert.assertEquals(2, volResponseObj.getNumBucket());\n    Assert.assertEquals(4, volResponseObj.getNumTotalDir());\n    Assert.assertEquals(6, volResponseObj.getNumTotalKey());\n\n    // Test bucket 1's basics\n    Response bucketOneResponse =\n            nsSummaryEndpoint.getBasicInfo(BUCKET_ONE_PATH);\n    NamespaceSummaryResponse bucketOneObj =\n            (NamespaceSummaryResponse) bucketOneResponse.getEntity();\n    Assert.assertEquals(EntityType.BUCKET, bucketOneObj.getEntityType());\n    Assert.assertEquals(4, bucketOneObj.getNumTotalDir());\n    Assert.assertEquals(4, bucketOneObj.getNumTotalKey());\n\n    // Test bucket 2's basics\n    Response bucketTwoResponse =\n            nsSummaryEndpoint.getBasicInfo(BUCKET_TWO_PATH);\n    NamespaceSummaryResponse bucketTwoObj =\n            (NamespaceSummaryResponse) bucketTwoResponse.getEntity();\n    Assert.assertEquals(EntityType.BUCKET, bucketTwoObj.getEntityType());\n    Assert.assertEquals(0, bucketTwoObj.getNumTotalDir());\n    Assert.assertEquals(2, bucketTwoObj.getNumTotalKey());\n\n    // Test intermediate directory basics\n    Response dirOneResponse = nsSummaryEndpoint.getBasicInfo(DIR_ONE_PATH);\n    NamespaceSummaryResponse dirOneObj =\n            (NamespaceSummaryResponse) dirOneResponse.getEntity();\n    Assert.assertEquals(EntityType.DIRECTORY, dirOneObj.getEntityType());\n    Assert.assertEquals(3, dirOneObj.getNumTotalDir());\n    Assert.assertEquals(3, dirOneObj.getNumTotalKey());\n\n    // Test invalid path\n    Response invalidResponse = nsSummaryEndpoint.getBasicInfo(INVALID_PATH);\n    NamespaceSummaryResponse invalidObj =\n            (NamespaceSummaryResponse) invalidResponse.getEntity();\n    Assert.assertEquals(ResponseStatus.PATH_NOT_FOUND,\n            invalidObj.getStatus());\n\n    // Test key\n    Response keyResponse = nsSummaryEndpoint.getBasicInfo(KEY_PATH);\n    NamespaceSummaryResponse keyResObj =\n            (NamespaceSummaryResponse) keyResponse.getEntity();\n    Assert.assertEquals(EntityType.KEY, keyResObj.getEntityType());\n  }\n""]",Namespace;Namespace;Dir;Basic;basics;Total;Response;bucket;vol;Response,7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.363016128540039, -5.157565116882324, -5.424803733825684, -6.453875541687012, -5.336650848388672, -0.02146349661052227]",0.9787651896476746
1,"['  @Test\n  public void testDiskUsage() throws Exception {\n    // volume level DU\n    Response volResponse = nsSummaryEndpoint.getDiskUsage(VOL_PATH,\n            false, false);\n    DUResponse duVolRes = (DUResponse) volResponse.getEntity();\n    Assert.assertEquals(2, duVolRes.getCount());\n    List<DUResponse.DiskUsage> duData = duVolRes.getDuData();\n    // sort based on subpath\n    Collections.sort(duData,\n            Comparator.comparing(DUResponse.DiskUsage::getSubpath));\n    DUResponse.DiskUsage duBucket1 = duData.get(0);\n    DUResponse.DiskUsage duBucket2 = duData.get(1);\n    Assert.assertEquals(BUCKET_ONE_PATH, duBucket1.getSubpath());\n    Assert.assertEquals(BUCKET_TWO_PATH, duBucket2.getSubpath());\n    Assert.assertEquals(BUCKET_ONE_DATA_SIZE, duBucket1.getSize());\n    Assert.assertEquals(BUCKET_TWO_DATA_SIZE, duBucket2.getSize());\n\n    // bucket level DU\n    Response bucketResponse = nsSummaryEndpoint.getDiskUsage(BUCKET_ONE_PATH,\n            false, false);\n    DUResponse duBucketResponse = (DUResponse) bucketResponse.getEntity();\n    Assert.assertEquals(1, duBucketResponse.getCount());\n    DUResponse.DiskUsage duDir1 = duBucketResponse.getDuData().get(0);\n    Assert.assertEquals(DIR_ONE_PATH, duDir1.getSubpath());\n    Assert.assertEquals(DIR_ONE_DATA_SIZE, duDir1.getSize());\n\n    // dir level DU\n    Response dirResponse = nsSummaryEndpoint.getDiskUsage(DIR_ONE_PATH,\n            false, false);\n    DUResponse duDirReponse = (DUResponse) dirResponse.getEntity();\n    Assert.assertEquals(3, duDirReponse.getCount());\n    List<DUResponse.DiskUsage> duSubDir = duDirReponse.getDuData();\n    Collections.sort(duSubDir,\n            Comparator.comparing(DUResponse.DiskUsage::getSubpath));\n    DUResponse.DiskUsage duDir2 = duSubDir.get(0);\n    DUResponse.DiskUsage duDir3 = duSubDir.get(1);\n    DUResponse.DiskUsage duDir4 = duSubDir.get(2);\n    Assert.assertEquals(DIR_TWO_PATH, duDir2.getSubpath());\n    Assert.assertEquals(KEY_TWO_SIZE, duDir2.getSize());\n\n    Assert.assertEquals(DIR_THREE_PATH, duDir3.getSubpath());\n    Assert.assertEquals(KEY_THREE_SIZE, duDir3.getSize());\n\n    Assert.assertEquals(DIR_FOUR_PATH, duDir4.getSubpath());\n    Assert.assertEquals(KEY_SIX_SIZE, duDir4.getSize());\n\n    // key level DU\n    Response keyResponse = nsSummaryEndpoint.getDiskUsage(KEY_PATH,\n            false, false);\n    DUResponse keyObj = (DUResponse) keyResponse.getEntity();\n    Assert.assertEquals(0, keyObj.getCount());\n    Assert.assertEquals(KEY_FOUR_SIZE, keyObj.getSize());\n\n    // invalid path check\n    Response invalidResponse = nsSummaryEndpoint.getDiskUsage(INVALID_PATH,\n            false, false);\n    DUResponse invalidObj = (DUResponse) invalidResponse.getEntity();\n    Assert.assertEquals(ResponseStatus.PATH_NOT_FOUND,\n            invalidObj.getStatus());\n  }\n']",Endpoint;Data;Entity;Summary;Summary;Disk;Size;subpath;Subpath;Assert,1.1059455573558807e-09;1.0477378964424133e-09;9.74978320300579e-10;9.313225746154785e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.388052463531494, -5.100196838378906, -5.3789143562316895, -6.435333728790283, -5.376402854919434, -0.02174220234155655]",0.9784924387931824
1,"['  @Test\n  public void testDiskUsageWithReplication() throws Exception {\n    setUpMultiBlockKey();\n    Response keyResponse = nsSummaryEndpoint.getDiskUsage(MULTI_BLOCK_KEY_PATH,\n            false, true);\n    DUResponse replicaDUResponse = (DUResponse) keyResponse.getEntity();\n    Assert.assertEquals(ResponseStatus.OK, replicaDUResponse.getStatus());\n    Assert.assertEquals(MULTI_BLOCK_KEY_SIZE_WITH_REPLICA,\n            replicaDUResponse.getSizeWithReplica());\n  }\n']",Multi;Disk;Equals;ns;Entity;UResponse;Endpoint;Replica;set;Size,2.3865140974521637e-09;2.153683453798294e-09;2.0372681319713593e-09;1.862645149230957e-09;1.3387762010097504e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1059455573558807e-09;8.149072527885437e-10;4.656612873077393e-10,5,5,"[-5.517729759216309, -5.0280656814575195, -5.415164470672607, -6.497080326080322, -5.450729846954346, -0.021035781130194664]",0.9791839122772217
1,"['  @Test\n  public void testQuotaUsage() throws Exception {\n    // volume level quota usage\n    Response volResponse = nsSummaryEndpoint.getQuotaUsage(VOL_PATH);\n    QuotaUsageResponse quVolRes = (QuotaUsageResponse) volResponse.getEntity();\n    Assert.assertEquals(VOL_QUOTA, quVolRes.getQuota());\n    Assert.assertEquals(TOTAL_DATA_SIZE, quVolRes.getQuotaUsed());\n\n    // bucket level quota usage\n    Response bucketRes = nsSummaryEndpoint.getQuotaUsage(BUCKET_ONE_PATH);\n    QuotaUsageResponse quBucketRes = (QuotaUsageResponse) bucketRes.getEntity();\n    Assert.assertEquals(BUCKET_ONE_QUOTA, quBucketRes.getQuota());\n    Assert.assertEquals(BUCKET_ONE_DATA_SIZE, quBucketRes.getQuotaUsed());\n\n    Response bucketRes2 = nsSummaryEndpoint.getQuotaUsage(BUCKET_TWO_PATH);\n    QuotaUsageResponse quBucketRes2 =\n            (QuotaUsageResponse) bucketRes2.getEntity();\n    Assert.assertEquals(BUCKET_TWO_QUOTA, quBucketRes2.getQuota());\n    Assert.assertEquals(BUCKET_TWO_DATA_SIZE, quBucketRes2.getQuotaUsed());\n\n    // other level not applicable\n    Response naResponse1 = nsSummaryEndpoint.getQuotaUsage(DIR_ONE_PATH);\n    QuotaUsageResponse quotaUsageResponse1 =\n            (QuotaUsageResponse) naResponse1.getEntity();\n    Assert.assertEquals(ResponseStatus.TYPE_NOT_APPLICABLE,\n            quotaUsageResponse1.getResponseCode());\n\n    Response naResponse2 = nsSummaryEndpoint.getQuotaUsage(KEY_PATH);\n    QuotaUsageResponse quotaUsageResponse2 =\n            (QuotaUsageResponse) naResponse2.getEntity();\n    Assert.assertEquals(ResponseStatus.TYPE_NOT_APPLICABLE,\n            quotaUsageResponse2.getResponseCode());\n\n    // invalid path request\n    Response invalidRes = nsSummaryEndpoint.getQuotaUsage(INVALID_PATH);\n    QuotaUsageResponse invalidResObj =\n            (QuotaUsageResponse) invalidRes.getEntity();\n    Assert.assertEquals(ResponseStatus.PATH_NOT_FOUND,\n            invalidResObj.getResponseCode());\n  }\n']",Response;DATA;Response;usage;Summary;applicable;Quota;TYPE;SIZE;usage,4.190951585769653e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.381583213806152, -5.098645210266113, -5.381104469299316, -6.445847511291504, -5.365225315093994, -0.021807869896292686]",0.9784281849861145
1,"['  @Test\n  public void testFileSizeDist() throws Exception {\n    Response volRes = nsSummaryEndpoint.getFileSizeDistribution(VOL_PATH);\n    FileSizeDistributionResponse volFileSizeDistResObj =\n            (FileSizeDistributionResponse) volRes.getEntity();\n    // If the volume has the correct file size distribution,\n    // other lower level should be correct as well, given all\n    // other previous tests have passed.\n    int[] volFileSizeDist = volFileSizeDistResObj.getFileSizeDist();\n    for (int i = 0; i < ReconConstants.NUM_OF_BINS; ++i) {\n      if (i == 0 || i == 2) {\n        Assert.assertEquals(2, volFileSizeDist[i]);\n      } else if (i == 1 || i == 3) {\n        Assert.assertEquals(1, volFileSizeDist[i]);\n      } else {\n        Assert.assertEquals(0, volFileSizeDist[i]);\n      }\n    }\n  }\n']",Exception;tests;Endpoint;Distribution;Dist;vol;vol;Distribution;previous;Obj,2.0954757928848267e-09;1.280568540096283e-09;1.2223608791828156e-09;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.220055416226387e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.494863986968994, -5.072074890136719, -5.42551851272583, -6.476834297180176, -5.458902835845947, -0.02079155668616295]",0.9794231057167053
1,"['  @Test\n  public void testGetDatanodes() throws Exception {\n    Response response = nodeEndpoint.getDatanodes();\n    DatanodesResponse datanodesResponse =\n        (DatanodesResponse) response.getEntity();\n    Assert.assertEquals(2, datanodesResponse.getTotalCount());\n    Assert.assertEquals(2, datanodesResponse.getDatanodes().size());\n\n    datanodesResponse.getDatanodes().forEach(datanodeMetadata -> {\n      try {\n        testDatanodeResponse(datanodeMetadata);\n      } catch (IOException e) {\n        Assert.fail(e.getMessage());\n      }\n    });\n\n    waitAndCheckConditionAfterHeartbeat(() -> {\n      Response response1 = nodeEndpoint.getDatanodes();\n      DatanodesResponse datanodesResponse1 =\n          (DatanodesResponse) response1.getEntity();\n      DatanodeMetadata datanodeMetadata1 =\n          datanodesResponse1.getDatanodes().stream().filter(datanodeMetadata ->\n              datanodeMetadata.getHostname().equals(""host1.datanode""))\n              .findFirst().orElse(null);\n      return (datanodeMetadata1 != null &&\n          datanodeMetadata1.getContainers() == 1 &&\n          datanodeMetadata1.getOpenContainers() == 1 &&\n          reconScm.getPipelineManager()\n              .getContainersInPipeline(pipeline.getId()).size() == 1);\n    });\n\n    // Change Node OperationalState with NodeManager\n    final NodeManager nodeManager = reconScm.getScmNodeManager();\n    final DatanodeDetails dnDetailsInternal =\n        nodeManager.getNodeByUuid(datanodeDetails.getUuidString());\n    // Backup existing state and sanity check\n    final NodeStatus nStatus = nodeManager.getNodeStatus(dnDetailsInternal);\n    final NodeOperationalState backupOpState =\n        dnDetailsInternal.getPersistedOpState();\n    final long backupOpStateExpiry =\n        dnDetailsInternal.getPersistedOpStateExpiryEpochSec();\n    assertEquals(backupOpState, nStatus.getOperationalState());\n    assertEquals(backupOpStateExpiry, nStatus.getOpStateExpiryEpochSeconds());\n\n    dnDetailsInternal.setPersistedOpState(NodeOperationalState.DECOMMISSIONING);\n    dnDetailsInternal.setPersistedOpStateExpiryEpochSec(666L);\n    nodeManager.setNodeOperationalState(dnDetailsInternal,\n        NodeOperationalState.DECOMMISSIONING, 666L);\n    // Check if the endpoint response reflects the change\n    response = nodeEndpoint.getDatanodes();\n    datanodesResponse = (DatanodesResponse) response.getEntity();\n    // Order of datanodes in the response is random\n    AtomicInteger count = new AtomicInteger();\n    datanodesResponse.getDatanodes().forEach(metadata -> {\n      if (metadata.getUuid().equals(dnDetailsInternal.getUuidString())) {\n        count.incrementAndGet();\n        assertEquals(NodeOperationalState.DECOMMISSIONING,\n            metadata.getOperationalState());\n      }\n    });\n    assertEquals(1, count.get());\n\n    // Restore state\n    dnDetailsInternal.setPersistedOpState(backupOpState);\n    dnDetailsInternal.setPersistedOpStateExpiryEpochSec(backupOpStateExpiry);\n    nodeManager.setNodeOperationalState(dnDetailsInternal,\n        backupOpState, backupOpStateExpiry);\n  }\n']",Get;Each;Response;Condition;filter;Heartbeat;Containers;Metadata;datanode;Containers,1.280568540096283e-09;1.0477378964424133e-09;7.566995918750763e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;6.621121428906918e-10;4.3655745685100555e-10;4.220055416226387e-10;3.8562575355172157e-10,5,5,"[-5.393479347229004, -5.0900468826293945, -5.406623840332031, -6.45793342590332, -5.402519226074219, -0.021493133157491684]",0.9787361025810242
1,"['  @Test\n  public void testGetPipelines() throws Exception {\n    Response response = pipelineEndpoint.getPipelines();\n    PipelinesResponse pipelinesResponse =\n        (PipelinesResponse) response.getEntity();\n    Assert.assertEquals(1, pipelinesResponse.getTotalCount());\n    Assert.assertEquals(1, pipelinesResponse.getPipelines().size());\n    PipelineMetadata pipelineMetadata =\n        pipelinesResponse.getPipelines().iterator().next();\n    Assert.assertEquals(1, pipelineMetadata.getDatanodes().size());\n    Assert.assertEquals(pipeline.getType().toString(),\n        pipelineMetadata.getReplicationType());\n    Assert.assertEquals(pipeline.getReplicationConfig().getRequiredNodes(),\n        pipelineMetadata.getReplicationFactor());\n    Assert.assertEquals(datanodeDetails.getHostName(),\n        pipelineMetadata.getLeaderNode());\n    Assert.assertEquals(pipeline.getId().getId(),\n        pipelineMetadata.getPipelineId());\n    Assert.assertEquals(5, pipelineMetadata.getLeaderElections());\n\n    waitAndCheckConditionAfterHeartbeat(() -> {\n      Response response1 = pipelineEndpoint.getPipelines();\n      PipelinesResponse pipelinesResponse1 =\n          (PipelinesResponse) response1.getEntity();\n      PipelineMetadata pipelineMetadata1 =\n          pipelinesResponse1.getPipelines().iterator().next();\n      return (pipelineMetadata1.getContainers() == 1);\n    });\n  }\n']",Exception;Get;next;ipelines;Response;pipelines;size;iterator;Response;size,1.862645149230957e-09;1.3969838619232178e-09;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.42023229598999, -5.091217994689941, -5.376649856567383, -6.425102710723877, -5.387876987457275, -0.02162414975464344]",0.9786080718040466
1,"['  @Test\n  public void testGetMetricsResponse() throws Exception {\n    HttpServletResponse responseMock = mock(HttpServletResponse.class);\n    ServletOutputStream outputStreamMock = mock(ServletOutputStream.class);\n    when(responseMock.getOutputStream()).thenReturn(outputStreamMock);\n    UriInfo uriInfoMock = mock(UriInfo.class);\n    URI uriMock = mock(URI.class);\n    when(uriMock.getQuery()).thenReturn("""");\n    when(uriInfoMock.getRequestUri()).thenReturn(uriMock);\n\n    // Mock makeHttpCall to send a json response\n    // when the prometheus endpoint is queried.\n    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    InputStream inputStream = classLoader\n        .getResourceAsStream(PROMETHEUS_TEST_RESPONSE_FILE);\n    HttpURLConnection urlConnectionMock = mock(HttpURLConnection.class);\n    when(urlConnectionMock.getResponseCode())\n        .thenReturn(HttpServletResponse.SC_OK);\n    when(urlConnectionMock.getInputStream()).thenReturn(inputStream);\n    when(reconUtilsMock.makeHttpCall(any(URLConnectionFactory.class),\n        anyString(), anyBoolean())).thenReturn(urlConnectionMock);\n\n    metricsProxyEndpoint.getMetricsResponse(PROMETHEUS_INSTANT_QUERY_API,\n        uriInfoMock, responseMock);\n\n    byte[] fileBytes = FileUtils.readFileToByteArray(\n        new File(classLoader.getResource(PROMETHEUS_TEST_RESPONSE_FILE)\n            .getFile())\n        );\n    verify(outputStreamMock).write(fileBytes, 0, fileBytes.length);\n  }\n']",Utils;Get;any;mock;Metrics;Response;ock;mock;Servlet;class,1.8335413187742233e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.420267105102539, -5.059628486633301, -5.390545845031738, -6.438499450683594, -5.3945159912109375, -0.021707557141780853]",0.9785263538360596
1,"['  @Test\n  public void testGetClusterState() throws Exception {\n    Response response = clusterStateEndpoint.getClusterState();\n    ClusterStateResponse clusterStateResponse =\n        (ClusterStateResponse) response.getEntity();\n\n    Assert.assertEquals(1, clusterStateResponse.getPipelines());\n    Assert.assertEquals(0, clusterStateResponse.getVolumes());\n    Assert.assertEquals(0, clusterStateResponse.getBuckets());\n    Assert.assertEquals(0, clusterStateResponse.getKeys());\n    Assert.assertEquals(2, clusterStateResponse.getTotalDatanodes());\n    Assert.assertEquals(2, clusterStateResponse.getHealthyDatanodes());\n\n    waitAndCheckConditionAfterHeartbeat(() -> {\n      Response response1 = clusterStateEndpoint.getClusterState();\n      ClusterStateResponse clusterStateResponse1 =\n          (ClusterStateResponse) response1.getEntity();\n      return (clusterStateResponse1.getContainers() == 1);\n    });\n\n    // check volume, bucket and key count after running table count task\n    Pair<String, Boolean> result =\n        tableCountTask.reprocess(reconOMMetadataManager);\n    assertTrue(result.getRight());\n    response = clusterStateEndpoint.getClusterState();\n    clusterStateResponse = (ClusterStateResponse) response.getEntity();\n    Assert.assertEquals(2, clusterStateResponse.getVolumes());\n    Assert.assertEquals(2, clusterStateResponse.getBuckets());\n    Assert.assertEquals(3, clusterStateResponse.getKeys());\n  }\n']",Cluster;Get;recon;wait;Containers;response;reprocess;response;bucket;Cluster,1.2223608791828156e-09;9.313225746154785e-10;7.275957614183426e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.452917575836182, -5.09281063079834, -5.4057393074035645, -6.447366714477539, -5.410661697387695, -0.02119160071015358]",0.9790313839912415
1,"['  @Test\n  public void testGetFileCounts() throws Exception {\n    OmKeyInfo omKeyInfo1 = mock(OmKeyInfo.class);\n    given(omKeyInfo1.getKeyName()).willReturn(""key1"");\n    given(omKeyInfo1.getVolumeName()).willReturn(""vol1"");\n    given(omKeyInfo1.getBucketName()).willReturn(""bucket1"");\n    given(omKeyInfo1.getDataSize()).willReturn(1000L);\n\n    OmKeyInfo omKeyInfo2 = mock(OmKeyInfo.class);\n    given(omKeyInfo2.getKeyName()).willReturn(""key2"");\n    given(omKeyInfo2.getVolumeName()).willReturn(""vol1"");\n    given(omKeyInfo2.getBucketName()).willReturn(""bucket1"");\n    given(omKeyInfo2.getDataSize()).willReturn(100000L);\n\n    OmKeyInfo omKeyInfo3 = mock(OmKeyInfo.class);\n    given(omKeyInfo3.getKeyName()).willReturn(""key1"");\n    given(omKeyInfo3.getVolumeName()).willReturn(""vol2"");\n    given(omKeyInfo3.getBucketName()).willReturn(""bucket1"");\n    given(omKeyInfo3.getDataSize()).willReturn(1000L);\n\n    OMMetadataManager omMetadataManager = mock(OmMetadataManagerImpl.class);\n    TypedTable<String, OmKeyInfo> keyTable = mock(TypedTable.class);\n\n    TypedTable.TypedTableIterator mockKeyIter = mock(TypedTable\n        .TypedTableIterator.class);\n    TypedTable.TypedKeyValue mockKeyValue = mock(\n        TypedTable.TypedKeyValue.class);\n\n    when(keyTable.iterator()).thenReturn(mockKeyIter);\n    when(omMetadataManager.getKeyTable(getBucketLayout())).thenReturn(keyTable);\n    when(mockKeyIter.hasNext())\n        .thenReturn(true)\n        .thenReturn(true)\n        .thenReturn(true)\n        .thenReturn(false);\n    when(mockKeyIter.next()).thenReturn(mockKeyValue);\n    when(mockKeyValue.getValue())\n        .thenReturn(omKeyInfo1)\n        .thenReturn(omKeyInfo2)\n        .thenReturn(omKeyInfo3);\n\n    Pair<String, Boolean> result =\n        fileSizeCountTask.reprocess(omMetadataManager);\n    assertTrue(result.getRight());\n\n    assertEquals(3, fileCountBySizeDao.count());\n    Response response = utilizationEndpoint.getFileCounts(null, null, 0);\n    List<FileCountBySize> resultSet =\n        (List<FileCountBySize>) response.getEntity();\n    assertEquals(3, resultSet.size());\n    assertTrue(resultSet.stream().anyMatch(o -> o.getVolume().equals(""vol1"") &&\n        o.getBucket().equals(""bucket1"") && o.getFileSize() == 1024L &&\n        o.getCount() == 1L));\n    assertTrue(resultSet.stream().anyMatch(o -> o.getVolume().equals(""vol1"") &&\n        o.getBucket().equals(""bucket1"") && o.getFileSize() == 131072 &&\n        o.getCount() == 1L));\n    assertTrue(resultSet.stream().anyMatch(o -> o.getVolume().equals(""vol2"") &&\n        o.getBucket().equals(""bucket1"") && o.getFileSize() == 1024L &&\n        o.getCount() == 1L));\n\n    // Test for ""volume"" query param\n    response = utilizationEndpoint.getFileCounts(""vol1"", null, 0);\n    resultSet = (List<FileCountBySize>) response.getEntity();\n    assertEquals(2, resultSet.size());\n    assertTrue(resultSet.stream().allMatch(o -> o.getVolume().equals(""vol1"")));\n\n    // Test for non-existent volume\n    response = utilizationEndpoint.getFileCounts(""vol"", null, 0);\n    resultSet = (List<FileCountBySize>) response.getEntity();\n    assertEquals(0, resultSet.size());\n\n    // Test for ""volume"" + ""bucket"" query param\n    response = utilizationEndpoint.getFileCounts(""vol1"", ""bucket1"", 0);\n    resultSet = (List<FileCountBySize>) response.getEntity();\n    assertEquals(2, resultSet.size());\n    assertTrue(resultSet.stream().allMatch(o -> o.getVolume().equals(""vol1"") &&\n        o.getBucket().equals(""bucket1"")));\n\n    // Test for non-existent bucket\n    response = utilizationEndpoint.getFileCounts(""vol1"", ""bucket"", 0);\n    resultSet = (List<FileCountBySize>) response.getEntity();\n    assertEquals(0, resultSet.size());\n\n    // Test for ""volume"" + ""bucket"" + ""fileSize"" query params\n    response = utilizationEndpoint.getFileCounts(""vol1"", ""bucket1"", 131072);\n    resultSet = (List<FileCountBySize>) response.getEntity();\n    assertEquals(1, resultSet.size());\n    FileCountBySize o = resultSet.get(0);\n    assertTrue(o.getVolume().equals(""vol1"") && o.getBucket().equals(\n        ""bucket1"") && o.getFileSize() == 131072);\n\n    // Test for non-existent fileSize\n    response = utilizationEndpoint.getFileCounts(""vol1"", ""bucket1"", 1310725);\n    resultSet = (List<FileCountBySize>) response.getEntity();\n    assertEquals(0, resultSet.size());\n  }\n']",Table;mock;mock;Iterator;Iterator;Typed;Key;mock;Table;mock,2.6775524020195007e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0622898116707802e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.473491191864014, -4.957711696624756, -5.3646721839904785, -6.454469203948975, -5.435361862182617, -0.022079715505242348]",0.9781623482704163
1,"[""  @Test\n  public void testOpenContainerCount() throws Exception {\n    // In case of pipeline doesn't exist\n    waitAndCheckConditionAfterHeartbeat(() -> {\n\n      DatanodeMetadata datanodeMetadata1 = getDatanodeMetadata();\n      return datanodeMetadata1.getContainers() == 10\n              && datanodeMetadata1.getPipelines().size() == 2;\n    });\n\n    DatanodeMetadata datanodeMetadata = getDatanodeMetadata();\n\n    int expectedCnt = datanodeMetadata.getOpenContainers();\n\n    // check if open container's count decrement according\n    for (long id = 1L; id <= 10L; ++id) {\n      --expectedCnt;\n      closeContainer(id);\n      DatanodeMetadata metadata = getDatanodeMetadata();\n      Assert.assertEquals(expectedCnt, metadata.getOpenContainers());\n    }\n  }\n""]",Exception;pipeline;container's;In;Metadata;wait;metadata;metadata;Datanode;Datanode,1.862645149230957e-09;9.313225746154785e-10;7.203198038041592e-10;5.675246939063072e-10;5.093170329928398e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2741809263825417e-10;3.128661774098873e-10,5,5,"[-5.502688884735107, -5.05789041519165, -5.410879135131836, -6.480685234069824, -5.4604926109313965, -0.020903635770082474]",0.979313313961029
1,"['  @Test\n  public void testGetTaskTimes() {\n    ReconTaskStatusDao reconTaskStatusDao = getDao(ReconTaskStatusDao.class);\n\n    ReconTaskStatus reconTaskStatusRecord = new ReconTaskStatus(\n        ""Dummy_Task"", System.currentTimeMillis(), 0L);\n    reconTaskStatusDao.insert(reconTaskStatusRecord);\n\n    List<ReconTaskStatus> resultList = new ArrayList<>();\n    resultList.add(reconTaskStatusRecord);\n\n    Response response = taskStatusService.getTaskTimes();\n\n    List<ReconTaskStatus> responseList = (List<ReconTaskStatus>)\n        response.getEntity();\n\n    Assert.assertEquals(resultList.size(), responseList.size());\n    for(ReconTaskStatus r : responseList) {\n      Assert.assertEquals(reconTaskStatusRecord.getTaskName(), r.getTaskName());\n      Assert.assertEquals(reconTaskStatusRecord.getLastUpdatedTimestamp(),\n          r.getLastUpdatedTimestamp());\n    }\n  }\n']",ao;ao;Task;Record;List;Last;Updated;Recon;Task;response,6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.465336322784424, -5.025871753692627, -5.374495029449463, -6.483679294586182, -5.475877285003662, -0.02137143351137638]",0.9788551926612854
1,"['  @Test\n  public void testGetKeysForContainer() {\n    Response response = containerEndpoint.getKeysForContainer(1L, -1, """");\n\n    KeysResponse data = (KeysResponse) response.getEntity();\n    Collection<KeyMetadata> keyMetadataList = data.getKeys();\n\n    assertEquals(3, data.getTotalCount());\n    assertEquals(2, keyMetadataList.size());\n\n    Iterator<KeyMetadata> iterator = keyMetadataList.iterator();\n\n    KeyMetadata keyMetadata = iterator.next();\n    assertEquals(""key_one"", keyMetadata.getKey());\n    assertEquals(1, keyMetadata.getVersions().size());\n    assertEquals(1, keyMetadata.getBlockIds().size());\n    Map<Long, List<KeyMetadata.ContainerBlockMetadata>> blockIds =\n        keyMetadata.getBlockIds();\n    assertEquals(101, blockIds.get(0L).iterator().next().getLocalID());\n\n    keyMetadata = iterator.next();\n    assertEquals(""key_two"", keyMetadata.getKey());\n    assertEquals(2, keyMetadata.getVersions().size());\n    assertTrue(keyMetadata.getVersions().contains(0L) && keyMetadata\n        .getVersions().contains(1L));\n    assertEquals(2, keyMetadata.getBlockIds().size());\n    blockIds = keyMetadata.getBlockIds();\n    assertEquals(103, blockIds.get(0L).iterator().next().getLocalID());\n    assertEquals(104, blockIds.get(1L).iterator().next().getLocalID());\n\n    response = containerEndpoint.getKeysForContainer(3L, -1, """");\n    data = (KeysResponse) response.getEntity();\n    keyMetadataList = data.getKeys();\n    assertTrue(keyMetadataList.isEmpty());\n    assertEquals(0, data.getTotalCount());\n\n    // test if limit works as expected\n    response = containerEndpoint.getKeysForContainer(1L, 1, """");\n    data = (KeysResponse) response.getEntity();\n    keyMetadataList = data.getKeys();\n    assertEquals(1, keyMetadataList.size());\n    assertEquals(3, data.getTotalCount());\n  }\n']",Metadata;Block;contains;True;Keys;Block;Long;iterator;block;Versions,2.5320332497358322e-09;1.3969838619232178e-09;1.2223608791828156e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.41826057434082, -5.025814056396484, -5.341221332550049, -6.420618534088135, -5.411117076873779, -0.022128457203507423]",0.9781146049499512
1,"['  @Test\n  public void testGetKeysForContainerWithPrevKey() {\n    // test if prev-key param works as expected\n    Response response = containerEndpoint.getKeysForContainer(\n        1L, -1, ""/sampleVol/bucketOne/key_one"");\n\n    KeysResponse data =\n        (KeysResponse) response.getEntity();\n\n    assertEquals(3, data.getTotalCount());\n\n    Collection<KeyMetadata> keyMetadataList = data.getKeys();\n    assertEquals(1, keyMetadataList.size());\n\n    Iterator<KeyMetadata> iterator = keyMetadataList.iterator();\n    KeyMetadata keyMetadata = iterator.next();\n\n    assertEquals(""key_two"", keyMetadata.getKey());\n    assertEquals(2, keyMetadata.getVersions().size());\n    assertEquals(2, keyMetadata.getBlockIds().size());\n\n    response = containerEndpoint.getKeysForContainer(\n        1L, -1, StringUtils.EMPTY);\n    data = (KeysResponse) response.getEntity();\n    keyMetadataList = data.getKeys();\n\n    assertEquals(3, data.getTotalCount());\n    assertEquals(2, keyMetadataList.size());\n    iterator = keyMetadataList.iterator();\n    keyMetadata = iterator.next();\n    assertEquals(""key_one"", keyMetadata.getKey());\n\n    // test for negative cases\n    response = containerEndpoint.getKeysForContainer(\n        1L, -1, ""/sampleVol/bucketOne/invalid_key"");\n    data = (KeysResponse) response.getEntity();\n    keyMetadataList = data.getKeys();\n    assertEquals(3, data.getTotalCount());\n    assertEquals(0, keyMetadataList.size());\n\n    response = containerEndpoint.getKeysForContainer(\n        5L, -1, """");\n    data = (KeysResponse) response.getEntity();\n    keyMetadataList = data.getKeys();\n    assertEquals(0, keyMetadataList.size());\n    assertEquals(0, data.getTotalCount());\n  }\n']",Prev;Entity;get;container;works;next;Response;Equals;EMPTY;Metadata,1.0477378964424133e-09;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.406585693359375, -5.086467742919922, -5.3974761962890625, -6.43842887878418, -5.388707160949707, -0.02159300073981285]",0.9786384701728821
1,"['  @Test\n  public void testGetContainers() {\n    Response response = containerEndpoint.getContainers(-1, 0L);\n\n    ContainersResponse responseObject =\n        (ContainersResponse) response.getEntity();\n\n    ContainersResponse.ContainersResponseData data =\n        responseObject.getContainersResponseData();\n    assertEquals(2, data.getTotalCount());\n\n    List<ContainerMetadata> containers = new ArrayList<>(data.getContainers());\n\n    Iterator<ContainerMetadata> iterator = containers.iterator();\n\n    ContainerMetadata containerMetadata = iterator.next();\n    assertEquals(1L, containerMetadata.getContainerID());\n    // Number of keys for CID:1 should be 3 because of two different versions\n    // of key_two stored in CID:1\n    assertEquals(3L, containerMetadata.getNumberOfKeys());\n\n    containerMetadata = iterator.next();\n    assertEquals(2L, containerMetadata.getContainerID());\n    assertEquals(2L, containerMetadata.getNumberOfKeys());\n\n    // test if limit works as expected\n    response = containerEndpoint.getContainers(1, 0L);\n    responseObject = (ContainersResponse) response.getEntity();\n    data = responseObject.getContainersResponseData();\n    containers = new ArrayList<>(data.getContainers());\n    assertEquals(1, containers.size());\n    assertEquals(2, data.getTotalCount());\n  }\n']",Containers;works;containers;Iterator;Get;two;Response;Containers;iterator;container,9.89530235528946e-10;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.346940502524376e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.442909240722656, -5.085477828979492, -5.401371002197266, -6.459995746612549, -5.411106109619141, -0.021279478445649147]",0.9789453148841858
1,"['  @Test\n  public void testGetContainersWithPrevKey() {\n\n    Response response = containerEndpoint.getContainers(1, 1L);\n\n    ContainersResponse responseObject =\n        (ContainersResponse) response.getEntity();\n\n    ContainersResponse.ContainersResponseData data =\n        responseObject.getContainersResponseData();\n    assertEquals(2, data.getTotalCount());\n\n    List<ContainerMetadata> containers = new ArrayList<>(data.getContainers());\n\n    Iterator<ContainerMetadata> iterator = containers.iterator();\n\n    ContainerMetadata containerMetadata = iterator.next();\n\n    assertEquals(1, containers.size());\n    assertEquals(2L, containerMetadata.getContainerID());\n\n    response = containerEndpoint.getContainers(-1, 0L);\n    responseObject = (ContainersResponse) response.getEntity();\n    data = responseObject.getContainersResponseData();\n    containers = new ArrayList<>(data.getContainers());\n    assertEquals(2, containers.size());\n    assertEquals(2, data.getTotalCount());\n    iterator = containers.iterator();\n    containerMetadata = iterator.next();\n    assertEquals(1L, containerMetadata.getContainerID());\n\n    // test for negative cases\n    response = containerEndpoint.getContainers(-1, 5L);\n    responseObject = (ContainersResponse) response.getEntity();\n    data = responseObject.getContainersResponseData();\n    containers = new ArrayList<>(data.getContainers());\n    assertEquals(0, containers.size());\n    assertEquals(2, data.getTotalCount());\n\n    response = containerEndpoint.getContainers(-1, -1L);\n    responseObject = (ContainersResponse) response.getEntity();\n    data = responseObject.getContainersResponseData();\n    containers = new ArrayList<>(data.getContainers());\n    assertEquals(2, containers.size());\n    assertEquals(2, data.getTotalCount());\n  }\n']",Response;Object;response;containers;Data;Object;response;Containers;Array;new,1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.89530235528946e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.456968210637569e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.384677410125732, -5.084164619445801, -5.378716468811035, -6.424630165100098, -5.383274078369141, -0.02184484340250492]",0.9783920049667358
1,"['  @Test\n  public void testGetMissingContainers() throws IOException {\n    Response response = containerEndpoint.getMissingContainers();\n\n    MissingContainersResponse responseObject =\n        (MissingContainersResponse) response.getEntity();\n\n    assertEquals(0, responseObject.getTotalCount());\n    assertEquals(Collections.EMPTY_LIST, responseObject.getContainers());\n\n    // Add missing containers to the database\n    long missingSince = System.currentTimeMillis();\n    UnhealthyContainers missing = new UnhealthyContainers();\n    missing.setContainerId(1L);\n    missing.setInStateSince(missingSince);\n    missing.setActualReplicaCount(0);\n    missing.setExpectedReplicaCount(3);\n    missing.setReplicaDelta(3);\n    missing.setContainerState(\n        ContainerSchemaDefinition.UnHealthyContainerStates.MISSING.toString());\n    ArrayList<UnhealthyContainers> missingList =\n        new ArrayList<UnhealthyContainers>();\n    missingList.add(missing);\n    containerHealthSchemaManager.insertUnhealthyContainerRecords(missingList);\n\n    putContainerInfos(1);\n    // Add container history for id 1\n    final UUID u1 = newDatanode(""host1"", ""127.0.0.1"");\n    final UUID u2 = newDatanode(""host2"", ""127.0.0.2"");\n    final UUID u3 = newDatanode(""host3"", ""127.0.0.3"");\n    final UUID u4 = newDatanode(""host4"", ""127.0.0.4"");\n    reconContainerManager.upsertContainerHistory(1L, u1, 1L, 1L);\n    reconContainerManager.upsertContainerHistory(1L, u2, 2L, 1L);\n    reconContainerManager.upsertContainerHistory(1L, u3, 3L, 1L);\n    reconContainerManager.upsertContainerHistory(1L, u4, 4L, 1L);\n\n    response = containerEndpoint.getMissingContainers();\n    responseObject = (MissingContainersResponse) response.getEntity();\n    assertEquals(1, responseObject.getTotalCount());\n    MissingContainerMetadata container =\n        responseObject.getContainers().stream().findFirst().orElse(null);\n    Assert.assertNotNull(container);\n\n    assertEquals(containerID.getId(), container.getContainerID());\n    assertEquals(keyCount, container.getKeys());\n    assertEquals(pipelineID.getId(), container.getPipelineID());\n    assertEquals(3, container.getReplicas().size());\n    assertEquals(missingSince, container.getMissingSince());\n\n    Set<String> datanodes = Collections.unmodifiableSet(\n        new HashSet<>(Arrays.asList(""host2"", ""host3"", ""host4"")));\n    List<ContainerHistory> containerReplicas = container.getReplicas();\n    containerReplicas.forEach(history -> {\n      Assert.assertTrue(datanodes.contains(history.getDatanodeHost()));\n    });\n  }\n']",Schema;Definition;Entity;Collections;Health;Response;Unhealthy;Response;current;response,8.381903171539307e-09;2.7939677238464355e-09;1.979060471057892e-09;1.862645149230957e-09;1.2223608791828156e-09;1.1932570487260818e-09;1.1059455573558807e-09;1.076841726899147e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.4721856117248535, -4.990858554840088, -5.3645830154418945, -6.4534687995910645, -5.493595123291016, -0.021601051092147827]",0.9786307215690613
1,"['  @Test\n  public void testUnhealthyContainers() throws IOException {\n    Response response = containerEndpoint.getUnhealthyContainers(1000, 1);\n\n    UnhealthyContainersResponse responseObject =\n        (UnhealthyContainersResponse) response.getEntity();\n\n    assertEquals(0, responseObject.getMissingCount());\n    assertEquals(0, responseObject.getOverReplicatedCount());\n    assertEquals(0, responseObject.getUnderReplicatedCount());\n    assertEquals(0, responseObject.getMisReplicatedCount());\n\n    assertEquals(Collections.EMPTY_LIST, responseObject.getContainers());\n\n    putContainerInfos(14);\n    uuid1 = newDatanode(""host1"", ""127.0.0.1"");\n    uuid2 = newDatanode(""host2"", ""127.0.0.2"");\n    uuid3 = newDatanode(""host3"", ""127.0.0.3"");\n    uuid4 = newDatanode(""host4"", ""127.0.0.4"");\n    createUnhealthyRecords(5, 4, 3, 2);\n\n    response = containerEndpoint.getUnhealthyContainers(1000, 1);\n\n    responseObject = (UnhealthyContainersResponse) response.getEntity();\n    assertEquals(5, responseObject.getMissingCount());\n    assertEquals(4, responseObject.getOverReplicatedCount());\n    assertEquals(3, responseObject.getUnderReplicatedCount());\n    assertEquals(2, responseObject.getMisReplicatedCount());\n\n    Collection<UnhealthyContainerMetadata> records\n        = responseObject.getContainers();\n    List<UnhealthyContainerMetadata> missing = records\n        .stream()\n        .filter(r -> r.getContainerState()\n            .equals(UnHealthyContainerStates.MISSING.toString()))\n        .collect(Collectors.toList());\n    assertEquals(5, missing.size());\n    assertEquals(3, missing.get(0).getExpectedReplicaCount());\n    assertEquals(0, missing.get(0).getActualReplicaCount());\n    assertEquals(3, missing.get(0).getReplicaDeltaCount());\n    assertEquals(12345L, missing.get(0).getUnhealthySince());\n    assertEquals(1L, missing.get(0).getContainerID());\n    assertEquals(keyCount, missing.get(0).getKeys());\n    assertEquals(pipelineID.getId(), missing.get(0).getPipelineID());\n    assertEquals(3, missing.get(0).getReplicas().size());\n    assertNull(missing.get(0).getReason());\n\n    Set<String> datanodes = Collections.unmodifiableSet(\n        new HashSet<>(Arrays.asList(""host2"", ""host3"", ""host4"")));\n    List<ContainerHistory> containerReplicas = missing.get(0).getReplicas();\n    containerReplicas.forEach(history -> {\n      Assert.assertTrue(datanodes.contains(history.getDatanodeHost()));\n    });\n\n    List<UnhealthyContainerMetadata> overRep = records\n        .stream()\n        .filter(r -> r.getContainerState()\n            .equals(UnHealthyContainerStates.OVER_REPLICATED.toString()))\n        .collect(Collectors.toList());\n    assertEquals(4, overRep.size());\n    assertEquals(3, overRep.get(0).getExpectedReplicaCount());\n    assertEquals(5, overRep.get(0).getActualReplicaCount());\n    assertEquals(-2, overRep.get(0).getReplicaDeltaCount());\n    assertEquals(12345L, overRep.get(0).getUnhealthySince());\n    assertEquals(6L, overRep.get(0).getContainerID());\n    assertNull(overRep.get(0).getReason());\n\n    List<UnhealthyContainerMetadata> underRep = records\n        .stream()\n        .filter(r -> r.getContainerState()\n            .equals(UnHealthyContainerStates.UNDER_REPLICATED.toString()))\n        .collect(Collectors.toList());\n    assertEquals(3, underRep.size());\n    assertEquals(3, underRep.get(0).getExpectedReplicaCount());\n    assertEquals(1, underRep.get(0).getActualReplicaCount());\n    assertEquals(2, underRep.get(0).getReplicaDeltaCount());\n    assertEquals(12345L, underRep.get(0).getUnhealthySince());\n    assertEquals(10L, underRep.get(0).getContainerID());\n    assertNull(underRep.get(0).getReason());\n\n    List<UnhealthyContainerMetadata> misRep = records\n        .stream()\n        .filter(r -> r.getContainerState()\n            .equals(UnHealthyContainerStates.MIS_REPLICATED.toString()))\n        .collect(Collectors.toList());\n    assertEquals(2, misRep.size());\n    assertEquals(2, misRep.get(0).getExpectedReplicaCount());\n    assertEquals(1, misRep.get(0).getActualReplicaCount());\n    assertEquals(1, misRep.get(0).getReplicaDeltaCount());\n    assertEquals(12345L, misRep.get(0).getUnhealthySince());\n    assertEquals(13L, misRep.get(0).getContainerID());\n    assertEquals(""some reason"", misRep.get(0).getReason());\n  }\n']",Datanode;Datanode;Collections;IOException;Response;EMPTY;Records;put;host;Entity,1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10;4.0745362639427185e-10;3.5652192309498787e-10;3.4924596548080444e-10,5,5,"[-5.384517669677734, -5.086954116821289, -5.392867088317871, -6.429605007171631, -5.392019271850586, -0.021712690591812134]",0.9785213470458984
1,"['  @Test\n  public void testUnhealthyContainersFilteredResponse() throws IOException {\n    String missing =  UnHealthyContainerStates.MISSING.toString();\n\n    Response response = containerEndpoint\n        .getUnhealthyContainers(missing, 1000, 1);\n\n    UnhealthyContainersResponse responseObject =\n        (UnhealthyContainersResponse) response.getEntity();\n\n    assertEquals(0, responseObject.getMissingCount());\n    assertEquals(0, responseObject.getOverReplicatedCount());\n    assertEquals(0, responseObject.getUnderReplicatedCount());\n    assertEquals(0, responseObject.getMisReplicatedCount());\n    assertEquals(Collections.EMPTY_LIST, responseObject.getContainers());\n\n    putContainerInfos(5);\n    uuid1 = newDatanode(""host1"", ""127.0.0.1"");\n    uuid2 = newDatanode(""host2"", ""127.0.0.2"");\n    uuid3 = newDatanode(""host3"", ""127.0.0.3"");\n    uuid4 = newDatanode(""host4"", ""127.0.0.4"");\n    createUnhealthyRecords(5, 4, 3, 2);\n\n    response = containerEndpoint.getUnhealthyContainers(missing, 1000, 1);\n\n    responseObject = (UnhealthyContainersResponse) response.getEntity();\n    // Summary should have the count for all unhealthy:\n    assertEquals(5, responseObject.getMissingCount());\n    assertEquals(4, responseObject.getOverReplicatedCount());\n    assertEquals(3, responseObject.getUnderReplicatedCount());\n    assertEquals(2, responseObject.getMisReplicatedCount());\n\n    Collection<UnhealthyContainerMetadata> records\n        = responseObject.getContainers();\n\n    // There should only be 5 missing containers and no others as we asked for\n    // only missing.\n    assertEquals(5, records.size());\n    for (UnhealthyContainerMetadata r : records) {\n      assertEquals(missing, r.getContainerState());\n    }\n  }\n']",should;Un;records;Container;others;Summary;Equals;Datanode;unhealthy;Entity,2.7939677238464355e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.4330244064331055, -5.048373222351074, -5.365811824798584, -6.415383338928223, -5.4217658042907715, -0.02175363339483738]",0.9784811735153198
1,"['  @Test\n  public void testUnhealthyContainersInvalidState() {\n    try {\n      containerEndpoint.getUnhealthyContainers(""invalid"", 1000, 1);\n      fail(""Expected exception to be raised"");\n    } catch (WebApplicationException e) {\n      assertEquals(""HTTP 400 Bad Request"", e.getMessage());\n    }\n  }\n']",Unhealthy;Invalid;get;raised;to;catch;HTTP;Endpoint;Message;Expected,1.5133991837501526e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.238689482212067e-10;4.511093720793724e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.548803806304932, -4.98114013671875, -5.429967403411865, -6.513122081756592, -5.4679694175720215, -0.021065428853034973]",0.9791547656059265
1,"['  @Test\n  public void testUnhealthyContainersPaging() throws IOException {\n    putContainerInfos(6);\n    uuid1 = newDatanode(""host1"", ""127.0.0.1"");\n    uuid2 = newDatanode(""host2"", ""127.0.0.2"");\n    uuid3 = newDatanode(""host3"", ""127.0.0.3"");\n    uuid4 = newDatanode(""host4"", ""127.0.0.4"");\n    createUnhealthyRecords(5, 4, 3, 2);\n    UnhealthyContainersResponse firstBatch =\n        (UnhealthyContainersResponse) containerEndpoint.getUnhealthyContainers(\n            3, 1).getEntity();\n\n    UnhealthyContainersResponse secondBatch =\n        (UnhealthyContainersResponse) containerEndpoint.getUnhealthyContainers(\n            3, 2).getEntity();\n\n    ArrayList<UnhealthyContainerMetadata> records\n        = new ArrayList<>(firstBatch.getContainers());\n    assertEquals(3, records.size());\n    assertEquals(1L, records.get(0).getContainerID());\n    assertEquals(2L, records.get(1).getContainerID());\n    assertEquals(3L, records.get(2).getContainerID());\n\n    records\n        = new ArrayList<>(secondBatch.getContainers());\n    assertEquals(3, records.size());\n    assertEquals(4L, records.get(0).getContainerID());\n    assertEquals(5L, records.get(1).getContainerID());\n    assertEquals(6L, records.get(2).getContainerID());\n  }\n']",Datanode;IOException;Datanode;Unhealthy;Unhealthy;new;Array;second;Array;Unhealthy,1.3387762010097504e-09;1.1350493878126144e-09;9.313225746154785e-10;7.130438461899757e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.445140361785889, -5.048472881317139, -5.375063419342041, -6.435121536254883, -5.438989162445068, -0.021545400843024254]",0.9786849021911621
1,"['  @Test\n  public void testGetReplicaHistoryForContainer() throws IOException {\n    // Add container history for container id 1\n    final UUID u1 = newDatanode(""host1"", ""127.0.0.1"");\n    final UUID u2 = newDatanode(""host2"", ""127.0.0.2"");\n    final UUID u3 = newDatanode(""host3"", ""127.0.0.3"");\n    final UUID u4 = newDatanode(""host4"", ""127.0.0.4"");\n    reconContainerManager.upsertContainerHistory(1L, u1, 1L, 1L);\n    reconContainerManager.upsertContainerHistory(1L, u2, 2L, 1L);\n    reconContainerManager.upsertContainerHistory(1L, u3, 3L, 1L);\n    reconContainerManager.upsertContainerHistory(1L, u4, 4L, 1L);\n\n    reconContainerManager.upsertContainerHistory(1L, u1, 5L, 1L);\n\n    Response response = containerEndpoint.getReplicaHistoryForContainer(1L);\n    List<ContainerHistory> histories =\n        (List<ContainerHistory>) response.getEntity();\n    Set<String> datanodes = Collections.unmodifiableSet(\n        new HashSet<>(Arrays.asList(\n            u1.toString(), u2.toString(), u3.toString(), u4.toString())));\n    Assert.assertEquals(4, histories.size());\n    histories.forEach(history -> {\n      Assert.assertTrue(datanodes.contains(history.getDatanodeUuid()));\n      if (history.getDatanodeUuid().equals(u1.toString())) {\n        Assert.assertEquals(""host1"", history.getDatanodeHost());\n        Assert.assertEquals(1L, history.getFirstSeenTime());\n        Assert.assertEquals(5L, history.getLastSeenTime());\n      }\n    });\n\n    // Check getLatestContainerHistory\n    List<ContainerHistory> hist1 = reconContainerManager\n        .getLatestContainerHistory(1L, 10);\n    Assert.assertTrue(hist1.size() <= 10);\n    // Descending order by last report timestamp\n    for (int i = 0; i < hist1.size() - 1; i++) {\n      Assert.assertTrue(hist1.get(i).getLastSeenTime()\n          >= hist1.get(i + 1).getLastSeenTime());\n    }\n  }\n']",Hash;datanodes;Assert;Equals;Set;Collections;Assert;Manager;histories;container,4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.446866989135742, -5.064000606536865, -5.403865814208984, -6.441248893737793, -5.455230712890625, -0.02122112736105919]",0.9790025949478149
1,"['  @Test\n  public void testContainerKeyPrefixCodec() throws IOException {\n    ContainerKeyPrefix containerKeyPrefix = new ContainerKeyPrefix(\n        System.currentTimeMillis(), ""TestKeyPrefix"", 0);\n\n    Codec<ContainerKeyPrefix> codec = new ContainerKeyPrefixCodec();\n    byte[] persistedFormat = codec.toPersistedFormat(containerKeyPrefix);\n    Assert.assertTrue(persistedFormat != null);\n    ContainerKeyPrefix fromPersistedFormat =\n        codec.fromPersistedFormat(persistedFormat);\n    Assert.assertEquals(containerKeyPrefix, fromPersistedFormat);\n  }\n']",Codec;Container;Codec;codec;Key;codec;Key;Persisted;Prefix;Persisted,1.5133991837501526e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.463366985321045, -5.053978443145752, -5.4123358726501465, -6.476373672485352, -5.454623222351074, -0.021121688187122345]",0.9790998101234436
1,"['  @Test\n  public void testIntegerCodec() throws IOException {\n    Integer i = 1000;\n    Codec<Integer> codec = new IntegerCodec();\n    byte[] persistedFormat = codec.toPersistedFormat(i);\n    Assert.assertTrue(persistedFormat != null);\n    Integer fromPersistedFormat =\n        codec.fromPersistedFormat(persistedFormat);\n    Assert.assertEquals(i, fromPersistedFormat);\n  }\n']",codec;Codec;codec;Codec;Persisted;Format;Persisted;from;persisted;Format,1.367880031466484e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;6.039044819772243e-10;4.656612873077393e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.505253791809082, -5.011427879333496, -5.457764625549316, -6.516652584075928, -5.498760223388672, -0.02077462710440159]",0.9794396758079529
1,['  @Test\n  public void testGet() throws Exception {\n    ReconDBProvider reconDBProvider = injector.getInstance(\n        ReconDBProvider.class);\n    assertNotNull(reconDBProvider.getDbStore());\n  }\n'],recon;recon;Get;DBProvider;DBProvider;DBProvider;Db;get;class;Not,2.0954757928848267e-09;1.9208528101444244e-09;1.862645149230957e-09;1.4551915228366852e-09;1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.559505939483643, -4.935171604156494, -5.420375823974609, -6.534196853637695, -5.505258560180664, -0.021206889301538467]",0.9790164232254028
1,"['  @Test\n  public void testGetPipelines() throws IOException {\n    StorageContainerServiceProvider scmProvider =\n        injector.getInstance(StorageContainerServiceProvider.class);\n    StorageContainerLocationProtocol scmClient =\n        injector.getInstance(StorageContainerLocationProtocol.class);\n    scmProvider.getPipelines();\n    verify(scmClient, times(1)).listPipelines();\n  }\n']",ipelines;ipelines;ipelines;Protocol;Provider;Protocol;Service;times;injector;sc,1.5133991837501526e-09;1.1641532182693481e-09;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.480596542358398, -5.009838581085205, -5.456953048706055, -6.5521464347839355, -5.477240085601807, -0.02093072049319744]",0.9792866706848145
1,"['  @Test\n  public void testGetPipeline() throws IOException {\n    StorageContainerServiceProvider scmProvider =\n        injector.getInstance(StorageContainerServiceProvider.class);\n    StorageContainerLocationProtocol scmClient =\n        injector.getInstance(StorageContainerLocationProtocol.class);\n    Pipeline pipeline = scmProvider.getPipeline(pipelineID);\n    assertNotNull(pipeline);\n    verify(scmClient, times(1))\n        .getPipeline(pipelineID);\n  }\n']",Provider;IOException;Get;ipeline;Instance;ipeline;get;injector;Pipeline;Location,1.5133991837501526e-09;1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.480236530303955, -5.030458927154541, -5.462136268615723, -6.542440414428711, -5.47080659866333, -0.02081245556473732]",0.9794025421142578
1,"['  @Test\n  public void testInitNewContainerDB() throws Exception {\n    long containerId = System.currentTimeMillis();\n    Map<ContainerKeyPrefix, Integer> prefixCounts = new HashMap<>();\n\n    ContainerKeyPrefix ckp1 = new ContainerKeyPrefix(containerId,\n        ""V1/B1/K1"", 0);\n    prefixCounts.put(ckp1, 1);\n\n    ContainerKeyPrefix ckp2 = new ContainerKeyPrefix(containerId,\n        ""V1/B1/K2"", 0);\n    prefixCounts.put(ckp2, 2);\n\n    ContainerKeyPrefix ckp3 = new ContainerKeyPrefix(containerId,\n        ""V1/B2/K3"", 0);\n    prefixCounts.put(ckp3, 3);\n\n    for (Map.Entry<ContainerKeyPrefix, Integer> entry :\n        prefixCounts.entrySet()) {\n      reconContainerMetadataManager.storeContainerKeyMapping(\n          entry.getKey(), prefixCounts.get(entry.getKey()));\n    }\n\n    assertEquals(1, reconContainerMetadataManager\n        .getCountForContainerKeyPrefix(ckp1).intValue());\n\n    prefixCounts.clear();\n    prefixCounts.put(ckp2, 12);\n    prefixCounts.put(ckp3, 13);\n    ContainerKeyPrefix ckp4 = new ContainerKeyPrefix(containerId,\n        ""V1/B3/K1"", 0);\n    prefixCounts.put(ckp4, 14);\n    ContainerKeyPrefix ckp5 = new ContainerKeyPrefix(containerId,\n        ""V1/B3/K2"", 0);\n    prefixCounts.put(ckp5, 15);\n\n    reconContainerMetadataManager\n            .reinitWithNewContainerDataFromOm(prefixCounts);\n    Map<ContainerKeyPrefix, Integer> keyPrefixesForContainer =\n        reconContainerMetadataManager.getKeyPrefixesForContainer(containerId);\n\n    assertEquals(4, keyPrefixesForContainer.size());\n    assertEquals(12, keyPrefixesForContainer.get(ckp2).intValue());\n    assertEquals(13, keyPrefixesForContainer.get(ckp3).intValue());\n    assertEquals(14, keyPrefixesForContainer.get(ckp4).intValue());\n    assertEquals(15, keyPrefixesForContainer.get(ckp5).intValue());\n\n    assertEquals(0, reconContainerMetadataManager\n        .getCountForContainerKeyPrefix(ckp1).intValue());\n  }\n']",Init;Key;container;Metadata;Exception;Prefix;New;new;Manager;apping,2.153683453798294e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.451962947845459, -4.948638439178467, -5.344200134277344, -6.432127952575684, -5.4878153800964355, -0.022146062925457954]",0.9780973792076111
1,"['  @Test\n  public void testStoreContainerKeyMapping() throws Exception {\n\n    long containerId = System.currentTimeMillis();\n    Map<String, Integer> prefixCounts = new HashMap<>();\n    prefixCounts.put(keyPrefix1, 1);\n    prefixCounts.put(keyPrefix2, 2);\n    prefixCounts.put(keyPrefix3, 3);\n\n    for (Map.Entry<String, Integer> entry : prefixCounts.entrySet()) {\n      ContainerKeyPrefix containerKeyPrefix = new ContainerKeyPrefix(\n          containerId, entry.getKey(), 0);\n      reconContainerMetadataManager.storeContainerKeyMapping(\n          containerKeyPrefix, prefixCounts.get(entry.getKey()));\n    }\n\n    Assert.assertEquals(1,\n        reconContainerMetadataManager.getCountForContainerKeyPrefix(\n            new ContainerKeyPrefix(containerId, keyPrefix1,\n                0)).longValue());\n    Assert.assertEquals(2,\n        reconContainerMetadataManager.getCountForContainerKeyPrefix(\n            new ContainerKeyPrefix(containerId, keyPrefix2,\n                0)).longValue());\n    Assert.assertEquals(3,\n        reconContainerMetadataManager.getCountForContainerKeyPrefix(\n            new ContainerKeyPrefix(containerId, keyPrefix3,\n                0)).longValue());\n  }\n']",long;Store;store;Assert;Container;Value;Assert;container;Map;Prefix,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.001776687800884e-10,5,5,"[-5.455591678619385, -4.963403701782227, -5.353265762329102, -6.443035125732422, -5.497024059295654, -0.02192321978509426]",0.9783153533935547
1,"['  @Test\n  public void testStoreContainerKeyCount() throws Exception {\n    long containerId = 1L;\n    long nextContainerId = 2L;\n    reconContainerMetadataManager.storeContainerKeyCount(containerId, 2L);\n    reconContainerMetadataManager.storeContainerKeyCount(nextContainerId, 3L);\n\n    assertEquals(2,\n        reconContainerMetadataManager.getKeyCountForContainer(containerId));\n    assertEquals(3,\n        reconContainerMetadataManager.getKeyCountForContainer(nextContainerId));\n\n    reconContainerMetadataManager.storeContainerKeyCount(containerId, 20L);\n    assertEquals(20,\n        reconContainerMetadataManager.getKeyCountForContainer(containerId));\n  }\n']",store;Count;Metadata;Manager;Manager;long;container;store;Metadata;Manager,2.270098775625229e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.475768566131592, -5.0561017990112305, -5.434370517730713, -6.494359493255615, -5.454162120819092, -0.020929202437400818]",0.9792882800102234
1,"['\t@Test\r\n\tpublic void matchAllTest() {\r\n\t\tCronPattern pattern;\r\n\t\t// ä»»ä½\x95æ\x97¶é\x97´å\x8c¹é\x85\x8d\r\n\t\tpattern = new CronPattern(""* * * * * *"");\r\n\t\tAssert.assertTrue(pattern.match(DateUtil.current(), true));\r\n\t\tAssert.assertTrue(pattern.match(DateUtil.current(), false));\r\n\t}\r\n']",Date;new;pattern;Util;ron;match;pattern;Util;Ã¤;True,1.6298145055770874e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.604264050722122e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.584562301635742, -4.921460151672363, -5.413699626922607, -6.493907451629639, -5.501203536987305, -0.021319156512618065]",0.978906512260437
1,"['\t@Test\r\n\tpublic void matchAllTest2() {\r\n\t\t// å\x9c¨5ä½\x8dè¡¨è¾¾å¼\x8fä¸\xadï¼\x8cç§\x92é\x83¨å\x88\x86å¹¶ä¸\x8dæ\x98¯ä»»æ\x84\x8få\x8c¹é\x85\x8dï¼\x8cè\x80\x8cæ\x98¯ä¸\x80ä¸ªå\x9bºå®\x9aå\x80¼\r\n\t\t// å\x9b\xa0æ\xad¤æ\xad¤å¤\x84å\x8c¹é\x85\x8då°±ä¸\x8dè\x83½å\x8c¹é\x85\x8dç§\x92\r\n\t\tCronPattern pattern;\r\n\t\t// ä»»ä½\x95æ\x97¶é\x97´å\x8c¹é\x85\x8d\r\n\t\tpattern = new CronPattern(""* * * * *"");\r\n\t\tfor(int i = 0; i < 1; i++) {\r\n\t\t\tAssert.assertTrue(pattern.match(DateUtil.current(), false));\r\n\t\t}\r\n\t}\r\n']",match;Cron;match;Ã¨;pattern;Pattern;Â¯;Â¶;Â¯;Â¨,1.9208528101444244e-09;1.862645149230957e-09;9.89530235528946e-10;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.57672119140625, -4.9780097007751465, -5.422390460968018, -6.468577861785889, -5.500325679779053, -0.020944029092788696]",0.9792739152908325
1,"['\t@Test\r\n\tpublic void cronPatternTest() {\r\n\t\tCronPattern pattern;\r\n\r\n\t\t// 12:11å\x8c¹é\x85\x8d\r\n\t\tpattern = new CronPattern(""39 11 12 * * *"");\r\n\t\tassertMatch(pattern, ""12:11:39"");\r\n\r\n\t\t// æ¯\x8f5å\x88\x86é\x92\x9få\x8c¹é\x85\x8dï¼\x8cå\x8c¹é\x85\x8då\x88\x86é\x92\x9fä¸ºï¼\x9a[0,5,10,15,20,25,30,35,40,45,50,55]\r\n\t\tpattern = new CronPattern(""39 */5 * * * *"");\r\n\t\tassertMatch(pattern, ""12:00:39"");\r\n\t\tassertMatch(pattern, ""12:05:39"");\r\n\t\tassertMatch(pattern, ""12:10:39"");\r\n\t\tassertMatch(pattern, ""12:15:39"");\r\n\t\tassertMatch(pattern, ""12:20:39"");\r\n\t\tassertMatch(pattern, ""12:25:39"");\r\n\t\tassertMatch(pattern, ""12:30:39"");\r\n\t\tassertMatch(pattern, ""12:35:39"");\r\n\t\tassertMatch(pattern, ""12:40:39"");\r\n\t\tassertMatch(pattern, ""12:45:39"");\r\n\t\tassertMatch(pattern, ""12:50:39"");\r\n\t\tassertMatch(pattern, ""12:55:39"");\r\n\r\n\t\t// 2:01,3:01,4:01\r\n\t\tpattern = new CronPattern(""39 1 2-4 * * *"");\r\n\t\tassertMatch(pattern, ""02:01:39"");\r\n\t\tassertMatch(pattern, ""03:01:39"");\r\n\t\tassertMatch(pattern, ""04:01:39"");\r\n\r\n\t\t// 2:01,3:01,4:01\r\n\t\tpattern = new CronPattern(""39 1 2,3,4 * * *"");\r\n\t\tassertMatch(pattern, ""02:01:39"");\r\n\t\tassertMatch(pattern, ""03:01:39"");\r\n\t\tassertMatch(pattern, ""04:01:39"");\r\n\r\n\t\t// 08-07, 08-06\r\n\t\tpattern = new CronPattern(""39 0 0 6,7 8 *"");\r\n\t\tassertMatch(pattern, ""2016-08-07 00:00:39"");\r\n\t\tassertMatch(pattern, ""2016-08-06 00:00:39"");\r\n\r\n\t\t// å\x88«å\x90\x8då¿½ç\x95¥å¤§å°\x8få\x86\x99\r\n\t\tpattern = new CronPattern(""39 0 0 6,7 Aug *"");\r\n\t\tassertMatch(pattern, ""2016-08-06 00:00:39"");\r\n\t\tassertMatch(pattern, ""2016-08-07 00:00:39"");\r\n\r\n\t\tpattern = new CronPattern(""39 0 0 7 aug *"");\r\n\t\tassertMatch(pattern, ""2016-08-07 00:00:39"");\r\n\r\n\t\t// æ\x98\x9fæ\x9c\x9få\x9b\x9b\r\n\t\tpattern = new CronPattern(""39 0 0 * * Thu"");\r\n\t\tassertMatch(pattern, ""2017-02-09 00:00:39"");\r\n\t\tassertMatch(pattern, ""2017-02-09 00:00:39"");\r\n\r\n\t}\r\n']",Pattern;Pattern;Pattern;Pattern;Cron;Cron;cron;pattern;pattern;new,1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10,5,5,"[-5.471571922302246, -5.082962512969971, -5.383976936340332, -6.387448310852051, -5.435232162475586, -0.02126290835440159]",0.9789615273475647
1,"['\t@Test\r\n\tpublic void CronPatternTest2() {\r\n\t\tCronPattern pattern = new CronPattern(""0/30 * * * *"");\r\n\t\tAssert.assertTrue(pattern.match(DateUtil.parse(""2018-10-09 12:00:00"").getTime(), false));\r\n\t\tAssert.assertTrue(pattern.match(DateUtil.parse(""2018-10-09 12:30:00"").getTime(), false));\r\n\t\t\r\n\t\tpattern = new CronPattern(""32 * * * *"");\r\n\t\tAssert.assertTrue(pattern.match(DateUtil.parse(""2018-10-09 12:32:00"").getTime(), false));\r\n\t}\r\n']",Pattern;match;get;parse;pattern;Util;false;ron;Assert;True,1.076841726899147e-09;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.544624328613281, -5.077789306640625, -5.420135021209717, -6.4808783531188965, -5.502780914306641, -0.020382942631840706]",0.9798234701156616
1,"['\t@Test\r\n\tpublic void patternTest() {\r\n\t\tCronPattern pattern = new CronPattern(""* 0 4 * * ?"");\r\n\t\tassertMatch(pattern, ""2017-02-09 04:00:00"");\r\n\t\tassertMatch(pattern, ""2017-02-19 04:00:33"");\r\n\r\n\t\t// 6ä½\x8dQuartzé£\x8eæ\xa0¼è¡¨è¾¾å¼\x8f\r\n\t\tpattern = new CronPattern(""* 0 4 * * ?"");\r\n\t\tassertMatch(pattern, ""2017-02-09 04:00:00"");\r\n\t\tassertMatch(pattern, ""2017-02-19 04:00:33"");\r\n\t}\r\n']",pattern;Cron;Â¨;Â£;Â½;Ã©;Pattern;Match;Match;new,1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1204974725842476e-09;9.313225746154785e-10;8.731149137020111e-10;5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.5377984046936035, -5.026004314422607, -5.437947750091553, -6.484988689422607, -5.48673677444458, -0.020729556679725647]",0.979483962059021
1,"['\t@Test\r\n\tpublic void rangePatternTest() {\r\n\t\tCronPattern pattern = new CronPattern(""* 20/2 * * * ?"");\r\n\t\tassertMatch(pattern, ""2017-02-09 04:20:00"");\r\n\t\tassertMatch(pattern, ""2017-02-09 05:20:00"");\r\n\t\tassertMatch(pattern, ""2017-02-19 04:22:33"");\r\n\r\n\t\tpattern = new CronPattern(""* 2-20/2 * * * ?"");\r\n\t\tassertMatch(pattern, ""2017-02-09 04:02:00"");\r\n\t\tassertMatch(pattern, ""2017-02-09 05:04:00"");\r\n\t\tassertMatch(pattern, ""2017-02-19 04:20:33"");\r\n\t}\r\n']",Cron;pattern;Pattern;range;Match;pattern;pattern;pattern;new;Match,1.280568540096283e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;2.9103830456733704e-11,5,5,"[-5.52601957321167, -5.067105293273926, -5.437154769897461, -6.4767913818359375, -5.472024917602539, -0.020586160942912102]",0.9796242713928223
1,"['\t@Test\r\n\tpublic void lastTest() {\r\n\t\t// æ¯\x8fæ\x9c\x88æ\x9c\x80å\x90\x8eä¸\x80å¤©ç\x9a\x84ä»»æ\x84\x8fæ\x97¶é\x97´\r\n\t\tCronPattern pattern = new CronPattern(""* * * L * ?"");\r\n\t\tassertMatch(pattern, ""2017-07-31 04:20:00"");\r\n\t\tassertMatch(pattern, ""2017-02-28 04:20:00"");\r\n\r\n\t\t// æ\x9c\x80å\x90\x8eä¸\x80ä¸ªæ\x9c\x88ç\x9a\x84ä»»æ\x84\x8fæ\x97¶é\x97´\r\n\t\tpattern = new CronPattern(""* * * * L ?"");\r\n\t\tassertMatch(pattern, ""2017-12-02 04:20:00"");\r\n\r\n\t\t// ä»»æ\x84\x8få¤©ç\x9a\x84æ\x9c\x80å\x90\x8eæ\x97¶é\x97´\r\n\t\tpattern = new CronPattern(""L L L * * ?"");\r\n\t\tassertMatch(pattern, ""2017-12-02 23:59:59"");\r\n\t}\r\n']",last;Cron;Cron;Ã¥;Â©;new;Pattern;Ã©;Ã©;Ã©,7.450580596923828e-09;2.561137080192566e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;8.440110832452774e-10;7.8580342233181e-10,5,5,"[-5.570199012756348, -5.01183557510376, -5.4356207847595215, -6.474185466766357, -5.4948835372924805, -0.02068997360765934]",0.9795225858688354
1,"['\t@Test(expected = CronException.class)\r\n\tpublic void rangeYearTest() {\r\n\t\t// yearç\x9a\x84è\x8c\x83å\x9b´æ\x98¯1970~2099å¹´ï¼\x8cè¶\x85å\x87ºæ\x8a¥é\x94\x99\r\n\t\tCronPattern pattern = new CronPattern(""0/1 * * * 1/1 ? 2020-2120"");\r\n\t}\r\n']",range;Ã¥;Ã§;Ã¨;Ã¥;Cron;expected;Ã¥;Pattern;ron,8.149072527885437e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.612090587615967, -4.884250164031982, -5.404677391052246, -6.50192928314209, -5.527061939239502, -0.021419741213321686]",0.9788080453872681
1,"['\t@Test\r\n\tpublic void matchedDatesTest() {\r\n\t\t//æµ\x8bè¯\x95æ¯\x8f30ç§\x92æ\x89§è¡\x8c\r\n\t\tList<Date> matchedDates = CronPatternUtil.matchedDates(""0/30 * 8-18 * * ?"", DateUtil.parse(""2018-10-15 14:33:22""), 5, true);\r\n\t\tAssert.assertEquals(5, matchedDates.size());\r\n\t\tAssert.assertEquals(""2018-10-15 14:33:30"", matchedDates.get(0).toString());\r\n\t\tAssert.assertEquals(""2018-10-15 14:34:00"", matchedDates.get(1).toString());\r\n\t\tAssert.assertEquals(""2018-10-15 14:34:30"", matchedDates.get(2).toString());\r\n\t\tAssert.assertEquals(""2018-10-15 14:35:00"", matchedDates.get(3).toString());\r\n\t\tAssert.assertEquals(""2018-10-15 14:35:30"", matchedDates.get(4).toString());\r\n\t}\r\n']",Ã¨;ates;matched;ates;Â¯;ates;Â§;Ã¦;ates;Util,5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.5422043800354, -5.046548843383789, -5.421065807342529, -6.497781753540039, -5.503359317779541, -0.020561520010232925]",0.9796482920646667
1,"['\t@Test\r\n\tpublic void matchedDatesTest2() {\r\n\t\t//æµ\x8bè¯\x95æ¯\x8få°\x8fæ\x97¶æ\x89§è¡\x8c\r\n\t\tList<Date> matchedDates = CronPatternUtil.matchedDates(""0 0 */1 * * *"", DateUtil.parse(""2018-10-15 14:33:22""), 5, true);\r\n\t\tAssert.assertEquals(5, matchedDates.size());\r\n\t\tAssert.assertEquals(""2018-10-15 15:00:00"", matchedDates.get(0).toString());\r\n\t\tAssert.assertEquals(""2018-10-15 16:00:00"", matchedDates.get(1).toString());\r\n\t\tAssert.assertEquals(""2018-10-15 17:00:00"", matchedDates.get(2).toString());\r\n\t\tAssert.assertEquals(""2018-10-15 18:00:00"", matchedDates.get(3).toString());\r\n\t\tAssert.assertEquals(""2018-10-15 19:00:00"", matchedDates.get(4).toString());\r\n\t}\r\n']",matched;Â¯;Date;matched;Equals;Assert;List;Ã¨;matched;true,8.149072527885437e-10;6.984919309616089e-10;4.874891601502895e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.533390998840332, -5.0790557861328125, -5.413193225860596, -6.496002674102783, -5.495913028717041, -0.020456526428461075]",0.9797512888908386
1,"['\t@Test\r\n\tpublic void matchedDatesTest3() {\r\n\t\t//æµ\x8bè¯\x95æ\x9c\x80å\x90\x8eä¸\x80å¤©\r\n\t\tList<Date> matchedDates = CronPatternUtil.matchedDates(""0 0 */1 L * *"", DateUtil.parse(""2018-10-30 23:33:22""), 5, true);\r\n\t\tAssert.assertEquals(5, matchedDates.size());\r\n\t\tAssert.assertEquals(""2018-10-31 00:00:00"", matchedDates.get(0).toString());\r\n\t\tAssert.assertEquals(""2018-10-31 01:00:00"", matchedDates.get(1).toString());\r\n\t\tAssert.assertEquals(""2018-10-31 02:00:00"", matchedDates.get(2).toString());\r\n\t\tAssert.assertEquals(""2018-10-31 03:00:00"", matchedDates.get(3).toString());\r\n\t\tAssert.assertEquals(""2018-10-31 04:00:00"", matchedDates.get(4).toString());\r\n\t}\r\n']",Â¯;Equals;ates;ates;Ã¥;parse;Assert;Ã¦;matched;matched,8.149072527885437e-10;7.494236342608929e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.0372681319713593e-10,5,5,"[-5.526126384735107, -5.099311828613281, -5.4172587394714355, -6.482835292816162, -5.479687213897705, -0.020429078489542007]",0.9797782897949219
1,"['\t@Test\r\n\tpublic void customCronTest() {\r\n\t\tCronUtil.schedule(""*/2 * * * * *"", (Task) () -> Console.log(""Task excuted.""));\r\n\r\n\t\t// æ\x94¯æ\x8c\x81ç§\x92çº§å\x88«å®\x9aæ\x97¶ä»»å\x8a¡\r\n\t\tCronUtil.setMatchSecond(true);\r\n\t\tCronUtil.start();\r\n\r\n\t\tThreadUtil.waitForDie();\r\n\t\tConsole.log(""Exit."");\r\n\t}\r\n']",ron;Â§;log;Ã¥;set;Task;Second;ron;Â¶;Ã¤,8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.581587791442871, -4.945408344268799, -5.4495530128479, -6.516249656677246, -5.522568702697754, -0.020871881395578384]",0.9793444275856018
1,['\t@Test\r\n\tpublic void cronTest() {\r\n\t\t// æ\x94¯æ\x8c\x81ç§\x92çº§å\x88«å®\x9aæ\x97¶ä»»å\x8a¡\r\n\t\tCronUtil.setMatchSecond(true);\r\n\t\tCronUtil.getScheduler().setDaemon(false);\r\n\t\tCronUtil.start();\r\n\r\n\t\tThreadUtil.waitForDie();\r\n\t\tCronUtil.stop();\r\n\t}\r\n'],Daemon;stop;set;Ã¦;Match;Ã¦;Util;Â®;Â«;Ã¥,1.0477378964424133e-09;7.275957614183426e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.566833972930908, -4.938027381896973, -5.435453414916992, -6.527523517608643, -5.518853664398193, -0.02104336768388748]",0.97917640209198
1,"['\t@Test\r\n\tpublic void cronWithListenerTest() {\r\n\t\tCronUtil.getScheduler().addListener(new TaskListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onStart(TaskExecutor executor) {\r\n\t\t\t\tConsole.log(""Found task:[{}] start!"", executor.getCronTask().getId());\r\n\t\t\t}\r\n']",cron;get;executor;executor;new;log;Executor;Listener;add;ron,1.0477378964424133e-09;7.566995918750763e-10;6.111804395914078e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.600911617279053, -4.954537391662598, -5.392645835876465, -6.504680633544922, -5.498443603515625, -0.02110663242638111]",0.9791146516799927
1,"['\t@Test\r\n\tpublic void addAndRemoveTest() {\r\n\t\tString id = CronUtil.schedule(""*/2 * * * * *"", (Runnable) () -> Console.log(""task running : 2s""));\r\n\r\n\t\tConsole.log(id);\r\n\t\tCronUtil.remove(id);\r\n\r\n\t\t// æ\x94¯æ\x8c\x81ç§\x92çº§å\x88«å®\x9aæ\x97¶ä»»å\x8a¡\r\n\t\tCronUtil.setMatchSecond(true);\r\n\t\tCronUtil.start();\r\n\t}\r\n']",schedule;Run;add;running;start;log;Util;set;Â§;Match,7.450580596923828e-09;3.026798367500305e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.580781936645508, -4.951954364776611, -5.448786735534668, -6.516287803649902, -5.520315647125244, -0.020840125158429146]",0.9793755412101746
1,"['\t@Test\r\n\tpublic void sendWithFileTest() {\r\n\t\tMailUtil.send(""hutool@foxmail.com"", ""æµ\x8bè¯\x95"", ""<h1>é\x82®ä»¶æ\x9d¥è\x87ªHutoolæµ\x8bè¯\x95</h1>"", true, FileUtil.file(""d:/æµ\x8bè¯\x95é\x99\x84ä»¶æ\x96\x87æ\x9c¬.txt""));\r\n\t}\r\n']",File;utool;Mail;Util;foxmail;Ã¦;Â¯;Â¯;Ã¦;com,1.280568540096283e-09;9.604264050722122e-10;6.984919309616089e-10;6.83940015733242e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.568652629852295, -4.945154190063477, -5.456378936767578, -6.526082515716553, -5.478478908538818, -0.02106321230530739]",0.9791572093963623
1,"['\t@Test\r\n\tpublic void sendWithLongNameFileTest() {\r\n\t\t//é\x99\x84ä»¶å\x90\x8dé\x95¿åº¦å¤§äº\x8e60æ\x97¶ç\x9a\x84æµ\x8bè¯\x95\r\n\t\tMailUtil.send(""hutool@foxmail.com"", ""æµ\x8bè¯\x95"", ""<h1>é\x82®ä»¶æ\x9d¥è\x87ªHutoolæµ\x8bè¯\x95</h1>"", true, FileUtil.file(""d:/6-LongLongä¸\x80é\x98¶æ®µå¹³å\x8f°å»ºè®¾å\x91¨æ\x8a¥2018.3.12-3.16.xlsx""));\r\n\t}\r\n']",file;Util;Ã¥;foxmail;Mail;Âº;Ã¤;Ã¨;Ã¤;Ã¦,1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.539065361022949, -4.957662582397461, -5.429376602172852, -6.502412796020508, -5.476627349853516, -0.021252870559692383]",0.9789713621139526
1,"['\t@Test\r\n\tpublic void sendWithImageTest() {\r\n\t\tMap<String, InputStream> map = new HashMap<>();\r\n\t\tmap.put(""testImage"", FileUtil.getInputStream(""f:/test/me.png""));\r\n\t\tMailUtil.sendHtml(""hutool@foxmail.com"", ""æµ\x8bè¯\x95"", ""<h1>é\x82®ä»¶æ\x9d¥è\x87ªHutoolæµ\x8bè¯\x95</h1><img src=\\""cid:testImage\\"" />"", map);\r\n\t}\r\n']",png;Map;send;Mail;map;utool;Ã¦;Stream;Map;tml,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.524465084075928, -4.988292217254639, -5.458632469177246, -6.545934200286865, -5.480398654937744, -0.020884957164525986]",0.9793317317962646
1,"['\t@Test\r\n\tpublic void sendHtmlTest() {\r\n\t\tMailUtil.send(""hutool@foxmail.com"", ""æµ\x8bè¯\x95"", ""<h1>é\x82®ä»¶æ\x9d¥è\x87ªHutoolæµ\x8bè¯\x95</h1>"", true);\r\n\t}\r\n']",foxmail;Â¯;Util;com;Ã¦;true;Ã¨;Â»;utool;Ã¨,2.444721758365631e-09;1.1059455573558807e-09;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;8.731149137020111e-11;0.0;0.0,5,5,"[-5.606101036071777, -4.88784122467041, -5.452037811279297, -6.537901878356934, -5.493494033813477, -0.021286597475409508]",0.9789384603500366
1,"['\t@Test\r\n\tpublic void sendByAccountTest() {\r\n\t\tMailAccount account = new MailAccount();\r\n\t\taccount.setHost(""smtp.yeah.net"");\r\n\t\taccount.setPort(465);\r\n\t\taccount.setSslEnable(true);\r\n\t\taccount.setFrom(""hutool@yeah.net"");\r\n\t\taccount.setUser(""hutool"");\r\n\t\taccount.setPass(""q1w2e3"");\r\n\t\tMailUtil.send(account, ""914104645@qq.com"", ""æµ\x8bè¯\x95"", ""<h1>é\x82®ä»¶æ\x9d¥è\x87ªHutoolæµ\x8bè¯\x95</h1>"", true);\r\n\t}\r\n']",sl;net;utool;account;Enable;utool;Ã¦;Account;Â¯;Ã¨,1.0477378964424133e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5567731857299805, -5.0042643547058105, -5.46058464050293, -6.51939582824707, -5.48947286605835, -0.020637543871998787]",0.9795738458633423
1,"['\t@Test\r\n\tpublic void mailAccountTest() {\r\n\t\tMailAccount account = new MailAccount();\r\n\t\taccount.setFrom(""hutool@yeah.net"");\r\n\t\taccount.setDebug(true);\r\n\t\taccount.defaultIfEmpty();\r\n\t\tProperties props = account.getSmtpProps();\r\n\t\tAssert.assertEquals(""true"", props.getProperty(""mail.debug""));\r\n\t}\r\n']",Mail;From;Smtp;Props;net;mail;new;Equals;true;account,1.862645149230957e-09;1.7462298274040222e-09;1.280568540096283e-09;9.313225746154785e-10;5.675246939063072e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.575990676879883, -4.995833396911621, -5.456360816955566, -6.532281875610352, -5.487286567687988, -0.020629018545150757]",0.9795824289321899
1,['\t@Test\r\n\tpublic void parseSettingTest() {\r\n\t\tMailAccount account = GlobalMailAccount.INSTANCE.getAccount();\r\n\t\taccount.getSmtpProps();\r\n\t\t\r\n\t\tAssert.assertNotNull(account.getCharset());\r\n\t\tAssert.assertTrue(account.isSslEnable());\r\n\t}\r\n'],Charset;get;Global;Setting;account;Assert;Assert;account;Not;get,9.022187441587448e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.6007106751203537e-10,5,5,"[-5.5783467292785645, -4.977421283721924, -5.407893657684326, -6.513042449951172, -5.481136322021484, -0.021019672974944115]",0.9791998267173767
1,"['\t@Test\r\n\tpublic void generateTest() {\r\n\t\tfinal BufferedImage image = QrCodeUtil.generate(""https://hutool.cn/"", 300, 300);\r\n\t\tAssert.assertNotNull(image);\r\n\t}\r\n']",Code;generate;final;image;Buffered;Image;Not;utool;https;generate,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-3.4924596548080444e-10,5,5,"[-5.575202941894531, -4.878332614898682, -5.419454097747803, -6.529133319854736, -5.507626533508301, -0.0215771347284317]",0.9786539673805237
1,"['\t@Test\r\n\tpublic void generateCustomTest() {\r\n\t\tQrConfig config = new QrConfig();\r\n\t\tconfig.setMargin(0);\r\n\t\tconfig.setForeColor(Color.CYAN);\r\n\t\t// è\x83\x8cæ\x99¯è\x89²é\x80\x8fæ\x98\x8e\r\n\t\tconfig.setBackColor(null);\r\n\t\tconfig.setErrorCorrection(ErrorCorrectionLevel.H);\r\n\t\tQrCodeUtil.generate(""https://hutool.cn/"", config, FileUtil.file(""d:/qrcodeCustom.png""));\r\n\t}\r\n']",png;Margin;utool;Custom;Â¯;rcode;set;Color;Error;File,2.561137080192566e-09;2.3865140974521637e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.764863893389702e-10,5,5,"[-5.547082424163818, -5.002645492553711, -5.446563720703125, -6.513072967529297, -5.502466201782227, -0.020703518763184547]",0.9795093536376953
1,"['\t@Test\r\n\tpublic void generateWithLogoTest() {\r\n\t\tQrCodeUtil.generate(//\r\n\t\t\t\t""http://hutool.cn/"", //\r\n\t\t\t\tQrConfig.create().setImg(""e:/pic/face.jpg""), //\r\n\t\t\t\tFileUtil.file(""e:/qrcodeWithLogo.jpg""));\r\n\t}\r\n']",generate;jpg;Log;File;Code;file;Util;Im;Log;http,2.153683453798294e-09;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.1827872842550278e-10;5.820766091346741e-11;0.0;0.0,5,5,"[-5.531614780426025, -5.013840675354004, -5.473158359527588, -6.5397162437438965, -5.451672554016113, -0.02075069025158882]",0.9794631004333496
1,"['\t@Test\r\n\tpublic void decodeTest() {\r\n\t\tString decode = QrCodeUtil.decode(FileUtil.file(""e:/pic/qr.png""));\r\n\t\tConsole.log(decode);\r\n\t}\r\n']",decode;png;Code;Util;decode;decode;Console;Util;file;log,2.7939677238464355e-09;1.862645149230957e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.0745362639427185e-10,5,5,"[-5.557344913482666, -4.877185821533203, -5.419986724853516, -6.540690898895264, -5.49066162109375, -0.021707091480493546]",0.9785268306732178
1,"['\t@Test\r\n\tpublic void generateAsBase64Test(){\r\n\t\tString base64 = QrCodeUtil.generateAsBase64(""http://hutool.cn/"", new QrConfig(400, 400), ""png"");\r\n\t\tSystem.out.println(base64);\r\n\r\n\t\tbyte[] bytes = FileUtil.readBytes(\r\n\t\t\tnew File(""d:/test/qr.png""));\r\n\t\tString encode = Base64.encode(bytes);\r\n\t\tString base641 = QrCodeUtil.generateAsBase64(""http://hutool.cn/"", new QrConfig(400, 400), ""png"", encode);\r\n\t\tSystem.out.println(base641);\r\n\r\n\t}\r\n']",utool;base;http;generate;Code;png;png;Base;Config;out,6.984919309616089e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.5247273445129395, -5.013329029083252, -5.462466716766357, -6.508059978485107, -5.47481107711792, -0.0207754448056221]",0.9794389009475708
1,"['\t@Test\r\n\tpublic void getPinyinTest(){\r\n\t\tfinal String pinyin = PinyinUtil.getPinyin(""ä½\xa0å¥½"", "" "");\r\n\t\tAssert.assertEquals(""ni hao"", pinyin);\r\n\t}\r\n']",inyin;inyin;inyin;ni;Âł;Â½;Util;inyin;Equals;ha,6.28642737865448e-09;5.587935447692871e-09;5.296897143125534e-09;2.3283064365386963e-09;2.2118911147117615e-09;1.6298145055770874e-09;1.2223608791828156e-09;2.3283064365386963e-10;0.0;0.0,5,5,"[-5.58693265914917, -4.861051082611084, -5.415560245513916, -6.502005100250244, -5.513670921325684, -0.021701142191886902]",0.978532612323761
1,"['\t@Test\r\n\tpublic void getPinyinByPinyin4jTest() {\r\n\t\tfinal Pinyin4jEngine engine = new Pinyin4jEngine();\r\n\t\tfinal String pinyin = engine.getPinyin(""ä½\xa0å¥½h"", "" "");\r\n\t\tAssert.assertEquals(""ni hao h"", pinyin);\r\n\t}\r\n']",inyin;ni;get;ha;Engine;inyin;Â½;final;Engine;engine,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.576658248901367, -4.948675632476807, -5.436153888702393, -6.508070468902588, -5.483765602111816, -0.021100211888551712]",0.9791208505630493
1,"['\t@Test\r\n\tpublic void getPinyinByBopomofo4jTest() {\r\n\t\tfinal Bopomofo4jEngine engine = new Bopomofo4jEngine();\r\n\t\tfinal String pinyin = engine.getPinyin(""ä½\xa0å¥½h"", "" "");\r\n\t\tAssert.assertEquals(""ni haoh"", pinyin);\r\n\t}\r\n']",get;Ã¤;engine;opomof;opomof;inyin;Âł;Assert;Ã¥;Engine,7.450580596923828e-09;4.190951585769653e-09;3.434251993894577e-09;3.259629011154175e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.576931953430176, -4.95750093460083, -5.421084880828857, -6.4949212074279785, -5.479096412658691, -0.021143164485692978]",0.9790787696838379
1,"['\t@Test\r\n\tpublic void getPinyinUpperCaseTest(){\r\n\t\tfinal String pinyin = PinyinUtil.getPinyin(""ä½\xa0å¥½æ\x80¡"", "" "");\r\n\t\tAssert.assertEquals(""ni hao yi"", pinyin);\r\n\t}\r\n']",inyin;inyin;Â½;ha;get;ni;Assert;Ã¦;Âł;Ã¤,2.6193447411060333e-09;1.280568540096283e-09;1.1641532182693481e-09;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0,5,5,"[-5.57841157913208, -4.877227783203125, -5.413107395172119, -6.5018744468688965, -5.5027875900268555, -0.02166346274316311]",0.978569507598877
1,"['\t@Test\r\n\tpublic void getFirstLetterTest(){\r\n\t\tfinal String result = PinyinUtil.getFirstLetter(""Hæ\x98¯ç¬¬ä¸\x80ä¸ª"", "", "");\r\n\t\tAssert.assertEquals(""h, s, d, y, g"", result);\r\n\t}\r\n']",Â¯;Letter;Ã¦;First;get;get;Ã¤;result;Ã§;result,1.979060471057892e-09;1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;2.9103830456733704e-10;5.820766091346741e-11;0.0;0.0;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.600456714630127, -4.8630595207214355, -5.414483547210693, -6.496864318847656, -5.515266418457031, -0.02164001576602459]",0.9785923361778259
1,"['\t@Test\r\n\tpublic void getFirstLetterByPinyin4jTest(){\r\n\t\tfinal Pinyin4jEngine engine = new Pinyin4jEngine();\r\n\t\tfinal String result = engine.getFirstLetter(""æ\x9e\x97æµ·"", """");\r\n\t\tAssert.assertEquals(""lh"", result);\r\n\t}\r\n']",Letter;engine;get;inyin;new;Assert;Engine;Â·;final;inyin,1.280568540096283e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.588881492614746, -4.9251837730407715, -5.416539192199707, -6.507444858551025, -5.47664737701416, -0.021344829350709915]",0.9788812398910522
1,"['\t@Test\r\n\tpublic void getFirstLetterByBopomofo4jTest(){\r\n\t\tfinal Bopomofo4jEngine engine = new Bopomofo4jEngine();\r\n\t\tfinal String result = engine.getFirstLetter(""æ\x9e\x97æµ·"", """");\r\n\t\tAssert.assertEquals(""lh"", result);\r\n\t}\r\n']",get;By;Letter;First;Equals;opomof;opomof;Ã¦;Ã¦;new,1.862645149230957e-09;1.862645149230957e-09;1.6880221664905548e-09;1.6880221664905548e-09;1.0186340659856796e-09;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.5882954597473145, -4.944468975067139, -5.407809734344482, -6.4952073097229, -5.46339750289917, -0.021320905536413193]",0.978904664516449
1,"['\t@Test\r\n\tpublic void zipTest(){\r\n\t\tfinal File file = FileUtil.file(""d:/test/compress/test.zip"");\r\n\t\tStreamArchiver.create(CharsetUtil.CHARSET_UTF_8, ArchiveStreamFactory.ZIP, file)\r\n\t\t\t\t.add(FileUtil.file(""d:/Java""), (f)->{\r\n\t\t\t\t\tConsole.log(""Add: {}"", f.getPath());\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t})\r\n\t\t\t\t.finish().close();\r\n\t}\r\n']",Charset;Console;Archive;Util;File;zip;file;File;Archiver;Add,9.89530235528946e-10;9.604264050722122e-10;9.313225746154785e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.523083209991455, -4.999701499938965, -5.483974933624268, -6.549544811248779, -5.4910173416137695, -0.020652607083320618]",0.9795593023300171
1,"['\t@Test\r\n\tpublic void tarTest(){\r\n\t\tfinal File file = FileUtil.file(""d:/test/compress/test.tar"");\r\n\t\tStreamArchiver.create(CharsetUtil.CHARSET_UTF_8, ArchiveStreamFactory.TAR, file)\r\n\t\t\t\t.add(FileUtil.file(""d:/Java""), (f)->{\r\n\t\t\t\t\tConsole.log(""Add: {}"", f.getPath());\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t})\r\n\t\t\t\t.finish().close();\r\n\t}\r\n']",file;Charset;Stream;final;AR;add;Factory;Add;File;Console,9.89530235528946e-10;8.440110832452774e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.52803897857666, -4.996484279632568, -5.4783124923706055, -6.547516345977783, -5.492834568023682, -0.020673975348472595]",0.9795383810997009
1,"['\t@Test\r\n\tpublic void cpioTest(){\r\n\t\tfinal File file = FileUtil.file(""d:/test/compress/test.cpio"");\r\n\t\tStreamArchiver.create(CharsetUtil.CHARSET_UTF_8, ArchiveStreamFactory.CPIO, file)\r\n\t\t\t\t.add(FileUtil.file(""d:/Java""), (f)->{\r\n\t\t\t\t\tConsole.log(""Add: {}"", f.getPath());\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t})\r\n\t\t\t\t.finish().close();\r\n\t}\r\n']",file;Stream;Stream;add;File;file;Util;Archive;get;Add,6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.001776687800884e-10;3.7834979593753815e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.4551915228366852e-10,5,5,"[-5.531335830688477, -5.0003252029418945, -5.474084854125977, -6.54342794418335, -5.492031574249268, -0.020661480724811554]",0.9795504808425903
1,"['\t@Test\r\n\tpublic void senvenZTest(){\r\n\t\tfinal File file = FileUtil.file(""d:/test/compress/test.7z"");\r\n\t\tCompressUtil.createArchiver(CharsetUtil.CHARSET_UTF_8, ArchiveStreamFactory.SEVEN_Z, file)\r\n\t\t\t\t.add(FileUtil.file(""d:/Java/apache-maven-3.6.3""), (f)->{\r\n\t\t\t\t\tConsole.log(""Add: {}"", f.getPath());\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t})\r\n\t\t\t\t.finish().close();\r\n\t}\r\n']",Archiver;Charset;create;Java;add;Archive;Stream;file;file;file,2.3865140974521637e-09;1.4842953532934189e-09;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.532900810241699, -5.022558689117432, -5.495333194732666, -6.548586368560791, -5.483644485473633, -0.020441809669137]",0.9797657132148743
1,"['\t@Test\r\n\tpublic void zipTest(){\r\n\t\tExtractor extractor = CompressUtil.createExtractor(\r\n\t\t\t\tCharsetUtil.defaultCharset(),\r\n\t\t\t\tFileUtil.file(""d:/test/compress/test.zip""));\r\n\r\n\t\textractor.extract(FileUtil.file(""d:/test/compress/test2/""));\r\n\t}\r\n']",zip;Charset;extractor;Util;Util;Util;extract;extractor;Charset;compress,1.7462298274040222e-09;6.402842700481415e-10;3.710738383233547e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.513164043426514, -4.9824113845825195, -5.466334342956543, -6.5424981117248535, -5.467445373535156, -0.020999478176236153]",0.9792196154594421
1,"['\t@Test\r\n\tpublic void sevenZTest(){\r\n\t\tExtractor extractor = CompressUtil.createExtractor(\r\n\t\t\t\tCharsetUtil.defaultCharset(),\r\n\t\t\t\tFileUtil.file(""d:/test/compress/test.7z""));\r\n\r\n\t\textractor.extract(FileUtil.file(""d:/test/compress/test2/""));\r\n\t}\r\n']",create;File;Extractor;file;Charset;compress;Extractor;Util;Util;extractor,1.1059455573558807e-09;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.1827872842550278e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.519070625305176, -4.994704246520996, -5.461062431335449, -6.531267166137695, -5.468092918395996, -0.020926283672451973]",0.9792912602424622
1,"['\t@Test\r\n\tpublic void evalTest(){\r\n\t\tfinal Dict dict = Dict.create()\r\n\t\t\t\t.set(""a"", 100.3)\r\n\t\t\t\t.set(""b"", 45)\r\n\t\t\t\t.set(""c"", -199.100);\r\n\t\tfinal Object eval = ExpressionUtil.eval(""a-(b-c)"", dict);\r\n\t\tAssert.assertEquals(-143.8, (double)eval, 2);\r\n\t}\r\n']",Expression;ict;Object;set;Equals;eval;final;set;eval;dict,1.280568540096283e-09;7.566995918750763e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;2.1827872842550278e-11,5,5,"[-5.590321063995361, -4.9982781410217285, -5.4404215812683105, -6.5020527839660645, -5.532103061676025, -0.020487360656261444]",0.979720950126648
1,"['\t@Test\r\n\tpublic void jexlTest(){\r\n\t\tExpressionEngine engine = new JexlEngine();\r\n\r\n\t\tfinal Dict dict = Dict.create()\r\n\t\t\t\t.set(""a"", 100.3)\r\n\t\t\t\t.set(""b"", 45)\r\n\t\t\t\t.set(""c"", -199.100);\r\n\t\tfinal Object eval = engine.eval(""a-(b-c)"", dict);\r\n\t\tAssert.assertEquals(-143.8, (double)eval, 2);\r\n\t}\r\n']",engine;double;dict;eval;ex;Engine;dict;final;ict;create,5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.0186340659856796e-10;5.820766091346741e-11;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.582367420196533, -4.990315914154053, -5.414114952087402, -6.4825615882873535, -5.510472297668457, -0.020809536799788475]",0.9794054627418518
1,"['\t@Test\r\n\tpublic void mvelTest(){\r\n\t\tExpressionEngine engine = new MvelEngine();\r\n\r\n\t\tfinal Dict dict = Dict.create()\r\n\t\t\t\t.set(""a"", 100.3)\r\n\t\t\t\t.set(""b"", 45)\r\n\t\t\t\t.set(""c"", -199.100);\r\n\t\tfinal Object eval = engine.eval(""a-(b-c)"", dict);\r\n\t\tAssert.assertEquals(-143.8, (double)eval, 2);\r\n\t}\r\n']",vel;Engine;ict;eval;Assert;vel;eval;ict;Expression;engine,9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.5775017738342285, -4.990874290466309, -5.422521114349365, -6.48865270614624, -5.515728950500488, -0.02075512707233429]",0.9794586896896362
1,"['\t@Test\r\n\tpublic void jfireELTest(){\r\n\t\tExpressionEngine engine = new JfireELEngine();\r\n\r\n\t\tfinal Dict dict = Dict.create()\r\n\t\t\t\t.set(""a"", 100.3)\r\n\t\t\t\t.set(""b"", 45)\r\n\t\t\t\t.set(""c"", -199.100);\r\n\t\tfinal Object eval = engine.eval(""a-(b-c)"", dict);\r\n\t\tAssert.assertEquals(-143.8, (double)eval, 2);\r\n\t}\r\n']",engine;ict;double;Equals;ict;dict;dict;Assert;create;Object,4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.581735610961914, -5.000551223754883, -5.429694175720215, -6.48727560043335, -5.51179838180542, -0.020658211782574654]",0.9795538187026978
1,"['\t@Test\r\n\tpublic void spELTest(){\r\n\t\tExpressionEngine engine = new SpELEngine();\r\n\r\n\t\tfinal Dict dict = Dict.create()\r\n\t\t\t\t.set(""a"", 100.3)\r\n\t\t\t\t.set(""b"", 45)\r\n\t\t\t\t.set(""c"", -199.100);\r\n\t\tfinal Object eval = engine.eval(""#a-(#b-#c)"", dict);\r\n\t\tAssert.assertEquals(-143.8, (double)eval, 2);\r\n\t}\r\n']",eval;create;Assert;LEngine;dict;dict;ict;final;new;engine,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.579622745513916, -5.006219387054443, -5.42802095413208, -6.486536026000977, -5.511181831359863, -0.020638594403862953]",0.9795729517936707
1,"['\t@Test\r\n\tpublic void rhinoTest(){\r\n\t\tExpressionEngine engine = new RhinoEngine();\r\n\r\n\t\tfinal Dict dict = Dict.create()\r\n\t\t\t\t.set(""a"", 100.3)\r\n\t\t\t\t.set(""b"", 45)\r\n\t\t\t\t.set(""c"", -199.100);\r\n\t\tfinal Object eval = engine.eval(""a-(b-c)"", dict);\r\n\t\tAssert.assertEquals(-143.8, (double)eval, 2);\r\n\t}\r\n']",rhino;dict;set;double;Engine;ict;dict;final;Assert;set,1.1641532182693481e-09;5.238689482212067e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.7462298274040222e-10;5.820766091346741e-11;5.820766091346741e-11;4.3655745685100555e-11;-2.9103830456733704e-11,5,5,"[-5.575693607330322, -4.99109411239624, -5.421896457672119, -6.487488269805908, -5.51821231842041, -0.02075512707233429]",0.979458749294281
1,"['\t@Test\r\n\tpublic void simpleTest(){\r\n\t\tFoo foo = new Foo(100, 3.14f, new Date());\r\n\t\tExpressionEngine engine = new AviatorEngine();\r\n\t\tString exp =\r\n\t\t\t\t""\\""[foo i=\\""+ foo.i + \\"", f=\\"" + foo.f + \\"", date.year=\\"" + (foo.date.year+1900) + \\"", date.month=\\"" + foo.date.month + \\"", bars[0].name=\\"" + #foo.bars[0].name + \\""]\\"""";\r\n\t\tString result = (String) engine.eval(exp, Dict.create().set(""foo"", foo));\r\n\t\tAssert.assertEquals(""[foo i=100, f=3.14, date.year=2020, date.month=10, bars[0].name=bar]"", result);\r\n\r\n\t\t// Assignment.\r\n\t\texp = ""#foo.bars[0].name=\'hello aviator\' ; #foo.bars[0].name"";\r\n\t\tresult = (String) engine.eval(exp, Dict.create().set(""foo"", foo));\r\n\t\tAssert.assertEquals(""hello aviator"", result);\r\n\t\tAssert.assertEquals(""hello aviator"", foo.bars[0].getName());\r\n\r\n\t\texp = ""foo.bars[0] = nil ; foo.bars[0]"";\r\n\t\tresult = (String) engine.eval(exp, Dict.create().set(""foo"", foo));\r\n\t\tConsole.log(""Execute expression: "" + exp);\r\n\t\tAssert.assertNull(result);\r\n\t\tAssert.assertNull(foo.bars[0]);\r\n\t}\r\n']",Expression;expression;Date;Assignment;new;Equals;Engine;bars;nil;Execute,1.076841726899147e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.513398170471191, -5.045499801635742, -5.391311168670654, -6.431522369384766, -5.469025611877441, -0.02107243239879608]",0.9791480302810669
1,"['\t@Test\r\n\tpublic void registerBeanTest() {\r\n\t\tDemo2 registerBean = new Demo2();\r\n\t\tregisterBean.setId(123);\r\n\t\tregisterBean.setName(""222"");\r\n\t\tSpringUtil.registerBean(""registerBean"", registerBean);\r\n\r\n\t\tDemo2 registerBean2 = SpringUtil.getBean(""registerBean"");\r\n\t\tAssert.assertEquals(123, registerBean2.getId());\r\n\t\tAssert.assertEquals(""222"", registerBean2.getName());\r\n\t}\r\n']",Bean;register;Dem;set;Bean;Name;register;Bean;get;Bean,5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.548810005187988, -5.0343828201293945, -5.48286247253418, -6.541277885437012, -5.446872234344482, -0.020521346479654312]",0.9796878695487976
1,"['\t@Test\r\n\tpublic void getBeanTest(){\r\n\t\tfinal Demo2 testDemo = SpringUtil.getBean(""testDemo"");\r\n\t\tAssert.assertEquals(12345, testDemo.getId());\r\n\t\tAssert.assertEquals(""test"", testDemo.getName());\r\n\t}\r\n']",final;Equals;Bean;Equals;Util;Bean;Dem;get;Name;Assert,7.566995918750763e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.1827872842550278e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;2.9103830456733704e-11;-1.7462298274040222e-10;-1.7462298274040222e-10,5,5,"[-5.56521463394165, -4.9342122077941895, -5.417361736297607, -6.529409408569336, -5.447690486907959, -0.02145848050713539]",0.9787701368331909
1,"['\t@Test\r\n\tpublic void getBeanWithTypeReferenceTest() {\r\n\t\tMap<String, Object> mapBean = SpringUtil.getBean(new TypeReference<Map<String, Object>>() {});\r\n\t\tAssert.assertNotNull(mapBean);\r\n\t\tAssert.assertEquals(""value1"", mapBean.get(""key1""));\r\n\t\tAssert.assertEquals(""value2"", mapBean.get(""key2""));\r\n\t}\r\n']",Util;Equals;Bean;Bean;Bean;Bean;Type;Reference;Bean;Equals,9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;7.275957614183426e-10;7.130438461899757e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.599335193634033, -4.96512508392334, -5.423159599304199, -6.509101390838623, -5.4913787841796875, -0.020919863134622574]",0.9792974591255188
1,"['    @Test\n    public void test() {\n        // ä½¿ç\x94¨@EnableSpringUtilæ³¨è§£å\x90\x8e, è\x83½è\x8e·å\x8f\x96ä¸\x8aä¸\x8bæ\x96\x87\n        Assert.assertNotNull(SpringUtil.getApplicationContext());\n        // ä¸\x8dä½¿ç\x94¨æ\x97¶, ä¸ºnull\n//        Assert.assertNull(SpringUtil.getApplicationContext());\n    }\n']",Ã¦;Assert;Null;Application;Not;Ã¦;Ã§;Util;Ã¨;Ã§,8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;5.820766091346741e-11,5,5,"[-5.544138431549072, -4.96950101852417, -5.386021614074707, -6.428333282470703, -5.468979358673096, -0.021497216075658798]",0.9787322282791138
1,"['\t@Test\n\tpublic void beanValidatorTest() {\n\t\tBeanValidationResult result = ValidationUtil.warpValidate(new TestClass());\n\t\tAssert.assertFalse(result.isSuccess());\n\t\tAssert.assertEquals(2, result.getErrorMessages().size());\n\t}\n']",Messages;Validate;Success;Validator;Assert;Result;Util;result;Class;Assert,1.0186340659856796e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.605152606964111, -4.956748962402344, -5.435981750488281, -6.525207042694092, -5.48184061050415, -0.020916594192385674]",0.9793007373809814
1,"['\t@Test\n\tpublic void propertyValidatorTest() {\n\t\tBeanValidationResult result = ValidationUtil.warpValidateProperty(new TestClass(), ""name"");\n\t\tAssert.assertFalse(result.isSuccess());\n\t\tAssert.assertEquals(1, result.getErrorMessages().size());\n\t}\n']",Validator;Property;Validate;arp;Assert;Validation;Success;property;Validation;Class,1.6880221664905548e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;7.566995918750763e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.59674072265625, -4.948557376861572, -5.428530693054199, -6.50807523727417, -5.480565071105957, -0.021071966737508774]",0.9791486263275146
1,"['\t@Test\r\n\tpublic void toUnicodeTest() {\r\n\t\tString emoji = EmojiUtil.toUnicode("":smile:"");\r\n\t\tAssert.assertEquals(""ð\x9f\x98\x84"", emoji);\r\n\t}\r\n']",smile;Ã°;to;Unicode;to;emoji;Util;Unicode;Emoji;Equals,1.1641532182693481e-09;1.1059455573558807e-09;4.3655745685100555e-10;5.820766091346741e-11;0.0;0.0;-8.731149137020111e-11;-3.4924596548080444e-10;-1.0477378964424133e-09;-1.0477378964424133e-09,5,5,"[-5.598142147064209, -4.895589351654053, -5.4232683181762695, -6.5330424308776855, -5.491917610168457, -0.02139885537326336]",0.9788286089897156
1,"['\t@Test\r\n\tpublic void toAliasTest() {\r\n\t\tString alias = EmojiUtil.toAlias(""ð\x9f\x98\x84"");\r\n\t\tAssert.assertEquals("":smile:"", alias);\r\n\t}\r\n']",to;smile;Assert;alias;Alias;Util;Equals;alias;to;Ã°,1.862645149230957e-09;1.8044374883174896e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0,5,5,"[-5.594906330108643, -4.908674716949463, -5.414283752441406, -6.520118236541748, -5.475903511047363, -0.021439578384160995]",0.9787884950637817
1,"['\t@Test\r\n\tpublic void containsEmojiTest() {\r\n\t\tboolean containsEmoji = EmojiUtil.containsEmoji(""æµ\x8bè¯\x95ä¸\x80ä¸\x8bæ\x98¯å\x90¦å\x8c\x85å\x90«EMOJ:ð\x9f\x98\x84"");\r\n\t\tAssert.assertEquals(containsEmoji, true);\r\n\t\tboolean notContainsEmoji = EmojiUtil.containsEmoji(""ä¸\x8då\x8c\x85å\x90«EMOJ:^_^"");\r\n\t\tAssert.assertEquals(notContainsEmoji, false);\r\n\r\n\t}\r\n']",moji;Contains;moji;EM;Ã¥;Emoji;contains;Util;Assert;boolean,1.3387762010097504e-09;1.3387762010097504e-09;1.0622898116707802e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;6.83940015733242e-10;6.693881005048752e-10;6.693881005048752e-10,5,5,"[-5.569303512573242, -5.0122971534729, -5.4405341148376465, -6.514028549194336, -5.443264961242676, -0.020829150453209877]",0.9793862700462341
1,"['\t@Test\r\n\tpublic void bindPortTest() {\r\n\t\t//æ\x96°å»ºä¼\x9aè¯\x9dï¼\x8cæ\xad¤ä¼\x9aè¯\x9dç\x94¨äº\x8esshè¿\x9eæ\x8e¥å\x88°è·³æ\x9d¿æ\x9cºï¼\x88å\xa0¡å\x9e\x92æ\x9cºï¼\x89ï¼\x8cæ\xad¤å¤\x84ä¸º10.1.1.1:22\r\n\t\tSession session = JschUtil.getSession(""looly.centos"", 22, ""test"", ""123456"");\r\n\t\t// å°\x86å\xa0¡å\x9e\x92æ\x9cºä¿\x9dæ\x8a¤ç\x9a\x84å\x86\x85ç½\x918080ç«¯å\x8f£æ\x98\xa0å°\x84å\x88°localhostï¼\x8cæ\x88\x91ä»¬å°±å\x8f¯ä»¥é\x80\x9aè¿\x87è®¿é\x97®http://localhost:8080/è®¿é\x97®å\x86\x85ç½\x91æ\x9c\x8då\x8a¡äº\x86\r\n\t\tJschUtil.bindPort(session, ""172.20.12.123"", 8080, 8080);\r\n\t}\r\n']",ssh;bind;Ã¤;Port;Ã¨;Ã¦;Ã¤;Â¨;bind;Ã¥,1.3969838619232178e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.560147285461426, -4.995262145996094, -5.450949668884277, -6.475153923034668, -5.4839372634887695, -0.020819811150431633]",0.9793954491615295
1,"['\t@Test\r\n\tpublic void bindRemotePort() throws InterruptedException {\r\n\t\t// å»ºç«\x8bä¼\x9aè¯\x9d\r\n\t\tSession session = JschUtil.getSession(""looly.centos"", 22, ""test"", ""123456"");\r\n\t\t// ç»\x91å®\x9asshæ\x9c\x8då\x8a¡ç«¯8089ç«¯å\x8f£å\x88°æ\x9c¬æ\x9cºç\x9a\x848000ç«¯å\x8f£ä¸\x8a\r\n\t\tboolean b = JschUtil.bindRemotePort(session, 8089, ""localhost"", 8000);\r\n\t\tAssert.assertTrue(b);\r\n\t\t// ä¿\x9dè¯\x81ä¸\x80ç\x9b´è¿\x90è¡\x8c\r\n//\t\twhile (true){\r\n//\t\t\tThread.sleep(3000);\r\n//\t\t}\r\n\t}\r\n']",centos;Remote;Ã¥;Â¯;Âº;session;Assert;Â«;Port;Ã¤,1.4551915228366852e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.558629035949707, -4.9999847412109375, -5.436280727386475, -6.482852935791016, -5.500524044036865, -0.02077602781355381]",0.9794381856918335
1,"['\t@Test\r\n\tpublic void sftpTest() {\r\n\t\tSession session = JschUtil.getSession(""looly.centos"", 22, ""root"", ""123456"");\r\n\t\tSftp sftp = JschUtil.createSftp(session);\r\n\t\tsftp.mkDirs(""/opt/test/aaa/bbb"");\r\n\t\tConsole.log(""OK"");\r\n\t}\r\n']",centos;ft;session;ft;Session;Console;ft;bb;Util;ft,1.3096723705530167e-09;1.1641532182693481e-09;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.575569152832031, -4.967500686645508, -5.455384254455566, -6.52374267578125, -5.478704452514648, -0.020882505923509598]",0.9793339967727661
1,"['\t@Test\r\n\tpublic void reconnectIfTimeoutTest() throws InterruptedException {\r\n\t\tSession session = JschUtil.getSession(""sunnyserver"", 22,""mysftp"",""liuyang1234"");\r\n\t\tSftp sftp = JschUtil.createSftp(session);\r\n\r\n\t\tConsole.log(""æ\x89\x93å\x8d°pwd: "" + sftp.pwd());\r\n\t\tConsole.log(""cd / : "" + sftp.cd(""/""));\r\n\t\tConsole.log(""ä¼\x91ç\x9c\xa0ä¸\x80æ®µæ\x97¶é\x97´ï¼\x8cæ\x9f¥ç\x9c\x8bæ\x98¯å\x90¦è¶\x85æ\x97¶"");\r\n\t\tThread.sleep(30 * 1000);\r\n\r\n\t\ttry{\r\n\t\t\t// å½\x93è¿\x9eæ\x8e¥è¶\x85æ\x97¶æ\x97¶ï¼\x8cisConnected()ä»\x8dç\x84¶è¿\x94å\x9b\x9etrueï¼\x8cpwdå\x91½ä»¤ä¹\x9fè\x83½æ\xad£å¸¸è¿\x94å\x9b\x9eï¼\x8cå\x9b\xa0æ\xad¤ï¼\x8cå\x88©ç\x94¨å\x8f\x91é\x80\x81cdå\x91½ä»¤ç\x9a\x84è¿\x94å\x9b\x9eç»\x93æ\x9e\x9cï¼\x8cæ\x9d¥å\x88¤æ\x96\xadæ\x98¯å\x90¦è¿\x9eæ\x8e¥è¶\x85æ\x97¶\r\n\t\t\tConsole.log(""isConnected "" + sftp.getClient().isConnected());\r\n\t\t\tConsole.log(""æ\x89\x93å\x8d°pwd: "" + sftp.pwd());\r\n\t\t\tConsole.log(""cd / : "" + sftp.cd(""/""));\r\n\t\t}catch (JschRuntimeException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\tConsole.log(""è°\x83ç\x94¨reconnectIfTimeoutæ\x96¹æ³\x95ï¼\x8cå\x88¤æ\x96\xadæ\x98¯å\x90¦è¶\x85æ\x97¶å¹¶é\x87\x8dè¿\x9e"");\r\n\t\tsftp.reconnectIfTimeout();\r\n\r\n\t\tConsole.log(""æ\x89\x93å\x8d°pwd: "" + sftp.pwd());\r\n\r\n\t\tIoUtil.close(sftp);\r\n\t}\r\n']",liuyang;true;Util;reconnect;log;session;Ã¥;Ã¦;Â¶;Ã¤,1.5133991837501526e-09;1.280568540096283e-09;1.2369127944111824e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0040821507573128e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10,5,5,"[-5.480052471160889, -5.066642761230469, -5.432084083557129, -6.451374053955078, -5.454166412353516, -0.020920798182487488]",0.9792965054512024
1,"['\t@Test\r\n\tpublic void getSessionTest(){\r\n\t\tJschUtil.getSession(""192.168.1.134"", 22, ""root"", ""aaa"", null);\r\n\t}\r\n']",null;get;Session;Session;Util;get;root;aaa;sch,5.820766091346741e-10;1.1641532182693481e-10;2.9103830456733704e-11;-3.4924596548080444e-10;-5.820766091346741e-10;-8.149072527885437e-10;-8.149072527885437e-10;-1.280568540096283e-09;-1.862645149230957e-09,5,5,"[-5.593039512634277, -4.8321685791015625, -5.4270148277282715, -6.531059265136719, -5.483571529388428, -0.021940013393759727]",0.9782989025115967
1,"['\t@Test\r\n\tpublic void cdTest() {\r\n\t\tFtp ftp = new Ftp(""looly.centos"");\r\n\t\t\r\n\t\tftp.cd(""/file/aaa"");\r\n\t\tConsole.log(ftp.pwd());\r\n\t\t\r\n\t\tIoUtil.close(ftp);\r\n\t}\r\n']",aaa;cd;tp;looly;centos;wd;tp;log;ft;cd,1.4551915228366852e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.585684299468994, -4.994071960449219, -5.4367570877075195, -6.523226737976074, -5.479694366455078, -0.02073574624955654]",0.9794777631759644
1,"['\t@Test\r\n\tpublic void uploadTest() {\r\n\t\tFtp ftp = new Ftp(""looly.centos"");\r\n\t\t\r\n\t\tList<String> ls = ftp.ls(""/file"");\r\n\t\tConsole.log(ls);\r\n\t\t\r\n\t\tboolean upload = ftp.upload(""/file/aaa"", FileUtil.file(""E:/qrcodeWithLogo.jpg""));\r\n\t\tConsole.log(upload);\r\n\t\t\r\n\t\tIoUtil.close(ftp);\r\n\t}\r\n']",ls;new;tp;rcode;log;jpg;ft;looly;tp;close,1.0477378964424133e-09;8.731149137020111e-10;7.8580342233181e-10;7.566995918750763e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.55219841003418, -4.990334987640381, -5.42028284072876, -6.50269889831543, -5.47938346862793, -0.020998427644371986]",0.9792205095291138
1,"['\t@Test\r\n\tpublic void reconnectIfTimeoutTest() throws InterruptedException {\r\n\t\tFtp ftp = new Ftp(""looly.centos"");\r\n\r\n\t\tConsole.log(""æ\x89\x93å\x8d°pwd: "" + ftp.pwd());\r\n\r\n\t\tConsole.log(""ä¼\x91ç\x9c\xa0ä¸\x80æ®µæ\x97¶é\x97´ï¼\x8cç\x84¶å\x90\x8eå\x86\x8dæ¬¡å\x8f\x91é\x80\x81pwdå\x91½ä»¤ï¼\x8cæ\x8a\x9bå\x87ºå¼\x82å¸¸è¡¨æ\x98\x8eè¿\x9eæ\x8e¥è¶\x85æ\x97¶"");\r\n\t\tThread.sleep(35 * 1000);\r\n\r\n\t\ttry{\r\n\t\t\tConsole.log(""æ\x89\x93å\x8d°pwd: "" + ftp.pwd());\r\n\t\t}catch (FtpException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\tConsole.log(""å\x88¤æ\x96\xadæ\x98¯å\x90¦è¶\x85æ\x97¶å¹¶é\x87\x8dè¿\x9e..."");\r\n\t\tftp.reconnectIfTimeout();\r\n\r\n\t\tConsole.log(""æ\x89\x93å\x8d°pwd: "" + ftp.pwd());\r\n\r\n\t\tIoUtil.close(ftp);\r\n\t}\r\n']",Timeout;centos;Ã¦;Console;wd;Ã¤;Âł;Interrupted;Trace;Â¶,1.3969838619232178e-09;1.3969838619232178e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10,5,5,"[-5.552333831787109, -5.020266056060791, -5.431662559509277, -6.470420837402344, -5.494058132171631, -0.020730024203658104]",0.9794833660125732
1,"['\t@Test\r\n\tpublic void recursiveDownloadFolder() {\r\n\t\tFtp ftp = new Ftp(""looly.centos"");\r\n\t\tftp.recursiveDownloadFolder(""/"",FileUtil.file(""d:/test/download""));\r\n\r\n\t\tIoUtil.close(ftp);\r\n\t}\r\n']",Download;ft;tp;Util;tp;Util;Folder;file;ft;download,1.2223608791828156e-09;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.554384231567383, -4.971259117126465, -5.455077171325684, -6.542255401611328, -5.489171504974365, -0.020868144929409027]",0.9793480634689331
1,"['\t@Test\r\n\tpublic void recursiveDownloadFolderSftp() {\r\n\t\tSftp ftp = new Sftp(""127.0.0.1"", 22, ""test"", ""test"");\r\n\r\n\t\tftp.cd(""/file/aaa"");\r\n\t\tConsole.log(ftp.pwd());\r\n\t\tftp.recursiveDownloadFolder(""/"",FileUtil.file(""d:/test/download""));\r\n\r\n\t\tIoUtil.close(ftp);\r\n\t}\r\n']",aaa;ft;ft;file;Download;Folder;Console;ft;log;new,7.566995918750763e-10;4.94765117764473e-10;4.511093720793724e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.549160480499268, -5.006707668304443, -5.444862365722656, -6.5145368576049805, -5.468660354614258, -0.020815841853618622]",0.9793993234634399
1,"['\t@Test\r\n\tpublic void copyTest() {\r\n\t\tSampleBean bean = new SampleBean();\r\n\t\tbean.setValue(""Hello world"");\r\n\r\n\t\tOtherSampleBean otherBean = new OtherSampleBean();\r\n\t\tCglibUtil.copy(bean, otherBean);\r\n\t\tAssert.assertEquals(""Hello world"", otherBean.getValue());\r\n\r\n\t\tOtherSampleBean otherBean2 = CglibUtil.copy(bean, OtherSampleBean.class);\r\n\t\tAssert.assertEquals(""Hello world"", otherBean2.getValue());\r\n\t}\r\n']",new;Bean;bean;new;copy;world;Bean;world;Sample;bean,7.275957614183426e-10;6.83940015733242e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.543468952178955, -5.045780181884766, -5.4575700759887695, -6.506834983825684, -5.451523780822754, -0.020607180893421173]",0.9796038269996643
1,['\t@Test\r\n\tpublic void createEngineTest() {\r\n\t\t// é»\x98è®¤å\x88\x86è¯\x8då¼\x95æ\x93\x8eï¼\x8cæ\xad¤å¤\x84ä¸ºAnsj\r\n\t\tTokenizerEngine engine = TokenizerUtil.createEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tcheckResult(result);\r\n\t}\r\n'],Â¯;Ã¥;Ã¨;text;Engine;Ã¥;create;engine;Ã¥;izer,2.3283064365386963e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.594635009765625, -4.893718719482422, -5.385014533996582, -6.499338150024414, -5.4930291175842285, -0.021648414433002472]",0.9785842299461365
1,"['\t@Test\r\n\tpublic void hanlpTest() {\r\n\t\tTokenizerEngine engine = new HanLPEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tString resultStr = IterUtil.join((Iterator<Word>)result, "" "");\r\n\t\tAssert.assertEquals(""è¿\x99 ä¸¤ ä¸ª æ\x96¹æ³\x95 ç\x9a\x84 å\x8cºå\x88« å\x9c¨äº\x8e è¿\x94å\x9b\x9e å\x80¼"", resultStr);\r\n\t}\r\n']",LPEngine;Assert;anlp;Str;izer;Ã¨;Han;Â«;Engine;result,1.862645149230957e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10,5,5,"[-5.561349868774414, -4.959538459777832, -5.416983604431152, -6.486196041107178, -5.496257781982422, -0.021148767322301865]",0.9790732860565186
1,"['\t@Test\r\n\tpublic void ikAnalyzerTest() {\r\n\t\tTokenizerEngine engine = new IKAnalyzerEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tString resultStr = IterUtil.join((Iterator<Word>)result, "" "");\r\n\t\tAssert.assertEquals(""è¿\x99ä¸¤ä¸ª æ\x96¹æ³\x95 ç\x9a\x84 å\x8cºå\x88« å\x9c¨äº\x8e è¿\x94å\x9b\x9eå\x80¼"", resultStr);\r\n\t}\r\n']",Ã¨;Str;Analyzer;Ã¤;text;Ã¤;Word;new;izer;Â¨,6.402842700481415e-10;6.111804395914078e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.571125507354736, -4.961023807525635, -5.415722370147705, -6.4827375411987305, -5.5034027099609375, -0.02108130417764187]",0.9791394472122192
1,['\t@Test\r\n\tpublic void jcsegTest() {\r\n\t\tTokenizerEngine engine = new JcsegEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tcheckResult(result);\r\n\t}\r\n'],Engine;izer;new;se;Result;Result;check;engine;se;result,1.3969838619232178e-09;1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-5.574399471282959, -4.940095901489258, -5.41565465927124, -6.538231372833252, -5.470901966094971, -0.0212732944637537]",0.9789513945579529
1,"['\t@Test\r\n\tpublic void jiebaTest() {\r\n\t\tTokenizerEngine engine = new JiebaEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tString resultStr = IterUtil.join((Iterator<Word>)result, "" "");\r\n\t\tAssert.assertEquals(""è¿\x99 ä¸¤ä¸ª æ\x96¹æ³\x95 ç\x9a\x84 å\x8cºå\x88« å\x9c¨äº\x8e è¿\x94å\x9b\x9eå\x80¼"", resultStr);\r\n\t}\r\n']",Assert;ieba;Word;Â«;Ã¤;Â¨;izer;Util;ieba;result,1.5133991837501526e-09;1.0477378964424133e-09;8.731149137020111e-10;7.712515071034431e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.569593906402588, -4.963311672210693, -5.419974327087402, -6.482419013977051, -5.504796504974365, -0.021046169102191925]",0.9791736602783203
1,['\t@Test\r\n\tpublic void mmsegTest() {\r\n\t\tTokenizerEngine engine = new MmsegEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tcheckResult(result);\r\n\t}\r\n'],se;engine;check;izer;new;Result;engine;result;parse;Result,1.1641532182693481e-09;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;-5.820766091346741e-11,5,5,"[-5.570197582244873, -4.909249305725098, -5.417738914489746, -6.538802146911621, -5.485678672790527, -0.021445177495479584]",0.978783130645752
1,"['\t@Test\r\n\tpublic void smartcnTest() {\r\n\t\tTokenizerEngine engine = new SmartcnEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tString resultStr = IterUtil.join((Iterator<Word>)result, "" "");\r\n\t\tAssert.assertEquals(""è¿\x99 ä¸¤ ä¸ª æ\x96¹æ³\x95 ç\x9a\x84 å\x8cºå\x88« å\x9c¨äº\x8e è¿\x94å\x9b\x9e å\x80¼"", resultStr);\r\n\t}\r\n']",Engine;Smartcn;text;smartcn;Ã¥;parse;Result;Str;Ã¥;Iterator,1.5133991837501526e-09;1.3387762010097504e-09;8.731149137020111e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.564195156097412, -4.960189342498779, -5.4160542488098145, -6.477773666381836, -5.504062652587891, -0.021117720752954483]",0.979103684425354
1,"['\t@Test\r\n\tpublic void wordTest() {\r\n\t\tTokenizerEngine engine = new WordEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tString resultStr = IterUtil.join((Iterator<Word>)result, "" "");\r\n\t\tAssert.assertEquals(""è¿\x99ä¸¤ä¸ª æ\x96¹æ³\x95 ç\x9a\x84 å\x8cºå\x88« å\x9c¨äº\x8e è¿\x94å\x9b\x9eå\x80¼"", resultStr);\r\n\t}\r\n']",Assert;Engine;result;word;Âº;Equals;Âº;text;Result;Iterator,1.3242242857813835e-09;1.280568540096283e-09;7.712515071034431e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.57330846786499, -4.957906723022461, -5.420716762542725, -6.4817795753479, -5.5140252113342285, -0.021030060946941376]",0.9791895151138306
1,"['\t@Test\r\n\tpublic void mynlpTest() {\r\n\t\t// æ\xad¤å\x8d\x95å\x85\x83æµ\x8bè¯\x95é\x9c\x80è¦\x81JDK8ï¼\x8cé»\x98è®¤å¿½ç\x95¥\r\n\t\tTokenizerEngine engine = new MynlpEngine();\r\n\t\tResult result = engine.parse(text);\r\n\t\tString resultStr = IterUtil.join((Iterator<Word>)result, "" "");\r\n\t\tAssert.assertEquals(""è¿\x99 ä¸¤ä¸ª æ\x96¹æ³\x95 ç\x9a\x84 å\x8cºå\x88« å\x9c¨äº\x8e è¿\x94å\x9b\x9e å\x80¼"", resultStr);\r\n\t}\r\n']",Mynl;Â¯;Iterator;Ã¦;result;new;Engine;Word;Ã©;Ã¨,2.3865140974521637e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.570908546447754, -4.952822208404541, -5.401248931884766, -6.473438262939453, -5.487213134765625, -0.021289631724357605]",0.9789353013038635
1,"['\t@Test\r\n\tpublic void charsetTest(){\r\n\t\tfinal TemplateConfig config = new TemplateConfig(""templates"", TemplateConfig.ResourceMode.CLASSPATH);\r\n\t\tconfig.setCustomEngine(VelocityEngine.class);\r\n\t\tconfig.setCharset(CharsetUtil.CHARSET_GBK);\r\n\t\tfinal TemplateEngine engine = TemplateUtil.createEngine(config);\r\n\t\tTemplate template = engine.getTemplate(""velocity_test_gbk.vtl"");\r\n\t\tString result = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""ä½\xa0å¥½,hutool"", result);\r\n\t}\r\n']",CLASSPATH;Engine;Charset;Velocity;ict;velocity;Template;gb;Mode;config,1.57160684466362e-09;1.1641532182693481e-09;1.1350493878126144e-09;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.513978958129883, -5.011313438415527, -5.478043556213379, -6.533550262451172, -5.473191261291504, -0.020734811201691628]",0.979478657245636
1,"['\t@Test\r\n\tpublic void thymeleafEngineTest() {\r\n\t\tMap<String, Object> map1 = new HashMap<>();\r\n\t\tmap1.put(""name"", ""a"");\r\n\r\n\t\tMap<String, Object> map2 = new HashMap<>();\r\n\t\tmap2.put(""name"", ""b"");\r\n\r\n\t\t// æ\x97¥æ\x9c\x9fæµ\x8bè¯\x95\r\n\t\tMap<String, Object> map3 = new HashMap<>();\r\n\t\tmap3.put(""name"", DateUtil.parse(""2019-01-01""));\r\n\r\n\t\tList<Map<String, Object>> list = new ArrayList<>();\r\n\t\tlist.add(map1);\r\n\t\tlist.add(map2);\r\n\t\tlist.add(map3);\r\n\r\n\t\t// å\xad\x97ç¬¦ä¸²æ¨¡æ\x9d¿\r\n\t\tTemplateEngine engine = new ThymeleafEngine(new TemplateConfig());\r\n\t\tTemplate template = engine.getTemplate(""<h3 th:each=\\""item : ${list}\\"" th:text=\\""${item.name}\\""></h3>"");\r\n\t\tString render = template.render(Dict.create().set(""list"", list));\r\n\t\tAssert.assertEquals(""<h3>a</h3><h3>b</h3><h3>2019-01-01 00:00:00</h3>"", render);\r\n\t}\r\n']",thymeleaf;th;template;new;Engine;Equals;render;Map;name;list,1.2223608791828156e-09;8.731149137020111e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.128661774098873e-10;2.9103830456733704e-10,5,5,"[-5.534371376037598, -4.992595672607422, -5.397097110748291, -6.473403453826904, -5.518463134765625, -0.021042201668024063]",0.9791776537895203
1,"['\t@Test\r\n\tpublic void thymeleafEngineTest2() {\r\n\t\tMap<String, Object> map1 = new HashMap<>();\r\n\t\tmap1.put(""name"", ""a"");\r\n\r\n\t\tMap<String, Object> map2 = new HashMap<>();\r\n\t\tmap2.put(""name"", ""b"");\r\n\r\n\t\t// æ\x97¥æ\x9c\x9fæµ\x8bè¯\x95\r\n\t\tMap<String, Object> map3 = new HashMap<>();\r\n\t\tmap3.put(""name"", DateUtil.parse(""2019-01-01""));\r\n\r\n\t\tList<Map<String, Object>> list = new ArrayList<>();\r\n\t\tlist.add(map1);\r\n\t\tlist.add(map2);\r\n\t\tlist.add(map3);\r\n\r\n\t\tLinkedHashMap<String, Object> map = new LinkedHashMap<>();\r\n\t\tmap.put(""list"", list);\r\n\r\n\t\t hutoolApi(map);\r\n\t\tthymeleaf(map);\r\n\t}\r\n']",Date;pi;new;hutool;Engine;Util;name;Array;Ã¦;name,8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-5.53760290145874, -5.001145839691162, -5.43613338470459, -6.500121116638184, -5.531935691833496, -0.020696746185421944]",0.9795159697532654
1,"['\t@Test\r\n\tpublic void createEngineTest() {\r\n\t\t// å\xad\x97ç¬¦ä¸²æ¨¡æ\x9d¿, é»\x98è®¤æ¨¡æ\x9d¿å¼\x95æ\x93\x8eï¼\x8cæ\xad¤å¤\x84ä¸ºBeetl\r\n\t\tTemplateEngine engine = TemplateUtil.createEngine(new TemplateConfig());\r\n\t\tTemplate template = engine.getTemplate(""hello,${name}"");\r\n\t\tString result = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", result);\r\n\r\n\t\t// classpathä¸\xadè\x8e·å\x8f\x96æ¨¡æ\x9d¿\r\n\t\tengine = TemplateUtil.createEngine(new TemplateConfig(""templates"", ResourceMode.CLASSPATH));\r\n\t\tTemplate template2 = engine.getTemplate(""beetl_test.btl"");\r\n\t\tString result2 = template2.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", result2);\r\n\t}\r\n']",render;CLASSPATH;Equals;result;ict;templates;Template;bt;new;Ã¦,6.402842700481415e-10;4.94765117764473e-10;4.874891601502895e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.514727592468262, -5.040297508239746, -5.475480079650879, -6.511786937713623, -5.46479606628418, -0.020617106929421425]",0.9795939922332764
1,"['\t@Test\r\n\tpublic void beetlEngineTest() {\r\n\t\t// å\xad\x97ç¬¦ä¸²æ¨¡æ\x9d¿\r\n\t\tTemplateEngine engine = new BeetlEngine(new TemplateConfig(""templates""));\r\n\t\tTemplate template = engine.getTemplate(""hello,${name}"");\r\n\t\tString result = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", result);\r\n\r\n\t\t// classpathä¸\xadè\x8e·å\x8f\x96æ¨¡æ\x9d¿\r\n\t\tengine = new BeetlEngine(new TemplateConfig(""templates"", ResourceMode.CLASSPATH));\r\n\t\tTemplate template2 = engine.getTemplate(""beetl_test.btl"");\r\n\t\tString result2 = template2.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", result2);\r\n\t}\r\n']",ict;Ã¤;ict;Â¨;Template;render;Beet;CLASSPATH;Engine;Ã¤,1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.497150421142578, -5.049285888671875, -5.477978229522705, -6.521812915802002, -5.4499430656433105, -0.02066977135837078]",0.9795423746109009
1,"['\t@Test\r\n\tpublic void rythmEngineTest() {\r\n\t\t// å\xad\x97ç¬¦ä¸²æ¨¡æ\x9d¿\r\n\t\tTemplateEngine engine = TemplateUtil.createEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"").setCustomEngine(RythmEngine.class));\r\n\t\tTemplate template = engine.getTemplate(""hello,@name"");\r\n\t\tString result = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", result);\r\n\r\n\t\t// classpathä¸\xadè\x8e·å\x8f\x96æ¨¡æ\x9d¿\r\n\t\tTemplate template2 = engine.getTemplate(""rythm_test.tmpl"");\r\n\t\tString result2 = template2.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", result2);\r\n\t}\r\n']",ythm;tmpl;Ã§;ythm;Util;Engine;Â²;classpath;Â¨;create,1.862645149230957e-09;9.89530235528946e-10;7.275957614183426e-10;6.984919309616089e-10;4.43833414465189e-10;4.0745362639427185e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.507221221923828, -5.043505668640137, -5.497236251831055, -6.537855625152588, -5.457630157470703, -0.020526951178908348]",0.979682207107544
1,"['\t@Test\r\n\tpublic void freemarkerEngineTest() {\r\n\t\t// å\xad\x97ç¬¦ä¸²æ¨¡æ\x9d¿\r\n\t\tTemplateEngine engine = TemplateUtil.createEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"", ResourceMode.STRING).setCustomEngine(FreemarkerEngine.class));\r\n\t\tTemplate template = engine.getTemplate(""hello,${name}"");\r\n\t\tString result = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", result);\r\n\t\t\r\n\t\t//ClassPathæ¨¡æ\x9d¿\r\n\t\tengine = TemplateUtil.createEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"", ResourceMode.CLASSPATH).setCustomEngine(FreemarkerEngine.class));\r\n\t\ttemplate = engine.getTemplate(""freemarker_test.ftl"");\r\n\t\tresult = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", result);\r\n\t}\r\n']",freemarker;Ã¦;Â¨;Freemarker;templates;Engine;templates;template;Template;new,1.6298145055770874e-09;7.566995918750763e-10;6.984919309616089e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.457248210906982, -5.108898162841797, -5.496044158935547, -6.5283403396606445, -5.406543731689453, -0.0205696951597929]",0.9796404242515564
1,"['\t@Test\r\n\tpublic void velocityEngineTest() {\r\n\t\t// å\xad\x97ç¬¦ä¸²æ¨¡æ\x9d¿\r\n\t\tTemplateEngine engine = TemplateUtil.createEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"", ResourceMode.STRING).setCustomEngine(VelocityEngine.class));\r\n\t\tTemplate template = engine.getTemplate(""ä½\xa0å¥½,$name"");\r\n\t\tString result = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""ä½\xa0å¥½,hutool"", result);\r\n\t\t\r\n\t\t//ClassPathæ¨¡æ\x9d¿\r\n\t\tengine = TemplateUtil.createEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"", ResourceMode.CLASSPATH).setCustomEngine(VelocityEngine.class));\r\n\t\ttemplate = engine.getTemplate(""velocity_test.vtl"");\r\n\t\tresult = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""ä½\xa0å¥½,hutool"", result);\r\n\r\n\t\ttemplate = engine.getTemplate(""templates/velocity_test.vtl"");\r\n\t\tresult = template.render(Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""ä½\xa0å¥½,hutool"", result);\r\n\t}\r\n']",velocity;render;Engine;Template;Velocity;Â¨;Ã¥;Template;result;engine,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.463672637939453, -5.085484504699707, -5.472179889678955, -6.496684551239014, -5.431173324584961, -0.020725704729557037]",0.9794877171516418
1,"['\t@Test\r\n\tpublic void enjoyEngineTest() {\r\n\t\t// å\xad\x97ç¬¦ä¸²æ¨¡æ\x9d¿\r\n\t\tTemplateEngine engine = TemplateUtil.createEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"").setCustomEngine(EnjoyEngine.class));\r\n\t\tTemplate template = engine.getTemplate(""#(x + 123)"");\r\n\t\tString result = template.render(Dict.create().set(""x"", 1));\r\n\t\tAssert.assertEquals(""124"", result);\r\n\r\n\t\t//ClassPathæ¨¡æ\x9d¿\r\n\t\tengine = new EnjoyEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"", ResourceMode.CLASSPATH).setCustomEngine(EnjoyEngine.class));\r\n\t\ttemplate = engine.getTemplate(""enjoy_test.etl"");\r\n\t\tresult = template.render(Dict.create().set(""x"", 1));\r\n\t\tAssert.assertEquals(""124"", result);\r\n\t}\r\n']",Ã¦;Path;Engine;enjoy;Engine;template;create;ict;Template;Ã¦,5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.497638702392578, -5.047669887542725, -5.477803707122803, -6.534222602844238, -5.467921733856201, -0.020582424476742744]",0.9796279668807983
1,"['\t@Test\r\n\tpublic void thymeleafEngineTest() {\r\n\t\t// å\xad\x97ç¬¦ä¸²æ¨¡æ\x9d¿\r\n\t\tTemplateEngine engine = TemplateUtil.createEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"").setCustomEngine(ThymeleafEngine.class));\r\n\t\tTemplate template = engine.getTemplate(""<h3 th:text=\\""${message}\\""></h3>"");\r\n\t\tString result = template.render(Dict.create().set(""message"", ""Hutool""));\r\n\t\tAssert.assertEquals(""<h3>Hutool</h3>"", result);\r\n\t\t\r\n\t\t//ClassPathæ¨¡æ\x9d¿\r\n\t\tengine = TemplateUtil.createEngine(\r\n\t\t\t\tnew TemplateConfig(""templates"", ResourceMode.CLASSPATH).setCustomEngine(ThymeleafEngine.class));\r\n\t\ttemplate = engine.getTemplate(""thymeleaf_test.ttl"");\r\n\t\tresult = template.render(Dict.create().set(""message"", ""Hutool""));\r\n\t\tAssert.assertEquals(""<h3>Hutool</h3>"", result);\r\n\t}\r\n']",thymeleaf;CLASSPATH;engine;Config;message;Engine;create;template;thymeleaf;message,5.238689482212067e-10;5.165929906070232e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.46458625793457, -5.103852272033691, -5.498787879943848, -6.538388729095459, -5.419353008270264, -0.02048432268202305]",0.9797240495681763
1,"['\t@Test\r\n\tpublic void renderToFileTest() {\r\n\t\tTemplateEngine engine = new BeetlEngine(new TemplateConfig(""templates"", ResourceMode.CLASSPATH));\r\n\t\tTemplate template = engine.getTemplate(""freemarker_test.ftl"");\r\n\r\n\t\tfinal Map<String, Object> bindingMap = new HashMap<>();\r\n\t\tbindingMap.put(""name"", ""aa"");\r\n\t\tFile outputFile = new File(""e:/test.txt"");\r\n\t\ttemplate.render(bindingMap, outputFile);\r\n\t}\r\n']",Engine;new;Config;freemarker;Template;binding;new;Map;put;File,6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.2919266484677792e-10,5,5,"[-5.541072845458984, -4.997568607330322, -5.459892272949219, -6.525649070739746, -5.49068021774292, -0.020734578371047974]",0.9794788956642151
1,"['\t@Test\r\n\tpublic void renderStrTest() throws IOException {\r\n\t\tGroupTemplate groupTemplate = BeetlUtil.createGroupTemplate(new StringTemplateResourceLoader(), Configuration.defaultConfiguration());\r\n\t\tTemplate template = BeetlUtil.getTemplate(groupTemplate, ""hello,${name}"");\r\n\t\tString result = BeetlUtil.render(template, Dict.create().set(""name"", ""hutool""));\r\n\r\n\t\tAssert.assertEquals(""hello,hutool"", result);\r\n\r\n\t\tString renderFromStr = BeetlUtil.renderFromStr(""hello,${name}"", Dict.create().set(""name"", ""hutool""));\r\n\t\tAssert.assertEquals(""hello,hutool"", renderFromStr);\r\n\r\n\t}\r\n']",Str;Equals;Resource;group;hello;template;Template;result;new;utool,1.1350493878126144e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.485671043395996, -5.0076141357421875, -5.463297367095947, -6.535210609436035, -5.4515180587768555, -0.02103297971189022]",0.9791866540908813
1,"['\t@Test\r\n\tpublic void aopTest() {\r\n\t\tAnimal cat = ProxyUtil.proxy(new Cat(), TimeIntervalAspect.class);\r\n\t\tString result = cat.eat();\r\n\t\tAssert.assertEquals(""ç\x8c«å\x90\x83é±¼"", result);\r\n\t\tcat.seize();\r\n\t}\r\n']",Ã§;Assert;Util;op;new;Cat;Time;cat;Ã¥;Aspect,3.14321368932724e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10,5,5,"[-5.579163551330566, -4.945466041564941, -5.408212184906006, -6.513719081878662, -5.50445032119751, -0.0211445651948452]",0.9790773987770081
1,"['\t@Test\r\n\tpublic void aopByAutoCglibTest() {\r\n\t\tDog dog = ProxyUtil.proxy(new Dog(), TimeIntervalAspect.class);\r\n\t\tString result = dog.eat();\r\n\t\tAssert.assertEquals(""ç\x8b\x97å\x90\x83è\x82\x89"", result);\r\n\r\n\t\tdog.seize();\r\n\t}\r\n']",Ã§;dog;dog;Interval;result;seize;result;class;Dog;Proxy,3.725290298461914e-09;1.280568540096283e-09;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;2.9103830456733704e-10;1.4551915228366852e-10;8.731149137020111e-11;0.0;0.0,5,5,"[-5.564328670501709, -4.919741630554199, -5.390812873840332, -6.495988845825195, -5.495204925537109, -0.02153758518397808]",0.9786927103996277
1,"['\t@Test\r\n\tpublic void testCGLIBProxy() {\r\n\t\tTagObj target = new TagObj();\r\n\t\t//ç\x9b®æ\xa0\x87ç±»è®¾ç½®æ\xa0\x87è®°\r\n\t\ttarget.setTag(""tag"");\r\n\r\n\t\tTagObj proxy = ProxyUtil.proxy(target, TimeIntervalAspect.class);\r\n\t\t//ä»£ç\x90\x86ç±»è\x8e·å\x8f\x96æ\xa0\x87è®°tag (æ\x96\xadè¨\x80é\x94\x99è¯¯)\r\n\t\tAssert.assertEquals(""tag"", proxy.getTag());\r\n\t}\r\n']",Aspect;Â®;Ã§;GLIBProxy;Ã¥;new;Tag;target;Âł;proxy,1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.384208634495735e-10;4.656612873077393e-10,5,5,"[-5.565247535705566, -5.034176826477051, -5.446897029876709, -6.501638412475586, -5.480841636657715, -0.020525900647044182]",0.9796833395957947
1,"['\t@Test\r\n\tpublic void compileTest() {\r\n\t\tCompiledScript script = ScriptUtil.compile(""print(\'Script test!\');"");\r\n\t\ttry {\r\n\t\t\tscript.eval();\r\n\t\t} catch (ScriptException e) {\r\n\t\t\tthrow new ScriptRuntimeException(e);\r\n\t\t}\r\n\t}\r\n']",compile;script;Util;script;Exception;Compiled;new;Exception;Script;Script,9.022187441587448e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.574683666229248, -4.9421257972717285, -5.434515953063965, -6.524374961853027, -5.504158020019531, -0.021052589640021324]",0.9791674613952637
1,"['\t@Test\r\n\tpublic void evalTest() {\r\n\t\tScriptUtil.eval(""print(\'Script test!\');"");\r\n\t}\r\n']",print;eval;Util;eval;Script;Script,1.6298145055770874e-09;1.1641532182693481e-09;5.820766091346741e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10,5,5,"[-5.622235298156738, -4.830843925476074, -5.426580429077148, -6.542868614196777, -5.494570255279541, -0.021779295057058334]",0.9784561395645142
1,"['\t@Test\r\n\tpublic void invokeTest() {\r\n\t\tfinal Object result = ScriptUtil.invoke(ResourceUtil.readUtf8Str(""filter1.js""), ""filter1"", 2, 1);\r\n\t\tAssert.assertTrue((Boolean) result);\r\n\t}\r\n']",invoke;invoke;result;Str;Util;read;Ut;Util;final;Object,1.0011717677116394e-08;7.450580596923828e-09;3.026798367500305e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.6298145055770874e-09;9.313225746154785e-10;6.402842700481415e-10;1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.5870256423950195, -4.918142318725586, -5.418485641479492, -6.526613712310791, -5.478259086608887, -0.02135988138616085]",0.9788667559623718
1,"['\t@Test\r\n\tpublic void pythonTest() throws ScriptException {\r\n\t\tfinal ScriptEngine pythonEngine = ScriptUtil.getPythonEngine();\r\n\t\tpythonEngine.eval(""print(\'Hello Python\')"");\r\n\t}\r\n']",Script;Script;Engine;final;python;Engine;Exception;print;eval;Engine,2.561137080192566e-09;1.7462298274040222e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0,5,5,"[-5.561107635498047, -4.903138160705566, -5.447741985321045, -6.556282997131348, -5.48599910736084, -0.021366065368056297]",0.9788606762886047
1,"['\t@Test\r\n\tpublic void luaTest() throws ScriptException {\r\n\t\tfinal ScriptEngine engine = ScriptUtil.getLuaEngine();\r\n\t\tengine.eval(""print(\'Hello Lua\')"");\r\n\t}\r\n']",Script;Script;engine;Hello;Exception;Lua;Engine;final;ua;Lua,4.190951585769653e-09;2.1827872842550278e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-5.562994480133057, -4.940343379974365, -5.447340488433838, -6.549077033996582, -5.483272075653076, -0.021105464547872543]",0.9791157245635986
1,"['\t@Test\r\n\tpublic void groovyTest() throws ScriptException {\r\n\t\tfinal ScriptEngine engine = ScriptUtil.getGroovyEngine();\r\n\t\tengine.eval(""println \'Hello Groovy\'"");\r\n\t}\r\n']",Engine;engine;Util;Hello;Groovy;Script;println;get;Groovy;eval,9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-4.656612873077393e-10,5,5,"[-5.561825752258301, -4.956612586975098, -5.459623336791992, -6.5526018142700195, -5.471737861633301, -0.02098255231976509]",0.9792360663414001
1,['\t@Test\r\n\tpublic void dumpTest() {\r\n\t\tSystemUtil.dumpSystemInfo();\r\n\t}\r\n'],dump;System;Util;System;Info;dump,-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-1.3969838619232178e-09,5,5,"[-5.624519348144531, -4.819015026092529, -5.41796350479126, -6.558051109313965, -5.506730556488037, -0.021833879873156548]",0.9784027338027954
1,['\t@Test\r\n\tpublic void getCurrentPidTest() {\r\n\t\tlong pid = SystemUtil.getCurrentPID();\r\n\t\tAssert.assertTrue(pid > 0);\r\n\t}\r\n'],long;ID;pid;True;Util;Assert;pid;get;get;id,1.5133991837501526e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.588376998901367, -4.8433685302734375, -5.401451110839844, -6.530205249786377, -5.522174835205078, -0.02182396687567234]",0.9784125685691833
1,['\t@Test\r\n\tpublic void getJavaInfoTest() {\r\n\t\tJavaInfo javaInfo = SystemUtil.getJavaInfo();\r\n\t\tAssert.assertNotNull(javaInfo);\r\n\t}\r\n'],Assert;Java;java;Util;get;Info;Info;Not;Info;Java,1.2223608791828156e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-5.597217559814453, -4.8771071434021, -5.411375045776367, -6.526556491851807, -5.508122444152832, -0.021540852263569832]",0.9786896109580994
1,"['  @Test\n  public void testStartShouldStartTheMetricsReportersAndServer() throws Exception {\n    NetworkConnector connector = Mockito.mock(NetworkConnector.class);\n    int testServerPort = 100;\n    Mockito.doReturn(testServerPort).when(connector).getPort();\n    Mockito.when(server.getConnectors()).thenReturn(new NetworkConnector[]{connector});\n    Mockito.doNothing().when(server).start();\n    samzaRestService.start();\n    Mockito.verify(metricsReporter).start();\n    Mockito.verify(metricsReporter).register(""SamzaRest"", metricsRegistry);\n    Mockito.verify(server).start();\n  }\n']",server;Mockito;verify;Connector;Mockito;Mockito;when;Network;Start;Metrics,4.190951585769653e-09;1.979060471057892e-09;1.862645149230957e-09;1.7462298274040222e-09;1.57160684466362e-09;1.4551915228366852e-09;1.3969838619232178e-09;9.022187441587448e-10;8.731149137020111e-10;8.731149137020111e-10,5,5,"[-5.55594539642334, -4.968796730041504, -5.431545734405518, -6.473887920379639, -5.4920244216918945, -0.02107558399438858]",0.9791450500488281
1,['  @Test\n  public void testStopShouldStopTheMetricsReportersAndStopTheServer() throws Exception {\n    samzaRestService.stop();\n    Mockito.verify(metricsReporter).stop();\n    Mockito.verify(server).stop();\n  }\n'],The;stop;samza;Rest;Service;stop;Stop;server;The;verify,1.6298145055770874e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-5.521785259246826, -4.9711737632751465, -5.44199800491333, -6.556360721588135, -5.4712300300598145, -0.02111293561756611]",0.9791083931922913
1,"['  @Test\n  public void testGetJobStatuses() throws IOException, InterruptedException {\n    doReturn(APPS_RESPONSE.getBytes()).when(provider).httpGet(anyString());\n\n    List<Job> jobs = Lists.newArrayList(\n        new Job(""job1"", ""1""),  // Job with multiple applications, 1 RUNNING\n        new Job(""job2"", ""1""),  // Job with 1 KILLED application\n        new Job(""job3"", ""1""),  // Job with 1 RUNNING application\n        new Job(""job4"", ""1"")); // Job not found in YARN\n    provider.getJobStatuses(jobs);\n\n    Collections.sort(jobs, (o1, o2) -> o1.getJobName().compareTo(o2.getJobName()));\n\n    assertEquals(4, jobs.size());\n    verifyJobStatus(jobs.get(0), ""job1"", JobStatus.STARTED, ""RUNNING"");\n    verifyJobStatus(jobs.get(1), ""job2"", JobStatus.STOPPED, ""KILLED"");\n    verifyJobStatus(jobs.get(2), ""job3"", JobStatus.STARTED, ""RUNNING"");\n    verifyJobStatus(jobs.get(3), ""job4"", JobStatus.UNKNOWN, null);\n  }\n']",provider;Job;AR;Statuses;APPS;sort;when;in;Return;List,2.3283064365386963e-09;1.862645149230957e-09;1.57160684466362e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.44727897644043, -5.050239086151123, -5.431288719177246, -6.468886375427246, -5.420945644378662, -0.021292198449373245]",0.9789327383041382
1,"['  @Test\n   public void testGetJobs()\n      throws IOException {\n\n    Response resp = target(""v1/jobs"").request().get();\n    assertEquals(200, resp.getStatus());\n    final Job[] jobs = objectMapper.readValue(resp.readEntity(String.class), Job[].class);\n    assertEquals(4, jobs.length);\n\n    assertEquals(MockJobProxy.JOB_INSTANCE_1_NAME, jobs[0].getJobName());\n    assertEquals(MockJobProxy.JOB_INSTANCE_1_ID, jobs[0].getJobId());\n    assertStatusNotDefault(jobs[0]);\n    assertEquals(MockJobProxy.JOB_INSTANCE_2_NAME, jobs[1].getJobName());\n    assertEquals(MockJobProxy.JOB_INSTANCE_2_ID, jobs[1].getJobId());\n    assertStatusNotDefault(jobs[1]);\n    assertEquals(MockJobProxy.JOB_INSTANCE_3_NAME, jobs[2].getJobName());\n    assertEquals(MockJobProxy.JOB_INSTANCE_3_ID, jobs[2].getJobId());\n    assertStatusNotDefault(jobs[2]);\n    assertEquals(MockJobProxy.JOB_INSTANCE_4_NAME, jobs[3].getJobName());\n    assertEquals(MockJobProxy.JOB_INSTANCE_4_ID, jobs[3].getJobId());\n    assertStatusNotDefault(jobs[3]);\n    resp.close();\n  }\n']",Entity;Response;Equals;Get;obs;read;final;Status;ock;IOException,9.313225746154785e-10;5.820766091346741e-10;4.729372449219227e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.475235939025879, -5.067333698272705, -5.413170337677002, -6.449284553527832, -5.431633949279785, -0.021125074476003647]",0.9790964722633362
1,"['  @Test\n   public void testPostJobs()\n      throws IOException {\n    Response resp = target(""v1/jobs"").request().post(Entity.text(""""));\n    assertEquals(405, resp.getStatus());\n    resp.close();\n  }\n']",Status;post;resp;target;get;request;jobs;Response;resp;Post,8.149072527885437e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.538170337677002, -4.969806671142578, -5.416789531707764, -6.511234760284424, -5.476341724395752, -0.021214241161942482]",0.979009211063385
1,"['  @Test\n  public void testPutJobs()\n      throws IOException {\n    Response resp = target(""v1/jobs"").request().put(Entity.text(""""));\n    assertEquals(405, resp.getStatus());\n    resp.close();\n  }\n']",obs;Put;close;put;resp;text;target;jobs;request;get,2.561137080192566e-09;1.3969838619232178e-09;1.0477378964424133e-09;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;0.0;0.0;-2.3283064365386963e-10,5,5,"[-5.547971725463867, -4.956284046173096, -5.43632173538208, -6.530627727508545, -5.499612331390381, -0.021056441590189934]",0.9791637063026428
1,"['  @Test\n  public void testGetJob()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, MockJobProxy.JOB_INSTANCE_2_ID)).request().get();\n    assertEquals(200, resp.getStatus());\n    final Job job2 = objectMapper.readValue(resp.readEntity(String.class), Job.class);\n\n    assertEquals(MockJobProxy.JOB_INSTANCE_2_NAME, job2.getJobName());\n    assertEquals(MockJobProxy.JOB_INSTANCE_2_ID, job2.getJobId());\n    assertStatusNotDefault(job2);\n    resp.close();\n  }\n']",Mock;INSTANCE;NAME;resp;Response;format;INSTANCE;ock;Equals;INSTANCE,5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.346940502524376e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.507857322692871, -5.014723300933838, -5.432374477386475, -6.506564617156982, -5.448902130126953, -0.021082237362861633]",0.9791384339332581
1,"['  @Test\n  public void testPostJob()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, MockJobProxy.JOB_INSTANCE_2_ID)).request().post(\n        Entity.text(""""));\n    assertEquals(405, resp.getStatus());\n    resp.close();\n  }\n']",Post;resp;Proxy;format;OB;Status;NAME;resp;Job;Mock,2.0954757928848267e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.524214267730713, -5.007870674133301, -5.463212013244629, -6.525349140167236, -5.45664119720459, -0.02086382545530796]",0.9793522953987122
1,"['  @Test\n  public void testGetJobNameNotFound()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s/%s"", ""BadJobName"", MockJobProxy.JOB_INSTANCE_2_ID)).request().get();\n    assertEquals(404, resp.getStatus());\n\n    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });\n    assertTrue(errorMessage.get(""message""), errorMessage.get(""message"").contains(""does not exist""));\n    resp.close();\n  }\n']",Get;Job;new;Job;target;format;Response;Name;object;resp,1.5133991837501526e-09;7.566995918750763e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.498669147491455, -5.033064365386963, -5.458611011505127, -6.5118632316589355, -5.459432125091553, -0.020827634260058403]",0.9793878793716431
1,"['  @Test\n  public void testGetJobIdNotFound()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, ""BadJobId"")).request().get();\n    assertEquals(404, resp.getStatus());\n\n    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });\n    assertTrue(errorMessage.get(""message""), errorMessage.get(""message"").contains(""does not exist""));\n    resp.close();\n  }\n']",target;resp;Get;Reference;NAME;True;exist;jobs;Bad;apper,1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.505402565002441, -4.957111835479736, -5.430585861206055, -6.491562843322754, -5.47666072845459, -0.02140538953244686]",0.9788220524787903
1,"['  @Test\n  public void testGetJobNameWithoutId()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s"", MockJobProxy.JOB_INSTANCE_2_NAME)).request().get();\n    assertEquals(404, resp.getStatus());\n    resp.close();\n  }\n']",Proxy;INSTANCE;Get;format;request;Name;Mock;OB;resp;jobs,9.313225746154785e-10;7.566995918750763e-10;7.275957614183426e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.539344787597656, -4.969192028045654, -5.43910551071167, -6.52470064163208, -5.481597900390625, -0.02107114903628826]",0.9791492819786072
1,"['  @Test\n  public void testStartJob()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, MockJobProxy.JOB_INSTANCE_2_ID))\n        .queryParam(""status"", ""started"").request().put(Entity.form(new Form()));\n    assertEquals(202, resp.getStatus());\n\n    final Job job2 = objectMapper.readValue(resp.readEntity(String.class), Job.class);\n    assertEquals(MockJobProxy.JOB_INSTANCE_2_NAME, job2.getJobName());\n    assertEquals(MockJobProxy.JOB_INSTANCE_2_ID, job2.getJobId());\n    assertStatusNotDefault(job2);\n    resp.close();\n  }\n']",resp;Mock;Mock;Param;apper;Start;Form;started;target;job,9.313225746154785e-10;6.111804395914078e-10;5.966285243630409e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.506168365478516, -5.016843795776367, -5.426693439483643, -6.489438533782959, -5.442266464233398, -0.021155886352062225]",0.9790663123130798
1,"['  @Test\n  public void testStopJob()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, MockJobProxy.JOB_INSTANCE_2_ID))\n        .queryParam(""status"", ""stopped"").request().put(Entity.form(new Form()));\n    assertEquals(202, resp.getStatus());\n\n    final Job job2 = objectMapper.readValue(resp.readEntity(String.class), Job.class);\n    assertEquals(MockJobProxy.JOB_INSTANCE_2_NAME, job2.getJobName());\n    assertEquals(MockJobProxy.JOB_INSTANCE_2_ID, job2.getJobId());\n    assertStatusNotDefault(job2);\n    resp.close();\n  }\n']",resp;request;Param;Status;Mock;Entity;Status;job;object;class,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.497929573059082, -5.017373561859131, -5.436007499694824, -6.494667053222656, -5.448011875152588, -0.02111165039241314]",0.9791096448898315
1,"['  @Test\n  public void testPutBadJobStatus()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, MockJobProxy.JOB_INSTANCE_2_ID))\n        .queryParam(""status"", ""BADSTATUS"").request().put(Entity.form(new Form()));\n    assertEquals(400, resp.getStatus());\n\n    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });\n    assertTrue(errorMessage.get(""message"").contains(""BADSTATUS""));\n    resp.close();\n  }\n']",Put;jobs;request;resp;Entity;Param;ADSTATUS;put;INSTANCE;Mock,3.725290298461914e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.481166362762451, -5.024265289306641, -5.414461612701416, -6.456353664398193, -5.439370155334473, -0.021331176161766052]",0.9788945913314819
1,"['  @Test\n  public void testPutMissingStatus()\n      throws IOException {\n    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, MockJobProxy.JOB_INSTANCE_2_ID)).request()\n        .put(Entity.form(new Form()));\n    assertEquals(400, resp.getStatus());\n\n    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });\n    assertTrue(errorMessage.get(""message"").contains(""status""));\n    resp.close();\n  }\n']",Put;Status;Type;Missing;format;apper;message;IOException;Map;read,4.190951585769653e-09;1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.604264050722122e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.496155261993408, -4.999410152435303, -5.451038360595703, -6.5155744552612305, -5.467531681060791, -0.021058309823274612]",0.9791618585586548
1,"['  @Test\n  public void testGetTasks() throws IOException {\n    String requestUrl = String.format(""v1/jobs/%s/%s/tasks"", ""testJobName"", ""testJobId"");\n    Response response = target(requestUrl).request().get();\n    assertEquals(200, response.getStatus());\n    Task[] tasks = objectMapper.readValue(response.readEntity(String.class), Task[].class);\n    assertEquals(2, tasks.length);\n\n    assertEquals(MockTaskProxy.TASK_1_PREFERRED_HOST, tasks[0].getPreferredHost());\n    assertEquals(MockTaskProxy.TASK_1_CONTAINER_ID, tasks[0].getContainerId());\n    assertEquals(MockTaskProxy.TASK_1_NAME, tasks[0].getTaskName());\n    assertEquals(MockTaskProxy.PARTITIONS, tasks[0].getPartitions());\n\n    assertEquals(MockTaskProxy.TASK_2_PREFERRED_HOST, tasks[1].getPreferredHost());\n    assertEquals(MockTaskProxy.TASK_2_CONTAINER_ID, tasks[1].getContainerId());\n    assertEquals(MockTaskProxy.TASK_2_NAME, tasks[1].getTaskName());\n    assertEquals(MockTaskProxy.PARTITIONS, tasks[1].getPartitions());\n  }\n']",Preferred;object;format;Equals;Job;Host;Entity;OST;Name;Container,9.313225746154785e-10;6.984919309616089e-10;6.257323548197746e-10;5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.434596061706543, -5.114593505859375, -5.453891277313232, -6.494770526885986, -5.390259265899658, -0.020940877497196198]",0.9792768359184265
1,"['  @Test\n  public void testGetTasksWithInvalidJobName() throws IOException {\n    String requestUrl = String.format(""v1/jobs/%s/%s/tasks"", ""BadJobName"", MockJobProxy.JOB_INSTANCE_4_ID);\n    Response resp = target(requestUrl).request().get();\n    assertEquals(400, resp.getStatus());\n    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });\n    assertTrue(errorMessage.get(""message""), errorMessage.get(""message"").contains(""Invalid arguments for getTasks. ""));\n    resp.close();\n  }\n']",IOException;object;Entity;Invalid;error;request;apper;close;Message;error,1.2223608791828156e-09;6.693881005048752e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.478996753692627, -5.053914546966553, -5.473821640014648, -6.523404121398926, -5.447675704956055, -0.02074158377945423]",0.9794720411300659
1,"['  @Test\n  public void testGetTasksWithInvalidJobId() throws IOException {\n    String requestUrl = String.format(""v1/jobs/%s/%s/tasks"", MockJobProxy.JOB_INSTANCE_1_NAME, ""BadJobId"");\n    Response resp = target(requestUrl).request().get();\n    assertEquals(400, resp.getStatus());\n    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });\n    assertTrue(errorMessage.get(""message""), errorMessage.get(""message"").contains(""Invalid arguments for getTasks. ""));\n    resp.close();\n  }\n']",INSTANCE;Reference;Invalid;Proxy;apper;Job;OB;Type;Response;asks,1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.475930690765381, -5.0566630363464355, -5.478868007659912, -6.525672912597656, -5.440481185913086, -0.02074356935918331]",0.9794700741767883
1,"['  @Test\n  public void shouldDeleteLocalTaskStoreWhenItHasNoOffsetFile() throws Exception {\n    localStoreMonitor.monitor();\n    assertTrue(""Task store directory should not exist."", !taskStoreDir.exists());\n    assertEquals(taskStoreSize, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());\n    assertEquals(1, localStoreMonitorMetrics.noOfDeletedTaskPartitionStores.getCount());\n  }\n']",exists;exist;It;Store;Partition;Monitor;Local;Delete;No;Dir,2.6775524020195007e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.294591680169106e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.521479606628418, -4.971746444702148, -5.416501998901367, -6.521084785461426, -5.488073348999023, -0.021204788237810135]",0.9790184497833252
1,"['  @Test\n  public void shouldDeleteLocalStoreWhenLastModifiedTimeOfOffsetFileIsGreaterThanOffsetTTL() throws Exception {\n    File offsetFile = createOffsetFile(taskStoreDir);\n    offsetFile.setLastModified(0);\n    localStoreMonitor.monitor();\n    assertTrue(""Offset file should not exist."", !offsetFile.exists());\n    assertEquals(0, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());\n  }\n']",Modified;exists;disk;should;Offset;Dir;Store;offset;File;Monitor,1.1059455573558807e-09;9.74978320300579e-10;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.550170421600342, -4.951809883117676, -5.395273685455322, -6.508224010467529, -5.516600608825684, -0.021229764446616173]",0.9789940118789673
1,"['  @Test\n  public void shouldDeleteInActiveLocalStoresOfTheJob() throws Exception {\n    File inActiveStoreDir = new File(jobDir, ""inActiveStore"");\n    FileUtils.forceMkdir(inActiveStoreDir);\n    File inActiveTaskDir = new File(inActiveStoreDir, ""test-task"");\n    FileUtils.forceMkdir(inActiveTaskDir);\n    long inActiveTaskDirSize = inActiveTaskDir.getTotalSpace();\n    localStoreMonitor.monitor();\n    assertTrue(""Inactive task store directory should not exist."", !inActiveTaskDir.exists());\n    assertEquals(taskStoreSize + inActiveTaskDirSize, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());\n    assertEquals(2, localStoreMonitorMetrics.noOfDeletedTaskPartitionStores.getCount());\n    FileUtils.deleteDirectory(inActiveStoreDir);\n  }\n']",Dir;task;The;Local;new;Active;Deleted;Metrics;Stores;In,1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;7.275957614183426e-10;7.203198038041592e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.506192207336426, -4.953911781311035, -5.41664457321167, -6.503768444061279, -5.504784107208252, -0.021350545808672905]",0.9788756370544434
1,"['  @Test\n  public void shouldDoNothingWhenLastModifiedTimeOfOffsetFileIsLessThanOffsetTTL() throws Exception {\n    File offsetFile = createOffsetFile(taskStoreDir);\n    localStoreMonitor.monitor();\n    assertTrue(""Offset file should exist."", offsetFile.exists());\n    assertEquals(0, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());\n  }\n']",Offset;Offset;Time;Store;Offset;File;True;Last;Store;Monitor,8.440110832452774e-10;8.149072527885437e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.552729606628418, -4.946856498718262, -5.381641864776611, -6.505587100982666, -5.507254123687744, -0.021361632272601128]",0.9788649082183838
1,"['  @Test\n  public void shouldDoNothingWhenTheJobIsRunning() throws Exception {\n    Mockito.when(jobsClientMock.getJobStatus(Mockito.any())).thenReturn(JobStatus.STARTED);\n    File offsetFile = createOffsetFile(taskStoreDir);\n    localStoreMonitor.monitor();\n    assertTrue(""Offset file should exist."", offsetFile.exists());\n    assertEquals(0, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());\n  }\n']",ockito;The;reed;Monitor;STARTED;task;any;Store;Equals;monitor,8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.528965473175049, -4.990296840667725, -5.421635150909424, -6.511456489562988, -5.482818126678467, -0.021057724952697754]",0.9791624546051025
1,"['  @Test\n  public void shouldDeleteTaskStoreWhenTaskPreferredStoreIsNotLocalHost() throws Exception {\n    Task task = new Task(""notLocalHost"", ""test-task"", ""0"", new ArrayList<>(), ImmutableList.of(""test-store""));\n    Mockito.when(jobsClientMock.getTasks(Mockito.any())).thenReturn(ImmutableList.of(task));\n    localStoreMonitor.monitor();\n    assertTrue(""Task store directory should not exist."", !taskStoreDir.exists());\n    assertEquals(taskStoreSize, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());\n    assertEquals(1, localStoreMonitorMetrics.noOfDeletedTaskPartitionStores.getCount());\n  }\n']",should;Delete;store;Deleted;Metrics;reed;Host;Immutable;Size;When,5.122274160385132e-09;1.1932570487260818e-09;1.1641532182693481e-09;9.89530235528946e-10;8.003553375601768e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.50433349609375, -5.006196022033691, -5.452549934387207, -6.5171799659729, -5.463509559631348, -0.020985936746001244]",0.9792327284812927
1,"['  @Test\n  public void shouldContinueLocalStoreCleanUpAfterFailureToCleanUpStoreOfAJob() throws Exception {\n    File testFailingJobDir = new File(localStoreDir, ""test-jobName-jobId-1"");\n\n    File testFailingTaskStoreDir = new File(new File(testFailingJobDir, ""test-store""), ""test-task"");\n\n    FileUtils.forceMkdir(testFailingTaskStoreDir);\n\n    // For job: test-jobName-jobId-1, throw up in getTasks call and\n    // expect the cleanup to succeed for other job: test-jobName-jobId.\n    Mockito.doThrow(new RuntimeException(""Dummy exception message.""))\n        .when(jobsClientMock)\n        .getTasks(new JobInstance(""test-jobName"", ""jobId-1""));\n\n    Task task = new Task(""notLocalHost"", ""test-task"", ""0"", new ArrayList<>(), ImmutableList.of(""test-store""));\n\n    Mockito.when(jobsClientMock.getTasks(new JobInstance(""test-jobName"", ""jobId""))).thenReturn(ImmutableList.of(task));\n\n    Map<String, String> configMap = new HashMap<>(config);\n    configMap.put(LocalStoreMonitorConfig.CONFIG_IGNORE_FAILURES, ""true"");\n\n    LocalStoreMonitor localStoreMonitor =\n        new LocalStoreMonitor(new LocalStoreMonitorConfig(new MapConfig(configMap)), localStoreMonitorMetrics,\n            jobsClientMock);\n\n    localStoreMonitor.monitor();\n\n    // Non failing job directory should be cleaned up.\n    assertTrue(""Task store directory should not exist."", !taskStoreDir.exists());\n    FileUtils.deleteDirectory(testFailingJobDir);\n  }\n']",directory;True;Clean;Failure;be;File;force;new;List;Store,1.0186340659856796e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.448933124542236, -5.076616287231445, -5.435245513916016, -6.459151268005371, -5.406112194061279, -0.0211799293756485]",0.9790427684783936
1,"['  @Test\n  public void testMonitorsShouldBeInstantiatedProperly() {\n    // Test that a monitor should be instantiated properly by invoking\n    // the appropriate factory method.\n    Map<String, String> configMap = ImmutableMap.of(CONFIG_MONITOR_FACTORY_CLASS,\n                                                    DummyMonitorFactory.class.getCanonicalName());\n    Monitor monitor = null;\n    try {\n      monitor = MonitorLoader.instantiateMonitor(""testMonitor"", new MonitorConfig(new MapConfig(configMap)),\n          METRICS_REGISTRY);\n    } catch (InstantiationException e) {\n      fail();\n    }\n    assertNotNull(monitor);\n    // Object should implement the monitor().\n    try {\n      monitor.monitor();\n    } catch (Exception e) {\n      fail();\n    }\n  }\n']",Instantiated;Immutable;invoking;REGISTRY;ACTORY;fail;Exception;monitor;ummy;Instantiation,1.3969838619232178e-09;9.89530235528946e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.470760822296143, -5.0680975914001465, -5.458255290985107, -6.459168434143066, -5.440536975860596, -0.02088320627808571]",0.9793333411216736
1,"['  @Test\n  public void testShouldGroupRelevantMonitorConfigTogether() {\n    // Test that Monitor Loader groups relevant config together.\n    Map<String, String> firstMonitorConfig = ImmutableMap.of(""monitor.monitor1.factory.class"",\n                                                             ""org.apache.samza.monitor.DummyMonitor"",\n                                                             ""monitor.monitor1.scheduling.interval.ms"",\n                                                             ""100"");\n    Map<String, String> secondMonitorConfig = ImmutableMap.of(""monitor.monitor2.factory.class"",\n                                                              ""org.apache.samza.monitor.DummyMonitor"",\n                                                              ""monitor.monitor2.scheduling.interval.ms"",\n                                                              ""200"");\n    MapConfig mapConfig = new MapConfig(ImmutableList.of(firstMonitorConfig, secondMonitorConfig));\n    MonitorConfig expectedFirstConfig = new MonitorConfig(new MapConfig(firstMonitorConfig).subset(""monitor.monitor1.""));\n    MonitorConfig expectedSecondConfig = new MonitorConfig(new MapConfig(secondMonitorConfig).subset(""monitor.monitor2.""));\n    Map<String, MonitorConfig> expected = ImmutableMap.of(""monitor1"", expectedFirstConfig, ""monitor2"", expectedSecondConfig);\n    assertEquals(expected, MonitorConfig.getMonitorConfigs(mapConfig));\n  }\n']",Relevant;ummy;ms;Should;interval;interval;ummy;Monitor;org;Monitor,2.0372681319713593e-09;1.7462298274040222e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.449453830718994, -5.044103622436523, -5.419987201690674, -6.435008525848389, -5.468023777008057, -0.02122054435312748]",0.9790028929710388
1,"['  @Test\n  public void testMonitorExceptionIsolation() {\n    // Test that an exception from a monitor doesn\'t bubble up out of the scheduler.\n    Map<String, String> configMap =\n        ImmutableMap.of(String.format(""monitor.name.%s"", CONFIG_MONITOR_FACTORY_CLASS),\n                        ExceptionThrowingMonitorFactory.class.getCanonicalName());\n    SamzaRestConfig config = new SamzaRestConfig(new MapConfig(configMap));\n    SamzaMonitorService monitorService = new SamzaMonitorService(config,\n                                                                 METRICS_REGISTRY);\n\n    // This will throw if the exception isn\'t caught within the provider.\n    monitorService.start();\n    monitorService.stop();\n  }\n']",doesn't;Exception;Monitor;of;exception;throw;bubble;that;Rest;Exception,2.561137080192566e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.478701591491699, -5.0527262687683105, -5.467915058135986, -6.500205993652344, -5.46499490737915, -0.02073551155626774]",0.9794778823852539
1,"['  @Test\n  public void testShouldNotFailWhenTheMonitorFactoryClassIsNotDefined()\n      throws Exception {\n    // Test that when MonitorFactoryClass is not defined in the config, monitor service\n    // should not fail.\n    Map<String, String> configMap = ImmutableMap.of(""monitor.monitor1.config.key1"", ""configValue1"",\n                                                    ""monitor.monitor1.config.key2"", ""configValue2"",\n                                                    String.format(""monitor.MOCK_MONITOR.%s"", CONFIG_MONITOR_FACTORY_CLASS),\n                                                    MockMonitorFactory.class.getCanonicalName());\n\n    SamzaRestConfig config = new SamzaRestConfig(new MapConfig(configMap));\n\n    class SamzaMonitorServiceTest extends SamzaMonitorService {\n      MetricsRegistry metricsRegistry;\n      public SamzaMonitorServiceTest(SamzaRestConfig config, MetricsRegistry metricsRegistry) {\n        super(config, metricsRegistry);\n        this.metricsRegistry = metricsRegistry;\n      }\n\n      @Override\n      public void createSchedulerAndScheduleMonitor(String monitorName, MonitorConfig monitorConfig, long schedulingIntervalInMs) {\n        try {\n          // immediately run monitor, without scheduling\n          instantiateMonitor(monitorName, monitorConfig, metricsRegistry).monitor();\n        } catch (Exception e) {\n          fail();\n        }\n      }\n']",Should;extends;Not;Service;Exception;Monitor;Samza;Samza;config;immediately,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1100277081131935e-10,5,5,"[-5.491887092590332, -4.987613677978516, -5.4074811935424805, -6.4417948722839355, -5.499174118041992, -0.021334558725357056]",0.9788914322853088
1,"['  @Test(expected = SamzaException.class)\n  public void testShouldFailWhenTheMonitorFactoryClassIsInvalid() {\n    // Test that when MonitorFactoryClass is defined in the config and is invalid,\n    // monitor service should fail. Should throw back SamzaException.\n    Map<String, String> configMap = ImmutableMap.of(String.format(""monitor.name.%s"", CONFIG_MONITOR_FACTORY_CLASS),\n                                                    ""RandomClassName"");\n    SamzaRestConfig config = new SamzaRestConfig(new MapConfig(configMap));\n    SamzaMonitorService monitorService = new SamzaMonitorService(config,\n                                                                 METRICS_REGISTRY);\n    monitorService.start();\n  }\n']",Samza;Exception;monitor;MONITOR;Immutable;monitor;Rest;Service;ICS;Should,2.0954757928848267e-09;9.313225746154785e-10;6.984919309616089e-10;5.675246939063072e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.529633522033691, -4.9617228507995605, -5.404935359954834, -6.4489922523498535, -5.491377353668213, -0.021394187584519386]",0.978833019733429
1,['  @Test\n  public void testScheduledExecutorSchedulingProvider() {\n    // Test that the monitor is scheduled by the ScheduledExecutorSchedulingProvider\n    ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);\n\n    // notifyingMonitor.monitor() should be called repeatedly.\n    final CountDownLatch wasCalledLatch = new CountDownLatch(3);\n\n    final Monitor notifyingMonitor = new Monitor() {\n      @Override\n      public void monitor() {\n        wasCalledLatch.countDown();\n      }\n'],new;cheduled;cheduling;monitor;ifying;scheduled;Scheduled;Executor;new;alled,1.3387762010097504e-09;1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.5264458656311035, -4.962501049041748, -5.416714668273926, -6.482669353485107, -5.502625942230225, -0.021247152239084244]",0.9789769649505615
1,"['  @Test\n  public void testKafkaSystemConsumerMetrics() {\n    String systemName = ""system"";\n    TopicPartition tp1 = new TopicPartition(""topic1"", 1);\n    TopicPartition tp2 = new TopicPartition(""topic2"", 2);\n    String clientName = ""clientName"";\n\n    // record expected values for further comparison\n    Map<String, String> expectedValues = new HashMap<>();\n\n    ReadableMetricsRegistry registry = new MetricsRegistryMap();\n    KafkaSystemConsumerMetrics metrics = new KafkaSystemConsumerMetrics(systemName, registry);\n\n    // initialize the metrics for the partitions\n    metrics.registerTopicPartition(tp1);\n    metrics.registerTopicPartition(tp2);\n\n    // initialize the metrics for the host:port\n    metrics.registerClientProxy(clientName);\n\n    metrics.setOffsets(tp1, 1001);\n    metrics.setOffsets(tp2, 1002);\n    expectedValues.put(metrics.offsets().get(tp1).getName(), ""1001"");\n    expectedValues.put(metrics.offsets().get(tp2).getName(), ""1002"");\n\n    metrics.incBytesReads(tp1, 10);\n    metrics.incBytesReads(tp1, 5); // total 15\n    expectedValues.put(metrics.bytesRead().get(tp1).getName(), ""15"");\n\n    metrics.incReads(tp1);\n    metrics.incReads(tp1); // total 2\n    expectedValues.put(metrics.reads().get(tp1).getName(), ""2"");\n\n    metrics.setHighWatermarkValue(tp2, 1000);\n    metrics.setHighWatermarkValue(tp2, 1001); // final value 1001\n    expectedValues.put(metrics.highWatermark().get(tp2).getName(), ""1001"");\n\n    metrics.setLagValue(tp1, 200);\n    metrics.setLagValue(tp1, 201); // final value 201\n    expectedValues.put(metrics.lag().get(tp1).getName(), ""201"");\n\n    metrics.incClientBytesReads(clientName, 100); // broker-bytes-read\n    metrics.incClientBytesReads(clientName, 110); // total 210\n    expectedValues.put(metrics.clientBytesRead().get(clientName).getName(), ""210"");\n\n    metrics.incClientReads(clientName); // messages-read\n    metrics.incClientReads(clientName); // total 2\n    expectedValues.put(metrics.clientReads().get(clientName).getName(), ""2"");\n\n    metrics.setNumTopicPartitions(clientName, 2); // ""topic-partitions""\n    metrics.setNumTopicPartitions(clientName, 3); // final value 3\n    expectedValues.put(metrics.topicPartitions().get(clientName).getName(), ""3"");\n\n\n    String groupName = metrics.group();\n    Assert.assertEquals(groupName, KafkaSystemConsumerMetrics.class.getName());\n    Assert.assertEquals(metrics.systemName(), systemName);\n\n    Map<String, Metric> metricMap = registry.getGroup(groupName);\n    validate(metricMap, expectedValues);\n  }\n']",Consumer;put;Topic;Watermark;Consumer;topic;put;partitions;put;expected,1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;7.8580342233181e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.481200695037842, -4.991734504699707, -5.388824939727783, -6.444151878356934, -5.48217248916626, -0.021505150943994522]",0.9787244200706482
1,"['  @Test\n  public void testGetSystemStreamMetaDataWithValidTopic() {\n    System.out.println(""STARTING"");\n    Map<String, SystemStreamMetadata> metadataMap =\n        kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(VALID_TOPIC));\n\n    // verify metadata size\n    assertEquals(""metadata should return for 1 topic"", metadataMap.size(), 1);\n    System.out.println(""STARTING1"");\n    // verify the metadata streamName\n    assertEquals(""the stream name should be "" + VALID_TOPIC, metadataMap.get(VALID_TOPIC).getStreamName(), VALID_TOPIC);\n    System.out.println(""STARTING2"");\n    // verify the offset for each partition\n    Map<Partition, SystemStreamMetadata.SystemStreamPartitionMetadata> systemStreamPartitionMetadata =\n        metadataMap.get(VALID_TOPIC).getSystemStreamPartitionMetadata();\n    assertEquals(""there are 2 partitions"", systemStreamPartitionMetadata.size(), 2);\n    System.out.println(""STARTING3"");\n    SystemStreamMetadata.SystemStreamPartitionMetadata partition0Metadata =\n        systemStreamPartitionMetadata.get(new Partition(0));\n    assertEquals(""oldest offset for partition 0"", partition0Metadata.getOldestOffset(),\n        KAFKA_BEGINNING_OFFSET_FOR_PARTITION0.toString());\n    assertEquals(""upcoming offset for partition 0"", partition0Metadata.getUpcomingOffset(),\n        KAFKA_END_OFFSET_FOR_PARTITION0.toString());\n    assertEquals(""newest offset for partition 0"", partition0Metadata.getNewestOffset(),\n        Long.toString(KAFKA_END_OFFSET_FOR_PARTITION0 - 1));\n    System.out.println(""STARTING4"");\n    SystemStreamMetadata.SystemStreamPartitionMetadata partition1Metadata =\n        systemStreamPartitionMetadata.get(new Partition(1));\n    assertEquals(""oldest offset for partition 1"", partition1Metadata.getOldestOffset(),\n        KAFKA_BEGINNING_OFFSET_FOR_PARTITION1.toString());\n    assertEquals(""upcoming offset for partition 1"", partition1Metadata.getUpcomingOffset(),\n        KAFKA_END_OFFSET_FOR_PARTITION1.toString());\n    assertEquals(""newest offset for partition 1"", partition1Metadata.getNewestOffset(),\n        Long.toString(KAFKA_END_OFFSET_FOR_PARTITION1 - 1));\n  }\n']",afka;TOPIC;EGINNING;Valid;System;Meta;TOPIC;Name;STARTING;VALID,1.9208528101444244e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.456606388092041, -4.9936957359313965, -5.354298114776611, -6.43134880065918, -5.444817543029785, -0.021944327279925346]",0.9782946705818176
1,"['  @Test\n  public void testGetSystemStreamMetaDataWithInvalidTopic() {\n    Map<String, SystemStreamMetadata> metadataMap =\n        kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(INVALID_TOPIC));\n    assertEquals(""empty metadata for invalid topic"", metadataMap.size(), 0);\n  }\n']",afka;topic;INVALID;Metadata;empty;Stream;Map;System;invalid;size,3.725290298461914e-09;2.9103830456733704e-09;1.2223608791828156e-09;9.89530235528946e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.5638861656188965, -4.956779956817627, -5.410377025604248, -6.508784294128418, -5.472892761230469, -0.021252987906336784]",0.9789712429046631
1,"['  @Test\n  public void testGetSystemStreamMetaDataWithNoTopic() {\n    Map<String, SystemStreamMetadata> metadataMap = kafkaSystemAdmin.getSystemStreamMetadata(Collections.emptySet());\n    assertEquals(""empty metadata for no topic"", metadataMap.size(), 0);\n  }\n']",System;Get;WithNo;Topic;size;Set;metadata;Metadata;empty;metadata,1.1932570487260818e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.564306735992432, -4.910773277282715, -5.397340297698975, -6.515832424163818, -5.490946292877197, -0.021562201902270317]",0.9786686301231384
1,"['  @Test\n  public void testGetSystemStreamMetaDataForTopicWithNoMessage() {\n    // The topic with no messages will have beginningOffset = 0 and endOffset = 0\n    when(mockKafkaConsumer.beginningOffsets(ImmutableList.of(testTopicPartition0, testTopicPartition1))).thenReturn(\n        ImmutableMap.of(testTopicPartition0, 0L, testTopicPartition1, 0L));\n    when(mockKafkaConsumer.endOffsets(ImmutableList.of(testTopicPartition0, testTopicPartition1))).thenReturn(\n        ImmutableMap.of(testTopicPartition0, 0L, testTopicPartition1, 0L));\n\n    Map<String, SystemStreamMetadata> metadataMap =\n        kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(VALID_TOPIC));\n    assertEquals(""metadata should return for 1 topic"", metadataMap.size(), 1);\n\n    // verify the metadata streamName\n    assertEquals(""the stream name should be "" + VALID_TOPIC, metadataMap.get(VALID_TOPIC).getStreamName(), VALID_TOPIC);\n\n    // verify the offset for each partition\n    Map<Partition, SystemStreamMetadata.SystemStreamPartitionMetadata> systemStreamPartitionMetadata =\n        metadataMap.get(VALID_TOPIC).getSystemStreamPartitionMetadata();\n    assertEquals(""there are 2 partitions"", systemStreamPartitionMetadata.size(), 2);\n\n    SystemStreamMetadata.SystemStreamPartitionMetadata partition0Metadata =\n        systemStreamPartitionMetadata.get(new Partition(0));\n    assertEquals(""oldest offset for partition 0"", partition0Metadata.getOldestOffset(), ""0"");\n    assertEquals(""upcoming offset for partition 0"", partition0Metadata.getUpcomingOffset(), ""0"");\n    assertEquals(""newest offset is not set due to abnormal upcoming offset"", partition0Metadata.getNewestOffset(),\n        null);\n\n    SystemStreamMetadata.SystemStreamPartitionMetadata partition1Metadata =\n        systemStreamPartitionMetadata.get(new Partition(1));\n    assertEquals(""oldest offset for partition 1"", partition1Metadata.getOldestOffset(), ""0"");\n    assertEquals(""upcoming offset for partition 1"", partition1Metadata.getUpcomingOffset(), ""0"");\n    assertEquals(""newest offset is not set due to abnormal upcoming offset"", partition1Metadata.getNewestOffset(),\n        null);\n  }\n']",be;name;TOPIC;end;Consumer;topic;should;the;size;Stream,1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10,5,5,"[-5.432551860809326, -5.107585430145264, -5.423980236053467, -6.468608379364014, -5.386923789978027, -0.021182380616664886]",0.9790403842926025
1,"['  @Test\n  public void testGetSSPMetadata() {\n    SystemStreamPartition ssp = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));\n    SystemStreamPartition otherSSP = new SystemStreamPartition(TEST_SYSTEM, ""otherTopic"", new Partition(1));\n    TopicPartition topicPartition = new TopicPartition(VALID_TOPIC, 0);\n    TopicPartition otherTopicPartition = new TopicPartition(""otherTopic"", 1);\n    when(mockKafkaConsumer.beginningOffsets(ImmutableList.of(topicPartition, otherTopicPartition))).thenReturn(\n        ImmutableMap.of(topicPartition, 1L, otherTopicPartition, 2L));\n    when(mockKafkaConsumer.endOffsets(ImmutableList.of(topicPartition, otherTopicPartition))).thenReturn(\n        ImmutableMap.of(topicPartition, 11L, otherTopicPartition, 12L));\n    Map<SystemStreamPartition, SystemStreamMetadata.SystemStreamPartitionMetadata> expected =\n        ImmutableMap.of(ssp, new SystemStreamMetadata.SystemStreamPartitionMetadata(""1"", ""10"", ""11""), otherSSP,\n            new SystemStreamMetadata.SystemStreamPartitionMetadata(""2"", ""11"", ""12""));\n    assertEquals(kafkaSystemAdmin.getSSPMetadata(ImmutableSet.of(ssp, otherSSP)), expected);\n  }\n']",Partition;SPMetadata;end;EST;expected;Metadata;Return;Stream;List;sp,9.604264050722122e-10;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.48671293258667, -5.059473991394043, -5.41350793838501, -6.4563422203063965, -5.423628330230713, -0.021150050684809685]",0.9790720343589783
1,"['  @Test\n  public void testGetSSPMetadataEmptyPartition() {\n    SystemStreamPartition ssp = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));\n    SystemStreamPartition otherSSP = new SystemStreamPartition(TEST_SYSTEM, ""otherTopic"", new Partition(1));\n    TopicPartition topicPartition = new TopicPartition(VALID_TOPIC, 0);\n    TopicPartition otherTopicPartition = new TopicPartition(""otherTopic"", 1);\n    when(mockKafkaConsumer.beginningOffsets(ImmutableList.of(topicPartition, otherTopicPartition))).thenReturn(\n        ImmutableMap.of(topicPartition, 1L));\n    when(mockKafkaConsumer.endOffsets(ImmutableList.of(topicPartition, otherTopicPartition))).thenReturn(\n        ImmutableMap.of(topicPartition, 11L));\n\n    Map<SystemStreamPartition, SystemStreamMetadata.SystemStreamPartitionMetadata> expected =\n        ImmutableMap.of(ssp, new SystemStreamMetadata.SystemStreamPartitionMetadata(""1"", ""10"", ""11""), otherSSP,\n            new SystemStreamMetadata.SystemStreamPartitionMetadata(null, null, null));\n    assertEquals(expected, kafkaSystemAdmin.getSSPMetadata(ImmutableSet.of(ssp, otherSSP)));\n  }\n']",Get;expected;SYSTEM;afka;when;Topic;when;Admin;Set;Map,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.4813313484191895, -5.079472541809082, -5.408679008483887, -6.446903228759766, -5.406543254852295, -0.02115938812494278]",0.9790629148483276
1,"['  @Test\n  public void testGetSSPMetadataEmptyUpcomingOffset() {\n    SystemStreamPartition ssp = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));\n    TopicPartition topicPartition = new TopicPartition(VALID_TOPIC, 0);\n    when(mockKafkaConsumer.beginningOffsets(ImmutableList.of(topicPartition))).thenReturn(\n        ImmutableMap.of(topicPartition, 0L));\n    when(mockKafkaConsumer.endOffsets(ImmutableList.of(topicPartition))).thenReturn(ImmutableMap.of());\n    Map<SystemStreamPartition, SystemStreamMetadata.SystemStreamPartitionMetadata> expected =\n        ImmutableMap.of(ssp, new SystemStreamMetadata.SystemStreamPartitionMetadata(""0"", null, null));\n    assertEquals(kafkaSystemAdmin.getSSPMetadata(ImmutableSet.of(ssp)), expected);\n  }\n']",EST;afka;SPMetadata;Get;Equals;Immutable;SPMetadata;ss;Metadata;Map,1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;7.8580342233181e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10,5,5,"[-5.518489837646484, -5.041661739349365, -5.440674781799316, -6.47913932800293, -5.449997425079346, -0.020858922973275185]",0.979357123374939
1,"['  @Test\n  public void testGetSSPMetadataZeroUpcomingOffset() {\n    SystemStreamPartition ssp = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));\n    TopicPartition topicPartition = new TopicPartition(VALID_TOPIC, 0);\n    when(mockKafkaConsumer.beginningOffsets(ImmutableList.of(topicPartition))).thenReturn(\n        ImmutableMap.of(topicPartition, -1L));\n    when(mockKafkaConsumer.endOffsets(ImmutableList.of(topicPartition))).thenReturn(\n        ImmutableMap.of(topicPartition, 0L));\n    Map<SystemStreamPartition, SystemStreamMetadata.SystemStreamPartitionMetadata> expected =\n        ImmutableMap.of(ssp, new SystemStreamMetadata.SystemStreamPartitionMetadata(""0"", null, ""0""));\n    assertEquals(kafkaSystemAdmin.getSSPMetadata(ImmutableSet.of(ssp)), expected);\n  }\n']",Upcoming;Get;end;SPMetadata;new;EST;Offsets;List;ock;Map,1.280568540096283e-09;9.89530235528946e-10;9.89530235528946e-10;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.693881005048752e-10;6.693881005048752e-10;6.402842700481415e-10,5,5,"[-5.516477108001709, -5.051308631896973, -5.446082592010498, -6.476639747619629, -5.442166328430176, -0.02081841044127941]",0.9793968200683594
1,"['  @Test\n  public void testGetSystemStreamMetaDataWithRetry() {\n    final List<PartitionInfo> partitionInfosForTopic = ImmutableList.of(mockPartitionInfo0, mockPartitionInfo1);\n    when(mockKafkaConsumer.partitionsFor(VALID_TOPIC)).thenThrow(new RuntimeException())\n        .thenReturn(partitionInfosForTopic);\n\n    Map<String, SystemStreamMetadata> metadataMap =\n        kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(VALID_TOPIC));\n    assertEquals(""metadata should return for 1 topic"", metadataMap.size(), 1);\n\n    // retried twice because the first fails and the second succeeds\n    Mockito.verify(mockKafkaConsumer, Mockito.times(2)).partitionsFor(VALID_TOPIC);\n\n    final List<TopicPartition> topicPartitions =\n        Arrays.asList(new TopicPartition(mockPartitionInfo0.topic(), mockPartitionInfo0.partition()),\n            new TopicPartition(mockPartitionInfo1.topic(), mockPartitionInfo1.partition()));\n    // the following methods thereafter are only called once\n    Mockito.verify(mockKafkaConsumer, Mockito.times(1)).beginningOffsets(topicPartitions);\n    Mockito.verify(mockKafkaConsumer, Mockito.times(1)).endOffsets(topicPartitions);\n  }\n']",Data;should;Immutable;System;return;ock;succeeds;afka;afka;Partition,1.0477378964424133e-09;9.89530235528946e-10;9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10,5,5,"[-5.530210494995117, -4.952486991882324, -5.378203868865967, -6.454385280609131, -5.446725368499756, -0.02176634781062603]",0.9784689545631409
1,['  @Test(expected = SamzaException.class)\n  public void testGetSystemStreamMetadataShouldTerminateAfterFiniteRetriesOnException() {\n    when(mockKafkaConsumer.partitionsFor(VALID_TOPIC)).thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException());\n\n    kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(VALID_TOPIC));\n  }\n'],Samza;Consumer;TOPIC;class;Stream;Terminate;when;Should;TOPIC;partitions,5.587935447692871e-09;3.026798367500305e-09;2.9103830456733704e-09;2.7939677238464355e-09;1.4551915228366852e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.167706593871117e-10,5,5,"[-5.48858118057251, -5.007782936096191, -5.409186363220215, -6.4968791007995605, -5.402988433837891, -0.02153630182147026]",0.9786940813064575
1,"['  @Test(expected = SamzaException.class)\n  public void testGetSystemStreamPartitionCountsShouldTerminateAfterFiniteRetriesOnException() throws Exception {\n    final Set<String> streamNames = ImmutableSet.of(VALID_TOPIC);\n    final long cacheTTL = 100L;\n\n    when(mockKafkaConsumer.partitionsFor(VALID_TOPIC)).thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException());\n\n    kafkaSystemAdmin.getSystemStreamPartitionCounts(streamNames, cacheTTL);\n  }\n']",Samza;TOPIC;TOPIC;VALID;Consumer;Should;afka;inite;Terminate;Throw,6.05359673500061e-09;4.6566128730773926e-09;3.725290298461914e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.280568540096283e-09,5,5,"[-5.5238261222839355, -4.892568588256836, -5.366546630859375, -6.462942123413086, -5.4966230392456055, -0.02206537313759327]",0.9781762957572937
1,"['  @Test\n  public void testGetSSPMetadataWithRetry() {\n    SystemStreamPartition oneSSP = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));\n    SystemStreamPartition otherSSP = new SystemStreamPartition(TEST_SYSTEM, ""otherTopic"", new Partition(1));\n    ImmutableSet<SystemStreamPartition> ssps = ImmutableSet.of(oneSSP, otherSSP);\n    List<TopicPartition> topicPartitions = ssps.stream()\n        .map(ssp -> new TopicPartition(ssp.getStream(), ssp.getPartition().getPartitionId()))\n        .collect(Collectors.toList());\n    Map<TopicPartition, Long> testBeginningOffsets =\n        ImmutableMap.of(testTopicPartition0, KAFKA_BEGINNING_OFFSET_FOR_PARTITION0, testTopicPartition1,\n            KAFKA_BEGINNING_OFFSET_FOR_PARTITION1);\n\n    when(mockKafkaConsumer.beginningOffsets(topicPartitions)).thenThrow(new RuntimeException())\n        .thenReturn(testBeginningOffsets);\n    Map<SystemStreamPartition, SystemStreamMetadata.SystemStreamPartitionMetadata> sspMetadata =\n        kafkaSystemAdmin.getSSPMetadata(ssps, new ExponentialSleepStrategy(2,\n            1, 1));\n\n    assertEquals(""metadata should return for 2 topics"", sspMetadata.size(), 2);\n\n    // retried twice because the first fails and the second succeeds\n    Mockito.verify(mockKafkaConsumer, Mockito.times(2)).beginningOffsets(topicPartitions);\n  }\n']",EGINNING;Mockito;topic;Sleep;Retry;and;PARTITION;SP;Long;because,4.773028194904327e-09;2.2118911147117615e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.542425155639648, -4.788756370544434, -5.355527400970459, -6.416955947875977, -5.502037048339844, -0.022934889420866966]",0.9773260951042175
1,"['  @Test(expected = SamzaException.class)\n  public void testGetSSPMetadataShouldTerminateAfterFiniteRetriesOnException() throws Exception {\n    SystemStreamPartition oneSSP = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));\n    SystemStreamPartition otherSSP = new SystemStreamPartition(TEST_SYSTEM, ""otherTopic"", new Partition(1));\n\n    ImmutableSet<SystemStreamPartition> ssps = ImmutableSet.of(oneSSP, otherSSP);\n    List<TopicPartition> topicPartitions = ssps.stream()\n        .map(ssp -> new TopicPartition(ssp.getStream(), ssp.getPartition().getPartitionId()))\n        .collect(Collectors.toList());\n\n    when(mockKafkaConsumer.beginningOffsets(topicPartitions)).thenThrow(new RuntimeException())\n        .thenThrow(new RuntimeException());\n\n    kafkaSystemAdmin.getSSPMetadata(ssps, new ExponentialSleepStrategy(2,\n        1, 1));\n  }\n']",Should;afka;SPMetadata;Partition;Immutable;Exception;SPMetadata;Admin;Terminate;Offsets,8.731149137020111e-10;8.003553375601768e-10;6.693881005048752e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.534524917602539, -4.908481121063232, -5.387394428253174, -6.4653000831604, -5.4984564781188965, -0.02179095894098282]",0.9784447550773621
1,"['  @Test\n  public void testConfigValidations() {\n\n    final KafkaSystemConsumer consumer = createConsumer(FETCH_THRESHOLD_MSGS, FETCH_THRESHOLD_BYTES);\n\n    consumer.start();\n    // should be no failures\n  }\n']",Kafka;Consumer;Config;Consumer;failures;OLD;start;final;THRES;ETCH,3.725290298461914e-09;1.9208528101444244e-09;1.3387762010097504e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.560394287109375, -4.923275470733643, -5.384357452392578, -6.519952774047852, -5.485381126403809, -0.02156185172498226]",0.9786690473556519
1,"['  @Test\n  public void testFetchThresholdShouldDivideEvenlyAmongPartitions() {\n    final KafkaSystemConsumer consumer = createConsumer(FETCH_THRESHOLD_MSGS, FETCH_THRESHOLD_BYTES);\n    final int partitionsNum = 50;\n    for (int i = 0; i < partitionsNum; i++) {\n      consumer.register(new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(i)), ""0"");\n    }\n\n    consumer.start();\n\n    Assert.assertEquals(Long.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum, consumer.perPartitionFetchThreshold);\n    Assert.assertEquals(Long.valueOf(FETCH_THRESHOLD_BYTES) / 2 / partitionsNum,\n        consumer.perPartitionFetchThresholdBytes);\n\n    consumer.stop();\n  }\n']",Threshold;Evenly;Partitions;MSGS;MSGS;Kafka;TEST;etch;partitions;start,9.19681042432785e-09;4.6566128730773926e-09;3.958120942115784e-09;2.561137080192566e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.1641532182693481e-09,5,5,"[-5.531177520751953, -4.968259811401367, -5.394934177398682, -6.475627899169922, -5.493464946746826, -0.02133619412779808]",0.9788898229598999
1,"['  @Test\n  public void testConsumerRegisterOlderOffsetOfTheSamzaSSP() {\n\n    KafkaSystemConsumer consumer = createConsumer(FETCH_THRESHOLD_MSGS, FETCH_THRESHOLD_BYTES);\n\n    SystemStreamPartition ssp0 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(0));\n    SystemStreamPartition ssp1 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(1));\n    SystemStreamPartition ssp2 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(2));\n\n    consumer.register(ssp0, ""0"");\n    consumer.register(ssp0, ""5"");\n    consumer.register(ssp1, ""2"");\n    consumer.register(ssp1, ""3"");\n    consumer.register(ssp2, ""0"");\n\n    assertEquals(""0"", consumer.topicPartitionsToOffset.get(KafkaSystemConsumer.toTopicPartition(ssp0)));\n    assertEquals(""2"", consumer.topicPartitionsToOffset.get(KafkaSystemConsumer.toTopicPartition(ssp1)));\n    assertEquals(""0"", consumer.topicPartitionsToOffset.get(KafkaSystemConsumer.toTopicPartition(ssp2)));\n  }\n']",Kafka;Offset;lder;ETCH;Samza;THRES;Consumer;Consumer;register;OLD,5.122274160385132e-09;4.889443516731262e-09;2.0954757928848267e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.2223608791828156e-09;7.275957614183426e-10;6.984919309616089e-10,5,5,"[-5.522153854370117, -4.9922099113464355, -5.365379810333252, -6.413095474243164, -5.428709506988525, -0.021726571023464203]",0.9785077571868896
1,"['  @Test\n  public void testFetchThresholdBytes() {\n\n    SystemStreamPartition ssp0 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(0));\n    SystemStreamPartition ssp1 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(1));\n    int partitionsNum = 2;\n    int ime0Size = Integer.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum; // fake size\n    int ime1Size = Integer.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum - 1; // fake size\n    int ime11Size = 20;\n    ByteArraySerializer bytesSerde = new ByteArraySerializer();\n    IncomingMessageEnvelope ime0 = new IncomingMessageEnvelope(ssp0, ""0"", bytesSerde.serialize("""", ""key0"".getBytes()),\n        bytesSerde.serialize("""", ""value0"".getBytes()), ime0Size);\n    IncomingMessageEnvelope ime1 = new IncomingMessageEnvelope(ssp1, ""0"", bytesSerde.serialize("""", ""key1"".getBytes()),\n        bytesSerde.serialize("""", ""value1"".getBytes()), ime1Size);\n    IncomingMessageEnvelope ime11 = new IncomingMessageEnvelope(ssp1, ""0"", bytesSerde.serialize("""", ""key11"".getBytes()),\n        bytesSerde.serialize("""", ""value11"".getBytes()), ime11Size);\n    KafkaSystemConsumer consumer = createConsumer(FETCH_THRESHOLD_MSGS, FETCH_THRESHOLD_BYTES);\n\n    consumer.register(ssp0, ""0"");\n    consumer.register(ssp1, ""0"");\n    consumer.start();\n    consumer.messageSink.addMessage(ssp0, ime0);\n    // queue for ssp0 should be full now, because we added message of size FETCH_THRESHOLD_MSGS/partitionsNum\n    Assert.assertFalse(consumer.messageSink.needsMoreMessages(ssp0));\n    consumer.messageSink.addMessage(ssp1, ime1);\n    // queue for ssp1 should be less then full now, because we added message of size (FETCH_THRESHOLD_MSGS/partitionsNum - 1)\n    Assert.assertTrue(consumer.messageSink.needsMoreMessages(ssp1));\n    consumer.messageSink.addMessage(ssp1, ime11);\n    // queue for ssp1 should full now, because we added message of size 20 on top\n    Assert.assertFalse(consumer.messageSink.needsMoreMessages(ssp1));\n\n    Assert.assertEquals(1, consumer.getNumMessagesInQueue(ssp0));\n    Assert.assertEquals(2, consumer.getNumMessagesInQueue(ssp1));\n    Assert.assertEquals(ime0Size, consumer.getMessagesSizeInQueue(ssp0));\n    Assert.assertEquals(ime1Size + ime11Size, consumer.getMessagesSizeInQueue(ssp1));\n\n    consumer.stop();\n  }\n']",etch;TEST;Message;Partition;partitions;Incoming;STREAM;register;consumer;Envelop,1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.42928409576416, -5.065621852874756, -5.415748596191406, -6.456038475036621, -5.428457260131836, -0.021328957751393318]",0.9788969159126282
1,"['  @Test\n  public void testFetchThresholdBytesDiabled() {\n    // Pass 0 as fetchThresholdByBytes, which disables checking for limit by size\n\n    SystemStreamPartition ssp0 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(0));\n    SystemStreamPartition ssp1 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(1));\n    int partitionsNum = 2;\n    int ime0Size = Integer.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum; // fake size, upto the limit\n    int ime1Size = Integer.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum - 100; // fake size, below the limit\n    int ime11Size = 20; // event with the second message still below the size limit\n    ByteArraySerializer bytesSerde = new ByteArraySerializer();\n    IncomingMessageEnvelope ime0 = new IncomingMessageEnvelope(ssp0, ""0"", bytesSerde.serialize("""", ""key0"".getBytes()),\n        bytesSerde.serialize("""", ""value0"".getBytes()), ime0Size);\n    IncomingMessageEnvelope ime1 = new IncomingMessageEnvelope(ssp1, ""0"", bytesSerde.serialize("""", ""key1"".getBytes()),\n        bytesSerde.serialize("""", ""value1"".getBytes()), ime1Size);\n    IncomingMessageEnvelope ime11 = new IncomingMessageEnvelope(ssp1, ""0"", bytesSerde.serialize("""", ""key11"".getBytes()),\n        bytesSerde.serialize("""", ""value11"".getBytes()), ime11Size);\n\n    // limit by number of messages 4/2 = 2 per partition\n    // limit by number of bytes - disabled\n    KafkaSystemConsumer consumer = createConsumer(""4"", ""0""); // should disable\n\n    consumer.register(ssp0, ""0"");\n    consumer.register(ssp1, ""0"");\n    consumer.start();\n    consumer.messageSink.addMessage(ssp0, ime0);\n    // should be full by size, but not full by number of messages (1 of 2)\n    Assert.assertTrue(consumer.messageSink.needsMoreMessages(ssp0));\n    consumer.messageSink.addMessage(ssp1, ime1);\n    // not full neither by size nor by messages\n    Assert.assertTrue(consumer.messageSink.needsMoreMessages(ssp1));\n    consumer.messageSink.addMessage(ssp1, ime11);\n    // not full by size, but should be full by messages\n    Assert.assertFalse(consumer.messageSink.needsMoreMessages(ssp1));\n\n    Assert.assertEquals(1, consumer.getNumMessagesInQueue(ssp0));\n    Assert.assertEquals(2, consumer.getNumMessagesInQueue(ssp1));\n    Assert.assertEquals(ime0Size, consumer.getMessagesSizeInQueue(ssp0));\n    Assert.assertEquals(ime1Size + ime11Size, consumer.getMessagesSizeInQueue(ssp1));\n\n    consumer.stop();\n  }\n']",STREAM;Incoming;TEST;disables;Incoming;EST;by;Bytes;Partition;Serializer,7.712515071034431e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.461562156677246, -5.03181266784668, -5.363118648529053, -6.434352397918701, -5.45500373840332, -0.021571418270468712]",0.9786595702171326
1,"['  @Test\n  public void testStartConsumer() {\n    final Consumer consumer = Mockito.mock(Consumer.class);\n    final KafkaConsumerProxyFactory kafkaConsumerProxyFactory = Mockito.mock(KafkaConsumerProxyFactory.class);\n\n    final KafkaSystemConsumerMetrics kafkaSystemConsumerMetrics = new KafkaSystemConsumerMetrics(TEST_SYSTEM, new NoOpMetricsRegistry());\n    final SystemStreamPartition testSystemStreamPartition1 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(0));\n    final SystemStreamPartition testSystemStreamPartition2 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(1));\n    final String testOffset = ""1"";\n    final KafkaConsumerProxy kafkaConsumerProxy = Mockito.mock(KafkaConsumerProxy.class);\n\n    Mockito.when(kafkaConsumerProxyFactory.create(Mockito.anyObject())).thenReturn(kafkaConsumerProxy);\n    Mockito.doNothing().when(consumer).seek(new TopicPartition(TEST_STREAM, 0), 1);\n    Mockito.doNothing().when(consumer).seek(new TopicPartition(TEST_STREAM, 1), 1);\n\n    KafkaSystemConsumer kafkaSystemConsumer = new KafkaSystemConsumer(consumer, TEST_SYSTEM, new MapConfig(), TEST_CLIENT_ID, kafkaConsumerProxyFactory,\n                                                                      kafkaSystemConsumerMetrics, new SystemClock());\n    kafkaSystemConsumer.register(testSystemStreamPartition1, testOffset);\n    kafkaSystemConsumer.register(testSystemStreamPartition2, testOffset);\n\n    kafkaSystemConsumer.startConsumer();\n\n    Mockito.verify(consumer).seek(new TopicPartition(TEST_STREAM, 0), 1);\n    Mockito.verify(consumer).seek(new TopicPartition(TEST_STREAM, 1), 1);\n    Mockito.verify(kafkaConsumerProxy).start();\n    Mockito.verify(kafkaConsumerProxy).addTopicPartition(testSystemStreamPartition1, Long.valueOf(testOffset));\n    Mockito.verify(kafkaConsumerProxy).addTopicPartition(testSystemStreamPartition2, Long.valueOf(testOffset));\n  }\n']",Partition;Consumer;Mockito;Kafka;consumer;ock;class;Proxy;Factory;Mockito,2.7939677238464355e-09;1.4551915228366852e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.52640438079834, -4.972109794616699, -5.365047931671143, -6.407066822052002, -5.468382358551025, -0.021687377244234085]",0.9785460829734802
1,"['  @Test\n  public void testCreateStreamShouldCoordinatorStreamWithCorrectTopicProperties() throws Exception {\n    String coordinatorTopicName = String.format(""topic-name-%s"", RandomStringUtils.randomAlphabetic(5));\n    StreamSpec coordinatorStreamSpec = KafkaStreamSpec.createCoordinatorStreamSpec(coordinatorTopicName, SYSTEM());\n\n    boolean hasCreatedStream = systemAdmin().createStream(coordinatorStreamSpec);\n\n    assertTrue(hasCreatedStream);\n\n    Map<String, String> coordinatorTopicProperties = getTopicConfigFromKafkaBroker(coordinatorTopicName);\n\n    assertEquals(""compact"", coordinatorTopicProperties.get(TopicConfig.CLEANUP_POLICY_CONFIG));\n    assertEquals(""26214400"", coordinatorTopicProperties.get(TopicConfig.SEGMENT_BYTES_CONFIG));\n    assertEquals(""86400000"", coordinatorTopicProperties.get(TopicConfig.DELETE_RETENTION_MS_CONFIG));\n  }\n']",MS;Kafka;Topic;afka;Topic;Properties;Utils;From;BY;Create,1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.458744898438454e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.4933390617370605, -5.046545028686523, -5.4557013511657715, -6.509069919586182, -5.457581520080566, -0.02078571915626526]",0.9794288277626038
1,"['  @Test\n  public void testGetOffsetsAfter() {\n    SystemStreamPartition ssp1 = new SystemStreamPartition(SYSTEM, TOPIC, new Partition(0));\n    SystemStreamPartition ssp2 = new SystemStreamPartition(SYSTEM, TOPIC, new Partition(1));\n    Map<SystemStreamPartition, String> offsets = new HashMap<>();\n    offsets.put(ssp1, ""1"");\n    offsets.put(ssp2, ""2"");\n\n    offsets = systemAdmin().getOffsetsAfter(offsets);\n\n    Assert.assertEquals(""2"", offsets.get(ssp1));\n    Assert.assertEquals(""3"", offsets.get(ssp2));\n  }\n']",Assert;offsets;get;ss;Admin;Equals;get;Stream;SYSTEM;System,1.0477378964424133e-08;9.313225746154785e-09;6.984919309616089e-09;6.51925802230835e-09;4.190951585769653e-09;3.958120942115784e-09;2.561137080192566e-09;2.5029294192790985e-09;1.7462298274040222e-09;1.1641532182693481e-09,5,5,"[-5.524674892425537, -5.027957916259766, -5.443922519683838, -6.49207878112793, -5.479446887969971, -0.02076295018196106]",0.9794511198997498
1,"['  @Test\n  public void testToKafkaSpecForCheckpointStreamShouldReturnTheCorrectStreamSpecByPreservingTheConfig() {\n    String topicName = ""testStream"";\n    String streamId = ""samza-internal-checkpoint-stream-id"";\n    int partitionCount = 1;\n    Map<String, String> map = new HashMap<>();\n    map.put(""cleanup.policy"", ""compact"");\n    map.put(""replication.factor"", ""3"");\n    map.put(""segment.bytes"", ""536870912"");\n    map.put(""delete.retention.ms"", ""86400000"");\n\n    Config config = new MapConfig(map);\n\n    StreamSpec spec = new StreamSpec(streamId, topicName, SYSTEM, partitionCount, config);\n    KafkaSystemAdmin kafkaSystemAdmin = systemAdmin();\n    KafkaStreamSpec kafkaStreamSpec = kafkaSystemAdmin.toKafkaSpec(spec);\n    System.out.println(kafkaStreamSpec);\n    assertEquals(streamId, kafkaStreamSpec.getId());\n    assertEquals(topicName, kafkaStreamSpec.getPhysicalName());\n    assertEquals(partitionCount, kafkaStreamSpec.getPartitionCount());\n    assertEquals(3, kafkaStreamSpec.getReplicationFactor());\n    assertEquals(""compact"", kafkaStreamSpec.getConfig().get(""cleanup.policy""));\n    assertEquals(""536870912"", kafkaStreamSpec.getConfig().get(""segment.bytes""));\n    assertEquals(""86400000"", kafkaStreamSpec.getConfig().get(""delete.retention.ms""));\n  }\n']",Should;The;topic;bytes;to;Kafka;put;put;println;replication,3.259629011154175e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.076841726899147e-09;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10,5,5,"[-5.511841297149658, -5.030274391174316, -5.428408145904541, -6.456005573272705, -5.465137958526611, -0.020987220108509064]",0.9792314767837524
1,"['  @Test\n  public void testToKafkaSpec() {\n    String topicName = ""testStream"";\n\n    int defaultPartitionCount = 2;\n    int changeLogPartitionFactor = 5;\n    Map<String, String> map = new HashMap<>();\n    Config config = new MapConfig(map);\n    StreamSpec spec = new StreamSpec(""id"", topicName, SYSTEM, defaultPartitionCount, config);\n\n    KafkaSystemAdmin kafkaAdmin = systemAdmin();\n    KafkaStreamSpec kafkaSpec = kafkaAdmin.toKafkaSpec(spec);\n\n    Assert.assertEquals(""id"", kafkaSpec.getId());\n    Assert.assertEquals(topicName, kafkaSpec.getPhysicalName());\n    Assert.assertEquals(SYSTEM, kafkaSpec.getSystemName());\n    Assert.assertEquals(defaultPartitionCount, kafkaSpec.getPartitionCount());\n\n    // validate that conversion is using coordination metadata\n    map.put(""job.coordinator.segment.bytes"", ""123"");\n    map.put(""job.coordinator.cleanup.policy"", ""superCompact"");\n    int coordReplicatonFactor = 4;\n    map.put(org.apache.samza.config.KafkaConfig.JOB_COORDINATOR_REPLICATION_FACTOR(),\n        String.valueOf(coordReplicatonFactor));\n\n    KafkaSystemAdmin admin = Mockito.spy(createSystemAdmin(SYSTEM, map));\n    spec = StreamSpec.createCoordinatorStreamSpec(topicName, SYSTEM);\n    kafkaSpec = admin.toKafkaSpec(spec);\n    Assert.assertEquals(coordReplicatonFactor, kafkaSpec.getReplicationFactor());\n    Assert.assertEquals(""123"", kafkaSpec.getProperties().getProperty(""segment.bytes""));\n    // cleanup policy is overridden in the KafkaAdmin\n    Assert.assertEquals(""compact"", kafkaSpec.getProperties().getProperty(""cleanup.policy""));\n\n    // validate that conversion is using changeLog metadata\n    map = new HashMap<>();\n    map.put(JobConfig.JOB_DEFAULT_SYSTEM, SYSTEM);\n\n    map.put(String.format(""stores.%s.changelog"", ""fakeStore""), topicName);\n    int changeLogReplicationFactor = 3;\n    map.put(String.format(""stores.%s.changelog.replication.factor"", ""fakeStore""),\n        String.valueOf(changeLogReplicationFactor));\n    admin = Mockito.spy(createSystemAdmin(SYSTEM, map));\n    spec = StreamSpec.createChangeLogStreamSpec(topicName, SYSTEM, changeLogPartitionFactor);\n    kafkaSpec = admin.toKafkaSpec(spec);\n    Assert.assertEquals(changeLogReplicationFactor, kafkaSpec.getReplicationFactor());\n\n    // same, but with missing topic info\n    try {\n      admin = Mockito.spy(createSystemAdmin(SYSTEM, map));\n      spec = StreamSpec.createChangeLogStreamSpec(""anotherTopic"", SYSTEM, changeLogPartitionFactor);\n      kafkaSpec = admin.toKafkaSpec(spec);\n      Assert.fail(""toKafkaSpec should\'ve failed for missing topic"");\n    } catch (StreamValidationException e) {\n      // expected\n    }\n\n    // validate that conversion is using intermediate streams properties\n    String interStreamId = ""isId"";\n\n    Map<String, String> interStreamMap = new HashMap<>();\n    interStreamMap.put(""app.mode"", ApplicationConfig.ApplicationMode.BATCH.toString());\n    interStreamMap.put(String.format(""streams.%s.samza.intermediate"", interStreamId), ""true"");\n    interStreamMap.put(String.format(""streams.%s.samza.system"", interStreamId), ""testSystem"");\n    interStreamMap.put(String.format(""streams.%s.p1"", interStreamId), ""v1"");\n    interStreamMap.put(String.format(""streams.%s.retention.ms"", interStreamId), ""123"");\n    // legacy format\n    interStreamMap.put(String.format(""systems.%s.streams.%s.p2"", ""testSystem"", interStreamId), ""v2"");\n\n    admin = Mockito.spy(createSystemAdmin(SYSTEM, interStreamMap));\n    spec = new StreamSpec(interStreamId, topicName, SYSTEM, defaultPartitionCount, config);\n    kafkaSpec = admin.toKafkaSpec(spec);\n    Assert.assertEquals(""v1"", kafkaSpec.getProperties().getProperty(""p1""));\n    Assert.assertEquals(""v2"", kafkaSpec.getProperties().getProperty(""p2""));\n    Assert.assertEquals(""123"", kafkaSpec.getProperties().getProperty(""retention.ms""));\n    Assert.assertEquals(defaultPartitionCount, kafkaSpec.getPartitionCount());\n  }\n']",topic;Stream;topic;Kafka;afka;Coordinator;Factor;Replicaton;afka;samza,1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.440110832452774e-10;6.111804395914078e-10;5.966285243630409e-10;5.529727786779404e-10;4.802132025361061e-10;4.802132025361061e-10,5,5,"[-5.526638031005859, -4.986651420593262, -5.40331506729126, -6.446163654327393, -5.4786601066589355, -0.02129628323018551]",0.9789289832115173
1,"['  @Test\n  public void testCreateCoordinatorStream() {\n    SystemAdmin admin = Mockito.spy(systemAdmin());\n    StreamSpec spec = StreamSpec.createCoordinatorStreamSpec(""testCoordinatorStream"", ""testSystem"");\n\n    admin.createStream(spec);\n    admin.validateStream(spec);\n    Mockito.verify(admin).createStream(Mockito.any());\n  }\n']",Spec;Spec;Coordinator;Coordinator;System;Stream;validate;Stream;create;Stream,9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.578509330749512, -4.964549541473389, -5.443460464477539, -6.51369571685791, -5.47904634475708, -0.020958153530955315]",0.9792599678039551
1,"['  @Test\n  public void testCreateCoordinatorStreamWithSpecialCharsInTopicName() {\n    final String stream = ""test.coordinator_test.Stream"";\n\n    Map<String, String> map = new HashMap<>();\n    map.put(""job.coordinator.segment.bytes"", ""123"");\n    map.put(""job.coordinator.cleanup.policy"", ""compact"");\n    int coordReplicatonFactor = 2;\n    map.put(org.apache.samza.config.KafkaConfig.JOB_COORDINATOR_REPLICATION_FACTOR(),\n        String.valueOf(coordReplicatonFactor));\n\n    KafkaSystemAdmin admin = Mockito.spy(createSystemAdmin(SYSTEM, map));\n    StreamSpec spec = StreamSpec.createCoordinatorStreamSpec(stream, SYSTEM);\n\n    Mockito.doAnswer(invocationOnMock -> {\n      StreamSpec internalSpec = (StreamSpec) invocationOnMock.callRealMethod();\n      assertTrue(internalSpec instanceof KafkaStreamSpec);  // KafkaStreamSpec is used to carry replication factor\n      assertTrue(internalSpec.isCoordinatorStream());\n      assertEquals(SYSTEM, internalSpec.getSystemName());\n      assertEquals(stream, internalSpec.getPhysicalName());\n      assertEquals(1, internalSpec.getPartitionCount());\n      Assert.assertEquals(coordReplicatonFactor, ((KafkaStreamSpec) internalSpec).getReplicationFactor());\n      Assert.assertEquals(""123"", ((KafkaStreamSpec) internalSpec).getProperties().getProperty(""segment.bytes""));\n      // cleanup policy is overridden in the KafkaAdmin\n      Assert.assertEquals(""compact"", ((KafkaStreamSpec) internalSpec).getProperties().getProperty(""cleanup.policy""));\n\n      return internalSpec;\n    }).when(admin).toKafkaSpec(Mockito.any());\n\n    admin.createStream(spec);\n    admin.validateStream(spec);\n  }\n']",Answer;Topic;ock;Mockito;samza;Mockito;Chars;the;afka;coordinator,1.7462298274040222e-09;1.4551915228366852e-09;1.280568540096283e-09;1.2078089639544487e-09;9.022187441587448e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.528427600860596, -4.98430061340332, -5.422623157501221, -6.4494123458862305, -5.485344886779785, -0.021183663979172707]",0.9790391325950623
1,"['  @Test\n  public void testCreateChangelogStreamHelp() {\n    testCreateChangelogStreamHelp(""testChangeLogStream"");\n  }\n']",Create;Stream;Help;Log;Change;Stream;Stream;Help;Changelog;Changelog,8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-1.1641532182693481e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-5.592402935028076, -4.955678939819336, -5.4324517250061035, -6.568360328674316, -5.456010818481445, -0.02103613130748272]",0.9791836142539978
1,"['  @Test\n  public void testCreateChangelogStreamWithSpecialCharsInTopicName() {\n    // cannot contain period\n    testCreateChangelogStreamHelp(""test-Change_Log-Stream"");\n  }\n']",In;Changelog;Chars;Stream;Special;Stream;Change;Topic;cannot;contain,4.6566128730773926e-09;2.6775524020195007e-09;1.979060471057892e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.550857067108154, -4.891201496124268, -5.460959434509277, -6.558620452880859, -5.4933671951293945, -0.02140527218580246]",0.9788221716880798
1,"['  @Test\n  public void testCreateStream() {\n    StreamSpec spec = new StreamSpec(""testId"", ""testStream"", ""testSystem"", 8);\n    KafkaSystemAdmin admin = systemAdmin();\n    assertTrue(""createStream should return true if the stream does not exist and then is created."",\n        admin.createStream(spec));\n    admin.validateStream(spec);\n\n    assertFalse(""createStream should return false if the stream already exists."", systemAdmin().createStream(spec));\n  }\n']",Kafka;System;new;system;System;Stream;should;Spec;stream;Stream,1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.565708160400391, -5.003594875335693, -5.48354959487915, -6.52897834777832, -5.485804557800293, -0.020509667694568634]",0.9796991348266602
1,"['  @Test(expected = StreamValidationException.class)\n  public void testValidateStreamDoesNotExist() {\n\n    StreamSpec spec = new StreamSpec(""testId"", ""testStreamNameExist"", ""testSystem"", 8);\n\n    systemAdmin().validateStream(spec);\n  }\n']",Spec;spec;new;system;System;Name;Stream;Stream;Exception;Validate,1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;0.0;0.0;0.0,5,5,"[-5.560539722442627, -4.992883205413818, -5.413788795471191, -6.50643253326416, -5.457061767578125, -0.02106776461005211]",0.9791526198387146
1,"['  @Test(expected = StreamValidationException.class)\n  public void testValidateStreamWrongPartitionCount() {\n    StreamSpec spec1 = new StreamSpec(""testId"", ""testStreamPartition"", ""testSystem"", 8);\n    StreamSpec spec2 = new StreamSpec(""testId"", ""testStreamPartition"", ""testSystem"", 4);\n\n    assertTrue(""createStream should return true if the stream does not exist and then is created."",\n        systemAdmin().createStream(spec1));\n\n    systemAdmin().validateStream(spec2);\n  }\n']",Admin;Spec;new;Spec;Stream;create;stream;system;new;class,7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.558889389038086, -4.948350429534912, -5.394522190093994, -6.477029323577881, -5.4849042892456055, -0.021404339000582695]",0.9788231253623962
1,"['  @Test(expected = StreamValidationException.class)\n  public void testValidateStreamWrongName() {\n    StreamSpec spec1 = new StreamSpec(""testId"", ""testStreamName1"", ""testSystem"", 8);\n    StreamSpec spec2 = new StreamSpec(""testId"", ""testStreamName2"", ""testSystem"", 8);\n\n    assertTrue(""createStream should return true if the stream does not exist and then is created."",\n        systemAdmin().createStream(spec1));\n\n    systemAdmin().validateStream(spec2);\n  }\n']",Spec;Validation;new;Validate;Wrong;system;Stream;if;System;the,1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.538875102996826, -4.976480484008789, -5.393177032470703, -6.474301338195801, -5.464626312255859, -0.02138030156493187]",0.9788467288017273
1,"['  @Test\n  public void testClearStream() {\n    StreamSpec spec = new StreamSpec(""testId"", ""testStreamClear"", ""testSystem"", 8);\n\n    KafkaSystemAdmin admin = systemAdmin();\n    String topicName = spec.getPhysicalName();\n\n    assertTrue(""createStream should return true if the stream does not exist and then is created."", admin.createStream(spec));\n    // validate topic exists\n    assertTrue(admin.clearStream(spec));\n\n    // validate that topic was removed\n    DescribeTopicsResult dtr = admin.adminClient.describeTopics(ImmutableSet.of(topicName));\n    try {\n      TopicDescription td = dtr.all().get().get(topicName);\n      Assert.fail(""topic "" + topicName + "" should\'ve been removed. td="" + td);\n    } catch (Exception e) {\n      if (!(e.getCause() instanceof org.apache.kafka.common.errors.UnknownTopicOrPartitionException)) {\n        Assert.fail(""topic "" + topicName + "" should\'ve been removed. Expected UnknownTopicOrPartitionException."");\n      }\n    }\n  }\n']",Kafka;Clear;Admin;Clear;Physical;Stream;spec;system;spec;the,1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.57154655456543, -4.997992038726807, -5.468922138214111, -6.508259296417236, -5.493546009063721, -0.02058662846684456]",0.9796238541603088
1,"['  @Test\n  public void testShouldAssembleMetadata() {\n    Map<SystemStreamPartition, String> oldestOffsets = new ImmutableMap.Builder<SystemStreamPartition, String>()\n        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(0)), ""o1"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(0)), ""o2"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(1)), ""o3"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(1)), ""o4"")\n        .build();\n\n    Map<SystemStreamPartition, String> newestOffsets = new ImmutableMap.Builder<SystemStreamPartition, String>()\n        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(0)), ""n1"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(0)), ""n2"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(1)), ""n3"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(1)), ""n4"")\n        .build();\n\n    Map<SystemStreamPartition, String> upcomingOffsets = new ImmutableMap.Builder<SystemStreamPartition, String>()\n        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(0)), ""u1"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(0)), ""u2"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(1)), ""u3"")\n        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(1)), ""u4"")\n        .build();\n\n    Map<String, SystemStreamMetadata> metadata = assembleMetadata(oldestOffsets, newestOffsets, upcomingOffsets);\n    assertNotNull(metadata);\n    assertEquals(2, metadata.size());\n    assertTrue(metadata.containsKey(""stream1""));\n    assertTrue(metadata.containsKey(""stream2""));\n    SystemStreamMetadata stream1Metadata = metadata.get(""stream1"");\n    SystemStreamMetadata stream2Metadata = metadata.get(""stream2"");\n    assertNotNull(stream1Metadata);\n    assertNotNull(stream2Metadata);\n    assertEquals(""stream1"", stream1Metadata.getStreamName());\n    assertEquals(""stream2"", stream2Metadata.getStreamName());\n    SystemStreamMetadata.SystemStreamPartitionMetadata expectedSystemStream1Partition0Metadata =\n        new SystemStreamMetadata.SystemStreamPartitionMetadata(""o1"", ""n1"", ""u1"");\n    SystemStreamMetadata.SystemStreamPartitionMetadata expectedSystemStream1Partition1Metadata =\n        new SystemStreamMetadata.SystemStreamPartitionMetadata(""o3"", ""n3"", ""u3"");\n    SystemStreamMetadata.SystemStreamPartitionMetadata expectedSystemStream2Partition0Metadata =\n        new SystemStreamMetadata.SystemStreamPartitionMetadata(""o2"", ""n2"", ""u2"");\n    SystemStreamMetadata.SystemStreamPartitionMetadata expectedSystemStream2Partition1Metadata =\n        new SystemStreamMetadata.SystemStreamPartitionMetadata(""o4"", ""n4"", ""u4"");\n    Map<Partition, SystemStreamMetadata.SystemStreamPartitionMetadata> stream1PartitionMetadata =\n        stream1Metadata.getSystemStreamPartitionMetadata();\n    Map<Partition, SystemStreamMetadata.SystemStreamPartitionMetadata> stream2PartitionMetadata =\n        stream2Metadata.getSystemStreamPartitionMetadata();\n    assertEquals(expectedSystemStream1Partition0Metadata, stream1PartitionMetadata.get(new Partition(0)));\n    assertEquals(expectedSystemStream1Partition1Metadata, stream1PartitionMetadata.get(new Partition(1)));\n    assertEquals(expectedSystemStream2Partition0Metadata, stream2PartitionMetadata.get(new Partition(0)));\n    assertEquals(expectedSystemStream2Partition1Metadata, stream2PartitionMetadata.get(new Partition(1)));\n  }\n']",Should;Metadata;Map;upcoming;Partition;Builder;SYSTEM;SYSTEM;Partition;SYSTEM,1.6298145055770874e-09;1.280568540096283e-09;7.566995918750763e-10;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;5.384208634495735e-10;4.94765117764473e-10,5,5,"[-5.423144340515137, -5.046576023101807, -5.451760292053223, -6.460777282714844, -5.445571422576904, -0.021236183121800423]",0.9789876937866211
1,"['  @Test\n  public void testStartpointSpecificOffsetVisitorShouldResolveToCorrectOffset() {\n    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);\n    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);\n\n    final StartpointSpecific testStartpointSpecific = new StartpointSpecific(TEST_OFFSET);\n\n    // Invoke the consumer with startpoint.\n    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, testStartpointSpecific);\n    Assert.assertEquals(TEST_OFFSET, resolvedOffset);\n  }\n']",Visitor;Startpoint;PARTITION;Kafka;Offset;Kafka;afka;Mockito;Startpoint;Correct,2.2992026060819626e-09;1.6880221664905548e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.604264050722122e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.5474467277526855, -4.977178573608398, -5.362776279449463, -6.461740016937256, -5.43716287612915, -0.02162485010921955]",0.9786074161529541
1,"['  @Test\n  public void testStartpointTimestampVisitorShouldResolveToCorrectOffset() {\n    // Define dummy variables for testing.\n    final Long testTimeStamp = 10L;\n\n    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);\n\n    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);\n\n    final StartpointTimestamp startpointTimestamp = new StartpointTimestamp(testTimeStamp);\n    final Map<TopicPartition, OffsetAndTimestamp> offsetForTimesResult = ImmutableMap.of(\n        TEST_TOPIC_PARTITION, new OffsetAndTimestamp(Long.valueOf(TEST_OFFSET), testTimeStamp));\n\n    // Mock the consumer interactions.\n    Mockito.when(consumer.offsetsForTimes(ImmutableMap.of(TEST_TOPIC_PARTITION, testTimeStamp))).thenReturn(offsetForTimesResult);\n    Mockito.when(consumer.position(TEST_TOPIC_PARTITION)).thenReturn(Long.valueOf(TEST_OFFSET));\n\n    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, startpointTimestamp);\n    Assert.assertEquals(TEST_OFFSET, resolvedOffset);\n  }\n']",TOPIC;Assert;Partition;resolved;OFFSET;Timestamp;dummy;EST;variables;PARTITION,5.122274160385132e-09;4.190951585769653e-09;4.190951585769653e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.2118911147117615e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.3387762010097504e-09,5,5,"[-5.545532703399658, -4.654709815979004, -5.390458583831787, -6.508828163146973, -5.534387111663818, -0.023698879405856133]",0.9765797257423401
1,"['  @Test\n  public void testStartpointTimestampVisitorShouldResolveToCorrectOffsetWhenTimestampDoesNotExist() {\n    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);\n    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);\n\n    final StartpointTimestamp startpointTimestamp = new StartpointTimestamp(0L);\n    final Map<TopicPartition, OffsetAndTimestamp> offsetForTimesResult = new HashMap<>();\n    offsetForTimesResult.put(TEST_TOPIC_PARTITION, null);\n\n    // Mock the consumer interactions.\n    Mockito.when(consumer.offsetsForTimes(ImmutableMap.of(TEST_TOPIC_PARTITION, 0L))).thenReturn(offsetForTimesResult);\n    Mockito.when(consumer.endOffsets(ImmutableSet.of(TEST_TOPIC_PARTITION))).thenReturn(ImmutableMap.of(TEST_TOPIC_PARTITION, 10L));\n\n    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, startpointTimestamp);\n    Assert.assertEquals(TEST_OFFSET, resolvedOffset);\n\n    // Mock verifications.\n    Mockito.verify(consumer).offsetsForTimes(ImmutableMap.of(TEST_TOPIC_PARTITION, 0L));\n  }\n']",Should;Startpoint;Mockito;STREAM;Resolve;Timestamp;Offset;TOPIC;Kafka;new,2.852175384759903e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.9208528101444244e-09;1.7462298274040222e-09;1.280568540096283e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.538907051086426, -4.678719520568848, -5.399837017059326, -6.500072956085205, -5.514100074768066, -0.023546943441033363]",0.9767281413078308
1,"['  @Test\n  public void testStartpointOldestVisitorShouldResolveToCorrectOffset() {\n    // Define dummy variables for testing.\n    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);\n    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);\n\n    final StartpointOldest testStartpointSpecific = new StartpointOldest();\n\n    // Mock the consumer interactions.\n    Mockito.when(consumer.beginningOffsets(ImmutableSet.of(TEST_TOPIC_PARTITION))).thenReturn(ImmutableMap.of(TEST_TOPIC_PARTITION, 10L));\n\n    // Invoke the consumer with startpoint.\n    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, testStartpointSpecific);\n    Assert.assertEquals(TEST_OFFSET, resolvedOffset);\n  }\n']",TOPIC;dummy;Kafka;visit;Immutable;Startpoint;Visitor;Mock;final;PARTITION,1.2223608791828156e-09;1.1059455573558807e-09;1.0477378964424133e-09;8.149072527885437e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.5404052734375, -4.92235803604126, -5.342483997344971, -6.44613790512085, -5.434157848358154, -0.022186754271388054]",0.9780575633049011
1,"['  @Test\n  public void testStartpointUpcomingVisitorShouldResolveToCorrectOffset() {\n    // Define dummy variables for testing.\n    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);\n\n    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);\n\n    final StartpointUpcoming testStartpointSpecific = new StartpointUpcoming();\n\n    // Mock the consumer interactions.\n    Mockito.when(consumer.endOffsets(ImmutableSet.of(TEST_TOPIC_PARTITION))).thenReturn(ImmutableMap.of(TEST_TOPIC_PARTITION, 10L));\n\n    // Invoke the consumer with startpoint.\n    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, testStartpointSpecific);\n    Assert.assertEquals(TEST_OFFSET, resolvedOffset);\n  }\n']",Should;Visitor;Define;Startpoint;Consumer;Offset;Correct;Upcoming;SYSTEM;Offsets,4.6566128730773926e-09;3.725290298461914e-09;3.725290298461914e-09;2.7939677238464355e-09;2.561137080192566e-09;2.561137080192566e-09;2.3283064365386963e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09,5,5,"[-5.542685031890869, -4.896919250488281, -5.352229118347168, -6.453445911407471, -5.4387898445129395, -0.022289585322141647]",0.977957010269165
1,"['  @Test\n  public void testUnsupportedConfigStrippedFromProperties() {\n    StreamSpec original = new StreamSpec(""dummyId"", ""dummyPhysicalName"", ""dummySystemName"",\n        ImmutableMap.of(""segment.bytes"", ""4"", ""replication.factor"", ""7""));\n\n    // First verify the original\n    assertEquals(""7"", original.get(""replication.factor""));\n    assertEquals(""4"", original.get(""segment.bytes""));\n\n    Map<String, String> config = original.getConfig();\n    assertEquals(""7"", config.get(""replication.factor""));\n    assertEquals(""4"", config.get(""segment.bytes""));\n\n\n    // Now verify the Kafka spec\n    KafkaStreamSpec spec = KafkaStreamSpec.fromSpec(original);\n    assertNull(spec.get(""replication.factor""));\n    assertEquals(""4"", spec.get(""segment.bytes""));\n\n    Properties kafkaProperties = spec.getProperties();\n    Map<String, String> kafkaConfig = spec.getConfig();\n    assertNull(kafkaProperties.get(""replication.factor""));\n    assertEquals(""4"", kafkaProperties.get(""segment.bytes""));\n\n    assertNull(kafkaConfig.get(""replication.factor""));\n    assertEquals(""4"", kafkaConfig.get(""segment.bytes""));\n  }\n']",the;the;Stripped;ummy;bytes;replication;Properties;original;Config;Kafka,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.450707912445068, -5.078700065612793, -5.4400835037231445, -6.459161758422852, -5.42963981628418, -0.021030878648161888]",0.979188859462738
1,"['  @Test(expected = IllegalArgumentException.class)\n  public void testInvalidPartitionCount() {\n    new KafkaStreamSpec(""dummyId"", ""dummyPhysicalName"", ""dummySystemName"", 0);\n  }\n']",Kafka;ummy;new;ummy;Illegal;Name;expected;Exception;Spec;Name,1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;1.7462298274040222e-10;0.0;-5.820766091346741e-11,5,5,"[-5.578979015350342, -4.921901702880859, -5.371121883392334, -6.5040693283081055, -5.473870277404785, -0.021635232493281364]",0.978597104549408
1,"['  @Test\n  public void testInstantiateProducer() {\n    KafkaSystemProducer ksp = new KafkaSystemProducer(""SysName"", new ExponentialSleepStrategy(2.0, 200, 10000),\n      new AbstractFunction0<Producer<byte[], byte[]>>() {\n        @Override\n        public Producer<byte[], byte[]> apply() {\n          return new KafkaProducer<>(new HashMap<String, Object>());\n        }\n      }, new KafkaSystemProducerMetrics(""SysName"", new MetricsRegistryMap()), new AbstractFunction0<Object>() {\n        @Override\n        public Object apply() {\n          return System.currentTimeMillis();\n        }\n']",Kafka;Sys;Time;System;apply;Mill;System;Name;Metrics;Producer,1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.494175434112549, -4.9571099281311035, -5.402100563049316, -6.478440761566162, -5.510634899139404, -0.021459296345710754]",0.9787693023681641
1,"['  @Test\n  public void testISDConfigsWithOverrides() {\n    KafkaSystemDescriptor sd = new KafkaSystemDescriptor(""kafka"");\n\n    KafkaInputDescriptor<KV<String, Integer>> isd =\n        sd.getInputDescriptor(""input-stream"", KVSerde.of(new StringSerde(), new IntegerSerde()))\n            .withConsumerAutoOffsetReset(""largest"")\n            .withConsumerFetchMessageMaxBytes(1024 * 1024);\n\n    Map<String, String> generatedConfigs = isd.toConfig();\n    assertEquals(""kafka"", generatedConfigs.get(""streams.input-stream.samza.system""));\n    assertEquals(""largest"", generatedConfigs.get(""systems.kafka.streams.input-stream.consumer.auto.offset.reset""));\n    assertEquals(""1048576"", generatedConfigs.get(""systems.kafka.streams.input-stream.consumer.fetch.message.max.bytes""));\n  }\n']",Kafka;afka;Serde;Input;Consumer;Config;system;Input;etch;System,1.3096723705530167e-09;1.2514647096395493e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10,5,5,"[-5.5037078857421875, -5.013473033905029, -5.421385765075684, -6.467931270599365, -5.468051910400391, -0.02113417722284794]",0.9790877103805542
1,"['  @Test\n  public void testISDConfigsWithDefaults() {\n    KafkaSystemDescriptor sd = new KafkaSystemDescriptor(""kafka"")\n        .withConsumerZkConnect(ImmutableList.of(""localhost:123""))\n        .withProducerBootstrapServers(ImmutableList.of(""localhost:567"", ""localhost:890""));\n\n    KafkaInputDescriptor<KV<String, Integer>> isd =\n        sd.getInputDescriptor(""input-stream"", KVSerde.of(new StringSerde(), new IntegerSerde()));\n\n    Map<String, String> generatedConfigs = isd.toConfig();\n    assertEquals(""kafka"", generatedConfigs.get(""streams.input-stream.samza.system""));\n    assertEquals(1, generatedConfigs.size()); // verify that there are no other configs\n  }\n']",Kafka;new;Descriptor;Descriptor;Serde;Input;Defaults;with;Consumer;Input,2.7939677238464355e-09;2.3283064365386963e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.585629984736443e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.4991841316223145, -5.015908718109131, -5.428508281707764, -6.489828586578369, -5.47295618057251, -0.02104897052049637]",0.9791710376739502
1,"['  @Test\n  public void testSDConfigsWithOverrides() {\n    KafkaSystemDescriptor sd =\n        new KafkaSystemDescriptor(""kafka"")\n            .withConsumerZkConnect(ImmutableList.of(""localhost:1234""))\n            .withProducerBootstrapServers(ImmutableList.of(""localhost:567"", ""localhost:890""))\n            .withDefaultStreamOffsetDefault(SystemStreamMetadata.OffsetType.OLDEST)\n            .withConsumerAutoOffsetReset(""smallest"")\n            .withConsumerFetchMessageMaxBytes(1024 * 1024)\n            .withSamzaFetchThreshold(10000)\n            .withSamzaFetchThresholdBytes(1024 * 1024)\n            .withConsumerConfigs(ImmutableMap.of(""custom-consumer-config-key"", ""custom-consumer-config-value""))\n            .withProducerConfigs(ImmutableMap.of(""custom-producer-config-key"", ""custom-producer-config-value""))\n            .withDefaultStreamConfigs(ImmutableMap.of(""custom-stream-config-key"", ""custom-stream-config-value""));\n\n    Map<String, String> generatedConfigs = sd.toConfig();\n    assertEquals(""org.apache.samza.system.kafka.KafkaSystemFactory"", generatedConfigs.get(""systems.kafka.samza.factory""));\n    assertEquals(""localhost:1234"", generatedConfigs.get(""systems.kafka.consumer.zookeeper.connect""));\n    assertEquals(""localhost:567,localhost:890"", generatedConfigs.get(""systems.kafka.producer.bootstrap.servers""));\n    assertEquals(""smallest"", generatedConfigs.get(""systems.kafka.consumer.auto.offset.reset""));\n    assertEquals(""1048576"", generatedConfigs.get(""systems.kafka.consumer.fetch.message.max.bytes""));\n    assertEquals(""10000"", generatedConfigs.get(""systems.kafka.samza.fetch.threshold""));\n    assertEquals(""1048576"", generatedConfigs.get(""systems.kafka.samza.fetch.threshold.bytes""));\n    assertEquals(""custom-consumer-config-value"", generatedConfigs.get(""systems.kafka.consumer.custom-consumer-config-key""));\n    assertEquals(""custom-producer-config-value"", generatedConfigs.get(""systems.kafka.producer.custom-producer-config-key""));\n    assertEquals(""custom-stream-config-value"", generatedConfigs.get(""systems.kafka.default.stream.custom-stream-config-key""));\n    assertEquals(""oldest"", generatedConfigs.get(""systems.kafka.default.stream.samza.offset.default""));\n    assertEquals(11, generatedConfigs.size());\n  }\n']",Kafka;sd;Producer;zookeeper;Consumer;new;Message;Immutable;Equals;consumer,1.3969838619232178e-09;9.313225746154785e-10;8.585629984736443e-10;7.8580342233181e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.5652192309498787e-10;3.4924596548080444e-10,5,5,"[-5.440067291259766, -5.054052829742432, -5.410918235778809, -6.440556526184082, -5.433279514312744, -0.021381234750151634]",0.9788455963134766
1,"['  @Test\n  public void testSDConfigsWithoutOverrides() {\n    KafkaSystemDescriptor sd = new KafkaSystemDescriptor(""kafka"");\n\n    Map<String, String> generatedConfigs = sd.toConfig();\n    assertEquals(""org.apache.samza.system.kafka.KafkaSystemFactory"", generatedConfigs.get(""systems.kafka.samza.factory""));\n    assertEquals(1, generatedConfigs.size()); // verify that there are no other configs\n  }\n']",Kafka;SDConfig;System;Map;afka;samza;System;System;are;afka,2.3283064365386963e-09;1.862645149230957e-09;8.149072527885437e-10;7.566995918750763e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10,5,5,"[-5.523542881011963, -5.016800403594971, -5.46491003036499, -6.527468204498291, -5.473227024078369, -0.020723719149827957]",0.9794895648956299
1,"['  @Test\n  public void testGetIntermediateStreamProperties() {\n    Map<String, String> config = new HashMap<>();\n    KafkaSystemFactory factory = new KafkaSystemFactory();\n    Map<String, Properties> properties = JavaConversions.mapAsJavaMap(\n        factory.getIntermediateStreamProperties(new MapConfig(config)));\n    assertTrue(properties.isEmpty());\n\n    // no properties for stream\n    config.put(""streams.test.samza.intermediate"", ""true"");\n    config.put(""streams.test.compression.type"", ""lz4""); //some random config\n    properties = JavaConversions.mapAsJavaMap(\n        factory.getIntermediateStreamProperties(new MapConfig(config)));\n    assertTrue(properties.isEmpty());\n\n    config.put(ApplicationConfig.APP_MODE, ApplicationConfig.ApplicationMode.BATCH.name());\n\n    KafkaSystemAdmin admin = createSystemAdmin(SYSTEM(), config);\n    StreamSpec spec = new StreamSpec(""test"", ""test"", SYSTEM(),\n        Collections.singletonMap(""replication.factor"", ""1""));\n    KafkaStreamSpec kspec = admin.toKafkaSpec(spec);\n\n    Properties prop = kspec.getProperties();\n    assertEquals(prop.getProperty(""retention.ms""), String.valueOf(KafkaConfig.DEFAULT_RETENTION_MS_FOR_BATCH()));\n    assertEquals(prop.getProperty(""compression.type""), ""lz4"");\n\n    // replication.factor should be removed from the properties and set on the spec directly\n    assertEquals(kspec.getReplicationFactor(), 1);\n    assertNull(prop.getProperty(""replication.factor""));\n  }\n']",Kafka;Java;Hash;Stream;samza;Properties;As;Spec;Intermediate;map,1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.473084449768066, -5.048337936401367, -5.44843053817749, -6.488142967224121, -5.4597063064575195, -0.020914725959300995]",0.9793024659156799
1,"['  @Test\n  public void testGetCheckpointTopicProperties() {\n    Map<String, String> config = new HashMap<>();\n    Properties properties = new KafkaConfig(new MapConfig(config)).getCheckpointTopicProperties();\n\n    assertEquals(properties.getProperty(""cleanup.policy""), ""compact"");\n    assertEquals(properties.getProperty(""segment.bytes""), String.valueOf(KafkaConfig.DEFAULT_CHECKPOINT_SEGMENT_BYTES()));\n\n    config.put(ApplicationConfig.APP_MODE, ApplicationConfig.ApplicationMode.BATCH.name());\n    properties = new KafkaConfig(new MapConfig(config)).getCheckpointTopicProperties();\n\n    assertEquals(properties.getProperty(""cleanup.policy""), ""compact,delete"");\n    assertEquals(properties.getProperty(""segment.bytes""), String.valueOf(KafkaConfig.DEFAULT_CHECKPOINT_SEGMENT_BYTES()));\n    assertEquals(properties.getProperty(""retention.ms""), String.valueOf(KafkaConfig.DEFAULT_RETENTION_MS_FOR_BATCH()));\n  }\n']",new;retention;ATCH;segment;config;MS;new;Topic;cleanup;Checkpoint,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.509173393249512, -5.039156436920166, -5.435007095336914, -6.503112316131592, -5.462774753570557, -0.020846080034971237]",0.979369580745697
1,"['  @Test\n  public void testBinaryCompatibility() {\n    KafkaCheckpointLogKey logKey1 = new KafkaCheckpointLogKey(KafkaCheckpointLogKey.CHECKPOINT_V1_KEY_TYPE,\n        new TaskName(""Partition 0""), GroupByPartitionFactory.class.getCanonicalName());\n    KafkaCheckpointLogKeySerde checkpointSerde = new KafkaCheckpointLogKeySerde();\n\n    byte[] bytes = (""{\\""systemstreampartition-grouper-factory\\"""" +\n        "":\\""org.apache.samza.container.grouper.stream.GroupByPartitionFactory\\"",\\""taskName\\"":\\""Partition 0\\"","" +\n        ""\\""type\\"":\\""checkpoint\\""}"").getBytes();\n\n    // test that the checkpoints returned by the Serde are byte-wise identical to an actual checkpoint in Kafka\n    Assert.assertEquals(true, Arrays.equals(bytes, checkpointSerde.toBytes(logKey1)));\n  }\n']",Kafka;samza;Arrays;Key;task;Checkpoint;systemstreampartition;log;Name;Checkpoint,1.1641532182693481e-09;1.0477378964424133e-09;9.604264050722122e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.257323548197746e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.5284857749938965, -5.056785583496094, -5.4477033615112305, -6.488181114196777, -5.4522271156311035, -0.020664284005761147]",0.9795477390289307
1,"['  @Test\n  public void testSerde() {\n    KafkaCheckpointLogKey key = new KafkaCheckpointLogKey(KafkaCheckpointLogKey.CHECKPOINT_V1_KEY_TYPE,\n        new TaskName(""Partition 0""), GroupByPartitionFactory.class.getCanonicalName());\n    KafkaCheckpointLogKeySerde checkpointSerde = new KafkaCheckpointLogKeySerde();\n\n    // test that deserialize(serialize(k)) == k\n    Assert.assertEquals(key, checkpointSerde.fromBytes(checkpointSerde.toBytes(key)));\n  }\n']",Serde;deserialize;Canonical;Kafka;Partition;Checkpoint;Key;Factory;KEY;Name,1.6298145055770874e-09;1.1350493878126144e-09;9.677023626863956e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.548361852765083e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.556334972381592, -4.996473789215088, -5.461372375488281, -6.518029689788818, -5.473880767822266, -0.02075781300663948]",0.9794561266899109
1,"['  @Test\n  public void testCheckpointTypeV2() {\n    KafkaCheckpointLogKey keyV2 = new KafkaCheckpointLogKey(KafkaCheckpointLogKey.CHECKPOINT_V2_KEY_TYPE, new TaskName(""Partition 0""),\n        GroupByPartitionFactory.class.getCanonicalName());\n    KafkaCheckpointLogKeySerde checkpointKeySerde = new KafkaCheckpointLogKeySerde();\n\n    // test that deserialize(serialize(k)) == k\n    Assert.assertEquals(keyV2, checkpointKeySerde.fromBytes(checkpointKeySerde.toBytes(keyV2)));\n  }\n']",Kafka;Kafka;Checkpoint;Task;Log;afka;serialize;deserialize;Checkpoint;Key,3.259629011154175e-09;1.979060471057892e-09;1.280568540096283e-09;1.1059455573558807e-09;9.89530235528946e-10;8.149072527885437e-10;8.003553375601768e-10;7.566995918750763e-10;5.238689482212067e-10;5.093170329928398e-10,5,5,"[-5.540491104125977, -4.9958906173706055, -5.459650039672852, -6.521359920501709, -5.466829776763916, -0.020857637748122215]",0.9793583750724792
1,"['  @Test\n  public void testForwardsCompatibility() {\n    // Set the key to another value, this is for the future if we want to support multiple checkpoint keys\n    // we do not want to throw in the Serdes layer, but must be validated in the CheckpointManager\n    KafkaCheckpointLogKey key = new KafkaCheckpointLogKey(""checkpoint-v2"",\n        new TaskName(""Partition 0""), GroupByPartitionFactory.class.getCanonicalName());\n    KafkaCheckpointLogKeySerde checkpointSerde = new KafkaCheckpointLogKeySerde();\n\n    // test that deserialize(serialize(k)) == k\n    Assert.assertEquals(key, checkpointSerde.fromBytes(checkpointSerde.toBytes(key)));\n  }\n']",layer;we;want;Key;Forwards;throw;in;the;if;validated,2.9103830456733704e-09;2.7939677238464355e-09;1.862645149230957e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.076841726899147e-09;1.0477378964424133e-09;9.313225746154785e-10,5,5,"[-5.51961612701416, -5.047410011291504, -5.480039596557617, -6.52863883972168, -5.464438438415527, -0.020507097244262695]",0.9797017574310303
1,"['  @Test(expected = TopicAlreadyMarkedForDeletionException.class)\n  public void testCreateResourcesTopicCreationError() {\n    setupSystemFactory(config());\n    // throw an exception during createStream\n    doThrow(new TopicAlreadyMarkedForDeletionException(""invalid stream"")).when(this.createResourcesSystemAdmin)\n        .createStream(CHECKPOINT_SPEC);\n    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());\n    // expect an exception during startup\n    checkpointManager.createResources();\n  }\n']",Throw;Topic;afka;Deletion;invalid;Stream;new;expect;class;startup,2.7939677238464355e-09;2.7939677238464355e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.731149137020111e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.56553316116333, -4.966017246246338, -5.422069549560547, -6.499258995056152, -5.498766899108887, -0.02103239670395851]",0.9791872501373291
1,"['  @Test(expected = StreamValidationException.class)\n  public void testCreateResourcesTopicValidationError() {\n    setupSystemFactory(config());\n    // throw an exception during validateStream\n    doThrow(new StreamValidationException(""invalid stream"")).when(this.createResourcesSystemAdmin)\n        .validateStream(CHECKPOINT_SPEC);\n    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());\n    // expect an exception during startup\n    checkpointManager.createResources();\n  }\n']",afka;SPEC;do;System;Stream;Validation;Manager;CHECKPOINT;stream;create,2.444721758365631e-09;9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.545991897583008, -4.974923610687256, -5.404347896575928, -6.489613056182861, -5.48777437210083, -0.021188098937273026]",0.9790346622467041
1,"['  @Test(expected = SamzaException.class)\n  public void testReadFailsOnSerdeExceptions() throws InterruptedException {\n    setupSystemFactory(config());\n    List<IncomingMessageEnvelope> checkpointEnvelopes =\n        ImmutableList.of(newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, ""0""), ""0""));\n    setupConsumer(checkpointEnvelopes);\n    // wire up an exception throwing serde with the checkpointManager\n    CheckpointV1Serde checkpointV1Serde = mock(CheckpointV1Serde.class);\n    doThrow(new RuntimeException(""serde failed"")).when(checkpointV1Serde).fromBytes(any());\n    KafkaCheckpointManager checkpointManager =\n        new KafkaCheckpointManager(CHECKPOINT_SPEC, this.systemFactory, true, config(), this.metricsRegistry,\n            checkpointV1Serde, CHECKPOINT_V2_SERDE, KAFKA_CHECKPOINT_LOG_KEY_SERDE);\n    checkpointManager.register(TASK0);\n\n    // expect an exception\n    checkpointManager.readLastCheckpoint(TASK0);\n  }\n']",Samza;expected;Envelopes;setup;class;Envelop;Serde;CHECKPOINT;this;metrics,5.471520125865936e-09;9.313225746154785e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.4019543565809727e-10;4.147295840084553e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.532706260681152, -4.829770565032959, -5.359302043914795, -6.43780517578125, -5.5071187019348145, -0.02255803719162941]",0.9776945114135742
1,"['  @Test\n  public void testReadSucceedsOnKeySerdeExceptionsWhenValidationIsDisabled() throws InterruptedException {\n    setupSystemFactory(config());\n    List<IncomingMessageEnvelope> checkpointEnvelopes =\n        ImmutableList.of(newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, ""0""), ""0""));\n    setupConsumer(checkpointEnvelopes);\n    // wire up an exception throwing serde with the checkpointManager\n    CheckpointV1Serde checkpointV1Serde = mock(CheckpointV1Serde.class);\n    doThrow(new RuntimeException(""serde failed"")).when(checkpointV1Serde).fromBytes(any());\n    KafkaCheckpointManager checkpointManager =\n        new KafkaCheckpointManager(CHECKPOINT_SPEC, this.systemFactory, false, config(), this.metricsRegistry,\n            checkpointV1Serde, CHECKPOINT_V2_SERDE, KAFKA_CHECKPOINT_LOG_KEY_SERDE);\n    checkpointManager.register(TASK0);\n\n    // expect the read to succeed in spite of the exception from ExceptionThrowingSerde\n    assertNull(checkpointManager.readLastCheckpoint(TASK0));\n  }\n']",mock;spite;Exceptions;register;SERDE;On;Serde;Exception;Kafka;succeed,1.862645149230957e-09;9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.5177178382873535, -4.989119529724121, -5.403349876403809, -6.477358341217041, -5.462296962738037, -0.021335843950510025]",0.9788901805877686
1,"['  @Test\n  public void testStart() {\n    setupSystemFactory(config());\n    String oldestOffset = ""1"";\n    String newestOffset = ""2"";\n    SystemStreamMetadata checkpointTopicMetadata = new SystemStreamMetadata(CHECKPOINT_TOPIC,\n        ImmutableMap.of(new Partition(0), new SystemStreamPartitionMetadata(oldestOffset, newestOffset,\n            Integer.toString(Integer.parseInt(newestOffset) + 1))));\n    when(this.systemAdmin.getSystemStreamMetadata(Collections.singleton(CHECKPOINT_TOPIC))).thenReturn(\n        ImmutableMap.of(CHECKPOINT_TOPIC, checkpointTopicMetadata));\n\n    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());\n\n    checkpointManager.start();\n\n    verify(this.systemProducer).start();\n    verify(this.systemAdmin).start();\n    verify(this.systemConsumer).register(CHECKPOINT_SSP, oldestOffset);\n    verify(this.systemConsumer).start();\n  }\n']",Topic;Kafka;singleton;Partition;newest;Stream;oldest;CHECKPOINT;Producer;Map,1.5133991837501526e-09;1.280568540096283e-09;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.530825138092041, -4.996808052062988, -5.3956732749938965, -6.457520484924316, -5.487957000732422, -0.021186232566833496]",0.9790366291999817
1,"['  @Test\n  public void testRegister() {\n    setupSystemFactory(config());\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());\n    kafkaCheckpointManager.register(TASK0);\n    verify(this.systemProducer).register(TASK0.getTaskName());\n  }\n']",Register;afka;register;Checkpoint;get;Checkpoint;Manager;true;Factory;Checkpoint,1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;8.440110832452774e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.533753871917725, -4.96685791015625, -5.4073638916015625, -6.501250267028809, -5.451122283935547, -0.021420441567897797]",0.9788073301315308
1,"['  @Test\n  public void testStop() {\n    setupSystemFactory(config());\n    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());\n    checkpointManager.stop();\n    verify(this.systemProducer).stop();\n    // default configuration for stopConsumerAfterFirstRead means that consumer is not stopped here\n    verify(this.systemConsumer, never()).stop();\n    verify(this.systemAdmin).stop();\n  }\n']",verify;stop;Checkpoint;stopped;Factory;Admin;that;Read;Manager;consumer,8.149072527885437e-10;8.149072527885437e-10;6.548361852765083e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.539637565612793, -4.988559722900391, -5.428647518157959, -6.521973133087158, -5.484428882598877, -0.020972512662410736]",0.9792459011077881
1,"['  @Test\n  public void testWriteCheckpointShouldRecreateSystemProducerOnFailure() {\n    setupSystemFactory(config());\n    SystemProducer secondKafkaProducer = mock(SystemProducer.class);\n    // override default mock behavior to return a second producer on the second call to create a producer\n    when(this.systemFactory.getProducer(CHECKPOINT_SYSTEM, config(), this.metricsRegistry,\n        KafkaCheckpointManager.class.getSimpleName())).thenReturn(this.systemProducer, secondKafkaProducer);\n    // first producer throws an exception on flush\n    doThrow(new RuntimeException(""flush failed"")).when(this.systemProducer).flush(TASK0.getTaskName());\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());\n    kafkaCheckpointManager.register(TASK0);\n\n    CheckpointV1 checkpointV1 = buildCheckpointV1(INPUT_SSP0, ""0"");\n    kafkaCheckpointManager.writeCheckpoint(TASK0, checkpointV1);\n\n    // first producer should be stopped\n    verify(this.systemProducer).stop();\n    // register and start the second producer\n    verify(secondKafkaProducer).register(TASK0.getTaskName());\n    verify(secondKafkaProducer).start();\n    // check that the second producer was given the message to send out\n    ArgumentCaptor<OutgoingMessageEnvelope> outgoingMessageEnvelopeArgumentCaptor =\n        ArgumentCaptor.forClass(OutgoingMessageEnvelope.class);\n    verify(secondKafkaProducer).send(eq(TASK0.getTaskName()), outgoingMessageEnvelopeArgumentCaptor.capture());\n    assertEquals(CHECKPOINT_SSP, outgoingMessageEnvelopeArgumentCaptor.getValue().getSystemStream());\n    assertEquals(new KafkaCheckpointLogKey(KafkaCheckpointLogKey.CHECKPOINT_V1_KEY_TYPE, TASK0, GROUPER_FACTORY_CLASS),\n        KAFKA_CHECKPOINT_LOG_KEY_SERDE.fromBytes((byte[]) outgoingMessageEnvelopeArgumentCaptor.getValue().getKey()));\n    assertEquals(checkpointV1,\n        CHECKPOINT_V1_SERDE.fromBytes((byte[]) outgoingMessageEnvelopeArgumentCaptor.getValue().getMessage()));\n    verify(secondKafkaProducer).flush(TASK0.getTaskName());\n  }\n']",Checkpoint;Kafka;the;message;On;Argument;register;that;was;stop,1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10,5,5,"[-5.457430362701416, -5.0749192237854, -5.426066875457764, -6.4469404220581055, -5.412855625152588, -0.021183546632528305]",0.9790392518043518
1,"['  @Test\n  public void testCreateResources() {\n    setupSystemFactory(config());\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());\n    kafkaCheckpointManager.createResources();\n\n    verify(this.createResourcesSystemAdmin).start();\n    verify(this.createResourcesSystemAdmin).createStream(CHECKPOINT_SPEC);\n    verify(this.createResourcesSystemAdmin).validateStream(CHECKPOINT_SPEC);\n    verify(this.createResourcesSystemAdmin).stop();\n  }\n']",Resources;CHECKPOINT;setup;start;afka;verify;Resources;Resources;SPEC;verify,1.5133991837501526e-09;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.532175540924072, -4.998349189758301, -5.419921398162842, -6.508490562438965, -5.468210220336914, -0.021063795313239098]",0.979156494140625
1,"['  @Test\n  public void testCreateResourcesSkipValidation() {\n    setupSystemFactory(config());\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(false, config());\n    kafkaCheckpointManager.createResources();\n\n    verify(this.createResourcesSystemAdmin).start();\n    verify(this.createResourcesSystemAdmin).createStream(CHECKPOINT_SPEC);\n    verify(this.createResourcesSystemAdmin, never()).validateStream(CHECKPOINT_SPEC);\n    verify(this.createResourcesSystemAdmin).stop();\n  }\n']",Resources;Create;CHECKPOINT;Checkpoint;afka;System;Manager;false;never;CHECKPOINT,1.1059455573558807e-09;9.313225746154785e-10;8.003553375601768e-10;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.5186944007873535, -4.995688438415527, -5.414460182189941, -6.50681734085083, -5.465604305267334, -0.02117549441754818]",0.9790471196174622
1,"['  @Test\n  public void testReadEmpty() throws InterruptedException {\n    setupSystemFactory(config());\n    setupConsumer(ImmutableList.of());\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());\n    kafkaCheckpointManager.register(TASK0);\n    assertNull(kafkaCheckpointManager.readLastCheckpoint(TASK0));\n  }\n']",register;Consumer;Interrupted;AS;Empty;afka;Immutable;setup;Read;setup,2.0954757928848267e-09;1.7462298274040222e-09;1.7462298274040222e-09;1.0477378964424133e-09;9.313225746154785e-10;8.440110832452774e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10,5,5,"[-5.5277791023254395, -4.985452651977539, -5.442954063415527, -6.5289740562438965, -5.48267936706543, -0.02097531408071518]",0.9792431592941284
1,"['  @Test\n  public void testReadCheckpointV1() throws InterruptedException {\n    setupSystemFactory(config());\n    CheckpointV1 checkpointV1 = buildCheckpointV1(INPUT_SSP0, ""0"");\n    List<IncomingMessageEnvelope> checkpointEnvelopes =\n        ImmutableList.of(newCheckpointV1Envelope(TASK0, checkpointV1, ""0""));\n    setupConsumer(checkpointEnvelopes);\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());\n    kafkaCheckpointManager.register(TASK0);\n    Checkpoint actualCheckpoint = kafkaCheckpointManager.readLastCheckpoint(TASK0);\n    assertEquals(checkpointV1, actualCheckpoint);\n  }\n']",Read;INPUT;Envelop;System;register;Exception;Message;of;Checkpoint;List,6.984919309616089e-10;6.693881005048752e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.710738383233547e-10;3.4924596548080444e-10,5,5,"[-5.503730773925781, -5.023762226104736, -5.420962810516357, -6.49567174911499, -5.449936389923096, -0.021101847290992737]",0.9791192412376404
1,"['  @Test\n  public void testReadIgnoreCheckpointV2WhenV1Enabled() throws InterruptedException {\n    setupSystemFactory(config());\n    CheckpointV1 checkpointV1 = buildCheckpointV1(INPUT_SSP0, ""0"");\n    List<IncomingMessageEnvelope> checkpointEnvelopes =\n        ImmutableList.of(newCheckpointV1Envelope(TASK0, checkpointV1, ""0""),\n            newCheckpointV2Envelope(TASK0, buildCheckpointV2(INPUT_SSP0, ""1""), ""1""));\n    setupConsumer(checkpointEnvelopes);\n    // default is to only read CheckpointV1\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());\n    kafkaCheckpointManager.register(TASK0);\n    Checkpoint actualCheckpoint = kafkaCheckpointManager.readLastCheckpoint(TASK0);\n    assertEquals(checkpointV1, actualCheckpoint);\n  }\n']",actual;checkpoint;Kafka;Ignore;checkpoint;Read;register;checkpoint;INPUT;Consumer,1.979060471057892e-09;1.57160684466362e-09;1.280568540096283e-09;1.2223608791828156e-09;1.0186340659856796e-09;6.984919309616089e-10;5.820766091346741e-10;5.748006515204906e-10;5.529727786779404e-10;5.238689482212067e-10,5,5,"[-5.492572784423828, -4.998373985290527, -5.38377571105957, -6.470062732696533, -5.455686569213867, -0.021507367491722107]",0.9787223935127258
1,"['  @Test\n  public void testReadCheckpointV2() throws InterruptedException {\n    Config config = config(ImmutableMap.of(TaskConfig.CHECKPOINT_READ_VERSIONS, ""1,2""));\n    setupSystemFactory(config);\n    CheckpointV2 checkpointV2 = buildCheckpointV2(INPUT_SSP0, ""0"");\n    List<IncomingMessageEnvelope> checkpointEnvelopes =\n        ImmutableList.of(newCheckpointV2Envelope(TASK0, checkpointV2, ""0""));\n    setupConsumer(checkpointEnvelopes);\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config);\n    kafkaCheckpointManager.register(TASK0);\n    Checkpoint actualCheckpoint = kafkaCheckpointManager.readLastCheckpoint(TASK0);\n    assertEquals(checkpointV2, actualCheckpoint);\n  }\n']",Interrupted;INPUT;Consumer;build;Incoming;checkpoint;Config;Checkpoint;READ;checkpoint,1.6880221664905548e-09;1.280568540096283e-09;1.1641532182693481e-09;9.604264050722122e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.503849983215332, -4.995919704437256, -5.401198863983154, -6.488394260406494, -5.447133541107178, -0.021404806524515152]",0.978822648525238
1,"['  @Test\n  public void testReadCheckpointPriority() throws InterruptedException {\n    Config config = config(ImmutableMap.of(TaskConfig.CHECKPOINT_READ_VERSIONS, ""2,1""));\n    setupSystemFactory(config);\n    CheckpointV2 checkpointV2 = buildCheckpointV2(INPUT_SSP0, ""1"");\n    List<IncomingMessageEnvelope> checkpointEnvelopes =\n        ImmutableList.of(newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, ""0""), ""0""),\n            newCheckpointV2Envelope(TASK0, checkpointV2, ""1""));\n    setupConsumer(checkpointEnvelopes);\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config);\n    kafkaCheckpointManager.register(TASK0);\n    Checkpoint actualCheckpoint = kafkaCheckpointManager.readLastCheckpoint(TASK0);\n    assertEquals(checkpointV2, actualCheckpoint);\n  }\n']",INPUT;Kafka;Checkpoint;Read;afka;System;Checkpoint;Last;SP;checkpoint,1.5133991837501526e-09;1.0477378964424133e-09;8.440110832452774e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.493588447570801, -4.9873433113098145, -5.371450424194336, -6.430435657501221, -5.4466352462768555, -0.021741269156336784]",0.9784932732582092
1,"['  @Test\n  public void testReadMultipleCheckpointsMultipleSSP() throws InterruptedException {\n    setupSystemFactory(config());\n    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());\n    checkpointManager.register(TASK0);\n    checkpointManager.register(TASK1);\n\n    // mock out a consumer that returns 5 checkpoint IMEs for each SSP\n    int newestOffset = 5;\n    int checkpointOffsetCounter = 0;\n    List<List<IncomingMessageEnvelope>> pollOutputs = new ArrayList<>();\n    for (int offset = 1; offset <= newestOffset; offset++) {\n      pollOutputs.add(ImmutableList.of(\n          // use regular offset value for INPUT_SSP0\n          newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, Integer.toString(offset)),\n              Integer.toString(checkpointOffsetCounter++)),\n          // use (offset * 2) value for INPUT_SSP1 so offsets are different from INPUT_SSP0\n          newCheckpointV1Envelope(TASK1, buildCheckpointV1(INPUT_SSP1, Integer.toString(offset * 2)),\n              Integer.toString(checkpointOffsetCounter++))));\n    }\n    setupConsumerMultiplePoll(pollOutputs);\n\n    assertEquals(buildCheckpointV1(INPUT_SSP0, Integer.toString(newestOffset)),\n        checkpointManager.readLastCheckpoint(TASK0));\n    assertEquals(buildCheckpointV1(INPUT_SSP1, Integer.toString(newestOffset * 2)),\n        checkpointManager.readLastCheckpoint(TASK1));\n    // check expected number of polls (+1 is for the final empty poll), and the checkpoint is the newest message\n    verify(this.systemConsumer, times(newestOffset + 1)).poll(ImmutableSet.of(CHECKPOINT_SSP),\n        SystemConsumer.BLOCK_ON_OUTSTANDING_MESSAGES);\n  }\n']",INPUT;Multiple;Last;Envelop;Checkpoint;Checkpoint;register;checkpoint;new;Output,1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;9.89530235528946e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.505967617034912, -4.859097480773926, -5.34906530380249, -6.433863162994385, -5.494900226593018, -0.022538572549819946]",0.9777135252952576
1,"['  @Test\n  public void testReadMultipleCheckpointsUpgradeCheckpointVersion() throws InterruptedException {\n    Config config = config(ImmutableMap.of(TaskConfig.CHECKPOINT_READ_VERSIONS, ""2,1""));\n    setupSystemFactory(config);\n    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config);\n    kafkaCheckpointManager.register(TASK0);\n    kafkaCheckpointManager.register(TASK1);\n\n    List<IncomingMessageEnvelope> checkpointEnvelopesV1 =\n        ImmutableList.of(newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, ""0""), ""0""),\n            newCheckpointV1Envelope(TASK1, buildCheckpointV1(INPUT_SSP1, ""0""), ""1""));\n    CheckpointV2 ssp0CheckpointV2 = buildCheckpointV2(INPUT_SSP0, ""10"");\n    CheckpointV2 ssp1CheckpointV2 = buildCheckpointV2(INPUT_SSP1, ""11"");\n    List<IncomingMessageEnvelope> checkpointEnvelopesV2 =\n        ImmutableList.of(newCheckpointV2Envelope(TASK0, ssp0CheckpointV2, ""2""),\n            newCheckpointV2Envelope(TASK1, ssp1CheckpointV2, ""3""));\n    setupConsumerMultiplePoll(ImmutableList.of(checkpointEnvelopesV1, checkpointEnvelopesV2));\n    assertEquals(ssp0CheckpointV2, kafkaCheckpointManager.readLastCheckpoint(TASK0));\n    assertEquals(ssp1CheckpointV2, kafkaCheckpointManager.readLastCheckpoint(TASK1));\n    // 2 polls for actual checkpoints, 1 final empty poll\n    verify(this.systemConsumer, times(3)).poll(ImmutableSet.of(CHECKPOINT_SSP),\n        SystemConsumer.BLOCK_ON_OUTSTANDING_MESSAGES);\n  }\n']",Interrupted;Read;VERSIONS;actual;polls;Upgrade;afka;Checkpoints;Message;Multiple,6.984919309616089e-09;2.7939677238464355e-09;2.444721758365631e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.6298145055770874e-09,5,5,"[-5.4761834144592285, -4.955756187438965, -5.362721920013428, -6.430714130401611, -5.462343215942383, -0.022011499851942062]",0.9782289862632751
1,"['  @Test\n  public void testValidMpsEventCreation() throws CTPException {\n    List<Event> events = getExistingEvents();\n    Instant timestamp = Instant.now().plus(2, ChronoUnit.DAYS);\n    Event newMpsEvent = new Event();\n    newMpsEvent.setTag((EventService.Tag.mps.toString()));\n    newMpsEvent.setTimestamp(Timestamp.from(timestamp));\n    validator.validate(events, newMpsEvent, CollectionExerciseDTO.CollectionExerciseState.CREATED);\n  }\n']",TPException;Exercise;Chron;Tag;ps;Event;ps;Timestamp;ps;new,1.6880221664905548e-09;1.6589183360338211e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.496606826782227, -5.063788414001465, -5.448748588562012, -6.562488555908203, -5.479531288146973, -0.02051655761897564]",0.9796924591064453
1,"['  @Test\n  public void testValidGoLiveEventCreation() throws CTPException {\n    List<Event> events = getExistingEvents();\n    Instant timestamp = Instant.now().plus(4, ChronoUnit.DAYS);\n    Event newGoLiveEvent = new Event();\n    newGoLiveEvent.setTag((EventService.Tag.go_live.toString()));\n    newGoLiveEvent.setTimestamp(Timestamp.from(timestamp));\n    validator.validate(\n        events, newGoLiveEvent, CollectionExerciseDTO.CollectionExerciseState.CREATED);\n  }\n']",Event;Chron;Timestamp;Collection;now;Go;to;Timestamp;new;validator,1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.966285243630409e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.496395111083984, -5.013973712921143, -5.411974906921387, -6.5258469581604, -5.487842082977295, -0.021030178293585777]",0.979189395904541
1,"['  @Test\n  public void testValidReturnByEventCreation() throws CTPException {\n    List<Event> events = getExistingEvents();\n    Instant timestamp = Instant.now().plus(6, ChronoUnit.DAYS);\n    Event newReturnByEvent = new Event();\n    newReturnByEvent.setTag((EventService.Tag.return_by.toString()));\n    newReturnByEvent.setTimestamp(Timestamp.from(timestamp));\n    validator.validate(\n        events, newReturnByEvent, CollectionExerciseDTO.CollectionExerciseState.CREATED);\n  }\n']",TPException;Return;Collection;Event;validate;plus;CREATED;Existing;timestamp;Event,1.076841726899147e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.486789226531982, -4.966588497161865, -5.369295120239258, -6.4882378578186035, -5.4748148918151855, -0.021711640059947968]",0.9785223603248596
1,"['  @Test\n  public void testValidExerciseEndEventCreation() throws CTPException {\n    List<Event> events = getExistingEvents();\n    Instant timestamp = Instant.now().plus(8, ChronoUnit.DAYS);\n    Event newExerciseEndEvent = new Event();\n    newExerciseEndEvent.setTag((EventService.Tag.exercise_end.toString()));\n    newExerciseEndEvent.setTimestamp(Timestamp.from(timestamp));\n    validator.validate(\n        events, newExerciseEndEvent, CollectionExerciseDTO.CollectionExerciseState.CREATED);\n  }\n']",timestamp;validator;Chron;Instant;Valid;timestamp;Exercise;Event;Events;Event,8.149072527885437e-10;6.693881005048752e-10;6.693881005048752e-10;5.966285243630409e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10,5,5,"[-5.486575126647949, -5.025062084197998, -5.370597839355469, -6.476532936096191, -5.458000183105469, -0.021392904222011566]",0.9788342714309692
1,"['  @Test\n  public void isEventValidator() {\n    assertThat(reminderValidator, instanceOf(EventValidator.class));\n  }\n']",That;instance;Validator;class;Event;reminder;Event;Validator;Validator,5.238689482212067e-10;4.656612873077393e-10;1.7462298274040222e-10;-5.820766091346741e-11;-5.529727786779404e-10;-6.984919309616089e-10;-1.1641532182693481e-09;-1.4842953532934189e-09;-1.6298145055770874e-09,5,5,"[-5.597080230712891, -4.840249538421631, -5.438936233520508, -6.547828197479248, -5.511943340301514, -0.02166229672729969]",0.9785706400871277
1,"['  @Test\n  public void returnTrueAndDoNothingIfNotReminder() throws CTPException {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now()));\n    final List<Event> events = new ArrayList<>();\n    reminderValidator.validate(events, mpsEvent, CollectionExerciseState.CREATED);\n\n    verify(eventDateOrderChecker, never()).isEventDatesInOrder(anyList());\n  }\n']",Reminder;ps;Tag;Date;Order;ps;ps;Instant;ps;Timestamp,1.9208528101444244e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10,5,5,"[-5.518233776092529, -5.0208563804626465, -5.434304714202881, -6.540982723236084, -5.49047327041626, -0.02075898088514805]",0.9794549942016602
1,"['  @Test\n  public void testCanUpdateReminderWhenReadyForLive() throws CTPException {\n    final Event reminderEvent = new Event();\n    reminderEvent.setTag(Tag.reminder.toString());\n    reminderEvent.setTimestamp(Timestamp.from(Instant.now()));\n\n    final List<Event> events = new ArrayList<>();\n    reminderValidator.validate(events, reminderEvent, CollectionExerciseState.READY_FOR_LIVE);\n  }\n']",Reminder;Event;Instant;Update;new;final;Timestamp;reminder;reminder;Collection,1.280568540096283e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.538527011871338, -5.019565105438232, -5.406190872192383, -6.523508071899414, -5.491477012634277, -0.020834172144532204]",0.9793813824653625
1,"['  @Test\n  public void testCanUpdateReminderWhenLive() throws CTPException {\n    final Event reminderEvent = new Event();\n    reminderEvent.setTag(Tag.reminder.toString());\n    reminderEvent.setTimestamp(Timestamp.from(Instant.now()));\n\n    final List<Event> events = new ArrayList<>();\n\n    reminderValidator.validate(events, reminderEvent, CollectionExerciseState.LIVE);\n  }\n']",Timestamp;Validator;Instant;TPException;Timestamp;new;reminder;Event;IVE;Can,1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.535384654998779, -5.01591682434082, -5.415990352630615, -6.530900478363037, -5.495020389556885, -0.020800897851586342]",0.9794139266014099
1,"['  @Test\n  public void testCantUpdateReminderThatHasPastAndCollectionExerciseInLockedState() {\n    final Event reminder = new Event();\n    reminder.setTag((Tag.reminder.toString()));\n    reminder.setTimestamp(Timestamp.from(Instant.now().minus(2, ChronoUnit.DAYS)));\n\n    final Event newReminder = new Event();\n    newReminder.setTag((Tag.reminder.toString()));\n    newReminder.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final List<Event> events = Collections.singletonList(reminder);\n    CTPException actualException = null;\n    try {\n      reminderValidator.validate(events, newReminder, CollectionExerciseState.LIVE);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(""Reminder cannot be set in the past"", actualException.getMessage());\n  }\n']",TPException;new;Exercise;Tag;That;Instant;plus;Reminder;Timestamp;Exception,1.6298145055770874e-09;9.022187441587448e-10;9.022187441587448e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.493147850036621, -5.066651344299316, -5.443943977355957, -6.531883239746094, -5.46888542175293, -0.020624231547117233]",0.9795870184898376
1,"['  @Test\n  public void testCanUpdateReminderThatHasPastAndCollectionExerciseNotInLockedState()\n      throws CTPException {\n    final Event reminder = new Event();\n    reminder.setTag((Tag.reminder.toString()));\n    reminder.setTimestamp(Timestamp.from(Instant.now().minus(2, ChronoUnit.DAYS)));\n\n    final Event newReminder = new Event();\n    newReminder.setTag((Tag.reminder.toString()));\n    newReminder.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final List<Event> events = Collections.singletonList(reminder);\n\n    reminderValidator.validate(events, newReminder, CollectionExerciseState.SCHEDULED);\n  }\n']",Chron;Has;from;CHEDULED;ocked;Timestamp;Instant;Reminder;now;Timestamp,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.5303955078125, -5.017439365386963, -5.423378944396973, -6.525156021118164, -5.499073028564453, -0.020769022405147552]",0.9794452786445618
1,"['  @Test\n  public void testValidReminderEventCreation() throws CTPException {\n    final Event goLive = new Event();\n    goLive.setTag((Tag.go_live.toString()));\n    goLive.setTimestamp(Timestamp.from(Instant.now()));\n\n    final Event reminder = new Event();\n    reminder.setTag((Tag.reminder.toString()));\n    reminder.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final Event exerciseEnd = new Event();\n    exerciseEnd.setTag((Tag.exercise_end.toString()));\n    exerciseEnd.setTimestamp(Timestamp.from(Instant.now().plus(4, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(goLive, exerciseEnd);\n\n    reminderValidator.validate(events, reminder, CollectionExerciseState.CREATED);\n  }\n']",Reminder;Valid;go;go;final;Chron;Live;DAY;Timestamp;exercise,1.1932570487260818e-09;9.313225746154785e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.491034030914307, -5.063230991363525, -5.421945571899414, -6.530523300170898, -5.473352432250977, -0.020736096426844597]",0.9794774055480957
1,"['  @Test\n  public void testReminderAfterExerciseEndInvalid() {\n    final Event reminderEvent = new Event();\n    reminderEvent.setTag(Tag.reminder3.toString());\n    reminderEvent.setTimestamp(Timestamp.from(Instant.now().plus(4, ChronoUnit.DAYS)));\n\n    final Event exerciseEnd = new Event();\n    exerciseEnd.setTag((Tag.exercise_end.toString()));\n    exerciseEnd.setTimestamp(Timestamp.from(Instant.now().plus(3, ChronoUnit.DAYS)));\n\n    final List<Event> events = Collections.singletonList(exerciseEnd);\n    CTPException actualException = null;\n    try {\n      reminderValidator.validate(events, reminderEvent, CollectionExerciseState.SCHEDULED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Reminder must take place during collection exercise period"", actualException.getMessage());\n  }\n']",Reminder;Exercise;plus;new;Chron;reminder;CHEDULED;now;exercise;Tag,8.731149137020111e-10;7.275957614183426e-10;7.275957614183426e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.473952770233154, -5.089953422546387, -5.459033966064453, -6.538486003875732, -5.450046539306641, -0.020563388243317604]",0.979646623134613
1,"['  @Test\n  public void testReminderBeforeGoliveInvalid() {\n    final Event goLive = new Event();\n    goLive.setTag((Tag.go_live.toString()));\n    goLive.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n    final List<Event> events = Collections.singletonList(goLive);\n\n    final Event reminderEvent = new Event();\n    reminderEvent.setTag(Tag.reminder.toString());\n    reminderEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.DAYS)));\n\n    CTPException actualException = null;\n    try {\n      reminderValidator.validate(events, reminderEvent, CollectionExerciseState.SCHEDULED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Reminder must take place during collection exercise period"", actualException.getMessage());\n  }\n']",CT;TPException;CHEDULED;exercise;List;Tag;Timestamp;now;new;period,1.862645149230957e-09;1.862645149230957e-09;1.382431946694851e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.484873294830322, -5.070065975189209, -5.433870792388916, -6.525006294250488, -5.4690351486206055, -0.02069137431681156]",0.9795212149620056
1,"['  @Test\n  public void testReminder2WrongOrderEventCreation() {\n    final Event reminder = new Event();\n    reminder.setTag((Tag.reminder.toString()));\n    reminder.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n    final Event reminder2 = new Event();\n    reminder2.setTag((Tag.reminder2.toString()));\n    reminder2.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.DAYS)));\n    final List<Event> events = new ArrayList<>();\n    events.add(reminder);\n    CTPException actualException = null;\n    try {\n      reminderValidator.validate(events, reminder2, CollectionExerciseState.CREATED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Collection exercise events must be set sequentially"", actualException.getMessage());\n  }\n']",Reminder;Timestamp;Exercise;Instant;reminder;Order;events;Unit;reminder;Message,1.5133991837501526e-09;1.0186340659856796e-09;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.4377946853637695, -5.095727443695068, -5.410222053527832, -6.472540378570557, -5.4207963943481445, -0.021133244037628174]",0.9790884852409363
1,"['  @Test\n  public void testReminder3WrongOrderEventCreation() {\n    final Event reminder2 = new Event();\n    reminder2.setTag((Tag.reminder2.toString()));\n    reminder2.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n    final Event reminder3 = new Event();\n    reminder3.setTag((Tag.reminder3.toString()));\n    reminder3.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.DAYS)));\n    final List<Event> events = new ArrayList<>();\n    events.add(reminder2);\n    CTPException actualException = null;\n    try {\n      reminderValidator.validate(events, reminder3, CollectionExerciseState.CREATED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Collection exercise events must be set sequentially"", actualException.getMessage());\n  }\n']",TPException;Exception;Instant;plus;Order;reminder;Array;sequentially;actual;new,1.280568540096283e-09;6.693881005048752e-10;5.966285243630409e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.471133232116699, -5.091739654541016, -5.456070423126221, -6.537004470825195, -5.453804969787598, -0.020562920719385147]",0.9796470403671265
1,"['  @Test\n  public void isEventValidator() {\n    assertThat(mandatoryValidator, instanceOf(EventValidator.class));\n  }\n']",instance;Validator;Validator;class;mandatory;Event;Event;That;Validator,9.313225746154785e-10;8.731149137020111e-10;6.402842700481415e-10;2.6193447411060333e-10;1.4551915228366852e-10;-2.3283064365386963e-10;-1.1350493878126144e-09;-1.2369127944111824e-09;-2.561137080192566e-09,5,5,"[-5.591161251068115, -4.8496270179748535, -5.437138557434082, -6.547316551208496, -5.512721061706543, -0.021614933386445045]",0.9786170125007629
1,"['  @Test\n  public void returnTrueAndDoNothingIfNotReminder() throws CTPException {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.reminder.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now()));\n    final List<Event> events = new ArrayList<>();\n    mandatoryValidator.validate(events, mpsEvent, CollectionExerciseState.CREATED);\n\n    verify(eventDateOrderChecker, never()).isEventDatesInOrder(anyList());\n  }\n']",Reminder;Exercise;ates;ps;verify;Event;Date;set;Instant;never,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.518805027008057, -5.020793437957764, -5.441843509674072, -6.546558856964111, -5.490234375, -0.020716479048132896]",0.9794966578483582
1,"['  @Test\n  public void testValidMpsEventCreation() throws CTPException {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n    final List<Event> events = new ArrayList<>();\n    mandatoryValidator.validate(events, mpsEvent, CollectionExerciseState.CREATED);\n  }\n']",Chron;Timestamp;TPException;ps;ps;ps;Array;events;CREATED;set,2.7939677238464355e-09;2.6775524020195007e-09;2.2992026060819626e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.521244525909424, -5.033518314361572, -5.429121494293213, -6.554243087768555, -5.495871067047119, -0.02064303122460842]",0.979568600654602
1,"['  @Test\n  public void testValidGoLiveEventCreation() throws CTPException {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final Event goLiveEvent = new Event();\n    goLiveEvent.setTag((Tag.go_live.toString()));\n    goLiveEvent.setTimestamp(Timestamp.from(Instant.now().plus(4, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(mpsEvent);\n\n    mandatoryValidator.validate(events, goLiveEvent, CollectionExerciseState.CREATED);\n  }\n']",Go;events;Live;Validator;Timestamp;Valid;ps;ps;DAY;from,1.862645149230957e-09;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.001776687800884e-10,5,5,"[-5.492385387420654, -5.06539249420166, -5.441445350646973, -6.553982734680176, -5.477967739105225, -0.020575067028403282]",0.9796351790428162
1,"['  @Test\n  public void testValidReturnByEventCreation() throws CTPException {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final Event goLiveEvent = new Event();\n    goLiveEvent.setTag((Tag.go_live.toString()));\n    goLiveEvent.setTimestamp(Timestamp.from(Instant.now().plus(4, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(mpsEvent, goLiveEvent);\n\n    final Event returnByEvent = new Event();\n    returnByEvent.setTag((Tag.return_by.toString()));\n    returnByEvent.setTimestamp(Timestamp.from(Instant.now().plus(6, ChronoUnit.DAYS)));\n\n    mandatoryValidator.validate(events, returnByEvent, CollectionExerciseState.CREATED);\n  }\n']",Valid;Return;Instant;List;Timestamp;State;DAY;ps;events;plus,2.561137080192566e-09;1.862645149230957e-09;1.0477378964424133e-09;5.820766091346741e-10;5.311449058353901e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.473881721496582, -5.0821027755737305, -5.442322731018066, -6.543947219848633, -5.468695163726807, -0.020597372204065323]",0.9796133041381836
1,"['  @Test\n  public void testInvalidGoLiveEventCreation() {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(10, ChronoUnit.DAYS)));\n\n    final Event goLive = new Event();\n    goLive.setTag((Tag.go_live.toString()));\n    goLive.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(mpsEvent);\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, goLive, CollectionExerciseState.CREATED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Collection exercise events must be set sequentially"", actualException.getMessage());\n  }\n']",Instant;Timestamp;Exercise;ps;Validator;Event;Event;DAY;DAY;set,7.275957614183426e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.470413684844971, -5.079817295074463, -5.4452385902404785, -6.530349254608154, -5.468847751617432, -0.020633339881896973]",0.9795780777931213
1,"['  @Test\n  public void testInvalidReturnByEventCreation() {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final Event goLiveEvent = new Event();\n    goLiveEvent.setTag((Tag.go_live.toString()));\n    goLiveEvent.setTimestamp(Timestamp.from(Instant.now().plus(4, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(mpsEvent, goLiveEvent);\n\n    final Event returnByEvent = new Event();\n    returnByEvent.setTag((Tag.return_by.toString()));\n    returnByEvent.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, returnByEvent, CollectionExerciseState.CREATED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Collection exercise events must be set sequentially"", actualException.getMessage());\n  }\n']",TPException;Creation;Instant;Chron;plus;Event;expected;By;by;sequentially,9.167706593871117e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.477563858032227, -5.053849220275879, -5.410075664520264, -6.502448081970215, -5.464757919311523, -0.020987454801797867]",0.9792313575744629
1,"['  @Test\n  public void testMandatoryEventsCannotBeChangedIfCollectionExerciseIsLive() {\n    final List<Event> events = new ArrayList<>();\n\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.MINUTES)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, mpsEvent, CollectionExerciseState.LIVE);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Mandatory events cannot be changed if collection exercise is set to live, executed, validated or locked"",\n        actualException.getMessage());\n  }\n']",annot;Changed;from;new;Mandatory;Events;now;IVE;set;Exercise,5.587935447692871e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.489278793334961, -5.046070575714111, -5.4229736328125, -6.5076494216918945, -5.467263221740723, -0.020911341533064842]",0.9793059229850769
1,"['  @Test\n  public void testMandatoryEventsCannotBeChangedIfCollectionExerciseIsValidated() {\n    final List<Event> events = new ArrayList<>();\n\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.MINUTES)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, mpsEvent, CollectionExerciseState.VALIDATED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Mandatory events cannot be changed if collection exercise is set to live, executed, validated or locked"",\n        actualException.getMessage());\n  }\n']",Timestamp;Tag;exercise;Validator;Unit;Event;annot;now;events;ps,8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.492730140686035, -5.052525043487549, -5.426899433135986, -6.505814552307129, -5.464371681213379, -0.02085215039551258]",0.9793638586997986
1,"['  @Test\n  public void testMandatoryEventsCannotBeChangedIfCollectionExerciseIsExecutionStarted() {\n    final List<Event> events = new ArrayList<>();\n\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.MINUTES)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, mpsEvent, CollectionExerciseState.EXECUTION_STARTED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Mandatory events cannot be changed if collection exercise is set to live, executed, validated or locked"",\n        actualException.getMessage());\n  }\n']",locked;Started;Exercise;plus;to;Tag;exercise;expected;Tag;Collection,6.984919309616089e-10;5.748006515204906e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.480963706970215, -5.051712512969971, -5.418335914611816, -6.509035110473633, -5.460199356079102, -0.020958853885531425]",0.9792591333389282
1,"['  @Test\n  public void testMandatoryEventsCannotBeChangedIfCollectionExerciseIsReadyForLive() {\n    final List<Event> events = new ArrayList<>();\n\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.MINUTES)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, mpsEvent, CollectionExerciseState.READY_FOR_LIVE);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Mandatory events cannot be changed if collection exercise is set to live, executed, validated or locked"",\n        actualException.getMessage());\n  }\n']",ps;ps;Mandatory;TPException;exercise;Live;ps;Tag;null;new,1.5133991837501526e-09;1.3969838619232178e-09;9.313225746154785e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.147295840084553e-10,5,5,"[-5.484612464904785, -5.04935359954834, -5.423177719116211, -6.507265567779541, -5.459760665893555, -0.02094157785177231]",0.979276180267334
1,"['  @Test\n  public void testMandatoryEventsCannotBeChangedIfCollectionExerciseIsExecuted() {\n    final List<Event> events = new ArrayList<>();\n\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.MINUTES)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, mpsEvent, CollectionExerciseState.EXECUTED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Mandatory events cannot be changed if collection exercise is set to live, executed, validated or locked"",\n        actualException.getMessage());\n  }\n']",ps;Timestamp;collection;Event;Instant;now;get;validated;ps;ps,1.3969838619232178e-09;1.3387762010097504e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.492798805236816, -5.049389362335205, -5.424935817718506, -6.509111404418945, -5.4654669761657715, -0.020871413871645927]",0.97934490442276
1,"['  @Test\n  public void testValidReturnByEventUpdate() throws CTPException {\n    final List<Event> events = createMandatoryEvents();\n\n    final Event returnByEvent = new Event();\n    returnByEvent.setTag(Tag.return_by.toString());\n    returnByEvent.setTimestamp(Timestamp.from(Instant.now().plus(5, ChronoUnit.DAYS)));\n\n    mandatoryValidator.validate(events, returnByEvent, CollectionExerciseState.SCHEDULED);\n  }\n']",Instant;from;Mandatory;List;Unit;return;Validator;create;Return;State,1.862645149230957e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.520845890045166, -5.012943744659424, -5.4104533195495605, -6.545127868652344, -5.4949951171875, -0.020884374156594276]",0.9793322086334229
1,"['  @Test\n  public void testValidExerciseEndEventUpdate() throws CTPException {\n    final List<Event> events = createMandatoryEvents();\n\n    final Event exerciseEndEvent = new Event();\n    exerciseEndEvent.setTag(Tag.exercise_end.toString());\n    exerciseEndEvent.setTimestamp(Timestamp.from(Instant.now().plus(10, ChronoUnit.DAYS)));\n\n    mandatoryValidator.validate(events, exerciseEndEvent, CollectionExerciseState.SCHEDULED);\n  }\n']",TPException;Update;Exercise;Instant;CHEDULED;Validator;DAY;Tag;Tag;Events,2.561137080192566e-09;1.3969838619232178e-09;1.1350493878126144e-09;9.313225746154785e-10;8.585629984736443e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;5.311449058353901e-10;5.238689482212067e-10,5,5,"[-5.531242370605469, -4.995282173156738, -5.39319372177124, -6.528972625732422, -5.488353252410889, -0.02109437622129917]",0.9791265726089478
1,"['  @Test\n  public void testInvalidMpsEventUpdate() {\n    final List<Event> events = createMandatoryEvents();\n\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag(Tag.mps.toString());\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now().plus(6, ChronoUnit.DAYS)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, mpsEvent, CollectionExerciseState.SCHEDULED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Collection exercise events must be set sequentially"", actualException.getMessage());\n  }\n']",Invalid;Timestamp;ps;Timestamp;Instant;now;Event;CT;Exercise;Equals,6.984919309616089e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.2223608791828156e-09;1.1059455573558807e-09;9.89530235528946e-10;9.313225746154785e-10;8.440110832452774e-10;7.566995918750763e-10,5,5,"[-5.500875473022461, -5.054475784301758, -5.434587478637695, -6.5413055419921875, -5.468855857849121, -0.02069837972521782]",0.9795143604278564
1,"['  @Test\n  public void testInvalidGoLiveEventUpdate() {\n    final List<Event> events = createMandatoryEvents();\n\n    final Event goLiveEvent = new Event();\n    goLiveEvent.setTag(Tag.go_live.toString());\n    goLiveEvent.setTimestamp(Timestamp.from(Instant.now().plus(8, ChronoUnit.DAYS)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, goLiveEvent, CollectionExerciseState.SCHEDULED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Collection exercise events must be set sequentially"", actualException.getMessage());\n  }\n']",CT;Chron;Invalid;get;now;Timestamp;Exercise;mandatory;Tag;TPException,3.725290298461914e-09;2.7939677238464355e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.4886040687561035, -5.026889801025391, -5.378098964691162, -6.478412628173828, -5.46621561050415, -0.021298034116625786]",0.9789271950721741
1,"['  @Test\n  public void testInvalidReturnByEventUpdate() {\n    final List<Event> events = createMandatoryEvents();\n\n    final Event returnByEvent = new Event();\n    returnByEvent.setTag(Tag.return_by.toString());\n    returnByEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.DAYS)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, returnByEvent, CollectionExerciseState.SCHEDULED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Collection exercise events must be set sequentially"", actualException.getMessage());\n  }\n']",CT;Invalid;DAY;Event;return;Tag;Collection;Event;Timestamp;return,2.3283064365386963e-09;1.7462298274040222e-09;1.6298145055770874e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.48442268371582, -5.032448768615723, -5.389193534851074, -6.484558582305908, -5.462986946105957, -0.02123081497848034]",0.9789928793907166
1,"['  @Test\n  public void testInvalidExerciseEndEventUpdate() {\n    final List<Event> events = createMandatoryEvents();\n\n    final Event exerciseEndEvent = new Event();\n    exerciseEndEvent.setTag(Tag.exercise_end.toString());\n    exerciseEndEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.DAYS)));\n\n    CTPException actualException = null;\n    try {\n      mandatoryValidator.validate(events, exerciseEndEvent, CollectionExerciseState.SCHEDULED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Collection exercise events must be set sequentially"", actualException.getMessage());\n  }\n']",plus;Mandatory;Chron;from;DAY;exercise;events;must;Events;Collection,8.731149137020111e-10;8.294591680169106e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.5266313552856445, -4.977801322937012, -5.386547088623047, -6.493622303009033, -5.498338222503662, -0.02127772755920887]",0.9789470434188843
1,"['  @Test\n  public void isEventValidator() {\n    assertThat(referencePeriodValidator, instanceOf(EventValidator.class));\n  }\n']",Period;Validator;instance;Validator;Event;Event;That;class;Validator;reference,1.862645149230957e-09;1.1059455573558807e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.572693824768066, -4.848629474639893, -5.4244794845581055, -6.548079013824463, -5.515166282653809, -0.021739402785897255]",0.978495180606842
1,"['  @Test\n  public void returnTrueAndDoNothingIfNotReferencePeriodEvent() throws CTPException {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now()));\n    final List<Event> events = new ArrayList<>();\n    referencePeriodValidator.validate(events, mpsEvent, CollectionExerciseState.CREATED);\n  }\n']",Tag;validate;List;Exercise;ps;Timestamp;Event;from;Event;Event,1.5133991837501526e-09;1.1059455573558807e-09;9.89530235528946e-10;9.74978320300579e-10;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;7.566995918750763e-10;6.693881005048752e-10;5.238689482212067e-10,5,5,"[-5.5347900390625, -4.9425458908081055, -5.40537691116333, -6.510416030883789, -5.516982078552246, -0.021307019516825676]",0.9789183735847473
1,"['  @Test\n  public void canUpdateReferencePeriodWhenCollectionExerciseReadyForLive() throws CTPException {\n    final Event referencePeriodStart = new Event();\n    referencePeriodStart.setTag(Tag.ref_period_end.toString());\n    referencePeriodStart.setTimestamp(Timestamp.from(Instant.now()));\n\n    final List<Event> events = new ArrayList<>();\n\n    referencePeriodValidator.validate(\n        events, referencePeriodStart, CollectionExerciseState.READY_FOR_LIVE);\n  }\n']",Instant;TPException;Timestamp;Timestamp;Validator;Update;Period;Reference;READ;events,1.5133991837501526e-09;1.5133991837501526e-09;9.167706593871117e-10;8.003553375601768e-10;6.984919309616089e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.540674686431885, -4.956995010375977, -5.396119117736816, -6.50031852722168, -5.511226654052734, -0.021260689944028854]",0.9789638519287109
1,"['  @Test\n  public void canUpdateReferencePeriodWhenCollectionExerciseLive() throws CTPException {\n    final Event referencePeriodStart = new Event();\n    referencePeriodStart.setTag(Tag.ref_period_start.toString());\n    referencePeriodStart.setTimestamp(Timestamp.from(Instant.now()));\n\n    final List<Event> events = new ArrayList<>();\n\n    referencePeriodValidator.validate(events, referencePeriodStart, CollectionExerciseState.LIVE);\n  }\n']",Instant;When;Collection;Validator;ref;Period;Tag;Exercise;Timestamp;Tag,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.544679164886475, -4.947425842285156, -5.391053199768066, -6.5012359619140625, -5.517449855804443, -0.021310053765773773]",0.978915274143219
1,"['  @Test\n  public void testReferenceStartCanBeSetInThePast() throws CTPException {\n    final Event refStart = new Event();\n    refStart.setTag((Tag.ref_period_start.toString()));\n    refStart.setTimestamp(Timestamp.from(Instant.now().minus(1, ChronoUnit.DAYS)));\n\n    final List<Event> events = new ArrayList<>();\n    referencePeriodValidator.validate(events, refStart, CollectionExerciseState.CREATED);\n  }\n']",TPException;Exercise;Reference;now;Timestamp;Past;Period;CREATED;The;Unit,2.561137080192566e-09;2.3283064365386963e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.539267539978027, -4.983932018280029, -5.389647483825684, -6.512282371520996, -5.511949062347412, -0.02108398824930191]",0.97913658618927
1,"['  @Test\n  public void testReferenceEndCanBeSetInThePast() throws CTPException {\n    final Event refEnd = new Event();\n    refEnd.setTag((Tag.ref_period_end.toString()));\n    refEnd.setTimestamp(Timestamp.from(Instant.now().minus(1, ChronoUnit.DAYS)));\n\n    final List<Event> events = new ArrayList<>();\n    referencePeriodValidator.validate(events, refEnd, CollectionExerciseState.CREATED);\n  }\n']",Chron;Set;TPException;Timestamp;end;Instant;End;Collection;events;Past,1.7462298274040222e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;7.275957614183426e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.5409088134765625, -5.012669086456299, -5.401849746704102, -6.517210960388184, -5.504286289215088, -0.020847247913479805]",0.9793685674667358
1,"['  @Test\n  public void testReferenceEndBeforeReferenceStartIsInvalid() {\n    final Event refEnd = new Event();\n    refEnd.setTag((Tag.ref_period_end.toString()));\n    refEnd.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.DAYS)));\n    final Event refStart = new Event();\n    refStart.setTag((Tag.ref_period_start.toString()));\n    refStart.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n    final List<Event> events = new ArrayList<>();\n    events.add(refEnd);\n    CTPException actualException = null;\n    try {\n      referencePeriodValidator.validate(events, refStart, CollectionExerciseState.CREATED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""Reference period end date must be after start date"", actualException.getMessage());\n  }\n']",Reference;Exercise;Collection;period;DAY;Before;Tag;End;Chron;validate,9.604264050722122e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.489345073699951, -5.0736985206604, -5.437673568725586, -6.517824172973633, -5.47495174407959, -0.020617807283997536]",0.9795932769775391
1,"['  @Test\n  public void isEventValidator() {\n    assertThat(nudgeEmailValidator, instanceOf(EventValidator.class));\n  }\n']",That;Validator;Event;Email;Validator;Validator;Event;instance;class;udge,1.1059455573558807e-09;1.0913936421275139e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;2.9103830456733704e-10;-8.731149137020111e-11;-1.1641532182693481e-10;-2.6193447411060333e-10;-8.149072527885437e-10,5,5,"[-5.5965800285339355, -4.845147609710693, -5.441329479217529, -6.549758434295654, -5.517637252807617, -0.02158786728978157]",0.9786434769630432
1,"['  @Test\n  public void returnTrueAndDoNothingIfNotNudge() throws CTPException {\n    final Event mpsEvent = new Event();\n    mpsEvent.setTag((EventService.Tag.mps.toString()));\n    mpsEvent.setTimestamp(Timestamp.from(Instant.now()));\n    final List<Event> events = new ArrayList<>();\n    nudgeEmailValidator.validate(\n        events, mpsEvent, CollectionExerciseDTO.CollectionExerciseState.CREATED);\n\n    verify(eventDateOrderChecker, never()).isEventDatesInOrder(anyList());\n  }\n']",Exercise;Date;Validator;Nothing;ps;udge;Service;Event;CREATED;final,9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.505640506744385, -5.032858848571777, -5.420415878295898, -6.529852867126465, -5.469533920288086, -0.020898500457406044]",0.979318380355835
1,"['  @Test\n  public void testCanUpdateNudgeWhenReadyForLive() throws CTPException {\n    final Event nudgeEvent = new Event();\n    nudgeEvent.setTag(EventService.Tag.nudge_email_0.toString());\n    nudgeEvent.setTimestamp(Timestamp.from(Instant.now()));\n\n    final List<Event> events = new ArrayList<>();\n    nudgeEmailValidator.validate(\n        events, nudgeEvent, CollectionExerciseDTO.CollectionExerciseState.READY_FOR_LIVE);\n  }\n']",Instant;Can;For;Timestamp;TO;Update;from;Timestamp;Tag;List,1.4842953532934189e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.513392448425293, -5.045297622680664, -5.421769618988037, -6.525107383728027, -5.4666337966918945, -0.020797744393348694]",0.9794171452522278
1,"['  @Test\n  public void testCanUpdateNudgeWhenLive() throws CTPException {\n    final Event nudgeEvent = new Event();\n    nudgeEvent.setTag(EventService.Tag.nudge_email_0.toString());\n    nudgeEvent.setTimestamp(Timestamp.from(Instant.now()));\n\n    final List<Event> events = new ArrayList<>();\n\n    nudgeEmailValidator.validate(\n        events, nudgeEvent, CollectionExerciseDTO.CollectionExerciseState.LIVE);\n  }\n']",Instant;Timestamp;Live;Update;Collection;Email;When;events;Event;List,1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.522294521331787, -5.016991138458252, -5.398745059967041, -6.52332067489624, -5.4673171043396, -0.021054690703749657]",0.9791653156280518
1,"['  @Test\n  public void testCantUpdateNudgeThatHasPastAndCollectionExerciseInLockedState() {\n    final Event nudge = new Event();\n    nudge.setTag((EventService.Tag.nudge_email_0.toString()));\n    nudge.setTimestamp(Timestamp.from(Instant.now().minus(2, ChronoUnit.DAYS)));\n\n    final Event newNudge = new Event();\n    newNudge.setTag((EventService.Tag.nudge_email_0.toString()));\n    newNudge.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final List<Event> events = Collections.singletonList(nudge);\n    CTPException actualException = null;\n    try {\n      nudgeEmailValidator.validate(\n          events, newNudge, CollectionExerciseDTO.CollectionExerciseState.LIVE);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(""Nudge email cannot be set in the past"", actualException.getMessage());\n  }\n']",past;minus;Collection;Exercise;Instant;Service;be;ant;Collection;Chron,1.2223608791828156e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;7.275957614183426e-10;6.693881005048752e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.4805989265441895, -5.0668721199035645, -5.413623332977295, -6.51344633102417, -5.448049068450928, -0.02092990279197693]",0.9792875051498413
1,"['  @Test\n  public void testCanUpdateNudgeThatHasPastAndCollectionExerciseNotInLockedState()\n      throws CTPException {\n    final Event nudge = new Event();\n    nudge.setTag((EventService.Tag.nudge_email_0.toString()));\n    nudge.setTimestamp(Timestamp.from(Instant.now().minus(2, ChronoUnit.DAYS)));\n\n    final Event newNudge = new Event();\n    newNudge.setTag((EventService.Tag.nudge_email_0.toString()));\n    newNudge.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final List<Event> events = Collections.singletonList(nudge);\n\n    nudgeEmailValidator.validate(\n        events, newNudge, CollectionExerciseDTO.CollectionExerciseState.SCHEDULED);\n  }\n']",TPException;Event;udge;Service;udge;Timestamp;Event;from;email;Event,1.076841726899147e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.0745362639427185e-10,5,5,"[-5.496365070343018, -5.054323673248291, -5.430596828460693, -6.52461576461792, -5.468334674835205, -0.02076306752860546]",0.9794510006904602
1,"['  @Test\n  public void testValidNudgeEventCreation() throws CTPException {\n    final Event goLive = new Event();\n    goLive.setTag((EventService.Tag.go_live.toString()));\n    goLive.setTimestamp(Timestamp.from(Instant.now()));\n\n    final Event nudge = new Event();\n    nudge.setTag((EventService.Tag.nudge_email_0.toString()));\n    nudge.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n\n    final Event returnBy = new Event();\n    returnBy.setTag((EventService.Tag.return_by.toString()));\n    returnBy.setTimestamp(Timestamp.from(Instant.now().plus(4, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(goLive, returnBy);\n\n    nudgeEmailValidator.validate(\n        events, nudge, CollectionExerciseDTO.CollectionExerciseState.CREATED);\n  }\n']",Valid;Tag;Event;TPException;Tag;set;Collection;Live;Validator;udge,3.725290298461914e-09;2.444721758365631e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.421476766467094e-10;6.984919309616089e-10,5,5,"[-5.506906509399414, -5.059101581573486, -5.436446189880371, -6.547143936157227, -5.480528831481934, -0.020576467737555504]",0.9796338081359863
1,"['  @Test\n  public void testNudgeAfterReturnByEndInvalid() {\n    final Event goLive = new Event();\n    goLive.setTag((EventService.Tag.go_live.toString()));\n    goLive.setTimestamp(Timestamp.from(Instant.now()));\n\n    final Event nudgeEvent = new Event();\n    nudgeEvent.setTag(EventService.Tag.nudge_email_0.toString());\n    nudgeEvent.setTimestamp(Timestamp.from(Instant.now().plus(4, ChronoUnit.DAYS)));\n\n    final Event returnBy = new Event();\n    returnBy.setTag((EventService.Tag.return_by.toString()));\n    returnBy.setTimestamp(Timestamp.from(Instant.now().plus(3, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(goLive, returnBy);\n    CTPException actualException = null;\n\n    SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.SSS"");\n    sdf.setTimeZone(TimeZone.getTimeZone(""Europe/London""));\n    Date goLiveDate = new Date(goLive.getTimestamp().getTime());\n    Date returnByDate = new Date(returnBy.getTimestamp().getTime());\n\n    try {\n      nudgeEmailValidator.validate(\n          events, nudgeEvent, CollectionExerciseDTO.CollectionExerciseState.SCHEDULED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    String expectedMessage =\n        ""Nudge email must be set after the Go Live date (""\n            + sdf.format(goLiveDate)\n            + "") ""\n            + ""and before Return by date (""\n            + sdf.format(returnByDate)\n            + "")"";\n    assertEquals(expectedMessage, actualException.getMessage());\n  }\n']",expected;Tag;validate;End;udge;Tag;Service;Timestamp;Date;Exercise,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.275957614183426e-10;7.239577826112509e-10;6.402842700481415e-10;5.238689482212067e-10,5,5,"[-5.491876125335693, -4.981151580810547, -5.377804756164551, -6.484121322631836, -5.502206802368164, -0.021437594667077065]",0.9787905812263489
1,"['  @Test\n  public void testNudgeBeforeGoliveInvalid() {\n    final Event goLive = new Event();\n    goLive.setTag((EventService.Tag.go_live.toString()));\n    goLive.setTimestamp(Timestamp.from(Instant.now().plus(2, ChronoUnit.DAYS)));\n    final Event returnBy = new Event();\n    returnBy.setTag((EventService.Tag.return_by.toString()));\n    returnBy.setTimestamp(Timestamp.from(Instant.now().plus(3, ChronoUnit.DAYS)));\n    final List<Event> events = Arrays.asList(goLive, returnBy);\n\n    final Event nudgeEvent = new Event();\n    nudgeEvent.setTag(EventService.Tag.nudge_email_0.toString());\n    nudgeEvent.setTimestamp(Timestamp.from(Instant.now().plus(1, ChronoUnit.DAYS)));\n\n    SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.SSS"");\n    sdf.setTimeZone(TimeZone.getTimeZone(""Europe/London""));\n    Date goLiveDate = new Date(goLive.getTimestamp().getTime());\n    Date returnByDate = new Date(returnBy.getTimestamp().getTime());\n\n    CTPException actualException = null;\n    try {\n      nudgeEmailValidator.validate(\n          events, nudgeEvent, CollectionExerciseDTO.CollectionExerciseState.SCHEDULED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    String expectedMessage =\n        ""Nudge email must be set after the Go Live date (""\n            + sdf.format(goLiveDate)\n            + "") ""\n            + ""and before Return by date (""\n            + sdf.format(returnByDate)\n            + "")"";\n    assertEquals(expectedMessage, actualException.getMessage());\n  }\n']",Event;olive;Tag;expected;Tag;Message;Event;go;Event;Exercise,3.259629011154175e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.441643238067627, -5.020824432373047, -5.363605499267578, -6.4673075675964355, -5.460243225097656, -0.02165413089096546]",0.9785786271095276
1,"['  @Test\n  public void testNudgeWithSameDateAndTimeEventCreation() {\n    final Instant now = Instant.now();\n    final Long nudgeTime = now.plus(2, ChronoUnit.DAYS).toEpochMilli();\n    final Event goLive = new Event();\n    goLive.setTag((EventService.Tag.go_live.toString()));\n    goLive.setTimestamp(Timestamp.from(now));\n\n    final Event nudge = new Event();\n    nudge.setTag((EventService.Tag.nudge_email_0.toString()));\n    nudge.setTimestamp(new Timestamp(nudgeTime));\n\n    final Event returnBy = new Event();\n    returnBy.setTag((EventService.Tag.return_by.toString()));\n    returnBy.setTimestamp(Timestamp.from(now.plus(4, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(goLive, returnBy, nudge);\n\n    final Event submittedEvent = new Event();\n    submittedEvent.setTag((EventService.Tag.nudge_email_1.toString()));\n    submittedEvent.setTimestamp(new Timestamp(nudgeTime));\n\n    CTPException actualException = null;\n    try {\n      nudgeEmailValidator.validate(\n          events, submittedEvent, CollectionExerciseDTO.CollectionExerciseState.CREATED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNotNull(actualException);\n    assertEquals(\n        ""A nudge email has already been scheduled for this date and time. Choose a different date or time."",\n        actualException.getMessage());\n  }\n']",date;actual;been;get;time;Exception;Validator;catch;Epoch;events,1.9208528101444244e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10,5,5,"[-5.522619724273682, -4.877260684967041, -5.376136779785156, -6.4698686599731445, -5.518411636352539, -0.02204158529639244]",0.9781994223594666
1,"['  @Test\n  public void testNudgeWithSameDateAndTimeEventCreationNotValidForTheSameEvent() {\n    final Instant now = Instant.now();\n    final Long nudgeTime = now.plus(2, ChronoUnit.DAYS).toEpochMilli();\n    final Event goLive = new Event();\n    goLive.setTag((EventService.Tag.go_live.toString()));\n    goLive.setTimestamp(Timestamp.from(now));\n\n    final Event nudge = new Event();\n    nudge.setTag((EventService.Tag.nudge_email_0.toString()));\n    nudge.setTimestamp(new Timestamp(nudgeTime));\n\n    final Event returnBy = new Event();\n    returnBy.setTag((EventService.Tag.return_by.toString()));\n    returnBy.setTimestamp(Timestamp.from(now.plus(4, ChronoUnit.DAYS)));\n\n    final List<Event> events = Arrays.asList(goLive, returnBy, nudge);\n\n    final Event submittedEvent = new Event();\n    submittedEvent.setTag((EventService.Tag.nudge_email_0.toString()));\n    submittedEvent.setTimestamp(new Timestamp(nudgeTime));\n\n    CTPException actualException = null;\n    try {\n      nudgeEmailValidator.validate(\n          events, submittedEvent, CollectionExerciseDTO.CollectionExerciseState.CREATED);\n    } catch (CTPException expectedException) {\n      actualException = expectedException;\n    }\n    assertNull(actualException);\n  }\n']",Validator;Valid;The;expected;validate;Collection;udge;Date;go;actual,2.270098775625229e-09;1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.504443645477295, -4.938528537750244, -5.353762149810791, -6.449931621551514, -5.484533309936523, -0.02193394862115383]",0.9783047437667847
1,"['  @Test\n  public void testCreateCollectionExercise() throws Exception {\n    // Given\n    CollectionExercise collectionExercise =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    when(collexRepo.saveAndFlush(any())).thenReturn(collectionExercise);\n\n    SurveyDTO survey = FixtureHelper.loadClassFixtures(SurveyDTO[].class).get(0);\n    CollectionExerciseDTO toCreate =\n        FixtureHelper.loadClassFixtures(CollectionExerciseDTO[].class).get(0);\n\n    // When\n    this.collectionExerciseService.createCollectionExercise(toCreate, survey);\n\n    // Then\n    ArgumentCaptor<CollectionExercise> captor = ArgumentCaptor.forClass(CollectionExercise.class);\n    verify(this.collexRepo).saveAndFlush(captor.capture());\n    CollectionExercise collex = captor.getValue();\n    assertEquals(toCreate.getUserDescription(), collex.getUserDescription());\n    assertEquals(toCreate.getExerciseRef(), collex.getExerciseRef());\n    assertEquals(toCreate.getSurveyId(), collex.getSurveyId().toString());\n    assertNotNull(collex.getCreated());\n  }\n']",Exception;Collection;ixture;Exercise;when;verify;Captor;load;Collection;Captor,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.128661774098873e-10,5,5,"[-5.436091899871826, -5.037292003631592, -5.418152809143066, -6.469334602355957, -5.43501091003418, -0.021422307938337326]",0.978805422782898
1,"['  @Test\n  public void testUpdateCollectionExercise() throws Exception {\n    CollectionExerciseDTO toUpdate =\n        FixtureHelper.loadClassFixtures(CollectionExerciseDTO[].class).get(0);\n    CollectionExercise existing =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    SurveyDTO survey = FixtureHelper.loadClassFixtures(SurveyDTO[].class).get(0);\n    UUID surveyId = UUID.fromString(survey.getId());\n    existing.setSurveyId(surveyId);\n    when(collexRepo.findOneById(existing.getId())).thenReturn(existing);\n    when(surveyService.findSurvey(surveyId)).thenReturn(survey);\n\n    this.collectionExerciseService.updateCollectionExercise(existing.getId(), toUpdate);\n\n    ArgumentCaptor<CollectionExercise> captor = ArgumentCaptor.forClass(CollectionExercise.class);\n\n    verify(collexRepo).saveAndFlush(captor.capture());\n    CollectionExercise collex = captor.getValue();\n    assertEquals(UUID.fromString(toUpdate.getSurveyId()), collex.getSurveyId());\n    assertEquals(toUpdate.getExerciseRef(), collex.getExerciseRef());\n    assertEquals(toUpdate.getUserDescription(), collex.getUserDescription());\n    assertNotNull(collex.getUpdated());\n  }\n']",Exercise;UID;UID;ixture;Exercise;ixture;ixtures;ixtures;Rep;Argument,9.022187441587448e-10;6.984919309616089e-10;5.384208634495735e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.4260358810424805, -5.091216564178467, -5.455267906188965, -6.509387016296387, -5.423854827880859, -0.020941928029060364]",0.9792757034301758
1,"['  @Test\n  public void testUpdateCollectionExerciseInvalidSurvey() throws Exception {\n    CollectionExerciseDTO toUpdate =\n        FixtureHelper.loadClassFixtures(CollectionExerciseDTO[].class).get(0);\n    CollectionExercise existing =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    existing.setSurveyId(UUID.randomUUID());\n    when(collexRepo.findOneById(existing.getId())).thenReturn(existing);\n\n    try {\n      this.collectionExerciseService.updateCollectionExercise(existing.getId(), toUpdate);\n      fail(""Update collection exercise with null survey succeeded"");\n    } catch (CTPException e) {\n      assertEquals(CTPException.Fault.BAD_REQUEST, e.getFault());\n    }\n  }\n']",ixture;Exception;Update;One;CT;ixtures;Helper;existing;Collection;Exercise,1.7462298274040222e-09;1.2078089639544487e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.473552703857422, -5.076806545257568, -5.473421573638916, -6.529836177825928, -5.446625232696533, -0.020613953471183777]",0.9795969724655151
1,"['  @Test\n  public void testUpdateCollectionExerciseNonUnique() throws Exception {\n    CollectionExerciseDTO toUpdate =\n        FixtureHelper.loadClassFixtures(CollectionExerciseDTO[].class).get(0);\n    CollectionExercise existing =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    existing.setSurveyId(UUID.randomUUID());\n    // Set up the mock to return the one we are attempting to update\n    when(collexRepo.findOneById(existing.getId())).thenReturn(existing);\n\n    UUID uuid = UUID.fromString(""0f66744b-bfdb-458a-b495-1eb605462003"");\n    CollectionExercise otherExisting = new CollectionExercise();\n    otherExisting.setId(uuid);\n    // Set up the mock to return a different one with the same exercise ref and survey id\n    when(collexRepo.findByExerciseRefAndSurveyId(\n            toUpdate.getExerciseRef(), UUID.fromString(toUpdate.getSurveyId())))\n        .thenReturn(Collections.singletonList(otherExisting));\n\n    try {\n      this.collectionExerciseService.updateCollectionExercise(existing.getId(), toUpdate);\n\n      fail(""Update to collection exercise breaking uniqueness constraint succeeded"");\n    } catch (CTPException e) {\n      assertEquals(CTPException.Fault.RESOURCE_VERSION_CONFLICT, e.getFault());\n    }\n  }\n']",ault;CONFLICT;ault;VERSION;ixture;mock;CT;find;fail;uid,9.313225746154785e-09;3.6088749766349792e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6007106751203537e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10,5,5,"[-5.495168209075928, -4.90738582611084, -5.40078067779541, -6.473483085632324, -5.48375129699707, -0.021948060020804405]",0.9782910346984863
1,"['  @Test\n  public void testUpdateCollectionExerciseDoesNotExist() throws Exception {\n    CollectionExerciseDTO toUpdate =\n        FixtureHelper.loadClassFixtures(CollectionExerciseDTO[].class).get(0);\n    UUID updateUuid = UUID.randomUUID();\n\n    try {\n      this.collectionExerciseService.updateCollectionExercise(updateUuid, toUpdate);\n      fail(""Update of non-existent collection exercise succeeded"");\n    } catch (CTPException e) {\n      assertEquals(CTPException.Fault.RESOURCE_NOT_FOUND, e.getFault());\n    }\n  }\n']",non;Update;existent;Exist;Collection;Service;ault;fail;ixture;exercise,1.5133991837501526e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.520208358764648, -5.006124019622803, -5.460236549377441, -6.531785488128662, -5.484031677246094, -0.020777663215994835]",0.9794366955757141
1,"['  @Test\n  public void testDeleteCollectionExercise() throws Exception {\n    CollectionExercise existing =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    when(collexRepo.findOneById(existing.getId())).thenReturn(existing);\n\n    this.collectionExerciseService.deleteCollectionExercise(existing.getId());\n\n    ArgumentCaptor<CollectionExercise> captor = ArgumentCaptor.forClass(CollectionExercise.class);\n    verify(this.collexRepo).saveAndFlush(captor.capture());\n\n    assertEquals(true, captor.getValue().getDeleted());\n  }\n']",collection;Argument;Argument;Exercise;Helper;collex;collex;Exercise;Collection;get,9.313225746154785e-10;9.022187441587448e-10;9.022187441587448e-10;7.130438461899757e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.453899383544922, -5.0601701736450195, -5.433059215545654, -6.493269443511963, -5.43380880355835, -0.021094726398587227]",0.9791262149810791
1,"['  @Test\n  public void testUndeleteCollectionExercise() throws Exception {\n    CollectionExercise existing =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    when(collexRepo.findOneById(existing.getId())).thenReturn(existing);\n\n    this.collectionExerciseService.undeleteCollectionExercise(existing.getId());\n\n    ArgumentCaptor<CollectionExercise> captor = ArgumentCaptor.forClass(CollectionExercise.class);\n    verify(this.collexRepo).saveAndFlush(captor.capture());\n\n    assertEquals(false, captor.getValue().getDeleted());\n  }\n']",collex;One;Rep;Deleted;Equals;Captor;collection;Argument;existing;class,8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.474238395690918, -5.0375542640686035, -5.462809085845947, -6.53907585144043, -5.451304912567139, -0.02087748609483242]",0.9793388247489929
1,"['  @Test\n  public void testPatchCollectionExerciseNotExists() throws Exception {\n    CollectionExerciseDTO toUpdate =\n        FixtureHelper.loadClassFixtures(CollectionExerciseDTO[].class).get(0);\n    UUID updateUuid = UUID.randomUUID();\n\n    try {\n      this.collectionExerciseService.patchCollectionExercise(updateUuid, toUpdate);\n\n      fail(""Attempt to patch non-existent collection exercise succeeded"");\n    } catch (CTPException e) {\n      assertEquals(CTPException.Fault.RESOURCE_NOT_FOUND, e.getFault());\n    }\n  }\n']",UID;to;Patch;Exception;Update;patch;update;Exists;to;Exception,1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.508042335510254, -5.0271172523498535, -5.471803665161133, -6.542558670043945, -5.475393295288086, -0.02065669372677803]",0.9795553088188171
1,"['  @Test\n  public void testPatchCollectionExerciseExerciseRef() throws Exception {\n    CollectionExercise existing = setupCollectionExercise();\n    CollectionExerciseDTO collex = new CollectionExerciseDTO();\n    SurveyDTO survey = FixtureHelper.loadClassFixtures(SurveyDTO[].class).get(0);\n    UUID surveyId = UUID.fromString(survey.getId());\n    String exerciseRef = ""209966"";\n    collex.setExerciseRef(exerciseRef);\n    collex.setSurveyId(surveyId.toString());\n    when(surveyService.findSurvey(surveyId)).thenReturn(survey);\n    this.collectionExerciseService.patchCollectionExercise(existing.getId(), collex);\n\n    ArgumentCaptor<CollectionExercise> captor = ArgumentCaptor.forClass(CollectionExercise.class);\n    verify(this.collexRepo).saveAndFlush(captor.capture());\n\n    CollectionExercise ce = captor.getValue();\n    assertEquals(exerciseRef, ce.getExerciseRef());\n    assertNotNull(ce.getUpdated());\n  }\n']",Patch;survey;existing;set;Collection;Updated;Exercise;Exercise;exercise;new,1.3969838619232178e-09;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.454678535461426, -5.053269863128662, -5.441863059997559, -6.510809898376465, -5.452922344207764, -0.02098570391535759]",0.9792328476905823
1,"['  @Test\n  public void testPatchCollectionExerciseName() throws Exception {\n    CollectionExercise existing = setupCollectionExercise();\n    CollectionExerciseDTO collex = new CollectionExerciseDTO();\n    String name = ""Not BRES"";\n    SurveyDTO survey = FixtureHelper.loadClassFixtures(SurveyDTO[].class).get(0);\n    when(surveyService.findSurvey(any())).thenReturn(survey);\n    this.collectionExerciseService.patchCollectionExercise(existing.getId(), collex);\n\n    ArgumentCaptor<CollectionExercise> captor = ArgumentCaptor.forClass(CollectionExercise.class);\n    verify(this.collexRepo).saveAndFlush(captor.capture());\n\n    CollectionExercise ce = captor.getValue();\n    assertNotNull(ce.getUpdated());\n  }\n']",Captor;Argument;survey;collection;get;captor;Service;Not;existing;name,1.6298145055770874e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.456879138946533, -5.044717788696289, -5.398699760437012, -6.464701175689697, -5.4248247146606445, -0.02142382599413395]",0.9788041710853577
1,"['  @Test\n  public void testPatchCollectionExerciseUserDescription() throws Exception {\n    CollectionExercise existing = setupCollectionExercise();\n    CollectionExerciseDTO collex = new CollectionExerciseDTO();\n    String userDescription = ""Really odd description"";\n    collex.setUserDescription(userDescription);\n    SurveyDTO survey = FixtureHelper.loadClassFixtures(SurveyDTO[].class).get(0);\n    when(surveyService.findSurvey(any())).thenReturn(survey);\n    this.collectionExerciseService.patchCollectionExercise(existing.getId(), collex);\n\n    ArgumentCaptor<CollectionExercise> captor = ArgumentCaptor.forClass(CollectionExercise.class);\n    verify(this.collexRepo).saveAndFlush(captor.capture());\n\n    CollectionExercise ce = captor.getValue();\n    assertEquals(userDescription, ce.getUserDescription());\n    assertNotNull(ce.getUpdated());\n  }\n']",ixtures;Exercise;survey;Class;captor;Collection;Service;Really;Exercise;patch,8.440110832452774e-10;6.402842700481415e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.4634857177734375, -5.095687389373779, -5.455751895904541, -6.514987468719482, -5.4336838722229, -0.020694177597761154]",0.979518473148346
1,"['  @Test\n  public void testPatchCollectionExerciseNonUnique() throws Exception {\n    CollectionExerciseDTO toUpdate =\n        FixtureHelper.loadClassFixtures(CollectionExerciseDTO[].class).get(0);\n    CollectionExercise existing =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    existing.setSurveyId(UUID.randomUUID());\n    // Set up the mock to return the one we are attempting to update\n    when(collexRepo.findOneById(existing.getId())).thenReturn(existing);\n\n    UUID uuid = UUID.fromString(""0f66744b-bfdb-458a-b495-1eb605462003"");\n    CollectionExercise otherExisting = new CollectionExercise();\n    otherExisting.setId(uuid);\n    // Set up the mock to return a different one with the same exercise ref and survey id\n    when(collexRepo.findByExerciseRefAndSurveyId(\n            toUpdate.getExerciseRef(), UUID.fromString(toUpdate.getSurveyId())))\n        .thenReturn(Collections.singletonList(otherExisting));\n\n    try {\n      this.collectionExerciseService.patchCollectionExercise(existing.getId(), toUpdate);\n\n      fail(""Update to collection exercise breaking uniqueness constraint succeeded"");\n    } catch (CTPException e) {\n      assertEquals(CTPException.Fault.RESOURCE_VERSION_CONFLICT, e.getFault());\n    }\n  }\n']",Patch;ixture;CT;ixture;Non;Exception;Helper;mock;uid;up,2.3283064365386963e-09;2.2118911147117615e-09;1.5133991837501526e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10,5,5,"[-5.499345779418945, -4.903622150421143, -5.402681350708008, -6.478317737579346, -5.482561111450195, -0.02194770984351635]",0.978291392326355
1,"['  @Test\n  public void testTransitionToReadyToReviewWhenScheduledWithCIsAndSample() throws Exception {\n    // Given\n    CollectionExercise exercise =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    exercise.setState(CollectionExerciseDTO.CollectionExerciseState.SCHEDULED);\n    SampleLink testSampleLink = new SampleLink();\n    testSampleLink.setSampleSummaryId(UUID.randomUUID());\n    given(sampleLinkRepository.findByCollectionExerciseId(exercise.getId()))\n        .willReturn(Collections.singletonList(testSampleLink));\n\n    SampleSummaryDTO sampleSummary = new SampleSummaryDTO();\n    sampleSummary.setState(SampleSummaryDTO.SampleState.ACTIVE);\n    given(sampleSvcClient.getSampleSummary(testSampleLink.getSampleSummaryId()))\n        .willReturn(sampleSummary);\n\n    String searchStringJson =\n        new JSONObject(Collections.singletonMap(""COLLECTION_EXERCISE"", exercise.getId().toString()))\n            .toString();\n    given(collectionInstrument.countCollectionInstruments(searchStringJson)).willReturn(1);\n\n    // When\n    collectionExerciseService.transitionScheduleCollectionExerciseToReadyToReview(exercise);\n\n    // Then\n    exercise.setState(CollectionExerciseDTO.CollectionExerciseState.READY_FOR_REVIEW);\n    verify(collexRepo).saveAndFlush(exercise);\n  }\n']",random;Review;count;Collection;When;UID;collection;transition;EXERCISE;given,4.307366907596588e-09;3.259629011154175e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.1641532182693481e-09;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;8.440110832452774e-10;7.8580342233181e-10,5,5,"[-5.455249786376953, -4.971658229827881, -5.369625091552734, -6.423675537109375, -5.443606376647949, -0.02204904891550541]",0.978192150592804
1,"['  @Test\n  public void testDoNotTransitionToReadyToReviewWhenScheduledWithCIsAndNoSample() throws Exception {\n    // Given\n    CollectionExercise exercise =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    exercise.setState(CollectionExerciseDTO.CollectionExerciseState.SCHEDULED);\n    given(sampleLinkRepository.findByCollectionExerciseId(exercise.getId()))\n        .willReturn(Collections.emptyList());\n    String searchStringJson =\n        new JSONObject(Collections.singletonMap(""COLLECTION_EXERCISE"", exercise.getId().toString()))\n            .toString();\n    given(collectionInstrument.countCollectionInstruments(searchStringJson)).willReturn(1);\n\n    // When\n    collectionExerciseService.transitionScheduleCollectionExerciseToReadyToReview(exercise);\n\n    // Then\n    exercise.setState(CollectionExerciseDTO.CollectionExerciseState.READY_FOR_REVIEW);\n    verify(collexRepo, times(0)).saveAndFlush(exercise);\n  }\n']",Do;search;Repository;Transition;Not;REVIEW;TO;ixtures;Instruments;Schedule,1.6298145055770874e-09;1.0186340659856796e-09;7.8580342233181e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.490628242492676, -5.012504577636719, -5.427643775939941, -6.488379001617432, -5.4581098556518555, -0.02117817848920822]",0.979044497013092
1,"['  @Test\n  public void testDoNotTransitionToReadyToReviewWhenScheduledWithNoCIsAndSample() throws Exception {\n    // Given\n    CollectionExercise exercise =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    exercise.setState(CollectionExerciseDTO.CollectionExerciseState.SCHEDULED);\n    given(sampleLinkRepository.findByCollectionExerciseId(exercise.getId()))\n        .willReturn(Collections.emptyList());\n    String searchStringJson =\n        new JSONObject(Collections.singletonMap(""COLLECTION_EXERCISE"", exercise.getId().toString()))\n            .toString();\n    given(collectionInstrument.countCollectionInstruments(searchStringJson)).willReturn(0);\n\n    // When\n    collectionExerciseService.transitionScheduleCollectionExerciseToReadyToReview(exercise);\n\n    // Then\n    exercise.setState(CollectionExerciseDTO.CollectionExerciseState.READY_FOR_REVIEW);\n    verify(collexRepo, times(0)).saveAndFlush(exercise);\n  }\n']",TO;ixtures;Not;Collections;son;Sample;empty;Rep;Map;READ,1.4551915228366852e-09;1.2223608791828156e-09;9.313225746154785e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.4883928298950195, -5.015746116638184, -5.4292426109313965, -6.484348297119141, -5.456314563751221, -0.021172577515244484]",0.9790499806404114
1,"['  @Test\n  public void testDoNotTransitionToReadyToReviewWhenCIsCountFailsAndReturnsNull() throws Exception {\n    // Given\n    CollectionExercise exercise =\n        FixtureHelper.loadClassFixtures(CollectionExercise[].class).get(0);\n    exercise.setState(CollectionExerciseDTO.CollectionExerciseState.SCHEDULED);\n    given(sampleLinkRepository.findByCollectionExerciseId(exercise.getId()))\n        .willReturn(Collections.emptyList());\n    String searchStringJson =\n        new JSONObject(Collections.singletonMap(""COLLECTION_EXERCISE"", exercise.getId().toString()))\n            .toString();\n    given(collectionInstrument.countCollectionInstruments(searchStringJson)).willReturn(null);\n\n    // When\n    collectionExerciseService.transitionScheduleCollectionExerciseToReadyToReview(exercise);\n\n    // Then\n    exercise.setState(CollectionExerciseDTO.CollectionExerciseState.READY_FOR_REVIEW);\n    verify(collexRepo, times(0)).saveAndFlush(exercise);\n  }\n']",singleton;ixture;Exception;EXERCISE;CHEDULED;When;Exercise;Repository;Then;COLLECTION,1.3096723705530167e-09;1.280568540096283e-09;1.0477378964424133e-09;1.0040821507573128e-09;8.87666828930378e-10;8.149072527885437e-10;6.693881005048752e-10;5.966285243630409e-10;5.820766091346741e-10;5.675246939063072e-10,5,5,"[-5.478052616119385, -5.019866466522217, -5.413260459899902, -6.4754719734191895, -5.439375877380371, -0.021349262446165085]",0.9788771271705627
1,"['  @Test\n  public void testCreateLink() {\n    UUID sampleSummaryUuid = UUID.randomUUID(), collexUuid = UUID.randomUUID();\n\n    when(this.sampleLinkRepository.saveAndFlush(any(SampleLink.class))).then(returnsFirstArg());\n\n    SampleLink sampleLink =\n        this.collectionExerciseService.createLink(sampleSummaryUuid, collexUuid);\n\n    assertEquals(sampleSummaryUuid, sampleLink.getSampleSummaryId());\n    assertEquals(collexUuid, sampleLink.getCollectionExerciseId());\n\n    verify(sampleLinkRepository, times(1)).saveAndFlush(any());\n  }\n']",Create;Summary;Exercise;uid;Exercise;any;when;Link;sample;Equals,1.862645149230957e-09;1.862645149230957e-09;1.1932570487260818e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;7.566995918750763e-10,5,5,"[-5.5010223388671875, -4.994247913360596, -5.436654567718506, -6.527319431304932, -5.468579292297363, -0.02111491933465004]",0.9791064262390137
1,"['  @Test\n  public void testCreateLinkShouldAttemptToTransitionToReadyToReview() throws CTPException {\n    // Given\n    UUID sampleSummaryUuid = UUID.randomUUID();\n    UUID collexUuid = UUID.randomUUID();\n    CollectionExercise collectionExercise = new CollectionExercise();\n    collectionExercise.setId(collexUuid);\n    collectionExercise.setState(CollectionExerciseDTO.CollectionExerciseState.CREATED);\n    given(collexRepo.findOneById(collexUuid)).willReturn(collectionExercise);\n    given(collectionInstrument.countCollectionInstruments(any())).willReturn(1);\n    SampleSummaryDTO sampleSummary = new SampleSummaryDTO();\n    SampleLink sampleLink = new SampleLink();\n    sampleLink.setSampleSummaryId(sampleSummaryUuid);\n    given(sampleLinkRepository.findByCollectionExerciseId(collexUuid))\n        .willReturn(Collections.singletonList(sampleLink));\n    sampleSummary.setState(SampleSummaryDTO.SampleState.ACTIVE);\n    given(sampleSvcClient.getSampleSummary(sampleSummaryUuid)).willReturn(sampleSummary);\n\n    // When\n    this.collectionExerciseService.linkSampleSummaryToCollectionExercise(\n        collexUuid, Collections.singletonList(sampleSummaryUuid));\n\n    // Then\n    verify(stateManager)\n        .transition(\n            CollectionExerciseDTO.CollectionExerciseState.CREATED,\n            CollectionExerciseDTO.CollectionExerciseEvent.CI_SAMPLE_ADDED);\n  }\n']",collex;TPException;Ready;singleton;Transition;Create;Event;UID;uid;Sample,3.259629011154175e-09;1.57160684466362e-09;1.5133991837501526e-09;1.2951204553246498e-09;1.2223608791828156e-09;1.1059455573558807e-09;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.466638565063477, -5.0203142166137695, -5.39871883392334, -6.479559898376465, -5.451821804046631, -0.021400606259703636]",0.9788267612457275
1,"['  @Test\n  public void testFindCollectionExercisesForSurveys() throws Exception {\n    final UUID SURVEY_ID_1 = UUID.fromString(""31ec898e-f370-429a-bca4-eab1045aff4e"");\n\n    List<UUID> surveys = Arrays.asList(SURVEY_ID_1);\n\n    List<CollectionExercise> existing = FixtureHelper.loadClassFixtures(CollectionExercise[].class);\n\n    given(collexRepo.findBySurveyIdInOrderBySurveyId(surveys)).willReturn(existing);\n\n    HashMap<UUID, List<CollectionExercise>> result =\n        this.collectionExerciseService.findCollectionExercisesForSurveys(surveys);\n\n    assertEquals(result.get(SURVEY_ID_1).size(), 2);\n  }\n']",ixture;as;Collection;surveys;Surveys;Exercises;Helper;Exercise;SURVE;Hash,2.6775524020195007e-09;1.280568540096283e-09;1.280568540096283e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.464842796325684, -5.029866695404053, -5.396508693695068, -6.499186038970947, -5.446046352386475, -0.021349379792809486]",0.9788768887519836
1,"['  @Test\n  public void testFindCollectionExercisesForSurveysByState() throws Exception {\n    final UUID SURVEY_ID_1 = UUID.fromString(""31ec898e-f370-429a-bca4-eab1045aff4e"");\n\n    List<UUID> surveys = Arrays.asList(SURVEY_ID_1);\n\n    List<CollectionExercise> existing = FixtureHelper.loadClassFixtures(CollectionExercise[].class);\n\n    given(\n            collexRepo.findBySurveyIdInAndStateOrderBySurveyId(\n                surveys, CollectionExerciseDTO.CollectionExerciseState.LIVE))\n        .willReturn(existing);\n\n    HashMap<UUID, List<CollectionExercise>> result =\n        this.collectionExerciseService.findCollectionExercisesForSurveysByState(\n            surveys, CollectionExerciseDTO.CollectionExerciseState.LIVE);\n\n    assertEquals(result.get(SURVEY_ID_1).size(), 2);\n  }\n']",Collection;surveys;surveys;For;Collection;Survey;ec;By;In;Collection,9.89530235528946e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.432511329650879, -5.069145679473877, -5.423796653747559, -6.487279415130615, -5.420629978179932, -0.02124120108783245]",0.97898268699646
1,"['  @Test\n  public void testAcceptSampleUnitAlreadyExists() throws CTPException {\n    CollectionExercise collex = new CollectionExercise();\n    collex.setId(COLLEX_ID);\n    collex.setSampleSize(99);\n    collex.setState(CollectionExerciseState.EXECUTION_STARTED);\n\n    SampleUnit sampleUnit = new SampleUnit();\n    sampleUnit.setCollectionExerciseId(COLLEX_ID.toString());\n    sampleUnit.setFormType(""X"");\n    sampleUnit.setId(SAMPLE_ID.toString());\n    sampleUnit.setSampleUnitType(""B"");\n    sampleUnit.setSampleUnitRef(""REF123"");\n    when(collectRepo.findOneById(any())).thenReturn(collex);\n    when(sampleUnitRepo.existsBySampleUnitRefAndSampleUnitTypeAndSampleUnitGroupCollectionExercise(\n            any(), any(), any()))\n        .thenReturn(true);\n\n    underTest.acceptSampleUnit(sampleUnit);\n\n    verify(collectionExerciseTransitionState, never()).transition(any(), any());\n    verify(sampleUnitGroupRepo, never()).saveAndFlush(any());\n    verify(sampleUnitRepo, never()).saveAndFlush(any());\n    verify(collectRepo, never()).saveAndFlush(any());\n  }\n']",Already;accept;Sample;Exercise;Exists;Collection;REF;sample;Unit;Transition,8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.433032512664795, -5.000072002410889, -5.371899604797363, -6.4328155517578125, -5.430933475494385, -0.02197931334376335]",0.9782604575157166
1,"['  @Test\n  public void requestSampleUnitsHappyPath() throws CTPException {\n    UUID collexId = UUID.randomUUID();\n    UUID sampleSummaryId = UUID.randomUUID();\n    CollectionExercise collectionExercise = new CollectionExercise();\n    collectionExercise.setId(collexId);\n    SampleLink sampleLink = new SampleLink();\n    sampleLink.setSampleSummaryId(sampleSummaryId);\n    List<SampleLink> sampleLinks = Collections.singletonList(sampleLink);\n    SampleUnitsRequestDTO sampleUnitsRequestDTO = new SampleUnitsRequestDTO();\n    sampleUnitsRequestDTO.setSampleUnitsTotal(666);\n\n    // Given\n    when(collectRepo.findOneById(eq(collexId))).thenReturn(collectionExercise);\n    when(sampleLinkRepo.findByCollectionExerciseId(any())).thenReturn(sampleLinks);\n    when(sampleSvcClient.getSampleUnitCount(any())).thenReturn(sampleUnitsRequestDTO);\n    when(sampleSvcClient.requestSampleUnits(any())).thenReturn(sampleUnitsRequestDTO);\n\n    // When\n    underTest.requestSampleUnits(collexId);\n\n    // Then\n    verify(collexSampleUnitReceiptPreparer).prepareCollexToAcceptSampleUnits(eq(collexId), eq(666));\n    verify(partySvcClient).linkSampleSummaryId(any(), any());\n  }\n']",Preparer;UID;random;random;List;Unit;any;collex;Collex;verify,2.0372681319713593e-09;9.89530235528946e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.469516754150391, -4.999241352081299, -5.3855109214782715, -6.488794326782227, -5.4337568283081055, -0.021658679470419884]",0.9785741567611694
1,"['  @Test\n  public void givenCollectionExcerciseDoesNotExistWhenEventIsCreatedThenExceptionIsThrown() {\n    EventDTO eventDto = new EventDTO();\n    UUID collexUuid = UUID.randomUUID();\n    eventDto.setCollectionExerciseId(collexUuid);\n\n    try {\n      eventService.createEvent(eventDto);\n\n      fail(""Created event with non-existent collection exercise"");\n    } catch (CTPException e) {\n      // Expected 404\n      assertThat(e.getFault(), is(Fault.RESOURCE_NOT_FOUND));\n    }\n  }\n']",Exist;Does;collection;Exercise;given;random;with;TO;Exception;new,2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.604264050722122e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10,5,5,"[-5.514671325683594, -4.963099956512451, -5.407893180847168, -6.501245975494385, -5.486387729644775, -0.021370500326156616]",0.9788561463356018
1,"['  @Test\n  public void givenEventAlreadyExistsWhenEventIsCreatedThenExceptionIsThrown() throws CTPException {\n    String tag = Tag.mps.name();\n    EventDTO eventDto = new EventDTO();\n    CollectionExercise collex = new CollectionExercise();\n    UUID collexUuid = UUID.randomUUID();\n    eventDto.setCollectionExerciseId(collexUuid);\n    eventDto.setTag(tag);\n    collex.setId(collexUuid);\n\n    when(collectionExerciseService.findCollectionExercise(collexUuid)).thenReturn(collex);\n    when(eventRepository.findOneByCollectionExerciseAndTag(collex, tag)).thenReturn(new Event());\n\n    try {\n      eventService.createEvent(eventDto);\n\n      fail(""Created event with non-existent collection exercise"");\n    } catch (CTPException e) {\n      // Expected 409\n      assertThat(e.getFault(), is(Fault.RESOURCE_VERSION_CONFLICT));\n    }\n  }\n']",CONFLICT;random;TO;Exists;uid;collex;Thrown;collex;Service;Collection,7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.511475086212158, -4.935349464416504, -5.418268203735352, -6.479889392852783, -5.475856304168701, -0.021615400910377502]",0.9786164164543152
1,['  @Test\n  public void givenNoEventsWhenScheduledIsCheckedThenFalse() throws CTPException {\n    UUID collexUuid = UUID.randomUUID();\n    when(eventRepository.findByCollectionExerciseId(collexUuid)).thenReturn(new ArrayList<>());\n\n    boolean scheduled = this.eventService.isScheduled(collexUuid);\n\n    assertFalse(scheduled);\n  }\n'],When;Collection;new;Then;scheduled;False;scheduled;False;cheduled;this,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10,5,5,"[-5.519581317901611, -4.942450046539307, -5.398431777954102, -6.517159938812256, -5.47570276260376, -0.021564185619354248]",0.9786665439605713
1,"['  @Test\n  public void givenCollectionExcerciseDoesNotExistWhenEventIsUpdatedThenExceptionIsThrown() {\n    final UUID collexUuid = UUID.randomUUID();\n\n    when(collectionExerciseService.findCollectionExercise(collexUuid)).thenReturn(null);\n\n    try {\n      eventService.updateEvent(collexUuid, Tag.mps.name(), new Date());\n\n      Assert.fail(""Updated event with non-existent collection exercise"");\n    } catch (final CTPException e) {\n      assertThat(e.getFault(), is(Fault.BAD_REQUEST));\n    }\n  }\n']",Thrown;Excercise;Updated;get;random;Exercise;Date;ault;Event;null,1.1059455573558807e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.5248260498046875, -4.994751453399658, -5.383357048034668, -6.449229717254639, -5.452877521514893, -0.02144634537398815]",0.9787819981575012
1,"['  @Test\n  public void givenCollectionExcerciseDoesNotExistWhenEventIsDeletedThenExceptionIsThrown() {\n    final UUID collexUuid = UUID.randomUUID();\n\n    when(collectionExerciseService.findCollectionExercise(collexUuid)).thenReturn(null);\n\n    try {\n      eventService.deleteEvent(collexUuid, Tag.mps.name());\n\n      Assert.fail(""Deleted event with non-existent collection exercise"");\n    } catch (final CTPException e) {\n      assertThat(e.getFault(), is(Fault.BAD_REQUEST));\n    }\n  }\n']",Deleted;when;non;Exist;random;Then;UID;exercise;collex;Event,1.3387762010097504e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.523226261138916, -5.002587795257568, -5.393969535827637, -6.454859256744385, -5.4451518058776855, -0.021374234929680824]",0.9788525700569153
1,"['  @Test\n  public void givenEventDoesNotExistWhenEventIsUpdatedThenExceptionIsThrown() {\n    final UUID collexUuid = UUID.randomUUID();\n\n    final CollectionExercise collex = new CollectionExercise();\n    collex.setId(collexUuid);\n\n    when(collectionExerciseService.findCollectionExercise(collexUuid)).thenReturn(collex);\n    when(eventRepository.findOneByCollectionExerciseAndTag(collex, Tag.mps.name()))\n        .thenReturn(null);\n\n    try {\n      eventService.updateEvent(collexUuid, Tag.mps.name(), new Date());\n\n      Assert.fail(""Updated non-existent event"");\n    } catch (final CTPException e) {\n      assertThat(e.getFault(), is(Fault.RESOURCE_NOT_FOUND));\n    }\n  }\n']",ault;RESOURCE;find;Then;ps;Tag;Exercise;Tag;final;catch,3.725290298461914e-09;1.6007106751203537e-09;1.0477378964424133e-09;9.313225746154785e-10;6.693881005048752e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.498252868652344, -4.974785327911377, -5.418649673461914, -6.4959869384765625, -5.473868370056152, -0.02136816643178463]",0.9788585305213928
1,"['  @Test\n  public void givenEventDoesNotExistWhenEventIsDeletedThenExceptionIsThrown() {\n    final UUID collexUuid = UUID.randomUUID();\n\n    final CollectionExercise collex = new CollectionExercise();\n    collex.setId(collexUuid);\n\n    when(collectionExerciseService.findCollectionExercise(collexUuid)).thenReturn(collex);\n    when(eventRepository.findOneByCollectionExerciseAndTag(collex, Tag.mps.name()))\n        .thenReturn(null);\n\n    try {\n      eventService.deleteEvent(collexUuid, Tag.mps.name());\n\n      Assert.fail(""Deleted non-existent event"");\n    } catch (final CTPException e) {\n      assertThat(e.getFault(), is(Fault.RESOURCE_NOT_FOUND));\n    }\n  }\n']",ault;OUND;ps;That;Exist;catch;random;Exercise;TPException;When,4.6566128730773926e-09;1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.503305435180664, -4.989690780639648, -5.425804615020752, -6.499988555908203, -5.470077037811279, -0.021220427006483078]",0.9790030121803284
1,"['  @Test\n  public void givenEventsForCollectionExerciseValidateWhenEventIsUpdatedItIsSaved()\n      throws CTPException {\n\n    final CollectionExercise collex = new CollectionExercise();\n    collex.setId(COLLEX_UUID);\n    collex.setExercisePK(EXERCISE_PK);\n    final CollectionExerciseState collectionExerciseState = CollectionExerciseState.SCHEDULED;\n    collex.setState(collectionExerciseState);\n\n    when(collectionExerciseService.findCollectionExercise(COLLEX_UUID)).thenReturn(collex);\n    final Event existingEvent = new Event();\n    when(eventRepository.findOneByCollectionExerciseAndTag(collex, Tag.mps.name()))\n        .thenReturn(existingEvent);\n\n    final List<Event> existingEvents = new ArrayList<>();\n\n    when(eventRepository.findByCollectionExercise(collex)).thenReturn(existingEvents);\n    eventValidators.add(eventValidator);\n\n    eventService.updateEvent(COLLEX_UUID, Tag.mps.name(), new Date());\n\n    verify(eventRepository, atLeastOnce()).save(eq(existingEvent));\n  }\n']",Repository;existing;COLLE;Events;PK;EXERCISE;ps;Exercise;eq;Collection,9.458744898438454e-10;9.313225746154785e-10;8.294591680169106e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.489706516265869, -5.05017614364624, -5.416083812713623, -6.47456693649292, -5.445163249969482, -0.02106134407222271]",0.979158878326416
1,"['  @Test\n  public void givenEventsForCollectionExerciseValidateWhenEventIsDeletedItIsSaved()\n      throws CTPException {\n\n    final CollectionExercise collex = new CollectionExercise();\n    collex.setId(COLLEX_UUID);\n    collex.setExercisePK(EXERCISE_PK);\n    final CollectionExerciseState collectionExerciseState = CollectionExerciseState.SCHEDULED;\n    collex.setState(collectionExerciseState);\n\n    when(collectionExerciseService.findCollectionExercise(COLLEX_UUID)).thenReturn(collex);\n    final Event existingEvent = new Event();\n    existingEvent.setTag(Tag.nudge_email_4.toString());\n    existingEvent.setId(UUID.randomUUID());\n    when(eventRepository.findOneByCollectionExerciseAndTag(collex, Tag.nudge_email_4.name()))\n        .thenReturn(existingEvent);\n\n    final List<Event> existingEvents = new ArrayList<>();\n\n    eventValidators.add(eventValidator);\n\n    eventService.deleteEvent(COLLEX_UUID, Tag.nudge_email_4.name());\n\n    verify(eventRepository, atLeastOnce()).delete(eq(existingEvent));\n  }\n']",random;Validators;UID;UID;new;Events;UID;UID;event;Event,3.725290298461914e-09;3.725290298461914e-09;3.4924596548080444e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09,5,5,"[-5.4966254234313965, -4.980396270751953, -5.384098529815674, -6.471395969390869, -5.474252223968506, -0.021531518548727036]",0.9786986112594604
1,"['  @Test\n  public void givenReminderEmailIsDeletedItGetsPropagatedToActionSVC() throws CTPException {\n\n    final CollectionExercise collex = new CollectionExercise();\n    collex.setId(COLLEX_UUID);\n    collex.setExercisePK(EXERCISE_PK);\n    final CollectionExerciseState collectionExerciseState = CollectionExerciseState.SCHEDULED;\n    collex.setState(collectionExerciseState);\n\n    when(collectionExerciseService.findCollectionExercise(COLLEX_UUID)).thenReturn(collex);\n    final Event existingEvent = new Event();\n    existingEvent.setTag(Tag.reminder.toString());\n    existingEvent.setId(UUID.randomUUID());\n    when(eventRepository.findOneByCollectionExerciseAndTag(collex, Tag.reminder.name()))\n        .thenReturn(existingEvent);\n\n    final List<Event> existingEvents = new ArrayList<>();\n\n    eventValidators.add(eventValidator);\n\n    eventService.deleteEvent(COLLEX_UUID, Tag.reminder.name());\n\n    verify(eventRepository, atLeastOnce()).delete(eq(existingEvent));\n  }\n']",Validator;Repository;UID;event;Repository;Action;random;Tag;existing;Propagated,6.51925802230835e-09;2.6775524020195007e-09;1.6880221664905548e-09;1.1641532182693481e-09;1.1350493878126144e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.4778242111206055, -5.047614574432373, -5.4224419593811035, -6.4882493019104, -5.434143543243408, -0.02112717553973198]",0.9790944457054138
1,"['  @Test\n  public void givenSomeEventsWhenScheduledIsCheckedThenFalse() throws CTPException {\n    UUID collexUuid = UUID.randomUUID();\n    List<Event> events = createEventList(Tag.mps, Tag.exercise_end);\n    when(eventRepository.findByCollectionExerciseId(collexUuid)).thenReturn(events);\n\n    boolean scheduled = this.eventService.isScheduled(collexUuid);\n\n    assertFalse(scheduled);\n  }\n']",random;UID;collex;List;Exercise;uid;cheduled;Events;ps;scheduled,1.6880221664905548e-09;8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.506030559539795, -4.970667362213135, -5.403253555297852, -6.522072792053223, -5.45767879486084, -0.0214653629809618]",0.9787632822990417
1,['  @Test\n  public void givenAllEventsWhenScheduledIsCheckedThenTrue() throws CTPException {\n    UUID collexUuid = UUID.randomUUID();\n    List<Event> events = createEventList(Tag.values());\n    when(eventRepository.findByCollectionExerciseId(collexUuid)).thenReturn(events);\n\n    boolean scheduled = this.eventService.isScheduled(collexUuid);\n\n    assertTrue(scheduled);\n  }\n'],Events;When;Then;TPException;uid;UID;All;List;random;Checked,1.367880031466484e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10,5,5,"[-5.510532855987549, -4.974564075469971, -5.404923439025879, -6.508863925933838, -5.46696662902832, -0.02139127068221569]",0.9788358807563782
1,"['  @Test\n  public void givenCollectionExerciseDoesNotExistWhenCreatingAnExceptionThrowError() {\n    final String tag = Tag.mps.name();\n    final EventDTO eventDto = new EventDTO();\n    final UUID collexUuid = UUID.randomUUID();\n    eventDto.setCollectionExerciseId(collexUuid);\n    eventDto.setTag(tag);\n    when(collectionExerciseService.findCollectionExercise(collexUuid)).thenReturn(null);\n    try {\n      eventService.createEvent(eventDto);\n      fail(""Created event with non-existent collection exercise"");\n    } catch (final CTPException e) {\n      assertThat(e.getFault(), is(Fault.RESOURCE_NOT_FOUND));\n    }\n  }\n']",ault;Exist;That;Exercise;Throw;name;uid;Exception;Does;TPException,3.725290298461914e-09;2.0954757928848267e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.496692657470703, -5.031223297119141, -5.436585426330566, -6.495136737823486, -5.45845890045166, -0.020974846556782722]",0.9792436957359314
1,"['  @Test\n  public void givenCollectionExerciseEventsAreInInvalidStateThrowException() {\n    final String tag = Tag.mps.name();\n    final EventDTO eventDto = new EventDTO();\n    final CollectionExercise collex = new CollectionExercise();\n    final UUID collexUuid = UUID.randomUUID();\n    eventDto.setCollectionExerciseId(collexUuid);\n    eventDto.setTag(tag);\n    eventDto.setTimestamp(new Timestamp(Instant.now().toEpochMilli()));\n    collex.setId(collexUuid);\n    when(collectionExerciseService.findCollectionExercise(collexUuid)).thenReturn(collex);\n    when(eventRepository.findOneByCollectionExerciseAndTag(collex, Tag.mps.name()))\n        .thenReturn(null);\n    final List<Event> existingEvents = new ArrayList<>();\n    final Event event = new Event();\n    existingEvents.add(event);\n    when(eventRepository.findByCollectionExercise(collex)).thenReturn(existingEvents);\n    eventValidators.add(eventValidator);\n    try {\n      eventService.createEvent(eventDto);\n    } catch (final CTPException e) {\n      assertThat(e.getFault(), is(Fault.BAD_REQUEST));\n    }\n  }\n']",UID;ault;UID;REQUEST;That;Timestamp;Timestamp;final;to;Invalid,3.259629011154175e-09;1.862645149230957e-09;1.3096723705530167e-09;1.2223608791828156e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.472888469696045, -4.992948055267334, -5.369651794433594, -6.476606369018555, -5.47238826751709, -0.02161259949207306]",0.9786192774772644
1,"['  @Test\n  public void testStatusIsSetToScheduledNewEventCreated() {\n    final CollectionExercise collex = new CollectionExercise();\n    String tag = Tag.mps.name();\n\n    when(collectionExerciseService.findCollectionExercise(COLLEX_UUID)).thenReturn(collex);\n    when(eventRepository.save(any(Event.class))).then(returnsFirstArg());\n\n    EventDTO eventDto = new EventDTO();\n    eventDto.setCollectionExerciseId(COLLEX_UUID);\n    eventDto.setTag(tag);\n    eventDto.setTimestamp(new Timestamp(new Date().getTime()));\n\n    try {\n      Event event = eventService.createEvent(eventDto);\n      assertThat(event.getStatus(), is(EventDTO.Status.SCHEDULED));\n    } catch (CTPException e) {\n      fail();\n    }\n  }\n']",Status;ps;Collection;Timestamp;Exercise;COLLE;Time;Date;UID;event,5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.492433547973633, -5.045087814331055, -5.425192832946777, -6.515149116516113, -5.459657192230225, -0.020916011184453964]",0.9793012142181396
1,"['  @Test\n  public void testProcessEventsNoScheduledEvents() {\n    // Given\n    List<Event> emptyList = Collections.emptyList();\n    when(eventRepository.findByStatus(EventDTO.Status.SCHEDULED)).thenReturn(emptyList);\n\n    // When\n    eventService.processEvents();\n\n    // Then\n    verify(eventRepository, atMost(1)).findByStatus(EventDTO.Status.SCHEDULED);\n    verify(actionSvcClient, never()).processEvent(any(), any());\n  }\n']",any;when;Status;By;TO;Status;event;Event;No;process,9.313225746154785e-10;9.313225746154785e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.5103440284729, -5.050337791442871, -5.4550275802612305, -6.52497673034668, -5.455438613891602, -0.02067829668521881]",0.9795340299606323
1,"['  @Test\n  public void testProcessEventsOnlyEventInFuture() {\n    // Given\n    List<Event> list = new ArrayList<>();\n    Event event = createEvent(Tag.mps, ""31/12/2999"");\n    CollectionExercise collectionExercise = new CollectionExercise();\n    collectionExercise.setState(CollectionExerciseState.LIVE);\n    event.setCollectionExercise(collectionExercise);\n    list.add(event);\n\n    when(eventRepository.findByStatus(EventDTO.Status.SCHEDULED)).thenReturn(list);\n\n    // When\n    eventService.processEvents();\n\n    // Then\n    verify(eventRepository, atMost(1)).findByStatus(EventDTO.Status.SCHEDULED);\n    verify(actionSvcClient, never()).processEvent(any(), any());\n  }\n']",In;Array;Future;when;Tag;CHEDULED;Repository;Event;vc;Exercise,1.6298145055770874e-09;1.57160684466362e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.487691402435303, -5.008300304412842, -5.4297966957092285, -6.5185465812683105, -5.453989028930664, -0.021181447431445122]",0.9790412783622742
1,"['  @Test\n  public void testProcessEventsTransitionGoLive() {\n    // Given\n    List<Event> list = new ArrayList<>();\n    Event event = createEvent(Tag.go_live);\n    CollectionExercise collectionExercise = new CollectionExercise();\n    collectionExercise.setState(CollectionExerciseState.LIVE);\n    event.setCollectionExercise(collectionExercise);\n    list.add(event);\n\n    when(eventRepository.findByStatus(EventDTO.Status.SCHEDULED)).thenReturn(list);\n\n    // When\n    eventService.processEvents();\n\n    // Then\n    verify(eventRepository, atMost(1)).findByStatus(EventDTO.Status.SCHEDULED);\n    verify(actionSvcClient, atMost(1)).processEvent(any(), any());\n    try {\n      verify(collectionExerciseService, atMost(1))\n          .transitionCollectionExercise(\n              any(CollectionExercise.class),\n              any(CollectionExerciseDTO.CollectionExerciseEvent.class));\n    } catch (CTPException e) {\n      fail();\n    }\n  }\n']",Live;any;transition;Events;new;CHEDULED;Event;Collection;Process;list,1.280568540096283e-09;9.313225746154785e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.471905708312988, -5.051441669464111, -5.421965599060059, -6.490671157836914, -5.44550085067749, -0.021075468510389328]",0.9791450500488281
1,"['  @Test\n  public void testTagShouldHaveMpsAsIsActionable() {\n    assertThat(Tag.mps.isActionable(), Matchers.is(true));\n  }\n']",As;That;Tag;true;Tag;Actionable;Matchers;ps;ps;Should,8.731149137020111e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.593225955963135, -4.896397113800049, -5.453277587890625, -6.552788734436035, -5.496915817260742, -0.021228013560175896]",0.9789957404136658
1,"['  @Test\n  public void testTagShouldHaveGoLiveAsIsAnActionableTag() {\n    assertThat(Tag.go_live.isActionable(), Matchers.is(true));\n  }\n']",Actionable;Go;Tag;Tag;As;Should;true;go;Matchers;Actionable,2.6193447411060333e-09;2.561137080192566e-09;1.3969838619232178e-09;7.8580342233181e-10;4.656612873077393e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-2.9103830456733704e-10;-2.9103830456733704e-10;-3.4924596548080444e-10,5,5,"[-5.577303886413574, -4.929337978363037, -5.424849510192871, -6.529834270477295, -5.473123073577881, -0.021302469074726105]",0.9789228439331055
1,"['  @Test\n  public void testTagShouldHaveExerciseEndAsNotIsAnActionableTag() {\n    assertThat(Tag.exercise_end.isActionable(), Matchers.is(false));\n  }\n']",exercise;As;Actionable;Tag;false;Not;That;Tag;An;end,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-5.581517219543457, -4.909214496612549, -5.459054946899414, -6.552003860473633, -5.49031400680542, -0.021179229021072388]",0.9790434837341309
1,"['  @Test\n  public void testTagShouldHaveReminderAsAnActionableTag() {\n    assertThat(Tag.reminder.isActionable(), Matchers.is(true));\n  }\n']",Actionable;Reminder;true;As;Have;Should;That;Tag;reminder;Tag,2.5174813345074654e-09;1.3969838619232178e-09;5.529727786779404e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-5.238689482212067e-10;-1.0477378964424133e-09,5,5,"[-5.580649375915527, -4.849170684814453, -5.454681396484375, -6.56742525100708, -5.486627101898193, -0.021661363542079926]",0.9785715341567993
1,"['  @Test\n  public void testTagShouldHaveReminder2AsAnActionableTag() {\n    assertThat(Tag.reminder2.isActionable(), Matchers.is(true));\n  }\n']",Have;Matchers;Tag;Tag;Should;Actionable;true;An;That;Tag,9.313225746154785e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.1641532182693481e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-1.7462298274040222e-10;-4.656612873077393e-10,5,5,"[-5.583408832550049, -4.8483381271362305, -5.448072910308838, -6.542726516723633, -5.518524169921875, -0.021589385345578194]",0.9786419868469238
1,"['  @Test\n  public void testTagShouldHaveReminder3AsAnActionableTag() {\n    assertThat(Tag.reminder3.isActionable(), Matchers.is(true));\n  }\n']",Matchers;Actionable;reminder;Actionable;An;Reminder;Tag;Tag;true;Should,3.6088749766349792e-09;2.2118911147117615e-09;1.7462298274040222e-09;1.6298145055770874e-09;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.580731391906738, -4.850586414337158, -5.445258140563965, -6.541744232177734, -5.514926910400391, -0.021610267460346222]",0.9786214232444763
1,"['  @Test\n  public void testTagShouldHaveNudge0AsAnActionableTag() {\n    assertThat(Tag.nudge_email_0.isActionable(), Matchers.is(true));\n  }\n']",udge;Matchers;Should;email;Tag;As;Actionable;Actionable;Tag;Have,3.259629011154175e-09;2.2118911147117615e-09;1.7462298274040222e-09;1.7462298274040222e-09;9.313225746154785e-10;6.984919309616089e-10;4.94765117764473e-10;3.4924596548080444e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.5771355628967285, -4.910998821258545, -5.442713260650635, -6.539536952972412, -5.478047847747803, -0.0213246401399374]",0.9789011478424072
1,"['  @Test\n  public void testTagShouldHaveNudge1AsAnActionableTag() {\n    assertThat(Tag.nudge_email_1.isActionable(), Matchers.is(true));\n  }\n']",udge;Tag;Should;Matchers;Tag;Actionable;An;true;Have;As,3.958120942115784e-09;1.6298145055770874e-09;1.4551915228366852e-09;1.280568540096283e-09;8.149072527885437e-10;8.149072527885437e-10;5.238689482212067e-10;2.6193447411060333e-10;1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.57686710357666, -4.912550926208496, -5.4401469230651855, -6.5398030281066895, -5.479547023773193, -0.021318688988685608]",0.97890704870224
1,"['  @Test\n  public void testTagShouldHaveNudge2AsAnActionableTag() {\n    assertThat(Tag.nudge_email_2.isActionable(), Matchers.is(true));\n  }\n']",That;Tag;Tag;Actionable;Tag;As;true;An;Actionable;Have,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.0745362639427185e-10;-4.656612873077393e-10,5,5,"[-5.576167106628418, -4.915287971496582, -5.438263416290283, -6.535575866699219, -5.477210998535156, -0.02132534049451351]",0.9789004325866699
1,"['  @Test\n  public void testQueries()\n      throws Exception {\n    String sql = ""SELECT SUM(AirTime), SUM(ArrDelay) FROM mytable"";\n    testSqlQuery(sql, Collections.singletonList(sql));\n    sql = ""SELECT SUM(AirTime), DaysSinceEpoch FROM mytable GROUP BY DaysSinceEpoch ORDER BY SUM(AirTime) DESC"";\n    testSqlQuery(sql, Collections.singletonList(sql));\n    sql = ""SELECT Origin, SUM(ArrDelay) FROM mytable WHERE Carrier = \'AA\' GROUP BY Origin ORDER BY Origin"";\n    testSqlQuery(sql, Collections.singletonList(sql));\n  }\n']",Delay;Carrier;Air;BY;ORDER;SUM;Time;mytable;Epoch;Delay,3.259629011154175e-09;3.026798367500305e-09;2.7939677238464355e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09,5,5,"[-5.483924388885498, -4.918147087097168, -5.32180118560791, -6.440423965454102, -5.49171781539917, -0.022313134744763374]",0.9779338240623474
1,"['  @Test\n  public void testPartitionMetadata() {\n    int[] numSegmentsForPartition = new int[2];\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(getTableName());\n    List<SegmentZKMetadata> segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(realtimeTableName);\n    for (SegmentZKMetadata segmentZKMetadata : segmentsZKMetadata) {\n      SegmentPartitionMetadata segmentPartitionMetadata = segmentZKMetadata.getPartitionMetadata();\n      assertNotNull(segmentPartitionMetadata);\n      Map<String, ColumnPartitionMetadata> columnPartitionMetadataMap =\n          segmentPartitionMetadata.getColumnPartitionMap();\n      assertEquals(columnPartitionMetadataMap.size(), 1);\n      ColumnPartitionMetadata columnPartitionMetadata = columnPartitionMetadataMap.get(PARTITION_COLUMN);\n      assertNotNull(columnPartitionMetadata);\n      assertTrue(columnPartitionMetadata.getFunctionName().equalsIgnoreCase(""murmur""));\n      assertEquals(columnPartitionMetadata.getNumPartitions(), 2);\n      int partitionGroupId = new LLCSegmentName(segmentZKMetadata.getSegmentName()).getPartitionGroupId();\n      assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));\n      numSegmentsForPartition[partitionGroupId]++;\n    }\n\n    // There should be 2 segments for partition 0, 2 segments for partition 1\n    assertEquals(numSegmentsForPartition[0], 2);\n    assertEquals(numSegmentsForPartition[1], 2);\n  }\n']",partition;segments;should;Function;Name;new;partition;helix;Segments;num,1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;7.712515071034431e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.001776687800884e-10,5,5,"[-5.490321159362793, -4.9941301345825195, -5.342514991760254, -6.410822868347168, -5.453103542327881, -0.02185172587633133]",0.9783853888511658
1,"['  @Test(dependsOnMethods = ""testPartitionMetadata"")\n  public void testPartitionRouting()\n      throws Exception {\n    // Query partition 0\n    {\n      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = \'CA\'"";\n      JsonNode response = postQuery(query);\n\n      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN \'CA\' AND \'CA\'"";\n      JsonNode responseToCompare = postQuery(queryToCompare);\n\n      // Should only query the segments for partition 0\n      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), 2);\n      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), 4);\n\n      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),\n          responseToCompare.get(""aggregationResults"").get(0).get(""value"").asInt());\n    }\n\n    // Query partition 1\n    {\n      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = \'FL\'"";\n      JsonNode response = postQuery(query);\n\n      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN \'FL\' AND \'FL\'"";\n      JsonNode responseToCompare = postQuery(queryToCompare);\n\n      // Should only query the segments for partition 1\n      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), 2);\n      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), 4);\n\n      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),\n          responseToCompare.get(""aggregationResults"").get(0).get(""value"").asInt());\n    }\n  }\n']",depends;Metadata;Methods;Node;Query;query;Query;Partition;SELECT;Node,8.032657206058502e-09;1.949956640601158e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.452296257019043, -4.994146347045898, -5.3656511306762695, -6.422552108764648, -5.450020790100098, -0.021897094324231148]",0.9783409237861633
1,"['  @Test(dependsOnMethods = ""testPartitionRouting"")\n  public void testNonPartitionedStream()\n      throws Exception {\n    // Push the second Avro file into Kafka without partitioning\n    _partitionColumn = null;\n    pushAvroIntoKafka(Collections.singletonList(_avroFiles.get(1)));\n\n    // Wait for all documents loaded\n    _countStarResult += NUM_DOCS_IN_SECOND_AVRO_FILE;\n    waitForAllDocsLoaded(600_000L);\n\n    // Check partition metadata\n    int[] numSegmentsForPartition = new int[2];\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(getTableName());\n    List<SegmentZKMetadata> segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(realtimeTableName);\n    for (SegmentZKMetadata segmentZKMetadata : segmentsZKMetadata) {\n      SegmentPartitionMetadata segmentPartitionMetadata = segmentZKMetadata.getPartitionMetadata();\n      assertNotNull(segmentPartitionMetadata);\n      Map<String, ColumnPartitionMetadata> columnPartitionMetadataMap =\n          segmentPartitionMetadata.getColumnPartitionMap();\n      assertEquals(columnPartitionMetadataMap.size(), 1);\n      ColumnPartitionMetadata columnPartitionMetadata = columnPartitionMetadataMap.get(PARTITION_COLUMN);\n      assertNotNull(columnPartitionMetadata);\n      assertTrue(columnPartitionMetadata.getFunctionName().equalsIgnoreCase(""murmur""));\n      assertEquals(columnPartitionMetadata.getNumPartitions(), 2);\n      int partitionGroupId = new LLCSegmentName(segmentZKMetadata.getSegmentName()).getPartitionGroupId();\n      numSegmentsForPartition[partitionGroupId]++;\n\n      if (segmentZKMetadata.getStatus() == Status.IN_PROGRESS) {\n        // For consuming segment, the partition metadata should only contain the stream partition\n        assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));\n      } else {\n        LLCSegmentName llcSegmentName = new LLCSegmentName(segmentZKMetadata.getSegmentName());\n        int sequenceNumber = llcSegmentName.getSequenceNumber();\n        if (sequenceNumber == 0) {\n          // The partition metadata for the first completed segment should only contain the stream partition\n          assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));\n        } else {\n          // The partition metadata for the new completed segments should contain both partitions\n          assertEquals(columnPartitionMetadata.getPartitions(), new HashSet<>(Arrays.asList(0, 1)));\n        }\n      }\n    }\n\n    // There should be 4 segments for partition 0, 4 segments for partition 1\n    assertEquals(numSegmentsForPartition[0], 4);\n    assertEquals(numSegmentsForPartition[1], 4);\n\n    // Check partition routing\n    int numSegments = segmentsZKMetadata.size();\n\n    // Query partition 0\n    {\n      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = \'CA\'"";\n      JsonNode response = postQuery(query);\n\n      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN \'CA\' AND \'CA\'"";\n      JsonNode responseToCompare = postQuery(queryToCompare);\n\n      // Should skip the first completed segments and the consuming segment for partition 1\n      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments - 2);\n      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments);\n\n      // The result won\'t match because the consuming segment for partition 1 is pruned out\n    }\n\n    // Query partition 1\n    {\n      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = \'FL\'"";\n      JsonNode response = postQuery(query);\n\n      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN \'FL\' AND \'FL\'"";\n      JsonNode responseToCompare = postQuery(queryToCompare);\n\n      // Should skip the first completed segments and the consuming segment for partition 0\n      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments - 2);\n      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments);\n\n      // The result won\'t match because the consuming segment for partition 0 is pruned out\n    }\n\n    // Push the third Avro file into Kafka with partitioning\n    _partitionColumn = PARTITION_COLUMN;\n    pushAvroIntoKafka(Collections.singletonList(_avroFiles.get(2)));\n\n    // Wait for all documents loaded\n    _countStarResult += NUM_DOCS_IN_THIRD_AVRO_FILE;\n    waitForAllDocsLoaded(600_000L);\n\n    // Check partition metadata\n    numSegmentsForPartition = new int[2];\n    segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(realtimeTableName);\n    for (SegmentZKMetadata segmentZKMetadata : segmentsZKMetadata) {\n      SegmentPartitionMetadata segmentPartitionMetadata = segmentZKMetadata.getPartitionMetadata();\n      assertNotNull(segmentPartitionMetadata);\n      Map<String, ColumnPartitionMetadata> columnPartitionMetadataMap =\n          segmentPartitionMetadata.getColumnPartitionMap();\n      assertEquals(columnPartitionMetadataMap.size(), 1);\n      ColumnPartitionMetadata columnPartitionMetadata = columnPartitionMetadataMap.get(PARTITION_COLUMN);\n      assertNotNull(columnPartitionMetadata);\n      assertTrue(columnPartitionMetadata.getFunctionName().equalsIgnoreCase(""murmur""));\n      assertEquals(columnPartitionMetadata.getNumPartitions(), 2);\n      int partitionGroupId = new LLCSegmentName(segmentZKMetadata.getSegmentName()).getPartitionGroupId();\n      numSegmentsForPartition[partitionGroupId]++;\n\n      if (segmentZKMetadata.getStatus() == Status.IN_PROGRESS) {\n        // For consuming segment, the partition metadata should only contain the stream partition\n        assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));\n      } else {\n        // The partition metadata for the new completed segments should only contain the stream partition\n        LLCSegmentName llcSegmentName = new LLCSegmentName(segmentZKMetadata.getSegmentName());\n        int sequenceNumber = llcSegmentName.getSequenceNumber();\n        if (sequenceNumber == 0 || sequenceNumber >= 4) {\n          // The partition metadata for the first and new completed segments should only contain the stream partition\n          assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));\n        } else {\n          // The partition metadata for the completed segments containing records from the second Avro file should\n          // contain both partitions\n          assertEquals(columnPartitionMetadata.getPartitions(), new HashSet<>(Arrays.asList(0, 1)));\n        }\n      }\n    }\n\n    // There should be 6 segments for partition 0, 6 segments for partition 1\n    assertEquals(numSegmentsForPartition[0], 6);\n    assertEquals(numSegmentsForPartition[1], 6);\n\n    // Check partition routing\n    numSegments = segmentsZKMetadata.size();\n\n    // Query partition 0\n    {\n      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = \'CA\'"";\n      JsonNode response = postQuery(query);\n\n      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN \'CA\' AND \'CA\'"";\n      JsonNode responseToCompare = postQuery(queryToCompare);\n\n      // Should skip 2 completed segments and the consuming segment for partition 1\n      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments - 3);\n      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments);\n\n      // The result should match again after all the segments with the non-partitioning records are committed\n      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),\n          responseToCompare.get(""aggregationResults"").get(0).get(""value"").asInt());\n    }\n\n    // Query partition 1\n    {\n      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = \'FL\'"";\n      JsonNode response = postQuery(query);\n\n      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN \'FL\' AND \'FL\'"";\n      JsonNode responseToCompare = postQuery(queryToCompare);\n\n      // Should skip 2 completed segments and the consuming segment for partition 0\n      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments - 3);\n      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments);\n\n      // The result should match again after all the segments with the non-partitioning records are committed\n      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),\n          responseToCompare.get(""aggregationResults"").get(0).get(""value"").asInt());\n    }\n  }\n']",depends;afka;On;Methods;partitioning;Kafka;Wait;Equals;True;Files,3.958120942115784e-09;1.1641532182693481e-09;9.89530235528946e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.470650672912598, -4.902248859405518, -5.303089141845703, -6.398317337036133, -5.463999271392822, -0.022772815078496933]",0.9774845242500305
1,"['  @Test\n  public void testTotalCount()\n      throws Exception {\n    String query = ""SELECT count(*) FROM "" + getTableName();\n    testQuery(query, Collections.singletonList(query));\n  }\n']",singleton;List;count;Total;Exception;Name;Table;query;query;Collections,2.3283064365386963e-09;9.313225746154785e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;-2.9103830456733704e-10,5,5,"[-5.583988189697266, -4.919651508331299, -5.421719074249268, -6.521536350250244, -5.512091159820557, -0.021211206912994385]",0.9790121912956238
1,"['  @Test\n  public void testCountWithNullDescription()\n      throws Exception {\n    String query = ""SELECT count(*) FROM "" + getTableName() + "" where description IS NOT NULL"";\n    testQuery(query, Collections.singletonList(query));\n  }\n']",IS;NOT;NULL;count;FROM;Count;get;Null;List;query,8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.5861005783081055, -4.939913272857666, -5.433821678161621, -6.5152716636657715, -5.515500068664551, -0.02099469117820263]",0.9792241454124451
1,"['  @Test\n  public void testCountWithNullDescriptionAndSalary()\n      throws Exception {\n    String query = ""SELECT count(*) FROM "" + getTableName() + "" where description IS NOT NULL AND salary IS NOT NULL"";\n    testQuery(query, Collections.singletonList(query));\n  }\n']",Null;SELECT;NOT;Description;Query;NULL;query;List;salary;Table,1.6298145055770874e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.576016902923584, -4.941769123077393, -5.433299541473389, -6.518575191497803, -5.5264387130737305, -0.020972512662410736]",0.9792459011077881
1,['  @Test(enabled = false)\n  public void testShortZookeeperFreeze()\n      throws Exception {\n    testFreezeZookeeper(10000L);\n  }\n'],okeeper;Freeze;Exception;enabled;Freeze;false;Short;okeeper,1.979060471057892e-09;1.5133991837501526e-09;1.1641532182693481e-09;-2.3283064365386963e-10;-8.149072527885437e-10;-9.313225746154785e-10;-9.313225746154785e-10;-2.444721758365631e-09,5,5,"[-5.5865397453308105, -4.766872406005859, -5.371363639831543, -6.484450817108154, -5.55142068862915, -0.02256433106958866]",0.9776883125305176
1,['  @Test(enabled = false)\n  public void testLongZookeeperFreeze()\n      throws Exception {\n    testFreezeZookeeper(60000L);\n  }\n'],Freeze;okeeper;enabled;false;Freeze;Exception;Long;okeeper,1.5133991837501526e-09;1.280568540096283e-09;1.1059455573558807e-09;9.313225746154785e-10;5.820766091346741e-11;-5.820766091346741e-11;-9.313225746154785e-10;-2.6775524020195007e-09,5,5,"[-5.593469142913818, -4.8115153312683105, -5.371726036071777, -6.4867024421691895, -5.554827690124512, -0.022139299660921097]",0.9781039953231812
1,['  @Test\n  public void testQueriesFromQueryFile()\n      throws Exception {\n    super.testQueriesFromQueryFile();\n  }\n'],Queries;File;Exception;From;super;From;File;Query;Queries;Query,1.862645149230957e-09;1.7462298274040222e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;-1.1641532182693481e-10;-8.731149137020111e-10;-9.313225746154785e-10,5,5,"[-5.55435037612915, -4.839869976043701, -5.377058506011963, -6.508729934692383, -5.505356788635254, -0.022200046107172966]",0.9780446887016296
1,['  @Test\n  public void testGeneratedQueriesWithMultiValues()\n      throws Exception {\n    super.testGeneratedQueriesWithMultiValues();\n  }\n'],Queries;Queries;super;Values;Multi;Exception;Multi;Values;Generated;Generated,1.280568540096283e-09;2.3283064365386963e-10;0.0;-7.566995918750763e-10;-9.313225746154785e-10;-9.313225746154785e-10;-9.313225746154785e-10;-9.313225746154785e-10;-9.89530235528946e-10;-2.6775524020195007e-09,5,5,"[-5.547796726226807, -4.920802593231201, -5.361049175262451, -6.490350723266602, -5.478348255157471, -0.02181580290198326]",0.9784204363822937
1,"['  @Test\n  public void testDictionaryBasedQueries()\n      throws Exception {\n\n    // Dictionary columns\n    // int\n    testDictionaryBasedFunctions(""NASDelay"");\n\n    // long\n    testDictionaryBasedFunctions(""AirlineID"");\n\n    // double\n    testDictionaryBasedFunctions(""ArrDelayMinutes"");\n\n    // float\n    testDictionaryBasedFunctions(""DepDelayMinutes"");\n\n    // Non Dictionary columns\n    // int\n    testDictionaryBasedFunctions(""ActualElapsedTime"");\n\n    // double\n    testDictionaryBasedFunctions(""DepDelay"");\n\n    // float\n    testDictionaryBasedFunctions(""ArrDelay"");\n  }\n']",NASDelay;Dep;Queries;columns;Non;Ar;ictionary;Dictionary;Based;columns,1.862645149230957e-09;1.7462298274040222e-09;1.280568540096283e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.502413749694824, -4.909614562988281, -5.339374542236328, -6.449132919311523, -5.5222368240356445, -0.02207178808748722]",0.9781700968742371
1,['  @Test\n  public void testQueryExceptions()\n      throws Exception {\n    super.testQueryExceptions();\n  }\n'],Exceptions;Exceptions;super;Query;Query;Exception,5.3551048040390015e-09;2.561137080192566e-09;2.3283064365386963e-09;9.313225746154785e-10;0.0;-3.725290298461914e-09,5,5,"[-5.588089942932129, -4.929483890533447, -5.336513042449951, -6.478271484375, -5.4670729637146, -0.021780576556921005]",0.9784548878669739
1,['  @Test\n  public void testInstanceShutdown()\n      throws Exception {\n    super.testInstanceShutdown();\n  }\n'],Exception;Instance;super;Shutdown;Instance;Shutdown,4.656612873077393e-10;0.0;-6.984919309616089e-10;-1.3969838619232178e-09;-1.3969838619232178e-09;-1.5133991837501526e-09,5,5,"[-5.5734429359436035, -4.914396286010742, -5.331209182739258, -6.470839500427246, -5.462063312530518, -0.022008933126926422]",0.9782314896583557
1,['  @Test\n  public void testHardcodedSqlQueries()\n      throws Exception {\n    super.testHardcodedSqlQueries();\n  }\n'],ql;Queries;ql;super;Queries;Hardcoded;Hardcoded;Exception,3.725290298461914e-09;-5.820766091346741e-10;-9.313225746154785e-10;-1.280568540096283e-09;-1.3969838619232178e-09;-1.8044374883174896e-09;-1.862645149230957e-09;-1.862645149230957e-09,5,5,"[-5.531827926635742, -4.920251369476318, -5.338685035705566, -6.480745792388916, -5.470187187194824, -0.022042401134967804]",0.9781986474990845
1,['  @Test\n  public void testSqlQueriesFromQueryFile()\n      throws Exception {\n    super.testSqlQueriesFromQueryFile();\n  }\n'],ql;Queries;Query;File;Query;ql;From;From;super;Exception,5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;8.731149137020111e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-4.0745362639427185e-10,5,5,"[-5.554175853729248, -4.899694442749023, -5.369715213775635, -6.49664831161499, -5.503169059753418, -0.02179364114999771]",0.9784421324729919
1,"['  @Test\n  public void testSingleLevelConcat()\n      throws Exception {\n    // The original segments are time partitioned by month:\n    // segmentName (totalDocs)\n    // myTable1_16071_16101_3 (9746)\n    // myTable1_16102_16129_4 (8690)\n    // myTable1_16130_16159_5 (9621)\n    // myTable1_16160_16189_6 (9454)\n    // myTable1_16190_16220_7 (10329)\n    // myTable1_16221_16250_8 (10468)\n    // myTable1_16251_16281_9 (10499)\n    // myTable1_16282_16312_10 (10196)\n    // myTable1_16313_16342_11 (9136)\n    // myTable1_16343_16373_0 (9292)\n    // myTable1_16374_16404_1 (8736)\n    // myTable1_16405_16435_2 (9378)\n\n    // Expected merge tasks and result segments:\n    // 1.\n    //    {myTable1_16071_16101_3}\n    //      -> {merged_100days_T1_0_myTable1_16071_16099_0, merged_100days_T1_0_myTable1_16100_16101_1}\n    // 2.\n    //    {merged_100days_T1_0_myTable1_16100_16101_1, myTable1_16102_16129_4, myTable1_16130_16159_5}\n    //      -> {merged_100days_T2_0_myTable1_16100_???_0(15000), merged_100days_T2_0_myTable1_???_16159_1}\n    //    {myTable1_16160_16189_6, myTable1_16190_16220_7}\n    //      -> {merged_100days_T2_1_myTable1_16160_16199_0, merged_100days_T2_1_myTable1_16200_16220_1}\n    // 3.\n    //    {merged_100days_T2_1_myTable1_16200_16220_1, myTable1_16221_16250_8}\n    //      -> {merged_100days_T3_0_myTable1_16200_???_0(15000), merged_100days_T3_0_myTable1_???_16250_1}\n    //    {myTable1_16251_16281_9, myTable1_16282_16312_10}\n    //      -> {merged_100days_T3_1_myTable1_16251_???_0(15000), merged_100days_T3_1_myTable1_???_16299_1,\n    //      merged_100days_T3_1_myTable1_16300_16312_2}\n    // 4.\n    //    {merged_100days_T3_1_myTable1_16300_16312_2, myTable1_16313_16342_11, myTable1_16343_16373_0}\n    //      -> {merged_100days_T4_0_myTable1_16300_???_0(15000), merged_100days_T4_0_myTable1_???_16373_1}\n    //    {myTable1_16374_16404_1}\n    //      -> {merged_100days_T4_1_16374_16399_0, merged_100days_T4_1_16400_16404_1}\n    // 5.\n    //    {merged_100days_T4_1_16400_16404_1, myTable1_16405_16435_2}\n    //      -> {merged_100days_T5_0_myTable1_16400_16435_0}\n\n    String sqlQuery = ""SELECT count(*) FROM myTable1""; // 115545 rows for the test table\n    JsonNode expectedJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    int[] expectedNumSubTasks = {1, 2, 2, 2, 1};\n    int[] expectedNumSegmentsQueried = {13, 12, 13, 13, 12};\n    long expectedWatermark = 16000 * 86_400_000L;\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(SINGLE_LEVEL_CONCAT_TEST_TABLE);\n    int numTasks = 0;\n    for (String tasks = _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE);\n        tasks != null; tasks =\n        _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE), numTasks++) {\n      assertEquals(_helixTaskResourceManager.getTaskConfigs(tasks).size(), expectedNumSubTasks[numTasks]);\n      assertTrue(_helixTaskResourceManager.getTaskQueues()\n          .contains(PinotHelixTaskResourceManager.getHelixJobQueueName(MinionConstants.MergeRollupTask.TASK_TYPE)));\n      // Will not schedule task if there\'s incomplete task\n      assertNull(\n          _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));\n      waitForTaskToComplete();\n\n      // Check watermark\n      MergeRollupTaskMetadata minionTaskMetadata = MergeRollupTaskMetadata\n          .fromZNRecord(_taskManager.getClusterInfoAccessor().getMinionMergeRollupTaskZNRecord(offlineTableName));\n      assertNotNull(minionTaskMetadata);\n      assertEquals((long) minionTaskMetadata.getWatermarkMap().get(""100days""), expectedWatermark);\n      expectedWatermark += 100 * 86_400_000L;\n\n      // Check metadata of merged segments\n      for (SegmentZKMetadata metadata : _pinotHelixResourceManager.getSegmentsZKMetadata(offlineTableName)) {\n        if (metadata.getSegmentName().startsWith(""merged"")) {\n          // Check merged segment zk metadata\n          assertNotNull(metadata.getCustomMap());\n          assertEquals(""100days"",\n              metadata.getCustomMap().get(MinionConstants.MergeRollupTask.SEGMENT_ZK_METADATA_MERGE_LEVEL_KEY));\n          // Check merged segments are time partitioned\n          assertEquals(metadata.getEndTimeMs() / (86_400_000L * 100), metadata.getStartTimeMs() / (86_400_000L * 100));\n        }\n      }\n\n      // Check num total doc of merged segments are the same as the original segments\n      JsonNode actualJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n      SqlResultComparator.areEqual(actualJson, expectedJson, sqlQuery);\n      // Check query routing\n      int numSegmentsQueried = actualJson.get(""numSegmentsQueried"").asInt();\n      assertEquals(numSegmentsQueried, expectedNumSegmentsQueried[numTasks]);\n    }\n    // Check total tasks\n    assertEquals(numTasks, 5);\n\n    assertTrue(_controllerStarter.getControllerMetrics()\n        .containsGauge(""mergeRollupTaskDelayInNumBuckets.myTable1_OFFLINE.100days""));\n\n    // Drop the table\n    dropOfflineTable(SINGLE_LEVEL_CONCAT_TEST_TABLE);\n\n    // Check if the task metadata is cleaned up on table deletion\n    verifyTableDelete(offlineTableName);\n  }\n']",days;Concat;tasks;Single;The;Level;segment;original;days;days,3.725290298461914e-09;2.3283064365386963e-09;2.066371962428093e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.280568540096283e-09;9.313225746154785e-10,5,5,"[-5.500927448272705, -4.827001571655273, -5.310000896453857, -6.404654026031494, -5.503488540649414, -0.023024827241897583]",0.9772382378578186
1,"['  @Test\n  public void testSingleLevelRollup()\n      throws Exception {\n    // The original segments are time partitioned by month:\n    // segmentName (totalDocs)\n    // myTable2_16071_16101_3_1, myTable2_16071_16101_3_2 (9746)\n    // myTable2_16102_16129_4_1, myTable2_16102_16129_4_2 (8690)\n    // myTable2_16130_16159_5_1, myTable2_16130_16159_5_2 (9621)\n    // myTable2_16160_16189_6_1, myTable2_16160_16189_6_2 (9454)\n    // myTable2_16190_16220_7_1, myTable2_16190_16220_7_2 (10329)\n    // myTable2_16221_16250_8_1, myTable2_16221_16250_8_2 (10468)\n    // myTable2_16251_16281_9_1, myTable2_16251_16281_9_2 (10499)\n    // myTable2_16282_16312_10_1, myTable2_16282_16312_10_2 (10196)\n    // myTable2_16313_16342_11_1, myTable2_16313_16342_11_2 (9136)\n    // myTable2_16343_16373_0_1, myTable2_16343_16373_0_2 (9292)\n    // myTable2_16374_16404_1_1, myTable2_16374_16404_1_2 (8736)\n    // myTable2_16405_16435_2_1, myTable2_16405_16435_2_2 (9378)\n\n    // Expected merge tasks and result segments:\n    // 1.\n    //    {myTable2_16071_16101_3_1, myTable2_16071_16101_3_2, myTable2_16102_16129_4_1, myTable2_16102_16129_4_2,\n    //     myTable2_16130_16159_5_1, myTable2_16130_16159_5_2, myTable2_16160_16189_6_1, myTable2_16160_16189_6_2\n    //     myTable2_16190_16220_7}\n    //      -> {merged_150days_T1_0_myTable2_16065_16198_0, merged_150days_T1_0_myTable2_16205_16219_1}\n    // 2.\n    //    {merged_150days_T1_0_myTable2_16205_16219_1, myTable2_16221_16250_8_1, myTable2_16221_16250_8_2,\n    //     myTable2_16251_16281_9_1, myTable2_16251_16281_9_2, myTable2_16282_16312_10_1\n    //     myTable2_16282_16312_10_2, myTable2_16313_16342_11_1, myTable2_16313_16342_11_2,\n    //     myTable2_16343_16373_0_1, myTable2_16343_16373_0_2}\n    //      -> {merged_150days_1628644088146_0_myTable2_16205_16345_0,\n    //          merged_150days_1628644088146_0_myTable2_16352_16373_1}\n    // 3.\n    //    {merged_150days_1628644088146_0_myTable2_16352_16373_1, myTable2_16374_16404_1_1, myTable2_16374_16404_1_2\n    //     myTable2_16405_16435_2_1, myTable2_16405_16435_2_2}\n    //      -> {merged_150days_1628644105127_0_myTable2_16352_16429_0}\n\n    String sqlQuery = ""SELECT count(*) FROM myTable2""; // 115545 rows for the test table\n    JsonNode expectedJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    int[] expectedNumSegmentsQueried = {16, 7, 3};\n    long expectedWatermark = 16050 * 86_400_000L;\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(SINGLE_LEVEL_ROLLUP_TEST_TABLE);\n    int numTasks = 0;\n    for (String tasks = _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE);\n        tasks != null; tasks =\n        _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE), numTasks++) {\n      assertEquals(_helixTaskResourceManager.getTaskConfigs(tasks).size(), 1);\n      assertTrue(_helixTaskResourceManager.getTaskQueues()\n          .contains(PinotHelixTaskResourceManager.getHelixJobQueueName(MinionConstants.MergeRollupTask.TASK_TYPE)));\n      // Will not schedule task if there\'s incomplete task\n      assertNull(\n          _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));\n      waitForTaskToComplete();\n\n      // Check watermark\n      MergeRollupTaskMetadata minionTaskMetadata = MergeRollupTaskMetadata\n          .fromZNRecord(_taskManager.getClusterInfoAccessor().getMinionMergeRollupTaskZNRecord(offlineTableName));\n      assertNotNull(minionTaskMetadata);\n      assertEquals((long) minionTaskMetadata.getWatermarkMap().get(""150days""), expectedWatermark);\n      expectedWatermark += 150 * 86_400_000L;\n\n      // Check metadata of merged segments\n      for (SegmentZKMetadata metadata : _pinotHelixResourceManager.getSegmentsZKMetadata(offlineTableName)) {\n        if (metadata.getSegmentName().startsWith(""merged"")) {\n          // Check merged segment zk metadata\n          assertNotNull(metadata.getCustomMap());\n          assertEquals(""150days"",\n              metadata.getCustomMap().get(MinionConstants.MergeRollupTask.SEGMENT_ZK_METADATA_MERGE_LEVEL_KEY));\n          // Check merged segments are time partitioned\n          assertEquals(metadata.getEndTimeMs() / (86_400_000L * 150), metadata.getStartTimeMs() / (86_400_000L * 150));\n        }\n      }\n\n      // Check total doc of merged segments are less than the original segments\n      JsonNode actualJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n      assertTrue(\n          actualJson.get(""resultTable"").get(""rows"").get(0).get(0).asInt() < expectedJson.get(""resultTable"").get(""rows"")\n              .get(0).get(0).asInt());\n      // Check query routing\n      int numSegmentsQueried = actualJson.get(""numSegmentsQueried"").asInt();\n      assertEquals(numSegmentsQueried, expectedNumSegmentsQueried[numTasks]);\n    }\n\n    // Check total doc is half of the original after all merge tasks are finished\n    JsonNode actualJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    assertEquals(actualJson.get(""resultTable"").get(""rows"").get(0).get(0).asInt(),\n        expectedJson.get(""resultTable"").get(""rows"").get(0).get(0).asInt() / 2);\n    // Check time column is rounded\n    JsonNode responseJson =\n        postSqlQuery(""SELECT count(*), DaysSinceEpoch FROM myTable2 GROUP BY DaysSinceEpoch ORDER BY DaysSinceEpoch"");\n    for (int i = 0; i < responseJson.get(""resultTable"").get(""rows"").size(); i++) {\n      int daysSinceEpoch = responseJson.get(""resultTable"").get(""rows"").get(i).get(1).asInt();\n      assertTrue(daysSinceEpoch % 7 == 0);\n    }\n    // Check total tasks\n    assertEquals(numTasks, 3);\n\n    assertTrue(_controllerStarter.getControllerMetrics()\n        .containsGauge(""mergeRollupTaskDelayInNumBuckets.myTable2_OFFLINE.150days""));\n  }\n']",Single;Name;The;tasks;segments;my;Exception;Level;Rollup;my,3.725290298461914e-09;1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.675246939063072e-10;5.529727786779404e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.52359676361084, -4.872277736663818, -5.331636905670166, -6.415513515472412, -5.510983467102051, -0.022410938516259193]",0.9778383374214172
1,"['  @Test\n  public void testMultiLevelConcat()\n      throws Exception {\n    // The original segments are time partitioned by month:\n    // segmentName (totalDocs)\n    // myTable3_16071_16101_3 (9746)\n    // myTable3_16102_16129_4 (8690)\n    // myTable3_16130_16159_5 (9621)\n    // myTable3_16160_16189_6 (9454)\n    // myTable3_16190_16220_7 (10329)\n    // myTable3_16221_16250_8 (10468)\n    // myTable3_16251_16281_9 (10499)\n    // myTable3_16282_16312_10 (10196)\n    // myTable3_16313_16342_11 (9136)\n    // myTable3_16343_16373_0 (9292)\n    // myTable3_16374_16404_1 (8736)\n    // myTable3_16405_16435_2 (9378)\n\n    // Expected merge tasks and results:\n    // 1.\n    //    45days: {myTable3_16071_16101_3, myTable3_16102_16129_4}\n    //      -> {merged_45days_T1_0_myTable3_16071_16109_0, merged_45days_T1_0_myTable3_16110_16129_1}\n    //    watermark: {45days: 16065, 90days: null}\n    // 2.\n    //    45days: {merged_45days_T1_0_myTable3_16110_16129_1, myTable3_16130_16159_5}\n    //      -> {merged_45days_T2_0_myTable3_16110_16154_0, merged_45days_T2_0_myTable3_16155_16159_1}\n    //    90days: {merged_45days_T1_0_myTable3_16071_16109_0}\n    //      -> {merged_90days_T2_0_myTable3_16071_16109_0}\n    //    watermark: {45days: 16110, 90days: 16020}\n    // 3.\n    //    45days: {merged_45days_T2_0_myTable3_16155_16159_1, myTable3_16160_16189_6, myTable3_16190_16220_7}\n    //      -> {merged_45days_T3_0_myTable3_16155_16199_0, merged_45days_T3_0_myTable3_16200_16220_1}\n    //    watermark: {45days: 16155, 90days: 16020}\n    // 4.\n    //    45days: {merged_45days_T3_-_myTable3_16200_16220_1, myTable3_16221_16250_8}\n    //      -> {merged_45days_T4_0_myTable3_16200_16244_0, merged_45days_T4_0_myTable3_16245_16250_1}\n    //    90days: {merged_45days_T2_0_myTable3_16110_16154_0, merged_45days_T3_0_myTable3_16155_16199_0}\n    //      -> {merged_90days_T4_0_myTable3_16110_16199_0}\n    //    watermark: {45days: 16200, 90days: 16110}\n    // 5.\n    //    45days: {merged_45days_T4_0_myTable3_16245_16250_1, myTable3_16251_16281_9, myTable3_16282_16312_10}\n    //      -> {merged_45days_T5_0_myTable3_16245_16289_0, merged_45days_T5_0_myTable3_16290_16312_1}\n    //    watermark: {45days: 16245, 90days: 16110}\n    // 6.\n    //    45days: {merged_45days_T5_0_myTable3_16290_16312_1, myTable3_16313_16342_11}\n    //      -> {merged_45days_T6_0_myTable3_16290_16334_0, merged_45days_T6_0_myTable3_16335_16342_1}\n    //    90days: {merged_45days_T4_0_myTable3_16200_16244_0, merged_45days_T5_0_myTable3_16245_16289_0}\n    //      -> {merged_90days_T6_0_myTable3_16200_16289_0}\n    //    watermark: {45days: 16290, 90days: 16200}\n    // 7.\n    //    45days: {merged_45days_T6_0_myTable3_16335_16342_1, myTable_16343_16373_0, myTable_16374_16404_1}\n    //      -> {merged_45days_T7_0_myTable3_16335_16379_0, merged_45days_T7_0_myTable3_16380_16404_1}\n    //    watermark: {45days: 16335, 90days: 16200}\n    // 8.\n    //    45days: {merged_45days_T7_0_myTable3_16380_16404_1, myTable3_16405_16435_2}\n    //      -> {merged_45days_T8_0_myTable3_16380_16424_0, merged_45days_T8_1_myTable3_16425_16435_1}\n    //    90days: {merged_45days_T6_0_myTable3_16290_16334_0, merged_45days_T7_0_myTable3_16335_16379_0}\n    //      -> {merged_90days_T8_0_myTable3_16290_16379_0}\n    //    watermark: {45days:16380, 90days: 16290}\n    // 9.\n    //    45days: no segment left, not scheduling\n    //    90days: [16380, 16470) is not a valid merge window because windowEndTime > 45days watermark, not scheduling\n\n    String sqlQuery = ""SELECT count(*) FROM myTable3""; // 115545 rows for the test table\n    JsonNode expectedJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    int[] expectedNumSubTasks = {1, 2, 1, 2, 1, 2, 1, 2, 1};\n    int[] expectedNumSegmentsQueried = {12, 12, 11, 10, 9, 8, 7, 6, 5};\n    Long[] expectedWatermarks45Days = {16065L, 16110L, 16155L, 16200L, 16245L, 16290L, 16335L, 16380L};\n    Long[] expectedWatermarks90Days = {null, 16020L, 16020L, 16110L, 16110L, 16200L, 16200L, 16290L};\n    for (int i = 0; i < expectedWatermarks45Days.length; i++) {\n      expectedWatermarks45Days[i] *= 86_400_000L;\n    }\n    for (int i = 1; i < expectedWatermarks90Days.length; i++) {\n      expectedWatermarks90Days[i] *= 86_400_000L;\n    }\n\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(MULTI_LEVEL_CONCAT_TEST_TABLE);\n    int numTasks = 0;\n    for (String tasks = _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE);\n        tasks != null; tasks =\n        _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE), numTasks++) {\n      assertEquals(_helixTaskResourceManager.getTaskConfigs(tasks).size(), expectedNumSubTasks[numTasks]);\n      assertTrue(_helixTaskResourceManager.getTaskQueues()\n          .contains(PinotHelixTaskResourceManager.getHelixJobQueueName(MinionConstants.MergeRollupTask.TASK_TYPE)));\n      // Will not schedule task if there\'s incomplete task\n      assertNull(\n          _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));\n      waitForTaskToComplete();\n\n      // Check watermark\n      MergeRollupTaskMetadata minionTaskMetadata = MergeRollupTaskMetadata\n          .fromZNRecord(_taskManager.getClusterInfoAccessor().getMinionMergeRollupTaskZNRecord(offlineTableName));\n      assertNotNull(minionTaskMetadata);\n      assertEquals(minionTaskMetadata.getWatermarkMap().get(""45days""), expectedWatermarks45Days[numTasks]);\n      assertEquals(minionTaskMetadata.getWatermarkMap().get(""90days""), expectedWatermarks90Days[numTasks]);\n\n      // Check metadata of merged segments\n      for (SegmentZKMetadata metadata : _pinotHelixResourceManager.getSegmentsZKMetadata(offlineTableName)) {\n        if (metadata.getSegmentName().startsWith(""merged"")) {\n          // Check merged segment zk metadata\n          assertNotNull(metadata.getCustomMap());\n          if (metadata.getSegmentName().startsWith(""merged_45days"")) {\n            assertEquals(""45days"",\n                metadata.getCustomMap().get(MinionConstants.MergeRollupTask.SEGMENT_ZK_METADATA_MERGE_LEVEL_KEY));\n            assertEquals(metadata.getEndTimeMs() / (86_400_000L * 45), metadata.getStartTimeMs() / (86_400_000L * 45));\n          }\n          if (metadata.getSegmentName().startsWith(""merged_90days"")) {\n            assertEquals(""90days"",\n                metadata.getCustomMap().get(MinionConstants.MergeRollupTask.SEGMENT_ZK_METADATA_MERGE_LEVEL_KEY));\n            assertEquals(metadata.getEndTimeMs() / (86_400_000L * 90), metadata.getStartTimeMs() / (86_400_000L * 90));\n          }\n        }\n      }\n\n      // Check total doc of merged segments are the same as the original segments\n      JsonNode actualJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n      SqlResultComparator.areEqual(actualJson, expectedJson, sqlQuery);\n      // Check query routing\n      int numSegmentsQueried = actualJson.get(""numSegmentsQueried"").asInt();\n      assertEquals(numSegmentsQueried, expectedNumSegmentsQueried[numTasks]);\n    }\n    // Check total tasks\n    assertEquals(numTasks, 8);\n\n    assertTrue(_controllerStarter.getControllerMetrics()\n        .containsGauge(""mergeRollupTaskDelayInNumBuckets.myTable3_OFFLINE.45days""));\n    assertTrue(_controllerStarter.getControllerMetrics()\n        .containsGauge(""mergeRollupTaskDelayInNumBuckets.myTable3_OFFLINE.90days""));\n  }\n']",watermark;The;original;my;my;tasks;merged;results;segments;my,1.3969838619232178e-09;8.731149137020111e-10;8.149072527885437e-10;6.766640581190586e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.496402263641357, -4.8025970458984375, -5.309717178344727, -6.40612268447876, -5.508942127227783, -0.02322261780500412]",0.977044939994812
1,"['  @Test\n  public void testInstancesStarted() {\n    assertEquals(_serviceStatusCallbacks.size(), getNumBrokers() + getNumServers());\n    for (ServiceStatus.ServiceStatusCallback serviceStatusCallback : _serviceStatusCallbacks) {\n      assertEquals(serviceStatusCallback.getServiceStatus(), ServiceStatus.Status.GOOD);\n    }\n  }\n']",Started;Num;Callbacks;Callbacks;Callback;service;Status;Status;service;Status,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.565352439880371, -4.960484981536865, -5.418008327484131, -6.523159980773926, -5.488992691040039, -0.021095776930451393]",0.9791253209114075
1,"['  @Test\n  public void testInvalidTableConfig() {\n    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(""badTable"").build();\n    ObjectNode tableConfigJson = (ObjectNode) tableConfig.toJsonNode();\n    // Remove a mandatory field\n    tableConfigJson.remove(TableConfig.VALIDATION_CONFIG_KEY);\n    try {\n      sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableConfigJson.toString());\n      fail();\n    } catch (IOException e) {\n      // Should get response code 400 (BAD_REQUEST)\n      assertTrue(e.getMessage().startsWith(""Server returned HTTP response code: 400""));\n    }\n  }\n']",bad;Create;set;mandatory;Node;Name;URLBuilder;catch;returned;Node,6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.514988422393799, -5.044248104095459, -5.441559314727783, -6.489307880401611, -5.4701972007751465, -0.020748822018504143]",0.9794649481773376
1,"['  @Test\n  public void testRefreshTableConfigAndQueryTimeout()\n      throws Exception {\n    // Set timeout as 5ms so that query will timeout\n    TableConfig tableConfig = getOfflineTableConfig();\n    tableConfig.setQueryConfig(new QueryConfig(5L));\n    updateTableConfig(tableConfig);\n\n    // Wait for at most 1 minute for broker to receive and process the table config refresh message\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_TIMEOUT_QUERY);\n        JsonNode exceptions = queryResponse.get(""exceptions"");\n        if (exceptions.isEmpty()) {\n          return false;\n        }\n        int errorCode = exceptions.get(0).get(""errorCode"").asInt();\n        if (errorCode == QueryException.BROKER_TIMEOUT_ERROR_CODE) {\n          // Timed out on broker side\n          return true;\n        }\n        if (errorCode == QueryException.SERVER_NOT_RESPONDING_ERROR_CODE) {\n          // Timed out on server side\n          int numServersQueried = queryResponse.get(""numServersQueried"").asInt();\n          int numServersResponded = queryResponse.get(""numServersResponded"").asInt();\n          int numDocsScanned = queryResponse.get(""numDocsScanned"").asInt();\n          return numServersQueried == getNumServers() && numServersResponded == 0 && numDocsScanned == 0;\n        }\n        return false;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 60_000L, ""Failed to refresh table config"");\n\n    // Remove timeout so that query will finish\n    tableConfig.setQueryConfig(null);\n    updateTableConfig(tableConfig);\n\n    // Wait for at most 1 minute for broker to receive and process the table config refresh message\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_TIMEOUT_QUERY);\n        JsonNode exceptions = queryResponse.get(""exceptions"");\n        if (!exceptions.isEmpty()) {\n          return false;\n        }\n        int numServersQueried = queryResponse.get(""numServersQueried"").asInt();\n        int numServersResponded = queryResponse.get(""numServersResponded"").asInt();\n        int numDocsScanned = queryResponse.get(""numDocsScanned"").asInt();\n        return numServersQueried == getNumServers() && numServersResponded == getNumServers()\n            && numDocsScanned == getCountStarResult();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 60_000L, ""Failed to refresh table config"");\n  }\n']",SERVER;wait;broker;ONDING;RES;message;oid;Exception;timeout;on,1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.529727786779404e-10;5.529727786779404e-10,5,5,"[-5.463744640350342, -4.985340118408203, -5.340226650238037, -6.4170966148376465, -5.469454765319824, -0.021956106647849083]",0.978283166885376
1,"['  @Test\n  public void testUploadSameSegments()\n      throws Exception {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(getTableName());\n    SegmentZKMetadata segmentZKMetadata = _helixResourceManager.getSegmentsZKMetadata(offlineTableName).get(0);\n    String segmentName = segmentZKMetadata.getSegmentName();\n    long crc = segmentZKMetadata.getCrc();\n    // Creation time is when the segment gets created\n    long creationTime = segmentZKMetadata.getCreationTime();\n    // Push time is when the segment gets first pushed (new segment)\n    long pushTime = segmentZKMetadata.getPushTime();\n    // Refresh time is when the segment gets refreshed (existing segment)\n    long refreshTime = segmentZKMetadata.getRefreshTime();\n\n    uploadSegments(offlineTableName, _tarDir);\n    for (SegmentZKMetadata segmentZKMetadataAfterUpload : _helixResourceManager\n        .getSegmentsZKMetadata(offlineTableName)) {\n      // Only check one segment\n      if (segmentZKMetadataAfterUpload.getSegmentName().equals(segmentName)) {\n        assertEquals(segmentZKMetadataAfterUpload.getCrc(), crc);\n        assertEquals(segmentZKMetadataAfterUpload.getCreationTime(), creationTime);\n        assertEquals(segmentZKMetadataAfterUpload.getPushTime(), pushTime);\n        // Refresh time should change\n        assertTrue(segmentZKMetadataAfterUpload.getRefreshTime() > refreshTime);\n        return;\n      }\n    }\n  }\n']",the;segment;Exception;helix;Upload;Metadata;Resource;Table;Builder;should,1.6298145055770874e-09;1.3969838619232178e-09;8.149072527885437e-10;6.402842700481415e-10;2.9103830456733704e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10,5,5,"[-5.49766731262207, -5.033459186553955, -5.361623287200928, -6.441051483154297, -5.468533992767334, -0.021344128996133804]",0.9788820743560791
1,"['  @Test\n  public void testUploadSegmentRefreshOnly()\n      throws Exception {\n    TableConfig segmentUploadTestTableConfig =\n        new TableConfigBuilder(TableType.OFFLINE).setTableName(SEGMENT_UPLOAD_TEST_TABLE).setSchemaName(getSchemaName())\n            .setTimeColumnName(getTimeColumnName()).setSortedColumn(getSortedColumn())\n            .setInvertedIndexColumns(getInvertedIndexColumns()).setNoDictionaryColumns(getNoDictionaryColumns())\n            .setRangeIndexColumns(getRangeIndexColumns()).setBloomFilterColumns(getBloomFilterColumns())\n            .setFieldConfigList(getFieldConfigs()).setNumReplicas(getNumReplicas())\n            .setSegmentVersion(getSegmentVersion())\n            .setLoadMode(getLoadMode()).setTaskConfig(getTaskConfig()).setBrokerTenant(getBrokerTenant())\n            .setServerTenant(getServerTenant()).setIngestionConfig(getIngestionConfig())\n            .setNullHandlingEnabled(getNullHandlingEnabled()).build();\n    addTableConfig(segmentUploadTestTableConfig);\n    String offlineTableName = segmentUploadTestTableConfig.getTableName();\n    File[] segmentTarFiles = _tarDir.listFiles();\n    assertNotNull(segmentTarFiles);\n    int numSegments = segmentTarFiles.length;\n    assertTrue(numSegments > 0);\n    List<Header> headers = new ArrayList<>();\n    headers.add(new BasicHeader(FileUploadDownloadClient.CustomHeaders.REFRESH_ONLY, ""true""));\n    List<NameValuePair> parameters = new ArrayList<>();\n    NameValuePair tableNameParameter = new BasicNameValuePair(FileUploadDownloadClient.QueryParameters.TABLE_NAME,\n        TableNameBuilder.extractRawTableName(offlineTableName));\n    parameters.add(tableNameParameter);\n\n    URI uploadSegmentHttpURI = FileUploadDownloadClient.getUploadSegmentHttpURI(LOCAL_HOST, _controllerPort);\n    try (FileUploadDownloadClient fileUploadDownloadClient = new FileUploadDownloadClient()) {\n      // Refresh non-existing segment\n      File segmentTarFile = segmentTarFiles[0];\n      try {\n        fileUploadDownloadClient\n            .uploadSegment(uploadSegmentHttpURI, segmentTarFile.getName(), segmentTarFile, headers, parameters,\n                FileUploadDownloadClient.DEFAULT_SOCKET_TIMEOUT_MS);\n        fail();\n      } catch (HttpErrorStatusException e) {\n        assertEquals(e.getStatusCode(), HttpStatus.SC_GONE);\n        assertTrue(_helixResourceManager.getSegmentsZKMetadata(SEGMENT_UPLOAD_TEST_TABLE).isEmpty());\n      }\n\n      // Upload segment\n      SimpleHttpResponse response = fileUploadDownloadClient\n          .uploadSegment(uploadSegmentHttpURI, segmentTarFile.getName(), segmentTarFile, null, parameters,\n              FileUploadDownloadClient.DEFAULT_SOCKET_TIMEOUT_MS);\n      assertEquals(response.getStatusCode(), HttpStatus.SC_OK);\n      System.out.println(response.getResponse());\n      List<SegmentZKMetadata> segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(offlineTableName);\n      assertEquals(segmentsZKMetadata.size(), 1);\n\n      // Refresh existing segment\n      response = fileUploadDownloadClient\n          .uploadSegment(uploadSegmentHttpURI, segmentTarFile.getName(), segmentTarFile, headers, parameters,\n              FileUploadDownloadClient.DEFAULT_SOCKET_TIMEOUT_MS);\n      assertEquals(response.getStatusCode(), HttpStatus.SC_OK);\n      segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(offlineTableName);\n      assertEquals(segmentsZKMetadata.size(), 1);\n      assertNotEquals(segmentsZKMetadata.get(0).getRefreshTime(), Long.MIN_VALUE);\n    }\n    dropOfflineTable(SEGMENT_UPLOAD_TEST_TABLE);\n  }\n']",Refresh;SE;Segment;MENT;OFFLINE;Schema;Replicas;PLOAD;Table;Type,3.259629011154175e-09;2.0954757928848267e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3606040738523006e-09;1.0913936421275139e-09;1.0186340659856796e-09;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.435349941253662, -5.042786121368408, -5.379125118255615, -6.412730693817139, -5.430506229400635, -0.021682128310203552]",0.9785512685775757
1,"['  @Test(dependsOnMethods = ""testRangeIndexTriggering"")\n  public void testInvertedIndexTriggering()\n      throws Exception {\n    long numTotalDocs = getCountStarResult();\n\n    // Without index on DivActualElapsedTime, all docs are scanned at filtering stage.\n    assertEquals(postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY).get(""numEntriesScannedInFilter"").asLong(), numTotalDocs);\n\n    addInvertedIndex();\n    long tableSizeWithNewIndex = getTableSize(getTableName());\n\n    // Update table config to remove the new inverted index, and\n    // reload table to clean the new inverted indices physically.\n    TableConfig tableConfig = getOfflineTableConfig();\n    tableConfig.getIndexingConfig().setInvertedIndexColumns(getInvertedIndexColumns());\n    updateTableConfig(tableConfig);\n    reloadOfflineTable(getTableName());\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY);\n        // Total docs should not change during reload, but num entries scanned\n        // gets back to total number of documents as the index is removed.\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        return queryResponse.get(""numEntriesScannedInFilter"").asLong() == numTotalDocs;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to cleanup obsolete index"");\n    assertEquals(getTableSize(getTableName()), _tableSizeAfterRemovingIndex);\n\n    // Add the inverted index back to test index removal via force download.\n    addInvertedIndex();\n    long tableSizeAfterAddingIndexAgain = getTableSize(getTableName());\n    assertEquals(tableSizeAfterAddingIndexAgain, tableSizeWithNewIndex);\n\n    // Update table config to remove the new inverted index.\n    tableConfig = getOfflineTableConfig();\n    tableConfig.getIndexingConfig().setInvertedIndexColumns(getInvertedIndexColumns());\n    updateTableConfig(tableConfig);\n\n    // Force to download a single segment, and disk usage should drop a bit.\n    SegmentZKMetadata segmentZKMetadata =\n        _helixResourceManager.getSegmentsZKMetadata(TableNameBuilder.OFFLINE.tableNameWithType(getTableName())).get(0);\n    String segmentName = segmentZKMetadata.getSegmentName();\n    reloadOfflineSegment(getTableName(), segmentName, true);\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY);\n        // Total docs should not change during reload\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        return getTableSize(getTableName()) < tableSizeAfterAddingIndexAgain;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to clean up obsolete index in segment"");\n\n    // Force to download the whole table and expect disk usage drops further.\n    reloadOfflineTable(getTableName(), true);\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY);\n        // Total docs should not change during reload, but num entries scanned\n        // gets back to total number of documents as the index is removed.\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        return queryResponse.get(""numEntriesScannedInFilter"").asLong() == numTotalDocs;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to cleanup obsolete index in table"");\n    // With force download, the table size gets back to the initial value.\n    assertEquals(getTableSize(getTableName()), DISK_SIZE_IN_BYTES);\n  }\n']",Entries;Scanned;Removing;son;depends;index;oid;num;Equals;filtering,2.0954757928848267e-09;1.7462298274040222e-09;1.6880221664905548e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09,5,5,"[-5.533146381378174, -4.797821044921875, -5.346676826477051, -6.440652847290039, -5.51711893081665, -0.02283678576350212]",0.9774219989776611
1,"['  @Test\n  public void testTimeFunc()\n      throws Exception {\n    String sqlQuery = ""SELECT toDateTime(now(), \'yyyy-MM-dd z\'), toDateTime(ago(\'PT1H\'), \'yyyy-MM-dd z\') FROM mytable"";\n    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    String todayStr = response.get(""resultTable"").get(""rows"").get(0).get(0).asText();\n    String expectedTodayStr =\n        Instant.now().atZone(ZoneId.of(""UTC"")).format(DateTimeFormatter.ofPattern(""yyyy-MM-dd z""));\n    assertEquals(todayStr, expectedTodayStr);\n\n    String oneHourAgoTodayStr = response.get(""resultTable"").get(""rows"").get(0).get(1).asText();\n    String expectedOneHourAgoTodayStr = Instant.now().minus(Duration.parse(""PT1H"")).atZone(ZoneId.of(""UTC""))\n        .format(DateTimeFormatter.ofPattern(""yyyy-MM-dd z""));\n    assertEquals(oneHourAgoTodayStr, expectedOneHourAgoTodayStr);\n  }\n']",Instant;sql;broker;Equals;Query;Time;SELECT;son;yyyy;Node,1.3969838619232178e-09;1.0477378964424133e-09;9.604264050722122e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.504977226257324, -4.954545974731445, -5.360867023468018, -6.4712653160095215, -5.530283451080322, -0.02155730128288269]",0.9786732792854309
1,"['  @Test\n  public void testLiteralOnlyFunc()\n      throws Exception {\n    long currentTsMin = System.currentTimeMillis();\n    long oneHourAgoTsMin = currentTsMin - ONE_HOUR_IN_MS;\n    String sqlQuery =\n        ""SELECT 1, now() as currentTs, ago(\'PT1H\') as oneHourAgoTs, \'abc\', toDateTime(now(), \'yyyy-MM-dd z\') as ""\n            + ""today, now(), ago(\'PT1H\')"";\n    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    long currentTsMax = System.currentTimeMillis();\n    long oneHourAgoTsMax = currentTsMax - ONE_HOUR_IN_MS;\n\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(0).asText(), ""1"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(1).asText(), ""currentTs"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(2).asText(), ""oneHourAgoTs"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(3).asText(), ""abc"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(4).asText(), ""today"");\n    String nowColumnName = response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(5).asText();\n    String oneHourAgoColumnName = response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(6).asText();\n    assertTrue(Long.parseLong(nowColumnName) > currentTsMin);\n    assertTrue(Long.parseLong(nowColumnName) < currentTsMax);\n    assertTrue(Long.parseLong(oneHourAgoColumnName) > oneHourAgoTsMin);\n    assertTrue(Long.parseLong(oneHourAgoColumnName) < oneHourAgoTsMax);\n\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(0).asText(), ""LONG"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(1).asText(), ""LONG"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(2).asText(), ""LONG"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(3).asText(), ""STRING"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(4).asText(), ""STRING"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(5).asText(), ""LONG"");\n    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(6).asText(), ""LONG"");\n\n    int first = response.get(""resultTable"").get(""rows"").get(0).get(0).asInt();\n    long second = response.get(""resultTable"").get(""rows"").get(0).get(1).asLong();\n    long third = response.get(""resultTable"").get(""rows"").get(0).get(2).asLong();\n    String fourth = response.get(""resultTable"").get(""rows"").get(0).get(3).asText();\n    assertEquals(first, 1);\n    assertTrue(second > currentTsMin);\n    assertTrue(second < currentTsMax);\n    assertTrue(third > oneHourAgoTsMin);\n    assertTrue(third < oneHourAgoTsMax);\n    assertEquals(fourth, ""abc"");\n    String todayStr = response.get(""resultTable"").get(""rows"").get(0).get(4).asText();\n    String expectedTodayStr =\n        Instant.now().atZone(ZoneId.of(""UTC"")).format(DateTimeFormatter.ofPattern(""yyyy-MM-dd z""));\n    assertEquals(todayStr, expectedTodayStr);\n    long nowValue = response.get(""resultTable"").get(""rows"").get(0).get(5).asLong();\n    assertEquals(nowValue, Long.parseLong(nowColumnName));\n    long oneHourAgoValue = response.get(""resultTable"").get(""rows"").get(0).get(6).asLong();\n    assertEquals(oneHourAgoValue, Long.parseLong(oneHourAgoColumnName));\n  }\n']",broker;post;Node;one;Hour;as;Date;response;Column;sql,1.6298145055770874e-09;9.022187441587448e-10;8.731149137020111e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.43840217590332, -4.970027446746826, -5.300409317016602, -6.421915054321289, -5.497284412384033, -0.022248081862926483]",0.9779976010322571
1,"['  @Test(dependsOnMethods = ""testBloomFilterTriggering"")\n  public void testRangeIndexTriggering()\n      throws Exception {\n    long numTotalDocs = getCountStarResult();\n    assertEquals(postQuery(TEST_UPDATED_RANGE_INDEX_QUERY).get(""numEntriesScannedInFilter"").asLong(), numTotalDocs);\n\n    // Update table config and trigger reload\n    TableConfig tableConfig = getOfflineTableConfig();\n    tableConfig.getIndexingConfig().setRangeIndexColumns(UPDATED_RANGE_INDEX_COLUMNS);\n    updateTableConfig(tableConfig);\n    reloadOfflineTable(getTableName());\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_UPDATED_RANGE_INDEX_QUERY);\n        // Total docs should not change during reload\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        return queryResponse.get(""numEntriesScannedInFilter"").asLong() < numTotalDocs;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to generate range index"");\n\n    // Update table config to remove the new range index, and\n    // reload table to clean the new range index physically.\n    tableConfig = getOfflineTableConfig();\n    tableConfig.getIndexingConfig().setRangeIndexColumns(getRangeIndexColumns());\n    updateTableConfig(tableConfig);\n    reloadOfflineTable(getTableName());\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_UPDATED_RANGE_INDEX_QUERY);\n        // Total docs should not change during reload, but num entries scanned\n        // gets back to total number of documents as the index is removed.\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        return queryResponse.get(""numEntriesScannedInFilter"").asLong() == numTotalDocs;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to cleanup obsolete index"");\n\n    assertEquals(getTableSize(getTableName()), _tableSizeAfterRemovingIndex);\n  }\n']",Range;Filter;Methods;Triggering;Update;Exception;Total;Column;Range;son,1.862645149230957e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.022187441587448e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.5020952224731445, -4.839283466339111, -5.333391189575195, -6.415093898773193, -5.493614673614502, -0.02282676473259926]",0.9774317741394043
1,"['  @Test(dependsOnMethods = ""testDefaultColumns"")\n  public void testBloomFilterTriggering()\n      throws Exception {\n    long numTotalDocs = getCountStarResult();\n    assertEquals(postQuery(TEST_UPDATED_BLOOM_FILTER_QUERY).get(""numSegmentsProcessed"").asLong(), NUM_SEGMENTS);\n\n    // Update table config and trigger reload\n    TableConfig tableConfig = getOfflineTableConfig();\n    tableConfig.getIndexingConfig().setBloomFilterColumns(UPDATED_BLOOM_FILTER_COLUMNS);\n    updateTableConfig(tableConfig);\n    reloadOfflineTable(getTableName());\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_UPDATED_BLOOM_FILTER_QUERY);\n        // Total docs should not change during reload\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        return queryResponse.get(""numSegmentsProcessed"").asLong() == 0L;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to generate bloom filter"");\n\n    // Update table config to remove the new bloom filter, and\n    // reload table to clean the new bloom filter physically.\n    tableConfig = getOfflineTableConfig();\n    tableConfig.getIndexingConfig().setBloomFilterColumns(getBloomFilterColumns());\n    updateTableConfig(tableConfig);\n    reloadOfflineTable(getTableName());\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_UPDATED_BLOOM_FILTER_QUERY);\n        // Total docs should not change during reload, but num entries scanned\n        // gets back to total number of documents as bloom filter is removed.\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        return queryResponse.get(""numSegmentsProcessed"").asLong() == NUM_SEGMENTS;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to cleanup obsolete index"");\n    assertEquals(getTableSize(getTableName()), _tableSizeAfterRemovingIndex);\n  }\n']",get;num;trigger;total;Total;Query;Total;reload;For;return,1.280568540096283e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;3.710738383233547e-10,5,5,"[-5.492197036743164, -4.800984859466553, -5.329800128936768, -6.414742469787598, -5.494366645812988, -0.023199673742055893]",0.9770674705505371
1,"['  @Test\n  public void testServerErrorWithBrokerTimeout()\n      throws Exception {\n    // Set query timeout\n    long queryTimeout = 5000;\n    TableConfig tableConfig = getOfflineTableConfig();\n    tableConfig.setQueryConfig(new QueryConfig(queryTimeout));\n    updateTableConfig(tableConfig);\n\n    long startTime = System.currentTimeMillis();\n    // The query below will fail execution due to JSON_MATCH on column without json index\n    JsonNode queryResponse = postSqlQuery(""SELECT count(*) FROM mytable WHERE JSON_MATCH(Dest, \'$=123\')"");\n\n    assertTrue(System.currentTimeMillis() - startTime < queryTimeout);\n    assertTrue(queryResponse.get(""exceptions"").get(0).get(""message"").toString().startsWith(""\\""QueryExecutionError""));\n\n    // Remove timeout\n    tableConfig.setQueryConfig(null);\n    updateTableConfig(tableConfig);\n  }\n']",Error;long;Timeout;due;Table;The;Timeout;set;Table;without,8.149072527885437e-10;6.111804395914078e-10;5.238689482212067e-10;4.5838532969355583e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.837623469531536e-10,5,5,"[-5.550235271453857, -4.913747310638428, -5.356414318084717, -6.466598987579346, -5.536280632019043, -0.021678278222680092]",0.9785551428794861
1,"['  @Test\n  public void testStarTreeTriggering()\n      throws Exception {\n    long numTotalDocs = getCountStarResult();\n    long tableSizeWithDefaultIndex = getTableSize(getTableName());\n\n    // Test the first query\n    JsonNode firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);\n    int firstQueryResult = firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt();\n    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    // Initially \'numDocsScanned\' should be the same as \'COUNT(*)\' result\n    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);\n\n    // Update table config and trigger reload\n    TableConfig tableConfig = getOfflineTableConfig();\n    IndexingConfig indexingConfig = tableConfig.getIndexingConfig();\n    indexingConfig.setStarTreeIndexConfigs(Collections.singletonList(STAR_TREE_INDEX_CONFIG_1));\n    indexingConfig.setEnableDynamicStarTreeCreation(true);\n    updateTableConfig(tableConfig);\n    reloadOfflineTable(getTableName());\n\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_STAR_TREE_QUERY_1);\n        // Result should not change during reload\n        assertEquals(queryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);\n        // Total docs should not change during reload\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        // With star-tree, \'numDocsScanned\' should be the same as number of segments (1 per segment)\n        return queryResponse.get(""numDocsScanned"").asInt() == NUM_SEGMENTS;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to add first star-tree index"");\n\n    // Reload again should have no effect\n    reloadOfflineTable(getTableName());\n    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);\n    assertEquals(firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);\n    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), NUM_SEGMENTS);\n\n    // Should be able to use the star-tree with an additional match-all predicate on another dimension\n    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1 + "" AND DaysSinceEpoch > 16070"");\n    assertEquals(firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);\n    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), NUM_SEGMENTS);\n\n    // Test the second query\n    JsonNode secondQueryResponse = postQuery(TEST_STAR_TREE_QUERY_2);\n    int secondQueryResult = secondQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt();\n    assertEquals(secondQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    // Initially \'numDocsScanned\' should be the same as \'COUNT(*)\' result\n    assertEquals(secondQueryResponse.get(""numDocsScanned"").asInt(), secondQueryResult);\n\n    // Update table config with a different star-tree index config and trigger reload\n    indexingConfig.setStarTreeIndexConfigs(Collections.singletonList(STAR_TREE_INDEX_CONFIG_2));\n    updateTableConfig(tableConfig);\n    reloadOfflineTable(getTableName());\n\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_STAR_TREE_QUERY_2);\n        // Result should not change during reload\n        assertEquals(queryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);\n        // Total docs should not change during reload\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        // With star-tree, \'numDocsScanned\' should be the same as number of segments (1 per segment)\n        return queryResponse.get(""numDocsScanned"").asInt() == NUM_SEGMENTS;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to change to second star-tree index"");\n\n    // First query should not be able to use the star-tree\n    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);\n    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);\n\n    // Reload again should have no effect\n    reloadOfflineTable(getTableName());\n    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);\n    assertEquals(firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);\n    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);\n    secondQueryResponse = postQuery(TEST_STAR_TREE_QUERY_2);\n    assertEquals(secondQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);\n    assertEquals(secondQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(secondQueryResponse.get(""numDocsScanned"").asInt(), NUM_SEGMENTS);\n\n    // Should be able to use the star-tree with an additional match-all predicate on another dimension\n    secondQueryResponse = postQuery(TEST_STAR_TREE_QUERY_2 + "" AND DaysSinceEpoch > 16070"");\n    assertEquals(secondQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);\n    assertEquals(secondQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(secondQueryResponse.get(""numDocsScanned"").asInt(), NUM_SEGMENTS);\n\n    // Remove the star-tree index config and trigger reload\n    indexingConfig.setStarTreeIndexConfigs(null);\n    updateTableConfig(tableConfig);\n    reloadOfflineTable(getTableName());\n\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse = postQuery(TEST_STAR_TREE_QUERY_2);\n        // Result should not change during reload\n        assertEquals(queryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);\n        // Total docs should not change during reload\n        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n        // Without star-tree, \'numDocsScanned\' should be the same as the \'COUNT(*)\' result\n        return queryResponse.get(""numDocsScanned"").asInt() == secondQueryResult;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to remove star-tree index"");\n    assertEquals(getTableSize(getTableName()), tableSizeWithDefaultIndex);\n\n    // First query should not be able to use the star-tree\n    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);\n    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);\n\n    // Reload again should have no effect\n    reloadOfflineTable(getTableName());\n    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);\n    assertEquals(firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);\n    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);\n    secondQueryResponse = postQuery(TEST_STAR_TREE_QUERY_2);\n    assertEquals(secondQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);\n    assertEquals(secondQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(secondQueryResponse.get(""numDocsScanned"").asInt(), secondQueryResult);\n  }\n']",reload;Total;reload;EST;son;total;Star;singleton;total;should,1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.459181308746338, -4.987349987030029, -5.314611434936523, -6.395265102386475, -5.450344085693359, -0.02220902405679226]",0.9780358076095581
1,"['  @Test(dependsOnMethods = ""testAggregateMetadataAPI"")\n  public void testDefaultColumns()\n      throws Exception {\n    long numTotalDocs = getCountStarResult();\n\n    reloadWithExtraColumns();\n    JsonNode queryResponse = postQuery(SELECT_STAR_QUERY);\n    assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(queryResponse.get(""selectionResults"").get(""columns"").size(), 91);\n\n    testNewAddedColumns();\n\n    reloadWithMissingColumns();\n    queryResponse = postQuery(SELECT_STAR_QUERY);\n    assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(queryResponse.get(""selectionResults"").get(""columns"").size(), 75);\n\n    reloadWithRegularColumns();\n    queryResponse = postQuery(SELECT_STAR_QUERY);\n    assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertEquals(queryResponse.get(""selectionResults"").get(""columns"").size(), 79);\n\n    _tableSizeAfterRemovingIndex = getTableSize(getTableName());\n  }\n']",Methods;Metadata;son;Default;reload;table;API;Aggregate;Table;Node,2.0954757928848267e-09;1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.514507293701172, -4.951181411743164, -5.351653099060059, -6.423708915710449, -5.486804008483887, -0.021843677386641502]",0.9783930778503418
1,['  @Test\n  public void testBrokerResponseMetadata()\n      throws Exception {\n    super.testBrokerResponseMetadata();\n  }\n'],Broker;Response;Metadata;super;Response;Exception;Metadata;Broker,2.3283064365386963e-09;1.6298145055770874e-09;8.149072527885437e-10;2.3283064365386963e-10;-5.820766091346741e-10;-6.402842700481415e-10;-9.313225746154785e-10;-1.280568540096283e-09,5,5,"[-5.598222732543945, -4.902109146118164, -5.403703212738037, -6.533468246459961, -5.521705627441406, -0.02131367102265358]",0.9789117574691772
1,"['  @Test\n  public void testGroupByUDF()\n      throws Exception {\n    String pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')"";\n    JsonNode response = postQuery(pqlQuery);\n    JsonNode groupByResult = response.get(""aggregationResults"").get(0);\n    JsonNode groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asInt(), 16138 * 24 * 3600);\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""timeconvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')"");\n\n    pqlQuery =\n        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,\'1:DAYS:EPOCH\',\'1:HOURS:EPOCH\',""\n            + ""\'1:HOURS\')"";\n    response = postQuery(pqlQuery);\n    groupByResult = response.get(""aggregationResults"").get(0);\n    groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asInt(), 16138 * 24);\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(),\n        ""datetimeconvert(DaysSinceEpoch,\'1:DAYS:EPOCH\',\'1:HOURS:EPOCH\',\'1:HOURS\')"");\n\n    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY add(DaysSinceEpoch,DaysSinceEpoch,15)"";\n    response = postQuery(pqlQuery);\n    groupByResult = response.get(""aggregationResults"").get(0);\n    groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asDouble(), 16138.0 + 16138 + 15);\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""add(DaysSinceEpoch,DaysSinceEpoch,\'15\')"");\n\n    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY sub(DaysSinceEpoch,25)"";\n    response = postQuery(pqlQuery);\n    groupByResult = response.get(""aggregationResults"").get(0);\n    groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asDouble(), 16138.0 - 25);\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""sub(DaysSinceEpoch,\'25\')"");\n\n    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY mult(DaysSinceEpoch,24,3600)"";\n    response = postQuery(pqlQuery);\n    groupByResult = response.get(""aggregationResults"").get(0);\n    groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asDouble(), 16138.0 * 24 * 3600);\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""mult(DaysSinceEpoch,\'24\',\'3600\')"");\n\n    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY div(DaysSinceEpoch,2)"";\n    response = postQuery(pqlQuery);\n    groupByResult = response.get(""aggregationResults"").get(0);\n    groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asDouble(), 16138.0 / 2);\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""div(DaysSinceEpoch,\'2\')"");\n\n    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY arrayLength(DivAirports)"";\n    response = postQuery(pqlQuery);\n    groupByResult = response.get(""aggregationResults"").get(0);\n    groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 115545.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""5"");\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""arraylength(DivAirports)"");\n\n    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY arrayLength(valueIn(DivAirports,\'DFW\',\'ORD\'))"";\n    response = postQuery(pqlQuery);\n    groupByResult = response.get(""aggregationResults"").get(0);\n    groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 114895.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""0"");\n    groupByEntry = groupByResult.get(""groupByResult"").get(1);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 648.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""1"");\n    groupByEntry = groupByResult.get(""groupByResult"").get(2);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 2.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""2"");\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""arraylength(valuein(DivAirports,\'DFW\',\'ORD\'))"");\n\n    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY valueIn(DivAirports,\'DFW\',\'ORD\')"";\n    response = postQuery(pqlQuery);\n    groupByResult = response.get(""aggregationResults"").get(0);\n    groupByEntry = groupByResult.get(""groupByResult"").get(0);\n    assertEquals(groupByEntry.get(""value"").asDouble(), 336.0);\n    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""ORD"");\n    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""valuein(DivAirports,\'DFW\',\'ORD\')"");\n\n    pqlQuery = ""SELECT MAX(timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')) FROM mytable"";\n    response = postQuery(pqlQuery);\n    JsonNode aggregationResult = response.get(""aggregationResults"").get(0);\n    assertEquals(aggregationResult.get(""function"").asText(), ""max_timeconvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')"");\n    assertEquals(aggregationResult.get(""value"").asDouble(), 16435.0 * 24 * 3600);\n\n    pqlQuery = ""SELECT MIN(div(DaysSinceEpoch,2)) FROM mytable"";\n    response = postQuery(pqlQuery);\n    aggregationResult = response.get(""aggregationResults"").get(0);\n    assertEquals(aggregationResult.get(""function"").asText(), ""min_div(DaysSinceEpoch,\'2\')"");\n    assertEquals(aggregationResult.get(""value"").asDouble(), 16071.0 / 2);\n  }\n']",Group;Exception;EP;SELECT;Time;datetimeconvert;Query;ql;Since;Query,1.280568540096283e-09;5.820766091346741e-10;5.384208634495735e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.3530988693237305, -5.058682918548584, -5.3691792488098145, -6.461245059967041, -5.464617729187012, -0.021777544170618057]",0.9784578680992126
1,"['  @Test\n  public void testAggregationUDF()\n      throws Exception {\n\n    String pqlQuery = ""SELECT MAX(timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')) FROM mytable"";\n    JsonNode response = postQuery(pqlQuery);\n    JsonNode aggregationResult = response.get(""aggregationResults"").get(0);\n    assertEquals(aggregationResult.get(""function"").asText(), ""max_timeconvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')"");\n    assertEquals(aggregationResult.get(""value"").asDouble(), 16435.0 * 24 * 3600);\n\n    pqlQuery = ""SELECT MIN(div(DaysSinceEpoch,2)) FROM mytable"";\n    response = postQuery(pqlQuery);\n    aggregationResult = response.get(""aggregationResults"").get(0);\n    assertEquals(aggregationResult.get(""function"").asText(), ""min_div(DaysSinceEpoch,\'2\')"");\n    assertEquals(aggregationResult.get(""value"").asDouble(), 16071.0 / 2);\n  }\n']",Equals;get;as;Result;aggregation;min;SECONDS;Query;SELECT;Result,5.587935447692871e-09;4.6566128730773926e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.443599700927734, -5.002002716064453, -5.370722770690918, -6.498825550079346, -5.507194519042969, -0.02149103209376335]",0.9787381291389465
1,"['  @Test\n  public void testSelectionUDF()\n      throws Exception {\n    String pqlQuery = ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable"";\n    JsonNode response = postQuery(pqlQuery);\n    ArrayNode selectionResults = (ArrayNode) response.get(""selectionResults"").get(""results"");\n    assertNotNull(selectionResults);\n    assertFalse(selectionResults.isEmpty());\n    for (int i = 0; i < selectionResults.size(); i++) {\n      long daysSinceEpoch = selectionResults.get(i).get(0).asLong();\n      long secondsSinceEpoch = selectionResults.get(i).get(1).asLong();\n      assertEquals(daysSinceEpoch * 24 * 60 * 60, secondsSinceEpoch);\n    }\n\n    pqlQuery =\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable order by DaysSinceEpoch ""\n            + ""limit 10000"";\n    response = postQuery(pqlQuery);\n    selectionResults = (ArrayNode) response.get(""selectionResults"").get(""results"");\n    assertNotNull(selectionResults);\n    assertFalse(selectionResults.isEmpty());\n    long prevValue = -1;\n    for (int i = 0; i < selectionResults.size(); i++) {\n      long daysSinceEpoch = selectionResults.get(i).get(0).asLong();\n      long secondsSinceEpoch = selectionResults.get(i).get(1).asLong();\n      assertEquals(daysSinceEpoch * 24 * 60 * 60, secondsSinceEpoch);\n      assertTrue(daysSinceEpoch >= prevValue);\n      prevValue = daysSinceEpoch;\n    }\n\n    pqlQuery =\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable order by timeConvert""\n            + ""(DaysSinceEpoch,\'DAYS\',\'SECONDS\') DESC limit 10000"";\n    response = postQuery(pqlQuery);\n    selectionResults = (ArrayNode) response.get(""selectionResults"").get(""results"");\n    assertNotNull(selectionResults);\n    assertFalse(selectionResults.isEmpty());\n    prevValue = Long.MAX_VALUE;\n    for (int i = 0; i < selectionResults.size(); i++) {\n      long daysSinceEpoch = selectionResults.get(i).get(0).asLong();\n      long secondsSinceEpoch = selectionResults.get(i).get(1).asLong();\n      assertEquals(daysSinceEpoch * 24 * 60 * 60, secondsSinceEpoch);\n      assertTrue(secondsSinceEpoch <= prevValue);\n      prevValue = secondsSinceEpoch;\n    }\n  }\n']",DF;SELECT;prev;Value;son;Since;Epoch;Convert;Epoch;Since,3.725290298461914e-09;1.1641532182693481e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10,5,5,"[-5.383338928222656, -5.016330718994141, -5.321560382843018, -6.429115295410156, -5.471104145050049, -0.02217089757323265]",0.9780731797218323
1,"['  @Test\n  public void testFilterUDF()\n      throws Exception {\n    int daysSinceEpoch = 16138;\n    long secondsSinceEpoch = 16138 * 24 * 60 * 60;\n\n    String pqlQuery;\n    pqlQuery = ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch;\n    long expectedResult = postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong();\n\n    pqlQuery = ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') = "" + secondsSinceEpoch;\n    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);\n\n    pqlQuery = ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch\n        + "" OR timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') = "" + secondsSinceEpoch;\n    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);\n\n    pqlQuery = ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch\n        + "" AND timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') = "" + secondsSinceEpoch;\n    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);\n\n    pqlQuery =\n        ""SELECT count(*) FROM mytable WHERE DIV(timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\'),1) = "" + secondsSinceEpoch;\n    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);\n\n    pqlQuery = String\n        .format(""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') IN (%d, %d)"",\n            secondsSinceEpoch - 100, secondsSinceEpoch);\n    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);\n\n    pqlQuery = String\n        .format(""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') BETWEEN %d AND %d"",\n            secondsSinceEpoch - 100, secondsSinceEpoch);\n    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);\n  }\n']",FROM;DF;count;WHERE;seconds;Query;Epoch;Query;mytable;Equals,7.275957614183426e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.392262935638428, -5.038333892822266, -5.370119094848633, -6.469937324523926, -5.488956928253174, -0.021602800115942955]",0.9786287546157837
1,"['  @Test\n  public void testCaseStatementInSelection()\n      throws Exception {\n    List<String> origins = Arrays\n        .asList(""ATL"", ""ORD"", ""DFW"", ""DEN"", ""LAX"", ""IAH"", ""SFO"", ""PHX"", ""LAS"", ""EWR"", ""MCO"", ""BOS"", ""SLC"", ""SEA"", ""MSP"",\n            ""CLT"", ""LGA"", ""DTW"", ""JFK"", ""BWI"");\n    StringBuilder caseStatementBuilder = new StringBuilder(""CASE "");\n    for (int i = 0; i < origins.size(); i++) {\n      // WHEN origin = \'ATL\' THEN 1\n      // WHEN origin = \'ORD\' THEN 2\n      // WHEN origin = \'DFW\' THEN 3\n      // ....\n      caseStatementBuilder.append(String.format(""WHEN origin = \'%s\' THEN %d "", origins.get(i), i + 1));\n    }\n    caseStatementBuilder.append(""ELSE 0 END"");\n    String sqlQuery = ""SELECT origin, "" + caseStatementBuilder + "" AS origin_code FROM mytable LIMIT 1000"";\n    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    JsonNode rows = response.get(""resultTable"").get(""rows"");\n    assertEquals(response.get(""exceptions"").size(), 0);\n    for (int i = 0; i < rows.size(); i++) {\n      String origin = rows.get(i).get(0).asText();\n      int originCode = rows.get(i).get(1).asInt();\n      if (originCode > 0) {\n        assertEquals(origin, origins.get(originCode - 1));\n      } else {\n        assertFalse(origins.contains(origin));\n      }\n    }\n  }\n']",Selection;origins;son;ql;origins;origin;broker;ASE;contains;Builder,9.89530235528946e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.2928149923682213e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.447272300720215, -5.003216743469238, -5.373294830322266, -6.425334453582764, -5.463093280792236, -0.021758532151579857]",0.9784764647483826
1,"['  @Test\n  public void testCaseStatementInSelectionWithTransformFunctionInThen()\n      throws Exception {\n    String sqlQuery =\n        ""SELECT ArrDelay, CASE WHEN ArrDelay > 0 THEN ArrDelay WHEN ArrDelay < 0 THEN ArrDelay * -1 ELSE 0 END AS ""\n            + ""ArrTimeDiff FROM mytable LIMIT 1000"";\n    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    JsonNode rows = response.get(""resultTable"").get(""rows"");\n    assertEquals(response.get(""exceptions"").size(), 0);\n    for (int i = 0; i < rows.size(); i++) {\n      int arrDelay = rows.get(i).get(0).asInt();\n      int arrDelayDiff = rows.get(i).get(1).asInt();\n      if (arrDelay > 0) {\n        assertEquals(arrDelay, arrDelayDiff);\n      } else {\n        assertEquals(arrDelay, arrDelayDiff * -1);\n      }\n    }\n  }\n']",ELSE;SELECT;Diff;THEN;post;Time;response;result;Ar;FROM,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.455090522766113, -4.994691848754883, -5.355803489685059, -6.433345317840576, -5.4942402839660645, -0.02172062173485756]",0.9785135984420776
1,"['  @Test\n  public void testCaseStatementWithLogicalTransformFunction()\n      throws Exception {\n    String sqlQuery = ""SELECT ArrDelay"" + "", CASE WHEN ArrDelay > 50 OR ArrDelay < 10 THEN 10 ELSE 0 END""\n        + "", CASE WHEN ArrDelay < 50 AND ArrDelay >= 10 THEN 10 ELSE 0 END"" + "" FROM mytable LIMIT 1000"";\n    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);\n    JsonNode rows = response.get(""resultTable"").get(""rows"");\n    assertEquals(response.get(""exceptions"").size(), 0);\n    for (int i = 0; i < rows.size(); i++) {\n      int row0 = rows.get(i).get(0).asInt();\n      int row1 = rows.get(i).get(1).asInt();\n      int row2 = rows.get(i).get(2).asInt();\n      if (row0 > 50 || row0 < 10) {\n        assertEquals(row1, 10);\n      } else {\n        assertEquals(row1, 0);\n      }\n      if (row0 < 50 && row0 >= 10) {\n        assertEquals(row2, 10);\n      } else {\n        assertEquals(row2, 0);\n      }\n    }\n  }\n']",son;broker;Base;LIMIT;Equals;Delay;Query;Delay;OR;Delay,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10,5,5,"[-5.464633941650391, -5.001514911651611, -5.35398006439209, -6.39604377746582, -5.473674297332764, -0.021790608763694763]",0.9784451127052307
1,"['  @Test\n  public void testCaseStatementWithInAggregation()\n      throws Exception {\n    testCountVsCaseQuery(""origin = \'ATL\'"");\n    testCountVsCaseQuery(""origin <> \'ATL\'"");\n\n    testCountVsCaseQuery(""DaysSinceEpoch > 16312"");\n    testCountVsCaseQuery(""DaysSinceEpoch >= 16312"");\n    testCountVsCaseQuery(""DaysSinceEpoch < 16312"");\n    testCountVsCaseQuery(""DaysSinceEpoch <= 16312"");\n    testCountVsCaseQuery(""DaysSinceEpoch = 16312"");\n    testCountVsCaseQuery(""DaysSinceEpoch <> 16312"");\n  }\n']",Aggregation;Since;Query;Days;origin;Epoch;Query;Since;Days;Case,2.7939677238464355e-09;1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.502731800079346, -4.867899417877197, -5.357420444488525, -6.475095272064209, -5.528927803039551, -0.022235257551074028]",0.9780102372169495
1,"['  @Test\n  public void testFilterWithInvertedIndexUDF()\n      throws Exception {\n    int daysSinceEpoch = 16138;\n    long secondsSinceEpoch = 16138 * 24 * 60 * 60;\n\n    String[] origins = new String[]{\n        ""ATL"", ""ORD"", ""DFW"", ""DEN"", ""LAX"", ""IAH"", ""SFO"", ""PHX"", ""LAS"", ""EWR"", ""MCO"", ""BOS"", ""SLC"", ""SEA"", ""MSP"", ""CLT"",\n        ""LGA"", ""DTW"", ""JFK"", ""BWI""\n    };\n    String pqlQuery;\n    for (String origin : origins) {\n      pqlQuery =\n          ""SELECT count(*) FROM mytable WHERE Origin = \\"""" + origin + ""\\"" AND DaysSinceEpoch = "" + daysSinceEpoch;\n      JsonNode response1 = postQuery(pqlQuery);\n      pqlQuery = ""SELECT count(*) FROM mytable WHERE Origin = \\"""" + origin\n          + ""\\"" AND timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') = "" + secondsSinceEpoch;\n      JsonNode response2 = postQuery(pqlQuery);\n      double val1 = response1.get(""aggregationResults"").get(0).get(""value"").asDouble();\n      double val2 = response2.get(""aggregationResults"").get(0).get(""value"").asDouble();\n      assertEquals(val1, val2);\n    }\n  }\n']",Inverted;Node;aggregation;Epoch;Query;post;DAY;val;Epoch;origins,1.2223608791828156e-09;1.1350493878126144e-09;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.462157249450684, -4.769007205963135, -5.326119422912598, -6.436240196228027, -5.522377967834473, -0.02346799708902836]",0.9768051505088806
1,"['  @Test\n  public void testQueryWithRepeatedColumns()\n      throws Exception {\n    //test repeated columns in selection query\n    String query = ""SELECT ArrTime, ArrTime FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\'"";\n    testQuery(query, Collections.singletonList(query));\n\n    //test repeated columns in selection query with order by\n    query = ""SELECT ArrTime, ArrTime FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\' order by ArrTime"";\n    testQuery(query, Collections.singletonList(query));\n\n    //test repeated columns in agg query\n    query = ""SELECT count(*), count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\'"";\n    testQuery(query, Arrays.asList(""SELECT count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\'"",\n        ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\'""));\n\n    //test repeated columns in agg group by query\n    query =\n        ""SELECT ArrTime, ArrTime, count(*), count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\' ""\n            + ""group by ArrTime, ArrTime"";\n    testQuery(query, Arrays.asList(\n        ""SELECT ArrTime, ArrTime, count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\' group by ""\n            + ""ArrTime, ArrTime"",\n        ""SELECT ArrTime, ArrTime, count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\' group by ""\n            + ""ArrTime, ArrTime""));\n  }\n']",Repeated;Days;Epoch;WHERE;query;group;Epoch;group;SELECT;Ar,1.6298145055770874e-09;7.275957614183426e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.408821105957031, -5.079987049102783, -5.389665603637695, -6.427746772766113, -5.430500030517578, -0.02148648165166378]",0.9787425994873047
1,"['  @Test\n  public void testQueryWithOrderby()\n      throws Exception {\n    //test repeated columns in selection query\n    String query = ""SELECT ArrTime, Carrier, DaysSinceEpoch FROM mytable ORDER BY DaysSinceEpoch DESC"";\n    testQuery(query, Collections.singletonList(query));\n\n    //test repeated columns in selection query\n    query = ""SELECT ArrTime, DaysSinceEpoch, Carrier FROM mytable ORDER BY Carrier DESC"";\n    testQuery(query, Collections.singletonList(query));\n\n    //test repeated columns in selection query\n    query = ""SELECT ArrTime, DaysSinceEpoch, Carrier FROM mytable ORDER BY Carrier DESC, ArrTime DESC"";\n    testQuery(query, Collections.singletonList(query));\n  }\n']",Query;Since;Days;Carrier;SELECT;Epoch;query;Orderby;in;Time,1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10,5,5,"[-5.504406452178955, -4.956165313720703, -5.398803234100342, -6.488351821899414, -5.539141654968262, -0.021307019516825676]",0.9789183735847473
1,"['  @Test\n  public void testQueryWithAlias()\n      throws Exception {\n    {\n      //test same alias name with column name\n      String query =\n          ""SELECT ArrTime AS ArrTime, Carrier AS Carrier, DaysSinceEpoch AS DaysSinceEpoch FROM mytable ORDER BY ""\n              + ""DaysSinceEpoch DESC"";\n      testSqlQuery(query, Collections.singletonList(query));\n\n      query =\n          ""SELECT ArrTime AS ArrTime, DaysSinceEpoch AS DaysSinceEpoch, Carrier AS Carrier FROM mytable ORDER BY ""\n              + ""Carrier DESC"";\n      testSqlQuery(query, Collections.singletonList(query));\n\n      query =\n          ""SELECT ArrTime AS ArrTime, DaysSinceEpoch AS DaysSinceEpoch, Carrier AS Carrier FROM mytable ORDER BY ""\n              + ""Carrier DESC, ArrTime DESC"";\n      testSqlQuery(query, Collections.singletonList(query));\n    }\n    {\n      //test single alias\n      String query = ""SELECT ArrTime, Carrier AS CarrierName, DaysSinceEpoch FROM mytable ORDER BY DaysSinceEpoch DESC"";\n      testSqlQuery(query, Collections.singletonList(query));\n\n      query = ""SELECT count(*) AS cnt, max(ArrTime) as maxArrTime FROM mytable"";\n      testSqlQuery(query, Collections.singletonList(query));\n\n      query = ""SELECT count(*) AS cnt, Carrier AS CarrierName FROM mytable GROUP BY CarrierName ORDER BY cnt"";\n      testSqlQuery(query, Collections.singletonList(query));\n    }\n    {\n      //test multiple alias\n      String query =\n          ""SELECT ArrTime, Carrier, Carrier AS CarrierName1, Carrier AS CarrierName2, DaysSinceEpoch FROM mytable ""\n              + ""ORDER BY DaysSinceEpoch DESC"";\n      testSqlQuery(query, Collections.singletonList(query));\n\n      query = ""SELECT count(*) AS cnt, max(ArrTime) as maxArrTime1, max(ArrTime) as maxArrTime2 FROM mytable"";\n      testSqlQuery(query, Collections.singletonList(query));\n\n      query =\n          ""SELECT count(*), count(*) AS cnt1, count(*) AS cnt2, Carrier AS CarrierName FROM mytable GROUP BY ""\n              + ""CarrierName ORDER BY cnt2"";\n      testSqlQuery(query, Collections.singletonList(query));\n    }\n  }\n']",SELECT;Epoch;mytable;ql;Ar;Since;Since;Alias;Days;Epoch,1.3969838619232178e-09;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.421797275543213, -5.063380241394043, -5.412051677703857, -6.458242893218994, -5.466442584991455, -0.021223345771431923]",0.9790003895759583
1,"['  @Test\n  public void testDistinctQuery()\n      throws Exception {\n    // by default 10 rows will be returned, so use high limit\n    String pql = ""SELECT DISTINCT(Carrier) FROM mytable LIMIT 1000000"";\n    String sql = ""SELECT DISTINCT Carrier FROM mytable"";\n    testQuery(pql, Collections.singletonList(sql));\n    pql = ""SELECT DISTINCT Carrier FROM mytable LIMIT 1000000"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql = ""SELECT DISTINCT(Carrier, DestAirportID) FROM mytable LIMIT 1000000"";\n    sql = ""SELECT DISTINCT Carrier, DestAirportID FROM mytable"";\n    testQuery(pql, Collections.singletonList(sql));\n    pql = ""SELECT DISTINCT Carrier, DestAirportID FROM mytable LIMIT 1000000"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql = ""SELECT DISTINCT(Carrier, DestAirportID, DestStateName) FROM mytable LIMIT 1000000"";\n    sql = ""SELECT DISTINCT Carrier, DestAirportID, DestStateName FROM mytable"";\n    testQuery(pql, Collections.singletonList(sql));\n    pql = ""SELECT DISTINCT Carrier, DestAirportID, DestStateName FROM mytable LIMIT 1000000"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql = ""SELECT DISTINCT(Carrier, DestAirportID, DestCityName) FROM mytable LIMIT 1000000"";\n    sql = ""SELECT DISTINCT Carrier, DestAirportID, DestCityName FROM mytable"";\n    testQuery(pql, Collections.singletonList(sql));\n    pql = ""SELECT DISTINCT Carrier, DestAirportID, DestCityName FROM mytable LIMIT 1000000"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n  }\n']",Distinct;Carrier;limit;so;Dest;mytable;ql;Carrier;Dest;SELECT,1.5133991837501526e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10;2.9103830456733704e-10,5,5,"[-5.407360076904297, -5.036679267883301, -5.38852596282959, -6.426655292510986, -5.43026065826416, -0.021782677620649338]",0.978452742099762
1,"['  @Test\n  public void testNonAggregationGroupByQuery()\n      throws Exception {\n    // by default 10 rows will be returned, so use high limit\n    String pql = ""SELECT Carrier FROM mytable GROUP BY Carrier LIMIT 1000000"";\n    String sql = ""SELECT Carrier FROM mytable GROUP BY Carrier"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql = ""SELECT Carrier, DestAirportID FROM mytable GROUP BY Carrier, DestAirportID LIMIT 1000000"";\n    sql = ""SELECT Carrier, DestAirportID FROM mytable GROUP BY Carrier, DestAirportID"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql =\n        ""SELECT Carrier, DestAirportID, DestStateName FROM mytable GROUP BY Carrier, DestAirportID, DestStateName ""\n            + ""LIMIT 1000000"";\n    sql = ""SELECT Carrier, DestAirportID, DestStateName FROM mytable GROUP BY Carrier, DestAirportID, DestStateName"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql =\n        ""SELECT Carrier, DestAirportID, DestCityName FROM mytable GROUP BY Carrier, DestAirportID, DestCityName LIMIT""\n            + "" 1000000"";\n    sql = ""SELECT Carrier, DestAirportID, DestCityName FROM mytable GROUP BY Carrier, DestAirportID, DestCityName"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql = ""SELECT ArrTime-DepTime FROM mytable GROUP BY ArrTime, DepTime LIMIT 1000000"";\n    sql = ""SELECT ArrTime-DepTime FROM mytable GROUP BY ArrTime, DepTime"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql = ""SELECT ArrTime-DepTime,ArrTime/3,DepTime*2 FROM mytable GROUP BY ArrTime, DepTime LIMIT 1000000"";\n    sql = ""SELECT ArrTime-DepTime,ArrTime/3,DepTime*2 FROM mytable GROUP BY ArrTime, DepTime"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n\n    pql = ""SELECT ArrTime+DepTime FROM mytable GROUP BY ArrTime + DepTime LIMIT 1000000"";\n    sql = ""SELECT ArrTime+DepTime FROM mytable GROUP BY ArrTime + DepTime"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n  }\n']",Aggregation;limit;be;By;mytable;Group;returned;City;so;sql,1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.43833414465189e-10;4.0745362639427185e-10,5,5,"[-5.381872653961182, -5.049582481384277, -5.378791809082031, -6.426955223083496, -5.417557716369629, -0.021918436512351036]",0.9783200025558472
1,"['  @Test\n  public void testCaseInsensitivity() {\n    int daysSinceEpoch = 16138;\n    int hoursSinceEpoch = 16138 * 24;\n    int secondsSinceEpoch = 16138 * 24 * 60 * 60;\n    List<String> baseQueries = Arrays.asList(""SELECT * FROM mytable"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable order by DaysSinceEpoch ""\n            + ""limit 10000"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable order by timeConvert""\n            + ""(DaysSinceEpoch,\'DAYS\',\'SECONDS\') DESC limit 10000"",\n        ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch,\n        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'HOURS\') = "" + hoursSinceEpoch,\n        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') = "" + secondsSinceEpoch,\n        ""SELECT MAX(timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')) FROM mytable"",\n        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,\'1:DAYS:EPOCH\',\'1:HOURS:EPOCH\',""\n            + ""\'1:HOURS\')"");\n    List<String> queries = new ArrayList<>();\n    baseQueries.forEach(q -> queries.add(q.replace(""mytable"", ""MYTABLE"").replace(""DaysSinceEpoch"", ""DAYSSinceEpOch"")));\n    baseQueries\n        .forEach(q -> queries.add(q.replace(""mytable"", ""MYDB.MYTABLE"").replace(""DaysSinceEpoch"", ""DAYSSinceEpOch"")));\n\n    for (String query : queries) {\n      try {\n        JsonNode response = postQuery(query);\n        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""PQL: "" + query + "" failed"");\n\n        response = postSqlQuery(query);\n        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""SQL: "" + query + "" failed"");\n      } catch (Exception e) {\n        // Fail the test when exception caught\n        throw new RuntimeException(""Got Exceptions from query - "" + query);\n      }\n    }\n  }\n']",Insensitivity;HOURS;Convert;EP;SELECT;Since;DAY;Epoch;Since;mytable,5.122274160385132e-09;1.862645149230957e-09;1.6443664208054543e-09;1.6298145055770874e-09;8.149072527885437e-10;7.566995918750763e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.94765117764473e-10,5,5,"[-5.425017356872559, -4.910090446472168, -5.323753833770752, -6.448030948638916, -5.521116256713867, -0.02248728834092617]",0.9777637720108032
1,"['  @Test\n  public void testColumnNameContainsTableName() {\n    int daysSinceEpoch = 16138;\n    int hoursSinceEpoch = 16138 * 24;\n    int secondsSinceEpoch = 16138 * 24 * 60 * 60;\n    List<String> baseQueries = Arrays.asList(""SELECT * FROM mytable"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable order by DaysSinceEpoch ""\n            + ""limit 10000"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable order by timeConvert""\n            + ""(DaysSinceEpoch,\'DAYS\',\'SECONDS\') DESC limit 10000"",\n        ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch,\n        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'HOURS\') = "" + hoursSinceEpoch,\n        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') = "" + secondsSinceEpoch,\n        ""SELECT MAX(timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')) FROM mytable"",\n        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,\'1:DAYS:EPOCH\',\'1:HOURS:EPOCH\',""\n            + ""\'1:HOURS\')"");\n    List<String> queries = new ArrayList<>();\n    baseQueries.forEach(q -> queries.add(q.replace(""DaysSinceEpoch"", ""mytable.DAYSSinceEpOch"")));\n    baseQueries.forEach(q -> queries.add(q.replace(""DaysSinceEpoch"", ""mytable.DAYSSinceEpOch"")));\n\n    for (String query : queries) {\n      try {\n        JsonNode response = postQuery(query);\n        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""PQL: "" + query + "" failed"");\n\n        response = postSqlQuery(query);\n        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""SQL: "" + query + "" failed"");\n      } catch (Exception e) {\n        // Fail the test when exception caught\n        throw new RuntimeException(""Got Exceptions from query - "" + query);\n      }\n    }\n  }\n']",CH;EP;HOURS;Epoch;Name;limit;Epoch;Days;Epoch;Epoch,2.7939677238464355e-09;1.7462298274040222e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.093170329928398e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.427633762359619, -4.931683540344238, -5.327820301055908, -6.444554328918457, -5.515012264251709, -0.022324908524751663]",0.9779224395751953
1,"['  @Test\n  public void testCaseInsensitivityWithColumnNameContainsTableName() {\n    int daysSinceEpoch = 16138;\n    int hoursSinceEpoch = 16138 * 24;\n    int secondsSinceEpoch = 16138 * 24 * 60 * 60;\n    List<String> baseQueries = Arrays.asList(""SELECT * FROM mytable"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable order by DaysSinceEpoch ""\n            + ""limit 10000"",\n        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') FROM mytable order by timeConvert""\n            + ""(DaysSinceEpoch,\'DAYS\',\'SECONDS\') DESC limit 10000"",\n        ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch,\n        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'HOURS\') = "" + hoursSinceEpoch,\n        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\') = "" + secondsSinceEpoch,\n        ""SELECT MAX(timeConvert(DaysSinceEpoch,\'DAYS\',\'SECONDS\')) FROM mytable"",\n        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,\'1:DAYS:EPOCH\',\'1:HOURS:EPOCH\',""\n            + ""\'1:HOURS\')"");\n    List<String> queries = new ArrayList<>();\n    baseQueries\n        .forEach(q -> queries.add(q.replace(""mytable"", ""MYTABLE"").replace(""DaysSinceEpoch"", ""MYTABLE.DAYSSinceEpOch"")));\n    baseQueries.forEach(\n        q -> queries.add(q.replace(""mytable"", ""MYDB.MYTABLE"").replace(""DaysSinceEpoch"", ""MYTABLE.DAYSSinceEpOch"")));\n\n    for (String query : queries) {\n      try {\n        JsonNode response = postQuery(query);\n        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""PQL: "" + query + "" failed"");\n\n        response = postSqlQuery(query);\n        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""SQL: "" + query + "" failed"");\n      } catch (Exception e) {\n        // Fail the test when exception caught\n        throw new RuntimeException(""Got Exceptions from query - "" + query);\n      }\n    }\n  }\n']",Name;Column;Table;base;SECONDS;HOURS;HOURS;EP;Insensitivity;Name,1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.461116790771484, -4.873599052429199, -5.321527004241943, -6.442000389099121, -5.527700901031494, -0.022601742297410965]",0.9776517748832703
1,"['  @Test\n  public void testQuerySourceWithDatabaseName()\n      throws Exception {\n    // by default 10 rows will be returned, so use high limit\n    String pql = ""SELECT DISTINCT(Carrier) FROM mytable LIMIT 1000000"";\n    String sql = ""SELECT DISTINCT Carrier FROM mytable"";\n    testQuery(pql, Collections.singletonList(sql));\n    pql = ""SELECT DISTINCT Carrier FROM db.mytable LIMIT 1000000"";\n    testSqlQuery(pql, Collections.singletonList(sql));\n  }\n']",LIMIT;Name;LIMIT;Database;Carrier;SELECT;sql;sql;ql;Carrier,1.3387762010097504e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.54272985458374, -4.99564266204834, -5.435007572174072, -6.4988017082214355, -5.494930744171143, -0.02087351679801941]",0.9793428182601929
1,"['  @Test\n  public void testDistinctCountHll()\n      throws Exception {\n    String query;\n\n    // The Accurate value is 6538.\n    query = ""SELECT distinctCount(FlightNum) FROM mytable "";\n    assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), 6538);\n    assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(), 6538);\n\n    // Expected distinctCountHll with different log2m value from 2 to 19. The Accurate value is 6538.\n    long[] expectedResults = new long[]{\n        3504, 6347, 8877, 9729, 9046, 7672, 7538, 6993, 6649, 6651, 6553, 6525, 6459, 6523, 6532, 6544, 6538, 6539\n    };\n\n    for (int i = 2; i < 20; i++) {\n      query = String.format(""SELECT distinctCountHLL(FlightNum, %d) FROM mytable "", i);\n      assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResults[i - 2]);\n      assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(),\n          expectedResults[i - 2]);\n    }\n\n    // Default HLL is set as log2m=12\n    query = ""SELECT distinctCountHLL(FlightNum) FROM mytable "";\n    assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResults[10]);\n    assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(),\n        expectedResults[10]);\n  }\n']",broker;format;aggregation;Equals;ql;broker;SELECT;query;Equals;post,1.5425030142068863e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.446361064910889, -4.996050834655762, -5.358953475952148, -6.416753768920898, -5.469788074493408, -0.021865837275981903]",0.9783715009689331
1,"['  @Test\n  public void testAggregationFunctionsWithUnderscore()\n      throws Exception {\n    String query;\n\n    // The Accurate value is 6538.\n    query = ""SELECT distinct_count(FlightNum) FROM mytable "";\n    assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), 6538);\n    assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(), 6538);\n\n    // The Accurate value is 6538.\n    query = ""SELECT c_o_u_n_t(FlightNum) FROM mytable "";\n    assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), 115545);\n    assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(), 115545);\n  }\n']",broker;aggregation;post;Accurate;Num;Equals;query;Exception;Accurate;post,3.4924596548080444e-09;8.731149137020111e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.498944282531738, -5.007174968719482, -5.4211015701293945, -6.489636421203613, -5.4719343185424805, -0.02114724926650524]",0.9790746569633484
1,"['  @Test\n  public void testGrpcQueryServer()\n      throws Exception {\n    GrpcQueryClient queryClient = new GrpcQueryClient(""localhost"", CommonConstants.Server.DEFAULT_GRPC_PORT);\n    String sql = ""SELECT * FROM mytable_OFFLINE LIMIT 1000000"";\n    BrokerRequest brokerRequest = new Pql2Compiler().compileToBrokerRequest(sql);\n    List<String> segments = _helixResourceManager.getSegmentsFor(""mytable_OFFLINE"");\n\n    GrpcRequestBuilder requestBuilder = new GrpcRequestBuilder().setSegments(segments);\n    testNonStreamingRequest(queryClient.submit(requestBuilder.setSql(sql).build()));\n    testNonStreamingRequest(queryClient.submit(requestBuilder.setBrokerRequest(brokerRequest).build()));\n\n    requestBuilder.setEnableStreaming(true);\n    testStreamingRequest(queryClient.submit(requestBuilder.setSql(sql).build()));\n    testStreamingRequest(queryClient.submit(requestBuilder.setBrokerRequest(brokerRequest).build()));\n  }\n']",Grpc;Server;localhost;Broker;ql;helix;Constants;Segments;Exception;broker,2.7939677238464355e-09;2.7939677238464355e-09;1.7462298274040222e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2223608791828156e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.5148234367370605, -4.999392509460449, -5.450490951538086, -6.480966567993164, -5.478744983673096, -0.020988505333662033]",0.9792302250862122
1,['  @Test\n  public void testHardcodedServerPartitionedSqlQueries()\n      throws Exception {\n    super.testHardcodedServerPartitionedSqlQueries();\n  }\n'],Partitioned;Server;ql;Queries;Server;Partitioned;super;ql;Queries;Hardcoded,2.3283064365386963e-09;-4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-2.561137080192566e-09;-3.725290298461914e-09;-4.190951585769653e-09;-4.423782229423523e-09;-5.3551048040390015e-09,5,5,"[-5.559348106384277, -4.89536714553833, -5.350228309631348, -6.476891040802002, -5.493713855743408, -0.021970218047499657]",0.9782693982124329
1,"['  @Test\n  public void testAggregateMetadataAPI()\n      throws IOException {\n    JsonNode oneColumnResponse = JsonUtils\n        .stringToJsonNode(sendGetRequest(_controllerBaseApiUrl + ""/tables/mytable/metadata?columns=DestCityMarketID""));\n    assertEquals(oneColumnResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);\n    assertEquals(oneColumnResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);\n    assertEquals(oneColumnResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);\n    assertEquals(oneColumnResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 1);\n    assertEquals(oneColumnResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 1);\n\n    JsonNode threeColumnsResponse = JsonUtils.stringToJsonNode(sendGetRequest(_controllerBaseApiUrl\n        + ""/tables/mytable/metadata?columns=DivActualElapsedTime&columns=CRSElapsedTime&columns=OriginStateName""));\n    assertEquals(threeColumnsResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);\n    assertEquals(threeColumnsResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);\n    assertEquals(threeColumnsResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);\n    assertEquals(threeColumnsResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 3);\n    assertEquals(threeColumnsResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 3);\n\n    JsonNode zeroColumnResponse =\n        JsonUtils.stringToJsonNode(sendGetRequest(_controllerBaseApiUrl + ""/tables/mytable/metadata""));\n    assertEquals(zeroColumnResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);\n    assertEquals(zeroColumnResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);\n    assertEquals(zeroColumnResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);\n    assertEquals(zeroColumnResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 0);\n    assertEquals(zeroColumnResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 0);\n\n    JsonNode allColumnResponse =\n        JsonUtils.stringToJsonNode(sendGetRequest(_controllerBaseApiUrl + ""/tables/mytable/metadata?columns=*""));\n    assertEquals(allColumnResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);\n    assertEquals(allColumnResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);\n    assertEquals(allColumnResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);\n    assertEquals(allColumnResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 82);\n    assertEquals(allColumnResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 82);\n\n    allColumnResponse = JsonUtils.stringToJsonNode(sendGetRequest(\n        _controllerBaseApiUrl + ""/tables/mytable/metadata?columns=CRSElapsedTime&columns=*&columns=OriginStateName""));\n    assertEquals(allColumnResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);\n    assertEquals(allColumnResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);\n    assertEquals(allColumnResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);\n    assertEquals(allColumnResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 82);\n    assertEquals(allColumnResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 82);\n  }\n']",send;Metadata;Utils;Actual;SE;ES;Column;ARDINALITY;OWS;ID,1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;5.020410753786564e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.354055404663086, -5.024390697479248, -5.380612373352051, -6.443509101867676, -5.443359375, -0.022066889330744743]",0.9781746864318848
1,"['  @Test\n  public void testRecords()\n      throws Exception {\n    Assert.assertNotEquals(_totalRecordsPushedInStream, 0);\n\n    ResultSet pinotResultSet = getPinotConnection()\n        .execute(new Request(""sql"", ""SELECT * FROM "" + getTableName() + "" ORDER BY Origin LIMIT 10000""))\n        .getResultSet(0);\n\n    Assert.assertNotEquals(pinotResultSet.getRowCount(), 0);\n\n    Statement h2statement =\n        _h2Connection.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY);\n    h2statement.execute(""SELECT * FROM "" + getTableName() + "" ORDER BY Origin"");\n    java.sql.ResultSet h2ResultSet = h2statement.getResultSet();\n\n    Assert.assertFalse(h2ResultSet.isLast());\n\n    h2ResultSet.beforeFirst();\n    int row = 0;\n    Map<String, Integer> columnToIndex = new HashMap<>();\n    for (int i = 0; i < _h2FieldNameAndTypes.size(); i++) {\n      columnToIndex.put(pinotResultSet.getColumnName(i), i);\n    }\n\n    while (h2ResultSet.next()) {\n\n      for (String fieldNameAndDatatype : _h2FieldNameAndTypes) {\n        String[] fieldNameAndDatatypeList = fieldNameAndDatatype.split("" "");\n        String fieldName = fieldNameAndDatatypeList[0];\n        String h2DataType = fieldNameAndDatatypeList[1];\n        switch (h2DataType) {\n          case ""int"": {\n            int expectedValue = h2ResultSet.getInt(fieldName);\n            int actualValue = pinotResultSet.getInt(row, columnToIndex.get(fieldName));\n            Assert.assertEquals(expectedValue, actualValue);\n            break;\n          }\n          case ""varchar(128)"": {\n            String expectedValue = h2ResultSet.getString(fieldName);\n            String actualValue = pinotResultSet.getString(row, columnToIndex.get(fieldName));\n            Assert.assertEquals(expectedValue, actualValue);\n            break;\n          }\n          default:\n            break;\n        }\n      }\n\n      row++;\n\n      if (row >= pinotResultSet.getRowCount()) {\n        int cnt = 0;\n        while (h2ResultSet.next()) {\n          cnt++;\n        }\n        Assert.assertEquals(cnt, 0);\n        break;\n      }\n    }\n  }\n']",Records;Field;Value;total;Set;pinot;Name;Statement;statement;Datatype,6.05359673500061e-09;2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.2514647096395493e-09;1.1932570487260818e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.604264050722122e-10,5,5,"[-5.463012218475342, -4.91760778427124, -5.366809844970703, -6.4450297355651855, -5.486246585845947, -0.02220284566283226]",0.9780418276786804
1,"['  @Test\n  public void testCountRecords() {\n    long count =\n        getPinotConnection().execute(new Request(""sql"", ""SELECT COUNT(*) FROM "" + getTableName())).getResultSet(0)\n            .getLong(0);\n\n    Assert.assertEquals(count, _totalRecordsPushedInStream);\n  }\n']",In;execute;Request;long;SELECT;Table;get;Result;count;Assert,1.5133991837501526e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.51965856552124, -4.968667507171631, -5.347289562225342, -6.443951606750488, -5.466785907745361, -0.02177077904343605]",0.9784643650054932
1,['  @Test\n  public void testGeneratedQueries()\n      throws Exception {\n    for (int i = 0; i < NUM_QUERIES_TO_GENERATE; i += 2) {\n      testStarQuery(_starTree1QueryGenerator.nextQuery());\n      testStarQuery(_starTree2QueryGenerator.nextQuery());\n    }\n  }\n'],GENERATE;star;Generator;next;star;QUERIES;Generator;Query;Query;Exception,1.3387762010097504e-09;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.492530822753906, -4.977441310882568, -5.3786187171936035, -6.502073764801025, -5.450258255004883, -0.02165144681930542]",0.9785812497138977
1,"['  @Test\n  public void testPredicateOnMetrics()\n      throws Exception {\n    String starQuery;\n\n    // Query containing predicate on one metric only\n    starQuery = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay > 0"";\n    testStarQuery(starQuery);\n    starQuery = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay BETWEEN 0 and 10000"";\n    testStarQuery(starQuery);\n\n    // Query containing predicate on multiple metrics\n    starQuery = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay > 0 AND ArrDelay > 0"";\n    testStarQuery(starQuery);\n\n    // Query containing predicate on multiple metrics and dimensions\n    starQuery =\n        ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay > 0 AND ArrDelay > 0 AND OriginStateName = ""\n            + ""\'Massachusetts\'"";\n    testStarQuery(starQuery);\n  }\n']",BETWEEN;Delay;Dep;metric;Table;Minutes;dimensions;Query;Delay;multiple,1.57160684466362e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;6.111804395914078e-10,5,5,"[-5.443066596984863, -5.032609939575195, -5.39255428314209, -6.469721794128418, -5.478063583374023, -0.021351713687181473]",0.9788746237754822
1,"['  @Test\n  public void testTextSearchCountQuery()\n      throws Exception {\n    // Keep posting queries until all records are consumed\n    long previousResult = 0;\n    while (getCurrentCountStarResult() < NUM_RECORDS) {\n      long result = getTextColumnQueryResult();\n      assertTrue(result >= previousResult);\n      previousResult = result;\n      Thread.sleep(100);\n    }\n\n    //Lucene index on consuming segments to update the latest records\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        return getTextColumnQueryResult() == NUM_MATCHING_RECORDS;\n      } catch (Exception e) {\n        fail(""Caught exception while getting text column query result"");\n        return false;\n      }\n    }, 10_000L, ""Failed to reach expected number of matching records"");\n  }\n']",oid;Lucene;Condition;Search;Keep;of;wait;Column;update;expected,3.725290298461914e-09;3.4924596548080444e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.6880221664905548e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.525254249572754, -4.947184085845947, -5.348700523376465, -6.447149276733398, -5.488974571228027, -0.02179539017379284]",0.9784402847290039
1,"['  @Test\n  public void testRealtimeToOfflineSegmentsTask()\n      throws IOException {\n    List<SegmentZKMetadata> segmentsZKMetadata = _pinotHelixResourceManager.getSegmentsZKMetadata(_offlineTableName);\n    Assert.assertTrue(segmentsZKMetadata.isEmpty());\n\n    long expectedWatermark = _dataSmallestTimeMs + 86400000;\n    int numOfflineSegments = 0;\n    for (int i = 0; i < 3; i++) {\n      // Schedule task\n      Assert.assertNotNull(_taskManager.scheduleTasks().get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));\n      Assert.assertTrue(_helixTaskResourceManager.getTaskQueues().contains(\n          PinotHelixTaskResourceManager.getHelixJobQueueName(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE)));\n      // Should not generate more tasks\n      Assert.assertNull(_taskManager.scheduleTasks().get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));\n\n      // Wait at most 600 seconds for all tasks COMPLETED\n      waitForTaskToComplete(expectedWatermark);\n      // check segment is in offline\n      segmentsZKMetadata = _pinotHelixResourceManager.getSegmentsZKMetadata(_offlineTableName);\n      numOfflineSegments++;\n      Assert.assertEquals(segmentsZKMetadata.size(), numOfflineSegments);\n      long expectedOfflineSegmentTimeMs = expectedWatermark - 86400000;\n      Assert.assertEquals(segmentsZKMetadata.get(i).getStartTimeMs(), expectedOfflineSegmentTimeMs);\n      Assert.assertEquals(segmentsZKMetadata.get(i).getEndTimeMs(), expectedOfflineSegmentTimeMs);\n\n      expectedWatermark += 86400000;\n    }\n    testHardcodedSqlQueries();\n\n    // Delete the table\n    dropRealtimeTable(_realtimeTableName);\n\n    // Check if the metadata is cleaned up on table deletion\n    verifyTableDelete(_realtimeTableName);\n  }\n']",Realtime;Equals;Time;Realtime;wait;schedule;segments;Metadata;Start;Assert,1.7462298274040222e-09;1.280568540096283e-09;1.1059455573558807e-09;9.38598532229662e-10;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;6.548361852765083e-10;6.111804395914078e-10;6.111804395914078e-10,5,5,"[-5.465689659118652, -4.902285099029541, -5.30280065536499, -6.421985626220703, -5.471848964691162, -0.022721659392118454]",0.9775344133377075
1,['  @Test(enabled = false)\n  public void testSegmentListApi() {\n  }\n'],pi;false;Segment;enabled;List,3.3760443329811096e-09;6.984919309616089e-10;4.656612873077393e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.5950751304626465, -4.97319221496582, -5.389161109924316, -6.528149604797363, -5.484312534332275, -0.021035663783550262]",0.9791839122772217
1,['  @Test(enabled = false)\n  public void testBrokerDebugOutput() {\n  }\n'],Broker;Debug;enabled;Output;false,3.026798367500305e-09;2.7939677238464355e-09;6.984919309616089e-10;-6.984919309616089e-10;-1.1641532182693481e-09,5,5,"[-5.600947380065918, -4.842372894287109, -5.4015960693359375, -6.539562225341797, -5.527827262878418, -0.021746518090367317]",0.9784882068634033
1,['  @Test(enabled = false)\n  public void testBrokerDebugRoutingTableSQL() {\n  }\n'],Broker;Table;outing;Debug;enabled;false;SQL,1.6298145055770874e-09;4.656612873077393e-10;0.0;-3.4924596548080444e-10;-6.984919309616089e-10;-1.3533281162381172e-09;-2.9103830456733704e-09,5,5,"[-5.608603477478027, -4.868717670440674, -5.389939308166504, -6.542303085327148, -5.512524604797363, -0.021620767191052437]",0.9786112904548645
1,['  @Test(enabled = false)\n  public void testBrokerResponseMetadata() {\n  }\n'],Broker;false;Response;enabled;Metadata,2.7939677238464355e-09;2.3283064365386963e-10;0.0;-4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-5.617544651031494, -4.828132629394531, -5.34877347946167, -6.506465435028076, -5.524664402008057, -0.022112715989351273]",0.9781301021575928
1,['  @Test(enabled = false)\n  public void testDictionaryBasedQueries() {\n  }\n'],Based;enabled;ictionary;false;Queries,2.0954757928848267e-09;1.0477378964424133e-09;-2.3283064365386963e-10;-4.656612873077393e-10;-3.725290298461914e-09,5,5,"[-5.601064205169678, -4.956663608551025, -5.350767612457275, -6.496942520141602, -5.48033332824707, -0.02137773483991623]",0.9788492918014526
1,['  @Test(enabled = false)\n  public void testGeneratedQueriesWithMultiValues() {\n  }\n'],Queries;Values;false;Multi;enabled;Generated,2.0954757928848267e-09;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;-4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-5.598703861236572, -4.859002590179443, -5.388980388641357, -6.53784704208374, -5.5073676109313965, -0.021767163649201393]",0.978468120098114
1,['  @Test(enabled = false)\n  public void testGeneratedQueriesWithoutMultiValues() {\n  }\n'],Queries;enabled;Generated;false;Without;Multi;Values,2.561137080192566e-09;1.862645149230957e-09;4.656612873077393e-10;-6.111804395914078e-10;-9.313225746154785e-10;-2.2118911147117615e-09;-2.561137080192566e-09,5,5,"[-5.599939823150635, -4.870070457458496, -5.39997673034668, -6.5428595542907715, -5.503721237182617, -0.021631848067045212]",0.9786004424095154
1,['  @Test(enabled = false)\n  public void testHardcodedQueries() {\n  }\n'],Hardcoded;false;enabled;Queries,7.2177499532699585e-09;1.6298145055770874e-09;1.3969838619232178e-09;-4.6566128730773926e-09,5,5,"[-5.593253135681152, -4.955750942230225, -5.361611366271973, -6.505163192749023, -5.485672473907471, -0.021326273679733276]",0.9788995385169983
1,['  @Test(enabled = false)\n  public void testHardcodedSqlQueries() {\n  }\n'],Queries;Hardcoded;enabled;false;ql,5.587935447692871e-09;1.1641532182693481e-09;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.6011152267456055, -4.865391254425049, -5.393460273742676, -6.546393394470215, -5.510091781616211, -0.021662762388586998]",0.9785701632499695
1,['  @Test(enabled = false)\n  public void testInstanceShutdown() {\n  }\n'],false;enabled;Shutdown;Instance,6.984919309616089e-10;-1.1641532182693481e-10;-5.820766091346741e-10;-1.0477378964424133e-09,5,5,"[-5.639627933502197, -4.924149990081787, -5.386529922485352, -6.514754295349121, -5.508598327636719, -0.021156353875994682]",0.9790658950805664
1,['  @Test(enabled = false)\n  public void testQueriesFromQueryFile() {\n  }\n'],File;enabled;Query;false;From;Queries,5.587935447692871e-09;1.1641532182693481e-09;-9.313225746154785e-10;-1.862645149230957e-09;-2.7939677238464355e-09;-5.9371814131736755e-09,5,5,"[-5.611786842346191, -4.961282730102539, -5.391737461090088, -6.519979953765869, -5.49130916595459, -0.021028192713856697]",0.9791913628578186
1,['  @Test(enabled = false)\n  public void testQueryExceptions() {\n  }\n'],Query;false;Exceptions;enabled,1.7462298274040222e-09;6.984919309616089e-10;4.0745362639427185e-10;-9.313225746154785e-10,5,5,"[-5.630204677581787, -4.944351673126221, -5.387540340423584, -6.5182366371154785, -5.500274181365967, -0.021066946908831596]",0.9791535139083862
1,['  @Test(enabled = false)\n  public void testReload(boolean includeOfflineTable) {\n  }\n'],enabled;include;false;Table;Offline;Reload;boolean,2.3283064365386963e-09;4.656612873077393e-10;0.0;-3.4924596548080444e-10;-4.656612873077393e-10;-1.3969838619232178e-09;-2.444721758365631e-09,5,5,"[-5.607960224151611, -4.883920192718506, -5.383453845977783, -6.532338619232178, -5.510279655456543, -0.021559052169322968]",0.978671669960022
1,['  @Test(enabled = false)\n  public void testSqlQueriesFromQueryFile() {\n  }\n'],enabled;File;From;false;Queries;Query;ql,1.862645149230957e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;-1.979060471057892e-09,5,5,"[-5.602665901184082, -4.880041122436523, -5.408944129943848, -6.550394535064697, -5.5063042640686035, -0.02148064784705639]",0.9787483215332031
1,['  @Test(enabled = false)\n  public void testVirtualColumnQueries() {\n  }\n'],Column;enabled;Queries;false;Virtual,7.450580596923828e-09;5.122274160385132e-09;4.190951585769653e-09;3.958120942115784e-09;9.313225746154785e-10,5,5,"[-5.612743377685547, -4.959811687469482, -5.382900238037109, -6.517825603485107, -5.495526313781738, -0.02106204442679882]",0.9791582226753235
1,"['  @Test\n  public void testJsonPathQueries()\n      throws Exception {\n    // Selection only\n    String query = ""SELECT stringKeyMapStr FROM "" + getTableName();\n    JsonNode pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    JsonNode selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(selectionResults.get(i).get(0).textValue(), String.format(""{\\""k1\\"":%d,\\""k2\\"":100%d}"", i, i));\n    }\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.k1\', \'INT\') FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), i);\n    }\n    query = ""SELECT jsonExtractScalar(intKeyMapStr, \'$.95\', \'INT\') FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), i);\n    }\n\n    // Selection order-by\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.k2\', \'INT\') FROM "" + getTableName()\n        + "" ORDER BY jsonExtractScalar(stringKeyMapStr, \'$.k1\', \'INT\')"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), NUM_DOCS + i);\n    }\n    query = ""SELECT jsonExtractScalar(intKeyMapStr, \'$.717\', \'INT\') FROM "" + getTableName()\n        + "" ORDER BY jsonExtractScalar(intKeyMapStr, \'$.95\', \'INT\')"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), NUM_DOCS + i);\n    }\n\n    // Aggregation only\n    query = ""SELECT MAX(jsonExtractScalar(stringKeyMapStr, \'$.k1\', \'INT\')) FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    JsonNode aggregationResult = pinotResponse.get(""aggregationResults"").get(0).get(""value"");\n    assertEquals((int) Double.parseDouble(aggregationResult.textValue()), NUM_DOCS - 1);\n    query = ""SELECT MAX(jsonExtractScalar(intKeyMapStr, \'$.95\', \'INT\')) FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    aggregationResult = pinotResponse.get(""aggregationResults"").get(0).get(""value"");\n    assertEquals((int) Double.parseDouble(aggregationResult.textValue()), NUM_DOCS - 1);\n\n    // Aggregation group-by\n    query = ""SELECT MIN(jsonExtractScalar(stringKeyMapStr, \'$.k2\', \'INT\')) FROM "" + getTableName()\n        + "" GROUP BY jsonExtractScalar(stringKeyMapStr, \'$.k1\', \'INT\')"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    JsonNode groupByResults = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");\n    assertEquals(groupByResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      JsonNode groupByResult = groupByResults.get(i);\n      assertEquals(Integer.parseInt(groupByResult.get(""group"").get(0).asText()), i);\n      assertEquals((int) Double.parseDouble(groupByResult.get(""value"").asText()), NUM_DOCS + i);\n    }\n    query = ""SELECT MIN(jsonExtractScalar(intKeyMapStr, \'$.717\', \'INT\')) FROM "" + getTableName()\n        + "" GROUP BY jsonExtractScalar(intKeyMapStr, \'$.95\', \'INT\')"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    groupByResults = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");\n    assertEquals(groupByResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      JsonNode groupByResult = groupByResults.get(i);\n      assertEquals(Integer.parseInt(groupByResult.get(""group"").get(0).asText()), i);\n      assertEquals((int) Double.parseDouble(groupByResult.get(""value"").asText()), NUM_DOCS + i);\n    }\n\n    // Filter\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.k2\', \'INT\') FROM "" + getTableName()\n        + "" WHERE jsonExtractScalar(stringKeyMapStr, \'$.k1\', \'INT\') = 25"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 1);\n    assertEquals(Integer.parseInt(selectionResults.get(0).get(0).textValue()), NUM_DOCS + 25);\n    query = ""SELECT jsonExtractScalar(intKeyMapStr, \'$.717\', \'INT\') FROM "" + getTableName()\n        + "" WHERE jsonExtractScalar(intKeyMapStr, \'$.95\', \'INT\') = 25"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 1);\n    assertEquals(Integer.parseInt(selectionResults.get(0).get(0).textValue()), NUM_DOCS + 25);\n\n    // Filter on non-existing key\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.k2\', \'INT\') FROM "" + getTableName()\n        + "" WHERE jsonExtractScalar(stringKeyMapStr, \'$.k3\', \'INT_ARRAY\') = 25"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 0);\n    query = ""SELECT jsonExtractScalar(intKeyMapStr, \'$.717\', \'INT\') FROM "" + getTableName()\n        + "" WHERE jsonExtractScalar(intKeyMapStr, \'$.123\', \'INT_ARRAY\') = 25"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 0);\n\n    // Select non-existing key (illegal query)\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.k3\', \'INT\') FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertNotEquals(pinotResponse.get(""exceptions"").size(), 0);\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.123\', \'INT\') FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertNotEquals(pinotResponse.get(""exceptions"").size(), 0);\n\n    // Select non-existing key with default value\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.k3\', \'INT\', \'0\') FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.123\', \'INT\', \'0\') FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n\n    // Select non-existing key with proper filter\n    query = ""SELECT jsonExtractScalar(intKeyMapStr, \'$.123\', \'INT\') FROM "" + getTableName()\n        + "" WHERE jsonExtractKey(intKeyMapStr, \'$.*\') = \\""$[\'123\']\\"""";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 0);\n    query = ""SELECT jsonExtractScalar(stringKeyMapStr, \'$.k3\', \'INT\') FROM "" + getTableName()\n        + "" WHERE jsonExtractKey(stringKeyMapStr, \'$.*\') = \\""$[\'k3\']\\"""";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 0);\n  }\n']",son;son;json;json;Str;Map;Equals;Node;Name;post,8.731149137020111e-10;6.984919309616089e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.417043685913086, -5.102756977081299, -5.437587738037109, -6.449370384216309, -5.425735950469971, -0.021074067801237106]",0.979146420955658
1,"['  @Test\n  public void testQueries()\n      throws Exception {\n    // Selection only\n    String query = ""SELECT mapValue(stringKeyMap__KEYS, \'k1\', stringKeyMap__VALUES) FROM "" + getTableName();\n    JsonNode pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    JsonNode selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), i);\n    }\n    query = ""SELECT mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES) FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), i);\n    }\n\n    // Selection order-by\n    query = ""SELECT mapValue(stringKeyMap__KEYS, \'k2\', stringKeyMap__VALUES) FROM "" + getTableName()\n        + "" ORDER BY mapValue(stringKeyMap__KEYS, \'k1\', stringKeyMap__VALUES)"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), NUM_DOCS + i);\n    }\n    query = ""SELECT mapValue(intKeyMap__KEYS, 717, intKeyMap__VALUES) FROM "" + getTableName()\n        + "" ORDER BY mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES)"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), NUM_DOCS + i);\n    }\n\n    // Aggregation only\n    query = ""SELECT MAX(mapValue(stringKeyMap__KEYS, \'k1\', stringKeyMap__VALUES)) FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    JsonNode aggregationResult = pinotResponse.get(""aggregationResults"").get(0).get(""value"");\n    assertEquals((int) Double.parseDouble(aggregationResult.textValue()), NUM_DOCS - 1);\n    query = ""SELECT MAX(mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES)) FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    aggregationResult = pinotResponse.get(""aggregationResults"").get(0).get(""value"");\n    assertEquals((int) Double.parseDouble(aggregationResult.textValue()), NUM_DOCS - 1);\n\n    // Aggregation group-by\n    query = ""SELECT MIN(mapValue(stringKeyMap__KEYS, \'k2\', stringKeyMap__VALUES)) FROM "" + getTableName()\n        + "" GROUP BY mapValue(stringKeyMap__KEYS, \'k1\', stringKeyMap__VALUES)"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    JsonNode groupByResults = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");\n    assertEquals(groupByResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      JsonNode groupByResult = groupByResults.get(i);\n      assertEquals(Integer.parseInt(groupByResult.get(""group"").get(0).asText()), i);\n      assertEquals((int) Double.parseDouble(groupByResult.get(""value"").asText()), NUM_DOCS + i);\n    }\n    query = ""SELECT MIN(mapValue(intKeyMap__KEYS, 717, intKeyMap__VALUES)) FROM "" + getTableName()\n        + "" GROUP BY mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES)"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    groupByResults = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");\n    assertEquals(groupByResults.size(), 10);\n    for (int i = 0; i < 10; i++) {\n      JsonNode groupByResult = groupByResults.get(i);\n      assertEquals(Integer.parseInt(groupByResult.get(""group"").get(0).asText()), i);\n      assertEquals((int) Double.parseDouble(groupByResult.get(""value"").asText()), NUM_DOCS + i);\n    }\n\n    // Filter\n    query = ""SELECT mapValue(stringKeyMap__KEYS, \'k2\', stringKeyMap__VALUES) FROM "" + getTableName()\n        + "" WHERE mapValue(stringKeyMap__KEYS, \'k1\', stringKeyMap__VALUES) = 25"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 1);\n    assertEquals(Integer.parseInt(selectionResults.get(0).get(0).textValue()), NUM_DOCS + 25);\n    query = ""SELECT mapValue(intKeyMap__KEYS, 717, intKeyMap__VALUES) FROM "" + getTableName()\n        + "" WHERE mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES) = 25"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 1);\n    assertEquals(Integer.parseInt(selectionResults.get(0).get(0).textValue()), NUM_DOCS + 25);\n\n    // Filter on non-existing key\n    query = ""SELECT mapValue(stringKeyMap__KEYS, \'k2\', stringKeyMap__VALUES) FROM "" + getTableName()\n        + "" WHERE mapValue(stringKeyMap__KEYS, \'k3\', stringKeyMap__VALUES) = 25"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 0);\n    query = ""SELECT mapValue(intKeyMap__KEYS, 717, intKeyMap__VALUES) FROM "" + getTableName()\n        + "" WHERE mapValue(intKeyMap__KEYS, 123, intKeyMap__VALUES) = 25"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 0);\n\n    // Select non-existing key (illegal query)\n    query = ""SELECT mapValue(stringKeyMap__KEYS, \'k3\', stringKeyMap__VALUES) FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertNotEquals(pinotResponse.get(""exceptions"").size(), 0);\n    query = ""SELECT mapValue(stringKeyMap__KEYS, 123, stringKeyMap__VALUES) FROM "" + getTableName();\n    pinotResponse = postQuery(query);\n    assertNotEquals(pinotResponse.get(""exceptions"").size(), 0);\n\n    // Select non-existing key with proper filter\n    query = ""SELECT mapValue(stringKeyMap__KEYS, \'k3\', stringKeyMap__VALUES) FROM "" + getTableName()\n        + "" WHERE stringKeyMap__KEYS = \'k3\'"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 0);\n    query = ""SELECT mapValue(intKeyMap__KEYS, 123, intKeyMap__VALUES) FROM "" + getTableName()\n        + "" WHERE stringKeyMap__KEYS = 123"";\n    pinotResponse = postQuery(query);\n    assertEquals(pinotResponse.get(""exceptions"").size(), 0);\n    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");\n    assertEquals(selectionResults.size(), 0);\n  }\n']",map;by;Exception;order;query;map;SELECT;exceptions;map;Equals,8.731149137020111e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.434783458709717, -5.089860916137695, -5.406937122344971, -6.432507038116455, -5.421474933624268, -0.02125987410545349]",0.9789645075798035
1,"['  @Test\n  public void testSegmentAssignment()\n      throws Exception {\n    IdealState idealState = HelixHelper.getTableIdealState(_helixManager, TABLE_NAME_WITH_TYPE);\n    Assert.assertEquals(getCurrentCountStarResult(), getCountStarResult());\n    verifyTableIdealStates(idealState);\n    // Wait 3 seconds to let the realtime validation thread to run.\n    Thread.sleep(3000);\n    // Verify the result again.\n    Assert.assertEquals(getCurrentCountStarResult(), getCountStarResult());\n    verifyTableIdealStates(idealState);\n  }\n']",helix;Ideal;State;verify;Segment;verify;Star;Wait;TABLE;ITH,1.9208528101444244e-09;1.862645149230957e-09;8.731149137020111e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.5204081535339355, -4.9558939933776855, -5.405483245849609, -6.494082927703857, -5.4825944900512695, -0.021437009796500206]",0.9787912368774414
1,"['  @Test\n  public void testSegmentUploadDownload()\n      throws Exception {\n    final Request query = new Request(""sql"", ""SELECT count(*) FROM "" + getTableName());\n\n    ResultSetGroup resultBeforeOffline = getPinotConnection().execute(query);\n    Assert.assertTrue(resultBeforeOffline.getResultSet(0).getLong(0) > 0);\n\n    // schedule offline segment generation\n    Assert.assertNotNull(_controllerStarter.getTaskManager().scheduleTasks());\n\n    // wait for offline segments\n    JsonNode offlineSegments = TestUtils.waitForResult(() -> {\n      JsonNode segmentSets = JsonUtils.stringToJsonNode(\n          sendGetRequest(_controllerRequestURLBuilder.forSegmentListAPI(getTableName()), AUTH_HEADER));\n      JsonNode currentOfflineSegments =\n          new IntRange(0, segmentSets.size()).stream().map(segmentSets::get).filter(s -> s.has(""OFFLINE""))\n              .map(s -> s.get(""OFFLINE"")).findFirst().get();\n      Assert.assertFalse(currentOfflineSegments.isEmpty());\n      return currentOfflineSegments;\n    }, 30000);\n\n    // Verify constant row count\n    ResultSetGroup resultAfterOffline = getPinotConnection().execute(query);\n    Assert.assertEquals(resultBeforeOffline.getResultSet(0).getLong(0), resultAfterOffline.getResultSet(0).getLong(0));\n\n    // download and sanity-check size of offline segment(s)\n    for (int i = 0; i < offlineSegments.size(); i++) {\n      String segment = offlineSegments.get(i).asText();\n      Assert.assertTrue(\n          sendGetRequest(_controllerRequestURLBuilder.forSegmentDownload(getTableName(), segment), AUTH_HEADER).length()\n              > 200000); // download segment\n    }\n  }\n']",Segment;segment;API;HEADER;current;controller;sql;Segments;URLBuilder;execute,2.3283064365386963e-09;1.7462298274040222e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.486964702606201, -4.89159631729126, -5.340301036834717, -6.423465251922607, -5.4844560623168945, -0.02246852219104767]",0.9777818918228149
1,"['  @Test\n  public void testConvertToRawIndexTask()\n      throws Exception {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(getTableName());\n\n    File testDataDir = new File(CommonConstants.Server.DEFAULT_INSTANCE_DATA_DIR + ""-0"", offlineTableName);\n    if (!testDataDir.isDirectory()) {\n      testDataDir = new File(CommonConstants.Server.DEFAULT_INSTANCE_DATA_DIR + ""-1"", offlineTableName);\n    }\n    Assert.assertTrue(testDataDir.isDirectory());\n    File tableDataDir = testDataDir;\n\n    // Check that all columns have dictionary\n    File[] indexDirs = tableDataDir.listFiles();\n    Assert.assertNotNull(indexDirs);\n    for (File indexDir : indexDirs) {\n      SegmentMetadata segmentMetadata = new SegmentMetadataImpl(indexDir);\n      for (String columnName : segmentMetadata.getSchema().getColumnNames()) {\n        Assert.assertTrue(segmentMetadata.getColumnMetadataFor(columnName).hasDictionary());\n      }\n    }\n\n    // Should create the task queues and generate a ConvertToRawIndexTask task with 5 child tasks\n    Assert.assertNotNull(_taskManager.scheduleTasks().get(ConvertToRawIndexTask.TASK_TYPE));\n    Assert.assertTrue(_helixTaskResourceManager.getTaskQueues()\n        .contains(PinotHelixTaskResourceManager.getHelixJobQueueName(ConvertToRawIndexTask.TASK_TYPE)));\n\n    // Should generate one more ConvertToRawIndexTask task with 3 child tasks\n    Assert.assertNotNull(_taskManager.scheduleTasks().get(ConvertToRawIndexTask.TASK_TYPE));\n\n    // Should not generate more tasks\n    Assert.assertNull(_taskManager.scheduleTasks().get(ConvertToRawIndexTask.TASK_TYPE));\n\n    // Wait at most 600 seconds for all tasks COMPLETED and new segments refreshed\n    TestUtils.waitForCondition(input -> {\n      // Check task state\n      for (TaskState taskState : _helixTaskResourceManager.getTaskStates(ConvertToRawIndexTask.TASK_TYPE).values()) {\n        if (taskState != TaskState.COMPLETED) {\n          return false;\n        }\n      }\n\n      // Check segment ZK metadata\n      for (SegmentZKMetadata segmentZKMetadata : _helixResourceManager.getSegmentsZKMetadata(offlineTableName)) {\n        Map<String, String> customMap = segmentZKMetadata.getCustomMap();\n        if (customMap == null || customMap.size() != 1 || !customMap\n            .containsKey(ConvertToRawIndexTask.TASK_TYPE + MinionConstants.TASK_TIME_SUFFIX)) {\n          return false;\n        }\n      }\n\n      // Check segment metadata\n      File[] indexDirs1 = tableDataDir.listFiles();\n      Assert.assertNotNull(indexDirs1);\n      for (File indexDir : indexDirs1) {\n        SegmentMetadata segmentMetadata;\n\n        // Segment metadata file might not exist if the segment is refreshing\n        try {\n          segmentMetadata = new SegmentMetadataImpl(indexDir);\n        } catch (Exception e) {\n          return false;\n        }\n\n        // The columns in COLUMNS_TO_CONVERT should have raw index\n        List<String> rawIndexColumns = Arrays.asList(StringUtils.split(COLUMNS_TO_CONVERT, \',\'));\n        for (String columnName : segmentMetadata.getSchema().getColumnNames()) {\n          if (rawIndexColumns.contains(columnName)) {\n            if (segmentMetadata.getColumnMetadataFor(columnName).hasDictionary()) {\n              return false;\n            }\n          } else {\n            if (!segmentMetadata.getColumnMetadataFor(columnName).hasDictionary()) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    }, 600_000L, ""Failed to get all tasks COMPLETED and new segments refreshed"");\n  }\n']",Convert;schedule;Assert;File;Common;Segment;Task;Data;list;more,9.89530235528946e-10;6.83940015733242e-10;5.820766091346741e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.458641052246094, -5.041772842407227, -5.404524326324463, -6.435103893280029, -5.429972171783447, -0.02143339440226555]",0.9787946939468384
1,"['  @Test\n  public void testPinotHelixResourceManagerAPIs() {\n    // Instance APIs\n    Assert.assertEquals(_helixResourceManager.getAllInstances().size(), 5);\n    Assert.assertEquals(_helixResourceManager.getOnlineInstanceList().size(), 5);\n    Assert.assertEquals(_helixResourceManager.getOnlineUnTaggedBrokerInstanceList().size(), 0);\n    Assert.assertEquals(_helixResourceManager.getOnlineUnTaggedServerInstanceList().size(), 0);\n\n    // Table APIs\n    String rawTableName = getTableName();\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(rawTableName);\n    List<String> tableNames = _helixResourceManager.getAllTables();\n    Assert.assertEquals(tableNames.size(), 2);\n    Assert.assertTrue(tableNames.contains(offlineTableName));\n    Assert.assertTrue(tableNames.contains(realtimeTableName));\n    Assert.assertEquals(_helixResourceManager.getAllRawTables(), Collections.singletonList(rawTableName));\n    Assert.assertEquals(_helixResourceManager.getAllRealtimeTables(), Collections.singletonList(realtimeTableName));\n\n    // Tenant APIs\n    Assert.assertEquals(_helixResourceManager.getAllBrokerTenantNames(), Collections.singleton(""TestTenant""));\n    Assert.assertEquals(_helixResourceManager.getAllServerTenantNames(), Collections.singleton(""TestTenant""));\n  }\n']",Names;Collections;contains;Assert;Collections;Instance;Equals;Tenant;Name;singleton,7.916241884231567e-09;4.6566128730773926e-09;3.3178366720676422e-09;2.9103830456733704e-09;2.561137080192566e-09;2.4156179279088974e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.476047515869141, -5.030401706695557, -5.362443447113037, -6.384282112121582, -5.416085243225098, -0.021779410541057587]",0.9784561395645142
1,"[' * <p>To enable the test, override it and add @Test annotation.\n  public void testHardcodedQueries()\n      throws Exception {\n    // Here are some sample queries.\n    String query;\n    query = ""SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch = 16312 AND Carrier = \'DL\'"";\n    testQuery(query, Collections.singletonList(query));\n    query = ""SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch <> 16312 AND Carrier = \'DL\'"";\n    testQuery(query, Collections.singletonList(query));\n    query = ""SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch > 16312 AND Carrier = \'DL\'"";\n    testQuery(query, Collections.singletonList(query));\n    query = ""SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch >= 16312 AND Carrier = \'DL\'"";\n    testQuery(query, Collections.singletonList(query));\n    query = ""SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch < 16312 AND Carrier = \'DL\'"";\n    testQuery(query, Collections.singletonList(query));\n    query = ""SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = \'DL\'"";\n    testQuery(query, Collections.singletonList(query));\n    query = ""SELECT MAX(ArrTime), MIN(ArrTime) FROM mytable WHERE DaysSinceEpoch >= 16312"";\n    testQuery(query, Arrays.asList(""SELECT MAX(ArrTime) FROM mytable WHERE DaysSinceEpoch >= 15312"",\n        ""SELECT MIN(ArrTime) FROM mytable WHERE DaysSinceEpoch >= 15312""));\n    query =\n        ""SELECT SUM(TotalAddGTime) FROM mytable WHERE DivArrDelay NOT IN (67, 260) AND Carrier IN (\'F9\', \'B6\') OR ""\n            + ""DepTime BETWEEN 2144 AND 1926"";\n    testQuery(query, Collections.singletonList(query));\n  }\n']",annotation;add;enable;Queries;some;Time;query;Carrier;Query;Epoch,2.9802322387695312e-08;1.0244548320770264e-08;6.05359673500061e-09;5.471520125865936e-09;4.540197551250458e-09;1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.280568540096283e-09;1.280568540096283e-09,5,5,"[-5.360705375671387, -5.168471336364746, -5.5079426765441895, -6.6169304847717285, -5.412744998931885, -0.020449869334697723]",0.9797577857971191
1,"['  @Test\n  public void testConsumerDirectoryExists() {\n    File consumerDirectory = new File(CONSUMER_DIRECTORY, ""mytable_REALTIME"");\n    assertEquals(consumerDirectory.exists(), _isConsumerDirConfigured,\n        ""The off heap consumer directory does not exist"");\n  }\n']",File;Equals;off;Configured;File;Dir;Consumer;Consumer;The;exist,9.313225746154785e-10;8.149072527885437e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;5.820766091346741e-11,5,5,"[-5.51810359954834, -4.950057029724121, -5.473214626312256, -6.549012184143066, -5.491636276245117, -0.02106717973947525]",0.9791531562805176
1,"['  @Test\n  public void testSegmentFlushSize() {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(getTableName());\n    List<SegmentZKMetadata> segmentsZKMetadata =\n        ZKMetadataProvider.getSegmentsZKMetadata(_propertyStore, realtimeTableName);\n    for (SegmentZKMetadata segmentZKMetadata : segmentsZKMetadata) {\n      assertEquals(segmentZKMetadata.getSizeThresholdToFlushSegment(),\n          getRealtimeSegmentFlushSize() / getNumKafkaPartitions());\n    }\n  }\n']",realtime;Flush;Size;Segment;get;Metadata;Metadata;Store;Segment;Metadata,1.6880221664905548e-09;1.57160684466362e-09;1.1641532182693481e-09;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.675246939063072e-10;5.020410753786564e-10,5,5,"[-5.522336006164551, -4.969394683837891, -5.379735946655273, -6.496221542358398, -5.485093116760254, -0.021438410505652428]",0.9787898659706116
1,"['  @Test\n  public void testInvertedIndexTriggering()\n      throws Exception {\n    long numTotalDocs = getCountStarResult();\n\n    JsonNode queryResponse = postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY);\n    assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);\n    assertTrue(queryResponse.get(""numEntriesScannedInFilter"").asLong() > 0L);\n\n    TableConfig tableConfig = getRealtimeTableConfig();\n    tableConfig.getIndexingConfig().setInvertedIndexColumns(UPDATED_INVERTED_INDEX_COLUMNS);\n    updateTableConfig(tableConfig);\n    reloadRealtimeTable(getTableName());\n\n    TestUtils.waitForCondition(aVoid -> {\n      try {\n        JsonNode queryResponse1 = postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY);\n        // Total docs should not change during reload\n        assertEquals(queryResponse1.get(""totalDocs"").asLong(), numTotalDocs);\n        assertEquals(queryResponse1.get(""numConsumingSegmentsQueried"").asLong(), 2);\n        assertTrue(queryResponse1.get(""minConsumingFreshnessTimeMs"").asLong() > _startTime);\n        assertTrue(queryResponse1.get(""minConsumingFreshnessTimeMs"").asLong() < System.currentTimeMillis());\n        return queryResponse1.get(""numEntriesScannedInFilter"").asLong() == 0;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }, 600_000L, ""Failed to generate inverted index"");\n  }\n']",Inverted;son;docs;start;Result;Freshness;query;reload;Condition;wait,1.57160684466362e-09;9.89530235528946e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10,5,5,"[-5.544097900390625, -4.8063507080078125, -5.3524489402771, -6.456873893737793, -5.539638996124268, -0.022575169801712036]",0.9776777625083923
1,"['  @Test(expectedExceptions = IOException.class)\n  public void testAddHLCTableShouldFail()\n      throws IOException {\n    TableConfig tableConfig = new TableConfigBuilder(TableType.REALTIME).setTableName(""testTable"")\n        .setStreamConfigs(Collections.singletonMap(""stream.kafka.consumer.type"", ""HIGHLEVEL"")).build();\n    sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableConfig.toJsonString());\n  }\n']",IGHLEVEL;afka;Collections;controller;Type;set;class;Request;Fail;type,1.6589183360338211e-09;1.3387762010097504e-09;7.275957614183426e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.552692413330078, -4.944531440734863, -5.424060344696045, -6.508387565612793, -5.494203090667725, -0.021233731880784035]",0.9789901375770569
1,['  @Test\n  public void testReload()\n      throws Exception {\n    testReload(false);\n  }\n'],Reload;Reload;Exception;false,4.6566128730773926e-09;9.313225746154785e-10;-6.984919309616089e-10;-1.280568540096283e-09,5,5,"[-5.584867477416992, -5.003244876861572, -5.383930683135986, -6.496009349822998, -5.481162071228027, -0.02095196768641472]",0.9792659878730774
1,['  @Test\n  public void testHardcodedServerPartitionedSqlQueries()\n      throws Exception {\n    super.testHardcodedServerPartitionedSqlQueries();\n  }\n'],Partitioned;Server;ql;Queries;Server;Partitioned;super;ql;Queries;Hardcoded,2.3283064365386963e-09;-4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-2.561137080192566e-09;-3.725290298461914e-09;-4.190951585769653e-09;-4.423782229423523e-09;-5.3551048040390015e-09,5,5,"[-5.559348106384277, -4.89536714553833, -5.350228309631348, -6.476891040802002, -5.493713855743408, -0.021970218047499657]",0.9782693982124329
1,"['  @Test\n  public void testFileBasedSegmentWriterAndDefaultUploader()\n      throws Exception {\n\n    TableConfig offlineTableConfig = createOfflineTableConfig();\n    addTableConfig(offlineTableConfig);\n\n    SegmentWriter segmentWriter = new FileBasedSegmentWriter();\n    segmentWriter.init(offlineTableConfig, _schema);\n    SegmentUploader segmentUploader = new SegmentUploaderDefault();\n    segmentUploader.init(offlineTableConfig);\n\n    GenericRow reuse = new GenericRow();\n    long totalDocs = 0;\n    for (int i = 0; i < 3; i++) {\n      AvroRecordReader avroRecordReader = new AvroRecordReader();\n      avroRecordReader.init(_avroFiles.get(i), null, null);\n\n      long numDocsInSegment = 0;\n      while (avroRecordReader.hasNext()) {\n        avroRecordReader.next(reuse);\n        segmentWriter.collect(reuse);\n        numDocsInSegment++;\n        totalDocs++;\n      }\n      // flush to segment\n      URI segmentTarURI = segmentWriter.flush();\n      // upload\n      segmentUploader.uploadSegment(segmentTarURI, null);\n\n      // check num segments\n      Assert.assertEquals(getNumSegments(), i + 1);\n      // check numDocs in latest segment\n      Assert.assertEquals(getNumDocsInLatestSegment(), numDocsInSegment);\n      // check totalDocs in query\n      checkTotalDocsInQuery(totalDocs);\n    }\n    segmentWriter.close();\n\n    dropAllSegments(_tableNameWithType, TableType.OFFLINE);\n    checkNumSegments(0);\n\n    // upload all together using dir\n    segmentUploader.uploadSegmentsFromDir(_tarDir.toURI(), null);\n    // check num segments\n    Assert.assertEquals(getNumSegments(), 3);\n    // check totalDocs in query\n    checkTotalDocsInQuery(totalDocs);\n\n    dropOfflineTable(_tableNameWithType);\n  }\n']",segment;OFFLINE;to;File;flush;Doc;Type;segment;while;table,7.450580596923828e-09;2.852175384759903e-09;2.153683453798294e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.022187441587448e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.469092845916748, -4.924654006958008, -5.334332466125488, -6.427107810974121, -5.472574234008789, -0.022369323298335075]",0.977878987789154
1,"['  @Test\n  public void testSegmentUploadDownload()\n      throws Exception {\n    final Request query = new Request(""sql"", ""SELECT count(*) FROM "" + getTableName());\n\n    ResultSetGroup resultBeforeOffline = getPinotConnection().execute(query);\n    Assert.assertTrue(resultBeforeOffline.getResultSet(0).getLong(0) > 0);\n\n    // schedule offline segment generation\n    Assert.assertNotNull(_controllerStarter.getTaskManager().scheduleTasks());\n\n    // wait for offline segments\n    JsonNode offlineSegments = TestUtils.waitForResult(() -> {\n      JsonNode segmentSets = JsonUtils.stringToJsonNode(\n          sendGetRequest(_controllerRequestURLBuilder.forSegmentListAPI(getTableName()), AUTH_HEADER));\n      JsonNode currentOfflineSegments =\n          new IntRange(0, segmentSets.size()).stream().map(segmentSets::get).filter(s -> s.has(""OFFLINE""))\n              .map(s -> s.get(""OFFLINE"")).findFirst().get();\n      Assert.assertFalse(currentOfflineSegments.isEmpty());\n      return currentOfflineSegments;\n    }, 30000);\n\n    // Verify constant row count\n    ResultSetGroup resultAfterOffline = getPinotConnection().execute(query);\n    Assert.assertEquals(resultBeforeOffline.getResultSet(0).getLong(0), resultAfterOffline.getResultSet(0).getLong(0));\n\n    // download and sanity-check size of offline segment(s)\n    for (int i = 0; i < offlineSegments.size(); i++) {\n      String segment = offlineSegments.get(i).asText();\n      Assert.assertTrue(\n          sendGetRequest(_controllerRequestURLBuilder.forSegmentDownload(getTableName(), segment), AUTH_HEADER).length()\n              > 200000); // download segment\n    }\n  }\n']",Segment;segment;API;HEADER;current;controller;sql;Segments;URLBuilder;execute,2.3283064365386963e-09;1.7462298274040222e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.486964702606201, -4.89159631729126, -5.340301036834717, -6.423465251922607, -5.4844560623168945, -0.02246852219104767]",0.9777818918228149
1,"['  @Test\n  public void testDefaultServerConf()\n      throws Exception {\n    String expectedHost = NetUtils.getHostAddress();\n    String expectedInstanceId = PREFIX_OF_SERVER_INSTANCE + expectedHost + ""_"" + DEFAULT_SERVER_NETTY_PORT;\n\n    verifyInstanceConfig(new PinotConfiguration(), expectedInstanceId, expectedHost, DEFAULT_SERVER_NETTY_PORT);\n  }\n']",Conf;Default;Host;Host;Server;Address;Host;Instance;DEFAULT;INSTANCE,9.313225746154785e-10;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.569714546203613, -4.887141704559326, -5.3981146812438965, -6.489644527435303, -5.516636371612549, -0.02165074832737446]",0.978581964969635
1,"['  @Test\n  public void testSetInstanceIdToHostname()\n      throws Exception {\n    String expectedHost = NetUtils.getHostnameOrAddress();\n    String expectedInstanceId = PREFIX_OF_SERVER_INSTANCE + expectedHost + ""_"" + DEFAULT_SERVER_NETTY_PORT;\n\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(SET_INSTANCE_ID_TO_HOSTNAME_KEY, true);\n\n    verifyInstanceConfig(new PinotConfiguration(properties), expectedInstanceId, expectedHost,\n        DEFAULT_SERVER_NETTY_PORT);\n  }\n']",SERVER;NETTY;properties;INSTANCE;SERVER;get;properties;Configuration;Instance;Object,1.4260876923799515e-09;1.1641532182693481e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.552342891693115, -4.914715766906738, -5.402614593505859, -6.472466945648193, -5.5165510177612305, -0.02151588350534439]",0.9787139296531677
1,"['  @Test\n  public void testCustomInstanceId()\n      throws Exception {\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(CONFIG_OF_INSTANCE_ID, CUSTOM_INSTANCE_ID);\n\n    verifyInstanceConfig(new PinotConfiguration(properties), CUSTOM_INSTANCE_ID, NetUtils.getHostAddress(),\n        DEFAULT_SERVER_NETTY_PORT);\n  }\n']",Configuration;Config;INSTANCE;put;Pinot;new;Host;USTOM;get;INSTANCE,1.3969838619232178e-09;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.551916599273682, -4.930560111999512, -5.420172691345215, -6.492618560791016, -5.526001930236816, -0.02124948613345623]",0.9789746999740601
1,"['  @Test\n  public void testCustomHost()\n      throws Exception {\n    String expectedInstanceId = PREFIX_OF_SERVER_INSTANCE + CUSTOM_HOST + ""_"" + DEFAULT_SERVER_NETTY_PORT;\n\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(KEY_OF_SERVER_NETTY_HOST, CUSTOM_HOST);\n\n    verifyInstanceConfig(new PinotConfiguration(properties), expectedInstanceId, CUSTOM_HOST,\n        DEFAULT_SERVER_NETTY_PORT);\n  }\n']",Custom;PREFIX;NETTY;properties;OST;OST;Instance;SERVER;properties;PORT,2.7939677238464355e-09;2.6775524020195007e-09;1.4260876923799515e-09;9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.559233665466309, -4.922910213470459, -5.411426067352295, -6.480081081390381, -5.516323566436768, -0.021375983953475952]",0.9788507223129272
1,"['  @Test\n  public void testCustomPort()\n      throws Exception {\n    String expectedHost = NetUtils.getHostAddress();\n    String expectedInstanceId = PREFIX_OF_SERVER_INSTANCE + expectedHost + ""_"" + CUSTOM_PORT;\n\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(KEY_OF_SERVER_NETTY_PORT, CUSTOM_PORT);\n\n    verifyInstanceConfig(new PinotConfiguration(properties), expectedInstanceId, expectedHost, CUSTOM_PORT);\n  }\n']",KEY;SERVER;Pinot;INSTANCE;Hash;Config;Instance;Instance;PREFIX;Host,7.421476766467094e-10;6.984919309616089e-10;6.83940015733242e-10;6.693881005048752e-10;6.111804395914078e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.557519435882568, -4.935619354248047, -5.412739276885986, -6.485424041748047, -5.518022537231445, -0.02126757614314556]",0.9789569973945618
1,"['  @Test\n  public void testAllCustomServerConf()\n      throws Exception {\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(CONFIG_OF_INSTANCE_ID, CUSTOM_INSTANCE_ID);\n    properties.put(KEY_OF_SERVER_NETTY_HOST, CUSTOM_HOST);\n    properties.put(KEY_OF_SERVER_NETTY_PORT, CUSTOM_PORT);\n    verifyInstanceConfig(new PinotConfiguration(properties), CUSTOM_INSTANCE_ID, CUSTOM_HOST, CUSTOM_PORT);\n  }\n']",Custom;All;OST;CONFIG;Configuration;INSTANCE;put;NETTY;properties;SERVER,1.3969838619232178e-09;1.3387762010097504e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10,5,5,"[-5.529059410095215, -4.93968391418457, -5.407537460327148, -6.466578483581543, -5.512220859527588, -0.021428842097520828]",0.9787991046905518
1,"['  @Test\n  public void testPqlQueries()\n      throws Exception {\n\n    //Selection Query\n    String pqlQuery = ""Select "" + MY_MAP_STR_FIELD_NAME + "" from "" + DEFAULT_TABLE_NAME;\n    JsonNode pinotResponse = postQuery(pqlQuery);\n    ArrayNode selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");\n    Assert.assertNotNull(selectionResults);\n    Assert.assertFalse(selectionResults.isEmpty());\n    for (int i = 0; i < selectionResults.size(); i++) {\n      String value = selectionResults.get(i).get(0).textValue();\n      Assert.assertTrue(value.indexOf(""-k1-"") > 0);\n    }\n\n    //Filter Query\n    pqlQuery = ""Select jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\') from "" + DEFAULT_TABLE_NAME\n        + ""  where jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\') = \'value-k1-0\'"";\n    pinotResponse = postQuery(pqlQuery);\n    selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");\n    Assert.assertNotNull(selectionResults);\n    Assert.assertFalse(selectionResults.isEmpty());\n    for (int i = 0; i < selectionResults.size(); i++) {\n      String value = selectionResults.get(i).get(0).textValue();\n      Assert.assertEquals(value, ""value-k1-0"");\n    }\n    pqlQuery =\n        ""Select "" + MY_MAP_STR_K1_FIELD_NAME + "" from "" + DEFAULT_TABLE_NAME + ""  where "" + MY_MAP_STR_K1_FIELD_NAME\n            + "" = \'value-k1-0\'"";\n    pinotResponse = postQuery(pqlQuery);\n    selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");\n    Assert.assertNotNull(selectionResults);\n    Assert.assertFalse(selectionResults.isEmpty());\n    for (int i = 0; i < selectionResults.size(); i++) {\n      String value = selectionResults.get(i).get(0).textValue();\n      Assert.assertEquals(value, ""value-k1-0"");\n    }\n\n    //selection order by\n    pqlQuery = ""Select jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\') from "" + DEFAULT_TABLE_NAME\n        + "" order by jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\')"";\n    pinotResponse = postQuery(pqlQuery);\n    selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");\n    Assert.assertNotNull(selectionResults);\n    Assert.assertFalse(selectionResults.isEmpty());\n    for (int i = 0; i < selectionResults.size(); i++) {\n      String value = selectionResults.get(i).get(0).textValue();\n      Assert.assertTrue(value.indexOf(""-k1-"") > 0);\n    }\n    pqlQuery =\n        ""Select "" + MY_MAP_STR_K1_FIELD_NAME + "" from "" + DEFAULT_TABLE_NAME + "" order by "" + MY_MAP_STR_K1_FIELD_NAME;\n    pinotResponse = postQuery(pqlQuery);\n    selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");\n    Assert.assertNotNull(selectionResults);\n    Assert.assertFalse(selectionResults.isEmpty());\n    for (int i = 0; i < selectionResults.size(); i++) {\n      String value = selectionResults.get(i).get(0).textValue();\n      Assert.assertTrue(value.indexOf(""-k1-"") > 0);\n    }\n\n    //Group By Query\n    pqlQuery = ""Select count(*) from "" + DEFAULT_TABLE_NAME + "" group by jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\')"";\n    pinotResponse = postQuery(pqlQuery);\n    Assert.assertNotNull(pinotResponse.get(""aggregationResults""));\n    JsonNode groupByResult = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");\n    Assert.assertNotNull(groupByResult);\n    Assert.assertTrue(groupByResult.isArray());\n    Assert.assertFalse(groupByResult.isEmpty());\n\n    pqlQuery = ""Select count(*) from "" + DEFAULT_TABLE_NAME + "" group by "" + MY_MAP_STR_K1_FIELD_NAME;\n    pinotResponse = postQuery(pqlQuery);\n    Assert.assertNotNull(pinotResponse.get(""aggregationResults""));\n    groupByResult = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");\n    Assert.assertNotNull(groupByResult);\n    Assert.assertTrue(groupByResult.isArray());\n    Assert.assertFalse(groupByResult.isEmpty());\n  }\n']",Query;text;Extract;ql;MAP;where;ql;STR;Str;DEFAULT,5.529727786779404e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.440746784210205, -5.061159133911133, -5.417989253997803, -6.449591636657715, -5.430123329162598, -0.021299434825778008]",0.9789258241653442
1,"['  @Test\n  public void testSqlQueries()\n      throws Exception {\n    //Selection Query\n    String sqlQuery = ""Select myMapStr from "" + DEFAULT_TABLE_NAME;\n    JsonNode pinotResponse = postSqlQuery(sqlQuery);\n    ArrayNode rows = (ArrayNode) pinotResponse.get(""resultTable"").get(""rows"");\n    Assert.assertNotNull(rows);\n    Assert.assertFalse(rows.isEmpty());\n    for (int i = 0; i < rows.size(); i++) {\n      String value = rows.get(i).get(0).textValue();\n      Assert.assertTrue(value.indexOf(""-k1-"") > 0);\n    }\n\n    //Filter Query\n    sqlQuery = ""Select jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\') from "" + DEFAULT_TABLE_NAME\n        + ""  where jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\') = \'value-k1-0\'"";\n    pinotResponse = postSqlQuery(sqlQuery);\n    rows = (ArrayNode) pinotResponse.get(""resultTable"").get(""rows"");\n    Assert.assertNotNull(rows);\n    Assert.assertFalse(rows.isEmpty());\n    for (int i = 0; i < rows.size(); i++) {\n      String value = rows.get(i).get(0).textValue();\n      Assert.assertEquals(value, ""value-k1-0"");\n    }\n\n    //selection order by\n    sqlQuery = ""Select jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\') from "" + DEFAULT_TABLE_NAME\n        + "" order by jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\')"";\n    pinotResponse = postSqlQuery(sqlQuery);\n    rows = (ArrayNode) pinotResponse.get(""resultTable"").get(""rows"");\n    Assert.assertNotNull(rows);\n    Assert.assertFalse(rows.isEmpty());\n    for (int i = 0; i < rows.size(); i++) {\n      String value = rows.get(i).get(0).textValue();\n      Assert.assertTrue(value.indexOf(""-k1-"") > 0);\n    }\n\n    //Group By Query\n    sqlQuery = ""Select jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\'), count(*) from "" + DEFAULT_TABLE_NAME\n        + "" group by jsonExtractScalar(myMapStr,\'$.k1\',\'STRING\')"";\n    pinotResponse = postSqlQuery(sqlQuery);\n    Assert.assertNotNull(pinotResponse.get(""resultTable""));\n    rows = (ArrayNode) pinotResponse.get(""resultTable"").get(""rows"");\n    for (int i = 0; i < rows.size(); i++) {\n      String value = rows.get(i).get(0).textValue();\n      Assert.assertTrue(value.indexOf(""-k1-"") > 0);\n    }\n  }\n']",Selection;son;Null;json;False;value;Query;order;True;DEFAULT,2.051820047199726e-09;1.0477378964424133e-09;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.437108039855957, -5.050351142883301, -5.415899276733398, -6.443851947784424, -5.437652587890625, -0.021371083334088326]",0.978855550289154
1,"['\t@Test\n\tpublic void testDefaults() {\n\t\tString[] args = new String[] { ""-a"", ""json"" };\n\t\tDumpProcessingOutputAction action = getActionFromArgs(args);\n\n\t\tassertEquals(action.compressionType,\n\t\t\t\tDumpProcessingOutputAction.COMPRESS_NONE);\n\t\tassertFalse(action.useStdOut);\n\t}\n']",ump;False;action;Type;From;Action;compression;Output;use;json,6.984919309616089e-10;5.820766091346741e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.598672389984131, -4.952851295471191, -5.3985819816589355, -6.498732566833496, -5.484889030456543, -0.02116580680012703]",0.9790565967559814
1,"['\t@Test\n\tpublic void testCompressionOutputArgumentsShort() {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""-z"", ""bz2"" };\n\t\tDumpProcessingOutputAction action = getActionFromArgs(args);\n\n\t\tassertEquals(action.compressionType,\n\t\t\t\tDumpProcessingOutputAction.COMPRESS_BZ2);\n\t}\n']",COMPRESS;Action;ump;Type;get;From;Action;action;args;Processing,1.1059455573558807e-09;9.89530235528946e-10;6.984919309616089e-10;6.402842700481415e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.580793857574463, -4.9510064125061035, -5.401719570159912, -6.493880748748779, -5.489077568054199, -0.02122252807021141]",0.979000985622406
1,"['\t@Test\n\tpublic void testCompressionOutputArgumentsLong() {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""--compression"", ""GZ"" };\n\t\tDumpProcessingOutputAction action = getActionFromArgs(args);\n\n\t\tassertEquals(action.compressionType,\n\t\t\t\tDumpProcessingOutputAction.COMPRESS_GZIP);\n\t}\n']",COMPRESS;args;Processing;Output;Output;compression;Action;Action;compression;ump,1.7462298274040222e-09;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.5850324630737305, -4.938789367675781, -5.395777225494385, -6.491254806518555, -5.493288516998291, -0.021309003233909607]",0.9789164066314697
1,"['\t@Test\n\tpublic void testStdOutOutputArgumentsShort() {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""-s"" };\n\t\tDumpProcessingOutputAction action = getActionFromArgs(args);\n\n\t\tassertTrue(action.useStdOut);\n\t}\n']",Out;Arguments;Processing;St;Action;action;action;St;args;Args,9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.604951858520508, -4.936160564422607, -5.399635314941406, -6.499682903289795, -5.498199939727783, -0.02120117098093033]",0.9790219664573669
1,"['\t@Test\n\tpublic void testStdOutOutputArgumentsLong() {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""--stdout"" };\n\t\tDumpProcessingOutputAction action = getActionFromArgs(args);\n\n\t\tassertTrue(action.useStdOut);\n\t}\n']",stdout;Output;St;get;Action;new;Args;Long;args;ump,1.1641532182693481e-09;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.612189769744873, -4.885641574859619, -5.399772644042969, -6.505166053771973, -5.51062536239624, -0.02149359881877899]",0.9787357449531555
1,"['\t@Test\n\tpublic void testInsertDumpInformation() {\n\t\tDumpProcessingOutputAction action = new JsonSerializationAction();\n\t\taction.setDumpInformation(""wikidata"", ""20150131"");\n\t\tString result = action\n\t\t\t\t.insertDumpInformation(""{PROJECT}-{DATE}-dump.json"");\n\t\tassertEquals(result, ""wikidata-20150131-dump.json"");\n\t}\n']",PROJECT;action;json;ump;son;ump;wikidata;Serialization;action;dump,1.2223608791828156e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10,5,5,"[-5.535467147827148, -5.04665994644165, -5.434670448303223, -6.50543212890625, -5.441013813018799, -0.020782683044672012]",0.9794318079948425
1,"['\t@Test\n\tpublic void testDefaults() {\n\t\tString[] args = new String[] { ""-a"", ""json"" };\n\t\tDumpProcessingOutputAction action = DumpProcessingOutputActionTest\n\t\t\t\t.getActionFromArgs(args);\n\n\t\tassertTrue(action instanceof JsonSerializationAction);\n\t\tassertFalse(action.needsSites());\n\t\tassertTrue(action.isReady());\n\t\tassertEquals(action.getActionName(), ""JsonSerializationAction"");\n\t}\n']",Defaults;Processing;Serialization;get;needs;False;action;Serialization;instanceof;Output,1.862645149230957e-09;9.89530235528946e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;2.9103830456733704e-10,5,5,"[-5.569891452789307, -5.000687599182129, -5.407893180847168, -6.494303226470947, -5.454955101013184, -0.021032046526670456]",0.9791876077651978
1,"['\t@Test\n\tpublic void testJsonOutput() throws IOException {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""-o"",\n\t\t\t\t""/path/to/output.json"" };\n\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(MockDirectoryManager.class);\n\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tJsonSerializationAction jsa = (JsonSerializationAction) config\n\t\t\t\t.getActions().get(0);\n\n\t\tItemIdValue subject1 = Datamodel.makeWikidataItemIdValue(""Q42"");\n\t\tItemIdValue subject2 = Datamodel.makeWikidataItemIdValue(""Q43"");\n\t\tMonolingualTextValue mtv1 = Datamodel.makeMonolingualTextValue(""Test1"",\n\t\t\t\t""en"");\n\t\tMonolingualTextValue mtv2 = Datamodel.makeMonolingualTextValue(""Test2"",\n\t\t\t\t""fr"");\n\n\t\tItemDocument id1 = Datamodel.makeItemDocument(subject1,\n\t\t\t\tArrays.asList(mtv1, mtv2), Arrays.asList(mtv1),\n\t\t\t\tCollections.<MonolingualTextValue> emptyList(),\n\t\t\t\tCollections.<StatementGroup> emptyList(),\n\t\t\t\tCollections.<String, SiteLink> emptyMap());\n\n\t\tItemDocument id2 = Datamodel.makeItemDocument(subject2,\n\t\t\t\tCollections.<MonolingualTextValue> emptyList(),\n\t\t\t\tArrays.asList(mtv2),\n\t\t\t\tCollections.<MonolingualTextValue> emptyList(),\n\t\t\t\tCollections.<StatementGroup> emptyList(),\n\t\t\t\tCollections.<String, SiteLink> emptyMap());\n\n\t\tPropertyDocument pd1 = Datamodel\n\t\t\t\t.makePropertyDocument(\n\t\t\t\t\t\tDatamodel.makeWikidataPropertyIdValue(""P31""),\n\t\t\t\t\t\tArrays.asList(mtv1),\n\t\t\t\t\t\tCollections.<MonolingualTextValue> emptyList(),\n\t\t\t\t\t\tArrays.asList(mtv1),\n\t\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\t\tDatamodel\n\t\t\t\t\t\t\t\t.makeDatatypeIdValue(DatatypeIdValue.DT_MONOLINGUAL_TEXT));\n\n\t\tjsa.open();\n\t\tjsa.processItemDocument(id1);\n\t\tjsa.processPropertyDocument(pd1);\n\t\tjsa.processItemDocument(id2);\n\t\tjsa.close();\n\n\t\tMockDirectoryManager mdm = new MockDirectoryManager(\n\t\t\t\tPaths.get(""/path/to/""), false);\n\n\t\tObjectMapper mapper = new DatamodelMapper(Datamodel.SITE_WIKIDATA);\n\t\tObjectReader documentReader = mapper\n\t\t\t\t.readerFor(EntityDocumentImpl.class);\n\t\tMappingIterator<EntityDocument> documentIterator = documentReader\n\t\t\t\t.readValues(mdm.getInputStreamForFile(""output.json"",\n\t\t\t\t\t\tCompressionType.NONE));\n\n\t\tList<EntityDocument> results = new ArrayList<>();\n\t\twhile (documentIterator.hasNextValue()) {\n\t\t\tEntityDocument document = documentIterator.nextValue();\n\t\t\tresults.add(document);\n\t\t}\n\t\tdocumentIterator.close();\n\n\t\tassertEquals(3, results.size());\n\t\tassertEquals(id1, results.get(0));\n\t\tassertEquals(pd1, results.get(1));\n\t\tassertEquals(id2, results.get(2));\n\n\t}\n']",Item;Item;son;Output;Document;Property;Item;make;fr;Item,5.587935447692871e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10,5,5,"[-5.476363658905029, -4.9649882316589355, -5.382763385772705, -6.4518351554870605, -5.492567539215088, -0.021685976535081863]",0.9785474538803101
1,"['\t@Test\n\tpublic void testJsonGzipOutput() throws IOException {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""-o"",\n\t\t\t\t""/path/to/output.json"", ""-z"", ""gz"" };\n\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(MockDirectoryManager.class);\n\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tJsonSerializationAction jsa = (JsonSerializationAction) config\n\t\t\t\t.getActions().get(0);\n\n\t\tItemIdValue subject1 = Datamodel.makeWikidataItemIdValue(""Q42"");\n\t\tMonolingualTextValue mtv1 = Datamodel.makeMonolingualTextValue(""Test1"",\n\t\t\t\t""en"");\n\t\tMonolingualTextValue mtv2 = Datamodel.makeMonolingualTextValue(""Test2"",\n\t\t\t\t""fr"");\n\n\t\tItemDocument id1 = Datamodel.makeItemDocument(subject1,\n\t\t\t\tArrays.asList(mtv1, mtv2), Arrays.asList(mtv1),\n\t\t\t\tCollections.<MonolingualTextValue> emptyList(),\n\t\t\t\tCollections.<StatementGroup> emptyList(),\n\t\t\t\tCollections.<String, SiteLink> emptyMap());\n\n\t\tjsa.open();\n\t\tjsa.processItemDocument(id1);\n\t\tjsa.close();\n\n\t\tMockDirectoryManager mdm = new MockDirectoryManager(\n\t\t\t\tPaths.get(""/path/to/""), false);\n\n\t\tObjectMapper mapper = new DatamodelMapper(Datamodel.SITE_WIKIDATA);\n\t\tObjectReader documentReader = mapper.readerFor(EntityDocumentImpl.class);\n\t\tMappingIterator<EntityDocument> documentIterator = documentReader\n\t\t\t\t.readValues(mdm.getInputStreamForFile(""output.json.gz"",\n\t\t\t\t\t\tCompressionType.GZIP));\n\n\t\tList<EntityDocument> results = new ArrayList<>();\n\t\twhile (documentIterator.hasNextValue()) {\n\t\t\tEntityDocument document = documentIterator.nextValue();\n\t\t\tresults.add(document);\n\t\t}\n\t\tdocumentIterator.close();\n\n\t\tassertEquals(1, results.size());\n\t\tassertEquals(id1, results.get(0));\n\t}\n']",ock;reader;Reader;Site;Reader;Manager;Mock;Object;Link;subject,2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.604264050722122e-10;9.313225746154785e-10;7.566995918750763e-10,5,5,"[-5.49035120010376, -4.887147903442383, -5.3483567237854, -6.43876314163208, -5.491861820220947, -0.022392638027668]",0.9778562188148499
1,"['\t@Test\n\tpublic void testJsonBz2Output() throws IOException {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""-o"", ""output.json"", ""-z"",\n\t\t\t\t""bz2"" };\n\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(MockDirectoryManager.class);\n\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tJsonSerializationAction jsa = (JsonSerializationAction) config\n\t\t\t\t.getActions().get(0);\n\n\t\tItemIdValue subject1 = Datamodel.makeWikidataItemIdValue(""Q42"");\n\t\tMonolingualTextValue mtv1 = Datamodel.makeMonolingualTextValue(""Test1"",\n\t\t\t\t""en"");\n\t\tMonolingualTextValue mtv2 = Datamodel.makeMonolingualTextValue(""Test2"",\n\t\t\t\t""fr"");\n\n\t\tItemDocument id1 = Datamodel.makeItemDocument(subject1,\n\t\t\t\tArrays.asList(mtv1, mtv2), Arrays.asList(mtv1),\n\t\t\t\tCollections.<MonolingualTextValue> emptyList(),\n\t\t\t\tCollections.<StatementGroup> emptyList(),\n\t\t\t\tCollections.<String, SiteLink> emptyMap());\n\n\t\tjsa.open();\n\t\tjsa.processItemDocument(id1);\n\t\tjsa.close();\n\n\t\tMockDirectoryManager mdm = new MockDirectoryManager(Paths.get("".""),\n\t\t\t\tfalse);\n\n\t\tObjectMapper mapper = new DatamodelMapper(Datamodel.SITE_WIKIDATA);\n\t\tObjectReader documentReader = mapper.readerFor(EntityDocumentImpl.class);\n\t\tMappingIterator<EntityDocument> documentIterator = documentReader\n\t\t\t\t.readValues(mdm.getInputStreamForFile(""output.json.bz2"",\n\t\t\t\t\t\tCompressionType.BZ2));\n\n\t\tList<EntityDocument> results = new ArrayList<>();\n\t\twhile (documentIterator.hasNextValue()) {\n\t\t\tEntityDocument document = documentIterator.nextValue();\n\t\t\tresults.add(document);\n\t\t}\n\t\tdocumentIterator.close();\n\n\t\tassertEquals(1, results.size());\n\t\tassertEquals(id1, results.get(0));\n\t}\n']",Directory;Mock;Input;ock;class;Stream;Directory;Collections;empty;while,5.587935447692871e-09;1.862645149230957e-09;1.7462298274040222e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.482041358947754, -4.911037921905518, -5.340882301330566, -6.42786979675293, -5.488420486450195, -0.0223147664219141]",0.9779324531555176
1,"['\t@Test\n\tpublic void testDefaults() {\n\t\tString[] args = new String[] { ""-a"", ""rdf"", ""--rdftasks"", ""entities"" };\n\t\tDumpProcessingOutputAction action = DumpProcessingOutputActionTest\n\t\t\t\t.getActionFromArgs(args);\n\n\t\tassertTrue(action instanceof RdfSerializationAction);\n\t\tassertTrue(action.needsSites());\n\t\tassertTrue(action.isReady());\n\t\tassertEquals(action.getActionName(), ""RdfSerializationAction"");\n\t}\n']",rdftasks;df;Processing;Serialization;Output;Output;Defaults;needs;df;Processing,5.238689482212067e-09;3.4924596548080444e-09;2.6775524020195007e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.54818868637085, -5.031144618988037, -5.441842555999756, -6.517401218414307, -5.448049068450928, -0.020753376185894012]",0.9794604778289795
1,"['\t@Test\n\tpublic void testDefaultsNoTasks() {\n\t\tString[] args = new String[] { ""-a"", ""rdf"", ""--stdout"" };\n\t\tDumpProcessingOutputAction action = DumpProcessingOutputActionTest\n\t\t\t\t.getActionFromArgs(args);\n\t\taction.open();\n\t\taction.close();\n\n\t\tassertTrue(action instanceof RdfSerializationAction);\n\t\tassertFalse(action.needsSites());\n\t\tassertFalse(action.isReady());\n\t}\n']",Output;asks;Ready;False;Processing;action;rd;Output;args;open,5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.5549468994140625, -5.028916358947754, -5.433714866638184, -6.520328521728516, -5.461373329162598, -0.020714960992336273]",0.9794981479644775
1,"['\t@Test\n\tpublic void testSerializerSetup() {\n\t\tString[] args = new String[] { ""-a"", ""rdf"", ""--stdout"", ""--rdftasks"",\n\t\t\t\t""properties,labels"" };\n\t\tRdfSerializationAction action = (RdfSerializationAction) DumpProcessingOutputActionTest\n\t\t\t\t.getActionFromArgs(args);\n\t\taction.open(); // creates and initializes serializer (prints to stdout)\n\t\taction.close(); // just to test that this causes no exceptions\n\n\t\tassertTrue(action.needsSites());\n\t\tassertEquals(action.serializer.getTasks(),\n\t\t\t\tRdfSerializer.TASK_PROPERTIES | RdfSerializer.TASK_LABELS);\n\n\t}\n']",args;close;df;prints;asks;LABELS;args;ump;Processing;serializer,1.0477378964424133e-09;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.53718900680542, -5.0518364906311035, -5.429349899291992, -6.499513149261475, -5.4589128494262695, -0.020696161314845085]",0.9795165061950684
1,"['\t@Test\n\tpublic void testDefaultLoggingConfig() throws ParseException, IOException {\n\t\tString[] args = new String[] {};\n\t\tClient client = new Client(mockDpc, args);\n\t\tclient.performActions(); // print help\n\n\t\tassertEquals(Level.INFO, Client.consoleAppender.getThreshold());\n\t\tassertEquals(Level.WARN, Client.errorAppender.getThreshold());\n\t}\n']",Client;new;Config;Exception;Equals;print;Appender;Level;INFO;help,5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.587367057800293, -4.9707207679748535, -5.402885437011719, -6.490607261657715, -5.492706298828125, -0.02104068361222744]",0.9791791439056396
1,"['\t@Test\n\tpublic void testQuietStdOutLoggingConfig() throws ParseException,\n\t\t\tIOException {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""-s"" };\n\t\tnew Client(mockDpc, args);\n\n\t\tassertEquals(Level.OFF, Client.consoleAppender.getThreshold());\n\t\tassertEquals(Level.WARN, Client.errorAppender.getThreshold());\n\t}\n']",json;pc;Config;Equals;Quiet;Appender;new;Client;Threshold;Out,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;1.8917489796876907e-10,5,5,"[-5.595353603363037, -4.964008808135986, -5.39746618270874, -6.482000350952148, -5.491682052612305, -0.02110079675912857]",0.9791203737258911
1,"['\t@Test\n\tpublic void testQuietLoggingConfig() throws ParseException, IOException {\n\t\tString[] TEST_ARGS = new String[] { ""-a"", ""json"", ""-q"" };\n\t\tnew Client(mockDpc, TEST_ARGS);\n\n\t\tassertEquals(Level.OFF, Client.consoleAppender.getThreshold());\n\t\tassertEquals(Level.WARN, Client.errorAppender.getThreshold());\n\t}\n']",json;TEST;ARGS;Appender;pc;Level;Threshold;Equals;IOException;get,2.3283064365386963e-09;1.862645149230957e-09;1.8044374883174896e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.3096723705530167e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.587528228759766, -4.969521999359131, -5.406252384185791, -6.480352878570557, -5.480802536010742, -0.0210995115339756]",0.9791215062141418
1,"['\t@Test\n\tpublic void testJsonOutput() {\n\t\tString[] args = { ""-a"", ""json"", ""-o"", ""output/wikidata.json"" };\n\t\tClientConfiguration configuration = new ClientConfiguration(args);\n\t\tDumpProcessingAction action = configuration.actions.get(0);\n\t\taction.open();\n\t\taction.close();\n\t\tassertTrue(action\n\t\t\t\t.getReport()\n\t\t\t\t.matches(\n\t\t\t\t\t\t""Finished serialization of \\\\d+ EntityDocuments in file output/wikidata.json""));\n\t}\n']",in;wikidata;Documents;Client;son;matches;actions;new;Configuration;file,6.402842700481415e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.553842544555664, -5.010013580322266, -5.409386157989502, -6.492180347442627, -5.473490238189697, -0.02094741351902485]",0.9792704582214355
1,"['\t@Test\n\tpublic void testRdfOutput() {\n\t\tString[] args = { ""-a"", ""rdf"", ""-o"", ""output/wikidata.rdf"" };\n\t\tClientConfiguration configuration = new ClientConfiguration(args);\n\t\tDumpProcessingAction action = configuration.actions.get(0);\n\t\taction.open();\n\t\taction.close();\n\t\tassertTrue(action\n\t\t\t\t.getReport()\n\t\t\t\t.matches(\n\t\t\t\t\t\t""Finished serialization of \\\\d+ RDF triples in file output/wikidata.rdf""));\n\t}\n']",df;Report;True;rd;serialization;configuration;output;in;actions;wikidata,4.6566128730773926e-09;2.561137080192566e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.555988311767578, -4.964836120605469, -5.403182506561279, -6.494964599609375, -5.479725360870361, -0.021251237019896507]",0.9789729714393616
1,"['\t@Test\n\tpublic void testSitesAction() throws ParseException, IOException {\n\t\tString[] args = new String[] { ""-a"", ""rdf"", ""--rdftasks"",\n\t\t\t\t""items,labels"" };\n\t\tClient client = new Client(mockDpc, args);\n\t\tclient.performActions();\n\n\t\tMockito.verify(mockDpc).processDump(Mockito.<MwDumpFile> any());\n\t\tMockito.verify(mockDpc).getSitesInformation();\n\t}\n']",rdftasks;ockito;any;ockito;ump;pc;Action;args;Exception;args,1.3387762010097504e-09;6.111804395914078e-10;5.238689482212067e-10;3.637978807091713e-10;3.41970007866621e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.57010555267334, -4.988427639007568, -5.378288745880127, -6.465373516082764, -5.468037128448486, -0.021242134273052216]",0.9789819121360779
1,"['\t@Test\n\tpublic void testSetDumpsDirectoryException() throws ParseException,\n\t\t\tIOException {\n\t\tMockito.doThrow(new IOException(""Mock exception for testing.""))\n\t\t\t\t.when(mockDpc).setDownloadDirectory(Mockito.anyString());\n\n\t\tString[] args = new String[] { ""-a"", ""rdf"", ""--rdftasks"",\n\t\t\t\t""items,labels"", ""--dumps"", ""/tmp/"" };\n\t\tClient client = new Client(mockDpc, args);\n\t\tclient.performActions(); // print help\n\n\t\tMockito.verify(mockDpc, Mockito.never()).processDump(\n\t\t\t\tMockito.<MwDumpFile> any());\n\t\tMockito.verify(mockDpc, Mockito.never()).getSitesInformation();\n\t}\n']",testing;Set;process;rdftasks;Exception;any;print;Download;ockito;Directory,1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.022187441587448e-10;9.022187441587448e-10;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.573535442352295, -4.926605701446533, -5.37476921081543, -6.4531731605529785, -5.478250026702881, -0.021665329113602638]",0.9785677790641785
1,"['\t@Test\n\tpublic void testSitesActionException() throws ParseException, IOException {\n\t\tMockito.doThrow(new IOException()).when(mockDpc).getSitesInformation();\n\n\t\tString[] args = new String[] { ""-a"", ""rdf"", ""--rdftasks"",\n\t\t\t\t""items,labels"" };\n\t\tClient client = new Client(mockDpc, args);\n\t\tclient.performActions(); // print help\n\n\t\tMockito.verify(mockDpc, Mockito.never()).processDump(\n\t\t\t\tMockito.<MwDumpFile> any());\n\t\tMockito.verify(mockDpc).getSitesInformation();\n\t}\n']",ites;ctions;pc;print;ockito;ockito;do;args;IOException;labels,2.7939677238464355e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.257323548197746e-10;6.111804395914078e-10;6.111804395914078e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.570513725280762, -4.972805976867676, -5.373732089996338, -6.456773281097412, -5.4690260887146, -0.02138100191950798]",0.9788458347320557
1,"['\t@Test\n\tpublic void testNonSitesAction() throws ParseException, IOException {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""-q"" };\n\t\tClient client = new Client(mockDpc, args);\n\t\tclient.performActions(); // print help\n\n\t\tMockito.verify(mockDpc).processDump(Mockito.<MwDumpFile> any());\n\t\tMockito.verify(mockDpc, Mockito.never()).getSitesInformation();\n\t}\n']",Action;Parse;ump;never;File;ites;ockito;ockito;pc;ock,1.280568540096283e-09;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.579247951507568, -5.0060834884643555, -5.387343883514404, -6.461463928222656, -5.456327438354492, -0.02109939604997635]",0.9791216254234314
1,"['\t@Test\n\tpublic void testWriteReport() throws IOException {\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(MockDirectoryManager.class);\n\n\t\tMockDirectoryManager mdm = new MockDirectoryManager(\n\t\t\t\tPaths.get(""/output/""), false);\n\n\t\tString[] args = {""-n"", ""-a"", ""rdf"", ""--rdftasks"", ""aliases"", ""-o"",\n\t\t\t\t""/output/wikidata.rdf"", ""-r"", ""/output/report.txt"" };\n\n\t\tClient client = new Client(mockDpc, args);\n\t\tDumpProcessingAction action = client.clientConfiguration.actions.get(0);\n\t\taction.open();\n\t\taction.close();\n\t\tclient.writeReport();\n\t\tassertTrue(IOUtils\n\t\t\t\t.toString(\n\t\t\t\t\t\tmdm.getInputStreamForFile(""report.txt"",\n\t\t\t\t\t\t\t\tCompressionType.NONE))\n\t\t\t\t.matches(\n\t\t\t\t\t\t""RdfSerializationAction: Finished serialization of \\\\d+ RDF triples in file /output/wikidata.rdf""\n\t\t\t\t\t\t\t\t+ System.lineSeparator()));\n\n\t}\n']",Mock;Directory;Manager;ock;ock;IOException;Separator;Processing;ali;output,1.862645149230957e-09;1.1350493878126144e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.540642738342285, -5.016385555267334, -5.415462017059326, -6.466796398162842, -5.475434303283691, -0.02096048928797245]",0.9792576432228088
1,"['\t@Test\n\tpublic void testInsertDumpInformation() throws IOException {\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(MockDirectoryManager.class);\n\n\t\tMockDirectoryManager mdm = new MockDirectoryManager(\n\t\t\t\tPaths.get(""/output/""), false);\n\n\t\tString[] args = { ""-n"", ""-a"", ""rdf"", ""-o"", ""/output/wikidata.rdf"",\n\t\t\t\t""--rdftasks"", ""aliases"", ""-r"", ""/output/report-{DATE}.txt"" };\n\n\t\tClient client = new Client(mockDpc, args);\n\t\tclient.performActions();\n\n\t\tassertTrue(mdm.hasFile(""/output/report-""\n\t\t\t\t+ client.clientConfiguration.getDateStamp() + "".txt""));\n\t}\n']",IOException;ump;rdftasks;args;Directory;Manager;Information;txt;File;dm,1.4551915228366852e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.554421901702881, -4.963384628295898, -5.395900726318359, -6.472846508026123, -5.480719566345215, -0.02133164182305336]",0.9788941740989685
1,"['\t@Test\n\tpublic void testNonExistingLocalDump() {\n\t\tString[] args = { ""-f"", ""./asfjl.json"" };\n\t\tClient client = new Client(mockDpc, args);\n\t\tclient.performActions();\n\n\t\tMockito.verify(mockDpc, Mockito.never()).processDump(\n\t\t\t\tMockito.<MwDumpFile> any());\n\t}\n']",any;jl;verify;Client;ump;pc;json;pc;File;args,9.89530235528946e-10;9.313225746154785e-10;6.693881005048752e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10,5,5,"[-5.5966267585754395, -4.92909049987793, -5.3777995109558105, -6.4706807136535645, -5.469662666320801, -0.02155275084078312]",0.9786777496337891
1,"['\t@Test\n\tpublic void testReadConfigFile() throws IOException {\n\t\tString configFile = ""src/test/resources/testConf.ini"";\n\t\tString[] args = new String[] { ""-c"", configFile };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tassertTrue(config.getOfflineMode());\n\t\tassertTrue(config.isQuiet());\n\t\tassertEquals(""dumps/wikidata/"", config.getDumpDirectoryLocation());\n\t\tassertEquals(Collections.<String> emptySet(),\n\t\t\t\tconfig.getFilterSiteKeys());\n\t\tassertEquals(Collections.singleton(Datamodel\n\t\t\t\t\t\t.makeWikidataPropertyIdValue(""P31"")),\n\t\t\t\tconfig.getFilterProperties());\n\t\tSet<String> langFilters = new HashSet<>();\n\t\tlangFilters.add(""fr"");\n\t\tlangFilters.add(""zh"");\n\t\tassertEquals(langFilters, config.getFilterLanguages());\n\n\t\tassertEquals(2, config.getActions().size());\n\t\tassertTrue(config.getActions().get(0) instanceof RdfSerializationAction);\n\t\tassertTrue(config.getActions().get(1) instanceof JsonSerializationAction);\n\t\tRdfSerializationAction rdfAction = (RdfSerializationAction) config\n\t\t\t\t.getActions().get(0);\n\t\tJsonSerializationAction jsonAction = (JsonSerializationAction) config\n\t\t\t\t.getActions().get(1);\n\n\t\tassertTrue(rdfAction.useStdOut);\n\t\tassertEquals(DumpProcessingOutputAction.COMPRESS_GZIP,\n\t\t\t\trdfAction.compressionType);\n\t\tassertEquals(""/tmp/wikidata-items.nt"", rdfAction.outputDestination);\n\t\tassertEquals(RdfSerializer.TASK_ITEMS | RdfSerializer.TASK_STATEMENTS\n\t\t\t\t| RdfSerializer.TASK_TERMS, rdfAction.tasks);\n\n\t\tassertFalse(jsonAction.useStdOut);\n\t\tassertEquals(DumpProcessingOutputAction.COMPRESS_BZ2,\n\t\t\t\tjsonAction.compressionType);\n\t\tassertEquals(""/tmp/wikidata-dump.json"", jsonAction.outputDestination);\n\t}\n']",TERMS;src;Config;IOException;df;File;Collections;Directory;Datamodel;df,1.3387762010097504e-09;1.280568540096283e-09;1.0477378964424133e-09;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.419744968414307, -5.073332786560059, -5.396693706512451, -6.45228910446167, -5.414559364318848, -0.021478548645973206]",0.978750467300415
1,"['\t@Test\n\tpublic void testReadConfigFile2() throws IOException {\n\t\tString configFile = ""src/test/resources/testConf2.ini"";\n\t\tString[] args = new String[] { ""-c"", configFile };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tassertFalse(config.getOfflineMode());\n\t\tassertFalse(config.isQuiet());\n\t\tassertEquals(""testfile.json.gz"", config.getInputDumpLocation());\n\t\tassertEquals(""report.txt"", config.getReportFileName());\n\t\t// remaining content was already tested above\n\t}\n']",Read;IOException;content;above;Equals;args;file;Config;Mode;resources,1.1641532182693481e-09;8.731149137020111e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10,5,5,"[-5.553439140319824, -5.001276016235352, -5.4178643226623535, -6.496611595153809, -5.489845275878906, -0.020893946290016174]",0.9793229103088379
1,"['\t@Test\n\tpublic void testDefaultArguments() {\n\t\tString[] args = new String[] {};\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertFalse(config.getOfflineMode());\n\t\tassertEquals(null, config.getDumpDirectoryLocation());\n\t\tassertEquals(null, config.getFilterLanguages());\n\t\tassertEquals(null, config.getFilterSiteKeys());\n\t\tassertEquals(null, config.getFilterProperties());\n\t\tassertEquals(null, config.getReportFileName());\n\t\tassertEquals(null, config.getInputDumpLocation());\n\t\tassertEquals(null, config.getLocalDumpFile());\n\t\tassertFalse(config.isQuiet());\n\t}\n']",Site;Report;Location;Configuration;get;new;Keys;new;Equals;False,6.402842700481415e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.571702003479004, -4.999825477600098, -5.3901777267456055, -6.45918083190918, -5.503886699676514, -0.020959321409463882]",0.97925865650177
1,"['\t@Test\n\tpublic void testUnknownAction() {\n\t\tString[] args = new String[] { ""-a"", ""notImplemented"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertEquals(0, config.getActions().size());\n\t}\n']",new;Client;Equals;Unknown;Action;config;new;get;Client;config,6.984919309616089e-10;5.529727786779404e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;5.820766091346741e-11;5.820766091346741e-11;-8.731149137020111e-11;-1.1641532182693481e-10,5,5,"[-5.5863189697265625, -4.91372537612915, -5.399808406829834, -6.498066425323486, -5.499556064605713, -0.021434327587485313]",0.978793740272522
1,"['\t@Test\n\tpublic void testUnknownArguments() {\n\t\tString[] args = new String[] { ""--unknown"", ""-foo"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertFalse(config.getOfflineMode());\n\t\tassertEquals(null, config.getDumpDirectoryLocation());\n\t\tassertFalse(config.isQuiet());\n\t}\n']",args;Arguments;config;Offline;Client;Quiet;Configuration;config;Configuration;get,9.313225746154785e-10;6.83940015733242e-10;6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.595935821533203, -4.9337310791015625, -5.386026859283447, -6.4775238037109375, -5.513610363006592, -0.02128671482205391]",0.9789382219314575
1,"['\t@Test\n\tpublic void testDumpLocationArgumentsShort() {\n\t\tString[] args = new String[] { ""-d"", ""dumps/wikidata/"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertEquals(""dumps/wikidata/"", config.getDumpDirectoryLocation());\n\t}\n']",wikidata;umps;new;Client;Location;config;Arguments;config;umps;get,9.89530235528946e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.418811734765768e-10;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.574029445648193, -4.926560878753662, -5.404977321624756, -6.507728099822998, -5.495611667633057, -0.021363966166973114]",0.9788626432418823
1,"['\t@Test\n\tpublic void testDumpLocationArgumentsLong() {\n\t\tString[] args = new String[] { ""--dumps"", ""dumps/wikidata/"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertEquals(""dumps/wikidata/"", config.getDumpDirectoryLocation());\n\t}\n']",umps;wikidata;ump;Arguments;Client;wikidata;ump;Configuration;get;Directory,7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.570352077484131, -4.929196834564209, -5.408919811248779, -6.509747505187988, -5.496332168579102, -0.021334558725357056]",0.9788914322853088
1,"['\t@Test\n\tpublic void testOfflineModeArgumentsShort() {\n\t\tString[] args = new String[] { ""-n"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertTrue(config.getOfflineMode());\n\t}\n']",Configuration;Offline;args;get;Configuration;Mode;Mode;config;Arguments;args,7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10;2.9103830456733704e-11,5,5,"[-5.609840393066406, -4.868896007537842, -5.385958671569824, -6.491527557373047, -5.519096374511719, -0.021682944148778915]",0.9785503149032593
1,"['\t@Test\n\tpublic void testOfflineModeArgumentsLong() {\n\t\tString[] args = new String[] { ""--offline"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertTrue(config.getOfflineMode());\n\t}\n']",Offline;args;new;Mode;True;Long;Configuration;Client;Mode;args,8.731149137020111e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.608902931213379, -4.884912967681885, -5.391406536102295, -6.493405342102051, -5.519277095794678, -0.021532801911234856]",0.9786974787712097
1,"['\t@Test\n\tpublic void testStdOutOutputArgumentsShort() {\n\t\tString[] args = new String[] { ""-a"", ""json"", ""-s"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertTrue(config.isQuiet());\n\t}\n']",St;Output;Client;json;Client;new;args;Out;args;Configuration,1.8044374883174896e-09;1.7462298274040222e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.511093720793724e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.612438678741455, -4.88093376159668, -5.389923572540283, -6.48951530456543, -5.516393661499023, -0.02157503552734852]",0.9786560535430908
1,"['\t@Test\n\tpublic void testStdOutOutputArgumentsLong() {\n\t\tString[] args = new String[] { ""--action"", ""json"", ""--stdout"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertTrue(config.isQuiet());\n\t}\n']",Output;St;Arguments;Out;action;Configuration;args;new;config;Client,1.1059455573558807e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;-1.4551915228366852e-10;-1.7462298274040222e-10,5,5,"[-5.618481159210205, -4.8816633224487305, -5.384634971618652, -6.484739303588867, -5.515947341918945, -0.02158086746931076]",0.9786503314971924
1,"['\t@Test\n\tpublic void testQuietArgumentsShort() {\n\t\tString[] args = new String[] { ""-q"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertTrue(config.isQuiet());\n\t}\n']",Arguments;Short;args;args;config;new;Configuration;Client;Client;config,8.440110832452774e-10;7.275957614183426e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.6193447411060333e-10,5,5,"[-5.614572048187256, -4.866844177246094, -5.389944553375244, -6.495552062988281, -5.5187530517578125, -0.021657980978488922]",0.9785747528076172
1,"['\t@Test\n\tpublic void testQuietArgumentsLong() {\n\t\tString[] args = new String[] { ""--quiet"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertTrue(config.isQuiet());\n\t}\n']",Arguments;quiet;new;Configuration;args;new;config;Quiet;args;config,1.1641532182693481e-09;9.89530235528946e-10;8.294591680169106e-10;6.984919309616089e-10;6.402842700481415e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;0.0;-1.7462298274040222e-10,5,5,"[-5.6209306716918945, -4.866928577423096, -5.386873245239258, -6.491861343383789, -5.521965980529785, -0.0216405987739563]",0.9785917401313782
1,"['\t@Test\n\tpublic void testReportArgumentsShort() {\n\t\tString[] args = new String[] { ""-r"", ""output/report.txt"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertEquals(""output/report.txt"", config.getReportFileName());\n\t}\n']",Report;args;txt;Name;File;txt;output;get;Configuration;Client,5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11,5,5,"[-5.574680328369141, -4.901008605957031, -5.386055946350098, -6.489356994628906, -5.487424373626709, -0.02170359157025814]",0.97853022813797
1,"['\t@Test\n\tpublic void testReportArgumentsLong() {\n\t\tString[] args = new String[] { ""--report"", ""output/report.txt"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\t\tassertEquals(""output/report.txt"", config.getReportFileName());\n\t}\n']",Arguments;output;Equals;new;config;Name;args;Configuration;Report;report,2.0081643015146255e-09;7.8580342233181e-10;5.820766091346741e-10;4.3655745685100555e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.578553676605225, -4.900810241699219, -5.393898963928223, -6.492589473724365, -5.492447376251221, -0.02162729948759079]",0.978604793548584
1,"['\t@Test\n\tpublic void testLanguageFilterArguments() {\n\t\tString[] args = new String[] { ""--fLang"", ""en,de"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tSet<String> langFilters = new HashSet<>();\n\t\tlangFilters.add(""en"");\n\t\tlangFilters.add(""de"");\n\n\t\tassertEquals(langFilters, config.getFilterLanguages());\n\t}\n']",Filters;Configuration;ang;Filters;lang;de;lang;lang;new;Filters,5.529727786779404e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.584571838378906, -4.956207752227783, -5.393956661224365, -6.470033168792725, -5.514342308044434, -0.021138496696949005]",0.9790833592414856
1,"['\t@Test\n\tpublic void testLanguageFilterArgumentsEmpty() {\n\t\tString[] args = new String[] { ""--fLang"", ""-"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tSet<String> langFilters = new HashSet<>();\n\n\t\tassertEquals(langFilters, config.getFilterLanguages());\n\t}\n']",Language;Filter;Configuration;new;Filter;Client;Set;args;Arguments;Configuration,1.862645149230957e-09;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;1.7462298274040222e-10,5,5,"[-5.590207576751709, -4.910557270050049, -5.374057769775391, -6.470775127410889, -5.520608901977539, -0.021519267931580544]",0.9787105917930603
1,"['\t@Test\n\tpublic void testSiteLinkFilterArguments() {\n\t\tString[] args = new String[] { ""--fSite"", ""fawiki,dewiki"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tSet<String> siteFilters = new HashSet<>();\n\t\tsiteFilters.add(""fawiki"");\n\t\tsiteFilters.add(""dewiki"");\n\n\t\tassertEquals(siteFilters, config.getFilterSiteKeys());\n\t}\n']",add;Client;Keys;new;args;get;Set;config;new;Filters,6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.571558952331543, -4.969458103179932, -5.41355037689209, -6.488033771514893, -5.51281213760376, -0.020982202142477036]",0.9792364835739136
1,"['\t@Test\n\tpublic void testSiteLinkFilterArgumentsEmpty() {\n\t\tString[] args = new String[] { ""--fSite"", ""-"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tSet<String> siteFilters = new HashSet<>();\n\n\t\tassertEquals(siteFilters, config.getFilterSiteKeys());\n\t}\n']",Site;site;Site;Client;Keys;Filters;Arguments;Filter;Filter;Hash,1.6007106751203537e-09;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.592936992645264, -4.909134387969971, -5.378291606903076, -6.474316596984863, -5.521820068359375, -0.02148904837667942]",0.9787402153015137
1,"['\t@Test\n\tpublic void testPropertyFilterArguments() {\n\t\tString[] args = new String[] { ""--fProp"", ""P100,P31"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tSet<PropertyIdValue> propFilters = new HashSet<>();\n\t\tpropFilters.add(Datamodel.makeWikidataPropertyIdValue(""P31""));\n\t\tpropFilters.add(Datamodel.makeWikidataPropertyIdValue(""P100""));\n\n\t\tassertEquals(propFilters, config.getFilterProperties());\n\t}\n']",Filter;args;args;Client;Filter;config;Datamodel;Properties;new;Wikidata,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.570132255554199, -4.974555969238281, -5.397846221923828, -6.474024772644043, -5.496239185333252, -0.021114451810717583]",0.9791069030761719
1,"['\t@Test\n\tpublic void testPropertyFilterArgumentsEmpty() {\n\t\tString[] args = new String[] { ""--fProp"", ""-"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tSet<PropertyIdValue> propFilters = new HashSet<>();\n\n\t\tassertEquals(propFilters, config.getFilterProperties());\n\t}\n']",Configuration;Prop;Filter;Equals;Empty;config;Hash;Set;prop;Filters,1.2223608791828156e-09;9.313225746154785e-10;5.820766091346741e-10;3.637978807091713e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.4551915228366852e-10,5,5,"[-5.606435775756836, -4.890892028808594, -5.363687038421631, -6.4624247550964355, -5.524326801300049, -0.02165471389889717]",0.9785779714584351
1,"['\t@Test\n\tpublic void testLocalDumpFileLong() {\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(MockDirectoryManager.class);\n\t\tString[] args = new String[] { ""--input"", ""dumptest.json"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tMwDumpFile df = config.getLocalDumpFile();\n\n\t\tassertEquals(""dumptest.json"", config.getInputDumpLocation());\n\t\tassertTrue(df instanceof MwLocalDumpFile);\n\t\tMwLocalDumpFile ldf = (MwLocalDumpFile) df;\n\n\t\tassertEquals(Paths.get(""dumptest.json"").toAbsolutePath(), ldf.getPath());\n\t}\n']",Input;Factory;instanceof;Local;ump;Equals;df;df;Local;df,4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.5270915031433105, -5.04401159286499, -5.444936752319336, -6.498843669891357, -5.470067024230957, -0.02067175693809986]",0.9795404672622681
1,"['\t@Test\n\tpublic void testLocalDumpFileShort() {\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(MockDirectoryManager.class);\n\t\tString[] args = new String[] { ""-i"", ""dumptest.json"" };\n\t\tClientConfiguration config = new ClientConfiguration(args);\n\n\t\tMwDumpFile df = config.getLocalDumpFile();\n\n\t\tassertEquals(""dumptest.json"", config.getInputDumpLocation());\n\t\tassertTrue(df instanceof MwLocalDumpFile);\n\t\tMwLocalDumpFile ldf = (MwLocalDumpFile) df;\n\n\t\tassertEquals(Paths.get(""dumptest.json"").toAbsolutePath(), ldf.getPath());\n\t}\n']",Manager;Manager;args;instanceof;umptest;df;True;config;df;Equals,5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.637978807091713e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.5206217765808105, -5.0458269119262695, -5.450010299682617, -6.500094413757324, -5.470705032348633, -0.02065926231443882]",0.979552686214447
1,"['\t@Test\n\tpublic void testIteration() {\n\t\tList<String> list1 = new ArrayList<String>();\n\t\tlist1.add(""1"");\n\t\tlist1.add(""2"");\n\t\tList<String> list2 = new ArrayList<String>();\n\t\tlist2.add(""3"");\n\t\tList<String> list3 = new ArrayList<String>();\n\t\tList<String> list4 = new ArrayList<String>();\n\t\tlist4.add(""4"");\n\n\t\tList<List<String>> listOfLists = new ArrayList<>();\n\t\tlistOfLists.add(list1);\n\t\tlistOfLists.add(list2);\n\t\tlistOfLists.add(list3);\n\t\tlistOfLists.add(list4);\n\n\t\tNestedIterator<String> nestedIterator = new NestedIterator<>(\n\t\t\t\tlistOfLists);\n\n\t\tassertTrue(nestedIterator.hasNext());\n\t\tassertEquals(""1"", nestedIterator.next());\n\t\tassertTrue(nestedIterator.hasNext());\n\t\tassertEquals(""2"", nestedIterator.next());\n\t\tassertTrue(nestedIterator.hasNext());\n\t\tassertEquals(""3"", nestedIterator.next());\n\t\tassertTrue(nestedIterator.hasNext());\n\t\tassertEquals(""4"", nestedIterator.next());\n\t\tassertEquals(false, nestedIterator.hasNext());\n\t}\n']",list;Array;nested;ists;nested;Array;next;nested;ested;has,5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.536116123199463, -5.0314531326293945, -5.439082622528076, -6.474979400634766, -5.485710620880127, -0.02071472816169262]",0.9794983267784119
1,"['\t@Test(expected = UnsupportedOperationException.class)\n\tpublic void removeNotSupported() {\n\t\tNestedIterator<String> nestedIterator = new NestedIterator<>(\n\t\t\t\tCollections.singletonList(Collections.singletonList(""Test"")));\n\t\tnestedIterator.remove();\n\t}\n']",Operation;singleton;List;remove;Exception;Supported;Iterator;Iterator;new;List,1.3387762010097504e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;3.2014213502407074e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.584526538848877, -4.87792444229126, -5.408313751220703, -6.52368688583374, -5.46735954284668, -0.021773578599095345]",0.9784618616104126
1,['\t@Test(expected = NoSuchElementException.class)\n\tpublic void iterateBeyondInnerList() {\n\t\tNestedIterator<String> nestedIterator = new NestedIterator<>(\n\t\t\t\tCollections.singletonList(Collections.<String> emptyList()));\n\t\tnestedIterator.next();\n\t}\n'],Beyond;ested;Element;Iterator;Collections;empty;ested;Exception;List;Iterator,2.0954757928848267e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;4.94765117764473e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.588990688323975, -4.914187908172607, -5.397019863128662, -6.534214973449707, -5.448390007019043, -0.021598251536488533]",0.9786333441734314
1,['\t@Test(expected = NoSuchElementException.class)\n\tpublic void iterateBeyondOuterList() {\n\t\tNestedIterator<String> nestedIterator = new NestedIterator<>(\n\t\t\t\tCollections.<List<String>> emptyList());\n\t\tnestedIterator.next();\n\t}\n'],ested;Iterator;Iterator;new;empty;Iterator;Iterator;ested;class;Beyond,2.0954757928848267e-09;6.402842700481415e-10;5.820766091346741e-10;1.1641532182693481e-10;0.0;0.0;-1.4551915228366852e-11;-5.820766091346741e-11;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.587105751037598, -4.965685844421387, -5.400683879852295, -6.540826797485352, -5.422352313995361, -0.02131822146475315]",0.9789074063301086
1,"['\t@Test\n\tpublic void createDirectoryManagerString() throws IOException {\n\t\tPath path = Paths.get(System.getProperty(""user.dir""));\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(DirectoryManagerImpl.class);\n\t\tDirectoryManager dm = DirectoryManagerFactory.createDirectoryManager(\n\t\t\t\tSystem.getProperty(""user.dir""), true);\n\t\tassertTrue(dm instanceof DirectoryManagerImpl);\n\t\tDirectoryManagerImpl dmi = (DirectoryManagerImpl) dm;\n\t\tassertTrue(dmi.readOnly);\n\t\tassertEquals(path, dmi.directory);\n\t}\n']",IOException;create;Manager;path;True;dm;get;Directory;Only;Manager,1.8335413187742233e-09;9.022187441587448e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.521859169006348, -5.037154197692871, -5.456043243408203, -6.523608684539795, -5.464202404022217, -0.020677361637353897]",0.979534924030304
1,"['\t@Test\n\tpublic void createDefaultDirectoryManagerPath() throws IOException {\n\t\tPath path = Paths.get(System.getProperty(""user.dir""));\n\t\tDirectoryManager dm = DirectoryManagerFactory.createDirectoryManager(\n\t\t\t\tpath, true);\n\t\tassertTrue(dm instanceof DirectoryManagerImpl);\n\t\tDirectoryManagerImpl dmi = (DirectoryManagerImpl) dm;\n\t\tassertTrue(dmi.readOnly);\n\t\tassertEquals(path, dmi.directory);\n\t}\n']",dir;user;create;Directory;True;Manager;Directory;Path;IOException;path,1.280568540096283e-09;7.566995918750763e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.5380048751831055, -4.998773574829102, -5.432809829711914, -6.512847423553467, -5.486163139343262, -0.02089616470038891]",0.9793206453323364
1,"['\t@Test(expected = RuntimeException.class)\n\tpublic void createDirectoryManagerNoConstructor() throws IOException {\n\t\tDirectoryManagerFactory\n\t\t\t\t.setDirectoryManagerClass(TestDirectoryManager.class);\n\t\tDirectoryManagerFactory.createDirectoryManager(""/"", true);\n\t}\n']",Directory;expected;Manager;create;Factory;Factory;Class;Runtime;Directory;Directory,9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.5728583335876465, -4.905148506164551, -5.441291809082031, -6.542919158935547, -5.50911283493042, -0.021256139501929283]",0.9789682030677795
1,"['\t@Test(expected = IOException.class)\n\tpublic void createDirectoryManagerIoException() throws IOException {\n\t\tDirectoryManagerFactory.createDirectoryManager(\n\t\t\t\t""/nonexisting-directory/123456789/hopefully"", true);\n\t}\n']",IOException;Directory;create;Directory;Directory;Factory;Manager;Exception;class;Manager,1.6298145055770874e-09;6.984919309616089e-10;5.820766091346741e-10;2.9103830456733704e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.565032482147217, -4.8887152671813965, -5.4050421714782715, -6.542952537536621, -5.479811668395996, -0.02169845812022686]",0.9785352349281311
1,"['\t@Test\n\tpublic void testSetUserAgent() {\n\t\tWebResourceFetcherImpl.setUserAgent(""My user agent"");\n\t\tassertEquals(""My user agent"", WebResourceFetcherImpl.getUserAgent());\n\t}\n']",etcher;Equals;My;My;Set;Web;user;User;get;Impl,1.979060471057892e-09;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.540083885192871, -4.937751293182373, -5.414846420288086, -6.51980447769165, -5.465359687805176, -0.02148076519370079]",0.9787483215332031
1,"['\t@Test\n\tpublic void testSetProxy() {\n\t\tProxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\n\t\t\t\t""test.adress"", 8080));\n\t\tWebResourceFetcherImpl.setProxy(proxy);\n\t\tassertTrue(WebResourceFetcherImpl.hasProxy());\n\t\tassertEquals(proxy, WebResourceFetcherImpl.getProxy());\n\t}\n']",HTTP;Proxy;Resource;Proxy;etcher;Inet;etcher;Resource;proxy;Proxy,1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.557766914367676, -5.009927749633789, -5.431278705596924, -6.506938934326172, -5.453962802886963, -0.020895346999168396]",0.9793213605880737
1,"['\t@Test\n\tpublic void testToString() throws IOException {\n\t\tassertEquals(Paths.get(System.getProperty(""user.dir"")).toString(),\n\t\t\t\tdm.toString());\n\t}\n']",dm;IOException;to;get;System;to;user;Property;Equals;get,1.862645149230957e-09;1.5133991837501526e-09;9.313225746154785e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.4551915228366852e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10,5,5,"[-5.5981059074401855, -4.889729022979736, -5.447724342346191, -6.532719612121582, -5.537901401519775, -0.021146316081285477]",0.9790756702423096
1,"['\t@Test(expected = IOException.class)\n\tpublic void MissingSubdirectoryReadOnly() throws IOException {\n\t\tdm.getSubdirectoryManager(""1 2 3 not a subdirectory that exists in the test system, hopefully"");\n\t}\n']",class;system;dm;Manager;subdirectory;Read;expected;the;exists;Subdirectory,2.9103830456733704e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-5.564239978790283, -4.842499732971191, -5.392317295074463, -6.519757270812988, -5.464991569519043, -0.022222666069865227]",0.9780223369598389
1,"['\t@Test(expected = IOException.class)\n\tpublic void OutputStreamReadOnly() throws IOException {\n\t\tdm.getOutputStreamForFile(""file.txt"");\n\t}\n']",expected;txt;IOException;Stream;dm;IOException;Stream;get;Output;Only,2.0023435354232788e-08;1.210719347000122e-08;5.122274160385132e-09;4.190951585769653e-09;3.725290298461914e-09;3.4924596548080444e-09;2.7939677238464355e-09;2.7939677238464355e-09;1.862645149230957e-09;0.0,5,5,"[-5.5743913650512695, -4.869224548339844, -5.387789249420166, -6.502676963806152, -5.489445209503174, -0.02191307209432125]",0.9783252477645874
1,"['\t@Test(expected = IOException.class)\n\tpublic void NoCreateFileStringReadOnly() throws IOException {\n\t\tdm.createFile(""new-test-file.txt"", ""new contents"");\n\t}\n']",Read;File;create;File;No;txt;file;IOException;IOException;new,1.3969838619232178e-09;1.280568540096283e-09;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;1.1641532182693481e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-3.4924596548080444e-10,5,5,"[-5.591148853302002, -4.889357566833496, -5.416399955749512, -6.536325454711914, -5.482893466949463, -0.02153746783733368]",0.9786928296089172
1,"['\t@Test(expected = IOException.class)\n\tpublic void NoCreateFileInputStreamReadOnly() throws IOException {\n\t\tByteArrayInputStream in = new ByteArrayInputStream(\n\t\t\t\t""new contents"".getBytes(StandardCharsets.UTF_8));\n\t\tdm.createFile(""new-test-file.txt"", in);\n\t}\n']",Only;IOException;Read;Array;Stream;Standard;Create;Byte;File;Input,1.6298145055770874e-09;1.280568540096283e-09;1.076841726899147e-09;9.313225746154785e-10;9.167706593871117e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.5879669189453125, -4.89191198348999, -5.423640251159668, -6.513635635375977, -5.533997535705566, -0.021319622173905373]",0.9789060354232788
1,"['\t@Test(expected = IOException.class)\n\tpublic void NoCreateFileAtomicInputStreamReadOnly() throws IOException {\n\t\tByteArrayInputStream in = new ByteArrayInputStream(\n\t\t\t\t""new contents"".getBytes(StandardCharsets.UTF_8));\n\t\tdm.createFileAtomic(""new-test-file.txt"", in);\n\t}\n']",expected;Input;Read;omic;txt;No;new;IOException;omic;dm,2.2992026060819626e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.596736907958984, -4.872735023498535, -5.415311336517334, -6.509090900421143, -5.544181823730469, -0.021438410505652428]",0.978789746761322
1,"['\t@Test\n\tpublic void getCompressionInputStreamNone() throws IOException {\n\t\tByteArrayInputStream in = new ByteArrayInputStream(\n\t\t\t\t""new contents"".getBytes(StandardCharsets.UTF_8));\n\t\tassertEquals(in, dm.getCompressorInputStream(in, CompressionType.NONE));\n\t}\n']",new;Array;IOException;new;Compressor;Input;in;Stream;Compression;Type,9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.546984672546387, -4.93131160736084, -5.418221950531006, -6.515689373016357, -5.509058475494385, -0.02130666933953762]",0.9789188504219055
1,"['\t@Test\n\tpublic void getCompressionInputStreamGzip() throws IOException {\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\tOutputStreamWriter ow = new OutputStreamWriter(\n\t\t\t\tnew GzipCompressorOutputStream(out), StandardCharsets.UTF_8);\n\t\tow.write(""Test data"");\n\t\tow.close();\n\n\t\tByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\n\t\tInputStream cin = dm.getCompressorInputStream(in, CompressionType.GZIP);\n\n\t\tassertEquals(""Test data"",\n\t\t\t\tnew BufferedReader(new InputStreamReader(cin)).readLine());\n\t}\n']",write;Array;zip;Buffered;Array;ow;Compression;Stream;new;Byte,9.313225746154785e-10;6.111804395914078e-10;5.238689482212067e-10;5.093170329928398e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.521902084350586, -5.026111602783203, -5.442495822906494, -6.502804756164551, -5.480293273925781, -0.02077275887131691]",0.9794415235519409
1,"['\t@Test\n\tpublic void getCompressionInputStreamBz2() throws IOException {\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\tOutputStreamWriter ow = new OutputStreamWriter(\n\t\t\t\tnew BZip2CompressorOutputStream(out), StandardCharsets.UTF_8);\n\t\tow.write(""Test data"");\n\t\tow.close();\n\n\t\tByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\n\t\tInputStream cin = dm.getCompressorInputStream(in, CompressionType.BZ2);\n\n\t\tassertEquals(""Test data"",\n\t\t\t\tnew BufferedReader(new InputStreamReader(cin)).readLine());\n\t}\n']",Compressor;Compressor;UTF;Output;Array;Byte;Array;Output;get;cin,7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.512809753417969, -5.022831439971924, -5.449656963348389, -6.513819694519043, -5.484820365905762, -0.020764585584402084]",0.9794495105743408
1,"['\t@Test\n\tpublic void basicTimerOperation() {\n\t\tTimer timer = new Timer(""Test timer"", Timer.RECORD_ALL);\n\t\tassertEquals(timer.getName(), ""Test timer"");\n\t\tlong threadId = timer.getThreadId();\n\n\t\tassertEquals(timer.getAvgCpuTime(), 0);\n\t\tassertEquals(timer.getAvgWallTime(), 0);\n\n\t\tThreadMXBean tmxb = ManagementFactory.getThreadMXBean();\n\t\tif (!tmxb.isThreadCpuTimeEnabled()) {\n\t\t\ttmxb.setThreadCpuTimeEnabled(true);\n\t\t}\n\n\t\tlong cpuTime1 = tmxb.getThreadCpuTime(threadId);\n\t\tlong wallTime1 = System.nanoTime();\n\t\ttimer.start();\n\t\tdoDummyComputation();\n\t\tassertTrue(""Timer should be running"", timer.isRunning());\n\t\ttimer.stop();\n\t\tcpuTime1 = tmxb.getThreadCpuTime(threadId) - cpuTime1;\n\t\twallTime1 = System.nanoTime() - wallTime1;\n\t\tassertTrue(\n\t\t\t\t""Unrealistic CPU time: "" + timer.getTotalCpuTime()\n\t\t\t\t\t\t+ "" should be closer to "" + cpuTime1,\n\t\t\t\t(cpuTime1 - TimerTest.TIME_TOLERANCE) <= timer\n\t\t\t\t\t\t.getTotalCpuTime()\n\t\t\t\t\t\t&& timer.getTotalCpuTime() <= cpuTime1);\n\t\tassertTrue(\n\t\t\t\t""Unrealistic wall time: "" + timer.getTotalWallTime()\n\t\t\t\t\t\t+ "" should be closer to "" + wallTime1,\n\t\t\t\t(wallTime1 - 2 * TimerTest.TIME_TOLERANCE) <= timer\n\t\t\t\t\t\t.getTotalWallTime()\n\t\t\t\t\t\t&& timer.getTotalWallTime() <= wallTime1);\n\n\t\tlong cpuTime2 = tmxb.getThreadCpuTime(threadId);\n\t\tlong wallTime2 = System.nanoTime();\n\t\ttimer.start();\n\t\tdoDummyComputation();\n\t\ttimer.stop();\n\t\tcpuTime1 += tmxb.getThreadCpuTime(threadId) - cpuTime2;\n\t\twallTime1 += System.nanoTime() - wallTime2;\n\t\tassertTrue(\n\t\t\t\t""Unrealistic total CPU time: "" + timer.getTotalCpuTime()\n\t\t\t\t\t\t+ "" should be closer to "" + cpuTime1,\n\t\t\t\t(cpuTime1 - 2 * TimerTest.TIME_TOLERANCE) <= timer\n\t\t\t\t\t\t.getTotalCpuTime()\n\t\t\t\t\t\t&& timer.getTotalCpuTime() <= cpuTime1);\n\t\tassertTrue(\n\t\t\t\t""Unrealistic total wall time: "" + timer.getTotalWallTime()\n\t\t\t\t\t\t+ "" should be closer to "" + wallTime1,\n\t\t\t\t(wallTime1 - 4 * TimerTest.TIME_TOLERANCE) <= timer\n\t\t\t\t\t\t.getTotalWallTime()\n\t\t\t\t\t\t&& timer.getTotalWallTime() <= wallTime1);\n\n\t\tassertEquals(timer.getTotalCpuTime() / 2, timer.getAvgCpuTime());\n\t\tassertEquals(timer.getTotalWallTime() / 2, timer.getAvgWallTime());\n\n\t\ttimer.reset();\n\t\tassertEquals(timer.getTotalCpuTime(), 0);\n\t\tassertEquals(timer.getTotalWallTime(), 0);\n\t\tassertFalse(""Timer should not be running"", timer.isRunning());\n\t}\n']",basic;Total;Timer;get;Timer;ano;pu;Total;timer;timer,5.587935447692871e-09;4.190951585769653e-09;2.5029294192790985e-09;2.3283064365386963e-09;1.9208528101444244e-09;1.862645149230957e-09;1.6007106751203537e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09,5,5,"[-5.471278667449951, -4.935840606689453, -5.314408779144287, -6.453917503356934, -5.509164810180664, -0.02217847667634487]",0.9780656695365906
1,"['\t@Test\n\tpublic void namedTimers() {\n\t\tTimer timerA1 = Timer.getNamedTimer(""test timer"");\n\t\tTimer timerA2 = Timer.getNamedTimer(""test timer"");\n\t\tTimer timerA3 = Timer.getNamedTimer(""test timer"", Timer.RECORD_ALL);\n\t\tTimer timerA4 = Timer.getNamedTimer(""test timer"", Timer.RECORD_ALL,\n\t\t\t\ttimerA1.getThreadId());\n\t\tTimer timerCpu = Timer\n\t\t\t\t.getNamedTimer(""test timer"", Timer.RECORD_CPUTIME);\n\t\tTimer timerWall = Timer.getNamedTimer(""test timer"",\n\t\t\t\tTimer.RECORD_WALLTIME);\n\t\tTimer timerNoThread = Timer.getNamedTimer(""test timer"",\n\t\t\t\tTimer.RECORD_ALL, 0);\n\t\tTimer timerNone = Timer.getNamedTimer(""test timer none"",\n\t\t\t\tTimer.RECORD_NONE);\n\t\tTimer timerB = Timer.getNamedTimer(""test timer 2"");\n\n\t\t// Testing Timer equality:\n\t\tassertEquals(timerA1, timerA2);\n\t\tassertEquals(timerA1, timerA3);\n\t\tassertEquals(timerA1, timerA4);\n\t\tassertNotEquals(timerA1, timerCpu);\n\t\tassertNotEquals(timerA1, timerWall);\n\t\tassertNotEquals(timerA1, timerNoThread);\n\t\tassertNotEquals(timerA1, timerB);\n\t\tassertNotEquals(timerA1, this);\n\n\t\t// Testing start/stop operation:\n\t\tTimer.startNamedTimer(""test timer"");\n\t\tTimer.startNamedTimer(""test timer"", Timer.RECORD_CPUTIME);\n\t\tTimer.startNamedTimer(""test timer"", Timer.RECORD_WALLTIME);\n\t\tTimer.startNamedTimer(""test timer"", Timer.RECORD_ALL, 0);\n\t\tdoDummyComputation();\n\t\tTimer.stopNamedTimer(""test timer"");\n\t\tTimer.stopNamedTimer(""test timer"", Timer.RECORD_CPUTIME);\n\t\tTimer.stopNamedTimer(""test timer"", Timer.RECORD_WALLTIME);\n\t\tTimer.stopNamedTimer(""test timer"", Timer.RECORD_ALL, 0);\n\n\t\tassertTrue(""Named timer should have measured a non-zero CPU time."",\n\t\t\t\ttimerA1.getTotalCpuTime() > 0);\n\t\tassertTrue(""Named timer should have measured a non-zero wall time."",\n\t\t\t\ttimerA1.getTotalWallTime() > 0);\n\t\tassertTrue(\n\t\t\t\t""Timer for CPU time should have measured a non-zero CPU time."",\n\t\t\t\ttimerCpu.getTotalCpuTime() > 0);\n\t\tassertTrue(""Timer for CPU time should not have measured a wall time."",\n\t\t\t\ttimerCpu.getTotalWallTime() == 0);\n\t\tassertTrue(""Timer for wall time should not have measured a CPU time."",\n\t\t\t\ttimerWall.getTotalCpuTime() == 0);\n\t\tassertTrue(\n\t\t\t\t""Timer for wall time should have measured a non-zero wall time."",\n\t\t\t\ttimerWall.getTotalWallTime() > 0);\n\t\tassertTrue(\n\t\t\t\t""Timer without threadId should not have measured a CPU time."",\n\t\t\t\ttimerNoThread.getTotalCpuTime() == 0);\n\t\tassertTrue(\n\t\t\t\t""Timer without threadId should have measured a non-zero wall time."",\n\t\t\t\ttimerNoThread.getTotalWallTime() > 0);\n\n\t\t// Testing total timer creation:\n\t\tTimer totalTimer1 = Timer.getNamedTotalTimer(""test timer"");\n\t\t// There should be four *distinct* timers of that name\n\t\tassertEquals(totalTimer1.getTotalCpuTime(), timerA1.getTotalCpuTime()\n\t\t\t\t+ timerCpu.getTotalCpuTime() + timerWall.getTotalCpuTime()\n\t\t\t\t+ timerNoThread.getTotalCpuTime());\n\t\tassertEquals(totalTimer1.getTotalWallTime(), timerA1.getTotalWallTime()\n\t\t\t\t+ timerCpu.getTotalWallTime() + timerWall.getTotalWallTime()\n\t\t\t\t+ timerNoThread.getTotalWallTime());\n\n\t\tTimer totalTimer2 = Timer.getNamedTotalTimer(""test timer 2"");\n\t\t// There should be just one timer of that name\n\t\tassertEquals(totalTimer2, timerB);\n\n\t\t// Testing toString operation\n\t\tassertTrue(timerA1.toString().startsWith(\n\t\t\t\t""Time for test timer (thread "" + timerA1.getThreadId()\n\t\t\t\t\t\t+ "") for 1 run(s) CPU/Wall/CPU avg/Wall avg (ms):""));\n\t\tassertTrue(timerCpu.toString().startsWith(\n\t\t\t\t""Time for test timer (thread "" + timerCpu.getThreadId()\n\t\t\t\t\t\t+ "") for 1 run(s) CPU/CPU avg (ms):""));\n\t\tassertTrue(timerWall.toString().startsWith(\n\t\t\t\t""Time for test timer (thread "" + timerWall.getThreadId()\n\t\t\t\t\t\t+ "") for 1 run(s) Wall/Wall avg (ms):""));\n\t\tassertTrue(totalTimer1.toString().startsWith(\n\t\t\t\t""Time for test timer (over 4 threads)""));\n\t\tassertTrue(timerNoThread.toString().startsWith(\n\t\t\t\t""Time for test timer for 1 run(s)""));\n\t\tassertEquals(timerNone.toString(), ""Timer test timer none (thread ""\n\t\t\t\t+ timerNone.getThreadId()\n\t\t\t\t+ "") recorded 0 run(s); no times taken"");\n\t\ttimerA1.start();\n\t\tassertTrue(timerA1.toString().endsWith(""[timer running!]""));\n\n\t\t// Testing reset operation:\n\t\tTimer.resetNamedTimer(""test timer"");\n\t\tTimer.resetNamedTimer(""test timer"", Timer.RECORD_CPUTIME);\n\t\tTimer.resetNamedTimer(""test timer"", Timer.RECORD_WALLTIME);\n\t\tTimer.resetNamedTimer(""test timer"", Timer.RECORD_ALL, 0);\n\n\t\tassertTrue(""Named timer should have reset CPU time."",\n\t\t\t\ttimerA1.getTotalCpuTime() == 0);\n\t\tassertTrue(""Named timer should have reset wall time."",\n\t\t\t\ttimerA1.getTotalWallTime() == 0);\n\t\tassertTrue(""Timer for CPU time should have reset CPU time."",\n\t\t\t\ttimerCpu.getTotalCpuTime() == 0);\n\t\tassertTrue(""Timer for CPU time should have reset wall time."",\n\t\t\t\ttimerCpu.getTotalWallTime() == 0);\n\t\tassertTrue(""Timer for wall time should have reset CPU time."",\n\t\t\t\ttimerWall.getTotalCpuTime() == 0);\n\t\tassertTrue(""Timer for wall time should have reset wall time."",\n\t\t\t\ttimerWall.getTotalWallTime() == 0);\n\t\tassertTrue(""Timer without threadId should have reset CPU time."",\n\t\t\t\ttimerNoThread.getTotalCpuTime() == 0);\n\t\tassertTrue(""Timer without threadId should have reset wall time."",\n\t\t\t\ttimerNoThread.getTotalWallTime() == 0);\n\n\t\t// Testing unregistered timer stop (does not create one):\n\t\tassertEquals(Timer.stopNamedTimer(""unknown name""), -1);\n\t}\n']",amed;amed;operation;Timer;equality;Timer;CPUTIME;pu;Testing;Timer,7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.480549335479736, -5.083854675292969, -5.434604167938232, -6.479544639587402, -5.407888889312744, -0.02095978893339634]",0.9792584776878357
1,"['\t@Test\n\tpublic void timerStopReturnValues() {\n\t\tTimer timer1 = new Timer(""stop test timer"", Timer.RECORD_ALL);\n\t\tTimer timer2 = new Timer(""stop test timer wall"", Timer.RECORD_WALLTIME);\n\n\t\ttimer1.start();\n\t\ttimer2.start();\n\t\tdoDummyComputation();\n\t\tlong cpuTime1 = timer1.stop();\n\t\tlong cpuTime2 = timer2.stop();\n\n\t\tassertEquals(cpuTime1, timer1.getTotalCpuTime());\n\t\tassertEquals(cpuTime2, -1);\n\n\t\tlong cpuTime3 = timer1.stop();\n\t\tassertEquals(cpuTime3, -1);\n\t}\n']",Computation;wall;Timer;RECORD;Equals;stop;start;timer;Equals;Time,1.6880221664905548e-09;8.149072527885437e-10;7.566995918750763e-10;6.111804395914078e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.551833152770996, -4.97787618637085, -5.382020950317383, -6.500804901123047, -5.511075973510742, -0.021133361384272575]",0.9790884852409363
1,"['\t@Test\n\tpublic void enableCpuTimeTaking() {\n\t\tThreadMXBean tmxb = ManagementFactory.getThreadMXBean();\n\t\ttmxb.setThreadCpuTimeEnabled(false);\n\n\t\tTimer timer = new Timer(""Test timer"", Timer.RECORD_ALL);\n\t\ttimer.start();\n\t\tdoDummyComputation();\n\t\ttimer.stop();\n\n\t\tassertTrue(""Timer should have measured a CPU time."",\n\t\t\t\ttimer.getTotalCpuTime() > 0);\n\t}\n']",RECORD;tmxb;Management;do;stop;false;xb;Timer;True;Total,1.2223608791828156e-09;6.111804395914078e-10;6.111804395914078e-10;5.238689482212067e-10;4.0745362639427185e-10;3.92901711165905e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.550085067749023, -4.9894609451293945, -5.416144371032715, -6.509465217590332, -5.493042469024658, -0.020963523536920547]",0.9792546629905701
1,"['\t@Test\n\tpublic void testWriteQuantityValue() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tQuantityValueConverter valueConverter = new QuantityValueConverter(\n\t\t\t\tthis.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);\n\n\t\tQuantityValue value = this.objectFactory.getQuantityValue(\n\t\t\t\tnew BigDecimal(100), new BigDecimal(100), new BigDecimal(100));\n\t\tPropertyIdValue propertyIdValue = objectFactory.getPropertyIdValue(\n\t\t\t\t""P1081"", ""http://www.wikidata.org/entity/"");\n\t\tValue valueURI = valueConverter.getRdfValue(value, propertyIdValue,\n\t\t\t\tfalse);\n\t\tvalueConverter.writeValue(value, (Resource) valueURI);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""QuantityValue.rdf"")));\n\t}\n']",DFHandler;df;Write;get;Quantity;Decimal;Decimal;From;Converter;IOException,3.434251993894577e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.0477378964424133e-09;9.313225746154785e-10;9.167706593871117e-10;8.731149137020111e-10,5,5,"[-5.51356315612793, -5.0052876472473145, -5.4333930015563965, -6.5019707679748535, -5.449742794036865, -0.021121805533766747]",0.979099690914154
1,"['\t@Test\n\tpublic void testWriteUnboundedQuantityValue() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tQuantityValueConverter valueConverter = new QuantityValueConverter(\n\t\t\t\tthis.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);\n\n\t\tQuantityValue value = this.objectFactory.getQuantityValue(new BigDecimal(100));\n\t\tPropertyIdValue propertyIdValue = objectFactory.getPropertyIdValue(\n\t\t\t\t""P1081"", ""http://www.wikidata.org/entity/"");\n\t\tValue valueURI = valueConverter.getRdfValue(value, propertyIdValue,\n\t\t\t\tfalse);\n\t\tvalueConverter.writeValue(value, (Resource) valueURI);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""UnboundedQuantityValue.rdf"")));\n\t}\n']",Property;Decimal;property;wikidata;Register;df;object;get;Quantity;Helpers,1.280568540096283e-09;1.0040821507573128e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.516505241394043, -4.985159873962402, -5.4410600662231445, -6.5126495361328125, -5.438324451446533, -0.02124890312552452]",0.978975236415863
1,"['\t@Test\n\tpublic void testWriteMonolingualTextValue() throws RDFHandlerException {\n\t\tMonolingualTextValueConverter valueConverter = new MonolingualTextValueConverter(\n\t\t\t\tthis.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);\n\n\t\tMonolingualTextValue value = this.objectFactory\n\t\t\t\t.getMonolingualTextValue(""ä¸\xadå\x8d\x8eäººæ°\x91å\x85±å\x92\x8cå\x9b½"", ""zh-hans"");\n\t\tPropertyIdValue propertyIdValue = this.objectFactory\n\t\t\t\t.getPropertyIdValue(""P1448"", ""http://www.wikidata.org/entity/"");\n\t\tValue valueURI = valueConverter.getRdfValue(value, propertyIdValue,\n\t\t\t\ttrue);\n\t\tthis.rdfWriter.finish();\n\n\t\tassertEquals(valueURI.toString(), ""\\""ä¸\xadå\x8d\x8eäººæ°\x91å\x85±å\x92\x8cå\x9b½\\""@zh-Hans"");\n\t}\n']",df;rd;DFHandler;ÂŃÃ¥;rd;Ã¦;Â±;Text;Value;finish,2.3283064365386963e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;5.384208634495735e-10,5,5,"[-5.478331089019775, -5.096243858337402, -5.489177227020264, -6.538745403289795, -5.393195629119873, -0.020632287487387657]",0.9795790910720825
1,"['\t@Test\n\tpublic void testWriteGlobeCoordinatesValue() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tGlobeCoordinatesValueConverter valueConverter = new GlobeCoordinatesValueConverter(\n\t\t\t\tthis.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);\n\n\t\tGlobeCoordinatesValue value = this.objectFactory\n\t\t\t\t.getGlobeCoordinatesValue(51.033333333333, 13.733333333333,\n\t\t\t\t\t\t(GlobeCoordinatesValue.PREC_DECI_DEGREE),\n\t\t\t\t\t\t""http://www.wikidata.org/entity/Q2"");\n\t\tPropertyIdValue propertyIdValue = objectFactory.getPropertyIdValue(\n\t\t\t\t""P625"", ""http://www.wikidata.org/entity/"");\n\t\tValue valueURI = valueConverter.getRdfValue(value, propertyIdValue,\n\t\t\t\tfalse);\n\t\tvalueConverter.writeValue(value, (Resource) valueURI);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""GlobeCoordinatesValue.rdf"")));\n\t}\n']",Equals;Helpers;Model;DFHandler;model;Coordinates;Resource;IOException;Value;Coordinates,2.735760062932968e-09;2.2118911147117615e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.4260876923799515e-09;1.280568540096283e-09;1.280568540096283e-09;1.2223608791828156e-09;1.0477378964424133e-09,5,5,"[-5.504513740539551, -5.032589435577393, -5.422991752624512, -6.491789817810059, -5.4355621337890625, -0.021099861711263657]",0.979121208190918
1,"['\t@Test\n\tpublic void testWriteTimeValue() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tTimeValueConverter valueConverter = new TimeValueConverter(\n\t\t\t\tthis.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);\n\n\t\tTimeValue value = objectFactory.getTimeValue(2008, (byte) 1, (byte) 1,\n\t\t\t\t(byte) 0, (byte) 0, (byte) 0, (byte) 9, 0, 0, 0,\n\t\t\t\t""http://www.wikidata.org/entity/Q1985727"");\n\t\tPropertyIdValue propertyIdValue = objectFactory.getPropertyIdValue(\n\t\t\t\t""P569"", ""http://www.wikidata.org/entity/"");\n\t\tValue valueURI = valueConverter.getRdfValue(value, propertyIdValue,\n\t\t\t\tfalse);\n\t\tvalueConverter.writeValue(value, (Resource) valueURI);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""TimeValue.rdf"")));\n\t}\n']",DFHandler;parse;parse;write;df;Resource;Model;df;model;Buffer,1.5133991837501526e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;5.820766091346741e-10,5,5,"[-5.510682106018066, -5.014277458190918, -5.414165019989014, -6.491734504699707, -5.459872722625732, -0.021130559965968132]",0.9790911078453064
1,"['\t@Test\n\tpublic void testSerialization() throws RDFParseException,\n\t\t\tRDFHandlerException, IOException {\n\t\tthis.rdfSerializer.open();\n\t\tthis.rdfSerializer.processItemDocument(this.objectFactory\n\t\t\t\t.createItemDocument());\n\t\tthis.rdfSerializer.close();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""completeRDFDocument.rdf"")), model);\n\t}\n']",RDFParse;rd;Exception;Serialization;df;Helpers;Document;rd;close;this,8.614733815193176e-09;3.259629011154175e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.57160684466362e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.505762577056885, -5.040215015411377, -5.4684038162231445, -6.550090789794922, -5.435642242431641, -0.020755944773554802]",0.9794579744338989
1,"['\t@Test\n\tpublic void testGetWikidataPropertyRegister() {\n\t\tassertEquals(""P1921"", this.propertyRegister.uriPatternPropertyId);\n\t}\n']",Wikidata;this;Property;Get;Equals;Pattern;Register;property;Register;Property,4.889443516731262e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-5.57290506362915, -4.895706653594971, -5.4412031173706055, -6.56707239151001, -5.475768566131592, -0.021433277055621147]",0.9787948131561279
1,"['\t@Test\n\tpublic void testFetchPropertyUriPattern() {\n\t\tPropertyIdValue pid = this.dataObjectFactory.getPropertyIdValue(""P434"",\n\t\t\t\tthis.siteIri);\n\t\tassertEquals(""http://musicbrainz.org/$1/artist"",\n\t\t\t\tthis.propertyRegister.getPropertyUriPattern(pid));\n\t\t// Check twice to test that the cached retrieval works too\n\t\tassertEquals(""http://musicbrainz.org/$1/artist"",\n\t\t\t\tthis.propertyRegister.getPropertyUriPattern(pid));\n\t\tassertEquals(50,\n\t\t\t\tthis.propertyRegister.smallestUnfetchedPropertyIdNumber);\n\t\tassertTrue(this.propertyRegister.datatypes.keySet().contains(""P434""));\n\t}\n']",datatypes;Factory;artist;Unfetched;that;ri;cached;Number;works;Property,1.5133991837501526e-09;9.604264050722122e-10;8.731149137020111e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.477665424346924, -5.110190391540527, -5.453463077545166, -6.510113716125488, -5.390688419342041, -0.02075652964413166]",0.9794573783874512
1,"['\t@Test\n\tpublic void testGetPropertyType() {\n\t\tassertEquals(DatatypeIdValue.DT_STRING,\n\t\t\t\tthis.propertyRegister.getPropertyType(dataObjectFactory\n\t\t\t\t\t\t.getPropertyIdValue(""P434"", this.siteIri)));\n\t\t// Check twice to test that the cached retrieval works too\n\t\tassertEquals(DatatypeIdValue.DT_STRING,\n\t\t\t\tthis.propertyRegister.getPropertyType(dataObjectFactory\n\t\t\t\t\t\t.getPropertyIdValue(""P434"", this.siteIri)));\n\t\tassertEquals(50,\n\t\t\t\tthis.propertyRegister.smallestUnfetchedPropertyIdNumber);\n\t\tassertTrue(this.propertyRegister.datatypes.keySet().contains(""P434""));\n\t}\n']",the;Datatype;smallest;Factory;contains;Datatype;Unfetched;data;too;Object,2.421438694000244e-08;4.423782229423523e-09;3.026798367500305e-09;2.561137080192566e-09;2.444721758365631e-09;2.2118911147117615e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.7171259969472885e-09,5,5,"[-5.463693141937256, -5.0475754737854, -5.4313645362854, -6.510880947113037, -5.3829827308654785, -0.021347396075725555]",0.9788788557052612
1,"['\t@Test\n\tpublic void testGetMissingPropertyType() {\n\t\tassertNull(this.propertyRegister.getPropertyType(dataObjectFactory\n\t\t\t\t.getPropertyIdValue(""P10"", this.siteIri)));\n\t\t// Check twice to test fast failing on retry\n\t\tassertNull(this.propertyRegister.getPropertyType(dataObjectFactory\n\t\t\t\t.getPropertyIdValue(""P10"", this.siteIri)));\n\t}\n']",failing;to;Register;Type;site;twice;retry;Factory;data;get,1.6880221664905548e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10,5,5,"[-5.500156402587891, -5.046701908111572, -5.482179164886475, -6.5859551429748535, -5.420915126800537, -0.020692192018032074]",0.9795204401016235
1,"['\t@Test\n\tpublic void testSetPropertyTypeFromEntityIdValue() {\n\t\tassertEquals(this.propertyRegister.setPropertyTypeFromEntityIdValue(\n\t\t\t\tthis.dataObjectFactory\n\t\t\t\t\t\t.getPropertyIdValue(""P1001"", this.siteIri),\n\t\t\t\tthis.dataObjectFactory.getItemIdValue(""Q20"", this.siteIri)),\n\t\t\t\tDatatypeIdValue.DT_ITEM);\n\t}\n']",data;DT;Factory;Type;Property;data;this;property;site;Entity,1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.5133991837501526e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.498946666717529, -5.033207416534424, -5.474422454833984, -6.557599067687988, -5.425207614898682, -0.020840710029006004]",0.9793749451637268
1,"['\t@Test\n\tpublic void testSetPropertyTypeFromStringValue() {\n\t\tassertEquals(this.propertyRegister.setPropertyTypeFromStringValue(\n\t\t\t\tdataObjectFactory.getPropertyIdValue(""P434"", this.siteIri),\n\t\t\t\tdataObjectFactory\n\t\t\t\t\t\t.getStringValue(""http://musicbrainz.org/$1/artist"")),\n\t\t\t\t""http://wikiba.se/ontology#String"");\n\t}\n']",Set;musicbrain;Register;Property;get;http;org;se;artist;Object,1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.2223608791828156e-09;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.501766681671143, -5.02831506729126, -5.439030170440674, -6.516465663909912, -5.428616523742676, -0.02106134407222271]",0.979158878326416
1,"['\t@Test\n\tpublic void testSetMissingPropertyTypeFromStringValue() {\n\t\tassertEquals(this.propertyRegister.setPropertyTypeFromStringValue(\n\t\t\t\tdataObjectFactory.getPropertyIdValue(""P10"", this.siteIri),\n\t\t\t\tdataObjectFactory\n\t\t\t\t\t\t.getStringValue(""http://musicbrainz.org/$1/artist"")),\n\t\t\t\t""http://wikiba.se/ontology#String"");\n\t}\n']",Property;Equals;ri;From;set;Factory;Property;site;Type;Value,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.503813743591309, -5.032171726226807, -5.445872783660889, -6.528075695037842, -5.427733421325684, -0.020983368158340454]",0.9792352318763733
1,"['\t@Test\n\tpublic void testWikidataPropertyRegister() {\n\t\tPropertyRegister pr = PropertyRegister.getWikidataPropertyRegister();\n\t\tassertEquals(Datamodel.SITE_WIKIDATA, pr.getUriPrefix());\n\t\tassertEquals(""P1921"", pr.uriPatternPropertyId);\n\t}\n']",Pattern;Property;uri;Register;ri;Property;Prefix;get;Property;Equals,1.7462298274040222e-09;1.3969838619232178e-09;1.2514647096395493e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.43833414465189e-10,5,5,"[-5.542178153991699, -4.991250514984131, -5.449105262756348, -6.55307149887085, -5.456094741821289, -0.02092873491346836]",0.9792887568473816
1,"['\t@Test\n\tpublic void testWriteItemDocument() throws RDFHandlerException,\n\t\t\tIOException, RDFParseException {\n\t\tItemDocument document = this.objectFactory.createItemDocument();\n\t\tthis.rdfConverter.writeItemDocument(document);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""ItemDocument.rdf"")));\n\t}\n']",Exception;Converter;finish;df;Helpers;Document;model;Model;Helpers;rd,9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.675246939063072e-10;4.3655745685100555e-10;4.220055416226387e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.524099826812744, -5.005014419555664, -5.460005760192871, -6.548347473144531, -5.449583053588867, -0.020894646644592285]",0.9793222546577454
1,"['\t@Test\n\tpublic void testWriteItemDocumentWithNullPropertyTypes() throws RDFHandlerException,\n\t\t\tIOException, RDFParseException {\n\t\tthis.rdfConverter = new RdfConverter(this.rdfWriter, this.sites,\n\t\t\t\tnew MockPropertyRegister.WithNullPropertyTypes());\n\n\t\tItemDocument document = this.objectFactory.createItemDocument();\n\t\tthis.rdfConverter.writeItemDocument(document);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""ItemDocumentUnknownPropertyTypes.rdf"")));\n\t}\n']",Helpers;df;parse;Writer;sites;df;rd;Null;Item;Null,2.561137080192566e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.51547384262085, -5.017163276672363, -5.449704647064209, -6.534144401550293, -5.435968399047852, -0.02097333036363125]",0.9792450666427612
1,"['    @Test\n\tpublic void testWritePropertyDocument() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tPropertyDocument document = this.objectFactory\n\t\t\t\t.createEmptyPropertyDocument();\n\t\tthis.rdfConverter.writePropertyDocument(document);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""EmptyPropertyDocument.rdf"")));\n\t}\n']",DFHandler;RDFParse;IOException;parse;rd;Exception;this;Document;df;Resource,2.7939677238464355e-09;2.0954757928848267e-09;1.6298145055770874e-09;7.130438461899757e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10,5,5,"[-5.523943901062012, -5.014928340911865, -5.451589107513428, -6.530378818511963, -5.450906276702881, -0.02088518999516964]",0.9793314933776855
1,"['\t@Test\n\tpublic void testWriteStatementRankTriple() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tStatementRank rank = StatementRank.DEPRECATED;\n\t\tResource subject = this.rdfFactory\n\t\t\t\t.createIRI(""http://www.wikidata.org/Q10Snone"");\n\t\tthis.rdfConverter.writeStatementRankTriple(subject, rank);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""StatementRankTriple.rdf"")), model);\n\t}\n']",DFHandler;RDFParse;Write;IOException;Exception;Helpers;write;DEPRECATED;www;model,2.6193447411060333e-09;1.8044374883174896e-09;1.1641532182693481e-09;7.8580342233181e-10;7.566995918750763e-10;6.984919309616089e-10;5.529727786779404e-10;5.529727786779404e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.501870155334473, -5.065427303314209, -5.483500003814697, -6.5490264892578125, -5.424224853515625, -0.020595736801624298]",0.9796149134635925
1,"['\t@Test\n\tpublic void testStatementSimpleValue() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tStatement statement = objectFactory.createStatement(""Q100"", ""P227"");\n\t\tthis.rdfConverter.writeStatement(statement);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""Statement.rdf"")));\n\t}\n']",IOException;File;Equals;rd;rd;Statement;Statement;Model;Exception;Converter,1.2223608791828156e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10,5,5,"[-5.525513172149658, -5.011044025421143, -5.456902503967285, -6.531306743621826, -5.45170259475708, -0.020877135917544365]",0.9793394207954407
1,"['\t@Test\n\tpublic void testStatementComplexValue() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tGlobeCoordinatesValue value = Datamodel.makeGlobeCoordinatesValue(51,\n\t\t\t\t13, GlobeCoordinatesValue.PREC_DEGREE,\n\t\t\t\tGlobeCoordinatesValue.GLOBE_EARTH);\n\t\tStatement statement = StatementBuilder\n\t\t\t\t.forSubjectAndProperty(ItemIdValue.NULL, PropertyIdValue.NULL)\n\t\t\t\t.withValue(value).build();\n\t\tthis.rdfConverter.writeStatement(statement);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""StatementCplx.rdf"")));\n\t}\n']",GLOB;Globe;Coordinates;Coordinates;rd;Writer;Globe;value;Statement;RDFParse,2.7939677238464355e-09;9.313225746154785e-10;8.731149137020111e-10;8.440110832452774e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.4841084480285645, -5.03463888168335, -5.436524391174316, -6.51944637298584, -5.445187568664551, -0.02102644182741642]",0.9791930913925171
1,"['\t@Test\n\tpublic void testStatementNoValue() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tPropertyIdValue pid = dataObjectFactory.getPropertyIdValue(""P31"", ""http://www.wikidata.org/"");\n\t\tStatement statement = StatementBuilder\n\t\t\t\t.forSubjectAndProperty(ItemIdValue.NULL, pid)\n\t\t\t\t.withNoValue().build();\n\t\tthis.rdfConverter.writeStatement(statement);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""StatementNoValue.rdf"")));\n\t}\n']",rd;parse;Value;No;NULL;Statement;Helpers;df;Statement;pid,5.966285243630409e-10;5.820766091346741e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.6193447411060333e-10,5,5,"[-5.512243747711182, -5.025121688842773, -5.463517665863037, -6.519530296325684, -5.445385456085205, -0.02085285261273384]",0.9793630838394165
1,"['\t@Test\n\tpublic void testWriteBasicDeclarations() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tthis.rdfConverter.writeBasicDeclarations();\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""BasicDeclarations.rdf"")), model);\n\t}\n']",Declarations;RDFParse;parse;model;df;Converter;df;df;Resource;get,1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;6.693881005048752e-10;5.238689482212067e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5185227394104, -5.032480239868164, -5.459352016448975, -6.548171520233154, -5.434604167938232, -0.020801248028874397]",0.979413628578186
1,"['\t@Test\n\tpublic void testWriteNamespaceDeclarations() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tthis.rdfConverter.writeNamespaceDeclarations();\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""Namespaces.rdf"")), model);\n\t}\n']",rd;Exception;df;Declarations;Helpers;to;Namespace;Writer;Declarations;Converter,1.5133991837501526e-09;8.731149137020111e-10;7.8580342233181e-10;6.984919309616089e-10;6.693881005048752e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.473825588822365e-10,5,5,"[-5.513290882110596, -5.040180206298828, -5.4745941162109375, -6.551907062530518, -5.440972328186035, -0.020672224462032318]",0.9795399904251099
1,"['\t@Test\n\tpublic void testWriteSiteLinks() throws RDFHandlerException, IOException,\n\t\t\tRDFParseException {\n\t\tthis.sites.setSiteInformation(""enwiki"", ""wikipedia"", ""en"", ""mediawiki"",\n\t\t\t\t""http://en.wikipedia.org/w/$1"",\n\t\t\t\t""http://en.wikipedia.org/wiki/$1"");\n\t\tthis.sites.setSiteInformation(""dewiki"", ""wikipedia"", ""de"", ""mediawiki"",\n\t\t\t\t""http://de.wikipedia.org/w/$1"",\n\t\t\t\t""http://de.wikipedia.org/wiki/$1"");\n\t\tMap<String, SiteLink> siteLinks = objectFactory.createSiteLinks();\n\t\tthis.rdfConverter.writeSiteLinks(this.resource, siteLinks);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(out.toString());\n\t\tassertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""SiteLinks.rdf"")));\n\n\t}\n']",Site;DFHandler;ewiki;Links;df;Helpers;set;Write;rd;wikipedia,1.1641532182693481e-09;9.89530235528946e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.470630168914795, -5.07339334487915, -5.477787017822266, -6.530638217926025, -5.418642520904541, -0.020753493532538414]",0.9794604778289795
1,"['\t@Test\n\tpublic void testWriteSimpleStatements() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tItemDocument document = createTestItemDocument();\n\t\tthis.rdfConverter.writeSimpleStatements(resource, document);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(this.out.toString());\n\t\tassertEquals(\n\t\t\t\tRdfTestHelpers\n\t\t\t\t\t\t.parseRdf(""\\n<http://test.org/> <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/Q10> ;\\n""\n\t\t\t\t\t\t\t\t+ ""<http://www.wikidata.org/prop/direct/P279> <http://www.wikidata.org/Q11> .\\n""),\n\t\t\t\tmodel);\n\t}\n']",Converter;wikidata;model;http;wikidata;Item;this;Writer;parse;document,6.693881005048752e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.5838532969355583e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.518469333648682, -5.037087917327881, -5.436483860015869, -6.5218586921691895, -5.43969202041626, -0.02088787592947483]",0.9793288707733154
1,"['\t@Test\n\tpublic void testWriteInterPropertyLinks() throws RDFHandlerException,\n\t\t\tRDFParseException, IOException {\n\t\tPropertyDocument document = this.dataObjectFactory.getPropertyDocument(\n\t\t\t\tthis.dataObjectFactory.getPropertyIdValue(""P17"",\n\t\t\t\t\t\t""http://www.wikidata.org/""), Collections\n\t\t\t\t\t\t.<MonolingualTextValue> emptyList(), Collections\n\t\t\t\t\t\t.<MonolingualTextValue> emptyList(), Collections\n\t\t\t\t\t\t.<MonolingualTextValue> emptyList(), Collections\n\t\t\t\t\t\t.<StatementGroup> emptyList(), this.dataObjectFactory\n\t\t\t\t\t\t.getDatatypeIdValue(DatatypeIdValue.DT_ITEM), 0);\n\t\tthis.rdfConverter.writeInterPropertyLinks(document);\n\t\tthis.rdfWriter.finish();\n\t\tModel model = RdfTestHelpers.parseRdf(out.toString());\n\n\t\tassertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers\n\t\t\t\t.getResourceFromFile(""InterPropertyLinks.rdf"")), model);\n\t}\n']",df;IOException;Write;Property;parse;Factory;this;Helpers;Inter;model,9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.485057830810547, -5.007247447967529, -5.410149097442627, -6.49265718460083, -5.432563304901123, -0.021422775462269783]",0.9788050651550293
1,"['\t@Test\n\tpublic void missingDumpFile() throws IOException {\n\t\tMwLocalDumpFile df = new MwLocalDumpFile(\n\t\t\t\t""/non-existing-dump-file.json.gz"");\n\t\tassertFalse(df.isAvailable());\n\t}\n']",Available;dump;Local;Local;False;ump;existing;file;gz;df,1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;3.7834979593753815e-10;1.1641532182693481e-10;1.1641532182693481e-10;-7.275957614183426e-11;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.558192253112793, -4.9018731117248535, -5.430498123168945, -6.544523239135742, -5.489892959594727, -0.02146419696509838]",0.9787644147872925
1,"['\t@Test\n\tpublic void missingDumpFileDirectory() throws IOException {\n\t\tMwLocalDumpFile df = new MwLocalDumpFile(\n\t\t\t\t""/nonexisting-directory/non-existing-file.json.gz"");\n\t\tassertFalse(df.isAvailable());\n\t}\n']",directory;False;missing;Local;Local;new;non;ump;File;file,1.3969838619232178e-09;1.2223608791828156e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.563723564147949, -4.926324844360352, -5.431701183319092, -6.551290512084961, -5.475592136383057, -0.021304568275809288]",0.9789207577705383
1,"['\t@Test\n\tpublic void testExplicitGetters() throws IOException {\n\t\tthis.dm.setFileContents(this.dmPath\n\t\t\t\t.resolve(""testdump-20150512.json.gz""), """");\n\t\tMwLocalDumpFile df = new MwLocalDumpFile(\n\t\t\t\t""/testdump-20150512.json.gz"",\n\t\t\t\tDumpContentType.SITES, ""20150815"",\n\t\t\t\t""wikidatawiki"");\n\n\t\tassertEquals(""20150815"", df.getDateStamp());\n\t\tassertEquals(""wikidatawiki"", df.getProjectName());\n\t\tassertEquals(DumpContentType.SITES, df.getDumpContentType());\n\t\tString toString = df.toString();\n\n\t\tassertEquals(this.dmPath.resolve(""testdump-20150512.json.gz""),\n\t\t\t\tdf.getPath());\n\n\t\tassertTrue(toString.contains(""20150815""));\n\t\tassertTrue(toString.contains(""wikidatawiki""));\n\t\tassertTrue(toString.toLowerCase().contains(\n\t\t\t\tDumpContentType.SITES.toString().toLowerCase()));\n\t}\n']",Date;ITES;Local;Local;Stamp;df;set;dump;ITES;Equals,4.6566128730773926e-09;3.4924596548080444e-09;2.6775524020195007e-09;2.6775524020195007e-09;2.6775524020195007e-09;2.3865140974521637e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.2118911147117615e-09,5,5,"[-5.45926570892334, -5.117448329925537, -5.460206508636475, -6.508536338806152, -5.408863544464111, -0.020680397748947144]",0.97953200340271
1,"['  @Test\n  public void testParse() {\n    var param =\n        ArgumentUtil.parseArgument(new FakeParameter(), new String[] {""--require"", ""require""});\n    Assertions.assertEquals(""require"", param.require);\n  }\n']",Parameter;Fake;require;Equals;new;Argument;require;Assertions;Parse;parse,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.557064056396484, -4.942190647125244, -5.431149959564209, -6.514019966125488, -5.489439487457275, -0.021213190630078316]",0.9790102243423462
1,"['  @Test\n  public void testRequired() {\n    Assertions.assertThrows(\n        ParameterException.class,\n        () -> ArgumentUtil.parseArgument(new FakeParameter(), new String[] {}));\n  }\n']",Fake;Parameter;Throws;Required;Argument;new;Parameter;Util;Argument;Exception,1.1641532182693481e-09;1.0477378964424133e-09;8.440110832452774e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-5.820766091346741e-11;-2.6193447411060333e-10;-4.0745362639427185e-10,5,5,"[-5.577704429626465, -4.9241108894348145, -5.442014217376709, -6.517658710479736, -5.503454208374023, -0.021153202280402184]",0.9790690541267395
1,"['  @Test\n  public void testLongPositive() {\n    var param =\n        ArgumentUtil.parseArgument(\n            new FakeParameter(), new String[] {""--require"", ""require"", ""--longPositive"", ""1000""});\n\n    Assertions.assertEquals(1000, param.longPositive);\n    Assertions.assertThrows(\n        ParameterException.class,\n        () ->\n            ArgumentUtil.parseArgument(\n                new FakeParameter(), new String[] {""--require"", ""require"", ""--longPositive"", ""0""}));\n  }\n']",Fake;Parameter;new;parse;param;var;Argument;Argument;require;Exception,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.499048233032227, -5.046390533447266, -5.42656135559082, -6.465785980224609, -5.451465606689453, -0.02098570391535759]",0.9792328476905823
1,"['  @Test\n  public void testNotNegative() {\n    FakeParameter param =\n        ArgumentUtil.parseArgument(\n            new FakeParameter(),\n            new String[] {""--require"", ""require"", ""--longNotNegative"", ""1000""});\n\n    Assertions.assertEquals(1000, param.longNotNegative);\n    Assertions.assertThrows(\n        ParameterException.class,\n        () ->\n            ArgumentUtil.parseArgument(\n                new FakeParameter(),\n                new String[] {""--require"", ""require"", ""--longNotNegative"", ""-1""}));\n  }\n']",Negative;Fake;new;Not;Assertions;Argument;Parameter;Equals;Argument;long,1.0477378964424133e-09;6.984919309616089e-10;5.529727786779404e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.445507526397705, -5.071713924407959, -5.433470726013184, -6.449250221252441, -5.4276862144470215, -0.02115226909518242]",0.9790698885917664
1,"['  @Test\n  public void testDurationConvert() {\n    FakeParameter param =\n        ArgumentUtil.parseArgument(\n            new FakeParameter(),\n            new String[] {""--require"", ""require"", ""--durationConvert"", ""1000""});\n\n    Assertions.assertEquals(Duration.ofSeconds(1000), param.durationConvert);\n  }\n']",Duration;Convert;Argument;Fake;new;Parameter;Duration;Argument;Convert;Equals,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.093170329928398e-10,5,5,"[-5.50090217590332, -5.007918357849121, -5.427920341491699, -6.512675762176514, -5.508700370788574, -0.02091309241950512]",0.9793040752410889
1,"['  @Test\n  public void testSetConverter() {\n    FakeParameter param =\n        ArgumentUtil.parseArgument(\n            new FakeParameter(),\n            new String[] {""--require"", ""require"", ""--setConverter"", ""1"", ""1"", ""2""});\n\n    Assertions.assertEquals(Set.of(""1"", ""2""), param.setConverter);\n  }\n']",Converter;require;require;Set;Fake;Argument;parse;param;new;Util,1.3387762010097504e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;7.8580342233181e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.6007106751203537e-10,5,5,"[-5.508309841156006, -5.005080699920654, -5.426520824432373, -6.490553855895996, -5.485761642456055, -0.021037882193922997]",0.9791817665100098
1,"['    @Test\n    public void gradleProof() throws Exception {\n        GradleProof proof = new GradleProof();\n        try {\n            proof.startServer();\n            String result = proof.doClient(""World"");\n            assertEquals(""Hello World"", result);\n        } finally {\n            proof.stopServer();\n        }\n    }\n']",Proof;Exception;Gradle;finally;Gradle;Server;Equals;Proof;start;Hello,3.259629011154175e-09;3.14321368932724e-09;2.444721758365631e-09;1.862645149230957e-09;1.5133991837501526e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.474939823150635, -5.033584117889404, -5.433375835418701, -6.469534397125244, -5.4584550857543945, -0.021105464547872543]",0.9791157245635986
1,"['    @Test\n    public void useAppContext() {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getTargetContext();\n\n        assertEquals(""demo.client.android"", appContext.getPackageName());\n    }\n']",Context;the;Context;Package;use;app;of;dem;Context;Target,8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.2369127944111824e-10;1.1641532182693481e-10,5,5,"[-5.558332443237305, -4.9546284675598145, -5.413221836090088, -6.498623847961426, -5.479641914367676, -0.021264074370265007]",0.9789605140686035
1,"['    @Test\n    public void addition_isCorrect() {\n        assertEquals(4, 2 + 2);\n    }\n']",Correct;Equals;addition,5.587935447692871e-09;-1.862645149230957e-09;-4.6566128730773926e-09,5,5,"[-5.590458393096924, -5.029256343841553, -5.394753932952881, -6.472265243530273, -5.466549873352051, -0.020803699269890785]",0.9794111847877502
1,"['    @Test\n    public void clientCanCancelServerStreamExplicitly() throws InterruptedException {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        AtomicInteger lastNumberConsumed = new AtomicInteger(Integer.MAX_VALUE);\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n        Flux<NumberProto.Number> test = Mono.just(Empty.getDefaultInstance()).as(stub::responsePressure)\n                .doOnNext(number -> {lastNumberConsumed.set(number.getNumber(0)); System.out.println(""C: "" + number.getNumber(0));})\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .doOnComplete(() -> System.out.println(""Completed""))\n                .doOnCancel(() -> System.out.println(""Client canceled""));\n\n        Disposable subscription = test.publish().connect();\n\n        Thread.sleep(1000);\n        subscription.dispose();\n        Thread.sleep(1000);\n\n        // Cancellation may or may not deliver the last generated message due to delays in the gRPC processing thread\n        assertThat(Math.abs(lastNumberConsumed.get() - svc.getLastNumberProduced())).isLessThanOrEqualTo(3);\n        assertThat(svc.wasCanceled()).isTrue();\n    }\n']",connect;sleep;Interrupted;sleep;Server;canceled;Service;Explicitly;or;Service,6.51925802230835e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10,5,5,"[-5.474043846130371, -5.053893089294434, -5.440680027008057, -6.4871015548706055, -5.470745086669922, -0.02086242474615574]",0.979353666305542
1,"['    @Test\n    public void clientCanCancelServerStreamImplicitly() throws InterruptedException {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n        Flux<NumberProto.Number> test = Mono.just(Empty.getDefaultInstance()).as(stub::responsePressure)\n                .doOnNext(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .doOnComplete(() -> System.out.println(""Completed""))\n                .doOnCancel(() -> System.out.println(""Client canceled""))\n                .take(10);\n\n        Disposable subscription = test.publish().connect();\n\n        Thread.sleep(1000);\n\n        assertThat(svc.wasCanceled()).isTrue();\n    }\n']",That;Implicitly;True;sleep;number;sv;vc;Can;On;Rule,2.3283064365386963e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.5652192309498787e-10,5,5,"[-5.48764705657959, -5.056869983673096, -5.439663410186768, -6.486633777618408, -5.465196132659912, -0.020814206451177597]",0.9794008135795593
1,"['    @Test\n    public void serverCanCancelClientStreamImplicitly() {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        svc.setExplicitCancel(false);\n\n        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);\n        AtomicBoolean requestDidProduce = new AtomicBoolean(false);\n\n        Flux<NumberProto.Number> request = Flux\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .delayElements(Duration.ofMillis(SEQUENCE_DELAY_MILLIS))\n                .map(CancellationPropagationIntegrationTest::protoNum)\n                .doOnNext(x -> {\n                    requestDidProduce.set(true);\n                    System.out.println(""Produced: "" + x.getNumber(0));\n                })\n                .doOnCancel(() -> {\n                    requestWasCanceled.set(true);\n                    System.out.println(""Client canceled"");\n                });\n\n        Mono<NumberProto.Number> observer = request.as(stub::requestPressure)\n                .doOnSuccess(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()));\n\n        StepVerifier.create(observer)\n                .expectNext(protoNum(9))\n                .verifyComplete();\n\n        await().atMost(org.awaitility.Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);\n\n        assertThat(requestWasCanceled.get()).isTrue();\n        assertThat(requestDidProduce.get()).isTrue();\n    }\n']",do;println;On;proto;Iterable;Implicitly;Can;Did;Client;Atomic,1.862645149230957e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.443170070648193, -5.04402494430542, -5.388498783111572, -6.446463108062744, -5.466811180114746, -0.021380068734288216]",0.9788468480110168
1,"['    @Test\n    public void serverCanCancelClientStreamExplicitly() {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        svc.setExplicitCancel(true);\n\n        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);\n        AtomicBoolean requestDidProduce = new AtomicBoolean(false);\n\n        Flux<NumberProto.Number> request = Flux\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .delayElements(Duration.ofMillis(SEQUENCE_DELAY_MILLIS))\n                .map(CancellationPropagationIntegrationTest::protoNum)\n                .doOnNext(n -> {\n                    requestDidProduce.set(true);\n                    System.out.println(""P: "" + n.getNumber(0));\n                })\n                .doOnCancel(() -> {\n                    requestWasCanceled.set(true);\n                    System.out.println(""Client canceled"");\n                });\n\n        Mono<NumberProto.Number> observer = request.as(stub::requestPressure)\n                .doOnSuccess(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()));\n\n        StepVerifier.create(observer)\n                .expectNext(protoNum(-1))\n                .verifyComplete();\n\n        await().atMost(org.awaitility.Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);\n\n        assertThat(requestWasCanceled.get()).isTrue();\n        assertThat(requestDidProduce.get()).isTrue();\n    }\n']",On;Next;Rule;ancel;println;println;Duration;delay;Stream;add,2.3283064365386963e-09;1.5425030142068863e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.461500644683838, -5.007561683654785, -5.376308917999268, -6.448607921600342, -5.483287334442139, -0.021527668461203575]",0.9787024259567261
1,"['    @Test\n    public void serverCanCancelClientStreamImplicitlyBidi() {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        svc.setExplicitCancel(false);\n\n        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);\n        AtomicBoolean requestDidProduce = new AtomicBoolean(false);\n\n        Flux<NumberProto.Number> request = Flux\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .delayElements(Duration.ofMillis(SEQUENCE_DELAY_MILLIS))\n                .map(CancellationPropagationIntegrationTest::protoNum)\n                .doOnNext(x -> {\n                    requestDidProduce.set(true);\n                    System.out.println(""Produced: "" + x.getNumber(0));\n                })\n                .doOnCancel(() -> {\n                    requestWasCanceled.set(true);\n                    System.out.println(""Client canceled"");\n                });\n\n        Flux<NumberProto.Number> observer = request.compose(stub::twoWayPressure)\n                .doOnNext(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()));\n\n        StepVerifier.create(observer)\n                .expectNext(protoNum(9))\n                .verifyComplete();\n\n        await().atMost(org.awaitility.Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);\n\n        assertThat(requestWasCanceled.get()).isTrue();\n        assertThat(requestDidProduce.get()).isTrue();\n    }\n']",Next;println;Flux;println;Integration;Stub;server;Atomic;do;Atomic,1.6880221664905548e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.4395952224731445, -5.048107147216797, -5.381710052490234, -6.447538375854492, -5.464555263519287, -0.021408889442682266]",0.9788186550140381
1,"['    @Test\n    public void serverCanCancelClientStreamExplicitlyBidi() {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        svc.setExplicitCancel(true);\n\n        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);\n        AtomicBoolean requestDidProduce = new AtomicBoolean(false);\n\n        Flux<NumberProto.Number> request = Flux\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .delayElements(Duration.ofMillis(SEQUENCE_DELAY_MILLIS))\n                .map(CancellationPropagationIntegrationTest::protoNum)\n                .doOnNext(n -> {\n                    requestDidProduce.set(true);\n                    System.out.println(""P: "" + n.getNumber(0));\n                })\n                .doOnCancel(() -> {\n                    requestWasCanceled.set(true);\n                    System.out.println(""Client canceled"");\n                });\n\n        Flux<NumberProto.Number> observer = request.compose(stub::twoWayPressure)\n                .doOnNext(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()));\n\n        StepVerifier.create(observer)\n                .expectNext(protoNum(-1))\n                .verifyComplete();\n\n        await().atMost(org.awaitility.Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);\n\n        assertThat(requestWasCanceled.get()).isTrue();\n        assertThat(requestDidProduce.get()).isTrue();\n    }\n']",Stub;Proto;Reactor;Atomic;println;out;idi;Next;do;println,1.076841726899147e-09;7.275957614183426e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.459991931915283, -5.008162498474121, -5.369477272033691, -6.447371482849121, -5.481966495513916, -0.02157013490796089]",0.9786608219146729
1,['    @Test\n    public void oneToOne() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Mono<HelloResponse> resp = Mono.just(HelloRequest.getDefaultInstance()).compose(stub::sayHello);\n\n        StepVerifier.create(resp)\n                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);\n    }\n'],Reactor;Greeter;Grpc;Verifier;stub;Reactor;Error;Mono;Hello;Request,1.1350493878126144e-09;7.8580342233181e-10;7.275957614183426e-10;6.984919309616089e-10;6.548361852765083e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10,5,5,"[-5.522458076477051, -4.98933744430542, -5.38507080078125, -6.456840515136719, -5.45541524887085, -0.02146221324801445]",0.9787664413452148
1,"['    @Test\n    public void oneToMany() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<HelloResponse> resp = Mono.just(HelloRequest.getDefaultInstance()).as(stub::sayHelloRespStream);\n        Flux<HelloResponse> test = resp\n                .doOnNext(System.out::println)\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .doOnComplete(() -> System.out.println(""Completed""))\n                .doOnCancel(() -> System.out.println(""Client canceled""));\n\n        StepVerifier.create(test)\n                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);\n    }\n']",stub;channel;Stub;Greeter;just;Flux;Many;Greeter;Exception;Verifier,2.561137080192566e-09;1.3096723705530167e-09;1.0040821507573128e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;7.712515071034431e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.502346992492676, -5.0398664474487305, -5.456029891967773, -6.502784729003906, -5.467177867889404, -0.02075851336121559]",0.9794553518295288
1,['    @Test\n    public void manyToOne() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Mono<HelloResponse> resp = Flux.just(HelloRequest.getDefaultInstance()).as(stub::sayHelloReqStream);\n        StepVerifier.create(resp)\n                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);\n    }\n'],Reactor;stub;Flux;Step;Matches;many;Reactor;Reactor;Grpc;Grpc,8.149072527885437e-10;7.566995918750763e-10;7.275957614183426e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.526003837585449, -4.994296550750732, -5.388693809509277, -6.453293800354004, -5.458375453948975, -0.021389169618487358]",0.9788379669189453
1,['    @Test\n    public void manyToMany() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<HelloResponse> resp = Flux.just(HelloRequest.getDefaultInstance()).compose(stub::sayHelloBothStream);\n        StepVerifier.create(resp)\n                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);\n    }\n'],say;verify;Many;Reactor;Grpc;Error;Verifier;Grpc;Exception;Reactor,8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.675246939063072e-10;5.529727786779404e-10;5.529727786779404e-10;4.802132025361061e-10;4.3655745685100555e-10;2.9103830456733704e-10,5,5,"[-5.53028678894043, -5.002964973449707, -5.393391132354736, -6.455066680908203, -5.458260536193848, -0.021287765353918076]",0.9789370894432068
1,"['    @Test\n    public void clientToServerBackpressure() {\n        serverRule.getServiceRegistry().addService(new TestService());\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        Flux<NumberProto.Number> reactorRequest = Flux\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .doOnNext(i -> System.out.println(i + "" --> ""))\n                .doOnNext(i -> updateNumberOfWaits(lastValueTime, numberOfWaits))\n                .map(BackpressureIntegrationTest::protoNum);\n\n        Mono<NumberProto.Number> reactorResponse = reactorRequest.as(stub::requestPressure);\n\n        StepVerifier.create(reactorResponse)\n                .expectNextMatches(v -> v.getNumber(0) == NUMBER_OF_STREAM_ELEMENTS - 1)\n                .expectComplete()\n                .verify(Duration.ofSeconds(5));\n\n        assertThat(numberOfWaits.get()).isEqualTo(1);\n    }\n']",Duration;server;do;Mono;STREAM;Backpressure;Second;Next;stub;STREAM,1.862645149230957e-09;8.585629984736443e-10;7.566995918750763e-10;6.984919309616089e-10;6.257323548197746e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10,5,5,"[-5.520271301269531, -4.737105846405029, -5.399150371551514, -6.482147216796875, -5.52128267288208, -0.023084821179509163]",0.9771795868873596
1,"['    @Test\n    public void serverToClientBackpressure() {\n        serverRule.getServiceRegistry().addService(new TestService());\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        Mono<Empty> reactorRequest = Mono.just(Empty.getDefaultInstance());\n\n        Flux<NumberProto.Number> reactorResponse = reactorRequest.as(stub::responsePressure)\n                .doOnNext(n -> System.out.println(n.getNumber(0) + ""  <--""))\n                .doOnNext(n -> waitIfValuesAreEqual(n.getNumber(0), 3));\n\n        StepVerifier.create(reactorResponse)\n                .expectNextCount(NUMBER_OF_STREAM_ELEMENTS)\n                .expectComplete()\n                .verify(Duration.ofSeconds(5));\n\n        assertThat(numberOfWaits.get()).isEqualTo(1);\n    }\n']",stub;LEMENTS;Client;Backpressure;Are;Service;Reactor;Rule;OF;Service,1.3969838619232178e-09;1.3969838619232178e-09;1.367880031466484e-09;1.3387762010097504e-09;1.280568540096283e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.548720359802246, -4.853329181671143, -5.375553131103516, -6.444620132446289, -5.514225482940674, -0.022185472771525383]",0.9780586957931519
1,"['    @Test\n    public void bidiResponseBackpressure() {\n        serverRule.getServiceRegistry().addService(new TestService());\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        Flux<NumberProto.Number> reactorRequest = Flux.empty();\n\n        Flux<NumberProto.Number> reactorResponse = reactorRequest.compose(stub::twoWayResponsePressure)\n                .doOnNext(n -> System.out.println(n.getNumber(0) + ""  <--""))\n                .doOnNext(n -> waitIfValuesAreEqual(n.getNumber(0), 3));\n\n        StepVerifier.create(reactorResponse)\n                .expectNextCount(NUMBER_OF_STREAM_ELEMENTS)\n                .expectComplete()\n                .verify(Duration.ofSeconds(5));\n\n        assertThat(numberOfWaits.get()).isEqualTo(1);\n    }\n']",bid;LEMENTS;That;Are;Service;wait;Reactor;Flux;reactor;Grpc,6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.5838532969355583e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.5140156745910645, -4.988401412963867, -5.3875555992126465, -6.453975200653076, -5.478109359741211, -0.02139827236533165]",0.9788289070129395
1,"['    @Test\n    public void bidiRequestBackpressure() {\n        serverRule.getServiceRegistry().addService(new TestService());\n\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        Flux<NumberProto.Number> reactorRequest = Flux\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .doOnNext(i -> System.out.println(i + "" --> ""))\n                .doOnNext(i -> updateNumberOfWaits(lastValueTime, numberOfWaits))\n                .map(BackpressureIntegrationTest::protoNum);\n\n        Flux<NumberProto.Number> reactorResponse = reactorRequest.compose(stub::twoWayRequestPressure);\n\n        StepVerifier.create(reactorResponse)\n                .expectNextMatches(v -> v.getNumber(0) == NUMBER_OF_STREAM_ELEMENTS - 1)\n                .expectComplete()\n                .verify(Duration.ofSeconds(5));\n\n        assertThat(numberOfWaits.get()).isEqualTo(1);\n    }\n']",add;stub;Next;Int;Service;of;Service;Service;Channel;Number,1.2223608791828156e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.275957614183426e-10,5,5,"[-5.518098831176758, -4.690330982208252, -5.405485153198242, -6.487994194030762, -5.527634620666504, -0.02345903031527996]",0.9768139719963074
1,"['    @Test\n    public void serverErrorSignalsUpstreamCancellationManyToOne() {\n        serverRule.getServiceRegistry().addService(new ExplodeAfterFiveService());\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        AtomicBoolean upstreamCancel = new AtomicBoolean(false);\n\n        Mono<NumberProto.Number> observer = Flux.range(0, Integer.MAX_VALUE)\n                .map(this::protoNum)\n                .doOnCancel(() -> upstreamCancel.set(true))\n                .as(stub::requestPressure)\n                .doOnError(System.out::println)\n                .doOnSuccess(i -> System.out.println(i.getNumber(0)));\n\n        StepVerifier.create(observer)\n                .verifyError(StatusRuntimeException.class);\n\n        assertThat(upstreamCancel.get()).isTrue();\n    }\n']",Verifier;Status;Success;Runtime;Error;stub;observer;get;upstream;Pressure,2.270098775625229e-09;2.0954757928848267e-09;1.280568540096283e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10,5,5,"[-5.503869533538818, -5.015887260437012, -5.417876243591309, -6.465231418609619, -5.484666347503662, -0.021066129207611084]",0.9791542291641235
1,"['    @Test\n    public void serverErrorSignalsUpstreamCancellationBidi() {\n        serverRule.getServiceRegistry().addService(new ExplodeAfterFiveService());\n        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());\n\n        AtomicBoolean upstreamCancel = new AtomicBoolean(false);\n\n        Flux<NumberProto.Number> subscriber = Flux.range(0, Integer.MAX_VALUE)\n                .map(this::protoNum)\n                .doOnCancel(() -> upstreamCancel.set(true))\n                .compose(stub::twoWayPressure)\n                .doOnNext(i -> System.out.println(i.getNumber(0)));\n\n        StepVerifier.create(subscriber)\n                .verifyError(StatusRuntimeException.class);\n        assertThat(upstreamCancel.get()).isTrue();\n    }\n']",Proto;Explode;Runtime;get;Upstream;Status;subscriber;stub;new;server,6.984919309616089e-10;6.83940015733242e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;4.511093720793724e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.511332035064697, -4.976139068603516, -5.3582611083984375, -6.414913654327393, -5.47804069519043, -0.021698692813515663]",0.9785350561141968
1,['    @Test\n    public void oneToOne() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Mono<HelloResponse> resp = Mono.just(HelloRequest.getDefaultInstance()).compose(stub::sayHello);\n\n        StepVerifier.create(resp)\n                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus().getCode() == Status.Code.INTERNAL);\n    }\n'],say;Reactor;Grpc;Greeter;new;Greeter;INTERNAL;Step;Instance;stub,1.0477378964424133e-09;8.87666828930378e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.53665018081665, -4.997600078582764, -5.4148688316345215, -6.48607873916626, -5.46032190322876, -0.021142348647117615]",0.9790796041488647
1,"['    @Test\n    public void oneToMany() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<HelloResponse> resp = Mono.just(HelloRequest.getDefaultInstance()).as(stub::sayHelloRespStream);\n        Flux<HelloResponse> test = resp\n                .doOnNext(System.out::println)\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .doOnComplete(() -> System.out.println(""Completed""))\n                .doOnCancel(() -> System.out.println(""Client canceled""));\n\n        StepVerifier.create(resp)\n                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus().getCode() == Status.Code.INTERNAL);\n    }\n']",say;Mono;stub;Reactor;Greeter;Flux;Reactor;Hello;Flux;Stream,9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;6.548361852765083e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.5033063888549805, -5.038939952850342, -5.457665920257568, -6.502470970153809, -5.467470645904541, -0.020752793177962303]",0.9794609546661377
1,['    @Test\n    public void manyToOne() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<HelloRequest> req = Flux.just(HelloRequest.getDefaultInstance());\n        Mono<HelloResponse> resp = req.as(stub::sayHelloReqStream);\n\n        StepVerifier.create(resp)\n                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus().getCode() == Status.Code.INTERNAL);\n    }\n'],just;channel;Matches;Reactor;Runtime;Status;Status;instanceof;Hello;Greeter,1.5133991837501526e-09;1.280568540096283e-09;1.280568540096283e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.87666828930378e-10;7.566995918750763e-10,5,5,"[-5.518652439117432, -5.002601146697998, -5.397043228149414, -6.451943874359131, -5.461213111877441, -0.02131308801472187]",0.9789125323295593
1,['    @Test\n    public void manyToMany() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<HelloRequest> req = Flux.just(HelloRequest.getDefaultInstance());\n        Flux<HelloResponse> resp = req.compose(stub::sayHelloBothStream);\n\n        StepVerifier.create(resp)\n                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus().getCode() == Status.Code.INTERNAL);\n    }\n'],Exception;Many;say;Hello;channel;Flux;Both;Stub;Flux;verify,3.3760443329811096e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.294591680169106e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.518682479858398, -5.004349708557129, -5.398829936981201, -6.4594831466674805, -5.458212375640869, -0.021293599158525467]",0.9789314866065979
1,"['    @Test\n    public void oneToOne() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Mono<HelloRequest> req = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());\n        Mono<HelloResponse> resp = req.compose(stub::sayHello);\n\n        AtomicReference<String> clientThreadName = new AtomicReference<>();\n\n        StepVerifier\n                .create(resp\n                        .map(HelloResponse::getMessage)\n                        .doOnSuccess(x -> clientThreadName.set(Thread.currentThread().getName())))\n                .expectNext(""Hello reactorjava"")\n                .verifyComplete();\n\n        assertThat(clientThreadName.get()).isEqualTo(""TheGrpcClient"");\n        assertThat(serverThreadName.get()).isEqualTo(""TheGrpcServer"");\n    }\n']",One;Mono;Hello;set;compose;Next;On;Stub;Reactor;Request,6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.43833414465189e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.6193447411060333e-10,5,5,"[-5.484955310821533, -5.0452423095703125, -5.435706615447998, -6.468118190765381, -5.452132701873779, -0.02100519835948944]",0.9792138934135437
1,"['    @Test\n    public void manyToMany() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<HelloRequest> req = Flux.just(\n                HelloRequest.newBuilder().setName(""a"").build(),\n                HelloRequest.newBuilder().setName(""b"").build(),\n                HelloRequest.newBuilder().setName(""c"").build(),\n                HelloRequest.newBuilder().setName(""d"").build(),\n                HelloRequest.newBuilder().setName(""e"").build());\n\n        Flux<HelloResponse> resp = req.compose(stub::sayHelloBothStream);\n\n        AtomicReference<String> clientThreadName = new AtomicReference<>();\n\n        StepVerifier\n                .create(resp\n                        .map(HelloResponse::getMessage)\n                        .doOnNext(x -> clientThreadName.set(Thread.currentThread().getName())))\n                .expectNext(""Hello a and b"", ""Hello c and d"", ""Hello e"")\n                .verifyComplete();\n\n        assertThat(clientThreadName.get()).isEqualTo(""TheGrpcClient"");\n        assertThat(serverThreadName.get()).isEqualTo(""TheGrpcServer"");\n    }\n']",Many;Hello;Verifier;resp;Grpc;Reference;expect;Flux;current;do,1.7462298274040222e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.482122898101807, -4.995685577392578, -5.377276420593262, -6.4320526123046875, -5.467928886413574, -0.021608751267194748]",0.9786229133605957
1,"['    @Test\n    public void unimplementedMethodShouldFail() {\n        GreeterGrpc.GreeterBlockingStub stub = GreeterGrpc.newBlockingStub(channel);\n\n        assertThatThrownBy(() -> stub.sayHello(HelloRequest.newBuilder().setName(""World"").build()))\n                .isInstanceOf(StatusRuntimeException.class)\n                .hasMessageContaining(""UNIMPLEMENTED"");\n    }\n']",Blocking;Blocking;Hello;Status;Should;unimplemented;Stub;Runtime;Greeter;Greeter,9.89530235528946e-10;9.604264050722122e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.6921043172478676e-10,5,5,"[-5.522216320037842, -5.0262250900268555, -5.438286781311035, -6.481774806976318, -5.443608283996582, -0.020980916917324066]",0.9792376756668091
1,['    @Test\n    public void getChannelWorks() {\n        ManagedChannel channel = serverRule.getChannel();\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n\n        assertThat(stub.getChannel()).isEqualTo(channel);\n    }\n'],Works;Reactor;Stub;That;Channel;Rule;Reactor;Greeter;get;Channel,9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.521778106689453, -5.0227861404418945, -5.372410774230957, -6.440321922302246, -5.426440715789795, -0.021451013162732124]",0.9787775278091431
1,"['    @Test\n    public void settingCallOptionsWorks() {\n        ManagedChannel channel = serverRule.getChannel();\n        Deadline deadline = Deadline.after(42, TimeUnit.SECONDS);\n\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel).withDeadline(deadline);\n\n        assertThat(stub.getCallOptions().getDeadline()).isEqualTo(deadline);\n    }\n']",SECONDS;setting;That;Time;Stub;stub;get;Grpc;get;new,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.2928149923682213e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.541896820068359, -4.955214977264404, -5.394382953643799, -6.5059919357299805, -5.515689373016357, -0.02124948613345623]",0.9789746999740601
1,"['    @Test\n    public void oneToOne() {\n        AtomicBoolean called = new AtomicBoolean(false);\n        GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n\n        HelloRequest request = HelloRequest.newBuilder().setName(""World"").build();\n        stub.sayHello(request, new LambdaStreamObserver<>(\n                response -> {\n                    assertThat(response.getMessage()).isEqualTo(""Hello World"");\n                    called.set(true);\n                }\n        ));\n\n        await().atMost(1, TimeUnit.SECONDS).untilTrue(called);\n    }\n']",Grpc;stub;new;Greeter;called;SECONDS;Lambda;response;Greeter;Hello,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.83940015733242e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10,5,5,"[-5.50778341293335, -4.998836517333984, -5.455814838409424, -6.50088357925415, -5.499528884887695, -0.02087946981191635]",0.9793368577957153
1,"['    @Test\n    public void oneToMany() {\n        AtomicInteger called = new AtomicInteger(0);\n        GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n\n        HelloRequest request = HelloRequest.newBuilder().setName(""World"").build();\n        stub.sayHelloRespStream(request, new LambdaStreamObserver<>(\n                response -> {\n                    assertThat(response.getMessage()).isIn(""Hello World"", ""Hi World"", ""Greetings World"");\n                    called.incrementAndGet();\n                }\n        ));\n\n        await().atMost(1, TimeUnit.SECONDS).untilAtomic(called, equalTo(3));\n    }\n']",until;response;World;Hello;build;Hello;Request;request;new;Stub,9.89530235528946e-10;9.022187441587448e-10;8.731149137020111e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.504359245300293, -4.995829105377197, -5.457058906555176, -6.516729831695557, -5.510690689086914, -0.020838608965277672]",0.979377031326294
1,"['    @Test\n    public void manyToOne() {\n        AtomicBoolean called = new AtomicBoolean(false);\n        GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n\n        StreamObserver<HelloRequest> requestStream = stub.sayHelloReqStream(new LambdaStreamObserver<>(\n                response -> {\n                    assertThat(response.getMessage()).isEqualTo(""Hello A and B and C"");\n                    called.set(true);\n                }\n        ));\n\n        requestStream.onNext(HelloRequest.newBuilder().setName(""A"").build());\n        requestStream.onNext(HelloRequest.newBuilder().setName(""B"").build());\n        requestStream.onNext(HelloRequest.newBuilder().setName(""C"").build());\n        requestStream.onCompleted();\n\n        await().atMost(1, TimeUnit.SECONDS).untilTrue(called);\n    }\n']",Atomic;Boolean;One;SECONDS;called;Next;Greeter;Hello;Boolean;channel,1.3096723705530167e-09;9.89530235528946e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.46995735168457, -5.0438761711120605, -5.43424129486084, -6.452553749084473, -5.4595723152160645, -0.021077102050185204]",0.9791434407234192
1,"['    @Test\n    public void manyToMany() {\n        AtomicInteger called = new AtomicInteger(0);\n        GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n\n        StreamObserver<HelloRequest> requestStream = stub.sayHelloBothStream(new LambdaStreamObserver<>(\n                response -> {\n                    assertThat(response.getMessage()).isIn(""Hello A and B"", ""Hello C and D"");\n                    called.incrementAndGet();\n                }\n        ));\n\n        requestStream.onNext(HelloRequest.newBuilder().setName(""A"").build());\n        requestStream.onNext(HelloRequest.newBuilder().setName(""B"").build());\n        requestStream.onNext(HelloRequest.newBuilder().setName(""C"").build());\n        requestStream.onNext(HelloRequest.newBuilder().setName(""D"").build());\n        requestStream.onCompleted();\n\n        await().atMost(1, TimeUnit.SECONDS).untilAtomic(called, equalTo(2));\n    }\n']",Many;Observer;Atomic;Observer;Lambda;Hello;until;called;response;Stream,1.280568540096283e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.483440399169922, -5.032779216766357, -5.465212821960449, -6.496570587158203, -5.476922512054443, -0.02081303857266903]",0.9794020652770996
1,"['    @Test\n    public void oneToOne() throws IOException {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Mono<HelloRequest> req = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());\n        Mono<HelloResponse> resp = req.compose(stub::sayHello);\n\n        StepVerifier.create(resp.map(HelloResponse::getMessage))\n                .expectNext(""Hello reactorjava"")\n                .verifyComplete();\n    }\n']",stub;Greeter;Reactor;Hello;Builder;say;resp;Hello;compose;Greeter,8.149072527885437e-10;8.149072527885437e-10;7.421476766467094e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.521653175354004, -4.993208885192871, -5.438910484313965, -6.497648239135742, -5.483207702636719, -0.021009400486946106]",0.9792097806930542
1,"['    @Test\n    public void oneToMany() throws IOException {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Mono<HelloRequest> req = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());\n        Flux<HelloResponse> resp = req.as(stub::sayHelloRespStream);\n\n        StepVerifier.create(resp.map(HelloResponse::getMessage))\n                .expectNext(""Hello reactorjava"", ""Hi reactorjava"", ""Greetings reactorjava"")\n                .verifyComplete();\n    }\n']",Many;Greeter;Reactor;Hello;IOException;stub;Reactor;Flux;resp;Resp,1.0477378964424133e-09;6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.512382984161377, -5.003478050231934, -5.438210964202881, -6.497084140777588, -5.475443363189697, -0.021013719961047173]",0.9792055487632751
1,"['    @Test\n    public void manyToOne() throws Exception {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<HelloRequest> req = Flux.just(\n                HelloRequest.newBuilder().setName(""a"").build(),\n                HelloRequest.newBuilder().setName(""b"").build(),\n                HelloRequest.newBuilder().setName(""c"").build());\n\n        Mono<HelloResponse> resp = req.as(stub::sayHelloReqStream);\n\n        StepVerifier.create(resp.map(HelloResponse::getMessage))\n                .expectNext(""Hello a and b and c"")\n                .verifyComplete();\n    }\n']",Flux;stub;Hello;Verifier;Grpc;Reactor;Greeter;just;Greeter;expect,5.529727786779404e-10;5.384208634495735e-10;5.238689482212067e-10;4.874891601502895e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.481290817260742, -5.043396949768066, -5.459808826446533, -6.489884376525879, -5.456128120422363, -0.020875267684459686]",0.9793410897254944
1,"['    @Test\n    public void manyToMany() throws Exception {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<HelloRequest> req = Flux.just(\n                HelloRequest.newBuilder().setName(""a"").build(),\n                HelloRequest.newBuilder().setName(""b"").build(),\n                HelloRequest.newBuilder().setName(""c"").build(),\n                HelloRequest.newBuilder().setName(""d"").build(),\n                HelloRequest.newBuilder().setName(""e"").build());\n\n        Flux<HelloResponse> resp = req.compose(stub::sayHelloBothStream);\n\n        StepVerifier.create(resp.map(HelloResponse::getMessage))\n                .expectNext(""Hello a and b"", ""Hello c and d"", ""Hello e"")\n                .verifyComplete();\n    }\n']",Many;many;compose;Hello;Verifier;Both;Next;resp;Hello;Hello,2.2118911147117615e-09;9.313225746154785e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.456003665924072, -5.0707173347473145, -5.428370475769043, -6.436483860015869, -5.430371284484863, -0.021144215017557144]",0.9790777564048767
1,"['    @Test\n    public void fourKindsOfRequestAtOnce() throws Exception {\n        StepVerifier.setDefaultTimeout(Duration.ofSeconds(3));\n\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n\n        // == MAKE REQUESTS ==\n        // One to One\n        Mono<HelloRequest> req1 = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());\n        Mono<HelloResponse> resp1 = req1.compose(stub::sayHello);\n\n        // One to Many\n        Mono<HelloRequest> req2 = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());\n        Flux<HelloResponse> resp2 = req2.as(stub::sayHelloRespStream);\n\n        // Many to One\n        Flux<HelloRequest> req3 = Flux.just(\n                HelloRequest.newBuilder().setName(""a"").build(),\n                HelloRequest.newBuilder().setName(""b"").build(),\n                HelloRequest.newBuilder().setName(""c"").build());\n\n        Mono<HelloResponse> resp3 = req3.as(stub::sayHelloReqStream);\n\n        // Many to Many\n        Flux<HelloRequest> req4 = Flux.just(\n                HelloRequest.newBuilder().setName(""a"").build(),\n                HelloRequest.newBuilder().setName(""b"").build(),\n                HelloRequest.newBuilder().setName(""c"").build(),\n                HelloRequest.newBuilder().setName(""d"").build(),\n                HelloRequest.newBuilder().setName(""e"").build());\n\n        Flux<HelloResponse> resp4 = req4.compose(stub::sayHelloBothStream);\n\n        // == VERIFY RESPONSES ==\n        ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());\n\n        // Run all four verifications in parallel\n        try {\n            // One to One\n            ListenableFuture<Boolean> oneToOne = executorService.submit(() -> {\n                StepVerifier.create(resp1.map(HelloResponse::getMessage))\n                        .expectNext(""Hello reactorjava"")\n                        .verifyComplete();\n                return true;\n            });\n\n            // One to Many\n            ListenableFuture<Boolean> oneToMany = executorService.submit(() -> {\n                StepVerifier.create(resp2.map(HelloResponse::getMessage))\n                        .expectNext(""Hello reactorjava"", ""Hi reactorjava"", ""Greetings reactorjava"")\n                        .verifyComplete();\n                return true;\n            });\n\n            // Many to One\n            ListenableFuture<Boolean> manyToOne = executorService.submit(() -> {\n                StepVerifier.create(resp3.map(HelloResponse::getMessage))\n                        .expectNext(""Hello a and b and c"")\n                        .verifyComplete();\n                return true;\n            });\n\n            // Many to Many\n            ListenableFuture<Boolean> manyToMany = executorService.submit(() -> {\n                StepVerifier.create(resp4.map(HelloResponse::getMessage))\n                        .expectNext(""Hello a and b"", ""Hello c and d"", ""Hello e"")\n                        .verifyComplete();\n                return true;\n            });\n\n            ListenableFuture<List<Boolean>> allFutures = Futures.allAsList(Lists.newArrayList(oneToOne, oneToMany, manyToOne, manyToMany));\n            // Block for response\n            List<Boolean> results = allFutures.get(3, TimeUnit.SECONDS);\n            assertThat(results).containsExactly(true, true, true, true);\n\n        } finally {\n            executorService.shutdown();\n        }\n    }\n']",Request;Once;say;Request;Hello;Many;Re;Stream;reactorjava;channel,2.0954757928848267e-09;1.1641532182693481e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.602487362921238e-10;5.238689482212067e-10,5,5,"[-5.450998783111572, -5.013021469116211, -5.419980525970459, -6.458922863006592, -5.472462177276611, -0.021363848820328712]",0.9788626432418823
1,"['    @Test\n    public void oneToOne() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Mono<String> reactorRequest = Mono.just(""World"");\n        Mono<String> reactorResponse = reactorRequest.map(this::toRequest).compose(stub::sayHello).map(this::fromResponse);\n\n        StepVerifier.create(reactorResponse)\n                .expectNext(""Hello World"")\n                .verifyComplete();\n    }\n']",Grpc;Greeter;World;Mono;Mono;Step;map;one;Response;Request,8.440110832452774e-10;7.8580342233181e-10;7.275957614183426e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.346940502524376e-10,5,5,"[-5.521022319793701, -5.020542144775391, -5.436319351196289, -6.459616184234619, -5.4624552726745605, -0.020985353738069534]",0.9792333245277405
1,"['    @Test\n    public void oneToMany() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Mono<String> reactorRequest = Mono.just(""World"");\n        Flux<String> reactorResponse = reactorRequest.map(this::toRequest).as(stub::sayHelloRespStream).map(this::fromResponse);\n\n        StepVerifier.create(reactorResponse)\n                .expectNext(""Hello World"", ""Hi World"", ""Greetings World"")\n                .verifyComplete();\n    }\n']",stub;one;just;reactor;reetings;Flux;Reactor;Grpc;World;Reactor,7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10,5,5,"[-5.518463134765625, -4.9993062019348145, -5.437027454376221, -6.485235691070557, -5.4687700271606445, -0.02106974832713604]",0.9791507720947266
1,"['    @Test\n    public void manyToOne() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<String> reactorRequest = Flux.just(""A"", ""B"", ""C"");\n        Mono<String> reactorResponse = reactorRequest.map(this::toRequest).as(stub::sayHelloReqStream).map(this::fromResponse);\n\n        StepVerifier.create(reactorResponse)\n                .expectNext(""Hello A and B and C"")\n                .verifyComplete();\n    }\n']",Flux;many;channel;Mono;and;Flux;just;map;from;Stub,1.9208528101444244e-09;1.862645149230957e-09;1.2223608791828156e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.538905620574951, -5.004214286804199, -5.422255992889404, -6.455240726470947, -5.480943202972412, -0.021014535799622536]",0.9792047142982483
1,"['    @Test\n    public void manyToMany() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Flux<String> reactorRequest = Flux.just(""A"", ""B"", ""C"", ""D"");\n        Flux<String> reactorResponse = reactorRequest.map(this::toRequest).compose(stub::sayHelloBothStream).map(this::fromResponse);\n\n        StepVerifier.create(reactorResponse)\n                .expectNext(""Hello A and B"", ""Hello C and D"")\n                .verifyComplete();\n    }\n']",compose;Reactor;just;channel;reactor;new;Flux;Flux;Request;Next,9.74978320300579e-10;7.275957614183426e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.531622409820557, -5.001451015472412, -5.438936233520508, -6.486653804779053, -5.480562686920166, -0.020940177142620087]",0.9792775511741638
1,"['    @Test\n    public void ClientSendsContext() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n        Context.current()\n                .withValue(ctxKey, ""ClientSendsContext"")\n                .run(() -> StepVerifier.create(worldReq.compose(stub::sayHello).map(HelloResponse::getMessage))\n                        .expectNext(""Hello World"")\n                        .verifyComplete());\n\n        assertThat(clientInterceptor.getSendMessageCtxValue()).isEqualTo(""ClientSendsContext"");\n    }\n']",channel;World;compose;say;Context;Interceptor;Next;Context;Reactor;new,7.8580342233181e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.473825588822365e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.483497619628906, -5.043941020965576, -5.4709391593933105, -6.495649814605713, -5.444666385650635, -0.020855654031038284]",0.9793604612350464
1,"['    @Test\n    public void ClientGetsContext() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n\n        Mono<HelloResponse> test = worldReq.compose(stub::sayHello)\n                .doOnSuccess(resp -> {\n                    Context ctx = Context.current();\n                    assertThat(ctxKey.get(ctx)).isEqualTo(""ClientGetsContext"");\n                });\n\n        StepVerifier.create(test.map(HelloResponse::getMessage))\n                .expectNext(""Hello World"")\n                .verifyComplete();\n    }\n']",say;Greeter;Grpc;stub;World;On;Reactor;get;expect;Response,5.820766091346741e-10;4.94765117764473e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.497159481048584, -5.040706157684326, -5.465338706970215, -6.4980034828186035, -5.452899932861328, -0.020803699269890785]",0.9794111847877502
1,"['    @Test\n    public void ServerAcceptsContext() {\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);\n\n        StepVerifier.create(worldReq.compose(stub::sayHello).map(HelloResponse::getMessage))\n                .expectNext(""Hello World"")\n                .verifyComplete();\n        assertThat(svc.getReceivedCtxValue()).isEqualTo(""ServerAcceptsContext"");\n    }\n']",Hello;Reactor;Response;Message;expect;map;tx;compose;World;stub,1.1059455573558807e-09;1.076841726899147e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.505877494812012, -5.030193328857422, -5.429117679595947, -6.458580017089844, -5.4322943687438965, -0.021149467676877975]",0.979072630405426
1,"['    @Test\n    public void zeroMessageResponseOneToOne() {\n        serverRule.getServiceRegistry().addService(new MissingUnaryResponseService());\n\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(serverRule.getChannel());\n        Mono<HelloRequest> req = Mono.just(HelloRequest.newBuilder().setName(""reactor"").build());\n        Mono<HelloResponse> resp = req.compose(stub::sayHello);\n\n        StepVerifier.create(resp).verifyErrorMatches(t ->\n                t instanceof StatusRuntimeException &&\n                ((StatusRuntimeException) t).getStatus().getCode() == Status.Code.CANCELLED);\n    }\n']",Rule;Unary;Hello;One;stub;One;Grpc;Reactor;Service;server,9.89530235528946e-10;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.50541877746582, -4.996023654937744, -5.45491361618042, -6.5151872634887695, -5.474634170532227, -0.02099609188735485]",0.9792227745056152
1,"['    @Test\n    public void zeroMessageResponseManyToOne() {\n        serverRule.getServiceRegistry().addService(new MissingUnaryResponseService());\n\n        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(serverRule.getChannel());\n        Flux<HelloRequest> req = Flux.just(\n                HelloRequest.newBuilder().setName(""a"").build(),\n                HelloRequest.newBuilder().setName(""b"").build(),\n                HelloRequest.newBuilder().setName(""c"").build());\n\n        Mono<HelloResponse> resp = req.as(stub::sayHelloReqStream);\n\n        StepVerifier.create(resp).verifyErrorMatches(t ->\n                t instanceof StatusRuntimeException &&\n                ((StatusRuntimeException) t).getStatus().getCode() == Status.Code.CANCELLED);\n    }\n']",Unary;Mono;Many;req;new;One;server;new;Hello;Service,9.74978320300579e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.9103830456733704e-10,5,5,"[-5.482952117919922, -5.034667491912842, -5.460923194885254, -6.493202209472656, -5.456131935119629, -0.020916011184453964]",0.9793012142181396
1,"['@Test(timeOut = 3000)\n    public Publisher<Message> createPublisher(long elements) {\n        ReactorTckGrpc.ReactorTckStub stub = ReactorTckGrpc.newReactorStub(channel);\n        Flux<Message> request = Flux.range(0, (int)elements).map(this::toMessage);\n        Publisher<Message> publisher = stub.manyToMany(request).publishOn(Schedulers.immediate());\n\n        return publisher;\n    }\n']",Publisher;long;Message;Many;publisher;create;Stub;Message;ck;Reactor,2.3283064365386963e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.594341278076172, -4.92689323425293, -5.486727714538574, -6.595566272735596, -5.495135307312012, -0.020797044038772583]",0.9794177412986755
1,['@Test(timeOut = 3000)\n    public long maxElementsFromPublisher() {\n        return 1;\n    }\n'],max;long;return;lements;Out;Publisher;From;time,3.259629011154175e-09;2.561137080192566e-09;1.862645149230957e-09;-2.3283064365386963e-10;-4.656612873077393e-10;-1.862645149230957e-09;-2.3283064365386963e-09;-4.6566128730773926e-09,5,5,"[-5.591577529907227, -4.992253303527832, -5.431959629058838, -6.6121506690979, -5.444606781005859, -0.020771708339452744]",0.9794425368309021
1,['@Test(timeOut = 3000)\n    public long maxElementsFromPublisher() {\n        return 1;\n    }\n'],max;long;return;lements;Out;Publisher;From;time,3.259629011154175e-09;2.561137080192566e-09;1.862645149230957e-09;-2.3283064365386963e-10;-4.656612873077393e-10;-1.862645149230957e-09;-2.3283064365386963e-09;-4.6566128730773926e-09,5,5,"[-5.591577529907227, -4.992253303527832, -5.431959629058838, -6.6121506690979, -5.444606781005859, -0.020771708339452744]",0.9794425368309021
1,['@Test(timeOut = 3000)\n    public Publisher<Message> createPublisher(long elements) {\n        ReactorTckGrpc.ReactorTckStub stub = ReactorTckGrpc.newReactorStub(channel);\n        Mono<Message> request = Mono.just(toMessage((int) elements));\n        Publisher<Message> publisher = stub.oneToMany(request).publishOn(Schedulers.immediate());\n\n        return publisher;\n    }\n'],Out;Mono;publisher;Publisher;return;create;Message;stub;Reactor;Message,2.3283064365386963e-09;1.8044374883174896e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1350493878126144e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.570512771606445, -4.998835563659668, -5.482353210449219, -6.571102619171143, -5.479914665222168, -0.02049226500093937]",0.9797161817550659
1,"['@Test(timeOut = 3000)\n    public Subscriber<Message> createSubscriber(WhiteboxSubscriberProbe<Message> probe) {\n        return new ReactivePublisherBackpressureOnReadyHandlerClient<Message>(new StubServerCallStreamObserver()) {\n            @Override\n            public void onSubscribe(final Subscription s) {\n                super.onSubscribe(s);\n\n                // register a successful Subscription, and create a Puppet,\n                // for the WhiteboxVerification to be able to drive its tests:\n                probe.registerOnSubscribe(new SubscriberPuppet() {\n\n                    @Override\n                    public void triggerRequest(long elements) {\n                        s.request(elements);\n                    }\n']",Observer;time;Subscription;probe;Subscriber;Server;probe;create;uppet;Puppet,4.889443516731262e-09;4.6566128730773926e-09;4.423782229423523e-09;4.190951585769653e-09;3.725290298461914e-09;3.259629011154175e-09;2.9103830456733704e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09,5,5,"[-5.647813320159912, -4.793375492095947, -5.484332084655762, -6.538811206817627, -5.556139945983887, -0.021500250324606895]",0.9787291288375854
1,"['    @Test\n    public void subscribeOnlyOnceLifterErrorsWhenMultipleSubscribe() throws Exception {\n        SubscribeOnlyOnceLifter<Object> op = new SubscribeOnlyOnceLifter<>();\n        CoreSubscriber<Object> innerSub = mock(CoreSubscriber.class);\n        Subscription subscription = mock(Subscription.class);\n\n        CoreSubscriber<Object> outerSub = op.apply(null, innerSub);\n\n        outerSub.onSubscribe(subscription);\n        assertThatThrownBy(() -> outerSub.onSubscribe(subscription))\n                .isInstanceOf(NullPointerException.class)\n                .hasMessageContaining(""cannot directly subscribe to a gRPC service multiple times"");\n\n        verify(innerSub, times(1)).onSubscribe(subscription);\n    }\n']",mock;outer;PC;subscription;Errors;subscribe;When;inner;Exception;That,6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.525058269500732, -5.014654159545898, -5.45704460144043, -6.4974751472473145, -5.470220565795898, -0.020824598148465157]",0.9793907403945923
1,"['    @Test\n    public void chunkOperatorCorrectlyChunks() {\n        final List<Long> requests = new ArrayList<>();\n        int chunkSize = ReactiveBackpressureChunker.DEFAULT_CHUNK_SIZE;\n\n        Flux<Integer> chunked = Flux.range(0, chunkSize + 4)\n                .doOnRequest(requests::add)\n                .transform(Operators.lift(new BackpressureChunkingLifter<Integer>()));\n\n        StepVerifier.create(chunked)\n                .expectNext(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)\n                .verifyComplete();\n\n        assertThat(requests).containsExactly((long) chunkSize, (long) chunkSize);\n    }\n']",Backpressure;Correctly;chunked;SIZE;List;Operator;ifter;Next;Flux;create,1.2223608791828156e-09;1.0477378964424133e-09;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.518596172332764, -4.916762351989746, -5.328260898590088, -6.396908283233643, -5.492889404296875, -0.022214271128177643]",0.9780305624008179
1,['    @Test\n    public void rxConsumerIsSet() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        ReactorConsumerStreamObserver rxObs = new ReactorConsumerStreamObserver();\n\n        rxObs.beforeStart(obs);\n\n        assertThat(rxObs.getRxConsumer()).isNotNull();\n    }\n'],before;Client;rx;Set;get;That;Start;Obs;Object;Observer,3.026798367500305e-09;2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09,5,5,"[-5.579674243927002, -4.98051643371582, -5.411579132080078, -6.48275089263916, -5.470901012420654, -0.021066246554255486]",0.979154109954834
1,['    @Test\n    public void onNextDelegates() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        ReactorConsumerStreamObserver rxObs = new ReactorConsumerStreamObserver();\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        rxObs.beforeStart(obs);\n        rxObs.getRxConsumer().subscribe(sub);\n\n        Object obj = new Object();\n        StepVerifier.create(rxObs.getRxConsumer())\n                .then(() -> rxObs.onNext(obj))\n                .expectNext(obj)\n                .then(rxObs::onCompleted)\n                .expectComplete()\n                .verify(Duration.ofSeconds(3));\n    }\n'],Reactor;Client;Observer;Call;Stream;rx;mock;Stream;Completed;Consumer,2.0372681319713593e-09;1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.522488117218018, -5.029078006744385, -5.439863204956055, -6.485696315765381, -5.463750839233398, -0.020859505981206894]",0.9793564081192017
1,"['    @Test\n    public void onErrorDelegates() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        ReactorConsumerStreamObserver rxObs = new ReactorConsumerStreamObserver();\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        rxObs.beforeStart(obs);\n        rxObs.getRxConsumer().subscribe(sub);\n\n        Throwable obj = new Exception(""test error"");\n        StepVerifier.create(rxObs.getRxConsumer())\n                .then(() -> rxObs.onError(obj))\n                .expectErrorMessage(""test error"")\n                .verify(Duration.ofSeconds(3));\n    }\n']",mock;Client;rx;Reactor;Exception;Verifier;Step;Stream;obj;create,1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.519403457641602, -5.0622992515563965, -5.45765495300293, -6.482497215270996, -5.434715270996094, -0.020708072930574417]",0.9795047640800476
1,"['    @Test\n    public void noRetryMakesErrorFlowabable() {\n        Flux<Integer> test = newThreeErrorFlux()\n                .as(flux -> flux);\n\n        StepVerifier.create(test)\n                .expectErrorMessage(""Not yet!"")\n                .verify(Duration.ofSeconds(1));\n    }\n']",Verifier;no;Three;flux;Second;Step;Duration;Flux;as;of,2.3283064365386963e-09;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.532689571380615, -4.978246688842773, -5.438710689544678, -6.495639324188232, -5.509057998657227, -0.020964691415429115]",0.9792535305023193
1,"['    @Test\n    public void noRetryMakesErrorSingle() {\n        Mono<Integer> test = newThreeErrorMono()\n                .as(mono -> mono);\n\n        StepVerifier.create(test)\n                .expectErrorMessage(""Not yet!"")\n                .verify(Duration.ofSeconds(1));\n    }\n']",Duration;no;Error;Mono;verify;akes;Verifier;Retry;as;of,2.0954757928848267e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-5.513017654418945, -5.011425495147705, -5.40022087097168, -6.456210136413574, -5.486329555511475, -0.021146666258573532]",0.9790753722190857
1,"['    @Test\n    public void oneToManyRetryWhen() {\n        Flux<Integer> test = newThreeErrorMono()\n                .<Flux<Integer>>as(GrpcRetry.OneToMany.retryWhen(Mono::flux, Retry.any().retryMax(4)));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n']",verify;Max;lux;Error;Retry;Retry;one;create;When;retry,9.022187441587448e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.519547939300537, -4.966129779815674, -5.425117492675781, -6.4877400398254395, -5.503073215484619, -0.021201636642217636]",0.9790215492248535
1,['    @Test\n    public void oneToManyRetryImmediately() {\n        Flux<Integer> test = newThreeErrorMono()\n                .<Flux<Integer>>as(GrpcRetry.OneToMany.retryImmediately(Mono::flux));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n'],Grpc;verify;Flux;create;Complete;one;expect;Retry;Step;Many,1.280568540096283e-09;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.527400016784668, -5.016443252563477, -5.4405670166015625, -6.499363899230957, -5.497867107391357, -0.02075512707233429]",0.9794586896896362
1,"['    @Test\n    public void oneToManyRetryAfter() {\n        Flux<Integer> test = newThreeErrorMono()\n                .<Flux<Integer>>as(GrpcRetry.OneToMany.retryAfter(Mono::flux, Duration.ofMillis(10)));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n']",Grpc;lux;Duration;Mon;one;After;new;as;Second;create,2.2118911147117615e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.499550819396973, -4.968654632568359, -5.375720500946045, -6.449587821960449, -5.49796724319458, -0.021576084196567535]",0.9786550402641296
1,"['    @Test\n    public void manyToManyRetryWhen() {\n        Flux<Integer> test = newThreeErrorFlux()\n                .<Integer>compose(GrpcRetry.ManyToMany.retryWhen(Function.identity(), Retry.any().retryMax(4)));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n']",lux;expect;Error;Grpc;Next;Retry;retry;identity;Many;Many,1.862645149230957e-09;1.3969838619232178e-09;8.149072527885437e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.504413604736328, -4.993949890136719, -5.404717922210693, -6.453143119812012, -5.4769978523254395, -0.021326273679733276]",0.9788996577262878
1,['    @Test\n    public void manyToManyRetryImmediately() {\n        Flux<Integer> test = newThreeErrorFlux()\n                .<Integer>compose(GrpcRetry.ManyToMany.retryImmediately(Function.identity()));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n'],expect;Flux;Grpc;expect;Function;Step;retry;Duration;Many;Many,1.862645149230957e-09;1.6298145055770874e-09;1.0477378964424133e-09;6.693881005048752e-10;6.111804395914078e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.529475688934326, -4.996830940246582, -5.433116912841797, -6.489309787750244, -5.484681129455566, -0.02098500356078148]",0.9792336225509644
1,"['    @Test\n    public void manyToManyRetryAfter() {\n        Flux<Integer> test = newThreeErrorFlux()\n                .<Integer>compose(GrpcRetry.ManyToMany.retryAfter(Function.identity(), Duration.ofMillis(10)));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n']",Grpc;Duration;many;retry;Verifier;Many;identity;Complete;of;new,1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.522736072540283, -4.959944725036621, -5.409674167633057, -6.479063510894775, -5.513271808624268, -0.021274227648973465]",0.978950560092926
1,"['    @Test\n    public void manyToOneRetryWhen() {\n        Mono<Integer> test = newThreeErrorFlux()\n                .<Mono<Integer>>as(GrpcRetry.ManyToOne.retryWhen(Flux::single, Retry.any().retryMax(4)));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n']",lux;Retry;Error;expect;Three;create;When;as;One;Complete,1.3969838619232178e-09;1.0477378964424133e-09;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.5038018226623535, -4.9888410568237305, -5.395888805389404, -6.451674461364746, -5.480159759521484, -0.02139372192323208]",0.9788334965705872
1,['    @Test\n    public void manyToOneRetryImmediately() {\n        Mono<Integer> test = newThreeErrorFlux()\n                .<Mono<Integer>>as(GrpcRetry.ManyToOne.retryImmediately(Flux::single));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n'],lux;Verifier;Complete;Mono;Three;Error;verify;One;Many;One,2.6193447411060333e-09;1.280568540096283e-09;1.1932570487260818e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.521265983581543, -4.975767612457275, -5.421364784240723, -6.485227108001709, -5.491543769836426, -0.02119545266032219]",0.9790275692939758
1,"['    @Test\n    public void manyToOneRetryAfter() {\n        Mono<Integer> test = newThreeErrorFlux()\n                .<Mono<Integer>>as(GrpcRetry.ManyToOne.retryAfter(Flux::single, Duration.ofMillis(10)));\n\n        StepVerifier.create(test)\n                .expectNext(0)\n                .expectComplete()\n                .verify(Duration.ofSeconds(1));\n    }\n']",Verifier;Grpc;Duration;Error;expect;Step;lux;Retry;After;verify,1.1641532182693481e-09;1.1059455573558807e-09;6.984919309616089e-10;5.820766091346741e-10;2.3283064365386963e-10;1.6007106751203537e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.506301403045654, -4.976888656616211, -5.384785175323486, -6.461294651031494, -5.498721122741699, -0.021424992009997368]",0.9788028001785278
1,['    @Test\n    public void onNextDelegates() {\n        ServerCallStreamObserver<Object> obs = mock(ServerCallStreamObserver.class);\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        ReactiveStreamObserverPublisherServer<Object> pub = new ReactiveStreamObserverPublisherServer<Object>(obs);\n        pub.subscribe(sub);\n\n        Object obj = new Object();\n\n        pub.onNext(obj);\n        verify(sub).onNext(obj);\n    }\n'],Next;mock;Reactive;sub;Server;Observer;obj;Call;sub;obs,1.0477378964424133e-09;9.313225746154785e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.5455121994018555, -4.928535461425781, -5.405404567718506, -6.493311882019043, -5.485333442687988, -0.021524984389543533]",0.9787050485610962
1,['    @Test\n    public void onErrorDelegates() {\n        ServerCallStreamObserver<Object> obs = mock(ServerCallStreamObserver.class);\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        ReactiveStreamObserverPublisherServer<Object> pub = new ReactiveStreamObserverPublisherServer<Object>(obs);\n        pub.subscribe(sub);\n\n        Throwable obj = new Exception();\n\n        pub.onError(obj);\n        verify(sub).onError(obj);\n    }\n'],Reactive;Call;verify;on;Object;pub;Server;Stream;Error;obs,1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.555877208709717, -4.962530136108398, -5.408745765686035, -6.4863505363464355, -5.478580951690674, -0.021260922774672508]",0.9789634943008423
1,['    @Test\n    public void onCompletedDelegates() {\n        ServerCallStreamObserver<Object> obs = mock(ServerCallStreamObserver.class);\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        ReactiveStreamObserverPublisherServer<Object> pub = new ReactiveStreamObserverPublisherServer<Object>(obs);\n        pub.subscribe(sub);\n\n        pub.onCompleted();\n        verify(sub).onComplete();\n    }\n'],Observer;Server;mock;Stream;Subscriber;Observer;verify;Stream;sub;pub,7.916241884231567e-09;7.450580596923828e-09;5.122274160385132e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10,5,5,"[-5.5366315841674805, -4.999019622802734, -5.38402795791626, -6.45259952545166, -5.434040069580078, -0.02144377864897251]",0.9787845015525818
1,['    @Test\n    public void requestDelegates() {\n        ServerCallStreamObserver<Object> obs = mock(ServerCallStreamObserver.class);\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        final AtomicReference<Subscription> subscription = new AtomicReference<Subscription>();\n        doAnswer(new Answer() {\n            @Override\n            public Object answer(InvocationOnMock invocationOnMock) {\n                subscription.set((Subscription) invocationOnMock.getArguments()[0]);\n                return null;\n            }\n'],mock;Stream;do;Observer;Server;Atomic;Atomic;Stream;subscription;invocation,1.6298145055770874e-09;8.149072527885437e-10;8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.54421854019165, -5.000402927398682, -5.3911943435668945, -6.468081474304199, -5.472457408905029, -0.02117736265063286]",0.9790452122688293
1,['    @Test\n    public void onNextDelegates() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        ReactiveStreamObserverPublisherClient<Object> pub = new ReactiveStreamObserverPublisherClient<Object>(obs);\n        pub.subscribe(sub);\n\n        Object obj = new Object();\n\n        pub.onNext(obj);\n        verify(sub).onNext(obj);\n    }\n'],Call;Stream;Subscriber;Call;Publisher;Observer;Publisher;Client;class;on,3.3527612686157227e-08;1.6298145055770874e-08;8.731149137020111e-09;7.450580596923828e-09;5.587935447692871e-09;4.190951585769653e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;2.7939677238464355e-09,5,5,"[-5.552881240844727, -4.955165386199951, -5.418112754821777, -6.499483108520508, -5.486758232116699, -0.021227896213531494]",0.9789958000183105
1,['    @Test\n    public void onErrorDelegates() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        ReactiveStreamObserverPublisherClient<Object> pub = new ReactiveStreamObserverPublisherClient<Object>(obs);\n        pub.subscribe(sub);\n\n        Throwable obj = new Exception();\n\n        pub.onError(obj);\n        verify(sub).onError(obj);\n    }\n'],on;obs;Publisher;Stream;Client;new;Object;Throwable;Reactive;obj,1.3387762010097504e-09;1.3096723705530167e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5569682121276855, -4.953861713409424, -5.4173431396484375, -6.491061687469482, -5.486494541168213, -0.021238749846816063]",0.9789851903915405
1,['    @Test\n    public void onCompletedDelegates() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        ReactiveStreamObserverPublisherClient<Object> pub = new ReactiveStreamObserverPublisherClient<Object>(obs);\n        pub.subscribe(sub);\n\n        pub.onCompleted();\n        verify(sub).onComplete();\n    }\n'],mock;Reactive;mock;Observer;Completed;pub;obs;Call;sub;on,1.862645149230957e-09;1.5133991837501526e-09;1.1641532182693481e-09;9.89530235528946e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.516200542449951, -5.044561386108398, -5.373440265655518, -6.431886672973633, -5.396907329559326, -0.02147248201072216]",0.9787565469741821
1,['    @Test\n    public void requestDelegates() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        Subscriber<Object> sub = mock(Subscriber.class);\n\n        final AtomicReference<Subscription> subscription = new AtomicReference<Subscription>();\n        doAnswer(new Answer() {\n            @Override\n            public Object answer(InvocationOnMock invocationOnMock) {\n                subscription.set((Subscription) invocationOnMock.getArguments()[0]);\n                return null;\n            }\n'],Delegates;mock;do;Observer;Object;Answer;invocation;new;Atomic;Call,2.2118911147117615e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.402842700481415e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.547048568725586, -4.999234199523926, -5.395035743713379, -6.468222618103027, -5.476396560668945, -0.02113931253552437]",0.9790825843811035
1,"['    @Test\n    public void statusExceptionTriggersHandler() {\n        ClientResponseObserver<Object, Object> delegate = mock(ClientResponseObserver.class);\n        final AtomicBoolean called = new AtomicBoolean(false);\n\n        CancellableStreamObserver<Object, Object> observer = new CancellableStreamObserver<Object, Object>(delegate, new Runnable() {\n            @Override\n            public void run() {\n                called.set(true);\n            }\n']",mock;Boolean;Response;false;new;Triggers;Observer;Cancellable;observer;true,9.313225746154785e-10;4.729372449219227e-10;4.511093720793724e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.535366058349609, -4.92611837387085, -5.378237724304199, -6.452240943908691, -5.506191730499268, -0.021687377244234085]",0.9785460829734802
1,"['    @Test\n    public void statusRuntimeExceptionTriggersHandler() {\n        ClientResponseObserver<Object, Object> delegate = mock(ClientResponseObserver.class);\n        final AtomicBoolean called = new AtomicBoolean(false);\n\n        CancellableStreamObserver<Object, Object> observer = new CancellableStreamObserver<Object, Object>(delegate, new Runnable() {\n            @Override\n            public void run() {\n                called.set(true);\n            }\n']",status;delegate;new;Cancellable;mock;Object;Runtime;delegate;Observer;Object,1.1641532182693481e-09;1.1059455573558807e-09;4.94765117764473e-10;4.874891601502895e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.546106338500977, -4.91575813293457, -5.414054870605469, -6.478589057922363, -5.524240493774414, -0.021439343690872192]",0.9787888526916504
1,['    @Test\n    public void applySubscribes() {\n        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(16);\n\n        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();\n        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();\n\n        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);\n        assertThat(chunkSubscriber).isNotNull();\n\n        chunkSubscriber.onSubscribe(upstreamSubscription);\n        assertThat(downstreamSubscriber.upstreamSubscription).isNotNull();\n    }\n'],Chunker;new;Null;Subscription;Null;Subscribe;Subscriber;Chunker;Downstream;Subscriber,1.1932570487260818e-09;7.275957614183426e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9831426218152046e-10,5,5,"[-5.555835723876953, -5.008820056915283, -5.4433064460754395, -6.466952323913574, -5.494363784790039, -0.020746370777487755]",0.9794673323631287
1,['    @Test\n    public void requestOneGetsAChunk() {\n        int chunkSize = 16;\n        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);\n        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();\n        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();\n\n        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);\n        chunkSubscriber.onSubscribe(upstreamSubscription);\n\n        downstreamSubscriber.upstreamSubscription.request(1);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n    }\n'],Chunk;apply;Upstream;Downstream;upstream;Subscriber;request;Subscription;Subscriber;new,1.6007106751203537e-09;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;3.8198777474462986e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;3.055902197957039e-10,5,5,"[-5.555118560791016, -5.007217884063721, -5.413323879241943, -6.447004318237305, -5.4900665283203125, -0.020944612100720406]",0.9792733192443848
1,"['    @Test\n    public void requestOneSupplyOneDoesntRequestAnother() {\n        int chunkSize = 16;\n        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);\n        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();\n        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();\n\n        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);\n        chunkSubscriber.onSubscribe(upstreamSubscription);\n\n        downstreamSubscriber.upstreamSubscription.request(1);\n        send(chunkSubscriber, 1);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(chunkSize);\n    }\n']",Subscriber;Doesnt;Backpressure;Another;request;apply;Subscription;Subscriber;chunk;downstream,1.1641532182693481e-09;1.0913936421275139e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10;4.220055416226387e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.539579391479492, -5.011465549468994, -5.4402384757995605, -6.490119457244873, -5.487539768218994, -0.020799029618501663]",0.9794158935546875
1,['    @Test\n    public void requestManyGetsAChunkFirst() {\n        int chunkSize = 16;\n        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);\n        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();\n        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();\n\n        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);\n        chunkSubscriber.onSubscribe(upstreamSubscription);\n\n        downstreamSubscriber.upstreamSubscription.request(256);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n    }\n'],chunk;chunk;Subscription;Backpressure;Subscriber;Object;downstream;Subscriber;Requested;That,3.725290298461914e-08;2.0489096641540527e-08;8.149072527885437e-09;6.752088665962219e-09;5.704350769519806e-09;5.587935447692871e-09;5.587935447692871e-09;5.3551048040390015e-09;4.6566128730773926e-09;3.725290298461914e-09,5,5,"[-5.553196430206299, -5.003767967224121, -5.4056196212768555, -6.442996501922607, -5.491671562194824, -0.021010683849453926]",0.9792085289955139
1,"['    @Test\n    public void requestManyChunksRequestsAsSatisfiedAndStopsWhenComplete() {\n        int chunkSize = 3;\n        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);\n        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();\n        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();\n\n        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);\n        chunkSubscriber.onSubscribe(upstreamSubscription);\n\n        downstreamSubscriber.upstreamSubscription.request(9);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(chunkSize);\n\n        send(chunkSubscriber, 1);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(3);\n        send(chunkSubscriber, 1);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(3);\n        send(chunkSubscriber, 1);\n        // Chunk satisfied, request next chunk\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(6);\n\n        send(chunkSubscriber, 1);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(6);\n        send(chunkSubscriber, 1);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(6);\n        send(chunkSubscriber, 1);\n        // Chunk satisfied, request next chunk\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(9);\n\n        send(chunkSubscriber, 1);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(9);\n        send(chunkSubscriber, 1);\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(9);\n        send(chunkSubscriber, 1);\n        // Requested satisfied, do not request any more\n        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);\n        assertThat(upstreamSubscription.totalRequested).isEqualTo(9);\n    }\n']",Subscribe;Many;Chunks;Backpressure;chunk;Reactive;send;apply;Complete;Subscriber,2.3283064365386963e-09;1.6298145055770874e-09;1.3969838619232178e-09;8.87666828930378e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;6.257323548197746e-10,5,5,"[-5.440962314605713, -5.087111473083496, -5.429051876068115, -6.448598384857178, -5.4279937744140625, -0.021093910560011864]",0.9791269898414612
1,['    @Test\n    public void completePropagatesDown() {\n        int chunkSize = 3;\n        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);\n        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();\n        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();\n\n        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);\n        chunkSubscriber.onSubscribe(upstreamSubscription);\n\n        chunkSubscriber.onComplete();\n        assertThat(downstreamSubscriber.isComplete).isTrue();\n    }\n'],chunker;complete;Subscription;chunker;on;Subscriber;Subscriber;Size;upstream;Downstream,8.731149137020111e-10;8.149072527885437e-10;7.275957614183426e-10;5.529727786779404e-10;4.656612873077393e-10;4.6202330850064754e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.559928894042969, -4.95858097076416, -5.424445152282715, -6.470303535461426, -5.523428440093994, -0.02104010060429573]",0.9791796803474426
1,['    @Test\n    public void errorPropagatesDown() {\n        int chunkSize = 3;\n        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);\n        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();\n        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();\n\n        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);\n        chunkSubscriber.onSubscribe(upstreamSubscription);\n\n        Throwable t = new Throwable();\n        chunkSubscriber.onError(t);\n        assertThat(downstreamSubscriber.lastThrowable).isEqualTo(t);\n    }\n'],error;new;chunker;on;Propagates;Subscriber;Backpressure;Error;chunk;Subscriber,1.7462298274040222e-09;9.313225746154785e-10;7.275957614183426e-10;6.693881005048752e-10;5.820766091346741e-10;4.2928149923682213e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.543761730194092, -4.981361389160156, -5.426839351654053, -6.492341995239258, -5.5009589195251465, -0.020990023389458656]",0.9792287349700928
1,['    @Test\n    public void cancelPropagatesUp() {\n        int chunkSize = 3;\n        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);\n        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();\n        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();\n\n        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);\n        chunkSubscriber.onSubscribe(upstreamSubscription);\n\n        downstreamSubscriber.upstreamSubscription.cancel();\n        assertThat(upstreamSubscription.isCancelled).isTrue();\n    }\n'],Reactive;cancel;Subscribe;chunk;Backpressure;Subscriber;Subscription;Propagates;Chunker;Subscription,6.548361852765083e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.544133186340332, -4.986146450042725, -5.433444023132324, -6.494171142578125, -5.50127649307251, -0.0209214985370636]",0.9792959690093994
1,['    @Test\n    public void runPrimesThePump() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        when(obs.isReady()).thenReturn(true);\n        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);\n        Subscription sub = mock(Subscription.class);\n\n        handler.onSubscribe(sub);\n\n        handler.run();\n        verify(sub).request(1);\n    }\n'],mock;Reactive;Call;Call;Client;Subscription;Backpressure;request;Client;mock,2.3283064365386963e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.551067352294922, -4.949177265167236, -5.388245105743408, -6.455597877502441, -5.484532356262207, -0.02149406634271145]",0.9787352681159973
1,['    @Test\n    public void onNextKeepsPumpRunning() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        when(obs.isReady()).thenReturn(true);\n\n        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);\n        Subscription sub = mock(Subscription.class);\n\n        handler.onSubscribe(sub);\n\n        Object obj = new Object();\n        handler.onNext(obj);\n\n        verify(obs).onNext(obj);\n        verify(sub).request(1);\n    }\n'],Publisher;Running;Next;obs;obs;Next;on;Subscription;Backpressure;Client,1.0477378964424133e-09;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.549408912658691, -4.9854536056518555, -5.4306254386901855, -6.493746757507324, -5.488311767578125, -0.020972980186343193]",0.9792455434799194
1,"['    @Test\n    public void onNextStopsPump() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        when(obs.isReady()).thenReturn(false);\n\n        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);\n        Subscription sub = mock(Subscription.class);\n\n        handler.onSubscribe(sub);\n\n        Object obj = new Object();\n        handler.onNext(obj);\n\n        verify(obs).onNext(obj);\n        verify(sub, never()).request(1);\n    }\n']",Next;on;Observer;mock;Backpressure;Stops;Client;Backpressure;Publisher;Call,1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.545132160186768, -5.000716209411621, -5.4003586769104, -6.447878837585449, -5.4687981605529785, -0.02117736265063286]",0.9790453314781189
1,"['    @Test\n    public void exceptionInOnNextCancelsUpstreamSubscription() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        doThrow(new IllegalStateException(""won\'t be propagated to handler caller"")).when(obs).onNext(any());\n        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);\n        Subscription sub = mock(Subscription.class);\n        handler.onSubscribe(sub);\n        \n        handler.onNext(new Object());\n        verify(obs).cancel(anyString(), any(Throwable.class));\n        verify(obs).onError(any(Throwable.class));\n    }\n']",Next;Subscription;Observer;Subscription;mock;Object;Subscribe;handler;class;Illegal,8.149072527885437e-10;6.693881005048752e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.547513008117676, -4.996574401855469, -5.417367935180664, -6.457459926605225, -5.472646713256836, -0.021086672320961952]",0.9791340827941895
1,"['    @Test\n    public void exceptionInOnOnErrorCancelsUpstreamSubscription() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        doThrow(new IllegalStateException(""won\'t be propagated to handler caller"")).when(obs).onError(any(Throwable.class));\n        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);\n        Subscription sub = mock(Subscription.class);\n        handler.onSubscribe(sub);\n        \n        handler.onError(new RuntimeException());\n        verify(obs).cancel(anyString(), any(Throwable.class));\n    }\n']",Subscribe;Observer;Subscription;obs;mock;Stream;Reactive;Handler;On;sub,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.556876182556152, -4.978703022003174, -5.434839248657227, -6.494391441345215, -5.492610454559326, -0.02095266804099083]",0.9792653322219849
1,"['    @Test\n    public void exceptionInOnCompleteCancelsUpstreamSubscription() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        doThrow(new IllegalStateException(""won\'t be propagated to handler caller"")).when(obs).onCompleted();\n        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);\n        Subscription sub = mock(Subscription.class);\n        handler.onSubscribe(sub);\n        \n        handler.onComplete();\n        verify(obs).cancel(anyString(), any(Throwable.class));\n        verify(obs).onError(any(Throwable.class));\n    }\n']",Subscribe;Reactive;Publisher;Subscription;Stream;Call;Stream;Client;Completed;obs,1.280568540096283e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.556270599365234, -4.995763301849365, -5.441490173339844, -6.495186805725098, -5.491044044494629, -0.020812105387449265]",0.9794030785560608
1,['    @Test\n    public void onSubscribeCancelsSecondSubscription() {\n        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);\n        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);\n        Subscription sub1 = mock(Subscription.class);\n        Subscription sub2 = mock(Subscription.class);\n\n        handler.onSubscribe(sub1);\n        handler.onSubscribe(sub2);\n        \n        verify(sub2).cancel();\n    }\n'],Subscribe;mock;Subscribe;Subscription;Observer;Client;Client;on;Client;Call,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.748006515204906e-10;5.238689482212067e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.552346706390381, -4.98526668548584, -5.4131760597229, -6.450663089752197, -5.481205463409424, -0.02113942988216877]",0.979082465171814
1,"['    @Test\n    public void clientCanCancelServerStreamExplicitly() throws InterruptedException {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());\n        TestSubscriber<NumberProto.Number> subscription = Single.just(Empty.getDefaultInstance())\n                .as(stub::responsePressure)\n                .doOnNext(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .doOnComplete(() -> System.out.println(""Completed""))\n                .doOnCancel(() -> System.out.println(""Client canceled""))\n                .test();\n\n        Thread.sleep(250);\n        subscription.dispose();\n        Thread.sleep(250);\n\n        subscription.awaitTerminalEvent(3, TimeUnit.SECONDS);\n        // Cancellation may or may not deliver the last generated message due to delays in the gRPC processing thread\n        assertThat(Math.abs(subscription.valueCount() - svc.getLastNumberProduced())).isLessThanOrEqualTo(3);\n        assertThat(svc.wasCanceled()).isTrue();\n\n        errorRule.verifyNoError();\n    }\n']",Rule;Cancellation;Stub;Subscriber;Can;delays;Produced;Stream;stub;Less,8.149072527885437e-10;7.8580342233181e-10;5.820766091346741e-10;5.093170329928398e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0381564758718014e-10;3.92901711165905e-10;3.41970007866621e-10;3.41970007866621e-10,5,5,"[-5.4481072425842285, -5.085697650909424, -5.459157943725586, -6.484851837158203, -5.447330951690674, -0.020795058459043503]",0.9794196486473083
1,"['    @Test\n    public void clientCanCancelServerStreamImplicitly() throws InterruptedException {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());\n        TestSubscriber<NumberProto.Number> subscription =  Single.just(Empty.getDefaultInstance())\n                .as(stub::responsePressure)\n                .doOnNext(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .doOnComplete(() -> System.out.println(""Completed""))\n                .doOnCancel(() -> System.out.println(""Client canceled""))\n                .take(10)\n                .test();\n\n        // Consume some work\n        Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n        subscription.dispose();\n\n        subscription.awaitTerminalEvent(3, TimeUnit.SECONDS);\n        subscription.assertValueCount(10);\n        subscription.assertTerminated();\n        assertThat(svc.wasCanceled()).isTrue();\n\n        errorRule.verifyNoError();\n    }\n']",sv;verify;await;just;Subscriber;Numbers;Server;Proto;Implicitly;That,8.149072527885437e-10;6.83940015733242e-10;6.111804395914078e-10;4.656612873077393e-10;4.220055416226387e-10;3.5652192309498787e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.463809967041016, -5.082023620605469, -5.44775390625, -6.467101573944092, -5.444650650024414, -0.020839309319853783]",0.9793761968612671
1,"['    @Test\n    public void serverCanCancelClientStreamImplicitly() {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());\n\n        svc.setExplicitCancel(false);\n\n        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);\n        AtomicBoolean requestDidProduce = new AtomicBoolean(false);\n\n        Flowable<NumberProto.Number> request = Flowable\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .delay(10, TimeUnit.MILLISECONDS)\n                .map(CancellationPropagationIntegrationTest::protoNum)\n                .doOnNext(x -> {\n                    requestDidProduce.set(true);\n                    System.out.println(""Produced: "" + x.getNumber(0));\n                })\n                .doOnCancel(() -> {\n                    requestWasCanceled.set(true);\n                    System.out.println(""Client canceled"");\n                });\n\n        TestObserver<NumberProto.Number> observer = request\n                .as(stub::requestPressure)\n                .doOnSuccess(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .test();\n\n        observer.awaitTerminalEvent(3, TimeUnit.SECONDS);\n        observer.assertComplete();\n        observer.assertTerminated();\n\n        await().atMost(Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);\n\n        assertThat(requestWasCanceled.get()).isTrue();\n        assertThat(requestDidProduce.get()).isTrue();\n\n        errorRule.verifyNoError();\n    }\n']",ILLISECONDS;println;map;Propagation;Iterable;Produce;Flowable;add;sv;out,2.240994945168495e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.89530235528946e-10;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10,5,5,"[-5.471073627471924, -5.000809669494629, -5.425734043121338, -6.481834411621094, -5.502185821533203, -0.021172460168600082]",0.9790500998497009
1,"['    @Test\n    public void serverCanCancelClientStreamExplicitly() {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());\n\n        svc.setExplicitCancel(true);\n\n        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);\n        AtomicBoolean requestDidProduce = new AtomicBoolean(false);\n\n        Flowable<NumberProto.Number> request = Flowable\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .delay(10, TimeUnit.MILLISECONDS)\n                .map(CancellationPropagationIntegrationTest::protoNum)\n                .doOnNext(n -> {\n                    requestDidProduce.set(true);\n                    System.out.println(""P: "" + n.getNumber(0));\n                })\n                .doOnCancel(() -> {\n                    requestWasCanceled.set(true);\n                    System.out.println(""Client canceled"");\n                });\n\n        TestObserver<NumberProto.Number> observer = request\n                .as(stub::requestPressure)\n                .doOnSuccess(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .test();\n\n        observer.awaitTerminalEvent();\n        observer.assertComplete();\n        observer.assertTerminated();\n\n        await().atMost(Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);\n\n        assertThat(requestWasCanceled.get()).isTrue();\n        assertThat(requestDidProduce.get()).isTrue();\n\n        errorRule.verifyNoError();\n    }\n']",iterator;LEMENTS;Time;Flowable;anceled;add;server;stub;new;do,8.731149137020111e-10;6.693881005048752e-10;6.693881005048752e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.479106426239014, -4.993155002593994, -5.4176201820373535, -6.476406574249268, -5.505242347717285, -0.021223345771431923]",0.9790002703666687
1,"['    @Test\n    public void serverCanCancelClientStreamImplicitlyBidi() {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());\n\n        svc.setExplicitCancel(false);\n\n        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);\n        AtomicBoolean requestDidProduce = new AtomicBoolean(false);\n\n        Flowable<NumberProto.Number> request = Flowable\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .delay(10, TimeUnit.MILLISECONDS)\n                .map(CancellationPropagationIntegrationTest::protoNum)\n                .doOnNext(x -> {\n                    requestDidProduce.set(true);\n                    System.out.println(""Produced: "" + x.getNumber(0));\n                })\n                .doOnCancel(() -> {\n                    requestWasCanceled.set(true);\n                    System.out.println(""Client canceled"");\n                });\n\n        TestSubscriber<NumberProto.Number> observer = request\n                .compose(stub::twoWayPressure)\n                .doOnNext(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .test();\n\n        observer.awaitTerminalEvent(3, TimeUnit.SECONDS);\n        observer.assertTerminated();\n        assertThat(requestWasCanceled.get()).isTrue();\n        assertThat(requestDidProduce.get()).isTrue();\n\n        errorRule.verifyNoError();\n    }\n']",delay;println;map;Propagation;Atomic;out;set;out;Proto;proto,3.259629011154175e-09;2.270098775625229e-09;8.149072527885437e-10;7.8580342233181e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;4.94765117764473e-10;4.3655745685100555e-10,5,5,"[-5.459799289703369, -5.014890670776367, -5.426079273223877, -6.480405807495117, -5.495044231414795, -0.02115553617477417]",0.9790666699409485
1,"['    @Test\n    public void serverCanCancelClientStreamExplicitlyBidi() {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());\n\n        svc.setExplicitCancel(true);\n\n        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);\n        AtomicBoolean requestDidProduce = new AtomicBoolean(false);\n\n        Flowable<NumberProto.Number> request = Flowable\n                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)\n                .delay(10, TimeUnit.MILLISECONDS)\n                .map(CancellationPropagationIntegrationTest::protoNum)\n                .doOnNext(n -> {\n                    requestDidProduce.set(true);\n                    System.out.println(""P: "" + n.getNumber(0));\n                })\n                .doOnCancel(() -> {\n                    requestWasCanceled.set(true);\n                    System.out.println(""Client canceled"");\n                });\n\n        TestSubscriber<NumberProto.Number> observer = request\n                .compose(stub::twoWayPressure)\n                .doOnNext(number -> System.out.println(number.getNumber(0)))\n                .doOnError(throwable -> System.out.println(throwable.getMessage()))\n                .test();\n\n        observer.awaitTerminalEvent();\n        observer.assertTerminated();\n        assertThat(requestWasCanceled.get()).isTrue();\n        assertThat(requestDidProduce.get()).isTrue();\n\n        errorRule.verifyNoError();\n    }\n']",ILLISECONDS;map;do;LEMENTS;Flowable;new;Explicitly;NUMBER;println;Atomic,3.550667315721512e-09;1.280568540096283e-09;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.4609055519104, -5.014520645141602, -5.424657821655273, -6.479877948760986, -5.496169567108154, -0.02115565352141857]",0.9790664315223694
1,['    @Test\n    public void prematureResponseStreamDisposalShouldNotThrowUnhandledException() throws Exception {\n        TestService svc = new TestService();\n        serverRule.getServiceRegistry().addService(svc);\n\n        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());\n\n        // slowly process the response stream\n        Disposable subscription = stub.responsePressure(Empty.getDefaultInstance()).subscribe(n -> {\n            Thread.sleep(1000);\n        });\n\n        subscription.dispose();\n\n        Thread.sleep(200);\n        errorRule.verifyNoError();\n    }\n'],sleep;subscribe;Exception;Pressure;premature;Disposal;Stub;new;sv;sleep,8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.456968210637569e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.519343852996826, -5.023913383483887, -5.458570957183838, -6.488699436187744, -5.483148574829102, -0.020737146958708763]",0.9794763922691345
1,"['    @Test\n    public void oneToOne() {\n        RxGreeterGrpc.RxGreeterStub stub = RxGreeterGrpc.newRxStub(channel);\n        Single<HelloResponse> resp = Single.just(HelloRequest.getDefaultInstance()).compose(stub::sayHello);\n        TestObserver<HelloResponse> test = resp.test();\n\n        test.awaitTerminalEvent(3, TimeUnit.SECONDS);\n        test.assertError(t -> t instanceof StatusRuntimeException);\n        test.assertError(t -> ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);\n    }\n']",one;await;new;channel;SECONDS;Hello;Observer;Grpc;Hello;instanceof,9.313225746154785e-10;9.022187441587448e-10;6.402842700481415e-10;6.402842700481415e-10;4.94765117764473e-10;4.94765117764473e-10;4.802132025361061e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.549463272094727, -4.9675445556640625, -5.447355270385742, -6.517003059387207, -5.497394561767578, -0.020951032638549805]",0.9792670011520386
1,['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\tsuper.beforeEach();\n\t}\n'],Each;Before;Each;before;before;super;Each,1.862645149230957e-09;1.7462298274040222e-09;4.656612873077393e-10;2.3283064365386963e-10;0.0;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.6542510986328125, -4.9312262535095215, -5.469954967498779, -6.585082054138184, -5.53350305557251, -0.020472761243581772]",0.9797353744506836
1,"['\t@Test\n\tpublic void concatMapCB() throws Exception {\n\t\tSystem.out.println(""Start concatMapCB"");\n\t\tSystem.out.println(""\\n******** Using concatMap() *********"");\n\t\tParallelFlux<GetResult> concat = Flux.fromIterable(keyList).parallel(2).runOn(Schedulers.parallel())\n\t\t\t\t.concatMap(item -> cbGet(item)\n\t\t\t\t\t\t/* rCollection.get(item) */.doOnSubscribe((x) -> System.out.println("" +"" + rCat.incrementAndGet()))\n\t\t\t\t\t\t.doOnTerminate(() -> System.out.println("" -"" + rCat.decrementAndGet())));\n\t\tSystem.out.println(concat.sequential().collectList().block());\n\t}\n']",Subscribe;concat;lux;Result;println;Map;List;parallel;Get;item,1.3387762010097504e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.055902197957039e-10;2.9103830456733704e-10;2.473825588822365e-10;2.0372681319713593e-10,5,5,"[-5.518998622894287, -5.005431652069092, -5.429695129394531, -6.518256187438965, -5.484124660491943, -0.020942043513059616]",0.9792758226394653
1,"['\t@Test\n\tpublic void cbse() {\n\t\tLinkedList<LinkedList<Airport>> listOfLists = new LinkedList<>();\n\t\tAirport a = new Airport(UUID.randomUUID().toString(), ""iata"", ""lowp"");\n\t\tString last = null;\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tLinkedList<Airport> list = new LinkedList<>();\n\t\t\tfor (int j = 0; j < 10; j++) {\n\t\t\t\tlist.add(a.withId(UUID.randomUUID().toString()));\n\t\t\t\tlast = a.getId();\n\t\t\t}\n\t\t\tlistOfLists.add(list);\n\t\t}\n\t\tFlux<Object> af = Flux.fromIterable(listOfLists).concatMap(catalogToStore -> Flux.fromIterable(catalogToStore)\n\t\t\t\t.parallel(4).runOn(Schedulers.parallel()).concatMap((entity) -> airportRepository.save(entity)));\n\t\tList<Object> saved = af.collectList().block();\n\t\tSystem.out.println(""results.size() : "" + saved.size());\n\n\t\tString statement = ""select * from `"" + /*config().bucketname()*/ ""_default"" + ""` where META().id >= \'"" + last + ""\'"";\n\t\tSystem.out.println(""statement: "" + statement);\n\t\ttry {\n\t\t\tQueryResult qr = couchbaseTemplate.getCouchbaseClientFactory().getScope().query(statement,\n\t\t\t\t\tQueryOptions.queryOptions().profile(QueryProfile.PHASES));\n\t\t\tList<RemoveResult> rr = couchbaseTemplate.removeByQuery(Airport.class)\n\t\t\t\t\t.withOptions(QueryOptions.queryOptions().scanConsistency(QueryScanConsistency.REQUEST_PLUS)).all();\n\t\t\tSystem.out.println(qr.metaData().profile().get());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow e;\n\t\t}\n\t\tList<Airport> airports = airportRepository.findAll().collectList().block();\n\t\tassertEquals(0, airports.size(), ""should have been all deleted"");\n\t}\n']",size;saved;results;saved;block;Linked;random;couchbase;System;List,2.0954757928848267e-09;1.862645149230957e-09;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.435713768005371, -5.062453746795654, -5.388333320617676, -6.442526340484619, -5.447607517242432, -0.021383803337812424]",0.9788433313369751
1,"['\t@Test\n\tpublic void pairIdAndResult() {\n\t\tLinkedList<Airport> list = new LinkedList<>();\n\t\tAirport a = new Airport(UUID.randomUUID().toString(), ""iata"", ""lowp"");\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tlist.add(a.withId(UUID.randomUUID().toString()));\n\t\t}\n\t\tFlux<Object> af = Flux.fromIterable(list).concatMap((entity) -> airportRepository.save(entity));\n\t\tList<Object> saved = af.collectList().block();\n\t\tSystem.out.println(""results.size() : "" + saved.size());\n\t\tFlux<Pair<String, Mono<Airport>>> pairFlux = Flux.fromIterable(list)\n\t\t\t\t.map((airport) -> Pair.of(airport.getId(), airportRepository.findById(airport.getId())));\n\t\tList<Pair<String, Mono<Airport>>> airportPairs = pairFlux.collectList().block();\n\t\tfor (Pair<String, Mono<Airport>> airportPair : airportPairs) {\n\t\t\tSystem.out.println(""id: "" + airportPair.getFirst() + "" airport: "" + airportPair.getSecond().block());\n\t\t}\n\n\t}\n']",Iterable;lux;ata;Result;save;lux;map;size;concat;airport,8.731149137020111e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.5052266120910645, -5.034729480743408, -5.417313575744629, -6.475058078765869, -5.474292278289795, -0.020965274423360825]",0.9792529940605164
1,"['\t@Test\n\tpublic void flatMapCB() throws Exception {\n\t\tSystem.out.println(""Start flatMapCB"");\n\t\tParallelFlux<GetResult> concat = Flux.fromIterable(keyList).parallel(2).runOn(Schedulers.parallel())\n\t\t\t\t.flatMap(item -> cbGet(item) /* rCollection.get(item) */\n\t\t\t\t\t\t.doOnSubscribe((x) -> System.out.println("" +"" + rCat.incrementAndGet()))\n\t\t\t\t\t\t.doOnTerminate(() -> System.out.println("" -"" + rCat.decrementAndGet())));\n\t\tSystem.out.println(concat.sequential().collectList().block());\n\t}\n']",lux;flat;sequential;increment;Collection;parallel;Result;Exception;System;Map,2.0954757928848267e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.513308525085449, -4.998890399932861, -5.441469669342041, -6.523900508880615, -5.475992679595947, -0.020983953028917313]",0.9792346954345703
1,"['\t@Test\n\tpublic void flatMapSyncCB() throws Exception {\n\t\tSystem.out.println(""Start flatMapSyncCB"");\n\t\tSystem.out.println(""\\n******** Using flatSyncMap() *********"");\n\t\tParallelFlux<GetResult> concat = Flux.fromIterable(keyList).parallel(2).runOn(Schedulers.parallel())\n\t\t\t\t.flatMap(item -> Flux.just(cbGetSync(item) /* collection.get(item) */));\n\t\tSystem.out.println(concat.sequential().collectList().block());\n\t\t;\n\t}\n']",Map;CB;key;sequential;Flux;cb;On;CB;Iterable;item,9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.557540416717529, -4.948647975921631, -5.392442226409912, -6.496906280517578, -5.500054359436035, -0.021322423592209816]",0.9789032936096191
1,"['\t@Test\n\tpublic void flatMapVsConcatMapCB2() throws Exception {\n\t\tSystem.out.println(""Start flatMapCB2"");\n\t\tSystem.out.println(""\\n******** Using flatMap() *********"");\n\t\tParallelFlux<GetResult> flat = Flux.fromIterable(keyList).parallel(1).runOn(Schedulers.parallel())\n\t\t\t\t.flatMap(item -> rCollection.get(item).doOnSubscribe((x) -> System.out.println("" +"" + rCat.incrementAndGet()))\n\t\t\t\t\t\t.doOnTerminate(() -> System.out.println("" -"" + rCat.getAndDecrement())));\n\t\tSystem.out.println(flat.sequential().collectList().block());\n\t\tSystem.out.println(""Start concatMapCB"");\n\t\tSystem.out.println(""\\n******** Using concatMap() *********"");\n\t\tParallelFlux<GetResult> concat = Flux.fromIterable(keyList).parallel(2).runOn(Schedulers.parallel())\n\t\t\t\t.concatMap(item -> cbGet(item).doOnSubscribe((x) -> System.out.println("" +"" + rCat.incrementAndGet()))\n\t\t\t\t\t\t.doOnTerminate(() -> System.out.println("" -"" + rCat.getAndDecrement())));\n\t\tSystem.out.println(concat.sequential().collectList().block());\n\t\t;\n\t}\n']",Map;Subscribe;flat;Get;Flux;Using;concat;Start;sequential;Get,7.8580342233181e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.837623469531536e-10;2.764863893389702e-10,5,5,"[-5.478999137878418, -5.019173622131348, -5.39346981048584, -6.429792404174805, -5.458605766296387, -0.021430009976029396]",0.9787980914115906
1,['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\tsuper.beforeEach();\n\t\t// already setup by JavaIntegrationTests.beforeAll()\n\t\t// ApplicationContext ac = new AnnotationConfigApplicationContext(Config.class);\n\t\t// couchbaseTemplate = (CouchbaseTemplate) ac.getBean(COUCHBASE_TEMPLATE);\n\t\t// reactiveCouchbaseTemplate = (ReactiveCouchbaseTemplate) ac.getBean(REACTIVE_COUCHBASE_TEMPLATE);\n\t\t// ensure each test starts with clean state\n\n\t\tcouchbaseTemplate.removeByQuery(User.class).all();\n\t\tcouchbaseTemplate.findByQuery(User.class).withConsistency(QueryScanConsistency.REQUEST_PLUS).all();\n\t}\n'],Before;Each;Annotation;Consistency;before;Query;reactive;Query;remove;User,3.4924596548080444e-09;2.561137080192566e-09;2.561137080192566e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10,5,5,"[-5.4635748863220215, -5.11193323135376, -5.48989725112915, -6.541200637817383, -5.428255558013916, -0.020431999117136]",0.9797754287719727
1,['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\tsuper.beforeEach();\n\t\tcouchbaseTemplate.removeByQuery(User.class).all();\n\t\tcouchbaseTemplate.removeByQuery(UserAnnotated.class).all();\n\t\tcouchbaseTemplate.removeByQuery(UserAnnotated2.class).all();\n\t\tcouchbaseTemplate.removeByQuery(UserAnnotated3.class).all();\n\t\tcouchbaseTemplate.removeByQuery(User.class).withConsistency(QueryScanConsistency.REQUEST_PLUS).all();\n\t}\n'],remove;By;remove;Query;Template;Consistency;super;By;Template;class,1.6298145055770874e-09;1.1350493878126144e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.489518642425537, -5.116366386413574, -5.458130836486816, -6.510232925415039, -5.426726341247559, -0.02048303931951523]",0.9797253012657166
1,['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\tsuper.beforeEach();\n\t\tList<RemoveResult> r1 = reactiveCouchbaseTemplate.removeByQuery(User.class).all().collectList().block();\n\t\tList<RemoveResult> r2 = reactiveCouchbaseTemplate.removeByQuery(UserAnnotated.class).all().collectList().block();\n\t\tList<RemoveResult> r3 = reactiveCouchbaseTemplate.removeByQuery(UserAnnotated2.class).all().collectList().block();\n\t}\n'],By;Before;before;remove;By;Each;remove;ouchbase;List;collect,1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.712515071034431e-10;6.693881005048752e-10;5.820766091346741e-10,5,5,"[-5.496781349182129, -5.104310035705566, -5.48870849609375, -6.539740562438965, -5.431497573852539, -0.020330263301730156]",0.9798750281333923
1,['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\t// first call the super method\n\t\tsuper.beforeEach();\n\t\t// then do processing for this class\n\t\tcouchbaseTemplate.removeByQuery(User.class).inCollection(collectionName).all();\n\t\tcouchbaseTemplate.findByQuery(User.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t.inCollection(collectionName).all();\n\t\tcouchbaseTemplate.removeByQuery(Airport.class).inScope(scopeName).inCollection(collectionName).all();\n\t\tcouchbaseTemplate.findByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(scopeName)\n\t\t\t\t.inCollection(collectionName).all();\n\t\tcouchbaseTemplate.removeByQuery(Airport.class).inScope(otherScope).inCollection(otherCollection).all();\n\t\tcouchbaseTemplate.findByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).all();\n\t}\n'],REQUEST;Consistency;Scan;super;Scope;call;method;collection;Consistency;By,1.280568540096283e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10,5,5,"[-5.318217754364014, -5.185997486114502, -5.4357147216796875, -6.447669506072998, -5.263401031494141, -0.021852891892194748]",0.9783841371536255
1,['\t@AfterEach\n\tpublic void afterEach() {\n\t\t// first do processing for this class\n\t\tcouchbaseTemplate.removeByQuery(User.class).inCollection(collectionName).all();\n\t\t// query with REQUEST_PLUS to ensure that the remove has completed.\n\t\tcouchbaseTemplate.findByQuery(User.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t.inCollection(collectionName).all();\n\t\t// then call the super method\n\t\tsuper.afterEach();\n\t}\n'],Scan;in;Query;By;ouchbase;Each;after;collection;remove;Template,1.3969838619232178e-09;1.2223608791828156e-09;8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.497859477996826, -5.1175618171691895, -5.4783759117126465, -6.540676116943359, -5.4142632484436035, -0.020364370197057724]",0.9798415899276733
1,"['\t@Test\n\tpublic void existsById() { // 1\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tExistsOptions existsOptions = ExistsOptions.existsOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName).one(vie.withIcao(""low7"")).block();\n\t\ttry {\n\t\t\tBoolean exists = template.existsById().inScope(scopeName).inCollection(collectionName).withOptions(existsOptions)\n\t\t\t\t\t.one(saved.getId()).block();\n\t\t\tassertTrue(exists, ""Airport should exist: "" + saved.getId());\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId()).block();\n\t\t}\n\t}\n']",Duration;block;insert;collection;timeout;Airport;Options;ById;with;collection,1.1641532182693481e-09;9.604264050722122e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10,5,5,"[-5.516194820404053, -5.048686981201172, -5.438209056854248, -6.503468990325928, -5.468376159667969, -0.02071554586291313]",0.9794975519180298
1,"['\t@Test\n\tpublic void findByAnalytics() { // 2\n\t\tAnalyticsOptions options = AnalyticsOptions.analyticsOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName).one(vie.withIcao(""low8"")).block();\n\t\ttry {\n\t\t\tList<Airport> found = template.findByAnalytics(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(options).all().collectList().block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId()).block();\n\t\t}\n\t}\n']",Duration;collection;Analytics;Analytics;Scope;ById;Airport;collection;options;Second,1.6298145055770874e-09;9.313225746154785e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.533243656158447, -5.042135238647461, -5.42778205871582, -6.49355936050415, -5.4700140953063965, -0.020743919536471367]",0.9794697761535645
1,"['\t@Test\n\tpublic void findById() { // 3\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName).one(vie.withIcao(""low9"")).block();\n\t\ttry {\n\t\t\tAirport found = template.findById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(options).one(saved.getId()).block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId()).block();\n\t\t}\n\t}\n']",Get;Collection;ById;remove;Collection;options;Get;with;find;finally,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.50238037109375, -5.069822311401367, -5.432388782501221, -6.472290992736816, -5.449738502502441, -0.02079097367823124]",0.9794236421585083
1,"['\t@Test\n\tpublic void findByQuery() { // 4\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName).one(vie.withIcao(""lowa"")).block();\n\t\ttry {\n\t\t\tList<Airport> found = template.findByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t\t.inScope(scopeName).inCollection(collectionName).withOptions(options).all().collectList().block();\n\t\t\tassertEquals(saved.getId(), found.get(0).getId());\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId()).block();\n\t\t}\n\t}\n']",collection;Collection;ie;REQUEST;PLUS;Scope;Airport;in;Options;with,1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.516728401184082, -5.055125713348389, -5.429019451141357, -6.494512557983398, -5.466585636138916, -0.02073376066982746]",0.9794797301292419
1,"['\t@Test\n\tpublic void findFromReplicasById() { // 5\n\t\tGetAnyReplicaOptions options = GetAnyReplicaOptions.getAnyReplicaOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName).one(vie.withIcao(""lowb"")).block();\n\t\ttry {\n\t\t\tAirport found = template.findFromReplicasById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(options).any(saved.getId()).block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId()).block();\n\t\t}\n\t}\n']",Duration;ById;with;Replicas;Replica;find;Airport;scope;Replica;template,1.3969838619232178e-09;1.1641532182693481e-09;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.535981178283691, -5.043044567108154, -5.445125102996826, -6.501212120056152, -5.46603536605835, -0.020655175670981407]",0.979556679725647
1,"['\t@Test\n\tpublic void insertById() { // 6\n\t\tInsertOptions options = InsertOptions.insertOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).one(vie.withIcao(""lowc"").withId(UUID.randomUUID().toString())).block();\n\t\ttry {\n\t\t\tAirport found = template.findById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId()).block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId()).block();\n\t\t}\n\t}\n']",find;Second;block;timeout;of;found;scope;timeout;ById;template,1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5160956382751465, -5.044066429138184, -5.448223114013672, -6.516697406768799, -5.47822380065918, -0.02063976228237152]",0.9795717597007751
1,"['\t@Test\n\tpublic void removeById() { // 7\n\t\tRemoveOptions options = RemoveOptions.removeOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName).one(vie.withIcao(""lowd"")).block();\n\t\tRemoveResult removeResult = template.removeById().inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).one(saved.getId()).block();\n\t\tassertEquals(saved.getId(), removeResult.getId());\n\t}\n']",ById;Second;Collection;scope;saved;block;Airport;one;options;ById,1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;7.275957614183426e-10;6.693881005048752e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.523341178894043, -5.041995525360107, -5.466334342956543, -6.533540725708008, -5.468544960021973, -0.02056116983294487]",0.979648768901825
1,"['\t@Test\n\tpublic void removeByQuery() { // 8\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName).one(vie.withIcao(""lowe"")).block();\n\t\tList<RemoveResult> removeResults = template.removeByQuery(Airport.class)\n\t\t\t\t.withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).matching(Query.query(QueryCriteria.where(""iata"").is(vie.getIata()))).all().collectList()\n\t\t\t\t.block();\n\t\tassertEquals(saved.getId(), removeResults.get(0).getId());\n\t}\n']",REQUEST;Airport;get;Duration;of;Consistency;matching;Query;Results;Scope,8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;4.94765117764473e-10,5,5,"[-5.508074760437012, -5.062639236450195, -5.441074848175049, -6.503965854644775, -5.462287425994873, -0.02067105658352375]",0.9795411229133606
1,"['\t@Test\n\tpublic void replaceById() { // 9\n\t\tInsertOptions insertOptions = InsertOptions.insertOptions().timeout(Duration.ofSeconds(10));\n\t\tReplaceOptions options = ReplaceOptions.replaceOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(insertOptions).one(vie.withIcao(""lowe"")).block();\n\t\tAirport replaced = template.replaceById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).one(vie.withIcao(""newIcao"")).block();\n\t\ttry {\n\t\t\tAirport found = template.findById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId()).block();\n\t\t\tassertEquals(replaced, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId()).block();\n\t\t}\n\t}\n']",Duration;Second;Airport;Insert;Options;replace;ao;ById;finally;collection,9.89530235528946e-10;6.984919309616089e-10;6.257323548197746e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.487702369689941, -4.980849266052246, -5.402231216430664, -6.468452453613281, -5.463378429412842, -0.02153303474187851]",0.9786970615386963
1,"['\t@Test\n\tpublic void upsertById() { // 10\n\t\tUpsertOptions options = UpsertOptions.upsertOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\n\t\tAirport saved = template.upsertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).one(vie.withIcao(""lowf"")).block();\n\t\ttry {\n\t\t\tAirport found = template.findById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId()).block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId()).block();\n\t\t}\n\t}\n']",Get;ao;block;Get;psert;Equals;Options;one;Airport;ById,8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.529727786779404e-10;5.093170329928398e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.516972064971924, -5.060193061828613, -5.44377326965332, -6.502775192260742, -5.467700481414795, -0.02061675675213337]",0.9795942902565002
1,"['\t@Test\n\tpublic void existsByIdOther() { // 1\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tExistsOptions existsOptions = ExistsOptions.existsOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie.withIcao(""lowg""))\n\t\t\t\t.block();\n\t\ttry {\n\t\t\tBoolean exists = template.existsById().inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(existsOptions).one(saved.getId()).block();\n\t\t\tassertTrue(exists, ""Airport should exist: "" + saved.getId());\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",Other;Collection;insert;ie;Airport;Get;of;remove;template;Collection,1.3096723705530167e-09;1.1059455573558807e-09;7.566995918750763e-10;6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10;4.511093720793724e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.519876003265381, -5.06040096282959, -5.4458136558532715, -6.500832557678223, -5.469455718994141, -0.02058989740908146]",0.979620635509491
1,"['\t@Test\n\tpublic void findByAnalyticsOther() { // 2\n\t\tAnalyticsOptions options = AnalyticsOptions.analyticsOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie.withIcao(""lowh""))\n\t\t\t\t.block();\n\t\ttry {\n\t\t\tList<Airport> found = template.findByAnalytics(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(options).all().collectList().block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",Collection;saved;one;Second;Other;By;ao;analytics;Options;find,9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.5296950340271, -5.0480637550354, -5.422670364379883, -6.491915702819824, -5.469758987426758, -0.0207460206001997]",0.9794678092002869
1,"['\t@Test\n\tpublic void findByIdOther() { // 3\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie.withIcao(""lowi""))\n\t\t\t\t.block();\n\t\ttry {\n\t\t\tAirport found = template.findById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(options).one(saved.getId()).block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",template;low;get;Other;Duration;with;template;Scope;ById;Options,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.535043239593506, -5.054920196533203, -5.45028829574585, -6.500315189361572, -5.468062877655029, -0.020551126450300217]",0.9796586036682129
1,"['\t@Test\n\tpublic void findByQueryOther() { // 4\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie.withIcao(""lowj""))\n\t\t\t\t.block();\n\t\ttry {\n\t\t\tList<Airport> found = template.findByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t\t.inScope(otherScope).inCollection(otherCollection).withOptions(options).all().collectList().block();\n\t\t\tassertEquals(saved.getId(), found.get(0).getId());\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",timeout;Query;Second;Query;List;By;Options;Equals;options;Scope,1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.515394687652588, -5.060145854949951, -5.425467014312744, -6.490337371826172, -5.469526290893555, -0.020716363564133644]",0.9794967174530029
1,"['\t@Test\n\tpublic void findFromReplicasByIdOther() { // 5\n\t\tGetAnyReplicaOptions options = GetAnyReplicaOptions.getAnyReplicaOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie.withIcao(""lowk""))\n\t\t\t\t.block();\n\t\ttry {\n\t\t\tAirport found = template.findFromReplicasById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(options).any(saved.getId()).block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",From;low;Duration;Collection;ao;in;Collection;Collection;timeout;one,9.604264050722122e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.538227081298828, -5.042281627655029, -5.442123889923096, -6.499411106109619, -5.474426746368408, -0.020631004124879837]",0.9795802235603333
1,"['\t@Test\n\tpublic void insertByIdOther() { // 6\n\t\tInsertOptions options = InsertOptions.insertOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).one(vie.withIcao(""lowl"").withId(UUID.randomUUID().toString())).block();\n\t\ttry {\n\t\t\tAirport found = template.findById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId()).block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",Other;Insert;Duration;with;Scope;ById;find;template;insert;Airport,1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.506094932556152, -5.083319187164307, -5.457542419433594, -6.508120059967041, -5.4609575271606445, -0.020474279299378395]",0.9797340035438538
1,"['\t@Test\n\tpublic void removeByIdOther() { // 7\n\t\tRemoveOptions options = RemoveOptions.removeOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie.withIcao(""lowm""))\n\t\t\t\t.block();\n\t\tRemoveResult removeResult = template.removeById().inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).one(saved.getId()).block();\n\t\tassertEquals(saved.getId(), removeResult.getId());\n\t}\n']",Second;saved;low;Remove;Collection;Duration;Airport;Options;Result;remove,9.167706593871117e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5423197746276855, -5.038968086242676, -5.458810806274414, -6.521626949310303, -5.477421760559082, -0.020516907796263695]",0.9796921610832214
1,"['\t@Test\n\tpublic void removeByQueryOther() { // 8\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie.withIcao(""lown""))\n\t\t\t\t.block();\n\t\tList<RemoveResult> removeResults = template.removeByQuery(Airport.class)\n\t\t\t\t.withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).matching(Query.query(QueryCriteria.where(""iata"").is(vie.getIata()))).all().collectList()\n\t\t\t\t.block();\n\t\tassertEquals(saved.getId(), removeResults.get(0).getId());\n\t}\n']",Duration;timeout;saved;ById;template;REQUEST;Other;Query;Consistency;aved,4.6566128730773926e-09;3.725290298461914e-09;1.862645149230957e-09;1.862645149230957e-09;1.4551915228366852e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.89530235528946e-10;9.89530235528946e-10,5,5,"[-5.49957275390625, -4.9887614250183105, -5.402246475219727, -6.483514785766602, -5.48288631439209, -0.021320555359125137]",0.9789052605628967
1,"['\t@Test\n\tpublic void replaceByIdOther() { // 9\n\t\tInsertOptions insertOptions = InsertOptions.insertOptions().timeout(Duration.ofSeconds(10));\n\t\tReplaceOptions options = ReplaceOptions.replaceOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(insertOptions).one(vie.withIcao(""lown"")).block();\n\t\tAirport replaced = template.replaceById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).one(vie.withIcao(""newIcao"")).block();\n\t\ttry {\n\t\t\tAirport found = template.findById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId()).block();\n\t\t\tassertEquals(replaced, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",timeout;Replace;replace;ao;timeout;replace;ById;with;Insert;Options,1.1641532182693481e-09;9.167706593871117e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.507970809936523, -5.0626935958862305, -5.43832540512085, -6.487832069396973, -5.456590175628662, -0.02073294296860695]",0.979480504989624
1,"['\t@Test\n\tpublic void upsertByIdOther() { // 10\n\t\tUpsertOptions options = UpsertOptions.upsertOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\n\t\tAirport saved = template.upsertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).one(vie.withIcao(""lowo"")).block();\n\t\ttry {\n\t\t\tAirport found = template.findById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId()).block();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",ById;Collection;ie;found;upsert;Options;low;Scope;Options;one,1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.516050815582275, -5.067249774932861, -5.440311431884766, -6.496740341186523, -5.465133190155029, -0.020610567182302475]",0.9796003699302673
1,"['\t@Test\n\tpublic void existsByIdOptions() { // 1 - Options\n\t\tExistsOptions options = ExistsOptions.existsOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(UnambiguousTimeoutException.class, () -> template.existsById().inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.getId()).block());\n\t}\n']",Duration;in;ie;exists;ById;Throws;Collection;Options;of;Options,1.979060471057892e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.560785293579102, -4.972355365753174, -5.400891304016113, -6.5073137283325195, -5.476859092712402, -0.021182846277952194]",0.9790399074554443
1,"['\t@Test\n\tpublic void findByAnalyticsOptions() { // 2\n\t\tAnalyticsOptions options = AnalyticsOptions.analyticsOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> template.findByAnalytics(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).all().collectList().block());\n\t}\n']",Analytics;find;Collection;other;Options;anos;Analytics;analytics;Timeout;in,1.8044374883174896e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.54326057434082, -4.954658031463623, -5.381176948547363, -6.500335693359375, -5.468327522277832, -0.02151774987578392]",0.9787120819091797
1,"['\t@Test\n\tpublic void findByIdOptions() { // 3\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(UnambiguousTimeoutException.class, () -> template.findById(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.getId()).block());\n\t}\n']",Options;Scope;anos;Duration;timeout;Collection;Scope;ie;in;one,6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.5605058670043945, -4.96870756149292, -5.403367042541504, -6.507840156555176, -5.480253219604492, -0.021183080971240997]",0.97903972864151
1,"['\t@Test\n\tpublic void findByQueryOptions() { // 4\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class,\n\t\t\t\t() -> template.findByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(otherScope)\n\t\t\t\t\t\t.inCollection(otherCollection).withOptions(options).all().collectList().block());\n\t}\n']",Ambiguous;Collection;with;Collection;Duration;Scope;in;PLUS;Options;By,1.0913936421275139e-09;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.549200057983398, -4.9857330322265625, -5.394204616546631, -6.496489524841309, -5.485236644744873, -0.021146433427929878]",0.9790756106376648
1,"['\t@Test\n\tpublic void findFromReplicasByIdOptions() { // 5\n\t\tGetAnyReplicaOptions options = GetAnyReplicaOptions.getAnyReplicaOptions().timeout(Duration.ofNanos(1000));\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie)\n\t\t\t\t.block();\n\t\ttry {\n\t\t\tAirport found = template.findFromReplicasById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(options).any(saved.getId()).block();\n\t\t\tassertNull(found, ""should not have found document in short timeout"");\n\t\t} finally {\n\t\t\ttemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId()).block();\n\t\t}\n\t}\n']",finally;block;aved;other;short;Replicas;ById;timeout;Scope;Replica,1.862645149230957e-09;1.862645149230957e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.5353288650512695, -5.0325541496276855, -5.433417320251465, -6.503486633300781, -5.4876790046691895, -0.020683318376541138]",0.9795292019844055
1,"['\t@Test\n\tpublic void insertByIdOptions() { // 6\n\t\tInsertOptions options = InsertOptions.insertOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> template.insertById(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.withId(UUID.randomUUID().toString())).block());\n\t}\n']",Airport;Scope;in;UID;template;Collection;Throws;with;options;other,1.5133991837501526e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.57276725769043, -4.959099769592285, -5.406438827514648, -6.508062362670898, -5.496490478515625, -0.021120872348546982]",0.9791007041931152
1,"['\t@Test\n\tpublic void removeByIdOptions() { // 7 - options\n\t\tAirport saved = template.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection).one(vie)\n\t\t\t\t.block();\n\t\tRemoveOptions options = RemoveOptions.removeOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> template.removeById().inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.getId()).block());\n\n\t}\n']",Collection;Airport;anos;timeout;ById;Ambiguous;Collection;Scope;Scope;with,9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.912159733474255e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.526922225952148, -5.034867763519287, -5.438302516937256, -6.524925231933594, -5.4569501876831055, -0.020779531449079514]",0.9794348478317261
1,"['\t@Test\n\tpublic void removeByQueryOptions() { // 8 - options\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class,\n\t\t\t\t() -> template.removeByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t\t\t.inScope(otherScope).inCollection(otherCollection).withOptions(options)\n\t\t\t\t\t\t.matching(Query.query(QueryCriteria.where(""iata"").is(vie.getIata()))).all().collectList().block());\n\t}\n']",Consistency;Collection;with;block;Throws;remove;Query;Options;Airport;Scan,1.280568540096283e-09;9.604264050722122e-10;9.313225746154785e-10;6.402842700481415e-10;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;5.238689482212067e-10,5,5,"[-5.526920795440674, -5.023068904876709, -5.430020809173584, -6.513819217681885, -5.480045795440674, -0.02081257291138172]",0.9794025421142578
1,"['\t@Test\n\tpublic void replaceByIdOptions() { // 9 - options\n\t\tReplaceOptions options = ReplaceOptions.replaceOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> template.replaceById(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.withIcao(""newIcao"")).block());\n\t}\n']",block;ao;Collection;anos;ie;Throws;with;ao;ById;template,1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.556729793548584, -4.984401702880859, -5.410066604614258, -6.507072925567627, -5.470611572265625, -0.021099161356687546]",0.9791218638420105
1,"['\t@Test\n\tpublic void upsertByIdOptions() { // 10 - options\n\t\tUpsertOptions options = UpsertOptions.upsertOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> template.upsertById(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie).block());\n\t}\n']",psert;anos;Collection;Collection;ById;Ambiguous;options;Options;options;Exception,1.2223608791828156e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.560140132904053, -4.9771246910095215, -5.382287502288818, -6.476485252380371, -5.487172603607178, -0.021242134273052216]",0.9789819121360779
1,"['\t@Test\n\tpublic void testNullValue() {\n\t\tQueryCriteria c = where(i(""name"")).is(null);\n\t\tassertEquals(""`name` = null"", c.export());\n\t}\n']",null;Equals;name;Query;where;null;name;Value;Criteria;export,8.149072527885437e-10;1.4551915228366852e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-5.589175224304199, -4.9656219482421875, -5.396819591522217, -6.487659454345703, -5.481049537658691, -0.021151801571249962]",0.9790701866149902
1,['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\t// first call the super method\n\t\tsuper.beforeEach();\n\t\t// then do processing for this class\n\t\tcouchbaseTemplate.removeByQuery(User.class).inCollection(collectionName).all();\n\t\tcouchbaseTemplate.findByQuery(User.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t.inCollection(collectionName).all();\n\t\tcouchbaseTemplate.removeByQuery(Airport.class).inScope(scopeName).inCollection(collectionName).all();\n\t\tcouchbaseTemplate.findByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(scopeName)\n\t\t\t\t.inCollection(collectionName).all();\n\t\tcouchbaseTemplate.removeByQuery(Airport.class).inScope(otherScope).inCollection(otherCollection).all();\n\t\tcouchbaseTemplate.findByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).all();\n\t}\n'],REQUEST;Consistency;Scan;super;Scope;call;method;collection;Consistency;By,1.280568540096283e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10,5,5,"[-5.318217754364014, -5.185997486114502, -5.4357147216796875, -6.447669506072998, -5.263401031494141, -0.021852891892194748]",0.9783841371536255
1,['\t@AfterEach\n\tpublic void afterEach() {\n\t\t// first do processing for this class\n\t\tcouchbaseTemplate.removeByQuery(User.class).inCollection(collectionName).all();\n\t\t// query with REQUEST_PLUS to ensure that the remove has completed.\n\t\tcouchbaseTemplate.findByQuery(User.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t.inCollection(collectionName).all();\n\t\t// then call the super method\n\t\tsuper.afterEach();\n\t}\n'],Scan;in;Query;By;ouchbase;Each;after;collection;remove;Template,1.3969838619232178e-09;1.2223608791828156e-09;8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.497859477996826, -5.1175618171691895, -5.4783759117126465, -6.540676116943359, -5.4142632484436035, -0.020364370197057724]",0.9798415899276733
1,"['\t@Test\n\tpublic void existsById() { // 1\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tExistsOptions existsOptions = ExistsOptions.existsOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tBoolean exists = couchbaseTemplate.existsById().inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(existsOptions).one(saved.getId());\n\t\t\tassertTrue(exists, ""Airport should exist: "" + saved.getId());\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId());\n\t\t}\n\t}\n']",Collection;timeout;Get;Options;in;Exists;Second;Options;one;Boolean,1.1641532182693481e-09;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.534133434295654, -5.047187805175781, -5.4421844482421875, -6.511416912078857, -5.4838337898254395, -0.020556731149554253]",0.9796532392501831
1,"['\t@Test\n\tpublic void findByAnalytics() { // 2\n\t\tAnalyticsOptions options = AnalyticsOptions.analyticsOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tList<Airport> found = couchbaseTemplate.findByAnalytics(Airport.class).inScope(scopeName)\n\t\t\t\t\t.inCollection(collectionName).withOptions(options).all();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId());\n\t\t}\n\t}\n']",Analytics;Duration;couchbase;Airport;Options;one;collection;aved;options;Collection,1.6880221664905548e-09;1.6298145055770874e-09;1.0186340659856796e-09;5.675246939063072e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.541956901550293, -5.03633975982666, -5.418200969696045, -6.498138904571533, -5.473265171051025, -0.020769372582435608]",0.9794448018074036
1,"['\t@Test\n\tpublic void findById() { // 3\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(options).one(saved.getId());\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId());\n\t\t}\n\t}\n']",Airport;Second;find;Collection;of;Get;ById;ById;one;collection,9.022187441587448e-10;8.440110832452774e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10,5,5,"[-5.544269561767578, -5.046149253845215, -5.447467803955078, -6.509101867675781, -5.48000955581665, -0.020519360899925232]",0.9796898365020752
1,"['\t@Test\n\tpublic void findByQuery() { // 4\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tList<Airport> found = couchbaseTemplate.findByQuery(Airport.class)\n\t\t\t\t\t.withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(options).all();\n\t\t\tassertEquals(saved.getId(), found.get(0).getId());\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId());\n\t\t}\n\t}\n']",Duration;Query;aved;couchbase;one;in;scope;in;in;Name,3.259629011154175e-09;1.280568540096283e-09;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.525605201721191, -5.05720329284668, -5.436493873596191, -6.504884719848633, -5.474750518798828, -0.020599590614438057]",0.9796111583709717
1,"['\t@Test\n\tpublic void findFromReplicasById() { // 5\n\t\tGetAnyReplicaOptions options = GetAnyReplicaOptions.getAnyReplicaOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findFromReplicasById(Airport.class).inScope(scopeName)\n\t\t\t\t\t.inCollection(collectionName).withOptions(options).any(saved.getId());\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId());\n\t\t}\n\t}\n']",Replica;Replicas;Second;Collection;Duration;with;Scope;timeout;collection;ie,1.5133991837501526e-09;1.0186340659856796e-09;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.541378021240234, -5.04364538192749, -5.437495231628418, -6.505010604858398, -5.471816539764404, -0.02063252218067646]",0.9795787334442139
1,"['\t@Test\n\tpublic void insertById() { // 6\n\t\tInsertOptions options = InsertOptions.insertOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).one(vie.withId(UUID.randomUUID().toString()));\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId());\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId());\n\t\t}\n\t}\n']",timeout;timeout;ie;Template;one;Template;insert;get;found;in,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.51259183883667, -5.072175979614258, -5.471113681793213, -6.528064727783203, -5.478877544403076, -0.020352456718683243]",0.9798532724380493
1,"['\t@Test\n\tpublic void removeById() { // 7\n\t\tRemoveOptions options = RemoveOptions.removeOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.one(vie);\n\t\tRemoveResult removeResult = couchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).one(saved.getId());\n\t\tassertEquals(saved.getId(), removeResult.getId());\n\t}\n']",Template;couchbase;Collection;in;ById;Options;Airport;Template;scope;insert,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.542004108428955, -5.031763076782227, -5.459753036499023, -6.531617641448975, -5.484947204589844, -0.020515039563179016]",0.9796940684318542
1,"['\t@Test\n\tpublic void removeByQuery() { // 8\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.one(vie);\n\t\tList<RemoveResult> removeResults = couchbaseTemplate.removeByQuery(Airport.class)\n\t\t\t\t.withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).matching(Query.query(QueryCriteria.where(""iata"").is(vie.getIata()))).all();\n\t\tassertEquals(saved.getId(), removeResults.get(0).getId());\n\t}\n']",By;timeout;PLUS;collection;Options;of;Equals;ie;Second;Airport,1.0477378964424133e-09;1.0477378964424133e-09;8.87666828930378e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.51695442199707, -5.058078765869141, -5.444692134857178, -6.514012336730957, -5.471823692321777, -0.020591650158166885]",0.9796189069747925
1,"['\t@Test\n\tpublic void replaceById() { // 9\n\t\tInsertOptions insertOptions = InsertOptions.insertOptions().timeout(Duration.ofSeconds(10));\n\t\tReplaceOptions options = ReplaceOptions.replaceOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(insertOptions).one(vie);\n\t\tAirport replaced = couchbaseTemplate.replaceById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).one(vie.withIcao(""newIcao""));\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId());\n\t\t\tassertEquals(replaced, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId());\n\t\t}\n\t}\n']",timeout;Duration;couchbase;saved;couchbase;ie;Template;timeout;of;Collection,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.497003078460693, -5.096245288848877, -5.45743989944458, -6.496222019195557, -5.4490275382995605, -0.02050160802900791]",0.9797072410583496
1,"['\t@Test\n\tpublic void upsertById() { // 10\n\t\tUpsertOptions options = UpsertOptions.upsertOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\n\t\tAirport saved = couchbaseTemplate.upsertById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t.withOptions(options).one(vie);\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findById(Airport.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId());\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(scopeName).inCollection(collectionName).one(saved.getId());\n\t\t}\n\t}\n']",Airport;ById;timeout;in;Options;Template;scope;options;options;Upsert,9.89530235528946e-10;6.693881005048752e-10;5.820766091346741e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.5311479568481445, -5.051247596740723, -5.441184043884277, -6.509826183319092, -5.48323917388916, -0.020551476627588272]",0.9796582460403442
1,"['\t@Test\n\tpublic void existsByIdOther() { // 1\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tExistsOptions existsOptions = ExistsOptions.existsOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tBoolean exists = couchbaseTemplate.existsById().inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(existsOptions).one(saved.getId());\n\t\t\tassertTrue(exists, ""Airport should exist: "" + saved.getId());\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",Collection;Exists;Other;timeout;ie;get;options;couchbase;Second;ById,6.984919309616089e-10;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.536102294921875, -5.055043697357178, -5.441032409667969, -6.504059314727783, -5.478226661682129, -0.02053746208548546]",0.9796720147132874
1,"['\t@Test\n\tpublic void findByAnalyticsOther() { // 2\n\t\tAnalyticsOptions options = AnalyticsOptions.analyticsOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tList<Airport> found = couchbaseTemplate.findByAnalytics(Airport.class).inScope(otherScope)\n\t\t\t\t\t.inCollection(otherCollection).withOptions(options).all();\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",couchbase;Second;timeout;Options;Analytics;List;Other;Scope;in;aved,1.3387762010097504e-09;1.1641532182693481e-09;9.313225746154785e-10;6.402842700481415e-10;5.238689482212067e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.537499904632568, -5.06475830078125, -5.421820163726807, -6.466267108917236, -5.464725494384766, -0.020671524107456207]",0.9795405268669128
1,"['\t@Test\n\tpublic void findByIdOther() { // 3\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(options).one(saved.getId());\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",couchbase;timeout;saved;ById;ouchbase;ie;Template;Collection;Scope;Scope,1.0477378964424133e-09;9.022187441587448e-10;7.275957614183426e-10;7.275957614183426e-10;6.402842700481415e-10;5.820766091346741e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.544969081878662, -5.052091121673584, -5.4426140785217285, -6.499654769897461, -5.474532604217529, -0.020536761730909348]",0.9796726703643799
1,"['\t@Test\n\tpublic void findByQueryOther() { // 4\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tList<Airport> found = couchbaseTemplate.findByQuery(Airport.class)\n\t\t\t\t\t.withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(options).all();\n\t\t\tassertEquals(saved.getId(), found.get(0).getId());\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",couchbase;find;By;PLUS;REQUEST;Collection;Scope;ById;Collection;one,1.4842953532934189e-09;9.604264050722122e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.5233283042907715, -5.064378261566162, -5.436251640319824, -6.501777172088623, -5.472993850708008, -0.020575884729623795]",0.9796344637870789
1,"['\t@Test\n\tpublic void findFromReplicasByIdOther() { // 5\n\t\tGetAnyReplicaOptions options = GetAnyReplicaOptions.getAnyReplicaOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findFromReplicasById(Airport.class).inScope(otherScope)\n\t\t\t\t\t.inCollection(otherCollection).withOptions(options).any(saved.getId());\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",Replica;finally;Replica;Duration;Get;Airport;From;Collection;Collection;ById,1.1350493878126144e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;7.566995918750763e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.53616189956665, -5.047684192657471, -5.437920570373535, -6.503235816955566, -5.467344284057617, -0.02064700238406658]",0.9795646667480469
1,"['\t@Test\n\tpublic void insertByIdOther() { // 6\n\t\tInsertOptions options = InsertOptions.insertOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).one(vie.withId(UUID.randomUUID().toString()));\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId());\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",ById;timeout;Airport;Other;UID;random;one;Get;ouchbase;found,1.1641532182693481e-09;1.0477378964424133e-09;6.475602276623249e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.515011310577393, -5.080182075500488, -5.464447498321533, -6.515153408050537, -5.471518039703369, -0.020371029153466225]",0.9798349738121033
1,"['\t@Test\n\tpublic void removeByIdOther() { // 7\n\t\tRemoveOptions options = RemoveOptions.removeOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\tRemoveResult removeResult = couchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).one(saved.getId());\n\t\tassertEquals(saved.getId(), removeResult.getId());\n\t}\n']",couchbase;Template;in;Options;remove;other;Scope;class;ById;ie,9.313225746154785e-10;5.238689482212067e-10;4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.5461931228637695, -5.0346808433532715, -5.454690933227539, -6.5238542556762695, -5.481130599975586, -0.020528703927993774]",0.979680597782135
1,"['\t@Test\n\tpublic void removeByQueryOther() { // 8\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\tList<RemoveResult> removeResults = couchbaseTemplate.removeByQuery(Airport.class)\n\t\t\t\t.withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).matching(Query.query(QueryCriteria.where(""iata"").is(vie.getIata()))).all();\n\t\tassertEquals(saved.getId(), removeResults.get(0).getId());\n\t}\n']",Other;By;Airport;Equals;Duration;Scope;Consistency;Query;Consistency;ie,6.402842700481415e-10;4.94765117764473e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.513906955718994, -5.057990074157715, -5.441671848297119, -6.5116868019104, -5.471360683441162, -0.020623646676540375]",0.9795876741409302
1,"['\t@Test\n\tpublic void replaceByIdOther() { // 9\n\t\tInsertOptions insertOptions = InsertOptions.insertOptions().timeout(Duration.ofSeconds(10));\n\t\tReplaceOptions options = ReplaceOptions.replaceOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(insertOptions).one(vie);\n\t\tAirport replaced = couchbaseTemplate.replaceById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).one(vie.withIcao(""newIcao""));\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId());\n\t\t\tassertEquals(replaced, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",Second;timeout;timeout;ao;ao;insert;one;one;found;ouchbase,7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.500419616699219, -5.098933696746826, -5.453919887542725, -6.487832546234131, -5.445913791656494, -0.02051258645951748]",0.9796964526176453
1,"['\t@Test\n\tpublic void upsertByIdOther() { // 10\n\t\tUpsertOptions options = UpsertOptions.upsertOptions().timeout(Duration.ofSeconds(10));\n\t\tGetOptions getOptions = GetOptions.getOptions().timeout(Duration.ofSeconds(10));\n\n\t\tAirport saved = couchbaseTemplate.upsertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.withOptions(options).one(vie);\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t\t.withOptions(getOptions).one(saved.getId());\n\t\t\tassertEquals(saved, found);\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",upsert;upsert;Template;Options;Duration;timeout;ById;Options;aved;saved,5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.52657413482666, -5.064889430999756, -5.438570499420166, -6.502856731414795, -5.473593235015869, -0.02054481953382492]",0.9796648025512695
1,"['\t@Test\n\tpublic void existsByIdOptions() { // 1 - Options\n\t\tExistsOptions options = ExistsOptions.existsOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(UnambiguousTimeoutException.class, () -> couchbaseTemplate.existsById().inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.getId()));\n\t}\n']",Template;options;Exception;ie;Scope;in;Options;anos;Unambiguous;get,1.1059455573558807e-09;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10,5,5,"[-5.550169467926025, -4.965545654296875, -5.397976398468018, -6.510545253753662, -5.4797444343566895, -0.02126932516694069]",0.9789552688598633
1,"['\t@Test\n\tpublic void findByAnalyticsOptions() { // 2\n\t\tAnalyticsOptions options = AnalyticsOptions.analyticsOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> couchbaseTemplate.findByAnalytics(Airport.class)\n\t\t\t\t.inScope(otherScope).inCollection(otherCollection).withOptions(options).all());\n\t}\n']",couchbase;timeout;By;of;Analytics;Options;Timeout;in;find;options,9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.559152126312256, -4.952804088592529, -5.376932621002197, -6.4885358810424805, -5.478785991668701, -0.021461397409439087]",0.9787672758102417
1,"['\t@Test\n\tpublic void findByIdOptions() { // 3\n\t\tGetOptions options = GetOptions.getOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(UnambiguousTimeoutException.class, () -> couchbaseTemplate.findById(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.getId()));\n\t}\n']",Duration;Timeout;options;Scope;Scope;with;Get;Options;Exception;class,1.1641532182693481e-09;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.550886631011963, -4.969363689422607, -5.398330211639404, -6.507164478302002, -5.479162693023682, -0.021245401352643967]",0.9789788126945496
1,"['\t@Test\n\tpublic void findByQueryOptions() { // 4\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class,\n\t\t\t\t() -> couchbaseTemplate.findByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t\t\t.inScope(otherScope).inCollection(otherCollection).withOptions(options).all());\n\t}\n']",query;Scan;Consistency;anos;options;other;Options;Options;with;of,1.1059455573558807e-09;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.551621437072754, -4.986902713775635, -5.405365943908691, -6.5070061683654785, -5.493198394775391, -0.021027492359280586]",0.9791920185089111
1,"['\t@Test\n\tpublic void findFromReplicasByIdOptions() { // 5\n\t\tGetAnyReplicaOptions options = GetAnyReplicaOptions.getAnyReplicaOptions().timeout(Duration.ofNanos(1000));\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\ttry {\n\t\t\tAirport found = couchbaseTemplate.findFromReplicasById(Airport.class).inScope(otherScope)\n\t\t\t\t\t.inCollection(otherCollection).withOptions(options).any(saved.getId());\n\t\t\tassertNull(found, ""should not have found document in short timeout"");\n\t\t} finally {\n\t\t\tcouchbaseTemplate.removeById().inScope(otherScope).inCollection(otherCollection).one(saved.getId());\n\t\t}\n\t}\n']",Replica;Replica;Collection;Duration;timeout;ById;Replica;Airport;find;in,1.367880031466484e-09;1.1059455573558807e-09;1.076841726899147e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.693881005048752e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.540083408355713, -5.041657447814941, -5.4374213218688965, -6.508490562438965, -5.483729839324951, -0.020595036447048187]",0.9796155691146851
1,"['\t@Test\n\tpublic void insertByIdOptions() { // 6\n\t\tInsertOptions options = InsertOptions.insertOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> couchbaseTemplate.insertById(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.withId(UUID.randomUUID().toString())));\n\t}\n']",Scope;insert;other;Scope;Options;insert;Options;Collection;Insert;ie,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.563991546630859, -4.9582366943359375, -5.4059624671936035, -6.511998176574707, -5.5003767013549805, -0.021141180768609047]",0.9790807366371155
1,"['\t@Test\n\tpublic void removeByIdOptions() { // 7 - options\n\t\tAirport saved = couchbaseTemplate.insertById(Airport.class).inScope(otherScope).inCollection(otherCollection)\n\t\t\t\t.one(vie);\n\t\tRemoveOptions options = RemoveOptions.removeOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> couchbaseTemplate.removeById().inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.getId()));\n\n\t}\n']",Duration;Airport;insert;timeout;with;other;in;Collection;other;in,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.528235912322998, -5.040512561798096, -5.436192512512207, -6.527621746063232, -5.459606647491455, -0.020730607211589813]",0.9794827699661255
1,"['\t@Test\n\tpublic void removeByQueryOptions() { // 8 - options\n\t\tQueryOptions options = QueryOptions.queryOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class,\n\t\t\t\t() -> couchbaseTemplate.removeByQuery(Airport.class).withConsistency(QueryScanConsistency.REQUEST_PLUS)\n\t\t\t\t\t\t.inScope(otherScope).inCollection(otherCollection).withOptions(options)\n\t\t\t\t\t\t.matching(Query.query(QueryCriteria.where(""iata"").is(vie.getIata()))).all());\n\t}\n']",Scope;Options;Airport;anos;Consistency;Template;Query;ata;query;in,5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10,5,5,"[-5.529601097106934, -5.021407127380371, -5.425155162811279, -6.512447834014893, -5.480504989624023, -0.020834872499108315]",0.9793807864189148
1,"['\t@Test\n\tpublic void replaceByIdOptions() { // 9 - options\n\t\tReplaceOptions options = ReplaceOptions.replaceOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> couchbaseTemplate.replaceById(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie.withIcao(""newIcao"")));\n\t}\n']",Duration;with;Collection;Replace;ie;of;ao;replace;new;Template,1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.558343410491943, -4.975906848907471, -5.405798435211182, -6.503530502319336, -5.474419593811035, -0.021161021664738655]",0.9790613055229187
1,"['\t@Test\n\tpublic void upsertByIdOptions() { // 10 - options\n\t\tUpsertOptions options = UpsertOptions.upsertOptions().timeout(Duration.ofNanos(10));\n\t\tassertThrows(AmbiguousTimeoutException.class, () -> couchbaseTemplate.upsertById(Airport.class).inScope(otherScope)\n\t\t\t\t.inCollection(otherCollection).withOptions(options).one(vie));\n\t}\n']",Duration;Collection;ById;one;Scope;Ambiguous;options;psert;other;upsert,2.3283064365386963e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.550649642944336, -4.9716105461120605, -5.378530502319336, -6.479407787322998, -5.492419242858887, -0.021309470757842064]",0.9789158701896667
1,"['\t@Test\n\tpublic void testScopeCollectionAnnotation() {\n\t\tUserCol user = new UserCol(""1"", ""Dave"", ""Wilson"");\n\t\tQuery query = Query.query(QueryCriteria.where(""firstname"").is(user.getFirstname()));\n\t\ttry {\n\t\t\tUserCol saved = couchbaseTemplate.insertById(UserCol.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.one(user);\n\t\t\tList<UserCol> found = couchbaseTemplate.findByQuery(UserCol.class)\n\t\t\t\t\t.withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.matching(query).all();\n\t\t\tassertEquals(saved, found.get(0), ""should have found what was saved"");\n\t\t\tList<UserCol> notfound = couchbaseTemplate.findByQuery(UserCol.class).inScope(CollectionIdentifier.DEFAULT_SCOPE)\n\t\t\t\t\t.inCollection(CollectionIdentifier.DEFAULT_COLLECTION).matching(query).all();\n\t\t\tassertEquals(0, notfound.size(), ""should not have found what was saved"");\n\t\t\tcouchbaseTemplate.removeByQuery(UserCol.class).inScope(scopeName).inCollection(collectionName).matching(query)\n\t\t\t\t\t.all();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tcouchbaseTemplate.removeByQuery(UserCol.class).inScope(scopeName).inCollection(collectionName).matching(query)\n\t\t\t\t\t\t.all();\n\t\t\t} catch (DataRetrievalFailureException drfe) {}\n\t\t}\n\t}\n']",Consistency;scope;Failure;remove;Collection;Collection;in;collection;Wilson;query,2.0954757928848267e-09;1.979060471057892e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09,5,5,"[-5.446322441101074, -5.073225021362305, -5.383627414703369, -6.417834281921387, -5.393458366394043, -0.021574918180704117]",0.9786561727523804
1,"['\t@Test\n\tpublic void testScopeCollectionRepoWith() {\n\t\tUserCol user = new UserCol(""1"", ""Dave"", ""Wilson"");\n\t\tQuery query = Query.query(QueryCriteria.where(""firstname"").is(user.getFirstname()));\n\t\ttry {\n\t\t\tUserCol saved = couchbaseTemplate.insertById(UserCol.class).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.one(user);\n\t\t\tList<UserCol> found = couchbaseTemplate.findByQuery(UserCol.class)\n\t\t\t\t\t.withConsistency(QueryScanConsistency.REQUEST_PLUS).inScope(scopeName).inCollection(collectionName)\n\t\t\t\t\t.matching(query).all();\n\t\t\tassertEquals(saved, found.get(0), ""should have found what was saved"");\n\t\t\tList<UserCol> notfound = couchbaseTemplate.findByQuery(UserCol.class).inScope(CollectionIdentifier.DEFAULT_SCOPE)\n\t\t\t\t\t.inCollection(CollectionIdentifier.DEFAULT_COLLECTION).matching(query).all();\n\t\t\tassertEquals(0, notfound.size(), ""should not have found what was saved"");\n\t\t\tcouchbaseTemplate.removeByQuery(UserCol.class).inScope(scopeName).inCollection(collectionName).matching(query)\n\t\t\t\t\t.all();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tcouchbaseTemplate.removeByQuery(UserCol.class).inScope(scopeName).inCollection(collectionName).matching(query)\n\t\t\t\t\t\t.all();\n\t\t\t} catch (DataRetrievalFailureException drfe) {}\n\t\t}\n\t}\n']",Firstname;in;what;Collection;Collection;couchbase;Failure;Consistency;where;DEFAULT,4.889443516731262e-09;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10;4.94765117764473e-10,5,5,"[-5.461441993713379, -5.074315547943115, -5.402407646179199, -6.432647228240967, -5.4148712158203125, -0.021291732788085938]",0.9789333343505859
1,['\t@Test\n\t\tpublic String getConnectionString() {\n\t\t\treturn connectionString();\n\t\t}\n'],get;connection;Connection;return,9.313225746154785e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.642417907714844, -4.876759052276611, -5.42776346206665, -6.545905113220215, -5.5392937660217285, -0.021146198734641075]",0.9790757894515991
1,['\t@Test\n\t\tpublic String getId() {\n\t\t\treturn springId;\n\t\t}\n'],spring;return;get,2.3283064365386963e-09;9.313225746154785e-10;-4.656612873077393e-10,5,5,"[-5.621878623962402, -4.877142906188965, -5.462668418884277, -6.572007656097412, -5.5401411056518555, -0.02102329023182392]",0.9791962504386902
1,"['\t@Test\n\t\tpublic String convert(Integer source) {\n\t\t\treturn source % 2 == 0 ? ""even"" : ""odd"";\n\t\t}\n']",odd;source;source;return;convert,9.313225746154785e-10;8.149072527885437e-10;5.529727786779404e-10;2.3283064365386963e-10;-1.57160684466362e-09,5,5,"[-5.623311519622803, -4.946423530578613, -5.424887657165527, -6.529911518096924, -5.537543296813965, -0.020735861733555794]",0.9794776439666748
1,"['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\tcontext = new CouchbaseMappingContext();\n\t\tconverter = new MappingCouchbaseConverter(context);\n\t\tbucketName = ""sample-bucket"";\n\t}\n']",context;new;sample;bucket;context;Name;Converter;Context;Each;before,9.313225746154785e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;0.0;0.0;-2.3283064365386963e-10;-2.9103830456733704e-10,5,5,"[-5.561054706573486, -5.015291213989258, -5.4729180335998535, -6.564456462860107, -5.4682087898254395, -0.020516790449619293]",0.9796922206878662
1,['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\tcontext = new CouchbaseMappingContext();\n\t\tconverter = new MappingCouchbaseConverter(context);\n\t\tApplicationContext ac = new AnnotationConfigApplicationContext(Config.class);\n\t\tcouchbaseTemplate = (CouchbaseTemplate) ac.getBean(COUCHBASE_TEMPLATE);\n\t}\n'],Annotation;apping;new;Template;EMPLATE;Template;context;new;Application;ouchbase,6.984919309616089e-09;2.7939677238464355e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;9.604264050722122e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;5.529727786779404e-10,5,5,"[-5.50959587097168, -5.027425289154053, -5.491942405700684, -6.58261775970459, -5.4699788093566895, -0.020528003573417664]",0.9796812534332275
1,['\t@Test\n\t\tpublic String getConnectionString() {\n\t\t\treturn connectionString();\n\t\t}\n'],get;connection;Connection;return,9.313225746154785e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.642417907714844, -4.876759052276611, -5.42776346206665, -6.545905113220215, -5.5392937660217285, -0.021146198734641075]",0.9790757894515991
1,['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\tcontext = new CouchbaseMappingContext();\n\t\tconverter = new MappingCouchbaseConverter(context);\n\t\tApplicationContext ac = new AnnotationConfigApplicationContext(Config.class);\n\t\tcouchbaseTemplate = (CouchbaseTemplate) ac.getBean(COUCHBASE_TEMPLATE);\n\t}\n'],Annotation;apping;new;Template;EMPLATE;Template;context;new;Application;ouchbase,6.984919309616089e-09;2.7939677238464355e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;9.604264050722122e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;5.529727786779404e-10,5,5,"[-5.50959587097168, -5.027425289154053, -5.491942405700684, -6.58261775970459, -5.4699788093566895, -0.020528003573417664]",0.9796812534332275
1,['\t@Test\n\t\tpublic String getConnectionString() {\n\t\t\treturn connectionString();\n\t\t}\n'],get;connection;Connection;return,9.313225746154785e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.642417907714844, -4.876759052276611, -5.42776346206665, -6.545905113220215, -5.5392937660217285, -0.021146198734641075]",0.9790757894515991
1,"['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\t// first call the super method\n\t\tsuper.beforeEach();\n\t\t// then do processing for this class\n\t\tcouchbaseTemplate.removeByQuery(User.class).inCollection(collectionName).all();\n\t\tcouchbaseTemplate.removeByQuery(UserCol.class).inScope(otherScope).inCollection(otherCollection).all();\n\t\tApplicationContext ac = new AnnotationConfigApplicationContext(Config.class);\n\t\t// seems that @Autowired is not adequate, so ...\n\t\tairportRepository = (AirportRepository) ac.getBean(""airportRepository"");\n\t\tuserColRepository = (UserColRepository) ac.getBean(""userColRepository"");\n\t}\n']",before;Annotation;ouchbase;By;first;that;Repository;Repository;remove;Each,1.3969838619232178e-09;1.1641532182693481e-09;8.294591680169106e-10;7.566995918750763e-10;7.275957614183426e-10;7.275957614183426e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10,5,5,"[-5.463214874267578, -5.116489887237549, -5.489039421081543, -6.551239967346191, -5.405076503753662, -0.02049950696527958]",0.9797092080116272
1,['\t@AfterEach\n\tpublic void afterEach() {\n\t\t// first do processing for this class\n\t\t// no-op\n\t\t// then call the super method\n\t\tsuper.afterEach();\n\t}\n'],the;super;Each;Each;no;after;do;op;this;call,7.450580596923828e-09;3.725290298461914e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;9.313225746154785e-10;0.0;0.0;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.59666633605957, -5.046846389770508, -5.503143787384033, -6.5789690017700195, -5.495508193969727, -0.019904982298612595]",0.9802917838096619
1,"['\t@Test\n\tpublic void myTest() {\n\n\t\tAirportRepository ar = airportRepository.withScope(scopeName).withCollection(collectionName);\n\t\tAirport vie = new Airport(""airports::vie"", ""vie"", ""loww"");\n\t\ttry {\n\t\t\tAirport saved = ar.save(vie);\n\t\t\tAirport airport2 = ar.save(saved);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tar.delete(vie);\n\t\t}\n\n\t}\n']",Airport;Scope;Airport;ie;with;Name;ar;airports;save;new,8.731149137020111e-10;6.402842700481415e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.522701263427734, -4.996520042419434, -5.452820777893066, -6.530453681945801, -5.470729827880859, -0.020924532786011696]",0.9792928695678711
1,"['\t@Test\n\tpublic void testScopeCollectionAnnotation() {\n\t\t// template default scope is my_scope\n\t\t// UserCol annotation scope is other_scope\n\t\tUserCol user = new UserCol(""1"", ""Dave"", ""Wilson"");\n\t\ttry {\n\t\t\tUserCol saved = userColRepository.withCollection(otherCollection).save(user); // should use UserCol annotation\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// scope\n\t\t\tList<UserCol> found = userColRepository.withCollection(otherCollection).findByFirstname(user.getFirstname());\n\t\t\tassertEquals(saved, found.get(0), ""should have found what was saved"");\n\t\t\tList<UserCol> notfound = userColRepository.withScope(DEFAULT_SCOPE)\n\t\t\t\t\t.withCollection(CollectionIdentifier.DEFAULT_COLLECTION).findByFirstname(user.getFirstname());\n\t\t\tassertEquals(0, notfound.size(), ""should not have found what was saved"");\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tuserColRepository.withScope(otherScope).withCollection(otherCollection).delete(user);\n\t\t\t} catch (DataRetrievalFailureException drfe) {}\n\t\t}\n\t}\n']",Scope;Collection;scope;template;Col;default;my;user;Col;Collection,7.450580596923828e-09;2.7939677238464355e-09;2.444721758365631e-09;1.6298145055770874e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.484457015991211, -5.109374523162842, -5.449921607971191, -6.47458553314209, -5.412612438201904, -0.020702233538031578]",0.9795106053352356
1,"['\t@Test\n\tpublic void testScopeCollectionAnnotationSwap() {\n\t\t// UserCol annotation scope is other_scope, collection is other_collection\n\t\t// airportRepository relies on Config.setScopeName(scopeName) (""my_scope"") from CollectionAwareIntegrationTests.\n\t\t// using airportRepository without specified a collection should fail.\n\t\t// This test ensures that airportRepository.save(airport) doesn\'t get the\n\t\t// collection from CrudMethodMetadata of UserCol.save()\n\t\tUserCol userCol = new UserCol(""1"", ""Dave"", ""Wilson"");\n\t\tAirport airport = new Airport(""3"", ""myIata"", ""myIcao"");\n\t\tUserCol savedCol = userColRepository.save(userCol); // uses UserCol annotation scope, populates CrudMethodMetadata\n\t\tuserColRepository.delete(userCol); // uses UserCol annotation scope, populates CrudMethodMetadata\n\t\tassertThrows(IllegalStateException.class, () -> airportRepository.save(airport));\n\t}\n']",Swap;Integration;populates;airport;Airport;airport;uses;Crud;relies;my,1.5133991837501526e-09;1.1641532182693481e-09;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.637978807091713e-10;3.2014213502407074e-10,5,5,"[-5.498782634735107, -5.090904712677002, -5.470229625701904, -6.511293888092041, -5.417425632476807, -0.020590132102370262]",0.9796203970909119
1,"['\t@Test\n\tpublic void testScopeCollectionRepoWith() {\n\t\tUserCol user = new UserCol(""1"", ""Dave"", ""Wilson"");\n\t\ttry {\n\t\t\tUserCol saved = userColRepository.withScope(scopeName).withCollection(collectionName).save(user);\n\t\t\tList<UserCol> found = userColRepository.withScope(scopeName).withCollection(collectionName)\n\t\t\t\t\t.findByFirstname(user.getFirstname());\n\t\t\tassertEquals(saved, found.get(0), ""should have found what was saved"");\n\t\t\tList<UserCol> notfound = userColRepository.withScope(DEFAULT_SCOPE)\n\t\t\t\t\t.withCollection(CollectionIdentifier.DEFAULT_COLLECTION).findByFirstname(user.getFirstname());\n\t\t\tassertEquals(0, notfound.size(), ""should not have found what was saved"");\n\t\t\tuserColRepository.withScope(scopeName).withCollection(collectionName).delete(user);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tuserColRepository.withScope(scopeName).withCollection(collectionName).delete(user);\n\t\t\t} catch (DataRetrievalFailureException drfe) {}\n\t\t}\n\t}\n']",Collection;Scope;User;Scope;Failure;catch;Firstname;saved;Identifier;found,9.313225746154785e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.50433349609375, -5.069684982299805, -5.434831619262695, -6.489492893218994, -5.436920166015625, -0.02080264873802662]",0.9794123768806458
1,"['\t@BeforeEach\n\tpublic void beforeEach() {\n\t\t// first call the super method\n\t\tsuper.beforeEach();\n\t\t// then do processing for this class\n\t\tcouchbaseTemplate.removeByQuery(User.class).inCollection(collectionName).all();\n\t\tcouchbaseTemplate.removeByQuery(UserCol.class).inScope(otherScope).inCollection(otherCollection).all();\n\n\t\tApplicationContext ac = new AnnotationConfigApplicationContext(Config.class);\n\t\t// seems that @Autowired is not adequate, so ...\n\t\tairportRepository = (ReactiveAirportRepository) ac.getBean(""reactiveAirportRepository"");\n\t\tuserColRepository = (ReactiveUserColRepository) ac.getBean(""reactiveUserColRepository"");\n\t}\n']",Application;Annotation;Query;Bean;ouchbase;Before;adequate;collection;By;that,2.561137080192566e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.1350493878126144e-09;1.0622898116707802e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.464672088623047, -5.114499568939209, -5.486179828643799, -6.548206329345703, -5.407895565032959, -0.02050884999334812]",0.9796999096870422
1,['\t@AfterEach\n\tpublic void afterEach() {\n\t\t// first do processing for this class\n\t\t// no-op\n\t\t// then call the super method\n\t\tsuper.afterEach();\n\t}\n'],the;super;Each;Each;no;after;do;op;this;call,7.450580596923828e-09;3.725290298461914e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;9.313225746154785e-10;0.0;0.0;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.59666633605957, -5.046846389770508, -5.503143787384033, -6.5789690017700195, -5.495508193969727, -0.019904982298612595]",0.9802917838096619
1,"['\t@Test\n\tpublic void myTest() {\n\n\t\tReactiveAirportRepository ar = airportRepository.withScope(scopeName).withCollection(collectionName);\n\t\tAirport vie = new Airport(""airports::vie"", ""vie"", ""loww"");\n\t\ttry {\n\t\t\tAirport saved = ar.save(vie).block();\n\t\t\tAirport airport2 = ar.save(saved).block();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tar.delete(vie).block();\n\t\t}\n\n\t}\n']",collection;save;scope;Airport;my;ar;Scope;ie;new;ar,1.0477378964424133e-09;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.527904033660889, -4.999287128448486, -5.455543041229248, -6.530852317810059, -5.468106746673584, -0.02088320627808571]",0.9793334603309631
1,"['\t@Test\n\tpublic void testScopeCollectionAnnotation() {\n\t\t// template default scope is my_scope\n\t\t// UserCol annotation scope is other_scope\n\t\tUserCol user = new UserCol(""1"", ""Dave"", ""Wilson"");\n\t\ttry {\n\t\t\tUserCol saved = userColRepository.withCollection(otherCollection).save(user).block(); // should use UserCol\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// annotation\n\t\t\t// scope\n\t\t\tList<UserCol> found = userColRepository.withCollection(otherCollection).findByFirstname(user.getFirstname())\n\t\t\t\t\t.collectList().block();\n\t\t\tassertEquals(saved, found.get(0), ""should have found what was saved"");\n\t\t\tList<UserCol> notfound = userColRepository.withScope(CollectionIdentifier.DEFAULT_SCOPE)\n\t\t\t\t\t.withCollection(CollectionIdentifier.DEFAULT_COLLECTION).findByFirstname(user.getFirstname()).collectList()\n\t\t\t\t\t.block();\n\t\t\tassertEquals(0, notfound.size(), ""should not have found what was saved"");\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tuserColRepository.withScope(otherScope).withCollection(otherCollection).delete(user);\n\t\t\t} catch (DataRetrievalFailureException drfe) {}\n\t\t}\n\t}\n']",drfe;Scope;Firstname;Col;Col;Col;Retrieval;default;Exception;was,1.4842953532934189e-09;1.1641532182693481e-09;1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.462739944458008, -5.126567840576172, -5.4507832527160645, -6.469156742095947, -5.394960403442383, -0.02077602781355381]",0.979438304901123
1,"['\t@Test\n\tpublic void testScopeCollectionRepoWith() {\n\t\tUserCol user = new UserCol(""1"", ""Dave"", ""Wilson"");\n\t\ttry {\n\t\t\tUserCol saved = userColRepository.withScope(scopeName).withCollection(collectionName).save(user).block();\n\t\t\tList<UserCol> found = userColRepository.withScope(scopeName).withCollection(collectionName)\n\t\t\t\t\t.findByFirstname(user.getFirstname()).collectList().block();\n\t\t\tassertEquals(saved, found.get(0), ""should have found what was saved"");\n\t\t\tList<UserCol> notfound = userColRepository.withScope(CollectionIdentifier.DEFAULT_SCOPE)\n\t\t\t\t\t.withCollection(CollectionIdentifier.DEFAULT_COLLECTION).findByFirstname(user.getFirstname()).collectList()\n\t\t\t\t\t.block();\n\t\t\tassertEquals(0, notfound.size(), ""should not have found what was saved"");\n\t\t\tuserColRepository.withScope(scopeName).withCollection(collectionName).delete(user).block();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tuserColRepository.withScope(scopeName).withCollection(collectionName).delete(user).block();\n\t\t\t} catch (DataRetrievalFailureException drfe) {}\n\t\t}\n\t}\n']",found;Firstname;Collection;aved;user;find;found;Scope;User;scope,6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.498046398162842, -5.091663837432861, -5.430533409118652, -6.476973056793213, -5.411368370056152, -0.02084304392337799]",0.9793726801872253
1,['\t@Test\n\t\tpublic String getConnectionString() {\n\t\t\treturn connectionString();\n\t\t}\n'],get;connection;Connection;return,9.313225746154785e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.642417907714844, -4.876759052276611, -5.42776346206665, -6.545905113220215, -5.5392937660217285, -0.021146198734641075]",0.9790757894515991
1,"['\t@Test\n\tpublic void testCas() {\n\t\tUser user = new User(""1"", ""Dave"", ""Wilson"");\n\t\tuserRepository.save(user).block();\n\t\tuser.setVersion(user.getVersion() - 1);\n\t\tassertThrows(DataIntegrityViolationException.class, () -> userRepository.save(user).block());\n\t\tuser.setVersion(0);\n\t\tuserRepository.save(user).block();\n\t\tuserRepository.delete(user).block();\n\t}\n']",Integrity;User;Wilson;Dave;Violation;save;block;block;user;Repository,1.2223608791828156e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.559580326080322, -4.987556457519531, -5.433172702789307, -6.510530948638916, -5.47641134262085, -0.020931538194417953]",0.9792861342430115
1,"['\t@Test\n\tpublic Mono<Airport> getPolicyByIdAndEffectiveDateTime(String policyId, Instant effectiveDateTime) {\n\t\treturn airportRepository\n\t\t\t\t.findPolicySnapshotByPolicyIdAndEffectiveDateTime(policyId, effectiveDateTime.toEpochMilli())\n\t\t\t\t// .map(Airport::getEntity)\n\t\t\t\t.doOnError(\n\t\t\t\t\t\terror -> System.out.println(""MSG=\'Exception happened while retrieving Policy by Id and effectiveDateTime\', ""\n\t\t\t\t\t\t\t\t+ ""policyId={}, effectiveDateTime={}""));\n\t}\n']",Mono;Airport;Policy;error;effective;airport;Time;Effective;Instant;System,1.5133991837501526e-09;8.731149137020111e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.5505876541137695, -4.998288631439209, -5.378967761993408, -6.499474048614502, -5.519856929779053, -0.020976364612579346]",0.9792420864105225
1,['\t@Test\n\t\tpublic String getConnectionString() {\n\t\t\treturn connectionString();\n\t\t}\n'],get;connection;Connection;return,9.313225746154785e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-5.642417907714844, -4.876759052276611, -5.42776346206665, -6.545905113220215, -5.5392937660217285, -0.021146198734641075]",0.9790757894515991
1,"['    @Test\n    public void testThorwExceptionOnNotAllowedMethod() throws Exception {\n        final String filename = ""com/opensymphony/xwork2/config/providers/xwork-test-allowed-methods.xml"";\n        loadConfigurationProviders(new XmlConfigurationProvider(filename));\n        DefaultActionProxy dap = new DefaultActionProxy(new MockActionInvocation(), ""strict"", ""Default"", ""notAllowed"", true, true);\n        container.inject(dap);\n\n        try {\n            dap.prepare();\n            fail(""Must throw exception!"");\n        } catch (Exception e) {\n            assertEquals(e.getMessage(), ""Method notAllowed for action Default is not allowed!"");\n        }\n    }\n']",work;filename;allowed;Providers;Configuration;filename;Action;new;Message;Thor,5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.511911392211914, -5.05807638168335, -5.45916223526001, -6.491299152374268, -5.4445905685424805, -0.02070235088467598]",0.9795106053352356
1,"['    @Test\n    public void testNullObject() throws Exception {\n        // given\n        RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);\n        rfv.setValueStack(ActionContext.getContext().getValueStack());\n        rfv.setFieldName(""stringValue"");\n        rfv.setDefaultMessage(""${fieldName} field is required!"");\n        ValidationAction action = new ValidationAction();\n        DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));\n        rfv.setValidatorContext(context);\n\n        // when\n        rfv.validate(action);\n\n        // then\n        assertTrue(context.hasFieldErrors());\n        assertEquals(1, context.getFieldErrors().size());\n        assertNotNull(context.getFieldErrors().get(""stringValue""));\n        assertEquals(""stringValue field is required!"", context.getFieldErrors().get(""stringValue"").get(0));\n    }\n']",Field;Object;Exception;get;inject;Message;Required;Null;Validator;field,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.4819655418396, -5.082464218139648, -5.460748195648193, -6.503444194793701, -5.448920249938965, -0.02062656544148922]",0.9795846939086914
1,"['    @Test\n    public void testArrayObject() throws Exception {\n        // given\n        RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);\n        rfv.setValueStack(ActionContext.getContext().getValueStack());\n        rfv.setFieldName(""ints"");\n        rfv.setDefaultMessage(""${fieldName} field is required!"");\n        ValidationAction action = new ValidationAction();\n        action.setInts(new Integer[]{});\n        DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));\n        rfv.setValidatorContext(context);\n\n        // when\n        rfv.validate(action);\n\n        // then\n        assertTrue(context.hasFieldErrors());\n        assertEquals(1, context.getFieldErrors().size());\n        assertNotNull(context.getFieldErrors().get(""ints""));\n        assertEquals(""ints field is required!"", context.getFieldErrors().get(""ints"").get(0));\n    }\n']",Field;Exception;Errors;Field;ints;new;Validator;Object;get;Errors,3.725290298461914e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.0477378964424133e-09;9.022187441587448e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.48533821105957, -5.087389945983887, -5.460967540740967, -6.491899490356445, -5.455626487731934, -0.020568760111927986]",0.9796414375305176
1,"['    @Test\n    public void testCollectionObject() throws Exception {\n        // given\n        RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);\n        rfv.setValueStack(ActionContext.getContext().getValueStack());\n        rfv.setFieldName(""shorts"");\n        rfv.setDefaultMessage(""${fieldName} field is required!"");\n        ValidationAction action = new ValidationAction();\n        action.setShorts(new ArrayList<Short>());\n        DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));\n        rfv.setValidatorContext(context);\n\n        // when\n        rfv.validate(action);\n\n        // then\n        assertTrue(context.hasFieldErrors());\n        assertEquals(1, context.getFieldErrors().size());\n        assertNotNull(context.getFieldErrors().get(""shorts""));\n        assertEquals(""shorts field is required!"", context.getFieldErrors().get(""shorts"").get(0));\n    }\n']",Field;Field;Collection;get;field;Field;Field;shorts;inject;ummy,2.7939677238464355e-09;2.3283064365386963e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10,5,5,"[-5.477234840393066, -5.074158191680908, -5.441876411437988, -6.491110801696777, -5.458218574523926, -0.02076049894094467]",0.9794533848762512
1,['    @Test\n        public void testRun() {\n            ran = true;\n            mgr = this.configurationManager;\n        }\n'],this;true;Run;gr;Manager;ran;configuration,2.764863893389702e-10;2.3283064365386963e-10;1.1641532182693481e-10;4.3655745685100555e-11;-2.3283064365386963e-10;-8.149072527885437e-10;-8.149072527885437e-10,5,5,"[-5.55279016494751, -4.9260430335998535, -5.417717456817627, -6.505268573760986, -5.501814842224121, -0.021370617672801018]",0.9788561463356018
1,"['    @Test\n    public void testCompile() {\n        NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\n\n        assertNull(matcher.compilePattern(null));\n        assertNull(matcher.compilePattern(""""));\n\n        CompiledPattern pattern = matcher.compilePattern(""foo"");\n        assertEquals(""foo"", pattern.getPattern().pattern());\n\n        pattern = matcher.compilePattern(""foo{jim}"");\n        assertEquals(""foo([^/]+)"", pattern.getPattern().pattern());\n        assertEquals(""jim"", pattern.getVariableNames().get(0));\n\n        pattern = matcher.compilePattern(""foo{jim}/{bob}"");\n        assertEquals(""foo([^/]+)/([^/]+)"", pattern.getPattern().pattern());\n        assertEquals(""jim"", pattern.getVariableNames().get(0));\n        assertEquals(""bob"", pattern.getVariableNames().get(1));\n        assertTrue(pattern.getPattern().matcher(""foostar/jie"").matches());\n        assertFalse(pattern.getPattern().matcher(""foo/star/jie"").matches());\n    }\n']",get;Pattern;Pattern;Variable;Variable;False;Matcher;star;Variable;Variable,9.89530235528946e-10;9.89530235528946e-10;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.462636470794678, -5.066285133361816, -5.451735496520996, -6.451747417449951, -5.421082019805908, -0.0210573747754097]",0.979162871837616
1,"['    @Test(expected = IllegalArgumentException.class)\n    public void testCompileWithMismatchedBracketsParses() {\n        NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\n\n        matcher.compilePattern(""}"");\n']",Brackets;Compile;Named;matcher;ismatched;expected;Matcher;matcher;new;class,1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;8.731149137020111e-11;0.0,5,5,"[-5.5105767250061035, -4.936000347137451, -5.3635382652282715, -6.4896345138549805, -5.4565958976745605, -0.021937446668744087]",0.9783015251159668
1,"['    @Test\n    public void testMatch() {\n        NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\n\n        Map<String, String> vars = new HashMap<>();\n        CompiledPattern pattern = new CompiledPattern(Pattern.compile(""foo([^/]+)""), Arrays.asList(""bar""));\n\n        assertTrue(matcher.match(vars, ""foobaz"", pattern));\n        assertEquals(""baz"", vars.get(""bar""));\n    }\n']",foo;Pattern;matcher;match;ars;Pattern;as;pattern;new;get,6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.523377418518066, -4.9349894523620605, -5.419641494750977, -6.499519348144531, -5.488345623016357, -0.02147948183119297]",0.9787495732307434
1,"['    @Test\n    public void testIsLiteral() {\n        NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\n\n        assertTrue(matcher.isLiteral(""bob""));\n        assertFalse(matcher.isLiteral(""bob{jim}""));\n    }\n']",Named;Variable;ob;matcher;Pattern;iteral;Variable;False;True;ob,3.725290298461914e-09;3.259629011154175e-09;1.3387762010097504e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0,5,5,"[-5.528201103210449, -4.9386467933654785, -5.403396129608154, -6.4999775886535645, -5.464816093444824, -0.021607117727398872]",0.9786247611045837
1,"['    @Test(dataProvider = ""paramValues"")\n    public void shouldConvertRequestValuesToStringArrays(Object input, String[] expected) {\n        Parameter.Request request = new Parameter.Request(PARAM_NAME, input);\n\n        String[] result = request.getMultipleValues();\n\n        assertEquals(result, expected);\n        assertNotSame(result, input);\n    }\n']",Parameter;Equals;should;expected;Request;input;Convert;Provider;get;request,1.280568540096283e-09;1.0331859812140465e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.521329402923584, -4.962680816650391, -5.369812488555908, -6.4497857093811035, -5.467255592346191, -0.021686909720301628]",0.978546679019928
1,"['    @Test\n    public void unknownContentLength() throws IOException {\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(request.getContentType()).thenReturn(""multipart/form-data; charset=utf-8; boundary=__X_BOUNDARY__"");\n        Mockito.when(request.getMethod()).thenReturn(""POST"");\n        Mockito.when(request.getContentLength()).thenReturn(Integer.valueOf(-1));\n        StringBuilder entity = new StringBuilder();\n        entity.append(""\\r\\n--__X_BOUNDARY__\\r\\n"");\n        entity.append(""Content-Disposition: form-data; name=\\""upload\\""; filename=\\""test.csv\\""\\r\\n"");\n        entity.append(""Content-Type: text/csv\\r\\n\\r\\n1,2\\r\\n\\r\\n"");\n        entity.append(""--__X_BOUNDARY__\\r\\n"");\n        entity.append(""Content-Disposition: form-data; name=\\""upload2\\""; filename=\\""test2.csv\\""\\r\\n"");\n        entity.append(""Content-Type: text/csv\\r\\n\\r\\n3,4\\r\\n\\r\\n"");\n        entity.append(""--__X_BOUNDARY__--\\r\\n"");\n        Mockito.when(request.getInputStream()).thenReturn(new DelegatingServletInputStream(new ByteArrayInputStream(entity.toString().getBytes(StandardCharsets.UTF_8))));\n        multiPart.setMaxSize(""4"");\n        multiPart.parse(request, tempDir.toString());\n        LocalizedMessage next = multiPart.getErrors().iterator().next();\n        Assert.assertEquals(next.getTextKey(), ""struts.messages.upload.error.SizeLimitExceededException"");\n    }\n']",parse;Mockito;unknown;Content;request;multi;IOException;Message;multipart;class,7.916241884231567e-09;3.958120942115784e-09;3.725290298461914e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3387762010097504e-09;1.280568540096283e-09;1.2223608791828156e-09,5,5,"[-5.397094249725342, -5.120633602142334, -5.429756164550781, -6.431552410125732, -5.381662368774414, -0.021321840584278107]",0.9789037704467773
1,"['    @Test\n    public void testRegister() throws Exception {\n        final ConstantConfig constantConfig = new ConstantConfig();\n        constantConfig.setDevMode(true);\n\n        final String expectedUnknownHandler = ""expectedUnknownHandler"";\n\n        StrutsJavaConfiguration javaConfig = new StrutsJavaConfiguration() {\n            @Override\n            public List<String> unknownHandlerStack() {\n                return Arrays.asList(expectedUnknownHandler);\n            }\n']",Struts;expected;new;constant;Handler;as;expected;new;Dev;Handler,1.0186340659856796e-09;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.526401042938232, -5.012912750244141, -5.40865421295166, -6.456807613372803, -5.482171058654785, -0.021059710532426834]",0.979160487651825
1,"['    @Test\n    public void testBeanConfToString() throws Exception {\n        ConstantConfig constantConfig = new ConstantConfig();\n\n        String actual = constantConfig.beanConfToString(null);\n        Assert.assertEquals(null, actual);\n\n        actual = constantConfig.beanConfToString(new BeanConfig(TestBean.class));\n        Assert.assertEquals(Container.DEFAULT_NAME, actual);\n\n        String expectedName = ""expectedTestBeanName"";\n        actual = constantConfig.beanConfToString(new BeanConfig(TestBean.class, expectedName));\n        Assert.assertEquals(expectedName, actual);\n    }\n']",Exception;NAME;Config;null;actual;Bean;expected;new;expected;actual,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.488020896911621, -5.0106892585754395, -5.48782205581665, -6.520266532897949, -5.481807708740234, -0.020788870751857758]",0.9794257283210754
1,"['    @Test\n    public void testGetAllAsStringsMap() throws Exception {\n        ConstantConfig constantConfig = new ConstantConfig();\n\n        boolean expectedDevMode = true;\n        constantConfig.setDevMode(expectedDevMode);\n\n        String expectedActionExtensions = "".action,.some,.another"";\n        constantConfig.setActionExtension(Arrays.asList(expectedActionExtensions.split("","")));\n\n        String expectedLanguage = ""fr"";\n        constantConfig.setLocale(new Locale(expectedLanguage));\n\n        Map<String, String> map = constantConfig.getAllAsStringsMap();\n\n        Assert.assertEquals(String.valueOf(expectedDevMode), map.get(StrutsConstants.STRUTS_DEVMODE));\n        Assert.assertEquals(expectedActionExtensions, map.get(StrutsConstants.STRUTS_ACTION_EXTENSION));\n        Assert.assertEquals(null, map.get(StrutsConstants.STRUTS_I18N_RELOAD));\n        Assert.assertEquals(expectedLanguage, map.get(StrutsConstants.STRUTS_LOCALE));\n    }\n']",Language;Map;Config;expected;ACTION;split;DEVMODE;Dev;another;constant,1.280568540096283e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.473849296569824, -5.0454864501953125, -5.425324440002441, -6.464194297790527, -5.460208892822266, -0.021068347617983818]",0.9791520237922668
1,"['    @Test\n    public void testEmptyClassesToString() throws Exception {\n        ConstantConfig constantConfig = new ConstantConfig();\n\n        constantConfig.setExcludedClasses(new HashSet<Class<?>>());\n\n        Map<String, String> map = constantConfig.getAllAsStringsMap();\n        Assert.assertEquals(null, map.get(StrutsConstants.STRUTS_EXCLUDED_CLASSES));\n    }\n']",EXCLUDED;Strings;Classes;Struts;Constant;constant;All;map;map;get,9.531504474580288e-10;8.731149137020111e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.545562744140625, -4.952309608459473, -5.388175010681152, -6.4713640213012695, -5.50004768371582, -0.021403172984719276]",0.9788241386413574
1,"['    @Test\n    public void testClassesToString() throws Exception {\n        ConstantConfig constantConfig = new ConstantConfig();\n\n        Set<Class<?>> excludedClasses = new LinkedHashSet<>();\n        excludedClasses.add(Object.class);\n        excludedClasses.add(Runtime.class);\n        excludedClasses.add(System.class);\n\n        constantConfig.setExcludedClasses(excludedClasses);\n\n        Map<String, String> map = constantConfig.getAllAsStringsMap();\n        Assert.assertEquals(""java.lang.Object,java.lang.Runtime,java.lang.System"",\n                map.get(StrutsConstants.STRUTS_EXCLUDED_CLASSES));\n    }\n']",Classes;map;Runtime;Exception;Class;excluded;constant;Equals;Constant;Assert,1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.514893054962158, -4.973649024963379, -5.422091007232666, -6.480658531188965, -5.520080089569092, -0.0211220383644104]",0.9790995717048645
1,"['    @Test\n    public void testConstructor() throws Exception {\n        Class<TestBean> expectedClass = TestBean.class;\n\n        BeanConfig beanConfig = new BeanConfig(expectedClass);\n\n        Assert.assertEquals(expectedClass, beanConfig.getClazz());\n        Assert.assertEquals(Container.DEFAULT_NAME, beanConfig.getName());\n        Assert.assertEquals(Scope.SINGLETON, beanConfig.getScope());\n        Assert.assertEquals(expectedClass, beanConfig.getType());\n        Assert.assertFalse(beanConfig.isOnlyStatic());\n        Assert.assertFalse(beanConfig.isOptional());\n    }\n']",expected;expected;Assert;expected;Optional;Bean;Static;Bean;Scope;Bean,6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.484950065612793, -5.038642406463623, -5.472733497619629, -6.504843235015869, -5.451841354370117, -0.020831018686294556]",0.9793844223022461
1,"['    @Test\n    public void testConstructor2() throws Exception {\n        Class<TestBean> expectedClass = TestBean.class;\n        String expectedName = ""expectedBeanName"";\n        Class<Object> expectedType = Object.class;\n        Scope expectedScope = Scope.PROTOTYPE;\n        boolean expectedOnlyStatic = true;\n        boolean expectedOptional = true;\n\n        BeanConfig beanConfig = new BeanConfig(expectedClass, expectedName, expectedType, expectedScope,\n                expectedOnlyStatic, expectedOptional);\n\n        Assert.assertEquals(expectedClass, beanConfig.getClazz());\n        Assert.assertEquals(expectedName, beanConfig.getName());\n        Assert.assertEquals(expectedScope, beanConfig.getScope());\n        Assert.assertEquals(expectedType, beanConfig.getType());\n        Assert.assertEquals(expectedOnlyStatic, beanConfig.isOnlyStatic());\n        Assert.assertEquals(expectedOptional, beanConfig.isOptional());\n    }\n']",Bean;Bean;expected;PE;Class;expected;Config;PROTOT;Name;expected,5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4560798667371273e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.489410400390625, -5.0697712898254395, -5.481221675872803, -6.507384300231934, -5.440860748291016, -0.020617574453353882]",0.9795935153961182
1,"['    @Test\n    public void testURLDecodeStringInvalid() {\n        // %n rather than %nn should throw an IAE according to the Javadoc\n        Exception exception = null;\n        try {\n            URLDecoderUtil.decode(""%5xxxxx"", ""ISO-8859-1"");\n        } catch (Exception e) {\n            exception = e;\n        }\n        assertTrue(exception instanceof IllegalArgumentException);\n\n        // Edge case trying to trigger ArrayIndexOutOfBoundsException\n        exception = null;\n        try {\n            URLDecoderUtil.decode(""%5"", ""ISO-8859-1"");\n        } catch (Exception e) {\n            exception = e;\n        }\n        assertTrue(exception instanceof IllegalArgumentException);\n    }\n']",Edge;URLDecoder;nn;according;the;trigger;instanceof;URLDecoder;null;trying,1.6298145055770874e-09;7.566995918750763e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.4990153312683105, -5.062624454498291, -5.470830917358398, -6.490026950836182, -5.459504127502441, -0.020612670108675957]",0.979598343372345
1,"['    @Test\n    public void testURLDecodeStringValidIso88591Start() {\n\n        String result = URLDecoderUtil.decode(""%41xxxx"", ""ISO-8859-1"");\n        assertEquals(""Axxxx"", result);\n    }\n']",URLDecoder;ISO;URLDecode;Valid;Equals;xxxx;result;Util;result;Start,1.5425030142068863e-09;9.313225746154785e-10;8.440110832452774e-10;5.238689482212067e-10;3.055902197957039e-10;1.1641532182693481e-10;8.731149137020111e-11;-1.0186340659856796e-10;-2.0372681319713593e-10;-4.656612873077393e-10,5,5,"[-5.545039653778076, -4.968008995056152, -5.384461402893066, -6.482544898986816, -5.462952136993408, -0.021450428292155266]",0.9787780046463013
1,"['    @Test\n    public void testURLDecodeStringValidIso88591Middle() {\n\n        String result = URLDecoderUtil.decode(""xx%41xx"", ""ISO-8859-1"");\n        assertEquals(""xxAxx"", result);\n    }\n']",Middle;xx;xx;URLDecoder;Equals;result;Util;xx;xx;result,8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;-6.257323548197746e-10,5,5,"[-5.545835971832275, -4.963910102844238, -5.398764610290527, -6.487061977386475, -5.470726013183594, -0.021369334310293198]",0.9788573980331421
1,"['    @Test\n    public void testURLDecodeStringValidIso88591End() {\n\n        String result = URLDecoderUtil.decode(""xxxx%41"", ""ISO-8859-1"");\n        assertEquals(""xxxxA"", result);\n    }\n']",xxxx;Valid;URLDecode;xxxx;result;Util;End;decode;result;Equals,8.149072527885437e-10;4.3655745685100555e-10;1.7462298274040222e-10;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-5.093170329928398e-10;-5.820766091346741e-10;-7.566995918750763e-10;-1.076841726899147e-09,5,5,"[-5.546752452850342, -4.934925556182861, -5.3838982582092285, -6.484884738922119, -5.471814155578613, -0.021643398329615593]",0.9785889983177185
1,"['    @Test\n    public void testURLDecodeStringValidUtf8Start() {\n        String result = URLDecoderUtil.decode(""%c3%aaxxxx"", ""UTF-8"");\n        assertEquals(""\\u00eaxxxx"", result);\n    }\n']",URLDecode;axxxx;result;Util;Valid;decode;Equals;Ut;UTF;Start,2.270098775625229e-09;1.1641532182693481e-10;1.1641532182693481e-10;1.0186340659856796e-10;0.0;-2.9103830456733704e-10;-6.984919309616089e-10;-7.275957614183426e-10;-7.566995918750763e-10;-9.313225746154785e-10,5,5,"[-5.537673473358154, -4.957780838012695, -5.404610633850098, -6.494847297668457, -5.474249362945557, -0.021391738206148148]",0.9788354635238647
1,"['    @Test\n    public void testURLDecodeStringValidUtf8Middle() {\n\n        String result = URLDecoderUtil.decode(""xx%c3%aaxx"", ""UTF-8"");\n        assertEquals(""xx\\u00eaxx"", result);\n    }\n']",decode;ax;result;Valid;Util;Equals;Ut;Middle;xx;UTF,1.2223608791828156e-09;6.984919309616089e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-5.551723003387451, -4.957340717315674, -5.403266429901123, -6.491780757904053, -5.469912052154541, -0.02136828377842903]",0.9788582921028137
1,"['    @Test\n    public void testURLDecodeStringValidUtf8End() {\n\n        String result = URLDecoderUtil.decode(""xxxx%c3%aa"", ""UTF-8"");\n        assertEquals(""xxxx\\u00ea"", result);\n    }\n']",UTF;xxxx;URLDecode;decode;xxxx;result;ea;End;aa;Util,1.4260876923799515e-09;9.313225746154785e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;-2.9103830456733704e-11,5,5,"[-5.563849449157715, -4.94518518447876, -5.402622222900391, -6.496005058288574, -5.4780778884887695, -0.021369799971580505]",0.9788568019866943
1,"['    @Test\n    public void testURLDecodePlusCharAsSpace() {\n\n        String result = URLDecoderUtil.decode(""a+b"", ""UTF-8"", true);\n        assertEquals(""a b"", result);\n    }\n']",Util;UTF;decode;URLDecoder;As;true;Char;Space;result;Equals,9.313225746154785e-10;9.313225746154785e-10;5.529727786779404e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;8.731149137020111e-11;-5.820766091346741e-11,5,5,"[-5.557698726654053, -4.971694469451904, -5.4013776779174805, -6.4886860847473145, -5.480649948120117, -0.021209923550486565]",0.9790134429931641
1,"['    @Test\n    public void convertUploadedFileToFile() throws Exception {\n        // given\n        UploadedFileConverter ufc = new UploadedFileConverter();\n        UploadedFile uploadedFile = new StrutsUploadedFile(tempFile);\n\n        // when\n        Object result = ufc.convertValue(context, target, member, propertyName, uploadedFile, File.class);\n\n        // then\n        assertThat(result).isInstanceOf(File.class);\n        File file = (File) result;\n        assertThat(file.length()).isEqualTo(tempFile.length());\n        assertThat(file.getAbsolutePath()).isEqualTo(tempFile.getAbsolutePath());\n    }\n']",result;get;That;result;Path;File;context;fc;That;file,9.546056389808655e-09;5.587935447692871e-09;5.122274160385132e-09;4.6566128730773926e-09;3.725290298461914e-09;2.7939677238464355e-09;2.7939677238464355e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.477275371551514, -5.051591396331787, -5.44469690322876, -6.471839904785156, -5.464540481567383, -0.020896397531032562]",0.9793202877044678
1,"['    @Test\n    public void convertUploadedFileArrayToFile() throws Exception {\n        // given\n        UploadedFileConverter ufc = new UploadedFileConverter();\n        UploadedFile[] uploadedFile = new UploadedFile[] { new StrutsUploadedFile(tempFile) };\n\n        // when\n        Object result = ufc.convertValue(context, target, member, propertyName, uploadedFile, File.class);\n\n        // then\n        assertThat(result).isInstanceOf(File.class);\n        File file = (File) result;\n        assertThat(file.length()).isEqualTo(tempFile.length());\n        assertThat(file.getAbsolutePath()).isEqualTo(tempFile.getAbsolutePath());\n    }\n']",when;member;qual;Path;File;result;Name;Array;given;length,5.820766091346741e-10;4.94765117764473e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.489955425262451, -5.043549060821533, -5.463923931121826, -6.500041961669922, -5.479240894317627, -0.020704451948404312]",0.9795083999633789
1,"['    @Test\n    public void testConventionUrl() throws Exception {\n        // Output is filled out only for FreeMarker and Velocity templates\n        // If you wanna use JSP check response.getForwardedUrl()\n        String output = executeAction(""/view.action"");\n\n        assertTrue(output.contains(""This is the view Hello World""));\n\n        ViewAction action = this.getAction();\n        assertEquals(""Hello World"", action.getMessage());\n    }\n']",Equals;check;action;Action;the;you;filled;Url;contains;Output,1.0186340659856796e-09;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.491318702697754, -5.037286281585693, -5.429372787475586, -6.484228134155273, -5.441864490509033, -0.02107885293662548]",0.9791416525840759
1,"['    @Test\n    public void testExecuteActionAgainstCustomStrutsConfigFile() throws Exception {\n        String output = executeAction(""/test/testAction-2.action"");\n        Assert.assertEquals(""Test-2"", output);\n    }\n']",Against;execute;Equals;action;output;Assert;Action;Action;File;Config,3.725290298461914e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;8.149072527885437e-10;0.0;-4.0745362639427185e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-5.546270847320557, -4.962073802947998, -5.417054653167725, -6.509794235229492, -5.471840858459473, -0.02125719003379345]",0.9789671301841736
1,"['    @Test\n    public void testSessionInitialized() throws Exception {\n        ActionProxy proxy = getActionProxy(""/test/testAction-2.action"");\n        Assert.assertNotNull(""invocation session should being initialized"",\n                proxy.getInvocation().getInvocationContext().getSession());\n    }\n']",Initialized;Action;Proxy;proxy;invocation;Assert;Context;Not;Null;get,1.8044374883174896e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.465410232543945, -5.081027507781982, -5.413994789123535, -6.453456878662109, -5.376194953918457, -0.02132405713200569]",0.9789015650749207
1,"['    @Test\r\n    public void shouldPortletContextBeAvailable() throws Exception {\r\n        // given\r\n        assertNull(ActionContext.getContext().get(StrutsStatics.STRUTS_PORTLET_CONTEXT));\r\n\r\n        // when\r\n        String output = executeAction(""/test/testAction.action"");\r\n        assertEquals(""Hello"", output);\r\n\r\n        // then\r\n        Object portletContext = ActionContext.getContext().get(StrutsStatics.STRUTS_PORTLET_CONTEXT);\r\n        assertNotNull(portletContext);\r\n        assertTrue(portletContext instanceof PortletContext);\r\n    }\r\n']",Available;Struts;when;STRUT;get;Context;PORTLET;Null;Struts;Portlet,1.0477378964424133e-09;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.9281287677586079e-10,5,5,"[-5.493448734283447, -5.05458927154541, -5.464254379272461, -6.5174407958984375, -5.437064170837402, -0.020773109048604965]",0.9794411659240723
1,"['    @Test\r\n    public void shouldAdditionalContextParamsBeAvailable() throws Exception {\r\n        // given\r\n        String key = ""my-param"";\r\n        assertNull(ActionContext.getContext().get(key));\r\n\r\n        // when\r\n        String output = executeAction(""/test/testAction.action"");\r\n        assertEquals(""Hello"", output);\r\n\r\n        // then\r\n        assertNotNull(ActionContext.getContext().get(key));\r\n    }\r\n']",Be;Exception;output;given;Context;Null;Action;execute;Context;Params,4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.514856338500977, -5.03110408782959, -5.450465202331543, -6.4968695640563965, -5.464355945587158, -0.02081058733165264]",0.9794043302536011
1,"['\t@Test\n    public void getActionMapping() {\n        ActionMapping mapping = getActionMapping(""/test/testAction.action"");\n        Assert.assertNotNull(mapping);\n        Assert.assertEquals(""/test"", mapping.getNamespace());\n        Assert.assertEquals(""testAction"", mapping.getName());\n    }\n']",Namespace;Action;apping;get;mapping;get;mapping;Not;get;Action,1.775333657860756e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.520467281341553, -5.059607982635498, -5.455735206604004, -6.514260768890381, -5.386253833770752, -0.020902002230286598]",0.9793150424957275
1,"['\t@Test\n    public void getActionProxy() throws Exception {\n        //set parameters before calling getActionProxy\n        request.setParameter(""name"", ""FD"");\n        \n        ActionProxy proxy = getActionProxy(""/test/testAction.action"");\n        Assert.assertNotNull(proxy);\n\n        JUnitTestAction action = (JUnitTestAction) proxy.getAction();\n        Assert.assertNotNull(action);\n\n        String result = proxy.execute();\n        Assert.assertEquals(Action.SUCCESS, result);\n        Assert.assertEquals(""FD"", action.getName());\n    }\n']",FD;proxy;Unit;Proxy;Equals;Null;Action;request;Action;Name,1.1641532182693481e-09;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.474788665771484, -5.037841796875, -5.453405380249023, -6.4862260818481445, -5.428520202636719, -0.021095311269164085]",0.9791254997253418
1,"['\t@Test\n    public void executeAction() throws ServletException, UnsupportedEncodingException {\n        String output = executeAction(""/test/testAction.action"");\n        Assert.assertEquals(""Hello"", output);\n    }\n']",Servlet;Unsupported;output;Exception;Equals;Action;Encoding;Assert;Exception;execute,1.3969838619232178e-09;1.0186340659856796e-09;6.984919309616089e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;-2.3283064365386963e-10,5,5,"[-5.544463157653809, -4.917163372039795, -5.403166770935059, -6.519563674926758, -5.456304550170898, -0.021708723157644272]",0.9785252213478088
1,"['\t@Test\n    public void getValueFromStack() throws ServletException, UnsupportedEncodingException {\n        request.setParameter(""name"", ""FD"");\n        executeAction(""/test/testAction.action"");\n        String name = (String) findValueAfterExecute(""name"");\n        Assert.assertEquals(""FD"", name);\n    }\n']",Servlet;Encoding;FD;Execute;name;Equals;find;request;set;name,2.7939677238464355e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.540156364440918, -4.96748685836792, -5.426453590393066, -6.5032172203063965, -5.46300745010376, -0.02124878577888012]",0.9789753556251526
1,"['    @Test\n    public void testPersistingSessionValues() throws Exception {\n        String output = executeAction(""/sessiontest/sessionSet.action"");\n        Assert.assertEquals(""sessionValue"", output);\n\n        this.finishExecution();\n\n        String output2 = executeAction(""/sessiontest/sessionGet.action"");\n        Assert.assertEquals(""sessionValue"", output2);\n    }\n']",Assert;Set;Get;Equals;session;Action;session;Equals;session;output,5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.4913249015808105, -5.061909198760986, -5.4604172706604, -6.514954566955566, -5.445045471191406, -0.020719632506370544]",0.9794936776161194
1,['        @Test \n        public void testRun() {\n            ran = true;\n            mgr = this.configurationManager;\n            du = Dispatcher.getInstance();\n        }\n'],Manager;Run;true;Instance;du;get;gr;configuration;ran;this,5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.3283064365386963e-10;0.0;-2.9103830456733704e-11;-8.731149137020111e-11;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.556300163269043, -4.98728609085083, -5.412139892578125, -6.4574995040893555, -5.489607810974121, -0.02106776461005211]",0.979152500629425
1,"['    @Test\r\n    public void findAnnotationSingleAction() {\r\n        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionSingleAnnotation(), null);\r\n        Assert.assertNotNull(tilesDefinition);\r\n        Assert.assertEquals(""definition-name"", tilesDefinition.name());\r\n    }\r\n']",Annotation;Annotation;Annotation;annotation;Struts;new;Single;Annotation;name;iles,1.0477378964424133e-09;1.0186340659856796e-09;8.440110832452774e-10;8.149072527885437e-10;6.83940015733242e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.518224239349365, -5.017862319946289, -5.467411994934082, -6.524571895599365, -5.469917297363281, -0.0207460206001997]",0.9794676899909973
1,"['    @Test\r\n    public void findAnnotationMultipleActionNameNull() {\r\n        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), null);\r\n        Assert.assertNotNull(tilesDefinition);\r\n        Assert.assertEquals(""def1"", tilesDefinition.name());\r\n    }\r\n']",Multiple;Annotation;iles;Annotation;Struts;Annotations;Null;tiles;Processor;Annotation,1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.837623469531536e-10,5,5,"[-5.510000228881836, -5.020614147186279, -5.461410999298096, -6.525597095489502, -5.460444450378418, -0.02082669921219349]",0.9793887734413147
1,"['    @Test\r\n    public void findAnnotationMultipleActionNameGiven() {\r\n        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), ""def2"");\r\n        Assert.assertNotNull(tilesDefinition);\r\n        Assert.assertEquals(""def2"", tilesDefinition.name());\r\n    }\r\n']",Annotation;annotation;Definition;def;Assert;find;Annotation;tiles;def;Processor,1.9208528101444244e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.693881005048752e-10;6.402842700481415e-10;6.257323548197746e-10;6.111804395914078e-10;5.820766091346741e-10;4.3655745685100555e-10,5,5,"[-5.500175952911377, -5.021369934082031, -5.473196029663086, -6.5342254638671875, -5.456088066101074, -0.0208177100867033]",0.9793975949287415
1,"['    @Test\r\n    public void findAnnotationMultipleActionNotFound() {\r\n        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), ""def3"");\r\n        Assert.assertNull(tilesDefinition);\r\n    }\r\n']",annotation;Annotation;find;find;Assert;Definition;Struts;Not;iles;Definition,1.7462298274040222e-09;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.511759281158447, -4.994679927825928, -5.472970008850098, -6.541226387023926, -5.466343402862549, -0.020897798240184784]",0.9793190360069275
1,"['    @Test\r\n    public void buildDefiniton() {\r\n        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionSingleAnnotation(), null);\r\n\r\n        Definition definition = annotationProcessor.buildTilesDefinition(""tileName"", tilesDefinition);\r\n\r\n        Assert.assertNotNull(definition);\r\n        Assert.assertEquals(""tileName"", definition.getName());\r\n        Assert.assertEquals(""preparer"", definition.getPreparer());\r\n        Assert.assertEquals(""base-definition"", definition.getExtends());\r\n        Attribute templateAttribute = definition.getTemplateAttribute();\r\n        Assert.assertEquals(""template"", templateAttribute.getValue());\r\n        Assert.assertEquals(""type"", templateAttribute.getRenderer());\r\n        Assert.assertEquals(""role"", templateAttribute.getRole());\r\n        Expression definitionExpressionObject = templateAttribute.getExpressionObject();\r\n        Assert.assertEquals(""templ*"", definitionExpressionObject.getExpression());\r\n        Assert.assertNull(definitionExpressionObject.getLanguage());\r\n\r\n        Attribute putAttribute = definition.getAttribute(""put-attr"");\r\n        Assert.assertNotNull(putAttribute);\r\n        Assert.assertEquals(""attr-val"", putAttribute.getValue());\r\n        Assert.assertEquals(""attr-type"", putAttribute.getRenderer());\r\n        Assert.assertEquals(""attr-role"", putAttribute.getRole());\r\n        Expression putAttrExpressionObject = putAttribute.getExpressionObject();\r\n        Assert.assertEquals(""expr"", putAttrExpressionObject.getExpression());\r\n        Assert.assertEquals(""lang"", putAttrExpressionObject.getLanguage());\r\n\r\n        Attribute listAttribute = definition.getAttribute(""list-name"");\r\n        Assert.assertEquals(""list-role"", listAttribute.getRole());\r\n        List<Attribute> listValue = getListValue(listAttribute);\r\n        Assert.assertEquals(2, listValue.size());\r\n\r\n        Attribute addAttribute = listValue.get(0);\r\n        Assert.assertEquals(""list-attr-role"", addAttribute.getRole());\r\n        Assert.assertEquals(""list-attr-val"", addAttribute.getValue());\r\n        Assert.assertEquals(""list-attr-type"", addAttribute.getRenderer());\r\n        Expression addAttrExpressionObject = addAttribute.getExpressionObject();\r\n        Assert.assertEquals(""list-attr-expr"", addAttrExpressionObject.getExpression());\r\n\r\n        Attribute addListAttribute = listValue.get(1);\r\n        Assert.assertEquals(""list-list-attr-role"", addListAttribute.getRole());\r\n        List<Attribute> addListValue = getListValue(addListAttribute);\r\n        Assert.assertEquals(1, addListValue.size());\r\n        Assert.assertEquals(""list-list-add-attr"", addListValue.get(0).getValue());\r\n\r\n        Set<String> cascadedAttributeNames = definition.getCascadedAttributeNames();\r\n        Assert.assertEquals(2, cascadedAttributeNames.size());\r\n        Assert.assertTrue(cascadedAttributeNames.contains(""put-attr""));\r\n        Assert.assertTrue(cascadedAttributeNames.contains(""list-name""));\r\n    }\r\n']",templ;Processor;iles;Annotation;Struts;Attribute;Expression;Definition;tile;tiles,1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.399084091186523, -5.1337809562683105, -5.452410697937012, -6.463250160217285, -5.379298686981201, -0.021092509850859642]",0.9791282415390015
1,"['    @Test\r\n    public void buildDefinitonAllEmpty() {\r\n        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionSingleAnnotationAllEmpty(), null);\r\n\r\n        Definition definition = annotationProcessor.buildTilesDefinition(null, tilesDefinition);\r\n\r\n        Assert.assertNotNull(definition);\r\n        Assert.assertNull(definition.getName());\r\n        Assert.assertNull(definition.getPreparer());\r\n        Assert.assertNull(definition.getExtends());\r\n        Attribute templateAttribute = definition.getTemplateAttribute();\r\n        Assert.assertNull(templateAttribute.getValue());\r\n        Assert.assertNull(templateAttribute.getRole());\r\n        Assert.assertNull(templateAttribute.getExpressionObject());\r\n\r\n        Attribute putAttribute = definition.getAttribute(""put-attr"");\r\n        Assert.assertNotNull(putAttribute);\r\n        Assert.assertNull(putAttribute.getValue());\r\n        Assert.assertNull(putAttribute.getRenderer());\r\n        Assert.assertNull(putAttribute.getRole());\r\n        Assert.assertNull(putAttribute.getExpressionObject());\r\n\r\n        Attribute listAttribute = definition.getAttribute(""list-name"");\r\n        Assert.assertNull(listAttribute.getRole());\r\n        List<Attribute> listValue = getListValue(listAttribute);\r\n        Assert.assertEquals(2, listValue.size());\r\n\r\n        Attribute addAttribute = listValue.get(0);\r\n        Assert.assertNull(addAttribute.getRole());\r\n        Assert.assertNull(addAttribute.getValue());\r\n        Assert.assertNull(addAttribute.getRenderer());\r\n        Assert.assertNull(addAttribute.getExpressionObject());\r\n\r\n        Attribute addListAttribute = listValue.get(1);\r\n        Assert.assertNull(addListAttribute.getRole());\r\n        List<Attribute> addListValue = getListValue(addListAttribute);\r\n        Assert.assertEquals(1, addListValue.size());\r\n        Assert.assertNull(addListValue.get(0).getValue());\r\n\r\n        Set<String> cascadedAttributeNames = definition.getCascadedAttributeNames();\r\n        Assert.assertNull(cascadedAttributeNames);\r\n    }\r\n']",annotation;Annotation;Processor;iles;Definiton;tiles;Annotation;Annotation;definition;Struts,2.7939677238464355e-09;1.862645149230957e-09;1.7462298274040222e-09;1.57160684466362e-09;1.3387762010097504e-09;1.280568540096283e-09;1.0186340659856796e-09;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.399509906768799, -5.114284515380859, -5.4415974617004395, -6.459598541259766, -5.391172409057617, -0.021206889301538467]",0.9790163040161133
1,['    @Test\n    public void testFindBeanManager() throws Exception {\n        assertNotNull(new CdiObjectFactory().findBeanManager());\n    }\n'],find;new;di;Exception;Factory;Find;Bean;Manager;Manager;Object,1.280568540096283e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.556734085083008, -4.882735729217529, -5.385951995849609, -6.494692325592041, -5.49779748916626, -0.0218625720590353]",0.9783746600151062
1,"['    @Test\n    public void testGetBean() throws Exception {\n        final CdiObjectFactory cdiObjectFactory = new CdiObjectFactory();\n        FooConsumer fooConsumer = (FooConsumer) cdiObjectFactory.buildBean(FooConsumer.class.getCanonicalName(), null, false);\n        assertNotNull(fooConsumer);\n        assertNotNull(fooConsumer.fooService);\n    }\n']",Bean;Exception;Consumer;Bean;foo;Factory;Factory;Object;Null;oo,1.5425030142068863e-09;1.280568540096283e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.547372341156006, -4.992433547973633, -5.443467140197754, -6.516574859619141, -5.471071243286133, -0.02091391012072563]",0.979303240776062
1,"['    @Test\n    public void testExponentialNumber() throws Exception {\n        Object ret = reader.read(""5e-5"");\n        assertNotNull(ret);\n        assertEquals(Double.class, ret.getClass());\n        assertEquals(5.0E-5, ret);\n    }\n']",read;Equals;Exception;Object;Class;Null;ret;Not;ret;reader,1.3969838619232178e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-11;0.0,5,5,"[-5.528894424438477, -4.999410152435303, -5.423903942108154, -6.486483097076416, -5.491954803466797, -0.020984536036849022]",0.9792340993881226
1,"['    @Test\n    public void testExponentialNumber2() throws Exception {\n        Object ret = reader.read(""123.4e10"");\n        assertNotNull(ret);\n        assertEquals(Double.class, ret.getClass());\n        assertEquals(123.4e10, ret);\n    }\n']",ret;Exception;Equals;ret;Class;Not;Null;get;reader;class,9.022187441587448e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.346940502524376e-10;1.1641532182693481e-10;7.275957614183426e-11;2.9103830456733704e-11;0.0,5,5,"[-5.5032734870910645, -5.0290117263793945, -5.397858619689941, -6.445892810821533, -5.458006858825684, -0.021217510104179382]",0.9790059924125671
1,"['    @Test\n    public void testDecimalNumber() throws Exception {\n        Object ret = reader.read(""3.2"");\n        assertNotNull(ret);\n        assertEquals(Double.class, ret.getClass());\n        assertEquals(3.2, ret);\n    }\n']",read;Decimal;reader;Exception;ret;get;Null;ret;ret;Class,1.2660166248679161e-09;8.149072527885437e-10;6.111804395914078e-10;5.238689482212067e-10;2.9103830456733704e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.0372681319713593e-10;0.0;-1.1641532182693481e-10,5,5,"[-5.5288166999816895, -5.003881454467773, -5.433732986450195, -6.493935585021973, -5.470576286315918, -0.020989438518881798]",0.9792293310165405
1,"['    @Test\n    public void testNaturalNumber() throws Exception {\n        Object ret = reader.read(""123"");\n        assertNotNull(ret);\n        assertEquals(Long.class, ret.getClass());\n        assertEquals(123L, ret);\n    }\n']",reader;Not;get;Exception;ret;Class;class;Long;Equals;ret,5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.3655745685100555e-10;-4.656612873077393e-10,5,5,"[-5.4739508628845215, -5.0443878173828125, -5.370140552520752, -6.43441104888916, -5.417868614196777, -0.021566402167081833]",0.9786645174026489
1,"['    @Test\n    public void testWrite() throws Exception {\n        Bean bean1=new Bean();\n        bean1.setStringField(""str"");\n        bean1.setBooleanField(true);\n        bean1.setCharField(\'s\');\n        bean1.setDoubleField(10.1);\n        bean1.setFloatField(1.5f);\n        bean1.setIntField(10);\n        bean1.setLongField(100);\n        bean1.setEnumField(AnEnum.ValueA);\n        bean1.setEnumBean(AnEnumBean.Two);\n\n        JSONWriter jsonWriter = new DefaultJSONWriter();\n        jsonWriter.setEnumAsBean(false);\n        String json = jsonWriter.write(bean1);\n        TestUtils.assertEquals(DefaultJSONWriter.class.getResource(""jsonwriter-write-bean-01.txt""), json);\n    }\n']",Enum;write;Boolean;bean;Field;Bean;Field;set;json;bean,7.712515071034431e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.420755386352539, -5.050037384033203, -5.463540554046631, -6.48838472366333, -5.464450836181641, -0.021046986803412437]",0.979172945022583
1,"['    @Test\n    public void testWriteExcludeNull() throws Exception {\n        BeanWithMap bean1=new BeanWithMap();\n        bean1.setStringField(""str"");\n        bean1.setBooleanField(true);\n        bean1.setCharField(\'s\');\n        bean1.setDoubleField(10.1);\n        bean1.setFloatField(1.5f);\n        bean1.setIntField(10);\n        bean1.setLongField(100);\n        bean1.setEnumField(AnEnum.ValueA);\n        bean1.setEnumBean(AnEnumBean.Two);\n\n        Map m = new LinkedHashMap();\n        m.put(""a"", ""x"");\n        m.put(""b"", null);\n        m.put(""c"", ""z"");\n        bean1.setMap(m);\n\n        JSONWriter jsonWriter = new DefaultJSONWriter();\n        jsonWriter.setEnumAsBean(false);\n        jsonWriter.setIgnoreHierarchy(false);\n        String json = jsonWriter.write(bean1, null, null, true);\n        TestUtils.assertEquals(DefaultJSONWriter.class.getResource(""jsonwriter-write-bean-03.txt""), json);\n    }\n']",Bean;Char;Null;Resource;Exception;Enum;Two;json;set;Hash,6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.397425651550293, -5.090075969696045, -5.442724227905273, -6.458791732788086, -5.430185794830322, -0.021185297518968582]",0.9790375232696533
1,"['    @Test\n    public void testWriteAnnotatedBean() throws Exception {\n        AnnotatedBean bean1=new AnnotatedBean();\n        bean1.setStringField(""str"");\n        bean1.setBooleanField(true);\n        bean1.setCharField(\'s\');\n        bean1.setDoubleField(10.1);\n        bean1.setFloatField(1.5f);\n        bean1.setIntField(10);\n        bean1.setLongField(100);\n        bean1.setEnumField(AnEnum.ValueA);\n        bean1.setEnumBean(AnEnumBean.Two);\n        bean1.setUrl(new URL(""http://www.google.com""));\n\n        JSONWriter jsonWriter = new DefaultJSONWriter();\n        jsonWriter.setEnumAsBean(false);\n        jsonWriter.setIgnoreHierarchy(false);\n        String json = jsonWriter.write(bean1);\n        TestUtils.assertEquals(DefaultJSONWriter.class.getResource(""jsonwriter-write-bean-02.txt""), json);\n    }\n']",Float;Char;An;Field;Exception;json;Enum;Bean;set;An,9.313225746154785e-10;6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.67435859516263e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.445773601531982, -5.060103416442871, -5.434382915496826, -6.465487957000732, -5.454446315765381, -0.02107745222747326]",0.9791432619094849
1,"['    @Test\n    public void testWriteBeanWithList() throws Exception {\n        BeanWithList bean1 = new BeanWithList();\n        bean1.setStringField(""str"");\n        bean1.setBooleanField(true);\n        bean1.setCharField(\'s\');\n        bean1.setDoubleField(10.1);\n        bean1.setFloatField(1.5f);\n        bean1.setIntField(10);\n        bean1.setLongField(100);\n        bean1.setEnumField(AnEnum.ValueA);\n        bean1.setEnumBean(AnEnumBean.Two);\n        List<String> errors = new ArrayList<String>();\n        errors.add(""Field is required"");\n        bean1.setErrors(errors);\n\n        JSONWriter jsonWriter = new DefaultJSONWriter();\n        jsonWriter.setEnumAsBean(false);\n        jsonWriter.setIgnoreHierarchy(false);\n        String json = jsonWriter.write(bean1);\n        TestUtils.assertEquals(DefaultJSONWriter.class.getResource(""jsonwriter-write-bean-04.txt""), json);\n    }\n']",Bean;new;Utils;List;Float;str;JSONWriter;Field;write;errors,1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.46712589263916, -4.945556163787842, -5.383944034576416, -6.434978485107422, -5.501800537109375, -0.021848808974027634]",0.9783881306648254
1,"['    @Test\n    public void testCanSerializeADate() throws Exception {\n        SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss z"");\n\n        SingleDateBean dateBean = new SingleDateBean();\n        dateBean.setDate(sdf.parse(""2012-12-23 10:10:10 GMT""));\n\n        JSONWriter jsonWriter = new DefaultJSONWriter();\n        jsonWriter.setEnumAsBean(false);\n\n        TimeZone.setDefault(TimeZone.getTimeZone(""GMT""));\n        String json = jsonWriter.write(dateBean);\n        assertEquals(""{\\""date\\"":\\""2012-12-23T10:10:10\\""}"", json);\n    }\n']",Format;Bean;Serialize;Date;new;JSONWriter;GMT;new;Single;Exception,1.280568540096283e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10,5,5,"[-5.510123252868652, -4.979372978210449, -5.395514011383057, -6.489870548248291, -5.522221088409424, -0.021199652925133705]",0.9790234565734863
1,"['    @Test\n    public void testCanSetDefaultDateFormat() throws Exception {\n        SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss z"");\n\n        SingleDateBean dateBean = new SingleDateBean();\n        dateBean.setDate(sdf.parse(""2012-12-23 10:10:10 GMT""));\n\n        JSONWriter jsonWriter = new DefaultJSONWriter();\n        jsonWriter.setEnumAsBean(false);\n        jsonWriter.setDateFormatter(""MM-dd-yyyy"");\n        String json = jsonWriter.write(dateBean);\n        assertEquals(""{\\""date\\"":\\""12-23-2012\\""}"", json);\n    }\n']",yyyy;Bean;date;Default;Date;new;Simple;json;Equals;Writer,6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.517125606536865, -5.0313520431518555, -5.406259059906006, -6.494231224060059, -5.511314392089844, -0.020803581923246384]",0.9794113039970398
1,['            // @Test(expected = JSONException.class)\n        }\n    }\n'],class;expected;JSONException,9.313225746154785e-10;6.984919309616089e-10;-1.2514647096395493e-09,5,5,"[-5.588628768920898, -4.925587177276611, -5.442426681518555, -6.541570663452148, -5.516632080078125, -0.021008232608437538]",0.9792107939720154
1,"['            // @Test(expected = JSONException.class)\n    public void testSMDDisabledSMD() throws Exception {\n        // request\n        setRequestContent(""smd-3.txt"");\n        this.request.addHeader(""Content-Type"", ""application/json-rpc"");\n\n        JSONInterceptor interceptor = new JSONInterceptor();\n        JSONUtil jsonUtil = new JSONUtil();\n        jsonUtil.setWriter(new DefaultJSONWriter());\n        interceptor.setJsonUtil(jsonUtil);\n        SMDActionTest1 action = new SMDActionTest1();\n\n        this.invocation.setAction(action);\n\n        // SMD was not enabled so invocation must happen\n        try {\n            interceptor.intercept(this.invocation);\n        } catch (JSONException e) {\n            fail(""Should have not thrown an exception"");\n        }\n\n    }\n']",expected;pc;SMDAction;SM;SM;request;Exception;set;JSONException;Disabled,3.725290298461914e-09;1.862645149230957e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.491429805755615, -5.013419151306152, -5.398874759674072, -6.447879314422607, -5.486143112182617, -0.021243534982204437]",0.9789806604385376
1,"['\t@Test\n\tpublic void testSanitizeInputPathShouldAllowSimpleParameter() throws Exception {\n\t\tassertEquals(""foo"", fileDownloadAction.sanitizeInputPath(""foo""));\n\t}\n']",foo;Exception;Input;file;Should;Allow;Download;Path;Simple;Path,1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;1.1641532182693481e-10;-5.820766091346741e-11;-2.3283064365386963e-10,5,5,"[-5.613818168640137, -4.858955383300781, -5.424467086791992, -6.541217803955078, -5.513731956481934, -0.021516701206564903]",0.9787131547927856
1,['\t@Test\n\tpublic void testSanitizeInputPathShouldReturnNullForNullInput() throws Exception {\n\t\tassertNull(fileDownloadAction.sanitizeInputPath(null));\n\t}\n'],Download;Input;file;Sanitize;Input;For;Path;Null;sanitize;null,1.3387762010097504e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0,5,5,"[-5.583430767059326, -4.806107044219971, -5.399540424346924, -6.5115647315979, -5.525686264038086, -0.022171132266521454]",0.9780727028846741
1,"['\t@Test\n\tpublic void testSanitizeInputPathShouldReturnNullForLeadingWebInf() throws Exception {\n\t\tassertNull(fileDownloadAction.sanitizeInputPath(""WEB-INF/foo""));\n\t}\n']",Null;Download;WE;Null;Return;Should;Path;For;IN;foo,1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.587657451629639, -4.905463695526123, -5.433582782745361, -6.548859596252441, -5.492190361022949, -0.021292898803949356]",0.9789322018623352
1,"['\t@Test\n\tpublic void testSanitizeInputPathShouldReturnNullForNonLeadingWebInf() throws Exception {\n\t\tassertNull(fileDownloadAction.sanitizeInputPath(""./WEB-INF/foo""));\n\t}\n']",Leading;foo;For;Sanitize;sanitize;Non;Exception;Should;Input;Return,2.0954757928848267e-09;1.6298145055770874e-09;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.598788738250732, -4.905533790588379, -5.4335761070251465, -6.56050443649292, -5.485636234283447, -0.021260807290673256]",0.9789636135101318
1,"['\t@Test\n\tpublic void testSanitizeInputPathShouldReturnNullForNonUppercaseWebInf() throws Exception {\n\t\tassertNull(fileDownloadAction.sanitizeInputPath(""./wEB-Inf/foo""));\n\t}\n']",foo;Return;file;Path;Web;Path;Should;sanitize;Input;Action,1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;0.0;0.0,5,5,"[-5.595836162567139, -4.916635990142822, -5.428251266479492, -6.553051471710205, -5.483617782592773, -0.021231630817055702]",0.9789921641349792
1,"['    @Test\n    public void enable() {\n        terminal.expectCommand(""systemctl --quiet is-enabled docker 2>&1"", 1, """")\n                .expectCommand(""systemctl enable docker 2>&1"")\n                .expectCommand(""systemctl --quiet is-enabled docker 2>&1"");\n\n        SystemCtl.SystemCtlEnable enableDockerService = new SystemCtl(terminal).enable(""docker"");\n        assertTrue(enableDockerService.converge(taskContext));\n        assertFalse(""Already converged"", enableDockerService.converge(taskContext));\n    }\n']",converge;docker;converged;Command;ocker;System;Context;Already;ocker;docker,1.6880221664905548e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.4992876052856445, -5.049632549285889, -5.443244457244873, -6.440985202789307, -5.439164638519287, -0.020983368158340454]",0.9792352318763733
1,"['    @Test\n    public void enableCommandFailure() {\n        terminal.expectCommand(""systemctl --quiet is-enabled docker 2>&1"", 1, """")\n                .expectCommand(""systemctl enable docker 2>&1"", 1, ""error enabling service"");\n        SystemCtl.SystemCtlEnable enableDockerService = new SystemCtl(terminal).enable(""docker"");\n        try {\n            enableDockerService.converge(taskContext);\n            fail();\n        } catch (ChildProcessFailureException e) {\n            // success\n        }\n    }\n']",enable;Command;enable;enabling;docker;quiet;tl;Failure;converge;enabled,3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-5.528937339782715, -5.016732215881348, -5.447164058685303, -6.455742835998535, -5.48463773727417, -0.020842110738158226]",0.979373574256897
1,"['    @Test\n    public void start() {\n        terminal.expectCommand(\n                        ""systemctl show docker 2>&1"",\n                        0,\n                        ""a=b\\n"" +\n                                ""ActiveState=failed\\n"" +\n                                ""bar=zoo\\n"")\n                .expectCommand(""systemctl start docker 2>&1"", 0, """");\n\n        SystemCtl.SystemCtlStart startDockerService = new SystemCtl(terminal).start(""docker"");\n        assertTrue(startDockerService.converge(taskContext));\n    }\n']",expect;start;systemctl;bar;start;State;ocker;Active;ocker;System,2.444721758365631e-09;1.1641532182693481e-09;6.402842700481415e-10;4.94765117764473e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.4453630447387695, -5.075077056884766, -5.450351715087891, -6.4329962730407715, -5.421267032623291, -0.021112117916345596]",0.9791091680526733
1,"['    @Test\n    public void startIsNoop() {\n        terminal.expectCommand(\n                        ""systemctl show docker 2>&1"",\n                        0,\n                        ""a=b\\n"" +\n                                ""ActiveState=active\\n"" +\n                                ""bar=zoo\\n"")\n                .expectCommand(""systemctl start docker 2>&1"", 0, """");\n\n        SystemCtl.SystemCtlStart startDockerService = new SystemCtl(terminal).start(""docker"");\n        assertFalse(startDockerService.converge(taskContext));\n    }\n']",Noop;systemctl;start;System;Command;Active;show;oo;systemctl;start,5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.462621212005615, -5.076290607452393, -5.469093322753906, -6.464530944824219, -5.433952808380127, -0.020839659497141838]",0.979375958442688
1,"['    @Test\n    public void startCommandFailre() {\n        terminal.expectCommand(""systemctl show docker 2>&1"", 1, ""error"");\n        SystemCtl.SystemCtlStart startDockerService = new SystemCtl(terminal).start(""docker"");\n        try {\n            startDockerService.converge(taskContext);\n            fail();\n        } catch (ChildProcessFailureException e) {\n            // success\n        }\n    }\n']",Command;Failre;docker;Failure;tl;System;terminal;Process;Child;ocker,1.280568540096283e-09;9.313225746154785e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.515022277832031, -5.046087741851807, -5.425480365753174, -6.439713478088379, -5.459104061126709, -0.02093515731394291]",0.979282557964325
1,"['    @Test\n    public void disable() {\n        terminal.expectCommand(""systemctl --quiet is-enabled docker 2>&1"")\n                .expectCommand(""systemctl disable docker 2>&1"")\n                .expectCommand(""systemctl --quiet is-enabled docker 2>&1"", 1, """");\n\n        assertTrue(new SystemCtl(terminal).disable(""docker"").converge(taskContext));\n        assertFalse(""Already converged"", new SystemCtl(terminal).disable(""docker"").converge(taskContext));\n    }\n']",expect;expect;task;disable;tl;docker;converge;quiet;tl;new,2.7939677238464355e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0186340659856796e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.501786231994629, -5.020761489868164, -5.4552001953125, -6.490512847900391, -5.458910942077637, -0.020946713164448738]",0.9792710542678833
1,"['    @Test\n    public void stop() {\n        terminal.expectCommand(\n                        ""systemctl show docker 2>&1"",\n                        0,\n                        ""a=b\\n"" +\n                                ""ActiveState=active\\n"" +\n                                ""bar=zoo\\n"")\n                .expectCommand(""systemctl stop docker 2>&1"", 0, """");\n\n        assertTrue(new SystemCtl(terminal).stop(""docker"").converge(taskContext));\n    }\n']",expect;bar;systemctl;stop;stop;expect;stop;oo;systemctl;docker,1.280568540096283e-09;7.566995918750763e-10;6.83940015733242e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.462024688720703, -5.059953212738037, -5.474538326263428, -6.480498313903809, -5.447231292724609, -0.020839892327785492]",0.9793757796287537
1,"['    @Test\n    public void restart() {\n        terminal.expectCommand(""systemctl restart docker 2>&1"", 0, """");\n        assertTrue(new SystemCtl(terminal).restart(""docker"").converge(taskContext));\n    }\n']",terminal;restart;docker;System;Context;restart;converge;Command;True;restart,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.94765117764473e-10;1.4551915228366852e-10;1.1641532182693481e-10;2.9103830456733704e-11;0.0;-5.820766091346741e-11;-8.731149137020111e-11,5,5,"[-5.556581974029541, -4.945930480957031, -5.416636943817139, -6.4962334632873535, -5.491617202758789, -0.02127131074666977]",0.9789534211158752
1,"['    @Test\n    public void testUnitExists() {\n        SystemCtl systemCtl = new SystemCtl(terminal);\n\n        terminal.expectCommand(""systemctl list-unit-files foo.service 2>&1"", 0,\n                ""UNIT FILE STATE\\n"" +\n                        ""\\n"" +\n                        ""0 unit files listed.\\n"");\n        assertFalse(systemCtl.serviceExists(taskContext, ""foo""));\n\n        terminal.expectCommand(""systemctl list-unit-files foo.service 2>&1"", 0,\n                ""UNIT FILE           STATE  \\n"" +\n                        ""foo.service enabled\\n"" +\n                        ""\\n"" +\n                        ""1 unit files listed.\\n"");\n        assertTrue(systemCtl.serviceExists(taskContext, ""foo""));\n\n        terminal.expectCommand(""systemctl list-unit-files foo.service 2>&1"", 0, ""garbage"");\n        try {\n            systemCtl.serviceExists(taskContext, ""foo"");\n            fail();\n        } catch (Exception e) {\n            assertThat(e.getMessage(), containsString(""garbage""));\n        }\n    }\n']",task;garbage;UNIT;Exception;expect;Unit;listed;get;expect;fail,3.958120942115784e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.313225746154785e-10;8.294591680169106e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.4123358726501465, -5.115393161773682, -5.453176975250244, -6.411643981933594, -5.366365909576416, -0.021285779774188995]",0.9789390563964844
1,"['    @Test\n    public void withSudo() {\n        SystemCtl systemCtl = new SystemCtl(terminal).withSudo();\n        terminal.expectCommand(""sudo systemctl restart docker 2>&1"", 0, """");\n        assertTrue(systemCtl.restart(""docker"").converge(taskContext));\n    }\n']",with;System;terminal;system;restart;systemctl;with;new;restart;Command,3.725290298461914e-09;2.852175384759903e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.5366411209106445, -4.998768329620361, -5.381716728210449, -6.439621925354004, -5.452686309814453, -0.021394887939095497]",0.9788323640823364
1,"['    @Test\n    public void return_expectations() {\n        assertSystemCtlMethod(sct -> sct.expectEnable(unit), sc -> sc.enable(unit).converge(context));\n        assertSystemCtlMethod(sct -> sct.expectDisable(unit), sc -> sc.disable(unit).converge(context));\n        assertSystemCtlMethod(sct -> sct.expectStart(unit), sc -> sc.start(unit).converge(context));\n        assertSystemCtlMethod(sct -> sct.expectStop(unit), sc -> sc.stop(unit).converge(context));\n        assertSystemCtlMethod(sct -> sct.expectServiceExists(unit), sc -> sc.serviceExists(context, unit));\n        assertSystemCtlMethod(sct -> sct.expectIsActive(unit), sc -> sc.isActive(context, unit));\n    }\n']",tl;Enable;expect;disable;expect;System;expectations;tl;Service;Stop,1.6298145055770874e-09;8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.524805068969727, -5.022603988647461, -5.458400249481201, -6.505802154541016, -5.466941833496094, -0.020767387002706528]",0.9794467687606812
1,['    @Test\n    public void void_tests() {\n        systemCtl.expectRestart(unit);\n        systemCtl.restart(unit).converge(context);\n        terminal.verifyAllCommandsExecuted();\n\n        systemCtl.expectDaemonReload();\n        systemCtl.daemonReload(context);\n        terminal.verifyAllCommandsExecuted();\n    }\n'],terminal;verify;system;converge;Commands;unit;tl;restart;tl;daemon,9.89530235528946e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.3096723705530167e-10,5,5,"[-5.464074611663818, -5.049476146697998, -5.3805718421936035, -6.430264472961426, -5.385656833648682, -0.02168142795562744]",0.9785520434379578
1,"['    @Test\n    public void testSpawn() {\n        CommandLine commandLine = mock(CommandLine.class);\n        when(commandLine.getArguments()).thenReturn(List.of(""program""));\n        when(commandLine.getRedirectStderrToStdoutInsteadOfDiscard()).thenReturn(true);\n        when(commandLine.programName()).thenReturn(""program"");\n        Path outputPath;\n        try (ChildProcess2Impl child = processFactory.spawn(commandLine)) {\n            outputPath = child.getOutputPath();\n            assertTrue(Files.exists(outputPath));\n            assertEquals(""rw-------"", new UnixPath(outputPath).getPermissions());\n            ArgumentCaptor<ProcessBuilder> processBuilderCaptor =\n                    ArgumentCaptor.forClass(ProcessBuilder.class);\n            verify(starter).start(processBuilderCaptor.capture());\n            ProcessBuilder processBuilder = processBuilderCaptor.getValue();\n            assertTrue(processBuilder.redirectErrorStream());\n            ProcessBuilder.Redirect redirect = processBuilder.redirectOutput();\n            assertEquals(ProcessBuilder.Redirect.Type.WRITE, redirect.type());\n            assertEquals(outputPath.toFile(), redirect.file());\n        }\n\n        assertFalse(Files.exists(outputPath));\n    }\n']",Spawn;Command;exists;Permissions;when;Captor;Argument;Equals;program;output,1.6298145055770874e-09;5.529727786779404e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.495939254760742, -4.960388660430908, -5.325408935546875, -6.366875648498535, -5.452986717224121, -0.022226162254810333]",0.9780189990997314
1,"['    @Test\n    public void testSpawnWithPersistentOutputFile() {\n\n        class TemporaryFile implements AutoCloseable {\n            private final Path path;\n            private TemporaryFile() {\n                String outputFileName = ProcessFactoryImplTest.class.getSimpleName() + ""-temporary-test-file.out"";\n                FileAttribute<Set<PosixFilePermission>> fileAttribute = PosixFilePermissions.asFileAttribute(\n                        PosixFilePermissions.fromString(""rw-------""));\n                path = uncheck(() -> Files.createTempFile(outputFileName, "".out"", fileAttribute));\n            }\n            @Override public void close() { uncheck(() -> Files.deleteIfExists(path)); }\n        }\n\n        try (TemporaryFile outputPath = new TemporaryFile()) {\n']",Permissions;Temporary;Temporary;Temporary;Persistent;output;Attribute;Attribute;Posix;Attribute,7.8580342233181e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.509929656982422, -5.0020270347595215, -5.433697700500488, -6.474991321563721, -5.487806797027588, -0.021035781130194664]",0.9791839122772217
1,"['    @Test\n    public void testStrings() {\n        terminal.expectCommand(\n                ""/bin/bash \\""with space\\"" \\""speci&l\\"" \\""\\"" \\""double\\\\\\""quote\\"" 2>&1"",\n                0,\n                """");\n        commandLine.add(""/bin/bash"", ""with space"", ""speci&l"", """", ""double\\""quote"").execute();\n        assertEquals(""bash"", commandLine.programName());\n    }\n']",bin;terminal;speci;expect;Line;speci;bash;bash;execute;Line,8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.493773937225342, -5.016574859619141, -5.401481628417969, -6.428752899169922, -5.4411420822143555, -0.021426275372505188]",0.9788016080856323
1,"['    @Test\n    public void testBasicExecute() {\n        terminal.expectCommand(""foo bar 2>&1"", 0, ""line1\\nline2\\n\\n"");\n        CommandResult result = commandLine.add(""foo"", ""bar"").execute();\n        assertEquals(0, result.getExitCode());\n        assertEquals(""line1\\nline2"", result.getOutput());\n        assertEquals(""line1\\nline2\\n\\n"", result.getUntrimmedOutput());\n        assertEquals(List.of(""line1"", ""line2""), result.getOutputLines());\n        assertEquals(1, context.getSystemModificationLog().size());\n        assertEquals(""Executing command: foo bar 2>&1"", context.getSystemModificationLog().get(0));\n\n        List<CommandLine> commandLines = terminal.getTestProcessFactory().getMutableCommandLines();\n        assertEquals(1, commandLines.size());\n        assertTrue(commandLine == commandLines.get(0));\n\n        int lines = result.map(r -> r.getOutputLines().size());\n        assertEquals(2, lines);\n    }\n']",terminal;Execute;utable;foo;Line;Result;Command;map;Log;Equals,3.4924596548080444e-09;2.153683453798294e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.0477378964424133e-09;1.0331859812140465e-09,5,5,"[-5.4689178466796875, -5.084834575653076, -5.402451038360596, -6.424353122711182, -5.400393486022949, -0.021272243931889534]",0.9789524078369141
1,"['    @Test\n    public void verifyDefaults() {\n        assertEquals(CommandLine.DEFAULT_TIMEOUT, commandLine.getTimeout());\n        assertEquals(CommandLine.DEFAULT_MAX_OUTPUT_BYTES, commandLine.getMaxOutputBytes());\n        assertEquals(CommandLine.DEFAULT_SIGTERM_GRACE_PERIOD, commandLine.getSigTermGracePeriod());\n        assertEquals(CommandLine.DEFAULT_SIGKILL_GRACE_PERIOD, commandLine.getSigKillGracePeriod());\n        assertEquals(0, commandLine.getArguments().size());\n        assertEquals(Optional.empty(), commandLine.getOutputFile());\n        assertEquals(StandardCharsets.UTF_8, commandLine.getOutputEncoding());\n        assertTrue(commandLine.getRedirectStderrToStdoutInsteadOfDiscard());\n        Predicate<Integer> defaultExitCodePredicate = commandLine.getSuccessfulExitCodePredicate();\n        assertTrue(defaultExitCodePredicate.test(0));\n        assertFalse(defaultExitCodePredicate.test(1));\n    }\n']",File;Line;Grace;verify;DEFAULT;Timeout;Exit;out;OD;Output,6.548361852765083e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.47836446762085, -5.052746772766113, -5.4131364822387695, -6.477971076965332, -5.463525772094727, -0.021020488813519478]",0.9791988730430603
1,"['    @Test\n    public void executeSilently() {\n        terminal.ignoreCommand("""");\n        commandLine.add(""foo"", ""bar"").executeSilently();\n        assertEquals(0, context.getSystemModificationLog().size());\n        commandLine.recordSilentExecutionAsSystemModification();\n        assertEquals(1, context.getSystemModificationLog().size());\n        assertEquals(""Executed command: foo bar 2>&1"", context.getSystemModificationLog().get(0));\n    }\n']",Silently;ignore;command;Silently;record;execute;Modification;foo;System;get,1.280568540096283e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;7.421476766467094e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.468410968780518, -5.0613694190979, -5.406776428222656, -6.44026517868042, -5.4076337814331055, -0.021345295011997223]",0.9788808822631836
1,"['    @Test(expected = NegativeArraySizeException.class)\n    public void processFactorySpawnFails() {\n        terminal.interceptCommand(\n                        commandLine.toString(),\n                        command -> { throw new NegativeArraySizeException(); });\n        commandLine.add(""foo"").execute();\n    }\n']",Line;Exception;throw;Exception;execute;process;terminal;add;Array;class,9.022187441587448e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.522562026977539, -5.034709453582764, -5.422420501708984, -6.4549736976623535, -5.451110363006592, -0.021003447473049164]",0.979215681552887
1,"['    @Test\n    public void waitingForTerminationExceptionStillClosesChild() {\n        TestChildProcess2 child = new TestChildProcess2(0, """");\n        child.throwInWaitForTermination(new NegativeArraySizeException());\n        terminal.interceptCommand(commandLine.toString(), command -> child);\n        assertFalse(child.closeCalled());\n        try {\n            commandLine.add(""foo"").execute();\n            fail();\n        } catch (NegativeArraySizeException e) {\n            // OK\n        }\n\n        assertTrue(child.closeCalled());\n    }\n']",Process;Termination;waiting;Closes;For;Child;Array;terminal;For;command,1.2514647096395493e-09;1.1059455573558807e-09;9.313225746154785e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.6193447411060333e-10,5,5,"[-5.529184341430664, -5.027272701263428, -5.450597286224365, -6.473084926605225, -5.4748101234436035, -0.020769372582435608]",0.9794448018074036
1,"['    @Test\n    public void programFails() {\n        terminal.expectCommand(""foo 2>&1"", 1, """");\n        try {\n            commandLine.add(""foo"").execute();\n            fail();\n        } catch (ChildProcessFailureException e) {\n            assertEquals(\n                    ""Command \'foo 2>&1\' terminated with exit code 1: stdout/stderr: \'\'"",\n                    e.getMessage());\n        }\n    }\n']",program;ails;foo;Equals;code;Command;stdout;stder;add;Exception,1.1641532182693481e-09;4.220055416226387e-10;4.0745362639427185e-10;3.892637323588133e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10,5,5,"[-5.5007429122924805, -5.0472893714904785, -5.462179183959961, -6.482921600341797, -5.455313205718994, -0.020771823823451996]",0.979442298412323
1,"['    @Test\n    public void mapException() {\n        terminal.ignoreCommand(""output"");\n        CommandResult result = terminal.newCommandLine(context).add(""program"").execute();\n        IllegalArgumentException exception = new IllegalArgumentException(""foo"");\n        try {\n            result.mapOutput(output -> { throw exception; });\n            fail();\n        } catch (UnexpectedOutputException e) {\n            assertEquals(""Command \'program 2>&1\' output was not of the expected format: "" +\n                    ""Failed to map output: stdout/stderr: \'output\'"", e.getMessage());\n            assertTrue(e.getCause() == exception);\n        }\n    }\n']",map;execute;output;terminal;to;output;Message;context;Command;Cause,1.5133991837501526e-09;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10,5,5,"[-5.474395751953125, -5.078980922698975, -5.455380916595459, -6.466800212860107, -5.4243645668029785, -0.020870480686426163]",0.9793456792831421
1,"['    @Test\n    public void testMapEachLine() {\n        assertEquals(\n                1 + 2 + 3,\n                terminal.ignoreCommand(""1\\n2\\n3\\n"")\n                        .newCommandLine(context)\n                        .add(""foo"")\n                        .execute()\n                        .mapEachLine(Integer::valueOf)\n                        .stream()\n                        .mapToInt(i -> i)\n                        .sum());\n    }\n']",sum;Command;execute;terminal;Line;Equals;map;context;add;value,1.3969838619232178e-09;6.402842700481415e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.0913936421275139e-10;8.731149137020111e-11;5.820766091346741e-11;2.9103830456733704e-11;-5.820766091346741e-11,5,5,"[-5.45057487487793, -5.072221755981445, -5.4211649894714355, -6.427116394042969, -5.422998905181885, -0.02123921737074852]",0.9789847731590271
1,"['    @Test\n    public void addTokensWithMultipleWhiteSpaces() {\n        terminal.expectCommand(""iptables -L 2>&1"");\n        commandLine.addTokens(""iptables  -L"").execute();\n\n        terminal.verifyAllCommandsExecuted();\n    }\n']",terminal;Commands;verify;add;iptables;add;White;Line;expect;All,6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.555419445037842, -4.958056449890137, -5.426140785217285, -6.507411003112793, -5.466169357299805, -0.02123664878308773]",0.9789872765541077
1,"['    @Test\n    public void addTokensWithSpecialCharacters() {\n        terminal.expectCommand(""find . ! -name hei 2>&1"");\n        commandLine.addTokens(""find . ! -name hei"").execute();\n\n        terminal.verifyAllCommandsExecuted();\n    }\n']",execute;he;Special;terminal;he;verify;add;Tokens;Line;command,1.57160684466362e-09;1.1641532182693481e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.539545059204102, -4.997735023498535, -5.420744895935059, -6.49229621887207, -5.444432258605957, -0.021163122728466988]",0.9790592193603516
1,"['    @Test\n    public void testSuccess() throws Exception {\n        when(commandLine.getTimeout()).thenReturn(Duration.ofHours(1));\n        when(commandLine.getMaxOutputBytes()).thenReturn(10L);\n        when(commandLine.getOutputEncoding()).thenReturn(StandardCharsets.UTF_8);\n        when(commandLine.getSigTermGracePeriod()).thenReturn(Duration.ofMinutes(2));\n        when(commandLine.getSigKillGracePeriod()).thenReturn(Duration.ofMinutes(3));\n        when(commandLine.toString()).thenReturn(""program arg"");\n\n        when(timer.currentTime()).thenReturn(\n                Instant.ofEpochMilli(1),\n                Instant.ofEpochMilli(2));\n\n        when(processApi.waitFor(anyLong(), any())).thenReturn(true);\n\n        try (ChildProcess2Impl child =\n                     new ChildProcess2Impl(commandLine, processApi, temporaryFile, timer)) {\n            child.waitForTermination();\n        }\n    }\n']",program;Time;Line;wait;Period;of;arg;current;of;Duration,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10,5,5,"[-5.51409387588501, -4.783120155334473, -5.418419361114502, -6.494437217712402, -5.547280788421631, -0.02249463088810444]",0.9777566194534302
1,"['    @Test\n    public void testTimeout() throws Exception {\n        when(commandLine.getTimeout()).thenReturn(Duration.ofSeconds(1));\n        when(commandLine.getMaxOutputBytes()).thenReturn(10L);\n        when(commandLine.getOutputEncoding()).thenReturn(StandardCharsets.UTF_8);\n        when(commandLine.getSigTermGracePeriod()).thenReturn(Duration.ofMinutes(2));\n        when(commandLine.getSigKillGracePeriod()).thenReturn(Duration.ofMinutes(3));\n        when(commandLine.toString()).thenReturn(""program arg"");\n\n        when(timer.currentTime()).thenReturn(\n                Instant.ofEpochSecond(0),\n                Instant.ofEpochSecond(2));\n\n        when(processApi.waitFor(anyLong(), any())).thenReturn(true);\n\n        try (ChildProcess2Impl child =\n                     new ChildProcess2Impl(commandLine, processApi, temporaryFile, timer)) {\n            try {\n                child.waitForTermination();\n                fail();\n            } catch (TimeoutChildProcessException e) {\n                assertEquals(\n                        ""Command \'program arg\' timed out after PT1S: stdout/stderr: \'\'"",\n                        e.getMessage());\n            }\n        }\n    }\n']",Output;of;Epoch;Period;Bytes;Kill;Period;Second;program;Grace,2.7939677238464355e-09;2.3283064365386963e-09;1.57160684466362e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.548361852765083e-10,5,5,"[-5.509515762329102, -4.950557708740234, -5.394213676452637, -6.473142147064209, -5.537247180938721, -0.021378902718424797]",0.9788479804992676
1,"['    @Test\n    public void testMaxOutputBytes() throws Exception {\n        when(commandLine.getTimeout()).thenReturn(Duration.ofSeconds(1));\n        when(commandLine.getMaxOutputBytes()).thenReturn(10L);\n        when(commandLine.getOutputEncoding()).thenReturn(StandardCharsets.UTF_8);\n        when(commandLine.getSigTermGracePeriod()).thenReturn(Duration.ofMinutes(2));\n        when(commandLine.getSigKillGracePeriod()).thenReturn(Duration.ofMinutes(3));\n        when(commandLine.toString()).thenReturn(""program arg"");\n\n        when(timer.currentTime()).thenReturn(\n                Instant.ofEpochMilli(0),\n                Instant.ofEpochMilli(1));\n\n        when(processApi.waitFor(anyLong(), any())).thenReturn(true);\n\n        Files.write(temporaryFile, ""1234567890123"".getBytes(StandardCharsets.UTF_8));\n\n        try (ChildProcess2Impl child =\n                     new ChildProcess2Impl(commandLine, processApi, temporaryFile, timer)) {\n            try {\n                child.waitForTermination();\n                fail();\n            } catch (LargeOutputChildProcessException e) {\n                assertEquals(\n                        ""Command \'program arg\' output more than 13 bytes: stdout/stderr: \'1234567890123\'"",\n                        e.getMessage());\n            }\n        }\n    }\n']",Exception;Mill;when;Output;Period;ig;Max;Output;Process;Instant,1.1641532182693481e-09;1.0477378964424133e-09;8.731149137020111e-10;8.731149137020111e-10;7.8580342233181e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.530770301818848, -4.890287399291992, -5.382704257965088, -6.467574119567871, -5.550087928771973, -0.021752582862973213]",0.9784823060035706
1,"['    @Test\n    public void testUnkillable() throws Exception {\n        when(commandLine.getTimeout()).thenReturn(Duration.ofSeconds(1));\n        when(commandLine.getMaxOutputBytes()).thenReturn(10L);\n        when(commandLine.getOutputEncoding()).thenReturn(StandardCharsets.UTF_8);\n        when(commandLine.getSigTermGracePeriod()).thenReturn(Duration.ofMinutes(2));\n        when(commandLine.getSigKillGracePeriod()).thenReturn(Duration.ofMinutes(3));\n        when(commandLine.toString()).thenReturn(""program arg"");\n\n        when(timer.currentTime()).thenReturn(\n                Instant.ofEpochMilli(0),\n                Instant.ofEpochMilli(1));\n\n        when(processApi.waitFor(anyLong(), any())).thenReturn(false);\n\n        Files.write(temporaryFile, ""1234567890123"".getBytes(StandardCharsets.UTF_8));\n\n        try (ChildProcess2Impl child =\n                     new ChildProcess2Impl(commandLine, processApi, temporaryFile, timer)) {\n            try {\n                child.waitForTermination();\n                fail();\n            } catch (UnkillableChildProcessException e) {\n                assertEquals(\n                        ""Command \'program arg\' did not terminate even after SIGTERM, +PT2M, SIGKILL, and +PT3M: stdout/stderr: \'1234567890123\'"",\n                        e.getMessage());\n            }\n        }\n    }\n']",Unkillable;Epoch;Bytes;Output;Mill;Instant;Max;Exception;Duration;command,4.0745362639427185e-09;3.0850060284137726e-09;2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.2223608791828156e-09;8.731149137020111e-10,5,5,"[-5.5282816886901855, -4.895009994506836, -5.3938889503479, -6.473344326019287, -5.551779270172119, -0.02165832929313183]",0.9785745143890381
1,"['    @Test\n    public void bytes_to_display_count_test() {\n        assertEquals(""-1 bytes"", DiskSize.of(-1).asString());\n        assertEquals(""123 bytes"", DiskSize.of(123).asString());\n        assertEquals(""1 kB"", DiskSize.of(1_000).asString());\n        assertEquals(""15 MB"", DiskSize.of(15_000_000).asString());\n        assertEquals(""123 GB"", DiskSize.of(123_456_789_012L).asString());\n        assertEquals(""988 TB"", DiskSize.of(987_654_321_098_765L).asString());\n        assertEquals(""987.7 TB"", DiskSize.of(987_654_321_098_765L).asString(1));\n        assertEquals(""987.65 TB"", DiskSize.of(987_654_321_098_765L).asString(2));\n        assertEquals(""2 PB"", DiskSize.of(2_000_000_000_000_000L).asString());\n        assertEquals(""9 EB"", DiskSize.of(Long.MAX_VALUE).asString());\n    }\n']",as;Disk;count;Equals;TB;EB;Size;MAX;Disk;Disk,1.6298145055770874e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.4613213539123535, -5.05637788772583, -5.431247234344482, -6.4629106521606445, -5.444395542144775, -0.021095776930451393]",0.9791252017021179
1,"['    @Test\n    public void newDirectory() {\n        verifySystemModifications(\n                ""Creating directory "" + path,\n                ""Changing owner of /parent/dir from user to test-owner"",\n                ""Changing group of /parent/dir from group to test-group"");\n\n        owner = ""new-owner"";\n        verifySystemModifications(""Changing owner of /parent/dir from test-owner to new-owner"");\n\n        group = ""new-group"";\n        verifySystemModifications(""Changing group of /parent/dir from test-group to new-group"");\n\n        permissions = ""--x---r--"";\n        verifySystemModifications(""Changing permissions of /parent/dir from rwxr----x to --x---r--"");\n    }\n']",Modifications;Directory;to;verify;owner;wx;Modifications;dir;owner;group,1.4988472685217857e-09;1.4551915228366852e-09;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.477828502655029, -5.085700035095215, -5.479963302612305, -6.481903553009033, -5.409955978393555, -0.020748939365148544]",0.9794648289680481
1,"['    @Test\n    public void exceptionIfMissingParent() {\n        String path = ""/parent/dir"";\n        MakeDirectory makeDirectory = new MakeDirectory(fileSystem.getPath(path));\n\n        try {\n            makeDirectory.converge(context);\n        } catch (UncheckedIOException e) {\n            if (e.getCause() instanceof NoSuchFileException) {\n                return;\n            }\n            throw e;\n        }\n        fail();\n    }\n']",Missing;Directory;File;dir;new;catch;exception;IOException;converge;Directory,8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.5196757316589355, -5.0294189453125, -5.448193550109863, -6.474991798400879, -5.476981163024902, -0.020791906863451004]",0.9794227480888367
1,"['    @Test\n    public void okIfParentExists() {\n        String path = ""/dir"";\n        MakeDirectory makeDirectory = new MakeDirectory(fileSystem.getPath(path));\n        assertTrue(makeDirectory.converge(context));\n        assertTrue(Files.isDirectory(fileSystem.getPath(path)));\n\n        MakeDirectory makeDirectory2 = new MakeDirectory(fileSystem.getPath(path));\n        assertFalse(makeDirectory2.converge(context));\n    }\n']",new;path;dir;context;Directory;Exists;get;context;Directory;Directory,1.0477378964424133e-09;4.511093720793724e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.529556751251221, -5.002584457397461, -5.443955898284912, -6.494670391082764, -5.485599517822266, -0.020884839817881584]",0.9793318510055542
1,['    @Test\n    public void storedBoolean() {\n        assertFalse(storedBoolean.value());\n        storedBoolean.set(context);\n        assertTrue(storedBoolean.value());\n        storedBoolean.clear(context);\n        assertFalse(storedBoolean.value());\n    }\n'],Boolean;Boolean;stored;stored;Boolean;value;False;context;value;stored,1.0186340659856796e-09;9.022187441587448e-10;7.130438461899757e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1827872842550278e-10,5,5,"[-5.533581256866455, -5.013891696929932, -5.435612678527832, -6.483148097991943, -5.480743885040283, -0.020866861566901207]",0.9793494343757629
1,"['    @Test\n    public void testCompatibility() throws IOException {\n        StoredInteger storedInteger = new StoredInteger(path);\n        assertFalse(storedBoolean.value());\n\n        storedInteger.write(context, 1);\n        assertTrue(storedBoolean.value());\n\n        storedInteger.write(context, 2);\n        assertTrue(storedBoolean.value());\n\n        storedInteger.write(context, 0);\n        assertFalse(storedBoolean.value());\n\n        Files.delete(path);\n        assertFalse(storedBoolean.value());\n    }\n']",IOException;path;Compatibility;new;stored;Stored;Boolean;delete;write;value,2.7939677238464355e-09;1.9208528101444244e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.280568540096283e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10,5,5,"[-5.489659786224365, -5.035630226135254, -5.430519104003906, -6.464404106140137, -5.477387428283691, -0.020968660712242126]",0.9792496562004089
1,"['    @Test\n    public void fileDoesNotExist() {\n        assertFalse(fileSnapshot.exists());\n        assertFalse(fileSnapshot.attributes().isPresent());\n        assertFalse(fileSnapshot.content().isPresent());\n        assertEquals(path.toPath(), fileSnapshot.path());\n    }\n']",Does;attributes;False;Path;Snapshot;exists;to;path;Snapshot;Snapshot,6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.532923698425293, -4.968560695648193, -5.345948696136475, -6.426538467407227, -5.443104267120361, -0.02185615710914135]",0.9783809781074524
1,['    @Test\n    public void directory() {\n        path.createParents().createDirectory();\n        fileSnapshot = fileSnapshot.snapshot();\n        assertTrue(fileSnapshot.exists());\n        assertTrue(fileSnapshot.attributes().isPresent());\n        assertTrue(fileSnapshot.attributes().get().isDirectory());\n    }\n'],create;Present;directory;exists;Parents;create;file;attributes;Snapshot;Snapshot,5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.517457485198975, -5.016500949859619, -5.425291061401367, -6.480471611022949, -5.441763877868652, -0.021134061738848686]",0.9790875911712646
1,"['    @Test\n    public void regularFile() {\n        path.createParents().writeUtf8File(""file content"");\n        fileSnapshot = fileSnapshot.snapshot();\n        assertTrue(fileSnapshot.exists());\n        assertTrue(fileSnapshot.attributes().isPresent());\n        assertTrue(fileSnapshot.attributes().get().isRegularFile());\n        assertTrue(fileSnapshot.utf8Content().isPresent());\n        assertEquals(""file content"", fileSnapshot.utf8Content().get());\n\n        FileSnapshot newFileSnapshot = fileSnapshot.snapshot();\n        assertSame(fileSnapshot, newFileSnapshot);\n    }\n']",File;regular;Same;Ut;utf;Present;new;Present;get;attributes,6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.491989612579346, -5.049036502838135, -5.471498966217041, -6.491333484649658, -5.4531025886535645, -0.020753493532538414]",0.9794603586196899
1,"['    @Test\n    public void fileRemoval() {\n        path.createParents().writeUtf8File(""file content"");\n        fileSnapshot = fileSnapshot.snapshot();\n        assertTrue(fileSnapshot.exists());\n        path.deleteIfExists();\n        fileSnapshot = fileSnapshot.snapshot();\n        assertFalse(fileSnapshot.exists());\n    }\n']",write;Snapshot;True;File;delete;Snapshot;create;Snapshot;file;Snapshot,5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10,5,5,"[-5.5268049240112305, -5.004643440246582, -5.464189529418945, -6.506113052368164, -5.475776195526123, -0.0208177100867033]",0.9793975949287415
1,"['    @Test\n    public void testEdit() {\n        path.writeUtf8File(joinLines(""first"", ""second"", ""third""));\n\n        LineEditor lineEditor = mock(LineEditor.class);\n        when(lineEditor.edit(any())).thenReturn(\n                LineEdit.none(), // don\'t edit the first line\n                LineEdit.remove(), // remove the second\n                LineEdit.replaceWith(""replacement"")); // replace the third\n\n        Editor editor = new Editor(path.toPath(), lineEditor);\n        TaskContext context = mock(TaskContext.class);\n\n        assertTrue(editor.converge(context));\n\n        verify(lineEditor, times(3)).edit(any());\n\n        // Verify the system modification message\n        ArgumentCaptor<String> modificationMessage = ArgumentCaptor.forClass(String.class);\n        verify(context).recordSystemModification(any(), modificationMessage.capture());\n        assertEquals(\n                ""Patching file /file:\\n-second\\n-third\\n+replacement\\n"",\n                modificationMessage.getValue());\n\n        // Verify the new contents of the file:\n        assertEquals(joinLines(""first"", ""replacement""), path.readUtf8File());\n    }\n']",File;Ut;replacement;join;Edit;modification;Equals;Editor;Task;edit,3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.4632673263549805, -5.077301502227783, -5.428727626800537, -6.446701526641846, -5.418394565582275, -0.021106282249093056]",0.9791148900985718
1,"['    @Test\n    public void testInsert() {\n        path.writeUtf8File(joinLines(""second"", ""eight"", ""fifth"", ""seventh""));\n\n        LineEditor lineEditor = mock(LineEditor.class);\n        when(lineEditor.edit(any())).thenReturn(\n                LineEdit.insertBefore(""first""), // insert first, and keep the second line\n                LineEdit.replaceWith(""third"", ""fourth""), // remove eight, and replace with third and fourth instead\n                LineEdit.none(), // Keep fifth\n                LineEdit.insert(List.of(""sixth""), // insert sixth before seventh\n                        List.of(""eight""))); // add eight after seventh\n\n        Editor editor = new Editor(path.toPath(), lineEditor);\n        TaskContext context = mock(TaskContext.class);\n\n        assertTrue(editor.converge(context));\n\n        // Verify the system modification message\n        ArgumentCaptor<String> modificationMessage = ArgumentCaptor.forClass(String.class);\n        verify(context).recordSystemModification(any(), modificationMessage.capture());\n        assertEquals(\n                ""Patching file /file:\\n"" +\n                        ""+first\\n"" +\n                        ""-eight\\n"" +\n                        ""+third\\n"" +\n                        ""+fourth\\n"" +\n                        ""+sixth\\n"" +\n                        ""+eight\\n"",\n                modificationMessage.getValue());\n\n        // Verify the new contents of the file:\n        assertEquals(joinLines(""first"", ""second"", ""third"", ""fourth"", ""fifth"", ""sixth"", ""seventh"", ""eight""),\n                path.readUtf8File());\n    }\n']",Captor;Captor;mock;modification;Task;capture;path;File;insert;Insert,1.0477378964424133e-09;1.0186340659856796e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.167706593871117e-10;4.220055416226387e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.447980880737305, -5.038049697875977, -5.377917289733887, -6.409275054931641, -5.424563884735107, -0.021695658564567566]",0.9785379767417908
1,"['    @Test\n    public void noop() {\n        path.writeUtf8File(""line\\n"");\n\n        LineEditor lineEditor = mock(LineEditor.class);\n        when(lineEditor.edit(any())).thenReturn(LineEdit.none());\n\n        Editor editor = new Editor(path.toPath(), lineEditor);\n        TaskContext context = mock(TaskContext.class);\n\n        assertFalse(editor.converge(context));\n\n        verify(lineEditor, times(1)).edit(any());\n\n        // Verify the system modification message\n        verify(context, times(0)).recordSystemModification(any(), any());\n\n        // Verify same contents\n        assertEquals(""line\\n"", path.readUtf8File());\n    }\n']",Task;Ut;edit;noop;Editor;path;edit;times;editor;File,1.3969838619232178e-09;1.1350493878126144e-09;9.89530235528946e-10;9.313225746154785e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.5023980140686035, -5.073681354522705, -5.45780611038208, -6.47632360458374, -5.439855575561523, -0.02069137431681156]",0.9795212149620056
1,"['    @Test\n    public void testMissingFile() {\n        LineEditor lineEditor = mock(LineEditor.class);\n        when(lineEditor.onComplete()).thenReturn(List.of(""line""));\n\n        TaskContext context = mock(TaskContext.class);\n        var editor = new Editor(path.toPath(), lineEditor);\n        editor.converge(context);\n\n        assertEquals(""line\\n"", path.readUtf8File());\n    }\n']",File;Complete;path;Missing;mock;Editor;Path;context;context;class,1.280568540096283e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.49604606628418, -5.035534858703613, -5.423701763153076, -6.4785237312316895, -5.434130668640137, -0.02113942988216877]",0.979082465171814
1,"['    @Test\n    public void trivial() {\n        assertConvergence(""Creating file /dir/file.txt"",\n                ""Changing owner of /dir/file.txt from user to owner"",\n                ""Changing group of /dir/file.txt from group to group1"",\n                ""Changing permissions of /dir/file.txt from rw-r--r-- to rw-r-xr--"");\n\n        content = ""new-content"";\n        assertConvergence(""Patching file /dir/file.txt"");\n\n        owner = ""new-owner"";\n        assertConvergence(""Changing owner of /dir/file.txt from owner to "" +\n                        owner);\n\n        group = ""new-group1"";\n        assertConvergence(""Changing group of /dir/file.txt from group1 to new-group1"");\n\n        permissions = ""rwxr--rwx"";\n        assertConvergence(""Changing permissions of /dir/file.txt from rw-r-xr-- to "" +\n                permissions);\n    }\n']",Convergence;trivial;txt;content;txt;of;txt;Convergence;Creating;file,1.2514647096395493e-09;1.1641532182693481e-09;9.89530235528946e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.546585164964199e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.452342987060547, -5.084804058074951, -5.451643466949463, -6.446148872375488, -5.415499210357666, -0.02101862244307995]",0.9792006015777588
1,"['        @Test\n        public void all_files_non_recursive() {\n            assertFileHelper(FileFinder.files(testRoot())\n                            .maxDepth(1),\n\n                    of(""file-1.json"", ""test.json"", ""test.txt""),\n                    of(""test"", ""test/file.txt"", ""test/data.json"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));\n        }\n']",recursive;max;non;json;txt;files;inder;Helper;subdir;data,1.57160684466362e-09;9.313225746154785e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.1641532182693481e-10;1.0186340659856796e-10;7.275957614183426e-11,5,5,"[-5.523773193359375, -4.936517238616943, -5.4345479011535645, -6.4814629554748535, -5.5060715675354, -0.0213534627109766]",0.9788728952407837
1,"['        @Test\n        public void all_files_recursive() {\n            assertFileHelper(FileFinder.files(testRoot()),\n\n                    of(""file-1.json"", ""test.json"", ""test.txt"", ""test/file.txt"", ""test/data.json"", ""test/subdir-1/test""),\n                    of(""test"", ""test/subdir-1"", ""test/subdir-2""));\n        }\n']",Helper;files;files;all;inder;txt;Root;file;subdir;data,1.280568540096283e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;5.238689482212067e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.673470251262188e-10;7.275957614183426e-11;5.820766091346741e-11,5,5,"[-5.4951395988464355, -5.026280879974365, -5.487934112548828, -6.51993465423584, -5.4727606773376465, -0.020692192018032074]",0.9795204401016235
1,"['        @Test\n        public void all_files_recursive_with_prune_relative() {\n            assertFileHelper(FileFinder.files(testRoot()).prune(fileSystem.getPath(""test"")),\n\n                    of(""file-1.json"", ""test.json"", ""test.txt""),\n                    of(""test"", ""test/file.txt"", ""test/data.json"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));\n        }\n']",Root;all;json;files;Helper;file;get;recursive;subdir;txt,6.51925802230835e-09;1.979060471057892e-09;1.862645149230957e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.507091045379639, -4.985904216766357, -5.435694217681885, -6.48410177230835, -5.4705634117126465, -0.021209456026554108]",0.9790138602256775
1,"['        @Test\n        public void all_files_recursive_with_prune_absolute() {\n            assertFileHelper(FileFinder.files(testRoot()).prune(testRoot().resolve(""test/subdir-1"")),\n\n                    of(""file-1.json"", ""test.json"", ""test.txt"", ""test/file.txt"", ""test/data.json""),\n                    of(""test"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));\n        }\n']",Root;prune;files;recursive;Helper;txt;file;absolute;txt;of,4.423782229423523e-09;3.259629011154175e-09;1.5133991837501526e-09;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.504917144775391, -4.978425025939941, -5.465237617492676, -6.518922805786133, -5.489707946777344, -0.02100636437535286]",0.979212760925293
1,"['        @Test(expected = IllegalArgumentException.class)\n        public void throws_if_prune_path_not_under_base_path() {\n            FileFinder.files(Paths.get(""/some/path"")).prune(Paths.get(""/other/path""));\n        }\n']",inder;expected;path;if;some;Path;Path;path;File;get,1.280568540096283e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.8917489796876907e-10;4.3655745685100555e-11,5,5,"[-5.528543949127197, -4.961465358734131, -5.353132247924805, -6.467218399047852, -5.450181484222412, -0.021792590618133545]",0.9784431457519531
1,"['        @Test\n        public void with_file_filter_recursive() {\n            assertFileHelper(FileFinder.files(testRoot())\n                            .match(FileFinder.nameEndsWith("".json"")),\n\n                    of(""file-1.json"", ""test.json"", ""test/data.json""),\n                    of(""test.txt"", ""test"", ""test/file.txt"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));\n        }\n']",File;Root;of;Helper;recursive;file;End;File;files;match,1.3969838619232178e-09;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.524121284484863, -4.936192035675049, -5.436399936676025, -6.481553077697754, -5.501980304718018, -0.0213631484657526]",0.9788634181022644
1,"['        @Test\n        public void all_files_limited_depth() {\n            assertFileHelper(FileFinder.files(testRoot())\n                            .maxDepth(2),\n\n                    of(""test.txt"", ""file-1.json"", ""test.json"", ""test/file.txt"", ""test/data.json""),\n                    of(""test"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));\n        }\n']",files;subdir;json;subdir;File;all;File;subdir;txt;inder,1.0244548320770264e-08;2.7939677238464355e-09;2.3865140974521637e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.542585849761963, -4.938144683837891, -5.4306159019470215, -6.481468677520752, -5.516359329223633, -0.02124061807990074]",0.9789832830429077
1,"['        @Test\n        public void directory_with_filter() {\n            assertFileHelper(FileFinder.directories(testRoot())\n                            .match(FileFinder.nameStartsWith(""subdir""))\n                            .maxDepth(2),\n\n                    of(""test/subdir-1"", ""test/subdir-2""),\n                    of(""file-1.json"", ""test.json"", ""test.txt"", ""test"", ""test/file.txt"", ""test/data.json""));\n        }\n']",directories;max;of;subdir;directory;file;json;inder;match;with,1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.5029449462890625, -4.964949607849121, -5.4459028244018555, -6.492344379425049, -5.488224506378174, -0.02124120108783245]",0.9789828062057495
1,"['        @Test\n        public void match_file_and_directory_with_same_name() {\n            assertFileHelper(FileFinder.from(testRoot())\n                            .match(FileFinder.nameEndsWith(""test"")),\n\n                    of(""test"", ""test/subdir-1/test""),\n                    of(""file-1.json"", ""test.json"", ""test.txt""));\n        }\n']",subdir;directory;of;name;match;json;End;same;inder;Root,1.6298145055770874e-09;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.504513740539551, -4.9382829666137695, -5.432533264160156, -6.483969688415527, -5.484228134155273, -0.0215165838599205]",0.9787132740020752
1,"['        @Test\n        public void all_contents() {\n            assertFileHelper(FileFinder.from(testRoot())\n                            .maxDepth(1),\n\n                    of(""file-1.json"", ""test.json"", ""test.txt"", ""test""),\n                    of());\n\n            assertTrue(Files.exists(testRoot()));\n        }\n']",json;inder;File;Helper;Root;of;all;Files;from;True,3.841705620288849e-09;3.4924596548080444e-09;2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.402842700481415e-10,5,5,"[-5.523394584655762, -4.974153995513916, -5.46535587310791, -6.5020976066589355, -5.502146244049072, -0.020933404564857483]",0.9792841672897339
1,"['        @Test\n        public void age_filter_test() {\n            Path path = Paths.get(""/my/fake/path"");\n            when(attributes.lastModifiedTime()).thenReturn(FileTime.from(Instant.now().minus(Duration.ofHours(1))));\n            FileFinder.FileAttributes fileAttributes = new FileFinder.FileAttributes(path, attributes);\n\n            assertFalse(FileFinder.olderThan(Duration.ofMinutes(61)).test(fileAttributes));\n            assertTrue(FileFinder.olderThan(Duration.ofMinutes(59)).test(fileAttributes));\n\n            assertTrue(FileFinder.youngerThan(Duration.ofMinutes(61)).test(fileAttributes));\n            assertFalse(FileFinder.youngerThan(Duration.ofMinutes(59)).test(fileAttributes));\n        }\n']",Instant;minus;File;Duration;younger;filter;Path;Attributes;Duration;Time,6.51925802230835e-09;3.725290298461914e-09;3.259629011154175e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09,5,5,"[-5.497962951660156, -5.068722724914551, -5.404581546783447, -6.468492031097412, -5.48366117477417, -0.020801948383450508]",0.9794127941131592
1,"['        @Test\n        public void size_filters() {\n            Path path = Paths.get(""/my/fake/path"");\n            when(attributes.size()).thenReturn(100L);\n            FileFinder.FileAttributes fileAttributes = new FileFinder.FileAttributes(path, attributes);\n\n            assertFalse(FileFinder.largerThan(101).test(fileAttributes));\n            assertTrue(FileFinder.largerThan(99).test(fileAttributes));\n\n            assertTrue(FileFinder.smallerThan(101).test(fileAttributes));\n            assertFalse(FileFinder.smallerThan(99).test(fileAttributes));\n        }\n']",False;path;my;get;Than;filters;Return;inder;Than;Path,5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.526323318481445, -5.043093204498291, -5.420451641082764, -6.449453353881836, -5.478973388671875, -0.02082996815443039]",0.979385495185852
1,"['        @Test\n        public void filename_filters() {\n            Path path = Paths.get(""/my/fake/path/some-12352-file.json"");\n            FileFinder.FileAttributes fileAttributes = new FileFinder.FileAttributes(path, attributes);\n\n            assertTrue(FileFinder.nameStartsWith(""some-"").test(fileAttributes));\n            assertFalse(FileFinder.nameStartsWith(""som-"").test(fileAttributes));\n\n            assertTrue(FileFinder.nameEndsWith("".json"").test(fileAttributes));\n            assertFalse(FileFinder.nameEndsWith(""file"").test(fileAttributes));\n\n            assertTrue(FileFinder.nameMatches(Pattern.compile(""some-[0-9]+-file.json"")).test(fileAttributes));\n            assertTrue(FileFinder.nameMatches(Pattern.compile(""^some-[0-9]+-file.json$"")).test(fileAttributes));\n            assertFalse(FileFinder.nameMatches(Pattern.compile(""some-[0-9]-file.json"")).test(fileAttributes));\n        }\n']",name;filename;fake;Path;attributes;some;compile;file;Attributes;compile,9.022187441587448e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.513851165771484, -4.951136589050293, -5.406714916229248, -6.448385715484619, -5.491081714630127, -0.021528834477066994]",0.9787012338638306
1,"['    @Test\n    public void test() {\n        Templar templar = new Templar(""x y <%= foo %>, some other <%=bar%> text"");\n        templar.set(""foo"", ""fidelity"")\n                .set(""bar"", ""halimov"")\n                .set(""not"", ""used"");\n\n        assertEquals(""x y fidelity, some other halimov text"", templar.resolve());\n    }\n']",Templar;idelity;templar;new;templar;bar;other;text;some;set,1.7462298274040222e-09;1.3969838619232178e-09;1.2514647096395493e-09;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.506226539611816, -5.047161102294922, -5.445022106170654, -6.473170757293701, -5.4420013427734375, -0.020898615941405296]",0.9793181419372559
1,"['    @Test\n    public void testWrite() {\n        final String content = ""content"";\n        final String permissions = ""rwxr-xr-x"";\n        final String owner = ""owner"";\n        final String group = ""group"";\n\n        Path path = fileSystem.getPath(""/opt/vespa/tmp/file.txt"");\n        FileWriter writer = new FileWriter(path, () -> content)\n                .withPermissions(permissions)\n                .withOwner(owner)\n                .withGroup(group)\n                .onlyIfFileDoesNotAlreadyExist();\n        assertTrue(writer.converge(context));\n        verify(context, times(1)).recordSystemModification(any(), eq(""Creating file "" + path));\n\n        UnixPath unixPath = new UnixPath(path);\n        assertEquals(content, unixPath.readUtf8File());\n        assertEquals(permissions, unixPath.getPermissions());\n        assertEquals(owner, unixPath.getOwner());\n        assertEquals(group, unixPath.getGroup());\n        Instant fileTime = unixPath.getLastModifiedTime();\n\n        // Second time is a no-op.\n        assertFalse(writer.converge(context));\n        assertEquals(fileTime, unixPath.getLastModifiedTime());\n    }\n']",Modified;file;writer;Time;context;Time;any;group;Last;op,8.731149137020111e-10;8.731149137020111e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.460805892944336, -5.084021091461182, -5.399437427520752, -6.436097145080566, -5.445478439331055, -0.021103713661432266]",0.9791173934936523
1,"['    @Test\n    public void testAtomicWrite() {\n        FileWriter writer = new FileWriter(fileSystem.getPath(""/foo/bar""))\n                .atomicWrite(true);\n\n        assertTrue(writer.converge(context, ""content""));\n\n        verify(context).recordSystemModification(any(), eq(""Creating file /foo/bar""));\n        assertEquals(""content"", new UnixPath(writer.path()).readUtf8File());\n    }\n']",writer;new;omic;atomic;Creating;converge;content;content;record;File,1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5201029777526855, -5.001866340637207, -5.438037395477295, -6.493605613708496, -5.468356609344482, -0.021029595285654068]",0.9791899919509888
1,"['    @Test\n    public void deleteExisting() {\n        assertFalse(deleter.converge(context));\n        path.createParents().writeUtf8File(""bar"");\n        assertTrue(deleter.converge(context));\n        assertFalse(deleter.converge(context));\n    }\n']",Existing;Parents;converge;deleter;deleter;True;converge;deleter;delete;False,1.3096723705530167e-09;1.280568540096283e-09;1.2223608791828156e-09;9.022187441587448e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0,5,5,"[-5.5096564292907715, -5.021232604980469, -5.393738269805908, -6.443394184112549, -5.442996025085449, -0.02133234217762947]",0.9788936972618103
1,"['    @Test\n    public void basic() {\n        FileSystem fileSystem = TestFileSystem.create();\n        Path templatePath = fileSystem.getPath(""/example.vm"");\n        String templateContent = ""a $x, $y b"";\n        new UnixPath(templatePath).writeUtf8File(templateContent);\n\n        Path toPath = fileSystem.getPath(""/example"");\n        TaskContext taskContext = mock(TaskContext.class);\n        boolean converged = Template.at(templatePath)\n                .set(""x"", ""foo"")\n                .set(""y"", ""bar"")\n                .getFileWriterTo(toPath)\n                .converge(taskContext);\n\n        assertTrue(converged);\n\n        String actualContent = new UnixPath(toPath).readUtf8File();\n        assertEquals(""a foo, bar b"", actualContent);\n    }\n']",mock;create;System;Task;set;True;Context;File;Path;converge,6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.637978807091713e-10,5,5,"[-5.481802463531494, -5.059271335601807, -5.4630656242370605, -6.4853034019470215, -5.457092761993408, -0.020758163183927536]",0.979455828666687
1,"['    @Test\n    public void get() {\n        when(unixPath.readBytes()).thenReturn(content);\n        assertArrayEquals(content, cache.get(Instant.ofEpochMilli(0)));\n        verify(unixPath, times(1)).readBytes();\n        verifyNoMoreInteractions(unixPath);\n\n        // cache hit\n        assertArrayEquals(content, cache.get(Instant.ofEpochMilli(0)));\n        verify(unixPath, times(1)).readBytes();\n        verifyNoMoreInteractions(unixPath);\n\n        // cache miss\n        when(unixPath.readBytes()).thenReturn(newContent);\n        assertArrayEquals(newContent, cache.get(Instant.ofEpochMilli(1)));\n        verify(unixPath, times(1 + 1)).readBytes();\n        verifyNoMoreInteractions(unixPath);\n\n        // cache hit both at times 0 and 1\n        assertArrayEquals(newContent, cache.get(Instant.ofEpochMilli(0)));\n        verify(unixPath, times(1 + 1)).readBytes();\n        verifyNoMoreInteractions(unixPath);\n        assertArrayEquals(newContent, cache.get(Instant.ofEpochMilli(1)));\n        verify(unixPath, times(1 + 1)).readBytes();\n        verifyNoMoreInteractions(unixPath);\n    }\n']",Mill;Epoch;Epoch;Mill;Instant;Interactions;content;Mill;Interactions;Epoch,1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;6.111804395914078e-10;5.820766091346741e-10;5.748006515204906e-10;5.238689482212067e-10,5,5,"[-5.527621269226074, -4.904508590698242, -5.3854804039001465, -6.4694623947143555, -5.527372360229492, -0.02173217013478279]",0.9785023927688599
1,"['    @Test\n    public void updateWith() {\n        cache.updateWith(content, Instant.ofEpochMilli(2));\n        assertArrayEquals(content, cache.get(Instant.ofEpochMilli(2)));\n        verifyNoMoreInteractions(unixPath);\n\n        cache.updateWith(newContent, Instant.ofEpochMilli(4));\n        assertArrayEquals(newContent, cache.get(Instant.ofEpochMilli(4)));\n        verifyNoMoreInteractions(unixPath);\n    }\n']",Instant;Mill;Interactions;Path;Content;unix;Path;Mill;cache;unix,1.3969838619232178e-08;6.05359673500061e-09;3.725290298461914e-09;3.026798367500305e-09;2.7939677238464355e-09;2.0954757928848267e-09;1.979060471057892e-09;1.862645149230957e-09;1.5133991837501526e-09;1.1641532182693481e-09,5,5,"[-5.478509902954102, -5.014794826507568, -5.381284236907959, -6.488339424133301, -5.49312686920166, -0.021277261897921562]",0.9789475202560425
1,"['    @Test\n    public void createParents() {\n        Path parentDirectory = fs.getPath(""/a/b/c"");\n        Path filePath = parentDirectory.resolve(""bar"");\n        UnixPath path = new UnixPath(filePath);\n\n        assertFalse(Files.exists(fs.getPath(""/a"")));\n        path.createParents();\n        assertTrue(Files.exists(parentDirectory));\n    }\n']",create;new;Unix;parent;get;False;parent;Directory;Path;bar,9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.519808769226074, -5.0334792137146, -5.4472174644470215, -6.503686904907227, -5.474981307983398, -0.020732710137963295]",0.9794807434082031
1,"['    @Test\n    public void utf8File() {\n        String original = ""foo\\nbar\\n"";\n        UnixPath path = new UnixPath(fs.getPath(""example.txt""));\n        path.writeUtf8File(original);\n        String fromFile = path.readUtf8File();\n        assertEquals(original, fromFile);\n    }\n']",example;ut;foo;txt;path;original;Path;write;File;bar,6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.540916919708252, -4.981982231140137, -5.428896903991699, -6.49369478225708, -5.491568088531494, -0.0210250411182642]",0.9791943430900574
1,"['    @Test\n    public void permissions() {\n        String expectedPermissions = ""rwxr-x---"";\n        UnixPath path = new UnixPath(fs.getPath(""file.txt""));\n        path.writeUtf8File(""foo"");\n        path.setPermissions(expectedPermissions);\n        assertEquals(expectedPermissions, path.getPermissions());\n    }\n']",fs;expected;get;Permissions;write;expected;Permissions;rw;Path;Path,9.604264050722122e-10;8.149072527885437e-10;5.966285243630409e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.522603988647461, -5.028462886810303, -5.43386173248291, -6.483239650726318, -5.473651885986328, -0.020851099863648415]",0.9793647527694702
1,"['    @Test(expected = IllegalArgumentException.class)\n    public void badPermissionsString() {\n        new UnixPath(fs.getPath(""file.txt"")).setPermissions(""abcdefghi"");\n    }\n']",new;fs;Exception;Permissions;Unix;set;file;get;Path;txt,1.1641532182693481e-09;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;2.9103830456733704e-11;0.0;0.0,5,5,"[-5.567809581756592, -5.007950305938721, -5.391134738922119, -6.487132549285889, -5.479299068450928, -0.020973796024918556]",0.9792446494102478
1,"['    @Test\n    public void owner() {\n        Path path = fs.getPath(""file.txt"");\n        UnixPath unixPath = new UnixPath(path);\n        unixPath.writeUtf8File(""foo"");\n\n        unixPath.setOwner(""owner"");\n        assertEquals(""owner"", unixPath.getOwner());\n\n        unixPath.setGroup(""group"");\n        assertEquals(""group"", unixPath.getGroup());\n    }\n']",write;set;owner;owner;Path;path;unix;Owner;fs;Path,6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.520801067352295, -5.013209819793701, -5.4472737312316895, -6.488741397857666, -5.477338790893555, -0.020877601578831673]",0.9793389439582825
1,"['    @Test\n    public void createDirectoryWithPermissions() {\n        Path path = fs.getPath(""dir"");\n        UnixPath unixPath = new UnixPath(path);\n        String permissions = ""rwxr-xr--"";\n        unixPath.createDirectory(permissions);\n        assertTrue(unixPath.isDirectory());\n        assertEquals(permissions, unixPath.getPermissions());\n    }\n']",Permissions;Directory;create;rw;permissions;Path;get;Path;Path;Unix,1.4551915228366852e-09;1.1932570487260818e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.533230304718018, -5.002484321594238, -5.424903869628906, -6.487363338470459, -5.484530925750732, -0.02097134478390217]",0.9792470335960388
1,"['    @Test\n    public void createSymbolicLink() {\n        String original = ""foo\\nbar\\n"";\n        UnixPath path = new UnixPath(fs.getPath(""example.txt""));\n        path.writeUtf8File(original);\n        String fromFile = path.readUtf8File();\n        assertEquals(original, fromFile);\n\n        UnixPath link = path.createSymbolicLink(fs.getPath(""link-to-example.txt""));\n        assertEquals(original, link.readUtf8File());\n    }\n']",Unix;new;Equals;original;fs;write;Unix;link;Symbolic;path,6.111804395914078e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.5007147789001465, -5.020687580108643, -5.460118293762207, -6.506592273712158, -5.476340293884277, -0.020830553025007248]",0.9793848991394043
1,"['    @Test\n    public void readBytesIfExists() {\n        UnixPath path = new UnixPath(fs.getPath(""example.txt""));\n        assertFalse(path.readBytesIfExists().isPresent());\n        path.writeBytes(new byte[]{42});\n        assertArrayEquals(new byte[]{42}, path.readBytesIfExists().get());\n    }\n']",Unix;write;path;example;get;Present;path;path;Path;read,1.3969838619232178e-09;1.1059455573558807e-09;6.984919309616089e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.5272932052612305, -4.977261066436768, -5.433474540710449, -6.488150119781494, -5.47542142868042, -0.021169891580939293]",0.9790526032447815
1,"['    @Test\n    public void deleteRecursively() throws Exception {\n        // Create the following file tree:\n        //\n        // /dir1\n        //  |--- dir2\n        //      |--- file1\n        // /link1 -> /dir1/dir2\n        //\n        var dir1 = fs.getPath(""/dir1"");\n        var dir2 = dir1.resolve(""dir2"");\n        var file1 = dir2.resolve(""file1"");\n        Files.createDirectories(dir2);\n        Files.writeString(file1, ""file1"");\n        var link1 = Files.createSymbolicLink(fs.getPath(""/link1""), dir2);\n\n        new UnixPath(link1).deleteRecursively();\n        assertTrue(""Deleting "" + link1 + "" recursively does not remove "" + dir2, Files.exists(dir2));\n        assertTrue(""Deleting "" + link1 + "" recursively does not remove "" + file1, Files.exists(file1));\n\n        new UnixPath(dir1).deleteRecursively();\n        assertFalse(dir1 + "" deleted recursively"", Files.exists(file1));\n        assertFalse(dir1 + "" deleted recursively"", Files.exists(dir2));\n        assertFalse(dir1 + "" deleted recursively"", Files.exists(dir1));\n    }\n']",Symbolic;the;write;tree;False;exists;following;fs;dir;dir,6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10,5,5,"[-5.444299697875977, -5.095739364624023, -5.4606499671936035, -6.47284460067749, -5.440837383270264, -0.02078980579972267]",0.9794249534606934
1,"['    @Test\n    public void atomicWrite() {\n        var path = new UnixPath(fs.getPath(""/dir/foo""));\n        path.createParents();\n        path.writeUtf8File(""bar"");\n        path.atomicWriteUt8(""bar v2"");\n        assertEquals(""bar v2"", path.readUtf8File());\n    }\n']",var;new;Unix;write;foo;bar;path;bar;File;create,1.3242242857813835e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;1.7462298274040222e-10,5,5,"[-5.524328708648682, -5.01874303817749, -5.456327438354492, -6.499425888061523, -5.471909523010254, -0.020792724564671516]",0.9794219732284546
1,"['    @Test\n    public void testParentAndFilename() {\n        var absolutePath = new UnixPath(""/foo/bar"");\n        assertEquals(""/foo"", absolutePath.getParent().toString());\n        assertEquals(""bar"", absolutePath.getFilename());\n\n        var pathWithoutSlash = new UnixPath(""foo"");\n        assertRuntimeException(IllegalStateException.class, ""Path has no parent directory: \'foo\'"", () -> pathWithoutSlash.getParent());\n        assertEquals(""foo"", pathWithoutSlash.getFilename());\n\n        var pathWithSlash = new UnixPath(""/foo"");\n        assertEquals(""/"", pathWithSlash.getParent().toString());\n        assertEquals(""foo"", pathWithSlash.getFilename());\n\n        assertRuntimeException(IllegalStateException.class, ""Path has no parent directory: \'/\'"", () -> new UnixPath(""/"").getParent());\n        assertRuntimeException(IllegalStateException.class, ""Path has no filename: \'/\'"", () -> new UnixPath(""/"").getFilename());\n    }\n']",Path;bar;State;absolute;Equals;Parent;get;parent;Path;new,5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.483628273010254, -5.076607704162598, -5.464807987213135, -6.476686477661133, -5.4313836097717285, -0.02075839787721634]",0.9794555902481079
1,"['    @Test\n    public void exists() {\n        UnixPath unixPath = mock(UnixPath.class);\n        FileAttributesCache cache = new FileAttributesCache(unixPath);\n\n        when(unixPath.getAttributesIfExists()).thenReturn(Optional.empty());\n        assertFalse(cache.get().isPresent());\n        verify(unixPath, times(1)).getAttributesIfExists();\n        verifyNoMoreInteractions(unixPath);\n\n        FileAttributes attributes = mock(FileAttributes.class);\n        when(unixPath.getAttributesIfExists()).thenReturn(Optional.of(attributes));\n        assertTrue(cache.get().isPresent());\n        verify(unixPath, times(1 + 1)).getAttributesIfExists();\n        verifyNoMoreInteractions(unixPath);\n\n        assertEquals(attributes, cache.getOrThrow());\n        verifyNoMoreInteractions(unixPath);\n    }\n']",mock;More;Unix;when;verify;Attributes;False;File;Interactions;Return,9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.503094673156738, -5.038318157196045, -5.429917812347412, -6.460729598999023, -5.447594165802002, -0.021032162010669708]",0.9791874885559082
1,"['    @Test\n    public void testBasics() {\n        assertCursor(0, 0, """");\n\n        cursor.write(""hello"");\n        assertCursor(0, 5, ""hello"");\n\n        cursor.write(""one\\ntwo"");\n        assertCursor(1, 3, ""helloone\\ntwo"");\n\n        cursor.deleteAll();\n        assertCursor(0, 0, """");\n\n        cursor.moveForward();\n        assertCursor(0, 0, """");\n\n        cursor.writeLine(""foo"");\n        assertCursor(1, 0, ""foo\\n"");\n\n        cursor.writeLines(""one"", ""two"");\n        assertCursor(3, 0, ""foo\\none\\ntwo\\n"");\n\n        cursor.deleteBackward();\n        assertCursor(2, 3, ""foo\\none\\ntwo"");\n\n        cursor.deleteBackward(2);\n        assertCursor(2, 1, ""foo\\none\\nt"");\n\n        Mark mark = cursor.createMark();\n\n        cursor.moveToStartOfPreviousLine().moveBackward(2);\n        assertCursor(0, 2, ""foo\\none\\nt"");\n\n        assertEquals(""o\\none\\nt"", cursor.getTextTo(mark));\n\n        cursor.deleteTo(mark);\n        assertCursor(0, 2, ""fo"");\n\n        cursor.deleteBackward(2);\n        assertCursor(0, 0, """");\n\n        cursor.writeLines(""one"", ""two"", ""three"").moveToStartOfBuffer();\n        assertCursor(0, 0, ""one\\ntwo\\nthree\\n"");\n\n        Pattern pattern = Pattern.compile(""t(.)"");\n        Optional<Match> match = cursor.moveForwardToEndOfMatch(pattern);\n        assertCursor(1, 2, ""one\\ntwo\\nthree\\n"");\n        assertTrue(match.isPresent());\n        assertEquals(""tw"", match.get().match());\n        assertEquals("""", match.get().prefix());\n        assertEquals(""o"", match.get().suffix());\n        assertEquals(new Position(1, 0), match.get().startOfMatch());\n        assertEquals(new Position(1, 2), match.get().endOfMatch());\n        assertEquals(1, match.get().groupCount());\n        assertEquals(""w"", match.get().group(1));\n\n        match = cursor.moveForwardToEndOfMatch(pattern);\n        assertCursor(2, 2, ""one\\ntwo\\nthree\\n"");\n        assertTrue(match.isPresent());\n        assertEquals(""th"", match.get().match());\n        assertEquals(1, match.get().groupCount());\n        assertEquals(""h"", match.get().group(1));\n\n        match = cursor.moveForwardToEndOfMatch(pattern);\n        assertCursor(2, 2, ""one\\ntwo\\nthree\\n"");\n        assertFalse(match.isPresent());\n\n        assertTrue(cursor.skipBackward(""h""));\n        assertCursor(2, 1, ""one\\ntwo\\nthree\\n"");\n        assertFalse(cursor.skipBackward(""x""));\n\n        assertTrue(cursor.skipForward(""hre""));\n        assertCursor(2, 4, ""one\\ntwo\\nthree\\n"");\n        assertFalse(cursor.skipForward(""x""));\n\n        try {\n            cursor.moveTo(mark);\n            fail();\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n\n        mark = cursor.createMark();\n        cursor.moveToStartOfBuffer();\n        assertEquals(new Position(0, 0), cursor.getPosition());\n        cursor.moveTo(mark);\n        assertEquals(new Position(2, 4), cursor.getPosition());\n\n        cursor.moveTo(1, 2);\n        assertCursor(1, 2, ""one\\ntwo\\nthree\\n"");\n\n        cursor.deleteSuffix();\n        assertCursor(1, 2, ""one\\ntw\\nthree\\n"");\n\n        cursor.deletePrefix();\n        assertCursor(1, 0, ""one\\n\\nthree\\n"");\n\n        cursor.deleteLine();\n        assertCursor(1, 0, ""one\\nthree\\n"");\n\n        cursor.deleteLine();\n        assertCursor(1, 0, ""one\\n"");\n\n        cursor.deleteLine();\n        assertCursor(1, 0, ""one\\n"");\n\n        cursor.moveToStartOfBuffer().moveForward().writeNewlineAfter();\n        assertCursor(0, 1, ""o\\nne\\n"");\n\n        cursor.deleteAll().writeLines(""one"", ""two"", ""three"", ""four"");\n        cursor.moveToStartOfBuffer().moveToStartOfNextLine();\n        assertCursor(1, 0, ""one\\ntwo\\nthree\\nfour\\n"");\n        Pattern pattern2 = Pattern.compile(""(o)(.)?"");\n        int count = cursor.replaceMatches(pattern2, m -> {\n            String prefix = m.group(2) == null ? """" : m.group(2);\n            return prefix + m.match() + m.group(1);\n        });\n        assertCursor(3, 5, ""one\\ntwoo\\nthree\\nfuouor\\n"");\n        assertEquals(2, count);\n\n        cursor.moveToStartOfBuffer().moveToEndOfLine();\n        Pattern pattern3 = Pattern.compile(""o"");\n        count = cursor.replaceMatches(pattern3, m -> ""a"");\n        assertEquals(4, count);\n        assertCursor(3, 5, ""one\\ntwaa\\nthree\\nfuauar\\n"");\n    }\n']",Mark;hello;Equals;move;Buffer;write;move;Line;delete;delete,1.979060471057892e-09;1.1641532182693481e-09;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.388332843780518, -5.078930854797363, -5.409858226776123, -6.425506114959717, -5.385897159576416, -0.021702658385038376]",0.9785311222076416
1,"['    @Test\n    public void testWrite() {\n        assertEquals("""", textBuffer.getString());\n        assertWrite(2, 0, ""foo\\nbar\\n"",\n                0, 0, ""foo\\nbar\\n"");\n\n        assertWrite(1, 6, ""fofirst\\nsecondo\\nbar\\n"",\n                0, 2, ""first\\nsecond"");\n\n        assertWrite(3, 1, ""fofirst\\nsecondo\\nbar\\na"",\n                3, 0, ""a"");\n        assertWrite(4, 0, ""fofirst\\nsecondo\\nbar\\na\\n"",\n                3, 1, ""\\n"");\n    }\n']",Write;na;foo;ofirst;ofirst;bar;second;second;Write;second,6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.453709125518799, -5.058866024017334, -5.466102123260498, -6.463778495788574, -5.4280171394348145, -0.021031111478805542]",0.9791885018348694
1,"['    @Test\n    public void testDelete() {\n        write(0, 0, ""foo\\nbar\\nzoo\\n"");\n        delete(0, 2, 2, 1);\n        assertEquals(""fooo\\n"", textBuffer.getString());\n\n        delete(0, 4, 1, 0);\n        assertEquals(""fooo"", textBuffer.getString());\n\n        delete(0, 0, 0, 4);\n        assertEquals("""", textBuffer.getString());\n\n        delete(0, 0, 0, 0);\n        assertEquals("""", textBuffer.getString());\n    }\n']",Delete;text;foo;delete;text;get;Buffer;Buffer;delete;nzoo,2.0954757928848267e-09;6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.421302318572998, -5.06934118270874, -5.411229133605957, -6.416064739227295, -5.391929626464844, -0.021593818441033363]",0.9786376357078552
1,"['    @Test\n    public void choose_sitelocal_ipv4_over_public() {\n        mock.addAddress(""localhost"", ""38.3.4.2"")\n                .addAddress(""localhost"", ""10.0.2.2"")\n                .addAddress(""localhost"", ""fe80::1"")\n                .addAddress(""localhost"", ""2001::1"");\n\n        assertEquals(InetAddresses.forString(""10.0.2.2""), mock.getIPv4Address(""localhost"").get());\n    }\n']",sitelocal;Inet;mock;fe;add;IP;Address;choose;localhost;Equals,2.7939677238464355e-09;1.5133991837501526e-09;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.346940502524376e-10,5,5,"[-5.521265029907227, -5.040629863739014, -5.451425075531006, -6.466573238372803, -5.448314189910889, -0.020834287628531456]",0.979381263256073
1,"['    @Test\n    public void choose_ipv6_public_over_local() {\n        mock.addAddress(""localhost"", ""38.3.4.2"")\n                .addAddress(""localhost"", ""10.0.2.2"")\n                .addAddress(""localhost"", ""fe80::1"")\n                .addAddress(""localhost"", ""2001::1"");\n\n        assertEquals(InetAddresses.forString(""2001::1""), mock.getIPv6Address(""localhost"").get());\n    }\n']",localhost;localhost;ip;IP;Address;get;localhost;localhost;over;local,1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.513858795166016, -5.068804740905762, -5.4567694664001465, -6.437046527862549, -5.430697917938232, -0.020783383399248123]",0.9794310927391052
1,"['    @Test(expected = RuntimeException.class)\n    public void throws_when_multiple_ipv6_addresses() {\n        mock.addAddress(""localhost"", ""2001::1"")\n                .addAddress(""localhost"", ""2001::2"");\n        mock.getIPv6Address(""localhost"");\n    }\n']",when;addresses;mock;class;mock;Runtime;ip;add;get;Address,1.0477378964424133e-09;9.89530235528946e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;8.731149137020111e-11;7.275957614183426e-11,5,5,"[-5.492263317108154, -5.022641181945801, -5.380960941314697, -6.438879013061523, -5.409716606140137, -0.02161201648414135]",0.9786198735237122
1,"['    @Test(expected = RuntimeException.class)\n    public void throws_when_multiple_private_ipv4_addresses() {\n        mock.addAddress(""localhost"", ""38.3.4.2"")\n                .addAddress(""localhost"", ""10.0.2.2"")\n                .addAddress(""localhost"", ""10.0.2.3"");\n        mock.getIPv4Address(""localhost"");\n    }\n']",localhost;localhost;get;when;mock;localhost;add;Address;Address;add,1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.5437397956848145, -5.011030673980713, -5.424759864807129, -6.460872173309326, -5.460800647735596, -0.02101488597691059]",0.9792044162750244
1,"['    @Test\n    public void translator_with_valid_parameters() {\n\n        // Test simplest possible address\n        Inet6Address original = (Inet6Address) InetAddresses.forString(""2001:db8::1"");\n        Inet6Address prefix = (Inet6Address) InetAddresses.forString(""fd00::"");\n        InetAddress translated = IPAddresses.prefixTranslate(original, prefix, 8);\n        assertEquals(""fd00:0:0:0:0:0:0:1"", translated.getHostAddress());\n\n\n        // Test an actual aws address we use\n        original = (Inet6Address) InetAddresses.forString(""2600:1f16:f34:5300:ccc6:1703:b7c2:369d"");\n        translated = IPAddresses.prefixTranslate(original, prefix, 8);\n        assertEquals(""fd00:0:0:0:ccc6:1703:b7c2:369d"", translated.getHostAddress());\n\n        // Test different subnet size\n        translated = IPAddresses.prefixTranslate(original, prefix, 6);\n        assertEquals(""fd00:0:0:5300:ccc6:1703:b7c2:369d"", translated.getHostAddress());\n    }\n']",IPAddresses;translator;with;Inet;get;an;original;Host;fd;Inet,8.003553375601768e-10;7.566995918750763e-10;6.984919309616089e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.480504989624023, -5.093446254730225, -5.444048881530762, -6.458728790283203, -5.438201904296875, -0.02075396105647087]",0.9794599413871765
1,"['    @Test\n    public void default_env_is_correctly_rewritten() throws IOException {\n        Path tempFile = temporaryFolder.newFile().toPath();\n        Files.copy(EXAMPLE_FILE, tempFile, REPLACE_EXISTING);\n\n        DefaultEnvWriter writer = new DefaultEnvWriter();\n        writer.addOverride(""VESPA_HOSTNAME"", ""my-new-hostname"");\n        writer.addFallback(""VESPA_CONFIGSERVER"", ""new-fallback-configserver"");\n        writer.addOverride(""VESPA_TLS_CONFIG_FILE"", ""/override/path/to/config.file"");\n\n        boolean modified = writer.updateFile(context, tempFile);\n\n        assertTrue(modified);\n        assertEquals(Files.readString(EXPECTED_RESULT_FILE), Files.readString(tempFile));\n        verify(context, times(1)).log(any(Logger.class), any(String.class));\n\n        modified = writer.updateFile(context, tempFile);\n        assertFalse(modified);\n        assertEquals(Files.readString(EXPECTED_RESULT_FILE), Files.readString(tempFile));\n        verify(context, times(1)).log(any(Logger.class), any(String.class));\n    }\n']",RESULT;verify;read;CONFIGSERVER;any;RESULT;Files;modified;writer;context,2.0372681319713593e-09;1.6298145055770874e-09;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.473098278045654, -5.017523288726807, -5.406139373779297, -6.436285495758057, -5.45863676071167, -0.02139698900282383]",0.9788302779197693
1,"['    @Test\n    public void generates_default_env_content() throws IOException {\n        DefaultEnvWriter writer = new DefaultEnvWriter();\n        writer.addOverride(""VESPA_HOSTNAME"", ""my-new-hostname"");\n        writer.addFallback(""VESPA_CONFIGSERVER"", ""new-fallback-configserver"");\n        writer.addOverride(""VESPA_TLS_CONFIG_FILE"", ""/override/path/to/config.file"");\n        writer.addUnset(""VESPA_LEGACY_OPTION"");\n        String generatedContent = writer.generateContent();\n        assertEquals(Files.readString(EXPECTED_RESULT_FILE), generatedContent);\n    }\n']",env;CONFIGSERVER;ESPA;Default;OSTNAME;generated;writer;add;writer;CONFIG,9.313225746154785e-10;8.149072527885437e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;1.8189894035458565e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.503693580627441, -5.053534984588623, -5.446219444274902, -6.487313747406006, -5.443982124328613, -0.02083136886358261]",0.9793841242790222
1,"['    @Test\n    public void generic_yum_methods() {\n        assertYumMethod(yum -> yum.expectInstall(packages).withEnableRepo(repos),\n                yum -> yum.install(List.of(packages)).enableRepo(repos).converge(context));\n\n        assertYumMethod(yum -> yum.expectUpdate(packages).withEnableRepo(repos),\n                yum -> yum.upgrade(List.of(packages)).enableRepo(repos).converge(context));\n\n        assertYumMethod(yum -> yum.expectRemove(packages).withEnableRepo(repos),\n                yum -> yum.remove(List.of(packages)).enableRepo(repos).converge(context));\n\n        assertYumMethod(yum -> yum.expectInstallFixedVersion(minimalPackage.toName()).withEnableRepo(repos),\n                yum -> yum.installFixedVersion(minimalPackage).enableRepo(repos).converge(context));\n    }\n']",expect;packages;repos;expect;to;generic;Install;um;repos;Enable,1.1641532182693481e-09;8.149072527885437e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10,5,5,"[-5.521975994110107, -5.063817501068115, -5.452186584472656, -6.4581098556518555, -5.449744701385498, -0.020683901384472847]",0.979528546333313
1,"['    @Test\n    public void expect_query_installed() {\n        Stream.of(minimalPackage, fullPackage, null).forEach(pkg -> {\n            yum.expectQueryInstalled(packages[0]).andReturn(pkg);\n            assertEquals(Optional.ofNullable(pkg), yum.queryInstalled(context, packages[0]));\n            terminal.verifyAllCommandsExecuted();\n        });\n    }\n']",Installed;Optional;installed;Each;query;Installed;of;Equals;packages;packages,1.2223608791828156e-09;1.1641532182693481e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.532134056091309, -5.026158332824707, -5.410746097564697, -6.442301273345947, -5.455111503601074, -0.02107756771147251]",0.9791430234909058
1,"['    @Test\n    public void testBuilder() {\n        YumPackageName yumPackage = new YumPackageName.Builder(""docker"")\n                .setEpoch(""2"")\n                .setVersion(""1.12.6"")\n                .setRelease(""71.git3e8e77d.el7.centos.1"")\n                .setArchitecture(""x86_64"")\n                .build();\n        assertEquals(""2:docker-1.12.6-71.git3e8e77d.el7.centos.1.x86_64"", yumPackage.toName());\n    }\n']",um;um;new;docker;Package;set;Builder;centos;Name;Epoch,2.6775524020195007e-09;2.561137080192566e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.111804395914078e-10,5,5,"[-5.512443542480469, -5.056361675262451, -5.464873313903809, -6.493013381958008, -5.458890914916992, -0.02062131091952324]",0.9795899391174316
1,"['    @Test\n    public void testAllValidFormats() {\n        // name\n        verifyPackageName(\n                ""docker-engine-selinux"",\n                null,\n                ""docker-engine-selinux"",\n                null,\n                null,\n                null,\n                ""docker-engine-selinux"",\n                null);\n\n        // name.arch\n        verifyPackageName(\n                ""docker-engine-selinux.x86_64"",\n                null,\n                ""docker-engine-selinux"",\n                null,\n                null,\n                ""x86_64"",\n                ""docker-engine-selinux.x86_64"",\n                null);\n\n        // name-ver-rel\n        verifyPackageName(""docker-engine-selinux-1.12.6-1.el7"",\n                null,\n                ""docker-engine-selinux"",\n                ""1.12.6"",\n                ""1.el7"",\n                null,\n                ""docker-engine-selinux-1.12.6-1.el7"",\n                ""0:docker-engine-selinux-1.12.6-1.el7.*"");\n\n        // name-ver-rel.arch\n        verifyPackageName(""docker-engine-selinux-1.12.6-1.el7.x86_64"",\n                null,\n                ""docker-engine-selinux"",\n                ""1.12.6"",\n                ""1.el7"",\n                ""x86_64"",\n                ""docker-engine-selinux-1.12.6-1.el7.x86_64"",\n                ""0:docker-engine-selinux-1.12.6-1.el7.*"");\n\n        // name-epoch:ver-rel.arch\n        verifyPackageName(\n                ""docker-2:1.12.6-71.git3e8e77d.el7.centos.1.x86_64"",\n                ""2"",\n                ""docker"",\n                ""1.12.6"",\n                ""71.git3e8e77d.el7.centos.1"",\n                ""x86_64"",\n                ""2:docker-1.12.6-71.git3e8e77d.el7.centos.1.x86_64"",\n                ""2:docker-1.12.6-71.git3e8e77d.el7.centos.1.*"");\n\n        // epoch:name-ver-rel.arch\n        verifyPackageName(\n                ""2:docker-1.12.6-71.git3e8e77d.el7.centos.1.x86_64"",\n                ""2"",\n                ""docker"",\n                ""1.12.6"",\n                ""71.git3e8e77d.el7.centos.1"",\n                ""x86_64"",\n                ""2:docker-1.12.6-71.git3e8e77d.el7.centos.1.x86_64"",\n                ""2:docker-1.12.6-71.git3e8e77d.el7.centos.1.*"");\n    }\n']",Package;Package;Name;Valid;null;verify;selinux;name;rel;arch,1.862645149230957e-09;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;3.8198777474462986e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.379380702972412, -5.11562967300415, -5.480011463165283, -6.464941501617432, -5.3916778564453125, -0.02111491933465004]",0.9791064262390137
1,"['    @Test\n    public void testArchitectures() {\n        assertEquals(""x86_64"", YumPackageName.fromString(""docker.x86_64"").getArchitecture().get());\n        assertEquals(""i686"", YumPackageName.fromString(""docker.i686"").getArchitecture().get());\n        assertEquals(""noarch"", YumPackageName.fromString(""docker.noarch"").getArchitecture().get());\n    }\n']",Architectures;Package;noarch;get;Package;Name;Name;Equals;Architecture;get,1.3242242857813835e-09;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.538710117340088, -5.009710311889648, -5.437386512756348, -6.5017409324646, -5.473116874694824, -0.020870480686426163]",0.9793457984924316
1,"['    @Test\n    public void unrecognizedArchitectureGetsGobbledUp() {\n        YumPackageName packageName = YumPackageName.fromString(""docker-engine-selinux-1.12.6-1.el7.i486"");\n        // This is not a great feature - please use YumPackageName.Builder instead.\n        assertEquals(""1.el7.i486"", packageName.getRelease().get());\n    }\n']",um;package;Up;um;use;ets;Release;el;Package;Name,1.2223608791828156e-09;5.966285243630409e-10;5.820766091346741e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.52501916885376, -5.031282424926758, -5.444361209869385, -6.497293472290039, -5.446322441101074, -0.02087293192744255]",0.9793435335159302
1,"['    @Test\n    public void failParsingOfPackageNameWithEpochAndArchitecture() {\n        try {\n            YumPackageName.fromString(""epoch:docker-engine-selinux-1.12.6-1.el7.x86_64"");\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsStringIgnoringCase(""epoch""));\n        }\n    }\n']",el;arsing;Package;Name;Name;That;get;Case;Argument;Exception,2.0372681319713593e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;1.4551915228366852e-10;8.731149137020111e-11,5,5,"[-5.510699272155762, -4.976428985595703, -5.391340255737305, -6.444506645202637, -5.477064609527588, -0.02149803377687931]",0.9787313938140869
1,"['    @Test\n    public void testSubset() {\n        YumPackageName yumPackage = new YumPackageName.Builder(""docker"")\n                .setVersion(""1.12.6"")\n                .build();\n\n        assertTrue(yumPackage.isSubsetOf(yumPackage));\n        assertTrue(yumPackage.isSubsetOf(new YumPackageName.Builder(""docker"")\n                .setVersion(""1.12.6"")\n                .setEpoch(""2"")\n                .setRelease(""71.git3e8e77d.el7.centos.1"")\n                .setArchitecture(""x86_64"")\n                .build()));\n        assertFalse(yumPackage.isSubsetOf(new YumPackageName.Builder(""docker"")\n                .setVersion(""1.13.1"")\n                .build()));\n    }\n']",um;Release;Package;Package;Version;docker;um;Subset;um;Package,1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.441065311431885, -5.122757434844971, -5.435611248016357, -6.425544738769531, -5.364005088806152, -0.02117736265063286]",0.9790452122688293
1,"['    @Test\n    public void testQueryInstalledNevra() {\n        terminal.expectCommand(\n                ""rpm -q docker --queryformat \\""%{NAME}\\\\\\\\n%{EPOCH}\\\\\\\\n%{VERSION}\\\\\\\\n%{RELEASE}\\\\\\\\n%{ARCH}\\"" 2>&1"",\n                0,\n                ""docker\\n2\\n1.13.1\\n74.git6e3bb8e.el7.centos\\nx86_64"");\n\n        Optional<YumPackageName> installed = yum.queryInstalled(taskContext, ""docker"");\n\n        assertTrue(installed.isPresent());\n        assertEquals(""docker"", installed.get().getName());\n        assertEquals(""2"", installed.get().getEpoch().get());\n        assertEquals(""1.13.1"", installed.get().getVersion().get());\n        assertEquals(""74.git6e3bb8e.el7.centos"", installed.get().getRelease().get());\n        assertEquals(""x86_64"", installed.get().getArchitecture().get());\n    }\n']",Nevra;queryformat;ARCH;Architecture;terminal;Installed;el;bb;git;Equals,3.725290298461914e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.4783196449279785, -5.07338285446167, -5.409695148468018, -6.4427809715271, -5.42884635925293, -0.021111885085701942]",0.9791092872619629
1,"['    @Test\n    public void testQueryInstalledPartial() {\n        terminal.expectCommand(\n                ""rpm -q vespa-node-admin --queryformat \\""%{NAME}\\\\\\\\n%{EPOCH}\\\\\\\\n%{VERSION}\\\\\\\\n%{RELEASE}\\\\\\\\n%{ARCH}\\"" 2>&1"",\n                0,\n                ""vespa-node-admin\\n(none)\\n6.283.62\\n1.el7\\nnoarch"");\n\n        Optional<YumPackageName> installed = yum.queryInstalled(taskContext, ""vespa-node-admin"");\n\n        assertTrue(installed.isPresent());\n        assertEquals(""vespa-node-admin"", installed.get().getName());\n        assertFalse(installed.get().getEpoch().isPresent());\n        assertEquals(""6.283.62"", installed.get().getVersion().get());\n        assertEquals(""1.el7"", installed.get().getRelease().get());\n        assertEquals(""noarch"", installed.get().getArchitecture().get());\n    }\n']",Installed;Partial;Command;expect;noarch;get;Architecture;ARCH;terminal;rpm,8.381903171539307e-09;5.587935447692871e-09;4.190951585769653e-09;3.725290298461914e-09;3.055902197957039e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.153683453798294e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.487356185913086, -5.0260491371154785, -5.352828025817871, -6.4024810791015625, -5.43226432800293, -0.021702658385038376]",0.9785311222076416
1,"['    @Test\n    public void testQueryNotInstalled() {\n        terminal.expectCommand(\n                ""rpm -q fake-package --queryformat \\""%{NAME}\\\\\\\\n%{EPOCH}\\\\\\\\n%{VERSION}\\\\\\\\n%{RELEASE}\\\\\\\\n%{ARCH}\\"" 2>&1"",\n                1,\n                ""package fake-package is not installed"");\n\n        Optional<YumPackageName> installed = yum.queryInstalled(taskContext, ""fake-package"");\n\n        assertFalse(installed.isPresent());\n    }\n']",RELEASE;Query;um;installed;VERSION;package;um;queryformat;Command;EP,8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.529404640197754, -5.027516841888428, -5.438563823699951, -6.477195739746094, -5.467157363891602, -0.02084619738161564]",0.9793694615364075
1,"['    @Test\n    public void testAlreadyInstalled() {\n        terminal.expectCommand(\n                ""yum install --assumeyes --enablerepo=repo1 --enablerepo=repo2 --setopt skip_missing_names_on_install=False package-1 package-2 2>&1"",\n                0,\n                ""foobar\\nNothing to do\\n"");\n\n        assertFalse(yum\n                .install(""package-1"", ""package-2"")\n                .enableRepo(""repo1"", ""repo2"")\n                .converge(taskContext));\n    }\n']",to;Installed;foobar;um;do;Already;package;task;Command;on,8.149072527885437e-10;8.149072527885437e-10;6.111804395914078e-10;4.511093720793724e-10;4.43833414465189e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.490701198577881, -5.048527240753174, -5.443909168243408, -6.474093914031982, -5.448849201202393, -0.020927801728248596]",0.9792895317077637
1,"['    @Test\n    public void testAlreadyUpgraded() {\n        terminal.expectCommand(\n                ""yum upgrade --assumeyes --setopt skip_missing_names_on_update=False package-1 package-2 2>&1"",\n                0,\n                ""foobar\\nNo packages marked for update\\n"");\n\n        assertFalse(yum\n                .upgrade(""package-1"", ""package-2"")\n                .converge(taskContext));\n    }\n']",upgrade;Upgraded;foobar;setopt;package;Command;converge;names;package;update,9.677023626863956e-10;8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.4978156089782715, -5.019590377807617, -5.385968208312988, -6.415485858917236, -5.445137023925781, -0.0214653629809618]",0.9787634015083313
1,"['    @Test\n    public void testAlreadyRemoved() {\n        terminal.expectCommand(\n                ""yum remove --assumeyes package-1 package-2 2>&1"",\n                0,\n                ""foobar\\nNo Packages marked for removal\\n"");\n\n        assertFalse(yum\n                .remove(""package-1"", ""package-2"")\n                .converge(taskContext));\n    }\n']",Removed;expect;assumeyes;converge;package;package;um;False;foobar;task,1.862645149230957e-09;1.7462298274040222e-09;1.1059455573558807e-09;1.0186340659856796e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.489666938781738, -5.046509265899658, -5.423526287078857, -6.433831691741943, -5.440515995025635, -0.021137796342372894]",0.9790839552879333
1,"['    @Test\n    public void testFallback() {\n        HystrixCommand<Integer> superCmd = new SuperCommand(""cache"", false);\n        assertEquals(2, superCmd.execute().intValue());\n\n        HystrixCommand<Integer> subNoOverridesCmd = new SubCommandNoOverride(""cache"", false);\n        assertEquals(2, subNoOverridesCmd.execute().intValue());\n\n        HystrixCommand<Integer> subOverriddenFallbackCmd = new SubCommandOverrideFallback(""cache"", false);\n        assertEquals(3, subOverriddenFallbackCmd.execute().intValue());\n    }\n']",Hystrix;Fallback;new;Cmd;cache;Cmd;No;Sub;Hystrix;sub,1.5279510989785194e-09;1.367880031466484e-09;8.731149137020111e-10;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.509151458740234, -5.015641212463379, -5.417092323303223, -6.459993362426758, -5.449726104736328, -0.021208640187978745]",0.9790148138999939
1,"['    @Test\n    public void testRequestCacheSuperClass() {\n        HystrixCommand<Integer> superCmd1 = new SuperCommand(""cache"", true);\n        assertEquals(1, superCmd1.execute().intValue());\n        HystrixCommand<Integer> superCmd2 = new SuperCommand(""cache"", true);\n        assertEquals(1, superCmd2.execute().intValue());\n        HystrixCommand<Integer> superCmd3 = new SuperCommand(""no-cache"", true);\n        assertEquals(1, superCmd3.execute().intValue());\n        System.out.println(""REQ LOG : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        HystrixRequestLog reqLog = HystrixRequestLog.getCurrentRequest();\n        assertEquals(3, reqLog.getAllExecutedCommands().size());\n        List<HystrixInvokableInfo<?>> infos = new ArrayList<HystrixInvokableInfo<?>>(reqLog.getAllExecutedCommands());\n        HystrixInvokableInfo<?> info1 = infos.get(0);\n        assertEquals(""SuperCommand"", info1.getCommandKey().name());\n        assertEquals(1, info1.getExecutionEvents().size());\n        HystrixInvokableInfo<?> info2 = infos.get(1);\n        assertEquals(""SuperCommand"", info2.getCommandKey().name());\n        assertEquals(2, info2.getExecutionEvents().size());\n        assertEquals(HystrixEventType.RESPONSE_FROM_CACHE, info2.getExecutionEvents().get(1));\n        HystrixInvokableInfo<?> info3 = infos.get(2);\n        assertEquals(""SuperCommand"", info3.getCommandKey().name());\n        assertEquals(1, info3.getExecutionEvents().size());\n    }\n']",Hystrix;Class;Hystrix;ONSE;Events;println;Super;Hystrix;Equals;name,9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;7.8580342233181e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.6193447411060333e-10,5,5,"[-5.434878826141357, -5.0933918952941895, -5.39424991607666, -6.427473068237305, -5.4091033935546875, -0.021360231563448906]",0.9788662791252136
1,"['    @Test\n    public void testRequestCacheSubclassNoOverrides() {\n        HystrixCommand<Integer> subCmd1 = new SubCommandNoOverride(""cache"", true);\n        assertEquals(1, subCmd1.execute().intValue());\n        HystrixCommand<Integer> subCmd2 = new SubCommandNoOverride(""cache"", true);\n        assertEquals(1, subCmd2.execute().intValue());\n        HystrixCommand<Integer> subCmd3 = new SubCommandNoOverride(""no-cache"", true);\n        assertEquals(1, subCmd3.execute().intValue());\n        System.out.println(""REQ LOG : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        HystrixRequestLog reqLog = HystrixRequestLog.getCurrentRequest();\n        assertEquals(3, reqLog.getAllExecutedCommands().size());\n        List<HystrixInvokableInfo<?>> infos = new ArrayList<HystrixInvokableInfo<?>>(reqLog.getAllExecutedCommands());\n        HystrixInvokableInfo<?> info1 = infos.get(0);\n        assertEquals(""SubCommandNoOverride"", info1.getCommandKey().name());\n        assertEquals(1, info1.getExecutionEvents().size());\n        HystrixInvokableInfo<?> info2 = infos.get(1);\n        assertEquals(""SubCommandNoOverride"", info2.getCommandKey().name());\n        assertEquals(2, info2.getExecutionEvents().size());\n        assertEquals(HystrixEventType.RESPONSE_FROM_CACHE, info2.getExecutionEvents().get(1));\n        HystrixInvokableInfo<?> info3 = infos.get(2);\n        assertEquals(""SubCommandNoOverride"", info3.getCommandKey().name());\n        assertEquals(1, info3.getExecutionEvents().size());\n    }\n']",Invokable;Hystrix;println;Over;cache;Cache;Executed;Equals;Request;Hystrix,5.675246939063072e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.837623469531536e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.445210933685303, -5.083864212036133, -5.4039411544799805, -6.442934036254883, -5.419198989868164, -0.02125847339630127]",0.9789658784866333
1,"['    @Test\n    public void testRequestLogSuperClass() {\n        HystrixCommand<Integer> superCmd = new SuperCommand(""cache"", true);\n        assertEquals(1, superCmd.execute().intValue());\n        System.out.println(""REQ LOG : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        HystrixRequestLog reqLog = HystrixRequestLog.getCurrentRequest();\n        assertEquals(1, reqLog.getAllExecutedCommands().size());\n        HystrixInvokableInfo<?> info = reqLog.getAllExecutedCommands().iterator().next();\n        assertEquals(""SuperCommand"", info.getCommandKey().name());\n    }\n']",Class;Hystrix;Request;LOG;Info;Super;Hystrix;Hystrix;get;Request,1.6298145055770874e-09;1.2587406672537327e-09;9.89530235528946e-10;7.275957614183426e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.520941257476807, -5.0392165184021, -5.4354376792907715, -6.482376575469971, -5.446122646331787, -0.02090025134384632]",0.9793166518211365
1,"['    @Test\n    public void testRequestLogSubClassNoOverrides() {\n        HystrixCommand<Integer> subCmd = new SubCommandNoOverride(""cache"", true);\n        assertEquals(1, subCmd.execute().intValue());\n        System.out.println(""REQ LOG : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        HystrixRequestLog reqLog = HystrixRequestLog.getCurrentRequest();\n        assertEquals(1, reqLog.getAllExecutedCommands().size());\n        HystrixInvokableInfo<?> info = reqLog.getAllExecutedCommands().iterator().next();\n        assertEquals(""SubCommandNoOverride"", info.getCommandKey().name());\n    }\n']",info;Commands;size;Sub;RE;Equals;Equals;req;Current;Info,4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.532093048095703, -5.042836666107178, -5.433023452758789, -6.484409809112549, -5.446204662322998, -0.020838258787989616]",0.9793773293495178
1,"['\t@Test\n\tpublic void shouldYieldNoExecutedTasksOnStartup() throws Exception {\n\t\t//given\n\t\tfinal Collection<HystrixThreadPoolMetrics> instances = HystrixThreadPoolMetrics.getInstances();\n\n\t\t//then\n\t\tassertEquals(0, instances.size());\n\n\t}\n']",Exception;size;Collection;Hystrix;Metrics;Startup;Pool;Thread;On;asks,1.0477378964424133e-09;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.1641532182693481e-10,5,5,"[-5.58714485168457, -4.882246494293213, -5.399622440338135, -6.518629550933838, -5.504762649536133, -0.02161913365125656]",0.978613018989563
1,"['\t@Test\n\tpublic void shouldReturnOneExecutedTask() throws Exception {\n\t\t//given\n\t\tfinal Collection<HystrixThreadPoolMetrics> instances = HystrixThreadPoolMetrics.getInstances();\n\t\tRollingThreadPoolEventCounterStream.getInstance(tpKey, 10, 100).startCachingStreamValuesIfUnstarted();\n\n\t\t//when\n\t\tnew NoOpHystrixCommand().execute();\n\n\t\t//then\n\t\tThread.sleep(100);\n\t\tassertEquals(1, instances.size());\n\t\tassertEquals(1, instances.iterator().next().getRollingCountThreadsExecuted());\n\t}\n']",Op;sleep;tp;Hystrix;Unstarted;Rolling;No;Pool;given;Stream,1.2223608791828156e-09;1.0477378964424133e-09;9.313225746154785e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.541252613067627, -4.968377590179443, -5.4117207527160645, -6.505115985870361, -5.492262363433838, -0.021177012473344803]",0.9790457487106323
1,"['    @Test\n    public void testExecutionHookSemaphoreSuccess() {\n        assertHooksOnSuccess(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, FallbackResult.SUCCESS);\n                    }\n']",Semaphore;EMAPHORE;new;ook;Command;return;Execution;Result;Strategy;Success,2.7939677238464355e-09;2.6193447411060333e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.451509475708008, -5.019598960876465, -5.368235111236572, -6.439060688018799, -5.4299774169921875, -0.02177579514682293]",0.9784595966339111
1,"['    @Test\n    public void testExecutionHookSemaphoreBadRequestException() {\n        assertHooksOnFailure(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.BAD_REQUEST, FallbackResult.SUCCESS);\n                    }\n']",Semaphore;new;Failure;Command;Exception;Execution;Strategy;call;Execution;REQUEST,1.4551915228366852e-09;1.1641532182693481e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.449254512786865, -5.0506367683410645, -5.378278732299805, -6.436182975769043, -5.406520843505859, -0.021642815321683884]",0.9785897135734558
1,"['    @Test\n    public void testExecutionHookSemaphoreExceptionNoFallback() {\n        assertHooksOnFailure(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.FAILURE, FallbackResult.UNIMPLEMENTED);\n                    }\n']",Semaphore;Fun;EMAPHORE;olation;Exception;On;Execution;return;UNIMPLEMENTED;FAILURE,2.561137080192566e-09;1.5133991837501526e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10;3.055902197957039e-10;2.6193447411060333e-10,5,5,"[-5.494784355163574, -5.012935161590576, -5.435601234436035, -6.483232021331787, -5.472305774688721, -0.021068930625915527]",0.9791514873504639
1,"['    @Test\n    public void testExecutionHookSemaphoreExceptionSuccessfulFallback() {\n        assertHooksOnSuccess(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.FAILURE, FallbackResult.SUCCESS);\n                    }\n']",Execution;FAILURE;Fallback;SUCCESS;Successful;Execution;Strategy;Result;Command;EMAPHORE,1.076841726899147e-09;7.566995918750763e-10;6.402842700481415e-10;5.238689482212067e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.434020519256592, -5.061121463775635, -5.386534690856934, -6.436617374420166, -5.404758453369141, -0.021610617637634277]",0.978621244430542
1,"['    @Test\n    public void testExecutionHookSemaphoreExceptionUnsuccessfulFallback() {\n        assertHooksOnFailure(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.FAILURE, FallbackResult.FAILURE);\n                    }\n']",new;Exception;FAILURE;Semaphore;Result;EMAPHORE;FAILURE;Execution;Fun;Fallback,1.862645149230957e-09;1.2223608791828156e-09;1.0331859812140465e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.434614658355713, -5.066392421722412, -5.392556667327881, -6.4399919509887695, -5.402539253234863, -0.02155030146241188]",0.9786801338195801
1,"['    @Test\n    public void testExecutionHookSemaphoreRejectedNoFallback() {\n        assertHooksOnFailFast(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        AbstractCommand.TryableSemaphore semaphore = new AbstractCommand.TryableSemaphoreActual(HystrixProperty.Factory.asProperty(2));\n\n                        final C cmd1 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 500, FallbackResult.UNIMPLEMENTED, semaphore);\n                        final C cmd2 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 500, FallbackResult.UNIMPLEMENTED, semaphore);\n\n                        //saturate the semaphore\n                        new Thread() {\n                            @Override\n                            public void run() {\n                                cmd1.observe();\n                            }\n']",ooks;ook;Hystrix;Result;Fallback;semaphore;UNIMPLEMENTED;get;semaphore;Execution,1.1641532182693481e-09;6.984919309616089e-10;5.093170329928398e-10;3.637978807091713e-10;3.637978807091713e-10;2.673914423212409e-10;2.546585164964199e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.477938652038574, -5.059251308441162, -5.41190767288208, -6.449557304382324, -5.457909107208252, -0.021055158227682114]",0.9791649580001831
1,"['    @Test\n    public void testExecutionHookSemaphoreRejectedSuccessfulFallback() {\n        assertHooksOnSuccess(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        AbstractCommand.TryableSemaphore semaphore = new AbstractCommand.TryableSemaphoreActual(HystrixProperty.Factory.asProperty(2));\n\n                        final C cmd1 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 1500, FallbackResult.SUCCESS, semaphore);\n                        final C cmd2 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 1500, FallbackResult.SUCCESS, semaphore);\n\n                        //saturate the semaphore\n                        new Thread() {\n                            @Override\n                            public void run() {\n                                cmd1.observe();\n                            }\n']",ooks;Execution;Fun;run;Success;Command;Rejected;semaphore;Command;new,1.3387762010097504e-09;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.447616100311279, -5.058841228485107, -5.365062236785889, -6.402015686035156, -5.435495853424072, -0.02158530056476593]",0.9786460995674133
1,"['    @Test\n    public void testExecutionHookSemaphoreRejectedUnsuccessfulFallback() {\n        assertHooksOnFailFast(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        AbstractCommand.TryableSemaphore semaphore = new AbstractCommand.TryableSemaphoreActual(HystrixProperty.Factory.asProperty(2));\n\n                        final C cmd1 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 500, FallbackResult.FAILURE, semaphore);\n                        final C cmd2 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 500, FallbackResult.FAILURE, semaphore);\n\n                        //saturate the semaphore\n                        new Thread() {\n                            @Override\n                            public void run() {\n                                cmd1.observe();\n                            }\n']",Latent;Execution;Semaphore;the;new;call;aturate;ooks;Property;new,7.8580342233181e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.45114803314209, -5.0616278648376465, -5.377036094665527, -6.408763885498047, -5.43808126449585, -0.02147178165614605]",0.9787569642066956
1,"['    @Test\n    public void testExecutionHookSemaphoreShortCircuitNoFallback() {\n        assertHooksOnFailFast(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        return getCircuitOpenCommand(ExecutionIsolationStrategy.SEMAPHORE, FallbackResult.UNIMPLEMENTED);\n                    }\n']",UNIMPLEMENTED;Result;Strategy;Execution;Command;Fun;Fallback;ooks;EMAPHORE;call,8.381903171539307e-09;4.6566128730773926e-09;1.862645149230957e-09;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0,5,5,"[-5.489838123321533, -5.0063090324401855, -5.403812408447266, -6.459694862365723, -5.466097354888916, -0.02134261094033718]",0.9788835048675537
1,"['    @Test\n    public void testExecutionHookSemaphoreShortCircuitSuccessfulFallback() {\n        assertHooksOnSuccess(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        return getCircuitOpenCommand(ExecutionIsolationStrategy.SEMAPHORE, FallbackResult.SUCCESS);\n                    }\n']",Fallback;Execution;olation;Semaphore;Fallback;get;Command;EMAPHORE;On;Success,1.7462298274040222e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.1059455573558807e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.475070953369141, -5.041825771331787, -5.390738487243652, -6.441201686859131, -5.431168556213379, -0.021410522982478142]",0.9788170456886292
1,"['    @Test\n    public void testExecutionHookSemaphoreShortCircuitUnsuccessfulFallback() {\n        assertHooksOnFailFast(\n                new Func0<C>() {\n                    @Override\n                    public C call() {\n                        return getCircuitOpenCommand(ExecutionIsolationStrategy.SEMAPHORE, FallbackResult.FAILURE);\n                    }\n']",new;Command;Fail;Fallback;Unsuccessful;On;EMAPHORE;Fallback;FAILURE;Semaphore,1.6298145055770874e-09;1.3969838619232178e-09;6.984919309616089e-10;6.693881005048752e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.48381233215332, -5.024589538574219, -5.395251750946045, -6.449256896972656, -5.446413040161133, -0.021386252716183662]",0.978840708732605
1,"['    @Test\n    public void testGetErrorPercentage() {\n        String key = ""cmd-metrics-A"";\n        try {\n            HystrixCommand<Boolean> cmd1 = new SuccessCommand(key, 1);\n            HystrixCommandMetrics metrics = cmd1.metrics;\n            cmd1.execute();\n            Thread.sleep(100);\n            assertEquals(0, metrics.getHealthCounts().getErrorPercentage());\n\n            HystrixCommand<Boolean> cmd2 = new FailureCommand(key, 1);\n            cmd2.execute();\n            Thread.sleep(100);\n            assertEquals(50, metrics.getHealthCounts().getErrorPercentage());\n\n            HystrixCommand<Boolean> cmd3 = new SuccessCommand(key, 1);\n            HystrixCommand<Boolean> cmd4 = new SuccessCommand(key, 1);\n            cmd3.execute();\n            cmd4.execute();\n            Thread.sleep(100);\n            assertEquals(25, metrics.getHealthCounts().getErrorPercentage());\n\n            HystrixCommand<Boolean> cmd5 = new TimeoutCommand(key);\n            HystrixCommand<Boolean> cmd6 = new TimeoutCommand(key);\n            cmd5.execute();\n            cmd6.execute();\n            Thread.sleep(100);\n            assertEquals(50, metrics.getHealthCounts().getErrorPercentage());\n\n            HystrixCommand<Boolean> cmd7 = new SuccessCommand(key, 1);\n            HystrixCommand<Boolean> cmd8 = new SuccessCommand(key, 1);\n            HystrixCommand<Boolean> cmd9 = new SuccessCommand(key, 1);\n            cmd7.execute();\n            cmd8.execute();\n            cmd9.execute();\n\n            // latent\n            HystrixCommand<Boolean> cmd10 = new SuccessCommand(key, 60);\n            cmd10.execute();\n\n            // 6 success + 1 latent success + 1 failure + 2 timeout = 10 total\n            // latent success not considered error\n            // error percentage = 1 failure + 2 timeout / 10\n            Thread.sleep(100);\n            assertEquals(30, metrics.getHealthCounts().getErrorPercentage());\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            fail(""Error occurred: "" + e.getMessage());\n        }\n\n    }\n']",Percentage;Hystrix;Hystrix;metrics;Boolean;Success;Command;execute;Equals;Timeout,1.1059455573558807e-09;6.402842700481415e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.418824195861816, -5.064976692199707, -5.376173973083496, -6.410694122314453, -5.420017719268799, -0.021676061674952507]",0.9785571694374084
1,"['    @Test\n    public void testBadRequestsDoNotAffectErrorPercentage() {\n        String key = ""cmd-metrics-B"";\n        try {\n\n            HystrixCommand<Boolean> cmd1 = new SuccessCommand(key ,1);\n            HystrixCommandMetrics metrics = cmd1.metrics;\n            cmd1.execute();\n            Thread.sleep(100);\n            assertEquals(0, metrics.getHealthCounts().getErrorPercentage());\n\n            HystrixCommand<Boolean> cmd2 = new FailureCommand(key, 1);\n            cmd2.execute();\n            Thread.sleep(100);\n            assertEquals(50, metrics.getHealthCounts().getErrorPercentage());\n\n            HystrixCommand<Boolean> cmd3 = new BadRequestCommand(key, 1);\n            HystrixCommand<Boolean> cmd4 = new BadRequestCommand(key, 1);\n            try {\n                cmd3.execute();\n            } catch (HystrixBadRequestException ex) {\n                System.out.println(""Caught expected HystrixBadRequestException from cmd3"");\n            }\n            try {\n                cmd4.execute();\n            } catch (HystrixBadRequestException ex) {\n                System.out.println(""Caught expected HystrixBadRequestException from cmd4"");\n            }\n            Thread.sleep(100);\n            assertEquals(50, metrics.getHealthCounts().getErrorPercentage());\n\n            HystrixCommand<Boolean> cmd5 = new FailureCommand(key, 1);\n            HystrixCommand<Boolean> cmd6 = new FailureCommand(key, 1);\n            cmd5.execute();\n            cmd6.execute();\n            Thread.sleep(100);\n            assertEquals(75, metrics.getHealthCounts().getErrorPercentage());\n        } catch (Exception e) {\n            e.printStackTrace();\n            fail(""Error occurred : "" + e.getMessage());\n        }\n    }\n']",Not;Hystrix;Boolean;System;Command;sleep;key;Success;Error;execute,8.149072527885437e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.4445061683654785, -5.081421852111816, -5.390287399291992, -6.422658920288086, -5.422140121459961, -0.021360231563448906]",0.9788662791252136
1,"['    @Test\n    public void testCurrentConcurrentExecutionCount() throws InterruptedException {\n        String key = ""cmd-metrics-C"";\n\n        HystrixCommandMetrics metrics = null;\n        List<Observable<Boolean>> cmdResults = new ArrayList<Observable<Boolean>>();\n\n        int NUM_CMDS = 8;\n        for (int i = 0; i < NUM_CMDS; i++) {\n            HystrixCommand<Boolean> cmd = new SuccessCommand(key, 900);\n            if (metrics == null) {\n                metrics = cmd.metrics;\n            }\n            Observable<Boolean> eagerObservable = cmd.observe();\n            cmdResults.add(eagerObservable);\n        }\n\n        try {\n            Thread.sleep(150);\n        } catch (InterruptedException ie) {\n            fail(ie.getMessage());\n        }\n        System.out.println(""ReqLog: "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertEquals(NUM_CMDS, metrics.getCurrentConcurrentExecutionCount());\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        Observable.merge(cmdResults).subscribe(new Subscriber<Boolean>() {\n            @Override\n            public void onCompleted() {\n                System.out.println(""All commands done"");\n                latch.countDown();\n            }\n']",Interrupted;subscribe;ie;Exception;Subscriber;Current;latch;println;Re;Hystrix,7.450580596923828e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.257323548197746e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.458688735961914, -5.038063049316406, -5.395210266113281, -6.449140548706055, -5.464866638183594, -0.021324289962649345]",0.9789014458656311
1,"['    @Test\n    public void testCommandRequiresContextConcurrencyStrategyProvidesItContextSetUpCorrectly() {\n        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(true);\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);\n\n        //context is set up properly\n        HystrixRequestContext context = HystrixRequestContext.initializeContext();\n        HystrixCommand<Boolean> cmd = new TestCommand(true, true);\n        assertTrue(cmd.execute());\n        printRequestLog();\n        assertNotNull(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertNotNull(cmd.currentRequestLog);\n        context.shutdown();\n    }\n']",new;Command;Concurrency;Hystrix;cmd;Boolean;strategy;Command;Concurrency;Command,1.280568540096283e-09;8.149072527885437e-10;5.529727786779404e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.5123443603515625, -5.036753177642822, -5.431278228759766, -6.477065086364746, -5.465414047241211, -0.020894646644592285]",0.9793221354484558
1,"['    @Test\n    public void testCommandRequiresContextConcurrencyStrategyProvidesItContextLeftUninitialized() {\n        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(true);\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);\n\n        //context is not set up\n        HystrixRequestContext.setContextOnCurrentThread(null);\n        HystrixCommand<Boolean> cmd = new TestCommand(true, true);\n        assertTrue(cmd.execute()); //command execution not affected by missing context\n        printRequestLog();\n        assertNull(HystrixRequestLog.getCurrentRequest());\n        assertNull(HystrixRequestLog.getCurrentRequest(strategy));\n        assertNull(cmd.currentRequestLog);\n    }\n']",Concurrency;register;Concurrency;Hystrix;Concurrency;Left;Thread;Current;Command;affected,1.57160684466362e-09;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.519064903259277, -5.014164924621582, -5.419290542602539, -6.478675842285156, -5.4772257804870605, -0.021019205451011658]",0.9792001843452454
1,"['    @Test\n    public void testCommandRequiresContextConcurrencyStrategyDoesNotProvideItContextSetUpCorrectly() {\n        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(false);\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);\n\n        //context is set up properly\n        HystrixRequestContext context = HystrixRequestContext.initializeContext();\n        HystrixCommand<Boolean> cmd = new TestCommand(true, true);\n        assertTrue(cmd.execute());\n        printRequestLog();\n        assertNull(HystrixRequestLog.getCurrentRequest());\n        assertNull(HystrixRequestLog.getCurrentRequest(strategy));\n        assertNull(cmd.currentRequestLog);\n        context.shutdown();\n    }\n']",Concurrency;Command;Strategy;Requires;Set;Hystrix;Context;Boolean;Hystrix;Strategy,1.3096723705530167e-09;8.149072527885437e-10;7.639755494892597e-10;6.984919309616089e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.43833414465189e-10,5,5,"[-5.518786907196045, -5.024927139282227, -5.423011302947998, -6.472712516784668, -5.470339775085449, -0.020969826728105545]",0.9792485237121582
1,"['    @Test\n    public void testCommandRequiresContextConcurrencyStrategyDoesNotProvideItContextLeftUninitialized() {\n        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(false);\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);\n\n        //context is not set up\n        HystrixRequestContext.setContextOnCurrentThread(null);\n        HystrixCommand<Boolean> cmd = new TestCommand(true, true);\n        assertTrue(cmd.execute()); //command execution not affected by missing context\n        printRequestLog();\n        assertNull(HystrixRequestLog.getCurrentRequest());\n        assertNull(HystrixRequestLog.getCurrentRequest(strategy));\n        assertNull(cmd.currentRequestLog);\n    }\n']",Concurrency;Strategy;Context;Log;Request;execution;Uninitialized;Hystrix;Request;new,1.0477378964424133e-09;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.517527103424072, -5.016831398010254, -5.426025390625, -6.484121799468994, -5.47479772567749, -0.020978933200240135]",0.9792395830154419
1,"['    @Test\n    public void testCommandDoesNotRequireContextConcurrencyStrategyProvidesItContextSetUpCorrectly() {\n        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(true);\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);\n\n        //context is set up properly\n        HystrixRequestContext context = HystrixRequestContext.initializeContext();\n        HystrixCommand<Boolean> cmd = new TestCommand(false, false);\n        assertTrue(cmd.execute());\n        printRequestLog();\n        assertNotNull(HystrixRequestLog.getCurrentRequest());\n        assertNotNull(HystrixRequestLog.getCurrentRequest(strategy));\n        assertNull(cmd.currentRequestLog);\n        context.shutdown();\n    }\n']",register;new;Require;context;Boolean;Hystrix;Concurrency;execute;Command;Strategy,1.367880031466484e-09;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.513749599456787, -5.0270094871521, -5.4290080070495605, -6.478767395019531, -5.466482639312744, -0.02095663547515869]",0.9792613983154297
1,"['    @Test\n    public void testCommandDoesNotRequireContextConcurrencyStrategyProvidesItContextLeftUninitialized() {\n        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(true);\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);\n\n        //context is not set up\n        HystrixRequestContext.setContextOnCurrentThread(null);\n        HystrixCommand<Boolean> cmd = new TestCommand(false, false);\n        assertTrue(cmd.execute()); //command execution not affected by missing context\n        printRequestLog();\n        assertNull(HystrixRequestLog.getCurrentRequest());\n        assertNull(HystrixRequestLog.getCurrentRequest(strategy));\n        assertNull(cmd.currentRequestLog);\n    }\n']",Uninitialized;Hystrix;Concurrency;Request;Boolean;Does;Thread;cmd;new;Strategy,1.3242242857813835e-09;8.731149137020111e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.521176815032959, -5.019089698791504, -5.4280009269714355, -6.481239318847656, -5.474809646606445, -0.02094437927007675]",0.9792735576629639
1,"['    @Test\n    public void testCommandDoesNotRequireContextConcurrencyStrategyDoesNotProvideItContextSetUpCorrectly() {\n        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(false);\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);\n\n        //context is set up properly\n        HystrixRequestContext context = HystrixRequestContext.initializeContext();\n        HystrixCommand<Boolean> cmd = new TestCommand(true, true);\n        assertTrue(cmd.execute());\n        printRequestLog();\n        assertNull(HystrixRequestLog.getCurrentRequest());\n        assertNull(HystrixRequestLog.getCurrentRequest(strategy));\n        assertNull(cmd.currentRequestLog);\n        context.shutdown();\n    }\n']",Concurrency;Correctly;Command;execute;Provide;context;print;strategy;Boolean;Plugins,8.731149137020111e-10;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.507390975952148, -5.030266284942627, -5.433727264404297, -6.4858880043029785, -5.464773654937744, -0.020936323329806328]",0.9792813062667847
1,"['    @Test\n    public void testCommandDoesNotRequireContextConcurrencyStrategyDoesNotProvideItContextLeftUninitialized() {\n        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(false);\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);\n\n        //context is not set up\n        HystrixRequestContext.setContextOnCurrentThread(null);\n        HystrixCommand<Boolean> cmd = new TestCommand(true, true);\n        assertTrue(cmd.execute()); //command execution unaffected by missing context\n        printRequestLog();\n        assertNull(HystrixRequestLog.getCurrentRequest());\n        assertNull(HystrixRequestLog.getCurrentRequest(strategy));\n        assertNull(cmd.currentRequestLog);\n    }\n']",Plugins;Hystrix;Concurrency;new;Request;Custom;print;true;strategy;Strategy,9.89530235528946e-10;7.8580342233181e-10;7.8580342233181e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.518133163452148, -5.019934177398682, -5.426686763763428, -6.4811859130859375, -5.474917888641357, -0.02095651999115944]",0.9792615175247192
1,"['    @Test\n    public void testNested1() {\n        HystrixProperty<String> a = Factory.asProperty(""a"");\n        assertEquals(""a"", a.get());\n\n        HystrixProperty<String> aWithDefault = Factory.asProperty(a, ""b"");\n        assertEquals(""a"", aWithDefault.get());\n    }\n']",as;Default;get;Factory;as;Property;Default;get;Property;Hystrix,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;0.0;-2.9103830456733704e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.0372681319713593e-10;-3.4924596548080444e-10,5,5,"[-5.5092549324035645, -5.076220512390137, -5.479123592376709, -6.519539833068848, -5.464470386505127, -0.020380724221467972]",0.9798255562782288
1,"['    @Test\n    public void testNested2() {\n        HystrixProperty<String> nullValue = Factory.nullProperty();\n\n        HystrixProperty<String> withDefault = Factory.asProperty(nullValue, ""b"");\n        assertEquals(""b"", withDefault.get());\n    }\n']",Equals;null;Default;Property;Property;Default;Value;ested;as;Factory,2.0372681319713593e-09;1.1641532182693481e-09;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.494950294494629, -5.078806400299072, -5.371372699737549, -6.4372148513793945, -5.409801483154297, -0.021280761808156967]",0.9789440631866455
1,"['    @Test\n    public void testNested3() {\n        HystrixProperty<String> nullValue = Factory.nullProperty();\n        HystrixProperty<String> a = Factory.asProperty(nullValue, ""a"");\n\n        HystrixProperty<String> withDefault = Factory.asProperty(a, ""b"");\n        assertEquals(""a"", withDefault.get());\n    }\n']",ested;with;Hystrix;Factory;Factory;Property;null;Equals;get;Property,3.3760443329811096e-09;2.3283064365386963e-09;1.57160684466362e-09;1.5133991837501526e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.384208634495735e-10;3.4924596548080444e-10,5,5,"[-5.5198469161987305, -5.017998218536377, -5.435235500335693, -6.487348556518555, -5.472750186920166, -0.020924067124724388]",0.9792933464050293
1,"['    @Test\n    public void testNested4() {\n        HystrixProperty<String> nullValue = Factory.nullProperty();\n        HystrixProperty<String> a = Factory.asProperty(nullValue, null);\n\n        HystrixProperty<String> withDefault = Factory.asProperty(a, ""b"");\n        assertEquals(""b"", withDefault.get());\n    }\n']",Default;null;Value;as;Property;Factory;Default;as;get;null,9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.513883113861084, -5.016238689422607, -5.434176445007324, -6.4883832931518555, -5.473132133483887, -0.020961889997124672]",0.979256272315979
1,"['    @Test\n    public void testNested5() {\n        HystrixProperty<String> nullValue = Factory.nullProperty();\n        HystrixProperty<String> a = Factory.asProperty(nullValue, null);\n\n        @SuppressWarnings(""unchecked"")\n        HystrixProperty<String> withDefault = Factory.asProperty(a, Factory.asProperty(""b""));\n        assertEquals(""b"", withDefault.get());\n    }\n']",ested;arnings;Factory;Default;Property;Hystrix;Factory;Property;null;get,9.313225746154785e-10;7.712515071034431e-10;5.820766091346741e-10;4.656612873077393e-10;4.5838532969355583e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.521448612213135, -5.02768087387085, -5.432814598083496, -6.484797954559326, -5.482178688049316, -0.020826933905482292]",0.9793884754180908
1,"['    @Test\n    public void testSeries1() {\n        HystrixProperty<String> nullValue = Factory.nullProperty();\n        HystrixProperty<String> a = Factory.asProperty(nullValue, null);\n\n        @SuppressWarnings(""unchecked"")\n        HystrixProperty<String> withDefault = Factory.asProperty(a, nullValue, nullValue, Factory.asProperty(""b""));\n        assertEquals(""b"", withDefault.get());\n    }\n']",Series;Hystrix;Factory;Property;Hystrix;Default;Factory;get;Suppress;null,2.561137080192566e-09;1.4551915228366852e-09;9.604264050722122e-10;9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.055902197957039e-10,5,5,"[-5.523767948150635, -5.008449554443359, -5.429065704345703, -6.4836955070495605, -5.501898288726807, -0.020882973447442055]",0.9793335795402527
1,"['    @Test\n    public void testSeries2() {\n        HystrixProperty<String> nullValue = Factory.nullProperty();\n        HystrixProperty<String> a = Factory.asProperty(nullValue, null);\n\n        @SuppressWarnings(""unchecked"")\n        HystrixProperty<String> withDefault = Factory.asProperty(a, nullValue, Factory.asProperty(""b""), nullValue, Factory.asProperty(""c""));\n        assertEquals(""b"", withDefault.get());\n    }\n']",Hystrix;Equals;with;Property;null;Hystrix;Factory;as;Value;as,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.41970007866621e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.52450704574585, -5.009598255157471, -5.4333930015563965, -6.481891632080078, -5.5021538734436035, -0.020854603499174118]",0.9793614745140076
1,"['    @Test\n    public void testString() throws Exception {\n\n        DynamicStringProperty pString = new DynamicStringProperty(""defaultString"", ""default-default"");\n        HystrixPropertiesChainedArchaiusProperty.StringProperty fString = new HystrixPropertiesChainedArchaiusProperty.StringProperty(""overrideString"", pString);\n\n        assertTrue(""default-default"".equals(fString.get()));\n\n        ConfigurationManager.getConfigInstance().setProperty(""defaultString"", ""default"");\n        assertTrue(""default"".equals(fString.get()));\n\n        ConfigurationManager.getConfigInstance().setProperty(""overrideString"", ""override"");\n        assertTrue(""override"".equals(fString.get()));\n\n        ConfigurationManager.getConfigInstance().clearProperty(""overrideString"");\n        assertTrue(""default"".equals(fString.get()));\n\n        ConfigurationManager.getConfigInstance().clearProperty(""defaultString"");\n        assertTrue(""default-default"".equals(fString.get()));\n    }\n']",Chained;new;Exception;Property;new;override;override;Property;default;Property,1.979060471057892e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.604264050722122e-10;5.820766091346741e-10;4.511093720793724e-10;4.43833414465189e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.473555564880371, -5.03110933303833, -5.434240341186523, -6.473337173461914, -5.473245143890381, -0.0210542231798172]",0.9791659712791443
1,"['    @Test\n    public void testInteger() throws Exception {\n\n        DynamicIntegerProperty pInt = new DynamicIntegerProperty(""defaultInt"", -1);\n        HystrixPropertiesChainedArchaiusProperty.IntegerProperty fInt = new HystrixPropertiesChainedArchaiusProperty.IntegerProperty(""overrideInt"", pInt);\n\n        assertTrue(-1 == fInt.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""defaultInt"", 10);\n        assertTrue(10 == fInt.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""overrideInt"", 11);\n        assertTrue(11 == fInt.get());\n\n        ConfigurationManager.getConfigInstance().clearProperty(""overrideInt"");\n        assertTrue(10 == fInt.get());\n\n        ConfigurationManager.getConfigInstance().clearProperty(""defaultInt"");\n        assertTrue(-1 == fInt.get());\n    }\n']",Dynamic;Property;new;Archaius;Property;Property;get;Property;Property;Int,2.7939677238464355e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.313225746154785e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.055902197957039e-10,5,5,"[-5.49290132522583, -5.007293701171875, -5.4113569259643555, -6.462031364440918, -5.489706039428711, -0.02118389680981636]",0.9790388941764832
1,"['    @Test\n    public void testBoolean() throws Exception {\n\n        DynamicBooleanProperty pBoolean = new DynamicBooleanProperty(""defaultBoolean"", true);\n        HystrixPropertiesChainedArchaiusProperty.BooleanProperty fBoolean = new HystrixPropertiesChainedArchaiusProperty.BooleanProperty(""overrideBoolean"", pBoolean);\n\n        System.out.println(""pBoolean: "" + pBoolean.get());\n        System.out.println(""fBoolean: "" + fBoolean.get());\n\n        assertTrue(fBoolean.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""defaultBoolean"", Boolean.FALSE);\n\n        System.out.println(""pBoolean: "" + pBoolean.get());\n        System.out.println(""fBoolean: "" + fBoolean.get());\n\n        assertFalse(fBoolean.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""overrideBoolean"", Boolean.TRUE);\n        assertTrue(fBoolean.get());\n\n        ConfigurationManager.getConfigInstance().clearProperty(""overrideBoolean"");\n        assertFalse(fBoolean.get());\n\n        ConfigurationManager.getConfigInstance().clearProperty(""defaultBoolean"");\n        assertTrue(fBoolean.get());\n    }\n']",Properties;Archaius;Chained;Dynamic;Archaius;Dynamic;Boolean;Property;Config;new,2.561137080192566e-09;1.3533281162381172e-09;1.3387762010097504e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.486944198608398, -5.027833461761475, -5.40900182723999, -6.453564167022705, -5.468183994293213, -0.021186232566833496]",0.9790366291999817
1,"['    @Test\n    public void testChainingString() throws Exception {\n\n        DynamicStringProperty node1 = new DynamicStringProperty(""node1"", ""v1"");\n        StringProperty node2 = new HystrixPropertiesChainedArchaiusProperty.StringProperty(""node2"", node1);\n\n        HystrixPropertiesChainedArchaiusProperty.StringProperty node3 = new HystrixPropertiesChainedArchaiusProperty.StringProperty(""node3"", node2);\n\n        assertTrue("""" + node3.get(), ""v1"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().setProperty(""node1"", ""v11"");\n        assertTrue(""v11"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().setProperty(""node2"", ""v22"");\n        assertTrue(""v22"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().clearProperty(""node1"");\n        assertTrue(""v22"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().setProperty(""node3"", ""v33"");\n        assertTrue(""v33"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().clearProperty(""node2"");\n        assertTrue(""v33"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().setProperty(""node2"", ""v222"");\n        assertTrue(""v33"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().clearProperty(""node3"");\n        assertTrue(""v222"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().clearProperty(""node2"");\n        assertTrue(""v1"".equals(node3.get()));\n\n        ConfigurationManager.getConfigInstance().setProperty(""node2"", ""v2222"");\n        assertTrue(""v2222"".equals(node3.get()));\n    }\n']",Dynamic;Property;Chaining;Hystrix;Archaius;node;node;Property;node;Chained,6.51925802230835e-09;5.3551048040390015e-09;3.4924596548080444e-09;3.259629011154175e-09;3.026798367500305e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.979060471057892e-09,5,5,"[-5.402926921844482, -5.076117992401123, -5.402622699737549, -6.426716327667236, -5.4276957511901855, -0.021492550149559975]",0.9787367582321167
1,"['    @Test\n    public void testChainingInteger() throws Exception {\n\n        DynamicIntegerProperty node1 = new DynamicIntegerProperty(""node1"", 1);\n        IntegerProperty node2 = new HystrixPropertiesChainedArchaiusProperty.IntegerProperty(""node2"", node1);\n\n        HystrixPropertiesChainedArchaiusProperty.IntegerProperty node3 = new HystrixPropertiesChainedArchaiusProperty.IntegerProperty(""node3"", node2);\n\n        assertTrue("""" + node3.get(), 1 == node3.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""node1"", 11);\n        assertTrue(11 == node3.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""node2"", 22);\n        assertTrue(22 == node3.get());\n\n        ConfigurationManager.getConfigInstance().clearProperty(""node1"");\n        assertTrue(22 == node3.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""node3"", 33);\n        assertTrue(33 == node3.get());\n\n        ConfigurationManager.getConfigInstance().clearProperty(""node2"");\n        assertTrue(33 == node3.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""node2"", 222);\n        assertTrue(33 == node3.get());\n\n        ConfigurationManager.getConfigInstance().clearProperty(""node3"");\n        assertTrue(222 == node3.get());\n\n        ConfigurationManager.getConfigInstance().clearProperty(""node2"");\n        assertTrue(1 == node3.get());\n\n        ConfigurationManager.getConfigInstance().setProperty(""node2"", 2222);\n        assertTrue(2222 == node3.get());\n    }\n']",Hystrix;node;node;Archaius;node;Dynamic;Archaius;Properties;Property;node,7.2177499532699585e-09;6.51925802230835e-09;6.51925802230835e-09;3.958120942115784e-09;3.725290298461914e-09;3.725290298461914e-09;3.14321368932724e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.270098775625229e-09,5,5,"[-5.402775287628174, -5.076935768127441, -5.396968364715576, -6.42056131362915, -5.419327735900879, -0.021561969071626663]",0.9786688089370728
1,"['    @Test\n    public void testAddCallback() throws Exception {\n\n        final DynamicStringProperty node1 = new DynamicStringProperty(""n1"", ""n1"");\n        final HystrixPropertiesChainedArchaiusProperty.StringProperty node2 = new HystrixPropertiesChainedArchaiusProperty.StringProperty(""n2"", node1);\n\n        final AtomicInteger callbackCount = new AtomicInteger(0);\n\n        node2.addCallback(new Runnable() {\n            @Override\n            public void run() {\n                callbackCount.incrementAndGet();\n            }\n']",Hystrix;increment;node;Chained;Property;final;Archaius;Count;Dynamic;node,1.6298145055770874e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;7.275957614183426e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.515906810760498, -5.002549648284912, -5.399807453155518, -6.462775707244873, -5.476802349090576, -0.021227430552244186]",0.9789962768554688
1,"['    @Test\n    public void testRequestContextPropagatesAcrossObserveOnPool() {\n        new SimpleCommand().execute();\n        new SimpleCommand().observe().map(new Func1<String, String>() {\n\n            @Override\n            public String call(String s) {\n                System.out.println(""Map => Commands: "" + HystrixRequestLog.getCurrentRequest().getAllExecutedCommands());\n                return s;\n            }\n']",Observe;Fun;new;Pool;Context;observe;Hystrix;new;get;Executed,1.7462298274040222e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.497072696685791, -5.052356719970703, -5.424552917480469, -6.493412017822266, -5.459896564483643, -0.02088402397930622]",0.9793325662612915
1,['    @Test\n    public void testThreadContextOnTimeout() {\n        final AtomicBoolean isInitialized = new AtomicBoolean();\n        new TimeoutCommand().toObservable()\n                .doOnError(new Action1<Throwable>() {\n                    @Override\n                    public void call(Throwable throwable) {\n                        isInitialized.set(HystrixRequestContext.isCurrentThreadInitialized());\n                    }\n'],Command;Hystrix;Initialized;Timeout;Action;do;Error;Observable;Request;set,1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.481382369995117, -4.962654113769531, -5.343479156494141, -6.421095848083496, -5.462294101715088, -0.02204904891550541]",0.9781922698020935
1,"['    @Test\n    public void testNoRequestContextOnSimpleConcurencyStrategyWithoutException() throws Exception {\n        shutdownContextIfExists();\n        ConfigurationManager.getConfigInstance().setProperty(""hystrix.command.default.requestLog.enabled"", ""false"");\n\n        new SimpleCommand().execute();\n\n        assertTrue(""We are able to run the simple command without a context initialization error."", true);\n    }\n']",urency;Context;new;the;execute;Command;true;context;On;Con,1.5133991837501526e-09;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.5290751457214355, -5.0084075927734375, -5.442485332489014, -6.507394313812256, -5.4838104248046875, -0.020841293036937714]",0.9793742895126343
1,['    @Test(timeout = 2500)\n    public void testUnsubscribeWrappedScheduler() throws InterruptedException {\n        Scheduler s = Schedulers.newThread();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch start = new CountDownLatch(1);\n        final CountDownLatch end = new CountDownLatch(1);\n\n        HystrixContextScheduler hcs = new HystrixContextScheduler(s);\n\n        Scheduler.Worker w = hcs.createWorker();\n        try {\n            w.schedule(new Action0() {\n                @Override\n                public void call() {\n                    start.countDown();\n                    try {\n                        try {\n                            Thread.sleep(5000);\n                        } catch (InterruptedException ex) {\n                            interrupted.set(true);\n                        }\n                    } finally {\n                        end.countDown();\n                    }\n                }\n'],Interrupted;ex;interrupted;finally;Interrupted;Scheduler;cheduler;start;Thread;cs,1.1175870895385742e-08;3.725290298461914e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10,5,5,"[-5.513444900512695, -4.959488391876221, -5.3409600257873535, -6.411726951599121, -5.520305156707764, -0.021720971912145615]",0.978513240814209
1,"['    @Test\n    public void testSingleInitializePerKey() {\n        final TestHystrixMetricsPublisher publisher = new TestHystrixMetricsPublisher();\n        HystrixPlugins.getInstance().registerMetricsPublisher(publisher);\n        final HystrixMetricsPublisherFactory factory = new HystrixMetricsPublisherFactory();\n        ArrayList<Thread> threads = new ArrayList<Thread>();\n        for (int i = 0; i < 20; i++) {\n            threads.add(new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    factory.getPublisherForCommand(TestCommandKey.TEST_A, null, null, null, null);\n                    factory.getPublisherForCommand(TestCommandKey.TEST_B, null, null, null, null);\n                    factory.getPublisherForThreadPool(TestThreadPoolKey.TEST_A, null, null);\n                }\n']",Command;publisher;Thread;Metrics;Key;Hystrix;For;Key;able;Run,5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.128661774098873e-10,5,5,"[-5.5116753578186035, -5.028192043304443, -5.439793586730957, -6.493722915649414, -5.474062442779541, -0.02085343562066555]",0.9793626070022583
1,"['    @Test\n    public void testMetricsPublisherReset() {\n        // precondition: HystrixMetricsPublisherFactory class is not loaded. Calling HystrixPlugins.reset() here should be good enough to run this with other tests.\n\n        // set first custom publisher\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""key"");\n        HystrixMetricsPublisherCommand firstCommand = new HystrixMetricsPublisherCommandDefault(key, null, null, null, null);\n        HystrixMetricsPublisher firstPublisher = new CustomPublisher(firstCommand);\n        HystrixPlugins.getInstance().registerMetricsPublisher(firstPublisher);\n\n        // ensure that first custom publisher is used\n        HystrixMetricsPublisherCommand cmd = HystrixMetricsPublisherFactory.createOrRetrievePublisherForCommand(key, null, null, null, null);\n        assertSame(firstCommand, cmd);\n\n        // reset, then change to second custom publisher\n        HystrixPlugins.reset();\n        HystrixMetricsPublisherCommand secondCommand = new HystrixMetricsPublisherCommandDefault(key, null, null, null, null);\n        HystrixMetricsPublisher secondPublisher = new CustomPublisher(secondCommand);\n        HystrixPlugins.getInstance().registerMetricsPublisher(secondPublisher);\n\n        // ensure that second custom publisher is used\n        cmd = HystrixMetricsPublisherFactory.createOrRetrievePublisherForCommand(key, null, null, null, null);\n        assertNotSame(firstCommand, cmd);\n        assertSame(secondCommand, cmd);\n    }\n']",precondition;Metrics;Reset;Publisher;to;good;custom;enough;Hystrix;that,2.1245796233415604e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.8580342233181e-10;6.257323548197746e-10;4.94765117764473e-10,5,5,"[-5.481005668640137, -5.023037910461426, -5.364891052246094, -6.405146598815918, -5.437756061553955, -0.021662762388586998]",0.9785701632499695
1,"['    @Test\n    public void testDynamicProperties() throws Exception {\n        fakeServiceLoaderResource = \n                ""FAKE_META_INF_SERVICES/com.netflix.hystrix.strategy.properties.HystrixDynamicProperties"";\n        HystrixPlugins plugins = setupMockServiceLoader();\n        HystrixDynamicProperties properties = plugins.getDynamicProperties();\n        plugins.getCommandExecutionHook();\n        plugins.getPropertiesStrategy();\n        assertTrue(properties instanceof MockHystrixDynamicPropertiesTest);\n\n        assertEvents(\n                ""[serviceloader: META-INF/services/com.netflix.hystrix.strategy.properties.HystrixDynamicProperties""\n                        + "", debug: [Created HystrixDynamicProperties instance by loading from ServiceLoader. Using class: {}, com.netflix.hystrix.strategy.HystrixPluginsTest.MockHystrixDynamicPropertiesTest]""\n                        + "", property: hystrix.plugin.HystrixCommandExecutionHook.implementation""\n                        + "", serviceloader: META-INF/services/com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHook""\n                        + "", property: hystrix.plugin.HystrixPropertiesStrategy.implementation""\n                        + "", serviceloader: META-INF/services/com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategy]"");\n    }\n']",Resource;Exception;fake;serviceloader;Mock;Loader;Dynamic;FAKE;Hystrix;netflix,1.367880031466484e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.604264050722122e-10;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.432012557983398, -5.09452486038208, -5.432496547698975, -6.438635349273682, -5.397994041442871, -0.021224629133939743]",0.978999137878418
1,"['    @Test(expected=ServiceConfigurationError.class)\n    public void testDynamicPropertiesFailure() throws Exception {\n        /*\n         * James Bond: Do you expect me to talk?\n         * Auric Goldfinger: No, Mr. Bond, I expect you to die!\n         */\n        fakeServiceLoaderResource = \n                ""FAKE_META_INF_SERVICES/com.netflix.hystrix.strategy.properties.HystrixDynamicPropertiesFail"";\n        HystrixPlugins plugins = setupMockServiceLoader();\n        plugins.getDynamicProperties();\n\n    }\n']",expected;talk;Goldfinger;Properties;Hystrix;Service;you;Hystrix;ock;to,1.7462298274040222e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;6.984919309616089e-10;6.984919309616089e-10;5.966285243630409e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.529897212982178, -5.016888618469238, -5.444355010986328, -6.4763712882995605, -5.475481033325195, -0.020855654031038284]",0.9793603420257568
1,"['    @Test\n    public void testDynamicSystemProperties() throws Exception {\n        //On the off chance this is the first test lets not screw up all the other tests\n        HystrixPlugins.getInstance();\n        \n        System.setProperty(""hystrix.plugin.HystrixDynamicProperties.implementation"", \n                ""com.netflix.hystrix.strategy.properties.HystrixDynamicPropertiesSystemProperties"");\n        \n        HystrixPlugins plugins = setupMockServiceLoader();\n        assertTrue(plugins.getDynamicProperties() instanceof HystrixDynamicPropertiesSystemProperties);\n        \n        HystrixDynamicProperties p = plugins.getDynamicProperties();\n        //Some minimum testing of system properties wrapper\n        //this probably should be in its own test class.\n        assertTrue(p.getBoolean(""USE_DEFAULT"", true).get());\n        assertEquals(""string"", p.getString(""USE_DEFAULT"", ""string"").get());\n        assertEquals(1L, p.getLong(""USE_DEFAULT"", 1L).get().longValue());\n        assertEquals(1, p.getInteger(""USE_DEFAULT"", 1).get().intValue());\n        assertNotNull(p.getString(""path.separator"", null).get());\n        \n        assertEvents(""[debug: [Created HystrixDynamicProperties instance from System property named \\""hystrix.plugin.HystrixDynamicProperties.implementation\\"". Using class: {}, com.netflix.hystrix.strategy.properties.HystrixDynamicPropertiesSystemProperties]]"");\n\n        System.clearProperty(""hystrix.plugin.HystrixDynamicProperties.implementation"");\n\n    }\n']",the;minimum;of;Events;testing;screw;implementation;Some;first;DEFAULT,1.862645149230957e-09;1.1059455573558807e-09;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10,5,5,"[-5.477325439453125, -5.040489196777344, -5.420551300048828, -6.4502458572387695, -5.464942455291748, -0.02110978402197361]",0.9791114926338196
1,['    /*    @Test\n    public void testCommandExecutionHookDefaultImpl() {\n        HystrixCommandExecutionHook impl = HystrixPlugins.getInstance().getCommandExecutionHook();\n        assertTrue(impl instanceof HystrixCommandExecutionHookDefault);\n    }\n'],Hystrix;impl;Default;get;ook;get;Command;Execution;Command;Instance,1.964508555829525e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;8.731149137020111e-11,5,5,"[-5.557804107666016, -4.92852258682251, -5.406540870666504, -6.512588024139404, -5.480057239532471, -0.021463964134454727]",0.9787647724151611
1,['    @Test\n    public void testCommandExecutionHookViaRegisterMethod() {\n        HystrixPlugins.getInstance().registerCommandExecutionHook(new HystrixCommandExecutionHookTestImpl());\n        HystrixCommandExecutionHook impl = HystrixPlugins.getInstance().getCommandExecutionHook();\n        assertTrue(impl instanceof HystrixCommandExecutionHookTestImpl);\n\t}*/\n'],Hystrix;Plugins;get;get;impl;Method;Hystrix;ook;Execution;True,1.1641532182693481e-09;9.89530235528946e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.523428916931152, -5.0118408203125, -5.428736686706543, -6.501809120178223, -5.431957244873047, -0.021136511117219925]",0.9790853261947632
1,['    /*@Test\n    public void testEventNotifierDefaultImpl() {\n        HystrixEventNotifier impl = HystrixPlugins.getInstance().getEventNotifier();\n        assertTrue(impl instanceof HystrixEventNotifierDefault);\n    }\n'],Hystrix;Notifier;impl;get;Event;Notifier;get;Event;Hystrix;impl,1.0186340659856796e-09;4.511093720793724e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;8.731149137020111e-11;8.731149137020111e-11,5,5,"[-5.56805419921875, -4.937182903289795, -5.384644031524658, -6.501021862030029, -5.448596477508545, -0.021615400910377502]",0.9786166548728943
1,['    @Test\n    public void testEventNotifierViaRegisterMethod() {\n        HystrixPlugins.getInstance().registerEventNotifier(new HystrixEventNotifierTestImpl());\n        HystrixEventNotifier impl = HystrixPlugins.getInstance().getEventNotifier();\n        assertTrue(impl instanceof HystrixEventNotifierTestImpl);\n    }\n'],Notifier;Hystrix;Plugins;impl;Notifier;Hystrix;impl;Hystrix;Event;Instance,8.149072527885437e-10;7.275957614183426e-10;6.548361852765083e-10;6.111804395914078e-10;4.802132025361061e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.532633304595947, -5.016570091247559, -5.430392742156982, -6.499966144561768, -5.432435035705566, -0.021060293540358543]",0.979159951210022
1,"['    @Test\n    public void testEventNotifierViaProperty() {\n        try {\n            String fullClass = HystrixEventNotifierTestImpl.class.getName();\n            System.setProperty(""hystrix.plugin.HystrixEventNotifier.implementation"", fullClass);\n            HystrixEventNotifier impl = HystrixPlugins.getInstance().getEventNotifier();\n            assertTrue(impl instanceof HystrixEventNotifierTestImpl);\n        } finally {\n            System.clearProperty(""hystrix.plugin.HystrixEventNotifier.implementation"");\n        }\n\t}*/\n']",impl;Notifier;Property;Hystrix;hystrix;Notifier;Property;Notifier;Notifier;Notifier,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;3.055902197957039e-10,5,5,"[-5.519196033477783, -5.017136096954346, -5.455056190490723, -6.490123271942139, -5.4519476890563965, -0.020930953323841095]",0.9792865514755249
1,['    /*@Test\n    public void testConcurrencyStrategyDefaultImpl() {\n        HystrixConcurrencyStrategy impl = HystrixPlugins.getInstance().getConcurrencyStrategy();\n        assertTrue(impl instanceof HystrixConcurrencyStrategyDefault);\n    }\n'],Concurrency;impl;Strategy;Concurrency;Instance;Strategy;get;True;get;Impl,8.731149137020111e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.0913936421275139e-10;8.731149137020111e-11;2.9103830456733704e-11;0.0,5,5,"[-5.610533237457275, -4.894471168518066, -5.354323387145996, -6.470456600189209, -5.492465972900391, -0.021776260808110237]",0.9784591197967529
1,['    @Test\n    public void testConcurrencyStrategyViaRegisterMethod() {\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(new HystrixConcurrencyStrategyTestImpl());\n        HystrixConcurrencyStrategy impl = HystrixPlugins.getInstance().getConcurrencyStrategy();\n        assertTrue(impl instanceof HystrixConcurrencyStrategyTestImpl);\n    }\n'],Strategy;Concurrency;Concurrency;Hystrix;impl;register;Strategy;Plugins;Instance;get,2.561137080192566e-09;1.4842953532934189e-09;1.367880031466484e-09;9.022187441587448e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.551214218139648, -4.980610370635986, -5.416701316833496, -6.49541711807251, -5.466919422149658, -0.021151218563318253]",0.9790710210800171
1,"['    @Test\n    public void testConcurrencyStrategyViaProperty() {\n        try {\n            String fullClass = HystrixConcurrencyStrategyTestImpl.class.getName();\n            System.setProperty(""hystrix.plugin.HystrixConcurrencyStrategy.implementation"", fullClass);\n            HystrixConcurrencyStrategy impl = HystrixPlugins.getInstance().getConcurrencyStrategy();\n            assertTrue(impl instanceof HystrixConcurrencyStrategyTestImpl);\n        } finally {\n            System.clearProperty(""hystrix.plugin.HystrixConcurrencyStrategy.implementation"");\n        }\n\t}*/\n']",Hystrix;Hystrix;Via;Impl;Strategy;Concurrency;plugin;Property;Impl;Strategy,9.89530235528946e-10;9.022187441587448e-10;7.275957614183426e-10;6.984919309616089e-10;5.675246939063072e-10;5.093170329928398e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.220055416226387e-10,5,5,"[-5.535548686981201, -4.9932661056518555, -5.444916725158691, -6.485499382019043, -5.480867385864258, -0.020954884588718414]",0.9792631268501282
1,['    /*@Test\n    public void testMetricsPublisherDefaultImpl() {\n        HystrixMetricsPublisher impl = HystrixPlugins.getInstance().getMetricsPublisher();\n        assertTrue(impl instanceof HystrixMetricsPublisherDefault);\n    }\n'],Publisher;Hystrix;Plugins;instanceof;Hystrix;Metrics;get;impl;get;Metrics,3.259629011154175e-09;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;2.1827872842550278e-10;1.1641532182693481e-10;5.820766091346741e-11;-2.9103830456733704e-11;-8.731149137020111e-11,5,5,"[-5.60900354385376, -4.902990341186523, -5.384531021118164, -6.490372657775879, -5.4802021980285645, -0.021593933925032616]",0.9786374568939209
1,['    @Test\n    public void testMetricsPublisherViaRegisterMethod() {\n        HystrixPlugins.getInstance().registerMetricsPublisher(new HystrixMetricsPublisherTestImpl());\n        HystrixMetricsPublisher impl = HystrixPlugins.getInstance().getMetricsPublisher();\n        assertTrue(impl instanceof HystrixMetricsPublisherTestImpl);\n    }\n'],Publisher;impl;Metrics;Impl;Plugins;Impl;Publisher;Via;Hystrix;Hystrix,6.984919309616089e-10;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10,5,5,"[-5.557436943054199, -4.989212512969971, -5.434430122375488, -6.5054802894592285, -5.462738037109375, -0.020989323034882545]",0.9792294502258301
1,"['    @Test\n    public void testMetricsPublisherViaProperty() {\n        try {\n            String fullClass = HystrixMetricsPublisherTestImpl.class.getName();\n            System.setProperty(""hystrix.plugin.HystrixMetricsPublisher.implementation"", fullClass);\n            HystrixMetricsPublisher impl = HystrixPlugins.getInstance().getMetricsPublisher();\n            assertTrue(impl instanceof HystrixMetricsPublisherTestImpl);\n        } finally {\n            System.clearProperty(""hystrix.plugin.HystrixMetricsPublisher.implementation"");\n        }\n\t}*/\n']",implementation;Publisher;Metrics;Hystrix;Property;Name;Hystrix;Hystrix;Metrics;Metrics,7.566995918750763e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.710738383233547e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.530043125152588, -5.009167671203613, -5.45630407333374, -6.483489990234375, -5.462658405303955, -0.020899083465337753]",0.9793176651000977
1,['    /*@Test\n    public void testPropertiesStrategyDefaultImpl() {\n        HystrixPropertiesStrategy impl = HystrixPlugins.getInstance().getPropertiesStrategy();\n        assertTrue(impl instanceof HystrixPropertiesStrategyDefault);\n    }\n'],Strategy;Hystrix;impl;Properties;get;impl;Hystrix;Properties;Strategy;get,1.964508555829525e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.577482223510742, -4.918213844299316, -5.359884738922119, -6.473971366882324, -5.467746734619141, -0.02179539017379284]",0.978440523147583
1,['    @Test\n    public void testPropertiesStrategyViaRegisterMethod() {\n        HystrixPlugins.getInstance().registerPropertiesStrategy(new HystrixPropertiesStrategyTestImpl());\n        HystrixPropertiesStrategy impl = HystrixPlugins.getInstance().getPropertiesStrategy();\n        assertTrue(impl instanceof HystrixPropertiesStrategyTestImpl);\n    }\n'],Strategy;Plugins;Instance;Strategy;Via;new;Properties;Hystrix;Properties;True,3.0850060284137726e-09;1.8044374883174896e-09;1.3969838619232178e-09;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.527599334716797, -5.060834884643555, -5.457766056060791, -6.503509998321533, -5.4291582107543945, -0.020676078274846077]",0.979536235332489
1,"['    @Test\n    public void testPropertiesStrategyViaProperty() {\n        try {\n            String fullClass = HystrixPropertiesStrategyTestImpl.class.getName();\n            System.setProperty(""hystrix.plugin.HystrixPropertiesStrategy.implementation"", fullClass);\n            HystrixPropertiesStrategy impl = HystrixPlugins.getInstance().getPropertiesStrategy();\n            assertTrue(impl instanceof HystrixPropertiesStrategyTestImpl);\n        } finally {\n            System.clearProperty(""hystrix.plugin.HystrixPropertiesStrategy.implementation"");\n        }\n\t}*/\n']",Via;Impl;Hystrix;Hystrix;Hystrix;Strategy;Class;Hystrix;clear;Properties,1.3969838619232178e-09;1.280568540096283e-09;1.076841726899147e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.526973724365234, -5.002686023712158, -5.449551105499268, -6.483460903167725, -5.46740198135376, -0.020965158939361572]",0.9792531728744507
1,"['    /*@Test\n    public void testRequestContextViaPluginInTimeout() {\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(new HystrixConcurrencyStrategy() {\n            @Override\n            public <T> Callable<T> wrapCallable(final Callable<T> callable) {\n                return new RequestIdCallable<T>(callable);\n            }\n        });\n\n        HystrixRequestContext context = HystrixRequestContext.initializeContext();\n\n        testRequestIdThreadLocal.set(""foobar"");\n        final AtomicReference<String> valueInTimeout = new AtomicReference<String>();\n\n        new DummyCommand().toObservable()\n                .doOnError(new Action1<Throwable>() {\n                    @Override\n                    public void call(Throwable throwable) {\n                        System.out.println(""initialized = "" + HystrixRequestContext.isCurrentThreadInitialized());\n                        System.out.println(""requestId (timeout) = "" + testRequestIdThreadLocal.get());\n                        valueInTimeout.set(testRequestIdThreadLocal.get());\n                    }\n']",Action;Concurrency;new;foobar;Hystrix;In;println;Request;Context;Local,5.587935447692871e-09;1.2514647096395493e-09;8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;5.093170329928398e-10,5,5,"[-5.52965784072876, -4.818534851074219, -5.35031795501709, -6.428718090057373, -5.524209022521973, -0.022650806233286858]",0.9776039123535156
1,"['    @Test\n    public void testSetResponseSuccess() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> v = o.toBlocking().toFuture();\n\n        cr.setResponse(""theResponse"");\n\n        // fetch value\n        assertEquals(""theResponse"", v.get());\n    }\n']",Observable;Interrupted;Subject;Equals;cr;get;Future;hello;Request;fetch,1.2223608791828156e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.542928218841553, -4.993621349334717, -5.432734966278076, -6.497344493865967, -5.490117073059082, -0.020919397473335266]",0.9792979955673218
1,"['    @Test\n    public void testSetNullResponseSuccess() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> v = o.toBlocking().toFuture();\n\n        cr.setResponse(null);\n\n        // fetch value\n        assertEquals(null, v.get());\n    }\n']",Null;Execution;Observable;new;Set;fetch;cr;null;Blocking;Exception,1.6298145055770874e-09;1.57160684466362e-09;9.313225746154785e-10;5.675246939063072e-10;5.529727786779404e-10;3.2014213502407074e-10;2.764863893389702e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.548260688781738, -4.989706039428711, -5.421472549438477, -6.476330757141113, -5.496697425842285, -0.020980916917324066]",0.9792377948760986
1,"['    @Test\n    public void testSetException() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> v = o.toBlocking().toFuture();\n\n        cr.setException(new RuntimeException(""anException""));\n\n        // fetch value\n        try {\n            v.get();\n            fail(""expected exception"");\n        } catch (ExecutionException e) {\n            assertEquals(""anException"", e.getCause().getMessage());\n        }\n    }\n']",Interrupted;new;Execution;Runtime;Subject;Subject;Collapsed;Observable;Observable;value,3.3760443329811096e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.4854655265808105, -5.058384895324707, -5.419614791870117, -6.453139781951904, -5.446735382080078, -0.021036949008703232]",0.979182779788971
1,"['    @Test\n    public void testSetExceptionAfterResponse() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> v = o.toBlocking().toFuture();\n\n        cr.setResponse(""theResponse"");\n\n        try {\n            cr.setException(new RuntimeException(""anException""));\n            fail(""expected IllegalState"");\n        } catch (IllegalStateException e) {\n\n        }\n\n        assertEquals(""theResponse"", v.get());\n    }\n']",Observable;Interrupted;get;cr;Response;new;Exception;Exception;Future;expected,1.673470251262188e-09;6.984919309616089e-10;6.984919309616089e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.518120288848877, -5.006252765655518, -5.413834571838379, -6.46245813369751, -5.475285530090332, -0.021135695278644562]",0.9790861010551453
1,"['    @Test\n    public void testSetResponseAfterException() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> v = o.toBlocking().toFuture();\n\n        cr.setException(new RuntimeException(""anException""));\n\n        try {\n            cr.setResponse(""theResponse"");\n            fail(""expected IllegalState"");\n        } catch (IllegalStateException e) {\n\n        }\n\n        try {\n            v.get();\n            fail(""expected exception"");\n        } catch (ExecutionException e) {\n            assertEquals(""anException"", e.getCause().getMessage());\n        }\n    }\n']",Execution;Response;Response;expected;Execution;Set;Collapsed;expected;cr;Exception,1.6298145055770874e-09;1.57160684466362e-09;1.1641532182693481e-09;7.566995918750763e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7471181713044643e-10,5,5,"[-5.487557411193848, -5.070681571960449, -5.473182678222656, -6.492509365081787, -5.45651912689209, -0.020607881247997284]",0.9796028733253479
1,"['    @Test\n    public void testSetResponseDuplicate() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> v = o.toBlocking().toFuture();\n\n        cr.setResponse(""theResponse"");\n\n        try {\n            cr.setResponse(""theResponse2"");\n            fail(""expected IllegalState"");\n        } catch (IllegalStateException e) {\n\n        }\n\n        assertEquals(""theResponse"", v.get());\n    }\n']",Collapsed;Response;Collapsed;Observable;Duplicate;Response;Subject;Future;Request;Equals,3.3178366720676422e-09;1.8044374883174896e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.8562575355172157e-10,5,5,"[-5.526233196258545, -5.026853561401367, -5.45937967300415, -6.500173091888428, -5.488214015960693, -0.020646652206778526]",0.9795650243759155
1,"['    @Test(expected = CancellationException.class)\n    public void testSetResponseAfterUnsubscribe() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> f = o.toBlocking().toFuture();\n\n        // cancel/unsubscribe\n        f.cancel(true);\n\n        try {\n            cr.setResponse(""theResponse"");\n        } catch (IllegalStateException e) {\n            fail(""this should have done nothing as it was unsubscribed already"");\n        }\n\n        // expect CancellationException after cancelling\n        f.get();\n    }\n']",Future;Observable;Response;Future;Unsubscribe;to;Observable;expected;cr;Blocking,1.775333657860756e-09;1.6880221664905548e-09;1.3969838619232178e-09;9.313225746154785e-10;6.693881005048752e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.508522987365723, -5.013606548309326, -5.4258880615234375, -6.469200134277344, -5.474855422973633, -0.021061694249510765]",0.9791585803031921
1,"['    @Test(expected = CancellationException.class)\n    public void testSetExceptionAfterUnsubscribe() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> f = o.toBlocking().toFuture();\n\n        // cancel/unsubscribe\n        f.cancel(true);\n\n        try {\n            cr.setException(new RuntimeException(""anException""));\n        } catch (IllegalStateException e) {\n            fail(""this should have done nothing as it was unsubscribed already"");\n        }\n\n        // expect CancellationException after cancelling\n        f.get();\n    }\n']",Observable;Interrupted;Subject;Set;Future;Future;Unsubscribe;expect;Observable;Request,2.5029294192790985e-09;1.4260876923799515e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10;6.402842700481415e-10;6.293703336268663e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.535489082336426, -4.9939117431640625, -5.436135292053223, -6.48455810546875, -5.500319957733154, -0.020909123122692108]",0.9793080687522888
1,"['    @Test\n    public void testUnsubscribeAfterSetResponse() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");\n        Observable<String> o = cr.toObservable();\n        Future<String> v = o.toBlocking().toFuture();\n\n        cr.setResponse(""theResponse"");\n\n        // unsubscribe after the value is sent\n        v.cancel(true);\n\n        // still get value as it was set before canceling\n        assertEquals(""theResponse"", v.get());\n    }\n']",ancel;Exception;Observable;Set;Response;hello;after;Blocking;to;get,9.022187441587448e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.542849540710449, -5.000611305236816, -5.448145866394043, -6.506227970123291, -5.505360126495361, -0.020725704729557037]",0.9794874787330627
1,"['    @Test\n    public void testShutdown() {\n        // other unit tests will probably have run before this so get the count\n        int count = Factory.threadPools.size();\n\n        HystrixThreadPool pool = Factory.getInstance(HystrixThreadPoolKey.Factory.asKey(""threadPoolFactoryTest""),\n                HystrixThreadPoolProperties.Setter.getUnitTestPropertiesBuilder());\n\n        assertEquals(count + 1, Factory.threadPools.size());\n        assertFalse(pool.getExecutor().isShutdown());\n\n        Factory.shutdown();\n\n        // ensure all pools were removed from the cache\n        assertEquals(0, Factory.threadPools.size());\n        assertTrue(pool.getExecutor().isShutdown());\n    }\n']",will;tests;probably;Properties;Unit;so;Properties;thread;Pool;Hystrix,1.5133991837501526e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;4.3655745685100555e-10;4.3655745685100555e-10,5,5,"[-5.512720584869385, -5.0131330490112305, -5.4660563468933105, -6.5043439865112305, -5.474075794219971, -0.020819228142499924]",0.9793959856033325
1,"['    @Test\n    public void testShutdownWithWait() {\n        // other unit tests will probably have run before this so get the count\n        int count = Factory.threadPools.size();\n\n        HystrixThreadPool pool = Factory.getInstance(HystrixThreadPoolKey.Factory.asKey(""threadPoolFactoryTest""),\n                HystrixThreadPoolProperties.Setter.getUnitTestPropertiesBuilder());\n\n        assertEquals(count + 1, Factory.threadPools.size());\n        assertFalse(pool.getExecutor().isShutdown());\n\n        Factory.shutdown(1, TimeUnit.SECONDS);\n\n        // ensure all pools were removed from the cache\n        assertEquals(0, Factory.threadPools.size());\n        assertTrue(pool.getExecutor().isShutdown());\n    }\n']",Properties;Key;Hystrix;Shutdown;Pool;tests;thread;from;get;so,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;2.9831426218152046e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.510121822357178, -5.023890972137451, -5.469970226287842, -6.50834846496582, -5.481727600097656, -0.02070176601409912]",0.979511022567749
1,"['    @Test\n    public void ensureThreadPoolInstanceIsTheOneRegisteredWithMetricsPublisherAndThreadPoolCache() throws IllegalAccessException, NoSuchFieldException {\n        HystrixPlugins.getInstance().registerMetricsPublisher(new HystrixMetricsPublisher() {\n            @Override\n            public HystrixMetricsPublisherThreadPool getMetricsPublisherForThreadPool(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolMetrics metrics, HystrixThreadPoolProperties properties) {\n                return new HystrixMetricsPublisherThreadPoolContainer(metrics);\n            }\n']",Hystrix;Hystrix;Container;Metrics;Instance;Hystrix;Instance;register;One;Metrics,1.076841726899147e-09;8.440110832452774e-10;6.693881005048752e-10;6.330083124339581e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.567112445831299, -4.9522318840026855, -5.416148662567139, -6.462278366088867, -5.510685920715332, -0.021160205826163292]",0.9790620803833008
1,"['    @Test(timeout = 2500)\n    public void testUnsubscribeHystrixThreadPool() throws InterruptedException {\n        // methods are package-private so can\'t test it somewhere else\n        HystrixThreadPool pool = Factory.getInstance(HystrixThreadPoolKey.Factory.asKey(""threadPoolFactoryTest""),\n                HystrixThreadPoolProperties.Setter.getUnitTestPropertiesBuilder());\n        \n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch start = new CountDownLatch(1);\n        final CountDownLatch end = new CountDownLatch(1);\n\n        HystrixContextScheduler hcs = new HystrixContextScheduler(HystrixPlugins.getInstance().getConcurrencyStrategy(), pool);\n\n        Scheduler.Worker w = hcs.createWorker();\n\n        try {\n            w.schedule(new Action0() {\n                @Override\n                public void call() {\n                    start.countDown();\n                    try {\n                        try {\n                            Thread.sleep(5000);\n                        } catch (InterruptedException ex) {\n                            interrupted.set(true);\n                        }\n                    } finally {\n                        end.countDown();\n                    }\n                }\n']",Unsubscribe;Setter;Thread;Properties;Hystrix;Down;cheduler;Atomic;interrupted;catch,2.2118911147117615e-09;1.862645149230957e-09;1.862645149230957e-09;1.6880221664905548e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09,5,5,"[-5.494691371917725, -4.954955101013184, -5.359518051147461, -6.432749271392822, -5.512763023376465, -0.02173776924610138]",0.9784969091415405
1,"['    @Test\n    public void testTimeoutRace() throws InterruptedException {\n        final int NUM_TRIALS = 10;\n\n        for (int i = 0; i < NUM_TRIALS; i++) {\n            List<Observable<String>> observables = new ArrayList<Observable<String>>();\n            HystrixRequestContext context = null;\n\n            try {\n                context = HystrixRequestContext.initializeContext();\n                for (int j = 0; j < NUM_CONCURRENT_COMMANDS; j++) {\n                    observables.add(new TestCommand().observe());\n                }\n\n                Observable<String> overall = Observable.merge(observables);\n\n                List<String> results = overall.toList().toBlocking().first(); //wait for all commands to complete\n\n                for (String s : results) {\n                    if (s == null) {\n                        System.err.println(""Received NULL!"");\n                        throw new RuntimeException(""Received NULL"");\n                    }\n                }\n\n                for (HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n                    if (!hi.isResponseTimedOut()) {\n                        System.err.println(""Timeout not found in executed command"");\n                        throw new RuntimeException(""Timeout not found in executed command"");\n                    }\n                    if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n                        System.err.println(""Missing fallback status!"");\n                        throw new RuntimeException(""Missing fallback status on timeout."");\n                    }\n                }\n\n            } catch (Exception e) {\n                System.err.println(""Error: "" + e.getMessage());\n                e.printStackTrace();\n                throw new RuntimeException(e);\n            } finally {\n                System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n                if (context != null) {\n                    context.shutdown();\n                }\n            }\n\n            System.out.println(""*************** TRIAL "" + i + "" ******************"");\n            System.out.println();\n            Thread.sleep(50);\n        }\n\n        Hystrix.reset();\n    }\n']",Timeout;Blocking;println;Hyst;Observable;new;List;Context;hi;final,1.5133991837501526e-09;6.83940015733242e-10;5.238689482212067e-10;4.547473508864641e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10;2.6193447411060333e-10;2.1827872842550278e-10;1.8917489796876907e-10,5,5,"[-5.476430892944336, -5.043550968170166, -5.392816066741943, -6.4403076171875, -5.466969966888428, -0.021227896213531494]",0.9789959192276001
1,"['    @Test\n    public void testEmptyStreamProducesEmptyDistributions() {\n        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""Collapser-Batch-Size-A"");\n        stream = RollingCollapserBatchSizeDistributionStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().skip(10).take(10).subscribe(new Subscriber<CachedValuesHistogram>() {\n            @Override\n            public void onCompleted() {\n                latch.countDown();\n            }\n']",key;Unstarted;Down;subscribe;Hystrix;Down;Count;Key;on;Collapser,1.0477378964424133e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.526577949523926, -4.968565464019775, -5.4012908935546875, -6.485004901885986, -5.498147010803223, -0.021289048716425896]",0.9789360761642456
1,"['    @Test\n    public void testBatches() {\n        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""Collapser-Batch-Size-B"");\n        stream = RollingCollapserBatchSizeDistributionStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(10).subscribe(new Subscriber<CachedValuesHistogram>() {\n            @Override\n            public void onCompleted() {\n                latch.countDown();\n            }\n']",Subscriber;Collapser;Hystrix;subscribe;aching;Count;Size;Collapser;Stream;Collapser,1.3969838619232178e-09;9.74978320300579e-10;8.803908713161945e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.764863893389702e-10,5,5,"[-5.517266750335693, -4.97834587097168, -5.396442890167236, -6.483458995819092, -5.484329700469971, -0.021340860053896904]",0.9788852334022522
1,"['    @Test\n    public void testBatchesAgeOut() {\n        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""Collapser-Batch-Size-B"");\n        stream = RollingCollapserBatchSizeDistributionStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(30).subscribe(new Subscriber<CachedValuesHistogram>() {\n            @Override\n            public void onCompleted() {\n                latch.countDown();\n            }\n']",Subscriber;Histogram;subscribe;take;Collapser;aching;Hystrix;ached;Values;key,1.4551915228366852e-09;9.022187441587448e-10;8.149072527885437e-10;8.149072527885437e-10;7.130438461899757e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10,5,5,"[-5.520378589630127, -4.980433464050293, -5.402502536773682, -6.486228942871094, -5.48994779586792, -0.0212573055177927]",0.9789669513702393
1,"['    @Test\n    public void testEmptyStreamProducesZeros() {\n        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""CumulativeCollapser-A"");\n        stream = CumulativeCollapserEventCounterStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(10).subscribe(getSubscriber(latch));\n\n        //no writes\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertEquals(HystrixEventType.Collapser.values().length, stream.getLatest().length);\n        assertEquals(0, stream.getLatest(HystrixEventType.Collapser.ADDED_TO_BATCH));\n        assertEquals(0, stream.getLatest(HystrixEventType.Collapser.BATCH_EXECUTED));\n        assertEquals(0, stream.getLatest(HystrixEventType.Collapser.RESPONSE_FROM_CACHE));\n    }\n']",Produces;await;println;Factory;ONSE;Counter;Latest;Event;Cumulative;Log,1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.497046947479248, -4.973496437072754, -5.36821985244751, -6.4591064453125, -5.468045234680176, -0.021699508652091026]",0.9785341024398804
1,"['    @Test\n    public void testCollapsed() {\n        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""CumulativeCollapser-B"");\n        stream = CumulativeCollapserEventCounterStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(10).subscribe(getSubscriber(latch));\n\n        for (int i = 0; i < 3; i++) {\n            CommandStreamTest.Collapser.from(key, i).observe();\n        }\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.Collapser.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.Collapser.values().length];\n        expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()] = 1;\n        expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()] = 3;\n        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Hystrix;System;Hystrix;out;await;aching;Type;Collapser;Executed;stream,1.1932570487260818e-09;1.1641532182693481e-09;1.1350493878126144e-09;9.89530235528946e-10;9.167706593871117e-10;9.022187441587448e-10;6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;5.238689482212067e-10,5,5,"[-5.5241875648498535, -4.936604022979736, -5.37065315246582, -6.45882511138916, -5.497540473937988, -0.021716656163334846]",0.9785173535346985
1,"['    @Test\n    public void testCollapsedAndResponseFromCache() {\n        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""CumulativeCollapser-C"");\n        stream = CumulativeCollapserEventCounterStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(10).subscribe(getSubscriber(latch));\n\n        for (int i = 0; i < 3; i++) {\n            CommandStreamTest.Collapser.from(key, i).observe();\n            CommandStreamTest.Collapser.from(key, i).observe(); //same arg - should get a response from cache\n            CommandStreamTest.Collapser.from(key, i).observe(); //same arg - should get a response from cache\n        }\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.Collapser.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.Collapser.values().length];\n        expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()] = 1;\n        expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()] = 3;\n        expected[HystrixEventType.Collapser.RESPONSE_FROM_CACHE.ordinal()] = 6;\n        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Hystrix;umulative;Interrupted;Hystrix;Cumulative;Command;aching;Command;Event;Collapser,1.1641532182693481e-09;1.0477378964424133e-09;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.517393589019775, -4.907610893249512, -5.359305381774902, -6.448187351226807, -5.498135089874268, -0.022029224783182144]",0.9782116413116455
1,"['    @Test\n    public void testCollapsedAndResponseFromCacheAgeOutOfCumulativeWindow() {\n        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""CumulativeCollapser-D"");\n        stream = CumulativeCollapserEventCounterStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(30).subscribe(getSubscriber(latch));\n\n        for (int i = 0; i < 3; i++) {\n            CommandStreamTest.Collapser.from(key, i).observe();\n            CommandStreamTest.Collapser.from(key, i).observe(); //same arg - should get a response from cache\n            CommandStreamTest.Collapser.from(key, i).observe(); //same arg - should get a response from cache\n        }\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.Collapser.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.Collapser.values().length];\n        expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()] = 1;\n        expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()] = 3;\n        expected[HystrixEventType.Collapser.RESPONSE_FROM_CACHE.ordinal()] = 6;\n        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Event;Collapsed;ex;Latest;values;umulative;Type;expected;await;Cumulative,5.587935447692871e-09;1.862645149230957e-09;1.862645149230957e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.5260515213012695, -4.874323844909668, -5.367739200592041, -6.457425117492676, -5.5153937339782715, -0.022122742608189583]",0.9781201481819153
1,"['    @Test\n    public void testEmptyStreamProducesZeros() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-A"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        //no writes\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        assertFalse(hasData(stream.getLatest()));\n    }\n']",Hystrix;Hystrix;Key;MD;Unstarted;eros;await;Latest;latch;as,1.8044374883174896e-09;1.775333657860756e-09;9.313225746154785e-10;9.313225746154785e-10;7.203198038041592e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.505722999572754, -5.009013652801514, -5.408906936645508, -6.488077640533447, -5.480032920837402, -0.02112985961139202]",0.9790918231010437
1,"['    @Test\n    public void testSingleSuccess() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-B"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        Command cmd = Command.from(groupKey, key, HystrixEventType.SUCCESS, 20);\n\n        cmd.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.SUCCESS.ordinal()] = 1;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",long;Hystrix;Cumulative;Hystrix;ordinal;Event;Event;Type;Unstarted;ILLISECONDS,4.6566128730773926e-09;2.153683453798294e-09;2.0954757928848267e-09;1.4842953532934189e-09;1.3969838619232178e-09;1.280568540096283e-09;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.511354923248291, -4.885294437408447, -5.374747276306152, -6.462660312652588, -5.502878189086914, -0.022107817232608795]",0.9781347513198853
1,"['    @Test\n    public void testSingleFailure() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-C"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        Command cmd = Command.from(groupKey, key, HystrixEventType.FAILURE, 20);\n\n        cmd.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.FAILURE.ordinal()] = 1;\n        expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()] = 1;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Hystrix;Event;Failure;Type;Single;Counter;Latest;Cumulative;FAILURE;values,1.9936123862862587e-09;1.3969838619232178e-09;1.2369127944111824e-09;9.313225746154785e-10;6.402842700481415e-10;5.966285243630409e-10;5.093170329928398e-10;4.656612873077393e-10;4.220055416226387e-10;3.92901711165905e-10,5,5,"[-5.510698318481445, -4.906118392944336, -5.374692916870117, -6.459019660949707, -5.492841720581055, -0.021999487653374672]",0.9782407283782959
1,"['    @Test\n    public void testSingleTimeout() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-D"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        Command cmd = Command.from(groupKey, key, HystrixEventType.TIMEOUT);\n\n        cmd.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.TIMEOUT.ordinal()] = 1;\n        expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()] = 1;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Event;Hystrix;expected;Counter;Hystrix;Event;ILLISECONDS;Latest;length;Interrupted,1.979060471057892e-09;1.3242242857813835e-09;1.2514647096395493e-09;1.2223608791828156e-09;9.313225746154785e-10;9.313225746154785e-10;8.076312951743603e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.515772342681885, -4.899489879608154, -5.366257190704346, -6.44509744644165, -5.499701976776123, -0.022062690928578377]",0.9781789183616638
1,"['    @Test\n    public void testSingleBadRequest() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-E"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        Command cmd = Command.from(groupKey, key, HystrixEventType.BAD_REQUEST);\n\n        cmd.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.BAD_REQUEST.ordinal()] = 1;\n        expected[HystrixEventType.EXCEPTION_THROWN.ordinal()] = 1;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",expected;Subscriber;get;ordinal;stream;expected;Key;Hystrix;Equals;get,1.30385160446167e-08;6.170012056827545e-09;5.587935447692871e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.6566128730773926e-09;3.026798367500305e-09;2.561137080192566e-09;2.3283064365386963e-09,5,5,"[-5.523834228515625, -4.853633880615234, -5.378187656402588, -6.45655632019043, -5.507690906524658, -0.02227862738072872]",0.9779677391052246
1,"['    @Test\n    public void testRequestFromCache() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-F"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        Command cmd1 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 20);\n        Command cmd2 = Command.from(groupKey, key, HystrixEventType.RESPONSE_FROM_CACHE);\n        Command cmd3 = Command.from(groupKey, key, HystrixEventType.RESPONSE_FROM_CACHE);\n\n        cmd1.observe();\n        cmd2.observe();\n        cmd3.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n\n        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.SUCCESS.ordinal()] = 1;\n        expected[HystrixEventType.RESPONSE_FROM_CACHE.ordinal()] = 2;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Cumulative;ordinal;ex;ILLISECONDS;Exception;SUCCESS;expected;long;Interrupted;expected,2.0954757928848267e-09;2.0372681319713593e-09;1.862645149230957e-09;1.4260876923799515e-09;1.280568540096283e-09;1.0186340659856796e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.467525482177734, -4.981110572814941, -5.3296308517456055, -6.421948432922363, -5.452122688293457, -0.022088810801506042]",0.9781533479690552
1,"['    @Test\n    public void testShortCircuited() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-G"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        //3 failures in a row will trip circuit.  let bucket roll once then submit 2 requests.\n        //should see 3 FAILUREs and 2 SHORT_CIRCUITs and then 5 FALLBACK_SUCCESSes\n\n        Command failure1 = Command.from(groupKey, key, HystrixEventType.FAILURE, 20);\n        Command failure2 = Command.from(groupKey, key, HystrixEventType.FAILURE, 20);\n        Command failure3 = Command.from(groupKey, key, HystrixEventType.FAILURE, 20);\n\n        Command shortCircuit1 = Command.from(groupKey, key, HystrixEventType.SUCCESS);\n        Command shortCircuit2 = Command.from(groupKey, key, HystrixEventType.SUCCESS);\n\n        failure1.observe();\n        failure2.observe();\n        failure3.observe();\n\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException ie) {\n            fail(ie.getMessage());\n        }\n\n        shortCircuit1.observe();\n        shortCircuit2.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n\n        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertTrue(shortCircuit1.isResponseShortCircuited());\n        assertTrue(shortCircuit2.isResponseShortCircuited());\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.FAILURE.ordinal()] = 3;\n        expected[HystrixEventType.SHORT_CIRCUITED.ordinal()] = 2;\n        expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()] = 5;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Command;as;Hystrix;Hystrix;Hystrix;Stream;Stream;Circ;Values;Hystrix,1.3969838619232178e-08;9.313225746154785e-09;5.180481821298599e-09;3.958120942115784e-09;3.725290298461914e-09;3.725290298461914e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.9208528101444244e-09;1.9208528101444244e-09,5,5,"[-5.494091510772705, -5.004733085632324, -5.384786605834961, -6.454861640930176, -5.470794677734375, -0.021411340683698654]",0.9788163900375366
1,"['    @Test\n    public void testSemaphoreRejected() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-H"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        //10 commands will saturate semaphore when called from different threads.\n        //submit 2 more requests and they should be SEMAPHORE_REJECTED\n        //should see 10 SUCCESSes, 2 SEMAPHORE_REJECTED and 2 FALLBACK_SUCCESSes\n\n        List<Command> saturators = new ArrayList<Command>();\n\n        for (int i = 0; i < 10; i++) {\n            saturators.add(Command.from(groupKey, key, HystrixEventType.SUCCESS, 500, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE));\n        }\n\n        Command rejected1 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 0, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);\n        Command rejected2 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 0, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);\n\n        for (final Command saturator : saturators) {\n            new Thread(new HystrixContextRunnable(new Runnable() {\n                @Override\n                public void run() {\n                    saturator.observe();\n                }\n']",Hystrix;subscribe;Command;rejected;umulative;Command;key;group;ALLBACK;Event,9.604264050722122e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.43833414465189e-10;4.0745362639427185e-10,5,5,"[-5.478124618530273, -5.027212142944336, -5.367710113525391, -6.4425764083862305, -5.449505805969238, -0.0215196181088686]",0.9787102937698364
1,"['    @Test\n    public void testThreadPoolRejected() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-I"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        //10 commands will saturate threadpools when called concurrently.\n        //submit 2 more requests and they should be THREADPOOL_REJECTED\n        //should see 10 SUCCESSes, 2 THREADPOOL_REJECTED and 2 FALLBACK_SUCCESSes\n\n        List<Command> saturators = new ArrayList<Command>();\n\n        for (int i = 0; i < 10; i++) {\n            saturators.add(Command.from(groupKey, key, HystrixEventType.SUCCESS, 500));\n        }\n\n        Command rejected1 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 0);\n        Command rejected2 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 0);\n\n        for (final Command saturator : saturators) {\n            saturator.observe();\n        }\n\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException ie) {\n            fail(ie.getMessage());\n        }\n\n        rejected1.observe();\n        rejected2.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n\n        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertTrue(rejected1.isResponseThreadPoolRejected());\n        assertTrue(rejected2.isResponseThreadPoolRejected());\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.SUCCESS.ordinal()] = 10;\n        expected[HystrixEventType.THREAD_POOL_REJECTED.ordinal()] = 2;\n        expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()] = 2;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Event;Cumulative;Type;Subscriber;Hystrix;Hystrix;Type;Hystrix;saturators;SUCCESSes,2.3283064365386963e-09;1.3969838619232178e-09;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.802132025361061e-10;4.220055416226387e-10;3.92901711165905e-10,5,5,"[-5.457724094390869, -5.061635494232178, -5.3650689125061035, -6.435337543487549, -5.436663627624512, -0.02146209590137005]",0.9787665605545044
1,"['    @Test\n    public void testFallbackFailure() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-J"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        Command cmd = Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_FAILURE);\n\n        cmd.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.FAILURE.ordinal()] = 1;\n        expected[HystrixEventType.FALLBACK_FAILURE.ordinal()] = 1;\n        expected[HystrixEventType.EXCEPTION_THROWN.ordinal()] = 1;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Event;Type;Event;cmd;Cumulative;Event;Event;Failure;umulative;values,5.587935447692871e-09;4.423782229423523e-09;2.0954757928848267e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09,5,5,"[-5.53098201751709, -4.925230026245117, -5.388551235198975, -6.472378730773926, -5.5034003257751465, -0.021642815321683884]",0.9785898327827454
1,"['    @Test\n    public void testFallbackMissing() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-K"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        Command cmd = Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_MISSING);\n\n        cmd.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.FAILURE.ordinal()] = 1;\n        expected[HystrixEventType.FALLBACK_MISSING.ordinal()] = 1;\n        expected[HystrixEventType.EXCEPTION_THROWN.ordinal()] = 1;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Event;Latest;Fallback;Type;aching;Event;Event;Event;Command;ILLISECONDS,5.587935447692871e-09;2.2118911147117615e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;8.003553375601768e-10,5,5,"[-5.522728443145752, -4.931703090667725, -5.38400936126709, -6.466030120849609, -5.494926929473877, -0.021695075556635857]",0.9785385727882385
1,"['    @Test\n    public void testFallbackRejection() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-L"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        //fallback semaphore size is 5.  So let 5 commands saturate that semaphore, then\n        //let 2 more commands go to fallback.  they should get rejected by the fallback-semaphore\n\n        List<Command> fallbackSaturators = new ArrayList<Command>();\n        for (int i = 0; i < 5; i++) {\n            fallbackSaturators.add(Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_SUCCESS, 400));\n        }\n\n        Command rejection1 = Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_SUCCESS, 0);\n        Command rejection2 = Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_SUCCESS, 0);\n\n        for (Command saturator: fallbackSaturators) {\n            saturator.observe();\n        }\n\n        try {\n            Thread.sleep(70);\n        } catch (InterruptedException ex) {\n            fail(ex.getMessage());\n        }\n\n        rejection1.observe();\n        rejection2.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(""Interrupted ex"");\n        }\n        assertEquals(HystrixEventType.values().length, stream.getLatest().length);\n        long[] expected = new long[HystrixEventType.values().length];\n        expected[HystrixEventType.FAILURE.ordinal()] = 7;\n        expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()] = 5;\n        expected[HystrixEventType.FALLBACK_REJECTION.ordinal()] = 2;\n        expected[HystrixEventType.EXCEPTION_THROWN.ordinal()] = 2;\n        assertArrayEquals(expected, stream.getLatest());\n    }\n']",Command;Key;Unstarted;aturators;group;latch;group;aching;Counter;observe,8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.471925258636475, -5.050771236419678, -5.383681774139404, -6.450411319732666, -5.445900917053223, -0.021317873150110245]",0.9789077639579773
1,"['    @Test\n    public void testCancelled() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-M"");\n        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(5).subscribe(getSubscriber(latch));\n\n        Command toCancel = Command.from(groupKey, key, HystrixEventType.SUCCESS, 500);\n\n        System.out.println(System.currentTimeMillis() + "" : "" + Thread.currentThread().getName() + "" : about to observe and subscribe"");\n        Subscription s = toCancel.observe().\n                doOnUnsubscribe(new Action0() {\n                    @Override\n                    public void call() {\n                        System.out.println(System.currentTimeMillis() + "" : "" + Thread.currentThread().getName() + "" : UnSubscribe from command.observe()"");\n                    }\n']",Cumulative;ancelled;Time;Mill;Command;command;Command;Command;Mill;Thread,4.190951585769653e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.512509346008301, -4.904407978057861, -5.372194290161133, -6.455169200897217, -5.507025241851807, -0.021963685750961304]",0.9782757759094238
1,"['    @Test\n    public void testToAttachment() {\n        Attachment attachment = getCard().toAttachment();\n        Assert.assertNotNull(attachment);\n        Assert.assertEquals(""application/vnd.microsoft.card.hero"", attachment.getContentType());\n    }\n']",Attachment;Attachment;hero;Card;Attachment;to;Null;attachment;attachment;card,1.3387762010097504e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.53572416305542, -5.066971302032471, -5.436592102050781, -6.504926681518555, -5.4452433586120605, -0.020623179152607918]",0.9795880317687988
1,"['    @Test\n    public void testToAttachment() {\n        Attachment attachment = getCard().toAttachment();\n        Assert.assertNotNull(attachment);\n        Assert.assertEquals(""application/vnd.microsoft.card.audio"", attachment.getContentType());\n    }\n']",to;Attachment;Null;Assert;application;attachment;Content;microsoft;get;Assert,1.1641532182693481e-09;8.731149137020111e-10;8.731149137020111e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-5.550621032714844, -5.0591607093811035, -5.424528121948242, -6.505706787109375, -5.4475178718566895, -0.020656811073422432]",0.979555070400238
1,"['    @Test\n    public void GetConversationReference() {\n        Activity activity = createActivity();\n        ConversationReference conversationReference = activity.getConversationReference();\n\n        Assert.assertEquals(activity.getId(), conversationReference.getActivityId());\n        Assert.assertEquals(activity.getFrom().getId(), conversationReference.getUser().getId());\n        Assert.assertEquals(activity.getRecipient().getId(), conversationReference.getBot().getId());\n        Assert.assertEquals(activity.getConversation().getId(), conversationReference.getConversation().getId());\n        Assert.assertEquals(activity.getLocale(), conversationReference.getLocale());\n        Assert.assertEquals(activity.getChannelId(), conversationReference.getChannelId());\n        Assert.assertEquals(activity.getServiceUrl(), conversationReference.getServiceUrl());\n\n        activity.setType(ActivityTypes.CONVERSATION_UPDATE);\n        conversationReference = activity.getConversationReference();\n        Assert.assertNull(conversationReference.getActivityId());\n\n    }\n']",UPDATE;Reference;Reference;Type;conversation;Reference;Assert;Equals;conversation;Reference,1.280568540096283e-09;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.492749214172363, -5.091472625732422, -5.445288181304932, -6.481558322906494, -5.4343156814575195, -0.020690323784947395]",0.9795222282409668
1,"['    @Test\n    public void GetReplyConversationReference() {\n        Activity activity = createActivity();\n\n        ResourceResponse reply = new ResourceResponse();\n        reply.setId(""1234"");\n\n        ConversationReference conversationReference = activity.getReplyConversationReference(reply);\n\n        Assert.assertEquals(reply.getId(), conversationReference.getActivityId());\n        Assert.assertEquals(activity.getFrom().getId(), conversationReference.getUser().getId());\n        Assert.assertEquals(activity.getRecipient().getId(), conversationReference.getBot().getId());\n        Assert.assertEquals(activity.getConversation().getId(), conversationReference.getConversation().getId());\n        Assert.assertEquals(activity.getLocale(), conversationReference.getLocale());\n        Assert.assertEquals(activity.getChannelId(), conversationReference.getChannelId());\n        Assert.assertEquals(activity.getServiceUrl(), conversationReference.getServiceUrl());\n    }\n']",Conversation;Resource;reply;Equals;Response;Bot;Activity;Reply;activity;Equals,2.3865140974521637e-09;9.313225746154785e-10;8.149072527885437e-10;7.712515071034431e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.463051795959473, -5.093018531799316, -5.420532703399658, -6.450066566467285, -5.421873569488525, -0.021023640409111977]",0.9791959524154663
1,"['    @Test\n    public void ApplyConversationReference_isIncoming() {\n        Activity activity = createActivity();\n\n        ConversationReference conversationReference = new ConversationReference();\n        conversationReference.setChannelId(""cr_123"");\n        conversationReference.setServiceUrl(""cr_serviceUrl"");\n        ConversationAccount conversation = new ConversationAccount();\n        conversation.setId(""cr_456"");\n        conversationReference.setConversation(conversation);\n        ChannelAccount userAccount = new ChannelAccount();\n        userAccount.setId(""cr_abc"");\n        conversationReference.setUser(userAccount);\n        ChannelAccount botAccount = new ChannelAccount();\n        botAccount.setId(""cr_def"");\n        conversationReference.setBot(botAccount);\n        conversationReference.setActivityId(""cr_12345"");\n        // Intentionally oddly-cased to check that it isn\'t defaulted somewhere, but\n        // tests stay in English\n        conversationReference.setLocale(""en-uS"");\n\n        activity.applyConversationReference(conversationReference, true);\n\n        Assert.assertEquals(conversationReference.getChannelId(), activity.getChannelId());\n        Assert.assertEquals(conversationReference.getLocale(), activity.getLocale());\n        Assert.assertEquals(conversationReference.getServiceUrl(), activity.getServiceUrl());\n        Assert.assertEquals(conversationReference.getConversation().getId(), activity.getConversation().getId());\n\n        Assert.assertEquals(conversationReference.getUser().getId(), activity.getFrom().getId());\n        Assert.assertEquals(conversationReference.getBot().getId(), activity.getRecipient().getId());\n        Assert.assertEquals(conversationReference.getActivityId(), activity.getId());\n    }\n']",Assert;Assert;create;activity;Equals;stay;activity;Equals;oddly;Locale,3.550667315721512e-09;2.7939677238464355e-09;1.280568540096283e-09;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.421247959136963, -5.099493980407715, -5.440537452697754, -6.467136859893799, -5.424015998840332, -0.021041501313447952]",0.9791783094406128
1,"['    @Test\n    public void ApplyConversationReference() {\n        Activity activity = createActivity();\n\n        ConversationReference conversationReference = new ConversationReference();\n        conversationReference.setChannelId(""123"");\n        conversationReference.setServiceUrl(""serviceUrl"");\n        ConversationAccount conversation = new ConversationAccount();\n        conversation.setId(""456"");\n        conversationReference.setConversation(conversation);\n        ChannelAccount userAccount = new ChannelAccount();\n        userAccount.setId(""abc"");\n        conversationReference.setUser(userAccount);\n        ChannelAccount botAccount = new ChannelAccount();\n        botAccount.setId(""def"");\n        conversationReference.setBot(botAccount);\n        conversationReference.setActivityId(""12345"");\n        // Intentionally oddly-cased to check that it isn\'t defaulted somewhere, but\n        // tests stay in English\n        conversationReference.setLocale(""en-uS"");\n\n        activity.applyConversationReference(conversationReference, false);\n\n        Assert.assertEquals(conversationReference.getChannelId(), activity.getChannelId());\n        Assert.assertEquals(conversationReference.getLocale(), activity.getLocale());\n        Assert.assertEquals(conversationReference.getServiceUrl(), activity.getServiceUrl());\n        Assert.assertEquals(conversationReference.getConversation().getId(), activity.getConversation().getId());\n\n        Assert.assertEquals(conversationReference.getBot().getId(), activity.getFrom().getId());\n        Assert.assertEquals(conversationReference.getUser().getId(), activity.getRecipient().getId());\n        Assert.assertEquals(conversationReference.getActivityId(), activity.getReplyToId());\n    }\n']",conversation;Assert;Locale;Assert;get;activity;in;Apply;to;Intentionally,4.016328603029251e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10,5,5,"[-5.410940170288086, -5.10685920715332, -5.432446002960205, -6.464982509613037, -5.4250898361206055, -0.021077102050185204]",0.9791434407234192
1,"['    @Test\n    public void ApplyConversationReferenceOverload() {\n        Activity activity = createActivity();\n\n        ConversationReference conversationReference = new ConversationReference();\n        conversationReference.setChannelId(""123"");\n        conversationReference.setServiceUrl(""serviceUrl"");\n        ConversationAccount conversation = new ConversationAccount();\n        conversation.setId(""456"");\n        conversationReference.setConversation(conversation);\n        ChannelAccount userAccount = new ChannelAccount();\n        userAccount.setId(""abc"");\n        conversationReference.setUser(userAccount);\n        ChannelAccount botAccount = new ChannelAccount();\n        botAccount.setId(""def"");\n        conversationReference.setBot(botAccount);\n        conversationReference.setActivityId(""12345"");\n        // Intentionally oddly-cased to check that it isn\'t defaulted somewhere, but\n        // tests stay in English\n        conversationReference.setLocale(""en-uS"");\n\n        activity.applyConversationReference(conversationReference);\n\n        Assert.assertEquals(conversationReference.getChannelId(), activity.getChannelId());\n        Assert.assertEquals(conversationReference.getLocale(), activity.getLocale());\n        Assert.assertEquals(conversationReference.getServiceUrl(), activity.getServiceUrl());\n        Assert.assertEquals(conversationReference.getConversation().getId(), activity.getConversation().getId());\n\n        Assert.assertEquals(conversationReference.getBot().getId(), activity.getFrom().getId());\n        Assert.assertEquals(conversationReference.getUser().getId(), activity.getRecipient().getId());\n        Assert.assertEquals(conversationReference.getActivityId(), activity.getReplyToId());\n    }\n']",stay;Overload;conversation;Assert;Equals;Locale;tests;Equals;Channel;activity,2.6193447411060333e-09;2.3865140974521637e-09;2.0954757928848267e-09;1.2514647096395493e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10,5,5,"[-5.409425258636475, -5.103649139404297, -5.42924165725708, -6.4632344245910645, -5.423468589782715, -0.021128341555595398]",0.9790933132171631
1,"['    @Test\n    public void ApplyConversationReferenceOverloadAlternatePaths() {\n        Activity activity = createActivity();\n\n        ConversationReference conversationReference = new ConversationReference();\n        conversationReference.setChannelId(""123"");\n        conversationReference.setServiceUrl(""serviceUrl"");\n        ConversationAccount conversation = new ConversationAccount();\n        conversation.setId(""456"");\n        conversationReference.setConversation(conversation);\n        ChannelAccount userAccount = new ChannelAccount();\n        userAccount.setId(""abc"");\n        conversationReference.setUser(userAccount);\n        ChannelAccount botAccount = new ChannelAccount();\n        botAccount.setId(""def"");\n        conversationReference.setBot(botAccount);\n        conversationReference.setActivityId(null);\n        conversationReference.setLocale(null);\n\n        activity.applyConversationReference(conversationReference, false);\n\n        Assert.assertEquals(conversationReference.getChannelId(), activity.getChannelId());\n        Assert.assertEquals(""en-uS"", activity.getLocale());\n        Assert.assertEquals(conversationReference.getServiceUrl(), activity.getServiceUrl());\n        Assert.assertEquals(conversationReference.getConversation().getId(), activity.getConversation().getId());\n\n        Assert.assertEquals(conversationReference.getBot().getId(), activity.getFrom().getId());\n        Assert.assertEquals(conversationReference.getUser().getId(), activity.getRecipient().getId());\n        Assert.assertEquals(conversationReference.getActivityId(), activity.getReplyToId());\n\n        activity.applyConversationReference(conversationReference, true);\n\n        Assert.assertEquals(conversationReference.getChannelId(), activity.getChannelId());\n        Assert.assertEquals(""en-uS"", activity.getLocale());\n        Assert.assertEquals(conversationReference.getServiceUrl(), activity.getServiceUrl());\n        Assert.assertEquals(conversationReference.getConversation().getId(), activity.getConversation().getId());\n\n        Assert.assertEquals(conversationReference.getUser().getId(), activity.getFrom().getId());\n        Assert.assertEquals(conversationReference.getBot().getId(), activity.getRecipient().getId());\n        Assert.assertEquals(conversationReference.getActivityId(), activity.getReplyToId());\n    }\n']",Alternate;Assert;Conversation;Reference;Activity;Conversation;conversation;Path;Reference;abc,1.2223608791828156e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.384992599487305, -5.119483947753906, -5.445516586303711, -6.46210241317749, -5.4066877365112305, -0.021149585023522377]",0.9790723919868469
1,"['    @Test\n    public void CreateTraceAllowsNullRecipient() {\n        Activity activity = createActivity();\n        activity.setRecipient(null);\n        Activity trace = activity.createTrace(""test"");\n\n        Assert.assertNull(trace.getFrom().getId());\n    }\n']",Recipient;Trace;Null;Assert;trace;create;null;activity;trace;Create,1.5133991837501526e-09;1.1641532182693481e-09;1.1059455573558807e-09;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.553319454193115, -4.988340854644775, -5.443658828735352, -6.51821756362915, -5.4737229347229, -0.02090410329401493]",0.9793130159378052
1,"['    @Test\n    public void DeserializeActivity() throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.findAndRegisterModules();\n        Activity activity = objectMapper.readValue(this.serializedActivity, Activity.class);\n\n        Assert.assertNotNull(activity.getTimestamp());\n        Assert.assertEquals(""b18a1c99-7a29-4801-ac0c-579f2c36d52c"", activity.getConversation().getId());\n        Assert.assertNotNull(activity.getValue());\n    }\n']",Modules;apper;Deserialize;Object;Timestamp;Null;Not;Assert;IOException;Value,1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.479668617248535, -5.028706073760986, -5.38863468170166, -6.454446315765381, -5.459934234619141, -0.021339576691389084]",0.9788864850997925
1,"['    @Test\n    public void DeserializeActivityWithDifferentTimeZone() throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.findAndRegisterModules();\n        Activity activity = objectMapper.readValue(this.serializedActivityWithDifferentTimeZone, Activity.class);\n\n        Assert.assertNotNull(activity.getTimestamp());\n        Assert.assertEquals(""b18a1c99-7a29-4801-ac0c-579f2c36d52c"", activity.getConversation().getId());\n        Assert.assertNotNull(activity.getValue());\n    }\n']",Zone;Modules;Different;Timestamp;Deserialize;Object;read;activity;activity;Null,8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;4.802132025361061e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5050272941589355, -5.012434959411621, -5.4052042961120605, -6.488776683807373, -5.4786906242370605, -0.02113102562725544]",0.979090690612793
1,"['    @Test\n    public void GetInformationForMicrosoftTeams() throws JsonProcessingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.findAndRegisterModules();\n        Activity activity = objectMapper.readValue(ActivityTest.serializedActivityFromTeams, Activity.class);\n        Assert.assertEquals(""19:123cb42aa5a0a7e56f83@thread.skype"", activity.teamsGetChannelId());\n        Assert.assertEquals(""19:104f2cb42aa5a0a7e56f83@thread.skype"", activity.teamsGetTeamId());\n        Assert.assertEquals(true, activity.isTeamsActivity());\n\n        activity = objectMapper.readValue(ActivityTest.serializedActivityFromTeamsWithoutTeamsChannelIdorTeamId,\n                Activity.class);\n\n        Assert.assertEquals(""channel_id"", activity.teamsGetChannelId());\n        Assert.assertEquals(""team_id"", activity.teamsGetTeamId());\n\n        TeamsChannelData teamsChannelData = activity.getChannelData(TeamsChannelData.class);\n        Assert.assertEquals(""channel_id"", teamsChannelData.getChannel().getId());\n        Assert.assertEquals(""channel_name"", teamsChannelData.getChannel().getName());\n        Assert.assertEquals(""team_id"", teamsChannelData.getTeam().getId());\n        Assert.assertEquals(""team_name"", teamsChannelData.getTeam().getName());\n        Assert.assertEquals(""aad_groupid"", teamsChannelData.getTeam().getAadGroupId());\n        Assert.assertEquals(true, teamsChannelData.getNotification().getAlert());\n        Assert.assertEquals(""teamMemberAdded"", teamsChannelData.getEventType());\n        Assert.assertEquals(""tenant_id"", teamsChannelData.getTenant().getId());\n    }\n']",IOException;son;Processing;serialized;new;Channel;Without;read;For;Teams,8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.546585164964199e-10,5,5,"[-5.4019856452941895, -5.1160888671875, -5.432370662689209, -6.443986415863037, -5.3828606605529785, -0.021289514377713203]",0.9789354801177979
1,"['    @Test\n    public void GetTeamsChannelIdBadChannelData() {\n        Activity activity = new Activity();\n        activity.setChannelData(""badChannelData"");\n        String channelId = activity.teamsGetChannelId();\n        Assert.assertNull(channelId);\n    }\n']",set;Activity;Channel;bad;new;Get;Data;Data;Null;Bad,6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.548879146575928, -5.010146141052246, -5.419137001037598, -6.489574432373047, -5.47363805770874, -0.020925233140587807]",0.9792921543121338
1,"['    @Test\n    public void GetTeamsTeamIdBadChannelData() {\n        Activity activity = new Activity();\n        activity.setChannelData(""badChannelData"");\n        String channelId = activity.teamsGetTeamId();\n        Assert.assertNull(channelId);\n    }\n']",Channel;Team;bad;set;Teams;activity;activity;Activity;Data;Assert,1.979060471057892e-09;9.89530235528946e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.5464186668396, -5.00064754486084, -5.416284561157227, -6.493299961090088, -5.474630355834961, -0.021002979949116707]",0.9792160391807556
1,['    @Test\n    public void GetTeamsTeamIdNullChannelData() {\n        Activity activity = new Activity();\n        String channelId = activity.teamsGetTeamId();\n        Assert.assertNull(channelId);\n    }\n'],Activity;Null;channel;Null;Activity;Teams;Get;teams;Assert;Team,1.949956640601158e-09;1.5133991837501526e-09;8.731149137020111e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.564849853515625, -4.928612232208252, -5.406814098358154, -6.506192207336426, -5.5047149658203125, -0.021340394392609596]",0.9788857102394104
1,"['    @Test\n    public void GetTeamsGetInfo() throws JsonProcessingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.findAndRegisterModules();\n\n        Activity activity = objectMapper.readValue(\n            ActivityTest.serializedActivityFromTeamsWithoutTeamsChannelIdorTeamId, Activity.class);\n\n        TeamInfo teamsInfo = activity.teamsGetTeamInfo();\n        Assert.assertNotNull(teamsInfo);\n    }\n']",IOException;Teams;Activity;Register;find;teams;Channel;Activity;Null;read,1.5133991837501526e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.480075359344482, -5.0533976554870605, -5.418370723724365, -6.463841915130615, -5.4429030418396, -0.021097760647535324]",0.9791233539581299
1,"['    @Test\n    public void GetTeamsGetInfoBadChannelData() {\n        Activity activity = new Activity();\n        activity.setChannelData(""badChannelData"");\n        TeamInfo teamInfo = activity.teamsGetTeamInfo();\n        Assert.assertNull(teamInfo);\n    }\n']",new;Get;Get;activity;Channel;Channel;Get;Info;Bad;Activity,1.6298145055770874e-09;1.280568540096283e-09;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.551135063171387, -5.004568576812744, -5.410315990447998, -6.489804744720459, -5.464860916137695, -0.021031929180026054]",0.9791877269744873
1,"['    @Test\n    public void TeamsNotifyUser() throws JsonProcessingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.findAndRegisterModules();\n        Activity activity = objectMapper.readValue(\n            ActivityTest.serializedActivityFromTeamsWithoutNotificationTeamsChannelIdOrTeamId, Activity.class);\n\n        TeamsChannelData channelData = activity.teamsGetChannelData();\n        Assert.assertNull(channelData.getNotification());\n        activity.teamsNotifyUser();\n        Assert.assertNotNull(activity.teamsGetChannelData().getNotification());\n    }\n']",Notification;Teams;User;Value;activity;Teams;Register;Channel;find;Activity,9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.4501166343688965, -5.07103967666626, -5.431605339050293, -6.46372652053833, -5.424526691436768, -0.021135695278644562]",0.9790861010551453
1,"['    @Test\n    public void TeamsNotifyUserBadChannelData() throws JsonProcessingException, IOException {\n        Activity activity = new Activity();\n        activity.setChannelData(""badChannelData"");\n\n        TeamsChannelData channelData = activity.teamsGetChannelData();\n        Assert.assertNull(channelData);\n        activity.teamsNotifyUser();\n        Assert.assertNotNull(activity.teamsGetChannelData().getNotification());\n    }\n']",Notify;Exception;Teams;son;Processing;Assert;Notification;bad;Channel;activity,1.6880221664905548e-09;9.89530235528946e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.493654251098633, -5.057075500488281, -5.439010143280029, -6.486337184906006, -5.43856954574585, -0.020907489582896233]",0.9793094396591187
1,"['    @Test\n    public void TeamsNotifyUserAlertInMeeting() throws JsonProcessingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.findAndRegisterModules();\n        Activity activity = objectMapper.readValue(\n            ActivityTest.serializedActivityFromTeamsWithoutNotificationTeamsChannelIdOrTeamId, Activity.class);\n\n        TeamsChannelData channelData = activity.teamsGetChannelData();\n        Assert.assertNull(channelData.getNotification());\n        activity.teamsNotifyUser(true, ""externalresourceURL"");\n        Assert.assertNotNull(activity.teamsGetChannelData().getNotification());\n        Assert.assertEquals(activity.teamsGetChannelData().getNotification().getExternalResourceUrl(),\n                            ""externalresourceURL"");\n        Assert.assertTrue(activity.teamsGetChannelData().getNotification().getAlertInMeeting());\n    }\n']",Activity;externalresource;son;Alert;External;Notify;Activity;Team;URL;IOException,1.7462298274040222e-09;7.566995918750763e-10;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.442255973815918, -5.0794453620910645, -5.422408580780029, -6.427124500274658, -5.396113395690918, -0.021347161382436752]",0.9788792133331299
1,"['    @Test\n    public void TeamsNotifyUserAlertInMeetingBadChannelData() throws JsonProcessingException, IOException {\n        Activity activity = new Activity();\n        activity.setChannelData(""badChannelData"");\n\n        Assert.assertNull(activity.teamsGetChannelData());\n        activity.teamsNotifyUser(true, ""externalresourceURL"");\n        Assert.assertNotNull(activity.teamsGetChannelData().getNotification());\n        Assert.assertEquals(activity.teamsGetChannelData().getNotification().getExternalResourceUrl(),\n                            ""externalresourceURL"");\n        Assert.assertTrue(activity.teamsGetChannelData().getNotification().getAlertInMeeting());\n    }\n']",new;Notify;teams;Meeting;IOException;Alert;teams;Get;Assert;activity,1.3969838619232178e-09;9.89530235528946e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.483870983123779, -5.09173059463501, -5.456991672515869, -6.469211101531982, -5.418017387390137, -0.02076750434935093]",0.9794466495513916
1,"['    @Test\n    public void TeamsGetMeetingInfoNull() throws JsonProcessingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.findAndRegisterModules();\n        Activity activity = objectMapper.readValue(\n            ActivityTest.serializedActivityFromTeamsWithoutNotificationTeamsChannelIdOrTeamId, Activity.class);\n\n        TeamsMeetingInfo meetingInfo = activity.teamsGetMeetingInfo();\n        Assert.assertNull(meetingInfo);\n    }\n']",Channel;Get;Activity;read;Processing;Info;Activity;Activity;Exception;teams,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.494142055511475, -5.0432586669921875, -5.448294639587402, -6.494237422943115, -5.455997943878174, -0.020865928381681442]",0.9793501496315002
1,"['    @Test\n    public void TeamsGetMeetingInfo() throws JsonProcessingException, IOException {\n        Activity activity = new Activity();\n        TeamsChannelData channelData = new TeamsChannelData();\n        TeamsMeetingInfo meeting = new TeamsMeetingInfo();\n        meeting.setId(""meetingId"");\n        channelData.setMeeting(meeting);\n        activity.setChannelData(channelData);\n\n        TeamsMeetingInfo meetingInfo = activity.teamsGetMeetingInfo();\n        Assert.assertNotNull(meetingInfo);\n        Assert.assertEquals(meetingInfo.getId(), ""meetingId"");\n    }\n']",Meeting;Channel;Channel;meeting;son;meeting;Teams;Data;new;Processing,9.022187441587448e-10;6.257323548197746e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.220055416226387e-10;3.710738383233547e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.482444763183594, -5.062667369842529, -5.4442877769470215, -6.488419532775879, -5.4523701667785645, -0.02083125337958336]",0.9793842434883118
1,"['    @Test\n    public void TeamsGetMeetingInfoBadChannelData() throws JsonProcessingException, IOException {\n        Activity activity = new Activity();\n        activity.setChannelData(""badChannelData"");\n\n        TeamsMeetingInfo meetingInfo = activity.teamsGetMeetingInfo();\n        Assert.assertNull(meetingInfo);\n    }\n']",new;meeting;Activity;Get;Processing;Channel;Meeting;meeting;Meeting;bad,1.2223608791828156e-09;1.0477378964424133e-09;9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;6.111804395914078e-10;6.111804395914078e-10;5.529727786779404e-10;5.529727786779404e-10,5,5,"[-5.533782482147217, -5.024934768676758, -5.409103870391846, -6.4890031814575195, -5.466709613800049, -0.020962005481123924]",0.9792561531066895
1,"['    @Test\n    public void CreateMessageActivity() {\n        Activity activity = Activity.createMessageActivity();\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.MESSAGE);\n    }\n']",Message;Activity;Assert;Activity;Types;Message;get;Activity;Create;activity,1.1932570487260818e-09;6.984919309616089e-10;4.656612873077393e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0;-2.9103830456733704e-11;-1.1641532182693481e-10,5,5,"[-5.573046684265137, -4.970940589904785, -5.433530807495117, -6.517658710479736, -5.482106685638428, -0.020958853885531425]",0.9792591333389282
1,"['    @Test\n    public void CreateContactRelationUpdateActivity() {\n        Activity activity = Activity.createContactRelationUpdateActivity();\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.CONTACT_RELATION_UPDATE);\n    }\n']",Activity;Activity;Update;UPDATE;activity;Contact;Activity;get;CONTACT;Type,5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.568096160888672, -4.973678112030029, -5.419228553771973, -6.49945592880249, -5.470366954803467, -0.021101029589772224]",0.9791200160980225
1,"['    @Test\n    public void CreateConversationUpdateActivity() {\n        Activity activity = Activity.createConversationUpdateActivity();\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.CONVERSATION_UPDATE);\n    }\n']",Conversation;Assert;UPDATE;Conversation;Update;Equals;activity;get;Activity;Update,2.168235369026661e-09;1.1641532182693481e-09;8.585629984736443e-10;5.238689482212067e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;0.0,5,5,"[-5.5587639808654785, -4.910337448120117, -5.416977882385254, -6.498812675476074, -5.502213478088379, -0.021475981920957565]",0.9787529706954956
1,"['    @Test\n    public void CreateTypingActivity() {\n        Activity activity = Activity.createTypingActivity();\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.TYPING);\n    }\n']",Typing;ING;Typing;create;Activity;Equals;Type;Activity;activity;Create,1.7462298274040222e-09;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;8.731149137020111e-11;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.571690559387207, -4.977019309997559, -5.4300360679626465, -6.514278888702393, -5.466885566711426, -0.021007182076573372]",0.9792119264602661
1,"['    @Test\n    public void CreateHandoffActivity() {\n        Activity activity = Activity.createHandoffActivity();\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.HANDOFF);\n    }\n']",ANDOFF;Activity;Activity;Types;get;Handoff;Create;Activity;Activity;Type,8.003553375601768e-10;4.656612873077393e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.3096723705530167e-10;8.731149137020111e-11;8.731149137020111e-11;5.820766091346741e-11;0.0;0.0,5,5,"[-5.565850257873535, -4.9675374031066895, -5.432203769683838, -6.514944076538086, -5.481015682220459, -0.02102585881948471]",0.9791937470436096
1,"['    @Test\n    public void CreateEndOfConversationActivity() {\n        Activity activity = Activity.createEndOfConversationActivity();\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.END_OF_CONVERSATION);\n    }\n']",Conversation;Activity;Activity;Activity;CONVERSATION;activity;Assert;Type;OF;get,1.5133991837501526e-09;1.4842953532934189e-09;4.656612873077393e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;-5.820766091346741e-11;-5.820766091346741e-11;-5.820766091346741e-11;-8.731149137020111e-11,5,5,"[-5.566579818725586, -4.928110599517822, -5.407734394073486, -6.513031005859375, -5.485363006591797, -0.02140398882329464]",0.9788235425949097
1,"['    @Test\n    public void CreateEventActivity() {\n        Activity activity = Activity.createEventActivity();\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.EVENT);\n    }\n']",EVENT;Equals;Types;Activity;activity;activity;Activity;Type;Event;create,7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;0.0,5,5,"[-5.561818599700928, -4.973883152008057, -5.433292388916016, -6.520881175994873, -5.473733901977539, -0.021013835445046425]",0.9792054295539856
1,"['    @Test\n    public void CreateInvokeActivity() {\n        Activity activity = Activity.createInvokeActivity();\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.INVOKE);\n    }\n']",activity;Create;Activity;Type;Invoke;Invoke;Activity;Activity;Activity;INVOKE,7.8580342233181e-10;5.529727786779404e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.569253444671631, -4.9230427742004395, -5.425134658813477, -6.526958465576172, -5.487221717834473, -0.02132323943078518]",0.9789025187492371
1,"['    @Test\n    public void CreateTraceActivity() {\n        String name = ""test-activity"";\n        String valueType = ""string"";\n        String value = ""test-value"";\n        String label = ""test-label"";\n\n        Activity activity = Activity.createTraceActivity(name, valueType, value, label);\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.TRACE);\n        Assert.assertEquals(activity.getName(), name);\n        Assert.assertEquals(activity.getValueType(), valueType);\n        Assert.assertEquals(activity.getValue(), value);\n        Assert.assertEquals(activity.getLabel(), label);\n\n        Activity secondActivity = Activity.createTraceActivity(name);\n        Assert.assertEquals(secondActivity.getType(), ActivityTypes.TRACE);\n        Assert.assertEquals(secondActivity.getName(), name);\n\n        Activity thirdActivity = Activity.createTraceActivity(name, null, value, label);\n        Assert.assertEquals(thirdActivity.getType(), ActivityTypes.TRACE);\n        Assert.assertEquals(thirdActivity.getName(), name);\n\n        Assert.assertTrue(thirdActivity.isType(ActivityTypes.TRACE));\n    }\n']",Trace;string;Equals;Equals;Type;name;Activity;label;value;Activity,4.3655745685100555e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.964508555829525e-10,5,5,"[-5.4155755043029785, -5.14262580871582, -5.511327266693115, -6.482778072357178, -5.366468906402588, -0.020743684843182564]",0.9794700145721436
1,"['    @Test\n    public void CreateTraceActivityWithoutValueType() {\n        String name = ""test-activity"";\n        String value = ""test-value"";\n        String label = ""test-label"";\n\n        Activity activity = Activity.createTraceActivity(name, null, value, label);\n\n        Assert.assertEquals(activity.getType(), ActivityTypes.TRACE);\n        Assert.assertEquals(activity.getValueType(), value.getClass().getTypeName());\n        Assert.assertEquals(activity.getLabel(), label);\n    }\n']",Label;activity;Type;label;Type;activity;null;value;value;value,4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10;8.731149137020111e-11;8.731149137020111e-11,5,5,"[-5.503204345703125, -5.08513879776001, -5.464132785797119, -6.489732265472412, -5.426270961761475, -0.020627383142709732]",0.9795837998390198
1,"['    @Test\n    public void CreateReply() {\n        Activity activity = createActivity();\n\n        String text = ""test-reply"";\n        String locale = ""en-us"";\n\n        Activity reply = activity.createReply(text, locale);\n\n        Assert.assertEquals(reply.getType(), ActivityTypes.MESSAGE);\n        Assert.assertEquals(reply.getText(), text);\n        Assert.assertEquals(reply.getLocale(), locale);\n\n        activity.setFrom(null);\n        activity.setRecipient(null);\n        activity.setConversation(null);\n        Activity reply2 = activity.createReply(text);\n        Assert.assertEquals(reply2.getType(), ActivityTypes.MESSAGE);\n        Assert.assertEquals(reply2.getText(), text);\n        Assert.assertEquals(reply2.getLocale(), ""en-uS"");\n        Assert.assertTrue(reply2.getFrom() != null);\n        Assert.assertTrue(reply2.getRecipient() != null);\n        Assert.assertTrue(reply2.getConversation() != null);\n    }\n']",Activity;reply;Recipient;Assert;create;create;activity;Reply;From;Conversation,8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;3.710738383233547e-10;3.637978807091713e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.368328094482422, -5.1290507316589355, -5.44572639465332, -6.437639236450195, -5.372074127197266, -0.02137015014886856]",0.9788565635681152
1,"['    @Test\n    public void CreateReplyWithoutArguments() {\n        Activity activity = createActivity();\n\n        Activity reply = activity.createReply();\n\n        Assert.assertEquals(reply.getType(), ActivityTypes.MESSAGE);\n        Assert.assertEquals(reply.getText(), """");\n        Assert.assertEquals(reply.getLocale(), activity.getLocale());\n    }\n']",Reply;reply;Without;reply;create;Assert;Text;Activity;activity;Locale,1.6298145055770874e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.542901992797852, -4.999955177307129, -5.4288740158081055, -6.493695259094238, -5.46803092956543, -0.0209928248077631]",0.9792261123657227
1,"['    @Test\n    public void HasContentIsFalseWhenActivityTextHasNoContent() {\n        Activity activity = createActivity();\n\n        boolean result = activity.hasContent();\n\n        Assert.assertEquals(result, false);\n    }\n']",When;create;Content;Assert;Activity;Activity;False;activity;Content;false,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.578652381896973, -4.8929877281188965, -5.390882968902588, -6.486944675445557, -5.499225616455078, -0.021681195124983788]",0.9785522818565369
1,"['    @Test\n    public void HasContentIsTrueWhenActivityTextHasContent() {\n        Activity activity = createActivity();\n\n        activity.setText(""test-text"");\n\n        boolean result = activity.hasContent();\n\n        Assert.assertEquals(result, true);\n    }\n']",When;Content;Activity;activity;true;Has;activity;Text;activity;set,1.3969838619232178e-09;9.89530235528946e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.56145715713501, -4.941471576690674, -5.419370651245117, -6.4713664054870605, -5.496152877807617, -0.02129184827208519]",0.9789332151412964
1,"['    @Test\n    public void HasContentIsTrueWhenActivitySummaryContent() {\n        Activity activity = createActivity();\n\n        activity.setText(null);\n        activity.setSummary(""test-summary"");\n\n        boolean result = activity.hasContent();\n\n        Assert.assertEquals(result, true);\n    }\n']",True;Text;Summary;Activity;activity;null;summary;set;result;When,1.280568540096283e-09;7.8580342233181e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.547372817993164, -4.978738307952881, -5.4166789054870605, -6.475881576538086, -5.473438262939453, -0.02118203043937683]",0.9790407419204712
1,"['    @Test\n    public void HasContentIsTrueWhenActivityAttachmentsHaveContent() {\n        Activity activity = createActivity();\n        ArrayList<Attachment> attachments = new ArrayList<>();\n        attachments.add(CreateAttachment());\n\n        activity.setText(null);\n        activity.setSummary(null);\n        activity.setAttachments(attachments);\n\n        boolean result = activity.hasContent();\n\n        Assert.assertEquals(result, true);\n    }\n']",Activity;Summary;result;result;Has;Activity;null;Attachment;attachments;Content,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.5288825035095215, -5.044044017791748, -5.435276508331299, -6.451213359832764, -5.475660800933838, -0.020758047699928284]",0.979455828666687
1,"['    @Test\n    public void HasContentIsTrueWhenActivityChannelDataHasContent() {\n        Activity activity = createActivity();\n\n        activity.setText(null);\n        activity.setSummary(null);\n        activity.setChannelData(""test-channelData"");\n\n        boolean result = activity.hasContent();\n\n        Assert.assertEquals(result, true);\n    }\n']",Channel;Data;Has;When;activity;result;Text;Equals;Activity;null,9.313225746154785e-10;8.585629984736443e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.537278652191162, -4.989261150360107, -5.40400505065918, -6.445036888122559, -5.4754319190979, -0.021247269585728645]",0.9789767265319824
1,"['    @Test\n    public void GetMentions() {\n        ArrayList<Entity> mentions = new ArrayList<Entity>();\n\n        Entity mentionEntity = new Entity();\n        mentionEntity.setType(""mention"");\n        mentions.add(mentionEntity);\n        Entity reactionEntity = new Entity();\n        reactionEntity.setType(""reaction"");\n        mentions.add(reactionEntity);\n\n        Activity activity = createActivity();\n\n        activity.setEntities(mentions);\n\n        List<Mention> mentionsResult = activity.getMentions();\n\n        Assert.assertEquals(mentionsResult.size(), 1);\n        Assert.assertEquals(mentionsResult.get(0).getType(), ""mention"");\n    }\n']",Get;reaction;mentions;entions;Entity;Array;Entity;mention;Activity;Type,6.984919309616089e-10;4.802132025361061e-10;4.656612873077393e-10;4.511093720793724e-10;4.43833414465189e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.485538959503174, -5.081485271453857, -5.467141628265381, -6.498664379119873, -5.451244831085205, -0.020587211474776268]",0.9796233773231506
1,['    @Test\n    public void GetMentionsNull() {\n        Activity activity = createActivity();\n        activity.setEntities(null);\n        Assert.assertTrue(activity.getMentions() != null);\n    }\n'],Null;Get;entions;activity;get;null;Entities;activity;Assert;Activity,1.1641532182693481e-09;7.566995918750763e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0,5,5,"[-5.559328556060791, -4.955183982849121, -5.418848514556885, -6.5084547996521, -5.499707221984863, -0.021130910143256187]",0.9790908694267273
1,"['    @Test\n    public void CreateTraceForConversationUpdateActivity() {\n        Activity activity = createActivity();\n        activity.setType(ActivityTypes.CONVERSATION_UPDATE);\n        Activity trace = activity.createTrace(""test"");\n        Assert.assertNull(trace.getReplyToId());\n    }\n']",Create;Conversation;Reply;Activity;Types;CONVERSATION;For;create;get;create,1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;7.8580342233181e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.530972957611084, -5.018071174621582, -5.41767692565918, -6.478287696838379, -5.458921909332275, -0.021031111478805542]",0.9791886210441589
1,"['    @Test\n    public void CreateReplyForConversationUpdateActivity() {\n        Activity activity = createActivity();\n        activity.setType(ActivityTypes.CONVERSATION_UPDATE);\n        Activity reply = activity.createReply(""test"");\n        Assert.assertNull(reply.getReplyToId());\n    }\n']",Create;CONVERSATION;Activity;Activity;Null;Types;Update;Type;activity;set,9.604264050722122e-10;9.604264050722122e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-5.544848918914795, -5.018907070159912, -5.4203104972839355, -6.473806858062744, -5.464585304260254, -0.020940177142620087]",0.9792775511741638
1,"['    @Test\n    public void CreateTrace() {\n        Activity activity = createActivity();\n\n        String name = ""test-activity"";\n        String value = ""test-value"";\n        String valueType = ""string"";\n        String label = ""test-label"";\n\n        Activity trace = activity.createTrace(name, value, valueType, label);\n\n        Assert.assertEquals(trace.getType(), ActivityTypes.TRACE);\n        Assert.assertEquals(trace.getName(), name);\n        Assert.assertEquals(trace.getValue(), value);\n        Assert.assertEquals(trace.getValueType(), valueType);\n        Assert.assertEquals(trace.getLabel(), label);\n\n        Activity secondActivity = createActivity();\n        secondActivity.setRecipient(null);\n        secondActivity.setFrom(null);\n        Activity secondTrace = secondActivity.createTrace(name, value, null, label);\n        Assert.assertEquals(secondTrace.getType(), ActivityTypes.TRACE);\n        Assert.assertEquals(secondTrace.getName(), name);\n        Assert.assertEquals(secondTrace.getValue(), value);\n        Assert.assertEquals(secondTrace.getValueType(), value.getClass().getTypeName());\n        Assert.assertEquals(secondTrace.getLabel(), label);\n        Assert.assertTrue(secondTrace.getRecipient() != null);\n        Assert.assertTrue(secondTrace.getFrom() != null);\n    }\n']",Recipient;string;TRACE;create;get;second;activity;create;value;label,6.402842700481415e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1100277081131935e-10;1.8917489796876907e-10,5,5,"[-5.379016399383545, -5.138614654541016, -5.496321678161621, -6.483266353607178, -5.378815650939941, -0.02093982696533203]",0.9792779088020325
1,"['    @Test\n    public void IsFromStreamingConnection() {\n        ArrayList<String> nonStreaming = new ArrayList<>();\n        nonStreaming.add(""http://yayay.com"");\n        nonStreaming.add(""https://yayay.com"");\n        nonStreaming.add(""HTTP://yayay.com"");\n        nonStreaming.add(""HTTPS://yayay.com"");\n\n        ArrayList<String> streaming = new ArrayList<>();\n        streaming.add(""urn:botframework:WebSocket:wss://beep.com"");\n        streaming.add(""urn:botframework:WebSocket:http://beep.com"");\n        streaming.add(""URN:botframework:WebSocket:wss://beep.com"");\n        streaming.add(""URN:botframework:WebSocket:http://beep.com"");\n\n        Activity activity = createActivity();\n        activity.setServiceUrl(null);\n\n        Assert.assertFalse(activity.isFromStreamingConnection());\n\n        nonStreaming.forEach(s ->\n        {\n            activity.setServiceUrl(s);\n            Assert.assertFalse(activity.isFromStreamingConnection());\n        });\n\n        streaming.forEach(s ->\n        {\n            activity.setServiceUrl(s);\n            Assert.assertTrue(activity.isFromStreamingConnection());\n        });\n    }\n']",From;False;activity;Assert;From;Web;non;Streaming;Streaming;non,3.3527612686157227e-08;2.7939677238464355e-08;2.2351741790771484e-08;1.862645149230957e-08;1.6763806343078613e-08;1.30385160446167e-08;1.1175870895385742e-08;1.0710209608078003e-08;8.614733815193176e-09;8.381903171539307e-09,5,5,"[-5.419729232788086, -5.003733158111572, -5.355668067932129, -6.388919830322266, -5.443024158477783, -0.022111665457487106]",0.9781309962272644
1,"['    @Test\n    public void ActivityCloneTest() throws JsonProcessingException {\n        Activity activity = new Activity(ActivityTypes.MESSAGE);\n        activity.setAction(""TestAction"");\n\n        Attachment attachment = new Attachment();\n        attachment.setContentType(""testContentType"");\n        attachment.setContentUrl(""testContentUrl"");\n        attachment.setContent(""testContent"");\n        attachment.setName(""testName"");\n        attachment.setThumbnailUrl(""testThumbnailUrl"");\n        attachment.setProperties(""testProperty"", getTestNode());\n        activity.setAttachment(attachment);\n\n        activity.setCallerId(""testCallerId"");\n        activity.setChannelData(""testChannelData"");\n        activity.setCode(EndOfConversationCodes.BOT_TIMED_OUT);\n\n        ConversationAccount conversation = new ConversationAccount(""testConversation"");\n        activity.setConversation(conversation);\n\n        activity.setDeliveryMode(""testDeliveryMode"");\n\n        List<Entity> entityList = new ArrayList<Entity>();\n        Entity entity1 = new Entity();\n        entity1.setType(""testEntity"");\n        entityList.add(entity1);\n        activity.setEntities(entityList);\n\n        LocalDateTime expiration = LocalDateTime.now();\n        activity.setExpiration(expiration);\n\n        ChannelAccount fromChannel = new ChannelAccount(""fromChannel"");\n        activity.setFrom(fromChannel);\n\n        activity.setHistoryDisclosed(true);\n        activity.setId(""testId"");\n        activity.setImportance(""testImportance"");\n        activity.setInputHint(InputHints.ACCEPTING_INPUT);\n        activity.setLabel(""testLabel"");\n\n        List<String> listen = new ArrayList<String>();\n        listen.add(""listen1"");\n        listen.add(""listen2"");\n        activity.setListenFor(listen);\n\n        activity.setLocalTimeZone(""testLocalTimeZone"");\n        OffsetDateTime offsetDateTime = OffsetDateTime.now();\n        activity.setLocalTimestamp(offsetDateTime);\n        activity.setLocale(""testLocale"");\n\n        List<ChannelAccount> membersAdded = new ArrayList<ChannelAccount>();\n        ChannelAccount firstMember = new ChannelAccount(""firstMember"");\n        ChannelAccount secondMember = new ChannelAccount(""secondMember"");\n        membersAdded.add(firstMember);\n        membersAdded.add(secondMember);\n        activity.setMembersAdded(membersAdded);\n\n        List<ChannelAccount> membersRemoved = new ArrayList<ChannelAccount>();\n        ChannelAccount firstMemberRemoved = new ChannelAccount(""firstMember"");\n        ChannelAccount secondMemberRemoved = new ChannelAccount(""secondMember"");\n        membersRemoved.add(firstMemberRemoved);\n        membersRemoved.add(secondMemberRemoved);\n        activity.setMembersRemoved(membersRemoved);\n\n        List<Mention> mentions = new ArrayList<Mention>();\n        Mention firstMention = new Mention();\n        firstMention.setText(""testTest"");\n        firstMention.setMentioned(firstMember);\n        Mention secondMention = new Mention();\n        secondMention.setText(""testTest"");\n        secondMention.setMentioned(firstMember);\n        mentions.add(secondMention);\n        activity.setMentions(mentions);\n\n        activity.setName(""testName"");\n        activity.setProperties(""testProperty"", getTestNode());\n\n        List<MessageReaction> reactionsAdded = new ArrayList<MessageReaction>();\n        MessageReaction firstReaction = new MessageReaction();\n        firstReaction.setType(""testType"");\n        reactionsAdded.add(firstReaction);\n        MessageReaction secondReaction = new MessageReaction();\n        secondReaction.setType(""testType"");\n        reactionsAdded.add(secondReaction);\n        activity.setReactionsAdded(reactionsAdded);\n\n        List<MessageReaction> reactionsRemoved = new ArrayList<MessageReaction>();\n        MessageReaction firstReactionRemoved = new MessageReaction();\n        firstReactionRemoved.setType(""testType"");\n        reactionsRemoved.add(firstReactionRemoved);\n        MessageReaction secondReactionRemoved = new MessageReaction();\n        secondReactionRemoved.setType(""testType"");\n        reactionsRemoved.add(secondReactionRemoved);\n        activity.setReactionsRemoved(reactionsRemoved);\n\n        ChannelAccount recipientRemoved = new ChannelAccount();\n        recipientRemoved.setId(""testRecipient"");\n        activity.setRecipient(recipientRemoved);\n\n        ConversationReference relatesToReference = new ConversationReference();\n        relatesToReference.setActivityId(""testActivityId"");\n        activity.setRelatesTo(relatesToReference);\n\n        activity.setReplyToId(""testReplyToId"");\n        activity.setServiceUrl(""testServiceUrl"");\n        activity.setText(""testText"");\n        activity.setTextFormat(TextFormatTypes.MARKDOWN);\n\n        List<TextHighlight> textHighlights = new ArrayList<TextHighlight>();\n        TextHighlight firstTextHighlight = new TextHighlight();\n        firstTextHighlight.setText(""testText"");\n        textHighlights.add(firstTextHighlight);\n        TextHighlight secondTextHighlight = new TextHighlight();\n        secondTextHighlight.setText(""testText"");\n        textHighlights.add(secondTextHighlight);\n        activity.setTextHighlights(textHighlights);\n\n        OffsetDateTime timestamp = OffsetDateTime.now();\n        activity.setTimestamp(timestamp);\n\n        activity.setTopicName(""testTopicName"");\n        activity.setType(""testType"");\n        activity.setValue(""testValue"");\n        activity.setValueType(""testValueType"");\n\n        Activity clonedActivity = Activity.clone(activity);\n\n        Assert.assertEquals(activity.getAction(), clonedActivity.getAction());\n        Assert.assertEquals(activity.getCallerId(), clonedActivity.getCallerId());\n        Assert.assertEquals(activity.getChannelData(), clonedActivity.getChannelData());\n        Assert.assertEquals(activity.getDeliveryMode(), clonedActivity.getDeliveryMode());\n        Assert.assertEquals(activity.getId(), clonedActivity.getId());\n        Assert.assertEquals(activity.getImportance(), clonedActivity.getImportance());\n        Assert.assertEquals(activity.getLabel(), clonedActivity.getLabel());\n        Assert.assertEquals(activity.getLocalTimezone(), clonedActivity.getLocalTimezone());\n        Assert.assertEquals(activity.getLocale(), clonedActivity.getLocale());\n        Assert.assertEquals(activity.getName(), clonedActivity.getName());\n        Assert.assertEquals(activity.getReplyToId(), clonedActivity.getReplyToId());\n        Assert.assertEquals(activity.getServiceUrl(), clonedActivity.getServiceUrl());\n        Assert.assertEquals(activity.getSpeak(), clonedActivity.getSpeak());\n        Assert.assertEquals(activity.getSummary(), clonedActivity.getSummary());\n        Assert.assertEquals(activity.getText(), clonedActivity.getText());\n        Assert.assertEquals(activity.getTopicName(), clonedActivity.getTopicName());\n        Assert.assertEquals(activity.getType(), clonedActivity.getType());\n        Assert.assertEquals(activity.getValue(), clonedActivity.getValue());\n        Assert.assertEquals(activity.getValueType(), clonedActivity.getValueType());\n        Assert.assertEquals(activity.getAttachmentLayout(), clonedActivity.getAttachmentLayout());\n        Assert.assertEquals(activity.getAttachments().get(0).getName(),\n                            clonedActivity.getAttachments().get(0).getName());\n        Assert.assertEquals(activity.getChannelData(ChannelAccount.class).getId(),\n                            clonedActivity.getChannelData(ChannelAccount.class).getId());\n        Assert.assertEquals(activity.getCode(), clonedActivity.getCode());\n        Assert.assertEquals(activity.getConversation().getName(), clonedActivity.getConversation().getName());\n        Assert.assertEquals(activity.getConversationReference().getChannelId(),\n                            clonedActivity.getConversationReference().getChannelId());\n        Assert.assertEquals(activity.getEntities().get(0).getType(), clonedActivity.getEntities().get(0).getType());\n        Assert.assertEquals(activity.getExpiration(), clonedActivity.getExpiration());\n        Assert.assertEquals(activity.getFrom().getId(), clonedActivity.getFrom().getId());\n        Assert.assertEquals(activity.getInputHint(), clonedActivity.getInputHint());\n        Assert.assertEquals(activity.getListenFor(), clonedActivity.getListenFor());\n        Assert.assertEquals(activity.getLocalTimestamp(), clonedActivity.getLocalTimestamp());\n        Assert.assertEquals(activity.getMembersAdded().get(0).getId(), clonedActivity.getMembersAdded().get(0).getId());\n        Assert.assertEquals(activity.getMembersRemoved().get(0).getId(),\n                            clonedActivity.getMembersRemoved().get(0).getId());\n        Assert.assertEquals(activity.getMentions().get(0).getText(), clonedActivity.getMentions().get(0).getText());\n        Assert.assertEquals(activity.getProperties(), clonedActivity.getProperties());\n        Assert.assertEquals(activity.getReactionsAdded().get(0).getType(),\n                            clonedActivity.getReactionsAdded().get(0).getType());\n        Assert.assertEquals(activity.getReactionsRemoved().get(0).getType(),\n                            clonedActivity.getReactionsRemoved().get(0).getType());\n        Assert.assertEquals(activity.getRecipient().getId(), clonedActivity.getRecipient().getId());\n        Assert.assertEquals(activity.getRelatesTo().getActivityId(), clonedActivity.getRelatesTo().getActivityId());\n        // add activity.getReplyConversationReference(reply)\n        Assert.assertEquals(activity.getSuggestedActions(), clonedActivity.getSuggestedActions());\n        Assert.assertEquals(activity.getTextFormat(), clonedActivity.getTextFormat());\n        Assert.assertEquals(activity.getTextHighlights(), clonedActivity.getTextHighlights());\n        Assert.assertEquals(activity.getTimestamp(), clonedActivity.getTimestamp());\n    }\n']",OT;son;Code;Channel;Attachment;set;Caller;expiration;OUT;Activity,3.725290298461914e-09;1.862645149230957e-09;1.1641532182693481e-09;1.0186340659856796e-09;1.0186340659856796e-09;9.022187441587448e-10;8.36735125631094e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.428247451782227, -5.079238414764404, -5.417703628540039, -6.46232271194458, -5.441399574279785, -0.02116977609694004]",0.9790526032447815
1,['    @Test\n    public void EnsureCloneAddsIdIfMissing() {\n        Activity testActivity = new Activity(ActivityTypes.COMMAND);\n        Assert.assertTrue(testActivity.getId() == null);\n        Activity clonedActivity = Activity.clone(testActivity);\n        Assert.assertTrue(clonedActivity.getId() != null);\n    }\n'],Activity;Missing;Activity;Activity;Assert;COM;clone;Types;Activity;Activity,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.4990363121032715, -5.072406768798828, -5.436890602111816, -6.452581405639648, -5.41810417175293, -0.020940760150551796]",0.9792769551277161
1,['    @Test\n    public void TryGetChannelData() {\n        Activity activity = createActivity();\n        ResultPair<TeamsChannelData> channelData = activity.tryGetChannelData(\n            TeamsChannelData.class\n        );\n\n        activity.setChannelData(new TeamsChannelData());\n        channelData = activity.tryGetChannelData(\n            TeamsChannelData.class\n        );\n        Assert.assertTrue(channelData.getLeft());\n\n        activity.setChannelData(null);\n        Assert.assertNull(activity.teamsGetChannelData());\n    }\n'],Result;Teams;Left;Teams;new;Teams;Data;Channel;activity;Assert,9.313225746154785e-10;9.022187441587448e-10;7.566995918750763e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.477903842926025, -5.059254169464111, -5.452540874481201, -6.464272499084473, -5.437364101409912, -0.020940527319908142]",0.9792771935462952
1,"['    @Test\n    public void TryGetChannelDataBadChannelData() {\n        Activity activity = createActivity();\n        activity.setChannelData(""badChannelData"");\n        ResultPair<TeamsChannelData> channelData = activity.tryGetChannelData(\n            TeamsChannelData.class\n        );\n        Assert.assertFalse(channelData.getLeft());\n        Assert.assertNull(channelData.getRight());\n    }\n']",Null;Teams;channel;Channel;Activity;Data;Get;Data;create;Data,8.149072527885437e-10;7.712515071034431e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.509101867675781, -5.031916618347168, -5.401667594909668, -6.450356960296631, -5.448555946350098, -0.021190432831645012]",0.9790323972702026
1,"['    @Test\n    public void RemoveRecipientMention() {\n        Activity activity = createActivity();\n        activity.setText(""<at>firstName</at> lastName\\n"");\n        String expectedStrippedName = ""lastName"";\n\n        List<Mention> mentionList = new ArrayList<Mention>();\n        Mention mention = new Mention();\n        ChannelAccount channelAccount = new ChannelAccount();\n        channelAccount.setId(activity.getRecipient().getId());\n        channelAccount.setName(""firstName"");\n        mention.setMentioned(channelAccount);\n        mentionList.add(mention);\n        activity.setMentions(mentionList);\n\n        String strippedActivityText = activity.removeRecipientMention();\n        Assert.assertEquals(strippedActivityText, expectedStrippedName);\n    }\n']",Recipient;Equals;Name;channel;Recipient;last;Activity;new;Name;Account,2.2118911147117615e-09;6.257323548197746e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.546585164964199e-10;2.3283064365386963e-10,5,5,"[-5.49482536315918, -5.082650661468506, -5.44903039932251, -6.481118202209473, -5.4601521492004395, -0.020607881247997284]",0.979603111743927
1,"['    @Test\n    public void RemoveRecipientMentionImmutable() {\n        Activity activity = createActivity();\n        activity.setText(""<at>firstName</at> lastName\\n"");\n        String expectedStrippedName = ""lastName"";\n\n        List<Mention> mentionList = new ArrayList<Mention>();\n        Mention mention = new Mention();\n        ChannelAccount channelAccount = new ChannelAccount();\n        channelAccount.setId(activity.getRecipient().getId());\n        channelAccount.setName(""firstName"");\n        mention.setMentioned(channelAccount);\n        mentionList.add(mention);\n        activity.setMentions(mentionList);\n\n        String strippedActivityText = Activity.removeRecipientMentionImmutable(activity);\n        Assert.assertEquals(strippedActivityText, expectedStrippedName);\n    }\n']",Recipient;Name;Text;stripped;ention;mention;new;add;Channel;first,1.1641532182693481e-09;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.495974540710449, -5.088080406188965, -5.447281837463379, -6.470217227935791, -5.45308780670166, -0.020624347031116486]",0.9795870184898376
1,"['    @Test\n    public void RemoveRecipientMentionNoRecipient() {\n        Activity activity = createActivity();\n        activity.setText(""<at>firstName</at> lastName\\n"");\n        String expectedStrippedName = ""<at>firstName</at> lastName\\n"";\n\n        List<Mention> mentionList = new ArrayList<Mention>();\n        Mention mention = new Mention();\n        ChannelAccount channelAccount = new ChannelAccount();\n        channelAccount.setId(activity.getRecipient().getId());\n        channelAccount.setName(""firstName"");\n        mention.setMentioned(channelAccount);\n        mentionList.add(mention);\n        activity.setMentions(mentionList);\n        activity.setRecipient(null);\n\n        String strippedActivityText = activity.removeRecipientMention();\n        Assert.assertEquals(strippedActivityText, expectedStrippedName);\n    }\n']",last;at;Text;Name;Recipient;expected;set;Name;Remove;Equals,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.497191429138184, -5.088934898376465, -5.436147212982178, -6.462255477905273, -5.45026159286499, -0.02068810537457466]",0.9795244336128235
1,"['    @Test\n    public void RemoveRecipientMentionImmutableNoRecipient() {\n        Activity activity = createActivity();\n        activity.setText(""<at>firstName</at> lastName\\n"");\n        String expectedStrippedName = ""<at>firstName</at> lastName\\n"";\n\n        List<Mention> mentionList = new ArrayList<Mention>();\n        Mention mention = new Mention();\n        ChannelAccount channelAccount = new ChannelAccount();\n        channelAccount.setId(activity.getRecipient().getId());\n        channelAccount.setName(""firstName"");\n        mention.setMentioned(channelAccount);\n        mentionList.add(mention);\n        activity.setMentions(mentionList);\n        activity.setRecipient(null);\n\n        String strippedActivityText = Activity.removeRecipientMentionImmutable(activity);\n        Assert.assertEquals(strippedActivityText, expectedStrippedName);\n    }\n']",Remove;Text;Name;last;last;Equals;Stripped;Text;mention;new,8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.500949859619141, -5.084774971008301, -5.426728248596191, -6.457923889160156, -5.454587459564209, -0.020728623494505882]",0.9794846177101135
1,"['    @Test\n    public void RemoveRecipientMentionText() {\n        Activity activity = createActivity();\n        activity.setText(""<at>firstName</at> lastName\\n"");\n        String expectedStrippedName = ""<at>firstName</at>"";\n\n        List<Mention> mentionList = new ArrayList<Mention>();\n        Mention mention = new Mention();\n        mention.setText(""lastName"");\n        ChannelAccount channelAccount = new ChannelAccount();\n        channelAccount.setId(activity.getRecipient().getId());\n        channelAccount.setName(""firstName"");\n        mention.setMentioned(channelAccount);\n        mentionList.add(mention);\n        activity.setMentions(mentionList);\n\n        String strippedActivityText = activity.removeRecipientMention();\n        Assert.assertEquals(strippedActivityText, expectedStrippedName);\n    }\n']",Recipient;Text;stripped;Text;at;last;Recipient;add;expected;Name,1.1641532182693481e-09;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.494549751281738, -5.095598220825195, -5.441172122955322, -6.472568035125732, -5.45176362991333, -0.020612085238099098]",0.979598879814148
1,"['    @Test\n    public void RemoveRecipientMentionTextNoId() {\n        Activity activity = createActivity();\n        activity.setText(""<at>firstName</at> lastName\\n"");\n        String expectedStrippedName = ""<at>firstName</at> lastName\\n"";\n\n        List<Mention> mentionList = new ArrayList<Mention>();\n        Mention mention = new Mention();\n        mention.setText(""lastName"");\n        ChannelAccount channelAccount = new ChannelAccount();\n        channelAccount.setId(activity.getRecipient().getId());\n        channelAccount.setName(""firstName"");\n        mention.setMentioned(channelAccount);\n        mentionList.add(mention);\n        activity.setMentions(mentionList);\n\n        String strippedActivityText = Activity.removeMentionTextImmutable(activity, null);\n        Assert.assertEquals(strippedActivityText, expectedStrippedName);\n    }\n']",first;first;Name;at;Name;Name;Name;last;Text;at,3.958120942115784e-09;2.6775524020195007e-09;1.862645149230957e-09;1.6880221664905548e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.512068271636963, -5.062626838684082, -5.420507907867432, -6.469047546386719, -5.469761371612549, -0.020768672227859497]",0.9794455170631409
1,"['    @Test\n    public void RemoveRecipientMentionTextNoText() {\n        Activity activity = createActivity();\n        activity.setText("""");\n        String expectedStrippedName = """";\n\n        List<Mention> mentionList = new ArrayList<Mention>();\n        Mention mention = new Mention();\n        mention.setText(""lastName"");\n        ChannelAccount channelAccount = new ChannelAccount();\n        channelAccount.setId(activity.getRecipient().getId());\n        channelAccount.setName(""firstName"");\n        mention.setMentioned(channelAccount);\n        mentionList.add(mention);\n        activity.setMentions(mentionList);\n\n        String strippedActivityText = Activity.removeMentionTextImmutable(activity, ""lastName"");\n        Assert.assertEquals(strippedActivityText, expectedStrippedName);\n    }\n']",Recipient;first;add;Array;Stripped;Stripped;entions;List;mention;set,2.473825588822365e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.384208634495735e-10;4.802132025361061e-10;3.92901711165905e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.479770183563232, -5.075096130371094, -5.450663089752197, -6.469229698181152, -5.463833808898926, -0.020714960992336273]",0.9794981479644775
1,['    @Test\n    public void IsActivity() {\n        class MyActivity extends Activity {\n            @Override\n            public boolean isActivity(String activityType) {\n                return super.isActivity(activityType);\n            }\n'],My;class;Activity;Activity;Type;Type;activity;activity;super;Activity,2.6775524020195007e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.4551915228366852e-10;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.523671627044678, -5.000733852386475, -5.346968650817871, -6.42155122756958, -5.45548152923584, -0.02161773294210434]",0.9786142706871033
1,['    @Test\n    public void IsActivityNoType() {\n        class MyActivity extends Activity {\n            @Override\n            public boolean isActivity(String activityType) {\n                return super.isActivity(activityType);\n            }\n'],Activity;extends;Type;No;Type;Activity;activity;My;Activity;Activity,6.984919309616089e-10;6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.518972873687744, -5.007301330566406, -5.347531318664551, -6.424465179443359, -5.451857089996338, -0.021600117906928062]",0.9786314964294434
1,['    @Test\n    public void IsActivityExtendedType() {\n        class MyActivity extends Activity {\n            @Override\n            public boolean isActivity(String activityType) {\n                return super.isActivity(activityType);\n            }\n'],Activity;extends;My;Type;boolean;return;Activity;Type;activity;super,1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;3.4924596548080444e-10;2.3283064365386963e-10;0.0;0.0;-1.7462298274040222e-10;-1.7462298274040222e-10,5,5,"[-5.529104709625244, -5.01046085357666, -5.343721866607666, -6.420426845550537, -5.445916652679443, -0.02158856764435768]",0.9786427021026611
1,['    @Test\n    public void IsActivityExtendedTypeNoMatch() {\n        class MyActivity extends Activity {\n            @Override\n            public boolean isActivity(String activityType) {\n                return super.isActivity(activityType);\n            }\n'],extends;Match;My;activity;activity;Activity;Type;super;return;Extended,1.6880221664905548e-09;1.6298145055770874e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.566751480102539, -4.96277379989624, -5.372467517852783, -6.45988655090332, -5.491471290588379, -0.02137260138988495]",0.9788541793823242
1,['    @Test\n    public void IsActivityNoMatch() {\n        class MyActivity extends Activity {\n            @Override\n            public boolean isActivity(String activityType) {\n                return super.isActivity(activityType);\n            }\n'],Activity;class;boolean;activity;extends;Activity;Activity;return;Type;Activity,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;0.0;-5.820766091346741e-11;-2.0372681319713593e-10,5,5,"[-5.516392230987549, -5.007351875305176, -5.3359293937683105, -6.420055389404297, -5.445005893707275, -0.021704524755477905]",0.9785292148590088
1,['    @Test\n    public void IsActivityShorterTypeName() {\n        class MyActivity extends Activity {\n            @Override\n            public boolean isActivity(String activityType) {\n                return super.isActivity(activityType);\n            }\n'],Activity;Shorter;Type;activity;class;Activity;activity;Activity;boolean;super,1.0477378964424133e-09;1.0477378964424133e-09;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.557641506195068, -4.962464809417725, -5.377753257751465, -6.4647417068481445, -5.4919328689575195, -0.0213758684694767]",0.9788509607315063
1,"['    @Test\n    public void TestPropertySetterGetter() {\n        MediaCard mediaCard = new MediaCard();\n        mediaCard.setAspect(""aspect"");\n        mediaCard.setAutoloop(true);\n        mediaCard.setAutostart(true);\n\n        List<CardAction> buttons = new ArrayList<CardAction>();\n        CardAction cardAction1 = new CardAction(ActionTypes.CALL, ""test1"");\n        CardAction cardAction2 = new CardAction(ActionTypes.DOWNLOAD_FILE, ""test2"");\n        buttons.add(cardAction1);\n        buttons.add(cardAction2);\n        mediaCard.setButtons(buttons);\n\n        mediaCard.setDuration(""duration"");\n\n        ThumbnailUrl thumbnailUrl = new ThumbnailUrl();\n        thumbnailUrl.setAlt(""alt"");\n        thumbnailUrl.setUrl(""testUrl"");\n        mediaCard.setImage(thumbnailUrl);\n\n        mediaCard.setShareable(true);\n        mediaCard.setSubtitle(""subTitle"");\n        mediaCard.setText(""text"");\n        mediaCard.setTitle(""title"");\n        mediaCard.setValue(""value"");\n\n        Assert.assertEquals(mediaCard.getAspect(), ""aspect"");\n        Assert.assertEquals(mediaCard.getAutoloop(), true);\n        Assert.assertEquals(mediaCard.getAutostart(), true);\n        Assert.assertEquals(mediaCard.getButtons().size(), 2);\n        Assert.assertEquals(mediaCard.getButtons().get(0).getType(), ActionTypes.CALL);\n        Assert.assertEquals(mediaCard.getButtons().get(0).getTitle(), ""test1"");\n        Assert.assertEquals(mediaCard.getButtons().get(1).getType(), ActionTypes.DOWNLOAD_FILE);\n        Assert.assertEquals(mediaCard.getButtons().get(1).getTitle(), ""test2"");\n        Assert.assertEquals(mediaCard.getDuration(), ""duration"");\n        Assert.assertEquals(mediaCard.getImage().getUrl(), ""testUrl"");\n        Assert.assertEquals(mediaCard.getImage().getAlt(), ""alt"");\n        Assert.assertEquals(mediaCard.getShareable(), true);\n        Assert.assertEquals(mediaCard.getSubtitle(), ""subTitle"");\n        Assert.assertEquals(mediaCard.getText(), ""text"");\n        Assert.assertEquals(mediaCard.getTitle(), ""title"");\n        Assert.assertEquals(mediaCard.getValue(), ""value"");\n    }\n']",aspect;new;Types;Card;card;Action;List;Card;add;Action,1.6298145055770874e-09;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.402105331420898, -5.102619171142578, -5.421180725097656, -6.438343524932861, -5.398707866668701, -0.021357780322432518]",0.9788686633110046
1,"['    @Test\n    public void testToAttachment() {\n        Attachment attachment = getCard().toAttachment();\n        Assert.assertNotNull(attachment);\n        Assert.assertEquals(""application/vnd.microsoft.card.receipt"", attachment.getContentType());\n    }\n']",nd;Type;card;to;get;Content;attachment;Attachment;Assert;Equals,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10,5,5,"[-5.477550983428955, -5.130355358123779, -5.4052863121032715, -6.453384876251221, -5.377919673919678, -0.020998310297727585]",0.9792206287384033
1,"['    @Test\n    public void testToAttachment() {\n        Attachment attachment = getCard().toAttachment();\n        Assert.assertNotNull(attachment);\n        Assert.assertEquals(""application/vnd.microsoft.card.signin"", attachment.getContentType());\n    }\n']",Null;card;get;Attachment;attachment;attachment;Equals;Assert;signin;attachment,1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.477108001708984, -5.130334854125977, -5.402632713317871, -6.451678276062012, -5.376071929931641, -0.02102387510240078]",0.9791954755783081
1,['    @Test\n    public void TestMessageActionPayloadConstructor(){\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        Assert.assertNotNull(messageActionsPayload);\n    }\n'],Payload;Payload;Constructor;ctions;Payload;Null;Payload;Payload;ctions;ctions,3.6088749766349792e-09;3.259629011154175e-09;3.0850060284137726e-09;2.561137080192566e-09;2.0954757928848267e-09;1.862645149230957e-09;1.076841726899147e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.576844692230225, -4.995226860046387, -5.363956451416016, -6.458654880523682, -5.474383354187012, -0.021220194175839424]",0.9790032505989075
1,"['    @Test\n    public void TestGetId(){\n        String id = ""testId"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setId(id);\n        String result = messageActionsPayload.getId();\n\n        Assert.assertEquals(result, id);\n    }\n']",Payload;id;result;id;Get;ctions;set;Message;id;Equals,8.294591680169106e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.530470848083496, -5.026883125305176, -5.423842430114746, -6.484740257263184, -5.45490837097168, -0.02095336839556694]",0.9792646169662476
1,"['    @Test\n    public void TestGetReplyToId(){\n        String replyToId = ""testReplyToId"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setReplyToId(replyToId);\n        String result = messageActionsPayload.getReplyToId();\n\n        Assert.assertEquals(result, replyToId);\n    }\n']",Payload;Equals;Payload;reply;set;result;message;ctions;Reply;Reply,1.862645149230957e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.534029960632324, -5.035713195800781, -5.412695407867432, -6.470082759857178, -5.452329158782959, -0.02096492424607277]",0.9792534112930298
1,"['    @Test\n    public void TestGetMessageType(){\n        String messageType = ""testMessageType"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setMessageType(messageType);\n        String result = messageActionsPayload.getMessageType();\n\n        Assert.assertEquals(result, messageType);\n    }\n']",Type;message;Type;set;result;Type;Type;Type;ctions;Equals,6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.519949436187744, -5.0523881912231445, -5.439599990844727, -6.483057498931885, -5.457638263702393, -0.020747888833284378]",0.9794659614562988
1,"['    @Test\n    public void TestGetCreatedDateTime(){\n        String createdDateTime = ""2000-01-01"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setCreatedDateTime(createdDateTime);\n        String result = messageActionsPayload.getCreatedDateTime();\n\n        Assert.assertEquals(result, createdDateTime);\n    }\n']",Assert;ctions;Get;Created;result;Payload;Created;Time;Date;message,9.89530235528946e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.56210470199585, -4.999678611755371, -5.335629940032959, -6.454861164093018, -5.500173568725586, -0.021281462162733078]",0.978943407535553
1,"['    @Test\n    public void TestGetLastModifiedDateTime(){\n        String lastModifiedDateTime = ""2000-01-01"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setLastModifiedDateTime(lastModifiedDateTime);\n        String result = messageActionsPayload.getLastModifiedDateTime();\n\n        Assert.assertEquals(result, lastModifiedDateTime);\n    }\n']",Assert;Message;Modified;Modified;message;message;ctions;Date;Date;Last,1.0477378964424133e-09;6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5742716789245605, -4.999124526977539, -5.321933269500732, -6.446221351623535, -5.505995750427246, -0.021295350044965744]",0.9789298176765442
1,"['    @Test\n    public void TestGetDeleted(){\n        Boolean deleted = false;\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setDeleted(deleted);\n        Boolean result = messageActionsPayload.getDeleted();\n\n        Assert.assertEquals(result, deleted);\n    }\n']",Deleted;Payload;Deleted;deleted;Equals;ctions;Message;Message;Assert;Payload,1.1059455573558807e-09;6.402842700481415e-10;5.966285243630409e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.5434746742248535, -5.0264081954956055, -5.403337001800537, -6.459391117095947, -5.457373142242432, -0.021026909351348877]",0.9791927337646484
1,"['    @Test\n    public void TestGetSubject(){\n        String subject = ""testSubject"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setSubject(subject);\n        String result = messageActionsPayload.getSubject();\n\n        Assert.assertEquals(result, subject);\n    }\n']",Payload;Payload;subject;message;subject;Get;Equals;set;ctions;message,8.149072527885437e-10;7.8580342233181e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;7.275957614183426e-11;7.275957614183426e-11,5,5,"[-5.5409932136535645, -5.014998912811279, -5.427927494049072, -6.48489236831665, -5.456757545471191, -0.02096434123814106]",0.979253888130188
1,"['    @Test\n    public void TestGetSummary(){\n        String summary = ""testSummary"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setSummary(summary);\n        String result = messageActionsPayload.getSummary();\n\n        Assert.assertEquals(result, summary);\n    }\n']",Get;summary;Payload;Summary;Equals;ctions;Message;Summary;Assert;get,1.1059455573558807e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5359954833984375, -5.010829448699951, -5.417203903198242, -6.482599258422852, -5.463318347930908, -0.02103624865412712]",0.9791834950447083
1,"['    @Test\n    public void TestGetImportance(){\n        String importance = ""normal"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setImportance(importance);\n        String result = messageActionsPayload.getImportance();\n\n        Assert.assertEquals(result, importance);\n    }\n']",importance;Message;Importance;importance;Equals;Payload;new;importance;ctions;result,1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;8.440110832452774e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;8.731149137020111e-11,5,5,"[-5.541504859924316, -5.013481616973877, -5.404116630554199, -6.460968017578125, -5.468978404998779, -0.021065546199679375]",0.9791547656059265
1,"['    @Test\n    public void TestGetLinkToMessage(){\n        String linkToMessage = ""https://teams.microsoft.com/l/message/testing-id"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setLinkToMessage(linkToMessage);\n        String result = messageActionsPayload.getLinkToMessage();\n\n        Assert.assertEquals(result, linkToMessage);\n    }\n']",testing;Message;message;set;message;new;https;Link;result;Payload,1.3969838619232178e-09;5.820766091346741e-10;5.675246939063072e-10;5.602487362921238e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.521600723266602, -5.036899089813232, -5.430179119110107, -6.487675189971924, -5.448994159698486, -0.020915543660521507]",0.9793016910552979
1,"['    @Test\n    public void TestGetLocale(){\n        String locale = ""US"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setLocale(locale);\n        String result = messageActionsPayload.getLocale();\n\n        Assert.assertEquals(result, locale);\n    }\n']",Locale;locale;locale;ctions;set;new;Payload;Equals;get;Locale,9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.509367942810059, -5.048801422119141, -5.418092727661133, -6.46649694442749, -5.448141098022461, -0.020978815853595734]",0.9792397022247314
1,"['    @Test\n    public void TestGetFrom(){\n        MessageActionsPayloadFrom from = new MessageActionsPayloadFrom();\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setFrom(from);\n        MessageActionsPayloadFrom result = messageActionsPayload.getFrom();\n\n        Assert.assertEquals(result, from);\n    }\n']",Message;ctions;Get;From;Payload;Equals;result;From;from;Payload,6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.524855613708496, -5.082276344299316, -5.444504737854004, -6.495541572570801, -5.434293270111084, -0.020597372204065323]",0.9796133041381836
1,"['    @Test\n    public void TestGetBody(){\n        MessageActionsPayloadBody body = new MessageActionsPayloadBody();\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setBody(body);\n        MessageActionsPayloadBody result = messageActionsPayload.getBody();\n\n        Assert.assertEquals(result, body);\n    }\n']",Body;Equals;Body;Body;Payload;Payload;set;message;message;new,7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.530284404754639, -5.0388875007629395, -5.429108619689941, -6.496890544891357, -5.448848247528076, -0.020858222618699074]",0.9793577790260315
1,"['    @Test\n    public void TestGetAttachmentLayout(){\n        String attachmentLayout = ""testAttachmentLayout"";\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setAttachmentLayout(attachmentLayout);\n        String result = messageActionsPayload.getAttachmentLayout();\n\n        Assert.assertEquals(result, attachmentLayout);\n    }\n']",Layout;Get;Layout;Attachment;Layout;Layout;Layout;Payload;ctions;Assert,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.525958061218262, -5.0671820640563965, -5.4474005699157715, -6.488394260406494, -5.453760623931885, -0.02060169354081154]",0.9796091914176941
1,"['    @Test\n    public void TestGetAttachments(){\n        List<MessageActionsPayloadAttachment> attachments = new ArrayList<MessageActionsPayloadAttachment>();\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setAttachments(attachments);\n        List<MessageActionsPayloadAttachment> result = messageActionsPayload.getAttachments();\n\n        Assert.assertEquals(result, attachments);\n    }\n']",Get;Attachments;Equals;Attachments;attachments;Payload;Attachment;ctions;List;new,9.313225746154785e-10;7.275957614183426e-10;6.621121428906918e-10;6.402842700481415e-10;6.111804395914078e-10;5.675246939063072e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;3.346940502524376e-10,5,5,"[-5.495290756225586, -5.040073871612549, -5.322873592376709, -6.40358829498291, -5.397027015686035, -0.021881233900785446]",0.9783563017845154
1,"['    @Test\n    public void TestGetMentions(){\n        List<MessageActionsPayloadMention> mentions = new ArrayList<MessageActionsPayloadMention>();\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setMentions(mentions);\n        List<MessageActionsPayloadMention> result = messageActionsPayload.getMentions();\n\n        Assert.assertEquals(result, mentions);\n    }\n']",Assert;mentions;Message;ention;result;message;List;ctions;Payload;Payload,1.9208528101444244e-09;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.837623469531536e-10,5,5,"[-5.531646251678467, -5.042705535888672, -5.396349906921387, -6.468040466308594, -5.446468830108643, -0.021032162010669708]",0.9791873693466187
1,"['    @Test\n    public void TestGetReactions(){\n        List<MessageActionsPayloadReaction> reactions = new ArrayList<MessageActionsPayloadReaction>();\n        MessageActionsPayload messageActionsPayload = new MessageActionsPayload();\n        messageActionsPayload.setReactions(reactions);\n        List<MessageActionsPayloadReaction> result = messageActionsPayload.getReactions();\n\n        Assert.assertEquals(result, reactions);\n    }\n']",Reaction;result;new;Array;List;get;Payload;reactions;Message;List,7.275957614183426e-10;6.111804395914078e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.5186662673950195, -5.02361536026001, -5.336916923522949, -6.411631107330322, -5.4156060218811035, -0.021725870668888092]",0.9785084128379822
1,"['    @Test\n    public void testToAttachment() {\n        Attachment attachment = getCard().toAttachment();\n        Assert.assertNotNull(attachment);\n        Assert.assertEquals(""application/vnd.microsoft.card.oauth"", attachment.getContentType());\n    }\n']",oauth;Equals;card;to;nd;Attachment;Attachment;get;application;attachment,8.381903171539307e-09;4.6566128730773926e-09;4.423782229423523e-09;4.190951585769653e-09;3.026798367500305e-09;2.7939677238464355e-09;2.561137080192566e-09;1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.474061489105225, -5.1310038566589355, -5.401123046875, -6.4482622146606445, -5.37167501449585, -0.021066129207611084]",0.979154109954834
1,"['    @Test\n    public void EntityTests_GeoCoordinatesSerializationDeserializationTest() {\n        GeoCoordinates geoCoordinates = new GeoCoordinates();\n        geoCoordinates.setLatitude(22.00);\n        geoCoordinates.setLongitude(23.00);\n\n        Assert.assertEquals(""GeoCoordinates"", geoCoordinates.getType());\n\n        Entity deserializedEntity = new Entity().setAs(geoCoordinates);\n        Assert.assertEquals(deserializedEntity.getType(), geoCoordinates.getType());\n\n        GeoCoordinates geoDeserialized = deserializedEntity.getAs(GeoCoordinates.class);\n        Assert.assertEquals(geoCoordinates.getType(), geoDeserialized.getType());\n        Assert.assertEquals(\n            geoCoordinates.getLatitude(), geoDeserialized.getLatitude(), Double.MAX_VALUE\n        );\n        Assert.assertEquals(\n            geoCoordinates.getLongitude(), geoDeserialized.getLongitude(), Double.MAX_VALUE\n        );\n    }\n']",Entity;Longitude;Latitude;Latitude;Coordinates;Deserialization;VALUE;ests;deserialized;geo,4.889443516731262e-09;2.444721758365631e-09;1.979060471057892e-09;1.862645149230957e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1350493878126144e-09;9.313225746154785e-10;7.566995918750763e-10;4.94765117764473e-10,5,5,"[-5.464254856109619, -5.066250801086426, -5.408878803253174, -6.43853235244751, -5.4409403800964355, -0.02117491140961647]",0.9790477156639099
1,"['    @Test\n    public void EntityTests_MentionSerializationDeserializationTest() {\n        Mention mentionEntity = new Mention();\n        mentionEntity.setText(""TESTTEST"");\n\n        Assert.assertEquals(""mention"", mentionEntity.getType());\n\n        Entity deserializedEntity = new Entity().setAs(mentionEntity);\n        Assert.assertEquals(deserializedEntity.getType(), mentionEntity.getType());\n        Assert.assertEquals(\n            deserializedEntity.getProperties().get(""text"").textValue(), mentionEntity.getText()\n        );\n\n        Mention mentionDeserialized = deserializedEntity.getAs(Mention.class);\n        Assert.assertEquals(mentionEntity.getType(), mentionDeserialized.getType());\n        Assert.assertEquals(\n            deserializedEntity.getProperties().get(""text"").textValue(), mentionEntity.getText()\n        );\n    }\n']",ention;deserialized;new;ention;Properties;Text;deserialized;deserialized;Text;mention,1.862645149230957e-09;1.3387762010097504e-09;1.1932570487260818e-09;1.1641532182693481e-09;9.89530235528946e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.406831741333008, -5.107604026794434, -5.439573287963867, -6.472485542297363, -5.3377366065979, -0.02145848050713539]",0.9787701368331909
1,"['    @Test\n    public void EntityTests_PlaceSerializationDeserializationTest() {\n        Place placeEntity = new Place();\n        placeEntity.setName(""TESTTEST"");\n\n        Assert.assertEquals(""Place"", placeEntity.getType());\n\n        Entity deserializedEntity = new Entity().setAs(placeEntity);\n        Assert.assertEquals(deserializedEntity.getType(), placeEntity.getType());\n\n        Place placeDeserialized = deserializedEntity.getAs(Place.class);\n        Assert.assertEquals(placeEntity.getType(), placeDeserialized.getType());\n    }\n']",Deserialization;Place;deserialized;deserialized;Assert;place;get;Entity;Type;Entity,8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;5.384208634495735e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.4947710037231445, -5.03683614730835, -5.465880393981934, -6.511763572692871, -5.429439067840576, -0.02091974765062332]",0.9792975783348083
1,"['    @Test\n    public void testToAttachment() {\n        Attachment attachment = getCard().toAttachment();\n        Assert.assertNotNull(attachment);\n        Assert.assertEquals(""application/vnd.microsoft.card.thumbnail"", attachment.getContentType());\n    }\n']",thumbnail;Attachment;application;get;Attachment;Null;attachment;Card;nd;Content,1.979060471057892e-09;1.8044374883174896e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.5123066902160645, -5.073301792144775, -5.36229133605957, -6.445030212402344, -5.3989787101745605, -0.02132405713200569]",0.9789018034934998
1,"['    @Test\n    public void testToAttachment() {\n        Attachment attachment = getCard().toAttachment();\n        Assert.assertNotNull(attachment);\n        Assert.assertEquals(""application/vnd.microsoft.card.animation"", attachment.getContentType());\n    }\n']",application;microsoft;card;get;Null;nd;animation;Equals;Not;Attachment,3.725290298461914e-09;2.7939677238464355e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6880221664905548e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.1641532182693481e-09,5,5,"[-5.475757122039795, -5.137824058532715, -5.390384197235107, -6.440596103668213, -5.363394260406494, -0.021119587123394012]",0.9791018962860107
1,"['    @Test\n    public void TestImplicitConversation() {\n        SuggestedActions actions = new SuggestedActions(\n            new CardAction[] { new CardAction(""x""), new CardAction(""y""), new CardAction(""z"") }\n        );\n\n        Assert.assertEquals(""x"", actions.getActions().get(0).getTitle());\n        Assert.assertEquals(""x"", actions.getActions().get(0).getValue());\n        Assert.assertEquals(""y"", actions.getActions().get(1).getTitle());\n        Assert.assertEquals(""y"", actions.getActions().get(1).getValue());\n        Assert.assertEquals(""z"", actions.getActions().get(2).getTitle());\n        Assert.assertEquals(""z"", actions.getActions().get(2).getValue());\n    }\n']",Suggested;Card;Assert;actions;Implicit;Title;Card;Equals;Value;actions,8.149072527885437e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.49131965637207, -5.0802178382873535, -5.447939395904541, -6.473519325256348, -5.433403968811035, -0.020772408694028854]",0.9794418811798096
1,"['    @Test\n    public void TestClone() {\n\n        CardAction cardAction =  new CardAction();\n        cardAction.setChannelData(""channelData"");\n        cardAction.setDisplayText(""displayTest"");\n        cardAction.setImage(""image"");\n        cardAction.setImageAltText(""imageAltText"");\n        cardAction.setText(""text"");\n        cardAction.setTitle(""title"");\n        cardAction.setType(ActionTypes.CALL);\n        cardAction.setValue(""value"");\n\n        CardAction newCardAction = CardAction.clone(cardAction);\n\n        Assert.assertEquals(cardAction.getChannelData(), newCardAction.getChannelData());\n        Assert.assertEquals(cardAction.getDisplayText(), newCardAction.getDisplayText());\n        Assert.assertEquals(cardAction.getImage(), newCardAction.getImage());\n        Assert.assertEquals(cardAction.getImageAltText(), newCardAction.getImageAltText());\n        Assert.assertEquals(cardAction.getText(), newCardAction.getText());\n        Assert.assertEquals(cardAction.getTitle(), newCardAction.getTitle());\n        Assert.assertEquals(cardAction.getType(), newCardAction.getType());\n        Assert.assertEquals(cardAction.getValue(), newCardAction.getValue());\n    }\n']",set;Image;Assert;Text;Text;Assert;new;Equals;set;new,1.9208528101444244e-09;1.6298145055770874e-09;1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.468531608581543, -5.011576175689697, -5.360813617706299, -6.3906049728393555, -5.431369304656982, -0.021866654977202415]",0.9783707857131958
1,['    @Test\n    public void TestCloneNull() {\n        CardAction newCardAction = CardAction.clone(null);\n        Assert.assertNull(newCardAction);\n    }\n'],clone;Null;Action;Clone;Card;Action;Card;Action;new;Card,1.2223608791828156e-09;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-5.548856735229492, -4.984958171844482, -5.379354476928711, -6.461175441741943, -5.4653000831604, -0.021363383159041405]",0.9788631796836853
1,"['    @Test\n    public void TestConstructorTwoParams() {\n        CardAction cardAction =  new CardAction(ActionTypes.CALL, ""title"");\n        Assert.assertEquals(cardAction.getType(), ActionTypes.CALL);\n        Assert.assertEquals(cardAction.getTitle(), ""title"");\n    }\n']",Constructor;Card;Two;Assert;Equals;Types;Action;title;Types;ALL,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.505281448364258, -5.031375408172607, -5.377530097961426, -6.433717727661133, -5.389756202697754, -0.02161574922502041]",0.9786161780357361
1,"['    @Test\n    public void TestConstructorThreeParams() {\n        CardAction cardAction =  new CardAction(ActionTypes.CALL, ""title"", ""value"");\n        Assert.assertEquals(cardAction.getType(), ActionTypes.CALL);\n        Assert.assertEquals(cardAction.getTitle(), ""title"");\n        Assert.assertEquals(cardAction.getValue(), ""value"");\n    }\n']",Three;Params;get;Equals;Card;card;card;Types;ALL;Action,8.149072527885437e-10;8.149072527885437e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2741809263825417e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.52861213684082, -5.0237250328063965, -5.437713623046875, -6.472770690917969, -5.426547527313232, -0.021064378321170807]",0.9791558980941772
1,"['    @Test\n    public void testGetAs() {\n        Activity activity = createActivity();\n        JsonNode activityNode = Serialization.objectToTree(activity);\n        Activity resultActivity = Serialization.getAs(activityNode, Activity.class);\n        Assert.assertEquals(activity.getId(), resultActivity.getId());\n        Assert.assertEquals(activity.getFrom().getId(), resultActivity.getFrom().getId());\n        Assert.assertEquals(activity.getConversation().getId(), resultActivity.getConversation().getId());\n    }\n']",Serialization;Serialization;Conversation;As;Node;activity;Assert;create;son;Equals,1.3969838619232178e-09;1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.515900135040283, -5.062285423278809, -5.448024749755859, -6.5000433921813965, -5.447559356689453, -0.0206808652728796]",0.9795316457748413
1,"['    @Test\n    public void testGetAsNull() {\n        Activity resultActivity = Serialization.getAs(null, Activity.class);\n        Assert.assertNull(resultActivity);\n    }\n']",result;result;class;get;null;Get;Null;Activity;As;Activity,9.604264050722122e-10;7.275957614183426e-10;6.693881005048752e-10;4.656612873077393e-10;1.4551915228366852e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.4551915228366852e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.557605266571045, -4.940399169921875, -5.423539638519287, -6.5210280418396, -5.494929313659668, -0.02122451178729534]",0.9789990186691284
1,"['    @Test\n    public void testClone() {\n        Activity activity = createActivity();\n        Activity resultActivity = (Activity) Serialization.clone((Object) activity);\n        Assert.assertEquals(activity.getId(), resultActivity.getId());\n        Assert.assertEquals(activity.getFrom().getId(), resultActivity.getFrom().getId());\n        Assert.assertEquals(activity.getConversation().getId(), resultActivity.getConversation().getId());\n    }\n']",Activity;clone;From;get;Equals;Activity;Assert;Activity;get;Object,4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.529574394226074, -5.04972505569458, -5.464785099029541, -6.504574775695801, -5.4587602615356445, -0.02057763561606407]",0.9796324968338013
1,['    @Test\n    public void testCloneNull() {\n        Activity resultActivity = (Activity) Serialization.clone((Object) null);\n        Assert.assertNull(resultActivity);\n    }\n'],Activity;null;Null;Assert;Activity;result;Clone;Activity;result;Activity,9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;0.0;-1.1641532182693481e-10;-1.4551915228366852e-10,5,5,"[-5.557225227355957, -4.940016746520996, -5.422303676605225, -6.5157928466796875, -5.496799468994141, -0.021234549582004547]",0.97898930311203
1,"['    @Test\n    public void testAllSubredditFields() {\n        \n        // Field values\n        String submit_text_html = null;\n        Boolean user_is_banned = null;\n        String id = ""SubredditID"";\n        String kind = Kind.SUBREDDIT.value();\n        String submit_text = ""submit text for subreddit"";\n        String display_name = ""subredditDisplayName"";\n        String header_img = ""http://a.thumbs.redditmedia.com/yyL5sveWcgkCPKbr.png"";\n        String description_html = ""&lt;div&gt;HTML description for subreddit&lt;/d&gt;"";\n        String title = ""SubredditTitle"";\n        Boolean over18 = false;\n        Boolean user_is_moderator = null;\n        String header_title = ""Header title for subreddit"";\n        String description = ""Description for subreddit"";\n        String submit_link_label = ""Submit link label"";\n        String accounts_active = null;\n        Boolean public_traffic = true;\n        JSONArray header_size = JsonHelpers.jsonArrayOf(160, 64);\n        long subscribers = 289252;\n        String submit_text_label = ""Submit text label"";\n        String name = kind + ""_"" + id;\n        double created = 1201242956.0;\n        String url = ""/r/"" + display_name;\n        double created_utc = 1201242956.0;\n        Boolean user_is_contributor = null;\n        String public_description = ""Public description of subreddit"";\n        long comment_score_hide_mins = 0;\n        String subreddit_type = ""public"";\n        String submission_type = ""any"";\n        Boolean user_is_subscriber = null;\n        \n        // Create JSON Object\n        JSONObject data = new JSONObject();\n        data.put(""submit_text_html"", submit_text_html);\n        data.put(""user_is_banned"", user_is_banned);\n        data.put(""id"", id);\n        data.put(""submit_text"", submit_text);\n        data.put(""display_name"", display_name);\n        data.put(""header_img"", header_img);\n        data.put(""description_html"", description_html);\n        data.put(""title"", title);\n        data.put(""over18"", over18);\n        data.put(""user_is_moderator"", user_is_moderator);\n        data.put(""header_title"", header_title);\n        data.put(""description"", description);\n        data.put(""submit_link_label"", submit_link_label);\n        data.put(""accounts_active"", accounts_active);\n        data.put(""public_traffic"", public_traffic);\n        data.put(""header_size"", header_size);\n        data.put(""subscribers"", subscribers);\n        data.put(""submit_text_label"", submit_text_label);\n        data.put(""name"", name);\n        data.put(""created"", created);\n        data.put(""url"", url);\n        data.put(""created_utc"", created_utc);\n        data.put(""user_is_contributor"", user_is_contributor);\n        data.put(""public_description"", public_description);\n        data.put(""comment_score_hide_mins"", comment_score_hide_mins);\n        data.put(""subreddit_type"", subreddit_type);\n        data.put(""submission_type"", submission_type);\n        data.put(""user_is_subscriber"", user_is_subscriber);\n        \n        // Parse\n        Subreddit s = new Subreddit(data);\n        \n        // Test data fields\n        assertEquals(s.getDisplayName(), display_name);\n        assertEquals(s.getTitle(), title);\n        assertEquals(s.getURL(), url);\n        assertEquals(s.getCreated(), created, 0);\n        assertEquals(s.getCreatedUTC(), created_utc, 0);\n        assertEquals(s.isNSFW(), over18);\n        assertEquals(s.getSubscribers(), subscribers);\n        assertEquals(s.getDescription(), description);\n        assertEquals(s.getSubredditType(), subreddit_type);\n        \n        // Possible tests to activate:\n//        assertEquals(s.getSubmitTextHTML(), submit_text_html);\n//        assertEquals(s.isUserBanned(), user_is_banned);\n//        assertEquals(s.getSubmitText(), submit_text);\n//        assertEquals(s.getHeaderIMG(), header_img);\n//        assertEquals(s.getDescriptionHTML(), description_html);\n//        assertEquals(s.isUserModerator(), user_is_moderator);\n//        assertEquals(s.getHeaderTitle(), header_title);\n//        assertEquals(s.getSubmitLinkLabel(), submit_link_label);\n//        assertEquals(s.getAccountsActive(), accounts_active);\n//        assertEquals(s.getPublicTraffic(), public_traffic);\n//        assertEquals(s.getHeaderSize(), header_size);\n//        assertEquals(s.getSubmitTextLabel(), submit_text_label);\n//        assertEquals(s.isUserContributor(), user_is_contributor);\n//        assertEquals(s.getPublicDescription(), public_description);\n//        assertEquals(s.getCommentScoreHideMins(), comment_score_hide_mins, 0);\n//        assertEquals(s.getSubmissionType(), submission_type);\n//        assertEquals(s.isUserSubscriber(), user_is_subscriber);\n        \n    }\n']",ut;Subreddit;header;Kind;son;Submit;subreddit;header;yy;text,1.1641532182693481e-09;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;3.7834979593753815e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.44020938873291, -4.956839084625244, -5.33644962310791, -6.413721084594727, -5.489516735076904, -0.022200046107172966]",0.9780445694923401
1,"['    @Test\n    public void testConstructor() {\n        \n        // Variables\n        long count = 2894;\n        String parent_id = ""djk9fa"";\n        String child_id_1 = ""ddafe2"";\n        String child_id_2 = ""ddaf22"";\n        \n        // Create JSON Object\n        JSONObject data = new JSONObject();\n        data.put(""count"", count);\n        data.put(""parent_id"", parent_id);\n        JSONArray array = new JSONArray();\n        array.add(child_id_1);\n        array.add(child_id_2);\n        data.put(""children"", array);\n        \n        // Parse\n        More m = new More(data);\n        \n        Assert.assertEquals((Long) count, m.getCount());\n        Assert.assertEquals(parent_id, m.getParentId());\n        Assert.assertEquals(2, m.getChildrenSize());\n        Assert.assertEquals(child_id_1, m.getChildren().get(0));\n        Assert.assertEquals(child_id_2, m.getChildren().get(1));\n        \n        // Test that the toString does not throw an exception an is not null\n       Assert.assertNotNull(m.toString());\n        \n    }\n']",does;throw;to;JSONObject;Constructor;Long;Assert;the;id;count,5.587935447692871e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.434442043304443, -5.071089744567871, -5.39313268661499, -6.437371730804443, -5.450373649597168, -0.021307602524757385]",0.9789177775382996
1,"['    @Test\n    public void testAllCommentFields() {\n        \n        // Field values\n        String subreddit_id = ""SubrID"";\n        String banned_by = null;\n        String subreddit = ""SubredditName"";\n        String likes = null;\n        String replies = """";\n        boolean saved = false;\n        String id = ""CommID"";\n        String kind = ""t1"";\n        long gilded = 0;\n        String author = ""author"";\n        String parent_id = ""ParID"";\n        long score = 2;\n        String approved_by = null;\n        long controversiality = 0;\n        String body = ""comment body"";\n        boolean edited = false;\n        String author_flair_css_class = null;\n        long downs = 0;\n        String body_html = ""&lt;div&gt;"" + body + ""&lt;/div&gt;"";\n        String link_id = ""LinkIdentifier"";\n        boolean score_hidden = false;\n        String name = kind + ""_"" + id;\n        double created = 1404969798.0;\n        String author_flair_text = null;\n        double created_utc = 1404940998.0;\n        long ups = 2;\n        String num_reports = null;\n        String distinguished = null;\n        \n        // Create JSON Object\n        JSONObject data = new JSONObject();\n        data.put(""subreddit_id"", subreddit_id);\n        data.put(""banned_by"", banned_by);\n        data.put(""subreddit"", subreddit);\n        data.put(""likes"", likes);\n        data.put(""replies"", replies);\n        data.put(""saved"", saved);\n        data.put(""id"", id);\n        data.put(""gilded"", gilded);\n        data.put(""author"", author);\n        data.put(""parent_id"", parent_id);\n        data.put(""score"", score);\n        data.put(""approved_by"", approved_by);\n        data.put(""controversiality"", controversiality);\n        data.put(""body"", body);\n        data.put(""edited"", edited);\n        data.put(""author_flair_css_class"", author_flair_css_class);\n        data.put(""downs"", downs);\n        data.put(""body_html"", body_html);\n        data.put(""link_id"", link_id);\n        data.put(""score_hidden"", score_hidden);\n        data.put(""name"", name);\n        data.put(""created"", created);\n        data.put(""author_flair_text"", author_flair_text);\n        data.put(""created_utc"", created_utc);\n        data.put(""ups"", ups);\n        data.put(""num_reports"", num_reports);\n        data.put(""distinguished"", distinguished);\n        \n        // Parse\n        Comment c = new Comment(data);\n        \n        // Test data fields\n        assertEquals(c.getFullName(), name);\n        assertEquals(c.getAuthor(), author);\n        assertEquals(c.getBody(), body);\n        assertEquals(c.getCreated(), created, 0);\n        assertEquals(c.getCreatedUTC(), created_utc, 0);\n        assertEquals(c.getDownvotes(), downs, 0);\n        assertEquals(c.getEdited(), edited);\n        assertEquals(c.getGilded(), gilded, 0);\n        assertEquals(c.getIdentifier(), id);\n       // assertEquals(c.getKind(), kind);\n        assertEquals(c.getParentId(), parent_id);\n        assertEquals(c.getScore(), score, 0);\n        assertEquals(c.getUpvotes(), ups, 0);\n        assertEquals(c.getSubreddit(), subreddit);\n        assertEquals(c.getSubredditId(), subreddit_id);\n        assertEquals(c.getLinkId(), link_id);\n        assertEquals(c.getBodyHTML(), body_html);\n        assertEquals(c.isScoreHidden(), score_hidden);\n        \n        // Possible tests to activate:\n//        assertEquals(c.getBannedBy(), banned_by);\n//        assertEquals(c.getLikes(), likes);\n//        assertEquals(c.getApprovedBy(), approved_by);\n//        assertEquals(c.getAuthorFlairCSSClass(), author_flair_css_class);\n//        assertEquals(c.getAuthorFlairText(), author_flair_text);\n//        assertEquals(c.getNumReports(), num_reports);\n//        assertEquals(c.getDistinguised(), distinguished);\n        \n    }\n']",kind;double;double;Object;ID;long;long;null;comment;name,9.313225746154785e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.413435459136963, -4.978732109069824, -5.338277339935303, -6.420936584472656, -5.487083435058594, -0.022153759375214577]",0.9780896902084351
1,"['    @Test\n    public void testMatchSuccess() {\n        Assert.assertEquals(Kind.COMMENT, Kind.match(Kind.COMMENT.value()));\n    }\n']",COMMENT;Equals;Kind;Match;match;value;COMMENT;Assert;Kind;Success,1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;4.0745362639427185e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-6.984919309616089e-10;-2.0954757928848267e-09,5,5,"[-5.563459873199463, -4.954154968261719, -5.39677095413208, -6.486297607421875, -5.453607082366943, -0.021454280242323875]",0.9787742495536804
1,"['    @Test\n    public void testMatchFailure() {\n        // Match a string that most likely will never become a Kind\'s value\n        Assert.assertNull(Kind.match(""djkaskjsf7s98f989389589a9f8a998935""));\n    }\n']",match;Failure;Kind's;Null;Kind;Match;likely;never;string;that,2.0954757928848267e-09;1.5133991837501526e-09;1.076841726899147e-09;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.560990810394287, -4.949781894683838, -5.4163498878479, -6.501733779907227, -5.456782817840576, -0.02136804908514023]",0.9788586497306824
1,"['    @Test\n    public void testAllSubmissionFields() {\n        \n        // Field values\n        String kind = Kind.LINK.value();\n        String domain = ""imgur.com"";\n        String banned_by = null;\n        JSONObject media_embed = JsonHelpers.createMediaEmbedObject();\n        String subreddit = ""subredditName"";\n        String selftext_html = ""Self text HTML"";\n        String selftext = ""Self text"";\n        String likes = null;\n        Boolean secure_media = null;\n        String link_flair_text = null;\n        String id = ""SubmID"";\n        Long gilded = (long) 0;\n        JSONObject secure_media_embed = new JSONObject();\n        Boolean clicked = false;\n        Boolean stickied = false;\n        String author = ""authorName"";\n        JSONObject media = JsonHelpers.createMediaObject();\n        Long score = (long) 613;\n        String approved_by = null;\n        Boolean over_18 = true;\n        Boolean hidden = false;\n        String thumbnail = ""nsfw"";\n        String subreddit_id = Kind.SUBREDDIT.value() + ""_"" + ""SubrID"";\n        Boolean edited = false;\n        String link_flair_css_class = null;\n        String author_flair_css_class = null;\n        Long downs = (long) 0;\n        Boolean saved = false;\n        Boolean is_self = false;\n        String title = ""submTitle"";\n        String permalink = ""/r/"" + subreddit + ""/comments"" + id + ""/"" + title + ""/"";\n        String name = kind + ""_"" + id;\n        Double created = 1405093719.0;\n        String url = ""http://imgur.com/a/dxHTq"";\n        String author_flair_text = null;\n        Double created_utc = 1405064919.0;\n        Long ups = (long) 613;\n        Long num_comments = (long) 112;\n        Boolean visited = false;\n        Long num_reports = null;\n        String distinguished = null;\n        String from = ""t3_djjksjk"";\n        String from_id = ""djjksjk"";\n        String from_kind = ""t3"";\n        String removal_reason = ""Just because"";\n        Double upvote_ratio = 0.89;\n             \n        // Create JSON Object\n        JSONObject data = new JSONObject();\n        data.put(""kind"", kind);\n        data.put(""domain"", domain);\n        data.put(""banned_by"", banned_by);\n        data.put(""media_embed"", media_embed);\n        data.put(""subreddit"", subreddit);\n        data.put(""selftext_html"", selftext_html);\n        data.put(""selftext"", selftext);\n        data.put(""likes"", likes);\n        data.put(""secure_media"", secure_media);\n        data.put(""link_flair_text"", link_flair_text);\n        data.put(""id"", id);\n        data.put(""gilded"", gilded);\n        data.put(""secure_media_embed"", secure_media_embed);\n        data.put(""clicked"", clicked);\n        data.put(""stickied"", stickied);\n        data.put(""author"", author);\n        data.put(""media"", media);\n        data.put(""score"", score);\n        data.put(""approved_by"", approved_by);\n        data.put(""over_18"", over_18);\n        data.put(""hidden"", hidden);\n        data.put(""thumbnail"", thumbnail);\n        data.put(""subreddit_id"", subreddit_id);\n        data.put(""edited"", edited);\n        data.put(""link_flair_css_class"", link_flair_css_class);\n        data.put(""author_flair_css_class"", author_flair_css_class);\n        data.put(""downs"", downs);\n        data.put(""saved"", saved);\n        data.put(""is_self"", is_self);\n        data.put(""title"", title);\n        data.put(""permalink"", permalink);\n        data.put(""name"", name);\n        data.put(""created"", created);\n        data.put(""url"", url);\n        data.put(""author_flair_text"", author_flair_text);\n        data.put(""created_utc"", created_utc);\n        data.put(""ups"", ups);\n        data.put(""num_comments"", num_comments);\n        data.put(""visited"", visited);\n        data.put(""num_reports"", num_reports);\n        data.put(""distinguished"", distinguished);\n        data.put(""from"", from);\n        data.put(""from_id"", from_id);\n        data.put(""from_kind"", from_kind);\n        data.put(""removal_reason"", removal_reason);\n        data.put(""upvote_ratio"", upvote_ratio);\n        \n        // Parse\n        Submission s = new Submission(data);\n        \n        // Test data fields\n        assertEquals(s.getKind(), Kind.match(kind));\n        assertEquals(s.getDomain(), domain);\n        assertEquals(s.getBannedBy(), banned_by);\n        //assertEquals(s.getMediaEmbed(), media_embed);\n        assertEquals(s.getSubreddit(), subreddit);\n        assertEquals(s.getSelftextHTML(), selftext_html);\n        assertEquals(s.getSelftext(), selftext);\n        assertEquals(s.getLikes(), likes);\n        //assertEquals(s.getSecureMedia(), secure_media);\n        assertEquals(s.getLinkFlairText(), link_flair_text);\n        assertEquals(s.getIdentifier(), id);\n        assertEquals(s.getGilded(), gilded);\n        //assertEquals(s.getSecureMediaEmbed(), secure_media_embed);\n        assertEquals(s.isClicked(), clicked);\n        assertEquals(s.isStickied(), stickied);\n        assertEquals(s.getAuthor(), author);\n        //assertEquals(s.getMedia(), media);\n        assertEquals(s.getScore(), score);\n        assertEquals(s.getApprovedBy(), approved_by);\n        assertEquals(s.isNSFW(), over_18);\n        assertEquals(s.isHidden(), hidden);\n        assertEquals(s.getThumbnail(), thumbnail);\n        assertEquals(s.getSubredditId(), subreddit_id);\n        assertEquals(s.isEdited(), edited);\n        assertEquals(s.getLinkFlairCSSClass(), link_flair_css_class);\n        assertEquals(s.getAuthorFlairCSSClass(), author_flair_css_class);\n        assertEquals(s.getDownVotes(), downs);\n        assertEquals(s.isSaved(), saved);\n        assertEquals(s.isSelf(), is_self);\n        assertEquals(s.getTitle(), title);\n        assertEquals(s.getPermalink(), permalink);\n        assertEquals(s.getFullName(), name);\n        assertEquals(s.getCreated(), created, 0);\n        assertEquals(s.getURL(), url);\n        assertEquals(s.getAuthorFlairText(), author_flair_text);\n        assertEquals(s.getCreatedUTC(), created_utc, 0);\n        assertEquals(s.getUpVotes(), ups);\n        assertEquals(s.getCommentCount(), num_comments);\n        assertEquals(s.isVisited(), visited);\n        assertEquals(s.getReportCount(), num_reports);\n        assertEquals(s.getDistinguished(), distinguished);\n        assertEquals(s.getFrom(), from);\n        assertEquals(s.getFromId(), from_id);\n        assertEquals(s.getFromKind(), from_kind);\n        assertEquals(s.getRemovalReason(), removal_reason);\n        assertEquals(s.getUpvoteRatio(), upvote_ratio);\n        \n    }\n']",thumbnail;subreddit;Boolean;nsfw;hidden;Field;score;UBREDDIT;author;media,8.381903171539307e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.403831481933594, -4.994034290313721, -5.376040458679199, -6.439551830291748, -5.482301712036133, -0.02189849503338337]",0.978339433670044
1,"['    @Test\n    public void testSafeJsonToString() {\n        Assert.assertNull(JsonUtils.safeJsonToString(null));\n        Assert.assertEquals(""123"", JsonUtils.safeJsonToString(123));\n        Assert.assertEquals(""abcd"", JsonUtils.safeJsonToString(""abcd""));\n        Assert.assertEquals("""", JsonUtils.safeJsonToString(""""));\n    }\n']",Null;Equals;safe;Safe;safe;Equals;son;son;son;safe,1.0477378964424133e-09;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.565267562866211, -5.019395351409912, -5.43745756149292, -6.451683521270752, -5.4683837890625, -0.02079821191728115]",0.9794164896011353
1,"['    @Test\n    public void testSafeJsonToDouble() {\n        Assert.assertNull(JsonUtils.safeJsonToDouble(null));\n        Assert.assertNull(JsonUtils.safeJsonToDouble(""abcd""));\n        Assert.assertNull(JsonUtils.safeJsonToDouble(""""));\n        Assert.assertEquals((Double) (double) 35141, JsonUtils.safeJsonToDouble(""35141""), 0);\n        Assert.assertEquals((Double) (double) 0, JsonUtils.safeJsonToDouble(""0""), 0);\n    }\n']",Null;double;son;Double;son;son;son;safe;Equals;Assert,5.529727786779404e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.5303473472595215, -5.032247543334961, -5.4441118240356445, -6.458350658416748, -5.4767560958862305, -0.020774977281689644]",0.9794393181800842
1,"['    @Test\n    public void testSafeJsonToInteger() {\n        Assert.assertNull(JsonUtils.safeJsonToInteger(null));\n        Assert.assertNull(JsonUtils.safeJsonToInteger(""abcd""));\n        Assert.assertNull(JsonUtils.safeJsonToInteger(""""));\n        Assert.assertEquals((Integer) 355, (Integer) JsonUtils.safeJsonToInteger(""355""));\n        Assert.assertNull(JsonUtils.safeJsonToInteger(""25275738927589278572891""));\n        Assert.assertNull(JsonUtils.safeJsonToInteger(""-25275738927589278572891""));\n        Assert.assertEquals((Integer) 0, JsonUtils.safeJsonToInteger(""0""));\n    }\n']",Safe;Equals;safe;safe;Null;Assert;son;Assert;son;Assert,5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.512471675872803, -5.044794082641602, -5.464527606964111, -6.447577953338623, -5.470099925994873, -0.020721733570098877]",0.9794915914535522
1,"['    @Test\n    public void testSafeJsonToBoolean() {\n        Assert.assertNull(JsonUtils.safeJsonToBoolean(null));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""abcd""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""3522""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""25275738927589278572891""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""-25275738927589278572891""));\n        Assert.assertTrue(JsonUtils.safeJsonToBoolean(""true""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""false""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""0""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""1""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""yes""));\n        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""no""));\n    }\n']",Safe;null;abcd;false;safe;yes;safe;son;Boolean;safe,8.731149137020111e-10;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.441713333129883, -5.093478679656982, -5.450366973876953, -6.40718936920166, -5.408134937286377, -0.021114451810717583]",0.9791069030761719
1,"['    @Test\n    public void testSafeJsonToLong() {\n        Assert.assertNull(JsonUtils.safeJsonToLong(null));\n        Assert.assertNull(JsonUtils.safeJsonToLong(""abcd""));\n        Assert.assertNull(JsonUtils.safeJsonToLong(""""));\n        Assert.assertEquals((Long) (long) 355, (Long) JsonUtils.safeJsonToLong(""355""));\n        Assert.assertNull(JsonUtils.safeJsonToLong(""25275738927589278572891""));\n        Assert.assertNull(JsonUtils.safeJsonToLong(""-25275738927589278572891""));\n        Assert.assertEquals((Long) Long.MAX_VALUE, (Long) JsonUtils.safeJsonToLong("""" + Long.MAX_VALUE));\n        Assert.assertEquals((Long) Long.MIN_VALUE, (Long) JsonUtils.safeJsonToLong("""" + Long.MIN_VALUE));\n        Assert.assertEquals((Long) (long) 0, JsonUtils.safeJsonToLong(""0""));\n    }\n']",safe;safe;safe;safe;Assert;VALUE;Assert;son;null;Null,9.89530235528946e-10;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.440134048461914, -5.0601701736450195, -5.382907867431641, -6.381919860839844, -5.438438415527344, -0.02154656872153282]",0.9786840081214905
1,"['    @Test\n    public void testGetters() {\n        \n        RedditToken subject = new RedditToken(jsonToken);\n        RedditToken subjectUserProvided = new RedditToken(accessToken, tokenType, expiresIn, scope);\n        assertEquals(accessToken, subject.getAccessToken());\n        assertEquals(refreshToken, subject.getRefreshToken());\n        assertEquals(tokenType, subject.getTokenType());\n        assertEquals(expiresIn, subject.getExpirationSpan());\n        assertTrue(subject.hasScope(RedditScope.EDIT));\n        assertTrue(subject.hasScope(RedditScope.FLAIR));\n        assertFalse(subject.hasScope(RedditScope.PRIVATEMESSAGE));\n        assertTrue(subject.isRefreshable());\n        assertFalse(subjectUserProvided.isRefreshable());\n        \n    }\n']",Getters;new;Expiration;EDIT;Reddit;expires;Reddit;new;PRIVATEMESSAGE;Provided,1.5425030142068863e-09;7.566995918750763e-10;7.203198038041592e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.128661774098873e-10;2.9103830456733704e-10,5,5,"[-5.491891384124756, -5.04954719543457, -5.444242000579834, -6.48941707611084, -5.463334083557129, -0.020827634260058403]",0.9793877601623535
1,"['    @Test\n    public void testRefresh() {\n        \n        RedditToken subject = new RedditToken(jsonToken);\n        assertEquals(accessToken, subject.getAccessToken());\n        assertEquals(refreshToken, subject.getRefreshToken());\n        assertEquals(tokenType, subject.getTokenType());\n        assertEquals(expiresIn, subject.getExpirationSpan());\n        assertTrue(subject.hasScope(RedditScope.EDIT));\n        assertTrue(subject.hasScope(RedditScope.FLAIR));\n        \n        subject.refresh(refreshJsonToken);\n        \n        assertEquals(accessToken2, subject.getAccessToken());\n        assertEquals(refreshToken, subject.getRefreshToken());\n        assertEquals(tokenType2, subject.getTokenType());\n        assertEquals(expiresIn2, subject.getExpirationSpan());\n        assertTrue(subject.hasScope(RedditScope.EDIT));\n        assertFalse(subject.hasScope(RedditScope.FLAIR));\n        \n    }\n']",new;Reddit;Reddit;Expiration;access;In;Scope;subject;Type;has,1.57160684466362e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.444499492645264, -5.1046671867370605, -5.448905944824219, -6.476871490478516, -5.429965019226074, -0.020826466381549835]",0.9793887734413147
1,"['    @Test\n    public void testTimeSensitiveExpiration() {\n        \n        RedditToken subject = new RedditToken(jsonToken);\n        RedditToken subjectUserProvided = new RedditToken(accessToken, tokenType, expiresIn2, scope);\n        \n        assertFalse(subjectUserProvided.willExpireIn(expiresIn2 - 60));\n        assertTrue(subjectUserProvided.willExpireIn(expiresIn2 + 60));\n        assertFalse(subjectUserProvided.isExpired());\n        \n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        assertTrue(subject.isExpired());\n        assertTrue(subject.getExpiration() < (System.currentTimeMillis() / 1000));\n        \n    }\n']",Trace;access;Exception;catch;Expiration;sleep;ensitive;subject;expires;In,4.001776687800884e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.489284038543701, -5.054111480712891, -5.426456928253174, -6.480042934417725, -5.487691402435303, -0.020798329263925552]",0.9794163703918457
1,"['    @Test\n    public void testDefaultConstructor() {\n        RedditApp app = new RedditWebApp(clientID, clientSecret, redirectURI);\n        new RedditOAuthAgent(userAgent, app);\n        app = new RedditScriptApp(clientID, clientSecret, redirectURI);\n        new RedditOAuthAgent(userAgent, app);\n        app = new RedditInstalledApp(clientID, redirectURI);\n        new RedditOAuthAgent(userAgent, app);\n    }\n']",redirect;new;new;Script;client;Web;Agent;Constructor;redirect;new,6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.522558689117432, -4.986660003662109, -5.436460018157959, -6.4839067459106445, -5.493047714233398, -0.021041851490736008]",0.9791780114173889
1,"['    @Test\n    public void testGenerateCodeFlowURI() {\n        RedditScopeBuilder builder = new RedditScopeBuilder();\n        builder.addScope(RedditScope.EDIT);\n        String url = subject.generateCodeFlowURI(builder, RedditDuration.PERMANENT);\n        UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(url));\n    }\n']",URI;Valid;Duration;Builder;Validator;Reddit;url;Validator;Scope;add,9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.52061653137207, -5.0484418869018555, -5.461179256439209, -6.519906520843506, -5.465708255767822, -0.02058476023375988]",0.9796256422996521
1,['    @Test\n    public void testGenerateImplicitFlowURI() {\n        RedditScopeBuilder builder = new RedditScopeBuilder();\n        builder.addScope(RedditScope.FLAIR);\n        String url = subject.generateImplicitFlowURI(builder);\n        UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(url));\n    }\n'],Generate;url;Scope;builder;URI;Implicit;Builder;builder;Flow;Ur,1.862645149230957e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.486541271209717, -5.094746112823486, -5.420238494873047, -6.462003231048584, -5.410213947296143, -0.020947298035025597]",0.9792705774307251
1,"['    @Test\n    public void testTokenFromInfo() {\n        RedditToken token = subject.tokenFromInfo(accessToken, tokenType, expiresIn, scope);\n        assertEquals(accessToken, token.getAccessToken());\n        assertEquals(tokenType, token.getTokenType());\n        assertEquals(expiresIn, token.getExpirationSpan());\n        assertTrue(token.hasScope(RedditScope.EDIT));\n        assertTrue(token.hasScope(RedditScope.FLAIR));\n        assertFalse(token.hasScope(RedditScope.PRIVATEMESSAGE));\n    }\n']",FLAIR;token;access;access;Expiration;expires;Reddit;scope;EDIT;Scope,1.6007106751203537e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.5838532969355583e-10,5,5,"[-5.504840850830078, -5.04869270324707, -5.414313316345215, -6.472195625305176, -5.454341888427734, -0.02097916603088379]",0.9792393445968628
1,"['    @Test\n    public void testToken() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {\n        \n        // Captor for the request that is executed\n        ArgumentCaptor<OAuthClientRequest> clientCaptor = ArgumentCaptor.forClass(OAuthClientRequest.class);\n        \n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenReturn(jsonToken);\n        \n        // Run subject\n        RedditToken token = subject.token(code);\n        \n        // Verify and capture\n        verify(mockOAuthClient).accessToken(clientCaptor.capture());\n        \n        OAuthClientRequest request = clientCaptor.getValue();\n        \n        assertNotNull(request.getHeader(""Authorization"")); // This is Base64 encoded\n        assertEquals(request.getHeader(""User-Agent""), userAgent);\n        \n        assertEquals(accessToken, token.getAccessToken());\n        assertEquals(refreshToken, token.getRefreshToken());\n        assertEquals(tokenType, token.getTokenType());\n        assertEquals(expiresIn, token.getExpirationSpan());\n        assertTrue(token.hasScope(RedditScope.EDIT));\n        assertTrue(token.hasScope(RedditScope.FLAIR));\n        assertFalse(token.hasScope(RedditScope.PRIVATEMESSAGE));\n\n    }\n']",verify;Request;Auth;Exception;Auth;request;EDIT;Scope;capture;Reddit,2.153683453798294e-09;1.862645149230957e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.477195739746094, -5.045055389404297, -5.3691229820251465, -6.433598518371582, -5.447276592254639, -0.021422775462269783]",0.9788049459457397
1,"['    @Test(expected=RedditOAuthException.class)\n    public void testTokenOAuthSystemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {\n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(new OAuthSystemException());\n        subject.token(code);\n    }\n']",expected;class;Reddit;class;OAuth;when;Auth;any;token;new,1.6298145055770874e-09;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.506265640258789, -4.951992034912109, -5.32316780090332, -6.423364639282227, -5.431819438934326, -0.022251928225159645]",0.9779938459396362
1,"['    @Test(expected=RedditOAuthException.class)\n    public void testTokenOAuthProblemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {\n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(OAuthProblemException.error(""Error""));\n        subject.token(code);\n    }\n']",access;when;Exception;ock;Error;Exception;Reddit;Throw;Request;OAuth,1.1641532182693481e-09;1.076841726899147e-09;8.731149137020111e-10;5.820766091346741e-10;4.511093720793724e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.4921088218688965, -4.9708476066589355, -5.325997829437256, -6.4255757331848145, -5.418056488037109, -0.02222033403813839]",0.9780247211456299
1,"['    @Test\n    public void testRefreshTokenFailure() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {\n        assertFalse(subject.refreshToken(mockRedditToken));\n    }\n']",Failure;Reddit;Reddit;Auth;subject;False;Exception;Refresh;System;refresh,6.984919309616089e-10;4.656612873077393e-10;3.7834979593753815e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;-8.731149137020111e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-3.2014213502407074e-10,5,5,"[-5.586820125579834, -4.865914821624756, -5.403298377990723, -6.520595073699951, -5.507181644439697, -0.021717822179198265]",0.9785163402557373
1,"['    @Test\n    public void testRefreshTokenSuccess() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {\n        assertTrue(subject.refreshToken(mockRedditTokenRefreshable));\n        verify(mockOAuthClient).accessToken(any(OAuthClientRequest.class));\n        verify(mockRedditTokenRefreshable).refresh(null);\n    }\n']",ock;True;ock;Exception;Auth;Refreshable;refresh;Client;any;verify,7.566995918750763e-10;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.525015830993652, -4.9392499923706055, -5.364750862121582, -6.449582099914551, -5.4645161628723145, -0.021877501159906387]",0.9783600568771362
1,"['    @Test(expected=RedditOAuthException.class)\n    public void testRefreshTokenOAuthSystemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {\n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(new OAuthSystemException());\n        subject.refreshToken(mockRedditTokenRefreshable);\n    }\n']",Exception;subject;new;refresh;Reddit;Refreshable;when;OAuth;Auth;Problem,1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.533832550048828, -4.929454326629639, -5.362825870513916, -6.471960544586182, -5.465419769287109, -0.02188333310186863]",0.9783543944358826
1,"['    @Test(expected=RedditOAuthException.class)\n    public void testRefreshTokenOAuthProblemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {\n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(OAuthProblemException.error(""Error""));\n        subject.refreshToken(mockRedditTokenRefreshable);\n    }\n']",Refresh;access;Reddit;Problem;Exception;subject;Problem;ock;Problem;OAuth,2.5320332497358322e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.6193447411060333e-10,5,5,"[-5.514958381652832, -4.922111511230469, -5.354227066040039, -6.4473371505737305, -5.459641933441162, -0.0221206434071064]",0.9781222343444824
1,"['    @Test\n    public void testTokenAppOnlyConfidential() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {\n        \n        // Captor for the request that is executed\n        ArgumentCaptor<OAuthClientRequest> clientCaptor = ArgumentCaptor.forClass(OAuthClientRequest.class);\n        \n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenReturn(jsonTokenNonRefreshable);\n        \n        // Run subject\n        RedditToken token = subject.tokenAppOnly(true);\n        \n        // Verify and capture\n        verify(mockOAuthClient).accessToken(clientCaptor.capture());\n        \n        OAuthClientRequest request = clientCaptor.getValue();\n        \n        assertNotNull(request.getHeader(""Authorization"")); // This is Base64 encoded\n        assertEquals(request.getHeader(""User-Agent""), userAgent);\n        \n        assertEquals(accessToken, token.getAccessToken());\n        assertNull(token.getRefreshToken());\n        assertEquals(tokenType, token.getTokenType());\n        assertEquals(expiresIn, token.getExpirationSpan());\n        assertTrue(token.hasScope(RedditScope.EDIT));\n        assertTrue(token.hasScope(RedditScope.FLAIR));\n        assertFalse(token.hasScope(RedditScope.PRIVATEMESSAGE));\n\n    }\n']",Exception;Auth;Request;Exception;Auth;Refreshable;Client;access;any;PRIVATEMESSAGE,3.841705620288849e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.2514647096395493e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.495720386505127, -4.904114723205566, -5.355112075805664, -6.426965713500977, -5.479423522949219, -0.02227979153394699]",0.9779666662216187
1,"['    @Test\n    public void testTokenAppOnly() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {\n        \n        // Captor for the request that is executed\n        ArgumentCaptor<OAuthClientRequest> clientCaptor = ArgumentCaptor.forClass(OAuthClientRequest.class);\n        \n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenReturn(jsonTokenNonRefreshable);\n        \n        // Run subject\n        RedditToken token = subject.tokenAppOnly(false);\n        \n        // Verify and capture\n        verify(mockOAuthClient).accessToken(clientCaptor.capture());\n        \n        OAuthClientRequest request = clientCaptor.getValue();\n        \n        assertNotNull(request.getHeader(""Authorization"")); // This is Base64 encoded\n        assertEquals(request.getHeader(""User-Agent""), userAgent);\n        \n        assertEquals(accessToken, token.getAccessToken());\n        assertNull(token.getRefreshToken());\n        assertEquals(tokenType, token.getTokenType());\n        assertEquals(expiresIn, token.getExpirationSpan());\n        assertTrue(token.hasScope(RedditScope.EDIT));\n        assertTrue(token.hasScope(RedditScope.FLAIR));\n        assertFalse(token.hasScope(RedditScope.PRIVATEMESSAGE));\n\n    }\n']",access;Problem;token;token;Auth;any;expires;Refreshable;System;token,1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.487400054931641, -5.002342700958252, -5.347485065460205, -6.424831390380859, -5.4622368812561035, -0.02171992138028145]",0.9785142540931702
1,"['    @Test(expected=RedditOAuthException.class)\n    public void testTokenAppOnlyOAuthSystemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {\n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(new OAuthSystemException());\n        subject.tokenAppOnly(false);\n    }\n']",new;Exception;class;Auth;Exception;access;Exception;Only;ock;Reddit,1.6880221664905548e-09;1.6298145055770874e-09;1.280568540096283e-09;1.2223608791828156e-09;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-5.496699333190918, -4.92889928817749, -5.318584442138672, -6.42825984954834, -5.433172702789307, -0.022469453513622284]",0.9777811169624329
1,"['    @Test(expected=RedditOAuthException.class)\n    public void testTokenAppOnlyOAuthProblemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {\n        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(OAuthProblemException.error(""Error""));\n        subject.tokenAppOnly(false);\n    }\n']",expected;Auth;Client;access;ock;any;Request;System;class;Reddit,5.122274160385132e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.4924596548080444e-09;2.7939677238464355e-09;2.2118911147117615e-09;1.862645149230957e-09;1.6298145055770874e-09,5,5,"[-5.5366644859313965, -4.935574531555176, -5.369049549102783, -6.474979877471924, -5.463909149169922, -0.021798890084028244]",0.9784370064735413
1,"['    @Test\n    public void testRevoke() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {\n        assertTrue(subject.revoke(null, false));\n    }\n']",revoke;subject;false;null;Revoke;True;OAuth;Exception;Exception;System,7.8580342233181e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;5.820766091346741e-11;5.820766091346741e-11;4.3655745685100555e-11;-5.820766091346741e-11,5,5,"[-5.597410678863525, -4.884767055511475, -5.399913787841797, -6.517284870147705, -5.499703884124756, -0.02158215083181858]",0.9786490797996521
1,"['    @Test\n    public void testEmpty() {\n        assertEquals("""", builder.build());\n    }\n']",builder;Empty;Equals;build,8.149072527885437e-10;6.984919309616089e-10;-6.984919309616089e-10;-1.1641532182693481e-09,5,5,"[-5.607364654541016, -4.945110321044922, -5.444493770599365, -6.527753829956055, -5.509761810302734, -0.020833704620599747]",0.9793816804885864
1,"['    @Test\n    public void testAddRemove() {\n        builder.addScope(RedditScope.EDIT);\n        builder.removeScope(RedditScope.EDIT);\n        assertEquals("""", builder.build());\n    }\n']",Reddit;Remove;Reddit;builder;EDIT;add;Equals;Scope;remove;Scope,5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.514392852783203, -5.065378189086914, -5.474363803863525, -6.532182693481445, -5.442818641662598, -0.02052520029246807]",0.9796841144561768
1,"['    @Test\n    public void testAddRemoveMultiple() {\n        builder.addScopes(RedditScope.EDIT, RedditScope.MODPOSTS);\n        builder.removeScopes(RedditScope.EDIT, RedditScope.MODPOSTS, RedditScope.MODCONFIG);\n        assertEquals("""", builder.build());\n    }\n']",Reddit;Scopes;Multiple;MODPOST;Reddit;Scope;builder;Reddit;Equals;EDIT,9.89530235528946e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.7462298274040222e-10,5,5,"[-5.541187286376953, -5.044498443603516, -5.435488700866699, -6.5103325843811035, -5.434525012969971, -0.02079155668616295]",0.9794231057167053
1,"['    @Test\n    public void testAdd() {\n        builder.addScope(RedditScope.EDIT);\n        assertEquals(RedditScope.EDIT.value(), builder.build());\n        builder.removeScope(RedditScope.EDIT);\n    }\n']",Add;builder;EDIT;Scope;EDIT;Equals;builder;Scope;Scope;EDIT,1.280568540096283e-09;3.4924596548080444e-10;3.4924596548080444e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.526717185974121, -5.065023899078369, -5.48091983795166, -6.538504600524902, -5.442756652832031, -0.020439941436052322]",0.9797675609588623
1,"['    @Test\n    public void testAddDouble() {\n        builder.addScopes(RedditScope.EDIT, RedditScope.EDIT);\n        builder.addScope(RedditScope.EDIT);\n        assertEquals(RedditScope.EDIT.value(), builder.build());\n        builder.removeScope(RedditScope.EDIT);\n        assertEquals("""", builder.build());\n    }\n']",EDIT;Scopes;Reddit;EDIT;remove;Scope;Reddit;add;Scope;Equals,9.458744898438454e-10;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.509755611419678, -5.051062107086182, -5.458846092224121, -6.499973297119141, -5.4326171875, -0.020797977223992348]",0.9794167876243591
1,"['    @Test\n    public void testAddMultiple() {\n        builder.addScopes(RedditScope.EDIT, RedditScope.FLAIR);\n        assertTrue(\n                (RedditScope.EDIT.value() + RedditScope.SEPARATOR + RedditScope.FLAIR.value()).equals(builder.build()) \n                ||\n                (RedditScope.FLAIR.value() + RedditScope.SEPARATOR + RedditScope.EDIT.value()).equals(builder.build()) \n                );\n        builder.removeScopes(RedditScope.EDIT, RedditScope.FLAIR);\n    }\n']",FLAIR;EDIT;Reddit;equals;FLAIR;equals;Reddit;Reddit;Reddit;remove,1.1932570487260818e-09;1.1641532182693481e-09;8.731149137020111e-10;7.712515071034431e-10;7.566995918750763e-10;6.402842700481415e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.4858832359313965, -5.086217403411865, -5.473174095153809, -6.484951972961426, -5.4164204597473145, -0.02070632018148899]",0.9795066118240356
1,"['  @Test\n  public void findsTarget() {\n    final SootMethod sootMethod = prepareTarget(""<"" + TEST_TARGET_CLASS + "": void helloWorld()>"", TEST_TARGET_CLASS);\n    Assert.assertNotNull(""Could not find target method. System test setup seems to be incorrect."", sootMethod);\n    Assert.assertTrue(sootMethod.isConcrete());\n    Assert.assertNotNull(sootMethod.retrieveActiveBody());\n  }\n']",CLASS;hello;Target;oot;Method;Could;target;Not;be;to,1.7462298274040222e-09;1.6298145055770874e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.534842491149902, -4.985583782196045, -5.441789627075195, -6.512781143188477, -5.444860935211182, -0.021139079704880714]",0.9790828824043274
1,"['  @Test\n  public void findsTarget() {\n    String methodSignature = methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""unambiguousMethod"", """");\n    final SootMethod sootMethod = prepareTarget(methodSignature, TEST_TARGET_CLASS);\n    Assert.assertTrue(sootMethod.isConcrete());\n\n    Body body = sootMethod.retrieveActiveBody();\n    Assert.assertNotNull(body);\n    // validate individual method\n    body.validate();\n\n    for (Unit u : body.getUnits()) {\n      if (u instanceof AssignStmt) {\n        Value right = ((AssignStmt) u).getRightOp();\n        if (right instanceof InvokeExpr) {\n          SootMethod m = ((InvokeExpr) right).getMethodRef().resolve();\n          Assert.assertFalse(m.isPhantom());\n          Assert.assertTrue(m.isDeclared());\n          if (m.getName().equals(""invoke"")) {\n            Assert.assertTrue(m.isNative());\n          }\n        }\n      }\n    }\n  }\n']",finds;Declared;Concrete;unambiguous;Assign;Phantom;CLASS;ARGET;Units;Stmt,1.0477378964424133e-09;7.566995918750763e-10;5.238689482212067e-10;4.94765117764473e-10;4.220055416226387e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.6193447411060333e-10,5,5,"[-5.486450672149658, -5.091580867767334, -5.459404468536377, -6.474463939666748, -5.414396286010742, -0.02075512707233429]",0.979458749294281
1,"['  @Test\n  public void handlesAmbiguousMethod() {\n    String methodSignature = methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""ambiguousMethod"", """");\n    final SootMethod sootMethod = prepareTarget(methodSignature, TEST_TARGET_CLASS);\n    Assert.assertTrue(sootMethod.isConcrete());\n\n    Body body = sootMethod.retrieveActiveBody();\n    Assert.assertNotNull(body);\n    // validate individual method\n    body.validate();\n\n    for (Unit u : body.getUnits()) {\n      if (u instanceof AssignStmt) {\n        Value right = ((AssignStmt) u).getRightOp();\n        if (right instanceof InvokeExpr) {\n          SootMethod m = ((InvokeExpr) right).getMethodRef().resolve();\n          Assert.assertFalse(m.isPhantom());\n          Assert.assertTrue(m.isDeclared());\n          if (m.getName().equals(""invoke"")) {\n            Assert.assertTrue(m.isNative());\n          }\n        }\n      }\n    }\n  }\n']",handles;retrieve;Ambiguous;EST;Phantom;ambiguous;oot;get;Op;right,1.862645149230957e-09;8.731149137020111e-10;7.275957614183426e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.456271171569824, -5.089730262756348, -5.432267665863037, -6.447916507720947, -5.394168853759766, -0.021151218563318253]",0.9790709018707275
1,"['  @Test\n  public void nullAssignment() {\n    SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""nullAssignment""),\n            TEST_TARGET_CLASS);\n\n    Body body = target.retrieveActiveBody();\n\n    Optional<Unit> unit =\n        body.getUnits().stream()\n            .filter(\n                u ->\n                    u.toString()\n                        .equals(\n                            ""staticinvoke <soot.jimple.PropagateLineNumberTag: soot.jimple.PropagateLineNumberTag$A foo(soot.jimple.PropagateLineNumberTag$A)>(null)""))\n            .findFirst();\n\n    assertTrue(unit.isPresent());\n\n    List<ValueBox> useBoxes = unit.get().getUseBoxes();\n\n    assertEquals(2, useBoxes.size());\n    ValueBox valueBox = useBoxes.get(0);\n    assertTrue(valueBox instanceof ImmediateBox);\n    assertEquals(1, valueBox.getTags().size());\n    assertTrue(valueBox.getTags().get(0) instanceof LineNumberTag);\n    assertEquals(33, valueBox.getJavaSourceStartLineNumber());\n  }\n']",foo;staticinvoke;Number;Tag;soot;retrieve;Propagate;Number;Assignment;null,3.958120942115784e-09;2.7939677238464355e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.294591680169106e-10;8.149072527885437e-10,5,5,"[-5.446718215942383, -5.075817108154297, -5.436574935913086, -6.472393035888672, -5.421205520629883, -0.021099045872688293]",0.9791218638420105
1,"['  @Test\n  public void transitiveNullAssignment() {\n    SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""transitiveNullAssignment""),\n            TEST_TARGET_CLASS);\n\n    Body body = target.retrieveActiveBody();\n\n    // first call to foo\n    Optional<Unit> unit =\n        body.getUnits().stream()\n            .filter(\n                u ->\n                    u.toString()\n                        .equals(\n                            ""staticinvoke <soot.jimple.PropagateLineNumberTag: soot.jimple.PropagateLineNumberTag$A foo(soot.jimple.PropagateLineNumberTag$A)>(null)""))\n            .findFirst();\n\n    assertTrue(unit.isPresent());\n\n    List<ValueBox> useBoxes = unit.get().getUseBoxes();\n\n    assertEquals(2, useBoxes.size());\n    ValueBox valueBox = useBoxes.get(0);\n    assertTrue(valueBox instanceof ImmediateBox);\n    assertEquals(1, valueBox.getTags().size());\n    assertTrue(valueBox.getTags().get(0) instanceof LineNumberTag);\n    assertEquals(39, valueBox.getJavaSourceStartLineNumber());\n\n    // second call to foo\n    unit =\n        body.getUnits().stream()\n            .filter(\n                u ->\n                    u.toString()\n                        .equals(\n                            ""staticinvoke <soot.jimple.PropagateLineNumberTag: soot.jimple.PropagateLineNumberTag$A foo(soot.jimple.PropagateLineNumberTag$A)>(null)""))\n            .skip(1)\n            .findFirst();\n\n    assertTrue(unit.isPresent());\n    useBoxes = unit.get().getUseBoxes();\n    assertEquals(2, useBoxes.size());\n    valueBox = useBoxes.get(0);\n    assertTrue(valueBox instanceof ImmediateBox);\n    assertEquals(1, valueBox.getTags().size());\n    assertTrue(valueBox.getTags().get(0) instanceof LineNumberTag);\n    assertEquals(39, valueBox.getJavaSourceStartLineNumber());\n  }\n']",Propagate;Number;Line;oot;EST;Number;Assignment;Propagate;Body;Number,1.4551915228366852e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.420158386230469, -5.083551406860352, -5.427639961242676, -6.462728500366211, -5.40901517868042, -0.02127912826836109]",0.9789456725120544
1,"['    @Test\n    public void TestAsyncTaskBasicCG() {\n        prepareTarget(methodSigFromComponents(TARGET_CLASS, TARGET_METHOD), TARGET_CLASS);\n        boolean found = false;\n        for (Edge edge : Scene.v().getCallGraph()) {\n            //String sig = edge.getTgt().method().toString();\n            System.out.println(edge);\n            String sig = edge.getTgt().method().toString();\n\n            if (edge.toString().contains(""AHelper"") && edge.toString().contains(""handle""))\n                found = true;\n        }\n\n        //Assert.assertTrue(found);\n    }\n']",CG;Async;Basic;boolean;println;From;ARGET;CLASS;handle;Components,7.450580596923828e-09;4.6566128730773926e-09;1.979060471057892e-09;1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.5196003913879395, -5.01226806640625, -5.442244052886963, -6.482969760894775, -5.4605393409729, -0.020992357283830643]",0.9792264699935913
1,"['    @Test\n    public void TestAsyncTaskBasicCG() {\n        prepareTarget(methodSigFromComponents(TARGET_CLASS, TARGET_METHOD), TARGET_CLASS);\n\n        asyncFuncMaps.clear();\n        asyncFuncMaps.put(""doInBackground"", DO_IN_BG);\n        asyncFuncMaps.put(""onPreExecute"", ON_PRE_EXE);\n        asyncFuncMaps.put(""onPostExecute"", ON_POS_EXE);\n        asyncFuncMaps.put(""onProgressUpdate"", ON_PRO_UPD);\n\n        int full = 0, ret = 0;\n        for(String key: asyncFuncMaps.keySet())\n        {\n            full |= asyncFuncMaps.get(key);\n        }\n\n        for (Edge edge : Scene.v().getCallGraph()) {\n            String sig = edge.getTgt().method().toString();\n            for (String key : asyncFuncMaps.keySet()) {\n                if (sig.contains(key))\n                    ret |= asyncFuncMaps.get(key);\n            }\n        }\n\n        //The four functions shall all appear in call graph\n        Assert.assertEquals(ret, full);\n    }\n']",functions;sig;Async;Target;ret;Background;async;In;shall;PD,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.486255645751953, -5.057875156402588, -5.418509006500244, -6.45653772354126, -5.445867538452148, -0.021040216088294983]",0.9791795611381531
1,"['  @Test\n  public void anySubTypePointsToResolution() {\n    SootMethod entryPoint = prepareTarget(TEST_PTA_ENTRY_POINT, TEST_PACKAGE);\n    commonInvokeTest(entryPoint);\n  }\n']",entry;Resolution;Invoke;common;Sub;TEST;prepare;any;entry;POINT,1.862645149230957e-09;1.2369127944111824e-09;1.076841726899147e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.555777549743652, -4.903779029846191, -5.435564994812012, -6.544340133666992, -5.476003170013428, -0.021495932713150978]",0.978733479976654
1,"['  @Test\n  public void anySubTypeTypestateResolution() {\n    SootMethod entryPoint = prepareTarget(TEST_TYPESTATE_ENTRY_POINT, TEST_PACKAGE);\n    commonInvokeTest(entryPoint);\n  }\n']",EST;POINT;Sub;Method;ESTATE;TY;Point;ENTRY;any;Target,1.862645149230957e-09;1.0186340659856796e-09;5.820766091346741e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11,5,5,"[-5.564787864685059, -4.9064249992370605, -5.43500280380249, -6.540929317474365, -5.481716156005859, -0.021423593163490295]",0.9788041710853577
1,"['  @Test\n  public void iterator() {\n    // statements at the beginning of a for loop should have the line number as for the branching\n    // statement and not the last line number after the branch that leads outside the loop\n    SootMethod target = prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""iterator""), TEST_TARGET_CLASS);\n\n    Body body = target.retrieveActiveBody();\n\n    Optional<Unit> unit = body.getUnits().stream()\n        .filter(u -> u.toString().contains(""<java.util.Iterator: java.lang.Object next()>()"")).findFirst();\n\n    Assert.assertTrue(unit.isPresent());\n\n    Assert.assertEquals(31, unit.get().getJavaSourceStartLineNumber());\n  }\n']",statement;the;line;have;the;statements;as;Components;leads;method,4.470348358154297e-08;1.1175870895385742e-08;9.313225746154785e-09;8.381903171539307e-09;8.381903171539307e-09;7.450580596923828e-09;6.984919309616089e-09;6.51925802230835e-09;6.51925802230835e-09;6.51925802230835e-09,5,5,"[-5.5202460289001465, -5.038495063781738, -5.467400074005127, -6.52431058883667, -5.442165851593018, -0.020721150562167168]",0.9794920682907104
1,"['  @Test\n  public void localNaming() {\n    // This test ensures that local names are preserved in the Jimple code.\n    final String className = ""soot.asm.LocalNaming"";\n    final String[] params = { ""java.lang.String"", ""java.lang.Integer"", ""byte[]"", ""java.lang.StringBuilder"" };\n    SootMethod target = prepareTarget(methodSigFromComponents(className, ""void"", ""localNaming"", params), className);\n    Body body = target.retrieveActiveBody();\n    Set<String> localNames = body.getLocals().stream().map(Local::getName).collect(Collectors.toSet());\n\n    // All expected Local names are present\n    Assert.assertTrue(localNames.contains(""alpha""));\n    Assert.assertTrue(localNames.contains(""beta""));\n    Assert.assertTrue(localNames.contains(""gamma""));\n    Assert.assertTrue(localNames.contains(""delta""));\n    Assert.assertTrue(localNames.contains(""epsilon""));\n    Assert.assertTrue(localNames.contains(""zeta""));\n    Assert.assertTrue(localNames.contains(""eta""));\n    Assert.assertTrue(localNames.contains(""theta""));\n    Assert.assertTrue(localNames.contains(""iota""));\n    Assert.assertTrue(localNames.contains(""omega""));\n\n    // No Local name contains ""$stack""\n    Assert.assertTrue(localNames.stream().allMatch(n -> !n.contains(""$stack"")));\n  }\n']",aming;asm;method;the;Components;names;params;epsilon;Target;From,2.60770320892334e-08;5.587935447692871e-09;3.3760443329811096e-09;3.259629011154175e-09;2.7939677238464355e-09;2.5902409106492996e-09;2.3283064365386963e-09;1.6880221664905548e-09;1.6298145055770874e-09;1.3969838619232178e-09,5,5,"[-5.537178993225098, -5.049581527709961, -5.495156288146973, -6.515161037445068, -5.39578914642334, -0.020685186609625816]",0.9795272946357727
1,"['  @Test\n  public void testSilsDisabled() {\n    final String className = ""soot.asm.LocalNaming"";\n    final String[] params = {};\n    SootMethod target = prepareTarget(methodSigFromComponents(className, ""void"", ""test"", params), className);\n    Body body = target.retrieveActiveBody();\n    Set<String> localNames = body.getLocals().stream().map(Local::getName).collect(Collectors.toSet());\n    // test if all expected Local names are present\n    Assert.assertTrue(localNames.contains(""d""));\n    Assert.assertTrue(localNames.contains(""f""));\n    Assert.assertTrue(localNames.contains(""arr""));\n  }\n']",arr;params;Names;local;Body;Assert;Disabled;local;soot;True,1.4901161193847656e-08;1.3969838619232178e-08;1.1175870895385742e-08;1.1175870895385742e-08;6.51925802230835e-09;6.28642737865448e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.190951585769653e-09;3.725290298461914e-09,5,5,"[-5.503186225891113, -5.069343566894531, -5.464263439178467, -6.50184440612793, -5.408590793609619, -0.02078898809850216]",0.9794256091117859
1,"['  @Test\n  public void testInner() {\n    NopStmt[] nops = new NopStmt[6];\n    for (int i = 0; i < nops.length; i++) {\n      nops[i] = Jimple.v().newNopStmt();\n    }\n    UnitPatchingChain chainNew = new UnitPatchingChain(new HashChain<Unit>());\n    UnitContainer container = new UnitContainer(nops[0], new UnitContainer(nops[1], new UnitContainer(nops[2]), nops[3]),\n        nops[4], new UnitContainer(nops[5]));\n    AsmMethodSource.emitUnits(container, chainNew);\n    UnitPatchingChain chainOld = new UnitPatchingChain(new HashChain<Unit>());\n    oldEmitImplementation(container, chainOld);\n\n    Assert.assertEquals(chainOld.size(), chainNew.size());\n    Iterator<Unit> itO = chainOld.iterator();\n    Iterator<Unit> itN = chainNew.iterator();\n    while (itO.hasNext()) {\n      Unit oo = itO.next();\n      Unit nn = itN.next();\n      if (oo != nn) {\n        Assert.fail();\n      }\n    }\n  }\n']",op;Stmt;op;Units;Old;atching;New;Chain;Container;Container,1.2223608791828156e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;5.529727786779404e-10;5.238689482212067e-10;5.056790541857481e-10,5,5,"[-5.5016913414001465, -5.029821395874023, -5.432268142700195, -6.490590572357178, -5.470103740692139, -0.02093912474811077]",0.979278564453125
1,"['  @Test\n  public void nonInner() {\n    // statements at the beginning of a for loop should have the line number as for the branching\n    // statement and not the last line number after the branch that leads outside the loop\n    SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""method""), TEST_TARGET_CLASS);\n    assertEquals(2, Scene.v().getApplicationClasses().size());\n    assertFalse(target.getDeclaringClass().hasOuterClass());\n    assertFalse(target.getDeclaringClass().isInnerClass());\n    InnerClassTag tag = (InnerClassTag) target.getDeclaringClass().getTag(InnerClassTag.NAME);\n    // the class has inner classes\n    assertNotNull(tag);\n  }\n']",of;method;branch;TEST;Declaring;statement;Target;the;loop;beginning,8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.5150227546691895, -5.058844089508057, -5.483163356781006, -6.517570972442627, -5.43632698059082, -0.020577870309352875]",0.9796324372291565
1,"['  @Test\n  public void InnerStatic() {\n    SootMethod target2 =\n        prepareTarget(\n            methodSigFromComponents(TEST_TARGET_CLASS + ""$Inner"", ""void"", ""<init>""),\n            TEST_TARGET_CLASS + ""$Inner"");\n    assertEquals(2, Scene.v().getApplicationClasses().size());\n    assertTrue(target2.getDeclaringClass().hasOuterClass());\n    assertTrue(target2.getDeclaringClass().isInnerClass());\n    InnerClassTag tag2 = (InnerClassTag) target2.getDeclaringClass().getTag(InnerClassTag.NAME);\n    assertNotNull(tag2);\n    assertEquals(""soot/asm/ScopeFinderTarget$Inner"", tag2.getInnerClass());\n    assertEquals(""soot/asm/ScopeFinderTarget"", tag2.getOuterClass());\n    assertTrue(Modifier.isStatic(tag2.getAccessFlags()));\n  }\n']",ig;Components;Target;NAME;From;inder;Tag;TEST;has;Scope,1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.508371353149414, -5.060305595397949, -5.505472183227539, -6.526353359222412, -5.437607288360596, -0.020483272150158882]",0.9797249436378479
1,"['  @Test\n  public void InnerStaticInner() {\n    SootMethod target3 =\n        prepareTarget(\n            methodSigFromComponents(TEST_TARGET_CLASS + ""$Inner$InnerInner"", ""void"", ""method""),\n            TEST_TARGET_CLASS + ""$Inner$InnerInner"");\n    // one dummy\n    assertEquals(2, Scene.v().getApplicationClasses().size());\n    assertTrue(target3.getDeclaringClass().hasOuterClass());\n    assertTrue(target3.getDeclaringClass().isInnerClass());\n    InnerClassTag innerClassTag = null;\n    for (Tag tag : target3.getDeclaringClass().getTags()) {\n      // FIXME: we have multiple innerclasstags? for a parent it makes sense but for a child class?\n      if (tag instanceof InnerClassTag) {\n        boolean inner =\n            ((InnerClassTag) tag)\n                .getInnerClass()\n                .equals(""soot/asm/ScopeFinderTarget$Inner$InnerInner"");\n        if (inner) {\n          innerClassTag = (InnerClassTag) tag;\n          break;\n        }\n      }\n    }\n    assertNotNull(innerClassTag);\n    assertEquals(""soot/asm/ScopeFinderTarget$Inner$InnerInner"", innerClassTag.getInnerClass());\n    assertEquals(""soot/asm/ScopeFinderTarget$Inner"", innerClassTag.getOuterClass());\n    assertFalse(Modifier.isStatic(innerClassTag.getAccessFlags()));\n  }\n']",Static;method;tag;ARGET;boolean;Inner;Method;oot;ig;EST,1.5133991837501526e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.405483722686768, -5.115522384643555, -5.459657669067383, -6.458627700805664, -5.373559951782227, -0.0211768951267004]",0.9790457487106323
1,"['  @Test\n  public void testWriterToUTF8Buffered1() {\n    final String clazz = ""org.apache.xml.serializer.WriterToUTF8Buffered"";\n    final String[] params = { ""char[]"", ""int"", ""int"" };\n    runXalanTest(prepareTarget(methodSigFromComponents(clazz, ""void"", ""write"", params), clazz));\n  }\n']",xml;clazz;ig;run;params;char;alan;apache;Writer;clazz,1.862645149230957e-09;1.0477378964424133e-09;9.313225746154785e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.3096723705530167e-10,5,5,"[-5.555099010467529, -4.950887680053711, -5.465113162994385, -6.52115535736084, -5.493136882781982, -0.020982202142477036]",0.979236364364624
1,"['  @Test\n  public void testWriterToUTF8Buffered2() {\n    final String clazz = ""org.apache.xml.serializer.WriterToUTF8Buffered"";\n    final String[] params = { ""java.lang.String"" };\n    runXalanTest(prepareTarget(methodSigFromComponents(clazz, ""void"", ""write"", params), clazz));\n  }\n']",ig;run;org;params;From;clazz;params;method;serializer;clazz,8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.572673797607422, -4.94047212600708, -5.463675498962402, -6.538294315338135, -5.489893436431885, -0.020983368158340454]",0.9792352318763733
1,"['  @Test\n  public void testElemApplyTemplates() {\n    final String clazz = ""org.apache.xalan.templates.ElemApplyTemplates"";\n    final String[] params = { ""org.apache.xalan.transformer.TransformerImpl"" };\n    runXalanTest(prepareTarget(methodSigFromComponents(clazz, ""void"", ""transformSelectedNodes"", params), clazz));\n  }\n']",clazz;final;Components;org;Templates;clazz;templates;lem;Impl;Apply,8.149072527885437e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.554305076599121, -4.961732864379883, -5.460694313049316, -6.546942234039307, -5.4690656661987305, -0.020990606397390366]",0.979228138923645
1,"['  @Test\n  public void testXNodeSet() {\n    final String clazz = ""org.apache.xpath.objects.XNodeSet"";\n    final String[] params = { ""org.apache.xpath.objects.XObject"", ""org.apache.xpath.objects.Comparator"" };\n    runXalanTest(prepareTarget(methodSigFromComponents(clazz, ""boolean"", ""compare"", params), clazz));\n  }\n']",alan;clazz;From;method;path;Object;params;Comparator;Target;compare,2.561137080192566e-09;1.0622898116707802e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.5618977546691895, -4.9657301902771, -5.460015773773193, -6.552556037902832, -5.459191799163818, -0.02096959389746189]",0.9792487621307373
1,"['  @Test\n  public void testSilsEnabled() {\n    final String className = ""soot.asm.LocalNaming"";\n    final String[] params = {};\n    SootMethod target = prepareTarget(methodSigFromComponents(className, ""void"", ""test"", params), className);\n    Body body = target.retrieveActiveBody();\n    Set<String> localNames = body.getLocals().stream().map(Local::getName).collect(Collectors.toSet());\n    // test if all expected Local names are present\n    // currently d, f are not preserved.\n    Assert.assertTrue(localNames.contains(""d""));\n    Assert.assertTrue(localNames.contains(""f""));\n    Assert.assertTrue(localNames.contains(""arr""));\n  }\n']",Enabled;Active;aming;method;Locals;preserved;Body;Target;Local;Method,1.862645149230957e-09;1.4551915228366852e-09;1.1641532182693481e-09;7.566995918750763e-10;7.057678885757923e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.531682014465332, -5.0408830642700195, -5.47673225402832, -6.531430721282959, -5.438140392303467, -0.020626099780201912]",0.9795851707458496
1,"['  @Test\n  public void initializedInMethodRef() {\n    prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""<init>""), TEST_TARGET_CLASS);\n    SootClass sootClass = Scene.v().getSootClass(""java.util.ArrayDeque"");\n    assertEquals(SootClass.SIGNATURES, sootClass.resolvingLevel());\n  }\n']",TEST;ig;Ref;oot;CLASS;Scene;prepare;Deque;Target;resolving,3.259629011154175e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;9.89530235528946e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.517045021057129, -5.011965274810791, -5.44555139541626, -6.507503986358643, -5.445761680603027, -0.021016987040638924]",0.9792023301124573
1,"['  @Test\n  public void initializedInConstructor() {\n    prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""<init>""), TEST_TARGET_CLASS);\n    SootClass sootClass = Scene.v().getSootClass(""java.util.LinkedList"");\n    assertEquals(SootClass.SIGNATURES, sootClass.resolvingLevel());\n  }\n']",resolving;SIGNATURES;ARGET;ig;oot;CLASS;oot;ARGET;From;method,1.979060471057892e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10,5,5,"[-5.521876811981201, -5.0074567794799805, -5.447206497192383, -6.509600639343262, -5.447185516357422, -0.021011151373386383]",0.9792079329490662
1,"['  @Test\n  public void SubClassTest() throws FileNotFoundException, UnsupportedEncodingException {\t\t\n\t  \n\t  String testClass = ""soot.defaultInterfaceMethods.JavaNCSSCheck"";\n\t  String abstractClass = ""soot.defaultInterfaceDifferentPackage.AbstractCheck"";\n\t  String classToAnalyze = ""soot.defaultInterfaceDifferentPackage.AbstractCheck"";\n\t  final SootMethod target =\n\t\t        prepareTarget(\n\t\t            methodSigFromComponents(testClass, voidType, mainClass),\n\t\t            testClass,\n\t\t            classToAnalyze);\n\t\t\n\t\tArrayList<Edge> edges = GetCallGraph();\n\t\t\n\t\tassertEquals(edges.get(0).getTgt(), Scene.v().getMethod(""<soot.defaultInterfaceDifferentPackage.AbstractCheck: void log(java.lang.String,java.lang.String)>""));\t\t\n\t\t\n\t}\n']",From;Check;Scene;target;Class;default;Package;default;Package;Check,7.8580342233181e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.489641189575195, -5.067314624786377, -5.483211994171143, -6.51278829574585, -5.4410552978515625, -0.02061488851904869]",0.9795961380004883
1,"['  @Test\n  public void simpleDefaultInterfaceTest() {\n\n    String testClass = ""soot.defaultInterfaceMethods.SimpleDefaultInterface"";\n    String defaultClass = ""soot.defaultInterfaceMethods.Default"";\n    String classToAnalyze = ""soot.defaultInterfaceMethods.Default"";\n\n    final SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(testClass, voidType, mainClass),\n            testClass,\n            classToAnalyze);\n\n    SootMethod defaultMethod =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Default: void target()>"");\n    Body body = target.retrieveActiveBody();\n    SootMethod targetMethod = resolveMethodRefInBody(body.getUnits(), ""void target()"");\n    SootMethod resolvedMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(Scene.v().getRefType(testClass), defaultMethod.makeRef(), false);\n    SootMethod concreteImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), defaultMethod);\n    SootMethod concreteImplViaResolveMethod =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveMethod(Scene.v().getSootClass(testClass), defaultMethod, false);\n    Set<SootMethod> abstractImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), defaultMethod);\n\n    boolean edgePresent = checkInEdges(defaultMethod, target);\n    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();\n    /* Arguments for assert function */\n\n    assertEquals(defaultMethod, resolvedMethod);\n    assertEquals(defaultMethod, targetMethod);\n    assertEquals(defaultMethod.getName(), ""target"");\n    assertNotNull(defaultMethod);\n    assertTrue(reachableMethods.contains(defaultMethod));\n    assertTrue(edgePresent);\n    assertEquals(defaultMethod, concreteImpl);\n    assertEquals(concreteImpl, concreteImplViaResolveMethod);\n    assertTrue(\n        abstractImpl.contains(\n            Scene.v().getMethod(""<soot.defaultInterfaceMethods.Default: void target()>"")));\n  }\n']",Class;Interface;Class;Class;ierarchy;Type;Special;default;Methods;target,2.3283064365386963e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;6.402842700481415e-10;6.402842700481415e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10,5,5,"[-5.3921589851379395, -5.086242198944092, -5.462682723999023, -6.475166320800781, -5.388778209686279, -0.021309703588485718]",0.9789157509803772
1,"['  @Test\n  public void interfaceSameSignatureTest() {\n    String testClassSig = ""soot.defaultInterfaceMethods.InterfaceSameSignature"";\n    String interfaceReadSig = ""soot.defaultInterfaceMethods.Read"";\n    String interfaceWriteSig = ""soot.defaultInterfaceMethods.Write"";    \n\n    final SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(testClassSig, voidType, mainClass),\n            testClassSig,\n            interfaceReadSig,\n            interfaceWriteSig);\n\n    SootClass testClass = Scene.v().getSootClass(testClassSig);\n    SootClass interfaceRead = Scene.v().getSootClass(interfaceReadSig);\n    SootClass interfaceWrite = Scene.v().getSootClass(interfaceWriteSig);\n\n    SootMethod mainPrintMethod =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceSameSignature: void print()>"");\n    SootMethod readInterfacePrint =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Read: void print()>"");\n    SootMethod writeInterfacePrint =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Write: void print()>"");\n    SootMethod readInterfaceRead =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Read: void read()>"");\n    SootMethod writeInterfaceWrite =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Write: void write()>"");\n\n    Body mainBody = target.retrieveActiveBody();\n    Body mainPrintBody = mainPrintMethod.retrieveActiveBody();\n\n    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");\n    SootMethod refWritePrintMethod =\n        resolveMethodRefInBody(\n            mainPrintBody.getUnits(), ""soot.defaultInterfaceMethods.Write: void print()"");\n    SootMethod refReadPrintMethod =\n        resolveMethodRefInBody(\n            mainPrintBody.getUnits(), ""soot.defaultInterfaceMethods.Read: void print()"");\n    SootMethod refDefaultRead = resolveMethodRefInBody(mainBody.getUnits(), ""void read()"");\n    SootMethod refDefaultWrite = resolveMethodRefInBody(mainBody.getUnits(), ""void write()"");\n\n    SootMethod resolvedMainMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(\n                Scene.v().getRefType(testClassSig), mainPrintMethod.makeRef(), false);\n    SootMethod resolvedWritePrintMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(\n                Scene.v().getRefType(testClassSig), writeInterfacePrint.makeRef(), false);\n    SootMethod resolvedReadPrintMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(\n                Scene.v().getRefType(testClassSig), readInterfacePrint.makeRef(), false);\n    SootMethod resolvedDefaultReadMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(\n                Scene.v().getRefType(testClassSig), readInterfaceRead.makeRef(), false);\n    SootMethod resolvedDefaultWriteMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(\n                Scene.v().getRefType(testClassSig), writeInterfaceWrite.makeRef(), false);\n\n    FastHierarchy fh = Scene.v().getFastHierarchy();\n    SootMethod concreteImplMainPrint = fh.resolveConcreteDispatch(testClass, mainPrintMethod);\n    SootMethod concreteImplWritePrint = fh.resolveConcreteDispatch(testClass, refWritePrintMethod);\n    SootMethod concreteImplReadPrint = fh.resolveConcreteDispatch(testClass, refReadPrintMethod);\n    SootMethod concreteImplDefaultRead = fh.resolveConcreteDispatch(testClass, refDefaultRead);\n    SootMethod concreteImplDefaultWrite = fh.resolveConcreteDispatch(testClass, refDefaultWrite);\n\n    assertEquals(\n        Sets.newHashSet(readInterfaceRead),\n        fh.resolveAbstractDispatch(interfaceRead, refDefaultRead));\n    assertEquals(\n        Sets.newHashSet(writeInterfaceWrite),\n        fh.resolveAbstractDispatch(interfaceWrite, refDefaultWrite));\n    assertEquals(\n        Sets.newHashSet(mainPrintMethod),\n        fh.resolveAbstractDispatch(interfaceRead, refReadPrintMethod));\n    assertEquals(\n        Sets.newHashSet(mainPrintMethod),\n        fh.resolveAbstractDispatch(interfaceWrite, refWritePrintMethod));\n\n    /* Edges should be present */\n    boolean edgeMainPrintToReadPrint = checkInEdges(readInterfacePrint, mainPrintMethod);\n    boolean edgeMainPrintToWritePrint = checkInEdges(writeInterfacePrint, mainPrintMethod);\n    boolean edgeMainMethodToPrint = checkInEdges(mainPrintMethod, target);\n    boolean edgeMainMethodToReadMethod = checkInEdges(readInterfaceRead, target);\n    boolean edgeMainMethodToWriteMethod = checkInEdges(writeInterfaceWrite, target);\n\n    /* Edges should not be present */\n    boolean edgeMainMethodToReadPrint = checkInEdges(readInterfacePrint, target);\n    boolean edgeMainMethodToWritePrint = checkInEdges(writeInterfacePrint, target);\n\n    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();\n\n    /* Arguments for assert function */\n    Map<SootMethod, String> targetMethods =\n        new HashMap<SootMethod, String>() {\n          {\n            put(mainPrintMethod, ""print"");\n            put(readInterfacePrint, ""print"");\n            put(writeInterfacePrint, ""print"");\n            put(readInterfaceRead, ""read"");\n            put(writeInterfaceWrite, ""write"");\n          }\n        };\n\n    Map<SootMethod, SootMethod> resolvedMethods =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(mainPrintMethod, resolvedMainMethod);\n            put(mainPrintMethod, resolvedWritePrintMethod);\n            put(mainPrintMethod, resolvedReadPrintMethod);\n            put(readInterfaceRead, resolvedDefaultReadMethod);\n            put(writeInterfaceWrite, resolvedDefaultWriteMethod);\n          }\n        };\n\n    Map<SootMethod, SootMethod> methodRef =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(mainPrintMethod, refMainMethod);\n            put(writeInterfacePrint, refWritePrintMethod);\n            put(readInterfacePrint, refReadPrintMethod);\n            put(readInterfaceRead, refDefaultRead);\n            put(writeInterfaceWrite, refDefaultWrite);\n          }\n        };\n\n    Map<SootMethod, SootMethod> concreteImpl =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(mainPrintMethod, concreteImplMainPrint);\n            put(mainPrintMethod, concreteImplWritePrint);\n            put(mainPrintMethod, concreteImplReadPrint);\n            put(readInterfaceRead, concreteImplDefaultRead);\n            put(writeInterfaceWrite, concreteImplDefaultWrite);\n          }\n        };\n\n    ArrayList<Boolean> edgePresent =\n        new ArrayList<Boolean>() {\n          {\n            add(edgeMainPrintToReadPrint);\n            add(edgeMainPrintToWritePrint);\n            add(edgeMainMethodToPrint);\n            add(edgeMainMethodToReadMethod);\n            add(edgeMainMethodToWriteMethod);\n          }\n        };\n\n    ArrayList<Boolean> edgeNotPresent =\n        new ArrayList<Boolean>() {\n          {\n            add(edgeMainMethodToReadPrint);\n            add(edgeMainMethodToWritePrint);\n          }\n        };\n\n    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {\n      assertNotNull(targetMethod.getKey());\n    }\n    for (Map.Entry<SootMethod, SootMethod> virtualResolvedMethod : resolvedMethods.entrySet()) {\n      assertEquals(virtualResolvedMethod.getKey(), virtualResolvedMethod.getValue());\n    }\n    for (Map.Entry<SootMethod, SootMethod> methodRef1 : methodRef.entrySet()) {\n      assertEquals(methodRef1.getKey(), methodRef1.getValue());\n    }\n    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {\n      assertEquals(targetMethod.getKey().getName(), targetMethod.getValue());\n    }\n    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {\n      assertTrue(reachableMethods.contains(targetMethod.getKey()));\n    }\n    for (boolean isPresent : edgePresent) {\n      assertTrue(isPresent);\n    }\n    for (boolean notPresent : edgeNotPresent) {\n      assertFalse(notPresent);\n    }\n    for (Map.Entry<SootMethod, SootMethod> concreteImpl1 : concreteImpl.entrySet()) {\n      assertEquals(concreteImpl1.getKey(), concreteImpl1.getValue());\n    }\n  }\n']",ig;Class;method;Class;ig;default;Interface;main;Class;Body,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.4448418617248535, -5.046937465667725, -5.434561729431152, -6.46368932723999, -5.427839756011963, -0.02128729782998562]",0.9789376854896545
1,"['  @Test\n  public void classInterfaceWithSameSignatureTest() {\n    String testClass = ""soot.defaultInterfaceMethods.ClassInterfaceSameSignature"";\n    String defaultClass = ""soot.defaultInterfaceMethods.HelloWorld"";\n\n    final SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(testClass, voidType, mainClass),\n            testClass,\n            defaultClass);\n\n    SootMethod mainPrintMethod =\n        Scene.v()\n            .getMethod(""<soot.defaultInterfaceMethods.ClassInterfaceSameSignature: void print()>"");\n    SootMethod defaultPrintMethod =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.HelloWorld: void print()>"");\n\n    Body mainBody = target.retrieveActiveBody();\n    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");\n    SootMethod resolvedMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(\n                Scene.v().getRefType(testClass), defaultPrintMethod.makeRef(), false);\n    SootMethod concreteImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), defaultPrintMethod);\n    Set<SootMethod> abstractImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), defaultPrintMethod);\n    boolean edgeMainMethodToMainPrint = checkInEdges(mainPrintMethod, target);\n    boolean edgeMainPrintToDefaultPrint = checkInEdges(defaultPrintMethod, target);\n    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();\n\n    Map<SootMethod, String> targetMethods =\n        new HashMap<SootMethod, String>() {\n          {\n            put(mainPrintMethod, ""print"");\n            put(defaultPrintMethod, ""print"");\n          }\n        };\n\n    ArrayList<Boolean> edgePresent =\n        new ArrayList<Boolean>() {\n          {\n            add(edgeMainMethodToMainPrint);\n          }\n        };\n\n    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {\n      assertNotNull(targetMethod.getKey());\n    }\n    assertEquals(mainPrintMethod, resolvedMethod);\n    assertEquals(mainPrintMethod, refMainMethod);\n    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {\n      assertEquals(targetMethod.getKey().getName(), targetMethod.getValue());\n    }\n\n    assertTrue(reachableMethods.contains(mainPrintMethod));\n\n    for (boolean isPresent : edgePresent) {\n      assertTrue(isPresent);\n    }\n    assertEquals(mainPrintMethod, concreteImpl);\n    assertTrue(\n        abstractImpl.contains(\n            Scene.v()\n                .getMethod(\n                    ""<soot.defaultInterfaceMethods.ClassInterfaceSameSignature: void print()>"")));\n  }\n']",Signature;Special;Components;default;Units;Class;Method;Ref;Abstract;prepare,8.731149137020111e-10;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.385061264038086, -5.096421241760254, -5.467894554138184, -6.475554466247559, -5.37717866897583, -0.021310171112418175]",0.978915274143219
1,"['  @Test\n  public void superClassInterfaceWithSameSignatureTest() {\n    String testClass = ""soot.defaultInterfaceMethods.SuperClassInterfaceSameSignature"";\n    String defaultClass = ""soot.defaultInterfaceMethods.PrintInterface"";\n    String defaultSuperClass = ""soot.defaultInterfaceMethods.DefaultPrint"";\n    String superClassImplementsInterface = ""soot.defaultInterfaceMethods.SuperClassImplementsInterface"";\n\n    final SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(testClass, voidType, mainClass),\n            testClass,\n            defaultClass,\n            superClassImplementsInterface);\n\n    SootMethod defaultSuperMainMethod =\n        Scene.v()\n            .getMethod(""<soot.defaultInterfaceMethods.SuperClassImplementsInterface: void main()>"");\n    SootMethod mainMethod =\n        Scene.v()\n            .getMethod(\n                ""<soot.defaultInterfaceMethods.SuperClassImplementsInterface: void print()>"");\n    SootMethod defaultMethod =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.PrintInterface: void print()>"");\n    SootMethod defaultSuperClassMethod =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.DefaultPrint: void print()>"");\n\n    Body mainBody = target.retrieveActiveBody();\n    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");\n\n    SootMethod resolvedMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(Scene.v().getRefType(testClass), defaultMethod.makeRef(), false);\n    SootMethod resolvedSuperClassDefaultMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(\n                Scene.v().getRefType(testClass), defaultSuperClassMethod.makeRef(), false);\n\n    SootMethod concreteImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), defaultMethod);\n\n    Set<SootMethod> abstractImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), defaultMethod);\n    Set<SootMethod> abstractImplSuperClass =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(\n                Scene.v().getSootClass(defaultSuperClass), defaultSuperClassMethod);\n\n    boolean edgeMainToSuperClassPrint = checkInEdges(mainMethod, target);\n    boolean edgeMainToDefaultPrint = checkInEdges(defaultMethod, target);\n    boolean edgeMainToSuperDefaultPrint = checkInEdges(defaultSuperClassMethod, target);\n    boolean edgeSuperMainToSuperPrint =\n        checkInEdges(defaultSuperClassMethod, defaultSuperMainMethod);\n\n    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();\n\n    List<SootMethod> targetMethods =\n        new ArrayList<SootMethod>() {\n          {\n            add(mainMethod);\n            add(defaultMethod);\n            add(defaultSuperClassMethod);\n          }\n        };\n\n    ArrayList<Boolean> edgeNotPresent =\n        new ArrayList<Boolean>() {\n          {\n            add(edgeMainToDefaultPrint);\n            add(edgeMainToSuperDefaultPrint);\n            add(edgeSuperMainToSuperPrint);\n          }\n        };\n\n    Map<SootMethod, SootMethod> resolvedMethods =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(mainMethod, resolvedMethod);\n            put(resolvedSuperClassDefaultMethod, resolvedMethod);\n          }\n        };\n\n    for (SootMethod targetMethod : targetMethods) {\n      assertNotNull(targetMethod);\n    }\n    assertEquals(targetMethods.get(0), refMainMethod);\n    assertEquals(targetMethods.get(0).getName(), ""print"");\n    assertTrue(edgeMainToSuperClassPrint);\n    for (boolean notPresent : edgeNotPresent) {\n      assertFalse(notPresent);\n    }\n    assertEquals(targetMethods.get(0), concreteImpl);\n    assertNotEquals(targetMethods.get(1), concreteImpl);\n    assertTrue(\n        abstractImpl.contains(\n            Scene.v()\n                .getMethod(\n                    ""<soot.defaultInterfaceMethods.SuperClassImplementsInterface: void print()>"")));\n    assertTrue(\n        abstractImplSuperClass.contains(\n            Scene.v()\n                .getMethod(\n                    ""<soot.defaultInterfaceMethods.SuperClassImplementsInterface: void print()>"")));\n  }\n']",Signature;Same;Main;ig;super;Print;Interface;default;Implements;resolve,2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.384208634495735e-10;4.802132025361061e-10;3.637978807091713e-10,5,5,"[-5.404486656188965, -5.082326889038086, -5.447267532348633, -6.456816673278809, -5.371832370758057, -0.02145381271839142]",0.9787746667861938
1,"['  @Test\n  public void derivedInterfacesTest() {\n    String testClassSig = ""soot.defaultInterfaceMethods.DerivedInterfaces"";\n    String defaultInterfaceOneSig = ""soot.defaultInterfaceMethods.InterfaceTestOne"";\n    String defaultInterfaceTwoSig = ""soot.defaultInterfaceMethods.InterfaceTestTwo"";\n\n    final SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(testClassSig, voidType, mainClass),\n            testClassSig,\n            defaultInterfaceOneSig,\n            defaultInterfaceTwoSig);\n\n    FastHierarchy fh = Scene.v().getFastHierarchy();\n    SootClass testClass = Scene.v().getSootClass(testClassSig);\n    SootClass defaultInterfaceOne = Scene.v().getSootClass(defaultInterfaceOneSig);\n    SootClass defaultInterfaceTwo = Scene.v().getSootClass(defaultInterfaceTwoSig);\n\n    SootMethod interfaceOnePrint =\n        Scene.v().getMethod(methodSigFromComponents(defaultInterfaceOneSig, ""void print()""));\n    SootMethod interfaceTwoPrint =\n        Scene.v().getMethod(methodSigFromComponents(defaultInterfaceTwoSig, ""void print()""));\n\n    SootMethod refMainMethod =\n        resolveMethodRefInBody(target.retrieveActiveBody().getUnits(), ""void print()"");\n\n    SootMethod interfaceOneResolvedMethod =\n        VirtualCalls.v().resolveNonSpecial(testClass.getType(), interfaceOnePrint.makeRef(), false);\n    SootMethod interfaceTwoResolvedMethod =\n        VirtualCalls.v().resolveNonSpecial(testClass.getType(), interfaceTwoPrint.makeRef(), false);\n\n    SootMethod concreteImplInterfaceOne = fh.resolveConcreteDispatch(testClass, interfaceOnePrint);\n    SootMethod concreteImplInterfaceTwo = fh.resolveConcreteDispatch(testClass, interfaceTwoPrint);\n\n    Set<SootMethod> abstractImplInterfaceOne =\n        fh.resolveAbstractDispatch(defaultInterfaceOne, interfaceOnePrint);\n\n    boolean edgeMainToInterfaceTwoPrint = checkInEdges(interfaceTwoPrint, target);\n    boolean edgeMainToInterfaceOnePrint = checkInEdges(interfaceOnePrint, target);\n\n    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();\n\n    List<SootMethod> targetMethods =\n        new ArrayList<SootMethod>() {\n          {\n            add(interfaceOnePrint);\n            add(interfaceTwoPrint);\n          }\n        };\n\n    Map<SootMethod, SootMethod> resolvedMethods =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(interfaceTwoPrint, interfaceOneResolvedMethod);\n            put(interfaceTwoPrint, interfaceTwoResolvedMethod);\n          }\n        };\n\n    Map<SootMethod, SootMethod> concreteImplTrue =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(interfaceTwoPrint, concreteImplInterfaceOne);\n            put(interfaceTwoPrint, concreteImplInterfaceTwo);\n          }\n        };\n\n    Map<SootMethod, SootMethod> concreteImplNotTrue =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(interfaceOnePrint, concreteImplInterfaceOne);\n            put(interfaceOnePrint, concreteImplInterfaceTwo);\n          }\n        };\n\n    for (SootMethod targetMethod : targetMethods) {\n      Assert.assertNotNull(targetMethod);\n    }\n    assertEquals(targetMethods.get(1), refMainMethod);\n    assertEquals(targetMethods.get(1).getName(), ""print"");\n    assertFalse(edgeMainToInterfaceOnePrint);\n    assertTrue(edgeMainToInterfaceTwoPrint);\n    assertTrue(reachableMethods.contains(targetMethods.get(1)));\n    assertFalse(reachableMethods.contains(targetMethods.get(0)));\n    for (Map.Entry<SootMethod, SootMethod> virtualResolvedMethod : resolvedMethods.entrySet()) {\n      assertEquals(virtualResolvedMethod.getKey(), virtualResolvedMethod.getValue());\n    }\n    for (Map.Entry<SootMethod, SootMethod> concreteImpl : concreteImplTrue.entrySet()) {\n      assertEquals(concreteImpl.getKey(), concreteImpl.getValue());\n    }\n    for (Map.Entry<SootMethod, SootMethod> concreteImpl : concreteImplNotTrue.entrySet()) {\n      assertNotEquals(concreteImpl.getKey(), concreteImpl.getValue());\n    }\n    assertEquals(Sets.newHashSet(targetMethods.get(1)), abstractImplInterfaceOne);\n\n    assertEquals(\n        Sets.newHashSet(targetMethods.get(1)),\n        fh.resolveAbstractDispatch(defaultInterfaceTwo, interfaceTwoPrint));\n  }\n']",ig;Main;make;Methods;Components;Interface;Class;ig;main;Interfaces,1.979060471057892e-09;1.862645149230957e-09;9.313225746154785e-10;8.149072527885437e-10;5.748006515204906e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.405891418457031, -5.0714111328125, -5.453536033630371, -6.471861839294434, -5.398125648498535, -0.021342260763049126]",0.9788838624954224
1,"['  @Test\n  public void interfaceInheritanceTest() {\n    String testClass = ""soot.defaultInterfaceMethods.InterfaceInheritance"";\n    String defaultClass = ""soot.defaultInterfaceMethods.InterfaceTestA"";\n    String defaultInterface = ""soot.defaultInterfaceMethods.InterfaceTestB"";\n\n    final SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(testClass, voidType, mainClass),\n            testClass,\n            defaultClass,\n            defaultInterface);\n\n    SootMethod interfaceTestAPrint =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceTestA: void print()>"");\n    SootMethod mainPrintMessageMethod =\n        Scene.v()\n            .getMethod(""<soot.defaultInterfaceMethods.InterfaceInheritance: void printMessage()>"");\n    Body mainBody = target.retrieveActiveBody();\n    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");\n    SootMethod resolvedMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(\n                Scene.v().getRefType(testClass), interfaceTestAPrint.makeRef(), false);\n    SootMethod concreteImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), interfaceTestAPrint);\n    Set<SootMethod> abstractImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), interfaceTestAPrint);\n\n    boolean edgeMainToInterfaceTestAPrint = checkInEdges(interfaceTestAPrint, target);\n    boolean edgeMainToMainPrintMessage = checkInEdges(mainPrintMessageMethod, target);\n    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();\n\n    List<SootMethod> targetMethods =\n        new ArrayList<SootMethod>() {\n          {\n            add(interfaceTestAPrint);\n            add(mainPrintMessageMethod);\n          }\n        };\n\n    for (SootMethod targetMethod : targetMethods) {\n      Assert.assertNotNull(targetMethod);\n    }\n    assertEquals(targetMethods.get(0), refMainMethod);\n    assertEquals(targetMethods.get(0).getName(), ""print"");\n    assertTrue(edgeMainToInterfaceTestAPrint);\n    assertFalse(edgeMainToMainPrintMessage);\n    assertTrue(reachableMethods.contains(targetMethods.get(0)));\n    assertFalse(reachableMethods.contains(targetMethods.get(1)));\n    assertEquals(targetMethods.get(0), resolvedMethod);\n    assertEquals(targetMethods.get(0), concreteImpl);\n    assertTrue(abstractImpl.contains(targetMethods.get(0)));\n  }\n']",APrint;interface;Inheritance;Interface;Inheritance;From;ig;method;Dispatch;soot,5.9371814131736755e-09;4.6566128730773926e-09;2.8230715543031693e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.280568540096283e-09;1.280568540096283e-09;9.89530235528946e-10;9.604264050722122e-10,5,5,"[-5.382633686065674, -5.099535942077637, -5.4484686851501465, -6.457658767700195, -5.36613655090332, -0.021467581391334534]",0.9787611961364746
1,"['  @Test\n  public void interfaceReAbstractionTest() {\n    String testClass = ""soot.defaultInterfaceMethods.InterfaceReAbstracting"";\n    String defaultClass = ""soot.defaultInterfaceMethods.InterfaceA"";\n    String defaultInterface = ""soot.defaultInterfaceMethods.InterfaceB"";\n\n    final SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(testClass, ""void"", ""main""),\n            testClass,\n            defaultClass,\n            defaultInterface);\n\n    SootMethod interfaceAPrint =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceA: void print()>"");\n    SootMethod mainMethodPrint =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceReAbstracting: void print()>"");\n\n    Body mainBody = target.retrieveActiveBody();\n    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");\n    SootMethod resolvedMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(Scene.v().getRefType(testClass), interfaceAPrint.makeRef(), false);\n    SootMethod concreteImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), interfaceAPrint);\n    Set<SootMethod> abstractImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), interfaceAPrint);\n\n    boolean edgeMainMethodToMainPrint = checkInEdges(mainMethodPrint, target);\n    boolean edgeMainMethodToInterfaceAPrint = checkInEdges(interfaceAPrint, target);\n    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();\n\n    List<SootMethod> targetMethods =\n        new ArrayList<SootMethod>() {\n          {\n            add(mainMethodPrint);\n            add(interfaceAPrint);\n          }\n        };\n\n    for (SootMethod targetMethod : targetMethods) {\n      Assert.assertNotNull(targetMethod);\n    }\n    assertEquals(targetMethods.get(0), refMainMethod);\n    assertEquals(targetMethods.get(0).getName(), ""print"");\n    assertTrue(edgeMainMethodToMainPrint);\n    assertFalse(edgeMainMethodToInterfaceAPrint);\n    assertTrue(reachableMethods.contains(targetMethods.get(0)));\n    assertFalse(reachableMethods.contains(targetMethods.get(1)));\n    assertEquals(targetMethods.get(0), resolvedMethod);\n    assertEquals(targetMethods.get(0), concreteImpl);\n    assertNotEquals(targetMethods.get(1), concreteImpl);\n    assertEquals(\n        Sets.newHashSet(\n            Scene.v()\n                .getMethod(""<soot.defaultInterfaceMethods.InterfaceReAbstracting: void print()>"")),\n        abstractImpl);\n  }\n']",Abstraction;Interface;Scene;soot;APrint;Virtual;Components;default;Class;method,2.270098775625229e-09;9.022187441587448e-10;7.8580342233181e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10,5,5,"[-5.401300430297852, -5.067510604858398, -5.447150707244873, -6.466004848480225, -5.399158477783203, -0.021420909091830254]",0.9788069128990173
1,"['  @Test\n  public void superClassPreferenceOverDefaultMethodTest() {\n    String testClass = ""soot.defaultInterfaceMethods.SuperClassPreferenceOverDefaultMethod"";\n    String defaultInterfaceOne = ""soot.defaultInterfaceMethods.InterfaceOne"";\n    String defaultInterfaceTwo = ""soot.defaultInterfaceMethods.InterfaceTwo"";\n    String defaultSuperClass = ""soot.defaultInterfaceMethods.SuperClass"";\n\n    final SootMethod target =\n        prepareTarget(\n            methodSigFromComponents(testClass, voidType, mainClass),\n            testClass,\n            defaultInterfaceOne,\n            defaultInterfaceTwo,\n            defaultSuperClass);\n\n    SootMethod interfaceOnePrint =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceOne: void print()>"");\n    SootMethod interfaceTwoPrint =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceTwo: void print()>"");\n    SootMethod superClassPrint =\n        Scene.v().getMethod(""<soot.defaultInterfaceMethods.SuperClass: void print()>"");\n\n    Body mainBody = target.retrieveActiveBody();\n    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");\n\n    SootMethod resolvedInterfaceOneDefaultMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(Scene.v().getRefType(testClass), interfaceOnePrint.makeRef(), false);\n    SootMethod resolvedInterfaceTwoDefaultMethod =\n        VirtualCalls.v()\n            .resolveNonSpecial(Scene.v().getRefType(testClass), interfaceTwoPrint.makeRef(), false);\n\n    SootMethod concreteImplInterfaceOne =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), interfaceOnePrint);\n    SootMethod concreteImplInterfaceTwo =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), interfaceTwoPrint);\n\n    Set<SootMethod> abstractImplInterfaceOne =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(\n                Scene.v().getSootClass(defaultInterfaceOne), interfaceOnePrint);\n    Set<SootMethod> abstractImplInterfaceTwo =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(\n                Scene.v().getSootClass(defaultInterfaceTwo), interfaceTwoPrint);\n\n    boolean edgeMainToInterfaceOnePrint = checkInEdges(interfaceOnePrint, target);\n    boolean edgeMainToInterfaceTwoPrint = checkInEdges(interfaceTwoPrint, target);\n    boolean edgeMainToSuperClassPrint = checkInEdges(superClassPrint, target);\n\n    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();\n\n    List<SootMethod> targetMethods =\n        new ArrayList<SootMethod>() {\n          {\n            add(superClassPrint);\n            add(interfaceOnePrint);\n            add(interfaceTwoPrint);\n          }\n        };\n\n    ArrayList<Boolean> edgeNotPresent =\n        new ArrayList<Boolean>() {\n          {\n            add(edgeMainToInterfaceOnePrint);\n            add(edgeMainToInterfaceTwoPrint);\n          }\n        };\n\n    Map<SootMethod, SootMethod> resolvedMethods =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(superClassPrint, resolvedInterfaceOneDefaultMethod);\n            put(superClassPrint, resolvedInterfaceTwoDefaultMethod);\n          }\n        };\n\n    Map<SootMethod, SootMethod> concreteImplTrue =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(superClassPrint, concreteImplInterfaceOne);\n            put(superClassPrint, concreteImplInterfaceTwo);\n          }\n        };\n\n    Map<SootMethod, SootMethod> concreteImplNotTrue =\n        new HashMap<SootMethod, SootMethod>() {\n          {\n            put(interfaceOnePrint, concreteImplInterfaceOne);\n            put(interfaceOnePrint, concreteImplInterfaceTwo);\n          }\n        };\n\n    for (SootMethod targetMethod : targetMethods) {\n      assertNotNull(targetMethod);\n    }\n    assertEquals(targetMethods.get(0), refMainMethod);\n    assertEquals(targetMethods.get(0).getName(), ""print"");\n    assertTrue(edgeMainToSuperClassPrint);\n    for (boolean notPresent : edgeNotPresent) {\n      assertFalse(notPresent);\n    }\n    assertTrue(reachableMethods.contains(targetMethods.get(0)));\n    assertFalse(reachableMethods.contains(targetMethods.get(1)));\n    assertFalse(reachableMethods.contains(targetMethods.get(2)));\n    for (Map.Entry<SootMethod, SootMethod> virtualResolvedMethod : resolvedMethods.entrySet()) {\n      assertEquals(virtualResolvedMethod.getKey(), virtualResolvedMethod.getValue());\n    }\n    for (Map.Entry<SootMethod, SootMethod> concreteImpl : concreteImplTrue.entrySet()) {\n      assertEquals(concreteImpl.getKey(), concreteImpl.getValue());\n    }\n    for (Map.Entry<SootMethod, SootMethod> concreteImpl : concreteImplNotTrue.entrySet()) {\n      assertNotEquals(concreteImpl.getKey(), concreteImpl.getValue());\n    }\n    assertTrue(\n        abstractImplInterfaceOne.contains(\n            Scene.v().getMethod(""<soot.defaultInterfaceMethods.SuperClass: void print()>"")));\n    assertTrue(\n        abstractImplInterfaceTwo.contains(\n            Scene.v().getMethod(""<soot.defaultInterfaceMethods.SuperClass: void print()>"")));\n  }\n']",ig;super;Class;ref;soot;Print;Method;Class;Units;Type,1.280568540096283e-09;8.440110832452774e-10;8.149072527885437e-10;6.402842700481415e-10;5.966285243630409e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.37749719619751, -5.107497692108154, -5.464824676513672, -6.46169376373291, -5.358431816101074, -0.021401422098279]",0.9788259863853455
1,"['  @Test\n  public void maximallySpecificSuperInterface() {\n    String targetClassName = ""soot.defaultInterfaceMethods.MaximallySpecificSuperInterface"";\n    String superClass = ""soot.defaultInterfaceMethods.B"";\n    String subInterface = ""soot.defaultInterfaceMethods.C"";\n    String superInterface = ""soot.defaultInterfaceMethods.D"";\n\n    final SootMethod mainMethod =\n        prepareTarget(\n            methodSigFromComponents(targetClassName, voidType, mainClass),\n            targetClassName,\n            superClass,\n            subInterface,\n            superInterface);\n\n    SootClass testClass = mainMethod.getDeclaringClass();\n\n    SootMethod subInterfacePrint =\n        Scene.v().getMethod(methodSigFromComponents(subInterface, ""void print()""));\n    SootMethod superInterfacePrint =\n        Scene.v().getMethod(methodSigFromComponents(superInterface, ""void print()""));\n\n    SootMethod methodRefResolved =\n        resolveMethodRefInBody(mainMethod.retrieveActiveBody().getUnits(), ""void print()"");\n    assertEquals(subInterfacePrint, methodRefResolved);\n\n    SootMethod virtualCallsResolved =\n        VirtualCalls.v()\n            .resolveNonSpecial(testClass.getType(), superInterfacePrint.makeRef(), false);\n    assertEquals(subInterfacePrint, virtualCallsResolved);\n\n    SootMethod concreteImplI1 =\n        Scene.v().getFastHierarchy().resolveConcreteDispatch(testClass, superInterfacePrint);\n    assertEquals(subInterfacePrint, concreteImplI1);\n\n    Set<SootMethod> abstractImpl =\n        Scene.v()\n            .getFastHierarchy()\n            .resolveAbstractDispatch(superInterfacePrint.getDeclaringClass(), superInterfacePrint);\n    assertEquals(Sets.newHashSet(subInterfacePrint), abstractImpl);\n\n    assertTrue(checkInEdges(subInterfacePrint, mainMethod));\n    assertTrue(Scene.v().getReachableMethods().contains(subInterfacePrint));\n  }\n']",Target;target;Super;Class;Body;resolve;Super;Concrete;resolve;From,5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.128661774098873e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.3933892250061035, -5.082946300506592, -5.473120212554932, -6.473670482635498, -5.383970260620117, -0.02130468562245369]",0.9789206385612488
1,"['  @Test\n  public void testCachingInvalidation() throws Exception {\n    SootMethod m1 = prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""m1""), TEST_TARGET_CLASS);\n    final SootClass clas = m1.getDeclaringClass();\n\n    // There are only 3 methods in the class originally.\n    Assert.assertEquals(Arrays.asList(""<init>"", ""m1"", ""m2""),\n        clas.getMethods().stream().map(SootMethod::getName).sorted().collect(Collectors.toList()));\n\n    // Ensure the previous value of SootMethodRefImpl#resolveCache\n    // is not used if the referenced method itself is modified.\n    final Body b = m1.retrieveActiveBody();\n    final SootMethodRef mRef = getMethodRef(b);\n    Assert.assertEquals(""m2"", mRef.getName());\n\n    // Get the original referenced method appearing in the test source (i.e. ""m2"")\n    final SootMethod origM = mRef.resolve();\n    Assert.assertTrue(!origM.isPhantom());\n    Assert.assertEquals(""m2"", origM.getName());\n\n    // Change the name of the method so the method reference no\n    // longer refers to that method.\n    origM.setName(""newMethodName"");\n    Assert.assertEquals(""newMethodName"", origM.getName());\n\n    // Changing the method itself does not change the reference\n    Assert.assertEquals(""m2"", mRef.getName());\n\n    // There are still just 3 methods in the class (but ""m2"" was renamed).\n    Assert.assertEquals(Arrays.asList(""<init>"", ""m1"", ""newMethodName""),\n        clas.getMethods().stream().map(SootMethod::getName).sorted().collect(Collectors.toList()));\n\n    // When resolving the reference, the cached value is not used since the\n    // original method was renamed. It now gives a different method (that was\n    // created automatically since a method with the name ""m2"" no longer exists).\n    final SootMethod newM = mRef.resolve();\n    Assert.assertNotSame(origM, newM);\n    Assert.assertEquals(""m2"", newM.getName());\n\n    // There are now 4 methods since resolving ""m2"" created it again.\n    Assert.assertEquals(Arrays.asList(""<init>"", ""m1"", ""m2"", ""newMethodName""),\n        clas.getMethods().stream().map(SootMethod::getName).sorted().collect(Collectors.toList()));\n  }\n']",Invalidation;init;TEST;Assert;collect;ig;Method;init;Active;Equals,9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.408111095428467, -5.120344638824463, -5.498135089874268, -6.503964900970459, -5.381783485412598, -0.020861724391579628]",0.9793545007705688
1,"['  @Test\n  public void lambdaNoCaptures() {\n    String testClass = ""soot.lambdaMetaFactory.LambdaNoCaptures"";\n\n    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass,\n        ""java.util.function.Function"");\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String metaFactoryClass = getMetaFactoryNameLambda(testClass, TEST_METHOD_NAME);\n\n    final SootMethod bootstrap\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Function"", ""bootstrap$""));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>""));\n    final SootMethod apply\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""apply"", ""java.lang.Object""));\n    final SootMethod lambdaBody\n        = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.String"", ""lambda$main$0"", ""java.lang.Integer""));\n    final SootMethod staticCallee\n        = Scene.v().getMethod(methodSigFromComponents(testClass, ""void"", ""staticCallee"", ""java.lang.Integer""));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(\n        ""There should be an instance invocation on the synthetic LambdaMetaFactory\'s implementation of the functional interface in the main method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(apply) && e.kind() == Kind.INTERFACE));\n    assertTrue(\n        ""There should be a static call to the lambda body implementation in the generated functional interface implementation of the synthetic LambdaMetaFactory"",\n        newArrayList(cg.edgesOutOf(apply)).stream().anyMatch(e -> e.getTgt().equals(lambdaBody) && e.isStatic()));\n\n    assertTrue(""There should be a static call to the staticCallee method in actual lambda body implementation"",\n        newArrayList(cg.edgesOutOf(lambdaBody)).stream().anyMatch(e -> e.getTgt().equals(staticCallee) && e.isStatic()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",lambda;TEST;METHOD;NAME;Target;Captures;Scene;meta;Static;Components,2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;7.8580342233181e-10,5,5,"[-5.463874340057373, -4.987031936645508, -5.406864166259766, -6.460572242736816, -5.444446086883545, -0.021665796637535095]",0.9785672426223755
1,"['  @Test\n  public void lambdaWithCaptures() {\n    String testClass = ""soot.lambdaMetaFactory.LambdaWithCaptures"";\n\n    final SootMethod target\n        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String metaFactoryClass = getMetaFactoryNameLambda(testClass, TEST_METHOD_NAME);\n\n    final SootMethod bootstrap = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"",\n        ""bootstrap$"", testClass, ""java.lang.String""));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass, ""java.lang.String""));\n    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));\n    final SootMethod lambdaBody\n        = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.String"", ""lambda$main$0"", ""java.lang.String""));\n    final SootMethod getString = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.String"", ""getString""));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(\n        ""There should be an interface invocation on the synthetic LambdaMetaFactory\'s implementation of the functional interface in the main method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));\n    assertTrue(\n        ""There should be a virtual call to the lambda body implementation in the generated functional interface implementation of the synthetic LambdaMetaFactory"",\n        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(lambdaBody) && e.isVirtual()));\n\n    assertTrue(""There should be a special call to the getString method in actual lambda body implementation"",\n        newArrayList(cg.edgesOutOf(lambdaBody)).stream().anyMatch(e -> e.getTgt().equals(getString) && e.isSpecial()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",Captures;Class;init;Components;lambda;Components;final;Match;RET;Supplier,1.076841726899147e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.46557092666626, -5.01064395904541, -5.396157741546631, -6.437714576721191, -5.415733814239502, -0.0217105895280838]",0.9785233736038208
1,"['  @Test\n  public void markerInterfaces() {\n    String testClass = ""soot.lambdaMetaFactory.MarkerInterfaces"";\n\n    final SootMethod target\n        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String metaFactoryClass = getMetaFactoryNameLambda(testClass, TEST_METHOD_NAME);\n\n    final SootMethod bootstrap = Scene.v()\n        .getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$"", testClass));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass));\n    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));\n    final SootMethod lambdaBody\n        = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.Object"", ""lambda$main$0""));\n    final SootMethod getString = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.String"", ""getString""));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(\n        ""There should be an interface invocation on the synthetic LambdaMetaFactory\'s implementation of the functional interface in the main method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));\n    assertTrue(\n        ""There should be a virtual call to the lambda body implementation in the generated functional interface implementation of the synthetic LambdaMetaFactory"",\n        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(lambdaBody) && e.isVirtual()));\n\n    assertTrue(""There should be a virtual call to the getString method in actual lambda body implementation"",\n        newArrayList(cg.edgesOutOf(lambdaBody)).stream().anyMatch(e -> e.getTgt().equals(getString) && e.isVirtual()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",List;bootstrap;Marker;True;main;synthetic;the;function;edge;Graph,1.3969838619232178e-09;7.275957614183426e-10;6.111804395914078e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.428838729858398, -5.039059638977051, -5.420191287994385, -6.460098743438721, -5.419710636138916, -0.021517284214496613]",0.9787125587463379
1,"['  @Test\n  public void staticMethodRef() {\n    String testClass = ""soot.lambdaMetaFactory.StaticMethodRef"";\n\n    final SootMethod target\n        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String referencedMethodName = ""staticMethod"";\n\n    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);\n\n    final SootMethod bootstrap\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$""));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>""));\n    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));\n    final SootMethod referencedMethod = Scene.v().getMethod(methodSigFromComponents(testClass, ""int"", referencedMethodName));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(\n        ""There should be an interface invocation on the synthetic LambdaMetaFactory\'s implementation of the functional interface in the main method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));\n    assertTrue(""There should be a static call to the referenced method"",\n        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isStatic()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",Call;referenced;Array;final;constructor;Scene;edges;oot;Constructor;Meta,4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;3.637978807091713e-10;3.4924596548080444e-10;3.310560714453459e-10;3.055902197957039e-10;2.9831426218152046e-10;2.9103830456733704e-10,5,5,"[-5.417564392089844, -5.054731369018555, -5.435249328613281, -6.470226764678955, -5.407163619995117, -0.02143852785229683]",0.9787896275520325
1,"['  @Test\n  public void privateMethodRef() {\n    String testClass = ""soot.lambdaMetaFactory.PrivateMethodRef"";\n\n    final SootMethod target\n        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String referencedMethodName = ""privateMethod"";\n\n    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);\n\n    final SootMethod bootstrap = Scene.v()\n        .getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$"", testClass));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass));\n    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));\n    final SootMethod referencedMethod = Scene.v().getMethod(methodSigFromComponents(testClass, ""int"", referencedMethodName));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(\n        ""There should be an interface invocation on the synthetic LambdaMetaFactory\'s implementation of the functional interface in the main method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));\n    assertTrue(""There should be a virtual call to the referenced method"",\n        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isVirtual()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",Lambda;bootstrap;method;Private;Class;Edge;Meta;List;meta;ig,7.8580342233181e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.428397178649902, -5.0517730712890625, -5.4305524826049805, -6.469905853271484, -5.413495063781738, -0.0214015394449234]",0.9788258671760559
1,"['  @Test\n  public void publicMethodRef() {\n    String testClass = ""soot.lambdaMetaFactory.PublicMethodRef"";\n\n    final SootMethod target\n        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String referencedMethodName = ""publicMethod"";\n\n    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);\n\n    final SootMethod bootstrap = Scene.v()\n        .getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$"", testClass));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass));\n    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));\n    final SootMethod referencedMethod = Scene.v().getMethod(methodSigFromComponents(testClass, ""int"", referencedMethodName));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(\n        ""There should be an interface invocation on the synthetic LambdaMetaFactory\'s implementation of the functional interface in the main method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));\n    assertTrue(""There should be a virtual call to the referenced method"",\n        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isVirtual()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",Class;Meta;Lambda;Public;Ref;Factory;Scene;Scene;stream;bootstrap,9.313225746154785e-10;8.149072527885437e-10;6.83940015733242e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.43104887008667, -5.048664569854736, -5.428182125091553, -6.468408584594727, -5.4174675941467285, -0.021404922008514404]",0.9788224101066589
1,"['  @Test\n  public void constructorMethodRef() {\n    String testClass = ""soot.lambdaMetaFactory.ConstructorMethodRef"";\n\n    final SootMethod target\n        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String referencedMethodName = ""<init>"";\n\n    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);\n\n    final SootMethod bootstrap\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$""));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>""));\n    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));\n    final SootMethod referencedMethod\n        = Scene.v().getMethod(methodSigFromComponents(testClass, ""void"", referencedMethodName));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(\n        ""There should be an interface invocation on the synthetic LambdaMetaFactory\'s implementation of the functional interface  in the main method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));\n    assertTrue(""There should be a special call to the referenced method"",\n        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isSpecial()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",Factory;Call;synthetic;Components;TEST;referenced;Scene;Class;Meta;Method,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.420362949371338, -5.06479024887085, -5.445050239562988, -6.475085735321045, -5.403889179229736, -0.0213246401399374]",0.978901207447052
1,"['  @Test\n  public void inheritedMethodRef() {\n    String testClass = ""soot.lambdaMetaFactory.InheritedMethodRef"";\n\n    final SootMethod target\n        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String referencedMethodName = ""superMethod"";\n\n    final String metaFactoryClass = getMetaFactoryNameLambda(testClass, TEST_METHOD_NAME);\n\n    final SootMethod bootstrap = Scene.v()\n        .getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$"", testClass));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass));\n    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));\n    final SootMethod referencedMethod\n        = Scene.v().getMethod(methodSigFromComponents(""soot.lambdaMetaFactory.Super"", ""int"", referencedMethodName));\n    final SootMethod lambdaBody\n        = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.Integer"", ""lambda$main$0""));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(\n        ""There should be an interface invocation on the synthetic LambdaMetaFactory\'s implementation of the functional interface in the main method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));\n    //Call is from <soot.lambdaMetaFactory.InheritedMethodRef$lambda_main_0__1\n    //to           <soot.lambdaMetaFactory.InheritedMethodRef: java.lang.Integer lambda$main$0()>\n    //As such, it needs to be a virtual call.\n    assertTrue(\n        ""There should be a virtual call to the lambda body implementation in the generated functional interface implementation of the synthetic LambdaMetaFactory"",\n        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(lambdaBody) && e.isVirtual()));\n    assertTrue(""There should be a special call to the referenced method"", newArrayList(cg.edgesOutOf(lambdaBody)).stream()\n        .anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isSpecial()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",edges;Method;oot;final;ig;TEST;synthetic;Class;NAME;ig,7.275957614183426e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.426093578338623, -5.060393810272217, -5.439981937408447, -6.472853660583496, -5.400191783905029, -0.02137015014886856]",0.9788565635681152
1,"['  @Test\n  public void methodRefWithParameters() {\n    String testClass = ""soot.lambdaMetaFactory.MethodRefWithParameters"";\n\n    final SootMethod target\n        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);\n\n    final CallGraph cg = Scene.v().getCallGraph();\n\n    final String referencedMethodName = ""staticWithCaptures"";\n\n    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);\n\n    final SootMethod bootstrap\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.BiFunction"", ""bootstrap$""));\n    final SootMethod metaFactoryConstructor\n        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>""));\n    final SootMethod apply = Scene.v().getMethod(\n        methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""apply"", ""java.lang.Object"", ""java.lang.Object""));\n    final SootMethod referencedMethod\n        = Scene.v().getMethod(methodSigFromComponents(testClass, ""int"", referencedMethodName, ""int"", ""java.lang.Integer""));\n\n    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));\n\n    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",\n        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));\n    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",\n        newArrayList(cg.edgesOutOf(bootstrap)).stream()\n            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));\n    assertTrue(""There should be an interface invocation on the referenced method"",\n        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(apply) && e.kind() == Kind.INTERFACE));\n    assertTrue(""There should be a static call to the referenced method"",\n        newArrayList(cg.edgesOutOf(apply)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isStatic()));\n\n    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());\n  }\n']",Ref;static;any;Components;Call;RET;Class;stream;final;Call,8.149072527885437e-10;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.430400371551514, -5.020584583282471, -5.40464973449707, -6.4525322914123535, -5.421245098114014, -0.021709773689508438]",0.9785242080688477
1,"['    @Test\n    public void constructorReference() {\n        String testClass = ""soot.lambdaMetaFactory.Issue1367"";\n\n        final SootMethod target = prepareTarget(\n                methodSigFromComponents(testClass, ""java.util.function.Supplier"", ""constructorReference""),\n                testClass,\n                ""java.util.function.Function"");\n\n        validateAllBodies(target.getDeclaringClass());\n    }\n']",Meta;Reference;Class;function;oot;odies;Class;target;method;final,1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;4.220055416226387e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.532804012298584, -4.952453136444092, -5.451900005340576, -6.485828876495361, -5.4896016120910645, -0.02118646539747715]",0.9790365099906921
1,"['  @Test\n  public void testNewTest() {\n    String testClass = ""soot.lambdaMetaFactory.Issue1292"";\n    prepareTarget(\n        methodSigFromComponents(testClass, ""void"", ""testNew"", ""java.util.List""),\n        testClass,\n        ""java.util.function.Function"");\n    // if no exception is thrown, everything is working as intended\n  }\n']",ig;lambda;Class;Components;Class;Target;New;List;java;intended,2.9103830456733704e-09;2.3283064365386963e-09;8.440110832452774e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.557297229766846, -4.975249290466309, -5.483563423156738, -6.538547992706299, -5.468475818634033, -0.02079949527978897]",0.9794152975082397
1,"['  @Test\n  public void getVertragTest() {\n    String testClass = ""soot.lambdaMetaFactory.Issue1146"";\n\n    final SootMethod target = prepareTarget(\n        methodSigFromComponents(testClass, ""soot.lambdaMetaFactory.Issue1146$Vertrag"", ""getVertrag"", ""java.lang.String""),\n        testClass, ""java.util.function.Function"");\n    // if no exception is thrown, everything is working as intended\n  }\n']",Vertrag;From;function;final;lambda;thrown;target;oot;Class;soot,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10,5,5,"[-5.534759044647217, -4.996323108673096, -5.489814281463623, -6.535433292388916, -5.4612908363342285, -0.020751625299453735]",0.9794623255729675
1,"['  @Test\n  public void getVertrag2Test() {\n    String testClass = ""soot.lambdaMetaFactory.Issue1146"";\n\n    final SootMethod target = prepareTarget(\n        methodSigFromComponents(testClass, ""soot.lambdaMetaFactory.Issue1146$Vertrag"", ""getVertrag2"", ""java.lang.String""),\n        testClass, ""java.util.function.Function"");\n    // if no exception is thrown, everything is working as intended\n  }\n']",Components;Issue;oot;prepare;Issue;final;Class;lambda;Factory;soot,1.3387762010097504e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.533592700958252, -4.999586582183838, -5.490482330322266, -6.538023948669434, -5.460012912750244, -0.020732710137963295]",0.9794808626174927
1,"['  @Test\n  public void parameterBoxing() {\n    String testClass = ""soot.lambdaMetaFactory.Adapt"";\n\n    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, ""void"", ""parameterBoxingTarget""), testClass);\n\n    // TODO more fine-grained testing\n\n    validateAllBodies(target.getDeclaringClass());\n  }\n']",Meta;parameter;Target;odies;grained;Class;soot;fine;Boxing;Declaring,1.280568540096283e-09;1.1932570487260818e-09;6.111804395914078e-10;4.94765117764473e-10;3.8562575355172157e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.575692176818848, -4.938351631164551, -5.452281951904297, -6.531929969787598, -5.492467880249023, -0.021035313606262207]",0.9791843891143799
1,"['  @Test\n  public void parameterWidening() {\n    String testClass = ""soot.lambdaMetaFactory.Adapt"";\n\n    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, ""void"", ""parameterWidening""), testClass);\n\n    // TODO more fine-grained testing\n\n    validateAllBodies(target.getDeclaringClass());\n  }\n']",testing;idening;grained;oot;TOD;lambda;Meta;Class;All;idening,1.0477378964424133e-09;7.566995918750763e-10;7.130438461899757e-10;6.111804395914078e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.5820722579956055, -4.927534103393555, -5.448784828186035, -6.527632713317871, -5.4998579025268555, -0.021081069484353065]",0.9791395664215088
1,"['  @Test\n  public void returnBoxing() {\n    String testClass = ""soot.lambdaMetaFactory.Adapt"";\n\n    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, ""void"", ""returnBoxing""), testClass);\n\n    // TODO more fine-grained testing\n\n    validateAllBodies(target.getDeclaringClass());\n  }\n']",lambda;oot;Declaring;Class;target;return;Method;get;ig;Adapt,1.3969838619232178e-09;6.693881005048752e-10;5.966285243630409e-10;4.0745362639427185e-10;3.92901711165905e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.576251983642578, -4.93310546875, -5.447850227355957, -6.527493953704834, -5.492545127868652, -0.02109741047024727]",0.979123592376709
1,"['  @Test\n  public void returnWidening() {\n    String testClass = ""soot.lambdaMetaFactory.Adapt"";\n\n    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, ""void"", ""returnWidening""), testClass);\n\n    // TODO more fine-grained testing\n\n    validateAllBodies(target.getDeclaringClass());\n  }\n']",validate;odies;testing;All;idening;Class;ig;soot;target;Declaring,8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;3.7834979593753815e-10;2.9103830456733704e-10,5,5,"[-5.579319477081299, -4.927848815917969, -5.4482951164245605, -6.527024269104004, -5.498739242553711, -0.021097060292959213]",0.9791239500045776
1,"['  @Test\n  public void nullAssignment() {\n    SootMethod target =\n        prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""prefixVariableNames""), TEST_TARGET_CLASS);\n\n    Body body = target.retrieveActiveBody();\n    Assert.assertTrue(body instanceof JimpleBody);\n\n    // Assert all local names are distinct\n    Assert.assertTrue(body.getLocals().stream().map(Local::getName).distinct().count() == body.getLocalCount());\n\n    LocalPacker.v().transform(body);\n\n    // Assert all local names are distinct\n    Assert.assertTrue(body.getLocals().stream().map(Local::getName).distinct().count() == body.getLocalCount());\n  }\n']",CLASS;Active;Body;oot;Method;CLASS;ARGET;Locals;Target;map,1.1641532182693481e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.514880180358887, -5.047402381896973, -5.466340065002441, -6.516870498657227, -5.447090148925781, -0.020678646862506866]",0.9795337915420532
1,"['  @Test\n  public void InvokePolymorphic1() {\n    final SootMethod testTarget = prepareTarget(\n        methodSigFromComponents(TARGET_CLASS, ""void invokePolymorphicTarget(java.lang.invoke.MethodHandle)""), TARGET_CLASS);\n\n    // We model invokePolymorphic as invokeVirtual\n    final List<InvokeExpr> invokes = invokesFromMethod(testTarget);\n    Assert.assertEquals(1, invokes.size());\n    final InvokeExpr invokePoly = invokes.get(0);\n    Assert.assertTrue(invokePoly instanceof VirtualInvokeExpr);\n    final SootMethodRef targetMethodRef = invokePoly.getMethodRef();\n    Assert.assertEquals(methodSigFromComponents(METHOD_HANDLE_CLASS, METHOD_HANDLE_INVOKE_SUBSIG),\n        targetMethodRef.getSignature());\n  }\n']",oot;ANDLE;Components;as;Target;invoke;ig;CLASS;Components;invoke,8.003553375601768e-10;7.712515071034431e-10;6.693881005048752e-10;6.402842700481415e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.147295840084553e-10;3.92901711165905e-10,5,5,"[-5.500566005706787, -5.047044277191162, -5.4748759269714355, -6.529008865356445, -5.423871994018555, -0.020788637921214104]",0.9794259667396545
1,"['  @Test\n  public void InvokeCustom1() {\n    final SootMethod testTarget\n        = prepareTarget(methodSigFromComponents(TARGET_CLASS, ""void invokeCustomTarget()""), TARGET_CLASS);\n\n    // We model invokeCustom as invokeDynamic\n    final List<InvokeExpr> invokes = invokesFromMethod(testTarget);\n    Assert.assertEquals(1, invokes.size());\n    final InvokeExpr invokeCustom = invokes.get(0);\n    Assert.assertTrue(invokeCustom instanceof DynamicInvokeExpr);\n    final SootMethodRef targetMethodRef = invokeCustom.getMethodRef();\n    Assert.assertEquals(methodSigFromComponents(SootClass.INVOKEDYNAMIC_DUMMY_CLASS_NAME, SUPPLIER_GET_SUBSIG),\n        targetMethodRef.getSignature());\n    final String callToLambdaMethaFactory\n        = ""dynamicinvoke \\""get\\"" <java.util.function.Supplier ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: \\""REF_INVOKE_STATIC\\"" <soot.dexpler.instructions.DexBytecodeTarget: java.lang.String lambda$invokeCustomTarget$0()>, methodtype: java.lang.String __METHODTYPE__())"";\n    Assert.assertEquals(callToLambdaMethaFactory, invokeCustom.toString());\n  }\n']",Invoke;Bytecode;methodhandle;method;ynamicinvoke;to;Lookup;Custom;SUPPLIER;STATIC,1.1641532182693481e-09;1.1059455573558807e-09;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10,5,5,"[-5.4602203369140625, -5.059366226196289, -5.428521156311035, -6.486445903778076, -5.413609981536865, -0.02119428478181362]",0.9790287613868713
1,"['    @Test\n    public void testDisableCopyPropagatorInJBPhase() {\n        {\n            // default CopyPropagator enabled\n            setup();\n            Scene.v().loadNecessaryClasses();\n            PackManager.v().runBodyPacks();\n            SootClass cls = Scene.v().getSootClass(""Example"");\n            SootMethod foo = cls.getMethodByName(""foo"");\n            List<String> actual = bodyAsStrings(foo.getActiveBody());\n            List<String> expected = expectedBody(""r0 := @this: Example"",\n                    ""virtualinvoke r0.<Example: void bar(int,int)>(0, 2)"",\n                    ""return"");\n            assertEquals(expected, actual);\n        }\n        {\n            // disable CopyPropagator\n            setup();\n            Options.v().setPhaseOption(""jb.sils"", ""enabled:false"");// this transformer calls a lot of other transformers\n            Options.v().setPhaseOption(""jb.cp"", ""enabled:false"");\n            Scene.v().loadNecessaryClasses();\n            PackManager.v().runBodyPacks();\n            SootClass cls = Scene.v().getSootClass(""Example"");\n            SootMethod foo = cls.getMethodByName(""foo"");\n            List<String> actual = bodyAsStrings(foo.getActiveBody());\n            List<String> expected = expectedBody(""r0 := @this: Example"",\n                    ""b0 = 0"",\n                    ""b1 = 2"",\n                    ""virtualinvoke r0.<Example: void bar(int,int)>(b0, b1)"",\n                    ""return"");\n            assertEquals(expected, actual);\n        }\n    }\n']",this;JBPhase;expected;Scene;ecessary;cl;Propagator;get;Body;Propagator,9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.34871719032526e-10;6.984919309616089e-10;6.548361852765083e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10,5,5,"[-5.473294258117676, -5.016524314880371, -5.376151084899902, -6.423134803771973, -5.445327281951904, -0.021622633561491966]",0.978609561920166
1,"['    @Test\n    public void testDisableUnusedLocalEliminatorInJBPhase() {\n        {\n            // default UnusedLocalEliminator enabled\n            setup();\n            Scene.v().loadNecessaryClasses();\n            PackManager.v().runBodyPacks();\n            SootClass cls = Scene.v().getSootClass(""Example"");\n            SootMethod bar = cls.getMethodByName(""bar"");\n            List<String> actual = bodyAsStrings(bar.getActiveBody());\n            List<String> expected = expectedBody(""r1 := @this: Example"",\n                    ""i0 := @parameter0: int"",\n                    ""i1 := @parameter1: int"",\n                    ""i2 = i0 * i1"",\n                    ""$r0 = <java.lang.System: java.io.PrintStream out>"",\n                    ""virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i2)"",\n                    ""return"");\n        }\n        {\n            //disable UnusedLocalEliminator\n            setup();\n            Options.v().setPhaseOption(""jb.sils"", ""enabled:false"");// this transformer calls a lot of other transformers\n            Options.v().setPhaseOption(""jb.cp-ule"", ""enabled:false"");\n            Scene.v().loadNecessaryClasses();\n            PackManager.v().runBodyPacks();\n            SootClass cls = Scene.v().getSootClass(""Example"");\n            SootMethod bar = cls.getMethodByName(""bar"");\n            List<String> actual = bodyAsStrings(bar.getActiveBody());\n            List<String> expected = expectedBody(""r1 := @this: Example"",\n                    ""i0 := @parameter0: int"",\n                    ""i1 := @parameter1: int"",\n                    ""i2 = i0 * i1"",\n                    ""z0 = 0"",\n                    ""$r0 = <java.lang.System: java.io.PrintStream out>"",\n                    ""virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i2)"",\n                    ""return"");\n        }\n    }\n']",virtualinvoke;Local;Disable;In;Phase;Print;liminator;Active;expected;Print,1.6298145055770874e-09;7.275957614183426e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.484351634979248, -4.992543697357178, -5.362083911895752, -6.416203022003174, -5.46361780166626, -0.02173835225403309]",0.9784961938858032
1,"['  @Test\n  public void testLoadingJava9to11Class() {\n    G.reset();\n    Options.v().set_soot_modulepath(""VIRTUAL_FS_FOR_JDK"");\n    Scene.v().loadBasicClasses();\n\n    SootClass klass1\n        = SootModuleResolver.v().resolveClass(""java.lang.invoke.VarHandle"", SootClass.BODIES, Optional.of(""java.base""));\n\n    assertTrue(klass1.getName().equals(""java.lang.invoke.VarHandle""));\n    assertTrue(klass1.moduleName.equals(""java.base""));\n\n    SootClass klass2 = SootModuleResolver.v().resolveClass(""java.lang.invoke.ConstantBootstraps"", SootClass.BODIES,\n        Optional.of(""java.base""));\n\n    assertTrue(klass2.getName().equals(""java.lang.invoke.ConstantBootstraps""));\n    assertTrue(klass2.moduleName.equals(""java.base""));\n\n    Scene.v().loadNecessaryClasses();\n  }\n']",ecessary;FOR;IRTUAL;java;Module;Class;lass;java;Scene;reset,6.402842700481415e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.453005790710449, -5.073791027069092, -5.482247352600098, -6.513681411743164, -5.413508892059326, -0.020857054740190506]",0.979358971118927
1,"['  @Test\n  public void testLoadingJava9ClassFromCI() {\n    G.reset();\n    Main.main(new String[] { ""-soot-modulepath"", ""VIRTUAL_FS_FOR_JDK"", ""-pp"", ""-src-prec"", ""only-class"",\n        ""java.lang.invoke.VarHandle"" });\n\n    SootClass klass = Scene.v().getSootClass(""java.lang.invoke.VarHandle"");\n    assertTrue(klass.getName().equals(""java.lang.invoke.VarHandle""));\n    assertTrue(klass.moduleName.equals(""java.base""));\n\n  }\n']",Main;new;Loading;pre;only;class;FOR;oot;invoke;java,2.3283064365386963e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.462491035461426, -5.052753448486328, -5.460453510284424, -6.51137113571167, -5.4366135597229, -0.020944729447364807]",0.9792730808258057
1,"['  @Test\n  public void testLoadingJava11ClassFromCI() {\n    G.reset();\n    Main.main(new String[] { ""-soot-modulepath"", ""VIRTUAL_FS_FOR_JDK"", ""-pp"", ""-src-prec"", ""only-class"",\n        ""java.lang.invoke.ConstantBootstraps"" });\n\n    SootClass klass = Scene.v().getSootClass(""java.lang.invoke.ConstantBootstraps"");\n    assertTrue(klass.getName().equals(""java.lang.invoke.ConstantBootstraps""));\n    assertTrue(klass.moduleName.equals(""java.base""));\n\n  }\n']",module;modulepath;Bootstraps;JD;pre;soot;Bootstraps;Scene;IRTUAL;lass,1.6298145055770874e-09;1.1059455573558807e-09;1.076841726899147e-09;7.566995918750763e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.462935447692871, -5.053666114807129, -5.463213920593262, -6.506673336029053, -5.438758850097656, -0.020922549068927765]",0.9792948365211487
1,"['\t@Test\n\tpublic void testMerge() {\n\t\tG.reset();\n\t\t\n\t\tScene.v().loadNecessaryClasses();\n\t\t\n\t\tSootClass sc1 = new SootClass(""Class1"");\n\t\tSootClass sc2 = new SootClass(""Class2"");\n\t\tSootClass sc3 = new SootClass(""Class3"");\n\t\tSootClass sc4 = new SootClass(""Class4"");\n\t\tSootClass sc5 = new SootClass(""Class5"");\n\t\t\n\t\tScene.v().addClass(sc1);\n\t\tScene.v().addClass(sc2);\n\t\tScene.v().addClass(sc3);\n\t\tScene.v().addClass(sc4);\n\t\tScene.v().addClass(sc5);\n\t\t\n\t\tsc1.setSuperclass(Scene.v().getObjectType().getSootClass());\n\t\tsc2.setSuperclass(sc1);\n\t\tsc3.setSuperclass(sc2);\n\t\tsc4.setSuperclass(sc2);\n\t\tsc5.setSuperclass(sc4);\n\t\t\n\t\tType tpMerged = sc5.getType().merge(sc3.getType(), Scene.v());\n\t\tAssert.assertEquals(""Class2"", ((RefType) tpMerged).getClassName()); \n\t}\n']",Classes;add;Superclass;Superclass;add;load;Scene;Merged;sc;Scene,5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.496255397796631, -5.075591087341309, -5.463136672973633, -6.475915908813477, -5.443564414978027, -0.02066591940820217]",0.9795461297035217
1,['    @Test\n    public void testMethodWithNoInstruction() {\n        setup();\n        Options.v().set_output_format(Options.output_format_jimple);\n        runTest();\n        setup();\n        Options.v().set_output_format(Options.output_format_grimp);\n        runTest();\n        setup();\n        Options.v().set_output_format(Options.output_format_baf);\n        runTest();\n        setup();\n        Options.v().set_output_format(Options.output_format_dava);\n        runTest();\n        setup();\n        Options.v().set_output_format(Options.output_format_shimp);\n        runTest();\n        setup();\n        Options.v().set_output_format(Options.output_format_class);\n        runTest();\n    }\n'],grimp;output;shimp;run;output;setup;output;run;setup;output,9.604264050722122e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.455022811889648, -5.068426609039307, -5.47810173034668, -6.493865489959717, -5.424215316772461, -0.020882155746221542]",0.9793344736099243
1,"['  @Test\n  public void getName() {\n    assertThat(ClassRenamer.v().getName(), equalTo(ClassRenamer.name));\n  }\n']",Name;Class;get;Renamer;name;Renamer;equal;Name;Class;get,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;5.238689482212067e-10;4.656612873077393e-10;8.731149137020111e-11;-2.3283064365386963e-10;-3.7834979593753815e-10,5,5,"[-5.582650184631348, -4.857989311218262, -5.447140216827393, -6.557106971740723, -5.4919753074646, -0.021608751267194748]",0.9786230325698853
1,"['  @Test\n  public void getDependencies() {\n    assertThat(ClassRenamer.v().getDependencies(), equalTo(new String[] { ClassRenamer.name }));\n  }\n']",ependencies;Class;get;That;Renamer;Class;ependencies;get;name;new,1.0477378964424133e-09;8.149072527885437e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.9103830456733704e-11;-1.4551915228366852e-11;-4.0745362639427185e-10;-4.656612873077393e-10;-8.149072527885437e-10,5,5,"[-5.57183837890625, -4.903820514678955, -5.40153694152832, -6.505466938018799, -5.504467010498047, -0.021525101736187935]",0.9787049293518066
1,"['  @Test\n  public void getPackageName() {\n    assertNull(ClassRenamer.getPackageName(""""));\n    assertNull(ClassRenamer.getPackageName(null));\n    assertNull(ClassRenamer.getPackageName("".""));\n    assertNull(ClassRenamer.getPackageName(""ClassName""));\n    assertEquals(""com.sable"", ClassRenamer.getPackageName(""com.sable.Soot""));\n  }\n']",Renamer;Package;Name;get;Class;Renamer;Package;Null;Name;Class,1.5133991837501526e-09;1.0477378964424133e-09;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.485918998718262, -5.0289411544799805, -5.477663516998291, -6.527649879455566, -5.430749893188477, -0.02092931978404522]",0.9792881608009338
1,"['  @Test\n  public void getClassName() {\n    assertNull(ClassRenamer.getClassName(""""));\n    assertNull(ClassRenamer.getClassName(null));\n    assertNull(ClassRenamer.getClassName("".""));\n    assertEquals(""ClassName"", ClassRenamer.getClassName(""ClassName""));\n    assertEquals(""Soot"", ClassRenamer.getClassName(""com.sable.Soot""));\n    assertNull(ClassRenamer.getClassName(""com.sable.""));\n  }\n']",Renamer;able;get;oot;Class;Null;Renamer;Class;Name;Name,6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.508840084075928, -5.038161754608154, -5.474076271057129, -6.517561912536621, -5.424385070800781, -0.020831136032938957]",0.9793844223022461
1,"['  @Test\n  public void getOrAddNewName_cachingName() {\n    ClassRenamer.v().setRemovePackages(false);\n    ClassRenamer.v().setRenamePackages(false);\n\n    final String newName = ClassRenamer.v().getOrAddNewName(null, ""ClassName"");\n    assertThat(newName, not(containsString(""."")));\n\n    Map<String, String> mapping = ClassRenamer.v().getClassNameMapping((pOldName, pNewName) -> pOldName.equals(""ClassName""));\n    assertThat(mapping, hasEntry(""ClassName"", newName));\n    assertThat(mapping.size(), equalTo(1));\n\n    assertThat(ClassRenamer.v().getOrAddNewName(null, ""ClassName""), equalTo(newName));\n\n    mapping = ClassRenamer.v().getClassNameMapping((pOldName, pNewName) -> pOldName.equals(""ClassName""));\n    assertThat(mapping, hasEntry(""ClassName"", newName));\n    assertThat(mapping.size(), equalTo(1));\n  }\n']",Renamer;aching;Renamer;Renamer;That;equals;Renamer;That;mapping;false,1.1932570487260818e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.476792812347412, -5.0968756675720215, -5.482658386230469, -6.4745330810546875, -5.407265663146973, -0.020695578306913376]",0.9795171022415161
1,"['  @Test\n  public void getOrAddNewName_cachingPackage() {\n    ClassRenamer.v().setRemovePackages(false);\n    ClassRenamer.v().setRenamePackages(false);\n\n    final String newName = ClassRenamer.v().getOrAddNewName(""pac.age"", ""ClassName"");\n    assertThat(newName, allOf(startsWith(""pac.age.""), not(endsWith(""ClassName""))));\n    assertThat(newName.split(""\\\\."").length, equalTo(3));\n\n    assertThat(ClassRenamer.v().getOrAddNewName(""pac.age"", ""ClassName""), equalTo(newName));\n  }\n']",new;get;split;New;Or;Class;Renamer;Add;Remove;ename,1.6298145055770874e-09;1.2223608791828156e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.520089149475098, -5.0303521156311035, -5.4608073234558105, -6.490293979644775, -5.440392971038818, -0.020864060148596764]",0.9793519973754883
1,"['  @Test\n  public void getOrAddNewName_nullClassName() {\n    ClassRenamer.v().setRemovePackages(false);\n    ClassRenamer.v().setRenamePackages(false);\n\n    final String newName = ClassRenamer.v().getOrAddNewName(""pac.age"", null);\n    assertThat(newName, startsWith(""pac.age.""));\n    assertThat(newName.split(""\\\\."").length, equalTo(3));\n\n    assertThat(ClassRenamer.v().getOrAddNewName(""pac.age"", null), not(equalTo(newName)));\n  }\n']",That;Name;Renamer;Packages;Or;Class;new;age;false;Add,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.532107353210449, -5.039612770080566, -5.505918025970459, -6.52813720703125, -5.4603495597839355, -0.02041739970445633]",0.9797896146774292
1,"['  @Test\n  public void getOrAddNewName_renamePackage() {\n    ClassRenamer.v().setRemovePackages(false);\n    ClassRenamer.v().setRenamePackages(true);\n\n    final String newName = ClassRenamer.v().getOrAddNewName(""pac.age.getOrAddNewName_renamePackage"", ""ClassName"");\n    assertThat(newName, allOf(not(startsWith(""pac.age.getOrAddNewName_renamePackage."")), not(endsWith(""ClassName""))));\n    assertThat(newName.split(""\\\\."").length, equalTo(4));\n\n    assertThat(ClassRenamer.v().getOrAddNewName(""pac.age.getOrAddNewName_renamePackage"", ""ClassName""), equalTo(newName));\n  }\n']",Package;Renamer;Renamer;pac;split;New;ename;Package;Name;rename,1.1641532182693481e-09;8.731149137020111e-10;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.5838532969355583e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.516280651092529, -5.059394836425781, -5.505825996398926, -6.516829490661621, -5.433549880981445, -0.020487593486905098]",0.9797208309173584
1,"['  @Test\n  public void getOrAddNewName_renamePackage_nullPackage() {\n    ClassRenamer.v().setRemovePackages(false);\n    ClassRenamer.v().setRenamePackages(true);\n\n    final String newName = ClassRenamer.v().getOrAddNewName(null, ""ClassName"");\n    assertThat(newName, allOf(not(endsWith(""ClassName"")), not(containsString("".""))));\n\n    final String newName0 = ClassRenamer.v().getOrAddNewName(null, ""ClassName"");\n    assertThat(newName0, equalTo(newName)); // package names and class names are equal\n\n    final String newName1 = ClassRenamer.v().getOrAddNewName(null, ""ClassName1"");\n    assertThat(newName1, not(equalTo(newName)));\n    assertThat(newName1.split(""\\\\."").length, equalTo(2));\n    assertThat(newName.split(""\\\\."")[0], equalTo(newName.split(""\\\\."")[0])); // package names are equal\n  }\n']",Package;get;Renamer;equal;rename;equal;Name;Add;null;Class,1.280568540096283e-09;1.1059455573558807e-09;8.440110832452774e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.507044315338135, -5.082344055175781, -5.5040202140808105, -6.491878986358643, -5.408595085144043, -0.020536761730909348]",0.9796725511550903
1,"['  @Test\n  public void getOrAddNewName_removePackage() {\n    ClassRenamer.v().setRemovePackages(true);\n\n    String newName = ClassRenamer.v().getOrAddNewName(""a.b.c"", ""ClassName"");\n    assertThat(newName, allOf(not(endsWith(""ClassName"")), not(containsString("".""))));\n\n    String packageName = ""a.b.c"";\n    for (int i = 0; i < 100; i++) {\n      packageName = packageName + "".p"" + i;\n      newName = ClassRenamer.v().getOrAddNewName(packageName, ""ClassName"");\n      assertThat(newName, allOf(not(endsWith(""ClassName"")), not(containsString("".""))));\n    }\n  }\n']",New;Package;Renamer;That;Add;Class;Or;Or;set;Name,9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.514153003692627, -5.067979335784912, -5.5022478103637695, -6.511848449707031, -5.435117721557617, -0.020456409081816673]",0.9797515273094177
1,"['  @Test\n  public void testConstant() throws Throwable {\n\n    // First generate a classfile with a MethodHnadle\n    ClassWriter cv = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n    cv.visit(Opcodes.V1_7, Opcodes.ACC_PUBLIC, ""HelloMethodHandles"", null, Type.getInternalName(Object.class), null);\n    MethodVisitor mv = cv.visitMethod(Opcodes.ACC_STATIC | Opcodes.ACC_PUBLIC, ""getSquareRoot"",\n        Type.getMethodDescriptor(Type.getType(java.lang.invoke.MethodHandle.class)), null, null);\n\n    mv.visitCode();\n\n    mv.visitLdcInsn(new Handle(Opcodes.H_INVOKESTATIC, Type.getInternalName(Math.class), ""sqrt"",\n        Type.getMethodDescriptor(Type.DOUBLE_TYPE, Type.DOUBLE_TYPE), false));\n\n    mv.visitInsn(Opcodes.ARETURN);\n    mv.visitEnd();\n\n    cv.visitEnd();\n\n    File tempDir = Files.createTempDir();\n    File classFile = new File(tempDir, ""HelloMethodHandles.class"");\n    Files.write(cv.toByteArray(), classFile);\n\n    G.reset();\n\n    String[] commandLine = { ""-pp"", ""-cp"", tempDir.getAbsolutePath(), ""-O"", ""HelloMethodHandles"", };\n\n    System.out.println(""Command Line: "" + Arrays.toString(commandLine));\n\n    Main.main(commandLine);\n\n    Class<?> clazz = validateClassFile(""HelloMethodHandles"");\n    java.lang.invoke.MethodHandle methodHandle\n        = (java.lang.invoke.MethodHandle) clazz.getMethod(""getSquareRoot"").invoke(null);\n\n    assertThat((Double) methodHandle.invoke(16.0), equalTo(4.0));\n  }\n']",Constant;Throwable;visit;Writer;classfile;Class;visit;Temp;PUBLIC;Insn,1.5279510989785194e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.548361852765083e-10;6.402842700481415e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10,5,5,"[-5.372851848602295, -5.107644081115723, -5.488725185394287, -6.504199504852295, -5.386353015899658, -0.021121572703123093]",0.9790999293327332
1,"['  @Test\n  public void testInvoke() throws IOException, ClassNotFoundException {\n\n    // First generate a classfile with a MethodHnadle\n    ClassWriter cv = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n    cv.visit(Opcodes.V1_7, Opcodes.ACC_PUBLIC, ""UniformDistribution"", null, Type.getInternalName(Object.class), null);\n\n    MethodVisitor mv\n        = cv.visitMethod(Opcodes.ACC_STATIC | Opcodes.ACC_PUBLIC, ""sample"", Type.getMethodDescriptor(Type.DOUBLE_TYPE,\n            Type.getType(java.lang.invoke.MethodHandle.class) /* rng method */, Type.DOUBLE_TYPE /* max */), null, null);\n\n    mv.visitCode();\n\n    mv.visitVarInsn(Opcodes.ALOAD, 0); // load MethodHandle\n    mv.visitInsn(Opcodes.ACONST_NULL); // null string... (just to test signatures with class names)\n\n\n    // Call MethodHandle.invoke() with polymorphic signature: ()D\n    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, Type.getInternalName(java.lang.invoke.MethodHandle.class), ""invoke"",\n        Type.getMethodDescriptor(Type.DOUBLE_TYPE, Type.getType(String.class)), false);\n\n    mv.visitVarInsn(Opcodes.DLOAD, 1);\n    mv.visitInsn(Opcodes.DMUL);\n    mv.visitInsn(Opcodes.DRETURN);\n    mv.visitEnd();\n    cv.visitEnd();\n\n    File tempDir = Files.createTempDir();\n    File classFile = new File(tempDir, ""UniformDistribution.class"");\n    Files.write(cv.toByteArray(), classFile);\n\n    G.reset();\n\n    String[] commandLine = { ""-pp"", ""-cp"", tempDir.getAbsolutePath(), ""-O"", ""UniformDistribution"" };\n\n    System.out.println(""Command Line: "" + Arrays.toString(commandLine));\n\n    Main.main(commandLine);\n    validateClassFile(""UniformDistribution"");\n\n  }\n']",Insn;COMPUT;classfile;ALOAD;load;Writer;Method;visit;Class;Temp,1.0186340659856796e-09;7.275957614183426e-10;7.275957614183426e-10;6.693881005048752e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.451066493988037, -5.071850776672363, -5.460021495819092, -6.497655868530273, -5.414369583129883, -0.020993990823626518]",0.9792248606681824
1,['    @Test\n    public void constantBase() {\n        genericLocalVsStringConstantTest(true);\n    }\n'],Local;Base;Vs;Constant;generic;true;constant,1.862645149230957e-09;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;-1.2223608791828156e-09;-2.3283064365386963e-09,5,5,"[-5.5727643966674805, -4.857426166534424, -5.414248466491699, -6.527237892150879, -5.515309810638428, -0.021745584905147552]",0.9784891605377197
1,['    @Test\n    public void localBase() {\n        genericLocalVsStringConstantTest(false);\n    }\n'],Local;generic;Base;false;Constant;local;Vs,1.5133991837501526e-09;1.1641532182693481e-09;2.3283064365386963e-10;5.820766091346741e-11;-1.1641532182693481e-09;-1.6298145055770874e-09;-2.9103830456733704e-09,5,5,"[-5.567731857299805, -4.861074447631836, -5.411346435546875, -6.5210371017456055, -5.519438743591309, -0.021741734817624092]",0.978492796421051
1,['    @Test\n    public void staticBase() {\n        //TODO\n    }\n'],OD;Base;static,1.3969838619232178e-09;-1.3969838619232178e-09;-2.7939677238464355e-09,5,5,"[-5.605782985687256, -4.980055809020996, -5.392834186553955, -6.485438823699951, -5.51024055480957, -0.02088659256696701]",0.9793301224708557
1,"['  @Test\n  public void keepArrayLength() {\n    // create test method and body\n    SootClass cl = new SootClass(""TestClass"", Modifier.PUBLIC);\n    SootMethod method = new SootMethod(""testMethod"", Collections.singletonList(RefType.v(""java.lang.Object"")),\n        ArrayType.v(IntType.v(), 1), Modifier.PUBLIC);\n    cl.addMethod(method);\n    JimpleBody body = Jimple.v().newBody(method);\n    method.setActiveBody(body);\n\n    // create locals\n    Chain<Local> locals = body.getLocals();\n    Local a = Jimple.v().newLocal(""a"", ArrayType.v(IntType.v(), 1));\n    locals.add(a);\n    Local b = Jimple.v().newLocal(""b"", IntType.v());\n    locals.add(b);\n\n    // create code\n    UnitPatchingChain units = body.getUnits();\n    Unit identity0 = Jimple.v().newIdentityStmt(a, Jimple.v().newParameterRef(RefType.v(""java.lang.Object""), 0));\n    units.add(identity0);\n    Unit cast0 = Jimple.v().newAssignStmt(b, Jimple.v().newLengthExpr(a));\n    units.add(cast0);\n    Unit ret = Jimple.v().newReturnStmt(b);\n    units.add(ret);\n\n    // execute transform\n    DeadAssignmentEliminator.v().internalTransform(body, ""testPhase"", Collections.emptyMap());\n\n    // check resulting code (length statement should be preserved)\n    Iterator<Unit> it = units.iterator();\n    assertEquals(identity0, it.next());\n    assertEquals(cast0, it.next());\n    assertEquals(ret, it.next());\n    assertEquals(3, units.size());\n  }\n']",Ref;Stmt;Stmt;Modifier;Stmt;Array;Jimple;Int;Assignment;Length,1.3969838619232178e-09;1.0477378964424133e-09;9.167706593871117e-10;8.731149137020111e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.420663833618164, -5.092269420623779, -5.47180700302124, -6.471364974975586, -5.396633148193359, -0.021071266382932663]",0.9791491627693176
1,"['  @Test\n  public void keepEssentialCast() {\n    // create test method and body\n    SootClass cl = new SootClass(""TestClass"", Modifier.PUBLIC);\n    SootMethod method = new SootMethod(""testMethod"", Collections.singletonList(RefType.v(""java.lang.Object"")),\n        ArrayType.v(IntType.v(), 1), Modifier.PUBLIC);\n    cl.addMethod(method);\n    JimpleBody body = Jimple.v().newBody(method);\n    method.setActiveBody(body);\n\n    // create locals\n    Chain<Local> locals = body.getLocals();\n    Local a = Jimple.v().newLocal(""a"", IntType.v());\n    locals.add(a);\n    Local b = Jimple.v().newLocal(""b"", IntType.v());\n    locals.add(b);\n    Local c = Jimple.v().newLocal(""c"", IntType.v());\n    locals.add(c);\n    Local d = Jimple.v().newLocal(""d"", IntType.v());\n    locals.add(d);\n\n    // create code\n    UnitPatchingChain units = body.getUnits();\n    Unit identity0 = Jimple.v().newIdentityStmt(a, Jimple.v().newParameterRef(RefType.v(""java.lang.Object""), 0));\n    units.add(identity0);\n    Unit cast0 = Jimple.v().newAssignStmt(b, Jimple.v().newCastExpr(a, ArrayType.v(IntType.v(), 1)));\n    units.add(cast0);\n    Unit cast1 = Jimple.v().newAssignStmt(c, Jimple.v().newCastExpr(a, RefType.v(""java.lang.Number"")));\n    units.add(cast1);\n    Unit cast2 = Jimple.v().newAssignStmt(d, Jimple.v().newCastExpr(NullConstant.v(), RefType.v(""java.lang.Number"")));\n    units.add(cast2);\n    Unit ret = Jimple.v().newReturnStmt(b);\n    units.add(ret);\n\n    // execute transform\n    DeadAssignmentEliminator.v().internalTransform(body, ""testPhase"", Collections.emptyMap());\n\n    // check resulting code (cast should be removed)\n    Iterator<Unit> it = units.iterator();\n    assertEquals(identity0, it.next());\n    assertEquals(cast0, it.next());\n    assertEquals(cast1, it.next());\n    assertEquals(ret, it.next());\n    assertEquals(4, units.size());\n  }\n']",Expr;and;keep;Modifier;Ref;Active;singleton;cl;java;Method,1.949956640601158e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.393841743469238, -5.1023359298706055, -5.476341247558594, -6.4721455574035645, -5.386828899383545, -0.02115623652935028]",0.979066014289856
1,"['  @Test\n  public void removePrimitiveCast() {\n    // create test method and body\n    SootClass cl = new SootClass(""TestClass"", Modifier.PUBLIC);\n    SootMethod method = new SootMethod(""testMethod"", Arrays.asList(IntType.v(), IntType.v()), IntType.v(), Modifier.PUBLIC);\n    cl.addMethod(method);\n    JimpleBody body = Jimple.v().newBody(method);\n    method.setActiveBody(body);\n\n    // create locals\n    Chain<Local> locals = body.getLocals();\n    Local a = Jimple.v().newLocal(""a"", IntType.v());\n    locals.add(a);\n    Local b = Jimple.v().newLocal(""b"", IntType.v());\n    locals.add(b);\n    Local c = Jimple.v().newLocal(""c"", IntType.v());\n    locals.add(c);\n    Local d = Jimple.v().newLocal(""d"", DoubleType.v());\n    locals.add(d);\n\n    // create code\n    UnitPatchingChain units = body.getUnits();\n    Unit identity0 = Jimple.v().newIdentityStmt(a, Jimple.v().newParameterRef(IntType.v(), 0));\n    units.add(identity0);\n    Unit identity1 = Jimple.v().newIdentityStmt(b, Jimple.v().newParameterRef(IntType.v(), 1));\n    units.add(identity1);\n    Unit addition = Jimple.v().newAssignStmt(c, Jimple.v().newAddExpr(a, b));\n    units.add(addition);\n    Unit cast = Jimple.v().newAssignStmt(d, Jimple.v().newCastExpr(a, DoubleType.v()));\n    units.add(cast);\n    Unit ret = Jimple.v().newReturnStmt(c);\n    units.add(ret);\n\n    // execute transform\n    DeadAssignmentEliminator.v().internalTransform(body, ""testPhase"", Collections.emptyMap());\n\n    // check resulting code (cast should be removed)\n    Iterator<Unit> it = units.iterator();\n    assertEquals(identity0, it.next());\n    assertEquals(identity1, it.next());\n    assertEquals(addition, it.next());\n    assertEquals(ret, it.next());\n    assertEquals(4, units.size());\n  }\n']",remove;and;PUBLIC;Stmt;create;addition;addition;Units;Int;List,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.401113986968994, -5.091862201690674, -5.478950023651123, -6.471819877624512, -5.3961896896362305, -0.02113371156156063]",0.9790879487991333
1,"['  @Test\n  public void testMostCommonTypingPairs_1() {\n\n    logger.debug(""Starting Object Random Minimize"");\n\n    List<Typing> typingList = new ArrayList<>();\n    Type Type1 = serializableType;\n    Type Type2 = comparableType;\n    Local x1 = new JimpleLocal(""$x1"", null);\n    Typing resultTyping;\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, Type1);\n    typingList.add(typing1);\n    resultTyping = typing1;\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, Type2);\n    typingList.add(typing2);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(2, typingList.size());\n    assertEquals(resultTyping, typingList.get(0));\n  }\n']",Minimize;Array;ierarchy;typing;Typing;typing;set;typing;List;Typing,1.1059455573558807e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.548361852765083e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.5838532969355583e-10,5,5,"[-5.469186782836914, -5.038426399230957, -5.471275329589844, -6.50226354598999, -5.461443901062012, -0.020868144929409027]",0.9793480634689331
1,"['  @Test\n  public void testMostCommonTypingPairs_2() {\n\n    logger.debug(""Starting Object Random Minimize"");\n\n    List<Typing> typingList = new ArrayList<>();\n\n    Type Type1 = serializableType;\n    Type Type2 = comparableType;\n    Type Type3 = numberType;\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, Type1);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, Type2);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, Type3);\n    typingList.add(typing3);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(2, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing2, typing3));\n  }\n']",Order;Bytecode;typing;Typing;List;List;List;Typing;Local;ierarchy,1.57160684466362e-09;9.89530235528946e-10;9.604264050722122e-10;8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10,5,5,"[-5.471344947814941, -5.033229827880859, -5.474545001983643, -6.491508483886719, -5.455916404724121, -0.020919863134622574]",0.9792973399162292
1,"['  @Test\n  public void testMostCommonTypingPairs_3() {\n\n    List<Typing> typingList = new ArrayList<>();\n    Type Type1 = randomAccessType;\n    Type Type2 = listType;\n    Type Type3 = abstractListType;\n    Type Type4 = objectType;\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, Type1);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, Type2);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, Type3);\n    typingList.add(typing3);\n\n    Typing typing4 = new Typing(Arrays.asList(x1));\n    typing4.set(x1, Type4);\n    typingList.add(typing4);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(2, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing1, typing3));\n  }\n']",minimize;List;Order;Jimple;list;List;typing;typing;List;Type,2.0372681319713593e-09;1.6298145055770874e-09;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.457752227783203, -5.063121795654297, -5.481913089752197, -6.490353107452393, -5.440006732940674, -0.020823080092668533]",0.9793922305107117
1,"['  @Test\n  public void testMostCommonTypingPairs_4() {\n\n    List<Typing> typingList = new ArrayList<>();\n\n    Type Type1 = cloneableType;\n    Type Type2 = serializableType;\n    Type Type3 = abstractMapType;\n\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, Type1);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, Type2);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, Type3);\n    typingList.add(typing3);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(3, typingList.size());\n\n  }\n']",Most;ierarchy;typing;add;Common;List;Local;cloneable;Bytecode;Jimple,3.026798367500305e-09;2.6775524020195007e-09;2.0954757928848267e-09;1.5133991837501526e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.4877142906188965, -5.047051906585693, -5.4836812019348145, -6.501102924346924, -5.455377101898193, -0.02070748805999756]",0.9795054197311401
1,"['  @Test\n  public void testHugeCommonTypingPair() {\n\n    List<Typing> typingList = new ArrayList<>();\n\n    Type Type1 = serializableType;\n    Type Type2 = comparableType;\n    Local x1 = new JimpleLocal(""$x1"", null);\n    Local x2 = new JimpleLocal(""$x2"", null);\n    Local x3 = new JimpleLocal(""$x3"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1, x2, x3));\n    typing1.set(x1, Type1);\n    typing1.set(x2, Type1);\n    typing1.set(x3, Type1);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1, x2, x3));\n    typing2.set(x1, Type2);\n    typing2.set(x2, Type1);\n    typing2.set(x3, Type1);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1, x2, x3));\n    typing3.set(x1, Type1);\n    typing3.set(x2, Type2);\n    typing3.set(x3, Type1);\n    typingList.add(typing3);\n\n    Typing typing4 = new Typing(Arrays.asList(x1, x2, x3));\n    typing4.set(x1, Type1);\n    typing4.set(x2, Type1);\n    typing4.set(x3, Type2);\n    typingList.add(typing4);\n\n    Typing typing5 = new Typing(Arrays.asList(x1, x2, x3));\n    typing5.set(x1, Type2);\n    typing5.set(x2, Type2);\n    typing5.set(x3, Type1);\n    typingList.add(typing5);\n\n    Typing typing6 = new Typing(Arrays.asList(x1, x2, x3));\n    typing6.set(x1, Type2);\n    typing6.set(x2, Type1);\n    typing6.set(x3, Type2);\n    typingList.add(typing6);\n\n    Typing typing7 = new Typing(Arrays.asList(x1, x2, x3));\n    typing7.set(x1, Type1);\n    typing7.set(x2, Type2);\n    typing7.set(x3, Type2);\n    typingList.add(typing7);\n\n    Typing typing8 = new Typing(Arrays.asList(x1, x2, x3));\n    typing8.set(x1, Type2);\n    typing8.set(x2, Type2);\n    typing8.set(x3, Type2);\n    typingList.add(typing8);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(8, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing1, typing2, typing3, typing4, typing5, typing6, typing7, typing8));\n  }\n']",uge;Typing;comparable;typing;Jimple;typing;Type;Local;List;typing,9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.392450332641602, -5.084535121917725, -5.472160339355469, -6.468629837036133, -5.407829761505127, -0.02120058797299862]",0.9790225625038147
1,"['  @Test\n  public void testAbstractInterfaceTyping() {\n\n    List<Typing> typingList = new ArrayList<>();\n\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, interfaceType);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, abstractClass_Interface2Type);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, class_AbstractInterfaceClassType);\n    typingList.add(typing3);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(1, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing3));\n  }\n']",typing;Bytecode;typing;minimize;typing;List;typing;List;Strategy;Typing,1.862645149230957e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1059455573558807e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.481144905090332, -5.0112104415893555, -5.50486421585083, -6.534132480621338, -5.465193271636963, -0.02079354226589203]",0.9794211387634277
1,"['  @Test\n  public void testAbstractAbstractTyping() {\n\n    logger.debug(""Starting Object Random Minimize"");\n\n    List<Typing> typingList = new ArrayList<>();\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, interfaceType);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, abstractClass_Interface1Type);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, abstractClass_Interface2Type);\n    typingList.add(typing3);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(1, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing3));\n  }\n']",Random;minimize;Interface;abstract;Typing;typing;typing;typing;Type;That,2.561137080192566e-09;1.1641532182693481e-09;1.0477378964424133e-09;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;4.94765117764473e-10,5,5,"[-5.463169574737549, -5.038422107696533, -5.502474308013916, -6.52564811706543, -5.458615779876709, -0.020739130675792694]",0.9794744253158569
1,"['  @Test\n  public void testJavaInterfaceTyping() {\n\n    List<Typing> typingList = new ArrayList<>();\n\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, interfaceType);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, integerType);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, numberType);\n    typingList.add(typing3);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(2, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing2, typing1));\n  }\n']",Local;Local;Typing;Bytecode;typing;Typing;typing;List;List;Typing,2.3283064365386963e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10,5,5,"[-5.485921859741211, -5.0125732421875, -5.500496864318848, -6.532109260559082, -5.47025203704834, -0.020763300359249115]",0.9794506430625916
1,"['  @Test\n  public void testInterfaceInterfaceTyping() {\n\n    List<Typing> typingList = new ArrayList<>();\n\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, interfaceType);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, interfaceInterfaceType);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, numberType);\n    typingList.add(typing3);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(2, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing2, typing3));\n  }\n']",Array;Jimple;Strategy;Typing;Typing;typing;In;number;Arrays;new,2.561137080192566e-09;9.89530235528946e-10;8.731149137020111e-10;8.731149137020111e-10;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.475050449371338, -5.021636486053467, -5.49419641494751, -6.529692649841309, -5.456395149230957, -0.02083837427198887]",0.9793773293495178
1,"['  @Test\n  public void testAllRelatedClassesTyping() {\n\n    List<Typing> typingList = new ArrayList<>();\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, objectType);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, stringType);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, comparableType);\n    typingList.add(typing3);\n\n    Typing typing4 = new Typing(Arrays.asList(x1));\n    typing4.set(x1, abstractClass_Interface2Type);\n    typingList.add(typing4);\n\n    Typing typing5 = new Typing(Arrays.asList(x1));\n    typing5.set(x1, class_AbstractInterfaceClassType);\n    typingList.add(typing5);\n\n    Typing typing6 = new Typing(Arrays.asList(x1));\n    typing6.set(x1, abstractClass_Interface1Type);\n    typingList.add(typing6);\n\n    Typing typing7 = new Typing(Arrays.asList(x1));\n    typing7.set(x1, class_InterfaceType);\n    typingList.add(typing7);\n\n    Typing typing8 = new Typing(Arrays.asList(x1));\n    typing8.set(x1, abstractType);\n    typingList.add(typing8);\n\n    Typing typing9 = new Typing(Arrays.asList(x1));\n    typing9.set(x1, class_AbstractType);\n    typingList.add(typing9);\n\n    Typing typing10 = new Typing(Arrays.asList(x1));\n    typing10.set(x1, fatherClassType);\n    typingList.add(typing10);\n\n    Typing typing11 = new Typing(Arrays.asList(x1));\n    typing11.set(x1, childClassType);\n    typingList.add(typing11);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(5, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing2, typing5, typing7, typing9, typing11));\n  }\n']",Typing;abstract;List;List;set;Local;string;Typing;new;typing,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.335447311401367, -5.09564733505249, -5.485775470733643, -6.483334541320801, -5.376494407653809, -0.02146793156862259]",0.978760838508606
1,"['  @Test\n  public void testAllNonRelatedClassesTyping() {\n\n    List<Typing> typingList = new ArrayList<>();\n    Local x1 = new JimpleLocal(""$x1"", null);\n\n    Typing typing1 = new Typing(Arrays.asList(x1));\n    typing1.set(x1, objectType);\n    typingList.add(typing1);\n\n    Typing typing2 = new Typing(Arrays.asList(x1));\n    typing2.set(x1, stringType);\n    typingList.add(typing2);\n\n    Typing typing3 = new Typing(Arrays.asList(x1));\n    typing3.set(x1, cloneableType);\n    typingList.add(typing3);\n\n    Typing typing4 = new Typing(Arrays.asList(x1));\n    typing4.set(x1, integerType);\n    typingList.add(typing4);\n\n    Typing typing5 = new Typing(Arrays.asList(x1));\n    typing5.set(x1, processType);\n    typingList.add(typing5);\n\n    Typing typing6 = new Typing(Arrays.asList(x1));\n    typing6.set(x1, interfaceType);\n    typingList.add(typing6);\n\n    Typing typing7 = new Typing(Arrays.asList(x1));\n    typing7.set(x1, abstractType);\n    typingList.add(typing7);\n\n    Typing typing8 = new Typing(Arrays.asList(x1));\n    typing8.set(x1, fatherClassType);\n    typingList.add(typing8);\n\n    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());\n\n    assertEquals(7, typingList.size());\n    assertThat(typingList, containsInAnyOrder(typing2, typing3, typing4, typing5, typing6, typing7, typing8));\n  }\n']",Related;Non;Typing;new;typing;List;Bytecode;Local;Typing;Typing,2.3283064365386963e-09;1.979060471057892e-09;1.9208528101444244e-09;1.862645149230957e-09;1.8044374883174896e-09;1.6298145055770874e-09;1.280568540096283e-09;1.1641532182693481e-09;9.89530235528946e-10;8.149072527885437e-10,5,5,"[-5.344213962554932, -5.101969242095947, -5.474335193634033, -6.468295574188232, -5.3720808029174805, -0.02147889882326126]",0.9787502288818359
1,"['\t@Test\n\tpublic void testClinitOf() {\n\t\tPath cp = Paths.get(""src"", ""test"", ""resources"", ""Clinit"", ""bin"");\n\t\tG.reset();\n\t\tOptions.v().set_prepend_classpath(true);\n\t\tOptions.v().set_process_dir(Collections.singletonList(cp.toFile().getAbsolutePath()));\n\t\tOptions.v().set_src_prec(Options.src_prec_class);\n\t\tOptions.v().set_allow_phantom_refs(true);\n\t\tOptions.v().set_ignore_resolving_levels(true);\n\t\tOptions.v().setPhaseOption(""cg.spark"", ""on"");\n\t\tOptions.v().setPhaseOption(""cg.spark"", ""string-constants:true"");\n\t\tOptions.v().set_whole_program(true);\n\t\tScene.v().loadNecessaryClasses();\n\t\tSootMethod mainMethod = Scene.v().getMainMethod();\n\t\tScene.v().setEntryPoints(Collections.singletonList(mainMethod));\n\t\tPackManager.v().getPack(""cg"").apply();\n\t\tCallGraph cg = Scene.v().getCallGraph();\n\t\tboolean found = false;\n\t\tfor (Edge edge : cg) {\n\t\t\tif (edge.getSrc().method().getSignature().equals(""<soot.Main: void main(java.lang.String[])>"")) {\n\t\t\t\tif (edge.getTgt().method().getSignature().equals(""<soot.A: void <clinit>()>"")) { // A1 is used in main\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tassertTrue(found);\n\t\tSootClass a1 = Scene.v().getSootClassUnsafe(""soot.A1"");\n\t\tSootClass a = Scene.v().getSootClassUnsafe(""soot.A"");\n\t\tassertTrue(a1 != null);\n\t\tList<String> clinits1 = new ArrayList<>();\n\t\tEntryPoints.v().clinitsOf(a1).forEach(e -> {\n\t\t\tclinits1.add(e.toString());\n\t\t});\n\t\tList<String> clinits = new ArrayList<>();\n\t\tEntryPoints.v().clinitsOf(a).forEach(e -> {\n\t\t\tclinits.add(e.toString());\n\t\t});\n\t\tassertEquals(clinits1, clinits);\n\t}\n']",Main;Points;phantom;Collections;bin;Path;singleton;resources;Unsafe;Options,1.0477378964424133e-09;9.89530235528946e-10;9.458744898438454e-10;9.022187441587448e-10;5.093170329928398e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.4481658935546875, -5.099660873413086, -5.447425842285156, -6.464357376098633, -5.42286491394043, -0.020899666473269463]",0.9793171286582947
1,"['    @Test\n    public void ownPackage() {\n        G.reset();\n        ModuleUtil moduleUtil = ModuleUtil.v();\n        ModuleScene moduleScene = ModuleScene.v();\n\n        SootModuleInfo moduleA = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleA"");\n        moduleA.addExportedPackage(""de.upb"");\n        moduleScene.addClassSilent(moduleA);\n\n\n        String foundModule = moduleUtil.declaringModule(""de.upb"", ""moduleA"");\n        Assert.assertEquals(""moduleA"", foundModule);\n    }\n']",up;reset;own;Util;module;Scene;oot;module;add;module,8.440110832452774e-10;7.566995918750763e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.481241703033447, -5.068110942840576, -5.454677104949951, -6.473532199859619, -5.427631855010986, -0.02088857628405094]",0.9793280959129333
1,"['    @Test\n    public void simpleExport() {\n        G.reset();\n        ModuleScene moduleScene = ModuleScene.v();\n\n        SootModuleInfo moduleA = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleA"");\n        moduleA.addExportedPackage(""de.upb"");\n        moduleScene.addClassSilent(moduleA);\n\n        SootModuleInfo moduleB = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleB"");\n        moduleB.getRequiredModules().put(moduleA, Modifier.REQUIRES_STATIC);\n        moduleScene.addClassSilent(moduleB);\n\n        ModuleUtil moduleUtil = ModuleUtil.v();\n        String foundModule = moduleUtil.declaringModule(""de.upb.A"", ""moduleB"");\n        Assert.assertEquals(""moduleA"", foundModule);\n\n    }\n']",reset;Module;Export;Module;STATIC;Scene;de;MODULE;module;Class,1.7462298274040222e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.474713932722807e-10;4.3655745685100555e-10;4.3655745685100555e-10,5,5,"[-5.430131912231445, -5.112499713897705, -5.473523139953613, -6.465768337249756, -5.373096466064453, -0.02101477049291134]",0.9792044758796692
1,"['    @Test\n    public void simpleRequiresTransitiveExport() {\n        G.reset();\n        ModuleScene moduleScene = ModuleScene.v();\n\n        SootModuleInfo moduleA = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleA"");\n        moduleA.addExportedPackage(""de.upb"");\n        moduleScene.addClassSilent(moduleA);\n\n        SootModuleInfo moduleB = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleB"");\n        moduleB.getRequiredModules().put(moduleA, Modifier.REQUIRES_TRANSITIVE);\n        moduleScene.addClassSilent(moduleB);\n\n\n        SootModuleInfo moduleC = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleC"");\n        moduleC.getRequiredModules().put(moduleB, Modifier.REQUIRES_STATIC);\n        moduleScene.addClassSilent(moduleC);\n\n        ModuleUtil moduleUtil = ModuleUtil.v();\n        String foundModule = moduleUtil.declaringModule(""de.upb.A"", ""moduleC"");\n        Assert.assertEquals(""moduleA"", foundModule);\n\n    }\n']",declaring;Assert;Modifier;Scene;Required;INFO;de;oot;simple;REQUIRES,1.6880221664905548e-09;8.440110832452774e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.457196235656738, -5.111815452575684, -5.491096496582031, -6.489092826843262, -5.391400337219238, -0.02070235088467598]",0.979510486125946
1,"['    @Test\n    public void TwoLevelRequiresTransitiveExport() {\n        G.reset();\n        ModuleScene moduleScene = ModuleScene.v();\n\n        SootModuleInfo moduleA = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleA"");\n        moduleA.addExportedPackage(""de.upb"");\n        moduleScene.addClassSilent(moduleA);\n\n        SootModuleInfo moduleB = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleB"");\n        moduleB.getRequiredModules().put(moduleA, Modifier.REQUIRES_TRANSITIVE);\n        moduleScene.addClassSilent(moduleB);\n\n\n        SootModuleInfo moduleC = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleC"");\n        moduleC.getRequiredModules().put(moduleB, Modifier.REQUIRES_TRANSITIVE);\n        moduleScene.addClassSilent(moduleC);\n\n\n        SootModuleInfo moduleD = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleD"");\n        moduleD.getRequiredModules().put(moduleC, Modifier.REQUIRES_STATIC);\n        moduleScene.addClassSilent(moduleD);\n\n        ModuleUtil moduleUtil = ModuleUtil.v();\n        String foundModule = moduleUtil.declaringModule(""de.upb.A"", ""moduleD"");\n        // output should be D, because module C, does NOT REQUIERS TRANSITIVE module B\n        Assert.assertEquals(""moduleA"", foundModule);\n\n    }\n']",TRANSITIVE;Util;Transitive;Export;Util;module;new;Scene;Modifier;module,2.0372681319713593e-09;1.6298145055770874e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.444998741149902, -5.11078405380249, -5.436456680297852, -6.4507527351379395, -5.399154186248779, -0.02102329023182392]",0.9791961312294006
1,"['    @Test\n    public void TwoLevelRequiresTransitiveExportFailing() {\n        G.reset();\n        ModuleScene moduleScene = ModuleScene.v();\n\n        SootModuleInfo moduleA = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleA"");\n        moduleA.addExportedPackage(""de.upb"");\n        moduleScene.addClassSilent(moduleA);\n\n        SootModuleInfo moduleB = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleB"");\n        moduleB.getRequiredModules().put(moduleA, Modifier.REQUIRES_TRANSITIVE);\n        moduleScene.addClassSilent(moduleB);\n\n\n        SootModuleInfo moduleC = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleC"");\n        moduleC.getRequiredModules().put(moduleB, Modifier.REQUIRES_STATIC);\n        moduleScene.addClassSilent(moduleC);\n\n\n        SootModuleInfo moduleD = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleD"");\n        moduleD.getRequiredModules().put(moduleC, Modifier.REQUIRES_STATIC);\n        moduleScene.addClassSilent(moduleD);\n\n        ModuleUtil moduleUtil = ModuleUtil.v();\n        String foundModule = moduleUtil.declaringModule(""de.upb.A"", ""moduleD"");\n        // output should be D, because module C, does NOT REQUIERS TRANSITIVE module B\n        Assert.assertEquals(""moduleD"", foundModule);\n\n    }\n']",REQUIRES;Scene;NOT;Two;declaring;REQUIRES;STATIC;STATIC;module;Modifier,8.803908713161945e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6557245291769505e-10,5,5,"[-5.456099510192871, -5.1005730628967285, -5.4333295822143555, -6.4521307945251465, -5.407421112060547, -0.02101150155067444]",0.9792076945304871
1,"['  @Test\n  public void runTestAndCompareOutput() throws IOException {\n    runSoot();\n    String comparisonOutput = createComparison();\n\n    /*\n     * Print output for comparison to file for debugging purposes.\n     */\n    File compareFile = new File(""sootOutput/"" + getTargetClass() + "".asm.compare"");\n    PrintWriter ow = new PrintWriter(compareFile);\n    ow.print(comparisonOutput);\n    ow.flush();\n    ow.close();\n\n    File targetFile = new File(""sootOutput/"" + getTargetClass() + "".asm"");\n    assertTrue(String.format(""Soot output file %s not found"", targetFile.getAbsolutePath()), targetFile.exists());\n    Scanner sootOutput = new Scanner(targetFile);\n    Scanner compareOutput = new Scanner(comparisonOutput);\n\n    try {\n      System.out.println(\n          String.format(""Comparing files %s and %s..."", compareFile.getAbsolutePath(), targetFile.getAbsolutePath()));\n      int line = 1;\n      while (compareOutput.hasNextLine()) {\n        // Soot-output must have as much lines as the compared output.\n        assertTrue(String.format(""Too few lines in Soot-output for class %s! Current line: %d. Comparison output: %s"",\n            getTargetClass(), line, comparisonOutput), sootOutput.hasNextLine());\n\n        // Get both lines\n        String compare = compareOutput.nextLine();\n\n        String output = sootOutput.nextLine();\n\n        // Compare lines\n        assertTrue(String.format(""Expected line %s, but got %s in line %d for class %s"", compare.trim(), output.trim(), line,\n            getTargetClass()), compare.equals(output));\n        ++line;\n      }\n\n      assertFalse(String.format(""Too many lines in Soot-output for class %s!"", getTargetClass()), sootOutput.hasNextLine());\n      System.out.println(""File comparison successful."");\n    } finally {\n      sootOutput.close();\n      compareOutput.close();\n    }\n  }\n']",IOException;asm;comparison;Line;Compare;output;create;file;Scanner;soot,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.397896766662598, -5.037899971008301, -5.373466491699219, -6.433782577514648, -5.412496566772461, -0.021957622841000557]",0.9782816767692566
1,"['  @Test\n  public void testMinimalVersionAnnotation() {\n    thrown.expect(IllegalArgumentException.class);\n    thrown.expectMessage(""Enforced Java version 1.3 too low to support required features (1.5 required)"");\n    runSoot(""soot.asm.backend.targets.AnnotatedClass"", ""1.3"");\n\n  }\n']",Minimal;thrown;Version;thrown;oot;asm;features;Argument;Class;argets,1.862645149230957e-09;1.862645149230957e-09;1.2223608791828156e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-5.54392671585083, -4.9986162185668945, -5.4860100746154785, -6.560079574584961, -5.457239151000977, -0.020696628838777542]",0.9795162081718445
1,"['  @Test\n  public void testSufficientUserVersion() {\n    try {\n      runSoot(""soot.asm.backend.targets.AnnotatedClass"", ""1.7"");\n      return;\n    } catch (RuntimeException e) {\n      fail(""Version 1.7 should be sufficient for features of pkg.AnnotatedClass!"");\n    }\n  }\n']",asm;User;ated;catch;backend;An;be;Class;return;An,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-5.5548858642578125, -4.9915452003479, -5.471184730529785, -6.533648490905762, -5.486486911773682, -0.02067829668521881]",0.9795340299606323
1,"['  @Test\n  public void loadClass() {\n    G.reset();\n    // Location of the rt.jar\n    String rtJar = System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""rt.jar"";\n\n    // Run Soot and print output to .asm-files.\n    Main.main(new String[] { ""-cp"", getClassPathFolder() + File.pathSeparator + rtJar, ""-process-dir"", getTargetFolder(),\n        ""-src-prec"", ""only-class"", ""-output-format"", ""class"", ""-asm-backend"", ""-allow-phantom-refs"", ""-java-version"",\n        getRequiredJavaVersion(), getTargetClass() });\n\n    File file = new File(""./sootOutput/ConstantPool.class"");\n    URL[] urls = null;\n    try {\n      URL url = file.toURI().toURL();\n      urls = new URL[] { url };\n      URLClassLoader cl = new URLClassLoader(urls);\n\n      cl.loadClass(getTargetClass());\n\n      // cl.close();\n      // Java 6 backwards compatibility hack\n      try {\n        for (Method m : URLClassLoader.class.getDeclaredMethods()) {\n          if (m.getName().equals(""close"")) {\n            m.invoke(cl);\n            break;\n          }\n        }\n      } catch (Exception e) {\n      }\n      return;\n\n    } catch (MalformedURLException e) {\n      logger.error(e.getMessage(), e);\n    } catch (ClassNotFoundException e) {\n      logger.error(e.getMessage(), e);\n    }\n\n    fail();\n\n  }\n']",close;main;Main;Declared;close;Method;Loader;and;backend;Run,9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.548361852765083e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.418062210083008, -5.073085308074951, -5.430960655212402, -6.453850746154785, -5.433319091796875, -0.021244818344712257]",0.9789792895317078
1,"['  @Test\n  public void shouldExtractMetricsFromPrometheusMetricsAndSerialiseJson()\n      throws JsonProcessingException {\n    when(prometheusMock.streamObservations()).thenReturn(getMockObservations().stream());\n    final MetricsDataFactory metricsDataFactory = new MetricsDataFactory(prometheusMock);\n\n    final List<BaseMetricData> baseMetricData = metricsDataFactory.getMetricData(timeProvider);\n    assertThat(baseMetricData.size()).isEqualTo(3);\n    final String beaconNode = jsonProvider.objectToJSON(baseMetricData.get(0));\n    final String validator = jsonProvider.objectToJSON(baseMetricData.get(1));\n    final String system = jsonProvider.objectToJSON(baseMetricData.get(2));\n\n    BeaconNodeMetricData beaconNodeDeserialized =\n        jsonProvider.jsonToObject(beaconNode, BeaconNodeMetricData.class);\n    ValidatorMetricData validatorDeserialized =\n        jsonProvider.jsonToObject(validator, ValidatorMetricData.class);\n    SystemMetricData systemDeserialized = jsonProvider.jsonToObject(system, SystemMetricData.class);\n\n    assertThat(baseMetricData.get(0)).isInstanceOf(BeaconNodeMetricData.class);\n    assertThat(baseMetricData.get(1)).isInstanceOf(ValidatorMetricData.class);\n    assertThat(baseMetricData.get(2)).isInstanceOf(SystemMetricData.class);\n\n    assertThat(baseMetricData.get(0)).isEqualTo(beaconNodeDeserialized);\n    assertThat(baseMetricData.get(1)).isEqualTo(validatorDeserialized);\n    assertThat(baseMetricData.get(2)).isEqualTo(systemDeserialized);\n  }\n']",ock;Prometheus;Return;Deserialized;Deserialized;prometheus;beacon;stream;beacon;Serialise,1.6298145055770874e-09;1.4551915228366852e-09;1.0477378964424133e-09;6.693881005048752e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.428430557250977, -5.03210973739624, -5.410905361175537, -6.457355499267578, -5.462589263916016, -0.02142184227705002]",0.9788058400154114
1,"['  @Test\n  public void shouldDeserializeObjectFromString() throws JsonProcessingException {\n    when(prometheusMock.streamObservations()).thenReturn(getMockObservations().stream());\n    final MetricsDataFactory metricsDataFactory = new MetricsDataFactory(prometheusMock);\n    final List<BaseMetricData> baseMetricData = metricsDataFactory.getMetricData(timeProvider);\n    assertThat(baseMetricData.size()).isEqualTo(3);\n\n    String listOfMetrics = jsonProvider.objectToJSON(baseMetricData);\n    DeserializedMetricDataObject[] base =\n        jsonProvider.jsonToObject(listOfMetrics, DeserializedMetricDataObject[].class);\n\n    assertThat(base.length).isEqualTo(3);\n  }\n']",prometheus;json;Metric;Metric;json;time;Provider;Factory;Deserialized;ock,1.5133991837501526e-09;9.313225746154785e-10;8.658389560878277e-10;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.473037242889404, -5.045616626739502, -5.438328266143799, -6.499276638031006, -5.455036163330078, -0.02098045125603676]",0.9792380928993225
1,"['  @Test\n  public void shouldSerializeObjectFromPrometheusMetricsWithDefaultValues()\n      throws JsonProcessingException {\n    when(prometheusMock.streamObservations()).thenReturn(new ArrayList<Observation>().stream());\n    final MetricsDataFactory metricsDataFactory = new MetricsDataFactory(prometheusMock);\n\n    final List<BaseMetricData> baseMetricData = metricsDataFactory.getMetricData(timeProvider);\n    assertThat(baseMetricData.size()).isEqualTo(3);\n    final String beaconNode = jsonProvider.objectToJSON(baseMetricData.get(0));\n    final String validator = jsonProvider.objectToJSON(baseMetricData.get(1));\n    final String system = jsonProvider.objectToJSON(baseMetricData.get(2));\n\n    BeaconNodeMetricData beaconNodeDeserialized =\n        jsonProvider.jsonToObject(beaconNode, BeaconNodeMetricData.class);\n    ValidatorMetricData validatorDeserialized =\n        jsonProvider.jsonToObject(validator, ValidatorMetricData.class);\n    SystemMetricData systemDeserialized = jsonProvider.jsonToObject(system, SystemMetricData.class);\n\n    assertThat(baseMetricData.get(0)).isInstanceOf(BeaconNodeMetricData.class);\n    assertThat(baseMetricData.get(1)).isInstanceOf(ValidatorMetricData.class);\n    assertThat(baseMetricData.get(2)).isInstanceOf(SystemMetricData.class);\n\n    assertThat(baseMetricData.get(0)).isEqualTo(beaconNodeDeserialized);\n    assertThat(baseMetricData.get(1)).isEqualTo(validatorDeserialized);\n    assertThat(baseMetricData.get(2)).isEqualTo(systemDeserialized);\n\n    assertThat(beaconNodeDeserialized.network_peers_connected).isNull();\n    assertThat(validatorDeserialized.validator_total).isNull();\n    assertThat(systemDeserialized.cpu_node_system_seconds_total).isNull();\n  }\n']",Prometheus;time;prometheus;should;system;system;Metrics;son;json;Default,1.2223608791828156e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.351287841796875, -5.060863494873047, -5.423251152038574, -6.451600551605225, -5.41815185546875, -0.02174290083348751]",0.9784917831420898
1,"['  @Test\n  public void shouldSerializeObject() throws JsonProcessingException {\n    final ValidatorMetricData process =\n        new ValidatorMetricData(\n            1, UInt64.valueOf(10L).longValue(), ""system"", 11L, 12L, ""teku"", ""21.8"", 3, 4);\n    final String data = jsonProvider.objectToJSON(process);\n    assertThat(process).isEqualTo(jsonProvider.jsonToObject(data, ValidatorMetricData.class));\n  }\n']",system;final;long;json;That;Metric;json;Metric;Validator;Value,8.731149137020111e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.473706245422363, -5.0362653732299805, -5.453239440917969, -6.493718147277832, -5.467709064483643, -0.02092733420431614]",0.9792901277542114
1,['  @BeforeEach\n  public void beforeEach() throws Exception {\n    mockWebServer.start();\n  }\n'],mock;start;Each;Exception;Before;Server;Web;before;Each,5.587935447692871e-09;1.862645149230957e-09;1.3969838619232178e-09;-9.313225746154785e-10;-1.3969838619232178e-09;-2.3283064365386963e-09;-2.444721758365631e-09;-2.561137080192566e-09;-2.561137080192566e-09,5,5,"[-5.567773818969727, -4.879180431365967, -5.454247951507568, -6.593823432922363, -5.52742862701416, -0.021269910037517548]",0.9789546728134155
1,['  @AfterEach\n  public void afterEach() throws Exception {\n    mockWebServer.shutdown();\n  }\n'],after;mock;Each;After;Each;Exception;Server;shutdown;Web,2.561137080192566e-09;9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-7.566995918750763e-10;-2.3283064365386963e-09;-2.735760062932968e-09;-3.4924596548080444e-09,5,5,"[-5.564126014709473, -4.874351501464844, -5.4739274978637695, -6.605032920837402, -5.530712127685547, -0.02120770700275898]",0.979015588760376
1,"['  @Test\n  public void shouldRunPublisherEveryXSeconds() throws InterruptedException, IOException {\n    MetricsPublisherManager publisherManager =\n        new MetricsPublisherManager(asyncRunnerFactory, timeProvider, metricsEndpoint);\n    publisherManager.setMetricsPublisher(metricsPublisher);\n    verify(metricsPublisher, times(0)).publishMetrics(anyString(), anyString());\n    SafeFuture<?> safeFuture = publisherManager.doStart();\n    assertThat(asyncRunnerFactory.getStubAsyncRunners().size()).isEqualTo(1);\n    asyncRunnerFactory.getStubAsyncRunners().get(0).executeQueuedActions();\n    verify(metricsPublisher, times(1)).publishMetrics(anyString(), anyString());\n    asyncRunnerFactory.getStubAsyncRunners().get(0).executeQueuedActions();\n    verify(metricsPublisher, times(2)).publishMetrics(anyString(), anyString());\n    Assertions.assertThat(safeFuture).isEqualTo(SafeFuture.COMPLETE);\n  }\n']",Safe;Metrics;metrics;Publisher;Future;Run;Metrics;Publisher;execute;Async,1.0477378964424133e-09;8.149072527885437e-10;5.820766091346741e-10;4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.147295840084553e-10;3.7834979593753815e-10,5,5,"[-5.497872352600098, -5.004004001617432, -5.448564052581787, -6.524353504180908, -5.490940570831299, -0.020917529240250587]",0.9792998433113098
1,"['  @Test\n  public void shouldReturnHTTPStatusOk() throws IOException {\n    MetricsPublisherManager publisherManager =\n        new MetricsPublisherManager(asyncRunnerFactory, timeProvider, metricsEndpoint);\n    publisherManager.setMetricsPublisher(metricsPublisher);\n    Assertions.assertThat(publisherManager.publishMetrics()).isEqualTo(200);\n  }\n']",Return;Manager;should;Metrics;Manager;Runner;HTTPStatus;Factory;Publisher;Manager,6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.523980617523193, -4.98814582824707, -5.458558082580566, -6.536705493927002, -5.488016605377197, -0.020869547501206398]",0.9793468117713928
1,"['  @Test\n  public void shouldStopGracefully() throws IOException {\n    MetricsPublisherManager publisherManager =\n        new MetricsPublisherManager(asyncRunnerFactory, timeProvider, metricsEndpoint);\n    publisherManager.setMetricsPublisher(metricsPublisher);\n    SafeFuture<?> safeFuture = publisherManager.doStart();\n    Assertions.assertThat(safeFuture).isEqualTo(SafeFuture.COMPLETE);\n    safeFuture = publisherManager.doStop();\n    Assertions.assertThat(safeFuture).isEqualTo(SafeFuture.COMPLETE);\n  }\n']",should;Publisher;COMPLETE;publisher;Publisher;safe;Safe;Future;Start;Safe,8.149072527885437e-10;8.149072527885437e-10;6.693881005048752e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.513090133666992, -5.0044708251953125, -5.4769158363342285, -6.5463409423828125, -5.498641014099121, -0.020663466304540634]",0.9795485734939575
1,"['  @Test\n  public void shouldReadSlashingProtectionFile_withEmptyGenesisValidatorsRoot(@TempDir Path tempDir)\n      throws IOException, URISyntaxException {\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n    Optional<String> error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtection.yml"", tempDir), log::add);\n    assertThat(log).containsExactly(""Exporting "" + pubkey);\n    assertThat(error).isEmpty();\n\n    final SlashingProtectionInterchangeFormat parsedData =\n        jsonProvider.jsonToObject(\n            exporter.getPrettyJson(), SlashingProtectionInterchangeFormat.class);\n    final SlashingProtectionInterchangeFormat expectedData = getExportData(null, 327, 51, 1741);\n    assertThat(parsedData).isEqualTo(expectedData);\n  }\n']",son;Validators;temp;Temp;with;File;Dir;Slashing;exporter;Slashing,5.966285243630409e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.055902197957039e-10,5,5,"[-5.478872299194336, -5.029343128204346, -5.450861930847168, -6.491792678833008, -5.4790849685668945, -0.020915893837809563]",0.9793013334274292
1,"['  @Test\n  public void shouldReadSlashingProtectionFile_withGenesisValidatorsRoot(@TempDir Path tempDir)\n      throws IOException, URISyntaxException {\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n    Optional<String> error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtectionWithGenesisRoot.yml"", tempDir), log::add);\n    assertThat(log).containsExactly(""Exporting "" + pubkey);\n    assertThat(error).isEmpty();\n\n    final SlashingProtectionInterchangeFormat parsedData =\n        jsonProvider.jsonToObject(\n            exporter.getPrettyJson(), SlashingProtectionInterchangeFormat.class);\n    final SlashingProtectionInterchangeFormat expectedData =\n        getExportData(validatorsRoot, 327, 51, 1741);\n    assertThat(parsedData).isEqualTo(expectedData);\n  }\n']",should;pubkey;Genesis;Optional;log;contains;add;Dir;ml;temp,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10,5,5,"[-5.474316596984863, -5.03169059753418, -5.448038101196289, -6.490325450897217, -5.473388671875, -0.020958738401532173]",0.9792593717575073
1,"['  @Test\n  public void shouldReadFilesWithEmptyRootAfterGenesisRootIsDefined(@TempDir Path tempDir)\n      throws URISyntaxException, IOException {\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n    Optional<String> error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtectionWithGenesisRoot.yml"", tempDir), log::add);\n    assertThat(error).isEmpty();\n    error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtection.yml"", tempDir), log::add);\n    assertThat(error).isEmpty();\n\n    assertThat(log).containsExactly(""Exporting "" + pubkey, ""Exporting "" + pubkey);\n  }\n']",pubkey;should;add;Files;Optional;new;error;Protection;add;That,1.7462298274040222e-09;1.5133991837501526e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.87666828930378e-10;7.566995918750763e-10;7.566995918750763e-10,5,5,"[-5.493271350860596, -5.020323753356934, -5.451277732849121, -6.497636795043945, -5.476626873016357, -0.020915193483233452]",0.9793019890785217
1,"['  @Test\n  public void shouldReadFileWithGenesisRootDefinedSecond(@TempDir Path tempDir)\n      throws URISyntaxException, IOException {\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n    Optional<String> error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtection.yml"", tempDir), log::add);\n    assertThat(error).isEmpty();\n    error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtectionWithGenesisRoot.yml"", tempDir), log::add);\n    assertThat(error).isEmpty();\n\n    assertThat(log).containsExactly(""Exporting "" + pubkey, ""Exporting "" + pubkey);\n  }\n']",IOException;Slash;Exception;exporter;Protection;temp;Dir;final;should;pubkey,1.0913936421275139e-09;8.149072527885437e-10;6.984919309616089e-10;5.093170329928398e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.4948859214782715, -5.018058776855469, -5.444249629974365, -6.497560977935791, -5.478360652923584, -0.020947180688381195]",0.9792705774307251
1,"['  @Test\n  public void shouldNotAcceptDifferentGenesisValidatorsRoot(@TempDir Path tempDir)\n      throws URISyntaxException, IOException {\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n    Optional<String> error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtectionWithGenesisRoot2.yml"", tempDir), LOG::debug);\n    assertThat(error).isEmpty();\n    error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtectionWithGenesisRoot.yml"", tempDir), LOG::debug);\n    assertThat(error.orElse("""")).startsWith(""The genesisValidatorsRoot of"");\n  }\n']",The;Genesis;Accept;exporter;exporter;should;using;genesis;File;Different,1.0477378964424133e-09;9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.488191604614258, -5.020345211029053, -5.450234413146973, -6.502262115478516, -5.470776557922363, -0.02095908857882023]",0.9792591333389282
1,"['  @Test\n  public void shouldRequirePubkeyInFilename(@TempDir Path tempDir) throws URISyntaxException {\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n    final Optional<String> error =\n        exporter.readSlashProtectionFile(\n            new File(Resources.getResource(""slashProtectionWithGenesisRoot.yml"").toURI()),\n            LOG::debug);\n    assertThat(error.orElse(""""))\n        .contains(""Public key in file slashProtectionWithGenesisRoot.yml does not appear valid."");\n  }\n']",Slash;Genesis;should;temp;Protection;read;Else;Require;contains;Dir,1.0477378964424133e-09;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.456968210637569e-10;5.238689482212067e-10,5,5,"[-5.510887622833252, -4.997060298919678, -5.44327974319458, -6.505557537078857, -5.480530261993408, -0.021006949245929718]",0.9792121648788452
1,"['  @Test\n  public void shouldPrintIfFileCannotBeRead(@TempDir Path tempDir)\n      throws URISyntaxException, IOException {\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n    final File file = usingResourceFile(""slashProtection.yml"", tempDir);\n    OSUtils.makeNonReadable(file.toPath());\n    // It\'s not always possible to remove read permissions from a file\n    assumeThat(file.canRead()).describedAs(""Can read file %s"", file).isFalse();\n    final Optional<String> error = exporter.readSlashProtectionFile(file, LOG::debug);\n    assertThat(error.orElse("""")).startsWith(""Failed to read from file"");\n  }\n']",It's;from;That;Protection;assume;URISyntax;Protection;using;Exporter;annot,3.725290298461914e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.542133808135986, -4.953306674957275, -5.428185939788818, -6.497035980224609, -5.502755641937256, -0.021175261586904526]",0.9790473580360413
1,"['  @Test\n  public void shouldExportSlashProtection(@TempDir Path tempDir)\n      throws IOException, URISyntaxException {\n    final Path exportedFile = tempDir.resolve(""exportedFile.json"").toAbsolutePath();\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n\n    final Optional<String> error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtection.yml"", tempDir), LOG::debug);\n    assertThat(error).isEmpty();\n    assertThat(Files.exists(exportedFile)).isFalse();\n    exporter.saveToFile(exportedFile.toString(), LOG::debug);\n    assertThat(Files.exists(exportedFile)).isTrue();\n  }\n']",LOG;exported;Resource;using;Protection;Exporter;Protection;exporter;Slashing;Dir,3.3760443329811096e-09;3.026798367500305e-09;1.3969838619232178e-09;1.280568540096283e-09;9.89530235528946e-10;8.731149137020111e-10;8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-5.498503684997559, -5.012977123260498, -5.454093933105469, -6.492451190948486, -5.489578723907471, -0.020883673802018166]",0.9793328642845154
1,"['  @Test\n  public void shouldExportSlashProtection(@TempDir Path tempDir)\n      throws IOException, URISyntaxException {\n    final Path exportedFile = tempDir.resolve(""exportedFile.json"").toAbsolutePath();\n    final SlashingProtectionIncrementalExporter exporter =\n        new SlashingProtectionIncrementalExporter(tempDir);\n\n    final Optional<String> error =\n        exporter.readSlashProtectionFile(\n            usingResourceFile(""slashProtection.yml"", tempDir), LOG::debug);\n    assertThat(error).isEmpty();\n    assertThat(Files.exists(exportedFile)).isFalse();\n    exporter.saveToFile(exportedFile.toString(), LOG::debug);\n\n    final String exportedData = exporter.finalise();\n    final String expectedResult = resourceFileAsString(""shouldExportSlashProtection.json"");\n    assertThat(exportedData).isEqualTo(expectedResult);\n  }\n']",URISyntax;Incremental;Path;exported;File;exported;should;qual;Protection;Exporter,1.1059455573558807e-09;5.820766091346741e-10;5.238689482212067e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.496264457702637, -5.017326354980469, -5.455801010131836, -6.5034685134887695, -5.486577033996582, -0.020851917564868927]",0.9793639779090881
1,"['  @Test\n  public void shouldNotUpdateFilesWithInvalidPubkeys(@TempDir Path tempDir) throws IOException {\n    setupPathForTest(tempDir, Map.of(""a.yml"", Optional.of(validatorSigningRecord)));\n    SlashingProtectionRepairer repairer =\n        SlashingProtectionRepairer.create(subCommandLogger, tempDir, true);\n    assertThat(repairer.hasUpdates()).isFalse();\n    verify(subCommandLogger).display("" --- a.yml - invalid public key - ignoring file"");\n\n    repairer.updateRecords(UInt64.MAX_VALUE, UInt64.MAX_VALUE);\n    verifyNoMoreInteractions(subCommandLogger);\n\n    assertThat(fileContents(tempDir.resolve(""a.yml"")))\n        .isEqualTo(Optional.of(validatorSigningRecord));\n  }\n']",Pubkeys;Temp;Dir;should;Slashing;temp;repaire;Optional;Records;Protection,1.5425030142068863e-09;1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;6.330083124339581e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10,5,5,"[-5.5119733810424805, -5.01267671585083, -5.426209449768066, -6.4896039962768555, -5.467372417449951, -0.021052472293376923]",0.9791675806045532
1,"['  @Test\n  public void shouldUpdateValidAndInvalidFiles(@TempDir Path tempDir) throws IOException {\n    setupPathForTest(tempDir, testData);\n    SlashingProtectionRepairer repairer =\n        SlashingProtectionRepairer.create(subCommandLogger, tempDir, true);\n    assertThat(repairer.hasUpdates()).isTrue();\n\n    final UInt64 blockSlot = UInt64.valueOf(1023999);\n    final UInt64 attestationEpoch = UInt64.valueOf(2344);\n    repairer.updateRecords(blockSlot, attestationEpoch);\n\n    final Optional<ValidatorSigningRecord> defaultRecord =\n        Optional.of(\n            new ValidatorSigningRecord(null, blockSlot, attestationEpoch, attestationEpoch));\n\n    assertThat(fileContents(tempDir.resolve(keys.get(0)))).isEqualTo(defaultRecord);\n    // all original values were lower, so the entire file should get updated\n    assertThat(fileContents(tempDir.resolve(keys.get(1)))).isEqualTo(defaultRecord);\n    // sourceAttestation changed, but other values were higher\n    assertThat(fileContents(tempDir.resolve(keys.get(2))))\n        .isEqualTo(\n            optionalSigningRecord(UInt64.valueOf(1024000), attestationEpoch, UInt64.valueOf(2345)));\n    // all original values were better\n    assertThat(fileContents(tempDir.resolve(keys.get(3)))).isEqualTo(testData.get(keys.get(3)));\n  }\n']",Validator;That;That;Temp;Update;Record;Epoch;Path;block;Protection,2.7939677238464355e-09;1.6298145055770874e-09;1.280568540096283e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.495621681213379, -4.90804386138916, -5.345979690551758, -6.437231063842773, -5.481688022613525, -0.022268133237957954]",0.977977991104126
1,"['  @Test\n  public void shouldUpdateInvalidFiles(@TempDir Path tempDir) throws IOException {\n    setupPathForTest(tempDir, testData);\n    SlashingProtectionRepairer repairer =\n        SlashingProtectionRepairer.create(subCommandLogger, tempDir, false);\n    assertThat(repairer.hasUpdates()).isTrue();\n\n    final UInt64 blockSlot = UInt64.valueOf(1023999);\n    final UInt64 attestationEpoch = UInt64.valueOf(2344);\n    repairer.updateRecords(blockSlot, attestationEpoch);\n\n    final Optional<ValidatorSigningRecord> defaultRecord =\n        Optional.of(\n            new ValidatorSigningRecord(null, blockSlot, attestationEpoch, attestationEpoch));\n\n    assertThat(fileContents(tempDir.resolve(keys.get(0)))).isEqualTo(defaultRecord);\n    assertThat(fileContents(tempDir.resolve(keys.get(1)))).isEqualTo(testData.get(keys.get(1)));\n    assertThat(fileContents(tempDir.resolve(keys.get(2)))).isEqualTo(testData.get(keys.get(2)));\n    assertThat(fileContents(tempDir.resolve(keys.get(3)))).isEqualTo(testData.get(keys.get(3)));\n  }\n']",That;Data;temp;For;Record;should;new;update;Data;Optional,2.0954757928848267e-09;1.9208528101444244e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.459784507751465, -5.013026237487793, -5.401330947875977, -6.475541114807129, -5.474090576171875, -0.021377384662628174]",0.978849470615387
1,"['  @Test\n  public void shouldFailWithParseError(@TempDir final Path tempDir)\n      throws URISyntaxException, IOException {\n    final String errorString = loadAndGetErrorText(""minimal_invalidKey.json"", tempDir);\n    assertThat(errorString).startsWith(""Failed to load data"");\n  }\n']",Exception;Path;starts;temp;Get;Text;final;URISyntax;Dir;Error,1.3969838619232178e-09;6.402842700481415e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;5.820766091346741e-11;0.0,5,5,"[-5.562353134155273, -4.903635025024414, -5.415997505187988, -6.509796619415283, -5.506927490234375, -0.021480532363057137]",0.9787484407424927
1,"['  @Test\n  public void shouldFailWithInvalidJson(@TempDir final Path tempDir)\n      throws URISyntaxException, IOException {\n    final String errorString = loadAndGetErrorText(""invalid_json.json"", tempDir);\n    assertThat(errorString).startsWith(""Json does not appear valid"");\n  }\n']",URISyntax;son;Temp;final;Dir;does;Fail;final;json;error,3.2014213502407074e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.573879241943359, -4.89741325378418, -5.421857833862305, -6.503518581390381, -5.519138813018799, -0.021415773779153824]",0.978812038898468
1,"['  @Test\n  public void shouldFailWithVersionCheckFailure(@TempDir final Path tempDir)\n      throws URISyntaxException, IOException {\n    final String errorString = loadAndGetErrorText(""oldMetadata.json"", tempDir);\n    assertThat(errorString)\n        .contains(""Required version is "" + Metadata.INTERCHANGE_VERSION.toString());\n  }\n']",temp;Temp;Failure;Metadata;Dir;error;Metadata;Check;Path;temp,7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.542825222015381, -4.94996452331543, -5.390228748321533, -6.468425273895264, -5.490866661071777, -0.021464664489030838]",0.9787640571594238
1,"['  @Test\n  public void shouldFailIfMetadataNotPresent(@TempDir final Path tempDir)\n      throws IOException, URISyntaxException {\n    final String errorString = loadAndGetErrorText(""signedBlock.json"", tempDir);\n    assertThat(errorString).contains(""does not appear to have metadata"");\n  }\n']",Text;Temp;Error;Dir;should;final;Exception;have;to;load,1.6880221664905548e-09;1.3969838619232178e-09;1.280568540096283e-09;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.568863391876221, -4.899137496948242, -5.419241905212402, -6.507646560668945, -5.512211799621582, -0.02145591378211975]",0.9787725210189819
1,"['  @Test\n  public void shouldImportSingleRecord(@TempDir Path tempDir)\n      throws URISyntaxException, IOException {\n    final File ruleFile = usingResourceFile(""slashProtection.yml"", tempDir);\n    final SlashingProtectionImporter importer = new SlashingProtectionImporter(tempDir);\n    importer.initialise(ruleFile);\n    final Optional<String> maybeError = importer.updateSigningRecord(publicKey, (__) -> {});\n    assertThat(maybeError).isEmpty();\n    assertThat(tempDir.resolve(pubkey + "".yml"").toFile()).exists();\n  }\n']",Key;temp;Record;rule;ml;Protection;Import;Importer;Record;temp,1.1059455573558807e-09;6.548361852765083e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.533073425292969, -4.961359024047852, -5.419976234436035, -6.49868106842041, -5.501302242279053, -0.021194402128458023]",0.9790286421775818
1,"['  @Test\n  public void shouldExportAndImportFile(@TempDir Path tempDir)\n      throws IOException, URISyntaxException {\n    final Path exportedFile = tempDir.resolve(""exportedFile.json"").toAbsolutePath();\n\n    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);\n    final File ruleFile = usingResourceFile(""slashProtection.yml"", tempDir);\n    final Optional<String> exportError = exporter.readSlashProtectionFile(ruleFile, LOG::debug);\n    final String originalFileContent = Files.readString(ruleFile.toPath());\n    assertThat(exportError).isEmpty();\n\n    assertThat(Files.exists(ruleFile.toPath())).isTrue();\n    assertThat(Files.exists(exportedFile)).isFalse();\n    exporter.saveToFile(exportedFile.toString(), LOG::debug);\n    ruleFile.delete();\n    assertThat(Files.exists(exportedFile)).isTrue();\n    assertThat(Files.exists(ruleFile.toPath())).isFalse();\n\n    SlashingProtectionImporter importer = new SlashingProtectionImporter(tempDir);\n    importer.initialise(new File(exportedFile.toString()));\n    final Map<BLSPublicKey, String> errors = importer.updateLocalRecords((__) -> {});\n    assertThat(errors).isEmpty();\n    assertThat(Files.exists(ruleFile.toPath())).isTrue();\n\n    assertThat(originalFileContent).isEqualTo(Files.readString(ruleFile.toPath()));\n  }\n']",LOG;Map;errors;Slash;errors;Resource;temp;That;export;Dir,1.862645149230957e-09;1.5133991837501526e-09;1.3969838619232178e-09;9.89530235528946e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.50483512878418, -4.822483539581299, -5.4018731117248535, -6.461091041564941, -5.517675876617432, -0.022450454533100128]",0.9777997732162476
1,"['  @Test\n  public void shouldReadMetadataFromCompleteJson() throws IOException {\n    final String minimalJson =\n        Resources.toString(Resources.getResource(""format1_complete.json""), StandardCharsets.UTF_8);\n\n    JsonNode jsonNode = mapper.readTree(minimalJson);\n    JsonNode metadataJson = jsonNode.get(""metadata"");\n    Metadata metadata = mapper.treeToValue(metadataJson, Metadata.class);\n    assertThat(metadata).isEqualTo(new Metadata(INTERCHANGE_VERSION, GENESIS_ROOT));\n\n    List<SigningHistory> completeSigningHistories =\n        Arrays.asList(mapper.readValue(jsonNode.get(""data"").toString(), SigningHistory[].class));\n\n    assertThat(completeSigningHistories)\n        .containsExactly(\n            new SigningHistory(\n                blsPubKey,\n                List.of(\n                    new SignedBlock(\n                        UInt64.valueOf(81952),\n                        Bytes32.fromHexString(\n                            ""0x0000000000000000000000000000000000000000000000000000000000001234""))),\n                List.of(\n                    new SignedAttestation(\n                        UInt64.valueOf(2290),\n                        UInt64.valueOf(3007),\n                        Bytes32.fromHexString(\n                            ""0x0000000000000000000000000000000000000000000000000000000000000123"")))));\n  }\n']",Charsets;Pub;From;new;Histories;Attestation;should;Signing;History;class,2.2118911147117615e-09;1.862645149230957e-09;1.1641532182693481e-09;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.423506259918213, -4.989205360412598, -5.378145217895508, -6.4199628829956055, -5.474886894226074, -0.02189651131629944]",0.9783414602279663
1,"['  @Test\n  public void shouldCreate() {\n    final SignedAttestation signedAttestation = new SignedAttestation(source, target, signingRoot);\n    assertThat(signedAttestation.sourceEpoch).isEqualTo(source);\n    assertThat(signedAttestation.targetEpoch).isEqualTo(target);\n    assertThat(signedAttestation.signingRoot).isEqualTo(signingRoot);\n  }\n']",signing;signing;Signed;qual;That;signed;signed;Root;final;Attestation,1.1059455573558807e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.538105487823486, -5.036098957061768, -5.376663684844971, -6.472022533416748, -5.453392028808594, -0.02110523171722889]",0.979115903377533
1,"['  @Test\n  public void shouldSerialize() throws JsonProcessingException {\n    final SignedAttestation signedAttestation = new SignedAttestation(source, target, signingRoot);\n    String str = jsonProvider.objectToPrettyJSON(signedAttestation);\n    assertThat(str).isEqualToNormalizingNewlines(jsonData);\n  }\n']",Serialize;Attestation;That;JSON;Signed;Signed;source;str;Root;target,1.2223608791828156e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.515649318695068, -4.976224899291992, -5.4211835861206055, -6.503348350524902, -5.483656883239746, -0.021221360191702843]",0.9790022373199463
1,"['  @Test\n  public void shouldDeserialize() throws JsonProcessingException {\n    final SignedAttestation signedAttestation =\n        jsonProvider.jsonToObject(jsonData, SignedAttestation.class);\n    assertThat(signedAttestation.sourceEpoch).isEqualTo(source);\n    assertThat(signedAttestation.targetEpoch).isEqualTo(target);\n    assertThat(signedAttestation.signingRoot).isEqualTo(signingRoot);\n  }\n']",Processing;json;Attestation;signed;Data;Epoch;json;signing;target;signed,1.0477378964424133e-09;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.4142985343933105, -5.067876815795898, -5.356438636779785, -6.433455944061279, -5.370802402496338, -0.021962637081742287]",0.978276789188385
1,"['  @Test\n  public void shouldReadMetadataFromMinimalJson() throws IOException {\n    final String minimalJson =\n        Resources.toString(Resources.getResource(""format2_minimal.json""), StandardCharsets.UTF_8);\n\n    JsonNode jsonNode = mapper.readTree(minimalJson);\n    JsonNode metadataJson = jsonNode.get(""metadata"");\n    Metadata metadata = mapper.treeToValue(metadataJson, Metadata.class);\n    assertThat(metadata).isEqualTo(new Metadata(INTERCHANGE_VERSION, GENESIS_ROOT));\n\n    List<SigningHistory> minimalSigningHistoryList =\n        Arrays.asList(mapper.readValue(jsonNode.get(""data"").toString(), SigningHistory[].class));\n\n    SigningHistory element =\n        new SigningHistory(\n            blsPubKey,\n            new ValidatorSigningRecord(\n                GENESIS_ROOT, UInt64.valueOf(81952), UInt64.valueOf(2290), UInt64.valueOf(3007)));\n    assertThat(minimalSigningHistoryList).containsExactly(element);\n  }\n']",new;Read;son;VERSION;History;bl;Metadata;Validator;Signing;Signing,2.7939677238464355e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.440110832452774e-10;8.149072527885437e-10;7.8580342233181e-10;7.8580342233181e-10,5,5,"[-5.4352593421936035, -4.96384334564209, -5.361632823944092, -6.418298244476318, -5.468624114990234, -0.022130904719233513]",0.9781121611595154
1,"['  @Test\n  public void shouldSerializeMinimalFormat() throws JsonProcessingException {\n    final Metadata metadata = new Metadata(INTERCHANGE_VERSION, root);\n    assertThat(jsonProvider.objectToPrettyJSON(metadata)).isEqualToNormalizingNewlines(jsonData);\n  }\n']",Format;Serialize;Normalizing;JSON;new;Provider;Data;Exception;qual;metadata,1.5570549294352531e-09;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.521471977233887, -4.936748504638672, -5.399529933929443, -6.502344131469727, -5.483212471008301, -0.021583667024970055]",0.9786475896835327
1,"['  @Test\n  public void shouldSerializeWithoutRoot() throws JsonProcessingException {\n    final Metadata metadata = new Metadata(INTERCHANGE_VERSION, null);\n    assertThat(jsonProvider.objectToPrettyJSON(metadata))\n        .isEqualToIgnoringWhitespace(""{\\""interchange_format_version\\"":\\""5\\""}"");\n  }\n']",Serialize;INTERCHANGE;Without;final;version;son;JSON;Ignoring;metadata;Metadata,1.4551915228366852e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.534628868103027, -4.995145320892334, -5.433391571044922, -6.499186038970947, -5.469056129455566, -0.021025976166129112]",0.979193389415741
1,"['  @Test\n  public void shouldSerializeCompleteFormat() throws JsonProcessingException {\n    final Metadata metadata = new Metadata(INTERCHANGE_VERSION, root);\n    assertThat(jsonProvider.objectToPrettyJSON(metadata)).isEqualToNormalizingNewlines(jsonData);\n  }\n']",VERSION;Complete;should;JSON;metadata;Metadata;Exception;Format;INTERCHANGE;metadata,1.5133991837501526e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;6.402842700481415e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.519528865814209, -4.947475433349609, -5.401323318481445, -6.498554229736328, -5.475991249084473, -0.021541668102145195]",0.9786887168884277
1,"['  @Test\n  public void shouldDeserialize() throws JsonProcessingException {\n    final Metadata metadata = jsonProvider.jsonToObject(jsonData, Metadata.class);\n    assertThat(metadata.interchangeFormatVersion).isEqualTo(INTERCHANGE_VERSION);\n    assertThat(metadata.genesisValidatorsRoot).isEqualTo(root);\n  }\n']",metadata;INTERCHANGE;Exception;json;Data;Validators;Object;That;interchange;Processing,1.1641532182693481e-09;7.566995918750763e-10;6.402842700481415e-10;6.402842700481415e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.469010353088379, -5.001468658447266, -5.372280120849609, -6.472712993621826, -5.423381328582764, -0.021779760718345642]",0.9784558415412903
1,"['  @Test\n  public void shouldReadMetadataFromCompleteJson() throws IOException {\n    final String completeJson =\n        Resources.toString(Resources.getResource(""format1_complete.json""), StandardCharsets.UTF_8);\n\n    JsonNode metadataJson = mapper.readTree(completeJson).get(""metadata"");\n    Metadata metadata = mapper.treeToValue(metadataJson, Metadata.class);\n\n    assertThat(metadata).isEqualTo(expectedMetadata);\n  }\n']",From;IOException;Standard;Read;Resources;format;read;metadata;That;complete,9.89530235528946e-10;6.402842700481415e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.488387107849121, -5.00148868560791, -5.423877239227295, -6.487661838531494, -5.461277008056641, -0.021267225965857506]",0.9789573550224304
1,"['  @Test\n  public void shouldReadMetadataFromJson() throws IOException {\n    final String minimalJson =\n        Resources.toString(Resources.getResource(""format2_minimal.json""), StandardCharsets.UTF_8);\n\n    JsonNode metadataJson = mapper.readTree(minimalJson).get(""metadata"");\n    Metadata metadata = mapper.treeToValue(metadataJson, Metadata.class);\n    assertThat(metadata).isEqualTo(expectedMetadata);\n  }\n']",IOException;apper;should;son;metadata;metadata;apper;That;son;format,6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.479946613311768, -5.0088348388671875, -5.429203510284424, -6.490284442901611, -5.45957612991333, -0.02123209834098816]",0.978991687297821
1,"['  @Test\n  public void shouldSerialize() throws JsonProcessingException {\n    final SignedBlock signedBlock = new SignedBlock(slot, signingRoot);\n    String str = jsonProvider.objectToPrettyJSON(signedBlock);\n    assertThat(str).isEqualToNormalizingNewlines(jsonData);\n  }\n']",signing;Processing;Root;Provider;Exception;Normalizing;son;Newlines;Signed;signed,1.076841726899147e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.5281829833984375, -4.944118976593018, -5.42461633682251, -6.508909702301025, -5.4949188232421875, -0.021328607574105263]",0.9788970947265625
1,"['  @Test\n  public void shouldDeserialize() throws JsonProcessingException {\n    final SignedBlock signedBlock = jsonProvider.jsonToObject(jsonData, SignedBlock.class);\n    assertThat(signedBlock.slot).isEqualTo(slot);\n    assertThat(signedBlock.signingRoot).isEqualTo(signingRoot);\n  }\n']",Deserialize;Object;Block;signing;should;Root;Block;signed;Block;signed,1.0477378964424133e-09;8.149072527885437e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.529011249542236, -4.962079048156738, -5.412806034088135, -6.501211643218994, -5.464512825012207, -0.02139057032763958]",0.9788365960121155
1,"['  @BeforeEach\n  public void setup() {\n    slot = UInt64.valueOf(specConfig.getSlotsPerEpoch() * 3L);\n    actualBalance = specConfig.getMaxEffectiveBalance().plus(100000);\n    storageSystem.chainUpdater().initializeGenesis(true, actualBalance, Optional.empty());\n    bestBlock = storageSystem.chainUpdater().advanceChain(slot);\n    storageSystem.chainUpdater().updateBestBlock(bestBlock);\n\n    recentChainData = storageSystem.recentChainData();\n    beaconStateInternal = bestBlock.getState();\n\n    combinedChainDataClient = storageSystem.combinedChainDataClient();\n    blockRoot = bestBlock.getRoot();\n  }\n']",Each;Root;Genesis;slot;spec;Epoch;Data;Data;Slots;System,2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10,5,5,"[-5.372056007385254, -5.071876525878906, -5.3924970626831055, -6.467487812042236, -5.439828395843506, -0.021590551361441612]",0.9786408543586731
1,"['  @Test\n  public void getChainHeads_shouldReturnChainHeads()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    final SafeFuture<Optional<List<ChainHead>>> future = provider.getChainHeads();\n    final Optional<List<ChainHead>> maybeResult = future.get();\n    assertThat(maybeResult.orElse(emptyList()))\n        .containsExactly(new ChainHead(bestBlock.getSlot(), blockRoot));\n  }\n']",Optional;Data;Data;should;That;Safe;Provider;Chain;final;Result,5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.54689359664917, -4.927367210388184, -5.406095027923584, -6.489582061767578, -5.507974624633789, -0.021435843780636787]",0.9787922501564026
1,"['  @Test\n  public void getGenesisTime_shouldThrowIfStoreNotAvailable() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, null, mockCombinedChainDataClient);\n    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(false);\n    assertThatThrownBy(provider::getGenesisTime).isInstanceOf(ChainDataUnavailableException.class);\n  }\n']",Genesis;should;Genesis;By;when;Available;new;Client;Time;That,8.032657206058502e-09;2.735760062932968e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.8580342233181e-10;6.984919309616089e-10,5,5,"[-5.568392753601074, -4.92576265335083, -5.396473407745361, -6.485034465789795, -5.48356819152832, -0.021516701206564903]",0.9787130355834961
1,"['  @Test\n  public void getGenesisTime_shouldReturnValueIfStoreAvailable() {\n    final UInt64 genesis = beaconStateInternal.getGenesis_time();\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    final UInt64 result = provider.getGenesisTime();\n    assertEquals(genesis, result);\n  }\n']",Genesis;provider;time;Equals;Time;Provider;Genesis;Data;provider;get,1.3969838619232178e-09;1.1641532182693481e-09;8.731149137020111e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.549230098724365, -4.910164833068848, -5.3620524406433105, -6.483935356140137, -5.513782501220703, -0.021746400743722916]",0.9784883260726929
1,"['  @Test\n  public void getGenesisData_shouldThrowIfStoreNotAvailable() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, null, mockCombinedChainDataClient);\n    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(false);\n    assertThatThrownBy(provider::getGenesisData).isInstanceOf(ChainDataUnavailableException.class);\n  }\n']",Genesis;Chain;By;Store;Chain;Throw;mock;Combined;spec;false,1.3387762010097504e-09;1.1641532182693481e-09;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.5652360916137695, -4.945462703704834, -5.40740966796875, -6.490681171417236, -5.474224090576172, -0.021365132182836533]",0.9788615107536316
1,"['  @Test\n  public void getGenesisData_shouldReturnValueIfStoreAvailable() {\n    final UInt64 genesisTime = beaconStateInternal.getGenesis_time();\n    final Bytes32 genesisValidatorsRoot = beaconStateInternal.getGenesis_validators_root();\n    final Bytes4 genesisForkVersion = spec.atEpoch(ZERO).getConfig().getGenesisForkVersion();\n\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    final GenesisData result = provider.getGenesisData();\n    assertThat(result)\n        .isEqualTo(new GenesisData(genesisTime, genesisValidatorsRoot, genesisForkVersion));\n  }\n']",should;Bytes;Available;ork;Genesis;at;ERO;genesis;beacon;Genesis,1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.52616024017334, -4.940794467926025, -5.359014987945557, -6.46808385848999, -5.507265567779541, -0.021678393706679344]",0.978554904460907
1,"['  @Test\n  public void getBeaconState_shouldReturnEmptyWhenRootNotFound()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    SafeFuture<Optional<BeaconState>> future =\n        provider.getBeaconState(data.randomBytes32().toHexString());\n    final Optional<BeaconState> maybeState = future.get();\n    assertThat(maybeState).isEmpty();\n  }\n']",Beacon;spec;Interrupted;Chain;provider;Safe;future;Beacon;Data;Beacon,5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.547253608703613, -4.934079647064209, -5.417893409729004, -6.490523338317871, -5.50842809677124, -0.0213277917355299]",0.9788980484008789
1,"['  @Test\n  public void getBeaconState_shouldFindHeadState() throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    SafeFuture<Optional<BeaconState>> future = provider.getBeaconState(""head"");\n    final Optional<BeaconState> maybeState = future.get();\n    assertThat(maybeState.get().asInternalBeaconState(spec).hashTreeRoot())\n        .isEqualTo(beaconStateInternal.hashTreeRoot());\n  }\n']",Beacon;Beacon;Optional;Exception;beacon;Future;Interrupted;spec;Safe;State,1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.89530235528946e-10;9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.51942253112793, -5.010078430175781, -5.42643928527832, -6.511586666107178, -5.460856914520264, -0.02103297971189022]",0.9791866540908813
1,"['  @Test\n  public void validatorParameterToIndex_shouldThrowWhenStoreNotFound() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, null, mockCombinedChainDataClient);\n    assertThrows(\n        ChainDataUnavailableException.class, () -> provider.validatorParameterToIndex(""1""));\n  }\n']",When;Provider;Throw;Parameter;Throws;spec;Found;provider;Data;Data,1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.539648056030273, -4.989590644836426, -5.434023380279541, -6.504819393157959, -5.46069860458374, -0.02106904797255993]",0.9791513681411743
1,"['  @Test\n  public void validatorParameterToIndex_shouldAcceptValidatorRoot() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    Validator validator =\n        new Validator(recentChainData.getBestState().get().getValidators().get(1));\n\n    assertThat(provider.validatorParameterToIndex(validator.pubkey.toHexString()))\n        .isEqualTo(Optional.of(1));\n  }\n']",Chain;Chain;State;should;provider;Data;spec;Index;Index;Best,1.3969838619232178e-09;1.0477378964424133e-09;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.526669025421143, -5.017375946044922, -5.444331645965576, -6.511171340942383, -5.482402801513672, -0.02078245021402836]",0.9794321060180664
1,"['  @Test\n  public void validatorParameterToIndex_shouldAcceptValidatorId() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    assertThat(provider.validatorParameterToIndex(""2"")).isEqualTo(Optional.of(2));\n  }\n']",combined;Provider;new;Chain;Chain;Provider;Data;final;Client;Parameter,1.4551915228366852e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.553883075714111, -4.959198474884033, -5.418796062469482, -6.5141682624816895, -5.487008094787598, -0.021168258041143417]",0.9790540933609009
1,"['  @Test\n  public void validatorParameterToIndex_shouldThrowException() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    assertThrows(BadRequestException.class, () -> provider.validatorParameterToIndex(""2a""));\n  }\n']",Chain;combined;provider;validator;Parameter;validator;spec;recent;Exception;Throw,1.6298145055770874e-09;1.2514647096395493e-09;8.149072527885437e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.545833110809326, -4.975501537322998, -5.442541122436523, -6.527523994445801, -5.48589563369751, -0.020962823182344437]",0.9792553782463074
1,"['  @Test\n  public void validatorParameterToIndex_shouldDetectAboveMaxInt() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    assertThrows(\n        BadRequestException.class,\n        () ->\n            provider.validatorParameterToIndex(\n                UInt64.valueOf(Integer.MAX_VALUE).increment().toString()));\n  }\n']",Int;validator;Chain;Detect;Data;validator;Parameter;Chain;Data;Provider,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.532642841339111, -5.017394065856934, -5.454211235046387, -6.489579677581787, -5.481739044189453, -0.02075057476758957]",0.9794632196426392
1,"['  @Test\n  public void validatorParameterToIndex_shouldThrowExceptionWithInvalidPublicKey() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    assertThrows(\n        BadRequestException.class,\n        () -> provider.validatorParameterToIndex(Bytes32.EMPTY.toHexString()));\n  }\n']",Throw;Key;new;Bad;Exception;Data;to;provider;ex;Client,1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.542540550231934, -4.970447540283203, -5.4407453536987305, -6.507498741149902, -5.499186038970947, -0.020993990823626518]",0.9792248606681824
1,"['  @Test\n  public void getBlockHeaderByBlockId_shouldGetHeadBlock()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    final tech.pegasys.teku.spec.datastructures.blocks.SignedBeaconBlock block =\n        combinedChainDataClient.getBestBlock().get();\n    BlockHeader result = provider.getBlockHeader(""head"").get().get();\n    final BeaconBlockHeader beaconBlockHeader =\n        new BeaconBlockHeader(\n            block.getSlot(),\n            block.getMessage().getProposerIndex(),\n            block.getParentRoot(),\n            block.getStateRoot(),\n            block.getRoot());\n    final BlockHeader expected =\n        new BlockHeader(\n            block.getRoot(),\n            true,\n            new SignedBeaconBlockHeader(beaconBlockHeader, new BLSSignature(block.getSignature())));\n\n    assertThat(result).isEqualTo(expected);\n  }\n']",Head;Chain;Chain;tech;Block;Execution;Proposer;expected;Beacon;Client,1.280568540096283e-09;1.2223608791828156e-09;1.1059455573558807e-09;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10,5,5,"[-5.469696044921875, -5.049248695373535, -5.415557861328125, -6.468245506286621, -5.457822799682617, -0.021109549328684807]",0.9791116714477539
1,"['  @Test\n  public void getStateRoot_shouldGetRootAtGenesis()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    final Optional<tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState> state =\n        combinedChainDataClient.getStateAtSlotExact(ZERO).get();\n    final Optional<Root> maybeStateRoot = provider.getStateRoot(""genesis"").get();\n    assertThat(maybeStateRoot).isPresent();\n    assertThat(maybeStateRoot.orElseThrow().root).isEqualTo(state.orElseThrow().hashTreeRoot());\n  }\n']",Data;Client;combined;Root;pegasys;Slot;final;Get;spec;Optional,1.0477378964424133e-09;9.313225746154785e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.505227088928223, -4.982993125915527, -5.404368877410889, -6.464578151702881, -5.486306667327881, -0.021342728286981583]",0.9788834452629089
1,"['  @Test\n  public void getBlockHeaders_shouldGetHeadBlockIfNoParameters()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    final tech.pegasys.teku.spec.datastructures.blocks.SignedBeaconBlock block =\n        combinedChainDataClient.getBestBlock().get();\n    List<BlockHeader> results = provider.getBlockHeaders(Optional.empty(), Optional.empty()).get();\n    assertThat(results.get(0).root).isEqualTo(block.getRoot());\n  }\n']",Block;get;Execution;Headers;block;Chain;Headers;should;empty;provider,5.122274160385132e-09;4.132743924856186e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.14321368932724e-09;3.026798367500305e-09;2.7939677238464355e-09;2.2118911147117615e-09;2.0954757928848267e-09,5,5,"[-5.51714563369751, -4.985754489898682, -5.401220321655273, -6.471250534057617, -5.479109764099121, -0.021308770403265953]",0.9789166450500488
1,"['  @Test\n  public void getBlockHeaders_shouldGetBlockGivenSlot()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    final UInt64 slot = combinedChainDataClient.getCurrentSlot();\n    List<BlockHeader> results = provider.getBlockHeaders(Optional.empty(), Optional.of(slot)).get();\n    assertThat(results.get(0).header.message.slot).isEqualTo(slot);\n  }\n']",Headers;Block;Block;Slot;results;provider;combined;recent;Data;final,9.313225746154785e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.802132025361061e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.538736820220947, -4.951630115509033, -5.419168472290039, -6.504017353057861, -5.502238750457764, -0.021233031526207924]",0.9789907932281494
1,"['  @Test\n  public void shouldGetBlockHeadersOnEmptyChainHeadSlot() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    final UInt64 headSlot = recentChainData.getHeadSlot();\n    storageSystem.chainUpdater().advanceChain(headSlot.plus(1));\n\n    final SafeFuture<List<BlockHeader>> future =\n        provider.getBlockHeaders(Optional.empty(), Optional.empty());\n    final BlockHeader header = future.join().get(0);\n    assertThat(header.header.message.slot).isEqualTo(headSlot);\n  }\n']",Chain;On;header;Chain;Client;should;provider;Optional;Optional;ater,9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.552546501159668, -4.940995216369629, -5.406736850738525, -6.474074363708496, -5.509066104888916, -0.021330008283257484]",0.9788958430290222
1,"['  @Test\n  public void filteredValidatorsList_shouldFilterByValidatorIndex() {\n\n    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =\n        data.randomBeaconState(1024);\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    List<Integer> indexes =\n        provider.getFilteredValidatorList(internalState, List.of(""1"", ""33""), emptySet()).stream()\n            .map(v -> v.index.intValue())\n            .collect(toList());\n    assertThat(indexes).containsExactly(1, 33);\n  }\n']",teku;Client;Beacon;Validator;Chain;State;List;to;should;List,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.508725166320801, -5.013068199157715, -5.4210638999938965, -6.49098539352417, -5.478896617889404, -0.021034730598330498]",0.9791848659515381
1,"['  @Test\n  public void filteredValidatorsList_shouldFilterByValidatorPubkey() {\n    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =\n        data.randomBeaconState(1024);\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    final String key = internalState.getValidators().get(12).getPubkeyBytes().toString();\n    final String missingKey = data.randomPublicKey().toString();\n    List<String> pubkeys =\n        provider\n            .getFilteredValidatorList(internalState, List.of(key, missingKey), emptySet())\n            .stream()\n            .map(v -> v.validator.pubkey.toHexString())\n            .collect(toList());\n    assertThat(pubkeys).containsExactly(key);\n  }\n']",Validators;Chain;map;Data;spec;List;Bytes;spec;to;Beacon,6.111804395914078e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.506048202514648, -4.989398002624512, -5.407259464263916, -6.475646018981934, -5.491976261138916, -0.021240033209323883]",0.9789839386940002
1,"['  @Test\n  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenIndexInvalid() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    assertThrows(BadRequestException.class, () -> provider.validatorParameterToIndex(""a""));\n  }\n']",Provider;validator;Exception;Index;Client;Invalid;Bad;Request;combined;Parameter,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.555328369140625, -4.967584609985352, -5.418678283691406, -6.516950607299805, -5.481952667236328, -0.021120522171258926]",0.9791008234024048
1,"['  @Test\n  public void validatorParameterToIndex_shouldReturnEmptyIfIndexOutOfBounds() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    assertThat(provider.validatorParameterToIndex(""1024000"")).isEmpty();\n  }\n']",Chain;Client;recent;spec;Provider;Chain;Parameter;Index;validator;validator,8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.5531840324401855, -4.957043647766113, -5.407293319702148, -6.50395393371582, -5.495126247406006, -0.021220311522483826]",0.9790032505989075
1,"['  @Test\n  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenKeyNotFound() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    assertThrows(\n        BadRequestException.class,\n        () -> provider.validatorParameterToIndex(Bytes32.fromHexString(""0x00"").toHexString()));\n  }\n']",spec;Exception;should;Chain;combined;Provider;Data;Throw;class;from,2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.57160684466362e-09;1.3387762010097504e-09;1.280568540096283e-09;1.1059455573558807e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.5351433753967285, -4.956801414489746, -5.430204391479492, -6.514899730682373, -5.487883567810059, -0.021204322576522827]",0.9790189266204834
1,"['  @Test\n  public void filteredValidatorsList_shouldFilterByValidatorStatus() {\n    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =\n        data.randomBeaconState(11);\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    assertThat(\n            provider.getFilteredValidatorList(\n                internalState, emptyList(), Set.of(ValidatorStatus.pending_initialized)))\n        .hasSize(11);\n    assertThat(\n            provider.getFilteredValidatorList(\n                internalState, emptyList(), Set.of(ValidatorStatus.active_ongoing)))\n        .hasSize(0);\n  }\n']",That;Beacon;datastructures;tech;teku;spec;initialized;new;By;Status,1.1641532182693481e-09;1.0040821507573128e-09;9.74978320300579e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.384208634495735e-10;4.656612873077393e-10;4.220055416226387e-10,5,5,"[-5.4740471839904785, -5.038209915161133, -5.434422016143799, -6.481899738311768, -5.450164318084717, -0.021090758964419365]",0.979130208492279
1,"['  @Test\n  public void getStateCommittees_shouldReturnEmptyIfStateNotFound()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    assertThat(\n            provider\n                .getStateCommittees(\n                    data.randomBytes32().toHexString(),\n                    Optional.empty(),\n                    Optional.empty(),\n                    Optional.empty())\n                .get())\n        .isEmpty();\n  }\n']",random;Exception;new;should;empty;That;Client;combined;Bytes;ex,1.2514647096395493e-09;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.494448184967041, -5.007759094238281, -5.446966171264648, -6.461237907409668, -5.47111701965332, -0.021095193922519684]",0.9791258573532104
1,"['  @Test\n  public void getCommitteesFromState_shouldNotRequireFilters() {\n    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =\n        data.randomBeaconState(64);\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    assertThat(\n            provider\n                .getCommitteesFromState(\n                    internalState, Optional.empty(), Optional.empty(), Optional.empty())\n                .size())\n        .isEqualTo(specConfig.getSlotsPerEpoch());\n  }\n']",Epoch;Committees;Provider;Beacon;State;Require;Data;get;Per;qual,2.0372681319713593e-09;1.1932570487260818e-09;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.8562575355172157e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.494724273681641, -5.002408504486084, -5.423537254333496, -6.4901123046875, -5.475282669067383, -0.02117175981402397]",0.979050874710083
1,"['  @Test\n  public void getCommitteesFromState_shouldFilterOnSlot() {\n    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =\n        data.randomBeaconState(64);\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    assertThat(\n            provider\n                .getCommitteesFromState(\n                    internalState,\n                    Optional.empty(),\n                    Optional.empty(),\n                    Optional.of(internalState.getSlot()))\n                .size())\n        .isEqualTo(1);\n  }\n']",should;Slot;teku;Chain;tech;of;Committees;spec;random;Data,7.8580342233181e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.472336769104004, -5.054474353790283, -5.461565971374512, -6.479315757751465, -5.4426116943359375, -0.020909005776047707]",0.9793079495429993
1,"['  @Test\n  public void getStateFinalityCheckpoints_shouldGetEmptyCheckpointsBeforeFinalized()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    assertThat(provider.getStateFinalityCheckpoints(""genesis"").get().get())\n        .isEqualTo(\n            new FinalityCheckpointsResponse(\n                tech.pegasys.teku.api.schema.Checkpoint.EMPTY,\n                tech.pegasys.teku.api.schema.Checkpoint.EMPTY,\n                tech.pegasys.teku.api.schema.Checkpoint.EMPTY));\n  }\n']",Execution;teku;spec;new;should;Checkpoints;pegasys;Data;Chain;pegasys,1.4551915228366852e-09;7.275957614183426e-10;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;5.093170329928398e-10;4.802132025361061e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.5652192309498787e-10,5,5,"[-5.505735874176025, -5.024197101593018, -5.443809509277344, -6.478481769561768, -5.465595722198486, -0.020947180688381195]",0.9792708158493042
1,"['  @Test\n  public void getStateFinalityCheckpoints_shouldGetCheckpointsAfterFinalized()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, mockCombinedChainDataClient);\n    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =\n        data.randomBeaconState(UInt64.valueOf(42));\n    final FinalityCheckpointsResponse expected =\n        new FinalityCheckpointsResponse(\n            new tech.pegasys.teku.api.schema.Checkpoint(\n                internalState.getPrevious_justified_checkpoint()),\n            new tech.pegasys.teku.api.schema.Checkpoint(\n                internalState.getCurrent_justified_checkpoint()),\n            new tech.pegasys.teku.api.schema.Checkpoint(internalState.getFinalized_checkpoint()));\n\n    when(mockCombinedChainDataClient.getBestState()).thenReturn(Optional.of(internalState));\n    assertThat(provider.getStateFinalityCheckpoints(""head"").get().get()).isEqualTo(expected);\n    verify(mockCombinedChainDataClient).getBestState();\n  }\n']",Checkpoints;Finality;State;provider;Checkpoint;mock;Execution;get;should;Data,8.381903171539307e-09;2.6775524020195007e-09;2.3283064365386963e-09;1.6880221664905548e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10,5,5,"[-5.519360065460205, -4.992976188659668, -5.399909496307373, -6.4595627784729, -5.467569828033447, -0.021323474124073982]",0.9789021611213684
1,"['  @Test\n  public void getStateSyncCommittees_shouldGetCommittees()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider = setupAltairState();\n    final List<UInt64> committeeIndices =\n        List.of(UInt64.valueOf(6), UInt64.valueOf(9), UInt64.valueOf(0));\n\n    final SafeFuture<Optional<StateSyncCommittees>> future =\n        provider.getStateSyncCommittees(""head"", Optional.empty());\n    assertThat(future).isCompleted();\n    assertThat(future.get().get())\n        .isEqualTo(new StateSyncCommittees(committeeIndices, List.of(committeeIndices)));\n  }\n']",Altair;future;Sync;Optional;final;Chain;head;Committees;get;Data,1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.18367562815547e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.537442207336426, -4.974381446838379, -5.428736686706543, -6.4877166748046875, -5.510715007781982, -0.021022707223892212]",0.9791967272758484
1,"['  @Test\n  public void getStateSyncCommittees_shouldReturnEmptyListBeforeAltair()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =\n        data.randomBeaconState();\n    when(mockCombinedChainDataClient.getBestState()).thenReturn(Optional.of(internalState));\n\n    final SafeFuture<Optional<StateSyncCommittees>> future =\n        provider.getStateSyncCommittees(""head"", Optional.empty());\n    assertThat(future.get().get()).isEqualTo(new StateSyncCommittees(List.of(), List.of()));\n  }\n']",Sync;new;State;final;Client;of;of;Committees;should;internal,2.7939677238464355e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09,5,5,"[-5.537522315979004, -4.96945858001709, -5.423839092254639, -6.474564075469971, -5.501375675201416, -0.021138496696949005]",0.9790833592414856
1,"['  @Test\n  public void getStateSyncCommittees_shouldRejectFarFutureEpoch() {\n    final ChainDataProvider provider = setupAltairState();\n    final SafeFuture<Optional<StateSyncCommittees>> future =\n        provider.getStateSyncCommittees(""head"", Optional.of(UInt64.valueOf(""1024000"")));\n    SafeFutureAssert.assertThatSafeFuture(future)\n        .isCompletedExceptionallyWith(IllegalArgumentException.class);\n  }\n']",Future;Far;Sync;provider;Committees;future;Data;Chain;future;setup,1.862645149230957e-09;1.367880031466484e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.551014423370361, -4.9068121910095215, -5.404106616973877, -6.496094703674316, -5.506206035614014, -0.02157958410680294]",0.9786515831947327
1,"['  @Test\n  public void getStateFork_shouldGetForkAtGenesis()\n      throws ExecutionException, InterruptedException {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n\n    final Bytes4 bytes4 = Bytes4.fromHexString(""0x00000001"");\n    final Optional<Fork> response = provider.getStateFork(""genesis"").get();\n    assertThat(response).isPresent();\n    assertThat(response.get()).isEqualTo(new Fork(bytes4, bytes4, ZERO));\n  }\n']",get;Genesis;qual;provider;ork;State;Bytes;new;Chain;Provider,1.1641532182693481e-09;9.89530235528946e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.548361852765083e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.534296035766602, -4.988290786743164, -5.413675308227539, -6.466297149658203, -5.492955207824707, -0.021113401278853416]",0.9791077971458435
1,"['  @Test\n  public void getValidatorBalancesFromState_shouldGetBalances() {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =\n        data.randomBeaconState(1024);\n    assertThat(provider.getValidatorBalancesFromState(internalState, emptyList())).hasSize(1024);\n\n    assertThat(\n            provider.getValidatorBalancesFromState(\n                internalState, List.of(""0"", ""100"", ""1023"", ""1024"", ""1024000"")))\n        .hasSize(3);\n  }\n']",Chain;Chain;recent;pegasys;provider;final;Beacon;State;tech;Data,1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;6.548361852765083e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.507980823516846, -4.98864221572876, -5.405104637145996, -6.476662635803223, -5.476634979248047, -0.021310636773705482]",0.9789149165153503
1,"['  @Test\n  public void getBlockRoot_shouldReturnRootOfBlock() throws Exception {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    final Optional<Root> response = provider.getBlockRoot(""head"").get();\n    assertThat(response).isPresent();\n    assertThat(response.get()).isEqualTo(new Root(bestBlock.getRoot()));\n  }\n']",That;final;Block;Data;Root;get;get;Data;final;Provider,1.2223608791828156e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.966285243630409e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.5155534744262695, -4.954154014587402, -5.4189605712890625, -6.523660182952881, -5.483326435089111, -0.02135976403951645]",0.9788667559623718
1,"['  @Test\n  public void getBlockAttestations_shouldReturnAttestationsOfBlock() throws Exception {\n    final ChainDataProvider provider =\n        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n    ChainBuilder chainBuilder = storageSystem.chainBuilder();\n\n    ChainBuilder.BlockOptions blockOptions = ChainBuilder.BlockOptions.create();\n    AttestationGenerator attestationGenerator =\n        new AttestationGenerator(spec, chainBuilder.getValidatorKeys());\n    tech.pegasys.teku.spec.datastructures.operations.Attestation attestation1 =\n        attestationGenerator.validAttestation(bestBlock.toUnsigned(), bestBlock.getSlot());\n    tech.pegasys.teku.spec.datastructures.operations.Attestation attestation2 =\n        attestationGenerator.validAttestation(\n            bestBlock.toUnsigned(), bestBlock.getSlot().increment());\n    blockOptions.addAttestation(attestation1);\n    blockOptions.addAttestation(attestation2);\n    SignedBlockAndState newHead =\n        storageSystem\n            .chainBuilder()\n            .generateBlockAtSlot(bestBlock.getSlot().plus(10), blockOptions);\n    storageSystem.chainUpdater().saveBlock(newHead);\n    storageSystem.chainUpdater().updateBestBlock(newHead);\n\n    final Optional<List<Attestation>> response = provider.getBlockAttestations(""head"").get();\n    assertThat(response).isPresent();\n    assertThat(response.get())\n        .containsExactly(new Attestation(attestation1), new Attestation(attestation2));\n  }\n']",Attestations;Slot;generate;chain;Chain;Builder;Slot;Exception;Attestation;get,1.979060471057892e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1932570487260818e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.04046193882823e-09;9.89530235528946e-10,5,5,"[-5.470451831817627, -4.836015224456787, -5.343181610107422, -6.424620151519775, -5.465545654296875, -0.02304311841726303]",0.9772202372550964
1,"['  @Test\n  public void headSelector_shouldGetBestBlock() throws ExecutionException, InterruptedException {\n    when(client.getBestBlock()).thenReturn(Optional.of(block));\n    List<SignedBeaconBlock> blockList = blockSelectorFactory.headSelector().getBlock().get();\n    verify(client).getBestBlock();\n    assertThat(blockList).containsExactly(block);\n  }\n']",Interrupted;Execution;Selector;Exactly;Selector;That;List;head;Return;Best,6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.537330150604248, -4.972763538360596, -5.4128804206848145, -6.511075019836426, -5.474184989929199, -0.021223928779363632]",0.9789997339248657
1,"['  @Test\n  public void finalizedSelector_shouldGetFinalizedBlock()\n      throws ExecutionException, InterruptedException {\n    when(client.getFinalizedBlock()).thenReturn(Optional.of(block));\n    List<SignedBeaconBlock> blockList = blockSelectorFactory.finalizedSelector().getBlock().get();\n    verify(client).getFinalizedBlock();\n    assertThat(blockList).containsExactly(block);\n  }\n']",Get;should;finalized;Finalized;verify;Finalized;Return;of;Finalized;Selector,1.979060471057892e-09;1.862645149230957e-09;1.8335413187742233e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;7.8580342233181e-10;7.8580342233181e-10,5,5,"[-5.5466084480285645, -4.93266487121582, -5.3839569091796875, -6.491965293884277, -5.485217094421387, -0.02159230038523674]",0.9786392450332642
1,"['  @Test\n  public void genesisSelector_shouldGetSlotZero() throws ExecutionException, InterruptedException {\n    when(client.getBlockAtSlotExact(UInt64.ZERO))\n        .thenReturn(SafeFuture.completedFuture(Optional.of(block)));\n    List<SignedBeaconBlock> blockList = blockSelectorFactory.genesisSelector().getBlock().get();\n    verify(client).getBlockAtSlotExact(UInt64.ZERO);\n    assertThat(blockList).containsExactly(block);\n  }\n']",genesis;Interrupted;Beacon;Optional;when;Get;Zero;ERO;Block;List,2.0372681319713593e-09;1.862645149230957e-09;8.440110832452774e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.539990425109863, -4.956769943237305, -5.405002593994141, -6.488670349121094, -5.48545503616333, -0.021349845454096794]",0.9788765907287598
1,"['  @Test\n  public void blockRootSelector_shouldGetBlockByBlockRoot()\n      throws ExecutionException, InterruptedException {\n    when(client.getBlockByBlockRoot(any()))\n        .thenReturn(SafeFuture.completedFuture(Optional.of(block)));\n    List<SignedBeaconBlock> blockList =\n        blockSelectorFactory.forBlockRoot(block.getRoot()).getBlock().get();\n    verify(client).getBlockByBlockRoot(block.getRoot());\n    assertThat(blockList).containsExactly(block);\n  }\n']",igned;Get;should;block;Block;Root;Root;Root;That;Block,9.313225746154785e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.540989875793457, -4.972499847412109, -5.428707122802734, -6.490091323852539, -5.4895195960998535, -0.02110663242638111]",0.9791145324707031
1,"['  @Test\n  public void slotSelector_shouldGetBlockAtSlotExact()\n      throws ExecutionException, InterruptedException {\n    when(client.getBlockAtSlotExact(block.getSlot()))\n        .thenReturn(SafeFuture.completedFuture(Optional.of(block)));\n    List<SignedBeaconBlock> blockList =\n        blockSelectorFactory.forSlot(block.getSlot()).getBlock().get();\n    verify(client).getBlockAtSlotExact(block.getSlot());\n    assertThat(blockList).containsExactly(block);\n  }\n']",Exact;client;Safe;Selector;Slot;Slot;block;List;block;Slot,1.280568540096283e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10,5,5,"[-5.536349296569824, -4.986972332000732, -5.42339563369751, -6.462724208831787, -5.482893943786621, -0.021118538454174995]",0.9791029095649719
1,"['  @Test\n  public void defaultBlockSelector_shouldThrowBadRequestException() {\n    assertThrows(BadRequestException.class, () -> blockSelectorFactory.defaultBlockSelector(""a""));\n  }\n']",Throw;Selector;Selector;Block;Request;Bad;Exception;should;default;block,3.259629011154175e-09;2.444721758365631e-09;1.979060471057892e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-8.731149137020111e-11,5,5,"[-5.55227518081665, -4.922943592071533, -5.4239325523376465, -6.522889137268066, -5.47524881362915, -0.021453112363815308]",0.9787753820419312
1,"['  @TestTemplate\n  public void setup(SpecContext specContext) {\n    spec = specContext.getSpec();\n    dataStructureUtil = specContext.getDataStructureUtil();\n    schemaProvider = new SchemaObjectProvider(spec);\n    provider = new ValidatorDataProvider(spec, validatorApiChannel, combinedChainDataClient);\n    blockInternal = dataStructureUtil.randomBeaconBlock(123);\n    block = schemaProvider.getBeaconBlock(blockInternal);\n  }\n']",Template;random;Spec;Provider;Object;Spec;Context;get;get;Provider,3.725290298461914e-09;1.3969838619232178e-09;6.402842700481415e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.527765274047852, -4.950137615203857, -5.43923282623291, -6.535778999328613, -5.497225761413574, -0.021171409636735916]",0.9790511131286621
1,"['  @TestTemplate\n  public void submitSignedBlock_shouldReturn200ForSuccess()\n      throws ExecutionException, InterruptedException {\n    final SignedBeaconBlock internalSignedBeaconBlock =\n        dataStructureUtil.randomSignedBeaconBlock(1);\n    final tech.pegasys.teku.api.schema.SignedBeaconBlock signedBeaconBlock =\n        tech.pegasys.teku.api.schema.SignedBeaconBlock.create(internalSignedBeaconBlock);\n\n    final SafeFuture<SendSignedBlockResult> successImportResult =\n        completedFuture(SendSignedBlockResult.success(internalSignedBeaconBlock.getRoot()));\n\n    when(validatorApiChannel.sendSignedBlock(any())).thenReturn(successImportResult);\n\n    final SafeFuture<ValidatorBlockResult> validatorBlockResultSafeFuture =\n        provider.submitSignedBlock(signedBeaconBlock);\n\n    assertThat(validatorBlockResultSafeFuture.get().getResponseCode()).isEqualTo(200);\n  }\n']",Safe;Execution;Beacon;internal;Util;when;Safe;submit;Beacon;final,6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.5085859298706055, -4.959984302520752, -5.4089765548706055, -6.4790544509887695, -5.484217643737793, -0.021456729620695114]",0.9787718057632446
1,"['  @TestTemplate\n  public void submitSignedBlock_shouldReturn202ForInvalidBlock() {\n    final SignedBeaconBlock internalSignedBeaconBlock =\n        dataStructureUtil.randomSignedBeaconBlock(1);\n    final tech.pegasys.teku.api.schema.SignedBeaconBlock signedBeaconBlock =\n        tech.pegasys.teku.api.schema.SignedBeaconBlock.create(internalSignedBeaconBlock);\n    final AtomicInteger failReasonCount = new AtomicInteger();\n\n    Stream.of(FailureReason.values())\n        .filter(failureReason -> !failureReason.equals(FailureReason.INTERNAL_ERROR))\n        .forEach(\n            failureReason -> {\n              failReasonCount.getAndIncrement();\n\n              final SafeFuture<SendSignedBlockResult> failImportResult =\n                  completedFuture(SendSignedBlockResult.notImported(failureReason.name()));\n\n              when(validatorApiChannel.sendSignedBlock(any())).thenReturn(failImportResult);\n\n              final SafeFuture<ValidatorBlockResult> validatorBlockResultSafeFuture =\n                  provider.submitSignedBlock(signedBeaconBlock);\n\n              try {\n                assertThat(validatorBlockResultSafeFuture.get().getResponseCode()).isEqualTo(202);\n              } catch (final Exception e) {\n                fail(""Exception while executing test."");\n              }\n            });\n\n    // Assert that the check has run over each FailureReason except the 500.\n    assertThat(failReasonCount.get()).isEqualTo(FailureReason.values().length - 1);\n  }\n']",should;Reason;validator;That;Reason;internal;Each;Return;Atomic;Channel,1.5133991837501526e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.5087432861328125, -4.93559455871582, -5.368910789489746, -6.45067024230957, -5.503547668457031, -0.02178395912051201]",0.9784517288208008
1,"['  @TestTemplate\n  public void submitSignedBlock_shouldReturn500ForInternalError()\n      throws ExecutionException, InterruptedException {\n    final SignedBeaconBlock internalSignedBeaconBlock =\n        dataStructureUtil.randomSignedBeaconBlock(1);\n    final tech.pegasys.teku.api.schema.SignedBeaconBlock signedBeaconBlock =\n        tech.pegasys.teku.api.schema.SignedBeaconBlock.create(internalSignedBeaconBlock);\n\n    final SafeFuture<SendSignedBlockResult> failImportResult =\n        completedFuture(SendSignedBlockResult.rejected(FailureReason.INTERNAL_ERROR.name()));\n\n    when(validatorApiChannel.sendSignedBlock(any())).thenReturn(failImportResult);\n\n    final SafeFuture<ValidatorBlockResult> validatorBlockResultSafeFuture =\n        provider.submitSignedBlock(signedBeaconBlock);\n\n    assertThat(validatorBlockResultSafeFuture.get().getResponseCode()).isEqualTo(500);\n  }\n']",pegasys;Structure;Beacon;Exception;fail;Block;qual;Safe;Safe;random,9.167706593871117e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.52803897857666, -4.999311923980713, -5.451683521270752, -6.504415512084961, -5.484847545623779, -0.02086767926812172]",0.9793485403060913
1,"['  @TestTemplate\n  public void getAttesterDuties_shouldHandleEmptyIndexesList() {\n    final Bytes32 previousTargetRoot = dataStructureUtil.randomBytes32();\n    when(validatorApiChannel.getAttestationDuties(eq(ONE), any()))\n        .thenReturn(\n            completedFuture(\n                Optional.of(\n                    new tech.pegasys.teku.validator.api.AttesterDuties(\n                        previousTargetRoot, emptyList()))));\n    final SafeFuture<Optional<PostAttesterDutiesResponse>> future =\n        provider.getAttesterDuties(UInt64.ONE, List.of());\n    assertThat(future).isCompleted();\n    Optional<PostAttesterDutiesResponse> maybeData = future.join();\n    assertThat(maybeData.isPresent()).isTrue();\n    assertThat(maybeData.get().data).isEmpty();\n  }\n']",Template;data;Bytes;Util;Target;Root;tech;data;Root;Handle,2.444721758365631e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.2223608791828156e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.497763156890869, -4.991497039794922, -5.424050331115723, -6.482511520385742, -5.473219871520996, -0.021252520382404327]",0.9789717197418213
1,"['  @TestTemplate\n  public void getAttesterDuties_shouldReturnDutiesForKnownValidator() {\n    AttesterDuty v1 = new AttesterDuty(BLSTestUtil.randomPublicKey(0), 1, 2, 3, 15, 4, ONE);\n    AttesterDuty v2 = new AttesterDuty(BLSTestUtil.randomPublicKey(1), 11, 12, 13, 15, 14, ZERO);\n    when(validatorApiChannel.getAttestationDuties(eq(ONE), any()))\n        .thenReturn(\n            completedFuture(\n                Optional.of(\n                    new AttesterDuties(dataStructureUtil.randomBytes32(), List.of(v1, v2)))));\n\n    final SafeFuture<Optional<PostAttesterDutiesResponse>> future =\n        provider.getAttesterDuties(ONE, List.of(1, 11));\n    assertThat(future).isCompleted();\n    final Optional<PostAttesterDutiesResponse> maybeList = future.join();\n    final PostAttesterDutiesResponse list = maybeList.orElseThrow();\n    assertThat(list.data).containsExactlyInAnyOrder(asAttesterDuty(v1), asAttesterDuty(v2));\n  }\n']",Template;Future;Known;Channel;eq;Validator;when;uty;ONE;get,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.487093925476074, -4.9952239990234375, -5.416576862335205, -6.4709272384643555, -5.475369930267334, -0.021314488723874092]",0.9789111614227295
1,"['  @Test\n  public void headSelector_shouldGetBestState() throws ExecutionException, InterruptedException {\n    when(client.getBestState()).thenReturn(Optional.of(state));\n    Optional<BeaconState> result = factory.headSelector().getState().get();\n    assertThat(result).isEqualTo(Optional.of(state));\n    verify(client).getBestState();\n  }\n']",Best;Beacon;Optional;client;when;result;Optional;state;That;State,1.4551915228366852e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.520688056945801, -5.005009174346924, -5.3924479484558105, -6.471381187438965, -5.465005397796631, -0.021262090653181076]",0.9789623618125916
1,"['  @Test\n  public void finalizedSelector_shouldGetFinalizedState()\n      throws ExecutionException, InterruptedException {\n    when(client.getFinalizedState()).thenReturn(Optional.of(state));\n    Optional<BeaconState> result = factory.finalizedSelector().getState().get();\n    assertThat(result).isEqualTo(Optional.of(state));\n    verify(client).getFinalizedState();\n  }\n']",Finalized;finalized;Execution;Beacon;Interrupted;State;Exception;factory;finalized;Finalized,9.022187441587448e-10;6.402842700481415e-10;5.238689482212067e-10;4.874891601502895e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.543480396270752, -4.93571662902832, -5.393278121948242, -6.4894490242004395, -5.482264041900635, -0.021555084735155106]",0.9786754250526428
1,"['  @Test\n  public void justifiedSelector_shouldGetJustifiedState()\n      throws ExecutionException, InterruptedException {\n    when(client.getJustifiedState()).thenReturn(SafeFuture.completedFuture(Optional.of(state)));\n    Optional<BeaconState> result = factory.justifiedSelector().getState().get();\n    assertThat(result).isEqualTo(Optional.of(state));\n    verify(client).getJustifiedState();\n  }\n']",justified;Justified;Beacon;should;completed;when;Interrupted;get;Justified;get,1.8044374883174896e-09;1.4551915228366852e-09;9.89530235528946e-10;8.440110832452774e-10;6.039044819772243e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10,5,5,"[-5.553976058959961, -4.927173614501953, -5.397439479827881, -6.4855194091796875, -5.4943461418151855, -0.021512266248464584]",0.978717565536499
1,"['  @Test\n  public void genesisSelector_shouldGetStateAtSlotExact()\n      throws ExecutionException, InterruptedException {\n    when(client.getStateAtSlotExact(ZERO))\n        .thenReturn(SafeFuture.completedFuture(Optional.of(state)));\n    Optional<BeaconState> result = factory.genesisSelector().getState().get();\n    assertThat(result).isEqualTo(Optional.of(state));\n    verify(client).getStateAtSlotExact(ZERO);\n  }\n']",Interrupted;should;genesis;Future;ERO;Beacon;genesis;Selector;Optional;ERO,9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.055902197957039e-10,5,5,"[-5.5444746017456055, -4.938530445098877, -5.402245998382568, -6.481119155883789, -5.499785900115967, -0.02142825908958912]",0.9787997007369995
1,"['  @Test\n  public void forSlot_shouldGetStateAtSlotExact() throws ExecutionException, InterruptedException {\n    when(client.getStateAtSlotExact(state.getSlot()))\n        .thenReturn(SafeFuture.completedFuture(Optional.of(state)));\n    Optional<BeaconState> result = factory.forSlot(state.getSlot()).getState().get();\n    assertThat(result).isEqualTo(Optional.of(state));\n    verify(client).getStateAtSlotExact(state.getSlot());\n  }\n']",get;Execution;verify;Interrupted;Future;completed;Exact;state;of;Slot,1.280568540096283e-09;1.2223608791828156e-09;9.313225746154785e-10;7.8580342233181e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.542904853820801, -4.988802433013916, -5.430739402770996, -6.503547668457031, -5.4777421951293945, -0.021004730835556984]",0.9792143106460571
1,"['  @Test\n  public void forStateRoot_shouldGetStateAtSlotExact()\n      throws ExecutionException, InterruptedException {\n    when(client.getStateByStateRoot(state.hashTreeRoot()))\n        .thenReturn(SafeFuture.completedFuture(Optional.of(state)));\n    Optional<BeaconState> result = factory.forStateRoot(state.hashTreeRoot()).getState().get();\n    assertThat(result).isEqualTo(Optional.of(state));\n    verify(client).getStateByStateRoot(state.hashTreeRoot());\n  }\n']",Exact;Slot;Execution;Safe;of;verify;Future;Root;Tree;Optional,1.8917489796876907e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.544322967529297, -4.960419654846191, -5.434042930603027, -6.496352195739746, -5.488972187042236, -0.021148066967725754]",0.9790740013122559
1,"['  @Test\n  public void defaultStateSelector_shouldThrowBadRequestException() {\n    assertThrows(BadRequestException.class, () -> factory.defaultStateSelector(""a""));\n  }\n']",Throw;State;Bad;default;Bad;Request;Exception;Selector;Exception;Selector,2.0954757928848267e-09;1.3969838619232178e-09;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10;0.0;-1.1641532182693481e-10,5,5,"[-5.56700325012207, -4.8716816902160645, -5.4447784423828125, -6.54632043838501, -5.499849796295166, -0.021554619073867798]",0.9786760210990906
1,"['  @Test\n  public void byBlockRootSelector_shouldThrowBadRequestException() {\n    assertThrows(BadRequestException.class, () -> factory.byBlockRootStateSelector(""a""));\n  }\n']",Root;by;class;by;Bad;Root;Bad;Block;State;Request,2.7939677238464355e-09;2.6775524020195007e-09;1.979060471057892e-09;1.5133991837501526e-09;1.3969838619232178e-09;9.89530235528946e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-5.533773422241211, -4.942049503326416, -5.400755882263184, -6.504438400268555, -5.447269439697266, -0.021641647443175316]",0.9785909652709961
1,"['  @Test\n  public void stateSelector_shouldReturnEmptyWhenPreForkChoice()\n      throws ExecutionException, InterruptedException {\n    final StorageQueryChannel historicalChainData = mock(StorageQueryChannel.class);\n    final RecentChainData recentChainData = mock(RecentChainData.class);\n    final CombinedChainDataClient client1 =\n        new CombinedChainDataClient(recentChainData, historicalChainData, spec);\n    final StateSelectorFactory factory = new StateSelectorFactory(client1);\n    when(recentChainData.isPreGenesis()).thenReturn(false);\n    when(recentChainData.isPreForkChoice()).thenReturn(true);\n    final SafeFuture<Optional<BeaconState>> future =\n        factory.defaultStateSelector(ZERO.toString()).getState();\n    assertThat(future.get()).isEmpty();\n  }\n']",When;Choice;State;client;State;Genesis;Selector;Execution;Data;ERO,1.6007106751203537e-09;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.5219526290893555, -4.975311279296875, -5.4029717445373535, -6.479831695556641, -5.479684829711914, -0.021338293328881264]",0.9788877367973328
1,"['  @Test\n  public void defaultBlockSelector_shouldThrowBadRequestForBadHexState() {\n    assertThrows(BadRequestException.class, () -> factory.defaultStateSelector(""0xzz""));\n  }\n']",Bad;Bad;ex;Throws;class;Request;Selector;default;zz;Selector,1.3387762010097504e-09;1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.076312951743603e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.56175422668457, -4.881473064422607, -5.445137023925781, -6.552513122558594, -5.4927873611450195, -0.021517867222428322]",0.9787119626998901
1,"['  @TestTemplate\n  public void validatorsResponseShouldConformToDefaults(SpecContext ctx) {\n    BeaconState beaconState = ctx.getDataStructureUtil().randomBeaconState();\n    SszList<Validator> validatorList = beaconState.getValidators();\n    BeaconValidators response = new BeaconValidators(beaconState, FAR_FUTURE_EPOCH);\n    assertThat(response.total_size).isEqualTo(beaconState.getValidators().size());\n    assertThat(response.validators.size())\n        .isEqualTo(Math.min(validatorList.size(), PAGE_SIZE_DEFAULT));\n    int expectedNextPageToken =\n        validatorList.size() < PAGE_SIZE_DEFAULT ? 0 : PAGE_TOKEN_DEFAULT + 1;\n    assertThat(response.next_page_token).isEqualTo(expectedNextPageToken);\n    assertThat(response.validators.get(0).validator.activation_eligibility_epoch)\n        .isEqualToComparingFieldByField(validatorList.get(0).getActivation_eligibility_epoch());\n    assertThat(response.validators.get(0).validator_index).isEqualTo(0);\n  }\n']",UTURE;That;validators;random;Comparing;Conform;By;TOKEN;Structure;token,1.5425030142068863e-09;1.280568540096283e-09;9.89530235528946e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.428809642791748, -4.983870506286621, -5.365962505340576, -6.448893070220947, -5.454312324523926, -0.022009283304214478]",0.9782311320304871
1,['    @Test\n    public void testSuperClass() {\n        assertThat(classNode.superName)\n                .doesNotStartWith(SHADED_PACKAGE_PATH);\n    }\n'],PATH;ACKAGE;super;Start;That;class;Class;Node;Super;Name,1.6298145055770874e-09;1.4842953532934189e-09;1.1641532182693481e-09;1.0477378964424133e-09;4.656612873077393e-10;2.3283064365386963e-10;-3.4924596548080444e-10;-6.984919309616089e-10;-8.149072527885437e-10;-8.149072527885437e-10,5,5,"[-5.536914825439453, -4.989259719848633, -5.38323450088501, -6.460453510284424, -5.444184303283691, -0.021456262096762657]",0.9787722826004028
1,['    @Test\n    public void testInterfaces() {\n        assertThat(classNode.interfaces)\n                .allSatisfy(it -> assertThat(it).doesNotStartWith(SHADED_PACKAGE_PATH));\n    }\n'],class;ACKAGE;interfaces;SHADED;Interfaces;it;all;That;PATH;Start,3.259629011154175e-09;2.852175384759903e-09;1.3387762010097504e-09;1.0477378964424133e-09;8.149072527885437e-10;5.238689482212067e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.52250862121582, -5.002597332000732, -5.366340637207031, -6.448996067047119, -5.429401874542236, -0.021586701273918152]",0.9786447286605835
1,['    @Test\n    public void testMethodReturnTypes() {\n        assertThat(classNode.methods)\n                .filteredOn(it -> (it.access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0)\n                .allSatisfy(it -> assertThat(Type.getReturnType(it.desc).getClassName()).doesNotStartWith(SHADED_PACKAGE));\n    }\n'],pcodes;atisf;SHADED;Method;all;Node;Types;Opcodes;Not;ACC,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.5274882316589355, -5.008655548095703, -5.440968990325928, -6.507984161376953, -5.445931911468506, -0.021015703678131104]",0.9792035818099976
1,['    @Test\n    public void testMethodArguments() {\n        assertThat(classNode.methods)\n                .filteredOn(it -> (it.access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0)\n                .allSatisfy(method -> assertThat(Arrays.asList(Type.getArgumentTypes(method.desc)))\n                        .extracting(Type::getClassName)\n                        .allSatisfy(it -> assertThat(it).doesNotStartWith(SHADED_PACKAGE))\n                );\n    }\n'],PROTECTED;class;Type;Opcodes;ACC;List;That;ACKAGE;On;method,6.693881005048752e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;4.147295840084553e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.457625389099121, -5.080220699310303, -5.413095474243164, -6.4188618659973145, -5.374189853668213, -0.021433277055621147]",0.9787948131561279
1,['    @Test\n    public void testFields() {\n        assertThat(classNode.fields)\n                .filteredOn(it -> (it.access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0)\n                .allSatisfy(it -> assertThat(Type.getType(it.desc).getClassName())\n                        .doesNotStartWith(SHADED_PACKAGE)\n                );\n    }\n'],filtered;That;ACKAGE;pcodes;fields;SHADED;Not;ACC;Type;all,1.4551915228366852e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10,5,5,"[-5.467658996582031, -5.064124584197998, -5.414604187011719, -6.433191299438477, -5.394661903381348, -0.0213663000613451]",0.9788603186607361
1,"['    @Test\n    public void testPackages() throws Exception {\n        assertThatFileList(root).containsOnly(\n                ""docker-java.properties"",\n                ""org"",\n                ""META-INF"",\n                ""com""\n        );\n\n        assertThatFileList(root.resolve(""org"")).containsOnly(\n                ""testcontainers""\n        );\n\n        assertThatFileList(root.resolve(""com"")).containsOnly(\n                ""github""\n        );\n\n        assertThatFileList(root.resolve(""com"").resolve(""github"")).containsOnly(\n                ""dockerjava""\n        );\n    }\n']",Packages;org;properties;File;com;github;Only;org;root;root,1.8917489796876907e-09;1.1641532182693481e-09;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10;1.6007106751203537e-10;1.1641532182693481e-10,5,5,"[-5.487205982208252, -5.037924289703369, -5.473085880279541, -6.499022960662842, -5.464396953582764, -0.020779063925147057]",0.9794353246688843
1,"['    @Test\n    public void testMetaInf() throws Exception {\n        assertThatFileList(root.resolve(""META-INF"")).containsOnly(\n                ""MANIFEST.MF"",\n                ""services"",\n                ""native""\n        );\n\n        assertThatFileList(root.resolve(""META-INF"").resolve(""native"")).containsOnly(\n                ""liborg-testcontainers-shaded-netty-transport-native-epoll.so"",\n                ""liborg-testcontainers-shaded-netty-transport-native-kqueue.jnilib""\n        );\n    }\n']",File;contains;native;epoll;That;root;root;MF;transport;so,3.4924596548080444e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.822542779147625e-10;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.49960994720459, -5.045431613922119, -5.461189270019531, -6.501590251922607, -5.455672264099121, -0.020762717351317406]",0.9794513583183289
1,"['    @Test\n    public void testMetaInfServices() throws Exception {\n        assertThatFileList(root.resolve(""META-INF"").resolve(""services""))\n                .allMatch(it -> it.startsWith(""org.testcontainers.""));\n    }\n']",all;starts;it;Services;root;containers;services;IN;File;ETA,6.984919309616089e-10;5.820766091346741e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;-5.820766091346741e-11;-5.820766091346741e-11;-2.9103830456733704e-10,5,5,"[-5.530467510223389, -4.998255252838135, -5.441283226013184, -6.521575927734375, -5.4666361808776855, -0.020962705835700035]",0.9792554974555969
1,"['    @Test\n    public void testForExistingNames() {\n        LicenseAcceptance.assertLicenseAccepted(""a"");\n        LicenseAcceptance.assertLicenseAccepted(""b"");\n    }\n']",Acceptance;Accepted;License;For;Names;Existing;License;License;Acceptance;Accepted,1.2223608791828156e-09;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;-5.238689482212067e-10;-6.984919309616089e-10;-1.3969838619232178e-09;-1.5133991837501526e-09;-1.6589183360338211e-09,5,5,"[-5.515453815460205, -4.954824924468994, -5.348731517791748, -6.464783191680908, -5.434720039367676, -0.02198735997080803]",0.9782525897026062
1,"['    @Test(expected = IllegalStateException.class)\n    public void testForMissingNames() {\n        LicenseAcceptance.assertLicenseAccepted(""c"");\n    }\n']",License;expected;Acceptance;Illegal;Missing;State;Exception;License;Names;class,2.9103830456733704e-09;1.862645149230957e-09;1.6298145055770874e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;0.0;0.0;-2.3283064365386963e-10;-7.8580342233181e-10,5,5,"[-5.535560607910156, -5.0612969398498535, -5.381320953369141, -6.46986722946167, -5.430608749389648, -0.021032512187957764]",0.9791871309280396
1,"['    @Test\n    public void validNames() {\n        testValid(""myname:latest"");\n        testValid(""myname:latest"");\n        testValid(""repo/my-name:1.0"");\n        testValid(""repo.foo.com:1234/my-name:1.0"");\n        testValid(""repo.foo.com/my-name:1.0"");\n        testValid(""repo.foo.com:1234/repo_here/my-name:1.0"");\n        testValid(""repo.foo.com:1234/repo-here/my-name@sha256:1234abcd1234abcd1234abcd1234abcd"");\n        testValid(""repo.foo.com:1234/my-name@sha256:1234abcd1234abcd1234abcd1234abcd"");\n        testValid(""1.2.3.4/my-name:1.0"");\n        testValid(""1.2.3.4:1234/my-name:1.0"");\n        testValid(""1.2.3.4/repo-here/my-name:1.0"");\n        testValid(""1.2.3.4:1234/repo-here/my-name:1.0"");\n    }\n']",Names;abcd;latest;repo;my;name;sha;repo;name;myname,1.3969838619232178e-09;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.3765716552734375, -5.151365756988525, -5.486981391906738, -6.471440315246582, -5.356957912445068, -0.02103741466999054]",0.9791823029518127
1,"['    @Test\n    public void invalidNames() {\n        testInvalid(""myname"");\n        testInvalid("":latest"");\n        testInvalid(""/myname:latest"");\n        testInvalid(""/myname@sha256:latest"");\n        testInvalid(""/myname@sha256:gggggggggggggggggggggggggggggggg"");\n        testInvalid(""repo:notaport/myname:latest"");\n    }\n']",gggggggggggggggggggggggggggggggg;invalid;myname;repo;latest;Invalid;Invalid;latest;myname;Invalid,2.2992026060819626e-09;9.313225746154785e-10;9.313225746154785e-10;8.87666828930378e-10;7.566995918750763e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.481174468994141, -5.0606794357299805, -5.471179962158203, -6.502128601074219, -5.435242176055908, -0.02078700251877308]",0.979427695274353
1,"['    @Test\n    public void testLazyness() throws Exception {\n        AtomicInteger counter = new AtomicInteger();\n\n        Future<Integer> lazyFuture = new LazyFuture<Integer>() {\n            @Override\n            protected Integer resolve() {\n                return counter.incrementAndGet();\n            }\n        };\n\n        assertEquals(""No resolve() invocations before get()"", 0, counter.get());\n        assertEquals(""get() call returns proper result"", 1, lazyFuture.get());\n        assertEquals(""resolve() was called only once after single get() call"", 1, counter.get());\n\n        counter.incrementAndGet();\n        assertEquals(""result of resolve() must be cached"", 1, lazyFuture.get());\n    }\n']",lazy;counter;Exception;Future;azy;result;counter;Get;No;counter,6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;2.1827872842550278e-10,5,5,"[-5.506078243255615, -4.981710433959961, -5.489966869354248, -6.540993690490723, -5.515783786773682, -0.020731542259454727]",0.9794818758964539
1,"['    @Test(timeout = 5_000)\n    public void timeoutWorks() throws Exception {\n        Future<Void> lazyFuture = new LazyFuture<Void>() {\n            @Override\n            @SneakyThrows(InterruptedException.class)\n            protected Void resolve() {\n                TimeUnit.MINUTES.sleep(1);\n                return null;\n            }\n        };\n\n        assertThrows(""Should timeout"", TimeoutException.class, () -> lazyFuture.get(10, TimeUnit.MILLISECONDS));\n        pass(""timeout works"");\n    }\n']",sleep;lazy;Void;Future;MINUTES;Future;timeout;oid;works;neaky,1.3387762010097504e-09;1.1641532182693481e-09;1.0477378964424133e-09;5.820766091346741e-10;5.384208634495735e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.480985164642334, -5.006430625915527, -5.469249725341797, -6.516190528869629, -5.506361961364746, -0.02082996815443039]",0.979385495185852
1,"['    @Test(timeout = 5_000)\n    public void testThreadSafety() throws Exception {\n        final int numOfThreads = 3;\n        CountDownLatch latch = new CountDownLatch(numOfThreads);\n        AtomicInteger counter = new AtomicInteger();\n\n        Future<Integer> lazyFuture = new LazyFuture<Integer>() {\n            @Override\n            @SneakyThrows(InterruptedException.class)\n            protected Integer resolve() {\n                latch.await();\n                return counter.incrementAndGet();\n            }\n        };\n\n        Future<List<Integer>> task = new ForkJoinPool(numOfThreads).submit(() -> {\n            return IntStream.rangeClosed(1, numOfThreads).parallel().mapToObj(i -> Futures.getUnchecked(lazyFuture)).collect(toList());\n        });\n\n        while (latch.getCount() > 0) {\n            latch.countDown();\n        }\n\n        assertEquals(""All threads receives the same result"", Collections.nCopies(numOfThreads, 1), task.get());\n    }\n']",timeout;protected;Exception;Future;new;Count;Thread;Future;Down;atch,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.463841438293457, -4.976881980895996, -5.3680806159973145, -6.425576686859131, -5.49403715133667, -0.021761681884527206]",0.9784733057022095
1,"['    @Test\n    public void testRunning() throws Exception {\n        assertTrue(DockerStatus.isContainerRunning(running, minimumDuration, now));\n        assertTrue(DockerStatus.isContainerRunning(runningVariant, minimumDuration, now));\n        assertFalse(DockerStatus.isContainerRunning(shortRunning, minimumDuration, now));\n        assertFalse(DockerStatus.isContainerRunning(created, minimumDuration, now));\n        assertFalse(DockerStatus.isContainerRunning(createdVariant, minimumDuration, now));\n        assertFalse(DockerStatus.isContainerRunning(exited, minimumDuration, now));\n        assertFalse(DockerStatus.isContainerRunning(paused, minimumDuration, now));\n    }\n']",Running;Running;ocker;Container;Variant;short;Variant;Duration;paused;now,9.89530235528946e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.5141191482543945, -5.020499229431152, -5.444891452789307, -6.494452476501465, -5.5072221755981445, -0.02073165960609913]",0.9794818758964539
1,['    @Test\n    public void testStopped() throws Exception {\n        assertFalse(DockerStatus.isContainerStopped(running));\n        assertFalse(DockerStatus.isContainerStopped(runningVariant));\n        assertFalse(DockerStatus.isContainerStopped(shortRunning));\n        assertFalse(DockerStatus.isContainerStopped(created));\n        assertFalse(DockerStatus.isContainerStopped(createdVariant));\n        assertTrue(DockerStatus.isContainerStopped(exited));\n        assertFalse(DockerStatus.isContainerStopped(paused));\n    }\n'],exited;paused;ocker;Stopped;Stopped;True;Container;ocker;Variant;Variant,1.178705133497715e-09;1.0477378964424133e-09;9.022187441587448e-10;5.384208634495735e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.51293420791626, -5.030185222625732, -5.426075458526611, -6.451558589935303, -5.470390796661377, -0.020978348329663277]",0.9792401790618896
1,"['    @Test\n    public void testCompareVersionGreaterThanSameMajor() {\n        assertTrue(""1.22 > 1.20"", new ComparableVersion(""1.22"").compareTo(new ComparableVersion(""1.20"")) == 1);\n    }\n']",Comparable;Version;Comparable;Greater;Than;compare;Version;new;True;new,1.5133991837501526e-09;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;1.1641532182693481e-10;5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-5.57643461227417, -4.93755578994751, -5.421538829803467, -6.493774890899658, -5.5058441162109375, -0.0211768951267004]",0.9790457487106323
1,"['    @Test\n    public void testCompareVersionEqual() {\n        assertTrue(""1.20 == 1.20"", new ComparableVersion(""1.20"").compareTo(new ComparableVersion(""1.20"")) == 0);\n    }\n']",Comparable;compare;Comparable;Version;qual;Version;new;True;new;Version,1.1641532182693481e-09;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;-1.4551915228366852e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-1.2223608791828156e-09,5,5,"[-5.585206031799316, -4.937266826629639, -5.438179016113281, -6.502919673919678, -5.512076377868652, -0.021030878648161888]",0.9791887402534485
1,"['    @Test\n    public void testCompareVersionGreaterThan() {\n        assertTrue(""2.10 > 1.20"", new ComparableVersion(""2.10"").compareTo(new ComparableVersion(""1.20"")) == 1);\n    }\n']",Compare;Greater;Version;Version;Comparable;Version;True;new;Than;compare,9.313225746154785e-10;7.566995918750763e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.58106803894043, -4.9369306564331055, -5.428780555725098, -6.498549461364746, -5.509449005126953, -0.021108848974108696]",0.9791125059127808
1,"['    @Test\n    public void testCompareVersionIgnoresExcessLength() {\n        assertTrue(""1.20 == 1.20.3"", new ComparableVersion(""1.20"").compareTo(new ComparableVersion(""1.20.3"")) == 0);\n    }\n']",Comparable;Version;Version;Version;new;Compare;new;True;compare;Excess,1.1641532182693481e-09;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.1641532182693481e-10;-5.820766091346741e-11;-2.0372681319713593e-10;-5.820766091346741e-10,5,5,"[-5.582400798797607, -4.941711902618408, -5.430107116699219, -6.503094673156738, -5.498687267303467, -0.021100446581840515]",0.9791206121444702
1,"['    @Test\n    public void forClasspathResource() throws Exception {\n        final MountableFile mountableFile = MountableFile.forClasspathResource(""mappable-resource/test-resource.txt"");\n\n        performChecks(mountableFile);\n    }\n']",Resource;mountable;perform;Classpath;final;appable;mountable;Exception;txt;File,1.5133991837501526e-09;1.0186340659856796e-09;8.731149137020111e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;0.0;0.0,5,5,"[-5.524961948394775, -4.984838962554932, -5.415538311004639, -6.5186333656311035, -5.472052574157715, -0.02117479406297207]",0.9790478348731995
1,"['    @Test\n    public void forClasspathResourceWithAbsolutePath() throws Exception {\n        final MountableFile mountableFile = MountableFile.forClasspathResource(""/mappable-resource/test-resource.txt"");\n\n        performChecks(mountableFile);\n    }\n']",Absolute;File;mountable;Resource;mountable;Path;final;Mountable;perform;Exception,1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0;0.0,5,5,"[-5.476040363311768, -5.1099324226379395, -5.391308307647705, -6.468658924102783, -5.391684532165527, -0.021105114370584488]",0.9791160225868225
1,"['    @Test\n    public void forClasspathResourceFromJar() throws Exception {\n        final MountableFile mountableFile = MountableFile.forClasspathResource(""META-INF/dummy_unique_name.txt"");\n\n        performChecks(mountableFile);\n    }\n']",Exception;Checks;Mountable;File;Jar;File;IN;unique;File;Resource,1.5133991837501526e-09;8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.497766017913818, -4.980234622955322, -5.381292819976807, -6.481060028076172, -5.460655212402344, -0.021584367379546165]",0.9786468148231506
1,"['    @Test\n    public void forClasspathResourceFromJarWithAbsolutePath() throws Exception {\n        final MountableFile mountableFile = MountableFile.forClasspathResource(""/META-INF/dummy_unique_name.txt"");\n\n        performChecks(mountableFile);\n    }\n']",ummy;Exception;txt;Path;From;Resource;Resource;ETA;File;Mountable,1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.522561073303223, -4.9547858238220215, -5.417295455932617, -6.522202014923096, -5.488734245300293, -0.021313438192009926]",0.9789121747016907
1,"['    @Test\n    public void forHostPath() throws Exception {\n        final Path file = createTempFile(""somepath"");\n        final MountableFile mountableFile = MountableFile.forHostPath(file.toString());\n\n        performChecks(mountableFile);\n    }\n']",Host;Temp;somepath;perform;Path;File;Path;file;create;File,2.0954757928848267e-09;1.3969838619232178e-09;8.731149137020111e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.6007106751203537e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.534518241882324, -4.943389415740967, -5.429429531097412, -6.52020788192749, -5.506408214569092, -0.0212218277156353]",0.9790018796920776
1,"['    @Test\n    public void forHostPathWithSpaces() throws Exception {\n        final Path file = createTempFile(""some path"");\n        final MountableFile mountableFile = MountableFile.forHostPath(file.toString());\n\n        performChecks(mountableFile);\n\n        assertTrue(""The resolved path contains the original space"", mountableFile.getResolvedPath().contains("" ""));\n        assertFalse(""The resolved path does not contain an escaped space"", mountableFile.getResolvedPath().contains(""\\\\ ""));\n    }\n']",Temp;escaped;final;resolved;The;The;mountable;path;File;path,2.0954757928848267e-09;6.257323548197746e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.521161079406738, -5.0122857093811035, -5.474303722381592, -6.509069919586182, -5.493442058563232, -0.020665684714913368]",0.9795464873313904
1,"['    @Test\n    public void forHostPathWithPlus() throws Exception {\n        final Path file = createTempFile(""some+path"");\n        final MountableFile mountableFile = MountableFile.forHostPath(file.toString());\n\n        performChecks(mountableFile);\n\n        assertTrue(""The resolved path contains the original space"", mountableFile.getResolvedPath().contains(""+""));\n        assertFalse(""The resolved path does not contain an escaped space"", mountableFile.getResolvedPath().contains("" ""));\n    }\n']",Host;Exception;the;The;True;File;an;contains;contain;space,6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.51205587387085, -5.0250725746154785, -5.477162837982178, -6.505970478057861, -5.484524250030518, -0.020646652206778526]",0.979564905166626
1,"['    @Test\n    public void forClasspathResourceWithPermission() throws Exception {\n        final MountableFile mountableFile = MountableFile.forClasspathResource(""mappable-resource/test-resource.txt"",\n                TEST_FILE_MODE);\n\n        performChecks(mountableFile);\n        assertEquals(""Valid file mode."", BASE_FILE_MODE | TEST_FILE_MODE, mountableFile.getFileMode());\n    }\n']",Exception;Classpath;TEST;Checks;final;File;FILE;Mountable;File;TEST,9.604264050722122e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.471176624298096, -5.0091118812561035, -5.34407377243042, -6.422228813171387, -5.411129474639893, -0.02199120819568634]",0.9782489538192749
1,"['    @Test\n    public void forHostFilePathWithPermission() throws Exception {\n        final Path file = createTempFile(""somepath"");\n        final MountableFile mountableFile = MountableFile.forHostPath(file.toString(), TEST_FILE_MODE);\n        performChecks(mountableFile);\n        assertEquals(""Valid file mode."", BASE_FILE_MODE | TEST_FILE_MODE, mountableFile.getFileMode());\n    }\n']",Temp;Checks;File;final;Mountable;MODE;File;mountable;Exception;Path,2.3283064365386963e-09;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.531036376953125, -4.985691070556641, -5.430498123168945, -6.490288257598877, -5.4860663414001465, -0.021060293540358543]",0.979159951210022
1,"['    @Test\n    public void forHostDirPathWithPermission() throws Exception {\n        final Path dir = createTempDir();\n        final MountableFile mountableFile = MountableFile.forHostPath(dir.toString(), TEST_FILE_MODE);\n        performChecks(mountableFile);\n        assertEquals(""Valid dir mode."", BASE_DIR_MODE | TEST_FILE_MODE, mountableFile.getFileMode());\n    }\n']",TEST;TEST;BASE;Equals;Temp;Mode;mountable;mode;Host;final,2.7939677238464355e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.537839889526367, -4.979770183563232, -5.420755386352539, -6.48756742477417, -5.489527702331543, -0.021107682958245277]",0.9791135191917419
1,"['    @Test\n    public void simpleRecursiveFileTest() throws TimeoutException {\n\n        WaitingConsumer wait = new WaitingConsumer();\n\n        final ToStringConsumer toString = new ToStringConsumer();\n\n        GenericContainer container = new GenericContainer(\n                new ImageFromDockerfile()\n                        .withDockerfileFromBuilder(builder ->\n                                builder.from(""alpine:3.3"")\n                                        .copy(""/tmp/foo"", ""/foo"")\n                                        .cmd(""cat /foo/src/test/resources/test-recursive-file.txt"")\n                                        .build()\n                        ).withFileFromFile(""/tmp/foo"", new File(""."")))  // \'.\' is expected to be the project base directory, so all source code/resources should be copied in\n                .withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n                .withLogConsumer(wait.andThen(toString));\n\n        container.start();\n        wait.waitUntilEnd(60, TimeUnit.SECONDS);\n\n        final String results = toString.toUtf8String();\n\n        assertTrue(""The container has a file that was copied in via a recursive copy"", results.contains(""Used for DirectoryTarResourceTest""));\n    }\n']",builder;Consumer;Waiting;Generic;builder;File;Exception;container;copy;Consumer,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.4441819190979, -5.048620223999023, -5.4197564125061035, -6.453699111938477, -5.4575605392456055, -0.02123023010790348]",0.9789935350418091
1,"['    @Test\n    public void simpleRecursiveFileWithPermissionTest() throws TimeoutException {\n\n        WaitingConsumer wait = new WaitingConsumer();\n\n        final ToStringConsumer toString = new ToStringConsumer();\n\n        GenericContainer container = new GenericContainer(\n                new ImageFromDockerfile()\n                        .withDockerfileFromBuilder(builder ->\n                                builder.from(""alpine:3.3"")\n                                        .copy(""/tmp/foo"", ""/foo"")\n                                        .cmd(""ls"", ""-al"", ""/"")\n                                        .build()\n                        ).withFileFromFile(""/tmp/foo"", new File(""/mappable-resource/test-resource.txt""),\n                        0754))\n                .withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n                .withLogConsumer(wait.andThen(toString));\n\n        container.start();\n        wait.waitUntilEnd(60, TimeUnit.SECONDS);\n\n        String listing = toString.toUtf8String();\n\n        assertThat(""Listing shows that file is copied with mode requested."",\n                Arrays.asList(listing.split(""\\\\n"")),\n                exactlyNItems(1, allOf(containsString(""-rwxr-xr--""), containsString(""foo""))));\n    }\n']",From;builder;builder;Recursive;Strategy;resource;Then;from;with;ockerfile,1.3969838619232178e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.452906608581543, -5.030078887939453, -5.426731109619141, -6.459178924560547, -5.470256328582764, -0.02121926099061966]",0.9790041446685791
1,"['    @Test\n    public void simpleRecursiveClasspathResourceTest() throws TimeoutException {\n        // This test combines the copying of classpath resources from JAR files with the recursive TAR approach, to allow JARed classpath resources to be copied in to an image\n\n        WaitingConsumer wait = new WaitingConsumer();\n\n        final ToStringConsumer toString = new ToStringConsumer();\n\n        GenericContainer container = new GenericContainer(\n                new ImageFromDockerfile()\n                        .withDockerfileFromBuilder(builder ->\n                                builder.from(""alpine:3.3"")\n                                        .copy(""/tmp/foo"", ""/foo"")\n                                        .cmd(""ls -lRt /foo"")\n                                        .build()\n                        ).withFileFromClasspath(""/tmp/foo"", ""/recursive/dir""))          // here we use /org/junit as a directory that really should exist on the classpath\n                .withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n                .withLogConsumer(wait.andThen(toString));\n\n        container.start();\n        wait.waitUntilEnd(60, TimeUnit.SECONDS);\n\n        final String results = toString.toUtf8String();\n\n        // ExternalResource.class is known to exist in a subdirectory of /org/junit so should be successfully copied in\n        assertTrue(""The container has a file that was copied in via a recursive copy from a JAR resource"", results.contains(""content.txt""));\n    }\n']",Builder;Waiting;AR;Resource;new;tmp;to;Container;unit;combines,7.450580596923828e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.441239356994629, -5.042784690856934, -5.43019437789917, -6.464476108551025, -5.455249786376953, -0.021227430552244186]",0.9789962768554688
1,"['    @Test\n    public void testWaitOnListeningPort() {\n        final DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/compose-test.yml""))\n            .withExposedService(""redis_1"", REDIS_PORT, Wait.forListeningPort());\n\n        try {\n            environment.starting(Description.createTestDescription(Object.class, ""name""));\n            VisibleAssertions.pass(""Docker compose should start after waiting for listening port"");\n        } catch (RuntimeException e) {\n            VisibleAssertions.fail(""Docker compose should start after waiting for listening port with failed with: "" + e);\n        }\n    }\n']",Docker;name;Listening;Listening;Runtime;final;Port;compose;Service;On,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.51052188873291, -5.0443549156188965, -5.469085216522217, -6.4876580238342285, -5.443994045257568, -0.02076306752860546]",0.9794510006904602
1,"['    @Test\n    public void testWaitOnMultipleStrategiesPassing() {\n        final DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/compose-test.yml""))\n            .withExposedService(""redis_1"", REDIS_PORT, Wait.forListeningPort())\n            .withExposedService(""db_1"", 3306, Wait.forLogMessage("".*ready for connections.*\\\\s"", 1))\n            .withTailChildContainers(true);\n\n        try {\n            environment.starting(Description.createTestDescription(Object.class, ""name""));\n            VisibleAssertions.pass(""Docker compose should start after waiting for listening port"");\n        } catch (RuntimeException e) {\n            VisibleAssertions.fail(""Docker compose should start after waiting for listening port with failed with: "" + e);\n        }\n    }\n']",On;Strategies;Passing;Docker;environment;Description;create;ail;Runtime;ocker,3.725290298461914e-09;3.14321368932724e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.5146074295043945, -5.054488658905029, -5.468573570251465, -6.488008975982666, -5.450475215911865, -0.020653074607253075]",0.9795587658882141
1,"['    @Test\n    public void testWaitingFails() {\n        final DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/compose-test.yml""))\n            .withExposedService(""redis_1"", REDIS_PORT, Wait.forHttp(""/test"").withStartupTimeout(Duration.ofSeconds(10)));\n        VisibleAssertions.assertThrows(""waiting on an invalid http path times out"",\n            RuntimeException.class,\n            () -> environment.starting(Description.createTestDescription(Object.class, ""name"")));\n    }\n']",Compose;src;Http;with;ails;red;Object;class;create;Wait,7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.516043663024902, -5.023018836975098, -5.464397430419922, -6.512681484222412, -5.4726104736328125, -0.02073959819972515]",0.9794740080833435
1,"['    @Test\n    public void testWaitOnOneOfMultipleStrategiesFailing() {\n        final DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/compose-test.yml""))\n            .withExposedService(""redis_1"", REDIS_PORT, Wait.forListeningPort().withStartupTimeout(Duration.ofSeconds(10)))\n            .waitingFor(""db_1"", Wait.forLogMessage("".*test test test.*\\\\s"", 1).withStartupTimeout(Duration.ofSeconds(10)))\n            .withTailChildContainers(true);\n\n        VisibleAssertions.assertThrows(""waiting on one failing strategy to time out"",\n            RuntimeException.class,\n            () -> environment.starting(Description.createTestDescription(Object.class, ""name"")));\n    }\n']",src;File;Description;db;Description;Child;Log;strategy;Runtime;Timeout,3.725290298461914e-09;3.259629011154175e-09;3.026798367500305e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09,5,5,"[-5.487781047821045, -5.038483142852783, -5.456491947174072, -6.498409748077393, -5.4539666175842285, -0.020890794694423676]",0.9793257713317871
1,"['    @Test\n    public void checkOutput() {\n        String listing = toStringConsumer.toUtf8String();\n\n        assertTrue(""Directory listing contains expected /etc content"", listing.contains(""hostname""));\n        assertTrue(""Directory listing contains expected /etc content"", listing.contains(""init.d""));\n        assertTrue(""Directory listing contains expected /etc content"", listing.contains(""passwd""));\n    }\n']",passwd;to;hostname;contains;Ut;True;listing;to;content;expected,1.9208528101444244e-09;1.3969838619232178e-09;9.89530235528946e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.516860008239746, -4.999225616455078, -5.398975372314453, -6.446069717407227, -5.460794448852539, -0.021345995366573334]",0.9788802266120911
1,"['    @Test(timeout = 60_000L)\n    public void pullingNonExistentImageFailsGracefully() {\n\n        assertThrows(""Pulling a nonexistent container will cause an exception to be thrown"",\n                ContainerFetchException.class, () -> {\n                    return new GenericContainer(""richnorth/nonexistent:latest"");\n                });\n    }\n']",timeout;pulling;none;return;nonexistent;will;container;Non;istent;Image,1.30385160446167e-08;7.450580596923828e-09;3.259629011154175e-09;3.259629011154175e-09;3.026798367500305e-09;2.561137080192566e-09;2.561137080192566e-09;2.561137080192566e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-5.525527000427246, -4.980286598205566, -5.4163312911987305, -6.470761299133301, -5.510364532470703, -0.021113285794854164]",0.9791080355644226
1,"['    @Test\n    public void simpleTest() {\n        Jedis jedis = new Jedis(getEnvironment().getServiceHost(""redis_1"", REDIS_PORT), getEnvironment().getServicePort(""redis_1"", REDIS_PORT));\n\n        jedis.incr(""test"");\n        jedis.incr(""test"");\n        jedis.incr(""test"");\n\n        assertEquals(""A redis instance defined in compose can be used in isolation"", ""3"", jedis.get(""test""));\n    }\n']",isolation;Service;red;ed;Jed;get;new;red;compose;ed,8.149072527885437e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.517052173614502, -5.026813983917236, -5.429800510406494, -6.464309215545654, -5.44645881652832, -0.02105095610022545]",0.9791690707206726
1,"['    @Test\n    public void secondTest() {\n        // used in manual checking for cleanup in between tests\n        Jedis jedis = new Jedis(getEnvironment().getServiceHost(""redis_1"", REDIS_PORT), getEnvironment().getServicePort(""redis_1"", REDIS_PORT));\n\n        jedis.incr(""test"");\n        jedis.incr(""test"");\n        jedis.incr(""test"");\n\n        assertEquals(""Tests use fresh container instances"", ""3"", jedis.get(""test""));\n        // if these end up using the same container one of the test methods will fail.\n        // However, @Rule creates a separate DockerComposeContainer instance per test, so this just shouldn\'t happen\n    }\n']",manual;inc;fresh;REDIS;separate;inc;ests;Compose;However;use,1.5133991837501526e-09;1.0477378964424133e-09;8.731149137020111e-10;8.440110832452774e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.020410753786564e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.549118995666504, -5.0263352394104, -5.44490909576416, -6.478790760040283, -5.459569454193115, -0.020777428522706032]",0.9794370532035828
1,"['    @Test\n    public void simpleTest() {\n\n        for (int i = 0; i < 3; i++) {\n            clients[i].incr(""somekey"");\n\n            assertEquals(""Each redis instance is separate"", ""1"", clients[i].get(""somekey""));\n        }\n    }\n']",separate;red;simple;Each;somekey;get;somekey;instance;clients;clients,5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.9103830456733704e-11;-1.4551915228366852e-10;-2.473825588822365e-10;-4.656612873077393e-10;-4.656612873077393e-10,5,5,"[-5.524919509887695, -5.023110866546631, -5.437744140625, -6.492733955383301, -5.472833156585693, -0.020848998799920082]",0.9793668389320374
1,"['    @Test\n    public void testGetServicePort() {\n        int serviceWithInstancePort = environment.getServicePort(""redis_1"", REDIS_PORT);\n        assertNotNull(""Port is set for service with instance number"", serviceWithInstancePort);\n        int serviceWithoutInstancePort = environment.getServicePort(""redis"", REDIS_PORT);\n        assertNotNull(""Port is set for service with instance number"", serviceWithoutInstancePort);\n        assertEquals(""Service ports are the same"", serviceWithInstancePort, serviceWithoutInstancePort);\n    }\n']",are;Without;Without;Equals;get;Without;environment;Port;red;Service,6.984919309616089e-10;6.83940015733242e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.534593105316162, -5.036581039428711, -5.426958084106445, -6.4378461837768555, -5.442418098449707, -0.02098768763244152]",0.9792309999465942
1,"['    @Test\n    public void testFetchStdout() throws TimeoutException {\n\n        WaitingConsumer consumer = new WaitingConsumer();\n\n        container.followOutput(consumer, STDOUT);\n\n        consumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""seq=2""),\n                30, TimeUnit.SECONDS);\n    }\n']",follow;Time;St;STDOUT;STDOUT;out;contains;Waiting;Until;Exception,1.6298145055770874e-09;1.280568540096283e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.533911228179932, -4.934438705444336, -5.384578227996826, -6.477451801300049, -5.5126214027404785, -0.021535251289606094]",0.9786949753761292
1,"['    @Test\n    public void testFetchStdoutWithTimeout() throws TimeoutException {\n\n        WaitingConsumer consumer = new WaitingConsumer();\n\n        container.followOutput(consumer, STDOUT);\n\n        assertThrows(""a TimeoutException should be thrown"", TimeoutException.class, () -> {\n            consumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""seq=5""),\n                    2, TimeUnit.SECONDS);\n            return true;\n        });\n    }\n']",consumer;frame;etch;wait;Timeout;new;class;true;Waiting;be,1.1932570487260818e-09;9.313225746154785e-10;7.8580342233181e-10;7.275957614183426e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.527911186218262, -4.990948677062988, -5.4476118087768555, -6.511197090148926, -5.508152484893799, -0.02083592303097248]",0.9793796539306641
1,"['    @Test\n    public void testFetchStdoutWithNoLimit() throws TimeoutException {\n\n        WaitingConsumer consumer = new WaitingConsumer();\n\n        container.followOutput(consumer, STDOUT);\n\n        consumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""seq=2""));\n    }\n']",follow;St;Until;wait;Exception;out;Limit;frame;etch;Ut,1.5133991837501526e-09;1.0477378964424133e-09;9.89530235528946e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;0.0,5,5,"[-5.543103218078613, -4.928588390350342, -5.354635715484619, -6.45999002456665, -5.478413105010986, -0.021855108439922333]",0.9783819913864136
1,"['    @Test\n    public void testLogConsumer() throws TimeoutException {\n\n        WaitingConsumer waitingConsumer = new WaitingConsumer();\n        Slf4jLogConsumer logConsumer = new Slf4jLogConsumer(LOGGER);\n\n        Consumer<OutputFrame> composedConsumer = logConsumer.andThen(waitingConsumer);\n        container.followOutput(composedConsumer);\n\n        waitingConsumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""seq=2""));\n    }\n']",follow;Until;Waiting;contains;and;Consumer;Then;frame;composed;waiting,7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.53511381149292, -4.949450969696045, -5.417898178100586, -6.515657901763916, -5.491830348968506, -0.02129499986767769]",0.9789301156997681
1,"['    @Test\n    public void testToStringConsumer() throws TimeoutException {\n\n        WaitingConsumer waitingConsumer = new WaitingConsumer();\n        ToStringConsumer toStringConsumer = new ToStringConsumer();\n\n        Consumer<OutputFrame> composedConsumer = toStringConsumer.andThen(waitingConsumer);\n        container.followOutput(composedConsumer);\n\n        waitingConsumer.waitUntilEnd(30, TimeUnit.SECONDS);\n\n        String utf8String = toStringConsumer.toUtf8String();\n        assertTrue(""the expected first value was found"", utf8String.contains(""seq=1""));\n        assertTrue(""the expected last value was found"", utf8String.contains(""seq=4""));\n        assertFalse(""a non-expected value was found"", utf8String.contains(""seq=42""));\n    }\n']",new;wait;Consumer;Consumer;composed;and;Frame;False;to;seq,1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.481398582458496, -4.960613250732422, -5.3970136642456055, -6.482497692108154, -5.489853858947754, -0.021592184901237488]",0.9786393642425537
1,"['    @Test\n    public void testFixedHostPortMapping() throws IOException {\n        // first find a free port on the docker host that will work for testing\n        GenericContainer portDiscoveryRedis = new GenericContainer(""redis:3.0.2"").withExposedPorts(REDIS_PORT);\n        portDiscoveryRedis.start();\n        Integer freePort = portDiscoveryRedis.getMappedPort(REDIS_PORT);\n        portDiscoveryRedis.stop();\n\n\n        // Set up a FixedHostPortGenericContainer as if this were a @Rule\n        FixedHostPortGenericContainer redis = new FixedHostPortGenericContainer(""redis:3.0.2"").withFixedExposedPort(freePort, REDIS_PORT);\n        redis.start();\n\n//        Config redisConfig = new Config();\n//        redisConfig.useSingleServer().setAddress(redis.getContainerIpAddress() + "":"" + freePort);\n//        Redisson redisson = Redisson.create(redisConfig);\n//\n//        redisson.getBucket(""test"").set(""foo"");\n//\n//        assertEquals(""The bucket content was successfully set"", ""foo"", redisson.getBucket(""test"").get());\n//        assertEquals(""The container returns the fixed port from getMappedPort(...)"", freePort, redis.getMappedPort(REDIS_PORT));\n    }\n']",testing;if;Set;host;redisson;Container;Host;foo;new;container,2.561137080192566e-09;1.862645149230957e-09;1.1059455573558807e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.531295299530029, -4.940852642059326, -5.389153957366943, -6.421749114990234, -5.489931583404541, -0.021662063896656036]",0.9785708785057068
1,"['    @Test(timeout = 30_000)\n    public void testEnvVar() throws IOException {\n        BufferedReader br = Unreliables.retryUntilSuccess(10, TimeUnit.SECONDS, () -> {\n            Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);\n\n            Socket socket = new Socket(compose.getServiceHost(""alpine_1"", 3000), compose.getServicePort(""alpine_1"", 3000));\n            return new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        });\n\n        Unreliables.retryUntilTrue(10, TimeUnit.SECONDS, () -> {\n            while (br.ready()) {\n                String line = br.readLine();\n                if (line.contains(DOCKER_COMPOSE_OVERRIDE_TEST_OVERRIDE_ENV)) {\n                    pass(""Mapped environment variable was found"");\n                    return true;\n                }\n            }\n            info(""Mapped environment variable was not found yet - process probably not ready"");\n            Uninterruptibles.sleepUninterruptibly(100, TimeUnit.MILLISECONDS);\n            return false;\n        });\n\n    }\n']",retry;timeout;sleep;Success;sleep;contains;Socket;Socket;Buffered;variable,3.6088749766349792e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.0372681319713593e-09;1.6880221664905548e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09,5,5,"[-5.491318225860596, -4.806408882141113, -5.377470016479492, -6.44692850112915, -5.5275397300720215, -0.02273680828511715]",0.9775197505950928
1,"['    @Test\n    public void testContainerInstanceProperties() {\n        final ContainerState container = waitStrategy.getContainer();\n\n        //check environment variable was set\n        assertThat(""Environment variable set correctly"", Arrays.asList(Objects.requireNonNull(container.getContainerInfo()\n            .getConfig().getEnv())), hasItem(""bar=bar""));\n\n        //check other container properties\n        assertNotNull(""Container id is not null"", container.getContainerId());\n        assertNotNull(""Port mapped"", container.getMappedPort(3000));\n        assertThat(""Exposed Ports"", container.getExposedPorts(), hasItem(3000));\n\n    }\n']",State;Container;variable;apped;require;wait;other;has;container;bar,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.506303310394287, -5.026332855224609, -5.4038987159729, -6.44963264465332, -5.466126441955566, -0.021153785288333893]",0.979068398475647
1,"['    @Test(timeout = 30_000)\n    public void testEnvVar() throws IOException {\n        BufferedReader br = Unreliables.retryUntilSuccess(10, TimeUnit.SECONDS, () -> {\n            Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);\n\n            Socket socket = new Socket(compose.getServiceHost(""alpine_1"", 3000), compose.getServicePort(""alpine_1"", 3000));\n            return new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        });\n\n        Unreliables.retryUntilTrue(10, TimeUnit.SECONDS, () -> {\n            while (br.ready()) {\n                String line = br.readLine();\n                if (line.contains(DOCKER_COMPOSE_OVERRIDE_TEST_BASE_ENV)) {\n                    pass(""Mapped environment variable was found"");\n                    return true;\n                }\n            }\n            info(""Mapped environment variable was not found yet - process probably not ready"");\n            Uninterruptibles.sleepUninterruptibly(100, TimeUnit.MILLISECONDS);\n            return false;\n        });\n\n    }\n']",timeout;EST;sleep;variable;IOException;True;Unit;Line;br;En,1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.4856767654418945, -4.955109596252441, -5.393064975738525, -6.4554901123046875, -5.515084743499756, -0.02156943455338478]",0.9786615371704102
1,"['    @Test\n    public void testNoNetworkContainer() throws TimeoutException {\n        String output = getContainerOutput(noNetwork);\n\n        assertTrue(""\'none\' network causes a network access error"", output.contains(""bad address""));\n    }\n']",Container;no;get;Container;access;network;error;Network;True;contains,9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-2.9103830456733704e-11;-1.1641532182693481e-10,5,5,"[-5.573240280151367, -4.9498138427734375, -5.401331901550293, -6.501019477844238, -5.506982803344727, -0.021176427602767944]",0.9790463447570801
1,"['    @Test\n    public void testHostNetworkContainer() throws TimeoutException {\n        String output = getContainerOutput(hostNetwork);\n\n        assertTrue(""\'host\' network can access the internet"", output.contains(""seq=1""));\n    }\n']",Container;contains;Network;the;get;access;Output;Timeout;host;Host,2.561137080192566e-09;1.280568540096283e-09;6.984919309616089e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;5.820766091346741e-11;2.9103830456733704e-11;0.0;0.0,5,5,"[-5.555769920349121, -4.951870918273926, -5.3881611824035645, -6.492008686065674, -5.489053249359131, -0.021379951387643814]",0.978847086429596
1,"['    @Test\n    public void testBridgedNetworkContainer() throws TimeoutException {\n        String output = getContainerOutput(bridgedNetwork);\n\n        assertTrue(""\'bridge\' network can access the internet"", output.contains(""seq=1""));\n    }\n']",ridged;Timeout;the;get;access;network;output;Network;internet;can,8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.564601421356201, -4.9185471534729, -5.390105247497559, -6.496838092803955, -5.492807865142822, -0.021557534113526344]",0.9786731600761414
1,"['    @Test\n    public void testLogConsumer() throws TimeoutException {\n        WaitingConsumer logConsumer = new WaitingConsumer();\n        DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/v2-compose-test.yml""))\n            .withExposedService(""redis_1"", 6379)\n            .withLogConsumer(""redis_1"", logConsumer);\n\n        try {\n            environment.starting(Description.EMPTY);\n            logConsumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""Ready to accept connections""), 5, TimeUnit.SECONDS);\n        } finally {\n            environment.finished(Description.EMPTY);\n        }\n    }\n']",Consumer;with;Waiting;Exception;Until;Description;STDOUT;Timeout;with;frame,9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.512725830078125, -5.038293361663818, -5.457784652709961, -6.508669853210449, -5.480195045471191, -0.020653774961829185]",0.9795581698417664
1,"['    @Test\n    public void simpleDockerfileWorks() {\n        ImageFromDockerfile image = new ImageFromDockerfile()\n                .withFileFromString(""folder/someFile.txt"", ""hello"")\n                .withFileFromClasspath(""test.txt"", ""mappable-resource/test-resource.txt"")\n                .withFileFromClasspath(""Dockerfile"", ""mappable-dockerfile/Dockerfile"");\n\n        verifyImage(image);\n    }\n']",new;dockerfile;Works;ockerfile;ockerfile;resource;resource;File;appable;with,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.3655745685100555e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.487425804138184, -5.030230522155762, -5.4759087562561035, -6.507262229919434, -5.4653730392456055, -0.020800430327653885]",0.9794144034385681
1,"['    @Test\n    public void customizableImage() {\n        ImageFromDockerfile image = new ImageFromDockerfile() {\n            @Override\n            protected void configure(BuildImageCmd buildImageCmd) {\n                super.configure(buildImageCmd);\n\n                List<String> dockerfile = Arrays.asList(\n                        ""FROM alpine:3.2"",\n                        ""RUN echo \'hello from Docker build process\'"",\n                        ""CMD yes""\n                );\n                withFileFromString(""Dockerfile"", String.join(""\\n"", dockerfile));\n\n                buildImageCmd.withNoCache(true);\n            }\n        };\n\n        verifyImage(image);\n    }\n']",Image;protected;Image;image;From;hello;Image;ockerfile;ockerfile;echo,1.862645149230957e-09;1.1641532182693481e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.492794036865234, -5.063292980194092, -5.409076690673828, -6.422049522399902, -5.45380973815918, -0.02104196697473526]",0.9791778922080994
1,"['    @Test\n    public void dockerfileBuilderWorks() {\n        ImageFromDockerfile image = new ImageFromDockerfile()\n                .withFileFromClasspath(""test.txt"", ""mappable-resource/test-resource.txt"")\n                .withFileFromString(""folder/someFile.txt"", ""hello"")\n                .withDockerfileFromBuilder(builder -> builder\n                        .from(""alpine:3.2"")\n                        .workDir(""/app"")\n                        .add(""test.txt"", ""test file.txt"")\n                        .run(""ls"", ""-la"", ""/app/test file.txt"")\n                        .copy(""folder/someFile.txt"", ""/someFile.txt"")\n                        .expose(80, 8080)\n                        .cmd(""while true; do cat /someFile.txt | nc -l -p 80; done"")\n                );\n\n        verifyImage(image);\n    }\n']",dockerfile;true;Builder;hello;image;txt;Image;some;folder;alpine,1.57160684466362e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.499420642852783, -4.975071430206299, -5.397610187530518, -6.421438217163086, -5.4772467613220215, -0.021562552079558372]",0.9786682724952698
1,"['    @Test\n    public void filePermissions() throws TimeoutException {\n\n        WaitingConsumer consumer = new WaitingConsumer();\n\n        ImageFromDockerfile image = new ImageFromDockerfile()\n                .withFileFromTransferable(""/someFile.txt"", new Transferable() {\n                    @Override\n                    public long getSize() {\n                        return 0;\n                    }\n']",Permissions;Waiting;long;Consumer;txt;image;From;File;return;Transferable,1.979060471057892e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;4.94765117764473e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.51471471786499, -4.988206386566162, -5.401916980743408, -6.447516918182373, -5.494746685028076, -0.021270260214805603]",0.9789543747901917
1,"['//    @Test\n//    public void simpleRedisTest() {\n//        String ipAddress = redis.getContainerIpAddress();\n//        Integer port = redis.getMappedPort(REDIS_PORT);\n//\n//        // Use Redisson to obtain a List that is backed by Redis\n//        Config redisConfig = new Config();\n//        redisConfig.useSingleServer().setAddress(ipAddress + "":"" + port);\n//\n//        Redisson redisson = Redisson.create(redisConfig);\n//\n//        List<String> testList = redisson.getList(""test"");\n//        testList.add(""foo"");\n//        testList.add(""bar"");\n//        testList.add(""baz"");\n//\n//        List<String> testList2 = redisson.getList(""test"");\n//        assertEquals(""The list contains the expected number of items (redis is working!)"", 3, testList2.size());\n//        assertTrue(""The list contains an item that was put in (redis is working!)"", testList2.contains(""foo""));\n//        assertTrue(""The list contains an item that was put in (redis is working!)"", testList2.contains(""bar""));\n//        assertTrue(""The list contains an item that was put in (redis is working!)"", testList2.contains(""baz""));\n//    }\n']",redisson;Redisson;was;expected;redisson;that;Container;foo;Config;contains,7.421476766467094e-10;6.257323548197746e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.47677755355835, -5.059863090515137, -5.439089298248291, -6.446241855621338, -5.429617881774902, -0.021064262837171555]",0.9791561365127563
1,"['    @Test\n    public void testIsRunning() {\n        try (GenericContainer container = new GenericContainer().withCommand(""top"")) {\n            assertFalse(""Container is not started and not running"", container.isRunning());\n            container.start();\n            assertTrue(""Container is started and running"", container.isRunning());\n        }\n    }\n']",with;Running;Generic;running;container;started;False;container;running;and,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;3.92901711165905e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;-5.820766091346741e-11,5,5,"[-5.528049945831299, -5.021461486816406, -5.453926086425781, -6.483501434326172, -5.468159198760986, -0.02081046998500824]",0.9794044494628906
1,"['    @Test\n    public void simpleRabbitMqTest() throws IOException, TimeoutException {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(rabbitMq.getContainerIpAddress());\n        factory.setPort(rabbitMq.getMappedPort(RABBITMQ_PORT));\n        Connection connection = factory.newConnection();\n\n        Channel channel = connection.createChannel();\n        channel.exchangeDeclare(RABBIQMQ_TEST_EXCHANGE, ""direct"", true);\n        String queueName = channel.queueDeclare().getQueue();\n        channel.queueBind(queueName, RABBIQMQ_TEST_EXCHANGE, RABBITMQ_TEST_ROUTING_KEY);\n\n        // Set up a consumer on the queue\n        final boolean[] messageWasReceived = new boolean[1];\n        channel.basicConsume(queueName, false, new DefaultConsumer(channel) {\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                messageWasReceived[0] = Arrays.equals(body, RABBITMQ_TEST_MESSAGE.getBytes());\n            }\n']",simple;ESSAGE;ABBITMQ;exchange;envelope;abbit;new;equals;Connection;apped,2.3283064365386963e-09;2.3283064365386963e-09;2.240994945168495e-09;1.3387762010097504e-09;1.280568540096283e-09;1.280568540096283e-09;1.0477378964424133e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10,5,5,"[-5.495842933654785, -4.987845420837402, -5.383105754852295, -6.433567047119141, -5.46425724029541, -0.021591251716017723]",0.9786401987075806
1,"['    @Test\n    public void simpleMongoDbTest() {\n        MongoClient mongoClient = new MongoClient(mongo.getContainerIpAddress(), mongo.getMappedPort(MONGO_PORT));\n        MongoDatabase database = mongoClient.getDatabase(""test"");\n        MongoCollection<Document> collection = database.getCollection(""testCollection"");\n\n        Document doc = new Document(""name"", ""foo"")\n                .append(""value"", 1);\n        collection.insertOne(doc);\n\n        Document doc2 = collection.find(new Document(""name"", ""foo"")).first();\n        assertEquals(""A record can be inserted into and retrieved from MongoDB"", 1, doc2.get(""value""));\n    }\n']",ongo;Database;ongo;Client;first;apped;Document;Mongo;Client;inserted,6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.4850172996521, -5.048431873321533, -5.470430374145508, -6.510852813720703, -5.445496082305908, -0.02079494297504425]",0.9794197678565979
1,"['    @Test\n    public void environmentAndCustomCommandTest() throws IOException {\n        String line = getReaderForContainerPort80(alpineEnvVar).readLine();\n\n        assertEquals(""An environment variable can be passed into a command"", ""42"", line);\n    }\n']",environment;read;Port;Reader;Custom;Equals;Line;get;For;be,1.6298145055770874e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.541470527648926, -4.918190002441406, -5.377122402191162, -6.498738765716553, -5.477449417114258, -0.021774979308247566]",0.9784604907035828
1,"['    @Test\n    public void environmentFromMapTest() throws IOException {\n        String line = getReaderForContainerPort80(alpineEnvVarFromMap).readLine();\n\n        assertEquals(""Environment variables can be passed into a command from a map"", ""42 and 50"", line);\n    }\n']",Equals;Environment;environment;Reader;IOException;variables;read;From;From;Map,1.0477378964424133e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.537835121154785, -4.9267473220825195, -5.376833438873291, -6.482105731964111, -5.470180511474609, -0.02178407646715641]",0.9784513711929321
1,"['    @Test\n    public void customLabelTest() {\n        try (final GenericContainer alpineCustomLabel = new GenericContainer(""alpine:3.2"")\n            .withLabel(""our.custom"", ""label"")\n            .withCommand(""top"")) {\n\n            alpineCustomLabel.start();\n\n            Map<String, String> labels = alpineCustomLabel.getCurrentContainerInfo().getConfig().getLabels();\n            assertTrue(""org.testcontainers label is present"", labels.containsKey(""org.testcontainers""));\n            assertTrue(""our.custom label is present"", labels.containsKey(""our.custom""));\n            assertEquals(""our.custom label value is label"", labels.get(""our.custom""), ""label"");\n        }\n    }\n']",Container;containers;label;Generic;new;top;Custom;Container;Labels;alpine,1.6298145055770874e-09;1.4260876923799515e-09;1.1641532182693481e-09;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.494629383087158, -5.05730676651001, -5.464694499969482, -6.492926120758057, -5.448333263397217, -0.020736096426844597]",0.9794772863388062
1,"['    @Test\n    public void exceptionThrownWhenTryingToOverrideTestcontainersLabels() {\n        assertThrows(""When trying to overwrite an \'org.testcontainers\' label, withLabel() throws an exception"",\n            IllegalArgumentException.class,\n            () -> {\n                new GenericContainer(""alpine:3.2"")\n                    .withLabel(""org.testcontainers.foo"", ""false"");\n            }\n        );\n    }\n']",foo;containers;org;label;Throws;trying;Thrown;containers;Label;to,8.731149137020111e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.488006591796875, -5.027755260467529, -5.472751140594482, -6.502017021179199, -5.439697265625, -0.020948464050889015]",0.9792695641517639
1,"['    @Test\n    public void customClasspathResourceMappingTest() throws IOException {\n        // Note: This functionality doesn\'t work if you are running your build inside a Docker container;\n        // in that case this test will fail.\n        String line = getReaderForContainerPort80(alpineClasspathResource).readLine();\n\n        assertEquals(""Resource on the classpath can be mapped using calls to withClasspathResourceMapping"", ""FOOBAR"", line);\n    }\n']",Resource;mapped;Reader;read;Port;functionality;build;apping;line;case,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.5363969802856445, -4.980610370635986, -5.428167343139648, -6.507684230804443, -5.466907978057861, -0.021139897406101227]",0.9790821075439453
1,"['    @Test\n    public void customClasspathResourceMappingWithSelinuxTest() throws IOException {\n        String line = getReaderForContainerPort80(alpineClasspathResourceSelinux).readLine();\n        assertEquals(""Resource on the classpath can be mapped using calls to withClasspathResourceMappingSelinux"", ""FOOBAR"", line);\n    }\n']",elinux;elinux;read;Resource;elinux;Classpath;the;apping;with;Resource,2.0081643015146255e-09;1.6298145055770874e-09;1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-5.511883735656738, -4.970734119415283, -5.3674163818359375, -6.463447093963623, -5.445664405822754, -0.021751882508397102]",0.9784828424453735
1,"['    @Test\n    public void exceptionThrownWhenMappedPortNotFound() throws IOException {\n        assertThrows(""When the requested port is not mapped, getMappedPort() throws an exception"",\n                IllegalArgumentException.class,\n                () -> {\n                    return redis.getMappedPort(666);\n                });\n    }\n']",apped;apped;mapped;When;When;apped;get;Not;Argument;return,7.8580342233181e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.453986167907715, -5.066300868988037, -5.404886722564697, -6.423212051391602, -5.389230251312256, -0.021497799083590508]",0.978731632232666
1,"['    @Test @Ignore //TODO investigate intermittent failures\n    public void failFastWhenContainerHaltsImmediately() throws Exception {\n\n        long startingTimeMs = System.currentTimeMillis();\n        final GenericContainer failsImmediately = new GenericContainer(""alpine:3.2"")\n              .withCommand(""/bin/sh"", ""-c"", ""return false"")\n              .withMinimumRunningDuration(Duration.ofMillis(100));\n\n        try {\n            assertThrows(\n                  ""When we start a container that halts immediately, an exception is thrown"",\n                  RetryCountExceededException.class,\n                  () -> {\n                      failsImmediately.start();\n                      return null;\n                  });\n\n            // Check how long it took, to verify that we ARE bailing out early.\n            // Want to strike a balance here; too short and this test will fail intermittently\n            // on slow systems and/or due to GC variation, too long and we won\'t properly test\n            // what we\'re intending to test.\n            int allowedSecondsToFailure =\n                GenericContainer.CONTAINER_RUNNING_TIMEOUT_SEC / 2;\n            long completedTimeMs = System.currentTimeMillis();\n            assertTrue(""container should not take long to start up"",\n                  completedTimeMs - startingTimeMs < 1000L * allowedSecondsToFailure);\n        } finally {\n            failsImmediately.stop();\n        }\n    }\n']",failures;Ignore;Generic;Failure;Minimum;with;intending;and;Duration;System,3.1141098588705063e-09;2.7939677238464355e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.526981353759766, -4.927296161651611, -5.364997863769531, -6.459635257720947, -5.534906387329102, -0.021646197885274887]",0.9785864949226379
1,"['    @Test\n    public void testExecInContainer() throws Exception {\n\n        // The older ""lxc"" execution driver doesn\'t support ""exec"". At the time of writing (2016/03/29),\n        // that\'s the case for CircleCI.\n        // Once they resolve the issue, this clause can be removed.\n        Assume.assumeTrue(TestEnvironment.dockerExecutionDriverSupportsExec());\n\n        final GenericContainer.ExecResult result = redis.execInContainer(""redis-cli"", ""role"");\n        assertTrue(""Output for \\""redis-cli role\\"" command should start with \\""master\\"""", result.getStdout().startsWith(""master""));\n        assertEquals(""Stderr for \\""redis-cli role\\"" command should be empty"", """", result.getStderr());\n        // We expect to reach this point for modern Docker versions.\n    }\n']",Container;Exception;Circle;final;exec;Exec;Container;cli;In;point,6.984919309616089e-10;6.83940015733242e-10;6.402842700481415e-10;4.94765117764473e-10;4.94765117764473e-10;4.0745362639427185e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.562201023101807, -4.983343124389648, -5.429603099822998, -6.485612392425537, -5.488182544708252, -0.020954769104719162]",0.9792631268501282
1,"['    @Test\n    public void extraHostTest() throws IOException {\n        BufferedReader br = getReaderForContainerPort80(alpineExtrahost);\n\n        // read hosts file from container\n        StringBuffer hosts = new StringBuffer();\n        String line = br.readLine();\n        while (line != null) {\n            hosts.append(line);\n            hosts.append(""\\n"");\n            line = br.readLine();\n        }\n\n        Matcher matcher = Pattern.compile(""^192.168.1.10\\\\s.*somehost"", Pattern.MULTILINE).matcher(hosts.toString());\n        assertTrue(""The hosts file of container contains extra host"", matcher.find());\n    }\n']",matcher;read;IOException;find;hosts;append;Line;new;br;Port,3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.837623469531536e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.491052150726318, -5.0422539710998535, -5.4404706954956055, -6.483171463012695, -5.470620155334473, -0.020873982459306717]",0.9793422818183899
1,"['    @Test\n    public void createContainerCmdHookTest() {\n        // Use random name to avoid the conflicts between the tests\n        String randomName = Base58.randomString(5);\n        try(\n                GenericContainer container = new GenericContainer<>(""redis:3.0.2"")\n                        .withCommand(""redis-server"", ""--help"")\n                        .withCreateContainerCmdModifier(cmd -> cmd.withName(""overrideMe""))\n                        // Preserves the order\n                        .withCreateContainerCmdModifier(cmd -> cmd.withName(randomName))\n                        // Allows to override pre-configured values by GenericContainer\n                        .withCreateContainerCmdModifier(cmd -> cmd.withCmd(""redis-server"", ""--port"", ""6379""))\n        ) {\n            container.start();\n\n            assertEquals(""Name is configured"", ""/"" + randomName, container.getContainerInfo().getName());\n            assertEquals(""Command is configured"", ""[redis-server, --port, 6379]"", Arrays.toString(container.getContainerInfo().getConfig().getCmd()));\n        }\n    }\n']",ook;configured;Container;new;Cmd;conflicts;random;Use;Generic;red,2.2118911147117615e-09;1.57160684466362e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.48884916305542, -5.053202152252197, -5.417984962463379, -6.447754383087158, -5.458600997924805, -0.021020488813519478]",0.9791988730430603
1,"['    @Test\n    public void copyToContainerTest() throws Exception {\n        final File tempResultFolder = Files.createTempDir();\n\n        try (final GenericContainer alpineCopyToContainer = new GenericContainer(""alpine:3.2"")\n                    .withCommand(""top"")){\n\n            alpineCopyToContainer.start();\n            final MountableFile mountableFile = MountableFile.forClasspathResource(""test_copy_to_container.txt"");\n            alpineCopyToContainer.copyFileToContainer(mountableFile, ""/home/"");\n            alpineCopyToContainer.copyFileFromContainer(""/home/test_copy_to_container.txt"",\n                    tempResultFolder.getAbsolutePath() + ""/test_copy_to_container.txt"");\n\n            File expectedFile = new File(mountableFile.getResolvedPath());\n            File actualFile = new File(tempResultFolder.getAbsolutePath() + ""/test_copy_to_container.txt"");\n            assertTrue(""Files aren\'t same "", FileUtils.contentEquals(expectedFile,actualFile));\n        }\n    }\n']",Resolved;File;alpine;Container;get;actual;expected;File;new;Resource,8.032657206058502e-09;3.259629011154175e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09,5,5,"[-5.4489665031433105, -5.052189350128174, -5.398007392883301, -6.408548831939697, -5.409996509552002, -0.021571768447756767]",0.9786592125892639
1,"['    @Test(expected = NotFoundException.class)\n    public void copyFromContainerShouldFailBecauseNoFileTest() throws NotFoundException, IOException, InterruptedException {\n\n        try (final GenericContainer alpineCopyToContainer = new GenericContainer(""alpine:3.2"")\n                        .withCommand(""top"")) {\n            alpineCopyToContainer.start();\n            alpineCopyToContainer.copyFileFromContainer(""/home/test.txt"", ""src/test/resources/copy-from/test.txt"");\n        }\n    }\n']",Exception;Generic;Not;expected;Fail;start;Should;Found;Container;new,1.979060471057892e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.500862121582031, -4.998103141784668, -5.431724548339844, -6.48768424987793, -5.462358474731445, -0.021198369562625885]",0.9790248274803162
1,"['    @Test\n    public void shouldCopyFileFromContainerTest() throws IOException, InterruptedException {\n        final File tempResultFolder = Files.createTempDir();\n\n        try (final GenericContainer alpineCopyToContainer = new GenericContainer(""alpine:3.2"")\n                .withCommand(""top"")) {\n\n            alpineCopyToContainer.start();\n            final MountableFile mountableFile = MountableFile.forClasspathResource(""test_copy_to_container.txt"");\n            alpineCopyToContainer.copyFileToContainer(mountableFile, ""/home/"");\n            alpineCopyToContainer.copyFileFromContainer(""/home/test_copy_to_container.txt"",\n                    tempResultFolder.getAbsolutePath() + ""/test_copy_from_container.txt"");\n\n            File expectedFile = new File(mountableFile.getResolvedPath());\n            File actualFile = new File(tempResultFolder.getAbsolutePath() + ""/test_copy_from_container.txt"");\n            assertTrue(""Files aren\'t same "", FileUtils.contentEquals(expectedFile,actualFile));\n        }\n    }\n']",Equals;expected;create;Dir;alpine;Generic;Mountable;Result;Folder;IOException,4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.471202850341797, -5.058900833129883, -5.44584846496582, -6.478329658508301, -5.441891670227051, -0.020958738401532173]",0.9792594909667969
1,"['    @Test\n    public void addExposedPortAfterWithExposedPortsTest() {\n        redis.addExposedPort(8987);\n        assertThat(""Both ports should be exposed"", redis.getExposedPorts().size(), equalTo(2));\n        assertTrue(""withExposedPort should be exposed"", redis.getExposedPorts().contains(REDIS_PORT));\n        assertTrue(""addExposedPort should be exposed"", redis.getExposedPorts().contains(8987));\n    }\n']",orts;Exposed;contains;That;size;Port;Exposed;Exposed;exposed;should,1.0477378964424133e-09;5.602487362921238e-10;5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.5400800704956055, -5.050041198730469, -5.46219539642334, -6.479198455810547, -5.435934066772461, -0.0206841342151165]",0.9795283079147339
1,"['    @Test\n    public void simpleDslTest() throws IOException {\n        String address = String.format(""http://%s:%s"", dslContainer.getContainerIpAddress(), dslContainer.getMappedPort(80));\n\n        CloseableHttpClient httpClient = HttpClientBuilder.create().build();\n        HttpGet get = new HttpGet(address);\n\n        try (CloseableHttpResponse response = httpClient.execute(get)) {\n            assertEquals(""A container built from a dockerfile can run nginx as expected, and returns a good status code"",\n                            200,\n                            response.getStatusLine().getStatusCode());\n            assertTrue(""A container built from a dockerfile can run nginx as expected, and returns an expected Server header"",\n                            response.getHeaders(""Server"")[0].getValue().contains(""nginx""));\n        }\n    }\n']",simple;Server;response;ginx;sl;sl;ttp;get;built;dockerfile,9.89530235528946e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10,5,5,"[-5.464303493499756, -4.990913391113281, -5.402522563934326, -6.451416969299316, -5.467921257019043, -0.021569201722741127]",0.9786617755889893
1,"['    @Test\n    public void simpleTest() throws Exception {\n        final String release = container.execInContainer(""cat"", ""/etc/alpine-release"").getStdout();\n\n        assertTrue(""/etc/alpine-release starts with "" + expectedVersion,\n                release.startsWith(expectedVersion));\n    }\n']",Container;expected;In;starts;alpine;exec;etc;out;simple;St,1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.524087429046631, -4.9667067527771, -5.415990352630615, -6.487885475158691, -5.4791059494018555, -0.021321140229701996]",0.978904664516449
1,"['    @Test\n    public void simpleTest() {\n\n        DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/invalid-compose.yml""))\n                    .withExposedService(""something"", 123);\n\n        VisibleAssertions.assertThrows(""starting with an invalid docker-compose file throws an exception"",\n                ContainerLaunchException.class,\n                () -> {\n                    environment.starting(Description.createTestDescription(Object.class, ""name""));\n                });\n    }\n']",environment;Compose;class;Docker;environment;Exposed;Compose;new;file;compose,9.313225746154785e-10;8.731149137020111e-10;8.731149137020111e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;4.94765117764473e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.492544174194336, -5.063207626342773, -5.46604585647583, -6.493039608001709, -5.434535980224609, -0.02076166681945324]",0.9794522523880005
1,"['    @Test\n    public void testWaitUntilReadyWithSuccess() {\n        waitUntilReadyAndSucceed(createShellCommand(""200 OK"", GOOD_RESPONSE_BODY));\n    }\n']",GOOD;Ready;ucceed;Until;Success;Command;wait;Ready;RES;ONSE,3.958120942115784e-09;3.4924596548080444e-09;2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.1641532182693481e-09;4.656612873077393e-10;0.0;-2.3283064365386963e-10;-6.984919309616089e-10,5,5,"[-5.574392318725586, -4.852677822113037, -5.380384922027588, -6.4973978996276855, -5.499145030975342, -0.02204601652920246]",0.9781951308250427
1,"['    @Test\n    public void testWaitUntilReadyWithUnauthorizedWithLambda() {\n        waitUntilReadyAndSucceed(startContainerWithCommand(createShellCommand(""401 UNAUTHORIZED"", GOOD_RESPONSE_BODY),\n            createHttpWaitStrategy(ready)\n                .forStatusCodeMatching(it -> it >= 200 && it < 300 || it == 401)\n        ));\n    }\n']",Until;wait;ucceed;Ready;ready;Wait;ONSE;Shell;atching;RES,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10,5,5,"[-5.52164888381958, -4.972929954528809, -5.409803867340088, -6.492031097412109, -5.4690260887146, -0.021351713687181473]",0.9788746237754822
1,"['    @Test\n    public void testWaitUntilReadyWithManyStatusCodes() {\n        waitUntilReadyAndSucceed(startContainerWithCommand(createShellCommand(""401 UNAUTHORIZED"", GOOD_RESPONSE_BODY),\n            createHttpWaitStrategy(ready)\n                .forStatusCode(300)\n                .forStatusCode(401)\n                .forStatusCode(500)\n        ));\n    }\n']",ucceed;Shell;Command;ODY;NAUTHORIZED;Many;GOOD;wait;Strategy;Code,1.367880031466484e-09;1.1641532182693481e-09;6.548361852765083e-10;6.402842700481415e-10;6.111804395914078e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;2.6193447411060333e-10,5,5,"[-5.501179218292236, -5.016426086425781, -5.437207221984863, -6.483339309692383, -5.462480068206787, -0.02105352282524109]",0.979166567325592
1,"['    @Test\n    public void testWaitUntilReadyWithManyStatusCodesAndLambda() {\n        waitUntilReadyAndSucceed(startContainerWithCommand(createShellCommand(""401 UNAUTHORIZED"", GOOD_RESPONSE_BODY),\n            createHttpWaitStrategy(ready)\n                .forStatusCode(300)\n                .forStatusCode(500)\n                .forStatusCodeMatching(it -> it == 401)\n        ));\n    }\n']",Strategy;Container;ONSE;Ready;Code;NAUTHORIZED;Status;Http;ucceed;Status,1.2514647096395493e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;6.111804395914078e-10;5.893525667488575e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10,5,5,"[-5.507708549499512, -5.013339519500732, -5.434811115264893, -6.486102104187012, -5.461110591888428, -0.021059593185782433]",0.9791606068611145
1,"['    @Test\n    public void testWaitUntilReadyWithTimeoutAndWithManyStatusCodesAndLambda() {\n        waitUntilReadyAndTimeout(startContainerWithCommand(createShellCommand(""401 UNAUTHORIZED"", GOOD_RESPONSE_BODY),\n            createHttpWaitStrategy(ready)\n                .forStatusCode(300)\n                .forStatusCodeMatching(it -> it == 500)\n        ));\n    }\n']",NAUTHORIZED;Strategy;Container;create;GOOD;Timeout;it;Wait;create;Command,2.0372681319713593e-09;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.531003475189209, -4.991308212280273, -5.426775932312012, -6.487760543823242, -5.481095790863037, -0.021062977612018585]",0.9791572690010071
1,"['    @Test\n    public void testWaitUntilReadyWithTimeout() {\n        waitUntilReadyAndTimeout(createShellCommand(""400 Bad Request"", GOOD_RESPONSE_BODY));\n    }\n']",wait;ODY;Timeout;Shell;Ready;Bad;Wait;create;Until;Until,1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;0.0;0.0,5,5,"[-5.58343505859375, -4.841547966003418, -5.386688709259033, -6.505853176116943, -5.5092644691467285, -0.022015931084752083]",0.9782246351242065
1,"['    @Test\n    public void testWaitUntilReadyWithTimeoutAndBadResponseBody() {\n        waitUntilReadyAndTimeout(createShellCommand(""200 OK"", ""Bad Response""));\n    }\n']",Shell;Wait;Ready;Until;wait;Bad;Timeout;Command;Response;OK,1.6880221664905548e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;-5.820766091346741e-11,5,5,"[-5.578662872314453, -4.853273391723633, -5.385939121246338, -6.50252103805542, -5.499814510345459, -0.021988175809383392]",0.9782519340515137
1,"['    @Test\n    public void testWaitUntilReadyWithSpecificPort() {\n        waitUntilReadyAndSucceed(startContainerWithCommand(\n            createShellCommand(""200 OK"", GOOD_RESPONSE_BODY, 9090),\n            createHttpWaitStrategy(ready)\n                .forPort(9090),\n            7070, 8080, 9090\n        ));\n    }\n']",ODY;Strategy;ONSE;Shell;Port;Wait;start;Ready;wait;RES,9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.497247219085693, -5.022875785827637, -5.427114963531494, -6.463790416717529, -5.462917804718018, -0.021100562065839767]",0.9791206121444702
1,"['    @Test\n    public void testWaitUntilReady_Success() {\n        waitUntilReadyAndSucceed(""echo -e \\"""" + READY_MESSAGE + ""\\"";"" +\n                ""echo -e \\""foobar\\"";"" +\n                ""echo -e \\"""" + READY_MESSAGE + ""\\"";"" +\n                ""sleep 300"");\n    }\n']",ucceed;foobar;Ready;Wait;READ;wait;ESSAGE;Until;sleep;echo,2.0372681319713593e-09;1.6298145055770874e-09;1.1059455573558807e-09;6.402842700481415e-10;4.656612873077393e-10;1.1641532182693481e-10;-4.3655745685100555e-11;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.504880428314209, -4.985035419464111, -5.433878421783447, -6.483470439910889, -5.463402271270752, -0.021264657378196716]",0.978959858417511
1,"['    @Test\n    public void testWaitUntilReady_Timeout() {\n        waitUntilReadyAndTimeout(""echo -e \\"""" + READY_MESSAGE + ""\\"";"" +\n                ""echo -e \\""foobar\\"";"" +\n                ""sleep 300"");\n    }\n']",Timeout;sleep;Until;Ready;echo;wait;Ready;echo;Timeout;ESSAGE,1.57160684466362e-09;1.3969838619232178e-09;1.2514647096395493e-09;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.9103830456733704e-10;-3.4924596548080444e-10,5,5,"[-5.532909870147705, -4.953747272491455, -5.372334003448486, -6.439110279083252, -5.47194766998291, -0.02168901078402996]",0.9785445332527161
1,"['    @Test\n    public void testWaiting() {\n        pass(""Container starts after waiting"");\n    }\n']",after;starts;Container;Waiting;waiting;pass,1.2223608791828156e-09;1.0477378964424133e-09;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.587120532989502, -4.873678207397461, -5.404818534851074, -6.525993824005127, -5.4998321533203125, -0.021671278402209282]",0.9785618782043457
1,"['    @Test\n    public void multilineTest() throws Exception {\n        ImmutableMap<String, String> pairs = ImmutableMap.<String, String>builder()\n                .put(""line1"", ""1"")\n                .put(""line2"", ""2"")\n                .put(""line3"", ""3"")\n                .build();\n\n        assertStatement(new KeyValuesStatement(""TEST"", pairs));\n    }\n']",multiline;EST;Exception;Immutable;Immutable;line;build;put;builder;pairs,1.3387762010097504e-09;9.313225746154785e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.527026176452637, -4.992648601531982, -5.433248996734619, -6.479944705963135, -5.491448879241943, -0.021009165793657303]",0.9792098999023438
1,"['    @Test\n    public void keyWithSpacesTest() throws Exception {\n        assertStatement(new KeyValuesStatement(""TEST"", Collections.singletonMap(""key with spaces"", ""1"")));\n    }\n']",Statement;Map;Exception;new;singleton;with;Values;key;Key;Spaces,1.862645149230957e-09;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.0745362639427185e-10;-4.656612873077393e-10,5,5,"[-5.59528923034668, -4.904576778411865, -5.424446105957031, -6.508453369140625, -5.508368968963623, -0.021304218098521233]",0.978921115398407
1,"['    @Test\n    public void keyWithNewLinesTest() throws Exception {\n        assertStatement(new KeyValuesStatement(""TEST"", Collections.singletonMap(""key\\nwith\\nnewlines"", ""1"")));\n    }\n']",Values;EST;ines;new;Map;Key;Exception;with;Statement;New,1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11,5,5,"[-5.595398426055908, -4.9026641845703125, -5.428289413452148, -6.512918949127197, -5.504935264587402, -0.0213085375726223]",0.9789168834686279
1,"['    @Test\n    public void keyWithTabsTest() throws Exception {\n        assertStatement(new KeyValuesStatement(""TEST"", Collections.singletonMap(""key\\twith\\ttab"", ""1"")));\n    }\n']",Key;Statement;new;EST;Exception;Map;Values;singleton;ttab;Collections,1.5133991837501526e-09;1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;0.0,5,5,"[-5.581474781036377, -4.920254707336426, -5.433811187744141, -6.520498752593994, -5.494599342346191, -0.021236415952444077]",0.9789875149726868
1,"['    @Test\n    public void valueIsEscapedTest() throws Exception {\n        ImmutableMap<String, String> pairs = ImmutableMap.<String, String>builder()\n                .put(""1"", ""value with spaces"")\n                .put(""2"", ""value\\nwith\\nnewlines"")\n                .put(""3"", ""value\\twith\\ttab"")\n                .build();\n\n        assertStatement(new KeyValuesStatement(""TEST"", pairs));\n    }\n']",EST;Exception;value;build;spaces;put;Immutable;new;Statement;put,1.1932570487260818e-09;9.313225746154785e-10;8.149072527885437e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.525008201599121, -5.004205226898193, -5.445703506469727, -6.479503631591797, -5.484878063201904, -0.020910991355776787]",0.9793060421943665
1,"['    @Test\n    public void simpleTest() throws Exception {\n        assertStatement(new MultiArgsStatement(""TEST"", ""a"", ""b"", ""c""));\n    }\n']",EST;Multi;simple;new;Args;Exception;Statement;Statement,2.7939677238464355e-09;2.561137080192566e-09;1.862645149230957e-09;-4.656612873077393e-10;-1.3969838619232178e-09;-1.6298145055770874e-09;-2.3283064365386963e-09;-3.259629011154175e-09,5,5,"[-5.558463096618652, -5.048369884490967, -5.420531272888184, -6.488028526306152, -5.460166931152344, -0.02068611979484558]",0.9795263409614563
1,['  @Test\n    public int compareTo(Version o) {\n      return toString().compareTo(o.toString());\n    }\n'],compare;Version;to;return;compare;to,0.0;0.0;0.0;-3.4924596548080444e-10;-3.4924596548080444e-10;-1.3969838619232178e-09,5,5,"[-5.562689781188965, -4.938422679901123, -5.411893367767334, -6.508476734161377, -5.5030999183654785, -0.021256722509860992]",0.9789676070213318
1,"['@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n    public void complete(int status) {\n      complete(() -> status, null);\n    }\n']",CLASS;complete;status;Instance;ifecycle;PER;status;null;complete;Instance,2.7939677238464355e-09;1.862645149230957e-09;6.984919309616089e-10;4.656612873077393e-10;0.0;0.0;0.0;-1.1641532182693481e-09;-1.5133991837501526e-09;-3.259629011154175e-09,5,5,"[-5.593465805053711, -4.927320957183838, -5.438089847564697, -6.605201721191406, -5.389686107635498, -0.021461280062794685]",0.9787675142288208
1,"['  @Test\n  public void testSimple() {\n    PortAllocator portAllocator = getPortAllocator((port) -> true);\n    int next = PortAllocator.RANGE_MIN + 1;\n    for (int i = 0; i < 1000; i++) {\n      Assertions.assertEquals(next, portAllocator.getPort());\n      next++;\n      if (next % PortAllocator.CHUNK_SIZE == 0) {\n        next++;\n      }\n    }\n    Assertions.assertEquals(next, portAllocator.getPorts(10));\n    Assertions.assertEquals(12101, portAllocator.getPorts(PortAllocator.CHUNK_SIZE - 1));\n    assertThatThrownBy(() -> portAllocator.getPorts(PortAllocator.CHUNK_SIZE + 1))\n        .isInstanceOf(IllegalStateException.class);\n  }\n']",Simple;next;SIZE;MIN;Allocator;Allocator;CHUN;Thrown;ANGE;orts,1.1641532182693481e-09;6.693881005048752e-10;4.94765117764473e-10;4.656612873077393e-10;4.2928149923682213e-10;3.310560714453459e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.482143878936768, -4.989059925079346, -5.394540309906006, -6.474094867706299, -5.477794647216797, -0.021463964134454727]",0.9787647724151611
1,"['  @Test\n  public void testEven() {\n    PortAllocator portAllocator = getPortAllocator((port) -> port % 2 == 0);\n    int next = PortAllocator.RANGE_MIN + 2;\n    for (int i = 0; i < 1000; i++) {\n      Assertions.assertEquals(next, portAllocator.getPort());\n      next += 2;\n      if (next % PortAllocator.CHUNK_SIZE == 0) {\n        next += 2;\n      }\n    }\n    assertThatThrownBy(() -> portAllocator.getPorts(2)).isInstanceOf(IllegalStateException.class);\n  }\n']",port;Allocator;Allocator;next;Port;if;next;Allocator;next;By,7.494236342608929e-10;5.966285243630409e-10;5.966285243630409e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.497320175170898, -5.0090556144714355, -5.443776607513428, -6.5112104415893555, -5.493275165557861, -0.02091636136174202]",0.979300856590271
1,"['  @Test\n  public void shouldMapNestedField() {\n\n    // given\n    AwsSdkRequest awsSdkRequest = UpdateTable;\n    MethodHandleFactory methodHandleFactory = new MethodHandleFactory();\n    Serializer serializer = mock(Serializer.class);\n    FieldMapper underTest = new FieldMapper(serializer, methodHandleFactory);\n    UpdateTableRequest sdkRequest =\n        UpdateTableRequest.builder()\n            .provisionedThroughput(\n                ProvisionedThroughput.builder()\n                    .readCapacityUnits(55L)\n                    .writeCapacityUnits(77L)\n                    .build())\n            .build();\n    given(serializer.serialize(55L)).willReturn(""55"");\n    given(serializer.serialize(77L)).willReturn(""77"");\n\n    Span span = mock(Span.class);\n    // when\n    underTest.mapToAttributes(sdkRequest, awsSdkRequest, span);\n    // then\n    verify(span).setAttribute(""aws.dynamodb.provisioned_throughput.read_capacity_units"", ""55"");\n    verify(span).setAttribute(""aws.dynamodb.provisioned_throughput.write_capacity_units"", ""77"");\n    verifyNoMoreInteractions(span);\n  }\n']",Aw;ested;mock;write;dk;Units;Throughput;Request;dk;under,2.0954757928848267e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.693881005048752e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.475594520568848, -5.084627151489258, -5.426030158996582, -6.457024574279785, -5.424811363220215, -0.020973213016986847]",0.9792451858520508
1,"['  @Test\n  public void shouldMapRequestFieldsOnly() {\n\n    // given\n    AwsSdkRequest awsSdkRequest = BatchWriteItem;\n    MethodHandleFactory methodHandleFactory = new MethodHandleFactory();\n    Serializer serializer = mock(Serializer.class);\n    FieldMapper underTest = new FieldMapper(serializer, methodHandleFactory);\n    Map<String, Collection<WriteRequest>> items = new HashMap();\n    BatchWriteItemRequest sdkRequest = BatchWriteItemRequest.builder().requestItems(items).build();\n    given(serializer.serialize(items)).willReturn(""firstTable,secondTable"");\n\n    Span span = mock(Span.class);\n    // when\n    underTest.mapToAttributes(sdkRequest, awsSdkRequest, span);\n    // then\n    verify(span).setAttribute(""aws.dynamodb.table_names"", ""firstTable,secondTable"");\n    verifyNoMoreInteractions(span);\n  }\n']",should;Map;serializer;mock;Request;atch;given;table;when;Field,1.1641532182693481e-09;1.1059455573558807e-09;9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.469245433807373, -5.042849540710449, -5.456378936767578, -6.500637054443359, -5.45883321762085, -0.02091694436967373]",0.979300320148468
1,"['  @Test\n  public void shouldMapResponseFieldsOnly() {\n\n    // given\n    AwsSdkRequest awsSdkRequest = BatchWriteItem;\n    MethodHandleFactory methodHandleFactory = new MethodHandleFactory();\n    Serializer serializer = mock(Serializer.class);\n    FieldMapper underTest = new FieldMapper(serializer, methodHandleFactory);\n    Map<String, Collection<ItemCollectionMetrics>> items = new HashMap();\n    BatchWriteItemResponse sdkResponse =\n        BatchWriteItemResponse.builder()\n            .consumedCapacity(ConsumedCapacity.builder().build())\n            .itemCollectionMetrics(items)\n            .build();\n    given(serializer.serialize(sdkResponse.consumedCapacity())).willReturn(""consumedCapacity"");\n    given(serializer.serialize(items)).willReturn(""itemCollectionMetrics"");\n\n    Span span = mock(Span.class);\n    // when\n    underTest.mapToAttributes(sdkResponse, awsSdkRequest, span);\n    // then\n    verify(span).setAttribute(""aws.dynamodb.consumed_capacity"", ""consumedCapacity"");\n    verify(span).setAttribute(""aws.dynamodb.item_collection_metrics"", ""itemCollectionMetrics"");\n    verifyNoMoreInteractions(span);\n  }\n']",Span;Only;new;More;Capacity;Method;serializer;atch;Span;will,1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.4482855796813965, -5.067263126373291, -5.431162357330322, -6.468429088592529, -5.430014133453369, -0.021137796342372894]",0.9790840148925781
1,"['  @Test\n  public void shouldSerializeSimpleString() {\n    // given\n    // when\n    String serialized = new Serializer().serialize(""simpleString"");\n    // then\n    assertThat(serialized).isEqualTo(""simpleString"");\n  }\n']",Serialize;Serializer;That;simple;Simple;qual;serialize;serialized;should;when,2.852175384759903e-09;1.0477378964424133e-09;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-6.402842700481415e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.0477378964424133e-09,5,5,"[-5.506606101989746, -4.971565246582031, -5.448264122009277, -6.514054298400879, -5.480768203735352, -0.021166974678635597]",0.9790554642677307
1,"['  @Test\n  public void shouldSerializeSdkPojo() {\n    // given\n    SdkPojo sdkPojo =\n        ProvisionedThroughput.builder().readCapacityUnits(1L).writeCapacityUnits(2L).build();\n    // when\n    String serialized = new Serializer().serialize(sdkPojo);\n    // then\n    assertThat(serialized).isEqualTo(""{\\""ReadCapacityUnits\\"":1,\\""WriteCapacityUnits\\"":2}"");\n  }\n']",Provisioned;Throughput;dk;Units;Serialize;should;dk;dk;build;Capacity,2.9103830456733704e-09;2.0954757928848267e-09;1.280568540096283e-09;1.1350493878126144e-09;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.492414951324463, -5.0312886238098145, -5.424246788024902, -6.492860317230225, -5.465630054473877, -0.02102002315223217]",0.9791994690895081
1,"['  @Test\n  public void shouldSerializeCollection() {\n    // given\n    List<String> collection = Arrays.asList(""one"", ""two"", ""three"");\n    // when\n    String serialized = new Serializer().serialize(collection);\n    // then\n    assertThat(serialized).isEqualTo(""[one,two,three]"");\n  }\n']",Serializer;collection;Serialize;as;collection;one;should;two;qual;Arrays,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.52764368057251, -5.007068634033203, -5.435337543487549, -6.491663455963135, -5.470956325531006, -0.020967142656445503]",0.9792511463165283
1,['  @Test\n  public void shouldSerializeEmptyCollectionAsNull() {\n    // given\n    List<String> collection = Collections.emptyList();\n    // when\n    String serialized = new Serializer().serialize(collection);\n    // then\n    assertThat(serialized).isNull();\n  }\n'],when;List;Serialize;empty;Null;List;given;As;Null;Collections,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.548361852765083e-10;4.3655745685100555e-10;2.9103830456733704e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0,5,5,"[-5.508790969848633, -4.988536357879639, -5.388775825500488, -6.466027736663818, -5.475729942321777, -0.021404223516583443]",0.9788232445716858
1,"['  @Test\n  public void shouldSerializeMapAsKeyCollection() {\n    // given\n    Map<String, Object> map = new HashMap<>();\n    map.put(""uno"", 1L);\n    map.put(""dos"", new LinkedHashMap<>());\n    map.put(""tres"", ""cuatro"");\n    // when\n    String serialized = new Serializer().serialize(map);\n    // then\n    assertThat(serialized).isEqualTo(""[uno,dos,tres]"");\n  }\n']",Map;map;Hash;Hash;serialized;map;Key;That;Map;put,1.0477378964424133e-09;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.505527496337891, -4.966389179229736, -5.4075188636779785, -6.497853755950928, -5.5033769607543945, -0.021320555359125137]",0.9789051413536072
1,"['  @Test\n  public void shouldAddSlashBetweenContextAndSpanName() {\n    Context contextWithEmptyPath = ServletContextPath.init(Context.root(), p -> p, """");\n    Context contextWithPath = ServletContextPath.init(Context.root(), p -> p, ""/context"");\n\n    assertThat(ServletContextPath.prepend(contextWithEmptyPath, ""spanName"")).isEqualTo(""spanName"");\n    assertThat(ServletContextPath.prepend(contextWithPath, ""spanName""))\n        .isEqualTo(""/context/spanName"");\n  }\n']",Name;Path;init;Servlet;Servlet;span;context;should;root;span,6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.467036247253418, -5.055689334869385, -5.48852014541626, -6.5347185134887695, -5.4036545753479, -0.020899783819913864]",0.9793171286582947
1,"['  @Test\n  public void shouldNotResultInDuplicateSlash() {\n    Context contextWithEmptyPath = ServletContextPath.init(Context.root(), p -> p, """");\n    Context contextWithPath = ServletContextPath.init(Context.root(), p -> p, ""/context"");\n\n    assertThat(ServletContextPath.prepend(contextWithEmptyPath, ""/spanName""))\n        .isEqualTo(""/spanName"");\n    assertThat(ServletContextPath.prepend(contextWithPath, ""/spanName""))\n        .isEqualTo(""/context/spanName"");\n  }\n']",prepend;Duplicate;Slash;In;Servlet;should;Context;span;root;qual,1.4551915228366852e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.604264050722122e-10;9.313225746154785e-10;8.149072527885437e-10;7.130438461899757e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.431173801422119, -5.100872993469238, -5.495926380157471, -6.515808582305908, -5.358199119567871, -0.02098056674003601]",0.9792378544807434
1,"['  @Test\n  public void shouldIgnoreEmptySpanName() {\n    Context contextWithEmptyPath = ServletContextPath.init(Context.root(), p -> p, """");\n    Context contextWithPath = ServletContextPath.init(Context.root(), p -> p, ""/context"");\n\n    assertThat(ServletContextPath.prepend(contextWithEmptyPath, """")).isEqualTo("""");\n    assertThat(ServletContextPath.prepend(contextWithPath, """")).isEqualTo(""/context"");\n\n    assertThat(ServletContextPath.prepend(contextWithEmptyPath, null)).isEqualTo(null);\n    assertThat(ServletContextPath.prepend(contextWithPath, null)).isEqualTo(""/context"");\n  }\n']",should;Span;init;Name;qual;context;Context;Context;Context;Empty,1.1641532182693481e-09;9.89530235528946e-10;8.731149137020111e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.473809242248535, -5.066979885101318, -5.492215156555176, -6.524583339691162, -5.3897786140441895, -0.02086125686764717]",0.979354739189148
1,['  @TestConfiguration\n    public OpenTelemetry customOpenTelemetry() {\n      return OpenTelemetry.noop();\n    }\n'],Telemetry;Telemetry;Telemetry;Open;return;noop;Open;Open;Configuration;custom,2.7939677238464355e-09;2.6775524020195007e-09;2.561137080192566e-09;3.4924596548080444e-10;2.9103830456733704e-10;-2.3283064365386963e-10;-1.0477378964424133e-09;-1.4551915228366852e-09;-1.862645149230957e-09;-2.3283064365386963e-09,5,5,"[-5.589462757110596, -4.903989315032959, -5.428231716156006, -6.540808200836182, -5.528537273406982, -0.021182730793952942]",0.9790400266647339
1,"['  @BeforeEach\n          public String[] getParameterNames(Method method) {\n            return new String[] {""discoveredName"", null, ""parameter"", ""nullAttribute"", ""notTraced""};\n          }\n']",Parameter;method;Names;parameter;Attribute;Method;null;null;return;Name,1.1641532182693481e-09;4.94765117764473e-10;4.0745362639427185e-10;1.1641532182693481e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.0745362639427185e-10;-5.238689482212067e-10;-5.238689482212067e-10,5,5,"[-5.496438980102539, -5.058539867401123, -5.39363956451416, -6.474800109863281, -5.484026908874512, -0.02091320976614952]",0.9793040752410889
1,"['  @Test\n  public void testSuccess() {\n    AggregatedHttpResponse response = client.get(getAddress(""hello/world"")).aggregate().join();\n\n    assertThat(response.status().code()).isEqualTo(200);\n    assertThat(response.contentUtf8()).isEqualTo(""hello world"");\n\n    testing.waitAndAssertTraces(\n        trace ->\n            trace.hasSpansSatisfyingExactly(\n                span -> span.hasName(""/hello/{name}"").hasKind(SpanKind.SERVER).hasNoParent(),\n                span ->\n                    span.hasName(""HelloController.hello"")\n                        .hasKind(SpanKind.INTERNAL)\n                        .hasParent(trace.getSpan(0))));\n  }\n']",span;Success;hello;span;client;wait;has;Parent;content;Kind,2.0372681319713593e-09;1.1059455573558807e-09;1.0186340659856796e-09;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;6.111804395914078e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10,5,5,"[-5.421390533447266, -5.086503028869629, -5.460721492767334, -6.467756748199463, -5.3824262619018555, -0.021224046126008034]",0.9789996147155762
1,"['  @Test\n  public void shouldUseHttpIfAwsParentNotSampled() {\n    // given\n    Map<String, String> headers =\n        ImmutableMap.of(\n            ""X-b3-traceId"",\n            ""4fd0b6131f19f39af59518d127b0cafe"",\n            ""x-b3-spanid"",\n            ""0000000000000123"",\n            ""X-B3-Sampled"",\n            ""true"");\n    environmentVariables.set(\n        ""_X_AMZN_TRACE_ID"",\n        ""Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=0000000000000456;Sampled=0"");\n\n    // when\n    Context context = ParentContextExtractor.extract(headers, INSTRUMENTER);\n    // then\n    Span span = Span.fromContext(context);\n    SpanContext spanContext = span.getSpanContext();\n    assertThat(spanContext.isValid()).isTrue();\n    assertThat(spanContext.isValid()).isTrue();\n    assertThat(spanContext.getSpanId()).isEqualTo(""0000000000000123"");\n    assertThat(spanContext.getTraceId()).isEqualTo(""4fd0b6131f19f39af59518d127b0cafe"");\n  }\n']",Http;Use;That;Not;Context;context;Sampled;afe;ws;fa,1.6298145055770874e-09;1.57160684466362e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.402842700481415e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.465517520904541, -4.941486835479736, -5.362977504730225, -6.423313617706299, -5.45845365524292, -0.022188853472471237]",0.9780555367469788
1,"['  @Test\n  public void shouldPreferAwsParentHeaderIfValidAndSampled() {\n    // given\n    Map<String, String> headers =\n        ImmutableMap.of(\n            ""X-b3-traceId"",\n            ""4fd0b6131f19f39af59518d127b0cafe"",\n            ""x-b3-spanid"",\n            ""0000000000000456"",\n            ""X-B3-Sampled"",\n            ""true"");\n    environmentVariables.set(\n        ""_X_AMZN_TRACE_ID"",\n        ""Root=1-8a3c60f7-d188f8fa79d48a391a778fa6;Parent=0000000000000456;Sampled=1"");\n\n    // when\n    Context context = ParentContextExtractor.extract(headers, INSTRUMENTER);\n    // then\n    Span span = Span.fromContext(context);\n    SpanContext spanContext = span.getSpanContext();\n    assertThat(spanContext.isValid()).isTrue();\n    assertThat(spanContext.isValid()).isTrue();\n    assertThat(spanContext.getSpanId()).isEqualTo(""0000000000000456"");\n    assertThat(spanContext.getTraceId()).isEqualTo(""8a3c60f7d188f8fa79d48a391a778fa6"");\n  }\n']",ws;headers;spanid;Map;That;Sampled;TRACE;AM;Variables;trace,1.3387762010097504e-09;7.566995918750763e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.710738383233547e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.419525623321533, -5.095126152038574, -5.434601783752441, -6.453497886657715, -5.404077053070068, -0.02121540904045105]",0.9790080785751343
1,"['  @Test\n  public void shouldExtractCaseInsensitiveHeaders() {\n    // given\n    Map<String, String> headers =\n        ImmutableMap.of(\n            ""X-b3-traceId"",\n            ""4fd0b6131f19f39af59518d127b0cafe"",\n            ""x-b3-spanid"",\n            ""0000000000000456"",\n            ""X-B3-Sampled"",\n            ""true"");\n\n    // when\n    Context context = ParentContextExtractor.extract(headers, INSTRUMENTER);\n    // then\n    Span span = Span.fromContext(context);\n    SpanContext spanContext = span.getSpanContext();\n    assertThat(spanContext.isValid()).isTrue();\n    assertThat(spanContext.isValid()).isTrue();\n    assertThat(spanContext.getSpanId()).isEqualTo(""0000000000000456"");\n    assertThat(spanContext.getTraceId()).isEqualTo(""4fd0b6131f19f39af59518d127b0cafe"");\n  }\n']",Extract;Extractor;Map;qual;span;true;Parent;context;Span;Map,9.022187441587448e-10;7.275957614183426e-10;5.820766091346741e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.446890830993652, -5.088386535644531, -5.464071750640869, -6.489153861999512, -5.423661231994629, -0.020860791206359863]",0.9793552756309509
1,"['  @Test\n  public void shouldReadHeadersFromStream() {\n    // given\n    String json =\n        ""{""\n            + ""\\""headers\\"" : {""\n            + ""\\""X-B3-TraceId\\"": \\""4fd0b6131f19f39af59518d127b0cafe\\"", \\""X-B3-SpanId\\"": \\""0000000000000456\\"", \\""X-B3-Sampled\\"": \\""true\\""""\n            + ""},""\n            + ""\\""body\\"" : \\""hello\\""""\n            + ""}"";\n    InputStream inputStream = new ByteArrayInputStream(json.getBytes(Charset.defaultCharset()));\n    // when\n    Map<String, String> headers = HeadersFactory.ofStream(inputStream);\n    // then\n    assertThat(headers).isNotNull();\n    assertThat(headers.size()).isEqualTo(3);\n    assertThat(headers)\n        .containsOnly(\n            entry(""X-B3-TraceId"", ""4fd0b6131f19f39af59518d127b0cafe""),\n            entry(""X-B3-SpanId"", ""0000000000000456""),\n            entry(""X-B3-Sampled"", ""true""));\n  }\n']",fd;entry;hello;Trace;headers;Bytes;Stream;of;Read;That,1.1641532182693481e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.427829742431641, -5.080201148986816, -5.444768905639648, -6.468351364135742, -5.443717002868652, -0.021024690940976143]",0.979194700717926
1,"['  @Test\n  public void shouldReturnNullIfNoHeadersInStream() {\n    // given\n    String json = ""{\\""something\\"" : \\""else\\""}"";\n    InputStream inputStream = new ByteArrayInputStream(json.getBytes(Charset.defaultCharset()));\n    // when\n    Map<String, String> headers = HeadersFactory.ofStream(inputStream); // then\n    assertThat(headers).isNull();\n  }\n']",json;Stream;else;given;Stream;Factory;input;Charset;That;get,8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.508633613586426, -4.976585388183594, -5.389019012451172, -6.473971366882324, -5.474353790283203, -0.02148064784705639]",0.9787483215332031
1,['  @Test\n  public void shouldCreateNoopRequestIfNoPropagatorsSet() throws IOException {\n    // given\n    InputStream mock = mock(InputStream.class);\n    GlobalOpenTelemetry.set(OpenTelemetry.noop());\n    // when\n    ApiGatewayProxyRequest created = ApiGatewayProxyRequest.forStream(mock);\n    // then\n    assertThat(created.freshStream()).isEqualTo(mock);\n    assertThat(created.getHeaders()).isEmpty();\n  }\n'],should;when;Stream;Proxy;Stream;Headers;ock;mock;Request;Gateway,1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.521317005157471, -5.0058794021606445, -5.4370622634887695, -6.511682033538818, -5.470645427703857, -0.020963991060853004]",0.9792542457580566
1,['  @Test\n  public void shouldCreateNoopRequestIfXrayPropagatorsSet() throws IOException {\n    // given\n    InputStream mock = mock(InputStream.class);\n    GlobalOpenTelemetry.set(\n        OpenTelemetry.propagating(ContextPropagators.create(AwsXrayPropagator.getInstance())));\n    // when\n    ApiGatewayProxyRequest created = ApiGatewayProxyRequest.forStream(mock);\n    // then\n    assertThat(created.freshStream()).isEqualTo(mock);\n    assertThat(created.getHeaders()).isEmpty();\n  }\n'],ray;Ap;mock;mock;Input;should;propagating;Noop;Stream;class,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.548361852765083e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10,5,5,"[-5.514368534088135, -5.04868745803833, -5.3917436599731445, -6.458340167999268, -5.421282768249512, -0.021212492138147354]",0.9790109395980835
1,['  @Test\n  public void shouldUseStreamMarkingIfHttpPropagatorsSet() throws IOException {\n    // given\n    InputStream mock = mock(InputStream.class);\n    given(mock.markSupported()).willReturn(true);\n    GlobalOpenTelemetry.set(\n        OpenTelemetry.propagating(ContextPropagators.create(B3Propagator.injectingSingleHeader())));\n    // when\n    ApiGatewayProxyRequest created = ApiGatewayProxyRequest.forStream(mock);\n    // then\n    assertThat(created.freshStream()).isEqualTo(mock);\n    then(mock).should(atLeastOnce()).mark(Integer.MAX_VALUE);\n    then(mock).should().reset();\n  }\n'],mock;IOException;Telemetry;mock;Propagators;MAX;Stream;Open;Stream;Header,2.444721758365631e-09;1.1059455573558807e-09;8.731149137020111e-10;8.149072527885437e-10;8.003553375601768e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.5351738929748535, -5.0331010818481445, -5.446688175201416, -6.493375301361084, -5.463642120361328, -0.020739832893013954]",0.979473888874054
1,['  @Test\n  public void shouldUseCopyIfMarkingNotAvailableAndHttpPropagatorsSet() throws IOException {\n    // given\n    InputStream mock = mock(InputStream.class);\n    given(mock.markSupported()).willReturn(false);\n    given(mock.read(any(byte[].class))).willReturn(-1);\n    GlobalOpenTelemetry.set(\n        OpenTelemetry.propagating(ContextPropagators.create(B3Propagator.injectingSingleHeader())));\n    // when\n    ApiGatewayProxyRequest created = ApiGatewayProxyRequest.forStream(mock);\n    // then\n    assertThat(created.freshStream()).isInstanceOf(ByteArrayInputStream.class);\n    then(mock).should(never()).mark(any(Integer.class));\n    then(mock).should(never()).reset();\n    then(mock).should().read(any());\n  }\n'],mock;should;any;Marking;Propagators;IOException;should;when;byte;ock,1.280568540096283e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.530114650726318, -5.008304119110107, -5.418745994567871, -6.473209857940674, -5.460268020629883, -0.02109811082482338]",0.9791228771209717
1,"['  @Test\n  public void test() {\n    ProcessMetrics.registerObservers();\n\n    waitAndAssertMetrics(\n        metric ->\n            metric\n                .hasName(""runtime.java.memory"")\n                .hasUnit(""bytes"")\n                .hasLongGauge()\n                .points()\n                .anySatisfy(point -> assertThat(point.getValue()).isPositive()),\n        metric ->\n            metric\n                .hasName(""runtime.java.cpu_time"")\n                .hasUnit(""seconds"")\n                .hasDoubleGauge()\n                .points()\n                .anySatisfy(point -> assertThat(point.getValue()).isPositive()));\n  }\n']",Metrics;metric;That;seconds;Positive;java;point;Observers;metric;has,9.89530235528946e-10;9.313225746154785e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.455620288848877, -5.023226261138916, -5.47966194152832, -6.497199535369873, -5.468365669250488, -0.020970411598682404]",0.979248046875
1,"['  @Test\n  public void test() {\n    SystemMetrics.registerObservers();\n\n    waitAndAssertMetrics(\n        metric ->\n            metric\n                .hasName(""system.memory.usage"")\n                .hasUnit(""By"")\n                .hasLongGauge()\n                .points()\n                .anySatisfy(point -> assertThat(point.getValue()).isPositive()),\n        metric ->\n            metric\n                .hasName(""system.memory.utilization"")\n                .hasUnit(""1"")\n                .hasDoubleGauge()\n                .points()\n                .anySatisfy(point -> assertThat(point.getValue()).isPositive()),\n        metric -> metric.hasName(""system.network.io"").hasUnit(""By"").hasLongGauge(),\n        metric -> metric.hasName(""system.network.packets"").hasUnit(""packets"").hasLongGauge(),\n        metric -> metric.hasName(""system.network.errors"").hasUnit(""errors"").hasLongGauge(),\n        metric -> metric.hasName(""system.disk.operations"").hasUnit(""operations"").hasLongGauge());\n  }\n']",register;any;auge;auge;point;That;Metrics;usage;has;point,9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.748006515204906e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.4519171714782715, -4.934438705444336, -5.384596347808838, -6.4246931076049805, -5.481927394866943, -0.022093825042247772]",0.9781484603881836
1,"['  @ParameterizedTest\n  public void testHelloRequest(String path, String className) {\n    AggregatedHttpResponse response = client.get(url.resolve(path).toString()).aggregate().join();\n\n    assertThat(response.status().code()).isEqualTo(200);\n    assertThat(response.contentUtf8()).isEqualTo(""hello"");\n\n    testing.waitAndAssertTraces(\n        trace ->\n            trace.hasSpansSatisfyingExactly(\n                span ->\n                    span.hasName(getContextRoot() + path).hasKind(SpanKind.SERVER).hasNoParent(),\n                span -> span.hasName(className + "".hello"").hasParent(trace.getSpan(0))));\n  }\n']",Parameterized;SERVER;class;Hello;Name;Response;Exactly;atisfying;Parent;Span,2.561137080192566e-09;1.1059455573558807e-09;8.585629984736443e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.396755695343018, -5.096137523651123, -5.537820816040039, -6.548009395599365, -5.398844242095947, -0.020755477249622345]",0.9794585704803467
1,"['  @Test\n    public void execute(JobExecutionContext context) {\n      GlobalOpenTelemetry.getTracer(""jobtracer"").spanBuilder(""child"").startSpan().end();\n    }\n']",Telemetry;Span;jobtracer;span;child;Builder;context;Global;end;get,2.3283064365386963e-09;1.7462298274040222e-09;1.57160684466362e-09;1.280568540096283e-09;1.0477378964424133e-09;9.89530235528946e-10;6.984919309616089e-10;2.3283064365386963e-10;1.1641532182693481e-10;-5.820766091346741e-11,5,5,"[-5.56638765335083, -4.8972392082214355, -5.4221696853637695, -6.5390119552612305, -5.486979961395264, -0.021525217220187187]",0.9787048101425171
1,"['  @ParameterizedTest\n  public void testHelloRequest(String service) {\n    String soapMessage =\n        ""<soapenv:Envelope xmlns:soapenv=\\""http://schemas.xmlsoap.org/soap/envelope/\\"" xmlns:hel=\\""http://opentelemetry.io/test/hello-web-service\\"">""\n            + ""   <soapenv:Header/>""\n            + ""   <soapenv:Body>""\n            + ""      <hel:helloRequest>""\n            + ""         <name>Test</name>""\n            + ""      </hel:helloRequest>""\n            + ""   </soapenv:Body>""\n            + ""</soapenv:Envelope>"";\n\n    AggregatedHttpResponse response =\n        client.post(getAddress(service), soapMessage).aggregate().join();\n    Document doc = Jsoup.parse(response.contentUtf8());\n\n    assertThat(response.status().code()).isEqualTo(200);\n    assertThat(doc.selectFirst(""message"").text()).isEqualTo(""Hello Test"");\n\n    String methodName = ""hello"";\n    testing.waitAndAssertTraces(\n        trace ->\n            trace.hasSpansSatisfyingExactly(\n                span -> assertServerSpan(span, serverSpanName(service, methodName)).hasNoParent(),\n                span -> assertHandlerSpan(span, service, methodName).hasParent(trace.getSpan(0)),\n                span ->\n                    assertAnnotationHandlerSpan(span, service, methodName)\n                        .hasParent(trace.getSpan(1))));\n  }\n']",Parameterized;xmlns;span;envelop;Message;soapenv;soap;has;select;trace,1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;7.421476766467094e-10;6.402842700481415e-10;5.820766091346741e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.338217735290527, -5.109764099121094, -5.504823207855225, -6.516998291015625, -5.373194694519043, -0.021250654011964798]",0.9789735674858093
1,"['  @Test\n  public void shouldExtractHttpParentForHttpEndpoint() throws Exception {\n\n    // given\n    Endpoint endpoint = new HttpEndpoint("""", new HttpComponent(), URI.create(""""));\n    Map<String, Object> exchangeHeaders =\n        Collections.singletonMap(\n            ""uber-trace-id"", ""1f7f8dab3f0043b1b9cf0a75caf57510:a13825abcb764bd3:0:1"");\n\n    // when\n    Context parent = CamelPropagationUtil.extractParent(exchangeHeaders, endpoint);\n\n    // then\n    Span parentSpan = Span.fromContext(parent);\n    SpanContext parentSpanContext = parentSpan.getSpanContext();\n    assertThat(parentSpanContext.getTraceId()).isEqualTo(""1f7f8dab3f0043b1b9cf0a75caf57510"");\n    assertThat(parentSpanContext.getSpanId()).isEqualTo(""a13825abcb764bd3"");\n  }\n']",Parent;exchange;extract;from;Propagation;For;id;endpoint;Map;That,7.566995918750763e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.463734149932861, -5.067348003387451, -5.480071544647217, -6.513012409210205, -5.420105934143066, -0.02083207108080387]",0.9793835282325745
1,"['  @Test\n  public void shouldNotFailExtractingNullHttpParentForHttpEndpoint() throws Exception {\n\n    // given\n    Endpoint endpoint = new HttpEndpoint("""", new HttpComponent(), URI.create(""""));\n    Map<String, Object> exchangeHeaders = Collections.singletonMap(""uber-trace-id"", null);\n\n    // when\n    Context parent = CamelPropagationUtil.extractParent(exchangeHeaders, endpoint);\n\n    // then\n    Span parentSpan = Span.fromContext(parent);\n    SpanContext parentSpanContext = parentSpan.getSpanContext();\n    assertThat(parentSpanContext.isValid()).isEqualTo(false);\n  }\n']",uber;Null;should;Not;new;Map;qual;Span;Endpoint;parent,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.486623764038086, -5.05165433883667, -5.467093467712402, -6.528339862823486, -5.43210506439209, -0.0208144411444664]",0.9794006943702698
1,"['  @Test\n  public void shouldNotFailExtractingNullAwsParentForSqsEndpoint() {\n\n    // given\n    Endpoint endpoint = new SqsEndpoint("""", new SqsComponent(), new SqsConfiguration());\n    Map<String, Object> exchangeHeaders = Collections.singletonMap(""AWSTraceHeader"", null);\n\n    // when\n    Context parent = CamelPropagationUtil.extractParent(exchangeHeaders, endpoint);\n\n    // then\n    Span parentSpan = Span.fromContext(parent);\n    SpanContext parentSpanContext = parentSpan.getSpanContext();\n    assertThat(parentSpanContext.isValid()).isEqualTo(false);\n  }\n']",Span;For;ws;Endpoint;endpoint;Extracting;Propagation;Headers;Endpoint;new,9.022187441587448e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.511093720793724e-10;4.3655745685100555e-10;4.147295840084553e-10;4.0745362639427185e-10,5,5,"[-5.496073246002197, -5.044583797454834, -5.456637382507324, -6.5166144371032715, -5.442577838897705, -0.020837441086769104]",0.9793781638145447
1,"['  @Test\n  public void shouldExtractAwsParentForSqsEndpoint() {\n\n    // given\n    Endpoint endpoint = new SqsEndpoint("""", new SqsComponent(), new SqsConfiguration());\n    Map<String, Object> exchangeHeaders =\n        Collections.singletonMap(\n            ""AWSTraceHeader"",\n            ""Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1\\n"");\n\n    // when\n    Context parent = CamelPropagationUtil.extractParent(exchangeHeaders, endpoint);\n\n    // then\n    Span parentSpan = Span.fromContext(parent);\n    SpanContext parentSpanContext = parentSpan.getSpanContext();\n    assertThat(parentSpanContext.getTraceId()).isEqualTo(""5759e988bd862e3fe1be46a994272793"");\n    assertThat(parentSpanContext.getSpanId()).isEqualTo(""53995c3f42cd8ad8"");\n  }\n']",exchange;AWSTrace;Camel;given;Util;Collections;Header;Parent;Span;Component,9.313225746154785e-10;7.8580342233181e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10,5,5,"[-5.482593536376953, -5.0478515625, -5.440845489501953, -6.480714797973633, -5.433662414550781, -0.021037064492702484]",0.979182779788971
1,"['  @Test\n  public void methodBodyCreatesReferences() {\n    ReferenceCollector collector = new ReferenceCollector((String s) -> false);\n\n    collector.collectReferencesFromAdvice(MethodBodyAdvice.class.getName());\n    collector.prune();\n    Map<String, ClassRef> references = collector.getReferences();\n\n    assertThat(references)\n        .containsOnlyKeys(\n            MethodBodyAdvice.A.class.getName(),\n            MethodBodyAdvice.B.class.getName(),\n            MethodBodyAdvice.SomeInterface.class.getName(),\n            MethodBodyAdvice.SomeImplementation.class.getName());\n\n    ClassRef refB = references.get(MethodBodyAdvice.B.class.getName());\n    ClassRef refA = references.get(MethodBodyAdvice.A.class.getName());\n\n    // interface flags\n    assertThat(refB.getFlags()).contains(ManifestationFlag.NON_INTERFACE);\n    assertThat(references.get(MethodBodyAdvice.SomeInterface.class.getName()).getFlags())\n        .contains(ManifestationFlag.INTERFACE);\n\n    // class access flags\n    assertThat(refA.getFlags()).contains(PACKAGE_OR_HIGHER);\n    assertThat(refB.getFlags()).contains(PACKAGE_OR_HIGHER);\n\n    // method refs\n    assertMethod(\n        refB,\n        ""method"",\n        ""(Ljava/lang/String;)Ljava/lang/String;"",\n        PROTECTED_OR_HIGHER,\n        OwnershipFlag.NON_STATIC);\n    assertMethod(\n        refB, ""methodWithPrimitives"", ""(Z)V"", PROTECTED_OR_HIGHER, OwnershipFlag.NON_STATIC);\n    assertMethod(refB, ""staticMethod"", ""()V"", PROTECTED_OR_HIGHER, OwnershipFlag.STATIC);\n    assertMethod(\n        refB,\n        ""methodWithArrays"",\n        ""([Ljava/lang/String;)[Ljava/lang/Object;"",\n        PROTECTED_OR_HIGHER,\n        OwnershipFlag.NON_STATIC);\n\n    // field refs\n    assertThat(refB.getFields()).isEmpty();\n    assertThat(refA.getFields()).hasSize(2);\n    assertField(refA, ""publicB"", PACKAGE_OR_HIGHER, OwnershipFlag.NON_STATIC);\n    assertField(refA, ""staticB"", PACKAGE_OR_HIGHER, OwnershipFlag.STATIC);\n  }\n']",INTERFACE;Creates;Collector;Manifestation;collector;STATIC;ref;lang;class;collect,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.43722677230835, -5.038259983062744, -5.414511680603027, -6.446678161621094, -5.432832717895508, -0.021473415195941925]",0.9787554740905762
1,"['  @Test\n  public void protectedRefTest() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(MethodBodyAdvice.B2.class.getName());\n    collector.prune();\n    Map<String, ClassRef> references = collector.getReferences();\n\n    assertMethod(\n        references.get(MethodBodyAdvice.B.class.getName()),\n        ""protectedMethod"",\n        ""()V"",\n        PROTECTED_OR_HIGHER,\n        OwnershipFlag.NON_STATIC);\n  }\n']",protected;new;protected;PROTECTED;ON;Reference;OR;prune;Ref;STATIC,1.6298145055770874e-09;9.89530235528946e-10;8.731149137020111e-10;8.440110832452774e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.488838195800781, -5.01088809967041, -5.452104568481445, -6.512887001037598, -5.458582878112793, -0.021048620343208313]",0.9791713356971741
1,"['  @Test\n  public void ldcCreatesReferences() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(LdcAdvice.class.getName());\n    collector.prune();\n    Map<String, ClassRef> references = collector.getReferences();\n\n    assertThat(references).containsKey(MethodBodyAdvice.A.class.getName());\n  }\n']",collector;collect;Body;prune;Collector;contains;That;collector;get;Name,7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.3096723705530167e-10,5,5,"[-5.5096259117126465, -4.983445167541504, -5.437277317047119, -6.536854267120361, -5.466522216796875, -0.021146316081285477]",0.9790756702423096
1,"['  @Test\n  public void instanceofCreatesReferences() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(TestClasses.InstanceofAdvice.class.getName());\n    collector.prune();\n    Map<String, ClassRef> references = collector.getReferences();\n\n    assertThat(references).containsKey(MethodBodyAdvice.A.class.getName());\n  }\n']",References;References;prune;Class;Instanceof;Creates;Key;false;class;Name,1.1641532182693481e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.51640510559082, -4.956394195556641, -5.448215961456299, -6.525711536407471, -5.494168758392334, -0.021160906180739403]",0.9790615439414978
1,"['  @Test\n  public void invokedynamicCreatesReferences() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(TestClasses.InvokeDynamicAdvice.class.getName());\n    collector.prune();\n    Map<String, ClassRef> references = collector.getReferences();\n\n    assertThat(references).containsKey(""muzzle.TestClasses$MethodBodyAdvice$SomeImplementation"");\n    assertMethod(\n        references.get(""muzzle.TestClasses$MethodBodyAdvice$SomeImplementation""),\n        ""someMethod"",\n        ""()V"",\n        PROTECTED_OR_HIGHER,\n        OwnershipFlag.NON_STATIC);\n    assertThat(references).containsKey(""muzzle.TestClasses$MethodBodyAdvice$B"");\n    assertMethod(\n        references.get(""muzzle.TestClasses$MethodBodyAdvice$B""),\n        ""staticMethod"",\n        ""()V"",\n        PROTECTED_OR_HIGHER,\n        OwnershipFlag.STATIC);\n    assertThat(references).containsKey(""muzzle.TestClasses$MethodBodyAdvice$A"");\n    assertMethod(\n        references.get(""muzzle.TestClasses$MethodBodyAdvice$A""),\n        ""<init>"",\n        ""()V"",\n        PROTECTED_OR_HIGHER,\n        OwnershipFlag.NON_STATIC);\n  }\n']",invokedynamic;PROTECTED;Classes;Flag;STATIC;init;uzzle;Dynamic;Flag;static,1.3387762010097504e-09;1.1496013030409813e-09;1.0477378964424133e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.462339878082275, -5.046455383300781, -5.4392595291137695, -6.4545817375183105, -5.413272857666016, -0.021273409947752953]",0.9789512753486633
1,"['  @Test\n  public void shouldCreateReferencesForHelperClasses() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(HelperAdvice.class.getName());\n    Map<String, ClassRef> references = collector.getReferences();\n\n    assertThat(references)\n        .containsOnlyKeys(\n            TestHelperClasses.Helper.class.getName(),\n            TestHelperClasses.HelperSuperClass.class.getName(),\n            TestHelperClasses.HelperInterface.class.getName());\n\n    ClassRef helperSuperClass = references.get(TestHelperClasses.HelperSuperClass.class.getName());\n    assertThat(helperSuperClass.getFlags()).contains(ManifestationFlag.ABSTRACT);\n    assertHelperSuperClassMethod(helperSuperClass, true);\n    assertMethod(\n        helperSuperClass,\n        ""finalMethod"",\n        ""()Ljava/lang/String;"",\n        VisibilityFlag.PUBLIC,\n        OwnershipFlag.NON_STATIC,\n        ManifestationFlag.FINAL);\n\n    ClassRef helperInterface = references.get(TestHelperClasses.HelperInterface.class.getName());\n    assertThat(helperInterface.getFlags()).contains(ManifestationFlag.ABSTRACT);\n    assertHelperInterfaceMethod(helperInterface, true);\n\n    ClassRef helperClass = references.get(TestHelperClasses.Helper.class.getName());\n    assertThat(helperClass.getFlags()).contains(ManifestationFlag.NON_FINAL);\n    assertHelperSuperClassMethod(helperClass, false);\n    assertHelperInterfaceMethod(helperClass, false);\n  }\n']",Manifestation;Advice;ABSTRACT;false;Flag;should;Classes;java;Ref;collect,1.2223608791828156e-09;9.89530235528946e-10;9.022187441587448e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.3655745685100555e-10,5,5,"[-5.421853542327881, -5.034616947174072, -5.390115261077881, -6.403382301330566, -5.380727291107178, -0.021989576518535614]",0.9782505631446838
1,"['  @Test\n  public void shouldCollectFieldDeclarationReferences() {\n    ReferenceCollector collector =\n        new ReferenceCollector(s -> s.equals(DeclaredFieldTestClass.Helper.class.getName()));\n    collector.collectReferencesFromAdvice(DeclaredFieldTestClass.Advice.class.getName());\n    collector.prune();\n    Map<String, ClassRef> references = collector.getReferences();\n\n    ClassRef helperClass = references.get(DeclaredFieldTestClass.Helper.class.getName());\n    FieldRef superField = findField(helperClass, ""superField"");\n    assertThat(superField).isNotNull();\n    assertThat(superField.isDeclared()).isFalse();\n\n    FieldRef field = findField(helperClass, ""helperField"");\n    assertThat(field).isNotNull();\n    assertThat(field.isDeclared()).isTrue();\n\n    ClassRef libraryBaseClass =\n        references.get(DeclaredFieldTestClass.LibraryBaseClass.class.getName());\n    assertThat(libraryBaseClass.getFields()).isEmpty();\n  }\n']",Declaration;Class;new;Class;Class;Declared;Reference;Library;should;References,1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;7.275957614183426e-10;6.693881005048752e-10;5.529727786779404e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.500903129577637, -5.055879592895508, -5.501791000366211, -6.534109115600586, -5.454506874084473, -0.02047252655029297]",0.9797357320785522
1,"['  @Test\n  public void shouldFindAllHelperClasses() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(HelperAdvice.class.getName());\n    collector.prune();\n    List<String> helperClasses = collector.getSortedHelperClasses();\n\n    assertThat(helperClasses)\n        .containsSubsequence(\n            Arrays.asList(\n                TestHelperClasses.HelperInterface.class.getName(),\n                TestHelperClasses.Helper.class.getName()));\n    assertThat(helperClasses)\n        .containsSubsequence(\n            Arrays.asList(\n                TestHelperClasses.HelperSuperClass.class.getName(),\n                TestHelperClasses.Helper.class.getName()));\n  }\n']",should;as;prune;new;Collector;Arrays;Reference;Helper;collector;collect,2.3283064365386963e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.434501647949219, -5.102852821350098, -5.475370407104492, -6.486708164215088, -5.390950679779053, -0.020930137485265732]",0.9792873859405518
1,"['  @Test\n  public void shouldCorrectlyFindHelperClassesFromMultipleAdviceClasses() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(HelperAdvice.class.getName());\n    collector.collectReferencesFromAdvice(TestClasses.HelperOtherAdvice.class.getName());\n    collector.prune();\n    List<String> helperClasses = collector.getSortedHelperClasses();\n\n    assertThat(helperClasses)\n        .containsSubsequence(\n            Arrays.asList(\n                TestHelperClasses.HelperInterface.class.getName(),\n                TestHelperClasses.Helper.class.getName()));\n    assertThat(helperClasses)\n        .containsSubsequence(\n            Arrays.asList(\n                TestHelperClasses.HelperSuperClass.class.getName(),\n                TestHelperClasses.Helper.class.getName()));\n    assertThat(helperClasses)\n        .containsSubsequence(\n            Arrays.asList(\n                OtherTestHelperClasses.TestEnum.class.getName(),\n                OtherTestHelperClasses.TestEnum.class.getName() + ""$1""));\n\n    assertThat(helperClasses)\n        .containsExactlyInAnyOrder(\n            TestHelperClasses.HelperSuperClass.class.getName(),\n            TestHelperClasses.HelperInterface.class.getName(),\n            TestHelperClasses.Helper.class.getName(),\n            OtherTestHelperClasses.Bar.class.getName(),\n            OtherTestHelperClasses.Foo.class.getName(),\n            OtherTestHelperClasses.TestEnum.class.getName(),\n            OtherTestHelperClasses.TestEnum.class.getName() + ""$1"",\n            OtherTestHelperClasses.class.getName() + ""$1"");\n  }\n']",Enum;Helper;Subsequence;Find;Other;Helper;Name;Helper;List;Collector,6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.388957500457764, -5.112768650054932, -5.47467565536499, -6.470026969909668, -5.378235816955566, -0.02116510644555092]",0.9790571928024292
1,"['  @Test\n  public void shouldCorrectlyFindExternalInstrumentationClasses() {\n    ReferenceCollector collector =\n        new ReferenceCollector(s -> s.startsWith(""external.instrumentation""));\n    collector.collectReferencesFromAdvice(\n        TestClasses.ExternalInstrumentationAdvice.class.getName());\n    collector.prune();\n\n    Map<String, ClassRef> references = collector.getReferences();\n    assertThat(references.get(""external.NotInstrumentation"")).isNotNull();\n\n    List<String> helperClasses = collector.getSortedHelperClasses();\n    assertThat(helperClasses).containsExactly(ExternalHelper.class.getName());\n  }\n']",Reference;Advice;starts;references;Instrumentation;External;Collector;That;Collector;helper,8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.503825664520264, -5.027976036071777, -5.475838661193848, -6.526956558227539, -5.471149444580078, -0.020692424848675728]",0.9795202016830444
1,"['  @ParameterizedTest\n  public void shouldCollectHelperClassesFromResourceFile(\n      @SuppressWarnings(""unused"") String desc, String resource) {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromResource(HelperResource.create(resource, resource));\n    collector.prune();\n\n    List<String> helperClasses = collector.getSortedHelperClasses();\n    assertThat(helperClasses)\n        .containsSubsequence(\n            Arrays.asList(\n                TestHelperClasses.HelperInterface.class.getName(),\n                TestHelperClasses.Helper.class.getName()));\n    assertThat(helperClasses)\n        .containsSubsequence(\n            Arrays.asList(\n                TestHelperClasses.HelperSuperClass.class.getName(),\n                TestHelperClasses.Helper.class.getName()));\n  }\n']",desc;Suppress;Parameterized;should;Helper;Collector;unused;Classes;Collect;Helper,1.280568540096283e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.448244571685791, -5.011198043823242, -5.417499542236328, -6.460558891296387, -5.445716381072998, -0.021513434126973152]",0.9787163138389587
1,"['  @Test\n  public void shouldIgnoreArbitraryResourceFile() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromResource(\n        HelperResource.create(""application.properties"", ""application.properties""));\n    collector.prune();\n\n    assertThat(collector.getReferences()).isEmpty();\n    assertThat(collector.getSortedHelperClasses()).isEmpty();\n  }\n']",Arbitrary;create;new;References;collector;References;application;Ignore;File;Reference,1.1641532182693481e-09;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10,5,5,"[-5.489219665527344, -5.0460920333862305, -5.454545021057129, -6.525496482849121, -5.448704242706299, -0.020825181156396866]",0.9793901443481445
1,"['  @Test\n  public void shouldCollectVirtualFields() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(VirtualFieldTestClasses.ValidAdvice.class.getName());\n    collector.prune();\n\n    VirtualFieldMappings virtualFieldMappings = collector.getVirtualFieldMappings();\n    assertThat(virtualFieldMappings.entrySet())\n        .containsExactlyInAnyOrder(\n            entry(VirtualFieldTestClasses.Key1.class.getName(), Context.class.getName()),\n            entry(VirtualFieldTestClasses.Key2.class.getName(), Context.class.getName()));\n  }\n']",new;should;contains;Context;Advice;Virtual;collector;Field;get;collector,1.3969838619232178e-09;9.313225746154785e-10;6.83940015733242e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.47754430770874, -5.061798572540283, -5.488387107849121, -6.53665828704834, -5.433204174041748, -0.020678997039794922]",0.9795333743095398
1,"['  @Test\n  public void shouldCollectMultipleVirtualFieldsForSingleClass() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(\n        VirtualFieldTestClasses.TwoVirtualFieldsInTheSameClassAdvice.class.getName());\n    collector.prune();\n\n    VirtualFieldMappings virtualFieldMappings = collector.getVirtualFieldMappings();\n    assertThat(virtualFieldMappings.entrySet())\n        .containsExactlyInAnyOrder(\n            entry(VirtualFieldTestClasses.Key1.class.getName(), Context.class.getName()),\n            entry(VirtualFieldTestClasses.Key1.class.getName(), State.class.getName()));\n  }\n']",should;References;Classes;Virtual;Advice;In;For;Virtual;Collector;Class,1.6298145055770874e-09;8.149072527885437e-10;6.548361852765083e-10;5.675246939063072e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.487689018249512, -5.053929328918457, -5.500035285949707, -6.535497188568115, -5.440778732299805, -0.02060624770820141]",0.9796047210693359
1,"['  @ParameterizedTest(name = ""{0}"")\n  public void shouldNotCollectVirtualFieldsForInvalidScenario(\n      @SuppressWarnings(""unused"") String desc, String adviceClassName) {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n\n    Assertions.assertThatExceptionOfType(MuzzleCompilationException.class)\n        .isThrownBy(\n            () -> {\n              collector.collectReferencesFromAdvice(adviceClassName);\n              collector.prune();\n            });\n  }\n']",collector;Collector;Advice;Collect;Suppress;unused;By;desc;Scenario;Class,1.0477378964424133e-09;9.313225746154785e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10,5,5,"[-5.509838104248047, -4.975415229797363, -5.446856498718262, -6.497607231140137, -5.470260143280029, -0.02120257169008255]",0.9790205955505371
1,"['  @Test\n  public void shouldCollectArrayVirtualField() {\n    ReferenceCollector collector = new ReferenceCollector(s -> false);\n    collector.collectReferencesFromAdvice(\n        VirtualFieldTestClasses.UsingArrayAsFieldAdvice.class.getName());\n    collector.prune();\n\n    VirtualFieldMappings virtualFieldMappings = collector.getVirtualFieldMappings();\n    assertThat(virtualFieldMappings.entrySet())\n        .containsExactly(\n            entry(\n                VirtualFieldTestClasses.Key1.class.getName(),\n                Type.getType(Context[].class).getClassName()));\n  }\n']",appings;Array;collector;contains;Virtual;collector;Collector;appings;appings;Type,6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.128661774098873e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.483901023864746, -5.047301769256592, -5.498290061950684, -6.531986236572266, -5.442604064941406, -0.020670006051659584]",0.9795421361923218
1,"['  @Test\n  public void getItemFromCache() throws Exception {\n    Cache<Method, String> cache = new MethodCache<>();\n    Method key = TestClass.class.getDeclaredMethod(""method"");\n    String value = ""Value"";\n\n    cache.put(key, value);\n\n    assertThat(cache.get(key)).isEqualTo(""Value"");\n  }\n']",Cache;new;From;key;Method;Method;Exception;value;cache;class,8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.52297306060791, -4.948966026306152, -5.430932998657227, -6.5311737060546875, -5.470888614654541, -0.021354863420128822]",0.9788715243339539
1,"['  @Test\n  public void extensionsAreLoadedFromJar() throws IOException, InterruptedException {\n    startTarget(""/opentelemetry-extensions.jar"");\n\n    testAndVerify();\n\n    stopTarget();\n  }\n']",Interrupted;IOException;Loaded;Exception;jar;stop;extensions;Are;start;Target,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.4551915228366852e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.547316551208496, -4.9445905685424805, -5.440921783447266, -6.551025390625, -5.502962112426758, -0.021079203113913536]",0.9791414141654968
1,"['  @Test\n  public void extensionsAreLoadedFromFolder() throws IOException, InterruptedException {\n    startTarget(""/"");\n\n    testAndVerify();\n\n    stopTarget();\n  }\n']",Verify;Folder;IOException;Target;Target;Exception;extensions;From;start;stop,2.444721758365631e-09;1.862645149230957e-09;9.313225746154785e-10;5.820766091346741e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.531315326690674, -4.9429121017456055, -5.395205020904541, -6.51283597946167, -5.500296592712402, -0.021430710330605507]",0.9787973165512085
1,"['  @Test\n  public void extensionsAreLoadedFromJavaagent() throws IOException, InterruptedException {\n    startTargetWithExtendedAgent();\n\n    testAndVerify();\n\n    stopTarget();\n  }\n']",Target;IOException;start;Verify;stop;Are;Target;Exception;extensions;Extended,7.450580596923828e-09;5.820766091346741e-09;3.725290298461914e-09;3.026798367500305e-09;9.313225746154785e-10;0.0;-6.984919309616089e-10;-1.862645149230957e-09;-2.0954757928848267e-09;-3.259629011154175e-09,5,5,"[-5.519624710083008, -4.94093132019043, -5.399581432342529, -6.520491123199463, -5.500717639923096, -0.021459178999066353]",0.9787694215774536
1,"['  @Test\n  public void springBootSmokeTestOnJDK() throws IOException, InterruptedException {\n    startTarget(8);\n    String url = String.format(""http://localhost:%d/greeting"", target.getMappedPort(8080));\n    Request request = new Request.Builder().url(url).get().build();\n\n    String currentAgentVersion =\n        (String)\n            new JarFile(agentPath)\n                .getManifest()\n                .getMainAttributes()\n                .get(Attributes.Name.IMPLEMENTATION_VERSION);\n\n    Response response = client.newCall(request).execute();\n    System.out.println(response.headers().toString());\n\n    Collection<ExportTraceServiceRequest> traces = waitForTraces();\n\n    Assertions.assertNotNull(response.header(""X-server-id""));\n    Assertions.assertEquals(1, response.headers(""X-server-id"").size());\n    Assertions.assertTrue(TraceId.isValid(response.header(""X-server-id"")));\n    Assertions.assertEquals(""Hi!"", response.body().string());\n    Assertions.assertEquals(1, countSpansByName(traces, ""/greeting""));\n    Assertions.assertEquals(0, countSpansByName(traces, ""WebController.greeting""));\n    Assertions.assertEquals(1, countSpansByName(traces, ""WebController.withSpan""));\n    Assertions.assertEquals(2, countSpansByAttributeValue(traces, ""custom"", ""demo""));\n    Assertions.assertNotEquals(\n        0, countResourcesByValue(traces, ""telemetry.auto.version"", currentAgentVersion));\n    Assertions.assertNotEquals(0, countResourcesByValue(traces, ""custom.resource"", ""demo""));\n\n    stopTarget();\n  }\n']",Version;get;File;url;Attributes;On;Jar;IMPLEMENTATION;apped;header,1.7462298274040222e-09;8.731149137020111e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.5838532969355583e-10;4.3655745685100555e-10;4.220055416226387e-10,5,5,"[-5.401792049407959, -5.058152675628662, -5.400556564331055, -6.43282413482666, -5.408741474151611, -0.021698808297514915]",0.9785349369049072
1,"['  @Test\n    public boolean equals(Object obj) {\n      if (obj == this) {\n        return true;\n      }\n      if (!(obj instanceof MethodSignature)) {\n        return false;\n      }\n      MethodSignature other = (MethodSignature) obj;\n      return Objects.equals(name, other.name)\n          && Objects.equals(parameterTypes, other.parameterTypes)\n          && Objects.equals(returnType, other.returnType);\n    }\n']",equals;Object;equals;this;name;if;obj;false;name;Type,6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.484964370727539, -5.027997016906738, -5.438563823699951, -6.483595371246338, -5.470113277435303, -0.02100438065826893]",0.9792146682739258
1,"['  @Test\n  public void extractForwarded() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwarded(""for=1.1.1.1""));\n  }\n']",Forwarded;extract;Tracer;ttp;Server;extract;Equals;Forwarded,1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10;-8.149072527885437e-10;-2.6775524020195007e-09,5,5,"[-5.5627288818359375, -4.949134826660156, -5.427826404571533, -6.5158586502075195, -5.487833023071289, -0.02115938812494278]",0.9790630340576172
1,"['  @Test\n  public void extractForwardedIpv6() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwarded(""for=\\""[1111:1111:1111:1111:1111:1111:1111:1111]\\""""));\n  }\n']",Forwarded;Forwarded;extract;Equals;ttp;Server;Tracer;extract,1.280568540096283e-09;9.89530235528946e-10;8.149072527885437e-10;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.509048938751221, -5.029603958129883, -5.4429240226745605, -6.490614891052246, -5.4524078369140625, -0.020939359441399574]",0.9792782068252563
1,"['  @Test\n  public void extractForwardedWithPort() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwarded(""for=\\""1.1.1.1:2222\\""""));\n  }\n']",Tracer;Port;ttp;Forwarded;Equals;Server;extract;extract;Forwarded,2.066371962428093e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;1.1641532182693481e-10;0.0;-3.4924596548080444e-10;-6.984919309616089e-10;-1.4551915228366852e-09,5,5,"[-5.562758922576904, -4.9326910972595215, -5.433108329772949, -6.524126052856445, -5.486195087432861, -0.02125018648803234]",0.9789741039276123
1,"['  @Test\n  public void extractForwardedIpv6WithPort() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwarded(\n            ""for=\\""[1111:1111:1111:1111:1111:1111:1111:1111]:2222\\""""));\n  }\n']",Port;Server;Equals;ttp;extract;Tracer;Forwarded;Forwarded;extract,4.656612873077393e-10;1.4551915228366852e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-3.637978807091713e-10;-5.820766091346741e-10;-6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-5.4929423332214355, -5.029249668121338, -5.461677551269531, -6.5058274269104, -5.4534502029418945, -0.020898966118693352]",0.9793179035186768
1,"['  @Test\n  public void extractForwardedCaps() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwarded(""For=1.1.1.1""));\n  }\n']",Tracer;Server;extract;extract;aps;For;Forwarded;Equals;Forwarded;ttp,2.6775524020195007e-09;1.862645149230957e-09;8.149072527885437e-10;2.3283064365386963e-10;0.0;-1.7462298274040222e-10;-3.4924596548080444e-10;-5.238689482212067e-10;-7.8580342233181e-10;-1.1641532182693481e-09,5,5,"[-5.566697120666504, -4.911698341369629, -5.429531097412109, -6.536362171173096, -5.493762016296387, -0.021356847137212753]",0.9788697361946106
1,"['  @Test\n  public void extractForwardedMalformed() {\n    assertNull(HttpServerTracer.extractForwarded(""for=;for=1.1.1.1""));\n  }\n']",extract;extract;Forwarded;Null;Server;Malformed;Http;Forwarded;Tracer,9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;5.238689482212067e-10;1.1641532182693481e-10;-5.820766091346741e-11;-8.149072527885437e-10;-1.3969838619232178e-09;-1.6880221664905548e-09,5,5,"[-5.577579975128174, -4.937826633453369, -5.419168472290039, -6.518637180328369, -5.492785930633545, -0.021197786554694176]",0.9790253043174744
1,"['  @Test\n  public void extractForwardedEmpty() {\n    assertNull(HttpServerTracer.extractForwarded(""""));\n  }\n']",extract;Null;Http;Tracer;Forwarded;Forwarded;Server;extract;Empty,2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;9.313225746154785e-10;9.313225746154785e-10;0.0;-9.313225746154785e-10;-1.280568540096283e-09;-3.725290298461914e-09,5,5,"[-5.575775146484375, -4.895842552185059, -5.4359941482543945, -6.560535907745361, -5.473206996917725, -0.02146477997303009]",0.9787640571594238
1,"['  @Test\n  public void extractForwardedEmptyValue() {\n    assertNull(HttpServerTracer.extractForwarded(""for=""));\n  }\n']",extract;Server;extract;Null;Value;Http;Forwarded;Tracer;Empty;Forwarded,3.958120942115784e-09;3.841705620288849e-09;6.984919309616089e-10;4.656612873077393e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-1.862645149230957e-09;-1.862645149230957e-09;-1.979060471057892e-09;-2.444721758365631e-09,5,5,"[-5.581030368804932, -4.829761028289795, -5.421130180358887, -6.544713973999023, -5.505431175231934, -0.021920187398791313]",0.978318452835083
1,"['  @Test\n  public void extractForwardedEmptyValueWithSemicolon() {\n    assertNull(HttpServerTracer.extractForwarded(""for=;""));\n  }\n']",Server;Null;extract;Http;Empty;emicolon;Forwarded;extract;Value;Forwarded,1.1641532182693481e-08;7.916241884231567e-09;7.450580596923828e-09;6.05359673500061e-09;3.725290298461914e-09;2.6775524020195007e-09;-9.313225746154785e-10;-2.7939677238464355e-09;-4.190951585769653e-09;-4.190951585769653e-09,5,5,"[-5.5725274085998535, -4.872437953948975, -5.414559364318848, -6.519928932189941, -5.494441509246826, -0.021724354475736618]",0.978509783744812
1,"['  @Test\n  public void extractForwardedNoFor() {\n    assertNull(HttpServerTracer.extractForwarded(""by=1.1.1.1;test=1.1.1.1""));\n  }\n']",extract;No;by;Http;For;Forwarded;Null;extract;Server;Tracer,1.3969838619232178e-09;8.149072527885437e-10;6.984919309616089e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11;-5.820766091346741e-10;-8.149072527885437e-10;-1.0477378964424133e-09;-1.3387762010097504e-09,5,5,"[-5.575552463531494, -4.91251277923584, -5.453919410705566, -6.557835578918457, -5.488918304443359, -0.021197201684117317]",0.9790259003639221
1,"['  @Test\n  public void extractForwardedMultiple() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwarded(""for=1.1.1.1;for=1.2.3.4""));\n  }\n']",extract;Multiple;Forwarded;Server;Equals;extract;Tracer;ttp;Forwarded,2.561137080192566e-09;2.0954757928848267e-09;1.0477378964424133e-09;9.313225746154785e-10;-3.4924596548080444e-10;-1.3969838619232178e-09;-1.3969838619232178e-09;-1.6298145055770874e-09;-1.6298145055770874e-09,5,5,"[-5.570727348327637, -4.927239894866943, -5.437108516693115, -6.525383472442627, -5.495425701141357, -0.02120058797299862]",0.9790224432945251
1,"['  @Test\n  public void extractForwardedMultipleIpV6() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwarded(\n            ""for=\\""[1111:1111:1111:1111:1111:1111:1111:1111]\\"";for=1.2.3.4""));\n  }\n']",ttp;Forwarded;Server;Equals;Forwarded;extract;Tracer;extract;Multiple,1.0477378964424133e-09;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-4.656612873077393e-10;-1.1641532182693481e-09;-1.3969838619232178e-09;-1.7462298274040222e-09,5,5,"[-5.488403797149658, -5.046213150024414, -5.46510124206543, -6.500612735748291, -5.441628456115723, -0.02085074968636036]",0.9793649911880493
1,"['  @Test\n  public void extractForwardedMultipleWithPort() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwarded(""for=\\""1.1.1.1:2222\\"";for=1.2.3.4""));\n  }\n']",Tracer;ttp;Server;Forwarded;extract;Port;extract;Multiple;Equals;Forwarded,3.725290298461914e-09;2.7939677238464355e-09;2.561137080192566e-09;1.1641532182693481e-09;4.656612873077393e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.6298145055770874e-09;-2.6775524020195007e-09;-3.6088749766349792e-09,5,5,"[-5.567494869232178, -4.944525241851807, -5.44169807434082, -6.520132064819336, -5.4922871589660645, -0.02108713984489441]",0.979133665561676
1,"['  @Test\n  public void extractForwardedMultipleIpV6WithPort() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwarded(\n            ""for=\\""[1111:1111:1111:1111:1111:1111:1111:1111]:2222\\"";for=1.2.3.4""));\n  }\n']",extract;Forwarded;Equals;extract;Server;Tracer;Multiple;Forwarded;Port;ttp,1.862645149230957e-09;1.3969838619232178e-09;5.820766091346741e-10;-3.4924596548080444e-10;-4.0745362639427185e-10;-5.238689482212067e-10;-5.820766091346741e-10;-8.149072527885437e-10;-1.0477378964424133e-09;-1.7462298274040222e-09,5,5,"[-5.495020389556885, -5.037806987762451, -5.457884311676025, -6.496959209442139, -5.445751190185547, -0.020897097885608673]",0.9793197512626648
1,"['  @Test\n  public void extractForwardedMixedSplitter() {\n    assertEquals(\n        ""1.1.1.1"",\n        HttpServerTracer.extractForwarded(""test=abcd; by=1.2.3.4, for=1.1.1.1;for=1.2.3.4""));\n  }\n']",abcd;Splitter;ixed;Tracer;extract;Server;by;extract;ttp;Equals,1.7462298274040222e-09;1.3969838619232178e-09;1.280568540096283e-09;1.280568540096283e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-6.984919309616089e-10,5,5,"[-5.552772045135498, -4.979526996612549, -5.458810806274414, -6.518122673034668, -5.467716217041016, -0.02092733420431614]",0.9792901277542114
1,"['  @Test\n  public void extractForwardedMixedSplitterIpv6() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwarded(\n            ""test=abcd; by=1.2.3.4, for=\\""[1111:1111:1111:1111:1111:1111:1111:1111]\\"";for=1.2.3.4""));\n  }\n']",Server;Equals;ttp;extract;Tracer;by;ixed;Forwarded;abcd;extract,1.280568540096283e-09;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-5.820766091346741e-10;-1.3387762010097504e-09,5,5,"[-5.494770526885986, -5.058402061462402, -5.461056709289551, -6.4882683753967285, -5.439538478851318, -0.02079038880765438]",0.9794243574142456
1,"['  @Test\n  public void extractForwardedMixedSplitterWithPort() {\n    assertEquals(\n        ""1.1.1.1"",\n        HttpServerTracer.extractForwarded(\n            ""test=abcd; by=1.2.3.4, for=\\""1.1.1.1:2222\\"";for=1.2.3.4""));\n  }\n']",Splitter;ixed;ttp;Forwarded;Forwarded;by;Equals;extract;extract;Server,1.862645149230957e-09;1.1641532182693481e-09;1.0477378964424133e-09;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;0.0;-1.1641532182693481e-10;-2.9103830456733704e-10,5,5,"[-5.524653911590576, -5.027222156524658, -5.463132858276367, -6.508206367492676, -5.456668376922607, -0.020757345482707024]",0.9794566035270691
1,"['  @Test\n  public void extractForwardedMixedSplitterIpv6WithPort() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwarded(\n            ""test=abcd; by=1.2.3.4, for=\\""[1111:1111:1111:1111:1111:1111:1111:1111]:2222\\"";for=1.2.3.4""));\n  }\n']",Splitter;Forwarded;ttp;ixed;Forwarded;extract;extract;Port;Tracer;Server,1.862645149230957e-09;1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;3.92901711165905e-10;5.820766091346741e-11;0.0;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.0745362639427185e-10,5,5,"[-5.492308139801025, -5.05745792388916, -5.458619117736816, -6.48394250869751, -5.442328929901123, -0.020811637863516808]",0.9794033169746399
1,"['  @Test\n  public void extractForwardedFor() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwardedFor(""1.1.1.1""));\n  }\n']",Tracer;Equals;Forwarded;ttp;For;For;extract;Forwarded;Server;extract,1.9208528101444244e-09;1.57160684466362e-09;1.3969838619232178e-09;5.820766091346741e-10;4.656612873077393e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-9.89530235528946e-10;-1.862645149230957e-09;-1.979060471057892e-09,5,5,"[-5.550553798675537, -4.954421043395996, -5.437318801879883, -6.529598236083984, -5.486632823944092, -0.02111118473112583]",0.9791101217269897
1,"['  @Test\n  public void extractForwardedForIpv6() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(""\\""[1111:1111:1111:1111:1111:1111:1111:1111]\\""""));\n  }\n']",Server;Forwarded;Equals;For;ttp;extract;Forwarded;For;extract;Tracer,1.076841726899147e-09;9.313225746154785e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-11;0.0;-5.820766091346741e-10;-6.111804395914078e-10;-1.1641532182693481e-09;-1.1641532182693481e-09,5,5,"[-5.500467300415039, -5.023086071014404, -5.4700398445129395, -6.513402462005615, -5.44821834564209, -0.02088402397930622]",0.9793325662612915
1,"['  @Test\n  public void extractForwardedForIpv6Unquoted() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(""[1111:1111:1111:1111:1111:1111:1111:1111]""));\n  }\n']",Tracer;Forwarded;ttp;Equals;For;Forwarded;For;extract;Server;extract,2.3283064365386963e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-1.4551915228366852e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-8.440110832452774e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-5.515817165374756, -5.029443740844727, -5.455071449279785, -6.508403778076172, -5.436396598815918, -0.020902585238218307]",0.979314386844635
1,"['  @Test\n  public void extractForwardedForIpv6Unbracketed() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(""1111:1111:1111:1111:1111:1111:1111:1111""));\n  }\n']",Forwarded;Server;Forwarded;Unbracketed;For;extract;Tracer;Equals;For;ttp,1.280568540096283e-09;1.1932570487260818e-09;4.656612873077393e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-4.0745362639427185e-10;-4.3655745685100555e-10;-6.984919309616089e-10;-8.731149137020111e-10;-1.2223608791828156e-09,5,5,"[-5.526433944702148, -5.009658336639404, -5.450276851654053, -6.496362686157227, -5.457620620727539, -0.020938774570822716]",0.9792789220809937
1,"['  @Test\n  public void extractForwardedForWithPort() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwardedFor(""1.1.1.1:2222""));\n  }\n']",Forwarded;Forwarded;Server;Port;For;For;extract;Equals;Tracer;ttp,1.3387762010097504e-09;9.313225746154785e-10;2.3283064365386963e-10;0.0;0.0;-3.4924596548080444e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10;-9.313225746154785e-10,5,5,"[-5.558648586273193, -4.923868656158447, -5.450368881225586, -6.542173385620117, -5.487374305725098, -0.02122322842478752]",0.9790002703666687
1,"['  @Test\n  public void extractForwardedForIpv6WithPort() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(""\\""[1111:1111:1111:1111:1111:1111:1111:1111]:2222\\""""));\n  }\n']",extract;Forwarded;Tracer;For;Port;Server;extract;For;Equals;ttp,1.6298145055770874e-09;9.313225746154785e-10;4.656612873077393e-10;1.4551915228366852e-10;0.0;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.515463352203369, -5.014481544494629, -5.465353012084961, -6.518111705780029, -5.455306529998779, -0.020862074568867683]",0.9793540239334106
1,"['  @Test\n  public void extractForwardedForIpv6UnquotedWithPort() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(""[1111:1111:1111:1111:1111:1111:1111:1111]:2222""));\n  }\n']",Unquoted;For;Forwarded;ttp;Tracer;Equals;extract;Server;For;Port,1.4842953532934189e-09;1.4551915228366852e-09;1.4551915228366852e-09;8.149072527885437e-10;4.656612873077393e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-6.984919309616089e-10,5,5,"[-5.5182671546936035, -5.018220901489258, -5.463837146759033, -6.515298843383789, -5.448476314544678, -0.020866043865680695]",0.9793501496315002
1,"['  @Test\n  public void extractForwardedForEmpty() {\n    assertNull(HttpServerTracer.extractForwardedFor(""""));\n  }\n']",Forwarded;Tracer;extract;Empty;Http;Server;Null;For;For;extract,1.979060471057892e-09;1.1059455573558807e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;2.6193447411060333e-10;0.0;-5.820766091346741e-11;-5.820766091346741e-10,5,5,"[-5.565964698791504, -4.841935634613037, -5.426287651062012, -6.548920154571533, -5.490286350250244, -0.021913772448897362]",0.9783245921134949
1,"['  @Test\n  public void extractForwardedForMultiple() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwardedFor(""1.1.1.1,1.2.3.4""));\n  }\n']",Equals;Server;Forwarded;extract;ttp;Multiple;extract;Forwarded;For;For,5.587935447692871e-09;1.979060471057892e-09;1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-1.979060471057892e-09;-2.0954757928848267e-09,5,5,"[-5.545638084411621, -4.910466194152832, -5.470555305480957, -6.545686721801758, -5.50987434387207, -0.02118833176791668]",0.9790346622467041
1,"['  @Test\n  public void extractForwardedForMultipleIpv6() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(\n            ""\\""[1111:1111:1111:1111:1111:1111:1111:1111]\\"",1.2.3.4""));\n  }\n']",Forwarded;extract;Tracer;Server;extract;Forwarded;For;For;Equals;ttp,1.3387762010097504e-09;9.313225746154785e-10;8.149072527885437e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-1.7462298274040222e-10;-3.4924596548080444e-10;-5.820766091346741e-10;-6.984919309616089e-10,5,5,"[-5.470215320587158, -5.0231475830078125, -5.420379161834717, -6.47199010848999, -5.433287143707275, -0.021360931918025017]",0.9788656234741211
1,"['  @Test\n  public void extractForwardedForMultipleIpv6Unquoted() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(""[1111:1111:1111:1111:1111:1111:1111:1111],1.2.3.4""));\n  }\n']",Multiple;Unquoted;For;Server;Tracer;Equals;extract;For;extract;Forwarded,9.313225746154785e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10;0.0;-4.0745362639427185e-10;-8.440110832452774e-10;-1.0477378964424133e-09,5,5,"[-5.489689350128174, -5.068789482116699, -5.440441608428955, -6.475559234619141, -5.422479629516602, -0.020931070670485497]",0.9792864918708801
1,"['  @Test\n  public void extractForwardedForMultipleIpv6Unbracketed() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(""1111:1111:1111:1111:1111:1111:1111:1111,1.2.3.4""));\n  }\n']",Unbracketed;For;ttp;Server;Forwarded;extract;For;extract;Multiple;Equals,2.0954757928848267e-09;1.7462298274040222e-09;1.1641532182693481e-09;8.440110832452774e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.3283064365386963e-10;0.0;0.0;-2.9103830456733704e-10,5,5,"[-5.493996620178223, -5.063776016235352, -5.446967601776123, -6.478946685791016, -5.418261528015137, -0.020930137485265732]",0.9792873859405518
1,"['  @Test\n  public void extractForwardedForMultipleWithPort() {\n    assertEquals(""1.1.1.1"", HttpServerTracer.extractForwardedFor(""1.1.1.1:2222,1.2.3.4""));\n  }\n']",Port;For;Multiple;Equals;Server;extract;Tracer;For;ttp;Forwarded,1.6298145055770874e-09;6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-6.984919309616089e-10;-9.313225746154785e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.565196990966797, -4.93483829498291, -5.462255954742432, -6.542219638824463, -5.495607852935791, -0.021030060946941376]",0.9791895151138306
1,"['  @Test\n  public void extractForwardedForMultipleIpv6WithPort() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(\n            ""\\""[1111:1111:1111:1111:1111:1111:1111:1111]:2222\\"",1.2.3.4""));\n  }\n']",Forwarded;ttp;For;extract;Multiple;For;Equals;Tracer;Server;Forwarded,8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10;-3.4924596548080444e-10,5,5,"[-5.497126579284668, -5.033287048339844, -5.466408729553223, -6.506779670715332, -5.447964668273926, -0.02085670456290245]",0.9793593883514404
1,"['  @Test\n  public void extractForwardedForMultipleIpv6UnquotedWithPort() {\n    assertEquals(\n        ""1111:1111:1111:1111:1111:1111:1111:1111"",\n        HttpServerTracer.extractForwardedFor(\n            ""[1111:1111:1111:1111:1111:1111:1111:1111]:2222,1.2.3.4""));\n  }\n']",Unquoted;ttp;For;Equals;For;Tracer;extract;Server;Port;extract,1.280568540096283e-09;1.1641532182693481e-09;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-2.0372681319713593e-10,5,5,"[-5.505888938903809, -5.029289245605469, -5.463718414306641, -6.505727767944336, -5.447108268737793, -0.020863709971308708]",0.9793524146080017
1,"['  @Test\n  public void doesNotSetDuplicateAttributes() {\n    // given\n    Map<String, String> request = new HashMap<>();\n    request.put(""transport"", ""TCP"");\n    request.put(""peerName"", ""1.2.3.4"");\n    request.put(""peerIp"", ""1.2.3.4"");\n    request.put(""peerPort"", ""123"");\n\n    Map<String, String> response = new HashMap<>();\n    response.put(""peerName"", ""4.3.2.1"");\n    response.put(""peerPort"", ""42"");\n    response.put(""peerIp"", ""4.3.2.1"");\n\n    TestNetServerAttributesExtractor extractor = new TestNetServerAttributesExtractor();\n\n    // when\n    AttributesBuilder startAttributes = Attributes.builder();\n    extractor.onStart(startAttributes, request);\n\n    AttributesBuilder endAttributes = Attributes.builder();\n    extractor.onEnd(endAttributes, request, response, null);\n\n    // then\n    assertThat(startAttributes.build())\n        .containsOnly(\n            entry(SemanticAttributes.NET_TRANSPORT, ""TCP""),\n            entry(SemanticAttributes.NET_PEER_PORT, 123L),\n            entry(SemanticAttributes.NET_PEER_IP, ""1.2.3.4""));\n\n    assertThat(endAttributes.build()).isEmpty();\n  }\n']",entry;Hash;Duplicate;does;PORT;Set;transport;Extractor;Hash;peer,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.470728397369385, -5.080400466918945, -5.425311088562012, -6.459396839141846, -5.4400634765625, -0.020952200517058372]",0.9792657494544983
1,"['  @Test\n  public void doesNotSetNegativePort() {\n    // given\n    Map<String, String> request = new HashMap<>();\n    request.put(""peerPort"", ""-42"");\n\n    Map<String, String> response = new HashMap<>();\n    response.put(""peerPort"", ""-1"");\n\n    TestNetServerAttributesExtractor extractor = new TestNetServerAttributesExtractor();\n\n    // when\n    AttributesBuilder startAttributes = Attributes.builder();\n    extractor.onStart(startAttributes, request);\n\n    AttributesBuilder endAttributes = Attributes.builder();\n    extractor.onEnd(endAttributes, request, response, null);\n\n    // then\n    assertThat(startAttributes.build()).isEmpty();\n    assertThat(endAttributes.build()).isEmpty();\n  }\n']",does;Set;Negative;request;Map;Map;Extractor;new;new;end,1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.5224199295043945, -5.012897491455078, -5.447780609130859, -6.507766246795654, -5.5005903244018555, -0.02074333466589451]",0.9794701933860779
1,"['  @Test\n  public void doesNotSetDuplicateAttributes() {\n    // given\n    Map<String, String> request = new HashMap<>();\n    request.put(""transport"", ""TCP"");\n    request.put(""peerName"", ""1.2.3.4"");\n    request.put(""peerIp"", ""1.2.3.4"");\n    request.put(""peerPort"", ""123"");\n\n    Map<String, String> response = new HashMap<>();\n    response.put(""peerName"", ""4.3.2.1"");\n    response.put(""peerPort"", ""42"");\n    response.put(""peerIp"", ""4.3.2.1"");\n\n    TestNetClientAttributesExtractor extractor = new TestNetClientAttributesExtractor();\n\n    // when\n    AttributesBuilder startAttributes = Attributes.builder();\n    extractor.onStart(startAttributes, request);\n\n    AttributesBuilder endAttributes = Attributes.builder();\n    extractor.onEnd(endAttributes, request, response, null);\n\n    // then\n    assertThat(startAttributes.build()).isEmpty();\n\n    assertThat(endAttributes.build())\n        .containsOnly(\n            entry(SemanticAttributes.NET_PEER_PORT, 42L),\n            entry(SemanticAttributes.NET_PEER_IP, ""4.3.2.1""));\n  }\n']",entry;Semantic;NET;IP;Net;entry;NET;TC;response;Port,4.190951585769653e-09;1.1059455573558807e-09;6.984919309616089e-10;6.83940015733242e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.480142593383789, -5.077589988708496, -5.433161735534668, -6.4675445556640625, -5.449128150939941, -0.02084164321422577]",0.9793740510940552
1,"['  @Test\n  public void doesNotSetNegativePort() {\n    // given\n    Map<String, String> request = new HashMap<>();\n    request.put(""peerPort"", ""-42"");\n\n    Map<String, String> response = new HashMap<>();\n    response.put(""peerPort"", ""-1"");\n\n    TestNetClientAttributesExtractor extractor = new TestNetClientAttributesExtractor();\n\n    // when\n    AttributesBuilder startAttributes = Attributes.builder();\n    extractor.onStart(startAttributes, request);\n\n    AttributesBuilder endAttributes = Attributes.builder();\n    extractor.onEnd(endAttributes, request, response, null);\n\n    // then\n    assertThat(startAttributes.build()).isEmpty();\n    assertThat(endAttributes.build()).isEmpty();\n  }\n']",Net;peer;Port;extractor;Builder;Client;builder;Hash;Attributes;response,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10,5,5,"[-5.523520469665527, -5.013882637023926, -5.446854591369629, -6.507774829864502, -5.5000481605529785, -0.020738547667860985]",0.9794750213623047
1,"['  @Test\n    public Iterable<String> keys(Map<String, String> carrier) {\n      return carrier.keySet();\n    }\n']",Iterable;Set;keys;key;carrier;Map;return;carrier,5.820766091346741e-10;1.1641532182693481e-10;0.0;-1.7462298274040222e-10;-2.3283064365386963e-10;-4.0745362639427185e-10;-4.0745362639427185e-10;-4.656612873077393e-10,5,5,"[-5.576920509338379, -4.852535247802734, -5.331236362457275, -6.467438697814941, -5.513824462890625, -0.022260555997490883]",0.9779852628707886
1,"['  @Test\n  public void serverSpan() {\n    // SpanKey.SERVER will never be passed to SpanSuppressionStrategy.from(), it cannot be\n    // automatically determined by te builder - thus it does not make any sense to test it (for now)\n    SpanSuppressionStrategy strategy = SpanSuppressionStrategy.from(emptySet());\n\n    Context context = strategy.storeInContext(Context.root(), SpanKind.SERVER, SPAN);\n\n    assertThat(strategy.shouldSuppress(context, SpanKind.SERVER)).isTrue();\n    Stream.of(SpanKind.CLIENT, SpanKind.CONSUMER, SpanKind.PRODUCER)\n        .forEach(spanKind -> assertThat(strategy.shouldSuppress(context, spanKind)).isFalse());\n\n    verifySpanKey(SpanKey.SERVER, context);\n  }\n']",Span;Suppression;Span;PRODUCER;SPAN;SERVER;Span;Key;server;should,1.280568540096283e-09;1.076841726899147e-09;9.604264050722122e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.675246939063072e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.514880657196045, -5.067789077758789, -5.487838268280029, -6.530559539794922, -5.430980205535889, -0.020505346357822418]",0.9797034859657288
1,"['  @ParameterizedTest\n  public void consumerSpan(SpanKey spanKey) {\n    SpanSuppressionStrategy strategy = SpanSuppressionStrategy.from(singleton(spanKey));\n\n    verifyNoSuppression(strategy, Context.root());\n\n    Context context = strategy.storeInContext(Context.root(), SpanKind.CONSUMER, SPAN);\n\n    assertThat(strategy.shouldSuppress(context, SpanKind.SERVER)).isFalse();\n    Stream.of(SpanKind.CLIENT, SpanKind.CONSUMER, SpanKind.PRODUCER)\n        .forEach(spanKind -> assertThat(strategy.shouldSuppress(context, spanKind)).isTrue());\n\n    verifySpanKey(spanKey, context);\n  }\n']",Parameterized;Key;Span;Kind;Suppression;Kind;Key;Suppress;Kind;PRODUCER,2.7939677238464355e-09;8.731149137020111e-10;8.440110832452774e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.524552822113037, -5.011953353881836, -5.485146999359131, -6.554358005523682, -5.460813045501709, -0.020679814741015434]",0.9795325398445129
1,"['  @ParameterizedTest\n  public void clientSpan(SpanKey spanKey) {\n    SpanSuppressionStrategy strategy = SpanSuppressionStrategy.from(singleton(spanKey));\n\n    verifyNoSuppression(strategy, Context.root());\n\n    Context context = strategy.storeInContext(Context.root(), SpanKind.CLIENT, SPAN);\n\n    assertThat(strategy.shouldSuppress(context, SpanKind.SERVER)).isFalse();\n    Stream.of(SpanKind.CLIENT, SpanKind.CONSUMER, SpanKind.PRODUCER)\n        .forEach(spanKind -> assertThat(strategy.shouldSuppress(context, spanKind)).isTrue());\n\n    verifySpanKey(spanKey, context);\n  }\n']",Parameterized;PRODUCER;SERVER;strategy;Span;span;Span;root;Suppress;strategy,1.8044374883174896e-09;1.1059455573558807e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10,5,5,"[-5.531551837921143, -5.016535758972168, -5.488729953765869, -6.559062957763672, -5.466169834136963, -0.020575299859046936]",0.9796350598335266
1,"['  @Test\n  public void producerSpan() {\n    SpanSuppressionStrategy strategy = SpanSuppressionStrategy.from(singleton(SpanKey.PRODUCER));\n\n    verifyNoSuppression(strategy, Context.root());\n\n    Context context = strategy.storeInContext(Context.root(), SpanKind.PRODUCER, SPAN);\n\n    assertThat(strategy.shouldSuppress(context, SpanKind.SERVER)).isFalse();\n    Stream.of(SpanKind.CLIENT, SpanKind.CONSUMER, SpanKind.PRODUCER)\n        .forEach(spanKind -> assertThat(strategy.shouldSuppress(context, spanKind)).isTrue());\n\n    verifySpanKey(SpanKey.PRODUCER, context);\n  }\n']",Stream;PRODUCER;strategy;of;Span;context;Suppression;store;Kind;Context,8.731149137020111e-10;8.658389560878277e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.517289638519287, -5.024598598480225, -5.440629482269287, -6.500161647796631, -5.425695419311523, -0.02105293981730938]",0.979167103767395
1,"['    @Test\n    public void serve1() throws Exception {\n        final WebClient client = WebClient.of(serverRule.httpUri());\n        final AggregatedHttpResponse response = client.get(""/http-serve"").aggregate().get();\n        assertThat(response.status()).isEqualTo(HttpStatus.OK);\n\n        assertThat(response.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n        assertThat(response.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response.headers().contains(""X-RateLimit-Remaining"")).isFalse();\n        assertThat(response.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response.headers().contains(""RateLimit-Reset"")).isFalse();\n        assertThat(response.headers().contains(""X-RateLimit-Reset"")).isFalse();\n        assertThat(response.headers().contains(""X-Rate-Limit-Reset"")).isFalse();\n        assertThat(response.headers().contains(""RateLimit-Limit"")).isFalse();\n        assertThat(response.headers().contains(""X-RateLimit-Limit"")).isFalse();\n        assertThat(response.headers().contains(""X-Rate-Limit-Limit"")).isFalse();\n    }\n']",aggregate;Remaining;Reset;final;headers;Remaining;False;status;Limit;Rule,8.149072527885437e-10;6.402842700481415e-10;4.94765117764473e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.41245698928833, -5.120331287384033, -5.438839435577393, -6.44349479675293, -5.3736467361450195, -0.021231047809123993]",0.978992760181427
1,"['    @Test\n    public void throttle1() throws Exception {\n        final WebClient client = WebClient.of(serverRule.httpUri());\n        final AggregatedHttpResponse response1 = client.get(""/http-throttle1"").aggregate().get();\n        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n\n        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n        assertThat(response1.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-RateLimit-Remaining"", ""0"")).isTrue();\n        assertThat(response1.headers().contains(""X-RateLimit-Reset"")).isTrue();\n        final long reset1 = Long.parseLong(response1.headers().get(""X-RateLimit-Reset""));\n        assertThat(reset1).isBetween(0L, 10L);\n        assertThat(response1.headers().contains(""X-RateLimit-Limit"")).isFalse();\n\n        final AggregatedHttpResponse response2 = client.get(""/http-throttle1"").aggregate().get();\n        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n\n        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n        final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n        assertThat(retryAfter2).isBetween(0L, 10L);\n        assertThat(response2.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-RateLimit-Remaining"", ""0"")).isTrue();\n        assertThat(response2.headers().contains(""X-RateLimit-Reset"")).isTrue();\n        final long reset = Long.parseLong(response2.headers().get(""X-RateLimit-Reset""));\n        assertThat(reset).isEqualTo(retryAfter2);\n        assertThat(response2.headers().contains(""X-RateLimit-Limit"")).isFalse();\n    }\n']",Client;Rule;REQUESTS;OK;status;Status;headers;aggregate;throttle;Http,6.402842700481415e-10;5.820766091346741e-10;5.602487362921238e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.403735637664795, -5.1190361976623535, -5.433639049530029, -6.458050727844238, -5.404388427734375, -0.021135227754712105]",0.979086697101593
1,"['    @Test\n    public void throttle2() throws Exception {\n        final WebClient client = WebClient.of(serverRule.httpUri());\n        final AggregatedHttpResponse response1 = client.get(""/http-throttle2"").aggregate().get();\n        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n\n        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n        assertThat(response1.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-RateLimit-Remaining"", ""0"")).isTrue();\n        assertThat(response1.headers().contains(""X-RateLimit-Reset"")).isTrue();\n        final long reset1 = Long.parseLong(response1.headers().get(""X-RateLimit-Reset""));\n        assertThat(reset1).isBetween(0L, 10L);\n        assertThat(response1.headers().get(""X-RateLimit-Limit"")).isEqualTo(""1, 1;window=10"");\n\n        final AggregatedHttpResponse response2 = client.get(""/http-throttle2"").aggregate().get();\n        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n\n        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER, ""15"")).isTrue();\n        assertThat(response2.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-RateLimit-Remaining"", ""0"")).isTrue();\n        assertThat(response2.headers().contains(""X-RateLimit-Reset"", ""15"")).isTrue();\n        assertThat(response1.headers().get(""X-RateLimit-Limit"")).isEqualTo(""1, 1;window=10"");\n    }\n']",Web;throttle;throttle;Http;Reset;Remaining;status;ri;Client;server,8.149072527885437e-10;6.83940015733242e-10;5.529727786779404e-10;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.399741172790527, -5.121545314788818, -5.438735485076904, -6.453441143035889, -5.386570453643799, -0.021205488592386246]",0.9790177941322327
1,"['    @Test\n    public void throttle3() throws Exception {\n        final WebClient client = WebClient.of(serverRule.httpUri());\n        final AggregatedHttpResponse response1 = client.get(""/http-throttle3"").aggregate().get();\n        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n\n        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n        assertThat(response1.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-RateLimit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-RateLimit-Reset"")).isFalse();\n\n        final AggregatedHttpResponse response2 = client.get(""/http-throttle3"").aggregate().get();\n        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n\n        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n        final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n        assertThat(retryAfter2).isBetween(0L, 10L);\n        assertThat(response2.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-RateLimit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-RateLimit-Reset"")).isFalse();\n    }\n']",throttle;Web;Rule;AFTER;server;Reset;parse;After;http;Remaining,1.2514647096395493e-09;8.149072527885437e-10;7.8580342233181e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10,5,5,"[-5.392712593078613, -5.122265338897705, -5.440515995025635, -6.461565017700195, -5.388263702392578, -0.021204905584454536]",0.9790183305740356
1,"['    @Test\n    public void throttle4() throws Exception {\n        final WebClient client = WebClient.of(serverRule.httpUri());\n        final AggregatedHttpResponse response1 = client.get(""/http-throttle4"").aggregate().get();\n        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n\n        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n        assertThat(response1.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-RateLimit-Remaining"")).isFalse();\n        assertThat(response1.headers().contains(""X-RateLimit-Reset"")).isFalse();\n\n        final AggregatedHttpResponse response2 = client.get(""/http-throttle4"").aggregate().get();\n        assertThat(response2.status()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);\n\n        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n        final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n        assertThat(retryAfter2).isBetween(5L, 10L);\n        assertThat(response2.headers().contains(""RateLimit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-RateLimit-Remaining"")).isFalse();\n        assertThat(response2.headers().contains(""X-RateLimit-Reset"")).isFalse();\n    }\n']",response;Exception;final;OK;final;Rule;http;status;throttle;Status,6.83940015733242e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.383915901184082, -5.127257347106934, -5.444235801696777, -6.463377475738525, -5.382757186889648, -0.0212219450622797]",0.979001522064209
1,"['    @Test\n    public void shouldBeDifferentToEachOther() throws UnsupportedEncodingException {\n        final SamlRequestIdManager manager =\n                SamlRequestIdManager.ofJwt(""me"", ""test"", 60, 5);\n\n        final String id1 = manager.newId();\n        final String id2 = manager.newId();\n        final String id3 = manager.newId();\n\n        assertThat(id1).isNotEqualTo(id2).isNotEqualTo(id3);\n        assertThat(id2).isNotEqualTo(id3);\n    }\n']",wt;me;Request;Request;of;Different;Other;Exception;Manager;Not,3.026798367500305e-09;1.6298145055770874e-09;1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.504589080810547, -5.0374979972839355, -5.436657905578613, -6.487412452697754, -5.455295562744141, -0.020925583317875862]",0.9792918562889099
1,"['    @Test\n    public void shouldMatchJWTPattern() throws UnsupportedEncodingException {\n        final Pattern p = Pattern.compile(""[a-zA-Z0-9-_]+\\\\.[a-zA-Z0-9-_]+\\\\.[a-zA-Z0-9-_]+"");\n        final SamlRequestIdManager manager =\n                SamlRequestIdManager.ofJwt(""me"", ""test"", 60, 5);\n        final String id = manager.newId();\n        assertThat(p.matcher(id).matches()).isTrue();\n        assertThat(manager.validateId(id)).isTrue();\n    }\n']",final;wt;validate;Unsupported;should;Sam;Exception;Manager;Pattern;manager,1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.535672664642334, -5.021307468414307, -5.479669570922852, -6.516739368438721, -5.487605571746826, -0.020535826683044434]",0.9796736240386963
1,"['    @Test\n    public void shouldBeExpired() throws InterruptedException, UnsupportedEncodingException {\n        final SamlRequestIdManager manager =\n                SamlRequestIdManager.ofJwt(""me"", ""test"", 1, 0);\n\n        final Instant started = Instant.now();\n        final String id = manager.newId();\n        assertThat(manager.validateId(id)).isTrue();\n\n        await().pollDelay(Durations.TWO_HUNDRED_MILLISECONDS)\n               .atMost(Durations.FIVE_SECONDS)\n               .untilAsserted(() -> assertThat(manager.validateId(id)).isFalse());\n\n        assertThat(java.time.Duration.between(started, Instant.now()).toMillis())\n                .isGreaterThan(TimeUnit.SECONDS.toMillis(1));\n    }\n']",Sam;poll;wt;Interrupted;Exception;SECONDS;Manager;until;manager;UNDRED,3.725290298461914e-09;2.9103830456733704e-09;2.561137080192566e-09;2.444721758365631e-09;1.57160684466362e-09;1.4406396076083183e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0186340659856796e-09,5,5,"[-5.442094326019287, -5.0593791007995605, -5.405171871185303, -6.511593818664551, -5.483615398406982, -0.021033212542533875]",0.9791864156723022
1,"['    @Test\n    public void shouldBeAcceptedBecauseOfLeeway() throws InterruptedException, UnsupportedEncodingException {\n        final SamlRequestIdManager manager =\n                SamlRequestIdManager.ofJwt(""me"", ""test"", 1, 1);\n\n        final Instant started = Instant.now();\n        final String id = manager.newId();\n        assertThat(manager.validateId(id)).isTrue();\n\n        await().pollDelay(Durations.TWO_HUNDRED_MILLISECONDS)\n               .atMost(Durations.FIVE_SECONDS)\n               .untilAsserted(() -> assertThat(manager.validateId(id)).isFalse());\n\n        assertThat(java.time.Duration.between(started, Instant.now()).toMillis())\n                .isGreaterThan(TimeUnit.SECONDS.toMillis(2));\n    }\n']",Instant;final;Encoding;Interrupted;Sam;Leeway;java;Accepted;Exception;Manager,6.51925802230835e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-5.465261459350586, -4.935807228088379, -5.386080741882324, -6.488501071929932, -5.505167007446289, -0.021818600594997406]",0.978417694568634
1,"['    @Test\n    public void shouldFail() {\n        assertThatThrownBy(() -> SamlRequestIdManager.ofJwt(""me"", ""test"", 0, 0))\n                .isInstanceOf(IllegalArgumentException.class);\n        assertThatThrownBy(() -> SamlRequestIdManager.ofJwt(""me"", ""test"", -1, 0))\n                .isInstanceOf(IllegalArgumentException.class);\n        assertThatThrownBy(() -> SamlRequestIdManager.ofJwt(""me"", ""test"", 1, -1))\n                .isInstanceOf(IllegalArgumentException.class);\n    }\n']",wt;wt;of;class;Thrown;class;Thrown;Illegal;should;Request,2.0954757928848267e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;6.148184183984995e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.8562575355172157e-10;3.4924596548080444e-10,5,5,"[-5.453839302062988, -5.110403060913086, -5.499330997467041, -6.508679389953613, -5.381705284118652, -0.02070632018148899]",0.9795066118240356
1,"['    @Test\n    public void shouldRespondAuthnRequest_HttpRedirect() throws Exception {\n        final AggregatedHttpResponse resp = client.get(""/redirect"").aggregate().join();\n        assertThat(resp.status()).isEqualTo(HttpStatus.FOUND);\n\n        // Check the order of the parameters in the quest string.\n        final String location = resp.headers().get(HttpHeaderNames.LOCATION);\n        final Pattern p = Pattern.compile(\n                ""http://idp\\\\.example\\\\.com/saml/sso/redirect\\\\?"" +\n                ""SAMLRequest=([^&]+)&RelayState=([^&]+)&SigAlg=([^&]+)&Signature=(.+)$"");\n        assertThat(location).isNotNull();\n        assertThat(p.matcher(location).matches()).isTrue();\n\n        assertThat(QueryParams.fromQueryString(location)\n                              .get(SIGNATURE_ALGORITHM)).isEqualTo(signatureAlgorithm);\n    }\n']",Params;headers;Al;get;Request;location;Pattern;Http;client;Header,1.3969838619232178e-09;1.3387762010097504e-09;9.604264050722122e-10;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.476485252380371, -5.049398899078369, -5.394132137298584, -6.432497024536133, -5.444370269775391, -0.02129453234374523]",0.9789305925369263
1,"['    @Test\n    public void shouldRespondAuthnRequest_HttpPost() throws Exception {\n        final AggregatedHttpResponse resp = client.get(""/post"").aggregate().join();\n        assertThat(resp.status()).isEqualTo(HttpStatus.OK);\n        assertThat(resp.contentType()).isEqualTo(MediaType.HTML_UTF_8);\n\n        final Document doc = Jsoup.parse(resp.contentUtf8());\n        assertThat(doc.body().attr(""onLoad"")).isEqualTo(""document.forms[0].submit()"");\n\n        // SAMLRequest will be posted to the IdP\'s SSO URL.\n        final Element form = doc.body().child(0);\n        assertThat(form.attr(""method"")).isEqualTo(""post"");\n        assertThat(form.attr(""action"")).isEqualTo(""http://idp.example.com/saml/sso/post"");\n        assertThat(form.child(0).attr(""name"")).isEqualTo(SAML_REQUEST);\n        assertThat(form.child(1).attr(""name"")).isEqualTo(RELAY_STATE);\n    }\n']",Auth;Respond;Http;Document;Element;RELAY;Status;will;child;forms,1.2223608791828156e-09;1.1641532182693481e-09;1.1059455573558807e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.38122034072876, -5.132572650909424, -5.454041957855225, -6.448593616485596, -5.348881244659424, -0.021344829350709915]",0.9788812398910522
1,"['    @Test\n    public void shouldBeAlreadyAuthenticated() throws Exception {\n        final RequestHeaders req = RequestHeaders.of(HttpMethod.GET, ""/redirect"",\n                                                     HttpHeaderNames.COOKIE, ""test=test"");\n        final AggregatedHttpResponse resp = client.execute(req).aggregate().join();\n        assertThat(resp.status()).isEqualTo(HttpStatus.OK);\n        assertThat(resp.contentUtf8()).isEqualTo(""authenticated"");\n    }\n']",Exception;Status;Http;OOKIE;resp;should;OK;final;Header;ttp,3.725290298461914e-09;2.2118911147117615e-09;1.8044374883174896e-09;1.7171259969472885e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09,5,5,"[-5.511702060699463, -5.043794631958008, -5.4347405433654785, -6.476229667663574, -5.442913055419922, -0.020934922620654106]",0.9792826771736145
1,"['    @Test\n    public void shouldRespondMetadataWithoutAuthentication() throws Exception {\n        final AggregatedHttpResponse resp = client.get(""/saml/metadata"").aggregate().join();\n        assertThat(resp.status()).isEqualTo(HttpStatus.OK);\n        assertThat(resp.contentType()).isEqualTo(CONTENT_TYPE_SAML_METADATA);\n\n        final EntityDescriptor metadata =\n                (EntityDescriptor) deserialize(resp.contentUtf8().getBytes());\n        assertThat(metadata).isNotNull();\n\n        final SPSSODescriptor sp = metadata.getSPSSODescriptor(SAMLConstants.SAML20P_NS);\n        assertThat(sp.isAuthnRequestsSigned()).isTrue();\n        assertThat(sp.getWantAssertionsSigned()).isTrue();\n\n        final List<KeyDescriptor> kd = sp.getKeyDescriptors();\n        assertThat(kd.get(0).getUse().name()).isEqualToIgnoringCase(""signing"");\n        assertThat(kd.get(1).getUse().name()).isEqualToIgnoringCase(""encryption"");\n\n        final List<SingleLogoutService> slo = sp.getSingleLogoutServices();\n        assertThat(slo.get(0).getLocation())\n                .isEqualTo(""http://"" + spHostname + \':\' + rule.httpPort() + ""/saml/slo/post"");\n        assertThat(slo.get(0).getBinding()).isEqualTo(SAMLConstants.SAML2_POST_BINDING_URI);\n        assertThat(slo.get(1).getLocation())\n                .isEqualTo(""http://"" + spHostname + \':\' + rule.httpPort() + ""/saml/slo/redirect"");\n        assertThat(slo.get(1).getBinding()).isEqualTo(SAMLConstants.SAML2_REDIRECT_BINDING_URI);\n\n        final List<AssertionConsumerService> acs = sp.getAssertionConsumerServices();\n        // index 0 (default)\n        assertThat(acs.get(0).getIndex()).isEqualTo(0);\n        assertThat(acs.get(0).isDefault()).isTrue();\n        assertThat(acs.get(0).getLocation())\n                .isEqualTo(""http://"" + spHostname + \':\' + rule.httpPort() + ""/saml/acs/post"");\n        assertThat(acs.get(0).getBinding()).isEqualTo(SAMLConstants.SAML2_POST_BINDING_URI);\n        // index 1\n        assertThat(acs.get(1).getIndex()).isEqualTo(1);\n        assertThat(acs.get(1).isDefault()).isFalse();\n        assertThat(acs.get(1).getLocation())\n                .isEqualTo(""http://"" + spHostname + \':\' + rule.httpPort() + ""/saml/acs/redirect"");\n        assertThat(acs.get(1).getBinding()).isEqualTo(SAMLConstants.SAML2_REDIRECT_BINDING_URI);\n    }\n']",Aggregated;Http;resp;Authentication;Key;Descriptors;SAM;Descriptor;Auth;ODescriptor,1.4551915228366852e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.693881005048752e-10;5.238689482212067e-10;5.093170329928398e-10,5,5,"[-5.405512809753418, -5.123741626739502, -5.430545330047607, -6.4567179679870605, -5.3821845054626465, -0.02121739275753498]",0.9790061116218567
1,"['    @Test\n    public void shouldConsumeAssertion_HttpPost() throws Exception {\n        final Response response =\n                getAuthResponse(""http://"" + spHostname + \':\' + rule.httpPort() + ""/saml/acs/post"");\n        final AggregatedHttpResponse res = sendViaHttpPostBindingProtocol(""/saml/acs/post"",\n                                                                          SAML_RESPONSE, response);\n\n        assertThat(res.status()).isEqualTo(HttpStatus.FOUND);\n        assertThat(res.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(""/"");\n    }\n']",Http;ONSE;LOCATION;Consume;inding;acs;sam;headers;final;final,9.313225746154785e-10;9.313225746154785e-10;8.585629984736443e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.467398643493652, -5.068230152130127, -5.446235656738281, -6.476112365722656, -5.412376880645752, -0.02104897052049637]",0.9791709184646606
1,"['    @Test\n    public void shouldConsumeAssertion_HttpRedirect() throws Exception {\n        final Response response =\n                getAuthResponse(""http://"" + spHostname + \':\' + rule.httpPort() + ""/saml/acs/redirect"");\n        final AggregatedHttpResponse res = sendViaHttpRedirectBindingProtocol(""/saml/acs/redirect"",\n                                                                              SAML_RESPONSE, response);\n\n        assertThat(res.status()).isEqualTo(HttpStatus.FOUND);\n        assertThat(res.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(""/"");\n    }\n']",should;RES;final;redirect;send;sam;Via;qual;Aggregated;Response,1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.1350493878126144e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;8.149072527885437e-10,5,5,"[-5.467996597290039, -5.074699401855469, -5.45595645904541, -6.479419231414795, -5.410675525665283, -0.02096504159271717]",0.9792531728744507
1,"['    @Test\n    public void shouldConsumeLogoutRequest_HttpPost() throws Exception {\n        final LogoutRequest logoutRequest =\n                getLogoutRequest(""http://"" + spHostname + \':\' + rule.httpPort() + ""/saml/slo/post"",\n                                 ""http://idp.example.com/post"");\n\n        final AggregatedHttpResponse res = sendViaHttpPostBindingProtocol(""/saml/slo/post"",\n                                                                          SAML_REQUEST, logoutRequest);\n\n        assertThat(res.status()).isEqualTo(HttpStatus.OK);\n        assertThat(res.contentType()).isEqualTo(MediaType.HTML_UTF_8);\n\n        final Document doc = Jsoup.parse(res.contentUtf8());\n        assertThat(doc.body().attr(""onLoad"")).isEqualTo(""document.forms[0].submit()"");\n\n        // SAMLResponse will be posted to the IdP\'s logout response URL.\n        final Element form = doc.body().child(0);\n        assertThat(form.attr(""method"")).isEqualTo(""post"");\n        assertThat(form.attr(""action"")).isEqualTo(""http://idp.example.com/saml/slo/post"");\n        assertThat(form.child(0).attr(""name"")).isEqualTo(SAML_RESPONSE);\n    }\n']",should;Request;Exception;example;qual;oup;final;Post;id;SAM,1.862645149230957e-09;1.57160684466362e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-5.371125221252441, -5.153934478759766, -5.4491987228393555, -6.437891006469727, -5.338504314422607, -0.02135463058948517]",0.9788718819618225
1,"['    @Test\n    public void shouldConsumeLogoutRequest_HttpRedirect() throws Exception {\n        final LogoutRequest logoutRequest =\n                getLogoutRequest(""http://"" + spHostname + \':\' + rule.httpPort() + ""/saml/slo/redirect"",\n                                 ""http://idp.example.com/redirect"");\n\n        final AggregatedHttpResponse res =\n                sendViaHttpRedirectBindingProtocol(""/saml/slo/redirect"", SAML_REQUEST, logoutRequest);\n\n        assertThat(res.status()).isEqualTo(HttpStatus.FOUND);\n\n        // Check the order of the parameters in the quest string.\n        final String location = res.headers().get(HttpHeaderNames.LOCATION);\n        final Pattern p = Pattern.compile(\n                ""http://idp\\\\.example\\\\.com/saml/slo/redirect\\\\?"" +\n                ""SAMLResponse=([^&]+)&SigAlg=([^&]+)&Signature=(.+)$"");\n        assertThat(location).isNotNull();\n        assertThat(p.matcher(location).matches()).isTrue();\n    }\n']",the;SAM;matcher;Signature;headers;Not;That;Pattern;Response;Check,3.725290298461914e-09;2.3283064365386963e-09;1.8044374883174896e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10,5,5,"[-5.479368209838867, -5.009710311889648, -5.392498016357422, -6.4327874183654785, -5.4474711418151855, -0.021540852263569832]",0.9786894917488098
1,"['    @Test\n    public void expectSuccessWithFile() throws Exception {\n        final File file = folder.newFile();\n\n        assertThat(file.length()).isZero();\n\n        final KeyStore keyStore = KeyStore.getInstance(""JKS"");\n        keyStore.load(null, null);\n        keyStore.store(new FileOutputStream(file), """".toCharArray());\n\n        assertThat(file.length()).isGreaterThan(0);\n        assertThat(file.canRead()).isTrue();\n        assertThat(file.exists()).isTrue();\n\n        new KeyStoreCredentialResolverBuilder(file).build();\n    }\n']",expect;That;redential;folder;Builder;That;Zero;to;That;file,6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.50987434387207, -5.025362491607666, -5.456611156463623, -6.4827728271484375, -5.490352153778076, -0.020753610879182816]",0.9794602394104004
1,"['    @Test\n    public void expectSuccessWithResource() throws Exception {\n        new KeyStoreCredentialResolverBuilder(getClass().getClassLoader(), ""keystore/test.jks"").build();\n    }\n']",expect;Success;Resolver;Builder;get;Store;Key;ks;Class;Exception,1.076841726899147e-09;9.313225746154785e-10;2.473825588822365e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-2.9103830456733704e-11;-5.820766091346741e-11;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.549234867095947, -4.950957298278809, -5.431373119354248, -6.526586532592773, -5.489591121673584, -0.02116008847951889]",0.9790623188018799
1,"['    @Test\n    public void expectNotFound() throws Exception {\n        assertThatThrownBy(\n                () -> new KeyStoreCredentialResolverBuilder(new File(""/not_exist"")).build())\n                .isInstanceOf(FileNotFoundException.class);\n        assertThatThrownBy(\n                () -> new KeyStoreCredentialResolverBuilder(getClass().getClassLoader(), ""not_exist"").build())\n                .isInstanceOf(FileNotFoundException.class)\n                .hasMessageContaining(""Resource not found"");\n    }\n']",expect;Resolver;That;File;Not;Resolver;Message;File;By;Instance,1.0477378964424133e-09;9.968061931431293e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.7462298274040222e-10,5,5,"[-5.4492950439453125, -5.066037178039551, -5.5132598876953125, -6.517938613891602, -5.425207614898682, -0.020733878016471863]",0.9794794917106628
1,['    @Test\n        public void onComplete(String response) {\n            resultHandler.onComplete(response);\n        }\n'],response;Complete;on;Complete;on;Handler;result;response,2.7939677238464355e-09;1.6298145055770874e-09;0.0;-6.984919309616089e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-2.7939677238464355e-09,5,5,"[-5.546900272369385, -4.929759502410889, -5.382172107696533, -6.4795355796813965, -5.492701530456543, -0.021608633920550346]",0.9786231517791748
1,['    @Test\n    public void callbackContextIsFromInvocationTime_root() {\n        try (SafeCloseable ignored = serverContext().push()) {\n            super.callbackContextIsFromInvocationTime_root();\n        }\n    }\n'],Closeable;ignored;Context;Time;Invocation;super;Time;Invocation;Context;push,1.1641532182693481e-09;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;1.7462298274040222e-10;0.0;-2.9103830456733704e-11;-2.3283064365386963e-10,5,5,"[-5.526585102081299, -4.987844467163086, -5.343845844268799, -6.447005271911621, -5.444375991821289, -0.021717239171266556]",0.9785168766975403
1,['    @Test\n    public void addsStatusCodeWhenNotOk_async() {\n        try (SafeCloseable ignored = serverContext().push()) {\n            super.addsStatusCodeWhenNotOk_async();\n        }\n    }\n'],async;async;Safe;Closeable;Ok;ignored;Code;Status;super;When,1.862645149230957e-09;1.280568540096283e-09;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.5183892250061035, -5.019357681274414, -5.340286731719971, -6.434680938720703, -5.414301872253418, -0.02170674130320549]",0.9785270690917969
1,['    @Test\n    public void usesParentFromInvocationTime() {\n        try (SafeCloseable ignored = serverContext().push()) {\n            super.usesParentFromInvocationTime();\n        }\n    }\n'],Invocation;Safe;Invocation;From;ignored;push;super;server;From;Time,1.6298145055770874e-09;8.731149137020111e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;8.731149137020111e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.563185691833496, -4.956912994384766, -5.388101577758789, -6.483320236206055, -5.483214378356934, -0.02135287970304489]",0.978873610496521
1,['    @Test\n    public void clientTimestampAndDurationEnclosedByParent() {\n    }\n'],Duration;Enclosed;Parent;By;Timestamp;client,1.3969838619232178e-09;1.3969838619232178e-09;9.89530235528946e-10;0.0;-1.7462298274040222e-10;-4.3655745685100555e-10,5,5,"[-5.607275009155273, -4.810934543609619, -5.36889123916626, -6.522731781005859, -5.526539325714111, -0.02216390147805214]",0.9780800342559814
1,"[""    @Test\n    public void callbackContextIsFromInvocationTime() {\n        // TODO(trustin): Can't make this pass because span is updated *after* we invoke the callback\n        //                ITHttpAsyncClient gave us.\n    }\n""]",Invocation;invoke;after;callback;gave;updated;pass;Async;because;the,8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.583864212036133, -4.910579204559326, -5.405465602874756, -6.498469352722168, -5.484194755554199, -0.02150549925863743]",0.9787241816520691
1,"['    @Test\n    public void redirect() {\n        throw new AssumptionViolatedException(""Armeria does not support client redirect."");\n    }\n']",redirect;throw;Violated;does;Exception;Assumption;Armeria;support;redirect;new,1.6298145055770874e-09;1.0477378964424133e-09;2.3283064365386963e-10;1.1641532182693481e-10;-8.731149137020111e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-4.0745362639427185e-10;-6.984919309616089e-10;-6.984919309616089e-10,5,5,"[-5.57044792175293, -4.896146774291992, -5.364548206329346, -6.459674835205078, -5.494173049926758, -0.021877268329262733]",0.9783602952957153
1,['    @Test\n    public void get_returnsNullWhenNoCurrentRequestContext() {\n        assertThat(currentTraceContext.get()).isNull();\n    }\n'],get;Null;That;Context;Null;Trace;get;return;Request;Context,1.3969838619232178e-09;1.3387762010097504e-09;8.149072527885437e-10;7.566995918750763e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-5.557403564453125, -4.877010345458984, -5.389820575714111, -6.50174617767334, -5.490767478942871, -0.021905025467276573]",0.9783331751823425
1,['    @Test\n    public void get_returnsNullWhenCurrentRequestContext_hasNoTraceAttribute() {\n        try (SafeCloseable requestContextScope = ctx.push()) {\n            assertThat(currentTraceContext.get()).isNull();\n        }\n    }\n'],Request;tx;When;Null;push;Safe;Context;That;Current;No,8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11,5,5,"[-5.5519232749938965, -4.969690322875977, -5.4018354415893555, -6.49066162109375, -5.466396331787109, -0.02130281925201416]",0.9789224863052368
1,"['    @Test\n    public void newScope_appliesWhenNoCurrentRequestContext() {\n        try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {\n            assertThat(traceContextScope).hasToString(""ThreadLocalScope"");\n            assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n        }\n    }\n']",new;That;applies;Scope;Context;Local;Context;Trace;trace;That,1.0186340659856796e-09;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.536683559417725, -4.976646900177002, -5.427601337432861, -6.496506214141846, -5.451251983642578, -0.021254271268844604]",0.9789699912071228
1,"['    @Test\n    public void newScope_appliesWhenCurrentRequestContext() {\n        try (SafeCloseable requestContextScope = ctx.push()) {\n            try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {\n                assertThat(traceContextScope).hasToString(""InitialRequestScope"");\n                assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n            }\n        }\n    }\n']",Scope;When;Request;Current;new;Closeable;request;push;qual;Trace,1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.521139621734619, -4.982079982757568, -5.444958686828613, -6.484358310699463, -5.476047515869141, -0.021113401278853416]",0.9791079163551331
1,"['    @Test\n    public void newScope_closeDoesntClearFirstScope() {\n        final TraceContext traceContext2 = TraceContext.newBuilder().traceId(1).spanId(2).build();\n\n        try (SafeCloseable requestContextScope = ctx.push()) {\n            try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {\n                assertThat(traceContextScope).hasToString(""InitialRequestScope"");\n                assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n\n                try (Scope traceContextScope2 = currentTraceContext.newScope(traceContext2)) {\n                    assertThat(traceContextScope2).hasToString(""RequestContextTraceContextScope"");\n                    assertThat(currentTraceContext.get()).isEqualTo(traceContext2);\n                }\n                assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n            }\n            // the first scope is attached to the request context and cleared when that\'s destroyed\n            assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n        }\n    }\n']",Scope;Safe;Request;Trace;Builder;Doesnt;Clear;span;context;trace,1.6298145055770874e-09;7.130438461899757e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.255546860396862e-10,5,5,"[-5.422651290893555, -5.118249416351318, -5.4510698318481445, -6.423916816711426, -5.362336158752441, -0.02122964709997177]",0.9789941310882568
1,"['    @Test\n    public void newScope_notOnEventLoop() {\n        final TraceContext traceContext2 = TraceContext.newBuilder().traceId(1).spanId(2).build();\n\n        try (SafeCloseable requestContextScope = ctx.push()) {\n            try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {\n                assertThat(traceContextScope).hasToString(""InitialRequestScope"");\n                assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n\n                when(eventLoop.inEventLoop()).thenReturn(false);\n                try (Scope traceContextScope2 = currentTraceContext.newScope(traceContext2)) {\n                    assertThat(traceContextScope2).hasToString(""ThreadLocalScope"");\n                    assertThat(currentTraceContext.get()).isEqualTo(traceContext2);\n                }\n                when(eventLoop.inEventLoop()).thenReturn(true);\n                assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n            }\n            // the first scope is attached to the request context and cleared when that\'s destroyed\n            assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n        }\n    }\n']",Scope;Event;That;Scope;cleared;Trace;the;new;trace;That,1.4551915228366852e-09;7.566995918750763e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.964508555829525e-10;1.8917489796876907e-10,5,5,"[-5.459496974945068, -5.0978169441223145, -5.456954002380371, -6.458641529083252, -5.404263019561768, -0.02091367542743683]",0.9793033599853516
1,['    @Test\n    public void newScope_canClearScope() {\n        try (SafeCloseable requestContextScope = ctx.push()) {\n            try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {\n                try (Scope traceContextScope2 = currentTraceContext.newScope(null)) {\n                    assertThat(currentTraceContext.get()).isNull();\n                }\n                assertThat(currentTraceContext.get()).isEqualTo(traceContext);\n            }\n        }\n    }\n'],tx;request;Scope;new;get;Context;Scope;That;trace;current,6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.485645771026611, -5.037731647491455, -5.432024955749512, -6.46539306640625, -5.430993556976318, -0.021166041493415833]",0.9790563583374023
1,"['    @Test\n    public void newScope_respondsToPing() {\n        final PingPongExtra extra = new PingPongExtra();\n        final TraceContext extraContext = TraceContext.newBuilder().traceId(1).spanId(1)\n                                                      .addExtra(extra).build();\n\n        try (Scope traceContextScope = currentTraceContext.newScope(extraContext)) {\n            assertThat(traceContextScope).hasToString(""NoopScope"");\n            assertThat(extra.isPong()).isTrue();\n        }\n    }\n']",new;Noop;respond;Trace;current;Builder;new;build;Extra;ong,8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.966285243630409e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.523198127746582, -5.0333333015441895, -5.447287559509277, -6.468291282653809, -5.451559066772461, -0.020875968039035797]",0.9793404340744019
1,['    @Test\n    public void shouldSetPongIfOnlyExtra() {\n        final PingPongExtra extra = new PingPongExtra();\n\n        final TraceContext context = TraceContext.newBuilder().traceId(1).spanId(1)\n                                                 .addExtra(extra).build();\n\n        TraceContextUtil.PingPongExtra.maybeSetPong(context);\n\n        assertThat(extra.isPong()).isTrue();\n    }\n'],trace;Context;span;extra;build;context;Only;Set;Trace;ong,6.693881005048752e-10;5.384208634495735e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.524207592010498, -5.004327297210693, -5.440989971160889, -6.477883338928223, -5.47010612487793, -0.020999828353524208]",0.9792191386222839
1,"['    @Test\n    public void notFound() {\n        throw new AssumptionViolatedException(\n                ""Armeria yields \'get /*\' as a span name for a non-existent mapping."");\n    }\n']",existent;throw;name;Assumption;non;Found;yields;span;new;Exception,1.979060471057892e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;5.820766091346741e-11,5,5,"[-5.548330307006836, -4.93294095993042, -5.386852264404297, -6.471698760986328, -5.487680912017822, -0.02159101702272892]",0.9786403775215149
1,"['    @Test\n    public void httpStatusCodeSettable_onUncaughtException() {\n        throw new AssumptionViolatedException(\n            ""Can\'t currently control the HTTP status code on uncaught exception. #2656"");\n    }\n']",Status;Violated;Code;exception;uncaught;throw;Exception;Assumption;Can't;HTTP,2.444721758365631e-09;1.9208528101444244e-09;8.731149137020111e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.1641532182693481e-10,5,5,"[-5.583675861358643, -4.940952301025391, -5.445969104766846, -6.512399196624756, -5.495462894439697, -0.021029945462942123]",0.9791895151138306
1,"['    @Test\n    public void httpStatusCodeSettable_onUncaughtException_async() {\n        throw new AssumptionViolatedException(\n            ""Can\'t currently control the HTTP status code on uncaught exception. #2656"");\n    }\n']",the;Un;Can't;Violated;Assumption;new;throw;async;control;ettable,1.57160684466362e-09;1.0477378964424133e-09;7.275957614183426e-10;6.83940015733242e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.4551915228366852e-10,5,5,"[-5.594523906707764, -4.935298919677734, -5.435327053070068, -6.506674289703369, -5.498809337615967, -0.021071849390864372]",0.9791486263275146
1,['    @AfterEach\n    public void tearDown() {\n        Tracing.current().close();\n    }\n'],current;tear;close;Down;Tracing;After;Each,1.7462298274040222e-09;1.6298145055770874e-09;8.731149137020111e-10;-4.656612873077393e-10;-4.656612873077393e-10;-4.6566128730773926e-09;-9.313225746154785e-09,5,5,"[-5.5982489585876465, -4.916128158569336, -5.4569573402404785, -6.569625377655029, -5.534780025482178, -0.020863942801952362]",0.9793522953987122
1,"['    @Test\n            public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n                return HttpResponse.of(HttpStatus.OK);\n            }\n']",Service;req;Http;Response;Exception;OK;tx;ttp;Context;Request,9.313225746154785e-10;8.149072527885437e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.554056644439697, -4.966103553771973, -5.415136337280273, -6.50051212310791, -5.494588375091553, -0.021123789250850677]",0.9790976643562317
1,"['    @Test\n            public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n                popped.set(true);\n                super.pop(current, toRestore);\n            }\n']",Nullable;pop;Restore;to;to;Restore;Request;Request;pop;super,1.6880221664905548e-09;4.94765117764473e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;5.820766091346741e-11,5,5,"[-5.563602924346924, -4.934844017028809, -5.420407295227051, -6.494444370269775, -5.523802280426025, -0.021177012473344803]",0.9790456295013428
1,['    @Test\n    public void contextLoads() {\n        assertThat(greetingController).isNotNull();\n    }\n'],Null;Load;Not;context;That;reeting;Controller,1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;6.984919309616089e-10;-4.656612873077393e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-5.558842658996582, -4.950579643249512, -5.364767074584961, -6.467903137207031, -5.466034889221191, -0.021623682230710983]",0.9786084294319153
1,['    @Test\n    public void verifyTomcatVersion() {\n        assertThat(TomcatVersion.major()).isEqualTo(tomcatMajorVersion);\n        assertThat(TomcatVersion.minor()).isEqualTo(tomcatMinorVersion);\n    }\n'],verify;Tomcat;Major;qual;tomcat;Tomcat;Tomcat;That;minor;qual,1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0186340659856796e-09;9.022187441587448e-10;8.149072527885437e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.543854236602783, -4.995879173278809, -5.423892021179199, -6.505558490753174, -5.473149299621582, -0.0209992453455925]",0.9792196750640869
1,['    @Test\n    public void verifySingleConnector() {\n        // Relevant to Tomcat 9.0\n        assertThat(applicationContext).isInstanceOf(WebServerApplicationContext.class);\n        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n        assertThat(webServer).isInstanceOf(TomcatWebServer.class);\n        assertThat(((TomcatWebServer) webServer).getTomcat()\n                                                .getEngine()\n                                                .getService()\n                                                .findConnectors()).hasSize(1);\n    }\n'],Relevant;Web;Application;get;Tomcat;Instance;That;Server;Size;Server,5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.1827872842550278e-10,5,5,"[-5.471774101257324, -5.082057952880859, -5.473769664764404, -6.478570461273193, -5.426388263702393, -0.02075512707233429]",0.979458749294281
1,"['    @Test\n    public void greetingShouldReturnDefaultMessage() throws Exception {\n        assertThat(restTemplate.getForObject(""http://localhost:"" +\n                                             httpPort +\n                                             ""/tomcat/api/rest/v1/greeting"",\n                                             String.class))\n                .contains(""Hello, World!"");\n    }\n']",http;Port;Should;greeting;rest;Object;get;World;contains;Return,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.471137046813965, -5.076181411743164, -5.459506511688232, -6.466853618621826, -5.418717861175537, -0.02090982347726822]",0.9793072938919067
1,"['    @Test\n    public void greetingShouldReturnUsersMessage() throws Exception {\n        assertThat(restTemplate.getForObject(""http://localhost:"" +\n                                             httpPort +\n                                             ""/tomcat/api/rest/v1/greeting?name=Armeria"",\n                                             String.class))\n                .contains(""Hello, Armeria!"");\n    }\n']",Hello;That;rest;Object;http;greeting;http;Should;Return;contains,7.450580596923828e-09;4.190951585769653e-09;2.7939677238464355e-09;2.7939677238464355e-09;1.6880221664905548e-09;1.6298145055770874e-09;1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-5.4771857261657715, -5.052093982696533, -5.4409003257751465, -6.462484836578369, -5.4287896156311035, -0.02108258754014969]",0.9791380763053894
1,"['    @Test\n    public void greetingShouldReturn404() throws Exception {\n        assertThat(restTemplate.getForEntity(""http://localhost:"" +\n                                             httpPort +\n                                             ""/tomcat/api/rest/v1/greet"",\n                                             Void.class)\n                               .getStatusCode()).isEqualByComparingTo(HttpStatus.NOT_FOUND);\n    }\n']",Status;Comparing;NOT;rest;Should;That;Return;Void;http;For,2.7939677238464355e-09;2.3865140974521637e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.44761323928833, -5.089487552642822, -5.477621078491211, -6.4751362800598145, -5.407603740692139, -0.02088729292154312]",0.9793293476104736
1,['    @Test\n    public void contextLoads() {\n        assertThat(applicationContext.getBean(ArmeriaAutoConfiguration.class)).isNotNull();\n        assertThatThrownBy(() -> {\n            applicationContext.getBean(ArmeriaReactiveWebServerFactory.class);\n        }).isInstanceOf(BeansException.class);\n    }\n'],Load;Bean;application;Armeria;Server;get;Not;That;By;Beans,2.0954757928848267e-09;9.313225746154785e-10;7.8580342233181e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.499823093414307, -5.018133163452148, -5.453645706176758, -6.523657321929932, -5.447699069976807, -0.02097799815237522]",0.9792405366897583
1,['    @Test\n    public void contextLoads() {\n        assertThat(applicationContext.getBean(ArmeriaReactiveWebServerFactory.class)).isNotNull();\n        assertThatThrownBy(() -> {\n            applicationContext.getBean(ArmeriaAutoConfiguration.class);\n        }).isInstanceOf(BeansException.class);\n    }\n'],Bean;Armeria;Configuration;context;Exception;application;Bean;Not;Auto;Instance,7.566995918750763e-10;7.275957614183426e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.494427680969238, -5.0244646072387695, -5.449838161468506, -6.519165515899658, -5.436639308929443, -0.02103029564023018]",0.9791892766952515
1,"['    @Test(expected = NotAllMetaRegionsOnlineException.class)\n    public void testGuavaConflict() throws Exception {\n        // Make sure Armeria is available in the class path.\n        assertThat(Version.getAll(Server.class.getClassLoader())).isNotNull();\n        // Make sure newer Guava is available in the class path.\n        assertThat(Stopwatch.class.getDeclaredConstructor().getModifiers()).is(new Condition<>(\n                value -> !Modifier.isPublic(value),\n                ""Recent Guava Stopwatch should have non-public default constructor.""));\n\n        final MetaTableLocator locator = new MetaTableLocator();\n        final ZooKeeperWatcher zkw = mock(ZooKeeperWatcher.class);\n        final RecoverableZooKeeper zk = mock(RecoverableZooKeeper.class);\n        when(zkw.getRecoverableZooKeeper()).thenReturn(zk);\n        when(zk.exists(any(), any())).thenReturn(new Stat(0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0));\n\n        locator.waitMetaRegionLocation(zkw, 100);\n    }\n']",Condition;Guava;expected;Loader;Region;Constructor;exists;Locator;Modifiers;when,1.862645149230957e-09;1.6880221664905548e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;6.548361852765083e-10;6.402842700481415e-10;6.257323548197746e-10,5,5,"[-5.5243401527404785, -4.839909553527832, -5.345223426818848, -6.434279918670654, -5.493605613708496, -0.022640084847807884]",0.9776142835617065
1,"['    @Test\n    public void normal() {\n        try (ClientFactory clientFactory =\n                     ClientFactory.builder()\n                                  .tlsCustomizer(ctx -> ctx.keyManager(clientCert.certificateFile(),\n                                                                       clientCert.privateKeyFile()))\n                                  .tlsNoVerify()\n                                  .build()) {\n            final WebClient client = WebClient.builder(rule.httpsUri())\n                                              .factory(clientFactory)\n                                              .decorator(LoggingClient.builder().newDecorator())\n                                              .build();\n            assertThat(client.get(""/"").aggregate().join().status()).isEqualTo(HttpStatus.OK);\n        }\n    }\n']",File;Decorator;client;That;Manager;OK;Logging;Status;builder;final,1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.92901711165905e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.454071998596191, -5.09343957901001, -5.426260471343994, -6.436233997344971, -5.4284281730651855, -0.021027259528636932]",0.9791923761367798
1,"['    @Test\n    public void proxyWithTrailers() throws Throwable {\n        final WebClient client = WebClient.of(frontendServer.httpUri());\n\n        final AtomicBoolean headersReceived = new AtomicBoolean();\n        final AtomicBoolean complete = new AtomicBoolean();\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        client.get(""/trailers"").subscribe(new Subscriber<HttpObject>() {\n            @Override\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n']",Web;Subscriber;trailers;Received;subscribe;on;proxy;MAX;Subscription;Object,1.3969838619232178e-09;1.1350493878126144e-09;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10,5,5,"[-5.499569892883301, -5.009740352630615, -5.396120548248291, -6.473439693450928, -5.4749555587768555, -0.02125392109155655]",0.9789703488349915
1,"['    @Test\n    public void proxyWithTrailersOnly() throws Throwable {\n        final WebClient client = WebClient.of(frontendServer.httpUri());\n\n        final AtomicBoolean complete = new AtomicBoolean();\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        client.get(""/trailers-only"").subscribe(new Subscriber<HttpObject>() {\n            @Override\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n']",Subscriber;Atomic;Boolean;Subscription;new;on;trailers;final;Subscribe;Throwable,1.9208528101444244e-09;9.313225746154785e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.4701457023620605, -5.030791282653809, -5.3687944412231445, -6.435963153839111, -5.450019836425781, -0.02153315208852291]",0.9786969423294067
1,"['    @Test\n        public void onSettingsRead(ChannelHandlerContext ctx, Http2Settings settings) {\n            assertThat(settings.pushEnabled()).isFalse();\n        }\n']",Channel;on;ttp;Enabled;Handler;push;Settings;tx;Context;Settings,1.3969838619232178e-09;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.584545612335205, -4.894234657287598, -5.393634796142578, -6.503726005554199, -5.503547668457031, -0.021592067554593086]",0.9786393642425537
1,"['    @Test\n    public void testExtractHost() {\n        // additionalRequestHeaders has the highest precedence.\n        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, ""foo"")),\n                               HttpRequest.of(RequestHeaders.of(HttpMethod.GET, ""/"",\n                                                                HttpHeaderNames.AUTHORITY, ""bar:8080"")),\n                               Endpoint.of(""baz"", 8080))).isEqualTo(""foo"");\n\n        // Request header\n        assertThat(extractHost(context(HttpHeaders.of()),\n                               HttpRequest.of(RequestHeaders.of(HttpMethod.GET, ""/"",\n                                                                HttpHeaderNames.AUTHORITY, ""bar:8080"")),\n                               Endpoint.of(""baz"", 8080))).isEqualTo(""bar"");\n\n        // Endpoint.host() has the lowest precedence.\n        assertThat(extractHost(context(HttpHeaders.of()),\n                               HttpRequest.of(HttpMethod.GET, ""/""),\n                               Endpoint.of(""baz"", 8080))).isEqualTo(""baz"");\n\n        // IPv6 address authority\n        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, ""[::1]:8443"")),\n                               HttpRequest.of(HttpMethod.GET, ""/""),\n                               Endpoint.of(""baz"", 8080))).isEqualTo(""::1"");\n\n        // An invalid authority should be ignored.\n        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, ""[::1"")),\n                               HttpRequest.of(HttpMethod.GET, ""/""),\n                               Endpoint.of(""baz"", 8080))).isEqualTo(""baz"");\n\n        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, "":8080"")),\n                               HttpRequest.of(HttpMethod.GET, ""/""),\n                               Endpoint.of(""baz"", 8080))).isEqualTo(""baz"");\n\n        // If additionalRequestHeader\'s authority is invalid but req.authority() is valid,\n        // use the authority from \'req\'.\n        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, ""[::1"")),\n                               HttpRequest.of(RequestHeaders.of(HttpMethod.GET, ""/"",\n                                                                HttpHeaderNames.AUTHORITY, ""bar"")),\n                               Endpoint.of(""baz"", 8080))).isEqualTo(""bar"");\n\n        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, "":8080"")),\n                               HttpRequest.of(RequestHeaders.of(HttpMethod.GET, ""/"",\n                                                                HttpHeaderNames.AUTHORITY, ""bar"")),\n                               Endpoint.of(""baz"", 8080))).isEqualTo(""bar"");\n    }\n']",Request;foo;additional;of;Endpoint;of;ttp;Request;of;precedence,6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.355073928833008, -5.141508102416992, -5.483274936676025, -6.4491753578186035, -5.347593784332275, -0.021295232698321342]",0.9789299368858337
1,"['    @Test\n            public void connectionOpen(SessionProtocol protocol, InetSocketAddress remoteAddr,\n                                       InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n                openRunnable.run();\n            }\n']",Session;open;Address;Inet;able;Add;Address;local;attrs;Inet,5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;3.055902197957039e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.4551915228366852e-10,5,5,"[-5.559652805328369, -4.969186305999756, -5.3918585777282715, -6.448550701141357, -5.52305793762207, -0.02115098387002945]",0.9790711402893066
1,"['    @Test\n        public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n            // Will never reach here.\n            throw new Error();\n        }\n']",req;tx;ttp;Response;here;Context;Request;new;throw;Client,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.529727786779404e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10,5,5,"[-5.563965797424316, -4.881690979003906, -5.382835865020752, -6.486926078796387, -5.505645751953125, -0.021836213767528534]",0.978400468826294
1,['    @Test\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n'],request;Long;VALUE;MAX;Subscribe;on;Subscription,7.2177499532699585e-09;6.51925802230835e-09;6.51925802230835e-09;1.6298145055770874e-09;0.0;-1.0244548320770264e-08;-1.1175870895385742e-08,5,5,"[-5.5645318031311035, -5.030618667602539, -5.414861679077148, -6.4988298416137695, -5.4802775382995605, -0.02070235088467598]",0.9795106053352356
1,['    @Test\n    public void notEmpty() {\n        final StreamDecoder decoder = newDecoder();\n        final ByteBuf buf = ByteBufAllocator.DEFAULT.buffer();\n        buf.writeBytes(PAYLOAD);\n        final HttpData data = decoder.decode(HttpData.wrap(buf));\n        assertThat(buf.refCnt()).isZero();\n        assertThat(data.byteBuf().refCnt()).isOne();\n        data.close();\n    }\n'],Empty;Decoder;ttp;Http;final;Zero;decoder;ref;buf;write,9.313225746154785e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.512508869171143, -5.024477958679199, -5.444084644317627, -6.4982757568359375, -5.466712474822998, -0.020880404859781265]",0.9793360829353333
1,['    @Test\n    public void empty_unpooled() {\n        final StreamDecoder decoder = newDecoder();\n        final HttpData data = decoder.decode(HttpData.empty());\n        assertThat(data.isPooled()).isFalse();\n    }\n'],empty;data;Data;new;final;data;decoder;Decoder;ttp;decoder,1.979060471057892e-09;1.0186340659856796e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;4.656612873077393e-10;4.220055416226387e-10,5,5,"[-5.558933734893799, -4.952487945556641, -5.411455154418945, -6.507821083068848, -5.477846145629883, -0.021278662607073784]",0.9789461493492126
1,"[""    @Test\n    public void empty_pooled() {\n        final StreamDecoder decoder = newDecoder();\n        final ByteBuf buf = ByteBufAllocator.DEFAULT.buffer();\n        final HttpData data = decoder.decode(HttpData.wrap(buf));\n        assertThat(buf.refCnt()).isZero();\n\n        // Even for a pooled empty input, the result is unpooled since there's no point in pooling empty\n        // buffers.\n        assertThat(data.isPooled()).isFalse();\n    }\n""]",Http;point;Allocator;new;unpooled;empty;pooling;empty;That;uf,8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.311449058353901e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.5113654136657715, -5.051451206207275, -5.421489715576172, -6.492565155029297, -5.445206642150879, -0.02090982347726822]",0.9793071746826172
1,"['    @Test\n    public void testPropertyFileWatcherRunnableExitsOnInterrupt() throws InterruptedException {\n        final WatchService watchService = mock(WatchService.class);\n        final FileWatcherRunnable fileWatcherRunnable = new FileWatcherRunnable(watchService, mock(\n                FileSystemWatchContext.class));\n        when(watchService.take()).then(invocation -> {\n            while (!Thread.currentThread().isInterrupted()) {\n                Thread.yield();\n            }\n            return null;\n        });\n        final Thread thread = new Thread(fileWatcherRunnable);\n        thread.start();\n        thread.interrupt();\n        await().untilAsserted(() -> assertThat(thread.isAlive()).isFalse());\n    }\n']",False;thread;Asserted;Service;Thread;until;atcher;mock;Interrupted;Watch,9.313225746154785e-09;4.6566128730773926e-09;2.561137080192566e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10,5,5,"[-5.498017311096191, -4.990814208984375, -5.399336338043213, -6.453317165374756, -5.471696853637695, -0.02142184227705002]",0.9788059592247009
1,['    @Test\n            public Endpoint selectNow(ClientRequestContext ctx) {\n                final List<Endpoint> endpoints = endpointGroup.endpoints();\n                return endpoints.isEmpty() ? null : endpoints.get(0);\n            }\n'],final;Empty;tx;Client;Context;endpoint;null;Endpoint;return;select,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10;8.731149137020111e-11;8.731149137020111e-11,5,5,"[-5.537890911102295, -4.966894149780273, -5.406711578369141, -6.492222785949707, -5.494660377502441, -0.021233614534139633]",0.9789902567863464
1,"['    @Test\n    public void testGetEndpointGroupName() throws Exception {\n        assertNull(getEndpointGroupName(""http://myGroupName/""));\n        assertNull(getEndpointGroupName(""http://myGroupName:8080/xxx""));\n        assertNull(getEndpointGroupName(""http://group1:myGroupName:8080/""));\n        assertNull(getEndpointGroupName(""http://username:password@myGroupName:8080/""));\n\n        assertEquals(""myGroupName"", getEndpointGroupName(""http://"" + endpointGroupMark + ""myGroupName/""));\n        assertEquals(""myGroupName"", getEndpointGroupName(""http://"" + endpointGroupMark + ""myGroupName:8080/""));\n        assertEquals(""myGroupName"", getEndpointGroupName(""http://"" + endpointGroupMark + ""myGroupName:8080/""));\n        assertEquals(""myGroupName"", getEndpointGroupName(""http://username:password@"" + endpointGroupMark +\n                                                         ""myGroupName:8080/""));\n    }\n']",Exception;xxx;Get;Endpoint;Null;Name;Endpoint;endpoint;get;my,9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.4234538078308105, -5.109660625457764, -5.474697589874268, -6.4618425369262695, -5.386266231536865, -0.021001461893320084]",0.979217529296875
1,"['    @Test\n    public void testReplace() throws Exception {\n        final String replacement = ""127.0.0.1:1234"";\n        assertEquals(""http://myGroupName/"",\n                     replaceEndpointGroup(""http://myGroupName/"", replacement));\n        assertEquals(""http://myGroupName:8080/xxx"",\n                     replaceEndpointGroup(""http://myGroupName:8080/xxx"", replacement));\n        assertEquals(""http://group1:myGroupName:8080/"",\n                     replaceEndpointGroup(""http://group1:myGroupName:8080/"", replacement));\n        assertEquals(""http://username:password@myGroupName:8080/"",\n                     replaceEndpointGroup(""http://username:password@myGroupName:8080/"", replacement));\n\n        assertEquals(""http://127.0.0.1:1234/"",\n                     replaceEndpointGroup(""http://"" + endpointGroupMark + ""myGroupName/"", replacement));\n        assertEquals(""http://127.0.0.1:1234/"",\n                     replaceEndpointGroup(""http://"" + endpointGroupMark + ""myGroupName:8080/"", replacement));\n        assertEquals(""http://127.0.0.1:1234/xxx"",\n                     replaceEndpointGroup(""http://"" + endpointGroupMark + ""myGroupName:8080/xxx"", replacement));\n        assertEquals(""http://username:password@127.0.0.1:1234/xxx"",\n                     replaceEndpointGroup(""http://username:password@"" + endpointGroupMark +\n                                          ""myGroupName:8080/xxx"", replacement));\n    }\n']",replace;endpoint;http;Mark;replacement;Group;replace;replace;Group;replace,8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10,5,5,"[-5.470179080963135, -4.9549880027771, -5.4055070877075195, -6.452753067016602, -5.4768805503845215, -0.021743718534708023]",0.9784910678863525
1,"['    @Test\n        public int compare(Endpoint o1, Endpoint o2) {\n            if (o1.equals(o2) && o1.weight() == o2.weight()) {\n                return 0;\n            }\n            return -1;\n        }\n']",return;if;return;equals;weight;Endpoint;Endpoint;weight;compare,1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;-5.820766091346741e-11;-1.7462298274040222e-10;-4.656612873077393e-10;-8.731149137020111e-10;-1.0477378964424133e-09;-1.6298145055770874e-09,5,5,"[-5.5367865562438965, -4.97179651260376, -5.4206438064575195, -6.484048843383789, -5.508424282073975, -0.021095193922519684]",0.9791257381439209
1,"['    @Test\n    public void testRestartableThreadRestartBehavior() {\n        final RestartableThread restartableThread =\n                new RestartableThread(testName.getMethodName(), () -> () -> {\n                    while (!Thread.currentThread().isInterrupted()) {\n                        Thread.yield();\n                    }\n                });\n\n        restartableThread.start();\n        assertThat(restartableThread.isRunning()).isTrue();\n        restartableThread.stop();\n        assertThat(restartableThread.isRunning()).isFalse();\n        restartableThread.start();\n        assertThat(restartableThread.isRunning()).isTrue();\n        restartableThread.stop();\n        assertThat(restartableThread.isRunning()).isFalse();\n    }\n']",Method;Thread;Restartable;restartable;get;Thread;restartable;ield;Thread;restartable,1.280568540096283e-09;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7471181713044643e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.837623469531536e-10,5,5,"[-5.479071617126465, -5.027108669281006, -5.492476940155029, -6.529266834259033, -5.482901573181152, -0.02067829668521881]",0.9795340299606323
1,"['    @Test\n    public void emptyGroupStopsBackgroundThread() throws Exception {\n\n        final File file = folder.newFile(""temp-file.properties"");\n        final File file2 = folder.newFile(""temp-file2.properties"");\n\n        final FileWatcherRegistry fileWatcherRegistry =\n                new FileWatcherRegistry();\n        final FileWatchRegisterKey key1 = fileWatcherRegistry.register(file.toPath(), () -> {});\n        final FileWatchRegisterKey key2 = fileWatcherRegistry.register(file2.toPath(), () -> {});\n\n        assertThat(fileWatcherRegistry.isRunning()).isTrue();\n\n        fileWatcherRegistry.unregister(key1);\n\n        assertThat(fileWatcherRegistry.isRunning()).isTrue();\n\n        fileWatcherRegistry.unregister(key2);\n\n        assertThat(fileWatcherRegistry.isRunning()).isFalse();\n    }\n']",Group;Background;Thread;Watch;final;final;file;unregister;register;to,5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.492352485656738, -5.022977828979492, -5.414911270141602, -6.4539642333984375, -5.458893299102783, -0.021208640187978745]",0.9790146946907043
1,"['    @Test\n    public void closeEndpointGroupStopsRegistry() throws Exception {\n\n        final File file = folder.newFile(""temp-file.properties"");\n\n        final FileWatcherRegistry fileWatcherRegistry = new FileWatcherRegistry();\n        fileWatcherRegistry.register(file.toPath(), () -> {});\n\n        assertThat(fileWatcherRegistry.isRunning()).isTrue();\n\n        fileWatcherRegistry.close();\n\n        assertThat(fileWatcherRegistry.isRunning()).isFalse();\n    }\n']",folder;file;register;properties;False;final;atcher;True;Exception;Registry,6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.525242805480957, -5.009302139282227, -5.448078155517578, -6.506707668304443, -5.477012634277344, -0.02085612155497074]",0.9793597459793091
1,"['    @Test\n    public void runnableWithExceptionContinuesRun() throws Exception {\n\n        final File file = folder.newFile(""temp-file.properties"");\n        final FileWatcherRegistry fileWatcherRegistry = new FileWatcherRegistry();\n\n        final AtomicInteger val = new AtomicInteger(0);\n        final FileWatchRegisterKey key = fileWatcherRegistry.register(file.toPath(), () -> {\n            try {\n                final BufferedReader bufferedReader = new BufferedReader(new FileReader(file));\n                val.set(Integer.valueOf(bufferedReader.readLine()));\n            } catch (IOException e) {\n                // do nothing\n            }\n            throw new RuntimeException();\n        });\n\n        PrintWriter printWriter = new PrintWriter(file);\n        printWriter.print(1);\n        printWriter.close();\n\n        await().untilAsserted(() -> assertThat(val.get()).isEqualTo(1));\n\n        assertThat(fileWatcherRegistry.isRunning()).isTrue();\n\n        printWriter = new PrintWriter(file);\n        printWriter.print(2);\n        printWriter.close();\n\n        await().untilAsserted(() -> assertThat(val.get()).isEqualTo(2));\n\n        assertThat(fileWatcherRegistry.isRunning()).isTrue();\n\n        fileWatcherRegistry.unregister(key);\n\n        assertThat(fileWatcherRegistry.isRunning()).isFalse();\n\n        fileWatcherRegistry.close();\n    }\n']",Atomic;qual;properties;Run;unregister;register;await;final;throw;atcher,7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.476686477661133, -5.031495094299316, -5.419296741485596, -6.462405204772949, -5.4803009033203125, -0.021092509850859642]",0.979128360748291
1,"['    @Test\n    public void testMultipleFileSystems() throws Exception {\n\n        final FileWatcherRegistry fileWatcherRegistry = new FileWatcherRegistry();\n\n        final Path path1 = createMockedPath();\n        final Path path2 = createMockedPath();\n\n        final FileWatchRegisterKey key1 = fileWatcherRegistry.register(path1, () -> {});\n        final FileWatchRegisterKey key2 = fileWatcherRegistry.register(path2, () -> {});\n        assertThat(fileWatcherRegistry.isRunning()).isTrue();\n\n        fileWatcherRegistry.unregister(key1);\n        assertThat(fileWatcherRegistry.isRunning()).isTrue();\n\n        fileWatcherRegistry.unregister(key2);\n        assertThat(fileWatcherRegistry.isRunning()).isFalse();\n    }\n']",ocked;Multiple;ocked;atcher;register;atcher;final;create;System;Path,1.1641532182693481e-09;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.512401103973389, -5.04429817199707, -5.428844928741455, -6.4838337898254395, -5.462140083312988, -0.020859040319919586]",0.9793570041656494
1,['    @Test\n        public void updateCandidates(List<Endpoint> candidates) {\n            this.candidates = candidates;\n            selectedCandidates = ImmutableList.copyOf(candidates);\n        }\n'],Candidates;candidates;Immutable;candidates;copy;Candidates;candidates;selected;List;update,2.270098775625229e-09;6.984919309616089e-10;6.984919309616089e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;2.9103830456733704e-11;-1.1641532182693481e-10;-1.4551915228366852e-10,5,5,"[-5.550787448883057, -4.909482955932617, -5.350565433502197, -6.464616298675537, -5.491876125335693, -0.02192240208387375]",0.9783161282539368
1,"['    @Test\n    public void propertiesWithoutDefaultPort() {\n        final PropertiesEndpointGroup endpointGroup = PropertiesEndpointGroup.of(PROPS, ""serverA.hosts"");\n\n        assertThat(endpointGroup.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),\n                                                                        Endpoint.parse(""127.0.0.1:8081""),\n                                                                        Endpoint.parse(""127.0.0.1""));\n    }\n']",properties;parse;server;Group;Endpoint;Exactly;Order;Endpoint;Endpoint;endpoints,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-5.461570739746094, -5.071301460266113, -5.460829257965088, -6.450901031494141, -5.41952657699585, -0.020998427644371986]",0.9792205095291138
1,"['    @Test\n    public void propertiesWithDefaultPort() {\n        final PropertiesEndpointGroup endpointGroupA = PropertiesEndpointGroup.builder(PROPS, ""serverA.hosts"")\n                                                                              .defaultPort(80)\n                                                                              .build();\n        final PropertiesEndpointGroup endpointGroupB = PropertiesEndpointGroup.builder(PROPS, ""serverB.hosts"")\n                                                                              .defaultPort(8080)\n                                                                              .build();\n\n        assertThat(endpointGroupA.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),\n                                                                         Endpoint.parse(""127.0.0.1:8081""),\n                                                                         Endpoint.parse(""127.0.0.1:80""));\n        assertThat(endpointGroupB.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8082""),\n                                                                         Endpoint.parse(""127.0.0.1:8083""));\n    }\n']",That;builder;PROPS;Default;build;endpoint;Endpoint;Properties;contains;Group,8.149072527885437e-10;7.8580342233181e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.128661774098873e-10;2.9103830456733704e-10,5,5,"[-5.412209510803223, -5.108604907989502, -5.459916114807129, -6.433969497680664, -5.404179573059082, -0.02108468860387802]",0.979136049747467
1,"['    @Test\n    public void resourceWithoutDefaultPort() {\n        final PropertiesEndpointGroup endpointGroup = PropertiesEndpointGroup.of(\n                getClass().getClassLoader(), ""server-list.properties"", ""serverA.hosts"");\n\n        assertThat(endpointGroup.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),\n                                                                        Endpoint.parse(""127.0.0.1:8081""),\n                                                                        Endpoint.parse(""127.0.0.1""));\n    }\n']",Loader;Without;Exactly;list;parse;resource;Default;properties;Properties;Endpoint,9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.4504523277282715, -5.080313682556152, -5.47723388671875, -6.467623233795166, -5.422772407531738, -0.02087736874818802]",0.979339063167572
1,"['    @Test\n    public void resourceWithDefaultPort() {\n        final PropertiesEndpointGroup endpointGroupA =\n                PropertiesEndpointGroup.builder(getClass().getClassLoader(),\n                                                ""server-list.properties"",\n                                                ""serverA.hosts"")\n                                       .defaultPort(80)\n                                       .build();\n\n        final PropertiesEndpointGroup endpointGroupB =\n                PropertiesEndpointGroup.builder(getClass().getClassLoader(),\n                                                ""server-list.properties"",\n                                                ""serverB.hosts"")\n                                       .defaultPort(8080)\n                                       .build();\n\n        assertThat(endpointGroupA.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),\n                                                                         Endpoint.parse(""127.0.0.1:8081""),\n                                                                         Endpoint.parse(""127.0.0.1:80""));\n        assertThat(endpointGroupB.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8082""),\n                                                                         Endpoint.parse(""127.0.0.1:8083""));\n    }\n']",Loader;resource;Endpoint;Port;final;server;Group;Group;get;Class,1.862645149230957e-09;1.3387762010097504e-09;9.89530235528946e-10;8.87666828930378e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.3972859382629395, -5.115407943725586, -5.480226039886475, -6.471680641174316, -5.399399757385254, -0.020985353738069534]",0.9792333245277405
1,"['    @Test\n    public void pathWithDefaultPort() throws Exception {\n        final URL resourceUrl = getClass().getClassLoader().getResource(""server-list.properties"");\n        assert resourceUrl != null;\n        final Path resourcePath = new File(resourceUrl.getFile()).toPath();\n        final PropertiesEndpointGroup endpointGroupA = PropertiesEndpointGroup.builder(\n                resourcePath, ""serverA.hosts"").defaultPort(80).build();\n        assertThat(endpointGroupA.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),\n                                                                         Endpoint.parse(""127.0.0.1:8081""),\n                                                                         Endpoint.parse(""127.0.0.1:80""));\n        endpointGroupA.close();\n    }\n']",parse;Order;Endpoint;endpoint;default;Endpoint;Endpoint;Properties;final;final,2.3283064365386963e-09;1.3969838619232178e-09;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.346940502524376e-10;2.9831426218152046e-10,5,5,"[-5.446044921875, -5.07764196395874, -5.444094181060791, -6.461710453033447, -5.444754600524902, -0.020969126373529434]",0.9792492985725403
1,"['    @Test\n    public void pathWithoutDefaultPort() {\n        final URL resourceUrl = getClass().getClassLoader().getResource(""server-list.properties"");\n        assert resourceUrl != null;\n        final Path resourcePath = new File(resourceUrl.getFile()).toPath();\n        final PropertiesEndpointGroup endpointGroup = PropertiesEndpointGroup.of(\n                resourcePath, ""serverA.hosts"");\n        assertThat(endpointGroup.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),\n                                                                        Endpoint.parse(""127.0.0.1:8081""),\n                                                                        Endpoint.parse(""127.0.0.1""));\n        endpointGroup.close();\n    }\n']",parse;parse;Exactly;close;Loader;Class;server;That;to;Any,9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.467865467071533, -5.031813144683838, -5.416901111602783, -6.439373016357422, -5.456405162811279, -0.02127912826836109]",0.9789456725120544
1,"['    @Test\n    public void testWithPrefixThatEndsWithDot() {\n        final PropertiesEndpointGroup endpointGroup = PropertiesEndpointGroup.of(\n                getClass().getClassLoader(), ""server-list.properties"", ""serverA.hosts."");\n\n        assertThat(endpointGroup.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),\n                                                                        Endpoint.parse(""127.0.0.1:8081""),\n                                                                        Endpoint.parse(""127.0.0.1""));\n    }\n']",Loader;endpoints;server;Order;End;get;Group;list;Endpoint;properties,2.7939677238464355e-09;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.453347682952881, -5.078151702880859, -5.464072227478027, -6.458763122558594, -5.418282508850098, -0.02096947655081749]",0.9792488813400269
1,"['    @Test\n    public void containsNoHosts() {\n        assertThat(PropertiesEndpointGroup.builder(getClass().getClassLoader(),\n                                                   ""server-list.properties"", ""serverC.hosts"")\n                                          .defaultPort(8080)\n                                          .build()\n                                          .endpoints()).isEmpty();\n    }\n']",Group;Class;server;That;get;get;Port;Endpoint;endpoints;builder,7.130438461899757e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;1.6007106751203537e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.479369640350342, -5.08809232711792, -5.489803791046143, -6.4829535484313965, -5.423037052154541, -0.02062458172440529]",0.979586660861969
1,"['    @Test\n    public void illegalDefaultPort() {\n        assertThatThrownBy(() -> PropertiesEndpointGroup.builder(getClass().getClassLoader(),\n                                                                 ""server-list.properties"", ""serverA.hosts"")\n                                                        .defaultPort(0))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessageContaining(""defaultPort"");\n    }\n']",builder;Loader;Properties;Default;illegal;properties;Class;Argument;get;host,2.5029294192790985e-09;1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.460629463195801, -5.073078632354736, -5.490757942199707, -6.48579216003418, -5.424734592437744, -0.02078443393111229]",0.979430079460144
1,"['    @Test\n    public void propertiesFileUpdatesCorrectly() throws Exception {\n        final File file = folder.newFile(""temp-file.properties"");\n\n        PrintWriter printWriter = new PrintWriter(file);\n        Properties props = new Properties();\n        props.setProperty(""serverA.hosts.0"", ""127.0.0.1:8080"");\n        props.store(printWriter, """");\n        printWriter.close();\n\n        final PropertiesEndpointGroup endpointGroupA = PropertiesEndpointGroup.of(\n                file.toPath(), ""serverA.hosts"");\n\n        await().untilAsserted(() -> assertThat(endpointGroupA.endpoints()).hasSize(1));\n\n        // Update resource\n        printWriter = new PrintWriter(file);\n        props = new Properties();\n        props.setProperty(""serverA.hosts.0"", ""127.0.0.1:8080"");\n        props.setProperty(""serverA.hosts.1"", ""127.0.0.1:8081"");\n        props.store(printWriter, """");\n        printWriter.close();\n\n        await().untilAsserted(() -> assertThat(endpointGroupA.endpoints()).hasSize(2));\n\n        endpointGroupA.close();\n    }\n']",Asserted;await;until;Endpoint;That;until;File;final;await;properties,3.259629011154175e-09;1.862645149230957e-09;1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10,5,5,"[-5.494100570678711, -5.0312933921813965, -5.4214019775390625, -6.4414496421813965, -5.464233875274658, -0.021113401278853416]",0.9791080355644226
1,"['    @Test\n    public void duplicateResourceUrl() throws IOException {\n        final File file = folder.newFile(""temp-file.properties"");\n        final PropertiesEndpointGroup propertiesEndpointGroupA =\n                PropertiesEndpointGroup.of(file.toPath(), ""serverA.hosts"");\n        final PropertiesEndpointGroup propertiesEndpointGroupB =\n                PropertiesEndpointGroup.of(file.toPath(), ""serverA.hosts"");\n        propertiesEndpointGroupA.close();\n        propertiesEndpointGroupB.close();\n    }\n']",temp;Properties;IOException;to;Endpoint;Group;File;file;Endpoint;close,9.89530235528946e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10,5,5,"[-5.485159397125244, -5.060600757598877, -5.484279632568359, -6.493405342102051, -5.4601263999938965, -0.02061874233186245]",0.979592502117157
1,"['    @Test\n    public void propertiesFileRestart() throws Exception {\n        final File file = folder.newFile(""temp-file.properties"");\n\n        PrintWriter printWriter = new PrintWriter(file);\n        Properties props = new Properties();\n        props.setProperty(""serverA.hosts.0"", ""127.0.0.1:8080"");\n        props.store(printWriter, """");\n        printWriter.close();\n\n        final PropertiesEndpointGroup endpointGroupA = PropertiesEndpointGroup.of(\n                file.toPath(), ""serverA.hosts"");\n        await().untilAsserted(() -> assertThat(endpointGroupA.endpoints()).hasSize(1));\n        endpointGroupA.close();\n\n        final PropertiesEndpointGroup endpointGroupB = PropertiesEndpointGroup.of(\n                file.toPath(), ""serverB.hosts"");\n        await().untilAsserted(() -> assertThat(endpointGroupB.endpoints()).isEmpty());\n\n        printWriter = new PrintWriter(file);\n        props = new Properties();\n        props.setProperty(""serverB.hosts.0"", ""127.0.0.1:8080"");\n        props.setProperty(""serverB.hosts.1"", ""127.0.0.1:8081"");\n        props.store(printWriter, """");\n        printWriter.close();\n\n        await().untilAsserted(() -> assertThat(endpointGroupB.endpoints()).hasSize(2));\n        endpointGroupB.close();\n    }\n']",temp;Restart;Print;Writer;await;Writer;Group;print;Exception;Path,6.984919309616089e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.406975269317627, -5.124766826629639, -5.451443195343018, -6.460097789764404, -5.408745765686035, -0.020983368158340454]",0.9792352318763733
1,"['    @Test\n    public void endpointChangePropagatesToListeners() throws Exception {\n        final File file = folder.newFile(""temp-file.properties"");\n\n        PrintWriter printWriter = new PrintWriter(file);\n        Properties props = new Properties();\n        props.setProperty(""serverA.hosts.0"", ""127.0.0.1:8080"");\n        props.setProperty(""serverA.hosts.1"", ""127.0.0.1:8081"");\n        props.store(printWriter, """");\n        printWriter.close();\n\n        final PropertiesEndpointGroup propertiesEndpointGroup = PropertiesEndpointGroup.of(\n                file.toPath(), ""serverA.hosts"");\n        final EndpointGroup fallbackEndpointGroup = Endpoint.of(""127.0.0.1"", 8081);\n        final EndpointGroup endpointGroup = propertiesEndpointGroup.orElse(fallbackEndpointGroup);\n\n        await().untilAsserted(() -> assertThat(endpointGroup.endpoints()).hasSize(2));\n\n        printWriter = new PrintWriter(file);\n        props = new Properties();\n        props.store(printWriter, """");\n        printWriter.close();\n\n        await().untilAsserted(() -> assertThat(endpointGroup.endpoints()).hasSize(1));\n\n        printWriter = new PrintWriter(file);\n        props = new Properties();\n        props.setProperty(""serverA.hosts.0"", ""127.0.0.1:8080"");\n        props.setProperty(""serverA.hosts.1"", ""127.0.0.1:8081"");\n        props.setProperty(""serverA.hosts.2"", ""127.0.0.1:8082"");\n        props.store(printWriter, """");\n        printWriter.close();\n\n        await().untilAsserted(() -> assertThat(endpointGroup.endpoints()).hasSize(3));\n        propertiesEndpointGroup.close();\n    }\n']",endpoint;fallback;Change;server;Endpoint;Endpoint;has;Properties;temp;host,1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.330083124339581e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.4255194664001465, -5.104175090789795, -5.449567794799805, -6.470608234405518, -5.434213638305664, -0.020902119576931]",0.9793148040771484
1,"['    @Test\n    public void ipV4Only() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""foo.com."", A),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""foo.com."", ""1.1.1.1""))\n                                         .addRecord(ANSWER, newAddressRecord(""unrelated.com"", ""1.2.3.4"")),\n                new DefaultDnsQuestion(""foo.com."", AAAA),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""foo.com."", ""::1""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""foo.com"")\n                                                .port(8080)\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY)\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""foo.com"", 8080).withIpAddr(""1.1.1.1""));\n            }\n        }\n    }\n']",Server;Immutable;Address;Addresses;ns;Response;Address;port;ns;Resolved,1.862645149230957e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.1059455573558807e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10,5,5,"[-5.408287525177002, -5.101073741912842, -5.422403335571289, -6.444708347320557, -5.407707691192627, -0.02128157950937748]",0.9789431691169739
1,"['    @Test\n    public void ipV6Only() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""bar.com."", A),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""bar.com."", ""1.1.1.1"")),\n                new DefaultDnsQuestion(""bar.com."", AAAA),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""bar.com."", ""::1""))\n                                         .addRecord(ANSWER, newAddressRecord(""bar.com."", ""::1234:5678:90ab""))\n                                         .addRecord(ANSWER, newAddressRecord(""bar.com."",\n                                                                             ""2404:6800:4004:806::2013""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""bar.com"")\n                                                .port(8080)\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV6_ONLY)\n                                                .build()) {\n\n                assertThat(group.whenReady().get(10, TimeUnit.SECONDS)).containsExactly(\n                        Endpoint.of(""bar.com"", 8080).withIpAddr(""2404:6800:4004:806::2013""),\n                        Endpoint.of(""bar.com"", 8080).withIpAddr(""::1""),\n                        Endpoint.of(""bar.com"", 8080).withIpAddr(""::1234:5678:90ab""));\n            }\n        }\n    }\n']",Default;new;ns;Address;ANSWER;Immutable;ANSWER;Group;ns;Response,8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.399336814880371, -5.103336334228516, -5.442083835601807, -6.442139148712158, -5.400579929351807, -0.02125777304172516]",0.9789665937423706
1,"['    @Test\n    public void ipV4AndIpV6() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""baz.com."", A),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""baz.com."", ""1.1.1.1"")),\n                new DefaultDnsQuestion(""baz.com."", AAAA),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""baz.com."", ""::1""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""baz.com"")\n                                                .port(8080)\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""baz.com"", 8080).withIpAddr(""1.1.1.1""),\n                        Endpoint.of(""baz.com"", 8080).withIpAddr(""::1""));\n            }\n        }\n    }\n']",Address;Endpoint;PREFERRED;Group;ip;server;server;ns;ns;az,3.725290298461914e-09;2.153683453798294e-09;1.5425030142068863e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09,5,5,"[-5.393850326538086, -5.125696182250977, -5.4418158531188965, -6.444313049316406, -5.389195442199707, -0.021196501329541206]",0.9790266752243042
1,"['    @Test\n    public void platformDefault() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""baz.com."", A),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""baz.com."", ""1.1.1.1"")),\n                new DefaultDnsQuestion(""baz.com."", AAAA),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""baz.com."", ""::1""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""baz.com"")\n                                                .port(8080)\n                                                .serverAddresses(server.addr())\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).contains(\n                        Endpoint.of(""baz.com"", 8080).withIpAddr(""1.1.1.1""));\n            }\n        }\n    }\n']",Server;server;ANSWER;addr;Default;ns;contains;when;ns;server,3.026798367500305e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.602487362921238e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.38208532333374, -5.140340328216553, -5.4589152336120605, -6.45080041885376, -5.371107578277588, -0.02116265520453453]",0.9790596961975098
1,"['    @Test\n    public void cname() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""a.com."", A),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newBadAddressRecord(""a.com."", true))\n                                         .addRecord(ANSWER, newCnameRecord(""a.com."", ""b.com.""))\n                                         .addRecord(ANSWER, newAddressRecord(""b.com."", ""1.1.1.1"")),\n                new DefaultDnsQuestion(""a.com."", AAAA),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newBadAddressRecord(""a.com."", false))\n                                         .addRecord(ANSWER, newCnameRecord(""a.com."", ""b.com.""))\n                                         .addRecord(ANSWER, newAddressRecord(""b.com."", ""::1""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""a.com"")\n                                                .port(8080)\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""a.com"", 8080).withIpAddr(""1.1.1.1""),\n                        Endpoint.of(""a.com"", 8080).withIpAddr(""::1""));\n            }\n        }\n    }\n']",Endpoint;Endpoint;Exception;ns;Default;name;ns;AAA;Group;Server,1.5133991837501526e-09;1.4551915228366852e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.388918876647949, -5.115166187286377, -5.4606547355651855, -6.460893630981445, -5.384466648101807, -0.021196501329541206]",0.9790266752243042
1,"['    @Test\n    public void mixedLoopbackAddresses() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""foo.com."", A),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""foo.com."", ""127.0.0.1"")),\n                new DefaultDnsQuestion(""foo.com."", AAAA),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""foo.com."", ""::1""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""foo.com"")\n                                                .port(8080)\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""foo.com"", 8080).withIpAddr(""127.0.0.1""));\n            }\n        }\n    }\n']",server;Question;ANSWER;server;Address;mixed;PREFERRED;Endpoint;Server;ns,1.3969838619232178e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.402283668518066, -5.1284332275390625, -5.4337687492370605, -6.436330318450928, -5.387873649597168, -0.021195685490965843]",0.9790273904800415
1,"['    @Test\n    public void ipV4MappedOrCompatibleAddresses() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""bar.com."", AAAA),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newCompatibleAddressRecord(""bar.com."", ""1.1.1.1""))\n                                         .addRecord(ANSWER, newCompatibleAddressRecord(""bar.com."", ""1.1.1.2""))\n                                         .addRecord(ANSWER, newMappedAddressRecord(""bar.com."", ""1.1.1.1""))\n                                         .addRecord(ANSWER, newMappedAddressRecord(""bar.com."", ""1.1.1.3""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""bar.com"")\n                                                .port(8080)\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV6_ONLY)\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""bar.com"", 8080).withIpAddr(""1.1.1.1""),\n                        Endpoint.of(""bar.com"", 8080).withIpAddr(""1.1.1.2""),\n                        Endpoint.of(""bar.com"", 8080).withIpAddr(""1.1.1.3""));\n            }\n        }\n    }\n']",Addresses;group;ip;Record;Server;Compatible;Record;bar;ns;ANSWER,9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.421441078186035, -5.093433856964111, -5.425105571746826, -6.442235469818115, -5.412454128265381, -0.02123980037868023]",0.9789841771125793
1,"['    @Test\n    public void noPort() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""no-port.com."", A),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""no-port.com"", ""1.1.1.1""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""no-port.com"")\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY)\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""no-port.com"").withIpAddr(""1.1.1.1""));\n            }\n        }\n    }\n']",That;new;Exception;ns;ns;Address;add;no;Question;server,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.428091526031494, -5.06794548034668, -5.376608848571777, -6.411136150360107, -5.399936199188232, -0.02170417457818985]",0.978529691696167
1,"['    @Test\n    public void backoff() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of())) { // Respond nothing.\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""backoff.com"")\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)\n                                                .backoff(Backoff.fixed(500))\n                                                .build()) {\n\n                await().untilAsserted(() -> assertThat(group.attemptsSoFar).isGreaterThan(2));\n                assertThat(group.endpoints()).isEmpty();\n\n                // Start to respond correctly.\n                server.setResponses(ImmutableMap.of(\n                        new DefaultDnsQuestion(""backoff.com."", A),\n                        new DefaultDnsResponse(0)\n                                .addRecord(ANSWER, newAddressRecord(""backoff.com"", ""1.1.1.1"", 1)),\n                        new DefaultDnsQuestion(""backoff.com."", AAAA),\n                        new DefaultDnsResponse(0)\n                                .addRecord(ANSWER, newAddressRecord(""backoff.com"", ""::1"", 1))));\n\n                await().untilAsserted(() -> assertThat(group.endpoints()).containsExactly(\n                        Endpoint.of(""backoff.com"").withIpAddr(""1.1.1.1""),\n                        Endpoint.of(""backoff.com"").withIpAddr(""::1"")));\n            }\n        }\n    }\n']",ns;new;server;resolved;That;Address;fixed;backoff;server;ns,1.3969838619232178e-09;1.3387762010097504e-09;8.149072527885437e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.434737205505371, -5.091522693634033, -5.442564964294434, -6.457588195800781, -5.420431613922119, -0.021053289994597435]",0.9791668057441711
1,"['    @Test\n    public void backoffOnEmptyResponse() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                // Respond with empty records.\n                new DefaultDnsQuestion(""empty.com."", A), new DefaultDnsResponse(0),\n                new DefaultDnsQuestion(""empty.com."", AAAA), new DefaultDnsResponse(0)\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""empty.com"")\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)\n                                                .backoff(Backoff.fixed(500))\n                                                .build()) {\n\n                await().untilAsserted(() -> assertThat(group.attemptsSoFar).isGreaterThan(2));\n                assertThat(group.endpoints()).isEmpty();\n\n                // Start to respond correctly.\n                server.setResponses(ImmutableMap.of(\n                        new DefaultDnsQuestion(""empty.com."", A),\n                        new DefaultDnsResponse(0)\n                                .addRecord(ANSWER, newAddressRecord(""empty.com"", ""1.1.1.1"", 1)),\n                        new DefaultDnsQuestion(""empty.com."", AAAA),\n                        new DefaultDnsResponse(0)\n                                .addRecord(ANSWER, newAddressRecord(""empty.com"", ""::1"", 1))));\n\n                await().untilAsserted(() -> assertThat(group.endpoints()).containsExactly(\n                        Endpoint.of(""empty.com"").withIpAddr(""1.1.1.1""),\n                        Endpoint.of(""empty.com"").withIpAddr(""::1"")));\n            }\n        }\n    }\n']",Respond;ns;backoff;Question;PREFERRED;IP;ns;builder;fixed;ns,7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.448179244995117, -5.066667556762695, -5.412954330444336, -6.448847770690918, -5.444675922393799, -0.021190550178289413]",0.9790323972702026
1,"['    @ParameterizedTest\n    public void partialIpV4Response(ResolvedAddressTypes resolvedAddressTypes) throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                // Respond A record only.\n                // Respond with NXDOMAIN for AAAA.\n                new DefaultDnsQuestion(""partial.com."", A),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""partial.com"", ""1.1.1.1""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""partial.com"")\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(resolvedAddressTypes)\n                                                .backoff(Backoff.fixed(500))\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""partial.com"").withIpAddr(""1.1.1.1""));\n            }\n        }\n    }\n']",partial;new;ANSWER;Backoff;Default;Respond;Exception;ns;Address;partial,2.7939677238464355e-09;2.2118911147117615e-09;1.8044374883174896e-09;1.3969838619232178e-09;1.3096723705530167e-09;1.280568540096283e-09;1.2223608791828156e-09;1.1641532182693481e-09;7.566995918750763e-10;5.820766091346741e-10,5,5,"[-5.422358512878418, -5.0914764404296875, -5.430497646331787, -6.454285621643066, -5.425675392150879, -0.021144447848200798]",0.9790775179862976
1,"['    @ParameterizedTest\n    public void partialIpV6Response(ResolvedAddressTypes resolvedAddressTypes) throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                // Respond AAAA record only.\n                // Respond with NXDOMAIN for A.\n                new DefaultDnsQuestion(""partial.com."", AAAA),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""partial.com"", ""::1""))\n        ))) {\n            try (DnsAddressEndpointGroup group =\n                         DnsAddressEndpointGroup.builder(""partial.com"")\n                                                .serverAddresses(server.addr())\n                                                .resolvedAddressTypes(resolvedAddressTypes)\n                                                .backoff(Backoff.fixed(500))\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""partial.com"").withIpAddr(""::1""));\n            }\n        }\n    }\n']",Exception;Backoff;Server;ns;Server;Resolved;Respond;Respond;Exactly;Question,1.1059455573558807e-09;1.1059455573558807e-09;9.89530235528946e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.4240498542785645, -5.095288276672363, -5.442057132720947, -6.462257385253906, -5.4262261390686035, -0.021046169102191925]",0.9791737794876099
1,"['    @Test\n    public void srv() throws Exception {\n        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(\n                new DefaultDnsQuestion(""foo.com."", SRV),\n                new DefaultDnsResponse(0).addRecord(ANSWER, newSrvRecord(""foo.com."", 1, 2, ""a.foo.com.""))\n                                         .addRecord(ANSWER, newSrvRecord(""foo.com."", 3, 4, ""b.foo.com.""))\n                                         .addRecord(ANSWER, newSrvRecord(""unrelated.com."", 0, 0, ""asdf.com.""))\n                                         .addRecord(ANSWER, newTooShortSrvRecord(""foo.com.""))\n                                         .addRecord(ANSWER, newBadNameSrvRecord(""foo.com.""))\n        ))) {\n            try (DnsServiceEndpointGroup group =\n                         DnsServiceEndpointGroup.builder(""foo.com"")\n                                                .serverAddresses(server.addr())\n                                                .build()) {\n\n                assertThat(group.whenReady().get()).containsExactly(\n                        Endpoint.of(""a.foo.com"", 2).withWeight(1),\n                        Endpoint.of(""b.foo.com"", 4).withWeight(3));\n            }\n        }\n    }\n']",Response;ns;Server;Default;ns;Question;ns;ns;ANSWER;Name,1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.280568540096283e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10,5,5,"[-5.375591278076172, -5.128504753112793, -5.463962554931641, -6.453651428222656, -5.366083145141602, -0.021261973306536674]",0.9789624810218811
