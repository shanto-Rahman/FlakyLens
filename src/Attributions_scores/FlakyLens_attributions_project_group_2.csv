Project_Group,Test_case,Tokens(Sorted by Importance),Attribution_Scores(Sorted),Predicted_Class,True_Class,Test_Pred_Logit,Test_Confidence_Score
2,"['@Test\npublic void shouldBeAbleToCancelJob() throws Exception {\n    RobustJobSchedulerWrapper robustWrapper = new RobustJobSchedulerWrapper(actualScheduler, log);\n    AtomicInteger count = new AtomicInteger();\n    JobHandle jobHandle = robustWrapper.scheduleRecurring(""JobName"", 1, count::incrementAndGet);\n    assertEventually(""run count"", count::get, Matchers.greaterThanOrEqualTo(100), DEFAULT_TIMEOUT_MS, MILLISECONDS);\n    robustWrapper.cancelAndWaitTermination(jobHandle);\n    int finalCount = count.get();\n    Thread.sleep(50);\n    assertEquals(finalCount, count.get());\n}']",Thread;Than;MILLISECONDS;DEFAULT;greater;increment;count;Atomic;count;Count,3.026798367500305e-09;1.5133991837501526e-09;1.4260876923799515e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.022187441587448e-10;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10,0,1,"[-0.0010751663940027356, -7.459616661071777, -9.096115112304688, -8.57240104675293, -8.555841445922852, -12.215896606445312]",0.9989253878593445
2,"['@Test\npublic void getNanoTime() {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        long time = mRecyclerView.getNanoTime();\n        assertNotEquals(0, time);\n        assertNotEquals(time, mRecyclerView.getNanoTime());\n    } else {\n        assertEquals(0, mRecyclerView.getNanoTime());\n    }\n}']",cler;ano;long;VERSION;Build;time;INT;VERSION;Rec;ODES,2.444721758365631e-09;1.862645149230957e-09;1.862645149230957e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10,2,2,"[-10.25472354888916, -9.007050514221191, -0.0005367745761759579, -8.646735191345215, -9.529976844787598, -8.944072723388672]",0.9994633793830872
2,"['@Test\n@LargeTest\npublic void testTimer_withListenerAndCleanUp() throws InterruptedException {\n    TestTimeLimitExceededListener listenerSpy = spy(mListener);\n    mWorkTimer.startTimer(WORKSPEC_ID_1, 0, listenerSpy);\n    Thread.sleep(10);\n    verify(listenerSpy, times(1)).onTimeLimitExceeded(WORKSPEC_ID_1);\n    assertThat(mWorkTimer.getTimerMap().size(), is(0));\n    assertThat(mWorkTimer.getListeners().size(), is(0));\n}']",sleep;Thread;on;Time;Large;Listener;verify;Work;WORKSPEC;That,2.561137080192566e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,0,0,"[-0.0011076750233769417, -7.506418228149414, -9.004887580871582, -8.445941925048828, -8.44601821899414, -12.154330253601074]",0.9988929629325867
2,"['@Test\npublic void recurringJobWithExceptionShouldKeepRunning() throws Exception\n{\n    RobustJobSchedulerWrapper robustWrapper = new RobustJobSchedulerWrapper( actualScheduler, log );\n    AtomicInteger count = new AtomicInteger();\n    IllegalStateException e = new IllegalStateException();\n    int nRuns = 100;\n    JobHandle jobHandle = robustWrapper.scheduleRecurring( ""JobName"", 1, () -> {\n        if ( count.get() < nRuns )\n        {\n            count.incrementAndGet();\n            throw e;\n        }\n    }\n    );\n    assertEventually( ""run count"", count::get, Matchers.equalTo( nRuns ), DEFAULT_TIMEOUT_MS , MILLISECONDS );\n    robustWrapper.cancelAndWaitTermination( jobHandle );\n    verify( log, timeout( DEFAULT_TIMEOUT_MS ).times( nRuns ) ).warn( ""Uncaught exception"", e );\n}']",timeout;Recurring;log;MILLISECONDS;Wrapper;Wait;TIMEOUT;Robust;increment;Robust,9.313225746154785e-09;5.587935447692871e-09;3.725290298461914e-09;2.3283064365386963e-09;2.2118911147117615e-09;1.7462298274040222e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.57160684466362e-09;1.4551915228366852e-09,0,1,"[-0.007085671182721853, -5.017123222351074, -9.05738353729248, -8.420794486999512, -9.266451835632324, -12.055070877075195]",0.9929392337799072
2,"['@Test\npublic void testFireObjectEvent() throws Exception {\n    final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n    final CollectingListener objectListener = new CollectingListener(1);\n    coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);\n    final CollectingListener subtreeListener = new CollectingListener(0);\n    coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);\n    final CollectingListener oneLevelListener = new CollectingListener(0);\n    coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n    coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE);\n    objectListener.latch.await(1, TimeUnit.SECONDS);\n    assertEquals(1, objectListener.capturedEvents.size());\n    assertTrue(oneLevelListener.capturedEvents.isEmpty());\n    assertTrue(subtreeListener.capturedEvents.isEmpty());\n}']",atch;Event;Listener;Listener;Equals;Listener;Fire;captured;subtree;OBJECT,1.0244548320770264e-08;7.450580596923828e-09;5.587935447692871e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.6566128730773926e-09;3.725290298461914e-09;3.259629011154175e-09;2.9103830456733704e-09;2.7939677238464355e-09,0,4,"[-0.0022011594846844673, -6.379887580871582, -9.106470108032227, -8.19175910949707, -9.098593711853027, -12.508461952209473]",0.9978012442588806
2,"['@Test\npublic void testCreateSubcontext() throws Exception {\n    assertTrue(namingContext.createSubcontext(new CompositeName(""test"")) instanceof NamingContext);\n    assertTrue(testActionPermission(JndiPermission.ACTION_CREATE_SUBCONTEXT, namingContext, ""securitytest"") instanceof NamingContext);\n}']",Create;Action;aming;Subcontext;Permission;security;Composite;True;CREATE;Context,3.026798367500305e-09;3.026798367500305e-09;2.6775524020195007e-09;1.979060471057892e-09;1.862645149230957e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10,4,4,"[-8.367982864379883, -10.352422714233398, -8.529186248779297, -7.777024269104004, -0.0009489324293099344, -9.603337287902832]",0.9990515112876892
2,"['@Test\npublic void shouldTogglePrepareForBulkLoadDuringRestoreCalls() throws Exception {\n    final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n    entries.add(new KeyValue<>(""1"".getBytes(""UTF-8""), ""a"".getBytes(""UTF-8"")));\n    entries.add(new KeyValue<>(""2"".getBytes(""UTF-8""), ""b"".getBytes(""UTF-8"")));\n    entries.add(new KeyValue<>(""3"".getBytes(""UTF-8""), ""c"".getBytes(""UTF-8"")));\n    final AtomicReference<Exception> conditionNotMet = new AtomicReference<>();\n    final AtomicInteger conditionCheckCount = new AtomicInteger();\n    Thread conditionCheckThread = new Thread(new Runnable() {\n        @Override\n        public void run() {\n            assertRocksDBTurnsOnBulkLoading(conditionCheckCount, conditionNotMet);\n            assertRockDBTurnsOffBulkLoad(conditionCheckCount, conditionNotMet);\n        }\n    });\n    subject.init(context, subject);\n    conditionCheckThread.start();\n    context.restore(subject.name(), entries);\n    conditionCheckThread.join(2000);\n    assertTrue(conditionNotMet.get() == null);\n    assertTrue(conditionCheckCount.get() == 2);\n}']",byte;ulk;restore;Atomic;During;new;ulk;UTF;should;join,3.259629011154175e-09;1.8044374883174896e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10,3,1,"[-7.208585739135742, -5.291801452636719, -6.663148880004883, -0.007907632738351822, -7.6545634269714355, -7.950331687927246]",0.992123544216156
2,"['@Test\npublic void testLookupContextLink() throws Exception {\n    final Name name = new CompositeName(""test/value"");\n    namingStore.bind(name, ""testValue"");\n    final Name linkName = new CompositeName(""link"");\n    namingStore.bind(linkName, new LinkRef(""./test""));\n    Object result = namingContext.lookup(""link/value"");\n    assertEquals(""testValue"", result);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup""),\n    new JndiPermission(""test/value"", ""lookup"")), namingContext, ""link/value"");\n    assertEquals(""testValue"", result);\n}']",Permission;link;Store;Arrays;value;naming;Composite;Composite;Context;bind,3.899913281202316e-09;3.259629011154175e-09;2.3283064365386963e-09;2.2118911147117615e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09,4,4,"[-8.53065013885498, -10.445964813232422, -8.589353561401367, -7.479549884796143, -0.0010432521812617779, -9.630569458007812]",0.9989572763442993
2,"['@Test\nvoid testTimedMethod() throws InterruptedException {\n    assertTrue(Jobs.latch01.await(5, TimeUnit.SECONDS));\n    assertTrue(Jobs.latch02.await(5, TimeUnit.SECONDS));\n    Timer timer1 = registry.get(""scheduled.methods"")\n    .tag(""method"", ""everySecond"")\n    .tag(""class"", ""io.quarkus.scheduler.test.metrics.MicrometerTimedTest$Jobs"")\n    .tag(""exception"", ""none"")\n    .timer();\n    assertNotNull(timer1);\n    assertTrue(timer1.count() > 0);\n    Timer timer2 = registry.get(""foo"")\n    .tag(""method"", ""anotherEverySecond"")\n    .tag(""class"", ""io.quarkus.scheduler.test.metrics.MicrometerTimedTest$Jobs"")\n    .tag(""exception"", ""none"")\n    .timer();\n    assertNotNull(timer2);\n    assertTrue(timer2.count() > 0);\n}']",Timed;Every;timer;method;count;Unit;Null;SECONDS;Unit;io,3.4458935260772705e-08;1.862645149230957e-08;1.6763806343078613e-08;1.30385160446167e-08;1.210719347000122e-08;1.1175870895385742e-08;1.0011717677116394e-08;9.778887033462524e-09;9.313225746154785e-09;9.313225746154785e-09,0,2,"[-0.004934513941407204, -5.448872089385986, -8.756574630737305, -7.930822849273682, -9.21174430847168, -12.33775520324707]",0.9950776696205139
2,"['@Test\npublic void testLookupEmptyName() throws Exception {\n    Object result = namingContext.lookup(new CompositeName());\n    assertTrue(result instanceof NamingContext);\n    result = namingContext.lookup(new CompositeName(""""));\n    assertTrue(result instanceof NamingContext);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, null);\n    assertTrue(result instanceof NamingContext);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, """");\n    assertTrue(result instanceof NamingContext);\n}']",lookup;Composite;aming;Permission;OOKUP;Action;Empty;aming;Context;new,3.4924596548080444e-09;2.7939677238464355e-09;2.7939677238464355e-09;1.979060471057892e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10,4,4,"[-8.666357040405273, -10.584980010986328, -8.463911056518555, -7.478872776031494, -0.001039560534991324, -9.631392478942871]",0.9989609718322754
2,"['@Test\npublic void healthCheckTest() throws Exception {\n    RssGetShuffleAssignmentsRequest request = new RssGetShuffleAssignmentsRequest(""1"", 1, 1, 1, 1, Sets.newHashSet(SHUFFLE_SERVER_VERSION));\n    Uninterruptibles.sleepUninterruptibly(3, TimeUnit.SECONDS);\n    assertEquals(2, coordinatorClient.getShuffleServerList().getServersCount());\n    List<ServerNode> nodes = coordinators.get(0).getClusterManager().getServerList(Sets.newHashSet(SHUFFLE_SERVER_VERSION));\n    assertEquals(2, coordinatorClient.getShuffleServerList().getServersCount());\n    assertEquals(2, nodes.size());\n    RssGetShuffleAssignmentsResponse response = coordinatorClient.getShuffleAssignments(request);\n    assertFalse(response.getPartitionToServers().isEmpty());\n    for (ServerNode node : nodes) {\n        assertTrue(node.isHealthy());\n    }\n    byte[] bytes = new byte[writeDataSize];\n    new Random().nextBytes(bytes);\n    try (final FileOutputStream out = new FileOutputStream(tempDataFile)) {\n        out.write(bytes);\n    }\n    Uninterruptibles.sleepUninterruptibly(3, TimeUnit.SECONDS);\n    CoordinatorTestUtils.waitForRegister(coordinatorClient, 2);\n    nodes = coordinators.get(0).getClusterManager().getServerList(Sets.newHashSet(SHUFFLE_SERVER_VERSION));\n    for (ServerNode node : nodes) {\n        assertFalse(node.isHealthy());\n    }\n    assertEquals(0, nodes.size());\n    response = coordinatorClient.getShuffleAssignments(request);\n    assertEquals(INTERNAL_ERROR, response.getStatusCode());\n    tempDataFile.delete();\n    int i = 0;\n    do {\n        Uninterruptibles.sleepUninterruptibly(3, TimeUnit.SECONDS);\n        nodes = coordinators.get(0).getClusterManager().getServerList(Sets.newHashSet(SHUFFLE_SERVER_VERSION));\n        i++;\n        if (i == 10) {\n            fail();\n        }\n    } while (nodes.size() != 2 );\n    for (ServerNode node : nodes) {\n        assertTrue(node.isHealthy());\n    }\n    assertEquals(2, nodes.size());\n    response = coordinatorClient.getShuffleAssignments(request);\n    assertFalse(response.getPartitionToServers().isEmpty());\n}']",Uninterruptibles;Server;Uninterruptibly;request;get;Unit;Time;Manager;Unit;Register,1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10,0,0,"[-0.0010600429959595203, -7.370131969451904, -9.232096672058105, -8.638830184936523, -8.803232192993164, -12.335075378417969]",0.9989405274391174
2,"['@Test\npublic void testReplicaThreadedThroughputDegradationAndRejection() throws Exception {\n    Settings settings = Settings.builder().put(IndexingPressure.MAX_INDEXING_BYTES.getKey(), ""10KB"")\n    .put(ShardIndexingPressureSettings.SHARD_INDEXING_PRESSURE_ENABLED.getKey(), true)\n    .put(ShardIndexingPressureSettings.SHARD_INDEXING_PRESSURE_ENFORCED.getKey(), true)\n    .put(ShardIndexingPressureMemoryManager.THROUGHPUT_DEGRADATION_LIMITS.getKey(), 1)\n    .put(ShardIndexingPressureSettings.REQUEST_SIZE_WINDOW.getKey(), 100)\n    .build();\n    final int NUM_THREADS = scaledRandomIntBetween(100, 120);\n    ShardIndexingPressure shardIndexingPressure = new ShardIndexingPressure(settings, clusterService);\n    Index index = new Index(""IndexName"", ""UUID"");\n    ShardId shardId1 = new ShardId(index, 0);\n    fireConcurrentAndParallelRequestsForUniformThroughPut(NUM_THREADS, shardIndexingPressure, shardId1, 100, 100,\n    OperationType.REPLICA);\n    fireAllThenCompleteConcurrentRequestsWithUniformDelay(ShardIndexingPressureSettings.REQUEST_SIZE_WINDOW.get(settings),\n    shardIndexingPressure, shardId1, 100, 200, OperationType.REPLICA);\n    expectThrows(OpenSearchRejectedExecutionException.class,\n    () -> shardIndexingPressure.markReplicaOperationStarted(shardId1, 11 * 1024, false));\n    assertEquals(0, shardIndexingPressure.coldStats().getIndexingPressureShardStats(shardId1).getCurrentReplicaBytes());\n    assertEquals(15, shardIndexingPressure.coldStats().getIndexingPressureShardStats(shardId1).getCurrentReplicaLimits());\n}']",egradation;Put;Throughput;Index;Rejected;Replica;ADATION;put;Shard;mark,5.820766091346741e-09;3.259629011154175e-09;3.259629011154175e-09;3.026798367500305e-09;2.153683453798294e-09;2.0372681319713593e-09;1.862645149230957e-09;1.862645149230957e-09;1.775333657860756e-09;1.7462298274040222e-09,0,1,"[-0.0012978235026821494, -6.923478603363037, -9.443846702575684, -8.867708206176758, -9.323548316955566, -12.619538307189941]",0.9987030029296875
2,"['@Test\npublic void testCompositeBindingOps() throws Exception {\n    final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();\n    final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/alookup"");\n    final ModelNode addOp = Operations.createAddOperation(addr);\n    addOp.get(NamingSubsystemModel.BINDING_TYPE).set(NamingSubsystemModel.LOOKUP);\n    final ModelNode compositeOp = Operations.CompositeOperationBuilder.create().addStep(addOp).addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/a"")).build().getOperation();\n    ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));\n}']",global;Ops;Composite;STEM;java;create;Write;Step;Add;Additional,6.51925802230835e-09;2.3283064365386963e-09;2.2992026060819626e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.2223608791828156e-09,4,4,"[-8.203436851501465, -10.322298049926758, -8.518941879272461, -7.743341445922852, -0.0010083595989271998, -9.595285415649414]",0.9989921450614929
2,"['@Test\npublic void testGenerateCleanupCallback_deletesOldFinishedWork() {\n    Work work1 = new Work.Builder(TestWorker.class)\n    .withInitialState(SUCCEEDED)\n    .withPeriodStartTime(0L)\n    .build();\n    Work work2 = new Work.Builder(TestWorker.class).withPeriodStartTime(Long.MAX_VALUE).build();\n    insertWorkSpecAndTags(work1);\n    insertWorkSpecAndTags(work2);\n    SupportSQLiteOpenHelper openHelper = mDatabase.getOpenHelper();\n    SupportSQLiteDatabase db = openHelper.getWritableDatabase();\n    WorkDatabase.generateCleanupCallback().onOpen(db);\n    WorkSpecDao workSpecDao = mDatabase.workSpecDao();\n    assertThat(workSpecDao.getWorkSpec(work1.getId()), is(nullValue()));\n    assertThat(workSpecDao.getWorkSpec(work2.getId()), is(not(nullValue())));\n}']",Start;db;Worker;deletes;Database;Work;Callback;work;SUCCEEDED;That,1.0244548320770264e-08;8.731149137020111e-09;5.587935447692871e-09;5.3551048040390015e-09;5.3551048040390015e-09;5.122274160385132e-09;4.889443516731262e-09;4.889443516731262e-09;4.6566128730773926e-09;4.190951585769653e-09,2,2,"[-2.689396381378174, -5.275283336639404, -0.444987952709198, -3.6366569995880127, -1.3506300449371338, -7.246951103210449]",0.6408320069313049
2,['@Test\npublic void testMenuInvalidationAfterDestroy() throws Throwable {\n    final A activity = getActivity();\n    getInstrumentation().runOnMainSync(new Runnable() {\n        @Override\n        public void run() {\n            activity.reset();\n            assertNull(activity.getMenu());\n            activity.supportInvalidateOptionsMenu();\n            getInstrumentation().callActivityOnDestroy(activity);\n        }\n    });\n    Thread.sleep(100);\n    assertNull(activity.getMenu());\n}'],Sync;Main;get;On;Throwable;Invalidate;Instrumentation;Null;run;Destroy,4.0978193283081055e-08;2.9802322387695312e-08;1.3969838619232178e-08;1.210719347000122e-08;1.1641532182693481e-08;1.0244548320770264e-08;1.0244548320770264e-08;7.450580596923828e-09;5.587935447692871e-09;5.587935447692871e-09,0,0,"[-0.0020258158911019564, -6.382691383361816, -9.459562301635742, -8.798673629760742, -9.205671310424805, -12.434609413146973]",0.9979762434959412
2,"['@Test\npublic void testBindAndRetrieveObjectFactoryFromNamingContext() throws Exception {\n    final Reference reference = new Reference(""java.util.String"", TestObjectFactory.class.getName(), null);\n    namingStore.bind(new CompositeName(""test""), reference);\n    final Object result = namingContext.lookup(""test"");\n    assertTrue(result instanceof String);\n    assertEquals(""Test ParsedResult"", result);\n}']",Object;Retrieve;java;Composite;result;result;Reference;get;null;naming,2.0954757928848267e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,4,4,"[-8.71556282043457, -10.603951454162598, -8.45760726928711, -7.087289810180664, -0.0012938946019858122, -9.786441802978516]",0.9987070560455322
2,"['@Test\npublic void indexCreationDateReturnsIndexCreationDateOfExistingIndexAsDateTime() {\n    final DateTime now = DateTime.now(DateTimeZone.UTC);\n    final String indexName = client().createRandomIndex(""indices_it_"");\n    final Optional<DateTime> indexCreationDate = indices.indexCreationDate(indexName);\n    assertThat(indexCreationDate).isNotEmpty()\n    .hasValueSatisfying(date -> Assertions.assertThat(date).isEqualToIgnoringMillis(now));\n}']",Date;Random;Index;Ignoring;now;Empty;Creation;create;Name;Value,2.444721758365631e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1350493878126144e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10,2,2,"[-10.296470642089844, -8.958406448364258, -0.0005403488758020103, -8.724042892456055, -9.557719230651855, -8.842134475708008]",0.9994598031044006
2,"['@Test\npublic void testJavaContext() throws Exception {\n    System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());\n    System.setProperty(Context.URL_PKG_PREFIXES, ""org.jboss.as.naming.interfaces"");\n    InitialContext initialContext = new InitialContext();\n    Context context = (Context) initialContext.lookup(""java:"");\n    assertTrue(context instanceof NamingContext);\n}']",interfaces;aming;URL;INITIAL;Property;True;System;Property;set;boss,6.05359673500061e-09;4.190951585769653e-09;3.841705620288849e-09;3.3760443329811096e-09;2.7939677238464355e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09,4,4,"[-8.359048843383789, -10.373016357421875, -8.537169456481934, -7.754508972167969, -0.0009592937421984971, -9.589366912841797]",0.9990411400794983
2,"['@Test\npublic void testLookupWithContinuation() throws Exception {\n    namingStore.bind(new CompositeName(""comp/nested""), ""test"");\n    final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""nns"", ""comp""), TestObjectFactoryWithNameResolution.class.getName(), null);\n    namingStore.bind(new CompositeName(""test""), reference);\n    Object result = namingContext.lookup(new CompositeName(""test/nested""));\n    assertEquals(""test"", result);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""comp/nested"", ""lookup"")), namingContext, ""test/nested"");\n    assertEquals(""test"", result);\n}']",ns;Permission;Ref;reference;List;ACTION;Resolution;Action;Reference;ested,5.122274160385132e-09;3.725290298461914e-09;3.725290298461914e-09;3.259629011154175e-09;3.259629011154175e-09;3.026798367500305e-09;2.9103830456733704e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-09,4,4,"[-8.564817428588867, -10.465928077697754, -8.589720726013184, -7.41519021987915, -0.0010749283246695995, -9.607763290405273]",0.9989256262779236
2,"['@Test\npublic void testInitialFactory() throws Exception {\n    System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());\n    InitialContext initialContext = new InitialContext();\n    Context context = (Context) initialContext.lookup("""");\n    assertTrue(context instanceof NamingContext);\n    if (!NamingManager.hasInitialContextFactoryBuilder()) {\n        NamingManager.setInitialContextFactoryBuilder(new InitialContextFactoryBuilder());\n    }\n    initialContext = new InitialContext();\n    context = (Context) initialContext.lookup("""");\n    assertTrue(context instanceof NamingContext);\n}']",ACTORY;aming;Factory;Context;class;Builder;Context;aming;Context;CONTEXT,1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,4,4,"[-8.220840454101562, -10.330236434936523, -8.47215461730957, -7.759047985076904, -0.0010031197452917695, -9.643037796020508]",0.9989973902702332
2,"['@Test\npublic void testUnsubscribeWithSubscriptionCallbackForMultipleSubscriptions() throws Exception {\n    connectMediaBrowserService();\n    final List<StubSubscriptionCallback> subscriptionCallbacks = new ArrayList<>();\n    final int pageSize = 1;\n    for (int page = 0; page < 4; page++) {\n        final StubSubscriptionCallback callback = new StubSubscriptionCallback();\n        subscriptionCallbacks.add(callback);\n        Bundle options = new Bundle();\n        options.putInt(MediaBrowserCompat.EXTRA_PAGE, page);\n        options.putInt(MediaBrowserCompat.EXTRA_PAGE_SIZE, pageSize);\n        callback.reset(1);\n        mMediaBrowser.subscribe(MEDIA_ID_ROOT, options, callback);\n        callback.await(TIME_OUT_MS);\n        assertEquals(1, callback.mChildrenLoadedWithOptionCount);\n    }\n    final int[] orderOfRemovingCallbacks = {2, 0, 3, 1};\n    for (int i = 0; i < orderOfRemovingCallbacks.length; i++) {\n        for (StubSubscriptionCallback callback : subscriptionCallbacks) {\n            callback.reset(1);\n        }\n        mMediaBrowser.unsubscribe(MEDIA_ID_ROOT,\n        subscriptionCallbacks.get(orderOfRemovingCallbacks[i]));\n        callMediaBrowserServiceMethod(NOTIFY_CHILDREN_CHANGED, MEDIA_ID_ROOT,\n        getApplicationContext());\n        try {\n            Thread.sleep(SLEEP_MS);\n        } catch (InterruptedException e) {\n            fail(""Unexpected InterruptedException occurred."");\n        }\n        for (int j = 0; j < 4; j++) {\n            int childrenLoadedWithOptionsCount = subscriptionCallbacks\n            .get(orderOfRemovingCallbacks[j]).mChildrenLoadedWithOptionCount;\n            if (j <= i) {\n                assertEquals(0, childrenLoadedWithOptionsCount);\n            } else {\n                assertEquals(1, childrenLoadedWithOptionsCount);\n            }\n        }\n    }\n}']",Service;EXTRA;Thread;LEEP;Browser;Equals;Array;page;page;sleep,2.0954757928848267e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,0,0,"[-0.0010850501712411642, -7.283279895782471, -9.289749145507812, -8.706379890441895, -8.907217979431152, -12.380853652954102]",0.9989155530929565
2,"['@Test\npublic void testOneTimeWorkRequest_backedOff() {\n    val now = System.currentTimeMillis() ;\n    when(mTaskConverter.now()).thenReturn(now) ;\n    val request = OneTimeWorkRequestBuilder<TestWorker>().setInitialRunAttemptCount(1).build() ;\n    val workSpec = request.workSpec ;\n    val expected = workSpec.calculateNextRunTime();\n    val offset = offset(expected, now) ,\n    val delta = task.windowEnd - (offset + EXECUTION_WINDOW_SIZE_IN_SECONDS);\n    val task = mTaskConverter.convert(request.workSpec);\n    assertEquals(task.serviceName, WorkManagerGcmService::class.java.name);\n    assertEquals(task.isPersisted, false);\n    assertEquals(task.isUpdateCurrent, true);\n    assertEquals(task.requiredNetwork, Task.NETWORK_STATE_ANY);\n    assertEquals(task.requiresCharging, false);\n    assertEquals(task.windowStart, offset);\n    assertEquals(task.windowEnd, offset + EXECUTION_WINDOW_SIZE_IN_SECONDS);\n}']",STATE;Run;Name;when;cm;current;SIZE;convert;ANY;Off,1.30385160446167e-08;1.1175870895385742e-08;7.450580596923828e-09;5.587935447692871e-09;5.122274160385132e-09;5.122274160385132e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.190951585769653e-09,2,2,"[-10.03926944732666, -8.72354793548584, -0.0006084974738769233, -8.733281135559082, -9.242144584655762, -8.84578800201416]",0.9993915557861328
2,"['@Test\npublic void testBind() throws Exception {\n    final Name name = new CompositeName(""test"");\n    final Object value = new Object();\n    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n    try {\n        store.bind(name, value);\n    } finally {\n        WritableServiceBasedNamingStore.popOwner();\n    }\n    assertEquals(value, store.lookup(name));\n}']",store;Writable;push;name;final;aming;Object;store;Owner;new,2.561137080192566e-09;2.3283064365386963e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10,4,4,"[-8.285491943359375, -10.363493919372559, -8.392820358276367, -7.83109712600708, -0.000974656839389354, -9.613080024719238]",0.999025821685791
2,"['@Test\npublic void testRejectionsEAP6() throws Exception {\n    testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_6_4_0, ModelVersion.create(1, 3),""jboss-as-naming"");\n}']",xml;boss;Rejections;Model;aming;AP;as;Model;create;Exception,2.9103830456733704e-09;2.3283064365386963e-09;1.3387762010097504e-09;9.604264050722122e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;1.1641532182693481e-10;1.1641532182693481e-10;-4.3655745685100555e-10,4,4,"[-8.403373718261719, -10.404236793518066, -8.556962013244629, -7.743274211883545, -0.0009442876325920224, -9.664074897766113]",0.9990562796592712
2,"['@Test\npublic void testLookupLink() throws Exception {\n    final Name name = new CompositeName(""test"");\n    namingStore.bind(name, ""testValue"", String.class);\n    final Name linkName = new CompositeName(""link"");\n    namingStore.bind(linkName, new LinkRef(""./test""));\n    Object result = namingContext.lookup(linkName);\n    assertEquals(""testValue"", result);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");\n    assertEquals(""testValue"", result);\n    System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());\n    namingStore.rebind(linkName, new LinkRef(name));\n    result = namingContext.lookup(linkName);\n    assertEquals(""testValue"", result);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");\n    assertEquals(""testValue"", result);\n}']",ACTORY;OOKUP;Permission;link;naming;Arrays;naming;lookup;Permission;lookup,2.561137080192566e-09;2.444721758365631e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2514647096395493e-09;1.2223608791828156e-09;1.1641532182693481e-09,4,4,"[-8.396889686584473, -10.34339714050293, -8.535576820373535, -7.569796562194824, -0.0010432521812617779, -9.528725624084473]",0.9989572763442993
2,"['@Test\npublic void legalToExecuteTwiceCloning_Async() throws Exception {\n    server.enqueue(new MockResponse().setBody(""abc""));\n    server.enqueue(new MockResponse().setBody(""def""));\n    Request request = new Request.Builder().url(server.url(""/"")).build();\n    Call call = client.newCall(request);\n    call.enqueue(callback);\n    Call cloned = call.clone();\n    cloned.enqueue(callback);\n    callback.await(request.url()).assertBody(""abc"");\n    callback.await(request.url()).assertBody(""def"");\n}']",Cloning;def;callback;def;request;server;enqueue;new;Body;clone,4.190951585769653e-09;2.7939677238464355e-09;2.561137080192566e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09,4,0,"[-8.302605628967285, -10.322854995727539, -8.558611869812012, -7.58793830871582, -0.0010352734243497252, -9.796773910522461]",0.9989652633666992
2,"['@Test\npublic void testZkNodeChangesUpdateFeatureState() throws Exception {\n    setupTestWithEmptyDatastore();\n    FeatureState savedFeatureState = new FeatureState(TestFeature.FEATURE);\n    savedFeatureState.setStrategyId(ID);\n    savedFeatureState.setParameter(PARAM_USERS, ""user1, user2, user3"");\n    stateRepository.setFeatureState(savedFeatureState);\n    FeatureState loadedFeatureState = stateRepository.getFeatureState(TestFeature.FEATURE);\n    assertThat(reflectionEquals(savedFeatureState, loadedFeatureState), is(true));\n    FeatureStateStorageWrapper externallySetStateWrapper = new FeatureStateStorageWrapper();\n    FeatureState externallySetState = new FeatureState(TestFeature.FEATURE);\n    ObjectMapper objectMapper = new ObjectMapper();\n    final String json = objectMapper.writeValueAsString(externallySetStateWrapper);\n    final CountDownLatch latch = new CountDownLatch(1);\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                serverClientPair.client.setData().forPath(TEST_ZNODE + ""/FEATURE"", json.getBytes(""UTF-8""));\n                latch.countDown();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }).start();\n    latch.await(2, TimeUnit.SECONDS);\n    Thread.sleep(25);\n    loadedFeatureState = stateRepository.getFeatureState(TestFeature.FEATURE);\n    assertThat(reflectionEquals(externallySetState, loadedFeatureState), is(true));\n}']",sleep;Thread;user;await;SECONDS;Unit;UTF;get;Down;Feature,7.450580596923828e-09;5.587935447692871e-09;2.7939677238464355e-09;2.2118911147117615e-09;2.2118911147117615e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3387762010097504e-09;1.280568540096283e-09;1.2223608791828156e-09,0,0,"[-0.0013897294411435723, -6.852983474731445, -9.448358535766602, -8.817118644714355, -9.192632675170898, -12.504620552062988]",0.9986112117767334
2,"['@Test\npublic void testLookupReference() throws Exception {\n    final Name name = new CompositeName(""test"");\n    final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blah"", ""test""), TestObjectFactory.class.getName(), null);\n    namingStore.bind(name, reference);\n    Object result = namingContext.lookup(name);\n    assertEquals(""test"", result);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");\n    assertEquals(""test"", result);\n}']",Reference;naming;Ref;Composite;naming;Permission;bind;class;lookup;ACTION,3.259629011154175e-09;2.6775524020195007e-09;1.862645149230957e-09;1.862645149230957e-09;1.5133991837501526e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10,4,4,"[-8.598877906799316, -10.552818298339844, -8.59218978881836, -7.6091389656066895, -0.0009536962606944144, -9.69997501373291]",0.9990467429161072
2,"['@Test\npublic void playbackRate() throws Exception {\n    final int toleranceMs = 1000;\n    Future<PlayerResult> setSurfaceFuture = mPlayer.setSurface(\n    mActivity.getSurfaceHolder().getSurface());\n    Future<PlayerResult> prepareFuture = mPlayer.prepare();\n    assertFutureSuccess(setSurfaceFuture);\n    assertFutureSuccess(prepareFuture);\n    float[] rates = {0.25f, 0.5f, 1.0f, 2.0f};\n    for (float playbackRate : rates) {\n        Future<PlayerResult> seekFuture = mPlayer.seekTo(0, MediaPlayer.SEEK_PREVIOUS_SYNC);\n        Thread.sleep(1000);\n        int playTime = 4000;\n        int privState = mPlayer.getPlayerState();\n        Future<PlayerResult> setParamsFuture = mPlayer.setPlaybackParams(\n        new PlaybackParams.Builder().setSpeed(playbackRate).build());\n        assertFutureSuccess(seekFuture);\n        assertFutureSuccess(setParamsFuture);\n        assertEquals(""setPlaybackParams() should not change player state. ""\n        + mPlayer.getPlayerState(), privState, mPlayer.getPlayerState());\n        Future<PlayerResult> playFuture = mPlayer.play();\n        Thread.sleep(playTime);\n        PlaybackParams pbp = mPlayer.getPlaybackParams();\n        assertEquals(playbackRate, pbp.getSpeed(), FLOAT_TOLERANCE);\n        assertEquals(""The player should still be playing"",\n        MediaPlayer.PLAYER_STATE_PLAYING, mPlayer.getPlayerState());\n        long playedMediaDurationMs = mPlayer.getCurrentPosition();\n        long expectedPosition = (long) (playTime * playbackRate);\n        int diff = (int) Math.abs(playedMediaDurationMs - expectedPosition);\n        if (diff > toleranceMs) {\n            fail(""Media player had error in playback rate "" + playbackRate\n            + "". expected position after playing "" + playTime\n            + "" was "" + expectedPosition + "", but actually "" + playedMediaDurationMs);\n        }\n        assertFutureSuccess(playFuture);\n        assertFutureSuccess(mPlayer.pause());\n        pbp = mPlayer.getPlaybackParams();\n        assertEquals(""pause() should not change the playback rate property."",\n        playbackRate, pbp.getSpeed(), FLOAT_TOLERANCE);\n    }\n    mPlayer.reset();\n}']",sleep;Thread;Result;Future;Success;prepare;Success;Future;SEE;played,1.862645149230957e-09;9.313225746154785e-10;7.712515071034431e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,0,0,"[-0.0010487301042303443, -7.2931084632873535, -9.318947792053223, -8.795489311218262, -9.003519058227539, -12.470664024353027]",0.9989519119262695
2,"['@Test\npublic void testListNameNotFound() throws Exception {\n    try {\n        namingContext.list(new CompositeName(""test""));\n        fail(""Should have thrown and NameNotFoundException"");\n    } catch (NameNotFoundException expected) {\n    }\n    try {\n        testActionPermission(JndiPermission.ACTION_LIST, namingContext, ""test"");\n        fail(""Should have thrown and NameNotFoundException with appropriate permissions"");\n    } catch (NameNotFoundException expected) {\n    }\n}']",Permission;Composite;catch;naming;appropriate;permissions;and;naming;Name;Found,2.3283064365386963e-09;2.3283064365386963e-09;1.8044374883174896e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;6.402842700481415e-10,4,4,"[-8.536600112915039, -10.491947174072266, -8.481371879577637, -7.817677021026611, -0.000897957943379879, -9.659021377563477]",0.9991024732589722
2,"['@Test\npublic void outerInnerErrorRace() {\n    for (int i = 0; i < 500; i++) {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final PublishSubject<Integer> ps1 = PublishSubject.create();\n            final PublishSubject<Integer> ps2 = PublishSubject.create();\n            ps1.switchMap(new Function<Integer, ObservableSource<Integer>>() {\n                @Override\n                public ObservableSource<Integer> apply(Integer v) throws Exception {\n                    if (v == 1) {\n                        return ps2;\n                    }\n                    return Observable.never();\n                }\n            })\n            .test();\n            final TestException ex1 = new TestException();\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ps1.onError(ex1);\n                }\n            };\n            final TestException ex2 = new TestException();\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    ps2.onError(ex2);\n                }\n            };\n            TestHelper.race(r1, r2);\n            for (Throwable e : errors) {\n                assertTrue(e.toString(), e instanceof TestException);\n            }\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n}']",Observable;return;Throwable;never;Observable;Inner;track;new;List;Source,2.3283064365386963e-09;8.440110832452774e-10;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10,1,1,"[-8.251276016235352, -0.0006049233488738537, -8.594645500183105, -9.484763145446777, -11.538917541503906, -9.526857376098633]",0.9993952512741089
2,"['@Test\npublic void createdWorkerThreadsShouldContainConnectorName() throws Exception\n{\n    AtomicInteger processNextBatchCount = new AtomicInteger();\n    AtomicReference<Thread> poolThread = new AtomicReference<>();\n    AtomicReference<String> poolThreadName = new AtomicReference<>();\n    String id = UUID.randomUUID().toString();\n    BoltConnection connection = newConnection( id );\n    when( connection.processNextBatch() ).thenAnswer( inv ->\n    {\n        poolThread.set( Thread.currentThread() );\n        poolThreadName.set( Thread.currentThread().getName() );\n        processNextBatchCount.incrementAndGet();\n        return true;\n    } );\n    boltScheduler.start();\n    boltScheduler.created( connection );\n    boltScheduler.enqueued( connection, Jobs.noop() );\n    Predicates.await( () -> processNextBatchCount.get() > 0, 1, MINUTES );\n    assertThat( poolThread.get().getName(), not( equalTo( poolThreadName.get() ) ) );\n    assertThat( poolThread.get().getName(), containsString( String.format( ""[%s]"", CONNECTOR_KEY ) ) );\n    assertThat( poolThread.get().getName(), not( containsString( String.format( ""[%s]"", connection.remoteAddress() ) ) ) );\n}']",Predicates;inv;when;Answer;MINUTES;get;That;That;Reference;noop,6.984919309616089e-09;5.587935447692871e-09;5.587935447692871e-09;5.587935447692871e-09;5.471520125865936e-09;5.3551048040390015e-09;3.259629011154175e-09;3.026798367500305e-09;2.561137080192566e-09;2.3865140974521637e-09,1,1,"[-8.139203071594238, -0.0005639393348246813, -8.77837085723877, -9.695574760437012, -11.773089408874512, -9.931032180786133]",0.99943608045578
2,"['@Test\nvoid nullAndObjectValuesInMap() {\n    Map<String, Object> queryParams = new HashMap<>();\n    queryParams.put(""foo"", null);\n    queryParams.put(""baz"", ""qux"");\n    Unirest.get(GET).queryString(queryParams).asObject(RequestCapture.class).getBody().assertParam(""foo"", """").assertParam(""baz"", ""qux"").assertQueryString(""foo&baz=qux"");\n}']",Capture;null;Request;Param;Object;put;qu;foo;query;new,1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;8.731149137020111e-10;8.731149137020111e-10;6.402842700481415e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,3,3,"[-9.322222709655762, -9.952167510986328, -8.217373847961426, -0.0007247682078741491, -8.161231994628906, -10.348608016967773]",0.9992755055427551
2,"['@Test\npublic void testInterruption() throws InterruptedException {\n    OneTimeWorkRequest work = new OneTimeWorkRequest.Builder(TestWorker.class).build();\n    insertWork(work);\n    WorkerWrapper workerWrapper =\n    createBuilder(work.getStringId())\n    .withSchedulers(Collections.singletonList(mMockScheduler))\n    .build();\n    FutureListener listener = createAndAddFutureListener(workerWrapper);\n    Executors.newSingleThreadExecutor().submit(workerWrapper);\n    workerWrapper.interrupt();\n    Thread.sleep(6000L);\n    assertThat(listener.mResult, is(true));\n}']",Executors;Result;worker;sleep;That;Work;Listener;worker;worker;with,1.949956640601158e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,0,0,"[-0.001073261140845716, -7.44989538192749, -9.135714530944824, -8.565459251403809, -8.578206062316895, -12.262490272521973]",0.9989272952079773
2,"['@Test\npublic void serverStatusUnthrottledIfJournalUtilizationIsLowerThanThreshold() throws Exception {\n    serverStatus.throttle();\n    final Size segmentSize = Size.kilobytes(1L);\n    final KafkaJournal journal = new KafkaJournal(journalDirectory, scheduler, segmentSize, Duration.standardSeconds(1L), Size.kilobytes(4L), Duration.standardSeconds(1L), 1000000, Duration.standardSeconds(1L), 90, new MetricRegistry(), serverStatus);\n    journal.flushDirtyLogs();\n    journal.cleanupLogs();\n    assertThat(serverStatus.getLifecycle()).isEqualTo(RUNNING);\n}']",Size;Kafka;kilobytes;Status;journal;Journal;Second;Than;Directory;Registry,2.0489096641540527e-08;1.30385160446167e-08;9.313225746154785e-09;9.313225746154785e-09;8.847564458847046e-09;7.916241884231567e-09;7.450580596923828e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09,2,1,"[-7.0893988609313965, -7.44751501083374, -0.0053258915431797504, -7.186171054840088, -5.863175392150879, -8.125739097595215]",0.9946882724761963
2,"['@Test\npublic void testRemoveSuperColumn() throws IOException, ExecutionException, InterruptedException {\n    Table table = Table.open(""Table1"");\n    ColumnFamilyStore store = table.getColumnFamilyStore(""Super1"");\n    RowMutation rm;\n    rm = new RowMutation(""Table1"", ""key1"");\n    rm.add(""Super1:SC1:Column1"", ""asdf"".getBytes(), 0);\n    rm.apply();\n    store.forceBlockingFlush();\n    rm = new RowMutation(""Table1"", ""key1"");\n    rm.delete(""Super1:SC1"", 1);\n    rm.apply();\n    List<ColumnFamily> families = store.getColumnFamilies(""key1"", ""Super1"", new IdentityFilter());\n    assert families.get(0).getAllColumns().first().getMarkedForDeleteAt() == 1;\n    assert !families.get(1).getAllColumns().first().isMarkedForDelete();\n    ColumnFamily resolved = ColumnFamily.resolve(families);\n    assert resolved.getAllColumns().first().getMarkedForDeleteAt() == 1;\n    Collection<IColumn> subColumns = resolved.getAllColumns().first().getSubColumns();\n    assert subColumns.size() == 1;\n    assert subColumns.iterator().next().timestamp() == 0;\n    assertNull(ColumnFamilyStore.removeDeleted(resolved, Integer.MAX_VALUE));\n}']",delete;utation;apply;Interrupted;Super;Marked;Remove;add;Delete;Flush,1.4901161193847656e-08;3.725290298461914e-09;3.026798367500305e-09;2.561137080192566e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09,3,0,"[-8.773372650146484, -9.956162452697754, -7.966061115264893, -0.0018068907083943486, -6.708901882171631, -10.23319149017334]",0.9981947541236877
2,"['@Test\npublic void testCompositeBindingUpdate() throws Exception {\n    final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();\n    final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/a"");\n    final ModelNode compositeOp = Operations.CompositeOperationBuilder.create()\n    .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.BINDING_TYPE, NamingSubsystemModel.LOOKUP))\n    .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/b""))\n    .build().getOperation();\n    ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));\n}']",OOKUP;Step;Address;Subsystem;TYPE;services;ml;Model;execute;Kernel,2.240994945168495e-09;1.7462298274040222e-09;1.3387762010097504e-09;1.280568540096283e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,4,4,"[-8.326290130615234, -10.364030838012695, -8.575194358825684, -7.733847618103027, -0.0009660820942372084, -9.634973526000977]",0.9990345239639282
2,"['@Test\npublic void testOneTimeRequest_noInitialDelay_withConstraintNetworkConnected() {\n    val now = System.currentTimeMillis() ;\n    when(mTaskConverter.now()).thenReturn(now) ;\n    val constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.METERED).setRequiresCharging(true).build() ;\n    val request = OneTimeWorkRequestBuilder<TestWorker>()\n    .setConstraints(constraints)\n    .build() ;\n    val task = mTaskConverter.convert(request.workSpec) ;\n    val expected = request.workSpec.calculateNextRunTime() ;\n    val offset = offset(expected, now) ;\n    assertEquals(task.serviceName, WorkManagerGcmService::class.java.name) ;\n    assertEquals(task.isPersisted, false) ;\n    assertEquals(task.isUpdateCurrent, true) ;\n    assertEquals(task.requiredNetwork, Task.NETWORK_STATE_CONNECTED) ;\n    assertEquals(task.requiresCharging, true) ;\n    assertEquals(task.windowStart, offset) ;\n    assertEquals(task.windowEnd, offset + EXECUTION_WINDOW_SIZE_IN_SECONDS) ;\n}']",when;Network;Run;Network;NETWORK;Network;Constraint;Converter;Connected;STATE,3.3527612686157227e-08;2.7939677238464355e-08;2.2351741790771484e-08;2.1420419216156006e-08;1.862645149230957e-08;1.6763806343078613e-08;1.6298145055770874e-08;1.6065314412117004e-08;1.5832483768463135e-08;1.4901161193847656e-08,2,2,"[-9.677446365356445, -8.537657737731934, -0.0008534126682206988, -8.579362869262695, -8.454381942749023, -8.550132751464844]",0.9991469383239746
2,"['@Test\npublic void testStoredContext() throws Exception {\n    final ServiceName bindingName = ServiceName.JBOSS.append(""foo-stored"").append(""again"");\n    bindObject(bindingName, new Context() {\n        @Override\n        public Object lookup(Name name) throws NamingException {\n            if (""blah/blah2"".equals(name.toString())) {\n                return new Integer(5);\n            }\n            return null;\n        }\n        @Override\n        public Object lookup(String name) throws NamingException {\n            return lookup(new CompositeName(name));\n        }\n        @Override\n        public void bind(Name name, Object obj) throws NamingException {\n        }\n        @Override\n        public void bind(String name, Object obj) throws NamingException {\n        }\n        @Override\n        public void rebind(Name name, Object obj) throws NamingException {\n        }\n        @Override\n        public void rebind(String name, Object obj) throws NamingException {\n        }\n        @Override\n        public void unbind(Name name) throws NamingException {\n        }\n        @Override\n        public void unbind(String name) throws NamingException {\n        }\n        @Override\n        public void rename(Name oldName, Name newName) throws NamingException {\n        }\n        @Override\n        public void rename(String oldName, String newName) throws NamingException {\n        }\n        @Override\n        public NamingEnumeration<NameClassPair> list(Name name) throws NamingException {\n            return null;\n        }\n        @Override\n        public NamingEnumeration<NameClassPair> list(String name) throws NamingException {\n            return null;\n        }\n        @Override\n        public NamingEnumeration<Binding> listBindings(Name name) throws NamingException {\n            if (!""hi/there"".equals(name.toString()))\n            throw new IllegalArgumentException(""Expected hi/there"");\n            return null;\n        }\n        @Override\n        public NamingEnumeration<Binding> listBindings(String name) throws NamingException {\n            return null;\n        }\n        @Override\n        public void destroySubcontext(Name name) throws NamingException {\n        }\n        @Override\n        public void destroySubcontext(String name) throws NamingException {\n        }\n        @Override\n        public Context createSubcontext(Name name) throws NamingException {\n            return null;\n        }\n        @Override\n        public Context createSubcontext(String name) throws NamingException {\n            return null;\n        }\n        @Override\n        public Object lookupLink(Name name) throws NamingException {\n            return null;\n        }\n        @Override\n        public Object lookupLink(String name) throws NamingException {\n            return null;\n        }\n        @Override\n        public NameParser getNameParser(Name name) throws NamingException {\n            return null;\n        }\n        @Override\n        public NameParser getNameParser(String name) throws NamingException {\n            return null;\n        }\n        @Override\n        public Name composeName(Name name, Name prefix) throws NamingException {\n            return null;\n        }\n        @Override\n        public String composeName(String name, String prefix) throws NamingException {\n            return null;\n        }\n        @Override\n        public Object addToEnvironment(String propName, Object propVal) throws NamingException {\n            return null;\n        }\n        @Override\n        public Object removeFromEnvironment(String propName) throws NamingException {\n            return null;\n        }\n        @Override\n        public Hashtable<?, ?> getEnvironment() throws NamingException {\n            return null;\n        }\n        @Override\n        public void close() throws NamingException {\n        }\n        @Override\n        public String getNameInNamespace() throws NamingException {\n            return null;\n        }\n    });\n    final NamingContext ctx = new NamingContext(new CompositeName(), store, null);\n    final Object obj = ctx.lookup(new CompositeName(""foo-stored/again/blah/blah2""));\n    ctx.listBindings(""foo-stored/again/hi/there"");\n    assertNotNull(obj);\n    assertEquals(new Integer(5), obj);\n}']",Composite;blah;Context;Name;aming;rebind;blah;Name;Object;aming,2.0954757928848267e-09;2.0372681319713593e-09;1.4551915228366852e-09;1.1641532182693481e-09;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10,1,4,"[-8.44458293914795, -0.0006195771275088191, -8.350318908691406, -9.346456527709961, -11.60844612121582, -9.545135498046875]",0.9993805885314941
2,"['@Test\npublic void testBindAndRetrieveObjectFactoryFromInitialContext() throws Exception {\n    final Reference reference = new Reference(""java.util.String"", TestObjectFactory.class.getName(), null);\n    namingStore.bind(new CompositeName(""test""), reference);\n    final InitialContext initialContext = new InitialContext();\n    final Object result = initialContext.lookup(""test"");\n    assertTrue(result instanceof String);\n    assertEquals(""Test ParsedResult"", result);\n}']",naming;Bind;Name;Retrieve;Reference;Result;Equals;reference;Reference;Store,4.6566128730773926e-09;2.7939677238464355e-09;2.444721758365631e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09,4,4,"[-8.667527198791504, -10.518928527832031, -8.114141464233398, -6.361303329467773, -0.002301902510225773, -9.514341354370117]",0.9977007508277893
2,"['@Test\npublic void testFireOneLevelEvent() throws Exception {\n    final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n    final CollectingListener objectListener = new CollectingListener(0);\n    coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);\n    final CollectingListener subtreeListener = new CollectingListener(0);\n    coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);\n    final CollectingListener oneLevelListener = new CollectingListener(1);\n    coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n    coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.ONELEVEL_SCOPE);\n    oneLevelListener.latch.await(1, TimeUnit.SECONDS);\n    assertTrue(objectListener.capturedEvents.isEmpty());\n    assertTrue(subtreeListener.capturedEvents.isEmpty());\n    assertEquals(1, oneLevelListener.capturedEvents.size());\n}']",atch;Listener;SCOPE;Collecting;Listener;aming;Listener;object;ONELEVEL;one,7.2177499532699585e-09;3.725290298461914e-09;3.259629011154175e-09;3.026798367500305e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;1.7898855730891228e-09;1.7462298274040222e-09,0,4,"[-0.002044731518253684, -6.447758674621582, -9.166857719421387, -8.327300071716309, -9.127267837524414, -12.52293586730957]",0.9979573488235474
2,"['@Test\npublic void testLookupWitResolveResult() throws Exception {\n    namingStore.bind(new CompositeName(""test/nested""), ""test"");\n    final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blahh"", ""test""), TestObjectFactoryWithNameResolution.class.getName(), null);\n    namingStore.bind(new CompositeName(""comp""), reference);\n    Object result = namingContext.lookup(new CompositeName(""comp/nested""));\n    assertEquals(""test"", result);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test/nested"", ""lookup"")), namingContext, ""comp/nested"");\n    assertEquals(""test"", result);\n}']",ACTION;ested;Permission;Permission;OOKUP;List;Add;comp;bind;Composite,4.6566128730773926e-09;4.423782229423523e-09;4.190951585769653e-09;3.958120942115784e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.3283064365386963e-09,4,4,"[-8.46490478515625, -10.403185844421387, -8.593828201293945, -7.567573070526123, -0.0010113369207829237, -9.603930473327637]",0.9989892840385437
2,"['@Test\npublic void notifyAboutChangesConcurrently() {\n    final int numberOfThreads = 100;\n    final TestSubscriber<Changes> testSubscriber = new TestSubscriber<Changes>();\n    final Set<String> tables = new HashSet<String>();\n    final List<Changes> expectedChanges = new ArrayList<Changes>();\n    for (int i = 0; i < numberOfThreads; i++) {\n        final String table = ""test_table"" + i;\n        tables.add(table);\n        expectedChanges.add(Changes.newInstance(table));\n    }\n    storIOSQLite.observeChanges(LATEST).subscribe(testSubscriber);\n    final CountDownLatch startAllThreadsLock = new CountDownLatch(1);\n    for (int i = 0; i < numberOfThreads; i++) {\n        final int finalI = i;\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    startAllThreadsLock.await();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n                storIOSQLite.lowLevel().notifyAboutChanges(Changes.newInstance(""test_table"" + finalI));\n            }\n        }).start();\n    }\n    startAllThreadsLock.countDown();\n    final long startTime = SystemClock.elapsedRealtime();\n    while ((testSubscriber.valueCount() != tables.size()) && ((SystemClock.elapsedRealtime() - startTime) < 20000)) {\n        Thread.yield();\n    }\n    testSubscriber.assertNoErrors();\n    testSubscriber.assertValueCount(expectedChanges.size());\n    assertThat(expectedChanges.containsAll(testSubscriber.values())).isTrue();\n}']",stor;new;Subscriber;ATEST;Subscriber;Interrupted;new;tables;run;OSQLite,1.7695128917694092e-08;1.6298145055770874e-08;1.30385160446167e-08;1.1175870895385742e-08;9.313225746154785e-09;8.847564458847046e-09;8.381903171539307e-09;7.450580596923828e-09;6.51925802230835e-09;6.28642737865448e-09,1,1,"[-1.3655595779418945, -0.29713204503059387, -7.413926601409912, -6.912788391113281, -8.801308631896973, -9.59589672088623]",0.7429459095001221
2,"['@Test\npublic void testRejectionsEAP7() throws Exception {\n    testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_7_0_0, ModelVersion.create(2, 0), ""wildfly-naming"");\n}']",subsystem;xml;Controller;Version;Model;Rejections;wildfly;Model;Version;create,4.6566128730773926e-09;2.561137080192566e-09;2.561137080192566e-09;1.7462298274040222e-09;1.6880221664905548e-09;1.6298145055770874e-09;9.313225746154785e-10;2.3283064365386963e-10;-1.7462298274040222e-10;-1.7462298274040222e-10,4,4,"[-8.375518798828125, -10.384922981262207, -8.551229476928711, -7.750409126281738, -0.0009495278936810791, -9.658671379089355]",0.9990509152412415
2,"['@Test\npublic void shouldBeAbleToUpdateAllMessageTypes() throws Throwable\n{\n    int durationNanos = 5;\n    for ( RaftMessages.Type type : RaftMessages.Type.values() )\n    {\n        metric.updateTimer( type, Duration.ofNanos( durationNanos ) );\n        assertEquals( 1, metric.timer( type ).getCount() );\n        assertEquals( durationNanos, metric.timer( type ).getSnapshot().getMean(), 0 );\n    }\n    assertEquals( RaftMessages.Type.values().length, metric.timer().getCount() );\n    assertEquals( 0, metric.timer().getSnapshot().getMean(), durationNanos );\n}']",Timer;anos;Message;Snapshot;type;duration;All;length;Raft;metric,5.587935447692871e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.0186340659856796e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10,2,2,"[-10.251482963562012, -9.075971603393555, -0.0005637010326609015, -8.465065956115723, -9.517532348632812, -8.95102596282959]",0.9994365572929382
2,"['@Test\npublic void testBindNested() throws Exception {\n    final Name name = new CompositeName(""nested/test"");\n    final Object value = new Object();\n    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n    try {\n        store.bind(name, value);\n    } finally {\n        WritableServiceBasedNamingStore.popOwner();\n    }\n    assertEquals(value, store.lookup(name));\n}']",finally;OWNER;Owner;Equals;FO;Writable;pop;name;new;Name,1.1641532182693481e-08;5.587935447692871e-09;5.587935447692871e-09;4.190951585769653e-09;3.725290298461914e-09;3.6088749766349792e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09,4,4,"[-8.313514709472656, -10.369028091430664, -8.415594100952148, -7.835773944854736, -0.0009610801353119314, -9.606536865234375]",0.999039351940155
2,"['@Test\npublic void testLookupBindingUsingNestedContext() throws Exception {\n    final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean"");\n    final Object value = new Object();\n    bindObject(bindingName, value);\n    Object context = store.lookup(new CompositeName(""foo""));\n    assertNotNull(context);\n    assertTrue(context instanceof Context);\n    Object obj = Context.class.cast(context).lookup(new CompositeName(""bar/baz/TestBean""));\n    assertNotNull(obj);\n    assertEquals(value, obj);\n    context = Context.class.cast(context).lookup(new CompositeName(""bar""));\n    obj = Context.class.cast(context).lookup(new CompositeName(""baz/TestBean""));\n    assertNotNull(obj);\n    assertEquals(value, obj);\n    context = Context.class.cast(context).lookup(new CompositeName(""baz""));\n    obj = Context.class.cast(context).lookup(new CompositeName(""TestBean""));\n    assertNotNull(obj);\n    assertEquals(value, obj);\n}']",Equals;inding;True;Composite;Composite;foo;Name;new;Lookup;Service,1.6298145055770874e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0186340659856796e-09;8.731149137020111e-10;8.149072527885437e-10,3,4,"[-9.304701805114746, -9.91777229309082, -8.24789810180664, -0.0007232195930555463, -8.158299446105957, -10.271963119506836]",0.9992770552635193
2,"['@Test\npublic void testAutomaticStartStop() throws Exception {\n    final TestRunnable task = new TestRunnable(500);\n    e.execute(task);\n    Thread thread = e.thread;\n    assertThat(thread, is(not(nullValue())));\n    assertThat(thread.isAlive(), is(true));\n    Thread.sleep(1500);\n    assertThat(thread.isAlive(), is(false));\n    assertThat(task.ran.get(), is(true));\n    task.ran.set(false);\n    e.execute(task);\n    assertThat(e.thread, not(sameInstance(thread)));\n    thread = e.thread;\n    Thread.sleep(1500);\n    assertThat(thread.isAlive(), is(false));\n    assertThat(task.ran.get(), is(true));\n}']",sleep;true;false;Value;thread;able;Thread;Automatic;Thread;thread,1.3969838619232178e-09;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.5288394428789616e-10;3.4924596548080444e-10;3.2014213502407074e-10,0,0,"[-0.0010563514661043882, -7.415832996368408, -9.162707328796387, -8.570499420166016, -8.770757675170898, -12.33424186706543]",0.9989443421363831
2,"['@Test\npublic void testBind() throws Exception {\n    Name name = new CompositeName(""test"");\n    final Object value = new Object();\n    namingContext.bind(name, value);\n    assertEquals(value, namingStore.lookup(name));\n    name = new CompositeName(""securitytest"");\n    testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""securitytest"", value);\n    assertEquals(value, namingStore.lookup(name));\n}']",Permission;Bind;Equals;Context;name;value;Store;Store;value;name,9.778887033462524e-09;6.51925802230835e-09;2.6775524020195007e-09;2.561137080192566e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5133991837501526e-09,4,4,"[-8.787766456604004, -10.569013595581055, -8.248034477233887, -6.859471321105957, -0.0015645894454792142, -9.513434410095215]",0.9984366297721863
2,"['@Test\npublic void testLookupBinding() throws Exception {\n    final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"");\n    final Object value = new Object();\n    bindObject(bindingName, value);\n    final Object obj = store.lookup(new CompositeName(""foo/bar""));\n    assertNotNull(obj);\n    assertEquals(value, obj);\n}']",Object;Equals;Name;Service;store;Composite;foo;new;obj;final,4.6566128730773926e-09;2.9103830456733704e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09,3,4,"[-7.1644182205200195, -8.612747192382812, -5.634934425354004, -0.5051525235176086, -0.9374881386756897, -7.706485748291016]",0.6034135222434998
2,"['@Test\npublic void testTimeWindows()\n{\n    Long tstamp1 = 1451001601000L;\n    Long tstamp2 = 1451088001000L;\n    Long lowHour = 1451001600000L;\n    assertTrue(getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp1).left.compareTo(lowHour) == 0);\n    assertTrue(getWindowBoundsInMillis(TimeUnit.MINUTES, 1, tstamp1).left.compareTo(lowHour) == 0);\n    assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 1, tstamp1).left.compareTo(lowHour) == 0 );\n    assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 2, tstamp2).left.compareTo(lowHour) == 0);\n    return;\n}']",MINUTES;low;Windows;Long;Time;DAY;HOURS;compare;left;low,1.280568540096283e-09;7.275957614183426e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10,2,2,"[-10.190478324890137, -9.088751792907715, -0.0005541696446016431, -8.528923988342285, -9.500177383422852, -8.939517974853516]",0.9994459748268127
2,"['@Test\npublic void testGracefulClose() throws Exception {\n    int maxReceiveCountAfterClose = 0;\n    for (int i = 6; i <= 100 && maxReceiveCountAfterClose < 5; i++) {\n        int receiveCount = 0;\n        KafkaChannel channel = createConnectionWithPendingReceives(i);\n        selector.poll(1000);\n        assertEquals(1, selector.completedReceives().size());\n        server.closeConnections();\n        while (selector.disconnected().isEmpty()) {\n            selector.poll(1);\n            receiveCount += selector.completedReceives().size();\n            assertTrue(""Too many completed receives in one poll"", selector.completedReceives().size() <= 1);\n        }\n        assertEquals(channel.id(), selector.disconnected().keySet().iterator().next());\n        maxReceiveCountAfterClose = Math.max(maxReceiveCountAfterClose, receiveCount);\n    }\n    assertTrue(""Too few receives after close: "" + maxReceiveCountAfterClose, maxReceiveCountAfterClose >= 5);\n}']",poll;iterator;Kafka;selector;selector;one;selector;channel;selector;Receive,2.7939677238464355e-09;2.3283064365386963e-09;1.280568540096283e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.766640581190586e-10,0,0,"[-0.0010289618512615561, -7.390498638153076, -9.268853187561035, -8.66220760345459, -8.872448921203613, -12.44937801361084]",0.9989714622497559
2,"['@Test\npublic void testBindReferenceable() throws Exception {\n    Name name = new CompositeName(""test"");\n    final TestObjectReferenceable referenceable = new TestObjectReferenceable(""addr"");\n    namingContext.bind(name, referenceable);\n    Object result = namingContext.lookup(name);\n    assertEquals(referenceable.addr, result);\n    name = new CompositeName(""securitytest"");\n    testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""securitytest"", referenceable);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""securitytest"");\n    assertEquals(referenceable.addr, result);\n}']",addr;Equals;Referenceable;Object;OOKUP;referenceable;IND;Permission;Referenceable;Equals,8.847564458847046e-09;2.473825588822365e-09;2.270098775625229e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.604264050722122e-10,4,4,"[-8.572358131408691, -10.495782852172852, -8.549448013305664, -7.633784294128418, -0.000962151971179992, -9.605620384216309]",0.9990382194519043
2,"['@Test\npublic void recoverFromCancelReusesConnection() throws Exception {\n    CountDownLatch responseDequeuedLatch = new CountDownLatch(1);\n    CountDownLatch requestCanceledLatch = new CountDownLatch(1);\n    QueueDispatcher dispatcher = new QueueDispatcher() {\n        @Override\n        public MockResponse dispatch(RecordedRequest request) throws InterruptedException {\n            MockResponse response = super.dispatch(request);\n            responseDequeuedLatch.countDown();\n            requestCanceledLatch.await();\n            return response;\n        }\n    };\n    server.setDispatcher(dispatcher);\n    dispatcher.enqueueResponse(new MockResponse().setBodyDelay(10, TimeUnit.SECONDS).setBody(""abc""));\n    dispatcher.enqueueResponse(new MockResponse().setBody(""def""));\n    client = client.newBuilder().dns(new DoubleInetAddressDns()).build();\n    callAndCancel(0, responseDequeuedLatch, requestCanceledLatch);\n    Call call = client.newCall(new Request.Builder().url(server.url(""/"")).build());\n    Response response = call.execute();\n    assertThat(response.body().string()).isEqualTo(""def"");\n    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(1);\n}']",Mock;Body;Interrupted;Delay;url;dispatcher;Call;set;new;Response,8.381903171539307e-08;8.195638656616211e-08;6.146728992462158e-08;5.960464477539063e-08;5.21540641784668e-08;4.470348358154297e-08;4.190951585769653e-08;3.5390257835388184e-08;3.166496753692627e-08;2.9802322387695312e-08,0,0,"[-0.2598499655723572, -1.4818971157073975, -7.583974361419678, -7.011525630950928, -8.632999420166016, -10.17013168334961]",0.7711672186851501
2,"['@Test\npublic void shouldPickANewServerToWriteToOnLeaderSwitch() throws Throwable\n{\n    cluster = clusterRule.withNumberOfEdgeMembers( 0 ).startCluster();\n    CoreClusterMember leader = cluster.awaitLeader();\n    CountDownLatch startTheLeaderSwitching = new CountDownLatch( 1 );\n    Thread thread = new Thread( () ->\n    {\n        try\n        {\n            startTheLeaderSwitching.await();\n            CoreClusterMember theLeader = cluster.awaitLeader();\n            switchLeader( theLeader );\n        }\n        catch ( TimeoutException | InterruptedException e )\n        {\n        }\n    } );\n    thread.start();\n    Config config = Config.build().withLogging( new JULogging( Level.OFF ) ).toConfig();\n    try ( Driver driver = GraphDatabase\n    .driver( leader.routingURI(), AuthTokens.basic( ""neo4j"", ""neo4j"" ), config ) )\n    {\n        boolean success = false;\n        Set<BoltServerAddress> seenAddresses = new HashSet<>();\n        long deadline = System.currentTimeMillis() + (30 * 1000);\n        while ( !success )\n        {\n            if ( System.currentTimeMillis() > deadline )\n            {\n                fail( ""Failed to write to the new leader in time"" );\n            }\n            try ( Session session = driver.session( AccessMode.WRITE ) )\n            {\n                startTheLeaderSwitching.countDown();\n                BoltServerAddress boltServerAddress = ((RoutingNetworkSession) session).address();\n                seenAddresses.add( boltServerAddress );\n                session.run( ""CREATE (p:Person)"" );\n                success = seenAddresses.size() >= 2;\n            }\n            catch ( Exception e )\n            {\n                Thread.sleep( 100 );\n            }\n        }\n    }\n    finally\n    {\n        thread.join();\n    }\n}']",fail;build;Down;OFF;cluster;Tokens;thread;Mode;Mill;new,9.89530235528946e-10;8.149072527885437e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10;3.019522409886122e-10;2.9103830456733704e-10,1,1,"[-8.280230522155762, -0.0005504761938937008, -8.657476425170898, -9.76216983795166, -11.693093299865723, -9.77149772644043]",0.9994496703147888
2,"['@Test\npublic void testFireAllEvent() throws Exception {\n    final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n    final CollectingListener objectListener = new CollectingListener(1);\n    coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);\n    final CollectingListener subtreeListener = new CollectingListener(1);\n    coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);\n    final CollectingListener oneLevelListener = new CollectingListener(1);\n    coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n    coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);\n    objectListener.latch.await(1, TimeUnit.SECONDS);\n    oneLevelListener.latch.await(1, TimeUnit.SECONDS);\n    subtreeListener.latch.await(1, TimeUnit.SECONDS);\n    assertEquals(1, objectListener.capturedEvents.size());\n    assertEquals(1, subtreeListener.capturedEvents.size());\n    assertEquals(1, oneLevelListener.capturedEvents.size());\n}']",await;Event;OBJECT;SECONDS;Events;Listener;Coordinator;Listener;Time;new,5.122274160385132e-09;2.2118911147117615e-09;1.979060471057892e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.7462298274040222e-09;1.7462298274040222e-09;1.6298145055770874e-09,0,4,"[-0.026751451194286346, -3.6759328842163086, -8.24731731414795, -7.301507949829102, -9.000298500061035, -11.405022621154785]",0.9736031889915466
2,"['@Test\npublic void serverStatusThrottledIfJournalUtilizationIsHigherThanThreshold() throws Exception {\n    serverStatus.running();\n    final Size segmentSize = Size.kilobytes(1L);\n    final KafkaJournal journal = new KafkaJournal(journalDirectory, scheduler, segmentSize, Duration.standardSeconds(1L), Size.kilobytes(4L), Duration.standardSeconds(1L), 1000000, Duration.standardSeconds(1L), 90, new MetricRegistry(), serverStatus);\n    createBulkChunks(journal, segmentSize, 4);\n    journal.flushDirtyLogs();\n    journal.cleanupLogs();\n    assertThat(serverStatus.getLifecycle()).isEqualTo(THROTTLED);\n}']",Duration;Size;That;get;Threshold;kilobytes;Directory;Second;ulk;Second,1.816079020500183e-08;1.3969838619232178e-08;8.847564458847046e-09;8.381903171539307e-09;7.916241884231567e-09;7.450580596923828e-09;6.51925802230835e-09;6.51925802230835e-09;6.51925802230835e-09;5.587935447692871e-09,2,1,"[-3.5522947311401367, -5.87807559967041, -0.07911942154169083, -5.244710922241211, -3.2499594688415527, -7.486974239349365]",0.9239295721054077
2,"['@Test\npublic void testRebind() throws Exception {\n    final Name name = new CompositeName(""test"");\n    final Object value = new Object();\n    namingStore.bind(name, value);\n    Object newValue = new Object();\n    namingContext.rebind(name, newValue);\n    assertEquals(newValue, namingStore.lookup(name));\n    newValue = new Object();\n    testActionPermission(JndiPermission.ACTION_REBIND, namingContext, ""test"", newValue);\n    assertEquals(newValue, namingStore.lookup(name));\n}']",Rebind;Permission;ACTION;Store;new;lookup;Store;Object;naming;Action,2.6542693376541138e-08;2.0023435354232788e-08;1.5366822481155396e-08;1.0244548320770264e-08;7.683411240577698e-09;6.984919309616089e-09;6.51925802230835e-09;5.587935447692871e-09;4.6566128730773926e-09;3.725290298461914e-09,4,4,"[-7.03453254699707, -8.559982299804688, -5.397440433502197, -0.7767592668533325, -0.6274970769882202, -7.454519271850586]",0.5339264869689941
2,"['@Test\nvoid syncWithError_ShouldCallErrorCallback() {\n    final TestLogger syncerTestLogger = TestLoggerFactory.getTestLogger(InventoryEntrySyncer.class);\n    final SphereClient sourceClient = mock(SphereClient.class);\n    final SphereClient targetClient = mock(SphereClient.class);\n    when(sourceClient.getConfig()).thenReturn(SphereApiConfig.of(""source-project""));\n    when(targetClient.getConfig()).thenReturn(SphereApiConfig.of(""target-project""));\n    final List<InventoryEntry> inventoryEntries = Collections.singletonList(readObjectFromResource(""inventory-no-sku.json"", InventoryEntry.class));\n    final PagedQueryResult<InventoryEntry> pagedQueryResult = mock(PagedQueryResult.class);\n    when(pagedQueryResult.getResults()).thenReturn(inventoryEntries);\n    when(sourceClient.execute(any(InventoryEntryQuery.class))).thenReturn(CompletableFuture.completedFuture(pagedQueryResult));\n    final InventoryEntrySyncer inventoryEntrySyncer = InventoryEntrySyncer.of(sourceClient, targetClient, mock(Clock.class));\n    inventoryEntrySyncer.sync(null, true).toCompletableFuture().join();\n    final LoggingEvent errorLog = syncerTestLogger.getAllLoggingEvents().get(1);\n    assertThat(errorLog.getMessage()).isEqualTo(""Error when trying to sync inventory entry. Existing key: <<not present>>. Update actions: []"");\n    assertThat(errorLog.getThrowable().get().getMessage()).isEqualTo(""InventoryEntryDraft doesn\'t have a SKU. Please make sure all inventory entry drafts have SKUs."");\n}']",Future;join;Return;SKUs;json;singleton;Sphere;inventory;of;any,5.122274160385132e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09,1,4,"[-7.737908363342285, -0.0008110094931907952, -8.42966079711914, -9.288911819458008, -11.3865327835083, -9.8519926071167]",0.9991893172264099
2,"['@Test\npublic void testList() throws Exception {\n    bindList();\n    NamingEnumeration<NameClassPair> results = namingContext.list(new CompositeName());\n    checkListResults(results);\n    results = (NamingEnumeration<NameClassPair>) testActionPermission(JndiPermission.ACTION_LIST, namingContext, null);\n    checkListResults(results);\n}']",ACTION;Action;Permission;naming;bind;naming;check;Permission;Class;List,5.122274160385132e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09,4,4,"[-8.591081619262695, -10.558187484741211, -8.5805025100708, -7.576542377471924, -0.0009690594743005931, -9.776047706604004]",0.9990314245223999
2,"['@Test\npublic void testListBindings() throws Exception {\n    bindList();\n    NamingEnumeration<Binding> results = namingContext.listBindings(new CompositeName());\n    checkListResults(results);\n    results = (NamingEnumeration<Binding>) testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, namingContext, null);\n    checkListResults(results);\n}']",LIST;naming;Bindings;check;Enumeration;null;check;aming;Context;results,2.561137080192566e-09;2.3283064365386963e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,4,4,"[-8.561729431152344, -10.539348602294922, -8.565356254577637, -7.589138507843018, -0.0009735850035212934, -9.740169525146484]",0.999026894569397
2,"['@Test\npublic void testListWithContinuation() throws Exception {\n    bindListWithContinuations();\n    NamingEnumeration<NameClassPair> results = namingContext.list(new CompositeName(""comp""));\n    checkListWithContinuationsResults(results);\n    results = (NamingEnumeration<NameClassPair>) testActionPermission(JndiPermission.ACTION_LIST, Arrays.asList(\n    new JndiPermission(""test"", ""list"")), namingContext, ""comp"");\n    checkListWithContinuationsResults(results);\n}']",Permission;Permission;aming;Action;Results;Enumeration;Context;Permission;as;Continuations,2.9802322387695312e-08;1.210719347000122e-08;1.1175870895385742e-08;1.1175870895385742e-08;9.778887033462524e-09;9.313225746154785e-09;6.51925802230835e-09;6.51925802230835e-09;5.587935447692871e-09;5.122274160385132e-09,4,4,"[-8.388422966003418, -10.229093551635742, -7.578320026397705, -5.281999111175537, -0.005994200240820646, -9.036402702331543]",0.9940237402915955
2,"['@Test\nvoid shouldExitBeforeGivenWaitTime_WhenWaitingThreadInterrupted() {\n    var executorService = Executors.newFixedThreadPool(2);\n    var executionStrategy = new ExecutionStrategies.ExitFlaggingExecutionStrategy();\n    var executioner = new SystemExecutioner(executionStrategy);\n    var startTime = new AtomicLong();\n    var executionFuture = executorService.submit(() -> {\n        LOG.info(""Calling executioner with 5 second wait"");\n        startTime.set(System.nanoTime());\n        executioner.exit(5, TimeUnit.SECONDS);\n    });\n    var killerSleepTimeMillis = 100;\n    var killerFuture = executorService.submit(() -> {\n        LOG.info(""Sleeping for {} milliseconds..."", killerSleepTimeMillis);\n        new DefaultEnvironment().sleepQuietly(killerSleepTimeMillis, TimeUnit.MILLISECONDS);\n        LOG.info(""I\'m awake and will now interrupt executionThread"");\n        var canceled = executionFuture.cancel(true);\n        LOG.info(""executionFuture was canceled? {}"", canceled);\n    });\n    await().atMost(ONE_SECOND).until(() -> executionFuture.isDone() && killerFuture.isDone());\n    long elapsedNanos = System.nanoTime() - startTime.get();\n    assertThat(executionStrategy.didExit()).describedAs(""Execution strategy exit() should have been called"").isTrue();\n    assertThat(TimeUnit.NANOSECONDS.toMillis(elapsedNanos)).describedAs(""Elapsed millis must be greater than %d"", killerSleepTimeMillis).isGreaterThan(killerSleepTimeMillis);\n    executorService.shutdown();\n    await().atMost(ONE_SECOND).until(executorService::isShutdown);\n}']",until;submit;SECOND;await;info;SECOND;at;Exit;That;at,4.470348358154297e-08;4.470348358154297e-08;4.0046870708465576e-08;3.725290298461914e-08;2.9802322387695312e-08;2.1420419216156006e-08;2.0489096641540527e-08;1.862645149230957e-08;1.816079020500183e-08;1.4901161193847656e-08,0,2,"[-0.0029355075675994158, -5.959151268005371, -9.100993156433105, -8.758028984069824, -9.478126525878906, -12.484579086303711]",0.9970687031745911
2,"['@Test\npublic void testLookupNameNotFound() throws Exception {\n    try {\n        namingContext.lookup(new CompositeName(""test""));\n        fail(""Should have thrown and NameNotFoundException"");\n    } catch (NameNotFoundException expected) {\n    }\n    try {\n        testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");\n        fail(""Should have thrown and NameNotFoundException with appropriate permissions"");\n    } catch (NameNotFoundException expected) {\n    }\n}']",Action;Name;naming;expected;Exception;ACTION;Context;with;Not;Permission,2.561137080192566e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10,4,4,"[-8.489423751831055, -10.447897911071777, -8.45561408996582, -7.820384502410889, -0.0009154658182524145, -9.623300552368164]",0.9990849494934082
2,"['@Test\nvoid validUsage() throws Exception {\n    assertThat(stopWatch.isRunning()).isFalse();\n    stopWatch.start(name1);\n    Thread.sleep(duration1);\n    assertThat(stopWatch.isRunning()).isTrue();\n    assertThat(stopWatch.currentTaskName()).isEqualTo(name1);\n    stopWatch.stop();\n    assertThat(stopWatch.isRunning()).isFalse();\n    assertThat(stopWatch.getLastTaskTimeNanos())\n    .as(""last task time in nanoseconds for task #2"")\n    .isGreaterThanOrEqualTo(millisToNanos(duration2))\n    .isLessThanOrEqualTo(millisToNanos(duration2 + fudgeFactor));\n    assertThat(stopWatch.getTotalTimeMillis())\n    .as(""total time in milliseconds for tasks #1 and #2"")\n    .isGreaterThanOrEqualTo(duration1 + duration2 - fudgeFactor)\n    .isLessThanOrEqualTo(duration1 + duration2 + fudgeFactor);\n    assertThat(stopWatch.getTotalTimeSeconds())\n    .as(""total time in seconds for task #2"")\n    .isGreaterThanOrEqualTo((duration1 + duration2 - fudgeFactor) / 1000.0)\n    .isLessThanOrEqualTo((duration1 + duration2 + fudgeFactor) / 1000.0);\n    assertThat(stopWatch.getTaskCount()).isEqualTo(2);\n    assertThat(stopWatch.prettyPrint()).contains(name1, name2);\n    assertThat(stopWatch.getTaskInfo()).extracting(TaskInfo::getTaskName).containsExactly(name1, name2);\n    assertThat(stopWatch.toString()).contains(ID, name1, name2);\n    assertThat(stopWatch.getId()).isEqualTo(ID);\n}']",duration;stop;valid;duration;stop;anos;Mill;Last;qual;Second,5.122274160385132e-09;4.6566128730773926e-09;4.190951585769653e-09;3.725290298461914e-09;3.4924596548080444e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09,0,2,"[-0.0010949337156489491, -7.258997917175293, -9.082601547241211, -8.717065811157227, -9.119452476501465, -12.529367446899414]",0.9989057779312134
2,"['@Test\npublic void recurringJobWithErrorShouldStop() throws Exception\n{\n    RobustJobSchedulerWrapper robustWrapper = new RobustJobSchedulerWrapper( actualScheduler, log );\n    AtomicInteger count = new AtomicInteger();\n    Error e = new Error();\n    JobHandle jobHandle = robustWrapper.scheduleRecurring( ""JobName"", 1, () ->{\n        count.incrementAndGet();\n        throw e;\n    }\n    );\n    Thread.sleep( 50 );\n    assertEventually( ""run count"", count::get, Matchers.equalTo( 1 ), DEFAULT_TIMEOUT_MS , MILLISECONDS );\n    robustWrapper.cancelAndWaitTermination( jobHandle );\n    verify( log, timeout( DEFAULT_TIMEOUT_MS ).times( 1 ) ).error( ""Uncaught error rethrown"", e );\n}']",times;TIMEOUT;Eventually;rethrown;run;TIMEOUT;Wrapper;count;Name;cheduler,4.190951585769653e-09;2.561137080192566e-09;2.3283064365386963e-09;1.9936123862862587e-09;1.1059455573558807e-09;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;6.693881005048752e-10;6.548361852765083e-10,0,1,"[-0.0010875507723540068, -7.262996196746826, -9.322628021240234, -8.765708923339844, -8.899740219116211, -12.408634185791016]",0.998913049697876
2,"['@Test\npublic void testRebindReferenceable() throws Exception {\n    final Name name = new CompositeName(""test"");\n    final TestObjectReferenceable referenceable = new TestObjectReferenceable(""addr"");\n    namingContext.bind(name, referenceable);\n    TestObjectReferenceable newReferenceable = new TestObjectReferenceable(""newAddr"");\n    namingContext.rebind(name, newReferenceable);\n    Object result = namingContext.lookup(name);\n    assertEquals(newReferenceable.addr, result);\n    newReferenceable = new TestObjectReferenceable(""yetAnotherNewAddr"");\n    testActionPermission(JndiPermission.ACTION_REBIND, namingContext, ""test"", newReferenceable);\n    result = namingContext.lookup(name);\n    assertEquals(newReferenceable.addr, result);\n}']",rebind;addr;Add;New;Referenceable;IND;Referenceable;new;new;Referenceable,1.0477378964424133e-08;3.725290298461914e-09;1.5133991837501526e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10,4,4,"[-8.563064575195312, -10.517548561096191, -8.551026344299316, -7.6655778884887695, -0.000945121340919286, -9.646956443786621]",0.9990552067756653
2,"['@Test\npublic void testRebind() throws Exception {\n    final Name name = new CompositeName(""test"");\n    final Object value = new Object();\n    final Object newValue = new Object();\n    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n    try {\n        store.bind(name, value);\n        store.rebind(name, newValue);\n    } finally {\n        WritableServiceBasedNamingStore.popOwner();\n    }\n    assertEquals(newValue, store.lookup(name));\n}']",OWNER;bind;FO;finally;Exception;store;Name;pop;Value;Name,1.257285475730896e-08;5.587935447692871e-09;5.587935447692871e-09;3.4924596548080444e-09;2.9103830456733704e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.0954757928848267e-09;2.0954757928848267e-09,4,4,"[-8.527164459228516, -10.529739379882812, -8.392095565795898, -7.577019691467285, -0.00102324562612921, -9.732954025268555]",0.9989771842956543
2,"['@Test\npublic void testUnbind() throws Exception {\n    final Name name = new CompositeName(""test"");\n    final Object value = new Object();\n    namingStore.bind(name, value);\n    namingContext.unbind(name);\n    try {\n        namingStore.lookup(name);\n        fail(""Should have thrown name not found"");\n    } catch (NameNotFoundException expect) {}\n    testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""test"", value);\n    testActionPermission(JndiPermission.ACTION_UNBIND, namingContext, ""test"");\n    try {\n        namingStore.lookup(name);\n        fail(""Should have thrown name not found"");\n    } catch (NameNotFoundException expect) {}\n}']",thrown;name;Composite;Action;IND;name;naming;have;Permission;Context,4.6566128730773926e-09;3.2014213502407074e-09;3.14321368932724e-09;2.7939677238464355e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09,4,4,"[-7.9221625328063965, -10.274564743041992, -7.917939186096191, -7.274048328399658, -0.001538523007184267, -9.400171279907227]",0.9984626770019531
2,"['@Test\npublic void testSchedulingWithDueTime() throws InterruptedException {\n    final CountDownLatch latch = new CountDownLatch(5);\n    final AtomicInteger counter = new AtomicInteger();\n    long start = System.currentTimeMillis();\n    Schedulers.threadPoolForComputation().schedule(null, new Func2<Scheduler, String, Subscription>() {\n        @Override\n        public Subscription call(Scheduler scheduler, String state) {\n            System.out.println(""doing work"");\n            latch.countDown();\n            counter.incrementAndGet();\n            if (latch.getCount() == 0) {\n                return Subscriptions.empty();\n            } else {\n                return scheduler.schedule(state, this, new Date(System.currentTimeMillis() + 50));\n            }\n        }\n    }, new Date(System.currentTimeMillis() + 100));\n    if (!latch.await(3000, TimeUnit.MILLISECONDS)) {\n        fail(""didn\'t execute ... timed out"");\n    }\n    long end = System.currentTimeMillis();\n    assertEquals(5, counter.get());\n    if ((end - start) < 250) {\n        fail(""it should have taken over 250ms since each step was scheduled 50ms in the future"");\n    }\n}']",Computation;await;thread;Subscription;long;scheduler;Count;in;count;atch,3.026798367500305e-09;2.7939677238464355e-09;2.0954757928848267e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,1,1,"[-8.271797180175781, -0.0005459486856125295, -8.614416122436523, -9.830805778503418, -11.823999404907227, -9.952521324157715]",0.9994542002677917
2,"['@Test\npublic void testFireMultiLevelEvent() throws Exception {\n    final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n    final CollectingListener subtreeListener = new CollectingListener(1);\n    coordinator.addListener(""foo"", EventContext.SUBTREE_SCOPE, subtreeListener);\n    final CollectingListener subtreeListenerTwo = new CollectingListener(1);\n    coordinator.addListener(""foo/bar"", EventContext.SUBTREE_SCOPE, subtreeListenerTwo);\n    final CollectingListener subtreeListenerThree = new CollectingListener(1);\n    coordinator.addListener(""foo/bar/baz"", EventContext.SUBTREE_SCOPE, subtreeListenerThree);\n    coordinator.fireEvent(context, new CompositeName(""foo/bar/baz/boo""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);\n    subtreeListener.latch.await(1, TimeUnit.SECONDS);\n    subtreeListenerTwo.latch.await(1, TimeUnit.SECONDS);\n    subtreeListenerThree.latch.await(1, TimeUnit.SECONDS);\n    assertEquals(1, subtreeListener.capturedEvents.size());\n    assertEquals(1, subtreeListenerTwo.capturedEvents.size());\n    assertEquals(1, subtreeListenerThree.capturedEvents.size());\n}']",Collecting;bo;UB;Event;Collecting;atch;SECONDS;REE;subtree;Three,1.5832483768463135e-08;6.51925802230835e-09;5.587935447692871e-09;5.122274160385132e-09;4.132743924856186e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.3760443329811096e-09;3.259629011154175e-09,1,4,"[-2.865069627761841, -0.061260465532541275, -7.224186420440674, -6.464594841003418, -9.329858779907227, -9.603780746459961]",0.9405783414840698
2,"['@Test\npublic void testOneTimeRequest_noInitialDelay() {\n    val request = OneTimeWorkRequestBuilder<TestWorker>().build();\n    val task = mTaskConverter.convert(request.workSpec);\n    assertEquals(task.serviceName, WorkManagerGcmService::class.java.name);\n    assertEquals(task.isPersisted, false);\n    assertEquals(task.isUpdateCurrent, true);\n    assertEquals(task.requiredNetwork, Task.NETWORK_STATE_ANY);\n    assertEquals(task.requiresCharging, false);\n    assertEquals(task.windowStart, 0L);\n    assertEquals(task.windowEnd, 0L + EXECUTION_WINDOW_SIZE_IN_SECONDS);\n}']",window;Start;STATE;SIZE;window;Delay;Manager;SECONDS;Request;One,2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.4842953532934189e-09;1.3387762010097504e-09;1.1641532182693481e-09;9.313225746154785e-10,4,2,"[-6.156769752502441, -7.827657222747803, -2.5502328872680664, -5.682366371154785, -0.08903564512729645, -6.7251763343811035]",0.9148129820823669
2,"['@Test\npublic void testGettersAfterConnected() throws InterruptedException {\n    prepareLooper();\n    final int state = MediaPlayerBase.PLAYER_STATE_PLAYING;\n    final long position = 150000;\n    final long bufferedPosition = 900000;\n    final float speed = 0.5f;\n    mPlayer.mLastPlayerState = state;\n    mPlayer.mCurrentPosition = position;\n    mPlayer.mBufferedPosition = bufferedPosition;\n    mPlayer.mPlaybackSpeed = speed;\n    long time = System.currentTimeMillis();\n    MediaController2 controller = createController(mSession.getToken());\n    assertEquals(state, controller.getPlayerState());\n    assertEquals(bufferedPosition, controller.getBufferedPosition());\n    assertEquals(speed, controller.getPlaybackSpeed());\n    long elapsedTime = System.currentTimeMillis() - time;\n    final long tolerance = 10;\n    assertEquals(position + speed * elapsedTime, controller.getCurrentPosition(), tolerance);\n}']",Player;speed;float;buffered;Player;Player;Mill;Playback;Exception;Equals,3.725290298461914e-09;2.6193447411060333e-09;2.3283064365386963e-09;2.270098775625229e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09,2,2,"[-9.060993194580078, -6.220630645751953, -0.0026834928430616856, -8.353004455566406, -9.116037368774414, -8.376623153686523]",0.9973202347755432
2,"['@Test\npublic void testFireSubTreeEvent() throws Exception {\n    final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n    final CollectingListener objectListener = new CollectingListener(0);\n    coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);\n    final CollectingListener subtreeListener = new CollectingListener(1);\n    coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);\n    final CollectingListener oneLevelListener = new CollectingListener(0);\n    coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n    coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.SUBTREE_SCOPE);\n    subtreeListener.latch.await(1, TimeUnit.SECONDS);\n    assertTrue(objectListener.capturedEvents.isEmpty());\n    assertTrue(oneLevelListener.capturedEvents.isEmpty());\n    assertEquals(1, subtreeListener.capturedEvents.size());\n}']",coordinator;Listener;coordinator;Listener;Fire;ADDED;path;Tree;Listener;Events,5.587935447692871e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.2118911147117615e-09;2.2118911147117615e-09;1.9208528101444244e-09;1.862645149230957e-09,0,4,"[-0.0022332745138555765, -6.347659587860107, -9.136188507080078, -8.242589950561523, -9.158215522766113, -12.498144149780273]",0.9977692365646362
2,"['@Test\npublic void testWithMismatchingPending() throws Throwable\n{\n    try(Cluster cluster = init(Cluster.build(2).withConfig(config -> config.with(GOSSIP).with(NETWORK)).start()))\n    {\n        cluster.schemaChange(""create table "" + KEYSPACE + "".tbl (id int primary key, t int)"");\n        insert(cluster.coordinator(1), 0, 100);\n        cluster.forEach((node) -> node.flush(KEYSPACE));\n        cluster.get(1).callOnInstance(repair(options(false)));\n        insert(cluster.coordinator(1), 100, 100);\n        cluster.forEach((node) -> node.flush(KEYSPACE));\n        cluster.forEach((node) -> node.runOnInstance(() -> {\n            ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(""tbl"");\n            FBUtilities.waitOnFutures(CompactionManager.instance.submitBackground(cfs));\n            cfs.disableAutoCompaction();\n        }));\n        cluster.get(1).callOnInstance(repair(options(false)));\n        cluster.get(1).runOnInstance(() -> {\n            ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(""tbl"");\n            cfs.enableAutoCompaction();\n            FBUtilities.waitOnFutures(CompactionManager.instance.submitBackground(cfs));\n        });\n        RepairResult rs = cluster.get(1).callOnInstance(repair(options(true)));\n        assertTrue(rs.success);\n        assertFalse(rs.wasInconsistent);\n    }\n}']",Instance;options;coordinator;KEYSPACE;with;insert;repair;coordinator;Instance;On,4.6566128730773926e-09;1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10,0,1,"[-0.0030362955294549465, -5.922608852386475, -9.335477828979492, -8.62777328491211, -9.407743453979492, -12.409440994262695]",0.9969683289527893
2,"['@Test\npublic void shouldBuildUpGracefullyUntilReachedMinPoolSize() throws InterruptedException\n{\n    StatefulMonitor stateMonitor = new StatefulMonitor();\n    FakeClock clock = new FakeClock();\n    final LinkedQueuePool<Object> pool = getLinkedQueuePool( stateMonitor, clock, 5 );\n    ExecutorService executor = Executors.newCachedThreadPool();\n    List<FlyweightHolder<Object>> flyweightHolders = acquireFromPool( pool, 5, executor );\n    executor.shutdown();\n    for ( FlyweightHolder<Object> flyweightHolder : flyweightHolders )\n    {\n        flyweightHolder.release();\n    }\n    executor.awaitTermination( 10, TimeUnit.SECONDS );\n    assertEquals( -1, stateMonitor.currentPeakSize.get() );\n    assertEquals( -1, stateMonitor.targetSize.get() );\n    assertEquals( 0, stateMonitor.disposed.get() );\n}']",Termination;Executor;current;SECONDS;target;Executors;Gracefully;ached;Pool;older,1.1641532182693481e-08;4.0745362639427185e-09;3.026798367500305e-09;2.3283064365386963e-09;1.1932570487260818e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10,0,1,"[-0.001392824575304985, -6.845723628997803, -9.458755493164062, -8.835325241088867, -9.201211929321289, -12.58700942993164]",0.9986081719398499
2,"['@Test\npublic void testPerson() {\n    final Person p = new Person();\n    p.name = ""John Doe"";\n    p.age = 33;\n    p.smoker = false;\n    p.job = new Job();\n    p.job.title = ""Manager"";\n    final String pBaseStr = (p.getClass().getName() + ""@"") + Integer.toHexString(System.identityHashCode(p));\n    final String pJobStr = (p.job.getClass().getName() + ""@"") + Integer.toHexString(System.identityHashCode(p.job));\n    assertEquals(((pBaseStr + ""[name=John Doe,age=33,smoker=false,job="") + pJobStr) + ""[title=Manager]]"", new ReflectionToStringBuilder(p, new RecursiveToStringStyle()).toString());\n}']",Doe;Equals;Doe;age;Manager;name;Reflection;name;ex;job,4.190951585769653e-09;3.958120942115784e-09;2.0954757928848267e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10,3,3,"[-7.457210063934326, -8.881704330444336, -6.714593410491943, -0.08729231357574463, -2.5077109336853027, -8.482590675354004]",0.9164092540740967
2,"['@Test\npublic void testListenerFailures() throws InterruptedException {\n    int iters = iterations(10, 100);\n    for (int i = 0; i < iters; i++) {\n        try (TestIteration iteration = new TestIteration()) {\n            iteration.transport.endConnectMode();\n            final CountDownLatch latch = new CountDownLatch(1);\n            final AtomicInteger finalFailures = new AtomicInteger();\n            final AtomicReference<Throwable> finalFailure = new AtomicReference<>();\n            final AtomicReference<TestResponse> response = new AtomicReference<>();\n            ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>();\n            final AtomicInteger preSendFailures = new AtomicInteger();\n            iteration.transportClientNodesService.execute((node, retryListener) -> {\n                if (rarely()) {\n                    preSendFailures.incrementAndGet();\n                    throw new IllegalArgumentException();\n                }\n                iteration.transportService.sendRequest(node, ""action"", new TestRequest(),\n                TransportRequestOptions.EMPTY, new TransportResponseHandler<TestResponse>() {\n                }, actionListener);\n                assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true));\n                assertThat(preSendFailures.get() + iteration.transport.failures() + iteration.transport.successes(), lessThanOrEqualTo(1));\n                if (iteration.transport.successes() == 1) {\n                    assertThat(finalFailures.get(), equalTo(0));\n                    assertThat(finalFailure.get(), nullValue());\n                    assertThat(response.get(), notNullValue());\n                } else {\n                    assertThat(finalFailures.get(), equalTo(1));\n                    assertThat(finalFailure.get(), notNullValue());\n                    assertThat(response.get(), nullValue());\n                    if (preSendFailures.get() == 0 && iteration.transport.failures() == 0) {\n                        assertThat(finalFailure.get(), instanceOf(NoNodeAvailableException.class));\n                    }\n                }\n                assertThat(iteration.transport.triedNodes().size(), lessThanOrEqualTo(iteration.listNodesCount));\n                assertThat(iteration.transport.triedNodes().size(), equalTo(iteration.transport.connectTransportExceptions() + iteration.transport.failures() + iteration.transport.successes()));\n            });\n        }\n    }\n}']",Interrupted;Time;true;Listener;execute;atch;That;Service;Listener;Failures,1.0710209608078003e-08;7.450580596923828e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.190951585769653e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09;3.6088749766349792e-09,1,0,"[-0.8659217953681946, -0.5490186810493469, -7.37711763381958, -6.9468793869018555, -8.684067726135254, -9.659236907958984]",0.5775162577629089
2,"['@Test\npublic void testListBindingsNameNotFound() throws Exception {\n    try {\n        namingContext.listBindings(new CompositeName(""test""));\n        fail(""Should have thrown and NameNotFoundException"");\n    } catch (NameNotFoundException expected) {\n    }\n    try {\n        testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, namingContext, ""test"");\n        fail(""Should have thrown and NameNotFoundException with appropriate permissions"");\n    } catch (NameNotFoundException expected) {\n    }\n}']",catch;catch;thrown;Exception;Permission;fail;and;have;naming;Name,8.381903171539307e-09;5.3551048040390015e-09;3.259629011154175e-09;1.862645149230957e-09;1.5133991837501526e-09;1.3387762010097504e-09;1.280568540096283e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1059455573558807e-09,4,4,"[-8.479002952575684, -10.464198112487793, -8.51846981048584, -7.802394390106201, -0.0009084388730116189, -9.66879940032959]",0.9990919828414917
2,"['@Test\npublic void shutdownDatabaseDuringIndexPopulations() {\n    AssertableLogProvider assertableLogProvider = new AssertableLogProvider(true);\n    File storeDir = directory.directory(""shutdownDbTest"");\n    Label testLabel = Label.label(""testLabel"");\n    String propertyName = ""testProperty"";\n    GraphDatabaseService shutDownDb = new TestGraphDatabaseFactory().setInternalLogProvider(assertableLogProvider).newEmbeddedDatabase(storeDir);\n    prePopulateDatabase(shutDownDb, testLabel, propertyName);\n    try (final Transaction transaction = shutDownDb.beginTx()) {\n        shutDownDb.schema().indexFor(testLabel).on(propertyName).create();\n        transaction.success();\n    }\n    shutDownDb.shutdown();\n    assertableLogProvider.assertNone(AssertableLogProvider.inLog(IndexPopulationJob.class).anyError());\n}']",on;schema;Job;Log;Provider;class;During;Down;Name;Populations,4.6566128730773926e-09;2.7939677238464355e-09;2.2118911147117615e-09;1.5133991837501526e-09;1.3387762010097504e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.89530235528946e-10,4,1,"[-8.258061408996582, -10.344598770141602, -8.493260383605957, -7.808523654937744, -0.0009635811438784003, -9.710039138793945]",0.9990370273590088
2,"['@Test\npublic void testRegisterURLSchemeHandler() throws Exception {\n    InitialContext ictx = new InitialContext(null);\n    try {\n        ictx.lookup(""foobar:something"");\n        Assert.fail(""Precondition: the foobar: scheme should not yet be registered"");\n    } catch (NamingException ne) {\n    }\n    ObjectFactory tof = new TestObjectFactory();\n    InitialContext.addUrlContextFactory(""foobar"", tof);\n    String something = (String) ictx.lookup(""foobar:something"");\n    Assert.assertTrue(""The object should now be provided by our TestObjectFactory"", something.startsWith(""TestObject:""));\n    try {\n        InitialContext.removeUrlContextFactory(""foobar:"", new TestObjectFactory());\n        Assert.fail(""Should throw an IllegalArgumentException since the associated factory object doesn\'t match the registration"");\n    } catch (IllegalArgumentException iae) {\n    }\n    Assert.assertEquals(""The foobar: scheme should still be registered"", something, ictx.lookup(""foobar:something""));\n    InitialContext.removeUrlContextFactory(""foobar"", tof);\n    try {\n        ictx.lookup(""foobar:something"");\n        Assert.fail(""The foobar: scheme should not be registered any more"");\n    } catch (NamingException ne) {\n    }\n}']",registered;starts;Initial;lookup;URLScheme;Url;catch;Context;Object;Factory,3.259629011154175e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.979060471057892e-09;1.9208528101444244e-09;1.862645149230957e-09;1.7462298274040222e-09;1.57160684466362e-09;1.3969838619232178e-09;1.3969838619232178e-09,4,4,"[-8.526236534118652, -10.412211418151855, -8.503101348876953, -7.409187316894531, -0.0011069605825468898, -9.570645332336426]",0.9988934397697449
2,"['@Test\npublic void shouldDeserializeSerializedContentPack() throws Exception {\n    final ContentPack contentPack = createTestContentPack();\n    final URL contentPackURL = ContentPackTest.class.getResource(""expected_content_pack.json"");\n    Path path = Paths.get(contentPackURL.toURI());\n    String expectedJSON = String.join("""", Files.readAllLines(path)).replace(""\\n"", """").replace(""\\r"", """");\n    final String jsonTxt = objectMapper.writeValueAsString(contentPack);\n    assertThat(jsonTxt).isEqualTo(expectedJSON);\n    final ContentPack readContentPack = objectMapper.readValue(jsonTxt, ContentPack.class);\n    assertThat(readContentPack.id()).isEqualTo(contentPack.id());\n    assertThat(readContentPack.version()).isEqualTo(contentPack.version());\n    assertThat(readContentPack.revision()).isEqualTo(contentPack.revision());\n}']",Resource;Path;replace;JSON;to;version;json;Content;Content;URL,9.313225746154785e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.190951585769653e-09;4.190951585769653e-09;3.725290298461914e-09;3.026798367500305e-09;2.9103830456733704e-09;2.7939677238464355e-09;2.7939677238464355e-09,3,3,"[-8.821205139160156, -9.424099922180176, -5.806473255157471, -0.006139940582215786, -5.910439491271973, -8.65826416015625]",0.9938788414001465
2,"['@Test\npublic void testForceMetadataRefreshForPatternSubscriptionDuringRebalance() {\n    final String consumerId = ""consumer"";\n    subscriptions.subscribe(Pattern.compile("".*""), rebalanceListener);\n    client.updateMetadata(TestUtils.metadataUpdateWith(1, singletonMap(topic1, 1)));\n    assertEquals(singleton(topic1), subscriptions.subscription());\n    client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n    coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n    client.prepareMetadataUpdate(metadataResponse);\n    client.prepareResponse(joinGroupFollowerResponse(1, consumerId, ""leader"", Errors.NONE));\n    client.prepareResponse(new MockClient.RequestMatcher() {\n        @Override\n        public boolean matches(AbstractRequest body) {\n            SyncGroupRequest sync = (SyncGroupRequest) body;\n            return sync.memberId().equals(consumerId) &&\n            sync.generationId() == 1 &&\n            sync.groupAssignment().isEmpty();\n        }\n    }, syncGroupResponse(singletonList(t1p), Errors.NONE));\n    partitionAssignor.prepare(singletonMap(consumerId, singletonList(t1p)));\n    coordinator.poll(time.timer(Long.MAX_VALUE));\n    final Set<String> updatedSubscriptionSet = new HashSet<>(Arrays.asList(topic1, topic2));\n    assertEquals(updatedSubscriptionSet, subscriptions.subscription());\n    metadata.requestUpdate();\n    client.poll(Long.MAX_VALUE, time.milliseconds());\n    assertFalse(coordinator.rejoinNeededOrPending());\n}']",Response;poll;Map;join;boolean;ONE;timer;consumer;milliseconds;subscription,9.313225746154785e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.280568540096283e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.275957614183426e-10,0,1,"[-0.0011252983240410686, -7.185159206390381, -9.347024917602539, -8.726511001586914, -9.08117389678955, -12.537853240966797]",0.9988753199577332
2,"['@Test\npublic void testTrackMetadata_rowMarkerDelete() throws Throwable\n{\n    createTable(""CREATE TABLE %s (a int, PRIMARY KEY (a))"");\n    ColumnFamilyStore cfs = Keyspace.open(keyspace()).getColumnFamilyStore(currentTable());\n    execute(""DELETE FROM %s USING TIMESTAMP 9999 WHERE a=1"");\n    cfs.forceBlockingFlush();\n    assertEquals(1, cfs.getLiveSSTables().size());\n    StatsMetadata metadata = cfs.getLiveSSTables().iterator().next().getSSTableMetadata();\n    assertEquals(9999, metadata.minTimestamp);\n    assertEquals(9999, metadata.maxTimestamp);\n    assertEquals(System.currentTimeMillis()/1000, metadata.maxLocalDeletionTime, 5);\n    cfs.forceMajorCompaction();\n    StatsMetadata metadata2 = cfs.getLiveSSTables().iterator().next().getSSTableMetadata();\n    assertEquals(metadata.maxLocalDeletionTime, metadata2.maxLocalDeletionTime);\n    assertEquals(metadata.minTimestamp, metadata2.minTimestamp);\n    assertEquals(metadata.maxTimestamp, metadata2.maxTimestamp);\n}']",Major;Time;Timestamp;WHERE;TABLE;Timestamp;current;execute;min;size,1.3969838619232178e-09;1.1059455573558807e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,2,2,"[-10.152173042297363, -9.044655799865723, -0.0005964645533822477, -8.569031715393066, -9.174123764038086, -8.833968162536621]",0.999403715133667
2,"['@Test\npublic void testTrackMetadata_rowTombstone() throws Throwable\n{\n    createTable(""CREATE TABLE %s (a int, b int, c text, PRIMARY KEY (a, b))"");\n    ColumnFamilyStore cfs = Keyspace.open(keyspace()).getColumnFamilyStore(currentTable());\n    execute(""DELETE FROM %s USING TIMESTAMP 9999 WHERE a = 1"");\n    cfs.forceBlockingFlush();\n    assertEquals(1, cfs.getLiveSSTables().size());\n    StatsMetadata metadata = cfs.getLiveSSTables().iterator().next().getSSTableMetadata();\n    assertEquals(9999, metadata.minTimestamp);\n    assertEquals(9999, metadata.maxTimestamp);\n    assertEquals(System.currentTimeMillis()/1000, metadata.maxLocalDeletionTime, 5);\n    assertEquals(nowInSec(), metadata.maxLocalDeletionTime, DELTA);\n    cfs.forceMajorCompaction();\n    StatsMetadata metadata2 = cfs.getLiveSSTables().iterator().next().getSSTableMetadata();\n    assertEquals(metadata.maxLocalDeletionTime, metadata2.maxLocalDeletionTime);\n    assertEquals(metadata.minTimestamp, metadata2.minTimestamp);\n    assertEquals(metadata.maxTimestamp, metadata2.maxTimestamp);\n}']",TIMESTAMP;Table;now;Stats;text;keyspace;iterator;Mill;Blocking;Column,1.6880221664905548e-09;1.4551915228366852e-09;1.1932570487260818e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10,2,2,"[-10.204387664794922, -9.057662963867188, -0.0005621521850116551, -8.578145027160645, -9.371286392211914, -8.908305168151855]",0.9994379878044128
2,"['@Test\npublic void testPredictiveLayoutAdd2() throws Throwable {\n    preparePredictiveLayout();\n    mActivityTestRule.runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            mActivity.addItems(50, new int[]{300, 300, 300, 300});\n        }\n    });\n    waitForItemAnimationStart();\n    waitForItemAnimation(5000);\n    assertEquals(54, mGridView.getSelectedPosition());\n    assertEquals(RecyclerView.SCROLL_STATE_IDLE, mGridView.getScrollState());\n}']",Animation;For;run;get;wait;Rec;STATE;SCROLL;Grid;Add,4.470348358154297e-08;1.4901161193847656e-08;1.1175870895385742e-08;7.450580596923828e-09;7.450580596923828e-09;6.51925802230835e-09;5.587935447692871e-09;5.122274160385132e-09;4.423782229423523e-09;1.862645149230957e-09,0,0,"[-0.001978108659386635, -6.43050479888916, -9.397117614746094, -8.671257972717285, -9.151153564453125, -12.410198211669922]",0.9980238676071167
2,"['@Test\npublic class Test {\n    public void onReceive() {\n        object broadcastReceiver = TestBroadcast();\n        context.registerReceiver(\n        broadcastReceiver,\n        IntentFilter(BROADCAST_ACTION)\n        );\n        String value = ""value"" ;\n        context.sendBroadcast(Intent(BROADCAST_ACTION).putExtra(EXTRA_STRING, value));\n        shadowOf(getMainLooper()).idle() ;\n        assertWithMessage(""Broadcast receiver did not execute"")\n        .that(broadcastReceiver.broadcastExecuted.await(1, SECONDS))\n        .isTrue();\n        assertThat(broadcastReceiver.extraValue.get()).isEqualTo(value);\n        assertThat(broadcastReceiver.job.get().isCancelled).isTrue();\n    }\n}']",await;extra;shadow;That;That;register;broadcast;Receiver;Intent;class,8.847564458847046e-09;2.7939677238464355e-09;2.561137080192566e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10,0,0,"[-0.002753754146397114, -6.038642883300781, -9.414210319519043, -8.630594253540039, -9.20438289642334, -12.324676513671875]",0.9972501397132874
2,"['@Test\npublic void duplexWithRedirect() throws Exception {\n    enableProtocol(HTTP_2);\n    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(new MockResponse().clearHeaders().setResponseCode(HttpURLConnection.HTTP_MOVED_PERM).addHeader(""Location: /b""), new MockDuplexResponseBody().sendResponse(""/a has moved!\\n"").requestIOException().exhaustResponse());\n    server.enqueue(new MockResponse().setBody(""this is /b""));\n    Call call = client.newCall(new Request.Builder().url(server.url(""/"")).post(new AsyncRequestBody()).build());\n    try (final Response response = call.execute()) {\n        BufferedSource responseBody = response.body().source();\n        assertThat(responseBody.readUtf8Line()).isEqualTo(""this is /b"");\n    }\n    BufferedSink requestBody = ((AsyncRequestBody) (call.request().body())).takeSink();\n    try {\n        requestBody.writeUtf8(""request body\\n"");\n        requestBody.flush();\n        fail();\n    } catch (IOException expected) {\n        assertThat(expected.getMessage()).isEqualTo(""stream was reset: CANCEL"");\n    }\n    mockDuplexResponseBody.awaitSuccess();\n    assertThat(listener.recordedEventTypes()).containsExactly(""CallStart"", ""DnsStart"", ""DnsEnd"", ""ConnectStart"", ""SecureConnectStart"", ""SecureConnectEnd"", ""ConnectEnd"", ""ConnectionAcquired"", ""RequestHeadersStart"", ""RequestHeadersEnd"", ""RequestBodyStart"", ""ResponseHeadersStart"", ""ResponseHeadersEnd"", ""ResponseBodyStart"", ""ResponseBodyEnd"", ""RequestHeadersStart"", ""RequestHeadersEnd"", ""ResponseHeadersStart"", ""ResponseHeadersEnd"", ""ResponseBodyStart"", ""ResponseBodyEnd"", ""ConnectionReleased"", ""CallEnd"", ""RequestFailed"");\n}']",HTTP;await;Redirect;call;Call;HTTP;source;Body;call;url,1.0710209608078003e-08;8.381903171539307e-09;7.683411240577698e-09;7.450580596923828e-09;7.450580596923828e-09;7.101334631443024e-09;6.51925802230835e-09;6.51925802230835e-09;6.51925802230835e-09;5.587935447692871e-09,1,0,"[-3.084427833557129, -0.13980473577976227, -4.780539512634277, -4.0825018882751465, -2.8961377143859863, -5.467223167419434]",0.8695281147956848
2,"['@Test\npublic void testIndependentBranchesCase() {\n    graph.add(""a"", ""b"");\n    graph.add(""b"", ""c1"");\n    graph.add(""b"", ""c2"");\n    graph.add(""o"", ""p1"");\n    graph.add(""p1"", ""r1"");\n    graph.add(""r1"", ""s"");\n    graph.add(""o"", ""p2"");\n    graph.add(""p2"", ""r2"");\n    graph.add(""r2"", ""s2"");\n    graph.add(""r2"", ""s3"");\n    graph.add(""x"", ""y"");\n    graph.computeDependencies();\n    List<String> expected =\n    Arrays.asList(""a"", ""o"", ""x"", ""b"", ""p1"", ""p2"", ""y"", ""c1"", ""c2"", ""r1"", ""r2"", ""s"", ""s2"", ""s3"");\n    Assert.assertEquals(expected, dependencyOrder);\n}']",expected;add;List;graph;graph;ependencies;add;Arrays;add;graph,3.4924596548080444e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.3096723705530167e-10;1.0186340659856796e-10;8.731149137020111e-11;8.731149137020111e-11;7.275957614183426e-11;5.820766091346741e-11;5.820766091346741e-11,3,3,"[-9.222136497497559, -9.798253059387207, -8.37429428100586, -0.0007164295529946685, -8.13399600982666, -10.18480110168457]",0.9992837309837341
2,['@Test\nvoid close() throws Exception {\n    when(webSocketClient.getConnection()).thenReturn(webSocket);\n    when(webSocketClient.isOpen()).thenReturn(true);\n    webSocketConnection.close();\n    Thread.sleep(10);\n    verify(webSocket).close();\n}'],Connection;get;web;web;Client;Thread;true;Return;Socket;Return,9.313225746154785e-09;7.450580596923828e-09;5.3551048040390015e-09;4.423782229423523e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09,0,0,"[-0.0020412816666066647, -7.413910388946533, -8.548608779907227, -7.786825656890869, -7.106329441070557, -11.80419921875]",0.9979608058929443
2,"['@Test\npublic void invalidationInAnotherInstance_closed() throws Exception {\n    final SampleDatabase db1 = openDatabase(true);\n    final SampleDatabase db2 = openDatabase(true);\n    final SampleDatabase db3 = openDatabase(true);\n    final CountDownLatch invalidated1 = prepareTableObserver(db1);\n    final Pair<CountDownLatch, CountDownLatch> changed1 = prepareLiveDataObserver(db1);\n    final CountDownLatch invalidated2 = prepareTableObserver(db2);\n    final Pair<CountDownLatch, CountDownLatch> changed2 = prepareLiveDataObserver(db2);\n    final CountDownLatch invalidated3 = prepareTableObserver(db3);\n    final Pair<CountDownLatch, CountDownLatch> changed3 = prepareLiveDataObserver(db3);\n    db2.getCustomerDao().insert(CUSTOMER_1);\n    assertTrue(invalidated1.await(3, TimeUnit.SECONDS));\n    assertTrue(changed1.first.await(3, TimeUnit.SECONDS));\n    assertTrue(invalidated2.await(3, TimeUnit.SECONDS));\n    assertTrue(changed2.first.await(3, TimeUnit.SECONDS));\n    assertTrue(invalidated3.await(3, TimeUnit.SECONDS));\n    assertTrue(changed3.first.await(3, TimeUnit.SECONDS));\n    db3.close();\n    db2.getCustomerDao().insert(CUSTOMER_2);\n    assertTrue(changed1.second.await(3, TimeUnit.SECONDS));\n    assertTrue(changed2.second.await(3, TimeUnit.SECONDS));\n    assertFalse(changed3.second.await(300, TimeUnit.MILLISECONDS));\n}']",await;ILLISECONDS;SECONDS;await;Observer;prepare;db;ao;db;Time,6.705522537231445e-08;5.960464477539063e-08;2.3748725652694702e-08;2.1420419216156006e-08;1.955777406692505e-08;1.6763806343078613e-08;1.4901161193847656e-08;1.4901161193847656e-08;1.4901161193847656e-08;1.3969838619232178e-08,2,0,"[-10.039470672607422, -8.486550331115723, -0.0006248190766200423, -8.563996315002441, -9.71928596496582, -8.996623992919922]",0.9993754029273987
2,"['@Test\npublic void testSetCallbackWithNull() throws Exception {\n    mSession.setActive(true);\n    mCallback.reset(1);\n    mSession.setCallback(null, mHandler);\n    assertEquals(""Callback shouldn\'t be called."", 0, mCallback.mOnPlayCalledCount);\n}']",alled;called;On;Equals;Session;Callback;Callback;be;Set;Handler,5.587935447692871e-09;4.190951585769653e-09;3.725290298461914e-09;3.4924596548080444e-09;1.862645149230957e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10,4,0,"[-7.027271270751953, -10.022774696350098, -8.086457252502441, -7.191848278045654, -0.0020553194917738438, -9.70275592803955]",0.9979467988014221
2,"['@Test\npublic void testOnlyExternalContextAllowsCache() throws Exception {\n    KernelServices services = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n    .build();\n    Assert.assertTrue(services.isSuccessfulBoot());\n    List<ModelNode> list = parse(ModelTestUtils.readResource(this.getClass(), ""subsystem.xml""));\n    for (ModelNode addOp : list) {\n        PathAddress addr = PathAddress.pathAddress(addOp.require(ModelDescriptionConstants.OP_ADDR));\n        if (addr.size() == 2 && addr.getLastElement().getKey().equals(NamingSubsystemModel.BINDING) && BindingType.forName(addOp.get(NamingBindingResourceDefinition.BINDING_TYPE.getName()).asString()) != BindingType.EXTERNAL_CONTEXT) {\n            addOp.get(NamingBindingResourceDefinition.CACHE.getName()).set(true);\n            services.executeForFailure(addOp);\n            addOp.remove(NamingBindingResourceDefinition.CACHE.getName());\n            ModelTestUtils.checkOutcome(services.executeOperation(addOp));\n            ModelTestUtils.checkFailed(services.executeOperation(Util.getWriteAttributeOperation(addr, NamingBindingResourceDefinition.CACHE.getName(), new ModelNode(true))));\n        } else {\n            ModelTestUtils.checkOutcome(services.executeOperation(addOp));\n        }\n    }']",EXTERNAL;Successful;Services;remove;Constants;Binding;execute;Resource;INDING;read,1.6298145055770874e-08;1.0710209608078003e-08;9.778887033462524e-09;8.381903171539307e-09;8.381903171539307e-09;7.450580596923828e-09;7.450580596923828e-09;7.450580596923828e-09;6.51925802230835e-09;5.587935447692871e-09,1,4,"[-2.751657485961914, -0.7985701560974121, -4.1634063720703125, -1.9008257389068604, -1.1605521440505981, -4.841743469238281]",0.4499719440937042
2,"['@Test\npublic void testIsExpiredTimestampYesterday() {\n    LocalDateTime yesterday = LocalDateTime.now().minusDays(1);\n    String timestamp = getTimestampFormatter().format(yesterday);\n    assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), ""Timestamp should be stale: "" + timestamp);\n}']",Expired;yesterday;Days;Timestamp;Metadata;timestamp;Timestamp;be;Time;format,4.470348358154297e-08;1.210719347000122e-08;1.0244548320770264e-08;8.847564458847046e-09;6.984919309616089e-09;4.889443516731262e-09;4.6566128730773926e-09;4.6566128730773926e-09;4.6566128730773926e-09;2.561137080192566e-09,2,2,"[-9.2898530960083, -8.708305358886719, -0.0017824966926127672, -7.762976169586182, -7.123347282409668, -8.138287544250488]",0.9982190728187561
2,"['@Test\npublic void testNoTestClassesInDeploymentAssembly()\nthrows InvocationTargetException, CoreException {\n    CreateAppEngineWtpProject creator = new CreateAppEngineStandardWtpProject(config, adaptable);\n    creator.execute(monitor);\n    ProjectUtils.waitForProjects(project);\n    assertNoTestClassesInDeploymentAssembly();\n}\nprivate void assertNoTestClassesInDeploymentAssembly() throws CoreException {\n    StructureEdit core = StructureEdit.getStructureEditForRead(project);\n    WorkbenchComponent component = core.getComponent();\n    assertNotNull(component);\n    boolean seenMainSourcePath = false;\n    List<ComponentResource> resources = component.getResources();\n    for (ComponentResource resource : resources) {\n        assertFalse(containsSegment(resource.getSourcePath(), ""test""));\n        if (resource.getSourcePath().equals(new Path(""/src/main/java""))\n        && resource.getRuntimePath().equals(new Path(""/WEB-INF/classes""))) {\n            seenMainSourcePath = true;\n        }\n    }\n    assertTrue(seenMainSourcePath);\n}']",Source;Path;Source;Project;wait;project;Standard;creator;Edit;Create,1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.693881005048752e-10;6.402842700481415e-10;4.94765117764473e-10,4,0,"[-8.279134750366211, -10.342863082885742, -8.516809463500977, -7.643213748931885, -0.0010276519460603595, -9.69276237487793]",0.99897301197052
2,"['@Test\npublic void testStopTimer_withCleanUp() throws InterruptedException {\n    TestTimeLimitExceededListener listenerSpy = spy(mListener);\n    mWorkTimer.startTimer(WORKSPEC_ID_1, 100, listenerSpy);\n    mWorkTimer.stopTimer(WORKSPEC_ID_1);\n    Thread.sleep(100);\n    verify(listenerSpy, times(0)).onTimeLimitExceeded(WORKSPEC_ID_1);\n    assertThat(mWorkTimer.getTimerMap().size(), is(0));\n    assertThat(mWorkTimer.getListeners().size(), is(0));\n}']",WORKSPEC;times;Time;ID;size;WORKSPEC;Work;with;Timer;Listeners,1.9208528101444244e-09;1.3969838619232178e-09;7.566995918750763e-10;5.893525667488575e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10,0,0,"[-0.0011085085570812225, -7.493587493896484, -9.004592895507812, -8.441411972045898, -8.480515480041504, -12.158201217651367]",0.9988920092582703
2,"['@Test\npublic void testRetryWithBackpressure() throws InterruptedException {\n    final int NUM_RETRIES = RxRingBuffer.SIZE * 2;\n    for (int i = 0; i < 400; i++) {\n        @SuppressWarnings(""unchecked"")\n        Observer<String> observer = mock(Observer.class);\n        Observable<String> origin = Observable.create(new FuncWithErrors(NUM_RETRIES));\n        TestSubscriber<String> ts = new TestSubscriber<String>(observer);\n        origin.retry().observeOn(Schedulers.computation()).unsafeSubscribe(ts);\n        ts.awaitTerminalEvent(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(observer);\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(NUM_RETRIES + 1)).onNext(""beginningEveryTime"");\n        inOrder.verify(observer, times(1)).onNext(""onSuccessOnly"");\n        inOrder.verify(observer, times(1)).onCompleted();\n        inOrder.verifyNoMoreInteractions();\n    }\n}']",await;On;Terminal;on;Subscriber;RETRIES;observer;Interrupted;never;observer,4.423782229423523e-09;3.725290298461914e-09;2.2118911147117615e-09;1.862645149230957e-09;1.7462298274040222e-09;1.7462298274040222e-09;1.4551915228366852e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09,0,1,"[-0.022392405197024345, -3.8437588214874268, -8.555624008178711, -7.785789966583252, -9.097390174865723, -11.457411766052246]",0.977856457233429
2,"['@Test\npublic void testLookup() throws Exception {\n    final Name name = new CompositeName(""test"");\n    final Object object = new Object();\n    namingStore.bind(name, object);\n    Object result = namingContext.lookup(name);\n    assertEquals(object, result);\n    result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");\n    assertEquals(object, result);\n}']",bind;Permission;naming;naming;OOKUP;result;object;object;naming;Context,8.381903171539307e-09;6.984919309616089e-09;6.51925802230835e-09;4.6566128730773926e-09;3.026798367500305e-09;1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.6298145055770874e-09,4,4,"[-8.732699394226074, -10.588933944702148, -8.137221336364746, -7.17501163482666, -0.0013236580416560173, -9.452507019042969]",0.9986771941184998
2,"['@Test\npublic void testALSInputProducer() throws Exception {\n    Map<String, Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.serving.application-resources"", ""\\""com.cloudera.oryx.app.serving,com.cloudera.oryx.app.serving.als\\"""");\n    overlayConfig.put(""oryx.serving.model-manager-class"", ALSServingModelManager.class.getName());\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServer(config);\n    @SuppressWarnings(""unchecked"")\n    TopicProducer<String, String> inputProducer = ((TopicProducer<String, String>) (getServingLayer().getContext().getServletContext().getAttribute(INPUT_PRODUCER_KEY)));\n    String[] inputs = new String[]{ ""abc,123,1.5"", ""xyz,234,-0.5"", ""AB,10,0"" };\n    List<Pair<String, String>> keyMessages;\n    try (final CloseableIterator<Pair<String, String>> data = new ConsumeData(INPUT_TOPIC, getZKPort()).iterator()) {\n        log.info(""Starting consumer thread"");\n        ConsumeTopicRunnable consumeInput = new ConsumeTopicRunnable(data);\n        new Thread(consumeInput).start();\n        Thread.sleep(3000);\n        for (String input : inputs) {\n            inputProducer.send("""", input);\n        }\n        Thread.sleep(1000);\n        keyMessages = consumeInput.getKeyMessages();\n    }\n    for (int i = 0; i < keyMessages.size(); i++) {\n        Pair<String, String> keyMessage = keyMessages.get(i);\n        assertEquals("""", keyMessage.getFirst());\n        assertEquals(inputs[i], keyMessage.getSecond());\n    }\n    assertEquals(inputs.length, keyMessages.size());\n}']",iterator;abc;INPUT;Servlet;put;put;serving;xy;resources;new,7.450580596923828e-09;7.450580596923828e-09;5.122274160385132e-09;4.6566128730773926e-09;4.6566128730773926e-09;3.958120942115784e-09;3.4924596548080444e-09;3.259629011154175e-09;3.259629011154175e-09;2.7939677238464355e-09,0,0,"[-0.001649330137297511, -6.679124355316162, -9.32060718536377, -8.648404121398926, -9.005369186401367, -12.606833457946777]",0.99835205078125
2,"['@Test\npublic void testListBindings() throws Exception {\n    final Object value = new Object();\n    bindObject(ServiceName.JBOSS.append(""TestBean""), value);\n    bindObject(ServiceName.JBOSS.append(""foo"", ""TestBean""), value);\n    bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""TestBean""), value);\n    bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean""), value);\n    store.add(ServiceName.JBOSS.append(""foos"", ""bar""));\n    store.add(ServiceName.JBOSS.append(""fo"", ""bar""));\n    store.add(ServiceName.JBOSS.append(""foo"", ""ba"", ""baz""));\n    store.add(ServiceName.JBOSS.append(""foo"", ""bart"", ""baz""));\n    store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""ba""));\n    store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""bazt""));\n    store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""art""));\n    store.add(ServiceName.JBOSS.append(""other"", ""one""));\n    List<Binding> list = store.listBindings(new CompositeName(""""));\n    assertEquals(5, list.size());\n    assertContains(list, ""TestBean"", Object.class);\n    assertContains(list, ""foo"", NamingContext.class);\n    assertContains(list, ""fo"", NamingContext.class);\n    assertContains(list, ""foos"", NamingContext.class);\n    assertContains(list, ""other"", NamingContext.class);\n    list = store.listBindings(new CompositeName(""foo""));\n    assertEquals(4, list.size());\n    assertContains(list, ""TestBean"", Object.class);\n    assertContains(list, ""ba"", NamingContext.class);\n    assertContains(list, ""bart"", NamingContext.class);\n    assertContains(list, ""bar"", NamingContext.class);\n    for (Binding binding : list) {\n        if (binding.getName().equals(""bar"")) {\n            final Object bean = Context.class.cast(binding.getObject()).lookup(""TestBean"");\n            assertNotNull(bean);\n            assertEquals(value, bean);\n        }\n    }\n}']",fo;Object;bar;bar;add;ba;Object;bar;Service;size,6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.710738383233547e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,3,4,"[-9.219892501831055, -9.783784866333008, -8.322297096252441, -0.0006934384000487626, -8.25771713256836, -10.245973587036133]",0.9993067979812622
2,"['@Test\npublic void basicSwipeTest(int dir, int swipeDirs, int targetX) throws Throwable {\n    final RecyclerView recyclerView = setup(0, swipeDirs);\n    mLayoutManager.expectLayouts(1);\n    setRecyclerView(recyclerView);\n    mLayoutManager.waitForLayout(1);\n    final RecyclerView.ViewHolder target = mRecyclerView\n    .findViewHolderForAdapterPosition(1);\n    TouchUtils.dragViewToX(getInstrumentation(), target.itemView, Gravity.CENTER, targetX);\n    Thread.sleep(100);\n    final SwipeRecord swipe = mCalback.getSwipe(target);\n    assertNotNull(swipe);\n    assertEquals(dir, swipe.dir);\n    assertEquals(1, mItemTouchHelper.mRecoverAnimations.size());\n    assertEquals(1, mItemTouchHelper.mPendingCleanup.size());\n    mLayoutManager.expectLayouts(1);\n    mAdapter.deleteAndNotify(1, 1);\n    mLayoutManager.waitForLayout(1);\n    waitForAnimations();\n    assertEquals(0, mItemTouchHelper.mRecoverAnimations.size());\n    assertEquals(0, mItemTouchHelper.mPendingCleanup.size());\n    assertTrue(mCalback.isCleared(target));\n}']",sleep;target;size;older;item;Layout;dir;wait;Layouts;drag,1.3969838619232178e-09;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,0,0,"[-0.001086598145775497, -7.415493011474609, -9.095643043518066, -8.552927017211914, -8.656126976013184, -12.22286319732666]",0.9989140033721924
2,"['@Test\npublic void testListBindingsWithContinuation() throws Exception {\n    bindListWithContinuations();\n    NamingEnumeration<Binding> results = namingContext.listBindings(new CompositeName(""comp""));\n    checkListWithContinuationsResults(results);\n    results = (NamingEnumeration<Binding>) testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, Arrays.asList(\n    new JndiPermission(""test"", ""listBindings"")), namingContext, ""comp"");\n    checkListWithContinuationsResults(results);\n}']",Permission;Permission;naming;aming;List;INDINGS;inding;Composite;Continuations;Bindings,1.0710209608078003e-08;6.28642737865448e-09;5.122274160385132e-09;5.122274160385132e-09;4.423782229423523e-09;4.190951585769653e-09;3.725290298461914e-09;3.725290298461914e-09;3.4924596548080444e-09;3.3760443329811096e-09,4,4,"[-8.554712295532227, -10.455339431762695, -8.034214973449707, -6.115181922912598, -0.0028431490063667297, -9.380420684814453]",0.9971609115600586
2,"['@Test\npublic void testValidate_badXml() throws IOException, CoreException {\n    XmlValidator validator = new XmlValidator();\n    validator.setHelper(new AppEngineWebXmlValidator());\n    IFile file = createBogusProjectFile();\n    byte[] badXml = BAD_XML.getBytes(StandardCharsets.UTF_8);\n    validator.validate(file, badXml);\n    IMarker[] emptyMarkers =\n    ProjectUtils.waitUntilNoMarkersFound(file, PROBLEM, true, DEPTH_ZERO);\n    ArrayAssertions.assertIsEmpty(emptyMarkers);\n}']",IMarker;PROBLE;Found;wait;Array;Markers;Markers;ERO;DE;Markers,8.381903171539307e-09;7.450580596923828e-09;7.450580596923828e-09;5.587935447692871e-09;5.122274160385132e-09;4.6566128730773926e-09;4.6566128730773926e-09;3.725290298461914e-09;3.725290298461914e-09;3.725290298461914e-09,4,0,"[-8.446096420288086, -10.485889434814453, -8.41635513305664, -7.471012592315674, -0.0010943383676931262, -9.711827278137207]",0.998906135559082
2,"['    @Test\n    public void testUpdatedCurrentPeakSizeLogsOnlyOnChange() throws Exception\n    {\n        StringLogger logger = mock( StringLogger.class );\n        LoggingResourcePoolMonitor monitor = new LoggingResourcePoolMonitor( logger );\n\n        monitor.updatedCurrentPeakSize( 10 );\n        verify( logger, times( 1 ) ).debug( anyString() );\n\n        monitor.updatedCurrentPeakSize( 10 );\n        verify( logger, times( 1 ) ).debug( anyString() );\n\n        monitor.updatedCurrentPeakSize( 11 );\n        verify( logger, times( 2 ) ).debug( anyString() );\n    }\n']",mock;updated;monitor;verify;debug;monitor;Log;updated;Change;Size,1.1641532182693481e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.919854640960693, -5.554036617279053, -4.654568195343018, -5.784914016723633, -5.36175012588501, -0.024130461737513542]",0.9761583209037781
2,"['    @Test\n    public void testUpdatedTargetSizeOnlyOnChange() throws Exception\n    {\n        StringLogger logger = mock( StringLogger.class );\n        LoggingResourcePoolMonitor monitor = new LoggingResourcePoolMonitor( logger );\n\n        monitor.updatedTargetSize( 10 );\n        verify( logger, times( 1 ) ).debug( anyString() );\n\n        monitor.updatedTargetSize( 10 );\n        verify( logger, times( 1 ) ).debug( anyString() );\n\n        monitor.updatedTargetSize( 11 );\n        verify( logger, times( 2 ) ).debug( anyString() );\n    }\n']",monitor;Size;Pool;Logger;verify;Target;monitor;Size;updated;updated,1.2514647096395493e-09;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.920620441436768, -5.554407596588135, -4.655344486236572, -5.7829365730285645, -5.3623738288879395, -0.02412266470491886]",0.9761660695075989
2,"['    @Test\n    public void shouldHaveFixedTargetTransactionIdEvenIfLastTransactionIdIsMoving() throws Exception\n    {\n        // GIVEN\n        LogicalTransactionStore transactionStore = mock( LogicalTransactionStore.class );\n        long lastAppliedTransactionId = 5L;\n        IOCursor<CommittedTransactionRepresentation> endlessCursor = new EndlessCursor( lastAppliedTransactionId+1 );\n        when( transactionStore.getTransactions( anyLong() ) ).thenReturn( endlessCursor );\n        final long targetTransactionId = 8L;\n        final TransactionIdStore transactionIdStore = new DeadSimpleTransactionIdStore( targetTransactionId, 0 );\n        ResponsePacker packer = new ResponsePacker( transactionStore, transactionIdStore,\n                singletonProvider( new StoreId() ) );\n\n        // WHEN\n        Response<Object> response = packer.packTransactionStreamResponse( requestContextStartingAt( 5L ), null );\n        final AtomicLong nextExpectedVisit = new AtomicLong( lastAppliedTransactionId );\n        response.accept( new Response.Handler()\n        {\n            @Override\n            public void obligation( long txId ) throws IOException\n            {\n                fail( ""Should not be called"" );\n            }\n']",Moving;WHEN;Logical;Handler;Applied;Even;fail;Atomic;Long;last,1.3969838619232178e-09;1.1641532182693481e-09;4.3655745685100555e-10;4.147295840084553e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.979626655578613, -5.413681983947754, -4.617990016937256, -5.852179050445557, -5.504891395568848, -0.024085775017738342]",0.9762019515037537
2,['    @Test\n    public void shouldCopyStoreFilesAcrossIfACancellationRequestHappensAfterTheTempStoreHasBeenRecovered()\n            throws IOException\n'],Store;Files;The;Store;ACancellation;Recovered;Request;Copy;appens;Has,4.190951585769653e-09;3.259629011154175e-09;3.026798367500305e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.444721758365631e-09;1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;0.0,5,5,"[-6.008649826049805, -5.471373558044434, -4.591733932495117, -5.896941184997559, -5.430629730224609, -0.024217266589403152]",0.9760737419128418
2,['    @Test\n    public void shouldEndUpWithAnEmptyStoreIfCancellationRequestIssuedJustBeforeRecoveryTakesPlace()\n            throws IOException\n'],End;ancellation;Issued;Recovery;Empty;Request;IOException;akes;Store;Place,7.450580596923828e-09;3.725290298461914e-09;2.7939677238464355e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;0.0,5,5,"[-5.999672889709473, -5.492199420928955, -4.611571788787842, -5.889707088470459, -5.410811901092529, -0.024057380855083466]",0.9762296676635742
2,"['    @Test\n    public void testStopShouldAllowTransactionsToCompleteCommitAndApply() throws Throwable\n    {\n        // Given\n\n        // Handcrafted deep mocks, otherwise the dependency resolution throws ClassCastExceptions\n        DependencyResolver dependencyResolver = mock( DependencyResolver.class );\n        TransactionIdStore txIdStore = mock( TransactionIdStore.class );\n\n        when( dependencyResolver.resolveDependency( TransactionIdStore.class ) ).thenReturn( txIdStore );\n\n        TransactionAppender appender = mockedTransactionAppender();\n        LogicalTransactionStore logicalTransactionStore = mock( LogicalTransactionStore.class );\n        when( logicalTransactionStore.getAppender() ).thenReturn( appender );\n        when( dependencyResolver.resolveDependency( LogicalTransactionStore.class ) )\n                .thenReturn( logicalTransactionStore );\n\n        when( dependencyResolver.resolveDependency( TransactionRepresentationStoreApplier.class ) )\n                .thenReturn( mock( TransactionRepresentationStoreApplier.class ) );\n        LogFile logFile = mock( LogFile.class );\n        when( dependencyResolver.resolveDependency( LogFile.class ) ).thenReturn( logFile );\n        LogRotation logRotation = mock(LogRotation.class);\n        when( dependencyResolver.resolveDependency( LogRotation.class ) ).thenReturn( logRotation );\n\n        setUpIndexUpdatesValidatorMocking( dependencyResolver );\n\n          /*\n           * The tx handler is called on every transaction applied after setting its id to committing\n           * but before setting it to applied. We use this to stop the unpacker in the middle of the\n           * process.\n           */\n        StoppingTxHandler stoppingTxHandler = new StoppingTxHandler();\n\n        int maxBatchSize = 10;\n        TransactionCommittingResponseUnpacker unpacker = new TransactionCommittingResponseUnpacker(\n                dependencyResolver, maxBatchSize );\n        stoppingTxHandler.setUnpacker( unpacker );\n\n        // When\n        unpacker.start();\n        long committingTransactionId = BASE_TX_ID + 1;\n        DummyTransactionResponse response = new DummyTransactionResponse( committingTransactionId, 1, appender, maxBatchSize );\n        unpacker.unpackResponse( response, stoppingTxHandler );\n\n        // Then\n        // we can\'t verify transactionCommitted since that\'s part of the TransactionAppender, which we have mocked\n        verify( txIdStore, times( 1 ) ).transactionClosed( committingTransactionId );\n        verify( appender, times( 1 ) ).append( any( TransactionRepresentation.class ), anyLong() );\n        verify( appender, times( 1 ) ).force();\n        verify( logRotation, times( 1 ) ).rotateLogIfNeeded( logAppendEvent );\n\n        // Then\n          // The txhandler has stopped the unpacker. It should not allow any more transactions to go through\n        try\n        {\n            unpacker.unpackResponse( mock( Response.class ), stoppingTxHandler );\n            fail( ""A stopped transaction unpacker should not allow transactions to be applied"" );\n        }\n        catch( IllegalStateException e)\n        {\n            // good\n        }\n        verifyNoMoreInteractions( txIdStore );\n        verifyNoMoreInteractions( appender );\n    }\n']",Applier;ocks;Allow;otherwise;transaction;Stop;deep;ependency;ependency;ependency,9.313225746154785e-10;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.346940502524376e-10;3.346940502524376e-10,5,5,"[-5.932746887207031, -5.336643695831299, -4.620520114898682, -5.839334011077881, -5.526947498321533, -0.024497415870428085]",0.9758002161979675
2,"['    @Test\n    public void shouldApplyQueuedTransactionsIfMany() throws Throwable\n    {\n        // GIVEN\n        DependencyResolver dependencyResolver = mock( DependencyResolver.class );\n        TransactionIdStore txIdStore = mock( TransactionIdStore.class );\n\n        when( dependencyResolver.resolveDependency( TransactionIdStore.class ) ).thenReturn( txIdStore );\n\n        TransactionAppender appender = mockedTransactionAppender();\n        LogicalTransactionStore logicalTransactionStore = mock( LogicalTransactionStore.class );\n        when( logicalTransactionStore.getAppender() ).thenReturn( appender );\n        when( dependencyResolver.resolveDependency( LogicalTransactionStore.class ) )\n                .thenReturn( logicalTransactionStore );\n\n        when( dependencyResolver.resolveDependency( TransactionRepresentationStoreApplier.class ) )\n                .thenReturn( mock( TransactionRepresentationStoreApplier.class ) );\n\n        setUpIndexUpdatesValidatorMocking( dependencyResolver );\n\n        LogFile logFile = mock( LogFile.class );\n        when( dependencyResolver.resolveDependency( LogFile.class ) ).thenReturn( logFile );\n\n        LogRotation logRotation = mock(LogRotation.class);\n        when( dependencyResolver.resolveDependency( LogRotation.class ) ).thenReturn( logRotation );\n\n        int maxBatchSize = 3;\n        TransactionCommittingResponseUnpacker unpacker = new TransactionCommittingResponseUnpacker(\n                dependencyResolver, maxBatchSize );\n        unpacker.start();\n\n        // WHEN/THEN\n        int txCount = maxBatchSize * 2 - 1;\n        unpacker.unpackResponse( new DummyTransactionResponse( 2, txCount, appender, maxBatchSize ), NO_OP_TX_HANDLER );\n\n        // and THEN\n        verify( appender, times( txCount ) ).append( any( TransactionRepresentation.class ), anyLong() );\n        verify( appender, times( 2 ) ).force();\n        verify( logRotation, times( 2 ) ).rotateLogIfNeeded( logAppendEvent );\n    }\n']",Applier;Applier;should;when;Throwable;Many;Logical;ependency;Queued;Resolver,1.5133991837501526e-09;1.1059455573558807e-09;9.313225746154785e-10;6.111804395914078e-10;6.111804395914078e-10;5.238689482212067e-10;4.511093720793724e-10;4.43833414465189e-10;4.3655745685100555e-10;4.18367562815547e-10,5,5,"[-5.9159746170043945, -5.369601726531982, -4.633129119873047, -5.808278560638428, -5.491978645324707, -0.024496136233210564]",0.9758014678955078
2,"['    @Test\n    public void shouldAwaitTransactionObligationsToBeFulfilled() throws Throwable\n    {\n        // GIVEN\n        DependencyResolver dependencyResolver = mock( DependencyResolver.class );\n\n        TransactionIdStore txIdStore = mock( TransactionIdStore.class );\n        when( dependencyResolver.resolveDependency( TransactionIdStore.class ) ).thenReturn( txIdStore );\n\n        TransactionAppender appender = mock( TransactionAppender.class );\n        LogicalTransactionStore logicalTransactionStore = mock( LogicalTransactionStore.class );\n        when( logicalTransactionStore.getAppender() ).thenReturn( appender );\n        when( dependencyResolver.resolveDependency( LogicalTransactionStore.class ) )\n                .thenReturn( logicalTransactionStore );\n\n        when( dependencyResolver.resolveDependency( TransactionRepresentationStoreApplier.class ) )\n                .thenReturn( mock( TransactionRepresentationStoreApplier.class ) );\n        TransactionObligationFulfiller obligationFulfiller = mock( TransactionObligationFulfiller.class );\n        when( dependencyResolver.resolveDependency( TransactionObligationFulfiller.class ) )\n                .thenReturn( obligationFulfiller );\n        final TransactionCommittingResponseUnpacker unpacker = new TransactionCommittingResponseUnpacker(\n                dependencyResolver );\n        unpacker.start();\n\n        // WHEN\n        unpacker.unpackResponse( new DummyObligationResponse( 4 ), NO_OP_TX_HANDLER );\n\n        // THEN\n        verify( obligationFulfiller, times( 1 ) ).fulfill( 4l );\n    }\n']",when;bligations;bligation;should;obligation;ANDLER;unpack;IVEN;Response;mock,4.802132025361061e-10;4.656612873077393e-10;4.001776687800884e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.938296318054199, -5.3541646003723145, -4.621053695678711, -5.836071014404297, -5.517761707305908, -0.02443866990506649]",0.9758575558662415
2,"['    @Test\n    public void shouldIssueKernelPanicInCaseOfFailureToAppendOrApply() throws Throwable\n    {\n        // GIVEN\n        DependencyResolver dependencyResolver = mock( DependencyResolver.class );\n\n        TransactionIdStore txIdStore = mock( TransactionIdStore.class );\n        when( dependencyResolver.resolveDependency( TransactionIdStore.class ) ).thenReturn( txIdStore );\n\n        TransactionAppender appender = mock( TransactionAppender.class );\n        LogicalTransactionStore logicalTransactionStore = mock( LogicalTransactionStore.class );\n        when( logicalTransactionStore.getAppender() ).thenReturn( appender );\n        when( dependencyResolver.resolveDependency( LogicalTransactionStore.class ) )\n                .thenReturn( logicalTransactionStore );\n\n        when( dependencyResolver.resolveDependency( TransactionRepresentationStoreApplier.class ) )\n                .thenReturn( mock( TransactionRepresentationStoreApplier.class ) );\n        TransactionObligationFulfiller obligationFulfiller = mock( TransactionObligationFulfiller.class );\n        when( dependencyResolver.resolveDependency( TransactionObligationFulfiller.class ) )\n                .thenReturn( obligationFulfiller );\n        LogFile logFile = mock( LogFile.class );\n        when( dependencyResolver.resolveDependency( LogFile.class ) ).thenReturn( logFile );\n        KernelHealth kernelHealth = mock( KernelHealth.class );\n        when( dependencyResolver.resolveDependency( KernelHealth.class ) ).thenReturn( kernelHealth );\n        LogRotation logRotation = mock(LogRotation.class);\n        when( dependencyResolver.resolveDependency( LogRotation.class ) ).thenReturn( logRotation );\n        final TransactionCommittingResponseUnpacker unpacker = new TransactionCommittingResponseUnpacker(\n                dependencyResolver );\n        unpacker.start();\n\n        // WHEN failing to append one or more transactions from a transaction stream response\n        IOException failure = new IOException( ""Expected failure"" );\n        doThrow( failure ).when( appender ).append( any( TransactionRepresentation.class ), anyLong() );\n        try\n        {\n            unpacker.unpackResponse(\n                    new DummyTransactionResponse( BASE_TX_ID+1, 1, appender, 10 ), NO_OP_TX_HANDLER );\n            fail( ""Should have failed"" );\n        }\n        catch ( IOException e )\n        {\n            assertThat( e.getMessage(), containsString( failure.getMessage() ) );\n            verify( kernelHealth ).panic( failure );\n        }\n    }\n']",should;Appender;Apply;Applier;when;dependency;Throwable;Appender;logical;Appender,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.926907539367676, -5.394241809844971, -4.628448963165283, -5.81984281539917, -5.485849380493164, -0.024387367069721222]",0.9759076237678528
2,"['    @Test\n    public void shouldNotApplyTransactionIfIndexUpdatesValidationFails() throws Throwable\n    {\n        // Given\n        DependencyResolver resolver = mock( DependencyResolver.class );\n\n        when( resolver.resolveDependency( LogFile.class ) ).thenReturn( mock( LogFile.class ) );\n        when( resolver.resolveDependency( LogRotation.class ) ).thenReturn( mock( LogRotation.class ) );\n        when( resolver.resolveDependency( TransactionIdStore.class ) ).thenReturn( mock( TransactionIdStore.class ) );\n        KernelHealth kernelHealth = mock( KernelHealth.class );\n        when( resolver.resolveDependency( KernelHealth.class ) ).thenReturn( kernelHealth );\n        LogicalTransactionStore txStore = mock( LogicalTransactionStore.class );\n        TransactionAppender appender = mockedTransactionAppender();\n        when( txStore.getAppender() ).thenReturn( appender );\n        when( resolver.resolveDependency( LogicalTransactionStore.class ) ).thenReturn( txStore );\n        TransactionRepresentationStoreApplier storeApplier = mock( TransactionRepresentationStoreApplier.class );\n        when( resolver.resolveDependency( TransactionRepresentationStoreApplier.class ) ).thenReturn( storeApplier );\n\n        IndexUpdatesValidator validator = mock( IndexUpdatesValidator.class );\n        IOException error = new IOException( ""error"" );\n        when( validator.validate( any( TransactionRepresentation.class ), eq( TransactionApplicationMode.EXTERNAL ) ) )\n                .thenThrow( error );\n        when( resolver.resolveDependency( IndexUpdatesValidator.class ) ).thenReturn( validator );\n\n        TransactionCommittingResponseUnpacker unpacker = new TransactionCommittingResponseUnpacker( resolver );\n        unpacker.start();\n\n        Response<?> response = new DummyTransactionResponse( BASE_TX_ID + 1, 1, appender, 10 );\n\n        // When\n        try\n        {\n            unpacker.unpackResponse( response, NO_OP_TX_HANDLER );\n            fail( ""Should have thrown "" + IOException.class.getSimpleName() );\n        }\n        catch ( IOException e )\n        {\n            assertSame( error, e );\n        }\n\n        // Then\n        verifyZeroInteractions( storeApplier );\n        verify( kernelHealth ).panic( error );\n    }\n']",ependency;otation;ependency;Representation;Log;Index;store;Validator;Store;class,4.656612873077393e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.128661774098873e-10;2.546585164964199e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.939270496368408, -5.41358757019043, -4.626382350921631, -5.819944858551025, -5.4922566413879395, -0.024257875978946686]",0.9760339856147766
2,"['    @Test\n    public void shouldNotMarkTransactionsAsCommittedIfAppenderClosed() throws Throwable\n    {\n        // GIVEN an unpacker with close-to-real dependencies injected\n        DependencyResolver resolver = mock( DependencyResolver.class );\n        // (we don\'t want this FS in every test in this class, so just don\'t use EFSR)\n        FileSystemAbstraction fs = cleanup.add( new EphemeralFileSystemAbstraction() );\n        File directory = new File( ""dir"" );\n        fs.mkdirs( directory );\n        PhysicalLogFiles logFiles = new PhysicalLogFiles( directory, fs );\n        TransactionIdStore transactionIdStore = spy( new DeadSimpleTransactionIdStore() );\n        LogVersionRepository logVersionRepository = mock( LogVersionRepository.class );\n        TransactionMetadataCache transactionMetadataCache = new TransactionMetadataCache( 10, 10 );\n        LogFile logFile = life.add( new PhysicalLogFile( fs, logFiles, 1_000, transactionIdStore,\n                logVersionRepository, new PhysicalLogFile.Monitor.Adapter(), transactionMetadataCache ) );\n        KernelHealth health = mock( KernelHealth.class );\n        LogRotation logRotation = LogRotation.NO_ROTATION;\n        LogicalTransactionStore logicalTransactionStore = life.add( new PhysicalLogicalTransactionStore( logFile,\n                logRotation, transactionMetadataCache, transactionIdStore, IdOrderingQueue.BYPASS,\n                health, true ) );\n        IndexUpdatesValidator indexUpdatesValidator = mock( IndexUpdatesValidator.class );\n        when( indexUpdatesValidator.validate( any( TransactionRepresentation.class ),\n                any( TransactionApplicationMode.class ) ) ).thenReturn( ValidatedIndexUpdates.NONE );\n        life.start();\n        TransactionAppender appender = logicalTransactionStore.getAppender();\n        when( resolver.resolveDependency( LogicalTransactionStore.class ) ).thenReturn( logicalTransactionStore );\n        when( resolver.resolveDependency( IndexUpdatesValidator.class ) ).thenReturn( indexUpdatesValidator );\n        when( resolver.resolveDependency( TransactionIdStore.class ) ).thenReturn( transactionIdStore );\n        when( resolver.resolveDependency( TransactionObligationFulfiller.class ) ).thenReturn( null );\n        when( resolver.resolveDependency( LogFile.class ) ).thenReturn( logFile );\n        when( resolver.resolveDependency( LogRotation.class ) ).thenReturn( logRotation );\n        when( resolver.resolveDependency( KernelHealth.class ) ).thenReturn( health );\n        when( resolver.resolveDependency( TransactionObligationFulfiller.class ) ).thenThrow(\n                new IllegalArgumentException() );\n        TransactionCommittingResponseUnpacker unpacker = new TransactionCommittingResponseUnpacker( resolver );\n        unpacker.start();\n\n        // and a closed logFile/appender\n        life.shutdown();\n\n        // WHEN packing up a transaction response\n        try\n        {\n            unpacker.unpackResponse( new DummyTransactionResponse( BASE_TX_ID+1, 1, appender, 5 ), NO_OP_TX_HANDLER );\n            fail( ""Should have failed"" );\n        }\n        catch ( Exception e )\n        {\n            // THEN apart from failing we don\'t want any committed/closed calls to TransactionIdStore\n            verify( transactionIdStore, times( 0 ) ).transactionCommitted( anyLong(), anyLong() );\n            verify( transactionIdStore, times( 0 ) ).transactionClosed( anyLong() );\n        }\n    }\n']",should;Committed;unpacker;dependencies;otation;Metadata;real;FS;add;close,6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.5838532969355583e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.975470542907715, -5.411519527435303, -4.6308159828186035, -5.847325325012207, -5.5230536460876465, -0.023916903883218765]",0.9763668179512024
2,"['    @Test\n    public void shouldNotReuseBrokenInstances() throws Exception\n    {\n        ResourcePool<Something> pool = new ResourcePool<Something>( 5 )\n        {\n            @Override\n            protected Something create()\n            {\n                return new Something();\n            }\n\n            @Override\n            protected boolean isAlive( Something resource )\n            {\n                return !resource.closed;\n            }\n        };\n\n        Something somethingFirst = pool.acquire();\n        somethingFirst.doStuff();\n        pool.release();\n\n        Something something = pool.acquire();\n        assertEquals( somethingFirst, something );\n        something.doStuff();\n        something.close();\n        pool.release();\n\n        Something somethingElse = pool.acquire();\n        assertFalse( something == somethingElse );\n        somethingElse.doStuff();\n    }\n']",Alive;pool;Resource;Reuse;Broken;something;protected;pool;new;Else,1.57160684466362e-09;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;3.92901711165905e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.964737892150879, -5.429356098175049, -4.6311821937561035, -5.813366889953613, -5.482041835784912, -0.0241339523345232]",0.9761549234390259
2,"['    @Test\n    public void shouldTimeoutGracefully() throws InterruptedException\n    {\n        FakeClock clock = new FakeClock();\n\n        ResourcePool.CheckStrategy timeStrategy = new ResourcePool.CheckStrategy.TimeoutCheckStrategy( 100, clock );\n\n        while ( clock.currentTimeMillis() <= 100 )\n        {\n            assertFalse( timeStrategy.shouldCheck() );\n            clock.forward( 10, TimeUnit.MILLISECONDS );\n        }\n\n        assertTrue( timeStrategy.shouldCheck() );\n\n        clock.forward( 1, TimeUnit.MILLISECONDS );\n        assertFalse( timeStrategy.shouldCheck() );\n    }\n']",should;Timeout;clock;Strategy;Clock;False;forward;Strategy;new;clock,1.862645149230957e-09;1.862645149230957e-09;9.89530235528946e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.910189151763916, -5.509809970855713, -4.647330284118652, -5.800032138824463, -5.398975372314453, -0.024184569716453552]",0.9761056303977966
2,"['    @Test\n    public void shouldBuildUpGracefullyUntilReachedMinPoolSize() throws InterruptedException\n    {\n        // GIVEN\n        StatefulMonitor stateMonitor = new StatefulMonitor();\n        FakeClock clock = new FakeClock();\n        final ResourcePool<Something> pool = getResourcePool( stateMonitor, clock, 5 );\n\n        // WHEN\n        acquireFromPool( pool, 5 );\n\n        // THEN\n        assertEquals( -1, stateMonitor.currentPeakSize.get() );\n        assertEquals( -1, stateMonitor.targetSize.get() ); // that means the target size was not updated\n        assertEquals( 0, stateMonitor.disposed.get() ); // no disposed happened, since the count to update is 10\n    }\n']",should;WHEN;Pool;Gracefully;Clock;Fake;Reached;disposed;Pool;happened,2.3283064365386963e-09;1.0477378964424133e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.951402187347412, -5.50827693939209, -4.638370990753174, -5.8241190910339355, -5.436075210571289, -0.023924587294459343]",0.9763593077659607
2,"['    @Test\n    public void shouldBuildUpGracefullyWhilePassingMinPoolSizeBeforeTimerRings() throws InterruptedException\n    {\n        // GIVEN\n        StatefulMonitor stateMonitor = new StatefulMonitor();\n        FakeClock clock = new FakeClock();\n        final ResourcePool<Something> pool = getResourcePool( stateMonitor, clock, 5 );\n\n        // WHEN\n        acquireFromPool( pool, 15 );\n\n        // THEN\n        assertEquals( -1, stateMonitor.currentPeakSize.get() );\n        assertEquals( 15, stateMonitor.created.get() );\n        assertEquals( -1, stateMonitor.targetSize.get() );\n        assertEquals( 0, stateMonitor.disposed.get() );\n    }\n']",Before;clock;Fake;While;Interrupted;IVEN;should;Clock;new;Build,9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.949040412902832, -5.525410175323486, -4.639610290527344, -5.814971923828125, -5.417261600494385, -0.023960666730999947]",0.9763240814208984
2,"['    @Test\n    public void shouldUpdateTargetSizeWhenSpikesOccur() throws Exception\n    {\n        // given\n        final int MIN_SIZE = 5;\n        final int MAX_SIZE = 10;\n\n        StatefulMonitor stateMonitor = new StatefulMonitor();\n        FakeClock clock = new FakeClock();\n        final ResourcePool<Something> pool = getResourcePool( stateMonitor, clock, MIN_SIZE );\n\n        // when\n        List<ResourceHolder> holders = acquireFromPool( pool, MAX_SIZE );\n        clock.forward( 110, TimeUnit.MILLISECONDS );\n        holders.addAll( acquireFromPool( pool, 1 ) ); // Needed to trigger the alarm\n\n        // then\n        assertEquals( MAX_SIZE + 1, stateMonitor.currentPeakSize.get() );\n        // We have not released anything, so targetSize will not be reduced\n        assertEquals( MAX_SIZE + 1, stateMonitor.targetSize.get() ); // + 1 from the acquire\n\n        for ( ResourceHolder holder : holders )\n        {\n            holder.end();\n        }\n    }\n']",forward;Unit;Target;Clock;Spikes;Clock;clock;alarm;holder;reduced,6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.948921203613281, -5.465419769287109, -4.646104335784912, -5.802987575531006, -5.46306848526001, -0.023982547223567963]",0.9763028621673584
2,"['    @Test\n    public void shouldKeepSmallPeakAndNeverDisposeIfAcquireAndReleaseContinuously() throws Exception\n    {\n        // given\n        final int MIN_SIZE = 1;\n\n        StatefulMonitor stateMonitor = new StatefulMonitor();\n        FakeClock clock = new FakeClock();\n        final ResourcePool<Something> pool = getResourcePool( stateMonitor, clock, MIN_SIZE );\n\n        // when\n        for ( int i = 0; i < 200; i++ )\n        {\n            List<ResourceHolder> newOnes = acquireFromPool( pool, 1 );\n            CountDownLatch release = new CountDownLatch( newOnes.size() );\n            for ( ResourceHolder newOne : newOnes )\n            {\n                newOne.release( release );\n            }\n            release.await();\n        }\n\n        // then\n        assertEquals( -1, stateMonitor.currentPeakSize.get() ); // no alarm has rung, -1 is the default\n        assertEquals( 1, stateMonitor.created.get() );\n        assertEquals( 0, stateMonitor.disposed.get() ); // we should always be below min size, so 0 dispose calls\n    }\n']",Pool;should;so;Peak;Equals;Peak;min;default;clock;Fake,1.6298145055770874e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.977706432342529, -5.421701431274414, -4.625063419342041, -5.830573081970215, -5.522244930267334, -0.023975681513547897]",0.9763094782829285
2,"[""    @Test\n    public void shouldSlowlyReduceTheNumberOfResourcesInThePoolWhenResourcesAreReleased() throws Exception\n    {\n        // given\n        final int MIN_SIZE = 50;\n        final int MAX_SIZE = 200;\n\n        StatefulMonitor stateMonitor = new StatefulMonitor();\n        FakeClock clock = new FakeClock();\n        final ResourcePool<Something> pool = getResourcePool( stateMonitor, clock, MIN_SIZE );\n        List<ResourceHolder> holders = new LinkedList<ResourceHolder>();\n\n        buildAPeakOfAcquiredResourcesAndTriggerAlarmWithSideEffects( MAX_SIZE, clock, pool, holders );\n\n        // when\n        // After the peak, stay below MIN_SIZE concurrent usage, using up all already present resources.\n        clock.forward( 110, TimeUnit.MILLISECONDS );\n        for ( int i = 0; i < MAX_SIZE; i++ )\n        {\n            acquireFromPool( pool, 1 ).get( 0 ).release();\n        }\n\n        // then\n\n        // currentPeakSize must have reset from the latest alarm to MIN_SIZE.\n        assertEquals( 1, stateMonitor.currentPeakSize.get() ); // Alarm\n        // targetSize must be set to MIN_SIZE since currentPeakSize was that 2 alarms ago and didn't increase\n        assertEquals( MIN_SIZE, stateMonitor.targetSize.get() );\n        // Only pooled resources must be used, disposing what is in excess\n        // +1 for the alarm from buildAPeakOfAcquiredResourcesAndTriggerAlarmWithSideEffects\n        assertEquals( MAX_SIZE - MIN_SIZE + 1, stateMonitor.disposed.get() );\n    }\n""]",When;The;Resources;MIN;from;and;Peak;AP;below;Resource,8.731149137020111e-10;7.712515071034431e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.953023910522461, -5.368744850158691, -4.648500919342041, -5.801769256591797, -5.5308837890625, -0.024106955155730247]",0.9761813879013062
2,"['    @Test\n    public void shouldMaintainPoolAtHighWatermarkWhenConcurrentUsagePassesMinSize() throws Exception\n    {\n        // given\n        final int MIN_SIZE = 50;\n        final int MAX_SIZE = 200;\n        final int MID_SIZE = 90;\n\n        StatefulMonitor stateMonitor = new StatefulMonitor();\n        FakeClock clock = new FakeClock();\n        final ResourcePool<Something> pool = getResourcePool( stateMonitor, clock, MIN_SIZE );\n        List<ResourceHolder> holders = new LinkedList<ResourceHolder>();\n\n        buildAPeakOfAcquiredResourcesAndTriggerAlarmWithSideEffects( MAX_SIZE, clock, pool, holders );\n\n        // when\n        // After the peak, stay at MID_SIZE concurrent usage, using up all already present resources in the process\n        // but also keeping the high watermark above the MIN_SIZE\n        clock.forward( 110, TimeUnit.MILLISECONDS );\n        // Requires some rounds to happen, since there is constant racing between releasing and acquiring which does\n        // not always result in reaping of resources, as there is reuse\n        for ( int i = 0; i < 10; i++ )\n        {\n            // The latch is necessary to reduce races between batches\n            CountDownLatch release = new CountDownLatch( MID_SIZE );\n            for ( ResourceHolder holder : acquireFromPool( pool, MID_SIZE ) )\n            {\n                holder.release( release );\n            }\n            release.await();\n            clock.forward( 110, TimeUnit.MILLISECONDS );\n        }\n\n        // then\n        // currentPeakSize should be at MID_SIZE\n        assertEquals( MID_SIZE, stateMonitor.currentPeakSize.get() );\n        // target size too\n        assertEquals( MID_SIZE, stateMonitor.targetSize.get() );\n        // only the excess from the MAX_SIZE down to mid size must have been disposed\n        // +1 for the alarm from buildAPeakOfAcquiredResourcesAndTriggerAlarmWithSideEffects\n        assertEquals( MAX_SIZE - MID_SIZE + 1, stateMonitor.disposed.get() );\n    }\n']",peak;reaping;pool;reuse;latch;necessary;clock;When;After;and,1.1641532182693481e-09;8.731149137020111e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.8562575355172157e-10,5,5,"[-6.0200042724609375, -5.2749762535095215, -4.579095363616943, -5.883103370666504, -5.6339521408081055, -0.024469498544931412]",0.9758275747299194
2,"['    @Test\n    public void shouldReclaimAndRecreateWhenLullBetweenSpikesOccurs() throws Exception\n    {\n        // given\n        final int MIN_SIZE = 50;\n        final int BELOW_MIN_SIZE = MIN_SIZE / 5;\n        final int MAX_SIZE = 200;\n\n        StatefulMonitor stateMonitor = new StatefulMonitor();\n        FakeClock clock = new FakeClock();\n        final ResourcePool<Something> pool = getResourcePool( stateMonitor, clock, MIN_SIZE );\n        List<ResourceHolder> holders = new LinkedList<ResourceHolder>();\n\n        buildAPeakOfAcquiredResourcesAndTriggerAlarmWithSideEffects( MAX_SIZE, clock, pool, holders );\n\n        // when\n        // After the peak, stay well below concurrent usage, using up all already present resources in the process\n        clock.forward( 110, TimeUnit.MILLISECONDS );\n        // Requires some rounds to happen, since there is constant racing between releasing and acquiring which does\n        // not always result in reaping of resources, as there is reuse\n        for ( int i = 0; i < 30; i++ )\n        {\n            // The latch is necessary to reduce races between batches\n            CountDownLatch release = new CountDownLatch( BELOW_MIN_SIZE );\n            for ( ResourceHolder holder : acquireFromPool( pool, BELOW_MIN_SIZE ) )\n            {\n                holder.release( release );\n            }\n            release.await();\n            clock.forward( 110, TimeUnit.MILLISECONDS );\n        }\n\n        // then\n        // currentPeakSize should be at MIN_SIZE / 5\n        assertEquals( BELOW_MIN_SIZE, stateMonitor.currentPeakSize.get() );\n        // target size should remain at MIN_SIZE\n        assertEquals( MIN_SIZE, stateMonitor.targetSize.get() );\n        // only the excess from the MAX_SIZE down to min size must have been disposed\n        // +1 for the alarm from buildAPeakOfAcquiredResourcesAndTriggerAlarmWithSideEffects\n        assertEquals( MAX_SIZE - MIN_SIZE + 1, stateMonitor.disposed.get() );\n\n        stateMonitor.created.set( 0 );\n        stateMonitor.disposed.set( 0 );\n\n        // when\n        // After the lull, recreate a peak\n        buildAPeakOfAcquiredResourcesAndTriggerAlarmWithSideEffects( MAX_SIZE, clock, pool, holders );\n\n        // then\n        assertEquals( MAX_SIZE - MIN_SIZE + 1, stateMonitor.created.get() );\n        assertEquals( 0, stateMonitor.disposed.get() );\n\n    }\n']",in;Fake;Alarm;happen;ILLISECONDS;release;reduce;the;forward;necessary,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-6.009397506713867, -5.282615661621094, -4.588616371154785, -5.870782375335693, -5.622264862060547, -0.024434948340058327]",0.9758613109588623
2,"['    @Test\n    public void shouldSendExceptionBackToClientOnInvalidChecksum() throws Exception\n    {\n        // Given\n        Server<Object, Object> server = newServer( checksumVerifier );\n        RequestContext ctx = new RequestContext( 0, 1, 0, 1, 12 );\n\n        doThrow(new IllegalStateException(""123"")).when(checksumVerifier).assertMatch( anyLong(), anyLong() );\n\n        // When\n        try\n        {\n            server.messageReceived( channelCtx( channel ), message( reqType, ctx, channel, EMPTY_SERIALIZER ) );\n            fail(""Should have failed."");\n        }\n        catch(IllegalStateException e)\n        {\n            // Expected\n        }\n\n        // Then\n        try\n        {\n            protocol.deserializeResponse( channel.asBlockingReadHandler(), ByteBuffer.allocateDirect( 1024 ), 1,\n                    VOID_DESERIALIZER, mock( ResourceReleaser.class ) );\n            fail(""Should have failed."");\n        }\n        catch(IllegalStateException e)\n        {\n            assertThat(e.getMessage(), equalTo(""123""));\n        }\n\n    }\n']",Releaser;Throw;fail;Checksum;Match;On;Blocking;catch;Invalid;Send,6.693881005048752e-10;6.693881005048752e-10;4.94765117764473e-10;4.802132025361061e-10;4.511093720793724e-10;4.220055416226387e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.948608875274658, -5.454751014709473, -4.645709991455078, -5.815946102142334, -5.457401275634766, -0.024018509313464165]",0.9762676358222961
2,"['    @Test\n    public void clientGetResponseFromServerViaComLayer() throws Throwable\n    {\n        MadeUpServerImplementation serverImplementation = new MadeUpServerImplementation( storeIdToUse );\n        MadeUpServer server = builder.server( serverImplementation );\n        MadeUpClient client = builder.client();\n        addToLifeAndStart( server, client );\n\n        int value1 = 10;\n        int value2 = 5;\n        Response<Integer> response = client.multiply( 10, 5 );\n        waitUntilResponseHasBeenWritten( server, 1000 );\n        assertEquals( (Integer) (value1 * value2), response.response() );\n        assertTrue( serverImplementation.gotCalled() );\n        assertTrue( server.responseHasBeenWritten() );\n    }\n']",Throwable;Get;Written;Implementation;Use;Response;Been;response;Equals;From,1.1641532182693481e-09;8.149072527885437e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.990095615386963, -5.595713138580322, -4.617011070251465, -5.837459087371826, -5.414535999298096, -0.02374684251844883]",0.9765328764915466
2,"['    @Test(expected = MismatchingStoreIdException.class)\n    public void makeSureClientStoreIdsMustMatch() throws Throwable\n    {\n        MadeUpServer server = builder.server();\n        MadeUpClient client = builder.storeId( new StoreId( 10, 10, 10, 10 ) ).client();\n        addToLifeAndStart( server, client );\n\n        client.multiply( 1, 2 );\n    }\n']",multiply;expected;Sure;Client;Server;Life;class;client;Store;store,2.1245796233415604e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.979340076446533, -5.575913429260254, -4.628133296966553, -5.835146903991699, -5.406240940093994, -0.023783627897500992]",0.9764969944953918
2,"['    @Test(expected = MismatchingStoreIdException.class)\n    public void makeSureServerStoreIdsMustMatch() throws Throwable\n    {\n        MadeUpServer server = builder.storeId( new StoreId( 10, 10, 10, 10 ) ).server();\n        MadeUpClient client = builder.client();\n        addToLifeAndStart( server, client );\n\n        client.multiply( 1, 2 );\n    }\n']",add;Match;Up;Store;Exception;ismatching;Up;client;Made;client,9.604264050722122e-10;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.980316638946533, -5.585733413696289, -4.629467964172363, -5.829090118408203, -5.397078514099121, -0.023790262639522552]",0.9764904975891113
2,"['    @Test\n    public void makeSureClientCanStreamBigData() throws Throwable\n    {\n        MadeUpServer server = builder.server();\n        MadeUpClient client = builder.client();\n        addToLifeAndStart( server, client );\n\n\n        client.fetchDataStream( new ToAssertionWriter(), FRAME_LENGTH * 3 );\n    }\n']",Stream;new;ENGTH;builder;Client;server;add;Can;Up;Server,9.313225746154785e-10;6.984919309616089e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.6007106751203537e-10;5.820766091346741e-11,5,5,"[-6.006595134735107, -5.567887783050537, -4.577364444732666, -5.881039619445801, -5.431814670562744, -0.024016065523028374]",0.9762700200080872
2,"['    @Test\n    public void clientThrowsServerSideErrorMidwayThroughStreaming() throws Throwable\n    {\n        final String failureMessage = ""Just failing"";\n        MadeUpServerImplementation serverImplementation = new MadeUpServerImplementation( storeIdToUse )\n        {\n            @Override\n            public Response<Void> fetchDataStream( MadeUpWriter writer, int dataSize )\n            {\n                writer.write( new FailingByteChannel( dataSize, failureMessage ) );\n                return new TransactionStreamResponse<>( null, storeIdToUse, TransactionStream.EMPTY,\n                        ResourceReleaser.NO_OP );\n            }\n']",Side;Server;Made;fetch;EMPTY;Resource;Server;Throws;Made;failure,1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.95587682723999, -5.3523969650268555, -4.596518039703369, -5.856983661651611, -5.497120380401611, -0.024674678221344948]",0.9756273627281189
2,"['    @Test\n    public void communicateBetweenJvms() throws Throwable\n    {\n        ServerInterface server = builder.serverInOtherJvm();\n        server.awaitStarted();\n        MadeUpClient client = builder.port( MadeUpServerProcess.PORT ).client();\n        life.add( client );\n        life.start();\n\n        assertEquals( (Integer) (9 * 5), client.multiply( 9, 5 ).response() );\n        client.fetchDataStream( new ToAssertionWriter(), 1024 * 1024 * 3 );\n\n        server.shutdown();\n    }\n']",PORT;Process;port;Made;await;builder;add;Started;Up;Server,7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.989984035491943, -5.552489757537842, -4.615894794464111, -5.841668128967285, -5.421340465545654, -0.02388303354382515]",0.9764000177383423
2,"['    @Test\n    public void throwingServerSideExceptionBackToClient() throws Throwable\n    {\n        MadeUpServer server = builder.server();\n        MadeUpClient client = builder.client();\n        addToLifeAndStart( server, client );\n\n        String exceptionMessage = ""The message"";\n        try\n        {\n            client.throwException( exceptionMessage );\n            fail( ""Should have thrown "" + MadeUpException.class.getSimpleName() );\n        }\n        catch ( MadeUpException e )\n        {   // Good\n            assertEquals( exceptionMessage, e.getMessage() );\n        }\n    }\n']",Start;Made;Message;Simple;thrown;Up;client;Server;Message;Message,6.111804395914078e-10;5.456968210637569e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.41970007866621e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.996942043304443, -5.532726764678955, -4.61035680770874, -5.849759578704834, -5.424748420715332, -0.023961365222930908]",0.9763234257698059
2,"['    @Test\n    public void applicationProtocolVersionsMustMatch() throws Throwable\n    {\n        MadeUpServer server = builder.applicationProtocolVersion( (byte) (APPLICATION_PROTOCOL_VERSION + 1) ).server();\n        MadeUpClient client = builder.client();\n        addToLifeAndStart( server, client );\n\n        try\n        {\n            client.multiply( 10, 20 );\n            fail( ""Shouldn\'t be able to communicate with different application protocol versions"" );\n        }\n        catch ( IllegalProtocolVersionException e )\n        { /* Good */ }\n    }\n']",fail;Versions;to;Good;Must;Illegal;Protocol;multiply;communicate;PROTOCOL,1.6298145055770874e-09;1.280568540096283e-09;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.989645957946777, -5.55737829208374, -4.616042613983154, -5.8626790046691895, -5.419763088226318, -0.023808421567082405]",0.9764728546142578
2,"['    @Test\n    public void applicationProtocolVersionsMustMatchMultiJvm() throws Throwable\n    {\n        ServerInterface server = builder.applicationProtocolVersion( (byte) (APPLICATION_PROTOCOL_VERSION + 1) )\n                                        .serverInOtherJvm();\n        server.awaitStarted();\n        MadeUpClient client = builder.port( MadeUpServerProcess.PORT ).client();\n        life.add( client );\n        life.start();\n\n        try\n        {\n            client.multiply( 10, 20 );\n            fail( ""Shouldn\'t be able to communicate with different application protocol versions"" );\n        }\n        catch ( IllegalProtocolVersionException e )\n        { /* Good */ }\n\n        server.shutdown();\n    }\n']",multiply;vm;server;Protocol;Multi;await;client;Throwable;Client;server,1.0913936421275139e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.990930557250977, -5.484084129333496, -4.62562370300293, -5.848580360412598, -5.457569122314453, -0.023881986737251282]",0.9764009118080139
2,"['    @Test\n    public void internalProtocolVersionsMustMatch() throws Throwable\n    {\n        MadeUpServer server = builder.internalProtocolVersion( (byte) 1 ).server();\n        MadeUpClient client = builder.internalProtocolVersion( (byte) 2 ).client();\n        addToLifeAndStart( server, client );\n\n        try\n        {\n            client.multiply( 10, 20 );\n            fail( ""Shouldn\'t be able to communicate with different application protocol versions"" );\n        }\n        catch ( IllegalProtocolVersionException e )\n        { /* Good */ }\n    }\n']",client;Match;protocol;Made;Throwable;internal;server;fail;Start;byte,9.89530235528946e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.992706775665283, -5.567807674407959, -4.620769023895264, -5.844212055206299, -5.418709754943848, -0.023770704865455627]",0.9765095710754395
2,"['    @Test\n    public void internalProtocolVersionsMustMatchMultiJvm() throws Throwable\n    {\n        ServerInterface server = builder.internalProtocolVersion( (byte) 1 ).serverInOtherJvm();\n        server.awaitStarted();\n        MadeUpClient client = builder.port( MadeUpServerProcess.PORT ).internalProtocolVersion( (byte) 2 ).client();\n        life.add( client );\n        life.start();\n\n        try\n        {\n            client.multiply( 10, 20 );\n            fail( ""Shouldn\'t be able to communicate with different application protocol versions"" );\n        }\n        catch ( IllegalProtocolVersionException e )\n        { /* Good */ }\n\n        server.shutdown();\n    }\n']",communicate;Protocol;protocol;client;Other;byte;life;multiply;Version;different,6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.996700286865234, -5.531515598297119, -4.621277332305908, -5.8575825691223145, -5.438509464263916, -0.023771636188030243]",0.9765087962150574
2,"['    @Test\n    public void serverStopsStreamingToDeadClient() throws Throwable\n    {\n        MadeUpServer server = builder.server();\n        MadeUpClient client = builder.client();\n        addToLifeAndStart( server, client );\n\n        int failAtSize = FRAME_LENGTH / 2;\n        ClientCrashingWriter writer = new ClientCrashingWriter( client, failAtSize );\n        try\n        {\n            client.fetchDataStream( writer, FRAME_LENGTH * 10 );\n            assertTrue( writer.getSizeRead() >= failAtSize );\n            fail( ""Should fail in the middle"" );\n        }\n        catch ( ComException e )\n        {   // Expected\n        }\n        assertTrue( writer.getSizeRead() >= failAtSize );\n\n        long maxWaitUntil = System.currentTimeMillis() + 2 * 1000;\n        while ( !server.responseFailureEncountered() && System.currentTimeMillis() < maxWaitUntil )\n        {\n            yield();\n        }\n        assertTrue( ""Failure writing the response should have been encountered"", server.responseFailureEncountered() );\n        assertFalse( ""Response shouldn\'t have been successful"", server.responseHasBeenWritten() );\n    }\n']",Stops;FRAME;Dead;the;yield;Should;Encountered;Expected;the;True,6.984919309616089e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.936262607574463, -5.514305114746094, -4.650204181671143, -5.7852654457092285, -5.419443607330322, -0.024018626660108566]",0.9762676358222961
2,"['    @Test\n    public void serverContextVerificationCanThrowException() throws Throwable\n    {\n        final String failureMessage = ""I\'m failing"";\n        TxChecksumVerifier failingVerifier = new TxChecksumVerifier()\n        {\n            @Override\n            public void assertMatch( long txId, long checksum )\n            {\n                throw new FailingException( failureMessage );\n            }\n']",Verification;checksum;'m;Verifier;Exception;new;throw;Verifier;Can;Message,1.0477378964424133e-09;6.984919309616089e-10;6.693881005048752e-10;6.257323548197746e-10;6.111804395914078e-10;5.238689482212067e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.978708744049072, -5.413419723510742, -4.596655368804932, -5.873688697814941, -5.474178791046143, -0.02437480166554451]",0.9759198427200317
2,"['    @Test\n    public void clientCanReadChunkSizeBiggerThanItsOwn() throws Throwable\n    {   // Given that frameLength is the same for both client and server.\n        int serverChunkSize = 20000;\n        int clientChunkSize = serverChunkSize / 10;\n        MadeUpServer server = builder.chunkSize( serverChunkSize ).server();\n        MadeUpClient client = builder.chunkSize( clientChunkSize ).client();\n\n        addToLifeAndStart( server, client );\n\n        // Tell server to stream data occupying roughly two chunks. The chunks\n        // from server are 10 times bigger than the clients chunk size.\n        client.fetchDataStream( new ToAssertionWriter(), serverChunkSize * 2 );\n    }\n']",Than;Own;Its;the;that;client;Chunk;the;Data;chunks,2.6775524020195007e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;6.984919309616089e-10,5,5,"[-6.025275707244873, -5.5138397216796875, -4.61681604385376, -5.872270107269287, -5.512258052825928, -0.023458214476704597]",0.9768148064613342
2,"['    @Test\n    public void serverCanReadChunkSizeBiggerThanItsOwn() throws Throwable\n    {   // Given that frameLength is the same for both client and server.\n        int serverChunkSize = 1000;\n        int clientChunkSize = serverChunkSize * 10;\n        MadeUpServer server = builder.chunkSize( serverChunkSize ).server();\n        MadeUpClient client = builder.chunkSize( clientChunkSize ).client();\n\n        addToLifeAndStart( server, client );\n\n        // Tell server to stream data occupying roughly two chunks. The chunks\n        // from server are 10 times bigger than the clients chunk size.\n        client.sendDataStream( new DataProducer( clientChunkSize * 2 ) );\n    }\n']",Than;server;Tell;Stream;same;both;Made;Chunk;Its;Chunk,3.4924596548080444e-09;1.3387762010097504e-09;1.0477378964424133e-09;1.0186340659856796e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-6.047261714935303, -5.510465621948242, -4.598217964172363, -5.901610851287842, -5.532835006713867, -0.023440631106495857]",0.97683185338974
2,"['    @Test\n    public void impossibleToHaveBiggerChunkSizeThanFrameSize() throws Throwable\n    {\n        Builder myBuilder = builder.chunkSize( MadeUpServer.FRAME_LENGTH + 10 );\n        try\n        {\n            myBuilder.server().start();\n            fail( ""Shouldn\'t be possible"" );\n        }\n        catch ( IllegalArgumentException e )\n        {   // Good\n        }\n\n        try\n        {\n            myBuilder.client();\n            fail( ""Shouldn\'t be possible"" );\n        }\n        catch ( IllegalArgumentException e )\n        {   // Good\n        }\n    }\n']",impossible;Bigger;Have;builder;client;fail;start;Size;Should;my,1.6298145055770874e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.029311180114746, -5.557125091552734, -4.599946975708008, -5.864990711212158, -5.450783729553223, -0.023728564381599426]",0.9765506386756897
2,"['    @Test\n    public void clientShouldUseHandlersToHandleComExceptions()\n    {\n        // Given\n        final String comExceptionMessage = ""The ComException"";\n\n        MadeUpCommunicationInterface communication = mock( MadeUpCommunicationInterface.class, new Answer<Response<?>>()\n        {\n            @Override\n            public Response<?> answer( InvocationOnMock _ ) throws ComException\n            {\n                throw new ComException( comExceptionMessage );\n            }\n']",Answer;communication;Handlers;Response;Up;final;Exception;new;Made;ock,4.0978193283081055e-08;1.30385160446167e-08;1.210719347000122e-08;1.0011717677116394e-08;9.313225746154785e-09;8.847564458847046e-09;7.916241884231567e-09;7.450580596923828e-09;6.984919309616089e-09;6.51925802230835e-09,5,5,"[-5.9571380615234375, -5.366046905517578, -4.592113971710205, -5.855494976043701, -5.4637675285339355, -0.0247978363186121]",0.9755069613456726
2,"['    @Test\n    public void masterResponseShouldBeUnpackedIfRequestTypeRequires() throws IOException\n    {\n        // Given\n        ResponseUnpacker responseUnpacker = mock( ResponseUnpacker.class );\n        MadeUpClient client = builder.clientWith( responseUnpacker );\n        addToLifeAndStart( builder.server(), client );\n\n        // When\n        client.multiply( 42, 42 );\n\n        // Then\n        ArgumentCaptor<Response> captor = ArgumentCaptor.forClass( Response.class );\n        verify( responseUnpacker ).unpackResponse( captor.capture(), any( TxHandler.class ) );\n        assertEquals( storeIdToUse, captor.getValue().getStoreId() );\n        assertEquals( 42 * 42, captor.getValue().response() );\n    }\n']",Unpacked;Should;Be;server;Class;Response;Then;Response;Given;client,1.862645149230957e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.964789867401123, -5.525595664978027, -4.634343147277832, -5.822298526763916, -5.428637504577637, -0.02389676868915558]",0.9763866066932678
2,"['    @Test\n    public void masterResponseShouldNotBeUnpackedIfRequestTypeDoesNotRequire()\n    {\n        // Given\n        ResponseUnpacker responseUnpacker = mock( ResponseUnpacker.class );\n        MadeUpClient client = builder.clientWith( responseUnpacker );\n        addToLifeAndStart( builder.server(), client );\n\n        // When\n        client.sendDataStream( new KnownDataByteChannel( 100 ) );\n\n        // Then\n        verifyZeroInteractions( responseUnpacker );\n    }\n']",Require;Given;master;Unpacked;verify;response;Request;Unpacker;Channel;Life,8.731149137020111e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.0139007568359375, -5.557125091552734, -4.590880393981934, -5.872982025146484, -5.442648410797119, -0.02387348935008049]",0.9764092564582825
2,"['    @Test\n    public void shouldStreamBackTransactions() throws Exception\n    {\n        // GIVEN\n        int value = 11, txCount = 3;\n        life.add( builder.server() );\n        MadeUpClient client = life.add( builder.client() );\n        life.start();\n        Response<Integer> respone = client.streamBackTransactions( value, txCount );\n        TransactionStreamVerifyingResponseHandler handler = new TransactionStreamVerifyingResponseHandler( txCount );\n\n        // WHEN\n        respone.accept( handler );\n        int responseValue = respone.response();\n\n        // THEN\n        assertEquals( value, responseValue );\n        assertEquals( txCount, handler.expectedTxId );\n    }\n']",WHEN;THEN;expected;Verifying;Transaction;Count;IVEN;response;Response;handler,1.280568540096283e-09;5.529727786779404e-10;5.238689482212067e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.985327243804932, -5.537741184234619, -4.612634658813477, -5.838373184204102, -5.4434123039245605, -0.0238980483263731]",0.976385235786438
2,"['    @Test\n    public void shouldAdhereToTransactionObligations() throws Exception\n    {\n        // GIVEN\n        int value = 15;\n        long desiredObligation = 8;\n        life.add( builder.server() );\n        MadeUpClient client = life.add( builder.client() );\n        life.start();\n        Response<Integer> respone = client.informAboutTransactionObligations( value, desiredObligation );\n        TransactionObligationVerifyingResponseHandler handler = new TransactionObligationVerifyingResponseHandler();\n\n        // WHEN\n        respone.accept( handler );\n        int responseValue = respone.response();\n\n        // THEN\n        assertEquals( value, responseValue );\n        assertEquals( desiredObligation, handler.obligationTxId );\n    }\n']",obligation;Exception;bligation;bligation;accept;life;THEN;bligation;desired;start,1.1641532182693481e-09;9.89530235528946e-10;7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.982782363891602, -5.503568649291992, -4.618261814117432, -5.836055755615234, -5.462525367736816, -0.02391073666512966]",0.9763728380203247
2,"['    @Test\n    public void shouldIgnoreLogicalLogsWhenCopyingFilesForBackup() throws IOException\n    {\n        // given\n        final FileSystemAbstraction fs = new StubFileSystemAbstraction();\n\n        XaDataSource dataSource = mock( XaDataSource.class );\n\n        FileResourceIterator storeFiles = new FileResourceIterator( fs, testDirectory, ""neostore.nodestore.db"" );\n        FileResourceIterator logicalLogs = new FileResourceIterator( fs, testDirectory,\n        PhysicalLogFile.DEFAULT_NAME + PhysicalLogFile.DEFAULT_VERSION_SUFFIX + ""0"" );\n\n        when( dataSource.listStoreFiles() ).thenReturn( storeFiles );\n        when( dataSource.listLogicalLogs() ).thenReturn( logicalLogs );\n        when( dataSource.getBranchId() ).thenReturn( ""branch"".getBytes() );\n        when( dataSource.getName() ).thenReturn( ""branch"" );\n\n        XaContainer xaContainer = mock( XaContainer.class );\n        when( dataSource.getXaContainer() ).thenReturn( xaContainer );\n\n        XaLogicalLog xaLogicalLog = mock( XaLogicalLog.class );\n\n        when( xaContainer.getLogicalLog() ).thenReturn( xaLogicalLog );\n\n        XaResourceManager xaResourceManager = mock( XaResourceManager.class );\n        when( xaContainer.getResourceManager() ).thenReturn( xaResourceManager );\n\n        XaDataSourceManager dsManager = new XaDataSourceManager( StringLogger.DEV_NULL );\n        dsManager.registerDataSource( dataSource );\n\n        KernelPanicEventGenerator kernelPanicEventGenerator = mock( KernelPanicEventGenerator.class );\n        StoreWriter storeWriter = mock( StoreWriter.class );\n\n        // when\n        ServerUtil.rotateLogsAndStreamStoreFiles( testDirectory.absolutePath(), dsManager, kernelPanicEventGenerator,\n                StringLogger.DEV_NULL, false, storeWriter, fs, StoreCopyMonitor.NONE );\n\n        // then\n        verify( storeWriter ).write( eq( ""neostore.nodestore.db"" ), any( ReadableByteChannel.class ),\n                any( ByteBuffer.class ), any( Boolean.class ) );\n        verify( storeWriter, never() ).write( eq( PhysicalLogFile.DEFAULT_NAME + PhysicalLogFile.DEFAULT_VERSION_SUFFIX + ""0"" ), any( ReadableByteChannel.class ),\n                any( ByteBuffer.class ), any( Boolean.class ) );\n\n    }\n']",Logger;when;when;Manager;when;ranch;branch;Return;Log;Resource,2.3283064365386963e-09;1.979060471057892e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.280568540096283e-09;9.89530235528946e-10;9.89530235528946e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.851057052612305, -5.318231105804443, -4.66832160949707, -5.756156921386719, -5.451674938201904, -0.024926792830228806]",0.9753813147544861
2,"['    @Test\n    public void shouldCopyLogicalLogFile() throws IOException\n    {\n        // given\n        final FileSystemAbstraction fs = new StubFileSystemAbstraction();\n\n        XaDataSource dataSource = mock( XaDataSource.class );\n\n        FileResourceIterator storeFiles = new FileResourceIterator( fs, testDirectory );\n        FileResourceIterator logicalLogs = new FileResourceIterator( fs, testDirectory, PhysicalLogFile.DEFAULT_NAME + PhysicalLogFile.DEFAULT_VERSION_SUFFIX + ""0"" );\n\n        when( dataSource.listStoreFiles() ).thenReturn( storeFiles );\n        when( dataSource.listLogicalLogs() ).thenReturn( logicalLogs );\n        when( dataSource.getBranchId() ).thenReturn( ""branch"".getBytes() );\n        when( dataSource.getName() ).thenReturn( ""branch"" );\n\n        XaContainer xaContainer = mock( XaContainer.class );\n        when( dataSource.getXaContainer() ).thenReturn( xaContainer );\n\n        XaLogicalLog xaLogicalLog = mock( XaLogicalLog.class );\n\n        when( xaContainer.getLogicalLog() ).thenReturn( xaLogicalLog );\n\n        XaResourceManager xaResourceManager = mock( XaResourceManager.class );\n        when( xaContainer.getResourceManager() ).thenReturn( xaResourceManager );\n\n        XaDataSourceManager dsManager = new XaDataSourceManager( StringLogger.DEV_NULL );\n        dsManager.registerDataSource( dataSource );\n\n        KernelPanicEventGenerator kernelPanicEventGenerator = mock( KernelPanicEventGenerator.class );\n        StoreWriter storeWriter = mock( StoreWriter.class );\n\n        // when\n        ServerUtil.rotateLogsAndStreamStoreFiles( testDirectory.absolutePath(), dsManager, kernelPanicEventGenerator,\n                StringLogger.DEV_NULL, true, storeWriter, fs, StoreCopyMonitor.NONE );\n\n        // then\n        verify( storeWriter ).write( eq( PhysicalLogFile.DEFAULT_NAME + PhysicalLogFile.DEFAULT_VERSION_SUFFIX + ""0"" ), any( ReadableByteChannel.class ),\n                any( ByteBuffer.class ), any( Boolean.class ) );\n    }\n']",Abstraction;Data;Iterator;System;when;SUFFIX;NAME;Bytes;when;System,4.94765117764473e-10;3.7834979593753815e-10;3.710738383233547e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.837623469531536e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.854256629943848, -5.311217784881592, -4.6696624755859375, -5.752091884613037, -5.456427574157715, -0.02493225783109665]",0.9753760695457458
2,"['    @Test\n    public void shouldNotThrowFileNotFoundExceptionWhenTryingToCopyAMissingLogicalLogFile() throws IOException\n    {\n        // given\n        final FileSystemAbstraction fs = new StubFileSystemAbstraction();\n\n        XaDataSource dataSource = mock( XaDataSource.class );\n\n        FileResourceIterator storeFiles = new FileResourceIterator( fs, testDirectory, ""neostore.nodestore.db"" );\n\n        FileResourceIterator logicalLogs = new FileResourceIterator( fs, testDirectory,\n        PhysicalLogFile.DEFAULT_NAME + PhysicalLogFile.DEFAULT_VERSION_SUFFIX + ""0"" );\n        logicalLogs.deleteBeforeCopy( PhysicalLogFile.DEFAULT_NAME + PhysicalLogFile.DEFAULT_VERSION_SUFFIX + ""0"" );\n\n        when( dataSource.listStoreFiles() ).thenReturn( storeFiles );\n        when( dataSource.listLogicalLogs() ).thenReturn( logicalLogs );\n\n        when( dataSource.getBranchId() ).thenReturn( ""branch"".getBytes() );\n        when( dataSource.getName() ).thenReturn( ""branch"" );\n\n        XaContainer xaContainer = mock( XaContainer.class );\n        when( dataSource.getXaContainer() ).thenReturn( xaContainer );\n\n        XaResourceManager xaResourceManager = mock( XaResourceManager.class );\n        when( xaContainer.getResourceManager() ).thenReturn( xaResourceManager );\n\n        XaDataSourceManager dsManager = new XaDataSourceManager( StringLogger.DEV_NULL );\n        dsManager.registerDataSource( dataSource );\n\n        KernelPanicEventGenerator kernelPanicEventGenerator = mock( KernelPanicEventGenerator.class );\n        StoreWriter storeWriter = mock( StoreWriter.class );\n\n        // when\n        ServerUtil.rotateLogsAndStreamStoreFiles( testDirectory.absolutePath(), dsManager, kernelPanicEventGenerator,\n                StringLogger.DEV_NULL, true, storeWriter, fs, StoreCopyMonitor.NONE );\n\n        // then\n        verify( storeWriter ).write( eq( ""neostore.nodestore.db"" ), any( ReadableByteChannel.class ),\n                any( ByteBuffer.class ), any( Boolean.class ) );\n    }\n']",Generator;mock;Stub;Log;Log;new;Log;File;Before;mock,5.020410753786564e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.845755100250244, -5.312882900238037, -4.668564319610596, -5.745631694793701, -5.455151557922363, -0.02498597651720047]",0.975323498249054
2,"['    @Test\n    public void shouldThrowFileNotFoundExceptionWhenTryingToCopyAStoreFileWhichDoesNotExist() throws IOException\n    {\n        // given\n        final FileSystemAbstraction fs = new StubFileSystemAbstraction();\n\n        XaDataSource dataSource = mock( XaDataSource.class );\n\n        FileResourceIterator storeFiles = new FileResourceIterator( fs, testDirectory, ""neostore.nodestore.db"" );\n        storeFiles.deleteBeforeCopy( ""neostore.nodestore.db"" );\n\n        FileResourceIterator logicalLogs = new FileResourceIterator( fs, testDirectory );\n\n        when( dataSource.listStoreFiles() ).thenReturn( storeFiles );\n        when( dataSource.listLogicalLogs() ).thenReturn( logicalLogs );\n\n\n        when( dataSource.getBranchId() ).thenReturn( ""branch"".getBytes() );\n        when( dataSource.getName() ).thenReturn( ""branch"" );\n\n        XaContainer xaContainer = mock( XaContainer.class );\n        when( dataSource.getXaContainer() ).thenReturn( xaContainer );\n\n        XaResourceManager xaResourceManager = mock( XaResourceManager.class );\n        when( xaContainer.getResourceManager() ).thenReturn( xaResourceManager );\n\n        XaDataSourceManager dsManager = new XaDataSourceManager( StringLogger.DEV_NULL );\n        dsManager.registerDataSource( dataSource );\n\n        KernelPanicEventGenerator kernelPanicEventGenerator = mock( KernelPanicEventGenerator.class );\n        StoreWriter storeWriter = mock( StoreWriter.class );\n\n        // when\n        try\n        {\n            ServerUtil.rotateLogsAndStreamStoreFiles( testDirectory.absolutePath(), dsManager,\n                    kernelPanicEventGenerator,\n                    StringLogger.DEV_NULL, true, storeWriter, fs, StoreCopyMonitor.NONE );\n            fail( ""should have thrown exception"" );\n        }\n        catch ( ServerFailureException e )\n        {\n            // then\n            assertEquals( java.io.FileNotFoundException.class, e.getCause().getClass() );\n        }\n    }\n']",Panic;Event;Generator;Files;Which;mock;when;final;Found;Abstraction,1.1059455573558807e-09;5.238689482212067e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.871973991394043, -5.33512544631958, -4.660335063934326, -5.769862651824951, -5.464015007019043, -0.024760624393820763]",0.9755433797836304
2,"['    @Test\n    public void assertSimilarity()\n    {\n        // Different machine ids\n        assertFalse( new RequestContext( 1234, 1, 2, 0, 0 ).equals( new RequestContext( 1234, 2, 2, 0, 0 ) ) );\n\n        // Different event identifiers\n        assertFalse( new RequestContext( 1234, 1, 10, 0, 0 ).equals( new RequestContext( 1234, 1, 20, 0, 0 ) ) );\n\n        // Different session ids\n        assertFalse( new RequestContext( 1001, 1, 5, 0, 0 ).equals( new RequestContext( 1101, 1, 5, 0, 0 ) ) );\n\n        // Same everything\n        assertEquals( new RequestContext( 12345, 4, 9, 0, 0 ), new RequestContext( 12345, 4, 9, 0, 0 ) );\n    }\n']",identifiers;Request;Context;False;new;everything;Different;Request;Context;False,3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.823358058929443, -5.569995403289795, -4.703478813171387, -5.640192985534668, -5.251455783843994, -0.024932142347097397]",0.9753760695457458
2,"['    @Test\n    public void shouldSerializeAndDeserializeTransactionRepresentation() throws Exception\n    {\n        // GIVEN\n        PhysicalTransactionRepresentation transaction = new PhysicalTransactionRepresentation( justOneNode() );\n        byte[] additionalHeader = ""extra"".getBytes();\n        int masterId = 1, authorId = 2;\n        long timeStarted = 12345, lastTxWhenStarted = 12, timeCommitted = timeStarted+10;\n        transaction.setHeader( additionalHeader, masterId, authorId, timeStarted, lastTxWhenStarted, timeCommitted, -1 );\n        Protocol.TransactionSerializer serializer = new Protocol.TransactionSerializer( transaction );\n        ChannelBuffer buffer = new ChannelBufferWrapper( new InMemoryLogChannel() );\n\n        // WHEN serializing the transaction\n        serializer.write( buffer );\n\n        // THEN deserializing the same transaction should yield the same data.\n        // ... remember that this deserializer doesn\'t read the data source name string. Read it manually here\n        assertEquals( NeoStoreDataSource.DEFAULT_DATA_SOURCE_NAME, Protocol.readString( buffer ) );\n        TransactionRepresentation readTransaction = Protocol.TRANSACTION_REPRESENTATION_DESERIALIZER.read(\n                buffer, ByteBuffer.allocate( 1000 ) );\n        assertArrayEquals( additionalHeader, readTransaction.additionalHeader() );\n        assertEquals( masterId, readTransaction.getMasterId() );\n        assertEquals( authorId, readTransaction.getAuthorId() );\n        assertEquals( timeStarted, readTransaction.getTimeStarted() );\n        assertEquals( lastTxWhenStarted, readTransaction.getLatestCommittedTxWhenStarted() );\n        assertEquals( timeCommitted, readTransaction.getTimeCommitted() );\n    }\n']",Channel;deserializing;it;Serialize;Serializer;REPRESENTATION;the;write;DEFAULT;NAME,3.7834979593753815e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.9239888191223145, -5.478169918060303, -4.6643781661987305, -5.782399654388428, -5.455500602722168, -0.023914344608783722]",0.976369321346283
2,"['    @Test\n    public void shouldMigrate() throws IOException, ConsistencyCheckIncompleteException\n    {\n        // WHEN\n        upgrader( new StoreMigrator( monitor, fs, DevNullLoggingService.DEV_NULL ) )\n                .migrateIfNeeded(\n                find20FormatStoreDirectory( storeDir.directory() ), schemaIndexProvider, pageCache );\n\n        // THEN\n        assertEquals( 100, monitor.eventSize() );\n        assertTrue( monitor.isStarted() );\n        assertTrue( monitor.isFinished() );\n\n        GraphDatabaseService database = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir.absolutePath() );\n        try\n        {\n            verifyDatabaseContents( database );\n        }\n        finally\n        {\n            // CLEANUP\n            database.shutdown();\n        }\n\n        try ( NeoStore neoStore = storeFactory.newNeoStore( true ) )\n        {\n            verifyNeoStore( neoStore );\n        }\n        assertConsistentStore( storeDir.directory() );\n    }\n']",WHEN;Size;Needed;igrate;IOException;Format;finally;Started;directory;verify,1.3969838619232178e-09;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.984614849090576, -5.480777740478516, -4.609673500061035, -5.8414764404296875, -5.472970962524414, -0.024028053507208824]",0.9762583374977112
2,"['    @Test\n    public void shouldMigrateCluster() throws Throwable\n    {\n        // Given\n        File legacyStoreDir = find20FormatStoreDirectory( storeDir.directory() );\n\n        // When\n        upgrader( new StoreMigrator( monitor, fs, DevNullLoggingService.DEV_NULL ) ).migrateIfNeeded(\n                legacyStoreDir, schemaIndexProvider, pageCache );\n        ClusterManager.ManagedCluster cluster = buildClusterWithMasterDirIn( fs, legacyStoreDir, life );\n        cluster.await( allSeesAllAsAvailable() );\n        cluster.sync();\n\n        // Then\n        HighlyAvailableGraphDatabase slave1 = cluster.getAnySlave();\n        verifySlaveContents( slave1 );\n        verifySlaveContents( cluster.getAnySlave( slave1 ) );\n        verifyDatabaseContents( cluster.getMaster() );\n    }\n']",legacy;As;All;cluster;cluster;cluster;Contents;Manager;Available;Cluster,6.693881005048752e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;3.2741809263825417e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.969498157501221, -5.4795823097229, -4.637092113494873, -5.8334808349609375, -5.444763660430908, -0.02394344098865986]",0.9763408303260803
2,"['    @Test\n    public void mustMendDuplicatePropertiesWhenUpgradingFromVersion21() throws Exception\n    {\n        // The rules:\n        // If an index is present, all duplicates should be removed and the property set to the value in the index\n        // If an index is not present, the property should be set to the value of the last duplicate in the property\n        // chain, all duplicates except the first should be removed\n        // If an index is not present, the first property in the duplicate chain should be kept for the users\n        // benefit, moved to a special property value, `__DUPLICATE_<propkey>`\n        //\n        // This is the broken store that we are upgrading:\n        //\n        //   (#0:Label { keyA: ""actual"", keyA: ""phony!"", keyA: ""phony!"" })\n        //   (#1 { keyA: ""actual"", keyA: ""actual"", keyA: ""actual"" })\n        //   (#2:Label { keyA: ""real1"", keyA: ""phony"", keyA: ""phony"", keyD: ""real2"", keyD: ""phony"", keyD: ""phony"" })\n        //   (#3 { keyA: ""real1"", keyA: ""phony"", keyA: ""phony"", keyD: ""real2"", keyD: ""phony"", keyD: ""phony"" })\n        //   (#4 { keyA: ""actual"", keyB: ""actual"", keyC: ""actual"" })\n        //   (#0)-[#0:REL { keyA: ""actual"", keyA: ""actual"", keyA: ""actual"" }]->(#1)\n        //   (#0)-[#1:REL { keyA: ""real1"", keyA: ""phony"", keyA: ""phony"",\n        //                  keyD: ""real2"", keyE: ""phony"", keyF: ""phony"" }]->(#1)\n        //   (#2)-[#2:REL { keyA: ""actual"", keyB: ""actual"", keyC: ""actual"" }]->(#0)\n        //\n        // And this is what we want to end up with, after upgrading:\n        //\n        //   (#0:Label { keyA: ""actual"" })\n        //   (#1 { keyA: ""actual"", __DUPLICATE_keyA: ""actual"" })\n        //   (#2:Label { keyA: ""real1"", keyD: ""real2"" })\n        //   (#3 { keyA: ""real1"", __DUPLICATE_keyA_1: ""real1"", __DUPLICATE_keyA_2: ""real1"",\n        //         keyD: ""real2"", __DUPLICATE_keyD_1: ""real2"", __DUPLICATE_keyD_2: ""real2"" })\n        //   (#4 { keyA: ""actual"", keyB: ""actual"", keyC: ""actual"" })\n        //   (#0)-[#0:REL { keyA: ""actual"", __DUPLICATE_keyA: ""actual"" }]->(#1)\n        //   (#0)-[#1:REL { keyA: ""real1"", __DUPLICATE_keyA_1: ""real1"", __DUPLICATE_keyA_2: ""real1"",\n        //                  keyD: ""real2"", __DUPLICATE_keyD_1: ""real2"", __DUPLICATE_keyD_2: ""real2"" }]->(#1)\n        //   (#2)-[#2:REL { keyA: ""actual"", keyB: ""actual"", keyC: ""actual"" }]->(#0)\n\n        File dir = MigrationTestUtils.find21FormatStoreDirectoryWithDuplicateProperties( storeDir.directory() );\n\n        GraphDatabaseBuilder builder =\n                new GraphDatabaseFactory().newEmbeddedDatabaseBuilder( dir.getAbsolutePath() ).setConfig(\n                        GraphDatabaseSettings.allow_store_upgrade, ""true"" );\n        GraphDatabaseService database = builder.newGraphDatabase();\n        database.shutdown();\n        ConsistencyCheckService service = new ConsistencyCheckService();\n\n        ConsistencyCheckService.Result result = service.runFullConsistencyCheck(\n                dir.getAbsolutePath(), new Config(), ProgressMonitorFactory.NONE, StringLogger.SYSTEM );\n        assertTrue( result.isSuccessful() );\n\n        database = builder.newGraphDatabase();\n        // Upgrade is now completed. Verify the contents:\n        DependencyResolver dependencyResolver = ((GraphDatabaseAPI) database).getDependencyResolver();\n        NeoStoreProvider provider = dependencyResolver.resolveDependency( NeoStoreProvider.class );\n        NeoStore store = provider.evaluate();\n        NodeStore nodeStore = store.getNodeStore();\n        RelationshipStore relStore = store.getRelationshipStore();\n        PropertyStore propertyStore = store.getPropertyStore();\n\n        // Verify that the properties appear correct to the outside world:\n        try ( Transaction ignore = database.beginTx() )\n        {\n            verifyPropertiesEqual( database.getNodeById( 0 ),\n                    Pair.of( ""keyA"", ""actual"" ) );\n            verifyPropertiesEqual( database.getNodeById( 1 ),\n                    Pair.of( ""keyA"", ""actual"" ),\n                    Pair.of( ""__DUPLICATE_keyA_1"", ""actual"" ),\n                    Pair.of( ""__DUPLICATE_keyA_2"", ""actual"" ));\n            verifyPropertiesEqual( database.getNodeById( 2 ),\n                    Pair.of( ""keyA"", ""real1"" ),\n                    Pair.of( ""keyD"", ""real2"" ) );\n            verifyPropertiesEqual( database.getNodeById( 3 ),\n                    Pair.of( ""keyA"", ""real1"" ),\n                    Pair.of( ""__DUPLICATE_keyA_1"", ""real1"" ),\n                    Pair.of( ""__DUPLICATE_keyA_2"", ""real1"" ),\n                    Pair.of( ""keyD"", ""real2"" ),\n                    Pair.of( ""__DUPLICATE_keyD_1"", ""real2"" ),\n                    Pair.of( ""__DUPLICATE_keyD_2"", ""real2"" ) );\n            verifyPropertiesEqual( database.getNodeById( 4 ),\n                    Pair.of( ""keyA"", ""actual"" ),\n                    Pair.of( ""keyB"", ""actual"" ),\n                    Pair.of( ""keyC"", ""actual"" ) );\n            verifyPropertiesEqual( database.getRelationshipById( 0 ),\n                    Pair.of( ""keyA"", ""actual"" ),\n                    Pair.of( ""__DUPLICATE_keyA_1"", ""actual"" ),\n                    Pair.of( ""__DUPLICATE_keyA_2"", ""actual"" ));\n            verifyPropertiesEqual( database.getRelationshipById( 1 ),\n                    Pair.of( ""keyA"", ""real1"" ),\n                    Pair.of( ""__DUPLICATE_keyA_1"", ""real1"" ),\n                    Pair.of( ""__DUPLICATE_keyA_2"", ""real1"" ),\n                    Pair.of( ""keyD"", ""real2"" ),\n                    Pair.of( ""__DUPLICATE_keyD_1"", ""real2"" ),\n                    Pair.of( ""__DUPLICATE_keyD_2"", ""real2"" ) );\n            verifyPropertiesEqual( database.getRelationshipById( 2 ),\n                    Pair.of( ""keyA"", ""actual"" ),\n                    Pair.of( ""keyB"", ""actual"" ),\n                    Pair.of( ""keyC"", ""actual"" ) );\n        }\n\n        // Verify that there are no two properties on the entities, that have the same key:\n        // (This is important because the verification above cannot tell if we have two keys with the same value)\n        verifyNoDuplicatePropertyKeys( propertyStore, nodeStore.getRecord( 0 ).getNextProp() );\n        verifyNoDuplicatePropertyKeys( propertyStore, nodeStore.getRecord( 1 ).getNextProp() );\n        verifyNoDuplicatePropertyKeys( propertyStore, nodeStore.getRecord( 2 ).getNextProp() );\n        verifyNoDuplicatePropertyKeys( propertyStore, relStore.getRecord( 0 ).getNextProp() );\n        verifyNoDuplicatePropertyKeys( propertyStore, relStore.getRecord( 1 ).getNextProp() );\n\n        database.shutdown();\n    }\n']",must;PLICATE;end;The;in;phony;Upgrading;except;the;the,5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9237141609191895, -5.465803146362305, -4.680917739868164, -5.756295204162598, -5.453034400939941, -0.023904217407107353]",0.9763792157173157
2,"['    @Test\n    public void shouldMigrate() throws IOException, ConsistencyCheckIncompleteException\n    {\n        // GIVEN\n        File legacyStoreDir = find19FormatHugeStoreDirectory( storeDir.directory() );\n\n        // WHEN\n        newStoreUpgrader().migrateIfNeeded( legacyStoreDir, schemaIndexProvider, pageCache );\n\n        // THEN\n        assertEquals( 100, monitor.eventSize() );\n        assertTrue( monitor.isStarted() );\n        assertTrue( monitor.isFinished() );\n\n        GraphDatabaseService database = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir.absolutePath() );\n\n        try\n        {\n            verifyDatabaseContents( database );\n        }\n        finally\n        {\n            // CLEANUP\n            database.shutdown();\n        }\n\n        try ( NeoStore neoStore = storeFactory.newNeoStore( true ) )\n        {\n            verifyNeoStore( neoStore );\n        }\n\n        assertConsistentStore( storeDir.directory() );\n    }\n']",WHEN;shutdown;Size;directory;IOException;Index;Exception;Format;finally;Consistency,4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.987779140472412, -5.468276500701904, -4.612826347351074, -5.841990947723389, -5.481489658355713, -0.02400338090956211]",0.9762824177742004
2,"['    @Test\n    public void shouldMigrateCluster() throws Throwable\n    {\n        // Given\n        File legacyStoreDir = find19FormatHugeStoreDirectory( storeDir.directory() );\n\n        // When\n        newStoreUpgrader().migrateIfNeeded( legacyStoreDir, schemaIndexProvider, pageCache );\n\n        ClusterManager.ManagedCluster cluster = buildClusterWithMasterDirIn( fs, legacyStoreDir, life );\n        cluster.await( allSeesAllAsAvailable() );\n        cluster.sync();\n\n        // Then\n        HighlyAvailableGraphDatabase slave1 = cluster.getAnySlave();\n        verifySlaveContents( slave1 );\n        verifySlaveContents( cluster.getAnySlave( slave1 ) );\n        verifyDatabaseContents( cluster.getMaster() );\n    }\n']",Slave;All;uge;sync;should;find;cluster;verify;Provider;Any,1.5425030142068863e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.969657897949219, -5.503297328948975, -4.640212059020996, -5.833284378051758, -5.42925500869751, -0.023881753906607628]",0.976401150226593
2,"['    @Test\n    public void shouldDeduplicateUniquePropertyIndexKeys() throws Exception\n    {\n        // GIVEN\n        // a store that contains two nodes with property ""name"" of which there are two key tokens\n        File legacyStoreDir = find19FormatStoreDirectory( storeDir.directory() );\n\n        // WHEN\n        // upgrading that store, the two key tokens for ""name"" should be merged\n\n        newStoreUpgrader().migrateIfNeeded( storeDir.directory(), schemaIndexProvider, pageCache );\n\n        // THEN\n        // verify that the ""name"" property for both the involved nodes\n        GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir.absolutePath() );\n        try\n        {\n            Node nodeA = getNodeWithName( db, ""A"" );\n            assertThat( nodeA, inTx( db, hasProperty( ""name"" ).withValue( ""A"" ) ) );\n\n            Node nodeB = getNodeWithName( db, ""B"" );\n            assertThat( nodeB, inTx( db, hasProperty( ""name"" ).withValue( ""B"" ) ) );\n\n            Node nodeC = getNodeWithName( db, ""C"" );\n            assertThat( nodeC, inTx( db, hasProperty( ""name"" ).withValue( ""C"" ) ) );\n            assertThat( nodeC, inTx( db, hasProperty( ""other"" ).withValue( ""a value"" ) ) );\n            assertThat( nodeC, inTx( db, hasProperty( ""third"" ).withValue( ""something"" ) ) );\n        }\n        finally\n        {\n            db.shutdown();\n        }\n\n        // THEN\n        // verify that there are no duplicate keys in the store\n        try ( PropertyKeyTokenStore tokenStore = storeFactory.newPropertyKeyTokenStore() )\n        {\n            Token[] tokens = tokenStore.getTokens( MAX_VALUE );\n            assertNoDuplicates( tokens );\n        }\n\n        assertConsistentStore( storeDir.directory() );\n    }\n']",eduplicate;Service;has;be;Upgrader;Store;with;legacy;Store;db,6.984919309616089e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.884018421173096, -5.444725513458252, -4.689303874969482, -5.698047161102295, -5.410904884338379, -0.024411331862211227]",0.975884199142456
2,"['    @Test\n    public void shouldGenerateNodesAndRelationshipsWithProperties() throws Exception\n    {\n        // given\n        Configuration.Builder config = Configuration.builder();\n        config.setValue( DataGenerator.node_count, 5 );\n        config.setValue( DataGenerator.relationships, asList( new RelationshipSpec( ""FOO"", 1 ),\n                                                              new RelationshipSpec( ""BAR"", 2 ) ) );\n        config.setValue( DataGenerator.node_properties,\n                asList( new PropertySpec( PropertyGenerator.STRING, 2 ) ) );\n        config.setValue( DataGenerator.relationship_properties,\n                asList( new PropertySpec( PropertyGenerator.STRING, 1 ) ) );\n\n        DataGenerator generator = new DataGenerator( config.build() );\n\n        BatchInserter batchInserter = mock( BatchInserter.class );\n\n        // when\n        generator.generateData( batchInserter );\n\n        // then\n        verify( batchInserter, times( 5 ) ).createNode( argThat( hasSize( 2 ) ) );\n        verify( batchInserter, times( 5 ) ).createRelationship( anyLong(), anyLong(), argThat( hasName( ""FOO"" ) ),\n                                                                argThat( hasSize( 1 ) ) );\n        verify( batchInserter, times( 10 ) )\n                .createRelationship( anyLong(), anyLong(), argThat( hasName( ""BAR"" ) ), argThat( hasSize( 1 ) ) );\n        verifyNoMoreInteractions( batchInserter );\n    }\n']",verify;Relationships;count;FO;node;new;Node;Long;as;new,3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.546585164964199e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.878658294677734, -5.35250997543335, -4.660751819610596, -5.750252723693848, -5.465411186218262, -0.02470945380628109]",0.9755933284759521
2,"['    @Test\n    public void dumpJmxInfo() throws Exception\n    {\n        List<Triplet<String, String, String>> beanItems = new ArrayList<>();\n        AsciiDocListGenerator listGenerator = new AsciiDocListGenerator( ""jmx-list"", ""MBeans exposed by Neo4j"", false );\n\n        MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n        SortedMap<String, ObjectName> neo4jBeans = new TreeMap<String, ObjectName>(\n                String.CASE_INSENSITIVE_ORDER );\n\n        for ( String query : QUERIES )\n        {\n            Set<ObjectInstance> beans = mBeanServer.queryMBeans(\n                    new ObjectName( query ), null );\n            for ( ObjectInstance bean : beans )\n            {\n                ObjectName objectName = bean.getObjectName();\n                String name = objectName.getKeyProperty( BEAN_NAME );\n                if ( EXCLUDES.contains( name ) )\n                {\n                    continue;\n                }\n                String name0 = objectName.getKeyProperty( BEAN_NAME0 );\n                if ( name0 != null )\n                {\n                    name += \'/\' + name0;\n                }\n                neo4jBeans.put( name, bean.getObjectName() );\n            }\n\n        }\n        assertEquals( ""Sanity checking the number of beans found;"",\n                EXPECTED_NUMBER_OF_BEANS, neo4jBeans.size() );\n        for ( Map.Entry<String, ObjectName> beanEntry : neo4jBeans.entrySet() )\n        {\n            ObjectName objectName = beanEntry.getValue();\n            String name = beanEntry.getKey();\n            Set<ObjectInstance> mBeans = mBeanServer.queryMBeans( objectName,\n                    null );\n            if ( mBeans.size() != 1 )\n            {\n                throw new IllegalStateException( ""Unexpected size [""\n                        + mBeans.size()\n                        + ""] of query result for [""\n                        + objectName + ""]."" );\n            }\n            ObjectInstance bean = mBeans.iterator()\n                    .next();\n            MBeanInfo info = mBeanServer.getMBeanInfo( objectName );\n            String description = info.getDescription()\n                    .replace( \'\\n\', \' \' );\n\n            String id = getId( name );\n            beanItems.add( Triplet.of( id, name, description ) );\n\n            writeDetailsToFile( id, objectName, bean, info, description );\n        }\n        Writer fw = null;\n        try\n        {\n            fw = AsciiDocGenerator.getFW( ""target/docs/ops"", ""JMX List"" );\n            fw.write( listGenerator.generateListAndTableCombo( beanItems ) );\n        }\n        finally\n        {\n            if ( fw != null )\n            {\n                fw.close();\n            }\n        }\n    }\n']",QUERIES;query;Beans;Triplet;bean;Doc;new;List;beans;BEAN,5.675246939063072e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.94609260559082, -5.309344291687012, -4.628961563110352, -5.788252353668213, -5.549530029296875, -0.024578258395195007]",0.9757212996482849
2,"['    @Test\n    public void canGetHaBean() throws Throwable\n    {\n        startCluster( 1 );\n        HighAvailability ha = ha( cluster.getMaster() );\n        assertNotNull( ""could not get ha bean"", ha );\n        assertMasterInformation( ha );\n    }\n']",can;Ha;could;Null;ha;start;get;Bean;Get;Information,8.731149137020111e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0,5,5,"[-5.986454010009766, -5.629130840301514, -4.596589088439941, -5.849524974822998, -5.354428291320801, -0.024086588993668556]",0.9762011766433716
2,"['    @Test\n    public void testLatestTxInfoIsCorrect() throws Throwable\n    {\n        startCluster( 1 );\n        HighlyAvailableGraphDatabase db = cluster.getMaster();\n        HighAvailability masterHa = ha( db );\n        long lastCommitted = masterHa.getLastCommittedTxId();\n        try ( Transaction tx = db.beginTx() )\n        {\n            db.createNode();\n            tx.success();\n        }\n        assertEquals( lastCommitted + 1, masterHa.getLastCommittedTxId() );\n    }\n']",Correct;Tx;Committed;Tx;long;db;Availability;tx;Last;Ha,6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.988880157470703, -5.583946704864502, -4.615211009979248, -5.830652236938477, -5.398990154266357, -0.023905033245682716]",0.9763784408569336
2,"['    @Test\n    public void testUpdatePullWorksAndUpdatesLastUpdateTime() throws Throwable\n    {\n        startCluster( 2 );\n        HighlyAvailableGraphDatabase master = cluster.getMaster();\n        HighlyAvailableGraphDatabase slave = cluster.getAnySlave();\n        Transaction tx = master.beginTx();\n        master.createNode();\n        tx.success();\n        tx.finish();\n        HighAvailability slaveBean = ha( slave );\n        DateFormat format = new SimpleDateFormat( ""yyyy-MM-DD kk:mm:ss.SSSZZZZ"" );\n        // To begin with, no updates\n        slaveBean.update();\n        long timeUpdated = format.parse( slaveBean.getLastUpdateTime() ).getTime();\n        assertTrue( timeUpdated > 0 );\n    }\n']",Pull;Highly;slave;SS;get;cluster;Last;Transaction;Master;mm,9.313225746154785e-10;6.83940015733242e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.043600559234619, -5.582119464874268, -4.570609092712402, -5.908792972564697, -5.4793009757995605, -0.023654406890273094]",0.9766230583190918
2,"['    @Test\n    public void testAfterGentleMasterSwitchClusterInfoIsCorrect() throws Throwable\n    {\n        startCluster( 3 );\n        RepairKit masterShutdown = cluster.shutdown( cluster.getMaster() );\n        cluster.await( ClusterManager.masterAvailable() );\n        cluster.await( ClusterManager.masterSeesSlavesAsAvailable( 1 ) );\n        for ( HighlyAvailableGraphDatabase db : cluster.getAllMembers() )\n        {\n            assertEquals( 2, ha( db ).getInstancesInCluster().length );\n        }\n        masterShutdown.repair();\n        cluster.await( ClusterManager.allSeesAllAsAvailable() );\n        for ( HighlyAvailableGraphDatabase db : cluster.getAllMembers() )\n        {\n            HighAvailability bean = ha( db );\n\n            assertEquals( 3, bean.getInstancesInCluster().length );\n            for ( ClusterMemberInfo info : bean.getInstancesInCluster() )\n            {\n                assertTrue( ""every instance should be available"", info.isAvailable() );\n                assertTrue( ""every instances should have at least one role"", info.getRoles().length > 0 );\n                if ( HighAvailabilityModeSwitcher.MASTER.equals( info.getRoles()[0] ) )\n                {\n                    assertEquals( ""coordinator should be master"",\n                            HighAvailabilityModeSwitcher.MASTER, info.getHaRole() );\n                }\n                else\n                {\n                    assertEquals( ""Either master or slave, no other way"",\n                            HighAvailabilityModeSwitcher.SLAVE, info.getRoles()[0] );\n                    assertEquals( ""instance "" + info.getInstanceId() + "" is cluster slave but HA master"",\n                            HighAvailabilityModeSwitcher.SLAVE, info.getHaRole() );\n                }\n                for ( String uri : info.getUris() )\n                {\n                    assertTrue( ""roles should contain URIs"",\n                            uri.startsWith( ""ha://"" ) || uri.startsWith( ""backup://"" ) );\n                }\n            }\n        }\n    }\n']",await;Correct;After;await;Equals;MASTER;ees;await;Instances;ees,9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.693881005048752e-10;5.529727786779404e-10;4.94765117764473e-10;4.802132025361061e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.891216278076172, -5.483809947967529, -4.681532859802246, -5.71589994430542, -5.3863091468811035, -0.024347927421331406]",0.9759460687637329
2,"['    @Test\n    public void testAfterHardMasterSwitchClusterInfoIsCorrect() throws Throwable\n    {\n        startCluster( 3 );\n        RepairKit masterShutdown = cluster.fail( cluster.getMaster() );\n        cluster.await( ClusterManager.masterAvailable() );\n        cluster.await( ClusterManager.masterSeesSlavesAsAvailable( 1 ) );\n        for ( HighlyAvailableGraphDatabase db : cluster.getAllMembers() )\n        {\n            if ( db.getInstanceState() == HighAvailabilityMemberState.PENDING )\n            {\n                continue;\n            }\n            // Instance that was hard killed will still be in the cluster\n            assertEquals( 3, ha( db ).getInstancesInCluster().length );\n        }\n        masterShutdown.repair();\n        cluster.await( ClusterManager.masterAvailable() );\n        cluster.await( ClusterManager.masterSeesSlavesAsAvailable( 2 ) );\n        for ( HighlyAvailableGraphDatabase db : cluster.getAllMembers() )\n        {\n            int mastersFound = 0;\n            HighAvailability bean = ha( db );\n\n            assertEquals( 3, bean.getInstancesInCluster().length );\n            for ( ClusterMemberInfo info : bean.getInstancesInCluster() )\n            {\n                assertTrue( bean.getInstanceId() + "": every instance should be available: "" + info.getInstanceId(),\n                        info.isAvailable() );\n                for ( String role : info.getRoles() )\n                {\n                    if (role.equals( HighAvailabilityModeSwitcher.MASTER ))\n                    {\n                        mastersFound++;\n                    }\n                }\n            }\n            assertEquals( 1, mastersFound );\n        }\n    }\n']",await;Shutdown;Availability;ees;Slaves;Master;Members;was;ha;After,5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.946385383605957, -5.489549160003662, -4.655307769775391, -5.774570465087891, -5.4345879554748535, -0.02401047945022583]",0.9762755036354065
2,"['    @Test\n    public void canGetBranchedStoreBean() throws Throwable\n    {\n        startCluster( 1 );\n        BranchedStore bs = beans( cluster.getMaster() ).getBranchedStoreBean();\n        assertNotNull( ""could not get branched store bean"", bs );\n        assertEquals( ""no branched stores for new db"", 0,\n                bs.getBranchedStores().length );\n    }\n']",Throwable;Get;cluster;Branched;can;Bean;Store;stores;Store;branched,1.1350493878126144e-09;8.731149137020111e-10;6.984919309616089e-10;6.548361852765083e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.958505630493164, -5.610223770141602, -4.615463733673096, -5.819119930267334, -5.359734535217285, -0.024102067574858665]",0.9761859774589539
2,"['    @Test\n    public void joinedInstanceShowsUpAsSlave() throws Throwable\n    {\n        startCluster( 2 );\n        ClusterMemberInfo[] instancesInCluster = ha( cluster.getMaster() ).getInstancesInCluster();\n        assertEquals( 2, instancesInCluster.length );\n        ClusterMemberInfo[] secondInstancesInCluster = ha( cluster.getAnySlave() ).getInstancesInCluster();\n        assertEquals( 2, secondInstancesInCluster.length );\n        assertMasterAndSlaveInformation( instancesInCluster );\n        assertMasterAndSlaveInformation( secondInstancesInCluster );\n    }\n']",Cluster;Instances;start;Member;Info;Cluster;Equals;cluster;get;Instances,1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.946037769317627, -5.581839561462402, -4.6390252113342285, -5.791995525360107, -5.360345840454102, -0.024087870493531227]",0.9761999249458313
2,"[""    @Test\n    public void leftInstanceDisappearsFromMemberList() throws Throwable\n    {\n        // Start the second db and make sure it's visible in the member list.\n        // Then shut it down to see if it disappears from the member list again.\n        startCluster( 3 );\n        assertEquals( 3, ha( cluster.getAnySlave() ).getInstancesInCluster().length );\n        cluster.shutdown( cluster.getAnySlave() );\n\n        cluster.await( masterSeesMembers( 2 ) );\n\n        assertEquals( 2, ha( cluster.getMaster() ).getInstancesInCluster().length );\n        assertMasterInformation( ha( cluster.getMaster() ) );\n    }\n""]",await;it;shutdown;Members;Disappears;left;db;List;member;Slave,1.3969838619232178e-09;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.918652057647705, -5.534740447998047, -4.674955368041992, -5.805755615234375, -5.369292259216309, -0.023913180455565453]",0.9763703346252441
2,"['    @Test\n    public void failedMemberIsStillInMemberListAlthoughFailed() throws Throwable\n    {\n        startCluster( 3 );\n        assertEquals( 3, ha( cluster.getAnySlave() ).getInstancesInCluster().length );\n\n        // Fail the instance\n        HighlyAvailableGraphDatabase failedDb = cluster.getAnySlave();\n        RepairKit dbFailure = cluster.fail( failedDb );\n        await( ha( cluster.getMaster() ), dbAlive( false ) );\n        await( ha( cluster.getAnySlave( failedDb )), dbAlive( false ) );\n\n        // Repair the failure and come back\n        dbFailure.repair();\n        for ( HighlyAvailableGraphDatabase db : cluster.getAllMembers() )\n        {\n            await( ha( db ), dbAvailability( true ) );\n            await( ha( db ), dbAlive( true ) );\n        }\n    }\n']",Although;Cluster;await;In;Alive;Slave;Member;and;Cluster;come,1.0477378964424133e-09;9.604264050722122e-10;8.149072527885437e-10;6.984919309616089e-10;6.83940015733242e-10;6.111804395914078e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.98114538192749, -5.568791389465332, -4.6429266929626465, -5.798162460327148, -5.391603469848633, -0.023840200155973434]",0.9764417409896851
2,['    @Test\n    public void makeSureBackupCanBePerformedFromClusterWithDefaultName() throws Throwable\n    {\n        testBackupFromCluster( null );\n    }\n'],make;null;From;Cluster;Cluster;Be;Backup;From;Name;Default,2.3283064365386963e-09;1.0186340659856796e-09;9.313225746154785e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-6.02358341217041, -5.586532115936279, -4.547912120819092, -5.9173502922058105, -5.398368835449219, -0.024266717955470085]",0.9760254621505737
2,"['    @Test\n    public void makeSureBackupCanBePerformedFromWronglyNamedCluster() throws Throwable\n    {\n        assertEquals( 0, runBackupToolFromOtherJvmToGetExitCode(\n                backupArguments( ""localhost:4445"", BACKUP_PATH.getPath(), ""non.existent"" ) ) );\n    }\n']",make;From;Arguments;Be;Throwable;existent;Wrongly;Tool;Performed;From,1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9346418380737305, -5.591216087341309, -4.64922571182251, -5.807126522064209, -5.3231706619262695, -0.024117544293403625]",0.9761709570884705
2,"['    @Test\n    public void makeSureBackupCanBeRestored() throws Throwable\n    {\n        // Run backup\n        assertEquals( 0, runBackupToolFromOtherJvmToGetExitCode( backupArguments( ""localhost:4445"",\n                BACKUP_PATH.getPath(), null ) ) );\n\n        // Add some new data\n        DbRepresentation changedData = createSomeData( cluster.getMaster() );\n\n        stopCluster();\n\n        cleanData();\n\n        copyBackup();\n\n        startCluster();\n\n        // Verify that old data is back\n        assertThat( changedData.equals( DbRepresentation.of( cluster.getMaster() ) ), equalTo(false) );\n    }\n']",Exit;Restored;clean;Arguments;Equals;copy;vm;Sure;BACKUP;Cluster,1.979060471057892e-09;1.1641532182693481e-09;6.402842700481415e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.869119167327881, -5.5336833000183105, -4.708834171295166, -5.696861267089844, -5.310020446777344, -0.024385273456573486]",0.9759096503257751
2,"['    @Test\n    public void makeSureBackupCanBePerformedFromAnyInstance() throws Throwable\n    {\n        Integer[] backupPorts = {4445, 4446, 4447};\n\n        for ( Integer port : backupPorts )\n        {\n            // Run backup\n            assertEquals( 0, runBackupToolFromOtherJvmToGetExitCode( backupArguments( ""localhost:"" + port,\n                    BACKUP_PATH.getPath(), null ) ) );\n\n            // Add some new data\n            DbRepresentation changedData = createSomeData( cluster.getMaster() );\n\n            stopCluster();\n\n            cleanData();\n\n            copyBackup();\n\n            startCluster();\n\n            // Verify that old data is back\n            assertThat( changedData.equals( DbRepresentation.of( cluster.getMaster() ) ), equalTo(false) );\n        }\n    }\n']",Sure;vm;Throwable;make;cluster;orts;Path;cluster;Equals;Representation,9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.850517272949219, -5.40248441696167, -4.705435752868652, -5.685366153717041, -5.373948097229004, -0.024764927104115486]",0.9755392074584961
2,"['    @Test\n    public void testTransactionsPulled() throws Exception\n    {\n        final HighlyAvailableGraphDatabase master =\n                (HighlyAvailableGraphDatabase) new TestHighlyAvailableGraphDatabaseFactory().\n                newHighlyAvailableDatabaseBuilder( TargetDirectory.forTest( TestClientThreadIsolation.class ).cleanDirectory(\n                        ""master"" ).getAbsolutePath() ).\n                setConfig( ClusterSettings.server_id, ""1"" ).\n                newGraphDatabase();\n\n        final HighlyAvailableGraphDatabase slave1 =\n                (HighlyAvailableGraphDatabase) new TestHighlyAvailableGraphDatabaseFactory().\n                newHighlyAvailableDatabaseBuilder( TargetDirectory.forTest( TestClientThreadIsolation.class ).cleanDirectory(\n                        ""slave1"" ).getAbsolutePath() ).\n                setConfig( ClusterSettings.cluster_server, ""127.0.0.1:5002"" ).\n                setConfig( ClusterSettings.initial_hosts, ""127.0.0.1:5001"" ).\n                setConfig( ClusterSettings.server_id, ""2"" ).\n                setConfig( HaSettings.max_concurrent_channels_per_slave, ""2"" ).\n                setConfig( HaSettings.ha_server, ""127.0.0.1:8001"" ).\n                newGraphDatabase();\n\n        Transaction masterTx = master.beginTx();\n        master.createNode().createRelationshipTo( master.createNode(),\n                DynamicRelationshipType.withName( ""master"" ) ).setProperty(\n                ""largeArray"", new int[20000] );\n        masterTx.success();\n        masterTx.finish();\n\n        Thread thread1 = new Thread( new Runnable()\n        {\n            public void run()\n            {\n                // TODO Figure out how to do this\n//                Master masterClient = slave1.getBroker().getMaster().first();\n//                Response<Integer> response = masterClient.createRelationshipType(\n//                        slave1.getSlaveContext( 10 ), ""name"" );\n//                slave1.receive( response ); // will be suspended here\n//                response.close();\n            }\n']",Absolute;Thread;Factory;Highly;Transactions;Highly;Absolute;set;cluster;get,6.693881005048752e-10;6.111804395914078e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.5652192309498787e-10;3.2014213502407074e-10,5,5,"[-5.886480331420898, -5.33809757232666, -4.663472652435303, -5.776482582092285, -5.4608354568481445, -0.024666769430041313]",0.9756349921226501
2,"['    @Test\n    public void testUpdatesAreWrittenToLogBeforeBeingAppliedToStore() throws Exception\n    {\n        int master = getCurrentMaster();\n        addNode( master );\n        int toKill = (master + 1) % dbs.length;\n        HighlyAvailableGraphDatabase dbToKill = dbs[toKill];\n\n        final CountDownLatch latch1 = new CountDownLatch( 1 );\n\n        final HighlyAvailableGraphDatabase masterDb = dbs[master];\n        masterDb.getDependencyResolver().resolveDependency( ClusterClient.class ).addClusterListener(\n                new ClusterListener.Adapter()\n                {\n                    @Override\n                    public void leftCluster( InstanceId instanceId, URI member )\n                    {\n                        latch1.countDown();\n                        masterDb.getDependencyResolver().resolveDependency( ClusterClient.class )\n                                .removeClusterListener( this );\n                    }\n']",resolve;count;latch;Graph;Database;Instance;Available;Node;final;Adapter,1.1059455573558807e-09;9.89530235528946e-10;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;5.093170329928398e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.948983192443848, -5.291292190551758, -4.621153354644775, -5.807538986206055, -5.537975788116455, -0.0247275959700346]",0.9755755066871643
2,"['    @Test\n    public void doRollingUpgradeFromPreviousVersionWithMasterLast() throws Throwable\n    {\n        /* High level scenario:\n         * 1   Have a cluster of 3 instances running <old version>\n         * 1.1 Download a <old version> package\n         * 1.2 Unpack the <old version> package\n         * 1.4 Assembly classpath and start 3 JVMs running <old version>\n         * 1.5 Create some data in the cluster\n         * 2   Go over each one restarting into <this version>\n         * 2.1 Grab a JVM and kill it\n         * 2.2 Start that db inside this test JVM, which will run <this version>\n         * 2.3 Perform a write transaction to the current master and see that it picks it up\n         * 2.4 Perform a write transaction to to this instance and see that master picks it up\n         * 3   Make sure the cluster functions after each one has been restarted\n         * 3.1 Do basic transactions on master/slaves.\n         * 3.2 Do a master switch\n         * 3.3 Restart one slave\n         * 3.4 Take down the instances and do consistency check */\n\n        try\n        {\n            startOldVersionCluster();\n            rollOverToNewVersion();\n            shutdownAndDoConsistencyChecks();\n        }\n        catch ( Throwable e )\n        {\n            e.printStackTrace();\n            throw e;\n        }\n    }\n']",restarting;cluster;cluster;one;functions;running;and;old;down;Assembly,1.1059455573558807e-09;8.731149137020111e-10;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.957892894744873, -5.257275104522705, -4.625545501708984, -5.837014198303223, -5.55943489074707, -0.02466316521167755]",0.9756383895874023
2,"['    @Test(expected = MismatchingStoreIdException.class)\n    public void newClientsShouldNotIgnoreStoreIdDifferences() throws Throwable\n    {\n        // Given\n        MasterImpl.SPI masterImplSPI = MasterImplTest.mockedSpi( new StoreId( 1, 2, 3, 4 ) );\n        when( masterImplSPI.getTransactionChecksum( anyLong() ) ).thenReturn( 5L );\n\n        cleanupRule.add( newMasterServer( masterImplSPI ) );\n\n        StoreId storeId = new StoreId( 5, 6, 7, 8 );\n        MasterClient214 masterClient214 = cleanupRule.add( newMasterClient214( storeId ) );\n\n        // When\n        masterClient214.handshake( 1, storeId );\n    }\n']",expected;ocked;When;Exception;Checksum;Server;Impl;Master;Master;Store,9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;4.511093720793724e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9831426218152046e-10,5,5,"[-5.951416015625, -5.5301194190979, -4.638457298278809, -5.820448875427246, -5.4185638427734375, -0.023924004286527634]",0.9763599038124084
2,"[""    @Test\n    public void clientShouldReadAndApplyTransactionLogsOnNewLockSessionRequest() throws Throwable\n    {\n        // Given\n        MasterImpl master = spy( newMasterImpl( mockMasterImplSpiWith( StoreId.DEFAULT ) ) );\n        doReturn( voidResponseWithTransactionLogs() ).when( master ).newLockSession( any( RequestContext.class ) );\n\n        cleanupRule.add( newMasterServer( master ) );\n\n        DependencyResolver resolver = mock( DependencyResolver.class );\n        LogicalTransactionStore txStore = mock( LogicalTransactionStore.class );\n        TransactionRepresentationStoreApplier txApplier = mock( TransactionRepresentationStoreApplier.class );\n        TransactionIdStore txIdStore = mock( TransactionIdStore.class );\n        TransactionAppender txAppender = mock( TransactionAppender.class );\n        when( txAppender.append( any( TransactionRepresentation.class ), anyLong() ) )\n                .thenReturn( mock( Commitment.class ) );\n        LogFile logFile = mock( LogFile.class );\n\n        when( resolver.resolveDependency( LogicalTransactionStore.class ) ).thenReturn( txStore );\n        when( resolver.resolveDependency( TransactionRepresentationStoreApplier.class ) ).thenReturn( txApplier );\n        when( resolver.resolveDependency( TransactionIdStore.class ) ).thenReturn( txIdStore );\n        when( resolver.resolveDependency( LogFile.class ) ).thenReturn( logFile );\n        when( resolver.resolveDependency( LogRotation.class ) ).thenReturn( mock(LogRotation.class) );\n        when( txStore.getAppender() ).thenReturn( txAppender );\n        IndexUpdatesValidator indexUpdatesValidator = mock( IndexUpdatesValidator.class );\n        when( indexUpdatesValidator.validate( any( TransactionRepresentation.class ),\n                any( TransactionApplicationMode.class ) ) ).thenReturn( ValidatedIndexUpdates.NONE );\n        when( resolver.resolveDependency( IndexUpdatesValidator.class ) ).thenReturn( indexUpdatesValidator );\n\n        ResponseUnpacker unpacker = initAndStart( new TransactionCommittingResponseUnpacker( resolver ) );\n\n        MasterClient masterClient = cleanupRule.add( newMasterClient214( StoreId.DEFAULT, unpacker ) );\n\n        // When\n        masterClient.newLockSession( new RequestContext( 1, 2, 3, 4, 5 ) );\n\n        // Then\n        verify( txAppender, times( TX_LOG_COUNT ) ).append( any( TransactionRepresentation.class ), anyLong() );\n        // we can't verify transactionCommitted since that's part of the TransactionAppender, which we have mocked\n        verify( txApplier, times( TX_LOG_COUNT ) )\n                .apply( any( TransactionRepresentation.class ), any( ValidatedIndexUpdates.class ),\n                        any( LockGroup.class ), anyLong(), any( TransactionApplicationMode.class ) );\n        verify( txIdStore, times( TX_LOG_COUNT ) ).transactionClosed( anyLong() );\n    }\n""]",Should;Applier;Server;Session;Applier;Applier;Read;Session;cleanup;Request,1.0477378964424133e-09;4.94765117764473e-10;4.94765117764473e-10;3.7834979593753815e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.940479755401611, -5.3983073234558105, -4.625667095184326, -5.825056552886963, -5.495301246643066, -0.02430383302271366]",0.9759892225265503
2,"['    @Test\n    public void givenClusterWithCreatedIndexWhenDeleteIndexOnMasterThenIndexIsDeletedOnSlave() throws Throwable\n    {\n        ClusterManager clusterManager =\n            new ClusterManager( fromXml( getClass().getResource( ""/threeinstances.xml"" ).toURI() ),\n                TargetDirectory.forTest( getClass() ).cleanDirectory( ""testCluster"" ),\n                MapUtil.stringMap( HaSettings.ha_server.name(), "":6001-6005"",\n                        HaSettings.tx_push_factor.name(), ""2"" ));\n        try\n        {\n            // Given\n            clusterManager.start();\n\n            clusterManager.getDefaultCluster().await( ClusterManager.allSeesAllAsAvailable() );\n\n            GraphDatabaseAPI master = clusterManager.getDefaultCluster().getMaster();\n            try ( Transaction tx = master.beginTx() )\n            {\n                master.index().forNodes( ""Test"" );\n                tx.success();\n            }\n\n            HighlyAvailableGraphDatabase aSlave = clusterManager.getDefaultCluster().getAnySlave();\n            try ( Transaction tx = aSlave.beginTx() )\n            {\n                assertThat( aSlave.index().existsForNodes( ""Test"" ), equalTo( true ) );\n                tx.success();\n            }\n\n            // When\n            try ( Transaction tx = master.beginTx() )\n            {\n                master.index().forNodes( ""Test"" ).delete();\n                tx.success();\n            }\n\n            // Then\n            HighlyAvailableGraphDatabase anotherSlave = clusterManager.getDefaultCluster().getAnySlave();\n            try ( Transaction tx = anotherSlave.beginTx() )\n            {\n                assertThat( anotherSlave.index().existsForNodes( ""Test"" ), equalTo( false ) );\n                tx.success();\n            }\n        }\n        finally\n        {\n            clusterManager.stop();\n        }\n    }\n']",Index;When;all;success;await;Cluster;Directory;given;Database;Delete,4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;3.8562575355172157e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.931464195251465, -5.356813430786133, -4.6533284187316895, -5.784895896911621, -5.484823226928711, -0.024419009685516357]",0.9758767485618591
2,"['    @Test\n    public void testPullStorm() throws Throwable\n    {\n        // given\n\n        ClusterManager clusterManager = new ClusterManager( ClusterManager.clusterWithAdditionalArbiters( 2, 1 ),\n                testDirectory.directory(),\n                stringMap( HaSettings.pull_interval.name(), ""0"",\n                           HaSettings.tx_push_factor.name(), ""1"") );\n\n        clusterManager.start();\n\n        try\n        {\n            ClusterManager.ManagedCluster cluster = clusterManager.getDefaultCluster();\n            cluster.await( ClusterManager.masterAvailable(  ) );\n            cluster.await( ClusterManager.masterSeesSlavesAsAvailable( 1 ) );\n\n            // Create data\n            final HighlyAvailableGraphDatabase master = cluster.getMaster();\n            {\n                Transaction tx = master.beginTx();\n                for ( int i = 0; i < 1000; i++ )\n                {\n                    master.createNode().setProperty( ""foo"", ""bar"" );\n                }\n                tx.success();\n                tx.finish();\n            }\n\n            // Slave goes down\n            HighlyAvailableGraphDatabase slave = cluster.getAnySlave();\n            ClusterManager.RepairKit repairKit = cluster.fail( slave );\n\n            // Create more data\n            for ( int i = 0; i < 1000; i++ )\n            {\n                {\n                    Transaction tx = master.beginTx();\n                    for ( int j = 0; j < 1000; j++ )\n                    {\n                        master.createNode().setProperty( ""foo"", ""bar"" );\n                        master.createNode().setProperty( ""foo"", ""bar"" );\n                    }\n                    tx.success();\n                    tx.finish();\n                }\n            }\n\n            // Slave comes back online\n            repairKit.repair();\n\n            cluster.await( ClusterManager.masterSeesSlavesAsAvailable( 1 ) );\n\n            // when\n\n            // Create 20 concurrent transactions\n            System.out.println( ""Pull storm"" );\n            ExecutorService executor = Executors.newFixedThreadPool( 20 );\n            for ( int i = 0; i < 20; i++ )\n            {\n                executor.submit( new Runnable()\n                {\n                    @Override\n                    public void run()\n                    {\n                        Transaction tx = master.beginTx();\n                        master.createNode().setProperty( ""foo"", ""bar"" );\n                        tx.success();\n                        tx.finish(); // This should cause lots of concurrent calls to pullUpdate()\n                    }\n']",start;foo;name;Available;final;Available;string;Cluster;Graph;Settings,4.511093720793724e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.3096723705530167e-10;1.2369127944111824e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.959920883178711, -5.3216938972473145, -4.628075122833252, -5.8127970695495605, -5.5342302322387695, -0.02447345294058323]",0.9758235812187195
2,"['    @Test\n    public void onlyOneNonFullBlock() throws IOException\n    {\n        byte[] bytes = new byte[255];\n        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer( bytes );\n        wrappedBuffer.resetWriterIndex();\n        BlockLogBuffer buffer = new BlockLogBuffer( wrappedBuffer, new Monitors().newMonitor( ByteCounterMonitor.class ) );\n\n        byte byteValue = 5;\n        int intValue = 1234;\n        long longValue = 574853;\n        float floatValue = 304985.5f;\n        double doubleValue = 48493.22d;\n        final byte[] bytesValue = new byte[] { 1, 5, 2, 6, 3 };\n        buffer.put( byteValue );\n        buffer.putInt( intValue );\n        buffer.putLong( longValue );\n        buffer.putFloat( floatValue );\n        buffer.putDouble( doubleValue );\n        buffer.put( bytesValue, bytesValue.length );\n        buffer.close();\n\n        ByteBuffer verificationBuffer = ByteBuffer.wrap( bytes );\n        assertEquals( 30, verificationBuffer.get() );\n        assertEquals( byteValue, verificationBuffer.get() );\n        assertEquals( intValue, verificationBuffer.getInt() );\n        assertEquals( longValue, verificationBuffer.getLong() );\n        assertEquals( floatValue, verificationBuffer.getFloat(), 0.0 );\n        assertEquals( doubleValue, verificationBuffer.getDouble(), 0.0 );\n        byte[] actualBytes = new byte[bytesValue.length];\n        verificationBuffer.get( actualBytes );\n        assertThat( actualBytes, new ArrayMatches<byte[]>( bytesValue ) );\n    }\n']",Writer;IOException;Block;Float;Monitor;One;bytes;double;byte;Byte,9.313225746154785e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8189894035458565e-10;1.7462298274040222e-10,5,5,"[-5.953518390655518, -5.456850528717041, -4.627888202667236, -5.806222438812256, -5.492470741271973, -0.024052375927567482]",0.9762345552444458
2,"['    @Test\n    public void readSmallPortions() throws IOException\n    {\n        byte[] bytes = new byte[255];\n        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer( bytes );\n        wrappedBuffer.resetWriterIndex();\n        BlockLogBuffer buffer = new BlockLogBuffer( wrappedBuffer, new Monitors().newMonitor( ByteCounterMonitor.class ) );\n\n        byte byteValue = 5;\n        int intValue = 1234;\n        long longValue = 574853;\n        buffer.put( byteValue );\n        buffer.putInt( intValue );\n        buffer.putLong( longValue );\n        buffer.close();\n\n        ReadableByteChannel reader = new BlockLogReader( wrappedBuffer );\n        ByteBuffer verificationBuffer = ByteBuffer.wrap( new byte[1] );\n        reader.read( verificationBuffer );\n        verificationBuffer.flip();\n        assertEquals( byteValue, verificationBuffer.get() );\n        verificationBuffer = ByteBuffer.wrap( new byte[4] );\n        reader.read( verificationBuffer );\n        verificationBuffer.flip();\n        assertEquals( intValue, verificationBuffer.getInt() );\n        verificationBuffer = ByteBuffer.wrap( new byte[8] );\n        reader.read( verificationBuffer );\n        verificationBuffer.flip();\n        assertEquals( longValue, verificationBuffer.getLong() );\n    }\n']",flip;Readable;wrapped;Channel;bytes;Buffers;Log;verification;Block;Log,6.912159733474255e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.969862461090088, -5.497656345367432, -4.623414993286133, -5.832899570465088, -5.466959476470947, -0.023907359689474106]",0.9763762950897217
2,"['    @Test\n    public void readOnlyOneNonFullBlock() throws IOException\n    {\n        byte[] bytes = new byte[255];\n        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer( bytes );\n        wrappedBuffer.resetWriterIndex();\n        BlockLogBuffer buffer = new BlockLogBuffer( wrappedBuffer, new Monitors().newMonitor( ByteCounterMonitor.class ) );\n\n        byte byteValue = 5;\n        int intValue = 1234;\n        long longValue = 574853;\n        float floatValue = 304985.5f;\n        double doubleValue = 48493.22d;\n        final byte[] bytesValue = new byte[] { 1, 5, 2, 6, 3 };\n        buffer.put( byteValue );\n        buffer.putInt( intValue );\n        buffer.putLong( longValue );\n        buffer.putFloat( floatValue );\n        buffer.putDouble( doubleValue );\n        buffer.put( bytesValue, bytesValue.length );\n        buffer.close();\n\n        ReadableByteChannel reader = new BlockLogReader( wrappedBuffer );\n        ByteBuffer verificationBuffer = ByteBuffer.wrap( new byte[1000] );\n        reader.read( verificationBuffer );\n        verificationBuffer.flip();\n        assertEquals( byteValue, verificationBuffer.get() );\n        assertEquals( intValue, verificationBuffer.getInt() );\n        assertEquals( longValue, verificationBuffer.getLong() );\n        assertEquals( floatValue, verificationBuffer.getFloat(), 0.0 );\n        assertEquals( doubleValue, verificationBuffer.getDouble(), 0.0 );\n        byte[] actualBytes = new byte[bytesValue.length];\n        verificationBuffer.get( actualBytes );\n        assertThat( actualBytes, new ArrayMatches<byte[]>( bytesValue ) );\n    }\n']",IOException;Non;Float;Byte;Buffer;One;long;wrapped;float;float,5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.961345672607422, -5.465430736541748, -4.628175258636475, -5.816030979156494, -5.489025592803955, -0.02397591434419155]",0.9763092398643494
2,"['    @Test\n    public void onlyOneFullBlock() throws Exception\n    {\n        byte[] bytes = new byte[256];\n        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer( bytes );\n        wrappedBuffer.resetWriterIndex();\n        BlockLogBuffer buffer = new BlockLogBuffer( wrappedBuffer, new Monitors().newMonitor( ByteCounterMonitor.class ) );\n\n        byte[] bytesValue = new byte[255];\n        bytesValue[0] = 1;\n        bytesValue[254] = -1;\n        buffer.put( bytesValue, bytesValue.length );\n        buffer.close();\n\n        ByteBuffer verificationBuffer = ByteBuffer.wrap( bytes );\n        assertEquals( (byte) 255, verificationBuffer.get() );\n        byte[] actualBytes = new byte[bytesValue.length];\n        verificationBuffer.get( actualBytes );\n        assertThat( actualBytes, new ArrayMatches<byte[]>( bytesValue ) );\n    }\n']",Exception;Channel;verification;Buffers;Buffer;class;Buffer;byte;Buffer;Index,6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.969632148742676, -5.539435863494873, -4.6315813064575195, -5.812718391418457, -5.450933456420898, -0.023785606026649475]",0.9764951467514038
2,"['    @Test\n    public void readOnlyOneFullBlock() throws Exception\n    {\n        byte[] bytes = new byte[256];\n        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer( bytes );\n        wrappedBuffer.resetWriterIndex();\n        BlockLogBuffer buffer = new BlockLogBuffer( wrappedBuffer, new Monitors().newMonitor( ByteCounterMonitor.class ) );\n\n        byte[] bytesValue = new byte[255];\n        bytesValue[0] = 1;\n        bytesValue[254] = -1;\n        buffer.put( bytesValue, bytesValue.length );\n        buffer.close();\n\n        ReadableByteChannel reader = new BlockLogReader( wrappedBuffer );\n        ByteBuffer verificationBuffer = ByteBuffer.wrap( new byte[1000] );\n        reader.read( verificationBuffer );\n        verificationBuffer.flip();\n        byte[] actualBytes = new byte[bytesValue.length];\n        verificationBuffer.get( actualBytes );\n        assertThat( actualBytes, new ArrayMatches<byte[]>( bytesValue ) );\n    }\n']",Channel;Only;Full;Log;Byte;One;bytes;read;read;Value,7.8580342233181e-10;5.820766091346741e-10;4.656612873077393e-10;3.2741809263825417e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.988100051879883, -5.522687911987305, -4.621376037597656, -5.836084365844727, -5.472476005554199, -0.023743465542793274]",0.976536214351654
2,"['    @Test\n    public void canWriteLargestAtomAfterFillingBuffer() throws Exception\n    {\n        byte[] bytes = new byte[300];\n        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer( bytes );\n        wrappedBuffer.resetWriterIndex();\n        BlockLogBuffer buffer = new BlockLogBuffer( wrappedBuffer, new Monitors().newMonitor( ByteCounterMonitor.class ) );\n\n        byte[] bytesValue = new byte[255];\n        bytesValue[0] = 1;\n        bytesValue[254] = -1;\n        long longValue = 123456;\n        buffer.put( bytesValue, bytesValue.length );\n        buffer.putLong( longValue );\n        buffer.close();\n\n        ByteBuffer verificationBuffer = ByteBuffer.wrap( bytes );\n        assertEquals( (byte) 0, verificationBuffer.get() );\n        byte[] actualBytes = new byte[bytesValue.length];\n        verificationBuffer.get( actualBytes );\n        assertThat( actualBytes, new ArrayMatches<byte[]>( bytesValue ) );\n        assertEquals( (byte) 8, verificationBuffer.get() );\n        assertEquals( longValue, verificationBuffer.getLong() );\n    }\n']",can;om;Matches;Write;byte;Buffer;Exception;new;Buffer;Buffer,1.1641532182693481e-09;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.955948829650879, -5.505789279937744, -4.634195804595947, -5.804120063781738, -5.4663519859313965, -0.023892462253570557]",0.9763908386230469
2,"['    @Test\n    public void canWriteReallyLargeByteArray() throws Exception\n    {\n        byte[] bytes = new byte[650];\n        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer( bytes );\n        wrappedBuffer.resetWriterIndex();\n        BlockLogBuffer buffer = new BlockLogBuffer( wrappedBuffer, new Monitors().newMonitor( ByteCounterMonitor.class ) );\n\n        byte[] bytesValue = new byte[600];\n        bytesValue[1] = 1;\n        bytesValue[99] = 2;\n        bytesValue[199] = 3;\n        bytesValue[299] = 4;\n        bytesValue[399] = 5;\n        bytesValue[499] = 6;\n        bytesValue[599] = 7;\n        buffer.put( bytesValue, bytesValue.length );\n        buffer.close();\n\n        byte[] actual;\n        ByteBuffer verificationBuffer = ByteBuffer.wrap( bytes );\n        assertEquals( (byte) 0, verificationBuffer.get() );\n        actual = new byte[255];\n        verificationBuffer.get( actual );\n        assertThat( actual, new ArrayMatches<byte[]>( Arrays.copyOfRange( bytesValue, 0, 255 ) ) );\n        assertEquals( (byte) 0, verificationBuffer.get() );\n        actual = new byte[255];\n        verificationBuffer.get( actual );\n        assertThat( actual, new ArrayMatches<byte[]>( Arrays.copyOfRange( bytesValue, 255, 510 ) ) );\n        assertEquals( (byte) 90, verificationBuffer.get() );\n        actual = new byte[90];\n        verificationBuffer.get( actual );\n        assertThat( actual, new ArrayMatches<byte[]>( Arrays.copyOfRange( bytesValue, 510, 600 ) ) );\n    }\n']",Writer;can;Array;Byte;Equals;wrapped;Buffer;Byte;Byte;length,9.89530235528946e-10;8.149072527885437e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.947339057922363, -5.514270782470703, -4.63940954208374, -5.7909369468688965, -5.447552680969238, -0.023951588198542595]",0.97633296251297
2,"['    @Test\n    public void canReaderReallyLargeByteArray() throws Exception\n    {\n        byte[] bytes = new byte[650];\n        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer( bytes );\n        wrappedBuffer.resetWriterIndex();\n        BlockLogBuffer buffer = new BlockLogBuffer( wrappedBuffer, new Monitors().newMonitor( ByteCounterMonitor.class ) );\n\n        byte[] bytesValue = new byte[600];\n        bytesValue[1] = 1;\n        bytesValue[99] = 2;\n        bytesValue[199] = 3;\n        bytesValue[299] = 4;\n        bytesValue[399] = 5;\n        bytesValue[499] = 6;\n        bytesValue[599] = 7;\n        buffer.put( bytesValue, bytesValue.length );\n        buffer.close();\n\n        byte[] actual;\n        BlockLogReader reader = new BlockLogReader( wrappedBuffer );\n        ByteBuffer verificationBuffer = ByteBuffer.wrap( new byte[1000] );\n        reader.read( verificationBuffer );\n        verificationBuffer.flip();\n        actual = new byte[255];\n        verificationBuffer.get( actual );\n        assertThat( actual, new ArrayMatches<byte[]>( Arrays.copyOfRange( bytesValue, 0, 255 ) ) );\n        actual = new byte[255];\n        verificationBuffer.get( actual );\n        assertThat( actual, new ArrayMatches<byte[]>( Arrays.copyOfRange( bytesValue, 255, 510 ) ) );\n        actual = new byte[90];\n        verificationBuffer.get( actual );\n        assertThat( actual, new ArrayMatches<byte[]>( Arrays.copyOfRange( bytesValue, 510, 600 ) ) );\n    }\n']",Byte;That;Monitor;close;Channel;Reader;length;reset;bytes;buffer,4.0745362639427185e-10;2.764863893389702e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;1.8917489796876907e-10,5,5,"[-5.9619221687316895, -5.507094383239746, -4.632444381713867, -5.811330318450928, -5.460945129394531, -0.023889901116490364]",0.9763932228088379
2,"['    @Test\n    public void shouldUpdateSlaveCacheWhenRemovingRelationshipGroupFromDenseNode() throws Throwable\n    {\n        ClusterManager manager = new ClusterManager( clusterOfSize( 3 ), root.directory(),\n                                                     stringMap( tx_push_factor.name(), ""2"",\n                                                                cache_type.name(), ""strong"",\n                                                                dense_node_threshold.name(), """" + DENSE_NODE ) );\n        try\n        {\n            // given\n            manager.start();\n            ClusterManager.ManagedCluster cluster = manager.getDefaultCluster();\n            cluster.await( ClusterManager.masterAvailable() );\n            cluster.await( ClusterManager.masterSeesAllSlavesAsAvailable() );\n            HighlyAvailableGraphDatabase master = cluster.getMaster();\n            long nodeId; // a dense node\n            try ( Transaction tx = master.beginTx() )\n            {\n                Node node = master.createNode();\n                for ( int i = 0; i < DENSE_NODE; i++ )\n                {\n                    node.createRelationshipTo( master.createNode(), withName( ""FOO"" ) );\n                }\n                master.createNode().createRelationshipTo( node, withName( ""BAR"" ) );\n\n                tx.success();\n                nodeId = node.getId();\n            }\n            // fully cache node on all instances\n            int count = 0;\n            for ( HighlyAvailableGraphDatabase db : cluster.getAllMembers() )\n            {\n                try ( Transaction tx = db.beginTx() )\n                {\n                    int these = count( db.getNodeById( nodeId ).getRelationships() );\n                    assertTrue( String.format( ""expected=%s, count here=%s"", count, these ),\n                                these != 0 && (count == 0 || these == count) );\n                    count = these;\n                    tx.success();\n                }\n            }\n\n            // when\n            try ( Transaction tx = master.beginTx() )\n            {\n                for ( Relationship relationship : master.getNodeById( nodeId ).getRelationships( withName( ""BAR"" ) ) )\n                {\n                    relationship.delete();\n                }\n                tx.success();\n            }\n\n            // then\n            HighlyAvailableGraphDatabase slave = cluster.getAnySlave();\n            try ( Transaction tx = slave.beginTx() )\n            {\n                List<String> relationships = new ArrayList<>();\n                for ( Relationship relationship : slave.getNodeById( nodeId ).getRelationships() )\n                {\n                    relationships.add( String.format( ""(%d)-[%d:%s]->(%d)"",\n                                                      relationship.getStartNode().getId(),\n                                                      relationship.getId(), relationship.getType().name(),\n                                                      relationship.getEndNode().getId() ) );\n                }\n                assertEquals( joinLines( relationships ), count - 1, relationships.size() );\n                assertEquals( count - 1, count( slave.getNodeById( nodeId ).getRelationships() ) );\n\n                tx.success();\n            }\n        }\n        finally\n        {\n            manager.shutdown();\n        }\n    }\n']",await;When;strong;ense;As;dense;Relationship;Database;ODE;long,8.731149137020111e-10;8.731149137020111e-10;6.402842700481415e-10;6.402842700481415e-10;4.802132025361061e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.937519073486328, -5.276296615600586, -4.621056079864502, -5.812432289123535, -5.540168762207031, -0.024813536554574966]",0.9754917025566101
2,"['    @Test\n    public void runTwoClusters() throws Throwable\n    {\n        File root = TargetDirectory.forTest( getClass() ).cleanDirectory( ""cluster"" );\n\n        ClusterManager clusterManager = new ClusterManager(\n                fromXml( getClass().getResource( ""/twoclustertest.xml"" ).toURI() ), root, MapUtil.stringMap() );\n\n        try\n        {\n            clusterManager.start();\n            ManagedCluster cluster1 = clusterManager.getCluster( ""neo4j.ha"" );\n\n            long cluster1NodeId;\n            {\n                GraphDatabaseService master = cluster1.getMaster();\n                logging.getLogger().info( ""CREATE NODE"" );\n                Transaction tx = master.beginTx();\n                Node node = master.createNode();\n                node.setProperty( ""cluster"", ""neo4j.ha"" );\n                cluster1NodeId = node.getId();\n                logging.getLogger().info( ""CREATED NODE"" );\n                tx.success();\n                tx.finish();\n            }\n\n            ManagedCluster cluster2 = clusterManager.getCluster( ""neo4j.ha2"" );\n            long cluster2NodeId;\n            {\n                GraphDatabaseService master = cluster2.getMaster();\n                logging.getLogger().info( ""CREATE NODE"" );\n                Transaction tx = master.beginTx();\n                Node node = master.createNode();\n                node.setProperty( ""cluster"", ""neo4j.ha2"" );\n                cluster2NodeId = node.getId();\n                logging.getLogger().info( ""CREATED NODE"" );\n                tx.success();\n                tx.finish();\n            }\n\n            // Verify properties in all cluster nodes\n            for ( HighlyAvailableGraphDatabase highlyAvailableGraphDatabase : cluster1.getAllMembers() )\n            {\n                highlyAvailableGraphDatabase.getDependencyResolver().resolveDependency( UpdatePullerClient.class ).pullUpdates();\n\n                Transaction transaction = highlyAvailableGraphDatabase.beginTx();\n                assertEquals( ""neo4j.ha"", highlyAvailableGraphDatabase.getNodeById( cluster1NodeId ).getProperty(\n                        ""cluster"" ) );\n                transaction.finish();\n            }\n\n            for ( HighlyAvailableGraphDatabase highlyAvailableGraphDatabase : cluster2.getAllMembers() )\n            {\n                highlyAvailableGraphDatabase.getDependencyResolver().resolveDependency( UpdatePullerClient.class ).pullUpdates();\n\n                Transaction transaction = highlyAvailableGraphDatabase.beginTx();\n                assertEquals( ""neo4j.ha2"", highlyAvailableGraphDatabase.getNodeById( cluster2NodeId ).getProperty(\n                        ""cluster"" ) );\n                transaction.finish();\n            }\n        }\n        finally\n        {\n            clusterManager.stop();\n        }\n    }\n']",begin;logging;to;File;root;Cluster;Manager;Node;Tx;Two,4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3646862246096134e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9580583572387695, -5.348998069763184, -4.63617467880249, -5.802553176879883, -5.522675037384033, -0.024341411888599396]",0.9759524464607239
2,"['    @Test\n    public void testMasterStopsWritesWhenMajorityIsUnavailable() throws Throwable\n    {\n        File root = TargetDirectory.forTest( getClass() ).cleanDirectory(\n                ""testMasterStopsWritesWhenMajorityIsUnavailable"" );\n        ClusterManager clusterManager = new ClusterManager( clusterOfSize( 3 ), root,\n                MapUtil.stringMap( HaSettings.tx_push_factor.name(), ""2"", HaSettings.state_switch_timeout.name(), ""5s""\n                ) );\n        try\n        {\n            clusterManager.start();\n            ClusterManager.ManagedCluster cluster = clusterManager.getDefaultCluster();\n            cluster.await( ClusterManager.masterAvailable(  ) );\n            cluster.await( ClusterManager.masterSeesAllSlavesAsAvailable() );\n\n            HighlyAvailableGraphDatabase master = cluster.getMaster();\n\n            doTx( master );\n\n            final CountDownLatch latch1 = new CountDownLatch( 1 );\n            waitOnHeartbeatFail( master, latch1 );\n\n            HighlyAvailableGraphDatabase slave1 = cluster.getAnySlave();\n            cluster.fail( slave1 );\n\n            latch1.await();\n            slave1.shutdown();\n\n            doTx( master );\n\n            final CountDownLatch latch2 = new CountDownLatch( 1 );\n            waitOnHeartbeatFail( master, latch2 );\n\n            HighlyAvailableGraphDatabase slave2 = cluster.getAnySlave( slave1 );\n            ClusterManager.RepairKit rk2 = cluster.fail( slave2 );\n\n            latch2.await();\n\n            // The master should stop saying that it\'s master\n            assertFalse( master.isMaster() );\n\n            try\n            {\n                doTx( master );\n                fail( ""After both slaves fail txs should not go through"" );\n            }\n            catch ( TransactionFailureException e )\n            {\n                assertEquals( ""Timeout waiting for cluster to elect master"", e.getMessage() );\n            }\n\n            // This is not a hack, this simulates a period of inactivity in the cluster.\n            Thread.sleep( 120000 ); // TODO Define ""inactivity"" and await that condition instead of 120 seconds.\n\n            final CountDownLatch latch3 = new CountDownLatch( 1 );\n            final CountDownLatch latch4 = new CountDownLatch( 1 );\n            final CountDownLatch latch5 = new CountDownLatch( 1 );\n            waitOnHeartbeatAlive( master, latch3 );\n//            waitOnRoleIsAvailable( master, latch4, HighAvailabilityModeSwitcher.MASTER );\n            waitOnRoleIsAvailable( master, latch5, HighAvailabilityModeSwitcher.SLAVE );\n\n            rk2.repair();\n\n            latch3.await();\n\n            cluster.await( ClusterManager.masterAvailable( slave1, slave2 ) );\n\n//            latch4.await();\n            latch5.await();\n\n            cluster.await( ClusterManager.masterAvailable(  ) );\n\n            assertTrue( master.isMaster() );\n            assertFalse( slave2.isMaster() );\n\n            Node finalNode = doTx( master );\n\n            try ( Transaction transaction = slave2.beginTx() )\n            {\n                slave2.getNodeById( finalNode.getId() );\n                transaction.success();\n            }\n        }\n        finally\n        {\n            clusterManager.stop();\n        }\n    }\n']",timeout;Unavailable;Unavailable;Stops;When;fail;await;slave;All;latch,5.820766091346741e-10;5.384208634495735e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;4.001776687800884e-10;3.7834979593753815e-10,5,5,"[-5.941680908203125, -5.34610652923584, -4.640346527099609, -5.801216125488281, -5.5167036056518555, -0.024386553093791008]",0.9759083986282349
2,"['    @Test\n    public void testInstanceCanBeReplacedToReestablishQuorum() throws Throwable\n    {\n        File root = TargetDirectory.forTest( getClass() ).cleanDirectory(\n                ""testInstanceCanBeReplacedToReestablishQuorum""\n        );\n        ClusterManager clusterManager = new ClusterManager( clusterOfSize( 3 ), root,\n                MapUtil.stringMap( HaSettings.tx_push_factor.name(), ""2"", HaSettings.state_switch_timeout.name(), ""5s"" ) );\n        clusterManager.start();\n        ClusterManager.ManagedCluster cluster = clusterManager.getDefaultCluster();\n\n        HighlyAvailableGraphDatabase master = cluster.getMaster();\n\n        cluster.await( ClusterManager.masterSeesAllSlavesAsAvailable() );\n\n        doTx( master );\n\n        final CountDownLatch latch1 = new CountDownLatch( 1 );\n        waitOnHeartbeatFail( master, latch1 );\n\n        HighlyAvailableGraphDatabase slave1 = cluster.getAnySlave();\n        cluster.fail( slave1 );\n\n        latch1.await();\n        slave1.shutdown();\n\n        doTx( master );\n\n        final CountDownLatch latch2 = new CountDownLatch( 1 );\n        waitOnHeartbeatFail( master, latch2 );\n\n        HighlyAvailableGraphDatabase slave2 = cluster.getAnySlave( slave1 );\n        cluster.fail( slave2 );\n\n        latch2.await();\n\n        // The master should stop saying that it\'s master\n        assertFalse( master.isMaster() );\n\n        try\n        {\n            doTx( master );\n            fail( ""After both slaves fail txs should not go through"" );\n        }\n        catch ( TransactionFailureException e )\n        {\n            assertEquals( ""Timeout waiting for cluster to elect master"", e.getMessage() );\n        }\n\n        // This is not a hack, this simulates a period of inactivity in the cluster.\n        Thread.sleep( 120000 ); // TODO Define ""inactivity"" and await that condition instead of 120 seconds.\n\n        final CountDownLatch latch3 = new CountDownLatch( 1 );\n        final CountDownLatch latch4 = new CountDownLatch( 1 );\n        final CountDownLatch latch5 = new CountDownLatch( 1 );\n        waitOnHeartbeatAlive( master, latch3 );\n        waitOnRoleIsAvailable( master, latch4, HighAvailabilityModeSwitcher.MASTER );\n        waitOnRoleIsAvailable( master, latch5, HighAvailabilityModeSwitcher.SLAVE );\n\n        HighlyAvailableGraphDatabase replacement =\n                (HighlyAvailableGraphDatabase) new TestHighlyAvailableGraphDatabaseFactory().\n                newHighlyAvailableDatabaseBuilder( new File( root, ""replacement"" ).getAbsolutePath() ).\n                setConfig( ClusterSettings.cluster_server, "":5010"" ).\n                setConfig( HaSettings.ha_server, "":6010"" ).\n                setConfig( ClusterSettings.server_id, ""3"" ).\n                setConfig( ClusterSettings.initial_hosts, cluster.getInitialHostsConfigString() ).\n                setConfig( HaSettings.tx_push_factor, ""0"" ).\n                newGraphDatabase();\n\n        latch3.await();\n        latch4.await();\n        latch5.await();\n\n        assertTrue( master.isMaster() );\n        assertFalse( replacement.isMaster() );\n\n        Node finalNode = doTx( master );\n\n        Transaction transaction = replacement.beginTx();\n        try\n        {\n            replacement.getNodeById( finalNode.getId() );\n        }\n        finally\n        {\n            transaction.finish();\n        }\n\n        clusterManager.stop();\n        replacement.shutdown();\n    }\n']",atch;Tx;Quorum;Throwable;fail;root;latch;Reestablish;Be;fail,9.313225746154785e-10;6.402842700481415e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.922283172607422, -5.4123382568359375, -4.670803546905518, -5.774031162261963, -5.468815326690674, -0.024116963148117065]",0.9761715531349182
2,"['    @Test\n    public void creatingConstraintOnSlaveIsNotAllowed() throws Exception\n    {\n        // given\n        ClusterManager.ManagedCluster cluster = clusterRule.startCluster();\n        HighlyAvailableGraphDatabase slave = cluster.getAnySlave();\n\n        slave.beginTx();\n        try\n        {\n            ConstraintCreator constraintCreator = slave.schema()\n                    .constraintFor( DynamicLabel.label( ""LabelName"" ) ).assertPropertyIsUnique( ""PropertyName"" );\n\n            // when\n            constraintCreator.create();\n            fail( ""should have thrown exception"" );\n        }\n        catch ( InvalidTransactionTypeException e )\n        {\n            assertThat(e.getMessage(), equalTo(""Modifying the database schema can only be done on the master server, "" +\n                    ""this server is a slave. Please issue schema modification commands directly to the master.""));\n        }\n    }\n']",creating;modification;Slave;Modifying;Tx;Constraint;Manager;Creator;Cluster;label,5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.961650371551514, -5.462396621704102, -4.627073764801025, -5.824273109436035, -5.465708255767822, -0.024074137210845947]",0.9762133359909058
2,"['    @Test\n    public void emptyForeignDbShouldJoinAfterHavingItsEmptyDbDeleted() throws Exception\n    {\n        // GIVEN\n        // -- one instance running\n        firstInstance = new TestHighlyAvailableGraphDatabaseFactory()\n                .newHighlyAvailableDatabaseBuilder( DIR.cleanDirectory( ""1"" ).getAbsolutePath() )\n                .setConfig( server_id, ""1"" )\n                .setConfig( cluster_server, ""127.0.0.1:5001"" )\n                .setConfig( ha_server, ""127.0.0.1:6031"" )\n                .setConfig( initial_hosts, ""127.0.0.1:5001"" )\n                .newGraphDatabase();\n        // -- another instance preparing to join with a store with a different store ID\n        String foreignDbStoreDir = createAnotherStore( DIR.cleanDirectory( ""2"" ), 0 );\n\n        // WHEN\n        // -- the other joins\n        foreignInstance = new TestHighlyAvailableGraphDatabaseFactory()\n                .newHighlyAvailableDatabaseBuilder( foreignDbStoreDir )\n                .setConfig( server_id, ""2"" )\n                .setConfig( initial_hosts, ""127.0.0.1:5001"" )\n                .setConfig( cluster_server, ""127.0.0.1:5002"" )\n                .setConfig( ha_server, ""127.0.0.1:6032"" )\n                .newGraphDatabase();\n        // -- and creates a node\n        long foreignNode = createNode( foreignInstance, ""foreigner"" );\n\n        // THEN\n        // -- that node should arrive at the master\n        assertEquals( foreignNode, findNode( firstInstance, ""foreigner"" ) );\n    }\n']",Database;Available;Database;Config;Highly;join;cluster;instance;Should;Instance,4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.908036231994629, -5.378492832183838, -4.673661708831787, -5.769539833068848, -5.445667266845703, -0.024401793256402016]",0.975893497467041
2,"['    @Test\n    public void nonEmptyForeignDbShouldNotBeAbleToJoin() throws Exception\n    {\n        // GIVEN\n        // -- one instance running\n        firstInstance = new TestHighlyAvailableGraphDatabaseFactory()\n                .newHighlyAvailableDatabaseBuilder( DIR.cleanDirectory( ""1"" ).getAbsolutePath() )\n                .setConfig( server_id, ""1"" )\n                .setConfig( initial_hosts, ""127.0.0.1:5001"" )\n                .setConfig( cluster_server, ""127.0.0.1:5001"" )\n                .setConfig( ha_server, ""127.0.0.1:6041"" )\n                .newGraphDatabase();\n        createNodes( firstInstance, 3, ""first"" );\n        // -- another instance preparing to join with a store with a different store ID\n        String foreignDbStoreDir = createAnotherStore( DIR.cleanDirectory( ""2"" ), 1 );\n\n        // WHEN\n        // -- the other joins\n        foreignInstance = new TestHighlyAvailableGraphDatabaseFactory()\n                .newHighlyAvailableDatabaseBuilder( foreignDbStoreDir )\n                .setConfig( server_id, ""2"" )\n                .setConfig( initial_hosts, ""127.0.0.1:5001"" )\n                .setConfig( cluster_server, ""127.0.0.1:5002"" )\n                .setConfig( ha_server, ""127.0.0.1:6042"" )\n                .setConfig( state_switch_timeout, ""5s"" )\n                .newGraphDatabase();\n\n        try\n        {\n            // THEN\n            // -- that node should arrive at the master\n            createNode( foreignInstance, ""foreigner"" );\n            fail( ""Shouldn\'t be able to create a node, since it shouldn\'t have joined"" );\n        }\n        catch ( Exception e )\n        {\n            // Good\n        }\n    }\n']",Foreign;non;WHEN;Directory;clean;IVEN;Highly;Database;Not;ha,1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.915167331695557, -5.382895469665527, -4.668951511383057, -5.776763439178467, -5.452556610107422, -0.024353045970201492]",0.9759411215782166
2,"['    @Test\n    public void makeSureUpdatePullerGetsGoingAfterMasterSwitch() throws Throwable\n    {\n        File root = TargetDirectory.forTest( getClass() ).cleanDirectory( testName.getMethodName() );\n        ClusterManager clusterManager = new ClusterManager( clusterOfSize( 3 ), root, MapUtil.stringMap(\n                HaSettings.pull_interval.name(), PULL_INTERVAL+""ms"",\n                ClusterSettings.heartbeat_interval.name(), ""2s"",\n                ClusterSettings.heartbeat_timeout.name(), ""30s"") );\n        clusterManager.start();\n        cluster = clusterManager.getDefaultCluster();\n        cluster.await( allSeesAllAsAvailable() );\n\n        cluster.info( ""### Creating initial dataset"" );\n        long commonNodeId = createNodeOnMaster();\n\n        HighlyAvailableGraphDatabase master = cluster.getMaster();\n        setProperty( master, commonNodeId, 1 );\n        cluster.info( ""### Initial dataset created"" );\n        awaitPropagation( 1, commonNodeId, cluster );\n\n        cluster.info( ""### Shutting down master"" );\n        ClusterManager.RepairKit masterShutdownRK = cluster.shutdown( master );\n\n        cluster.info( ""### Awaiting new master"" );\n        cluster.await( masterAvailable( master ) );\n        cluster.await( masterSeesSlavesAsAvailable( 1 ) );\n\n        cluster.info( ""### Doing a write to master"" );\n        setProperty( cluster.getMaster(), commonNodeId, 2 );\n        awaitPropagation( 2, commonNodeId, cluster, master );\n\n        cluster.info( ""### Repairing cluster"" );\n        masterShutdownRK.repair();\n        cluster.await( masterAvailable() );\n        cluster.await( masterSeesSlavesAsAvailable( 2 ) );\n        cluster.await( allSeesAllAsAvailable() );\n\n        cluster.info( ""### Awaiting change propagation"" );\n        awaitPropagation( 2, commonNodeId, cluster );\n    }\n']",Sure;Shutdown;interval;master;heartbeat;Update;await;dataset;ULL;Available,8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.932409286499023, -5.447326183319092, -4.653555393218994, -5.800755500793457, -5.460484504699707, -0.024051329120993614]",0.9762356877326965
2,"['    @Test\n    public void pullUpdatesShellAppPullsUpdates() throws Throwable\n    {\n        File root = TargetDirectory.forTest( getClass() ).cleanDirectory( testName.getMethodName() );\n        Map<Integer, Map<String, String>> instanceConfig = new HashMap<>();\n        for (int i = 1; i <= 2; i++)\n        {\n            Map<String, String> thisInstance =\n                    MapUtil.stringMap( ShellSettings.remote_shell_port.name(), """" + (SHELL_PORT + i) );\n            instanceConfig.put( i, thisInstance );\n        }\n        ClusterManager clusterManager = new ClusterManager( clusterOfSize( 2 ), root, MapUtil.stringMap(\n                HaSettings.pull_interval.name(), ""0"",\n                HaSettings.tx_push_factor.name(), ""0"" ,\n                ShellSettings.remote_shell_enabled.name(), ""true""\n                ), instanceConfig );\n        clusterManager.start();\n        cluster = clusterManager.getDefaultCluster();\n\n        long commonNodeId = createNodeOnMaster();\n\n        setProperty( cluster.getMaster(), commonNodeId, 1 );\n        callPullUpdatesViaShell( 2 );\n        HighlyAvailableGraphDatabase slave = cluster.getAnySlave();\n        try ( Transaction tx = slave.beginTx() )\n        {\n            assertEquals( 1, slave.getNodeById( commonNodeId ).getProperty( ""i"" ) );\n        }\n    }\n']",port;Pull;Updates;SHELL;call;push;cluster;Map;factor;Any,6.984919309616089e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.943563938140869, -5.403671741485596, -4.650820732116699, -5.79560661315918, -5.490731239318848, -0.024131042882800102]",0.9761579036712646
2,"['    @Test\n    public void shouldPullUpdatesOnStartupNoMatterWhat() throws Exception\n    {\n        GraphDatabaseService slave = null;\n        GraphDatabaseService master = null;\n        try\n        {\n            File testRootDir = TargetDirectory.forTest( getClass() ).cleanDirectory( testName.getMethodName() );\n            File masterDir = new File( testRootDir, ""master"" );\n            master = new TestHighlyAvailableGraphDatabaseFactory().\n                    newHighlyAvailableDatabaseBuilder( masterDir.getAbsolutePath() )\n                    .setConfig( ClusterSettings.server_id, ""1"" )\n                    .setConfig( ClusterSettings.initial_hosts, "":5001"" )\n                    .newGraphDatabase();\n\n            // Copy the store, then shutdown, so update pulling later makes sense\n            File slaveDir = new File( testRootDir, ""slave"" );\n            slave = new TestHighlyAvailableGraphDatabaseFactory().\n                    newHighlyAvailableDatabaseBuilder( slaveDir.getAbsolutePath() )\n                    .setConfig( ClusterSettings.server_id, ""2"" )\n                    .setConfig( ClusterSettings.initial_hosts, "":5001"" )\n                    .newGraphDatabase();\n\n            // Required to block until the slave has left for sure\n            final CountDownLatch slaveLeftLatch = new CountDownLatch( 1 );\n\n            final ClusterClient masterClusterClient = ( (HighlyAvailableGraphDatabase) master ).getDependencyResolver()\n                    .resolveDependency( ClusterClient.class );\n\n            masterClusterClient.addClusterListener( new ClusterListener.Adapter()\n            {\n                @Override\n                public void leftCluster( InstanceId instanceId, URI member )\n                {\n                    slaveLeftLatch.countDown();\n                    masterClusterClient.removeClusterListener( this );\n                }\n']",Pull;Dir;No;sense;Service;Builder;null;Config;Available;shutdown,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.915959358215332, -5.288119792938232, -4.647176742553711, -5.800690650939941, -5.506439685821533, -0.024725154042243958]",0.9755780100822449
2,"['    @Test\n    public void aClusterSnapshotShouldEqualItsOrigin() throws Exception\n    {\n        // Given\n        Logging logging = new TestLogging();\n        ClusterConfiguration config = new ClusterConfiguration( ""default"",\n                logging.getMessagesLog( ClusterConfiguration.class ),\n                ""cluster://localhost:5001"",\n                ""cluster://localhost:5002"",\n                ""cluster://localhost:5003"" );\n\n        ClusterState state = new ClusterState(\n                asList(\n                        newClusterInstance( new InstanceId( 1 ), new URI( ""cluster://localhost:5001"" ),\n                                new Monitors(), config, logging ),\n                        newClusterInstance( new InstanceId( 2 ), new URI( ""cluster://localhost:5002"" ),\n                                new Monitors(), config, logging ),\n                        newClusterInstance( new InstanceId( 3 ), new URI( ""cluster://localhost:5003"" ),\n                                new Monitors(), config, logging ) ),\n                emptySetOf( ClusterAction.class )\n        );\n\n        // When\n        ClusterState snapshot = state.snapshot();\n\n        // Then\n        assertEquals( state, snapshot );\n        assertEquals( state.hashCode(), snapshot.hashCode() );\n    }\n']",Its;Origin;URI;Exception;localhost;new;Instance;Cluster;Given;URI,5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.918408393859863, -5.27568244934082, -4.628871917724609, -5.810211181640625, -5.527374267578125, -0.024849118664860725]",0.9754570722579956
2,"['    @Test\n    public void twoStatesWithSameSetupAndPendingMessagesShouldBeEqual() throws Exception\n    {\n        // Given\n        Logging logging = new TestLogging();\n        ClusterConfiguration config = new ClusterConfiguration( ""default"",\n                logging.getMessagesLog( ClusterConfiguration.class ),\n                ""cluster://localhost:5001"",\n                ""cluster://localhost:5002"",\n                ""cluster://localhost:5003"" );\n\n        ClusterState state = new ClusterState(\n                asList(\n                        newClusterInstance( new InstanceId( 1 ), new URI( ""cluster://localhost:5001"" ),\n                                new Monitors(), config, logging ),\n                        newClusterInstance( new InstanceId( 2 ), new URI( ""cluster://localhost:5002"" ),\n                                new Monitors(), config, logging ),\n                        newClusterInstance( new InstanceId( 3 ), new URI( ""cluster://localhost:5003"" ),\n                                new Monitors(), config, logging ) ),\n                emptySetOf( ClusterAction.class )\n        );\n\n        // When\n        ClusterState firstState = state.performAction( new MessageDeliveryAction( Message.to( ClusterMessage.join,\n                new URI( ""cluster://localhost:5002"" ), new Object[]{""defaultcluster"",\n                        new URI[]{new URI( ""cluster://localhost:5003"" )}} ).setHeader( Message.CONVERSATION_ID,\n                ""-1"" ).setHeader( Message.FROM, ""cluster://localhost:5002"" ) ) );\n        ClusterState secondState = state.performAction( new MessageDeliveryAction( Message.to( ClusterMessage.join,\n                new URI( ""cluster://localhost:5002"" ), new Object[]{""defaultcluster"",\n                        new URI[]{new URI( ""cluster://localhost:5003"" )}} ).setHeader( Message.CONVERSATION_ID,\n                ""-1"" ).setHeader( Message.FROM, ""cluster://localhost:5002"" ) ) );\n\n        // Then\n        assertEquals( firstState, secondState );\n        assertEquals( firstState.hashCode(), secondState.hashCode() );\n    }\n']",ending;Instance;class;List;localhost;new;Monitors;state;Cluster;Cluster,6.984919309616089e-10;6.330083124339581e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.310560714453459e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.8951568603515625, -5.26873779296875, -4.6448469161987305, -5.782031059265137, -5.507518291473389, -0.02496144361793995]",0.9753475189208984
2,"['    @Test\n    public void equalsShouldBeLogicalAndNotExact() throws Exception\n    {\n        // Given\n        ProverTimeouts timeouts1 = new ProverTimeouts( new URI(""http://asd"") );\n        ProverTimeouts timeouts2 = new ProverTimeouts( new URI(""http://asd"") );\n\n        timeouts1.setTimeout( ""a"", Message.internal( ProposerMessage.join ) );\n        timeouts1.setTimeout( ""b"", Message.internal( ProposerMessage.join ) );\n        timeouts1.setTimeout( ""c"", Message.internal( ProposerMessage.join ) );\n\n        timeouts2.setTimeout( ""b"", Message.internal( ProposerMessage.join ) );\n        timeouts2.setTimeout( ""c"", Message.internal( ProposerMessage.join ) );\n\n        // When\n        timeouts1.cancelTimeout( ""a"" );\n\n        // Then\n        assertEquals(timeouts1, timeouts2);\n    }\n']",Logical;Exact;Timeout;Timeout;Timeout;Prover;Should;Timeouts;Equals;Timeout,2.7939677238464355e-09;2.561137080192566e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.604264050722122e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.935105323791504, -5.5528883934021, -4.656088829040527, -5.789322853088379, -5.389761447906494, -0.023931918665766716]",0.9763521552085876
2,"['    @Test\n    public void givenClusterWhenShutdownMasterThenCannotStartTransactionOnSlave() throws Throwable\n    {\n        // Given\n        ClusterManager clusterManager = new ClusterManager(\n                fromXml( getClass().getResource( ""/threeinstances.xml"" ).toURI() ),\n                forTest( getClass() ).cleanDirectory( ""testCluster"" ),\n                stringMap( HaSettings.ha_server.name(), "":6001-6005"", HaSettings.tx_push_factor.name(), ""2"" ) );\n        try\n        {\n            clusterManager.start();\n\n            clusterManager.getDefaultCluster().await( ClusterManager.allSeesAllAsAvailable() );\n\n            GraphDatabaseAPI master = clusterManager.getDefaultCluster().getMaster();\n            final GraphDatabaseAPI slave = clusterManager.getDefaultCluster().getAnySlave();\n\n            // When\n            final FutureTask<Boolean> result = new FutureTask<>( new Callable<Boolean>()\n            {\n                @Override\n                public Boolean call() throws Exception\n                {\n                    try ( Transaction tx = slave.beginTx() )\n                    {\n                        tx.acquireWriteLock( slave.getNodeById( 0 ) );\n                        // Fail\n                        return false;\n                    }\n                    catch ( Exception e )\n                    {\n                        // Ok!\n                        return true;\n                    }\n                }\n']",Given;Cluster;factor;Task;acquire;Exception;Shutdown;string;annot;On,8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.929203033447266, -5.269444942474365, -4.636916637420654, -5.787952899932861, -5.527020454406738, -0.024842724204063416]",0.975463330745697
2,"['    @Test\n    public void startTxAsSlaveAndFinishItAfterHavingSwitchedToMasterShouldNotSucceed() throws Exception\n    {\n        // GIVEN\n        GraphDatabaseService db = cluster.getAnySlave();\n        takeTheLeadInAnEventualMasterSwitch( db );\n\n        // WHEN\n        Transaction tx = db.beginTx();\n        try\n        {\n            db.createNode().setProperty( ""name"", ""slave"" );\n            tx.success();\n        }\n        finally\n        {\n            cluster.shutdown( cluster.getMaster() );\n            assertFinishGetsTransactionFailure( tx );\n        }\n\n        cluster.await( masterAvailable() );\n\n        // THEN\n        assertEquals( db, cluster.getMaster() );\n        // to prevent a deadlock scenario which occurs if this test exists (and @After starts)\n        // before the db has recovered from its KERNEL_PANIC\n        awaitFullyOperational( db );\n    }\n']",deadlock;Lead;success;As;Property;Eventual;shutdown;It;ERNEL;IVEN,1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;6.402842700481415e-10;6.402842700481415e-10;5.602487362921238e-10;4.94765117764473e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.979175567626953, -5.482958793640137, -4.62400484085083, -5.847867488861084, -5.454427242279053, -0.023949261754751205]",0.9763352274894714
2,"['    @Test\n    public void startTxAsSlaveAndFinishItAfterAnotherMasterBeingAvailableShouldNotSucceed() throws Exception\n    {\n        // GIVEN\n        HighlyAvailableGraphDatabase db = cluster.getAnySlave();\n\n        // WHEN\n        HighlyAvailableGraphDatabase theOtherSlave;\n        Transaction tx = db.beginTx();\n        try\n        {\n            db.createNode().setProperty( ""name"", ""slave"" );\n            tx.success();\n        }\n        finally\n        {\n            theOtherSlave = cluster.getAnySlave( db );\n            takeTheLeadInAnEventualMasterSwitch( theOtherSlave );\n            cluster.shutdown( cluster.getMaster() );\n            assertFinishGetsTransactionFailure( tx );\n        }\n\n        cluster.await( ClusterManager.masterAvailable() );\n\n        // THEN\n        assertFalse( db.isMaster() );\n        assertTrue( theOtherSlave.isMaster() );\n        // to prevent a deadlock scenario which occurs if this test exists (and @After starts)\n        // before the db has recovered from its KERNEL_PANIC\n        awaitFullyOperational( db );\n    }\n']",Slave;Slave;Master;After;await;Graph;WHEN;before;Lead;Slave,1.3387762010097504e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.970398426055908, -5.479668140411377, -4.624197483062744, -5.837130546569824, -5.4580979347229, -0.024000005796551704]",0.9762856960296631
2,"['    @Test\n    public void createPreferenceGroupAdapter_displayTopLevelPreferences() {\n        // No limit, should display all 10 preferences\n        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n        assertPreferencesAreExpanded(preferenceGroupAdapter);\n\n        // Limit > child count, should display all 10 preferences\n        mScreen.setInitialExpandedChildrenCount(TOTAL_PREFERENCE + 4);\n        preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n        assertPreferencesAreExpanded(preferenceGroupAdapter);\n\n        // Limit = child count, should display all 10 preferences\n        mScreen.setInitialExpandedChildrenCount(TOTAL_PREFERENCE);\n        preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n        assertPreferencesAreExpanded(preferenceGroupAdapter);\n\n        // Limit < child count, should display up to the limit + expand button\n        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n        preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n        assertPreferencesAreCollapsed(preferenceGroupAdapter);\n        for (int i = 0; i < INITIAL_EXPANDED_COUNT; i++) {\n            assertEquals(mPreferenceList.get(i), preferenceGroupAdapter.getItem(i));\n        }\n        assertEquals(CollapsiblePreferenceGroupController.ExpandButton.class,\n                preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT).getClass());\n    }\n']",display;Expanded;preferences;button;Button;expand;display;Group;Initial;Equals,6.402842700481415e-10;5.675246939063072e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.710738383233547e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.855356693267822, -5.432875156402588, -4.674314975738525, -5.732498645782471, -5.394566059112549, -0.02464839443564415]",0.9756528735160828
2,"['    @Test\n    public void createPreferenceGroupAdapter_displayNestedPreferences() {\n        final PreferenceScreen screen = mPreferenceManager.createPreferenceScreen(mContext);\n        screen.setKey(PREFERENCE_KEY);\n        final List<Preference> preferenceList = new ArrayList<>();\n\n        // Add 2 preferences and 2 categories to screen\n        createTestPreferences(screen, preferenceList, 2);\n        createTestPreferencesCategory(screen, preferenceList, 4);\n        createTestPreferencesCategory(screen, preferenceList, 4);\n\n        // No limit, should display all 10 preferences + 2 categories\n        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(screen);\n        assertEquals(TOTAL_PREFERENCE + 2, preferenceGroupAdapter.getItemCount());\n\n        // Limit > child count, should display all 10 preferences + 2 categories\n        screen.setInitialExpandedChildrenCount(TOTAL_PREFERENCE + 4);\n        preferenceGroupAdapter = new PreferenceGroupAdapter(screen);\n        assertEquals(TOTAL_PREFERENCE + 2, preferenceGroupAdapter.getItemCount());\n\n        // Limit = child count, should display all 10 preferences + 2 categories\n        screen.setInitialExpandedChildrenCount(TOTAL_PREFERENCE);\n        preferenceGroupAdapter = new PreferenceGroupAdapter(screen);\n        assertEquals(TOTAL_PREFERENCE + 2, preferenceGroupAdapter.getItemCount());\n\n        // Limit < child count, should display 2 preferences and the first 3 preference in the\n        // category + expand button\n        screen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n        preferenceGroupAdapter = new PreferenceGroupAdapter(screen);\n        assertEquals(INITIAL_EXPANDED_COUNT + 2, preferenceGroupAdapter.getItemCount());\n        for (int i = 0; i <= INITIAL_EXPANDED_COUNT; i++) {\n            assertEquals(preferenceList.get(i), preferenceGroupAdapter.getItem(i));\n        }\n        assertEquals(CollapsiblePreferenceGroupController.ExpandButton.class,\n                preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT + 1).getClass());\n    }\n']",Preferences;Category;Category;expand;Screen;OTAL;screen;screen;Group;display,6.548361852765083e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.867125988006592, -5.425135612487793, -4.68177604675293, -5.720232009887695, -5.415660381317139, -0.024521727114915848]",0.9757766127586365
2,"['    @Test\n    public void createPreferenceGroupAdapter_setExpandButtonSummary() {\n        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n        // Preference 5 to Preference 9 are collapsed\n        CharSequence summary = mPreferenceList.get(INITIAL_EXPANDED_COUNT).getTitle();\n        for (int i = INITIAL_EXPANDED_COUNT + 1; i < TOTAL_PREFERENCE; i++) {\n            summary = mContext.getString(R.string.summary_collapsed_preference_list,\n                    summary, mPreferenceList.get(i).getTitle());\n        }\n        final Preference expandButton = preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT);\n        assertEquals(summary, expandButton.getSummary());\n    }\n']",Count;Button;EXPANDED;PREFERENCE;OUNT;set;INITIAL;to;create;EXPANDED,9.313225746154785e-10;8.149072527885437e-10;6.111804395914078e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.922389507293701, -5.477427005767822, -4.673645496368408, -5.766750335693359, -5.428295135498047, -0.02400326356291771]",0.97628253698349
2,"['    @Test\n    public void createPreferenceGroupAdapter_expandButtonSummaryShouldListVisiblePreferencesOnly() {\n        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n        mPreferenceList.get(INITIAL_EXPANDED_COUNT + 1).setVisible(false);\n        mPreferenceList.get(INITIAL_EXPANDED_COUNT + 4).setVisible(false);\n        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n        // Preference 5 to Preference 9 are collapsed, only preferences 5, 7, 8 are visible\n        CharSequence summary = mPreferenceList.get(INITIAL_EXPANDED_COUNT).getTitle();\n        summary = mContext.getString(R.string.summary_collapsed_preference_list,\n                summary, mPreferenceList.get(INITIAL_EXPANDED_COUNT + 2).getTitle());\n        summary = mContext.getString(R.string.summary_collapsed_preference_list,\n                summary, mPreferenceList.get(INITIAL_EXPANDED_COUNT + 3).getTitle());\n        final Preference expandButton = preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT);\n        assertEquals(summary, expandButton.getSummary());\n    }\n']",expand;Expanded;Preference;preference;Summary;Should;EXPANDED;Count;Group;OUNT,1.4551915228366852e-09;1.1641532182693481e-09;8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;7.130438461899757e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.869076728820801, -5.433748245239258, -4.678605079650879, -5.73392915725708, -5.417000770568848, -0.024455422535538673]",0.9758411049842834
2,"['    @Test\n    public void clickExpandButton_shouldShowAllPreferences() {\n        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n\n        // First showing 5 preference with expand button\n        PreferenceGroupAdapter preferenceGroupAdapter =\n                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);\n        assertPreferencesAreCollapsed(preferenceGroupAdapter);\n\n        // Click the expand button, should review all preferences\n        final Preference expandButton = preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT);\n        expandButton.performClick();\n        assertPreferencesAreExpanded(preferenceGroupAdapter);\n    }\n']",Adapter;Expanded;with;expand;Instance;Children;preference;Item;preference;preference,9.89530235528946e-10;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.935184001922607, -5.459344863891602, -4.669314384460449, -5.786288738250732, -5.434229850769043, -0.023999422788619995]",0.9762862920761108
2,"['    @Test\n    public void onPreferenceVisibilityChange_shouldSyncPreferencesIfCollapsed() {\n        // No limit set, should not sync preference\n        PreferenceGroupAdapter preferenceGroupAdapter =\n                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);\n        preferenceGroupAdapter.onPreferenceVisibilityChange(mPreferenceList.get(3));\n        verify(mHandler, never()).sendMessageDelayed(any(Message.class), anyLong());\n\n        // Has limit set, should sync preference\n        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n        preferenceGroupAdapter =\n                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);\n        preferenceGroupAdapter.onPreferenceVisibilityChange(mPreferenceList.get(3));\n        verify(mHandler).sendMessageDelayed(any(Message.class), anyLong());\n\n        // Preferences expanded already, should not sync preference\n        final Preference expandButton = preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT);\n        expandButton.performClick();\n        reset(mHandler);\n        preferenceGroupAdapter.onPreferenceVisibilityChange(mPreferenceList.get(3));\n        verify(mHandler, never()).sendMessageDelayed(any(Message.class), anyLong());\n    }\n']",Preferences;limit;EXPANDED;preference;Collapsed;sync;Preferences;Delayed;Adapter;Message,6.984919309616089e-10;6.984919309616089e-10;5.384208634495735e-10;4.802132025361061e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.912400722503662, -5.488289833068848, -4.693803787231445, -5.754822254180908, -5.410971641540527, -0.023910852149128914]",0.9763728380203247
2,"['    @Test\n    public void saveInstanceState_shouldSaveMaxNumberOfChildrenToShow() {\n        // No limit set, should save max value\n        Parcelable state = mScreen.onSaveInstanceState();\n        assertEquals(PreferenceGroup.SavedState.class, state.getClass());\n        assertEquals(Integer.MAX_VALUE,\n                ((PreferenceGroup.SavedState) state).mInitialExpandedChildrenCount);\n\n        // Has limit set, should save limit\n        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n        state = mScreen.onSaveInstanceState();\n        assertEquals(PreferenceGroup.SavedState.class, state.getClass());\n        assertEquals(INITIAL_EXPANDED_COUNT,\n                ((PreferenceGroup.SavedState) state).mInitialExpandedChildrenCount);\n    }\n']",save;Instance;Screen;Count;Initial;Count;No;OUNT;Parcelable;EXPANDED,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.529727786779404e-10;5.384208634495735e-10,5,5,"[-5.9069294929504395, -5.528861999511719, -4.680453777313232, -5.739573955535889, -5.3863959312438965, -0.0240473710000515]",0.9762395620346069
2,"['    @Test\n    public void restoreInstanceState_noChange_shouldDoNothing() {\n        PreferenceGroup.SavedState state;\n\n        // Initialized as expanded, restore as expanded, should remain expanded\n        state = new PreferenceGroup.SavedState(\n                Preference.BaseSavedState.EMPTY_STATE, Integer.MAX_VALUE);\n        PreferenceGroupAdapter preferenceGroupAdapter =\n                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);\n        mScreen.onRestoreInstanceState(state);\n        assertPreferencesAreExpanded(preferenceGroupAdapter);\n        verify(mHandler, never()).sendMessageDelayed(any(Message.class), anyLong());\n\n        // Initialized as collapsed, restore as collapsed, should remain collapsed\n        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n        state = new PreferenceGroup.SavedState(\n                Preference.BaseSavedState.EMPTY_STATE, INITIAL_EXPANDED_COUNT);\n        preferenceGroupAdapter =\n                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);\n        mScreen.onRestoreInstanceState(state);\n        assertPreferencesAreCollapsed(preferenceGroupAdapter);\n        verify(mHandler, never()).sendMessageDelayed(any(Message.class), anyLong());\n    }\n']",restore;Preferences;Initialized;EMPTY;Preference;Expanded;collapsed;Nothing;any;Message,8.149072527885437e-10;4.729372449219227e-10;4.656612873077393e-10;4.511093720793724e-10;4.511093720793724e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.889553070068359, -5.5214457511901855, -4.709741115570068, -5.711128234863281, -5.3643269538879395, -0.024051910266280174]",0.976235032081604
2,"['    @Test\n    public void restoreHierarchyState_previouslyCollapsed_shouldRestoreToCollapsedState() {\n        PreferenceGroup.SavedState state =\n                new PreferenceGroup.SavedState(\n                        Preference.BaseSavedState.EMPTY_STATE, Integer.MAX_VALUE);\n        // Initialized as expanded, restore as collapsed, should collapse\n        state.mInitialExpandedChildrenCount = INITIAL_EXPANDED_COUNT;\n        mScreen.setInitialExpandedChildrenCount(Integer.MAX_VALUE);\n        PreferenceGroupAdapter preferenceGroupAdapter =\n                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);\n        mScreen.onRestoreInstanceState(state);\n        verify(mHandler).sendMessageDelayed(any(Message.class), anyLong());\n        assertPreferencesAreCollapsed(preferenceGroupAdapter);\n    }\n']",EMPTY;Collapsed;restore;preference;Long;create;STATE;Preference;expanded;Initialized,1.7462298274040222e-09;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.968021869659424, -5.518372535705566, -4.651595592498779, -5.785703659057617, -5.442056655883789, -0.023800738155841827]",0.97648024559021
2,"['    @Test\n    public void restoreHierarchyState_previouslyExpanded_shouldRestoreToExpandedState() {\n        PreferenceGroup.SavedState state =\n                new PreferenceGroup.SavedState(\n                        Preference.BaseSavedState.EMPTY_STATE, Integer.MAX_VALUE);\n        // Initialized as collapsed, restore as expanded, should expand\n        state.mInitialExpandedChildrenCount = Integer.MAX_VALUE;\n        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);\n        PreferenceGroupAdapter preferenceGroupAdapter =\n                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);\n        mScreen.onRestoreInstanceState(state);\n        verify(mHandler).sendMessageDelayed(any(Message.class), anyLong());\n        assertPreferencesAreExpanded(preferenceGroupAdapter);\n    }\n']",EXPANDED;Delayed;Preference;Preferences;preference;as;Expanded;new;state;send,9.313225746154785e-10;9.022187441587448e-10;7.8580342233181e-10;7.712515071034431e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.970714092254639, -5.526227951049805, -4.654201984405518, -5.781449794769287, -5.437459468841553, -0.023769890889525414]",0.9765104055404663
2,"['    @Test\n    public void testPreferencesAreCreatedWithTheVisibilitySetInXml() {\n        final Context context = InstrumentationRegistry.getTargetContext();\n        final PreferenceManager manager = new PreferenceManager(context);\n        final PreferenceScreen screen = manager.inflateFromResource(context,\n                R.layout.test_visibility,\n                null);\n\n        // Preference without visibility set should be visible\n        assertTrue(screen.getPreference(0).isVisible());\n        // Preference with visibility set to true should be visible\n        assertTrue(screen.getPreference(1).isVisible());\n        // Preference with visibility set to false should not be invisible\n        assertFalse(screen.getPreference(2).isVisible());\n    }\n']",Preference;with;with;Preference;In;visible;visibility;From;Context;should,2.0372681319713593e-09;9.313225746154785e-10;9.313225746154785e-10;6.111804395914078e-10;5.675246939063072e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.929758071899414, -5.536591529846191, -4.662625789642334, -5.763649940490723, -5.394709587097168, -0.024006756022572517]",0.9762791395187378
2,"['    @Test\n    public void testNull() throws Exception {\n        assertTrue(""Compare all null"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n    }\n']",Null;Same;Comparison;are;Preference;Callback;The;Pref;all;Contents,2.7939677238464355e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.0477378964424133e-09;6.984919309616089e-10;4.656612873077393e-10;0.0;0.0;-3.4924596548080444e-10;-3.4924596548080444e-10,5,5,"[-5.9606099128723145, -5.616690635681152, -4.615220546722412, -5.816777229309082, -5.352656841278076, -0.024116147309541702]",0.9761723279953003
2,"['    @Test\n    public void testClassComparison() throws Exception {\n        final Preference checkboxPreference =\n                new CheckBoxPreference(InstrumentationRegistry.getTargetContext());\n        assertFalse(""Compare class"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, checkboxPreference));\n    }\n']",Comparison;Comparison;Compare;Pref;Preference;Instrumentation;Registry;Callback;final;Preference,3.725290298461914e-09;1.5133991837501526e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.953964710235596, -5.497692108154297, -4.6197638511657715, -5.8136444091796875, -5.43336820602417, -0.024192018434405327]",0.9760982394218445
2,"['    @Test\n    public void testDetached() throws Exception {\n        mPref1.onDetached();\n        mPref1.onAttached();\n        assertFalse(""Compare same, detached"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref1));\n    }\n']",Contents;Attached;Detached;Comparison;Pref;False;Detached;Pref;Pref;Preference,1.280568540096283e-09;8.731149137020111e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.952229022979736, -5.592165946960449, -4.626163959503174, -5.807042121887207, -5.373312473297119, -0.024051211774349213]",0.9762356877326965
2,"['    @Test\n    public void testTitleComparison() throws Exception {\n        mPref1.setTitle(""value 1"");\n\n        assertFalse(""Compare non-null to null"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n        assertFalse(""Compare null to non-null"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));\n\n        mPref2.setTitle(""value 1"");\n\n        assertTrue(""Compare identical"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n\n        mPref2.setTitle(""value 2"");\n\n        assertFalse(""Compare different"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n    }\n']",Title;Comparison;Exception;Comparison;Comparison;null;Contents;value;Compare;Callback,1.0477378964424133e-09;8.512870408594608e-10;5.966285243630409e-10;4.94765117764473e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.858526706695557, -5.599335670471191, -4.690671443939209, -5.673271179199219, -5.281649112701416, -0.024555925279855728]",0.9757431149482727
2,"['    @Test\n    public void testSummaryComparison() throws Exception {\n        mPref1.setSummary(""value 1"");\n\n        assertFalse(""Compare non-null to null"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n        assertFalse(""Compare null to non-null"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));\n\n        mPref2.setSummary(""value 1"");\n\n        assertTrue(""Compare identical"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n\n        mPref2.setSummary(""value 2"");\n\n        assertFalse(""Compare different"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n    }\n']",Comparison;Preference;set;Same;are;Pref;The;Same;False;value,8.003553375601768e-10;7.275957614183426e-10;6.402842700481415e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.8615922927856445, -5.600375175476074, -4.684781074523926, -5.679049015045166, -5.287873268127441, -0.024546153843402863]",0.9757527709007263
2,"['    @Test\n    public void testIconComparison() throws Exception {\n        final Drawable drawable1 = new ComparisonDrawable(1);\n        final Drawable drawable1a = new ComparisonDrawable(1);\n        final Drawable drawable2 = new ComparisonDrawable(2);\n\n        mPref1.setIcon(drawable1);\n\n        assertFalse(""Compare non-null to null"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n        assertFalse(""Compare null to non-null"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));\n\n        mPref2.setIcon(drawable1);\n\n        assertTrue(""Compare aliased"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n\n        mPref2.setIcon(drawable1a);\n\n        assertTrue(""Compare equal"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n\n        mPref2.setIcon(drawable2);\n\n        assertFalse(""Compare unequal"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n    }\n']",Icon;Pref;Drawable;Drawable;The;Compare;drawable;Icon;Icon;Drawable,7.566995918750763e-10;5.820766091346741e-10;4.0745362639427185e-10;3.92901711165905e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.858058929443359, -5.474289417266846, -4.670893669128418, -5.701984882354736, -5.390197277069092, -0.024614781141281128]",0.975685715675354
2,"['    @Test\n    public void testEnabledComparison() throws Exception {\n        mPref1.setEnabled(true);\n        mPref2.setEnabled(true);\n\n        assertTrue(""Compare enabled"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n\n        mPref2.setEnabled(false);\n\n        assertFalse(""Compare enabled/disabled"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n        assertFalse(""Compare disable/enabled"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));\n\n        mPref1.setEnabled(false);\n\n        assertTrue(""Compare disabled"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n    }\n']",Comparison;Enabled;Enabled;Enabled;Compare;The;enabled;Comparison;Compare;Pref,2.6775524020195007e-09;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;5.529727786779404e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.001776687800884e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.858944892883301, -5.558218955993652, -4.68305778503418, -5.685885429382324, -5.307534694671631, -0.02460850030183792]",0.9756917953491211
2,"['    @Test\n    public void testSelectableComparison() throws Exception {\n        mPref1.setSelectable(true);\n        mPref2.setSelectable(true);\n\n        assertTrue(""Compare selectable"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n\n        mPref2.setSelectable(false);\n\n        assertFalse(""Compare selectable/unselectable"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n        assertFalse(""Compare unselectable/selectable"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));\n\n        mPref1.setSelectable(false);\n\n        assertTrue(""Compare unselectable"",\n                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));\n    }\n']",Selectable;Selectable;Pref;Selectable;Callback;set;Same;Pref;Pref;Contents,9.604264050722122e-10;9.022187441587448e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.843501567840576, -5.531251907348633, -4.691981792449951, -5.680238246917725, -5.313131332397461, -0.024669095873832703]",0.9756326079368591
2,"['    @Test\n    public void testTwoStateComparison() throws Exception {\n        final TwoStatePreference checkbox1 =\n                new CheckBoxPreference(InstrumentationRegistry.getTargetContext());\n        final TwoStatePreference checkbox2 =\n                new CheckBoxPreference(InstrumentationRegistry.getTargetContext());\n\n        checkbox1.setChecked(true);\n        checkbox2.setChecked(true);\n\n        assertTrue(""Compare checked"",\n                mComparisonCallback.arePreferenceContentsTheSame(checkbox1, checkbox2));\n\n        checkbox2.setChecked(false);\n\n        assertFalse(""Compare checked/unchecked"",\n                mComparisonCallback.arePreferenceContentsTheSame(checkbox1, checkbox2));\n        assertFalse(""Compare unchecked/checked"",\n                mComparisonCallback.arePreferenceContentsTheSame(checkbox2, checkbox1));\n\n        checkbox1.setChecked(false);\n\n        assertTrue(""Compare unchecked"",\n                mComparisonCallback.arePreferenceContentsTheSame(checkbox1, checkbox2));\n    }\n']",Comparison;unchecked;Checked;Callback;Preference;True;Same;The;checkbox;checkbox,7.566995918750763e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.842090606689453, -5.452676296234131, -4.688102722167969, -5.675869464874268, -5.37443208694458, -0.0247569028288126]",0.9755470156669617
2,"['    @Test\n    public void testDropDownComparison() throws Exception {\n        final Preference dropdown1 =\n                new DropDownPreference(InstrumentationRegistry.getTargetContext());\n        final Preference dropdown2 =\n                new DropDownPreference(InstrumentationRegistry.getTargetContext());\n\n        assertTrue(""Compare aliased drop down pref"",\n                mComparisonCallback.arePreferenceContentsTheSame(dropdown1, dropdown1));\n        assertFalse(""Compare distinct drop down prefs"",\n                mComparisonCallback.arePreferenceContentsTheSame(dropdown1, dropdown2));\n    }\n']",Preference;Instrumentation;Compare;Preference;new;Same;pref;Callback;Drop;Target,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.022187441587448e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.888457298278809, -5.517270088195801, -4.65848970413208, -5.750155448913574, -5.363183498382568, -0.024433085694909096]",0.975862979888916
2,['    @Test\n    public void bindViewHolder_iconSpaceReserved_shouldReserveIconSpace() {\n        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);\n        mPreference.setIconSpaceReserved(true);\n        mPreference.onBindViewHolder(holder);\n\n        verify(mIconView).setVisibility(View.INVISIBLE);\n        verify(mImageFrame).setVisibility(View.INVISIBLE);\n    }\n'],Icon;Group;Reserved;Preference;should;Instance;older;Preference;For;Visibility,1.1641532182693481e-09;8.294591680169106e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.960883140563965, -5.562808036804199, -4.639284610748291, -5.8173651695251465, -5.394361972808838, -0.02388058975338936]",0.9764021635055542
2,['    @Test\n    public void bindViewHolder_iconSpaceNotReserved_shouldNotReserveIconSpace() {\n        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);\n        mPreference.setIconSpaceReserved(false);\n        mPreference.onBindViewHolder(holder);\n\n        verify(mIconView).setVisibility(View.GONE);\n        verify(mImageFrame).setVisibility(View.GONE);\n    }\n'],Reserved;Icon;ests;Space;Not;bind;Preference;Preference;View;set,9.022187441587448e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.965933799743652, -5.575893878936768, -4.639138698577881, -5.818491458892822, -5.392794609069824, -0.023821575567126274]",0.9764599204063416
2,['    @Test\n    public void bindViewHolder_hasIcon_shouldDisplayIcon() {\n        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);\n        mPreference.setIcon(new ColorDrawable(Color.BLACK));\n        mPreference.onBindViewHolder(holder);\n\n        verify(mIconView).setVisibility(View.VISIBLE);\n        verify(mImageFrame).setVisibility(View.VISIBLE);\n    }\n'],Drawable;older;Icon;older;set;View;Group;VISIBLE;on;older,1.0913936421275139e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.958785057067871, -5.559082508087158, -4.638018608093262, -5.815169811248779, -5.3947906494140625, -0.023918185383081436]",0.9763656854629517
2,['    @Test\n    public void testThatDataStoreIsNullByDefault() {\n        Preference preference = new Preference(mContext);\n        mScreen.addPreference(preference);\n\n        assertNull(preference.getPreferenceDataStore());\n        assertNotNull(preference.getSharedPreferences());\n\n        assertNull(mManager.getPreferenceDataStore());\n        assertNotNull(mManager.getSharedPreferences());\n    }\n'],Null;Preference;Preference;get;Context;Shared;Shared;preference;Store;By,7.275957614183426e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9116387367248535, -5.565502166748047, -4.652426242828369, -5.772379398345947, -5.3638129234313965, -0.024158738553524017]",0.9761307239532471
2,"['    @Test\n    public void testSetGetOnPreference() {\n        Preference preference = new Preference(mContext);\n\n        preference.setPreferenceDataStore(mDataStore);\n\n        assertEquals(mDataStore, preference.getPreferenceDataStore());\n    }\n']",Equals;Preference;new;On;Set;Data;Preference;set;Preference;Preference,1.3969838619232178e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.941838264465332, -5.593735694885254, -4.656574249267578, -5.769679069519043, -5.365211486816406, -0.02392854355275631]",0.9763554930686951
2,"['    @Test\n    public void testSetGetOnPreferenceManager() {\n        mManager.setPreferenceDataStore(mDataStore);\n\n        assertEquals(mDataStore, mManager.getPreferenceDataStore());\n        assertNull(mManager.getSharedPreferences());\n    }\n']",Store;Get;Data;On;Preference;Store;Store;get;Preference;Preference,1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.924254417419434, -5.6365966796875, -4.664011001586914, -5.763520240783691, -5.3018083572387695, -0.024077512323856354]",0.9762100577354431
2,"['    @Test\n    public void testSetOnPreferenceManagerGetOnPreference() {\n        Preference preference = new Preference(mContext);\n        mScreen.addPreference(preference);\n\n        mManager.setPreferenceDataStore(mDataStore);\n\n        assertEquals(mDataStore, preference.getPreferenceDataStore());\n        assertNull(preference.getSharedPreferences());\n    }\n']",preference;Shared;Preference;add;set;Store;Data;preference;Context;Set,5.820766091346741e-10;4.511093720793724e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.9585089683532715, -5.607550144195557, -4.648806095123291, -5.773139953613281, -5.37636137008667, -0.023843342438340187]",0.9764385223388672
2,"['    @Test\n    public void testDataStoresHierarchy() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        PreferenceDataStore secondaryDataStore = mock(PreferenceDataStore.class,\n                Mockito.CALLS_REAL_METHODS);\n        mManager.setPreferenceDataStore(secondaryDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.putString(TEST_STR);\n\n        // Check that the Preference returns the correct data store.\n        assertEquals(mDataStore, mPreference.getPreferenceDataStore());\n\n        // Check that the secondary data store assigned to the manager was NOT used.\n        verifyZeroInteractions(secondaryDataStore);\n\n        // Check that the primary data store assigned directly to the preference was used.\n        verify(mDataStore, atLeastOnce()).putString(eq(KEY), anyString());\n    }\n']",mock;Mockito;eq;Preference;NOT;ierarchy;correct;that;used;ALLS,1.0186340659856796e-09;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.912181377410889, -5.504891395568848, -4.687214374542236, -5.727061748504639, -5.401188373565674, -0.024039924144744873]",0.97624671459198
2,"['    @Test\n    public void testInitialValueIsFromDataStoreOnPreference() {\n        when(mDataStore.getBoolean(anyString(), anyBoolean())).thenReturn(true);\n\n        CheckBoxPreference pref = new CheckBoxPreference(mContext);\n        pref.setKey(""CheckboxTestPref"");\n        pref.setPreferenceDataStore(mDataStore);\n\n        mScreen.addPreference(pref);\n\n        assertTrue(pref.isChecked());\n    }\n']",Preference;Return;Preference;Preference;Preference;Checked;Value;Data;Data;add,8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.966274261474609, -5.578929901123047, -4.648119926452637, -5.782617568969727, -5.402125358581543, -0.02378828264772892]",0.9764924049377441
2,"['    @Test\n    public void testInitialValueIsFromDataStoreOnPreferenceManager() {\n        when(mDataStore.getBoolean(anyString(), anyBoolean())).thenReturn(true);\n\n        mManager.setPreferenceDataStore(mDataStore);\n        CheckBoxPreference pref = new CheckBoxPreference(mContext);\n        pref.setKey(""CheckboxTestPref"");\n\n        mScreen.addPreference(pref);\n\n        assertTrue(pref.isChecked());\n    }\n']",Preference;Boolean;Store;Data;Checkbox;Initial;get;pref;Store;Data,9.313225746154785e-10;7.8580342233181e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.959366798400879, -5.571348190307617, -4.6497483253479, -5.778292179107666, -5.40222692489624, -0.023833099752664566]",0.9764485359191895
2,['    @Test\n    public void testPutStringWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putStringTestCommon();\n    }\n'],Store;Data;put;Data;Pref;Preference;add;Store;Preference;On,1.6298145055770874e-09;7.275957614183426e-10;6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10,5,5,"[-6.0221357345581055, -5.589749813079834, -4.580402374267578, -5.876941680908203, -5.417298793792725, -0.023937972262501717]",0.9763462543487549
2,['    @Test\n    public void testPutStringWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putStringTestCommon();\n    }\n'],Put;Preference;Preference;Screen;Store;Store;gr;Preference;Common;Data,6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-6.025121688842773, -5.5909647941589355, -4.581809043884277, -5.870234489440918, -5.423644065856934, -0.023901773616671562]",0.9763817191123962
2,"['    @Test\n    public void testGetStringWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getString(TEST_STR);\n\n        verify(mDataStore, atLeastOnce()).getString(eq(KEY), eq(TEST_STR));\n    }\n']",eq;Data;Store;Get;Data;Store;Preference;Once;Preference;Preference,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.693881005048752e-10;5.238689482212067e-10;5.093170329928398e-10;4.802132025361061e-10,5,5,"[-5.942124843597412, -5.57784366607666, -4.667578220367432, -5.748551368713379, -5.364507675170898, -0.023953916504979134]",0.9763306975364685
2,"['    @Test\n    public void testGetStringWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getString(TEST_STR);\n\n        verify(mDataStore, atLeastOnce()).getString(eq(KEY), eq(TEST_STR));\n    }\n']",gr;Screen;On;eq;add;Store;Store;Once;Get;STR,1.6298145055770874e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.93225622177124, -5.581267833709717, -4.675454139709473, -5.73604679107666, -5.352840900421143, -0.023989297449588776]",0.9762962460517883
2,"['    @Test\n    public void testDefaultStringValue() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mPreference.setDefaultValue(TEST_DEFAULT_STR);\n        mSharedPref.edit().putString(KEY, TEST_WRONG_STR).commit();\n        mScreen.addPreference(mPreference);\n        mSharedPref.edit().remove(KEY).commit();\n        assertEquals(TEST_DEFAULT_STR, mPreference.getDefaultValue());\n    }\n']",TEST;DEFAULT;Preference;Default;Equals;Preference;Data;add;DEFAULT;STR,1.0477378964424133e-09;9.74978320300579e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.964632987976074, -5.6378912925720215, -4.654628753662109, -5.782173156738281, -5.361430644989014, -0.023700742051005363]",0.9765780568122864
2,['    @Test\n    public void testPutStringSetWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putStringSetTestCommon();\n    }\n'],Store;add;Screen;Data;Set;Preference;Data;Preference;Preference;Put,1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1350493878126144e-09;9.313225746154785e-10;3.2014213502407074e-10;5.820766091346741e-11;0.0;0.0,5,5,"[-6.0097432136535645, -5.586459159851074, -4.589572429656982, -5.871208667755127, -5.407351970672607, -0.02394763194024563]",0.9763368368148804
2,['    @Test\n    public void testPutStringSetWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putStringSetTestCommon();\n    }\n'],Set;put;Store;Data;On;Set;Preference;Common;gr;Preference,1.2223608791828156e-09;1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-6.011134147644043, -5.58881139755249, -4.593936443328857, -5.862180233001709, -5.409439563751221, -0.02390643022954464]",0.9763770699501038
2,"['    @Test\n    public void testGetStringSetWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        Set<String> testSet = new HashSet<>();\n\n        mPreference.getStringSet(testSet);\n\n        verify(mDataStore, atLeastOnce()).getStringSet(eq(KEY), eq(testSet));\n    }\n']",Preference;Data;Get;Store;Least;Set;On;add;Preference;set,1.7462298274040222e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.4551915228366852e-10,5,5,"[-5.946611404418945, -5.59986686706543, -4.667496681213379, -5.742875099182129, -5.366022109985352, -0.023869648575782776]",0.9764129519462585
2,"['    @Test\n    public void testGetStringSetWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        Set<String> testSet = new HashSet<>();\n\n        mPreference.getStringSet(testSet);\n\n        verify(mDataStore, atLeastOnce()).getStringSet(eq(KEY), eq(testSet));\n    }\n']",Data;On;KEY;Store;Store;Preference;eq;eq;Manager;Preference,1.1641532182693481e-09;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.939907073974609, -5.599781513214111, -4.673072338104248, -5.735160827636719, -5.3585052490234375, -0.023896070197224617]",0.9763872027397156
2,['    @Test\n    public void testPutIntWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putIntTestCommon();\n    }\n'],Preference;Put;Screen;Preference;put;Common;Store;Int;set;add,3.259629011154175e-09;2.0954757928848267e-09;1.3387762010097504e-09;1.3096723705530167e-09;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-6.015460968017578, -5.5721025466918945, -4.578895568847656, -5.881444931030273, -5.425646781921387, -0.023987900465726852]",0.9762976169586182
2,['    @Test\n    public void testPutIntWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putIntTestCommon();\n    }\n'],add;Store;Data;Preference;Preference;Store;gr;Manager;set;Common,7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-6.0175604820251465, -5.577782154083252, -4.581569194793701, -5.874405384063721, -5.426827430725098, -0.023947281762957573]",0.976337194442749
2,"['    @Test\n    public void testGetIntWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getInt(1);\n\n        verify(mDataStore, atLeastOnce()).getInt(eq(KEY), eq(1));\n    }\n']",Data;Store;Store;eq;On;Least;set;Preference;Int;get,1.280568540096283e-09;1.1641532182693481e-09;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9423933029174805, -5.584250450134277, -4.666949272155762, -5.749691486358643, -5.3625640869140625, -0.023940065875649452]",0.976344108581543
2,"['    @Test\n    public void testGetIntWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getInt(1);\n\n        verify(mDataStore, atLeastOnce()).getInt(eq(KEY), eq(1));\n    }\n']",Preference;Preference;On;Store;Data;Int;Data;Data;eq;get,1.775333657860756e-09;1.6880221664905548e-09;8.149072527885437e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.932549476623535, -5.588038444519043, -4.674704074859619, -5.735891342163086, -5.350499153137207, -0.023981383070349693]",0.9763038754463196
2,['    @Test\n    public void testPutLongWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putLongTestCommon();\n    }\n'],Long;Preference;Preference;Preference;Long;Data;add;Pref;Screen;Store,2.0954757928848267e-09;1.6298145055770874e-09;1.3387762010097504e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-6.01027774810791, -5.558377742767334, -4.578599452972412, -5.883419990539551, -5.425011157989502, -0.024055052548646927]",0.9762320518493652
2,['    @Test\n    public void testPutLongWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putLongTestCommon();\n    }\n'],gr;Preference;Long;Store;set;Store;Long;Screen;Store;Data,9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-6.018136978149414, -5.564714431762695, -4.57735013961792, -5.877455711364746, -5.430375099182129, -0.02401641570031643]",0.9762696623802185
2,"['    @Test\n    public void testGetLongWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getLong(1L);\n\n        verify(mDataStore, atLeastOnce()).getLong(eq(KEY), eq(1L));\n    }\n']",verify;Preference;On;KEY;add;at;get;Screen;set;Least,1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.945222854614258, -5.576239109039307, -4.662296295166016, -5.757847309112549, -5.371853828430176, -0.023937389254570007]",0.9763467311859131
2,"['    @Test\n    public void testGetLongWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getLong(1L);\n\n        verify(mDataStore, atLeastOnce()).getLong(eq(KEY), eq(1L));\n    }\n']",Preference;Once;Manager;Long;Preference;Store;Preference;gr;On;add,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.9344353675842285, -5.580723762512207, -4.6704912185668945, -5.742558479309082, -5.355936050415039, -0.023996513336896896]",0.9762892127037048
2,['    @Test\n    public void testPutFloatWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putFloatTestCommon();\n    }\n'],Pref;Preference;put;Preference;Store;set;Data;Float;Store;Screen,1.862645149230957e-09;1.57160684466362e-09;8.731149137020111e-10;5.820766091346741e-10;4.0745362639427185e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-6.014075756072998, -5.563777446746826, -4.576009273529053, -5.886363506317139, -5.430845737457275, -0.024016881361603737]",0.9762692451477051
2,['    @Test\n    public void testPutFloatWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putFloatTestCommon();\n    }\n'],Float;Data;Float;Store;On;put;Screen;Store;Preference;Data,2.3865140974521637e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-6.014366149902344, -5.566899299621582, -4.578032970428467, -5.879695892333984, -5.430978298187256, -0.02400093711912632]",0.9762848019599915
2,"['    @Test\n    public void testGetFloatWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getFloat(1f);\n\n        verify(mDataStore, atLeastOnce()).getFloat(eq(KEY), eq(1f));\n    }\n']",Preference;Preference;Get;Data;On;Float;Preference;eq;KEY;Float,2.0954757928848267e-09;1.2514647096395493e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;5.384208634495735e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.95017671585083, -5.593324184417725, -4.662248611450195, -5.753172874450684, -5.371020317077637, -0.023878145962953568]",0.9764046669006348
2,"['    @Test\n    public void testGetFloatWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getFloat(1f);\n\n        verify(mDataStore, atLeastOnce()).getFloat(eq(KEY), eq(1f));\n    }\n']",Preference;eq;gr;Data;set;Preference;Float;Preference;eq;Screen,1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;8.585629984736443e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.938457012176514, -5.593665599822998, -4.6700968742370605, -5.738770008087158, -5.357931137084961, -0.023942511528730392]",0.9763418436050415
2,['    @Test\n    public void testPutBooleanWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putBooleanTestCommon();\n    }\n'],Preference;Preference;Put;Boolean;Pref;Screen;put;set;Data;Store,2.561137080192566e-09;1.979060471057892e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-6.005761623382568, -5.566501617431641, -4.588566780090332, -5.873493671417236, -5.421388626098633, -0.023974865674972534]",0.9763102531433105
2,['    @Test\n    public void testPutBooleanWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n        putBooleanTestCommon();\n    }\n'],Preference;Data;On;Put;Store;Preference;Data;Boolean;gr;put,1.7462298274040222e-09;1.3387762010097504e-09;1.1641532182693481e-09;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-1.4551915228366852e-10,5,5,"[-6.006227016448975, -5.572598457336426, -4.593262195587158, -5.866797924041748, -5.420979976654053, -0.023922374472022057]",0.9763615131378174
2,"['    @Test\n    public void testGetBooleanWithDataStoreOnPref() {\n        mPreference.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getBoolean(true);\n\n        verify(mDataStore, atLeastOnce()).getBoolean(eq(KEY), eq(true));\n    }\n']",Preference;Data;Store;Store;Get;at;On;Preference;Screen;true,1.0186340659856796e-09;9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-5.944653034210205, -5.590237140655518, -4.664664268493652, -5.754245758056641, -5.361254692077637, -0.023924702778458595]",0.9763593077659607
2,"['    @Test\n    public void testGetBooleanWithDataStoreOnMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n        mScreen.addPreference(mPreference);\n\n        mPreference.getBoolean(true);\n\n        verify(mDataStore, atLeastOnce()).getBoolean(eq(KEY), eq(true));\n    }\n']",Screen;Store;verify;Store;set;Once;Data;Boolean;Store;Boolean,1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.931451797485352, -5.591239929199219, -4.673162460327148, -5.739634037017822, -5.345891952514648, -0.023997096344828606]",0.9762886762619019
2,['    @Test\n    public void testSharedPrefNotNullIfNoDS() {\n        mScreen.addPreference(mPreference);\n\n        assertNotNull(mPreference.getSharedPreferences());\n    }\n'],DS;Preferences;Pref;Preference;Preference;Null;add;Not;No;get,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.962450981140137, -5.587681293487549, -4.617660045623779, -5.837909698486328, -5.388366222381592, -0.023962296545505524]",0.9763225317001343
2,['    @Test\n    public void testSharedPrefNotNullIfNoDSMgr() {\n        assertNotNull(mManager.getSharedPreferences());\n    }\n'],Preferences;Shared;Not;Null;Not;get;DS;gr;Null;Manager,5.005858838558197e-09;2.735760062932968e-09;9.313225746154785e-10;8.149072527885437e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.0745362639427185e-10;-5.238689482212067e-10;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-5.973221302032471, -5.621110916137695, -4.5927734375, -5.863283634185791, -5.35150146484375, -0.024163974449038506]",0.9761256575584412
2,['    @Test\n    public void testSharedPrefNullIfWithDS() {\n        mScreen.addPreference(mPreference);\n\n        mPreference.setPreferenceDataStore(mDataStore);\n\n        assertNull(mPreference.getSharedPreferences());\n    }\n'],Store;Data;Store;Screen;Preference;Null;Preferences;Preference;Shared;Preference,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;8.731149137020111e-11,5,5,"[-5.966625213623047, -5.586325645446777, -4.631621837615967, -5.8120527267456055, -5.396071434020996, -0.02385859005153179]",0.9764237999916077
2,['    @Test\n    public void testSharedPrefNullIfWithDSMgr() {\n        mManager.setPreferenceDataStore(mDataStore);\n\n        assertNull(mManager.getSharedPreferences());\n    }\n'],Pref;Shared;Manager;Store;DS;Manager;gr;Shared;Null;Store,2.3283064365386963e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.953927993774414, -5.596726894378662, -4.637863636016846, -5.812627792358398, -5.357642650604248, -0.023970676586031914]",0.9763144254684448
2,"['    @Test\n    public void expandablePreference_inPreferenceScreen_collapsesCorrectly() {\n\n        mScreen.setKey(""screen"");\n        mScreen.setInitialExpandedChildrenCount(1);\n\n        mScreen.addPreference(mPreference1);\n        mScreen.addPreference(mPreference2);\n        mScreen.addPreference(mPreference3);\n\n        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n\n        assertEquals(2, preferenceGroupAdapter.getItemCount());\n\n        assertEquals(mPreference1, preferenceGroupAdapter.getItem(0));\n        assertEquals(""Advanced"", preferenceGroupAdapter.getItem(1).getTitle());\n        assertEquals(""Preference 2, Preference 3"", preferenceGroupAdapter.getItem(1).getSummary());\n    }\n']",collapses;Expanded;screen;Equals;Item;add;Group;Screen;get;Preference,9.89530235528946e-10;7.8580342233181e-10;6.984919309616089e-10;5.602487362921238e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.85796594619751, -5.532796382904053, -4.692868709564209, -5.674991607666016, -5.329328536987305, -0.024549296125769615]",0.9757496118545532
2,"['    @Test\n    public void expandablePreference_inCategory_collapsesCorrectly() {\n        PreferenceCategory category = new PreferenceCategory(mContext);\n\n        mScreen.addPreference(category);\n\n        category.setKey(""category"");\n        category.setInitialExpandedChildrenCount(1);\n\n        category.addPreference(mPreference1);\n        category.addPreference(mPreference2);\n        category.addPreference(mPreference3);\n\n        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n\n        assertEquals(3, preferenceGroupAdapter.getItemCount());\n\n        assertEquals(category, preferenceGroupAdapter.getItem(0));\n        assertEquals(mPreference1, preferenceGroupAdapter.getItem(1));\n        assertEquals(""Advanced"", preferenceGroupAdapter.getItem(2).getTitle());\n        assertEquals(""Preference 2, Preference 3"", preferenceGroupAdapter.getItem(2).getSummary());\n    }\n']",Screen;expandable;Adapter;Group;Preference;Equals;Preference;Adapter;Equals;category,9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;6.111804395914078e-10;4.474713932722807e-10;4.147295840084553e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.865890026092529, -5.511694431304932, -4.684939861297607, -5.683119773864746, -5.351900577545166, -0.024547899141907692]",0.9757508635520935
2,"['    @Test\n    public void expandablePreference_inNestedCategory_collapsesCorrectly() {\n        PreferenceCategory category = new PreferenceCategory(mContext);\n        PreferenceCategory nestedCategory = new PreferenceCategory(mContext);\n\n        mScreen.addPreference(category);\n        category.addPreference(nestedCategory);\n\n        nestedCategory.setKey(""nested_category"");\n        nestedCategory.setInitialExpandedChildrenCount(1);\n\n        nestedCategory.addPreference(mPreference1);\n        nestedCategory.addPreference(mPreference2);\n        nestedCategory.addPreference(mPreference3);\n\n        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n\n        assertEquals(4, preferenceGroupAdapter.getItemCount());\n\n        assertEquals(category, preferenceGroupAdapter.getItem(0));\n        assertEquals(nestedCategory, preferenceGroupAdapter.getItem(1));\n        assertEquals(mPreference1, preferenceGroupAdapter.getItem(2));\n        assertEquals(""Advanced"", preferenceGroupAdapter.getItem(3).getTitle());\n        assertEquals(""Preference 2, Preference 3"", preferenceGroupAdapter.getItem(3).getSummary());\n    }\n']",expandable;collapses;Children;Title;Preference;Preference;category;Equals;Preference;Screen,1.3969838619232178e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.865723609924316, -5.496589183807373, -4.673360824584961, -5.685745716094971, -5.366308212280273, -0.02464304305613041]",0.975658118724823
2,"['    @Test\n    public void expandablePreference_inCategoryContainingAnotherCategory_collapsesCorrectly() {\n        PreferenceCategory category = new PreferenceCategory(mContext);\n        PreferenceCategory nestedCategory = new PreferenceCategory(mContext);\n\n        mScreen.addPreference(category);\n\n        category.setKey(""nested_category"");\n        category.setInitialExpandedChildrenCount(1);\n\n        category.addPreference(mPreference1);\n        category.addPreference(nestedCategory);\n        nestedCategory.addPreference(mPreference2);\n        nestedCategory.addPreference(mPreference3);\n\n        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n\n        assertEquals(3, preferenceGroupAdapter.getItemCount());\n\n        assertEquals(category, preferenceGroupAdapter.getItem(0));\n        assertEquals(mPreference1, preferenceGroupAdapter.getItem(1));\n        assertEquals(""Advanced"", preferenceGroupAdapter.getItem(2).getTitle());\n        assertEquals(""Preference 2, Preference 3"", preferenceGroupAdapter.getItem(2).getSummary());\n\n        // If the nested category has a title, display that in the summary instead of the children\n        final String title = ""Category"";\n        nestedCategory.setTitle(title);\n\n        preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);\n\n        assertEquals(3, preferenceGroupAdapter.getItemCount());\n\n        assertEquals(category, preferenceGroupAdapter.getItem(0));\n        assertEquals(mPreference1, preferenceGroupAdapter.getItem(1));\n        assertEquals(""Advanced"", preferenceGroupAdapter.getItem(2).getTitle());\n        assertEquals(title, preferenceGroupAdapter.getItem(2).getSummary());\n    }\n']",instead;Preference;add;of;Containing;Preference;Title;nested;Correctly;Advanced,5.820766091346741e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.346940502524376e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.836374282836914, -5.438717365264893, -4.686275005340576, -5.651220321655273, -5.375768184661865, -0.024934235960245132]",0.9753739237785339
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void nestedExpandablePreferences_notAllowed_shouldThrowAnException() {\n        PreferenceCategory category = new PreferenceCategory(mContext);\n        PreferenceCategory nestedCategory = new PreferenceCategory(mContext);\n\n        mScreen.addPreference(category);\n        category.addPreference(nestedCategory);\n\n        category.setKey(""category"");\n        category.setInitialExpandedChildrenCount(1);\n\n        nestedCategory.setKey(""nested_category"");\n        nestedCategory.setInitialExpandedChildrenCount(1);\n\n        // Trying to nest expandable preferences should throw an exception\n        new PreferenceGroupAdapter(mScreen);\n    }\n']",Preference;ested;Illegal;Preference;Expanded;Preferences;Key;Category;Category;Throw,7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;4.874891601502895e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-5.908789157867432, -5.513171195983887, -4.668290138244629, -5.742152214050293, -5.392780303955078, -0.024184338748455048]",0.9761057496070862
2,"['    @Test\n    public void string_retrieveWhenEmpty_returnsDefault() {\n        final String expected = ""Default"";\n\n        String result = mPreference.getString(expected);\n\n        assertEquals(expected, result);\n    }\n']",Default;Empty;Equals;retrieve;result;final;expected;return;result;expected,1.280568540096283e-09;6.984919309616089e-10;6.111804395914078e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;5.820766091346741e-11;1.4551915228366852e-11;-5.820766091346741e-11,5,5,"[-5.960642337799072, -5.612238883972168, -4.643627166748047, -5.786580562591553, -5.367080211639404, -0.02387279085814953]",0.976409912109375
2,"['    @Test\n    public void string_persist_getsStoredToSharedPrefs() {\n        final String expected = ""Test"";\n\n        boolean wasPersisted = mPreference.putString(expected);\n\n        assertTrue(wasPersisted);\n        assertEquals(expected, mSharedPref.getString(KEY, null));\n    }\n']",expected;gets;expected;Persisted;final;was;null;True;Preference;Equals,8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-11;-2.9103830456733704e-11;-5.820766091346741e-11;-1.5279510989785194e-10,5,5,"[-5.940359115600586, -5.580100059509277, -4.652137279510498, -5.779445171356201, -5.378802299499512, -0.02393226884305477]",0.9763517379760742
2,"['    @Test\n    public void string_persistWhileDisabled_notPersisted() {\n        mPreference.setPersistent(false);\n\n        boolean wasPersisted = mPreference.putString(""Test"");\n\n        assertFalse(wasPersisted);\n        assertNull(mSharedPref.getString(KEY, null));\n    }\n']",While;Disabled;Persisted;was;KEY;put;boolean;False;Preference;get,1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.511093720793724e-10;4.0745362639427185e-10,5,5,"[-5.952084541320801, -5.634632110595703, -4.647870063781738, -5.776247978210449, -5.352776050567627, -0.023872442543506622]",0.9764102697372437
2,"['    @Test\n    public void string_persistAndRetrieve_returnsPersistedValue() {\n        final String expected = ""Test"";\n\n        mPreference.putString(expected);\n        String result = mPreference.getString(""Default"");\n\n        assertEquals(expected, result);\n    }\n']",put;Default;Preference;persist;expected;Equals;expected;result;Preference;expected,1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.9537153244018555, -5.57460355758667, -4.656601905822754, -5.775150775909424, -5.386346817016602, -0.02385242097079754]",0.97642982006073
2,"['    @Test\n    public void string_persistTwiceAndRetrieve_returnsSecondValue() {\n        final String expected = ""Second"";\n\n        mPreference.putString(""First"");\n        mPreference.putString(expected);\n        String result = mPreference.getString(""Default"");\n\n        assertEquals(expected, result);\n    }\n']",Twice;persist;Preference;Second;expected;put;expected;Equals;Value;Preference,3.4924596548080444e-09;2.3283064365386963e-09;1.862645149230957e-09;1.862645149230957e-09;1.5133991837501526e-09;9.313225746154785e-10;6.984919309616089e-10;4.3655745685100555e-10;3.4924596548080444e-10;1.7462298274040222e-10,5,5,"[-5.95648193359375, -5.582259178161621, -4.638609409332275, -5.769696235656738, -5.389561176300049, -0.02399441972374916]",0.9762911796569824
2,"['    @Test\n    public void stringSet_retrieveWhenEmpty_returnsDefault() {\n        final Set<String> expected = TEST_DEFAULT_STR_SET;\n\n        Set<String> result = mPreference.getStringSet(expected);\n\n        assertThat(result, containsInAnyOrder(expected.toArray()));\n    }\n']",When;contains;expected;TEST;retrieve;get;result;Any;In;Set,1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;5.820766091346741e-11,5,5,"[-5.937264442443848, -5.592127799987793, -4.656094551086426, -5.757096290588379, -5.368522644042969, -0.02397638000547886]",0.9763088822364807
2,"['    @Test\n    public void stringSet_persist_getsStoredToSharedPrefs() {\n        boolean wasPersisted = mPreference.putStringSet(TEST_DEFAULT_STR_SET);\n\n        assertTrue(wasPersisted);\n        assertThat(mSharedPref.getStringSet(KEY, null),\n                containsInAnyOrder(TEST_DEFAULT_STR_SET.toArray()));\n    }\n']",Order;Any;STR;Shared;was;In;SET;Pref;True;Set,2.444721758365631e-09;1.3969838619232178e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9127349853515625, -5.573566436767578, -4.657624244689941, -5.759801864624023, -5.35830020904541, -0.02414035238325596]",0.9761487245559692
2,"['    @Test\n    public void stringSet_persistWhileDisabled_notPersisted() {\n        mPreference.setPersistent(false);\n\n        boolean wasPersisted = mPreference.putStringSet(TEST_STR_SET);\n\n        assertFalse(wasPersisted);\n        assertNull(mSharedPref.getString(KEY, null));\n    }\n']",Preference;Pref;boolean;While;Shared;was;Persisted;null;false;set,1.949956640601158e-09;1.4551915228366852e-09;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.933645725250244, -5.625747203826904, -4.6628241539001465, -5.7597761154174805, -5.336841106414795, -0.023939600214362144]",0.9763447046279907
2,"['    @Test\n    public void stringSet_persistAndRetrieve_returnsPersistedValue() {\n        final Set<String> expected = TEST_STR_SET;\n\n        mPreference.putStringSet(expected);\n        Set<String> result = mPreference.getStringSet(TEST_DEFAULT_STR_SET);\n\n        assertThat(result, containsInAnyOrder(expected.toArray()));\n    }\n']",Preference;Set;DEFAULT;expected;That;Set;SET;Preference;Retrieve;final,2.270098775625229e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.928582668304443, -5.558383941650391, -4.660889148712158, -5.755721092224121, -5.382872104644775, -0.024020720273256302]",0.9762654900550842
2,"['    @Test\n    public void stringSet_persistTwiceAndRetrieve_returnsSecondValue() {\n        final Set<String> expected = TEST_STR_SET2;\n\n        mPreference.putStringSet(TEST_STR_SET);\n        mPreference.putStringSet(expected);\n        Set<String> result = mPreference.getStringSet(TEST_DEFAULT_STR_SET);\n\n        assertThat(result, containsInAnyOrder(expected.toArray()));\n    }\n']",Twice;Order;Preference;TEST;put;Any;STR;SET;SET;Set,1.862645149230957e-09;1.6880221664905548e-09;1.2514647096395493e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.909770488739014, -5.5370402336120605, -4.658502101898193, -5.740752220153809, -5.387845516204834, -0.02420632913708687]",0.9760841727256775
2,"['    @Test\n    public void int_retrieveWhenEmpty_returnsDefault() {\n        final int expected = 1;\n        int result = mPreference.getInt(expected);\n\n        assertEquals(expected, result);\n    }\n']",When;final;Equals;get;Empty;return;Preference;expected;result;Int,9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;-5.820766091346741e-11;-2.3283064365386963e-10,5,5,"[-5.994224548339844, -5.600028991699219, -4.610183238983154, -5.834219455718994, -5.408318519592285, -0.02382727898657322]",0.9764542579650879
2,"['    @Test\n    public void int_persist_getsStoredToSharedPrefs() {\n        final int expected = 1;\n\n        boolean wasPersisted = mPreference.putInt(expected);\n\n        assertTrue(wasPersisted);\n        assertEquals(expected, mSharedPref.getInt(KEY, -1));\n    }\n']",Shared;Preference;Persisted;Persisted;Equals;Int;persist;Stored;final;Pref,1.57160684466362e-09;1.280568540096283e-09;9.74978320300579e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.944713592529297, -5.59386682510376, -4.651901721954346, -5.775179862976074, -5.379947662353516, -0.023878145962953568]",0.9764045476913452
2,"['    @Test\n    public void int_persistWhileDisabled_notPersisted() {\n        mPreference.setPersistent(false);\n\n        boolean wasPersisted = mPreference.putInt(1);\n\n        assertFalse(wasPersisted);\n        assertEquals(-1, mSharedPref.getLong(KEY, -1));\n    }\n']",Disabled;Long;Persisted;persist;false;Persistent;Equals;was;boolean;While,2.3283064365386963e-09;1.5133991837501526e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.936666965484619, -5.61320686340332, -4.656063556671143, -5.764660835266113, -5.351294040679932, -0.023957058787345886]",0.9763275384902954
2,"['    @Test\n    public void int_persistAndRetrieve_returnsPersistedValue() {\n        final int expected = 1;\n\n        mPreference.putInt(expected);\n        int result = mPreference.getInt(-1);\n\n        assertEquals(expected, result);\n    }\n']",persist;put;Int;final;Int;result;Equals;Preference;Value;expected,4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.971436500549316, -5.5700297355651855, -4.637523174285889, -5.79932975769043, -5.41390323638916, -0.02380749024450779]",0.9764735698699951
2,"['    @Test\n    public void int_persistTwiceAndRetrieve_returnsSecondValue() {\n        final int expected = 2;\n\n        mPreference.putInt(1);\n        mPreference.putInt(expected);\n        int result = mPreference.getInt(-1);\n\n        assertEquals(expected, result);\n    }\n']",Retrieve;Twice;Second;Value;return;expected;Equals;Int;Preference;result,3.2014213502407074e-09;2.3283064365386963e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.963695526123047, -5.568697452545166, -4.632194995880127, -5.784317493438721, -5.413173198699951, -0.02393634244799614]",0.9763478636741638
2,"['    @Test\n    public void long_retrieveWhenEmpty_returnsDefault() {\n        assertEquals(1, mPreference.getLong(1));\n    }\n']",Preference;long;retrieve;get;return;When;Equals;Long;Empty;Default,1.979060471057892e-09;1.1641532182693481e-09;9.313225746154785e-10;3.4924596548080444e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-5.238689482212067e-10;-9.313225746154785e-10;-3.026798367500305e-09;-3.259629011154175e-09,5,5,"[-5.9799885749816895, -5.642937660217285, -4.602252960205078, -5.833340167999268, -5.348817825317383, -0.024069948121905327]",0.9762174487113953
2,"['    @Test\n    public void long_persist_getsStoredToSharedPrefs() {\n        final long expected = 1;\n\n        boolean wasPersisted = mPreference.putLong(expected);\n\n        assertTrue(wasPersisted);\n        assertEquals(expected, mSharedPref.getLong(KEY, -1));\n    }\n']",Pref;Shared;long;Shared;Long;True;persist;expected;was;Preference,2.3283064365386963e-09;1.6880221664905548e-09;1.1059455573558807e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.945260524749756, -5.581930160522461, -4.647549152374268, -5.786745071411133, -5.387284755706787, -0.023894092068076134]",0.9763891100883484
2,"['    @Test\n    public void long_persistWhileDisabled_notPersisted() {\n        mPreference.setPersistent(false);\n\n        boolean wasPersisted = mPreference.putLong(1);\n\n        assertFalse(wasPersisted);\n        assertEquals(-1, mSharedPref.getLong(KEY, -1));\n    }\n']",KEY;Persistent;Long;Equals;Persisted;Disabled;Persisted;false;boolean;was,2.3283064365386963e-09;1.0477378964424133e-09;5.820766091346741e-10;3.2014213502407074e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0;-1.3096723705530167e-10;-2.3283064365386963e-10,5,5,"[-5.938675403594971, -5.6070170402526855, -4.653598785400391, -5.771787643432617, -5.359534740447998, -0.02393634244799614]",0.9763479828834534
2,"['    @Test\n    public void long_persistAndRetrieve_returnsPersistedValue() {\n        final long expected = 1;\n\n        mPreference.putLong(expected);\n        long result = mPreference.getLong(-1);\n\n        assertEquals(expected, result);\n    }\n']",Long;Value;expected;Retrieve;get;result;Equals;long;long;result,4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-7.275957614183426e-11;-1.1641532182693481e-10,5,5,"[-5.968171119689941, -5.555158615112305, -4.6318206787109375, -5.811001777648926, -5.421225547790527, -0.023861967027187347]",0.9764204621315002
2,"['    @Test\n    public void long_persistTwiceAndRetrieve_returnsSecondValue() {\n        final long expected = 2;\n\n        mPreference.putLong(1);\n        mPreference.putLong(expected);\n        long result = mPreference.getLong(-1);\n\n        assertEquals(expected, result);\n    }\n']",Twice;persist;return;Second;Long;final;get;result;Value;long,2.7939677238464355e-09;2.561137080192566e-09;2.0954757928848267e-09;1.280568540096283e-09;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.963771820068359, -5.554417610168457, -4.625957489013672, -5.796914100646973, -5.424489974975586, -0.0239638090133667]",0.9763209223747253
2,"['    @Test\n    public void float_retrieveWhenEmpty_returnsDefault() {\n        assertEquals(1, mPreference.getFloat(1), FLOAT_PRECISION);\n    }\n']",Preference;RECISION;AT;Default;retrieve;FL;get;When;Float;Empty,2.7939677238464355e-09;2.7939677238464355e-09;1.5133991837501526e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;2.0372681319713593e-10;0.0;-2.3283064365386963e-10;-6.984919309616089e-10,5,5,"[-5.992661476135254, -5.637018203735352, -4.597840785980225, -5.843862056732178, -5.389734745025635, -0.02387768030166626]",0.976405143737793
2,"['    @Test\n    public void float_persist_getsStoredToSharedPrefs() {\n        final float expected = 1;\n\n        boolean wasPersisted = mPreference.putFloat(expected);\n\n        assertTrue(wasPersisted);\n        assertEquals(expected, mSharedPref.getFloat(KEY, -1), FLOAT_PRECISION);\n    }\n']",persist;expected;Persisted;Float;Persisted;expected;get;AT;FL;boolean,1.1932570487260818e-09;9.313225746154785e-10;7.275957614183426e-10;5.820766091346741e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.7462298274040222e-10;8.731149137020111e-11;5.820766091346741e-11;0.0,5,5,"[-5.9484429359436035, -5.594862461090088, -4.645741939544678, -5.7801408767700195, -5.39629602432251, -0.02383263409137726]",0.9764491319656372
2,"['    @Test\n    public void float_persistWhileDisabled_notPersisted() {\n        mPreference.setPersistent(false);\n\n        boolean wasPersisted = mPreference.putFloat(1);\n\n        assertFalse(wasPersisted);\n        assertEquals(-1, mSharedPref.getFloat(KEY, -1), FLOAT_PRECISION);\n    }\n']",persist;Float;False;Disabled;float;get;AT;set;Preference;Pref,1.280568540096283e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-5.939317226409912, -5.604631423950195, -4.650124549865723, -5.76981258392334, -5.375908851623535, -0.023905614390969276]",0.9763779640197754
2,"['    @Test\n    public void float_persistAndRetrieve_returnsPersistedValue() {\n        final float expected = 1;\n\n        mPreference.putFloat(expected);\n        float result = mPreference.getFloat(-1);\n\n        assertEquals(expected, result, FLOAT_PRECISION);\n    }\n']",RECISION;Value;result;Float;float;return;persist;float;expected;FL,3.4924596548080444e-09;1.6589183360338211e-09;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-5.976031303405762, -5.580532073974609, -4.626236915588379, -5.8115010261535645, -5.4309282302856445, -0.02375277876853943]",0.9765270948410034
2,"['    @Test\n    public void float_persistTwiceAndRetrieve_returnsSecondValue() {\n        final float expected = 2;\n\n        mPreference.putFloat(1);\n        mPreference.putFloat(expected);\n        float result = mPreference.getFloat(-1);\n\n        assertEquals(expected, result, FLOAT_PRECISION);\n    }\n']",persist;Twice;expected;Retrieve;Float;final;Float;Value;Preference;Float,2.444721758365631e-09;1.862645149230957e-09;9.313225746154785e-10;8.440110832452774e-10;4.656612873077393e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.970892429351807, -5.575129508972168, -4.625226020812988, -5.79784631729126, -5.4328227043151855, -0.02383100427687168]",0.9764508008956909
2,"['    @Test\n    public void boolean_retrieveWhenEmpty_returnsDefault() {\n        final boolean expected = true;\n\n        boolean result = mPreference.getBoolean(expected);\n\n        assertEquals(expected, result);\n    }\n']",retrieve;boolean;return;Equals;boolean;true;get;result;boolean;expected,2.0954757928848267e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;2.9103830456733704e-10;0.0;-8.731149137020111e-11;-1.1641532182693481e-10,5,5,"[-5.964606285095215, -5.575892925262451, -4.631788730621338, -5.808502674102783, -5.396403789520264, -0.02391190081834793]",0.976371705532074
2,"['    @Test\n    public void boolean_persist_getsStoredToSharedPrefs() {\n        final boolean expected = true;\n\n        boolean wasPersisted = mPreference.putBoolean(expected);\n\n        assertTrue(wasPersisted);\n        assertEquals(expected, mSharedPref.getBoolean(KEY, !expected));\n    }\n']",boolean;Pref;persist;True;get;expected;gets;boolean;Shared;Stored,1.7462298274040222e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.9447126388549805, -5.584444999694824, -4.64651346206665, -5.788952827453613, -5.384514808654785, -0.023902006447315216]",0.976381242275238
2,"['    @Test\n    public void boolean_persistWhileDisabled_notPersisted() {\n        mPreference.setPersistent(false);\n\n        boolean wasPersisted = mPreference.putBoolean(true);\n\n        assertFalse(wasPersisted);\n        assertEquals(false, mSharedPref.getBoolean(KEY, false));\n    }\n']",boolean;Preference;Disabled;Pref;was;persist;Persisted;true;Shared;get,1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;3.7834979593753815e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.946393013000488, -5.626678466796875, -4.6487860679626465, -5.777337074279785, -5.353332042694092, -0.023901773616671562]",0.9763817191123962
2,"['    @Test\n    public void boolean_persistAndRetrieve_returnsPersistedValue() {\n        final boolean expected = true;\n\n        mPreference.putBoolean(expected);\n        boolean result = mPreference.getBoolean(!expected);\n\n        assertEquals(expected, result);\n    }\n']",Retrieve;Preference;true;Boolean;boolean;Preference;Value;expected;result;persist,1.3969838619232178e-09;9.89530235528946e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.962073802947998, -5.570897579193115, -4.637266635894775, -5.802188873291016, -5.407061576843262, -0.02385370247066021]",0.9764285683631897
2,"['    @Test\n    public void boolean_persistTwiceAndRetrieve_returnsSecondValue() {\n        final boolean expected = false;\n\n        mPreference.putBoolean(!expected);\n        mPreference.putBoolean(expected);\n        boolean result = mPreference.getBoolean(!expected);\n\n        assertEquals(expected, result);\n    }\n']",return;Boolean;Boolean;result;Preference;expected;put;Preference;boolean;expected,2.7939677238464355e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.933472633361816, -5.558116436004639, -4.646450519561768, -5.779439449310303, -5.384948253631592, -0.02406366355717182]",0.9762235283851624
2,"['    @Test\n    public void parentAddRemoveTest() {\n        PreferenceManager manager = new PreferenceManager(mContext);\n\n        PreferenceScreen screen = manager.createPreferenceScreen(mContext);\n        assertNull(screen.getParent());\n\n        PreferenceCategory category = new PreferenceCategory(mContext);\n        assertNull(category.getParent());\n\n        CheckBoxPreference pref = new CheckBoxPreference(mContext);\n        assertNull(pref.getParent());\n\n        screen.addPreference(category);\n        assertEquals(screen, category.getParent());\n\n        category.addPreference(pref);\n        assertEquals(category, pref.getParent());\n\n        screen.removePreference(category);\n        assertNull(category.getParent());\n\n        category.removePreference(pref);\n        assertNull(pref.getParent());\n    }\n']",screen;category;Preference;remove;Equals;Parent;pre;Parent;Preference;Preference,6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.878538131713867, -5.497560024261475, -4.669625282287598, -5.739099025726318, -5.376607418060303, -0.024408074095845222]",0.9758874177932739
2,"['    @Test\n    public void parentReassignTest() {\n        PreferenceManager manager = new PreferenceManager(mContext);\n\n        PreferenceScreen screen = manager.createPreferenceScreen(mContext);\n\n        PreferenceCategory category1 = new PreferenceCategory(mContext);\n        screen.addPreference(category1);\n        PreferenceCategory category2 = new PreferenceCategory(mContext);\n        screen.addPreference(category2);\n\n        CheckBoxPreference pref = new CheckBoxPreference(mContext);\n        assertNull(pref.getParent());\n\n        category1.addPreference(pref);\n        assertEquals(category1, pref.getParent());\n\n        category1.removePreference(pref);\n        category2.addPreference(pref);\n        assertEquals(category2, pref.getParent());\n    }\n']",Null;Preference;Reassign;manager;category;screen;Check;Preference;pre;Equals,3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.9047393798828125, -5.517270088195801, -4.667450904846191, -5.748440265655518, -5.389080047607422, -0.024183407425880432]",0.976106584072113
2,"['    @Test\n    public void parentDoubleAddTest() throws InterruptedException {\n        PreferenceManager manager = new PreferenceManager(mContext);\n\n        PreferenceScreen screen = manager.createPreferenceScreen(mContext);\n\n        PreferenceCategory category1 = new PreferenceCategory(mContext);\n        screen.addPreference(category1);\n        PreferenceCategory category2 = new PreferenceCategory(mContext);\n        screen.addPreference(category2);\n\n        CheckBoxPreference pref = new CheckBoxPreference(mContext);\n        assertNull(pref.getParent());\n\n        category1.addPreference(pref);\n        category2.addPreference(pref);\n\n        assertEquals(category2, pref.getParent());\n    }\n']",parent;Interrupted;create;Preference;manager;Preference;Screen;screen;Check;screen,1.5133991837501526e-09;9.022187441587448e-10;6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.902348041534424, -5.517516136169434, -4.674542427062988, -5.746400356292725, -5.382071018218994, -0.0241607166826725]",0.9761288166046143
2,"['    @Test\n    public void bindViewHolder_singleLineTitleNotSet_shouldNotSetSingleLine() {\n        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);\n        mPreference.onBindViewHolder(holder);\n\n        verify(mTitleView, never()).setSingleLine(anyBoolean());\n    }\n']",Preference;Set;never;View;on;single;any;Single;older;verify,2.0372681319713593e-09;1.280568540096283e-09;9.022187441587448e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.962741374969482, -5.554869174957275, -4.624457359313965, -5.839193344116211, -5.404603958129883, -0.02394181303679943]",0.976342499256134
2,['    @Test\n    public void bindViewHolder_singleLineTitleSetToTrue_shouldSetSingleLineToTrue() {\n        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);\n        mPreference.setSingleLineTitle(true);\n        mPreference.onBindViewHolder(holder);\n\n        verify(mTitleView).setSingleLine(true);\n    }\n'],Preference;on;Instance;Line;Line;verify;Single;View;Single;set,9.89530235528946e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.967735767364502, -5.556130409240723, -4.627190589904785, -5.8356804847717285, -5.406292915344238, -0.023898979648947716]",0.9763843417167664
2,"['    @Test\n    public void testNameImplies() {\n        // check the compat <<ALL BINDINGS>> name\n        assertEquals(new JndiPermission(""<<ALL BINDINGS>>"", ""*""), new JndiPermission(""-"", ""*""));\n\n        // check the root - name\n        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""-"", ""*"")));\n        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission("""", ""*"")));\n        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""foo"", ""*"")));\n        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));\n        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""foo/"", ""*"")));\n        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""foo/bar/baz/zap"", ""*"")));\n        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""java:foo"", ""*"")));\n\n        // check the non-root - name\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/-"", ""*"")));\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/"", ""*"")));\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""//"", ""*"")));\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""////"", ""*"")));\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/foo/"", ""*"")));\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/foo/bar/baz/zap"", ""*"")));\n        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""java:/foo"", ""*"")));\n\n        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/-"", ""*"")));\n        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/foo"", ""*"")));\n        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/foo"", ""*"")));\n        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/foo/"", ""*"")));\n        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/foo/bar/baz/zap"", ""*"")));\n        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""java:foo/foo"", ""*"")));\n\n        // check the * name\n        assertTrue(new JndiPermission(""*"", ""*"").implies(new JndiPermission("""", ""*"")));\n        assertTrue(new JndiPermission(""*"", ""*"").implies(new JndiPermission(""foo"", ""*"")));\n        assertFalse(new JndiPermission(""*"", ""*"").implies(new JndiPermission(""foo/bar"", ""*"")));\n        assertFalse(new JndiPermission(""*"", ""*"").implies(new JndiPermission(""foo/"", ""*"")));\n        assertFalse(new JndiPermission(""*"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));\n        assertTrue(new JndiPermission(""*/*"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));\n        assertTrue(new JndiPermission(""/*"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));\n        assertTrue(new JndiPermission(""*/foo"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));\n\n        // check java: support\n        assertEquals(new JndiPermission(""java:"", ""*""), new JndiPermission("""", ""*""));\n        assertEquals(new JndiPermission(""java:/"", ""*""), new JndiPermission(""/"", ""*""));\n        assertEquals(new JndiPermission(""java:-"", ""*""), new JndiPermission(""-"", ""*""));\n        assertEquals(new JndiPermission(""java:*"", ""*""), new JndiPermission(""*"", ""*""));\n    }\n']",Implies;INDINGS;the;Permission;Permission;ap;foo;Permission;Permission;foo,9.313225746154785e-10;4.656612873077393e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.8399577140808105, -5.400411605834961, -4.67145299911499, -5.721358776092529, -5.4023027420043945, -0.02487051486968994]",0.9754362106323242
2,"['    @Test\n    public void testActions() {\n        assertEquals(new JndiPermission(""foo"", ""*""), new JndiPermission(""foo"", ""all""));\n        assertEquals(new JndiPermission(""foo"", ""*""), new JndiPermission(""foo"", ""lookup,bind,rebind,unbind,list,listBindings,createSubcontext,destroySubcontext,addNamingListener""));\n        assertEquals(new JndiPermission(""foo"", ""*""), new JndiPermission(""foo"", ""unbind,list,listBindings,createSubcontext,destroySubcontext,addNamingListener,lookup,bind,rebind""));\n\n        assertTrue(new JndiPermission(""foo"", ""*"").implies(new JndiPermission(""foo"", ""lookup"")));\n        assertTrue(new JndiPermission(""foo"", """").implies(new JndiPermission(""foo"", """")));\n        assertTrue(new JndiPermission(""foo"", ""*"").implies(new JndiPermission(""foo"", """")));\n        assertFalse(new JndiPermission(""foo"", """").implies(new JndiPermission(""foo"", ""bind"")));\n        assertTrue(new JndiPermission(""foo"", """").withActions(""bind"").implies(new JndiPermission(""foo"", ""bind"")));\n        assertFalse(new JndiPermission(""foo"", ""unbind"").withoutActions(""unbind"").implies(new JndiPermission(""foo"", ""unbind"")));\n    }\n']",ctions;implies;bind;Permission;unbind;Equals;Permission;foo;nd;all,1.6298145055770874e-09;6.257323548197746e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.019522409886122e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.818447589874268, -5.410068511962891, -4.6866350173950195, -5.684248924255371, -5.37126350402832, -0.025018995627760887]",0.9752914905548096
2,"['    @Test\n    public void testCollection() {\n        final PermissionCollection permissionCollection = new JndiPermission("""", """").newPermissionCollection();\n        Enumeration<Permission> e;\n        permissionCollection.add(new JndiPermission(""foo/bar"", ""lookup,bind""));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind"")));\n        assertFalse(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind,unbind"")));\n        assertFalse(permissionCollection.implies(new JndiPermission(""foo/bar"", ""unbind"")));\n        assertNotNull(e = permissionCollection.elements());\n        assertTrue(e.hasMoreElements());\n        assertEquals(new JndiPermission(""foo/bar"", ""lookup,bind""), e.nextElement());\n        assertFalse(e.hasMoreElements());\n        permissionCollection.add(new JndiPermission(""foo/bar"", ""unbind""));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind,unbind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""unbind"")));\n        assertNotNull(e = permissionCollection.elements());\n        assertTrue(e.hasMoreElements());\n        assertEquals(new JndiPermission(""foo/bar"", ""lookup,bind,unbind""), e.nextElement());\n        assertFalse(e.hasMoreElements());\n        permissionCollection.add(new JndiPermission(""-"", ""lookup""));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind,unbind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""unbind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""baz/zap"", ""lookup"")));\n        assertTrue(permissionCollection.implies(new JndiPermission("""", ""lookup"")));\n        assertFalse(permissionCollection.implies(new JndiPermission(""baz/zap"", ""lookup,bind,unbind"")));\n        assertFalse(permissionCollection.implies(new JndiPermission(""baz/zap"", ""unbind"")));\n        assertNotNull(e = permissionCollection.elements());\n        assertTrue(e.hasMoreElements());\n        assertEquals(new JndiPermission(""foo/bar"", ""lookup,bind,unbind""), e.nextElement());\n        assertTrue(e.hasMoreElements());\n        assertEquals(new JndiPermission(""-"", ""lookup""), e.nextElement());\n        assertFalse(e.hasMoreElements());\n        permissionCollection.add(new JndiPermission(""-"", ""bind,unbind""));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind,unbind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""unbind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""baz/zap"", ""lookup"")));\n        assertTrue(permissionCollection.implies(new JndiPermission("""", ""lookup"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""baz/zap"", ""lookup,bind,unbind"")));\n        assertTrue(permissionCollection.implies(new JndiPermission(""baz/zap"", ""unbind"")));\n        assertNotNull(e = permissionCollection.elements());\n        assertTrue(e.hasMoreElements());\n        assertEquals(new JndiPermission(""-"", ""lookup,bind,unbind""), e.nextElement());\n        assertFalse(e.hasMoreElements());\n    }\n']",add;Enumeration;Permission;new;bar;bar;Collection;unbind;permission;Collection,1.7462298274040222e-09;7.566995918750763e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.874904155731201, -5.48396110534668, -4.655073165893555, -5.745625019073486, -5.404012680053711, -0.024467170238494873]",0.9758296012878418
2,"['    @Test\n    public void testSecurity() {\n        assertEquals(new JndiPermission(""-"", Integer.MAX_VALUE).getActionBits(), JndiPermission.ACTION_ALL);\n        assertEquals(new JndiPermission(""-"", Integer.MAX_VALUE), new JndiPermission(""-"", ""*""));\n    }\n']",ACTION;Permission;Equals;Equals;Action;VALUE;its;Permission;nd;MAX,1.6298145055770874e-09;1.3969838619232178e-09;8.585629984736443e-10;4.656612873077393e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0;0.0,5,5,"[-5.921574115753174, -5.583673000335693, -4.648899555206299, -5.788690090179443, -5.353322982788086, -0.02409403771162033]",0.9761937856674194
2,"['    @Test\n    public void testSerialization() {\n        final JndiPermission jndiPermission = new JndiPermission(""foo/blap/-"", ""bind,lookup"");\n        assertEquals(jndiPermission, ((SerializedJndiPermission)jndiPermission.writeReplace()).readResolve());\n    }\n']",Replace;Serialization;Permission;nd;Equals;bind;blap;Permission;write;nd,1.9208528101444244e-09;1.367880031466484e-09;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.935545444488525, -5.528849124908447, -4.644135475158691, -5.819289207458496, -5.398242950439453, -0.024012457579374313]",0.9762735366821289
2,"['    @Test\n    public void testCollectionSecurity() {\n        final PermissionCollection permissionCollection = new JndiPermission("""", """").newPermissionCollection();\n        permissionCollection.add(new JndiPermission(""foo/bar"", ""unbind,rebind""));\n        permissionCollection.setReadOnly();\n        try {\n            permissionCollection.add(new JndiPermission(""fob/baz"", ""unbind,rebind""));\n            fail(""Expected exception"");\n        } catch (SecurityException ignored) {\n        }\n    }\n']",Only;Read;Collection;add;fail;ignored;final;Permission;Expected;ob,5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.981627464294434, -5.5696306228637695, -4.641201019287109, -5.805319309234619, -5.406722068786621, -0.02376057766377926]",0.9765194654464722
2,"['    @Test\n    public void testCollectionSerialization() {\n        final PermissionCollection permissionCollection = new JndiPermission("""", """").newPermissionCollection();\n        permissionCollection.add(new JndiPermission(""foo/bar"", ""createSubcontext,rebind""));\n        permissionCollection.add(new JndiPermission(""foo"", ""addNamingListener""));\n        permissionCollection.add(new JndiPermission(""-"", ""lookup,rebind""));\n        final PermissionCollection other = (PermissionCollection) ((SerializedJndiPermissionCollection) ((JndiPermissionCollection)permissionCollection).writeReplace()).readResolve();\n        Enumeration<Permission> e;\n        assertNotNull(e = other.elements());\n        assertTrue(e.hasMoreElements());\n        assertEquals(new JndiPermission(""foo/bar"", ""createSubcontext,rebind""), e.nextElement());\n        assertTrue(e.hasMoreElements());\n        assertEquals(new JndiPermission(""foo"", ""addNamingListener""), e.nextElement());\n        assertTrue(e.hasMoreElements());\n        assertEquals(new JndiPermission(""-"", ""lookup,rebind""), e.nextElement());\n        assertFalse(e.hasMoreElements());\n    }\n']",Listener;Replace;Listener;Collection;permission;has;Permission;bar;next;next,6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.888786792755127, -5.501191139221191, -4.664426803588867, -5.739405632019043, -5.396916389465332, -0.02431732974946499]",0.9759759306907654
2,"['    @Test\n    public void testGetParentContext() throws Exception {\n        final ServiceName nameA = ServiceName.JBOSS.append(""a"");\n        final ServiceName nameP = ServiceName.JBOSS.append(""p"");\n        final ServiceName namePC = ServiceName.JBOSS.append(""p"",""c"");\n        final ServiceName nameZ = ServiceName.JBOSS.append(""z"");\n        ExternalContextsNavigableSet set = new ExternalContextsNavigableSet();\n        set.addExternalContext(nameP);\n        assertNull(set.getParentExternalContext(nameA));\n        assertNull(set.getParentExternalContext(nameP));\n        assertNotNull(set.getParentExternalContext(namePC));\n        assertEquals(nameP, set.getParentExternalContext(namePC));\n        assertNull(set.getParentExternalContext(nameZ));\n    }\n']",JBOSS;Navigable;PC;Parent;final;Context;Service;External;name;set,7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.943282127380371, -5.5290608406066895, -4.644615650177002, -5.797294616699219, -5.430710792541504, -0.023905614390969276]",0.9763778448104858
2,"['    @Test\n    public void testBindNoOwner() throws Exception {\n        try {\n            store.bind(new CompositeName(""test""), new Object());\n            fail(""Should have failed with a read-only context exception"");\n        } catch (UnsupportedOperationException expected) {\n        }\n    }\n']",Owner;catch;Composite;store;Should;Name;Exception;new;have;expected,1.4551915228366852e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.985887050628662, -5.486613750457764, -4.595634460449219, -5.873935699462891, -5.441779136657715, -0.024185268208384514]",0.9761048555374146
2,"['    @Test\n    public void testBind() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object value = new Object();\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            store.bind(name, value);\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n        assertEquals(value, store.lookup(name));\n    }\n']",Store;Composite;value;Based;name;Writable;pop;Service;Store;Name,8.149072527885437e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;2.9103830456733704e-11,5,5,"[-5.98177433013916, -5.546341419219971, -4.620306015014648, -5.834256649017334, -5.420886039733887, -0.02390829101204872]",0.9763753414154053
2,"['    @Test\n    public void testBindNested() throws Exception {\n        final Name name = new CompositeName(""nested/test"");\n        final Object value = new Object();\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            store.bind(name, value);\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n        assertEquals(value, store.lookup(name));\n    }\n']",Equals;Owner;Bind;store;Writable;Writable;ested;Store;Exception;Service,1.3387762010097504e-09;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.967643737792969, -5.554007053375244, -4.627659320831299, -5.821444511413574, -5.404653072357178, -0.023953335359692574]",0.9763312935829163
2,"['    @Test\n    public void testUnbind() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object value = new Object();\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            store.bind(name, value);\n            store.unbind(name);\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n        try {\n            store.lookup(name);\n            fail(""Should have thrown name not found"");\n        } catch (NameNotFoundException expect) {\n        }\n    }\n']",fail;Owner;Exception;lookup;OWNER;Should;Writable;Store;name;final,7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.346940502524376e-10,5,5,"[-5.992171287536621, -5.519493103027344, -4.621570110321045, -5.836740493774414, -5.435112953186035, -0.023905964568257332]",0.976377546787262
2,"['    @Test\n    public void testUnBindNoOwner() throws Exception {\n        try {\n            store.unbind(new CompositeName(""test""));\n            fail(""Should have failed with a read-only context exception"");\n        } catch (UnsupportedOperationException expected) {\n        }\n    }\n']",No;Should;Bind;Exception;new;Owner;Operation;Un;have;with,1.862645149230957e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;2.9103830456733704e-11,5,5,"[-5.983940124511719, -5.502541542053223, -4.6005144119262695, -5.870360851287842, -5.4292731285095215, -0.02413918823003769]",0.9761499166488647
2,"['    @Test\n    public void testCreateSubcontext() throws Exception {\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            assertTrue(((NamingContext) store.createSubcontext(new CompositeName(""test""))).getNamingStore() instanceof WritableServiceBasedNamingStore);\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n    }\n']",OWNER;pop;aming;Service;Based;Service;aming;Store;push;Writable,3.259629011154175e-09;1.1641532182693481e-09;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.928086280822754, -5.534379959106445, -4.663361072540283, -5.7848100662231445, -5.362245559692383, -0.02409939095377922]",0.9761887788772583
2,"['    @Test\n    public void testCreateSubContextNoOwner() throws Exception {\n        try {\n            store.createSubcontext(new CompositeName(""test""));\n            fail(""Should have failed with a read-only context exception"");\n        } catch (UnsupportedOperationException expected) {\n        }\n    }\n']",catch;fail;Operation;with;read;Subcontext;exception;expected;Name;Owner,3.725290298461914e-09;1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;3.637978807091713e-10,5,5,"[-5.991027355194092, -5.506957530975342, -4.596217155456543, -5.875072002410889, -5.429966926574707, -0.024130111560225487]",0.9761586785316467
2,"['    @Test\n    public void testRebind() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object value = new Object();\n        final Object newValue = new Object();\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            store.bind(name, value);\n            store.rebind(name, newValue);\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n        assertEquals(newValue, store.lookup(name));\n    }\n']",Rebind;Owner;bind;Equals;Based;new;Writable;aming;lookup;Object,1.5133991837501526e-09;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.960296630859375, -5.5659871101379395, -4.636453628540039, -5.807957649230957, -5.396566867828369, -0.023916440084576607]",0.9763674139976501
2,"['    @Test\n    public void testRebindNoOwner() throws Exception {\n        try {\n            store.rebind(new CompositeName(""test""), new Object());\n            fail(""Should have failed with a read-only context exception"");\n        } catch (UnsupportedOperationException expected) {\n        }\n    }\n']",catch;rebind;Exception;exception;Composite;new;only;failed;No;new,2.0954757928848267e-09;1.4551915228366852e-09;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.985851287841797, -5.492311954498291, -4.598923683166504, -5.872997760772705, -5.439629077911377, -0.024139653891324997]",0.9761493802070618
2,"['    @Test\n    public void testPermissions() throws Exception {\n\n        final NamingContext namingContext = new NamingContext(store, null);\n        final String name = ""a/b"";\n        final Object value = new Object();\n        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();\n\n        // simple bind test, note that permission must have absolute path\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));\n            store.bind(new CompositeName(name), value);\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n\n        // all of these lookup should work\n        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));\n        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));\n        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));\n        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));\n                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));\n        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));\n        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));\n        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));\n        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));\n        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));\n        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));\n        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));\n        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");\n        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));\n        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));\n        // this lookup should not work, no permission\n        try {\n            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);\n            fail(""Should have failed due to missing permission"");\n        } catch (AccessControlException e) {\n\n        }\n        // a permission which only allows entries in store.getBaseName()\n        try {\n            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));\n            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);\n            fail(""Should have failed due to missing permission"");\n        } catch (AccessControlException e) {\n\n        }\n        // permissions which are not absolute paths (do not include store base name, i.e. java:)\n        try {\n            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));\n            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);\n            fail(""Should have failed due to missing permission"");\n        } catch (AccessControlException e) {\n\n        }\n        if (! ""java:"".equals(store.getBaseName().toString())) {\n            try {\n                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));\n                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);\n                fail(""Should have failed due to missing permission"");\n            } catch (AccessControlException e) {\n\n            }\n            try {\n                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));\n                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);\n                fail(""Should have failed due to missing permission"");\n            } catch (AccessControlException e) {\n            }\n        }\n    }\n']",Permissions;work;absolute;permissions;OOKUP;Composite;Equals;OOKUP;that;permissions,7.8580342233181e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.055902197957039e-10;3.055902197957039e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.881321430206299, -5.384916305541992, -4.673366069793701, -5.74569034576416, -5.455490589141846, -0.024483690038323402]",0.975813627243042
2,"['    @Test\n    public void testOwnerBindingReferences() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final ServiceName serviceName = store.buildServiceName(name);\n        final Object value = new Object();\n\n        // ensure bind does not exists\n        try {\n            store.lookup(name);\n            fail(""Should have thrown name not found"");\n        } catch (NameNotFoundException expect) {\n        }\n        final RuntimeBindReleaseService.References duBindingReferences = (RuntimeBindReleaseService.References) container.getService(JndiNamingDependencyProcessor.serviceName(OWNER_FOO)).getValue();\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            store.bind(name, value);\n            // Foo\'s RuntimeBindReleaseService should now have a reference to the new bind\n            assertTrue(duBindingReferences.contains(serviceName));\n\n            store.rebind(name, value);\n            // after rebind, Foo\'s RuntimeBindReleaseService should continue to have a reference to the bind\n            assertTrue(duBindingReferences.contains(serviceName));\n\n            store.unbind(name);\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n    }\n']",References;True;service;FO;push;store;have;new;name;container,5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.6193447411060333e-10,5,5,"[-5.927870750427246, -5.460700511932373, -4.658919334411621, -5.786340236663818, -5.436956405639648, -0.024101369082927704]",0.9761866331100464
2,"['    @Test\n    public void testMultipleOwnersBindingReferences() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final ServiceName serviceName = store.buildServiceName(name);\n        final Object value = new Object();\n\n        // ensure bind does not exists\n        try {\n            store.lookup(name);\n            fail(""Should have thrown name not found"");\n        } catch (NameNotFoundException expect) {\n        }\n        // ensure the owners RuntimeBindReleaseService have no reference to the future bind\n        final RuntimeBindReleaseService.References fooDuBindingReferences = (RuntimeBindReleaseService.References) container.getService(JndiNamingDependencyProcessor.serviceName(OWNER_FOO)).getValue();\n        assertFalse(fooDuBindingReferences.contains(serviceName));\n        final RuntimeBindReleaseService.References barDuBindingReferences = (RuntimeBindReleaseService.References) container.getService(JndiNamingDependencyProcessor.serviceName(OWNER_BAR)).getValue();\n        assertFalse(barDuBindingReferences.contains(serviceName));\n\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            store.bind(name, value);\n            // Foo\'s RuntimeBindReleaseService should now have a reference to the new bind\n            assertTrue(fooDuBindingReferences.contains(serviceName));\n            // Bar\'s RuntimeBindReleaseService reference to the bind should not exist\n            assertFalse(barDuBindingReferences.contains(serviceName));\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n\n        WritableServiceBasedNamingStore.pushOwner(OWNER_BAR);\n        try {\n            store.rebind(name, value);\n            // after rebind, Foo\'s RuntimeBindReleaseService reference to the bind should still exist\n            assertTrue(fooDuBindingReferences.contains(serviceName));\n            // after rebind, Bar\'s RuntimeBindReleaseService reference to the bind should now exist\n            assertTrue(barDuBindingReferences.contains(serviceName));\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n\n        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n        try {\n            store.unbind(name);\n        } finally {\n            WritableServiceBasedNamingStore.popOwner();\n        }\n    }\n']",FO;AR;Owner;Name;Name;Service;OWNER;Bar's;Service;Writable,9.313225746154785e-10;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;3.7834979593753815e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.911599636077881, -5.468250274658203, -4.661755561828613, -5.778463363647461, -5.42950439453125, -0.024144193157553673]",0.9761449694633484
2,['    @Test\n    public void testSchemaOfSubsystemTemplates() throws Exception {\n        super.testSchemaOfSubsystemTemplates();\n    }\n'],Subsystem;Exception;Schema;Subsystem;super;Templates;Schema;Templates,1.6589183360338211e-09;8.149072527885437e-10;-1.7462298274040222e-10;-1.7462298274040222e-10;-5.238689482212067e-10;-5.529727786779404e-10;-1.9208528101444244e-09;-2.1245796233415604e-09,5,5,"[-6.007537841796875, -5.582716941833496, -4.561617851257324, -5.909068584442139, -5.404678821563721, -0.024167582392692566]",0.9761221408843994
2,"['    @Test\n    public void testOnlyExternalContextAllowsCache() throws Exception {\n        KernelServices services = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n                .build();\n        Assert.assertTrue(services.isSuccessfulBoot());\n\n        List<ModelNode> list = parse(ModelTestUtils.readResource(this.getClass(), ""subsystem.xml""));\n\n        for (ModelNode addOp : list) {\n            PathAddress addr = PathAddress.pathAddress(addOp.require(ModelDescriptionConstants.OP_ADDR));\n            if (addr.size() == 2 && addr.getLastElement().getKey().equals(NamingSubsystemModel.BINDING) && BindingType.forName(addOp.get(NamingBindingResourceDefinition.BINDING_TYPE.getName()).asString()) != BindingType.EXTERNAL_CONTEXT) {\n                //Add the cache attribute and make sure it fails\n                addOp.get(NamingBindingResourceDefinition.CACHE.getName()).set(true);\n                services.executeForFailure(addOp);\n\n                //Remove the cache attribute and make sure it succeeds\n                addOp.remove(NamingBindingResourceDefinition.CACHE.getName());\n                ModelTestUtils.checkOutcome(services.executeOperation(addOp));\n\n                //Try to write the cache attribute, which should fail\n                ModelTestUtils.checkFailed(services.executeOperation(Util.getWriteAttributeOperation(addr, NamingBindingResourceDefinition.CACHE.getName(), new ModelNode(true))));\n\n            } else {\n                ModelTestUtils.checkOutcome(services.executeOperation(addOp));\n            }\n        }\n\n\n    }\n']",Operation;ADDR;it;services;create;Utils;Resource;INDING;Additional;cache,5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.821455001831055, -5.2851643562316895, -4.692457675933838, -5.691800594329834, -5.4227471351623535, -0.02529938332736492]",0.9750178456306458
2,"['    @Test\n    public void testCompositeBindingOps() throws Exception {\n        final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();\n        // add binding \'alookup\' through composite op\n        // note that a binding-type of \'lookup\' requires \'lookup\' attr value, which in this case is set by a followup step\n        final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/alookup"");\n        final ModelNode addOp = Operations.createAddOperation(addr);\n        addOp.get(NamingSubsystemModel.BINDING_TYPE).set(NamingSubsystemModel.LOOKUP);\n        final ModelNode compositeOp = Operations.CompositeOperationBuilder.create()\n                .addStep(addOp)\n                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/a""))\n                .build().getOperation();\n        ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));\n    }\n']",step;addr;ernel;followup;Step;add;set;Exception;set;INDING,1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;6.548361852765083e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.930604457855225, -5.402742862701416, -4.675737380981445, -5.783346176147461, -5.467723846435547, -0.024066107347607613]",0.9762210845947266
2,"['    @Test\n    public void testCompositeBindingUpdate() throws Exception {\n        final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();\n        // updates binding \'a\' through composite op\n        // binding-type used is lookup, op should succeed even if lookup value is set by a followup step\n        final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/a"");\n        final ModelNode compositeOp = Operations.CompositeOperationBuilder.create()\n                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.BINDING_TYPE, NamingSubsystemModel.LOOKUP))\n                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/b""))\n                .build().getOperation();\n        ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));\n    }\n']",Subsystem;Services;Step;op;step;add;by;followup;TYPE;Operations,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.111804395914078e-10;5.384208634495735e-10;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10;4.69299266114831e-10,5,5,"[-5.909008979797363, -5.401602745056152, -4.674541473388672, -5.7803850173950195, -5.4491376876831055, -0.024232743307948112]",0.9760584235191345
2,"['    @Test\n    public void testRejectionsEAP7() throws Exception {\n        testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_7_0_0, ModelVersion.create(2, 0), ""wildfly-naming"");\n    }\n']",Rejections;subsystem;xml;Version;Controller;AP;create;Model;wildfly;Model,2.7939677238464355e-09;1.280568540096283e-09;9.313225746154785e-10;5.820766091346741e-10;4.0745362639427185e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.0745362639427185e-10;-6.984919309616089e-10;-7.566995918750763e-10,5,5,"[-5.948814868927002, -5.610387802124023, -4.63632345199585, -5.827303886413574, -5.343069553375244, -0.023974167183041573]",0.9763109087944031
2,"['    @Test\n    public void testRejectionsEAP6() throws Exception {\n        testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_6_4_0, ModelVersion.create(1, 3),""jboss-as-naming"");\n    }\n']",boss;Transformer;Rejections;Exception;create;Model;Controller;as;Model;Version,1.0652001947164536e-08;2.7939677238464355e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;1.7462298274040222e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10,5,5,"[-5.948593616485596, -5.615233898162842, -4.6345720291137695, -5.8239264488220215, -5.3339643478393555, -0.024029100313782692]",0.9762573838233948
2,"['    @Test\n    public void testBindAndRetrieveObjectFactoryFromNamingContext() throws Exception {\n        final Reference reference = new Reference(""java.util.String"", TestObjectFactory.class.getName(), null);\n        namingStore.bind(new CompositeName(""test""), reference);\n\n        final Object result = namingContext.lookup(""test"");\n        assertTrue(result instanceof String);\n        assertEquals(""Test ParsedResult"", result);\n    }\n']",naming;final;Reference;Object;Name;instanceof;Store;reference;get;Result,6.984919309616089e-10;6.548361852765083e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.96827507019043, -5.6296467781066895, -4.641477584838867, -5.79501485824585, -5.367032527923584, -0.023783162236213684]",0.9764974117279053
2,"['    @Test\n    public void testBindAndRetrieveObjectFactoryFromInitialContext() throws Exception {\n        final Reference reference = new Reference(""java.util.String"", TestObjectFactory.class.getName(), null);\n        namingStore.bind(new CompositeName(""test""), reference);\n\n        final InitialContext initialContext = new InitialContext();\n        final Object result = initialContext.lookup(""test"");\n        assertTrue(result instanceof String);\n        assertEquals(""Test ParsedResult"", result);\n    }\n']",reference;util;Reference;Factory;Object;result;initial;Factory;Retrieve;lookup,1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.954766750335693, -5.596060276031494, -4.646136283874512, -5.797852993011475, -5.3705525398254395, -0.02387279085814953]",0.9764097929000854
2,['    @Test\n    public void testLookupBase() throws Exception {\n        final Object obj = store.lookup(new CompositeName());\n        assertNotNull(obj);\n    }\n'],Exception;Composite;obj;Object;obj;lookup;Base;Name;store;Not,1.862645149230957e-09;9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.0745362639427185e-10,5,5,"[-6.019196033477783, -5.615321159362793, -4.558831691741943, -5.902034282684326, -5.400852203369141, -0.024081818759441376]",0.9762058258056641
2,"['    @Test\n    public void testLookupBinding() throws Exception {\n        final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"");\n        final Object value = new Object();\n        bindObject(bindingName, value);\n\n        final Object obj = store.lookup(new CompositeName(""foo/bar""));\n        assertNotNull(obj);\n        assertEquals(value, obj);\n    }\n']",JBOSS;Exception;bar;lookup;final;Composite;append;final;Service;obj,5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-6.011173248291016, -5.608269691467285, -4.6023688316345215, -5.847501277923584, -5.427117347717285, -0.02370842546224594]",0.9765705466270447
2,"['    @Test\n    public void testLookupParentContext() throws Exception {\n        final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"");\n        store.add(bindingName);\n        final Object obj = store.lookup(new CompositeName(""foo""));\n        assertNotNull(obj);\n        assertTrue(obj instanceof Context);\n    }\n']",lookup;final;bar;Null;True;Name;add;binding;binding;Exception,4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-6.010844707489014, -5.615838527679443, -4.598023414611816, -5.860389232635498, -5.418734073638916, -0.02372577041387558]",0.9765535593032837
2,"['    @Test\n    public void testStoredContext() throws Exception {\n        final ServiceName bindingName = ServiceName.JBOSS.append(""foo-stored"").append(""again"");\n        bindObject(bindingName, new Context() {\n            @Override\n            public Object lookup(Name name) throws NamingException {\n                if (""blah/blah2"".equals(name.toString())) {\n                    return new Integer(5);\n                }\n\n                return null;\n            }\n']",Object;Stored;binding;Service;JBOSS;return;null;Name;equals;blah,6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.940086364746094, -5.342975616455078, -4.631613731384277, -5.807102203369141, -5.494626998901367, -0.02456662617623806]",0.975732684135437
2,"['    @Test\n    public void testLookupNestedContext() throws Exception {\n        final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean"");\n        store.add(bindingName);\n        store.add(ServiceName.JBOSS.append(""foos"", ""bar""));\n        store.add(ServiceName.JBOSS.append(""fo"", ""bar""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""ba""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bart""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""ba""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""bazt""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""art""));\n\n        Object obj = store.lookup(new CompositeName(""foo""));\n        assertNotNull(obj);\n        assertTrue(obj instanceof Context);\n\n        obj = Context.class.cast(obj).lookup(new CompositeName(""bar""));\n        assertNotNull(obj);\n        assertTrue(obj instanceof Context);\n\n        obj = Context.class.cast(obj).lookup(new CompositeName(""baz""));\n        assertNotNull(obj);\n        assertTrue(obj instanceof Context);\n    }\n']",az;bart;Service;bar;bar;JBOSS;binding;Service;add;store,1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.8992204666137695, -5.4945969581604, -4.659718036651611, -5.749687194824219, -5.417379856109619, -0.024233557283878326]",0.9760578274726868
2,"['    @Test\n    public void testLookupBindingUsingNestedContext() throws Exception {\n        final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean"");\n        final Object value = new Object();\n        bindObject(bindingName, value);\n\n        Object context = store.lookup(new CompositeName(""foo""));\n        assertNotNull(context);\n        assertTrue(context instanceof Context);\n\n        Object obj = Context.class.cast(context).lookup(new CompositeName(""bar/baz/TestBean""));\n        assertNotNull(obj);\n        assertEquals(value, obj);\n\n        context = Context.class.cast(context).lookup(new CompositeName(""bar""));\n        obj = Context.class.cast(context).lookup(new CompositeName(""baz/TestBean""));\n        assertNotNull(obj);\n        assertEquals(value, obj);\n\n\n        context = Context.class.cast(context).lookup(new CompositeName(""baz""));\n        obj = Context.class.cast(context).lookup(new CompositeName(""TestBean""));\n        assertNotNull(obj);\n        assertEquals(value, obj);\n    }\n']",Lookup;JBOSS;az;bar;binding;Object;Bean;bar;binding;Object,8.731149137020111e-10;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.90260124206543, -5.505268573760986, -4.657900333404541, -5.753413200378418, -5.4039764404296875, -0.02424612268805504]",0.9760454297065735
2,"['    @Test\n    public void testList() throws Exception {\n        final Object value = new Object();\n        bindObject(ServiceName.JBOSS.append(""TestBean""), value);\n        bindObject(ServiceName.JBOSS.append(""foo"", ""TestBean""), value);\n        bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""TestBean""), value);\n        bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean""), value);\n\n        store.add(ServiceName.JBOSS.append(""foos"", ""bar""));\n        store.add(ServiceName.JBOSS.append(""fo"", ""bar""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""ba"", ""baz""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bart"", ""baz""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""ba""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""bazt""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""art""));\n        store.add(ServiceName.JBOSS.append(""other"", ""one""));\n\n        List<NameClassPair> list = store.list(new CompositeName(""""));\n        assertEquals(5, list.size());\n        assertContains(list, ""TestBean"", Object.class);\n        assertContains(list, ""foo"", Context.class);\n        assertContains(list, ""fo"", Context.class);\n        assertContains(list, ""foos"", Context.class);\n        assertContains(list, ""other"", Context.class);\n\n\n        list = store.list(new CompositeName(""foo""));\n        assertEquals(4, list.size());\n        assertContains(list, ""TestBean"", Object.class);\n        assertContains(list, ""ba"", Context.class);\n        assertContains(list, ""bart"", Context.class);\n        assertContains(list, ""bar"", Context.class);\n    }\n']",bart;one;az;az;add;Object;Bean;JBOSS;final;JBOSS,1.0186340659856796e-09;7.275957614183426e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.837623469531536e-10;2.6193447411060333e-10;2.3646862246096134e-10,5,5,"[-5.860015392303467, -5.419679164886475, -4.661097049713135, -5.72938346862793, -5.421013355255127, -0.024710383266210556]",0.9755924344062805
2,"['    @Test\n    public void testListBindings() throws Exception {\n        final Object value = new Object();\n        bindObject(ServiceName.JBOSS.append(""TestBean""), value);\n        bindObject(ServiceName.JBOSS.append(""foo"", ""TestBean""), value);\n        bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""TestBean""), value);\n        bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean""), value);\n\n        store.add(ServiceName.JBOSS.append(""foos"", ""bar""));\n        store.add(ServiceName.JBOSS.append(""fo"", ""bar""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""ba"", ""baz""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bart"", ""baz""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""ba""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""bazt""));\n        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""art""));\n        store.add(ServiceName.JBOSS.append(""other"", ""one""));\n\n        List<Binding> list = store.listBindings(new CompositeName(""""));\n        assertEquals(5, list.size());\n        assertContains(list, ""TestBean"", Object.class);\n        assertContains(list, ""foo"", NamingContext.class);\n        assertContains(list, ""fo"", NamingContext.class);\n        assertContains(list, ""foos"", NamingContext.class);\n        assertContains(list, ""other"", NamingContext.class);\n\n\n        list = store.listBindings(new CompositeName(""foo""));\n        assertEquals(4, list.size());\n        assertContains(list, ""TestBean"", Object.class);\n        assertContains(list, ""ba"", NamingContext.class);\n        assertContains(list, ""bart"", NamingContext.class);\n        assertContains(list, ""bar"", NamingContext.class);\n\n        for (Binding binding : list) {\n            if (binding.getName().equals(""bar"")) {\n                final Object bean = Context.class.cast(binding.getObject()).lookup(""TestBean"");\n                assertNotNull(bean);\n                assertEquals(value, bean);\n            }\n        }\n    }\n']",az;List;add;bart;bar;store;Object;aming;foo;Equals,1.3387762010097504e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.1650415621697903e-10,5,5,"[-5.85778284072876, -5.418878078460693, -4.660923480987549, -5.727205276489258, -5.4177165031433105, -0.024744458496570587]",0.9755591750144958
2,"['    @Test\n    public void testRegisterURLSchemeHandler() throws Exception {\n        InitialContext ictx = new InitialContext(null);\n\n        try {\n            ictx.lookup(""foobar:something"");\n            Assert.fail(""Precondition: the foobar: scheme should not yet be registered"");\n        } catch (NamingException ne) {\n            // good\n        }\n\n        ObjectFactory tof = new TestObjectFactory();\n        InitialContext.addUrlContextFactory(""foobar"", tof);\n        String something = (String) ictx.lookup(""foobar:something"");\n        Assert.assertTrue(""The object should now be provided by our TestObjectFactory"", something.startsWith(""TestObject:""));\n\n        try {\n            InitialContext.removeUrlContextFactory(""foobar:"", new TestObjectFactory());\n            Assert.fail(""Should throw an IllegalArgumentException since the associated factory object doesn\'t match the registration"");\n        } catch (IllegalArgumentException iae) {\n            // good;\n        }\n\n        Assert.assertEquals(""The foobar: scheme should still be registered"", something, ictx.lookup(""foobar:something""));\n\n        InitialContext.removeUrlContextFactory(""foobar"", tof);\n        try {\n            ictx.lookup(""foobar:something"");\n            Assert.fail(""The foobar: scheme should not be registered any more"");\n        } catch (NamingException ne) {\n            // good\n        }\n    }\n']",Initial;foobar;Assert;Exception;aming;should;fail;aming;scheme;Context,9.313225746154785e-10;7.021299097687006e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.894136428833008, -5.447294235229492, -4.6834492683410645, -5.749129772186279, -5.416964530944824, -0.02422785572707653]",0.9760633111000061
2,"['    @Test\n    public void testFireObjectEvent() throws Exception {\n        final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n\n        final CollectingListener objectListener = new CollectingListener(1);\n        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);\n        final CollectingListener subtreeListener = new CollectingListener(0);\n        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);\n        final CollectingListener oneLevelListener = new CollectingListener(0);\n        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n\n        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE);\n\n        objectListener.latch.await(1, TimeUnit.SECONDS);\n\n        assertEquals(1, objectListener.capturedEvents.size());\n        assertTrue(oneLevelListener.capturedEvents.isEmpty());\n        assertTrue(subtreeListener.capturedEvents.isEmpty());\n    }\n']",ONELEVEL;REE;UB;Event;Unit;Coordinator;SECONDS;Listener;subtree;Collecting,1.979060471057892e-09;1.3969838619232178e-09;1.3969838619232178e-09;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.8686017990112305, -5.437924385070801, -4.6710381507873535, -5.761643886566162, -5.408108234405518, -0.02446054108440876]",0.9758360981941223
2,"['    @Test\n    public void testFireSubTreeEvent() throws Exception {\n        final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n\n        final CollectingListener objectListener = new CollectingListener(0);\n        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);\n        final CollectingListener subtreeListener = new CollectingListener(1);\n        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);\n        final CollectingListener oneLevelListener = new CollectingListener(0);\n        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n\n        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.SUBTREE_SCOPE);\n\n        subtreeListener.latch.await(1, TimeUnit.SECONDS);\n\n        assertTrue(objectListener.capturedEvents.isEmpty());\n        assertTrue(oneLevelListener.capturedEvents.isEmpty());\n        assertEquals(1, subtreeListener.capturedEvents.size());\n    }\n']",await;OBJECT;aming;Event;Coordinator;Composite;Level;Exception;Listener;coordinator,8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.865625381469727, -5.433675765991211, -4.671966552734375, -5.755638599395752, -5.408024311065674, -0.024499161168932915]",0.975798487663269
2,"['    @Test\n    public void testFireOneLevelEvent() throws Exception {\n        final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n\n        final CollectingListener objectListener = new CollectingListener(0);\n        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);\n        final CollectingListener subtreeListener = new CollectingListener(0);\n        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);\n        final CollectingListener oneLevelListener = new CollectingListener(1);\n        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n\n        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.ONELEVEL_SCOPE);\n\n        oneLevelListener.latch.await(1, TimeUnit.SECONDS);\n\n        assertTrue(objectListener.capturedEvents.isEmpty());\n        assertTrue(subtreeListener.capturedEvents.isEmpty());\n        assertEquals(1, oneLevelListener.capturedEvents.size());\n    }\n']",UB;Fire;Event;captured;Coordinator;ONELEVEL;Listener;Listener;Listener;Listener,1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.875241756439209, -5.435586929321289, -4.668588638305664, -5.767977714538574, -5.416780948638916, -0.024415520951151848]",0.9758802652359009
2,"['    @Test\n    public void testFireAllEvent() throws Exception {\n        final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n\n        final CollectingListener objectListener = new CollectingListener(1);\n        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);\n        final CollectingListener subtreeListener = new CollectingListener(1);\n        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);\n        final CollectingListener oneLevelListener = new CollectingListener(1);\n        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n\n        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);\n\n        objectListener.latch.await(1, TimeUnit.SECONDS);\n        oneLevelListener.latch.await(1, TimeUnit.SECONDS);\n        subtreeListener.latch.await(1, TimeUnit.SECONDS);\n\n        assertEquals(1, objectListener.capturedEvents.size());\n        assertEquals(1, subtreeListener.capturedEvents.size());\n        assertEquals(1, oneLevelListener.capturedEvents.size());\n    }\n']",atch;Event;Level;atch;Composite;one;SECONDS;await;object;Event,1.0477378964424133e-09;9.604264050722122e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.859155178070068, -5.414560317993164, -4.6680402755737305, -5.755601406097412, -5.418561935424805, -0.024594075977802277]",0.9757059216499329
2,"['    @Test\n    public void testFireMultiLevelEvent() throws Exception {\n        final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n\n        final CollectingListener subtreeListener = new CollectingListener(1);\n        coordinator.addListener(""foo"", EventContext.SUBTREE_SCOPE, subtreeListener);\n\n        final CollectingListener subtreeListenerTwo = new CollectingListener(1);\n        coordinator.addListener(""foo/bar"", EventContext.SUBTREE_SCOPE, subtreeListenerTwo);\n\n        final CollectingListener subtreeListenerThree = new CollectingListener(1);\n        coordinator.addListener(""foo/bar/baz"", EventContext.SUBTREE_SCOPE, subtreeListenerThree);\n\n        coordinator.fireEvent(context, new CompositeName(""foo/bar/baz/boo""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);\n\n        subtreeListener.latch.await(1, TimeUnit.SECONDS);\n        subtreeListenerTwo.latch.await(1, TimeUnit.SECONDS);\n        subtreeListenerThree.latch.await(1, TimeUnit.SECONDS);\n\n        assertEquals(1, subtreeListener.capturedEvents.size());\n        assertEquals(1, subtreeListenerTwo.capturedEvents.size());\n        assertEquals(1, subtreeListenerThree.capturedEvents.size());\n    }\n']",await;Two;Level;Three;coordinator;ADDED;Context;SECONDS;Three;ONELEVEL,2.9103830456733704e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.675246939063072e-10;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10;4.220055416226387e-10,5,5,"[-5.814799785614014, -5.360252857208252, -4.684976100921631, -5.723654270172119, -5.400478363037109, -0.025007950142025948]",0.9753020405769348
2,"['    @Test\n    public void testLookup() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object object = new Object();\n        namingStore.bind(name, object);\n\n        Object result = namingContext.lookup(name);\n        assertEquals(object, result);\n\n        //the same with security permissions\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");\n        assertEquals(object, result);\n    }\n']",Exception;naming;lookup;result;Lookup;Name;new;nd;Permission;Composite,1.1350493878126144e-09;7.8580342233181e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.43833414465189e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.942289352416992, -5.510247707366943, -4.634410858154297, -5.812417030334473, -5.422387599945068, -0.0240772794932127]",0.9762102365493774
2,"['    @Test\n    public void testLookupReference() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blah"", ""test""), TestObjectFactory.class.getName(), null);\n        namingStore.bind(name, reference);\n\n        Object result = namingContext.lookup(name);\n        assertEquals(""test"", result);\n\n        //the same with security permissions\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");\n        assertEquals(""test"", result);\n    }\n']",ACTION;nd;lookup;null;Object;Exception;naming;Reference;Add;name,8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.934196949005127, -5.554971694946289, -4.657379627227783, -5.769174098968506, -5.387080192565918, -0.023989880457520485]",0.9762954711914062
2,"['    @Test\n    public void testLookupWithContinuation() throws Exception {\n        namingStore.bind(new CompositeName(""comp/nested""), ""test"");\n\n        final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""nns"", ""comp""), TestObjectFactoryWithNameResolution.class.getName(), null);\n        namingStore.bind(new CompositeName(""test""), reference);\n\n        Object result = namingContext.lookup(new CompositeName(""test/nested""));\n        assertEquals(""test"", result);\n\n        //the same with security permissions\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""comp/nested"", ""lookup"")), namingContext, ""test/nested"");\n        assertEquals(""test"", result);\n    }\n']",ACTION;Context;Permission;Resolution;Store;bind;naming;Factory;bind;ested,9.022187441587448e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.86590576171875, -5.478523254394531, -4.686210632324219, -5.720973968505859, -5.3667988777160645, -0.02447403408586979]",0.975822925567627
2,"['    @Test\n    public void testLookupWitResolveResult() throws Exception {\n        namingStore.bind(new CompositeName(""test/nested""), ""test"");\n\n        final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blahh"", ""test""), TestObjectFactoryWithNameResolution.class.getName(), null);\n        namingStore.bind(new CompositeName(""comp""), reference);\n\n        Object result = namingContext.lookup(new CompositeName(""comp/nested""));\n        assertEquals(""test"", result);\n\n        //the same with security permissions\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test/nested"", ""lookup"")), namingContext, ""comp/nested"");\n        assertEquals(""test"", result);\n    }\n']",Resolve;naming;Equals;Add;ACTION;Exception;Composite;ested;it;comp,8.149072527885437e-10;5.820766091346741e-10;4.43833414465189e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.85443115234375, -5.471208095550537, -4.692324638366699, -5.707215785980225, -5.362090587615967, -0.02455069124698639]",0.9757483601570129
2,"['    @Test\n    public void testLookupLink() throws Exception {\n        final Name name = new CompositeName(""test"");\n        namingStore.bind(name, ""testValue"", String.class);\n        final Name linkName = new CompositeName(""link"");\n        namingStore.bind(linkName, new LinkRef(""./test""));\n        Object result = namingContext.lookup(linkName);\n        assertEquals(""testValue"", result);\n\n        //the same with security permissions\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");\n        assertEquals(""testValue"", result);\n\n        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());\n        namingStore.rebind(linkName, new LinkRef(name));\n        result = namingContext.lookup(linkName);\n        assertEquals(""testValue"", result);\n\n        //the same with security permissions\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");\n        assertEquals(""testValue"", result);\n    }\n']",rebind;Lookup;System;lookup;lookup;Permission;Store;permissions;new;OOKUP,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;3.7834979593753815e-10;3.710738383233547e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10,5,5,"[-5.865966320037842, -5.459187984466553, -4.678391456604004, -5.734678268432617, -5.385329723358154, -0.024498114362359047]",0.9757995009422302
2,"['    @Test\n    public void testLookupContextLink() throws Exception {\n        final Name name = new CompositeName(""test/value"");\n        namingStore.bind(name, ""testValue"");\n        final Name linkName = new CompositeName(""link"");\n        namingStore.bind(linkName, new LinkRef(""./test""));\n        Object result = namingContext.lookup(""link/value"");\n        assertEquals(""testValue"", result);\n\n        //the same with security permissions\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup""),\n                new JndiPermission(""test/value"", ""lookup"")), namingContext, ""link/value"");\n\n        assertEquals(""testValue"", result);\n    }\n']",Link;Link;result;Composite;Permission;result;link;Context;link;nd,7.566995918750763e-10;5.384208634495735e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4560798667371273e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.888051509857178, -5.461966037750244, -4.671591758728027, -5.746107578277588, -5.398801326751709, -0.024387018755078316]",0.9759078025817871
2,"['    @Test\n    public void testLookupNameNotFound() throws Exception {\n        try {\n            namingContext.lookup(new CompositeName(""test""));\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch (NameNotFoundException expected) {\n        }\n\n        //the same with security permissions\n        try {\n            testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");\n            fail(""Should have thrown and NameNotFoundException with appropriate permissions"");\n        } catch (NameNotFoundException expected) {\n        }\n    }\n']",with;have;ACTION;Not;Context;permissions;fail;same;expected;Exception,7.566995918750763e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9374518394470215, -5.5216193199157715, -4.665714263916016, -5.784050464630127, -5.375983238220215, -0.02403980679810047]",0.97624671459198
2,"['    @Test\n    public void testLookupEmptyName() throws Exception {\n        Object result = namingContext.lookup(new CompositeName());\n        assertTrue(result instanceof NamingContext);\n        result = namingContext.lookup(new CompositeName(""""));\n        assertTrue(result instanceof NamingContext);\n\n        //the same with security permissions\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, null);\n        assertTrue(result instanceof NamingContext);\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, """");\n        assertTrue(result instanceof NamingContext);\n    }\n']",lookup;naming;aming;Exception;naming;True;Composite;Action;True;True,7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;3.710738383233547e-10;3.710738383233547e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.9005560874938965, -5.553900241851807, -4.6564555168151855, -5.7866926193237305, -5.348795413970947, -0.024223318323493004]",0.9760677218437195
2,"['    @Test\n    public void testBind() throws Exception {\n        Name name = new CompositeName(""test"");\n        final Object value = new Object();\n        namingContext.bind(name, value);\n        assertEquals(value, namingStore.lookup(name));\n\n        //the same with security permissions\n        name = new CompositeName(""securitytest"");\n        testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""securitytest"", value);\n        assertEquals(value, namingStore.lookup(name));\n    }\n']",Bind;ACTION;lookup;lookup;name;Store;Name;Context;security;the,6.984919309616089e-10;3.8562575355172157e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.937516689300537, -5.544964790344238, -4.64306116104126, -5.808640003204346, -5.390654563903809, -0.02402060478925705]",0.9762657284736633
2,"['    @Test\n    public void testBindReferenceable() throws Exception {\n        Name name = new CompositeName(""test"");\n        final TestObjectReferenceable referenceable = new TestObjectReferenceable(""addr"");\n        namingContext.bind(name, referenceable);\n        Object result = namingContext.lookup(name);\n        assertEquals(referenceable.addr, result);\n\n        //the same with security permissions\n        name = new CompositeName(""securitytest"");\n        testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""securitytest"", referenceable);\n        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""securitytest"");\n        assertEquals(referenceable.addr, result);\n    }\n']",IND;Referenceable;new;bind;Action;referenceable;security;permissions;ACTION;Bind,4.656612873077393e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.924973487854004, -5.526227951049805, -4.658419609069824, -5.782003402709961, -5.38820743560791, -0.024074487388134003]",0.9762129783630371
2,"['    @Test\n    public void testUnbind() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object value = new Object();\n        namingStore.bind(name, value);\n        namingContext.unbind(name);\n        try {\n            namingStore.lookup(name);\n            fail(""Should have thrown name not found"");\n        } catch (NameNotFoundException expect) {}\n\n        //the same with security permissions\n        testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""test"", value);\n        testActionPermission(JndiPermission.ACTION_UNBIND, namingContext, ""test"");\n        try {\n            namingStore.lookup(name);\n            fail(""Should have thrown name not found"");\n        } catch (NameNotFoundException expect) {}\n    }\n']",IND;expect;Unbind;bind;IND;Action;value;Should;Composite;Store,7.566995918750763e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.938368320465088, -5.515104293823242, -4.657112121582031, -5.791816711425781, -5.401483058929443, -0.02400384657084942]",0.9762819409370422
2,"['    @Test\n    public void testCreateSubcontext() throws Exception {\n        assertTrue(namingContext.createSubcontext(new CompositeName(""test"")) instanceof NamingContext);\n\n        //the same with security permissions\n        assertTrue(testActionPermission(JndiPermission.ACTION_CREATE_SUBCONTEXT, namingContext, ""securitytest"") instanceof NamingContext);\n    }\n']",Composite;SUBCONTEXT;True;Subcontext;Create;True;instanceof;the;security;Exception,1.862645149230957e-09;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.885809898376465, -5.529602527618408, -4.661280632019043, -5.794691562652588, -5.341837406158447, -0.024324774742126465]",0.9759687781333923
2,"['    @Test\n    public void testRebind() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object value = new Object();\n        namingStore.bind(name, value);\n        Object newValue = new Object();\n        namingContext.rebind(name, newValue);\n        assertEquals(newValue, namingStore.lookup(name));\n\n        //the same with security permissions\n        newValue = new Object();\n        testActionPermission(JndiPermission.ACTION_REBIND, namingContext, ""test"", newValue);\n        assertEquals(newValue, namingStore.lookup(name));\n    }\n']",Object;Context;Object;Permission;new;final;Value;new;RE;Name,4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.41970007866621e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.933942794799805, -5.569901943206787, -4.650515556335449, -5.784037113189697, -5.3805766105651855, -0.02398231439292431]",0.976302981376648
2,"['    @Test\n    public void testRebindReferenceable() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final TestObjectReferenceable referenceable = new TestObjectReferenceable(""addr"");\n        namingContext.bind(name, referenceable);\n        TestObjectReferenceable newReferenceable = new TestObjectReferenceable(""newAddr"");\n        namingContext.rebind(name, newReferenceable);\n        Object result = namingContext.lookup(name);\n        assertEquals(newReferenceable.addr, result);\n\n        //the same with security permissions\n        newReferenceable = new TestObjectReferenceable(""yetAnotherNewAddr"");\n        testActionPermission(JndiPermission.ACTION_REBIND, namingContext, ""test"", newReferenceable);\n        result = namingContext.lookup(name);\n        assertEquals(newReferenceable.addr, result);\n    }\n']",bind;addr;final;Permission;Add;lookup;Permission;security;name;RE,7.421476766467094e-10;6.402842700481415e-10;5.529727786779404e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.931682109832764, -5.525979995727539, -4.650411128997803, -5.788443088531494, -5.408909797668457, -0.024019092321395874]",0.9762670993804932
2,"['    @Test\n    public void testListNameNotFound() throws Exception {\n        try {\n            namingContext.list(new CompositeName(""test""));\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch (NameNotFoundException expected) {\n        }\n\n        //the same with security permissions\n        try {\n            testActionPermission(JndiPermission.ACTION_LIST, namingContext, ""test"");\n            fail(""Should have thrown and NameNotFoundException with appropriate permissions"");\n        } catch (NameNotFoundException expected) {\n        }\n    }\n']",Exception;naming;list;thrown;Context;Permission;Found;Context;nd;fail,6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.874891601502895e-10;4.656612873077393e-10;3.346940502524376e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.934664726257324, -5.530416011810303, -4.670177459716797, -5.773589611053467, -5.364015102386475, -0.02405889332294464]",0.9762283563613892
2,"['    @Test\n    public void testList() throws Exception {\n        bindList();\n\n        NamingEnumeration<NameClassPair> results = namingContext.list(new CompositeName());\n        checkListResults(results);\n\n        //the same with security permissions\n        results = (NamingEnumeration<NameClassPair>) testActionPermission(JndiPermission.ACTION_LIST, namingContext, null);\n        checkListResults(results);\n    }\n']",permissions;check;results;Results;Action;list;Name;Class;air;security,1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.923853397369385, -5.49429178237915, -4.6585259437561035, -5.791268825531006, -5.4037370681762695, -0.02410765364766121]",0.9761807322502136
2,"['    @Test\n    public void testListWithContinuation() throws Exception {\n        bindListWithContinuations();\n\n        NamingEnumeration<NameClassPair> results = namingContext.list(new CompositeName(""comp""));\n        checkListWithContinuationsResults(results);\n\n        //the same with security permissions\n        results = (NamingEnumeration<NameClassPair>) testActionPermission(JndiPermission.ACTION_LIST, Arrays.asList(\n                new JndiPermission(""test"", ""list"")), namingContext, ""comp"");\n\n        checkListWithContinuationsResults(results);\n    }\n']",Continuation;Enumeration;Context;ACTION;new;aming;security;permissions;bind;Name,1.8044374883174896e-09;6.83940015733242e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.001776687800884e-10,5,5,"[-5.874502658843994, -5.458853244781494, -4.688791275024414, -5.731900691986084, -5.37277364730835, -0.024444952607154846]",0.9758514165878296
2,"['    @Test\n    public void testListBindingsNameNotFound() throws Exception {\n        try {\n            namingContext.listBindings(new CompositeName(""test""));\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch (NameNotFoundException expected) {\n        }\n\n        //the same with security permissions\n        try {\n            testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, namingContext, ""test"");\n            fail(""Should have thrown and NameNotFoundException with appropriate permissions"");\n        } catch (NameNotFoundException expected) {\n        }\n    }\n']",INDINGS;Action;Context;permissions;List;same;thrown;Should;ACTION;with,7.275957614183426e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.928330421447754, -5.527153968811035, -4.67357873916626, -5.76939582824707, -5.364031791687012, -0.02407006546854973]",0.9762173295021057
2,"['    @Test\n    public void testListBindings() throws Exception {\n        bindList();\n\n        NamingEnumeration<Binding> results = namingContext.listBindings(new CompositeName());\n        checkListResults(results);\n\n        //the same with security permissions\n        results = (NamingEnumeration<Binding>) testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, namingContext, null);\n        checkListResults(results);\n    }\n']",permissions;List;inding;naming;Enumeration;Enumeration;with;ACTION;Action;security,1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.932009220123291, -5.507251739501953, -4.652854919433594, -5.789397716522217, -5.406279563903809, -0.024080421775579453]",0.9762071967124939
2,"['    @Test\n    public void testListBindingsWithContinuation() throws Exception {\n        bindListWithContinuations();\n\n        NamingEnumeration<Binding> results = namingContext.listBindings(new CompositeName(""comp""));\n        checkListWithContinuationsResults(results);\n\n        //the same with security permissions\n        results = (NamingEnumeration<Binding>) testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, Arrays.asList(\n                new JndiPermission(""test"", ""listBindings"")), namingContext, ""comp"");\n\n        checkListWithContinuationsResults(results);\n    }\n']",Continuations;comp;Enumeration;Bindings;naming;results;permissions;Continuations;List;List,7.8580342233181e-10;5.529727786779404e-10;5.238689482212067e-10;4.511093720793724e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.871572494506836, -5.461418628692627, -4.689690113067627, -5.723942279815674, -5.369487285614014, -0.024476012215018272]",0.9758211970329285
2,"['    @Test\n    public void testBindEmptyName() throws Exception {\n        try {\n            nameStore.bind(new CompositeName(), new Object(), Object.class);\n            fail(""Should have thrown and InvalidNameException"");\n        } catch(InvalidNameException expected){}\n\n        try {\n            nameStore.bind(new CompositeName(""""), new Object(), Object.class);\n            fail(""Should have thrown and InvalidNameException"");\n        } catch(InvalidNameException expected){}\n    }\n']",Bind;Exception;Should;have;thrown;new;Exception;Invalid;new;catch,5.820766091346741e-10;5.675246939063072e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.953237056732178, -5.578487873077393, -4.640384197235107, -5.818878650665283, -5.3591203689575195, -0.023991160094738007]",0.9762943387031555
2,"['    @Test\n    public void testBindAndLookup() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object object = new Object();\n        nameStore.bind(name, object, Object.class);\n        final Object result = nameStore.lookup(name);\n        assertEquals(object, result);\n    }\n']",bind;lookup;Name;Object;Store;name;final;class;new;Exception,6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-6.011407375335693, -5.583550930023193, -4.582976341247559, -5.871654510498047, -5.4335246086120605, -0.02390351891517639]",0.976379930973053
2,"['    @Test\n    public void testLookupNameNotFound() throws Exception {\n        try {\n            nameStore.lookup(new CompositeName(""test""));\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch(NameNotFoundException expected) {}\n    }\n']",Exception;new;Name;Found;Not;Name;Store;Composite;Found;Should,3.725290298461914e-09;2.7939677238464355e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.7462298274040222e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;0.0,5,5,"[-5.98813009262085, -5.538913726806641, -4.608322620391846, -5.870396137237549, -5.410914897918701, -0.023982198908925056]",0.976302981376648
2,"['    @Test\n    public void testLookupEmptyName() throws Exception {\n        Object result = nameStore.lookup(new CompositeName());\n        assertTrue(result instanceof NamingContext);\n        result = nameStore.lookup(new CompositeName(""""));\n        assertTrue(result instanceof NamingContext);\n    }\n']",Lookup;aming;lookup;result;new;Store;True;Name;Composite;Composite,1.367880031466484e-09;1.1641532182693481e-09;9.604264050722122e-10;8.149072527885437e-10;6.984919309616089e-10;6.83940015733242e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.978118896484375, -5.6086883544921875, -4.603146076202393, -5.8604841232299805, -5.388120651245117, -0.023924004286527634]",0.9763599038124084
2,"['    @Test\n    public void testBindAndLookupResolveResult() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Reference reference = new Reference(Context.class.getName());\n        nameStore.bind(name, reference, Context.class);\n        final Object result = nameStore.lookup(new CompositeName(""test/value""));\n        assertTrue(result instanceof ResolveResult);\n    }\n']",Composite;value;Result;Store;Name;Resolve;Bind;lookup;result;Store,7.566995918750763e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-6.009243011474609, -5.597095012664795, -4.598037242889404, -5.86095666885376, -5.434566020965576, -0.02372705191373825]",0.9765522480010986
2,"['    @Test\n    public void testUnbindNotFound() throws Exception {\n        try {\n            nameStore.unbind(new CompositeName(""test""));\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch(NameNotFoundException expected) {}\n    }\n']",expected;Composite;thrown;catch;Name;Name;Not;new;Name;Found,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;-2.9103830456733704e-11,5,5,"[-5.95898962020874, -5.540329456329346, -4.6310577392578125, -5.849271297454834, -5.390163898468018, -0.02398068644106388]",0.9763045907020569
2,"['    @Test\n    public void testBindUnbindLookup() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object object = new Object();\n        nameStore.bind(name, object, Object.class);\n        final Object result = nameStore.lookup(name);\n        assertEquals(object, result);\n        nameStore.unbind(name);\n        try {\n            nameStore.lookup(name);\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch(NameNotFoundException expected) {}\n    }\n']",unbind;new;catch;Unbind;Lookup;Store;object;Exception;Store;Found,4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.993497371673584, -5.558863639831543, -4.606715202331543, -5.844850063323975, -5.429683208465576, -0.02389502339065075]",0.9763880968093872
2,"['    @Test\n    public void testRebindEmptyName() throws Exception {\n        try {\n            nameStore.rebind(new CompositeName(), new Object(), Object.class);\n            fail(""Should have thrown and InvalidNameException"");\n        } catch(InvalidNameException expected){}\n\n        try {\n            nameStore.rebind(new CompositeName(""""), new Object(), Object.class);\n            fail(""Should have thrown and InvalidNameException"");\n        } catch(InvalidNameException expected){}\n    }\n']",rebind;have;thrown;Store;Empty;new;Composite;Name;Exception;Name,1.076841726899147e-09;9.313225746154785e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.953258991241455, -5.586952209472656, -4.645319938659668, -5.81024169921875, -5.357936382293701, -0.023941928520798683]",0.9763423800468445
2,"['    @Test\n    public void testRebindInvalidContext() throws Exception {\n        try {\n            nameStore.rebind(new CompositeName(""subcontext/test""), new Object(), Object.class);\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch(NameNotFoundException expected){}\n    }\n']",Invalid;Rebind;Name;catch;Should;Object;thrown;Not;new;Name,4.6566128730773926e-09;2.0954757928848267e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.966650009155273, -5.503931045532227, -4.621342658996582, -5.854031085968018, -5.426822662353516, -0.02402479387819767]",0.9762614965438843
2,"['    @Test\n    public void testRebindAndLookup() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object object = new Object();\n        nameStore.rebind(name, object, Object.class);\n        final Object result = nameStore.lookup(name);\n        assertEquals(object, result);\n    }\n']",Rebind;Name;rebind;lookup;object;Object;Lookup;name;Store;Store,6.984919309616089e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11,5,5,"[-6.008364677429199, -5.590095520019531, -4.590699672698975, -5.865211486816406, -5.430099964141846, -0.023839617148041725]",0.9764423966407776
2,"['    @Test\n    public void testBindAndRebind() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object object = new Object();\n        nameStore.bind(name, object, Object.class);\n        assertEquals(object, nameStore.lookup(name));\n        final Object objectTwo = new Object();\n        nameStore.rebind(name, objectTwo, Object.class);\n        assertEquals(objectTwo, nameStore.lookup(name));\n    }\n']",rebind;Composite;Equals;Object;lookup;Store;new;Two;class;class,6.984919309616089e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.962121486663818, -5.611565113067627, -4.623418807983398, -5.821042060852051, -5.3707170486450195, -0.023948678746819496]",0.9763357043266296
2,"['    @Test\n    public void testListNameNotFound() throws Exception {\n        try {\n            nameStore.list(new CompositeName(""test""));\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch(NameNotFoundException expected) {}\n    }\n']",Not;Found;Found;Exception;Store;Not;Name;Exception;Name;Composite,1.3969838619232178e-09;1.1932570487260818e-09;5.238689482212067e-10;4.656612873077393e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;-8.731149137020111e-11;-1.4551915228366852e-10,5,5,"[-5.985356330871582, -5.560049533843994, -4.619414806365967, -5.859433174133301, -5.39292049407959, -0.023907477036118507]",0.9763760566711426
2,"['    @Test\n    public void testList() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object object = new Object();\n        nameStore.bind(name, object, Object.class);\n        final Name nameTwo = new CompositeName(""testTwo"");\n        final Object objectTwo = new Object();\n        nameStore.bind(nameTwo, objectTwo, Object.class);\n        final Name nameThree = new CompositeName(""testThree"");\n        final Object objectThree = new Object();\n        nameStore.bind(nameThree, objectThree, Object.class);\n\n        nameStore.bind(new CompositeName(""testContext/test""), ""test"");\n\n        final List<NameClassPair> results = nameStore.list(new CompositeName());\n        assertEquals(4, results.size());\n        final Set<String> expected = new HashSet<String>(Arrays.asList(""test"", ""testTwo"", ""testThree"", ""testContext""));\n        for(NameClassPair result : results) {\n            final String resultName = result.getName();\n            if(""test"".equals(resultName) || ""testTwo"".equals(resultName) || ""testThree"".equals(resultName)) {\n                assertEquals(Object.class.getName(), result.getClassName());\n            } else if(""testContext"".equals(resultName)) {\n                assertEquals(Context.class.getName(), result.getClassName());\n            } else {\n                fail(""Unknown result name: "" + resultName);\n            }\n            expected.remove(resultName);\n        }\n        assertTrue(""Not all expected results were returned"", expected.isEmpty());\n    }\n']",Two;Exception;Three;bind;Equals;Three;Composite;Composite;name;Class,3.7834979593753815e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.863520622253418, -5.383289813995361, -4.664330005645752, -5.731781482696533, -5.442197322845459, -0.02473410777747631]",0.9755692481994629
2,"['    @Test\n    public void testListBindingsNameNotFound() throws Exception {\n        try {\n            nameStore.listBindings(new CompositeName(""test""));\n            fail(""Should have thrown and NameNotFoundException"");\n        } catch(NameNotFoundException expected) {}\n    }\n']",catch;have;Exception;Should;Exception;Bindings;Not;Name;Name;thrown,4.6566128730773926e-09;1.7462298274040222e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.977126598358154, -5.533032417297363, -4.61578369140625, -5.8586812019348145, -5.407391548156738, -0.0240086168050766]",0.9762771725654602
2,"['    @Test\n    public void testListBindings() throws Exception {\n        final Name name = new CompositeName(""test"");\n        final Object object = new Object();\n        nameStore.bind(name, object);\n        final Name nameTwo = new CompositeName(""testTwo"");\n        final Object objectTwo = new Object();\n        nameStore.bind(nameTwo, objectTwo);\n        final Name nameThree = new CompositeName(""testThree"");\n        final Object objectThree = new Object();\n        nameStore.bind(nameThree, objectThree);\n\n        nameStore.bind(new CompositeName(""testContext/test""), ""test"");\n\n        final List<Binding> results = nameStore.listBindings(new CompositeName());\n        assertEquals(4, results.size());\n        final Set<String> expected = new HashSet<String>(Arrays.asList(""test"", ""testTwo"", ""testThree"", ""testContext""));\n        for(Binding result : results) {\n            final String resultName = result.getName();\n            if(""test"".equals(resultName)) {\n                assertEquals(Object.class.getName(), result.getClassName());\n                assertEquals(object, result.getObject());\n            } else if(""testTwo"".equals(resultName)) {\n                assertEquals(Object.class.getName(), result.getClassName());\n                assertEquals(objectTwo, result.getObject());\n            } else if(""testThree"".equals(resultName)) {\n                assertEquals(Object.class.getName(), result.getClassName());\n                assertEquals(objectThree, result.getObject());\n            } else if(""testContext"".equals(resultName)) {\n                assertEquals(Context.class.getName(), result.getClassName());\n            } else {\n                fail(""Unknown result name: "" + resultName);\n            }\n            expected.remove(resultName);\n        }\n        assertTrue(""Not all expected results were returned"", expected.isEmpty());\n    }\n']",list;List;Exception;expected;Composite;Composite;List;Composite;Two;Two,1.0477378964424133e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.877771377563477, -5.427501678466797, -4.661457538604736, -5.733623504638672, -5.4295549392700195, -0.024567440152168274]",0.9757319092750549
2,"['    @Test\n    public void testAutoRemove() throws Exception {\n        nameStore.bind(new CompositeName(""test/item""), new Object());\n\n        assertNotNull(nameStore.lookup(new CompositeName(""test/item"")));\n        assertNotNull(nameStore.lookup(new CompositeName(""test"")));\n\n        nameStore.unbind(new CompositeName(""test/item""));\n\n        try {\n            nameStore.lookup(new CompositeName(""test""));\n            fail(""Should have throw name not found exception"");\n        } catch (NameNotFoundException expected){}\n    }\n']",fail;item;Remove;Composite;new;Exception;found;Name;Store;Name,1.076841726899147e-09;6.548361852765083e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.912172794342041, -5.596802234649658, -4.666791915893555, -5.758214473724365, -5.326735019683838, -0.024123596027493477]",0.9761649370193481
2,"['    @Test\n    public void testInitialFactory() throws Exception {\n        // Test with sys prop\n        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());\n        InitialContext initialContext = new InitialContext();\n        Context context = (Context) initialContext.lookup("""");\n        assertTrue(context instanceof NamingContext);\n\n        // Test with builder\n        if (!NamingManager.hasInitialContextFactoryBuilder()) {\n            NamingManager.setInitialContextFactoryBuilder(new InitialContextFactoryBuilder());\n        }\n        initialContext = new InitialContext();\n        context = (Context) initialContext.lookup("""");\n        assertTrue(context instanceof NamingContext);\n    }\n']",Factory;Initial;Factory;Name;Initial;Builder;builder;Initial;Manager;aming,6.111804395914078e-10;5.529727786779404e-10;4.94765117764473e-10;4.94765117764473e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.637978807091713e-10,5,5,"[-5.944098949432373, -5.559698581695557, -4.662416934967041, -5.793571949005127, -5.373794078826904, -0.02388128824532032]",0.9764016270637512
2,"['    @Test\n    public void testJavaContext() throws Exception {\n        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());\n        System.setProperty(Context.URL_PKG_PREFIXES, ""org.jboss.as.naming.interfaces"");\n        InitialContext initialContext = new InitialContext();\n        Context context = (Context) initialContext.lookup(""java:"");\n        assertTrue(context instanceof NamingContext);\n    }\n']",Name;org;Initial;lookup;Property;Exception;Context;System;REFIXES;Context,9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.956857681274414, -5.5661749839782715, -4.654643535614014, -5.802512168884277, -5.383251190185547, -0.02382483519613743]",0.9764567613601685
2,"['    @Test\n    public void testTransformersEAP700() throws Exception {\n        testTransformers(ModelTestControllerVersion.EAP_7_0_0, legacyVersion, ""/jsf-transformers.xml"");\n    }\n']",Version;AP;js;Transformers;Exception;Version;Controller;xml;Model;legacy,2.2118911147117615e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2223608791828156e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.990625381469727, -5.641461372375488, -4.604156494140625, -5.861536979675293, -5.3545074462890625, -0.02391725406050682]",0.976366400718689
2,"['    @Test\n    public void testRejectTransformersEAP700() throws Exception {\n        doRejectTest(ModelTestControllerVersion.EAP_7_0_0, legacyVersion);\n    }\n']",AP;do;Version;Reject;Model;Exception;Version;AP;legacy;Reject,1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;2.3283064365386963e-10;1.7462298274040222e-10;-1.7462298274040222e-10;-4.656612873077393e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.0040821507573128e-09,5,5,"[-6.0160040855407715, -5.647950649261475, -4.5676445960998535, -5.909813404083252, -5.381698131561279, -0.02394355833530426]",0.9763408303260803
2,['    @Test\n    public void testSchemaOfSubsystemTemplates() throws Exception {\n        super.testSchemaOfSubsystemTemplates();\n    }\n'],Subsystem;Exception;Schema;Subsystem;super;Templates;Schema;Templates,1.6589183360338211e-09;8.149072527885437e-10;-1.7462298274040222e-10;-1.7462298274040222e-10;-5.238689482212067e-10;-5.529727786779404e-10;-1.9208528101444244e-09;-2.1245796233415604e-09,5,5,"[-6.007537841796875, -5.582716941833496, -4.561617851257324, -5.909068584442139, -5.404678821563721, -0.024167582392692566]",0.9761221408843994
2,"['     @Test\n     public void noModulePathTest() {\n     JSFModuleIdFactory factory = JSFModuleIdFactory.getInstance();\n     Assert.assertEquals(1, factory.getActiveJSFVersions().size());\n\n     Assert.assertEquals(API_MODULE, factory.getApiModId(""main"").getName());\n     Assert.assertEquals(""main"", factory.getApiModId(""main"").getSlot());\n     Assert.assertEquals(IMPL_MODULE, factory.getImplModId(""main"").getName());\n     Assert.assertEquals(""main"", factory.getImplModId(""main"").getSlot());\n     Assert.assertEquals(INJECTION_MODULE, factory.getInjectionModId(""main"").getName());\n     Assert.assertEquals(""main"", factory.getInjectionModId(""main"").getSlot());\n     } */\n']",IMPL;Slot;MODULE;INJECTION;Instance;Factory;Slot;Assert;main;MODULE,1.862645149230957e-09;1.3969838619232178e-09;1.3387762010097504e-09;7.566995918750763e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.220055416226387e-10;3.346940502524376e-10,5,5,"[-5.85823917388916, -5.577006816864014, -4.681715488433838, -5.72277307510376, -5.284430980682373, -0.0245425496250391]",0.9757561683654785
2,"['    @Test\n    public void getActiveJSFVersionsTest() {\n        List<String> versions = factory.getActiveJSFVersions();\n        Assert.assertEquals(3, versions.size());\n        Assert.assertTrue(versions.contains(""main""));\n        Assert.assertFalse(versions.contains(""1.2""));\n        Assert.assertTrue(versions.contains(""myfaces""));\n        Assert.assertTrue(versions.contains(""myfaces2""));\n    }\n']",myfaces;Assert;Equals;contains;True;contains;versions;contains;Active;versions,6.984919309616089e-10;5.529727786779404e-10;5.456968210637569e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.943711280822754, -5.628493785858154, -4.63412618637085, -5.7944817543029785, -5.3472747802734375, -0.02402246743440628]",0.9762637615203857
2,"['    @Test\n    public void computeSlotTest() {\n        Assert.assertEquals(""main"", factory.computeSlot(""main""));\n        Assert.assertEquals(""main"", factory.computeSlot(null));\n        Assert.assertEquals(""main"", factory.computeSlot(JsfVersionMarker.JSF_2_0));\n        Assert.assertEquals(""myfaces2"", factory.computeSlot(""myfaces2""));\n    }\n']",Slot;myfaces;Slot;JS;Slot;compute;Equals;factory;Assert;myfaces,1.6880221664905548e-09;1.2223608791828156e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.888937950134277, -5.61958122253418, -4.662303447723389, -5.761027812957764, -5.283112525939941, -0.024359561502933502]",0.9759347438812256
2,"['    @Test\n    public void validSlotTest() {\n        Assert.assertTrue(factory.isValidJSFSlot(""main""));\n        Assert.assertFalse(factory.isValidJSFSlot(""1.2""));\n        Assert.assertTrue(factory.isValidJSFSlot(""myfaces""));\n        Assert.assertTrue(factory.isValidJSFSlot(""myfaces2""));\n        Assert.assertTrue(factory.isValidJSFSlot(JsfVersionMarker.JSF_2_0));\n        Assert.assertFalse(factory.isValidJSFSlot(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL));\n        Assert.assertFalse(factory.isValidJSFSlot(""bogus""));\n        Assert.assertFalse(factory.isValidJSFSlot(""bogus2""));\n   }\n']",JSFSlot;myfaces;JSFSlot;JS;JSFSlot;Assert;JS;Version;False;UNDLES,8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.874891601502895e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.8629069328308105, -5.522892475128174, -4.661419868469238, -5.768276214599609, -5.338768482208252, -0.024515213444828987]",0.9757828712463379
2,"['    @Test\n    public void modIdsTest() {\n        Assert.assertEquals(API_MODULE, factory.getApiModId(""main"").getName());\n        Assert.assertEquals(""main"", factory.getApiModId(""main"").getSlot());\n        Assert.assertEquals(IMPL_MODULE, factory.getImplModId(""main"").getName());\n        Assert.assertEquals(""main"", factory.getImplModId(""main"").getSlot());\n        Assert.assertEquals(INJECTION_MODULE, factory.getInjectionModId(""main"").getName());\n        Assert.assertEquals(""main"", factory.getInjectionModId(""main"").getSlot());\n\n        Assert.assertEquals(API_MODULE, factory.getApiModId(""myfaces"").getName());\n        Assert.assertEquals(""myfaces"", factory.getApiModId(""myfaces"").getSlot());\n        Assert.assertEquals(IMPL_MODULE, factory.getImplModId(""myfaces"").getName());\n        Assert.assertEquals(""myfaces"", factory.getImplModId(""myfaces"").getSlot());\n        Assert.assertEquals(INJECTION_MODULE, factory.getInjectionModId(""myfaces"").getName());\n        Assert.assertEquals(""myfaces"", factory.getInjectionModId(""myfaces"").getSlot());\n\n        Assert.assertEquals(API_MODULE, factory.getApiModId(""myfaces2"").getName());\n        Assert.assertEquals(""myfaces2"", factory.getApiModId(""myfaces2"").getSlot());\n        Assert.assertEquals(IMPL_MODULE, factory.getImplModId(""myfaces2"").getName());\n        Assert.assertEquals(""myfaces2"", factory.getImplModId(""myfaces2"").getSlot());\n        Assert.assertEquals(INJECTION_MODULE, factory.getInjectionModId(""myfaces2"").getName());\n        Assert.assertEquals(""myfaces2"", factory.getInjectionModId(""myfaces2"").getSlot());\n    }\n']",Impl;Impl;myfaces;IMPL;main;Slot;MODULE;Assert;main;Slot,5.238689482212067e-10;4.0745362639427185e-10;3.92901711165905e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.8225202560424805, -5.447213172912598, -4.657863140106201, -5.736201763153076, -5.352807521820068, -0.025027599185705185]",0.9752829670906067
2,"['    @Test\n    public void testParseSubsystem() throws Exception {\n        //Parse the subsystem xml into operations\n        List<ModelNode> operations = super.parse(getSubsystemXml());\n\n        ///Check that we have the expected number of operations\n        //log.info(""operations: "" + operations);\n        //log.info(""operations.size: "" + operations.size());\n        Assert.assertEquals(7, operations.size());\n\n        //Check that each operation has the correct content\n        ModelNode addSubsystem = operations.get(0);\n        Assert.assertEquals(ADD, addSubsystem.get(OP).asString());\n        PathAddress addr = PathAddress.pathAddress(addSubsystem.get(OP_ADDR));\n        Assert.assertEquals(1, addr.size());\n        PathElement element = addr.getElement(0);\n        Assert.assertEquals(SUBSYSTEM, element.getKey());\n        Assert.assertEquals(MailExtension.SUBSYSTEM_NAME, element.getValue());\n    }\n']",ADDR;has;of;Subsystem;size;STEM;have;Equals;Equals;Subsystem,7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.91605281829834, -5.498061656951904, -4.6665496826171875, -5.773901462554932, -5.417631149291992, -0.024026772007346153]",0.9762595891952515
2,"['    @Test\n    public void testTransformerEAP700() throws Exception {\n        testTransformation(ModelTestControllerVersion.EAP_7_0_0, MODEL_VERSION_EAP70);\n    }\n']",AP;MODEL;Version;VERSION;AP;Transformer;Transformation;Exception;AP;Model,1.862645149230957e-09;1.2223608791828156e-09;9.313225746154785e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-6.984919309616089e-10;-1.0477378964424133e-09,5,5,"[-5.981753349304199, -5.610856533050537, -4.594036102294922, -5.879471302032471, -5.372401714324951, -0.024019673466682434]",0.9762665033340454
2,"['    @Test\n    public void testTransformerEAP640() throws Exception {\n        testTransformation(ModelTestControllerVersion.EAP_6_4_0, MODEL_VERSION_EAP6X);\n    }\n']",Transformer;Transformation;Controller;AP;Exception;Model;VERSION;AP;Version;MODEL,1.3969838619232178e-09;1.3387762010097504e-09;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-9.313225746154785e-10;-1.0477378964424133e-09,5,5,"[-5.977453708648682, -5.598419189453125, -4.589967250823975, -5.881967067718506, -5.380620002746582, -0.02407378889620304]",0.9762135744094849
2,"['    @Test\n    public void testRejectingTransformersEAP_7_0_0() throws Exception {\n        testRejectingTransformers(EAP_7_0_0, MODEL_VERSION_EAP70);\n    }\n']",Transformers;VERSION;AP;Transformers;AP;Exception;AP;Rejecting;Rejecting;MODEL,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;2.9103830456733704e-10;5.820766091346741e-11;0.0;-8.149072527885437e-10;-8.731149137020111e-10;-1.3096723705530167e-09;-2.4156179279088974e-09,5,5,"[-5.960899829864502, -5.586036205291748, -4.619187831878662, -5.857729911804199, -5.368963241577148, -0.023990346118807793]",0.976294994354248
2,"['    @Test\n    public void testRejectingTransformersEAP_6_4_0() throws Exception {\n        testRejectingTransformers(EAP_6_4_0, MODEL_VERSION_EAP6X);\n    }\n']",MODEL;Rejecting;Transformers;Rejecting;AP;Transformers;Exception;AP;AP;VERSION,2.7939677238464355e-09;8.149072527885437e-10;6.984919309616089e-10;4.3655745685100555e-10;2.3283064365386963e-10;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-1.1641532182693481e-09;-3.958120942115784e-09,5,5,"[-5.9542717933654785, -5.5944719314575195, -4.620668888092041, -5.856556415557861, -5.35313606262207, -0.02404027245938778]",0.9762464165687561
2,"['    @Test\n    public void testExpressions() throws Exception {\n        standardSubsystemTest(""subsystem_1_1_expressions.xml"", false);\n    }\n']",Expressions;Subsystem;subsystem;xml;false;Exception;expressions;standard,2.561137080192566e-09;2.2118911147117615e-09;1.5133991837501526e-09;4.656612873077393e-10;4.656612873077393e-10;-1.3969838619232178e-09;-1.6880221664905548e-09;-3.14321368932724e-09,5,5,"[-6.006205081939697, -5.600897312164307, -4.578460693359375, -5.894368648529053, -5.387454032897949, -0.02404388040304184]",0.9762428998947144
2,"['    @Test\n    public void test11() throws Exception {\n        standardSubsystemTest(""subsystem_1_1.xml"", false);\n    }\n']",xml;standard;Subsystem;Exception;false;subsystem,3.259629011154175e-09;2.561137080192566e-09;1.3969838619232178e-09;-5.820766091346741e-11;-3.4924596548080444e-10;-1.6298145055770874e-09,5,5,"[-6.001866817474365, -5.620700359344482, -4.582147598266602, -5.883386611938477, -5.3581929206848145, -0.024112191051244736]",0.9761760830879211
2,"['    @Test\n    public void test12() throws Exception {\n        standardSubsystemTest(""subsystem_1_2.xml"", false);\n    }\n']",subsystem;Subsystem;Exception;false;xml;standard,1.862645149230957e-09;1.3969838619232178e-09;0.0;-6.984919309616089e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.996456146240234, -5.626405715942383, -4.5839738845825195, -5.874820709228516, -5.348406791687012, -0.02415769174695015]",0.9761316776275635
2,"['    @Test\n    public void testRuntime() throws Exception {\n        KernelServicesBuilder builder = createKernelServicesBuilder(new DefaultInitializer())\n                .setSubsystemXml(getSubsystemXml());\n        KernelServices mainServices = builder.build();\n        if (!mainServices.isSuccessfulBoot()) {\n            Assert.fail(mainServices.getBootError().toString());\n        }\n        ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""defaultMail""));\n        javaMailService.setMode(ServiceController.Mode.ACTIVE);\n        Session session = (Session) javaMailService.getValue();\n        Assert.assertNotNull(""session should not be null"", session);\n        Properties properties = session.getProperties();\n        Assert.assertNotNull(""smtp host should be set"", properties.getProperty(""mail.smtp.host""));\n        Assert.assertNotNull(""pop3 host should be set"", properties.getProperty(""mail.pop3.host""));\n        Assert.assertNotNull(""imap host should be set"", properties.getProperty(""mail.imap.host""));\n\n        ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""default2""));\n        session = (Session) defaultMailService.getValue();\n        Assert.assertEquals(""Debug should be true"", true, session.getDebug());\n\n\n        ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""custom""));\n        session = (Session) customMailService.getValue();\n        properties = session.getProperties();\n        String host = properties.getProperty(""mail.smtp.host"");\n        Assert.assertNotNull(""smtp host should be set"", host);\n        Assert.assertEquals(""mail.example.com"", host);\n\n        Assert.assertEquals(""localhost"", properties.get(""mail.pop3.host"")); //this one should be read out of socket binding\n        Assert.assertEquals(""some-custom-prop-value"", properties.get(""mail.pop3.custom_prop"")); //this one should be extra property\n        Assert.assertEquals(""fully-qualified-prop-name"", properties.get(""some.fully.qualified.property"")); //this one should be extra property\n\n        MailSessionService service = (MailSessionService) customMailService.getService();\n        Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials();\n        Assert.assertEquals(credentials.getUsername(), ""username"");\n        Assert.assertEquals(credentials.getPassword(), ""password"");\n\n\n    }\n']",Kernel;new;Initializer;Service;Service;CAP;Kernel;Mode;Services;properties,4.802132025361061e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6921043172478676e-10,5,5,"[-5.899849891662598, -5.472633361816406, -4.684316635131836, -5.734029293060303, -5.404101371765137, -0.02420179173350334]",0.97608882188797
2,['    @Test\n    public void testSchemaOfSubsystemTemplates() throws Exception {\n        super.testSchemaOfSubsystemTemplates();\n    }\n'],Subsystem;Exception;Schema;Subsystem;super;Templates;Schema;Templates,1.6589183360338211e-09;8.149072527885437e-10;-1.7462298274040222e-10;-1.7462298274040222e-10;-5.238689482212067e-10;-5.529727786779404e-10;-1.9208528101444244e-09;-2.1245796233415604e-09,5,5,"[-6.007537841796875, -5.582716941833496, -4.561617851257324, -5.909068584442139, -5.404678821563721, -0.024167582392692566]",0.9761221408843994
2,"['    @Test\n    public void testRuntime() throws Exception {\n        KernelServicesBuilder builder = createKernelServicesBuilder(new DefaultInitializer())\n                .setSubsystemXml(getSubsystemXml());\n        KernelServices mainServices = builder.build();\n        if (!mainServices.isSuccessfulBoot()) {\n            Assert.fail(mainServices.getBootError().toString());\n        }\n        ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""defaultMail""));\n        javaMailService.setMode(ServiceController.Mode.ACTIVE);\n        Session session = (Session) javaMailService.getValue();\n        Assert.assertNotNull(""session should not be null"", session);\n        Properties properties = session.getProperties();\n        Assert.assertNotNull(""smtp host should be set"", properties.getProperty(""mail.smtp.host""));\n        Assert.assertNotNull(""pop3 host should be set"", properties.getProperty(""mail.pop3.host""));\n        Assert.assertNotNull(""imap host should be set"", properties.getProperty(""mail.imap.host""));\n        PasswordAuthentication auth = session.requestPasswordAuthentication(InetAddress.getLocalHost(), 25, ""smtp"", """", """");\n        Assert.assertEquals(""nobody"", auth.getUserName());\n        Assert.assertEquals(""pass"", auth.getPassword());\n\n        ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""default2""));\n        session = (Session) defaultMailService.getValue();\n        Assert.assertEquals(""Debug should be true"", true, session.getDebug());\n\n\n        ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""custom""));\n        session = (Session) customMailService.getValue();\n        properties = session.getProperties();\n        String host = properties.getProperty(""mail.smtp.host"");\n        Assert.assertNotNull(""smtp host should be set"", host);\n        Assert.assertEquals(""mail.example.com"", host);\n\n        Assert.assertEquals(""localhost"", properties.get(""mail.pop3.host"")); //this one should be read out of socket binding\n        Assert.assertEquals(""some-custom-prop-value"", properties.get(""mail.pop3.custom_prop"")); //this one should be extra property\n        Assert.assertEquals(""fully-qualified-prop-name"", properties.get(""some.fully.qualified.property"")); //this one should be extra property\n\n        MailSessionService service = (MailSessionService) customMailService.getService();\n        Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials();\n        Assert.assertEquals(credentials.getUsername(), ""username"");\n        Assert.assertEquals(credentials.getPassword(), ""password"");\n\n\n    }\n']",ernel;Service;Password;Password;Equals;Services;Kernel;auth;Subsystem;Local,5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.837623469531536e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.905603885650635, -5.479862689971924, -4.68538236618042, -5.732340335845947, -5.403809070587158, -0.024151522666215897]",0.9761378765106201
2,"['    @Test\n    public void testOperations() throws Exception {\n        KernelServicesBuilder builder = createKernelServicesBuilder(new DefaultInitializer())\n                .setSubsystemXml(getSubsystemXml());\n        KernelServices mainServices = builder.build();\n        if (!mainServices.isSuccessfulBoot()) {\n            Assert.fail(mainServices.getBootError().toString());\n        }\n\n        PathAddress sessionAddress = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), ""defaultMail""));\n        ModelNode result;\n\n        ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append(""server"", ""imap""));\n        removeServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n        result = mainServices.executeOperation(removeServerOp);\n        checkResult(result);\n\n        ModelNode addServerOp = Util.createAddOperation(sessionAddress.append(""server"", ""imap""));\n        addServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n        addServerOp.get(""outbound-socket-binding-ref"").set(""mail-imap"");\n        addServerOp.get(""username"").set(""user"");\n        addServerOp.get(""password"").set(""pswd"");\n\n        result = mainServices.executeOperation(addServerOp);\n        checkResult(result);\n\n        checkResult(mainServices.executeOperation(removeServerOp)); //to make sure noting is left behind\n        checkResult(mainServices.executeOperation(addServerOp));\n\n        ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress);\n        writeOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n        writeOp.get(""name"").set(""debug"");\n        writeOp.get(""value"").set(false);\n        result = mainServices.executeOperation(writeOp);\n        checkResult(result);\n\n\n        ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""defaultMail""));\n        javaMailService.setMode(ServiceController.Mode.ACTIVE);\n        Session session = (Session) javaMailService.getValue();\n        Assert.assertNotNull(""session should not be null"", session);\n        Properties properties = session.getProperties();\n        Assert.assertNotNull(""smtp host should be set"", properties.getProperty(""mail.smtp.host""));\n        Assert.assertNotNull(""imap host should be set"", properties.getProperty(""mail.imap.host""));\n\n\n        PathAddress nonExisting = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), ""non-existing-session""));\n        ModelNode addSession = Util.createAddOperation(nonExisting);\n        addSession.get(""jndi-name"").set(""java:/bah"");\n        checkResult(mainServices.executeOperation(addSession));\n        removeServerOp = Util.createRemoveOperation(nonExisting.append(""server"", ""imap""));\n        //removeServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n        result = mainServices.executeOperation(removeServerOp);\n        checkForFailure(result);\n\n\n    }\n']",Operations;Successful;imap;SERVICE;Subsystem;Builder;Element;RESOURCE;ernel;Extension,6.402842700481415e-10;5.529727786779404e-10;5.529727786779404e-10;5.384208634495735e-10;4.94765117764473e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.878293514251709, -5.406867027282715, -4.68158483505249, -5.736739158630371, -5.412200450897217, -0.024535220116376877]",0.9757633209228516
2,"['    @Test\n    public void shouldRecordStarts() {\n        assertEquals(0, counter.starts());\n        counter.recordStart();\n        assertEquals(1, counter.starts());\n        counter.recordStart();\n        assertEquals(2, counter.starts());\n        assertEquals(2, counter.starts());\n    }\n']",Starts;starts;counter;should;record;Record;starts;Start;counter;counter,1.1641532182693481e-09;1.0477378964424133e-09;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-5.975622653961182, -5.607646465301514, -4.5933990478515625, -5.858936309814453, -5.389047145843506, -0.024035152047872543]",0.9762513637542725
2,"['    @Test\n    public void shouldRecordStops() {\n        assertEquals(0, counter.stops());\n        counter.recordStop();\n        assertEquals(1, counter.stops());\n        counter.recordStop();\n        assertEquals(2, counter.stops());\n        assertEquals(2, counter.stops());\n    }\n']",should;Stops;counter;Stop;counter;counter;Equals;stops;stops;Equals,1.5133991837501526e-09;1.1641532182693481e-09;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.4551915228366852e-10;8.731149137020111e-11,5,5,"[-5.973296165466309, -5.62073278427124, -4.6068572998046875, -5.841187953948975, -5.377984046936035, -0.023958107456564903]",0.9763265252113342
2,"['    @Test\n    public void shouldExpectRestarts() throws Exception {\n        waiters = Executors.newSingleThreadExecutor();\n\n        latch = counter.expectedRestarts(1);\n        Future<Boolean> future = asyncAwait(100, TimeUnit.MILLISECONDS);\n\n        clock.sleep(1000);\n        counter.recordStop();\n        counter.recordStart();\n        assertTrue(future.get(200, TimeUnit.MILLISECONDS));\n        assertTrue(future.isDone());\n    }\n']",ILLISECONDS;async;future;Executor;record;new;Unit;record;waiters;Done,1.4551915228366852e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10,5,5,"[-5.962680339813232, -5.530030250549316, -4.632124423980713, -5.8386077880859375, -5.412349700927734, -0.023931104689836502]",0.9763529896736145
2,"['    @Test\n    public void shouldFailToWaitForRestartThatNeverHappens() throws Exception {\n        waiters = Executors.newSingleThreadExecutor();\n\n        latch = counter.expectedRestarts(1);\n        Future<Boolean> future = asyncAwait(100, TimeUnit.MILLISECONDS);\n\n        clock.sleep(1000);\n        // Record a stop but NOT a start\n        counter.recordStop();\n        assertFalse(future.get(200, TimeUnit.MILLISECONDS));\n        assertTrue(future.isDone());\n    }\n']",Restarts;False;Wait;future;Record;NOT;Done;counter;start;new,9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.95745325088501, -5.517103672027588, -4.649855613708496, -5.820506572723389, -5.414280414581299, -0.0238681361079216]",0.9764144420623779
2,"['    @Test\n    public void testAddAndRemoveWorker() throws Exception {\n        connect = connectBuilder.build();\n        // start the clusters\n        connect.start();\n\n        int numTasks = 4;\n        // create test topic\n        connect.kafka().createTopic(""test-topic"", NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the sink connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(numTasks));\n        props.put(""throughput"", String.valueOf(1));\n        props.put(""messages.per.poll"", String.valueOf(10));\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),\n                WORKER_SETUP_DURATION_MS, ""Initial group of workers did not start in time."");\n\n        // start a source connector\n        connect.configureConnector(CONNECTOR_NAME, props);\n\n        waitForCondition(() -> assertConnectorAndTasksRunning(CONNECTOR_NAME, numTasks).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        WorkerHandle extraWorker = connect.addWorker();\n\n        waitForCondition(() -> assertWorkersUp(NUM_WORKERS + 1).orElse(false),\n                WORKER_SETUP_DURATION_MS, ""Expanded group of workers did not start in time."");\n\n        waitForCondition(() -> assertConnectorAndTasksRunning(CONNECTOR_NAME, numTasks).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks are not all in running state."");\n\n        Set<WorkerHandle> workers = connect.activeWorkers();\n        assertTrue(workers.contains(extraWorker));\n\n        connect.removeWorker(extraWorker);\n\n        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false) && !assertWorkersUp(NUM_WORKERS + 1).orElse(false),\n                WORKER_SETUP_DURATION_MS, ""Group of workers did not shrink in time."");\n\n        workers = connect.activeWorkers();\n        assertFalse(workers.contains(extraWorker));\n    }\n']",group;poll;connector;the;topic;Else;PARTITIONS;Connector;value;start,9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.913651466369629, -5.44030237197876, -4.664245128631592, -5.790920734405518, -5.446048259735107, -0.024123944342136383]",0.976164698600769
2,"['    @Test\n    public void testRestartFailedTask() throws Exception {\n        connect = connectBuilder.build();\n        // start the clusters\n        connect.start();\n\n        int numTasks = 1;\n\n        // Properties for the source connector. The task should fail at startup due to the bad broker address.\n        Map<String, String> connectorProps = new HashMap<>();\n        connectorProps.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getName());\n        connectorProps.put(TASKS_MAX_CONFIG, Objects.toString(numTasks));\n        connectorProps.put(CONNECTOR_CLIENT_PRODUCER_OVERRIDES_PREFIX + BOOTSTRAP_SERVERS_CONFIG, ""nobrokerrunningatthisaddress"");\n\n        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),\n                WORKER_SETUP_DURATION_MS, ""Initial group of workers did not start in time."");\n\n        // Try to start the connector and its single task.\n        connect.configureConnector(CONNECTOR_NAME, connectorProps);\n\n        waitForCondition(() -> assertConnectorTasksFailed(CONNECTOR_NAME, numTasks).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not fail in time"");\n\n        // Reconfigure the connector without the bad broker address.\n        connectorProps.remove(CONNECTOR_CLIENT_PRODUCER_OVERRIDES_PREFIX + BOOTSTRAP_SERVERS_CONFIG);\n        connect.configureConnector(CONNECTOR_NAME, connectorProps);\n\n        // Restart the failed task\n        String taskRestartEndpoint = connect.endpointForResource(\n            String.format(""connectors/%s/tasks/0/restart"", CONNECTOR_NAME));\n        connect.executePost(taskRestartEndpoint, """", Collections.emptyMap());\n\n        // Ensure the task started successfully this time\n        waitForCondition(() -> assertConnectorAndTasksRunning(CONNECTOR_NAME, numTasks).orElse(false),\n            CONNECTOR_SETUP_DURATION_MS, ""Connector tasks are not all in running state."");\n    }\n']",workers;or;startup;Properties;Else;ailed;MAX;BOOTSTRAP;to;or,6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.848568916320801, -5.435046672821045, -4.712939739227295, -5.717097282409668, -5.371746063232422, -0.024455305188894272]",0.9758412837982178
2,"['    @Test\n    public void testBrokerCoordinator() throws Exception {\n        workerProps.put(DistributedConfig.SCHEDULED_REBALANCE_MAX_DELAY_MS_CONFIG, String.valueOf(5000));\n        connect = connectBuilder.workerProps(workerProps).build();\n        // start the clusters\n        connect.start();\n        int numTasks = 4;\n        // create test topic\n        connect.kafka().createTopic(""test-topic"", NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the sink connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(numTasks));\n        props.put(""topic"", ""test-topic"");\n        props.put(""throughput"", String.valueOf(1));\n        props.put(""messages.per.poll"", String.valueOf(10));\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),\n                WORKER_SETUP_DURATION_MS, ""Initial group of workers did not start in time."");\n\n        // start a source connector\n        connect.configureConnector(CONNECTOR_NAME, props);\n\n        waitForCondition(() -> assertConnectorAndTasksRunning(CONNECTOR_NAME, numTasks).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        connect.kafka().stopOnlyKafka();\n\n        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),\n                WORKER_SETUP_DURATION_MS, ""Group of workers did not remain the same after broker shutdown"");\n\n        // Allow for the workers to discover that the coordinator is unavailable, wait is\n        // heartbeat timeout * 2 + 4sec\n        Thread.sleep(TimeUnit.SECONDS.toMillis(10));\n\n        connect.kafka().startOnlyKafkaOnSamePorts();\n\n        // Allow for the kafka brokers to come back online\n        Thread.sleep(TimeUnit.SECONDS.toMillis(10));\n\n        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),\n                WORKER_SETUP_DURATION_MS, ""Group of workers did not remain the same within the ""\n                        + ""designated time."");\n\n        // Allow for the workers to rebalance and reach a steady state\n        Thread.sleep(TimeUnit.SECONDS.toMillis(10));\n\n        waitForCondition(() -> assertConnectorAndTasksRunning(CONNECTOR_NAME, numTasks).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n    }\n']",Else;SETUP;Broker;asks;MAX;asks;poll;Workers;build;For,7.566995918750763e-10;5.675246939063072e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.951350212097168, -5.466729640960693, -4.653055667877197, -5.806514263153076, -5.4649338722229, -0.023883266374468803]",0.9763996601104736
2,"['    @Test\n    public void testStartTwoConnectors() throws Exception {\n        // create test topic\n        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the source connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n        props.put(""throughput"", String.valueOf(1));\n        props.put(""messages.per.poll"", String.valueOf(10));\n        props.put(TOPIC_CONFIG, TOPIC_NAME);\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        // start a source connector\n        connect.configureConnector(CONNECTOR_NAME, props);\n\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME, NUM_TASKS).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        // start a source connector\n        connect.configureConnector(""another-source"", props);\n\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME, NUM_TASKS).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(""another-source"", 4).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n    }\n']",CONFIG;topic;wait;CONFIG;ASKS;Connector;Monitorable;or;CONNECTOR;source,6.45741238258779e-10;5.820766091346741e-10;5.238689482212067e-10;4.729372449219227e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.255546860396862e-10,5,5,"[-5.9135966300964355, -5.474838733673096, -4.659322738647461, -5.7878923416137695, -5.4313130378723145, -0.024095900356769562]",0.9761919975280762
2,"['    @Test\n    public void testReconfigConnector() throws Exception {\n        ConnectorHandle connectorHandle = RuntimeHandles.get().connectorHandle(CONNECTOR_NAME);\n\n        // create test topic\n        String anotherTopic = ""another-topic"";\n        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);\n        connect.kafka().createTopic(anotherTopic, NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the source connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n        props.put(""throughput"", String.valueOf(1));\n        props.put(""messages.per.poll"", String.valueOf(10));\n        props.put(TOPIC_CONFIG, TOPIC_NAME);\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        // start a source connector\n        connect.configureConnector(CONNECTOR_NAME, props);\n\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME, NUM_TASKS).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        int numRecordsProduced = 100;\n        long recordTransferDurationMs = TimeUnit.SECONDS.toMillis(30);\n\n        // consume all records from the source topic or fail, to ensure that they were correctly produced\n        int recordNum = connect.kafka().consume(numRecordsProduced, recordTransferDurationMs, TOPIC_NAME).count();\n        assertTrue(""Not enough records produced by source connector. Expected at least: "" + numRecordsProduced + "" + but got "" + recordNum,\n                recordNum >= numRecordsProduced);\n\n        // expect that we\'re going to restart the connector and its tasks\n        StartAndStopLatch restartLatch = connectorHandle.expectedStarts(1);\n\n        // Reconfigure the source connector by changing the Kafka topic used as output\n        props.put(TOPIC_CONFIG, anotherTopic);\n        connect.configureConnector(CONNECTOR_NAME, props);\n\n        // Wait for the connector *and tasks* to be restarted\n        assertTrue(""Failed to alter connector configuration and see connector and tasks restart ""\n                   + ""within "" + CONNECTOR_SETUP_DURATION_MS + ""ms"",\n                restartLatch.await(CONNECTOR_SETUP_DURATION_MS, TimeUnit.MILLISECONDS));\n\n        // And wait for the Connect to show the connectors and tasks are running\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME, NUM_TASKS).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        // consume all records from the source topic or fail, to ensure that they were correctly produced\n        recordNum = connect.kafka().consume(numRecordsProduced, recordTransferDurationMs, anotherTopic).count();\n        assertTrue(""Not enough records produced by source connector. Expected at least: "" + numRecordsProduced + "" + but got "" + recordNum,\n                recordNum >= numRecordsProduced);\n    }\n']",PARTITIONS;PARTITIONS;Connector;poll;Handles;this;create;TOPIC;source;TOPIC,4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;3.92901711165905e-10;3.7834979593753815e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.9260172843933105, -5.410782814025879, -4.646510601043701, -5.825303077697754, -5.479659080505371, -0.02414407581090927]",0.9761450886726379
2,"['    @Test\n    public void testDeleteConnector() throws Exception {\n        // create test topic\n        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the source connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n        props.put(""throughput"", String.valueOf(1));\n        props.put(""messages.per.poll"", String.valueOf(10));\n        props.put(TOPIC_CONFIG, TOPIC_NAME);\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        waitForCondition(() -> this.assertWorkersUp(3),\n                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");\n\n        // start a source connector\n        IntStream.range(0, 4).forEachOrdered(\n            i -> {\n                try {\n                    connect.configureConnector(CONNECTOR_NAME + i, props);\n                } catch (IOException e) {\n                    throw new ConnectException(e);\n                }\n            });\n\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(true),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        // delete connector\n        connect.deleteConnector(CONNECTOR_NAME + 3);\n\n        waitForCondition(() -> !this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(true),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not stop in time."");\n\n        waitForCondition(this::assertConnectorAndTasksAreUnique,\n                WORKER_SETUP_DURATION_MS, ""Connect and tasks are imbalanced between the workers."");\n    }\n']",CONVERTER;TOPIC;connect;afka;Delete;Topic;CONNECTOR;TOPIC;source;Ordered,8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.6202330850064754e-10;4.220055416226387e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-5.954530715942383, -5.376046657562256, -4.637138843536377, -5.831682205200195, -5.517010688781738, -0.02414570562541485]",0.976143479347229
2,"['    @Test\n    public void testAddingWorker() throws Exception {\n        // create test topic\n        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the source connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n        props.put(""throughput"", String.valueOf(1));\n        props.put(""messages.per.poll"", String.valueOf(10));\n        props.put(TOPIC_CONFIG, TOPIC_NAME);\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        waitForCondition(() -> this.assertWorkersUp(3),\n                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");\n\n        // start a source connector\n        IntStream.range(0, 4).forEachOrdered(\n            i -> {\n                try {\n                    connect.configureConnector(CONNECTOR_NAME + i, props);\n                } catch (IOException e) {\n                    throw new ConnectException(e);\n                }\n            });\n\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        connect.addWorker();\n\n        waitForCondition(() -> this.assertWorkersUp(4),\n                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");\n\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        waitForCondition(this::assertConnectorAndTasksAreUnique,\n                WORKER_SETUP_DURATION_MS, ""Connect and tasks are imbalanced between the workers."");\n    }\n']",Workers;Monitorable;the;ASKS;Worker;NAME;TOPIC;connector;CONFIG;connector,7.8580342233181e-10;6.111804395914078e-10;5.238689482212067e-10;4.94765117764473e-10;4.220055416226387e-10;4.001776687800884e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.961422443389893, -5.385944843292236, -4.634731292724609, -5.834431171417236, -5.517477989196777, -0.02409450337290764]",0.9761934280395508
2,"['    @Test\n    public void testRemovingWorker() throws Exception {\n        // create test topic\n        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the source connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n        props.put(""throughput"", String.valueOf(1));\n        props.put(""messages.per.poll"", String.valueOf(10));\n        props.put(TOPIC_CONFIG, TOPIC_NAME);\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        waitForCondition(() -> this.assertWorkersUp(3),\n                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");\n\n        // start a source connector\n        IntStream.range(0, 4).forEachOrdered(\n            i -> {\n                try {\n                    connect.configureConnector(CONNECTOR_NAME + i, props);\n                } catch (IOException e) {\n                    throw new ConnectException(e);\n                }\n            });\n\n        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(false),\n                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");\n\n        connect.removeWorker();\n\n        waitForCondition(() -> this.assertWorkersUp(2),\n                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");\n\n        waitForCondition(this::assertConnectorAndTasksAreUnique,\n                WORKER_SETUP_DURATION_MS, ""Connect and tasks are imbalanced between the workers."");\n    }\n']",NAME;Connector;Worker;CONFIG;this;connector;TOPIC;poll;URATION;create,8.731149137020111e-10;6.548361852765083e-10;5.238689482212067e-10;4.802132025361061e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.960837364196777, -5.383257865905762, -4.634997844696045, -5.835048198699951, -5.517609119415283, -0.02410358004271984]",0.976184606552124
2,"['    @Test\n    public void ensureInternalEndpointIsSecured() throws Throwable {\n        final String connectorTasksEndpoint = connect.endpointForResource(String.format(\n            ""connectors/%s/tasks"",\n            CONNECTOR_NAME\n        ));\n        final Map<String, String> emptyHeaders = new HashMap<>();\n        final Map<String, String> invalidSignatureHeaders = new HashMap<>();\n        invalidSignatureHeaders.put(SIGNATURE_HEADER, ""S2Fma2Flc3F1ZQ=="");\n        invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER, ""HmacSHA256"");\n\n        // We haven\'t created the connector yet, but this should still return a 400 instead of a 404\n        // if the endpoint is secured\n        log.info(\n            ""Making a POST request to the {} endpoint with no connector started and no signature header; "" \n                + ""expecting 400 error response"",\n            connectorTasksEndpoint\n        );\n        assertEquals(\n            BAD_REQUEST.getStatusCode(),\n            connect.executePost(connectorTasksEndpoint, ""[]"", emptyHeaders)\n        );\n\n        // Try again, but with an invalid signature\n        log.info(\n            ""Making a POST request to the {} endpoint with no connector started and an invalid signature header; ""\n                + ""expecting 403 error response"",\n            connectorTasksEndpoint\n        );\n        assertEquals(\n            FORBIDDEN.getStatusCode(),\n            connect.executePost(connectorTasksEndpoint, ""[]"", invalidSignatureHeaders)\n        );\n\n        // Create the connector now\n        // setup up props for the sink connector\n        Map<String, String> connectorProps = new HashMap<>();\n        connectorProps.put(CONNECTOR_CLASS_CONFIG, MonitorableSinkConnector.class.getSimpleName());\n        connectorProps.put(TASKS_MAX_CONFIG, String.valueOf(1));\n        connectorProps.put(TOPICS_CONFIG, ""test-topic"");\n        connectorProps.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        // start a sink connector\n        log.info(""Starting the {} connector"", CONNECTOR_NAME);\n        StartAndStopLatch startLatch = connectorHandle.expectedStarts(1);\n        connect.configureConnector(CONNECTOR_NAME, connectorProps);\n        startLatch.await(CONNECTOR_SETUP_DURATION_MS, TimeUnit.MILLISECONDS);\n\n\n        // Verify the exact same behavior, after starting the connector\n\n        // We haven\'t created the connector yet, but this should still return a 400 instead of a 404\n        // if the endpoint is secured\n        log.info(\n            ""Making a POST request to the {} endpoint with the connector started and no signature header; ""\n                + ""expecting 400 error response"",\n            connectorTasksEndpoint\n        );\n        assertEquals(\n            BAD_REQUEST.getStatusCode(),\n            connect.executePost(connectorTasksEndpoint, ""[]"", emptyHeaders)\n        );\n\n        // Try again, but with an invalid signature\n        log.info(\n            ""Making a POST request to the {} endpoint with the connector started and an invalid signature header; ""\n                + ""expecting 403 error response"",\n            connectorTasksEndpoint\n        );\n        assertEquals(\n            FORBIDDEN.getStatusCode(),\n            connect.executePost(connectorTasksEndpoint, ""[]"", invalidSignatureHeaders)\n        );\n    }\n']",ensure;Resource;Equals;NAME;BAD;mac;CONNECTOR;connector;ex;Headers,9.313225746154785e-10;8.585629984736443e-10;7.8580342233181e-10;6.83940015733242e-10;6.402842700481415e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.4010660126805305e-10,5,5,"[-5.908758640289307, -5.408248424530029, -4.673449516296387, -5.779651165008545, -5.461416721343994, -0.024161996319890022]",0.9761276841163635
2,"['    @Test\n    public void testSkipRetryAndDLQWithHeaders() throws Exception {\n        // create test topic\n        connect.kafka().createTopic(""test-topic"");\n\n        // setup connector config\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSinkConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n        props.put(TOPICS_CONFIG, ""test-topic"");\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(TRANSFORMS_CONFIG, ""failing_transform"");\n        props.put(""transforms.failing_transform.type"", FaultyPassthrough.class.getName());\n\n        // log all errors, along with message metadata\n        props.put(ERRORS_LOG_ENABLE_CONFIG, ""true"");\n        props.put(ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, ""true"");\n\n        // produce bad messages into dead letter queue\n        props.put(DLQ_TOPIC_NAME_CONFIG, DLQ_TOPIC);\n        props.put(DLQ_CONTEXT_HEADERS_ENABLE_CONFIG, ""true"");\n        props.put(DLQ_TOPIC_REPLICATION_FACTOR_CONFIG, ""1"");\n\n        // tolerate all erros\n        props.put(ERRORS_TOLERANCE_CONFIG, ""all"");\n\n        // retry for up to one second\n        props.put(ERRORS_RETRY_TIMEOUT_CONFIG, ""1000"");\n\n        // set expected records to successfully reach the task\n        connectorHandle.taskHandle(TASK_ID).expectedRecords(EXPECTED_CORRECT_RECORDS);\n\n        connect.configureConnector(CONNECTOR_NAME, props);\n\n        waitForCondition(this::checkForPartitionAssignment,\n                CONNECTOR_SETUP_DURATION_MS,\n                ""Connector task was not assigned a partition."");\n\n        // produce some strings into test topic\n        for (int i = 0; i < NUM_RECORDS_PRODUCED; i++) {\n            connect.kafka().produce(""test-topic"", ""key-"" + i, ""value-"" + i);\n        }\n\n        // consume all records from test topic\n        log.info(""Consuming records from test topic"");\n        int i = 0;\n        for (ConsumerRecord<byte[], byte[]> rec : connect.kafka().consume(NUM_RECORDS_PRODUCED, CONSUME_MAX_DURATION_MS, ""test-topic"")) {\n            String k = new String(rec.key());\n            String v = new String(rec.value());\n            log.debug(""Consumed record (key=\'{}\', value=\'{}\') from topic {}"", k, v, rec.topic());\n            assertEquals(""Unexpected key"", k, ""key-"" + i);\n            assertEquals(""Unexpected value"", v, ""value-"" + i);\n            i++;\n        }\n\n        // wait for records to reach the task\n        connectorHandle.taskHandle(TASK_ID).awaitRecords(CONSUME_MAX_DURATION_MS);\n\n        // consume failed records from dead letter queue topic\n        log.info(""Consuming records from test topic"");\n        ConsumerRecords<byte[], byte[]> messages = connect.kafka().consume(EXPECTED_INCORRECT_RECORDS, CONSUME_MAX_DURATION_MS, DLQ_TOPIC);\n        for (ConsumerRecord<byte[], byte[]> recs : messages) {\n            log.debug(""Consumed record (key={}, value={}) from dead letter queue topic {}"",\n                    new String(recs.key()), new String(recs.value()), DLQ_TOPIC);\n            assertTrue(recs.headers().toArray().length > 0);\n            assertValue(""test-topic"", recs.headers(), ERROR_HEADER_ORIG_TOPIC);\n            assertValue(RetriableException.class.getName(), recs.headers(), ERROR_HEADER_EXCEPTION);\n            assertValue(""Error when value=\'value-7\'"", recs.headers(), ERROR_HEADER_EXCEPTION_MESSAGE);\n        }\n\n        connect.deleteConnector(CONNECTOR_NAME);\n    }\n']",afka;assthrough;topic;Exception;create;with;TOPIC;CONVERTER;topic;TOPIC,9.313225746154785e-10;7.421476766467094e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.915768623352051, -5.437270641326904, -4.657498359680176, -5.8071608543396, -5.44645881652832, -0.024144774302840233]",0.9761443734169006
2,"['    @Test\n    public void testCreateWithOverridesForNonePolicy() throws Exception {\n        Map<String, String> props = basicConnectorConfig();\n        props.put(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX + SaslConfigs.SASL_JAAS_CONFIG, ""sasl"");\n        assertFailCreateConnector(""None"", props);\n    }\n']",Policy;Exception;IDES;Connector;UMER;CONNECTOR;Over;CLIENT;REFIX;OVER,1.3387762010097504e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.971212387084961, -5.594115257263184, -4.634406089782715, -5.82133674621582, -5.379429817199707, -0.02383880317211151]",0.9764432311058044
2,"['    @Test\n    public void testCreateWithNotAllowedOverridesForPrincipalPolicy() throws Exception {\n        Map<String, String> props = basicConnectorConfig();\n        props.put(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX + SaslConfigs.SASL_JAAS_CONFIG, ""sasl"");\n        props.put(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX + ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, ""latest"");\n        assertFailCreateConnector(""Principal"", props);\n    }\n']",CLIENT;Principal;basic;OFFSET;JAAS;Allowed;CON;IDES;UMER;For,1.8044374883174896e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.930102348327637, -5.569096088409424, -4.663245677947998, -5.7737135887146, -5.3564839363098145, -0.024019673466682434]",0.9762663841247559
2,"['    @Test\n    public void testCreateWithAllowedOverridesForPrincipalPolicy() throws Exception {\n        Map<String, String> props = basicConnectorConfig();\n        props.put(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX + CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, ""PLAIN"");\n        assertPassCreateConnector(""Principal"", props);\n    }\n']",Policy;PROTOCOL;CLIENT;For;Config;REFIX;Client;Create;props;CONFIG,2.066371962428093e-09;2.0081643015146255e-09;1.0477378964424133e-09;1.0186340659856796e-09;9.313225746154785e-10;7.566995918750763e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.979161739349365, -5.594365119934082, -4.6375017166137695, -5.813620567321777, -5.380105972290039, -0.023806676268577576]",0.9764744639396667
2,"['    @Test\n    public void testCreateWithAllowedOverridesForAllPolicy() throws Exception {\n        // setup up props for the sink connector\n        Map<String, String> props = basicConnectorConfig();\n        props.put(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX + CommonClientConfigs.CLIENT_ID_CONFIG, ""test"");\n        assertPassCreateConnector(""All"", props);\n    }\n']",CONFIG;setup;CONNECTOR;connector;Exception;All;props;ID;Policy;UMER,2.9322109185159206e-09;1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10,5,5,"[-6.000922679901123, -5.5825066566467285, -4.624847888946533, -5.860936641693115, -5.416658401489258, -0.02361191064119339]",0.976664662361145
2,"['    @Test\n    public void shouldReturnFalseWhenAwaitingForStartToNeverComplete() throws Throwable {\n        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);\n        future = asyncAwait(100);\n        clock.sleep(10);\n        assertFalse(future.get(200, TimeUnit.MILLISECONDS));\n        assertTrue(future.isDone());\n    }\n']",wait;should;ILLISECONDS;sleep;future;When;Time;future;future;Complete,2.2118911147117615e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10,5,5,"[-6.001953601837158, -5.605261325836182, -4.605324745178223, -5.862624645233154, -5.403368949890137, -0.023776410147547722]",0.9765040278434753
2,"['    @Test\n    public void shouldReturnFalseWhenAwaitingForStopToNeverComplete() throws Throwable {\n        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);\n        future = asyncAwait(100);\n        latch.recordStart();\n        clock.sleep(10);\n        assertFalse(future.get(200, TimeUnit.MILLISECONDS));\n        assertTrue(future.isDone());\n    }\n']",latch;sleep;get;Never;dependents;this;False;waiting;atch;Start,1.862645149230957e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-6.010470390319824, -5.60165548324585, -4.600932598114014, -5.867727279663086, -5.4116363525390625, -0.023760810494422913]",0.9765192270278931
2,"['    @Test\n    public void shouldReturnTrueWhenAwaitingForStartAndStopToComplete() throws Throwable {\n        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);\n        future = asyncAwait(100);\n        latch.recordStart();\n        latch.recordStop();\n        clock.sleep(10);\n        assertTrue(future.get(200, TimeUnit.MILLISECONDS));\n        assertTrue(future.isDone());\n    }\n']",sleep;Time;should;clock;dependents;atch;Stop;True;waiting;record,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.010046482086182, -5.581113815307617, -4.595866680145264, -5.872378826141357, -5.422816276550293, -0.023828325793147087]",0.9764533042907715
2,"['    @Test\n    public void shouldReturnFalseWhenAwaitingForDependentLatchToComplete() throws Throwable {\n        StartAndStopLatch depLatch = new StartAndStopLatch(1, 1, this::complete, null, clock);\n        dependents = Collections.singletonList(depLatch);\n        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);\n\n        future = asyncAwait(100);\n        latch.recordStart();\n        latch.recordStop();\n        clock.sleep(10);\n        assertFalse(future.get(200, TimeUnit.MILLISECONDS));\n        assertTrue(future.isDone());\n    }\n']",singleton;sleep;waiting;Stop;False;When;new;Collections;False;dependents,2.2118911147117615e-09;1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;7.275957614183426e-10,5,5,"[-5.986111640930176, -5.541505336761475, -4.617147445678711, -5.8421196937561035, -5.407931804656982, -0.023983944207429886]",0.976301372051239
2,"['    @Test\n    public void shouldReturnTrueWhenAwaitingForStartAndStopAndDependentLatch() throws Throwable {\n        StartAndStopLatch depLatch = new StartAndStopLatch(1, 1, this::complete, null, clock);\n        dependents = Collections.singletonList(depLatch);\n        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);\n\n        future = asyncAwait(100);\n        latch.recordStart();\n        latch.recordStop();\n        depLatch.recordStart();\n        depLatch.recordStop();\n        clock.sleep(10);\n        assertTrue(future.get(200, TimeUnit.MILLISECONDS));\n        assertTrue(future.isDone());\n    }\n']",clock;sleep;Time;async;Stop;clock;atch;latch;this;future,1.7462298274040222e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.987261772155762, -5.502923011779785, -4.611464500427246, -5.852595329284668, -5.4232988357543945, -0.024095550179481506]",0.9761922955513
2,"['    @Test\n    public void testSinkConnector() throws Exception {\n        // create test topic\n        connect.kafka().createTopic(""test-topic"", NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the sink connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSinkConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n        props.put(TOPICS_CONFIG, ""test-topic"");\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        // expect all records to be consumed by the connector\n        connectorHandle.expectedRecords(NUM_RECORDS_PRODUCED);\n\n        // expect all records to be consumed by the connector\n        connectorHandle.expectedCommits(NUM_RECORDS_PRODUCED);\n\n        // start a sink connector\n        connect.configureConnector(CONNECTOR_NAME, props);\n\n        waitForCondition(this::checkForPartitionAssignment,\n                CONNECTOR_SETUP_DURATION_MS,\n                ""Connector tasks were not assigned a partition each."");\n\n        // produce some messages into source topic partitions\n        for (int i = 0; i < NUM_RECORDS_PRODUCED; i++) {\n            connect.kafka().produce(""test-topic"", i % NUM_TOPIC_PARTITIONS, ""key"", ""simple-message-value-"" + i);\n        }\n\n        // consume all records from the source topic or fail, to ensure that they were correctly produced.\n        assertEquals(""Unexpected number of records consumed"", NUM_RECORDS_PRODUCED,\n                connect.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, ""test-topic"").count());\n\n        // wait for the connector tasks to consume all records.\n        connectorHandle.awaitRecords(RECORD_TRANSFER_DURATION_MS);\n\n        // wait for the connector tasks to commit all records.\n        connectorHandle.awaitCommits(RECORD_TRANSFER_DURATION_MS);\n\n        // delete connector\n        connect.deleteConnector(CONNECTOR_NAME);\n    }\n']",the;connector;Exception;CONVERTER;TOPICS;NUM;Topic;expected;ASKS;CONVERTER,1.1350493878126144e-09;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.001776687800884e-10;3.7834979593753815e-10;3.2014213502407074e-10,5,5,"[-5.906925201416016, -5.397845268249512, -4.657754898071289, -5.812320232391357, -5.468600273132324, -0.024233441799879074]",0.9760578274726868
2,"['    @Test\n    public void testSourceConnector() throws Exception {\n        // create test topic\n        connect.kafka().createTopic(""test-topic"", NUM_TOPIC_PARTITIONS);\n\n        // setup up props for the sink connector\n        Map<String, String> props = new HashMap<>();\n        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());\n        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n        props.put(""topic"", ""test-topic"");\n        props.put(""throughput"", String.valueOf(500));\n        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n\n        // expect all records to be produced by the connector\n        connectorHandle.expectedRecords(NUM_RECORDS_PRODUCED);\n\n        // expect all records to be produced by the connector\n        connectorHandle.expectedCommits(NUM_RECORDS_PRODUCED);\n\n        // start a source connector\n        connect.configureConnector(CONNECTOR_NAME, props);\n\n        // wait for the connector tasks to produce enough records\n        connectorHandle.awaitRecords(RECORD_TRANSFER_DURATION_MS);\n\n        // wait for the connector tasks to commit enough records\n        connectorHandle.awaitCommits(RECORD_TRANSFER_DURATION_MS);\n\n        // consume all records from the source topic or fail, to ensure that they were correctly produced\n        int recordNum = connect.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, ""test-topic"").count();\n        assertTrue(""Not enough records produced by source connector. Expected at least: "" + NUM_RECORDS_PRODUCED + "" + but got "" + recordNum,\n                recordNum >= NUM_RECORDS_PRODUCED);\n\n        // delete connector\n        connect.deleteConnector(CONNECTOR_NAME);\n    }\n']",fail;expected;enough;Monitorable;the;Simple;consume;Converter;records;the,1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.925217628479004, -5.465984344482422, -4.659922122955322, -5.813531875610352, -5.450291633605957, -0.023932617157697678]",0.9763514995574951
2,"['    @Test\n    public void testRestExtensionApi() throws IOException, InterruptedException {\n        // setup Connect worker properties\n        Map<String, String> workerProps = new HashMap<>();\n        workerProps.put(REST_EXTENSION_CLASSES_CONFIG, IntegrationTestRestExtension.class.getName());\n\n        // build a Connect cluster backed by Kafka and Zk\n        connect = new EmbeddedConnectCluster.Builder()\n            .name(""connect-cluster"")\n            .numWorkers(1)\n            .numBrokers(1)\n            .workerProps(workerProps)\n            .build();\n\n        // start the clusters\n        connect.start();\n\n        WorkerHandle worker = connect.workers().stream()\n            .findFirst()\n            .orElseThrow(() -> new AssertionError(""At least one worker handle should be available""));\n\n        waitForCondition(\n            this::extensionIsRegistered,\n            REST_EXTENSION_REGISTRATION_TIMEOUT_MS,\n            ""REST extension was never registered""\n        );\n\n        ConnectorHandle connectorHandle = RuntimeHandles.get().connectorHandle(""test-conn"");\n        try {\n            // setup up props for the connector\n            Map<String, String> connectorProps = new HashMap<>();\n            connectorProps.put(CONNECTOR_CLASS_CONFIG, MonitorableSinkConnector.class.getSimpleName());\n            connectorProps.put(TASKS_MAX_CONFIG, String.valueOf(1));\n            connectorProps.put(TOPICS_CONFIG, ""test-topic"");\n\n            // start a connector\n            connectorHandle.taskHandle(connectorHandle.name() + ""-0"");\n            StartAndStopLatch connectorStartLatch = connectorHandle.expectedStarts(1);\n            connect.configureConnector(connectorHandle.name(), connectorProps);\n            connectorStartLatch.await(CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n            String workerId = String.format(""%s:%d"", worker.url().getHost(), worker.url().getPort());\n            ConnectorHealth expectedHealth = new ConnectorHealth(\n                connectorHandle.name(),\n                new ConnectorState(\n                    ""RUNNING"",\n                    workerId,\n                    null\n                ),\n                Collections.singletonMap(\n                    0,\n                    new TaskState(0, ""RUNNING"", workerId, null)\n                ),\n                ConnectorType.SINK\n            );\n\n            connectorProps.put(NAME_CONFIG, connectorHandle.name());\n\n            // Test the REST extension API; specifically, that the connector\'s health and configuration\n            // are available to the REST extension we registered and that they contain expected values\n            waitForCondition(\n                () -> verifyConnectorHealthAndConfig(connectorHandle.name(), expectedHealth, connectorProps),\n                CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,\n                ""Connector health and/or config was never accessible by the REST extension""\n            );\n        } finally {\n            RuntimeHandles.get().deleteConnector(connectorHandle.name());\n        }\n    }\n']",Integration;Assertion;Else;Brokers;CONFIG;Workers;should;IOException;properties;EST,8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.969280242919922, -5.398859977722168, -4.634210109710693, -5.833667755126953, -5.506438732147217, -0.024066690355539322]",0.9762204885482788
2,"['    @Test\n    public void testWhiteListedManifestResources() {\n        assertTrue(\n            DelegatingClassLoader.serviceLoaderManifestForPlugin(""META-INF/services/org.apache.kafka.connect.rest.ConnectRestExtension""));\n        assertTrue(\n            DelegatingClassLoader.serviceLoaderManifestForPlugin(""META-INF/services/org.apache.kafka.common.config.provider.ConfigProvider""));\n    }\n']",isted;Extension;apache;Plugin;provider;services;ETA;org;For;Manifest,1.3387762010097504e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.971458435058594, -5.588361740112305, -4.62738037109375, -5.840728759765625, -5.384810447692871, -0.02384648472070694]",0.9764356017112732
2,"['    @Test\n    public void testOtherResources() {\n        assertFalse(\n            DelegatingClassLoader.serviceLoaderManifestForPlugin(""META-INF/services/org.apache.kafka.connect.transforms.Transformation""));\n        assertFalse(DelegatingClassLoader.serviceLoaderManifestForPlugin(""resource/version.properties""));\n    }\n']",False;afka;Plugin;transforms;Loader;Manifest;For;Plugin;ETA;service,1.6298145055770874e-09;1.3096723705530167e-09;1.1641532182693481e-09;9.89530235528946e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.9708638191223145, -5.59092378616333, -4.639955043792725, -5.843634605407715, -5.3826727867126465, -0.023714594542980194]",0.9765644073486328
2,['    @Test(expected = ClassNotFoundException.class)\n    public void testLoadingUnloadedPluginClass() throws ClassNotFoundException {\n        TestPlugins.assertAvailable();\n        DelegatingClassLoader classLoader = new DelegatingClassLoader(Collections.emptyList());\n        classLoader.initLoaders();\n        for (String pluginClassName : TestPlugins.pluginClasses()) {\n            classLoader.loadClass(pluginClassName);\n        }\n    }\n'],expected;Class;Found;Class;class;Plugins;Found;load;Delegating;Unloaded,1.6880221664905548e-09;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.98137903213501, -5.493680000305176, -4.59615421295166, -5.8840765953063965, -5.434232711791992, -0.024166300892829895]",0.9761233925819397
2,['    @Test\n    public void testLoadingPluginClass() throws ClassNotFoundException {\n        TestPlugins.assertAvailable();\n        DelegatingClassLoader classLoader = new DelegatingClassLoader(TestPlugins.pluginPath());\n        classLoader.initLoaders();\n        for (String pluginClassName : TestPlugins.pluginClasses()) {\n            assertNotNull(classLoader.loadClass(pluginClassName));\n            assertNotNull(classLoader.pluginClassLoader(pluginClassName));\n        }\n    }\n'],Plugin;Class;plugin;Loader;Loader;Null;Loading;Found;new;Not,1.5133991837501526e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.953999042510986, -5.526224136352539, -4.619804382324219, -5.855330944061279, -5.395141124725342, -0.024122897535562515]",0.9761657118797302
2,"['    @Test\n    public void testJavaLibraryClasses() {\n        assertFalse(PluginUtils.shouldLoadInIsolation(""java.""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""java.lang.Object""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""java.lang.String""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""java.util.HashMap$Entry""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""java.io.Serializable""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""javax.rmi.""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""javax.management.loading.ClassLoaderRepository"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.omg.CORBA.""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.omg.CORBA.Object""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.w3c.dom.""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.w3c.dom.traversal.TreeWalker""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.xml.sax.""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.xml.sax.EntityResolver""));\n    }\n']",java;Classes;xml;java;Java;Load;should;org;should;Entity,8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.220055416226387e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.916121482849121, -5.437292575836182, -4.629639148712158, -5.805952548980713, -5.4350738525390625, -0.024472754448652267]",0.9758244156837463
2,"['    @Test\n    public void testThirdPartyClasses() {\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.slf4j.""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.slf4j.LoggerFactory""));\n    }\n']",should;org;Load;lf;Load;In;Utils;Plugin;olation;org,7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.92901711165905e-10;2.9103830456733704e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.947018623352051, -5.632257461547852, -4.634326457977295, -5.818509101867676, -5.30271053314209, -0.024146053940057755]",0.9761431217193604
2,"['    @Test\n    public void testConnectFrameworkClasses() {\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.common.""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.common.config.AbstractConfig"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.common.config.ConfigDef$Type"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.common.serialization.Deserializer"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.connector.Connector"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.source.SourceConnector"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.sink.SinkConnector"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.connector.Task""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.source.SourceTask"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.sink.SinkTask""));\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.transforms.Transformation"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.storage.Converter"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.storage.OffsetBackingStore"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.clients.producer.ProducerConfig"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.clients.consumer.ConsumerConfig"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.clients.admin.KafkaAdminClient"")\n        );\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.rest.ConnectRestExtension"")\n        );\n    }\n']",source;ink;Connect;apache;False;apache;connector;afka;should;connect,5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.9103830456733704e-10;2.510205376893282e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.93954610824585, -5.431057453155518, -4.607627868652344, -5.852768421173096, -5.467276096343994, -0.02437654696404934]",0.975918173789978
2,"['    @Test\n    public void testAllowedConnectFrameworkClasses() {\n        assertTrue(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.transforms.""));\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.transforms.ExtractField"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.transforms.ExtractField$Key"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.json.""));\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.json.JsonConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.json.JsonConverter$21"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.file.""));\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.file.FileStreamSourceTask"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.file.FileStreamSinkConnector"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.mirror.MirrorSourceTask"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.mirror.MirrorSourceConnector"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.converters.""));\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.converters.ByteArrayConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.converters.DoubleConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.converters.FloatConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.converters.IntegerConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.converters.LongConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.converters.ShortConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.storage.StringConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.storage.SimpleHeaderConverter"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n            ""org.apache.kafka.connect.rest.basic.auth.extension.BasicAuthSecurityRestExtension""\n        ));\n    }\n']",Extract;apache;Connector;Load;File;Extract;apache;afka;Field;Plugin,4.001776687800884e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.964508555829525e-10;1.9281287677586079e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.926406383514404, -5.40474796295166, -4.605832576751709, -5.84941291809082, -5.471160411834717, -0.024543246254324913]",0.975755512714386
2,"['    @Test\n    public void testClientConfigProvider() {\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.common.config.provider.ConfigProvider"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.common.config.provider.FileConfigProvider"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.common.config.provider.FutureConfigProvider"")\n        );\n    }\n']",provider;afka;Provider;Config;Config;config;Utils;Plugin;Provider;should,5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.970705509185791, -5.518154621124268, -4.6126322746276855, -5.852481365203857, -5.424891471862793, -0.024056682363152504]",0.9762303829193115
2,"['    @Test\n    public void testConnectorClientConfigOverridePolicy() {\n        assertFalse(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.connector.policy.ConnectorClientConfigOverridePolicy"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.connector.policy.AbstractConnectorClientConfigOverridePolicy"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.connector.policy.AllConnectorClientConfigOverridePolicy"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.connector.policy.NoneConnectorClientConfigOverridePolicy"")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                ""org.apache.kafka.connect.connector.policy.PrincipalConnectorClientConfigOverridePolicy"")\n        );\n    }\n']",apache;org;Connector;Connector;Policy;Config;org;afka;True;Connector,5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10;2.6193447411060333e-10,5,5,"[-5.933869361877441, -5.4458794593811035, -4.620164394378662, -5.846962928771973, -5.449829578399658, -0.02429184876382351]",0.9760008454322815
2,"['    @Test\n    public void testEmptyPluginUrls() throws Exception {\n        assertEquals(Collections.<Path>emptyList(), PluginUtils.pluginUrls(pluginPath));\n    }\n']",Equals;plugin;empty;Urls;Plugin;Collections;List;Plugin;Path;Exception,1.57160684466362e-09;1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;-5.820766091346741e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.9103830456733704e-10,5,5,"[-6.019675254821777, -5.64775276184082, -4.572678565979004, -5.890835285186768, -5.386801242828369, -0.023910969495773315]",0.9763726592063904
2,"['    @Test\n    public void testEmptyStructurePluginUrls() throws Exception {\n        createBasicDirectoryLayout();\n        assertEquals(Collections.<Path>emptyList(), PluginUtils.pluginUrls(pluginPath));\n    }\n']",Directory;plugin;plugin;Basic;List;Urls;Structure;Exception;Path;Urls,1.6880221664905548e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;4.656612873077393e-10;4.3655745685100555e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-6.005214214324951, -5.592946529388428, -4.583092212677002, -5.882298469543457, -5.407369613647461, -0.0239698626101017]",0.9763151407241821
2,"['    @Test\n    public void testPluginUrlsWithJars() throws Exception {\n        createBasicDirectoryLayout();\n\n        List<Path> expectedUrls = createBasicExpectedUrls();\n\n        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));\n    }\n']",plugin;plugin;expected;Urls;Urls;List;ars;Plugin;Layout;Urls,1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;5.238689482212067e-10;3.4924596548080444e-10;3.346940502524376e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.955136299133301, -5.520683288574219, -4.636336803436279, -5.829977035522461, -5.4153594970703125, -0.023959387093782425]",0.9763253331184387
2,"['    @Test\n    public void testOrderOfPluginUrlsWithJars() throws Exception {\n        createBasicDirectoryLayout();\n        // Here this method is just used to create the files. The result is not used.\n        createBasicExpectedUrls();\n\n        List<Path> actual = PluginUtils.pluginUrls(pluginPath);\n        // \'simple-transform.jar\' is created first. In many cases, without sorting within the\n        // PluginUtils, this jar will be placed before \'another-transform.jar\'. However this is\n        // not guaranteed because a DirectoryStream does not maintain a certain order in its\n        // results. Besides this test case, sorted order in every call to assertUrls below.\n        int i = Arrays.toString(actual.toArray()).indexOf(""another-transform.jar"");\n        int j = Arrays.toString(actual.toArray()).indexOf(""simple-transform.jar"");\n        assertTrue(i < j);\n    }\n']",ars;order;to;actual;jar;Urls;order;Urls;case;Basic,2.3283064365386963e-09;9.313225746154785e-10;6.402842700481415e-10;5.966285243630409e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.9233222007751465, -5.372321605682373, -4.670557975769043, -5.808986186981201, -5.496625900268555, -0.024075185880064964]",0.9762123227119446
2,"['    @Test\n    public void testPluginUrlsWithZips() throws Exception {\n        createBasicDirectoryLayout();\n\n        List<Path> expectedUrls = new ArrayList<>();\n        expectedUrls.add(Files.createFile(pluginPath.resolve(""connectorA/my-sink.zip"")));\n        expectedUrls.add(Files.createFile(pluginPath.resolve(""connectorB/a-source.zip"")));\n        expectedUrls.add(Files.createFile(pluginPath.resolve(""transformC/simple-transform.zip"")));\n        expectedUrls.add(Files.createFile(\n                pluginPath.resolve(""transformC/deps/another-transform.zip""))\n        );\n\n        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));\n    }\n']",resolve;connector;Layout;create;zip;transform;plugin;Urls;create;List,6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.922764301300049, -5.494964599609375, -4.661491870880127, -5.777718544006348, -5.4113545417785645, -0.024086588993668556]",0.976201057434082
2,"['    @Test\n    public void testPluginUrlsWithClasses() throws Exception {\n        Files.createDirectories(pluginPath.resolve(""org/apache/kafka/converters""));\n        Files.createDirectories(pluginPath.resolve(""com/mycompany/transforms""));\n        Files.createDirectories(pluginPath.resolve(""edu/research/connectors""));\n        Files.createFile(pluginPath.resolve(""org/apache/kafka/converters/README.txt""));\n        Files.createFile(pluginPath.resolve(""org/apache/kafka/converters/AlienFormat.class""));\n        Files.createDirectories(pluginPath.resolve(""com/mycompany/transforms/Blackhole.class""));\n        Files.createDirectories(pluginPath.resolve(""edu/research/connectors/HalSink.class""));\n\n        List<Path> expectedUrls = new ArrayList<>();\n        expectedUrls.add(pluginPath);\n\n        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));\n    }\n']",afka;research;File;edu;Files;Exception;class;Plugin;com;expected,1.1350493878126144e-09;6.984919309616089e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.94765117764473e-10;4.347384674474597e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.913665771484375, -5.496803283691406, -4.661069869995117, -5.785178184509277, -5.384659767150879, -0.02420830726623535]",0.9760823845863342
2,"['    @Test\n    public void testPluginUrlsWithAbsoluteSymlink() throws Exception {\n        createBasicDirectoryLayout();\n\n        Path anotherPath = rootDir.newFolder(""moreplugins"").toPath().toRealPath();\n        Files.createDirectories(anotherPath.resolve(""connectorB-deps""));\n        Files.createSymbolicLink(\n                pluginPath.resolve(""connectorB/deps/symlink""),\n                anotherPath.resolve(""connectorB-deps"")\n        );\n\n        List<Path> expectedUrls = createBasicExpectedUrls();\n        expectedUrls.add(Files.createFile(anotherPath.resolve(""connectorB-deps/converter.jar"")));\n\n        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));\n    }\n']",Exception;Folder;Absolute;Urls;Path;Files;expected;Symbolic;Directory;Urls,8.149072527885437e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.5838532969355583e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.916296482086182, -5.436938285827637, -4.660455703735352, -5.78123664855957, -5.420123100280762, -0.024314885959029198]",0.9759783148765564
2,"['    @Test\n    public void testPluginUrlsWithRelativeSymlinkBackwards() throws Exception {\n        createBasicDirectoryLayout();\n\n        Path anotherPath = rootDir.newFolder(""moreplugins"").toPath().toRealPath();\n        Files.createDirectories(anotherPath.resolve(""connectorB-deps""));\n        Files.createSymbolicLink(\n                pluginPath.resolve(""connectorB/deps/symlink""),\n                Paths.get(""../../../moreplugins/connectorB-deps"")\n        );\n\n        List<Path> expectedUrls = createBasicExpectedUrls();\n        expectedUrls.add(Files.createFile(anotherPath.resolve(""connectorB-deps/converter.jar"")));\n\n        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));\n    }\n']",Plugin;Urls;Directories;File;Backwards;Path;Files;Link;Files;Symlink,1.5133991837501526e-09;1.1350493878126144e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.675246939063072e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9081315994262695, -5.431760787963867, -4.669219493865967, -5.767253875732422, -5.415744304656982, -0.02434048242866993]",0.9759533405303955
2,"['    @Test\n    public void testPluginUrlsWithRelativeSymlinkForwards() throws Exception {\n        // Since this test case defines a relative symlink within an already included path, the main\n        // assertion of this test is absence of exceptions and correct resolution of paths.\n        createBasicDirectoryLayout();\n        Files.createDirectories(pluginPath.resolve(""connectorB/deps/more""));\n        Files.createSymbolicLink(\n                pluginPath.resolve(""connectorB/deps/symlink""),\n                Paths.get(""more"")\n        );\n\n        List<Path> expectedUrls = createBasicExpectedUrls();\n        expectedUrls.add(\n                Files.createFile(pluginPath.resolve(""connectorB/deps/more/converter.jar""))\n        );\n\n        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));\n    }\n']",Relative;of;of;jar;relative;converter;and;Forwards;this;paths,3.14321368932724e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.785274647176266e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.924193859100342, -5.423320293426514, -4.657371997833252, -5.801872730255127, -5.43996000289917, -0.024230532348155975]",0.976060688495636
2,"['    @Test\n    public void shouldInstantiateAndConfigureConverters() {\n        instantiateAndConfigureConverter(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.CURRENT_CLASSLOADER);\n        // Validate extra configs got passed through to overridden converters\n        assertEquals(""true"", converter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));\n        assertEquals(""foo1"", converter.configs.get(""extra.config""));\n\n        instantiateAndConfigureConverter(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.PLUGINS);\n        // Validate extra configs got passed through to overridden converters\n        assertEquals(""true"", converter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));\n        assertEquals(""foo2"", converter.configs.get(""extra.config""));\n    }\n']",foo;CLASSLOADER;to;should;ENABLE;CHEMAS;KEY;through;CONFIG;CHEMAS,2.2118911147117615e-09;1.7171259969472885e-09;1.3387762010097504e-09;1.280568540096283e-09;7.34871719032526e-10;7.275957614183426e-10;7.275957614183426e-10;6.984919309616089e-10;6.111804395914078e-10;6.039044819772243e-10,5,5,"[-5.825575828552246, -5.573182106018066, -4.712578296661377, -5.654969215393066, -5.230108737945557, -0.024891329929232597]",0.9754158854484558
2,"['    @Test\n    public void shouldInstantiateAndConfigureInternalConverters() {\n        instantiateAndConfigureInternalConverter(WorkerConfig.INTERNAL_KEY_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.CURRENT_CLASSLOADER);\n        // Validate schemas.enable is defaulted to false for internal converter\n        assertEquals(false, internalConverter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));\n        // Validate internal converter properties can still be set\n        assertEquals(""bar1"", internalConverter.configs.get(""extra.config""));\n\n        instantiateAndConfigureInternalConverter(WorkerConfig.INTERNAL_VALUE_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.PLUGINS);\n        // Validate schemas.enable is defaulted to false for internal converter\n        assertEquals(false, internalConverter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));\n        // Validate internal converter properties can still be set\n        assertEquals(""bar2"", internalConverter.configs.get(""extra.config""));\n    }\n']",Worker;Class;CLASSLOADER;Class;bar;Usage;CHEMAS;converter;Equals;VALUE,6.693881005048752e-10;6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.828433036804199, -5.564980506896973, -4.7061848640441895, -5.674915313720703, -5.25644588470459, -0.024760274216532707]",0.975543737411499
2,"['    @Test\n    public void shouldInstantiateAndConfigureExplicitlySetHeaderConverterWithCurrentClassLoader() {\n        assertNotNull(props.get(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG));\n        HeaderConverter headerConverter = plugins.newHeaderConverter(config,\n                                                                     WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,\n                                                                     ClassLoaderUsage.CURRENT_CLASSLOADER);\n        assertNotNull(headerConverter);\n        assertTrue(headerConverter instanceof TestHeaderConverter);\n        this.headerConverter = (TestHeaderConverter) headerConverter;\n\n        // Validate extra configs got passed through to overridden converters\n        assertConverterType(ConverterType.HEADER, this.headerConverter.configs);\n        assertEquals(""baz"", this.headerConverter.configs.get(""extra.config""));\n\n        headerConverter = plugins.newHeaderConverter(config,\n                                                     WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,\n                                                     ClassLoaderUsage.PLUGINS);\n        assertNotNull(headerConverter);\n        assertTrue(headerConverter instanceof TestHeaderConverter);\n        this.headerConverter = (TestHeaderConverter) headerConverter;\n\n        // Validate extra configs got passed through to overridden converters\n        assertConverterType(ConverterType.HEADER, this.headerConverter.configs);\n        assertEquals(""baz"", this.headerConverter.configs.get(""extra.config""));\n    }\n']",Loader;URRENT;should;Worker;extra;Current;Validate;to;extra;config,1.1641532182693481e-09;1.1350493878126144e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.8034467697143555, -5.278171539306641, -4.682811737060547, -5.707121849060059, -5.408755302429199, -0.025493470951914787]",0.9748287200927734
2,"['    @Test\n    public void shouldInstantiateAndConfigureConnectRestExtension() {\n        props.put(WorkerConfig.REST_EXTENSION_CLASSES_CONFIG,\n                  TestConnectRestExtension.class.getName());\n        createConfig();\n\n        List<ConnectRestExtension> connectRestExtensions =\n            plugins.newPlugins(config.getList(WorkerConfig.REST_EXTENSION_CLASSES_CONFIG),\n                               config,\n                               ConnectRestExtension.class);\n        assertNotNull(connectRestExtensions);\n        assertEquals(""One Rest Extension expected"", 1, connectRestExtensions.size());\n        assertNotNull(connectRestExtensions.get(0));\n        assertTrue(""Should be instance of TestConnectRestExtension"",\n                   connectRestExtensions.get(0) instanceof TestConnectRestExtension);\n        assertNotNull(((TestConnectRestExtension) connectRestExtensions.get(0)).configs);\n        assertEquals(config.originals(),\n                     ((TestConnectRestExtension) connectRestExtensions.get(0)).configs);\n    }\n']",should;size;List;One;create;Extension;plugins;Should;Rest;Extensions,1.1641532182693481e-09;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10,5,5,"[-5.898779392242432, -5.390033721923828, -4.655299663543701, -5.773349285125732, -5.452480316162109, -0.024508582428097725]",0.9757893085479736
2,"[""    @Test\n    public void shouldInstantiateAndConfigureDefaultHeaderConverter() {\n        props.remove(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG);\n        createConfig();\n\n        // Because it's not explicitly set on the supplied configuration, the logic to use the current classloader for the connector\n        // will exit immediately, and so this method always returns null\n        HeaderConverter headerConverter = plugins.newHeaderConverter(config,\n                                                                     WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,\n                                                                     ClassLoaderUsage.CURRENT_CLASSLOADER);\n        assertNull(headerConverter);\n        // But we should always find it (or the worker's default) when using the plugins classloader ...\n        headerConverter = plugins.newHeaderConverter(config,\n                                                     WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,\n                                                     ClassLoaderUsage.PLUGINS);\n        assertNotNull(headerConverter);\n        assertTrue(headerConverter instanceof SimpleHeaderConverter);\n    }\n""]",should;Instantiate;Usage;Configure;will;remove;to;CLASS;Header;CONFIG,1.7462298274040222e-09;1.3969838619232178e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.92901711165905e-10,5,5,"[-5.889263153076172, -5.203922748565674, -4.63035774230957, -5.792436122894287, -5.532939434051514, -0.025338437408208847]",0.9749798774719238
2,"['    @Test(expected = ConnectException.class)\n    public void shouldThrowIfPluginThrows() {\n        TestPlugins.assertAvailable();\n\n        plugins.newPlugin(\n            TestPlugins.ALWAYS_THROW_EXCEPTION,\n            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),\n            Converter.class\n        );\n    }\n']",Collections;expected;Connect;empty;Throws;Exception;Converter;Config;Plugin;should,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.002315998077393, -5.467503547668457, -4.5751566886901855, -5.902234077453613, -5.472256183624268, -0.024225644767284393]",0.976065456867218
2,"['    @Test\n    public void shouldShareStaticValuesBetweenSamePlugin() {\n        // Plugins are not isolated from other instances of their own class.\n        TestPlugins.assertAvailable();\n        Converter firstPlugin = plugins.newPlugin(\n            TestPlugins.ALIASED_STATIC_FIELD,\n            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),\n            Converter.class\n        );\n\n        assertInstanceOf(SamplingTestPlugin.class, firstPlugin, ""Cannot collect samples"");\n\n        Converter secondPlugin = plugins.newPlugin(\n            TestPlugins.ALIASED_STATIC_FIELD,\n            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),\n            Converter.class\n        );\n\n        assertInstanceOf(SamplingTestPlugin.class, secondPlugin, ""Cannot collect samples"");\n        assertSame(\n            ((SamplingTestPlugin) firstPlugin).otherSamples(),\n            ((SamplingTestPlugin) secondPlugin).otherSamples()\n        );\n    }\n']",Plugin;Between;Values;Map;ASED;are;Def;ASED;Instance;Available,8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.906678199768066, -5.4818115234375, -4.668018341064453, -5.775242805480957, -5.4069504737854, -0.024151872843503952]",0.9761374592781067
2,"['    @Test\n    public void newPluginShouldServiceLoadWithPluginClassLoader() {\n        TestPlugins.assertAvailable();\n        Converter plugin = plugins.newPlugin(\n            TestPlugins.SERVICE_LOADER,\n            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),\n            Converter.class\n        );\n\n        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");\n        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();\n        // Assert that the service loaded subclass is found in both environments\n        assertTrue(samples.containsKey(""ServiceLoadedSubclass.static""));\n        assertTrue(samples.containsKey(""ServiceLoadedSubclass.dynamic""));\n        assertPluginClassLoaderAlwaysActive(samples);\n    }\n']",SERVICE;Converter;Class;Converter;LOADER;plugins;both;Available;contains;class,6.83940015733242e-10;5.675246939063072e-10;5.675246939063072e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10,5,5,"[-5.922613143920898, -5.486204147338867, -4.6534953117370605, -5.801522254943848, -5.409952640533447, -0.024133719503879547]",0.976155161857605
2,"['    @Test\n    public void newPluginShouldInstantiateWithPluginClassLoader() {\n        TestPlugins.assertAvailable();\n        Converter plugin = plugins.newPlugin(\n            TestPlugins.ALIASED_STATIC_FIELD,\n            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),\n            Converter.class\n        );\n\n        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");\n        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();\n        assertPluginClassLoaderAlwaysActive(samples);\n    }\n']",Abstract;collect;Available;Plugin;Plugin;Class;Sampling;Always;Def;Active,1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.95978307723999, -5.52001953125, -4.631174564361572, -5.830234050750732, -5.4184722900390625, -0.023986272513866425]",0.9762991070747375
2,"['    @Test(expected = ConfigException.class)\n    public void shouldFailToFindConverterInCurrentClassloader() {\n        TestPlugins.assertAvailable();\n        props.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, TestPlugins.SAMPLING_CONVERTER);\n        createConfig();\n    }\n']",expected;SAMPLING;Worker;Classloader;props;KEY;Config;Available;Plugins;Current,1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0,5,5,"[-5.951298713684082, -5.522313594818115, -4.60924768447876, -5.853094100952148, -5.387595176696777, -0.024294991046190262]",0.9759976267814636
2,"['    @Test\n    public void newConverterShouldConfigureWithPluginClassLoader() {\n        TestPlugins.assertAvailable();\n        props.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, TestPlugins.SAMPLING_CONVERTER);\n        ClassLoader classLoader = plugins.delegatingLoader().pluginClassLoader(TestPlugins.SAMPLING_CONVERTER);\n        ClassLoader savedLoader = Plugins.compareAndSwapLoaders(classLoader);\n        createConfig();\n        Plugins.compareAndSwapLoaders(savedLoader);\n\n        Converter plugin = plugins.newConverter(\n            config,\n            WorkerConfig.KEY_CONVERTER_CLASS_CONFIG,\n            ClassLoaderUsage.PLUGINS\n        );\n\n        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");\n        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();\n        assertTrue(samples.containsKey(""configure""));\n        assertPluginClassLoaderAlwaysActive(samples);\n    }\n']",Should;props;delegating;Swap;Loader;SAMPLING;plugin;Usage;Loader;samples,8.731149137020111e-10;6.984919309616089e-10;6.257323548197746e-10;6.111804395914078e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.880067825317383, -5.457314968109131, -4.682520389556885, -5.744611740112305, -5.373624801635742, -0.024449024349451065]",0.9758474230766296
2,"['    @Test\n    public void newConfigProviderShouldConfigureWithPluginClassLoader() {\n        TestPlugins.assertAvailable();\n        String providerPrefix = ""some.provider"";\n        props.put(providerPrefix + "".class"", TestPlugins.SAMPLING_CONFIG_PROVIDER);\n\n        PluginClassLoader classLoader = plugins.delegatingLoader().pluginClassLoader(TestPlugins.SAMPLING_CONFIG_PROVIDER);\n        assertNotNull(classLoader);\n        ClassLoader savedLoader = Plugins.compareAndSwapLoaders(classLoader);\n        createConfig();\n        Plugins.compareAndSwapLoaders(savedLoader);\n\n        ConfigProvider plugin = plugins.newConfigProvider(\n            config,\n            providerPrefix,\n            ClassLoaderUsage.PLUGINS\n        );\n\n        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");\n        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();\n        assertTrue(samples.containsKey(""configure""));\n        assertPluginClassLoaderAlwaysActive(samples);\n    }\n']",Available;Prefix;CONFIG;Configure;Instance;SAMPLING;Null;compare;Swap;Sampling,9.89530235528946e-10;6.111804395914078e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;3.92901711165905e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.909701347351074, -5.433856964111328, -4.658763885498047, -5.778182506561279, -5.423641681671143, -0.02435700222849846]",0.9759372472763062
2,"['    @Test\n    public void newHeaderConverterShouldConfigureWithPluginClassLoader() {\n        TestPlugins.assertAvailable();\n        props.put(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG, TestPlugins.SAMPLING_HEADER_CONVERTER);\n        ClassLoader classLoader = plugins.delegatingLoader().pluginClassLoader(TestPlugins.SAMPLING_HEADER_CONVERTER);\n        ClassLoader savedLoader = Plugins.compareAndSwapLoaders(classLoader);\n        createConfig();\n        Plugins.compareAndSwapLoaders(savedLoader);\n\n        HeaderConverter plugin = plugins.newHeaderConverter(\n            config,\n            WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,\n            ClassLoaderUsage.PLUGINS\n        );\n\n        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");\n        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();\n        assertTrue(samples.containsKey(""configure"")); // HeaderConverter::configure was called\n        assertPluginClassLoaderAlwaysActive(samples);\n    }\n']",Available;Class;Usage;PLUGINS;Converter;put;Loader;Loader;Converter;CONVERTER,1.280568540096283e-09;1.0477378964424133e-09;6.984919309616089e-10;5.529727786779404e-10;5.20230969414115e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.863351345062256, -5.4192681312561035, -4.682507038116455, -5.746341705322266, -5.376296043395996, -0.024648509919643402]",0.9756527543067932
2,"['    @Test\n    public void newPluginsShouldConfigureWithPluginClassLoader() {\n        TestPlugins.assertAvailable();\n        List<Configurable> configurables = plugins.newPlugins(\n            Collections.singletonList(TestPlugins.SAMPLING_CONFIGURABLE),\n            config,\n            Configurable.class\n        );\n        assertEquals(1, configurables.size());\n        Configurable plugin = configurables.get(0);\n\n        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");\n        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();\n        assertTrue(samples.containsKey(""configure"")); // Configurable::configure was called\n        assertPluginClassLoaderAlwaysActive(samples);\n    }\n']",Loader;Plugins;Configurable;Plugins;new;configurables;List;Should;Configurable;contains,5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.147295840084553e-10,5,5,"[-5.9461846351623535, -5.478282451629639, -4.6389617919921875, -5.819389820098877, -5.443264484405518, -0.0240415520966053]",0.9762452840805054
2,"['    @Test\n    public void testRegularPluginDesc() {\n        PluginDesc<Connector> connectorDesc = new PluginDesc<>(\n                Connector.class,\n                regularVersion,\n                pluginLoader\n        );\n\n        assertPluginDesc(connectorDesc, Connector.class, regularVersion, pluginLoader.location());\n\n        PluginDesc<Converter> converterDesc = new PluginDesc<>(\n                Converter.class,\n                snaphotVersion,\n                pluginLoader\n        );\n\n        assertPluginDesc(converterDesc, Converter.class, snaphotVersion, pluginLoader.location());\n\n        PluginDesc<Transformation> transformDesc = new PluginDesc<>(\n                Transformation.class,\n                noVersion,\n                pluginLoader\n        );\n\n        assertPluginDesc(transformDesc, Transformation.class, noVersion, pluginLoader.location());\n    }\n']",Loader;location;Connector;Connector;converter;Desc;snaphot;converter;Transformation;Converter,8.149072527885437e-10;6.984919309616089e-10;5.384208634495735e-10;5.238689482212067e-10;4.984030965715647e-10;4.656612873077393e-10;4.5838532969355583e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.961310863494873, -5.413567066192627, -4.614847660064697, -5.826467037200928, -5.49533224105835, -0.024282773956656456]",0.9760096669197083
2,"['    @Test\n    public void testPluginDescWithSystemClassLoader() {\n        String location = ""classpath"";\n        PluginDesc<SinkConnector> connectorDesc = new PluginDesc<>(\n                SinkConnector.class,\n                regularVersion,\n                systemLoader\n        );\n\n        assertPluginDesc(connectorDesc, SinkConnector.class, regularVersion, location);\n\n        PluginDesc<Converter> converterDesc = new PluginDesc<>(\n                Converter.class,\n                snaphotVersion,\n                systemLoader\n        );\n\n        assertPluginDesc(converterDesc, Converter.class, snaphotVersion, location);\n\n        PluginDesc<Transformation> transformDesc = new PluginDesc<>(\n                Transformation.class,\n                noVersion,\n                systemLoader\n        );\n\n        assertPluginDesc(transformDesc, Transformation.class, noVersion, location);\n    }\n']",connector;Converter;Converter;system;Plugin;Plugin;Plugin;Plugin;Desc;no,4.3655745685100555e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.952671051025391, -5.403114318847656, -4.630674362182617, -5.811191558837891, -5.485086917877197, -0.02428417094051838]",0.9760082960128784
2,"['    @Test\n    public void testPluginDescWithNullVersion() {\n        String nullVersion = ""null"";\n        PluginDesc<SourceConnector> connectorDesc = new PluginDesc<>(\n                SourceConnector.class,\n                null,\n                pluginLoader\n        );\n\n        assertPluginDesc(\n                connectorDesc,\n                SourceConnector.class,\n                nullVersion,\n                pluginLoader.location()\n        );\n\n        String location = ""classpath"";\n        PluginDesc<Converter> converterDesc = new PluginDesc<>(\n                Converter.class,\n                null,\n                systemLoader\n        );\n\n        assertPluginDesc(converterDesc, Converter.class, nullVersion, location);\n    }\n']",Plugin;classpath;converter;Null;class;converter;connector;Desc;class;Loader,6.984919309616089e-10;5.093170329928398e-10;4.5838532969355583e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.979154109954834, -5.451770782470703, -4.6122307777404785, -5.835805892944336, -5.480913162231445, -0.024124642834067345]",0.9761641621589661
2,"['    @Test\n    public void testPluginDescEquality() {\n        PluginDesc<Connector> connectorDescPluginPath = new PluginDesc<>(\n                Connector.class,\n                snaphotVersion,\n                pluginLoader\n        );\n\n        PluginDesc<Connector> connectorDescClasspath = new PluginDesc<>(\n                Connector.class,\n                snaphotVersion,\n                systemLoader\n        );\n\n        assertEquals(connectorDescPluginPath, connectorDescClasspath);\n        assertEquals(connectorDescPluginPath.hashCode(), connectorDescClasspath.hashCode());\n\n        PluginDesc<Converter> converterDescPluginPath = new PluginDesc<>(\n                Converter.class,\n                noVersion,\n                pluginLoader\n        );\n\n        PluginDesc<Converter> converterDescClasspath = new PluginDesc<>(\n                Converter.class,\n                noVersion,\n                systemLoader\n        );\n\n        assertEquals(converterDescPluginPath, converterDescClasspath);\n        assertEquals(converterDescPluginPath.hashCode(), converterDescClasspath.hashCode());\n\n        PluginDesc<Transformation> transformDescPluginPath = new PluginDesc<>(\n                Transformation.class,\n                null,\n                pluginLoader\n        );\n\n        PluginDesc<Transformation> transformDescClasspath = new PluginDesc<>(\n                Transformation.class,\n                noVersion,\n                pluginLoader\n        );\n\n        assertNotEquals(transformDescPluginPath, transformDescClasspath);\n    }\n']",Version;Plugin;quality;Converter;Equals;Desc;Desc;converter;Desc;class,1.0477378964424133e-09;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.924423694610596, -5.364071369171143, -4.6310133934021, -5.811179161071777, -5.492373466491699, -0.024509862065315247]",0.9757880568504333
2,"['    @Test\n    public void testPluginDescComparison() {\n        PluginDesc<Connector> connectorDescPluginPath = new PluginDesc<>(\n                Connector.class,\n                regularVersion,\n                pluginLoader\n        );\n\n        PluginDesc<Connector> connectorDescClasspath = new PluginDesc<>(\n                Connector.class,\n                newerVersion,\n                systemLoader\n        );\n\n        assertNewer(connectorDescPluginPath, connectorDescClasspath);\n\n        PluginDesc<Converter> converterDescPluginPath = new PluginDesc<>(\n                Converter.class,\n                noVersion,\n                pluginLoader\n        );\n\n        PluginDesc<Converter> converterDescClasspath = new PluginDesc<>(\n                Converter.class,\n                snaphotVersion,\n                systemLoader\n        );\n\n        assertNewer(converterDescPluginPath, converterDescClasspath);\n\n        PluginDesc<Transformation> transformDescPluginPath = new PluginDesc<>(\n                Transformation.class,\n                null,\n                pluginLoader\n        );\n\n        PluginDesc<Transformation> transformDescClasspath = new PluginDesc<>(\n                Transformation.class,\n                regularVersion,\n                systemLoader\n        );\n\n        assertNewer(transformDescPluginPath, transformDescClasspath);\n    }\n']",snaphot;Loader;system;Newer;Connector;Connector;Loader;Transformation;Desc;Path,1.3096723705530167e-09;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.944330215454102, -5.37587833404541, -4.627381324768066, -5.824831962585449, -5.494688034057617, -0.024384690448641777]",0.9759103059768677
2,"['    @Test\n    public void testAdminListenersConfigAllowedValues() {\n        Map<String, String> props = baseProps();\n\n        // no value set for ""admin.listeners""\n        WorkerConfig config = new WorkerConfig(WorkerConfig.baseConfigDef(), props);\n        assertNull(""Default value should be null."", config.getList(WorkerConfig.ADMIN_LISTENERS_CONFIG));\n\n        props.put(WorkerConfig.ADMIN_LISTENERS_CONFIG, """");\n        config = new WorkerConfig(WorkerConfig.baseConfigDef(), props);\n        assertTrue(config.getList(WorkerConfig.ADMIN_LISTENERS_CONFIG).isEmpty());\n\n        props.put(WorkerConfig.ADMIN_LISTENERS_CONFIG, ""http://a.b:9999, https://a.b:7812"");\n        config = new WorkerConfig(WorkerConfig.baseConfigDef(), props);\n        assertEquals(config.getList(WorkerConfig.ADMIN_LISTENERS_CONFIG), Arrays.asList(""http://a.b:9999"", ""https://a.b:7812""));\n\n        new WorkerConfig(WorkerConfig.baseConfigDef(), props);\n    }\n']",listeners;be;List;Worker;Allowed;LISTENERS;set;props;props;List,8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.792708873748779, -5.492672920227051, -4.725570201873779, -5.623079776763916, -5.271379470825195, -0.025094447657465935]",0.9752178192138672
2,"['    @Test(expected = ConfigException.class)\n    public void testAdminListenersNotAllowingEmptyStrings() {\n        Map<String, String> props = baseProps();\n        props.put(WorkerConfig.ADMIN_LISTENERS_CONFIG, ""http://a.b:9999,"");\n        new WorkerConfig(WorkerConfig.baseConfigDef(), props);\n    }\n']",CONFIG;Not;http;props;base;Empty;Allowing;Def;new;Config,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.954687118530273, -5.609732151031494, -4.657934188842773, -5.773250579833984, -5.349480152130127, -0.023885013535618782]",0.9763979911804199
2,"['    @Test(expected = ConfigException.class)\n    public void testAdminListenersNotAllowingBlankStrings() {\n        Map<String, String> props = baseProps();\n        props.put(WorkerConfig.ADMIN_LISTENERS_CONFIG, ""http://a.b:9999, ,https://a.b:9999"");\n        new WorkerConfig(WorkerConfig.baseConfigDef(), props);\n    }\n']",Blank;Not;put;new;props;Config;http;class;Admin;Config,3.899913281202316e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.923473834991455, -5.580550193786621, -4.680952548980713, -5.741860866546631, -5.338131904602051, -0.024016298353672028]",0.9762697815895081
2,['    @Test\n    public void testStartPaused() throws Exception {\n        final CountDownLatch pauseLatch = new CountDownLatch(1);\n\n        createWorkerTask(TargetState.PAUSED);\n\n        statusListener.onPause(taskId);\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                pauseLatch.countDown();\n                return null;\n            }\n'],Start;Exception;Paused;oid;Throwable;expect;Answer;Pause;status;answer,1.280568540096283e-09;9.89530235528946e-10;7.566995918750763e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.511093720793724e-10,5,5,"[-5.994349956512451, -5.453280925750732, -4.611408233642578, -5.844621181488037, -5.4820942878723145, -0.024055983871221542]",0.9762311577796936
2,"[""    @Test\n    public void testPause() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        AtomicInteger count = new AtomicInteger(0);\n        CountDownLatch pollLatch = expectPolls(10, count);\n        // In this test, we don't flush, so nothing goes any further than the offset writer\n\n        statusListener.onPause(taskId);\n        EasyMock.expectLastCall();\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n        assertTrue(awaitLatch(pollLatch));\n\n        workerTask.transitionTo(TargetState.PAUSED);\n\n        int priorCount = count.get();\n        Thread.sleep(100);\n\n        // since the transition is observed asynchronously, the count could be off by one loop iteration\n        assertTrue(count.get() - priorCount <= 1);\n\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n""]",Future;create;Shutdown;Power;initialize;AS;class;expect;Last;writer,5.093170329928398e-10;4.220055416226387e-10;3.92901711165905e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.938721179962158, -5.438091278076172, -4.658136367797852, -5.80189847946167, -5.455129146575928, -0.024050397798419]",0.9762366414070129
2,"[""    @Test\n    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        // In this test, we don't flush, so nothing goes any further than the offset writer\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(10);\n\n        PowerMock.verifyAll();\n    }\n""]",replay;olls;await;close;Easy;PROPS;executor;atch;initialize;flush,8.221832104027271e-10;6.984919309616089e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.941318988800049, -5.453525543212891, -4.656710624694824, -5.800288200378418, -5.448559284210205, -0.024022815749049187]",0.9762634634971619
2,['    @Test\n    public void testFailureInPoll() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = new CountDownLatch(1);\n        final RuntimeException exception = new RuntimeException();\n        EasyMock.expect(sourceTask.poll()).andAnswer(new IAnswer<List<SourceRecord>>() {\n            @Override\n            public List<SourceRecord> answer() throws Throwable {\n                pollLatch.countDown();\n                throw exception;\n            }\n'],class;throw;atch;poll;new;Listener;status;expect;PROPS;expect,5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.969034671783447, -5.429823398590088, -4.625765800476074, -5.841578960418701, -5.470523357391357, -0.024139072746038437]",0.9761499166488647
2,"[""    @Test\n    public void testPollReturnsNoRecords() throws Exception {\n        // Test that the task handles an empty list of records\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        // We'll wait for some data, then trigger a flush\n        final CountDownLatch pollLatch = expectEmptyPolls(1, new AtomicInteger());\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(0);\n\n        PowerMock.verifyAll();\n    }\n""]",Worker;Future;PROPS;Context;Shutdown;Duration;expect;initialize;Last;Records,7.566995918750763e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.936594009399414, -5.46286153793335, -4.658162593841553, -5.810817718505859, -5.447498798370361, -0.023952985182404518]",0.9763317108154297
2,"[""    @Test\n    public void testCommit() throws Exception {\n        // Test that the task commits properly when prompted\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        // We'll wait for some data, then trigger a flush\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(1);\n\n        PowerMock.verifyAll();\n    }\n""]",initialize;PROPS;Exception;task;poll;Shutdown;Future;source;wait;Commit,5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.9344706535339355, -5.469052791595459, -4.658151149749756, -5.800876617431641, -5.439962863922119, -0.02399604767560959]",0.976289689540863
2,"[""    @Test\n    public void testCommitFailure() throws Exception {\n        // Test that the task commits properly when prompted\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        // We'll wait for some data, then trigger a flush\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(false);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(1);\n\n        PowerMock.verifyAll();\n    }\n""]",poll;prompted;Shutdown;task;atch;class;AS;producer;expect;initialize,4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.93598747253418, -5.471322059631348, -4.6577467918396, -5.800901889801025, -5.440827369689941, -0.023982081562280655]",0.976303219795227
2,"['    @Test\n    public void testSendRecordsConvertsData() throws Exception {\n        createWorkerTask();\n\n        List<SourceRecord> records = new ArrayList<>();\n        // Can just use the same record for key and value\n        records.add(new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD));\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, ""toSend"", records);\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n        assertEquals(SERIALIZED_KEY, sent.getValue().key());\n        assertEquals(SERIALIZED_RECORD, sent.getValue().value());\n\n        PowerMock.verifyAll();\n    }\n']",expect;Power;Whitebox;Send;Worker;Records;SERIALIZED;Producer;RECORD;OFFSET,7.8580342233181e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.906254291534424, -5.52362060546875, -4.685214996337891, -5.755258560180664, -5.381850242614746, -0.02399546653032303]",0.9762901067733765
2,"['    @Test\n    public void testSendRecordsPropagatesTimestamp() throws Exception {\n        final Long timestamp = System.currentTimeMillis();\n\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, ""toSend"", records);\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n        assertEquals(timestamp, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n']",Collections;OFFSET;Records;CHEMA;CHEMA;Propagates;KEY;topic;Internal;Method,8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.903648853302002, -5.490169525146484, -4.682620525360107, -5.757504463195801, -5.396484851837158, -0.024090662598609924]",0.9761971831321716
2,"['    @Test(expected = InvalidRecordException.class)\n    public void testSendRecordsCorruptTimestamp() throws Exception {\n        final Long timestamp = -3L;\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, ""toSend"", records);\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n        assertEquals(null, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n']",topic;Corrupt;Send;Whitebox;worker;Worker;Source;worker;timestamp;Whitebox,7.566995918750763e-10;6.984919309616089e-10;4.94765117764473e-10;4.220055416226387e-10;3.92901711165905e-10;3.41970007866621e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.874003257602453e-10;2.6193447411060333e-10,5,5,"[-5.910930633544922, -5.474678039550781, -4.667888164520264, -5.776562690734863, -5.418118476867676, -0.02411673031747341]",0.9761718511581421
2,"['    @Test\n    public void testSendRecordsNoTimestamp() throws Exception {\n        final Long timestamp = -1L;\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, ""toSend"", records);\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n        assertEquals(null, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n']",Worker;Capture;Equals;CHEMA;Records;RECORD;Send;byte;Whitebox;PARTITION,8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.748006515204906e-10;4.147295840084553e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.925780773162842, -5.4990434646606445, -4.6663923263549805, -5.781800270080566, -5.415543079376221, -0.023981848731637]",0.9763033390045166
2,"['    @Test\n    public void testSendRecordsRetries() throws Exception {\n        createWorkerTask();\n\n        // Differentiate only by Kafka partition so we can reuse conversion expectations\n        SourceRecord record1 = new SourceRecord(PARTITION, OFFSET, ""topic"", 1, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);\n        SourceRecord record2 = new SourceRecord(PARTITION, OFFSET, ""topic"", 2, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);\n        SourceRecord record3 = new SourceRecord(PARTITION, OFFSET, ""topic"", 3, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);\n\n        // First round\n        expectSendRecordOnce(false);\n        // Any Producer retriable exception should work here\n        expectSendRecordSyncFailure(new org.apache.kafka.common.errors.TimeoutException(""retriable sync failure""));\n\n        // Second round\n        expectSendRecordOnce(true);\n        expectSendRecordOnce(false);\n\n        PowerMock.replayAll();\n\n        // Try to send 3, make first pass, second fail. Should save last two\n        Whitebox.setInternalState(workerTask, ""toSend"", Arrays.asList(record1, record2, record3));\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n        assertEquals(true, Whitebox.getInternalState(workerTask, ""lastSendFailed""));\n        assertEquals(Arrays.asList(record2, record3), Whitebox.getInternalState(workerTask, ""toSend""));\n\n        // Next they all succeed\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n        assertEquals(false, Whitebox.getInternalState(workerTask, ""lastSendFailed""));\n        assertNull(Whitebox.getInternalState(workerTask, ""toSend""));\n\n        PowerMock.verifyAll();\n    }\n']",by;replay;Send;First;round;only;conversion;Second;Timeout;Retries,9.89530235528946e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.897791862487793, -5.404618263244629, -4.67956018447876, -5.794064521789551, -5.455987453460693, -0.024129297584295273]",0.976159393787384
2,"['    @Test(expected = ConnectException.class)\n    public void testSendRecordsProducerCallbackFail() throws Exception {\n        createWorkerTask();\n\n        SourceRecord record1 = new SourceRecord(PARTITION, OFFSET, ""topic"", 1, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);\n        SourceRecord record2 = new SourceRecord(PARTITION, OFFSET, ""topic"", 2, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);\n\n        expectSendRecordProducerCallbackFail();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, ""toSend"", Arrays.asList(record1, record2));\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n    }\n']",PARTITION;Task;expect;PARTITION;Records;Source;Whitebox;Connect;Whitebox;worker,1.0186340659856796e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.421476766467094e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.892584323883057, -5.556247711181641, -4.6804938316345215, -5.761336326599121, -5.333286762237549, -0.024162229150533676]",0.9761274456977844
2,"['    @Test\n    public void testSendRecordsTaskCommitRecordFail() throws Exception {\n        createWorkerTask();\n\n        // Differentiate only by Kafka partition so we can reuse conversion expectations\n        SourceRecord record1 = new SourceRecord(PARTITION, OFFSET, ""topic"", 1, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);\n        SourceRecord record2 = new SourceRecord(PARTITION, OFFSET, ""topic"", 2, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);\n        SourceRecord record3 = new SourceRecord(PARTITION, OFFSET, ""topic"", 3, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);\n\n        // Source task commit record failure will not cause the task to abort\n        expectSendRecordOnce(false);\n        expectSendRecordTaskCommitRecordFail(false, false);\n        expectSendRecordOnce(false);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, ""toSend"", Arrays.asList(record1, record2, record3));\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n        assertEquals(false, Whitebox.getInternalState(workerTask, ""lastSendFailed""));\n        assertNull(Whitebox.getInternalState(workerTask, ""toSend""));\n\n        PowerMock.verifyAll();\n    }\n']",Differentiate;by;topic;CHEMA;Kafka;only;Worker;ock;CHEMA;Whitebox,1.6007106751203537e-09;1.280568540096283e-09;7.8580342233181e-10;4.984030965715647e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.7834979593753815e-10,5,5,"[-5.908823490142822, -5.487334728240967, -4.669047832489014, -5.8013763427734375, -5.414043426513672, -0.023998143151402473]",0.9762875437736511
2,['    @Test\n    public void testSlowTaskStart() throws Exception {\n        final CountDownLatch startupLatch = new CountDownLatch(1);\n        final CountDownLatch finishStartupLatch = new CountDownLatch(1);\n\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Object>() {\n            @Override\n            public Object answer() throws Throwable {\n                startupLatch.countDown();\n                assertTrue(awaitLatch(finishStartupLatch));\n                return null;\n            }\n'],PROPS;initialize;and;Slow;Exception;Worker;count;atch;final;class,1.7462298274040222e-09;8.440110832452774e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;2.9103830456733704e-10,5,5,"[-5.98167610168457, -5.416269302368164, -4.616159439086914, -5.8399786949157715, -5.4968342781066895, -0.02415710873901844]",0.976132333278656
2,['    @Test\n    public void testCancel() {\n        createWorkerTask();\n\n        offsetReader.close();\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.cancel();\n\n        PowerMock.verifyAll();\n    }\n'],ancel;Worker;worker;All;ock;Power;Task;Reader;Task;ock,1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.9634690284729, -5.5377655029296875, -4.650542736053467, -5.8085832595825195, -5.401772499084473, -0.023855332285165787]",0.9764270782470703
2,"['    @Test\n    public void testMetricsGroup() {\n        SourceTaskMetricsGroup group = new SourceTaskMetricsGroup(taskId, metrics);\n        SourceTaskMetricsGroup group1 = new SourceTaskMetricsGroup(taskId1, metrics);\n        for (int i = 0; i != 10; ++i) {\n            group.recordPoll(100, 1000 + i * 100);\n            group.recordWrite(10);\n        }\n        for (int i = 0; i != 20; ++i) {\n            group1.recordPoll(100, 1000 + i * 100);\n            group1.recordWrite(10);\n        }\n        assertEquals(1900.0, metrics.currentMetricValueAsDouble(group.metricGroup(), ""poll-batch-max-time-ms""), 0.001d);\n        assertEquals(1450.0, metrics.currentMetricValueAsDouble(group.metricGroup(), ""poll-batch-avg-time-ms""), 0.001d);\n        assertEquals(33.333, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-poll-rate""), 0.001d);\n        assertEquals(1000, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-poll-total""), 0.001d);\n        assertEquals(3.3333, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-write-rate""), 0.001d);\n        assertEquals(100, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-write-total""), 0.001d);\n        assertEquals(900.0, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-active-count""), 0.001d);\n\n        // Close the group\n        group.close();\n\n        for (MetricName metricName : group.metricGroup().metrics().metrics().keySet()) {\n            // Metrics for this group should no longer exist\n            assertFalse(group.metricGroup().groupId().includes(metricName));\n        }\n        // Sensors for this group should no longer exist\n        assertNull(group.metricGroup().metrics().getSensor(""sink-record-read""));\n        assertNull(group.metricGroup().metrics().getSensor(""sink-record-send""));\n        assertNull(group.metricGroup().metrics().getSensor(""sink-record-active-count""));\n        assertNull(group.metricGroup().metrics().getSensor(""partition-count""));\n        assertNull(group.metricGroup().metrics().getSensor(""offset-seq-number""));\n        assertNull(group.metricGroup().metrics().getSensor(""offset-commit-completion""));\n        assertNull(group.metricGroup().metrics().getSensor(""offset-commit-completion-skip""));\n        assertNull(group.metricGroup().metrics().getSensor(""put-batch-time""));\n\n        assertEquals(2900.0, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""poll-batch-max-time-ms""), 0.001d);\n        assertEquals(1950.0, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""poll-batch-avg-time-ms""), 0.001d);\n        assertEquals(66.667, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-poll-rate""), 0.001d);\n        assertEquals(2000, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-poll-total""), 0.001d);\n        assertEquals(6.667, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-write-rate""), 0.001d);\n        assertEquals(200, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-write-total""), 0.001d);\n        assertEquals(1800.0, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-active-count""), 0.001d);\n    }\n']",record;Metrics;rate;Group;Write;metrics;poll;new;time;record,6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.914529323577881, -5.4985151290893555, -4.659462928771973, -5.732026100158691, -5.43103551864624, -0.02417316660284996]",0.9761166572570801
2,"['    @Test\n    public void testHeaders() throws Exception {\n        Headers headers = new RecordHeaders();\n        headers.add(""header_key"", ""header_value"".getBytes());\n\n        org.apache.kafka.connect.header.Headers connectHeaders = new ConnectHeaders();\n        connectHeaders.add(""header_key"", new SchemaAndValue(Schema.STRING_SCHEMA, ""header_value""));\n\n        createWorkerTask();\n\n        List<SourceRecord> records = new ArrayList<>();\n        records.add(new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, null, connectHeaders));\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecord(true, false, true, true, true, headers);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, ""toSend"", records);\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n        assertEquals(SERIALIZED_KEY, sent.getValue().key());\n        assertEquals(SERIALIZED_RECORD, sent.getValue().value());\n        assertEquals(headers, sent.getValue().headers());\n\n        PowerMock.verifyAll();\n    }\n']",topic;RECORD;records;Task;Source;Send;expect;KEY;Producer;Capture,8.731149137020111e-10;4.220055416226387e-10;4.0745362639427185e-10;3.92901711165905e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.895217418670654, -5.447775840759277, -4.678154468536377, -5.750530242919922, -5.425133228302002, -0.02423134632408619]",0.9760598540306091
2,"['    @Test\n    public void testHeadersWithCustomConverter() throws Exception {\n        StringConverter stringConverter = new StringConverter();\n        TestConverterWithHeaders testConverter = new TestConverterWithHeaders();\n\n        createWorkerTask(TargetState.STARTED, stringConverter, testConverter, stringConverter);\n\n        List<SourceRecord> records = new ArrayList<>();\n\n        String stringA = ""Ã\x81rvÃ\xadztÅ±rÅ\x91 tÃ¼kÃ¶rfÃºrÃ³gÃ©p"";\n        org.apache.kafka.connect.header.Headers headersA = new ConnectHeaders();\n        String encodingA = ""latin2"";\n        headersA.addString(""encoding"", encodingA);\n\n        records.add(new SourceRecord(PARTITION, OFFSET, ""topic"", null, Schema.STRING_SCHEMA, ""a"", Schema.STRING_SCHEMA, stringA, null, headersA));\n\n        String stringB = ""Ð¢ÐµÑ\x81Ñ\x82Ð¾Ð²Ð¾Ðµ Ñ\x81Ð¾Ð¾Ð±Ñ\x89ÐµÐ½Ð¸Ðµ"";\n        org.apache.kafka.connect.header.Headers headersB = new ConnectHeaders();\n        String encodingB = ""koi8_r"";\n        headersB.addString(""encoding"", encodingB);\n\n        records.add(new SourceRecord(PARTITION, OFFSET, ""topic"", null, Schema.STRING_SCHEMA, ""b"", Schema.STRING_SCHEMA, stringB, null, headersB));\n\n        Capture<ProducerRecord<byte[], byte[]>> sentRecordA = expectSendRecord(false, false, true, true, false, null);\n        Capture<ProducerRecord<byte[], byte[]>> sentRecordB = expectSendRecord(false, false, true, true, false, null);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, ""toSend"", records);\n        Whitebox.invokeMethod(workerTask, ""sendRecords"");\n\n        assertEquals(ByteBuffer.wrap(""a"".getBytes()), ByteBuffer.wrap(sentRecordA.getValue().key()));\n        assertEquals(\n            ByteBuffer.wrap(stringA.getBytes(encodingA)),\n            ByteBuffer.wrap(sentRecordA.getValue().value())\n        );\n        assertEquals(encodingA, new String(sentRecordA.getValue().headers().lastHeader(""encoding"").value()));\n\n        assertEquals(ByteBuffer.wrap(""b"".getBytes()), ByteBuffer.wrap(sentRecordB.getValue().key()));\n        assertEquals(\n            ByteBuffer.wrap(stringB.getBytes(encodingB)),\n            ByteBuffer.wrap(sentRecordB.getValue().value())\n        );\n        assertEquals(encodingB, new String(sentRecordB.getValue().headers().lastHeader(""encoding"").value()));\n\n        PowerMock.verifyAll();\n    }\n']",atin;topic;Â±;Â©;Ãĥ;Â¶rf;headers;headers;header;ÂŃ,1.6298145055770874e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.796071529388428, -5.369866371154785, -4.723617076873779, -5.619566440582275, -5.361154556274414, -0.0252141822129488]",0.9751010537147522
2,"['    @Test\n    public void testEmbeddedConfigCast() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", Cast.Value.class.getName());\n        connProps.put(""transforms.example.spec"", ""int8"");\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",config;Props;foo;plugins;type;conn;transform;example;transforms;put,4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.961477279663086, -5.578668594360352, -4.648932933807373, -5.794459819793701, -5.401049613952637, -0.02376185916364193]",0.9765182137489319
2,"['    @Test\n    public void testEmbeddedConfigExtractField() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", ExtractField.Value.class.getName());\n        connProps.put(""transforms.example.field"", ""field"");\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",Embedded;Plugins;Extract;example;Extract;Props;config;transforms;config;plugins,1.0186340659856796e-09;8.440110832452774e-10;7.130438461899757e-10;6.984919309616089e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.967354774475098, -5.552622318267822, -4.639132976531982, -5.816982269287109, -5.4253621101379395, -0.023764535784721375]",0.9765155911445618
2,"['    @Test\n    public void testEmbeddedConfigFlatten() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", Flatten.Value.class.getName());\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",construct;config;config;transform;Config;that;type;new;conn;put,1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.97173547744751, -5.586682319641113, -4.644563674926758, -5.807945728302002, -5.403571605682373, -0.023693639785051346]",0.9765849709510803
2,"['    @Test\n    public void testEmbeddedConfigHoistField() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", HoistField.Value.class.getName());\n        connProps.put(""transforms.example.field"", ""field"");\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",Mock;Embedded;plugins;Props;put;Name;extended;Hoist;when;conn,1.1641532182693481e-09;9.240466170012951e-10;8.731149137020111e-10;7.566995918750763e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;2.9103830456733704e-10,5,5,"[-5.964694023132324, -5.563200950622559, -4.64105224609375, -5.810083866119385, -5.417675018310547, -0.02376674860715866]",0.9765135645866394
2,"['    @Test\n    public void testEmbeddedConfigInsertField() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", InsertField.Value.class.getName());\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",Mock;config;Props;transform;transforms;Connector;plugins;Connector;constructing;class,1.3969838619232178e-09;8.149072527885437e-10;7.8580342233181e-10;7.566995918750763e-10;7.421476766467094e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.970168590545654, -5.564781665802002, -4.640841007232666, -5.81308126449585, -5.415737152099609, -0.023747773841023445]",0.9765318632125854
2,"['    @Test\n    public void testEmbeddedConfigMaskField() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", MaskField.Value.class.getName());\n        connProps.put(""transforms.example.fields"", ""field"");\n\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",Mock;that;transforms;connector;Embedded;foo;config;Props;put;field,9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.020410753786564e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.977545738220215, -5.567112922668457, -4.6342244148254395, -5.821300506591797, -5.425446033477783, -0.023715991526842117]",0.976563036441803
2,"['    @Test\n    public void testEmbeddedConfigRegexRouter() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", RegexRouter.class.getName());\n        connProps.put(""transforms.example.regex"", ""(.*)"");\n        connProps.put(""transforms.example.replacement"", ""prefix-$1"");\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",Props;replacement;Props;Regex;example;put;new;conn;transform;plugins,7.566995918750763e-10;6.693881005048752e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.952878475189209, -5.576360702514648, -4.65927267074585, -5.78501558303833, -5.390426158905029, -0.023771636188030243]",0.9765086770057678
2,"['    @Test\n    public void testEmbeddedConfigReplaceField() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", ReplaceField.Value.class.getName());\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",only;Mock;config;Safe;construct;Validate;transform;Map;example;Field,1.6298145055770874e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.967296123504639, -5.566736221313477, -4.645171165466309, -5.809818267822266, -5.409780502319336, -0.023742185905575752]",0.9765374660491943
2,"['    @Test\n    public void testEmbeddedConfigSetSchemaMetadata() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", SetSchemaMetadata.Value.class.getName());\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",Plugins;plugins;foo;the;construct;config;Set;put;we're;new,1.1350493878126144e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;3.2014213502407074e-10,5,5,"[-5.963496208190918, -5.585212707519531, -4.652186870574951, -5.793591022491455, -5.392668724060059, -0.02374090440571308]",0.9765385985374451
2,"['    @Test\n    public void testEmbeddedConfigTimestampConverter() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", TimestampConverter.Value.class.getName());\n        connProps.put(""transforms.example.target.type"", ""unix"");\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",example;foo;Config;put;conn;Connector;Plugins;that;Validate;Embedded,1.2223608791828156e-09;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.165929906070232e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10,5,5,"[-5.948012351989746, -5.567999362945557, -4.654979705810547, -5.7939772605896, -5.394522190093994, -0.02381168119609356]",0.9764694571495056
2,"['    @Test\n    public void testEmbeddedConfigTimestampRouter() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", TimestampRouter.class.getName());\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",example;foo;config;get;Timestamp;constructing;put;plugins;Mock;outer,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.093170329928398e-10;4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.962764263153076, -5.575801849365234, -4.648175239562988, -5.805861949920654, -5.398201942443848, -0.023754756897687912]",0.9765251874923706
2,"['    @Test\n    public void testEmbeddedConfigValueToKey() {\n        // Validate that we can construct a Connector config containing the extended config for the transform\n        HashMap<String, String> connProps = new HashMap<>();\n        connProps.put(""name"", ""foo"");\n        connProps.put(""connector.class"", MockConnector.class.getName());\n        connProps.put(""transforms"", ""example"");\n        connProps.put(""transforms.example.type"", ValueToKey.class.getName());\n        connProps.put(""transforms.example.fields"", ""field"");\n\n        Plugins plugins = null; // Safe when we\'re only constructing the config\n        new ConnectorConfig(plugins, connProps);\n    }\n']",Key;example;Validate;transforms;put;new;transforms;Mock;plugins;connector,8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.965486526489258, -5.570494651794434, -4.643524169921875, -5.807720184326172, -5.408937454223633, -0.02375883236527443]",0.9765211939811707
2,['    @Test\n    public void currentStateIsNullWhenNotInitialized() {\n        assertNull(tracker.currentState());\n    }\n'],tracker;Not;Null;State;State;When;current;Initialized;Null;current,1.57160684466362e-09;1.5133991837501526e-09;9.313225746154785e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-6.031461715698242, -5.640885353088379, -4.542899131774902, -5.918307781219482, -5.391986846923828, -0.02412545680999756]",0.9761631488800049
2,"['    @Test\n    public void currentState() {\n        for (State state : State.values()) {\n            tracker.changeState(state, time.milliseconds());\n            assertEquals(state, tracker.currentState());\n        }\n    }\n']",values;current;tracker;time;state;State;Equals;State;state;state,1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.4551915228366852e-11,5,5,"[-6.018917560577393, -5.551738262176514, -4.591950416564941, -5.881889343261719, -5.460076332092285, -0.0237690769135952]",0.9765111804008484
2,"['@TestAnnotation\n    public void loadConfig(TestBuildAndRunTimeConfig buildTimeConfig, TestRunTimeConfig runTimeConfig,\n            FooRuntimeConfig fooRuntimeConfig) {\n        System.out.printf(""loadConfig, buildTimeConfig=%s, runTimeConfig=%s, fooRuntimeConfig=%s%n"", buildTimeConfig,\n                runTimeConfig, fooRuntimeConfig);\n        this.buildTimeConfig = buildTimeConfig;\n        this.runTimeConfig = runTimeConfig;\n        this.fooRuntimeConfig = fooRuntimeConfig;\n    }\n']",Annotation;this;printf;Runtime;load;build;Config;Config;run;build,3.725290298461914e-09;2.3283064365386963e-09;1.2223608791828156e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10,5,5,"[-5.987651348114014, -5.537330150604248, -4.590378761291504, -5.808149814605713, -5.409091472625732, -0.024368753656744957]",0.9759257435798645
2,"['    @Test\n    public void testConfiguredValues() {\n        assertEquals(""quarkus"", dummyBean.getName());\n        assertEquals(""hello"", dummyBean.getMessage());\n    }\n']",quarkus;Configured;Values;Equals;get;dummy;Bean;Bean;dummy;Name,3.725290298461914e-09;2.153683453798294e-09;4.656612873077393e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.995402812957764, -5.6654253005981445, -4.594733715057373, -5.858189105987549, -5.356044292449951, -0.023918533697724342]",0.9763652682304382
2,"['    @Test\n    public void testImport() {\n        RestAssured.when().get(""/my-entity/1"").then().body(is(""MyEntity:TEST ENTITY""));\n    }\n']",when;Entity;My;ENTITY;my;Import;body;get;EST;Rest,2.7939677238464355e-09;1.862645149230957e-09;1.280568540096283e-09;9.313225746154785e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-3.7834979593753815e-10;-1.3969838619232178e-09;-1.57160684466362e-09,5,5,"[-6.020240306854248, -5.643610000610352, -4.599758625030518, -5.881753444671631, -5.356311321258545, -0.02381284534931183]",0.9764684438705444
2,"['    @Test()\n    public void testSecureAccessFailure() {\n        RestAssured.when().get(""/secure-test"").then()\n                .statusCode(401);\n    }\n']",Failure;Access;Assured;secure;status;Code;Secure;Rest;when;get,1.1641532182693481e-10;-4.0745362639427185e-10;-8.149072527885437e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.3969838619232178e-09;-1.3969838619232178e-09;-2.3283064365386963e-09;-2.3283064365386963e-09,5,5,"[-6.012585639953613, -5.571972846984863, -4.597799777984619, -5.874713897705078, -5.4214396476745605, -0.02383694052696228]",0.9764449000358582
2,"['    @Test()\n    public void testSecureRoleFailure() {\n        RestAssured.given().auth().preemptive().basic(""jdoe"", ""p4ssw0rd"")\n                .when().get(""/secure-test"").then()\n                .statusCode(403);\n    }\n']",preemptive;Assured;oe;Role;ss;basic;rd;Code;given;Rest,2.7066562324762344e-09;1.979060471057892e-09;9.89530235528946e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-6.012880325317383, -5.5720953941345215, -4.634563446044922, -5.840939044952393, -5.414705753326416, -0.02359270118176937]",0.9766833186149597
2,"['    @Test()\n    public void testSecureAccessSuccess() {\n        RestAssured.given().auth().preemptive().basic(""stuart"", ""test"")\n                .when().get(""/secure-test"").then()\n                .statusCode(200);\n    }\n']",Assured;preemptive;Success;secure;Secure;Access;given;get;basic;when,2.473825588822365e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.57160684466362e-09;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10,5,5,"[-6.005036354064941, -5.5592875480651855, -4.621946334838867, -5.841960906982422, -5.4345598220825195, -0.02369631826877594]",0.9765822291374207
2,"['    @Test\n    public void testJaxrsGetFailure() {\n        RestAssured.when().get(""/jaxrs-secured/rolesClass"").then()\n                .statusCode(401);\n    }\n']",roles;Get;when;axrs;Assured;secured;status;get;Rest;Class,1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;4.0745362639427185e-10;3.2014213502407074e-10;0.0;-1.1641532182693481e-10;-4.656612873077393e-10;-4.656612873077393e-10,5,5,"[-5.991022109985352, -5.539009094238281, -4.607766151428223, -5.858728408813477, -5.4138503074646, -0.024000704288482666]",0.9762850403785706
2,"['    @Test\n    public void testJaxrsGetRoleFailure() {\n        RestAssured.given().auth().preemptive().basic(""jdoe"", ""p4ssw0rd"")\n                .when().get(""/jaxrs-secured/rolesClass"").then()\n                .statusCode(403);\n    }\n']",Assured;Rest;axrs;oe;get;preemptive;Role;axrs;when;basic,2.2992026060819626e-09;1.862645149230957e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-6.017339706420898, -5.578035831451416, -4.630858898162842, -5.842263698577881, -5.428814888000488, -0.023527730256319046]",0.9767469167709351
2,"['    @Test\n    public void testJaxrsGetRoleSuccess() {\n        RestAssured.given().auth().preemptive().basic(""scott"", ""jb0ss"")\n                .when().get(""/jaxrs-secured/rolesClass"").then()\n                .statusCode(200);\n    }\n']",preemptive;roles;auth;Get;Assured;axrs;scott;Code;given;Success,1.8044374883174896e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;0.0,5,5,"[-6.016923904418945, -5.57191801071167, -4.625981330871582, -5.839853286743164, -5.440152645111084, -0.023557770997285843]",0.9767175316810608
2,"['    @Test\n    public void testJaxrsPathAdminRoleSuccess() {\n        RestAssured.given().auth().preemptive().basic(""scott"", ""jb0ss"")\n                .when().get(""/jaxrs-secured/parameterized-paths/my/banking/admin"").then()\n                .statusCode(200);\n    }\n']",when;axrs;Success;Assured;axrs;secured;get;admin;parameterized;ss,1.862645149230957e-09;1.3387762010097504e-09;1.1641532182693481e-09;1.1641532182693481e-09;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.0372681319713593e-10;0.0,5,5,"[-6.012142181396484, -5.572476863861084, -4.634269714355469, -5.829102039337158, -5.429774284362793, -0.023563358932733536]",0.9767121076583862
2,"['    @Test\n    public void testJaxrsPathAdminRoleFailure() {\n        RestAssured.given().auth().preemptive().basic(""noadmin"", ""n0Adm1n"")\n                .when().get(""/jaxrs-secured/parameterized-paths/my/banking/admin"").then()\n                .statusCode(403);\n    }\n']",basic;admin;oadmin;my;preemptive;parameterized;axrs;status;axrs;given,1.6298145055770874e-09;9.89530235528946e-10;9.89530235528946e-10;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.000945568084717, -5.554629325866699, -4.642802715301514, -5.827375411987305, -5.420088768005371, -0.023626115173101425]",0.9766508936882019
2,"['    @Test\n    public void testJaxrsPathUserRoleSuccess() {\n        RestAssured.given().auth().preemptive().basic(""stuart"", ""test"")\n                .when().get(""/jaxrs-secured/parameterized-paths/my/banking/view"").then()\n                .statusCode(200);\n    }\n']",User;Role;anking;Success;auth;parameterized;Assured;status;preemptive;get,1.979060471057892e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-6.019130706787109, -5.5536675453186035, -4.619465351104736, -5.851618766784668, -5.454011917114258, -0.023593632504343987]",0.9766826629638672
2,"['    @Test\n    public void testJaxrsUserRoleSuccess() {\n        RestAssured.given().auth().preemptive().basic(""scott"", ""jb0ss"")\n                .when().get(""/jaxrs-secured/subject/secured"").then()\n                .statusCode(200)\n                .body(equalTo(""scott""));\n    }\n']",preemptive;Rest;given;when;body;axrs;equal;auth;Code;status,1.57160684466362e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.0073652267456055, -5.529186248779297, -4.608006477355957, -5.842859745025635, -5.464276313781738, -0.02381889708340168]",0.9764626622200012
2,"['    @Test\n    public void testJaxrsGetPermitAll() {\n        RestAssured.when().get(""/jaxrs-secured/subject/unsecured"").then()\n                .statusCode(200)\n                .body(equalTo(""anonymous""));\n    }\n']",subject;Get;equal;All;when;get;Rest;axrs;axrs;unsecured,3.725290298461914e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;-2.9103830456733704e-10,5,5,"[-6.011857032775879, -5.52958869934082, -4.599916934967041, -5.852032661437988, -5.46547794342041, -0.023856379091739655]",0.97642582654953
2,"['    @Test\n    public void testJaxrsGetDenyAllWithoutAuth() {\n        RestAssured.when().get(""/jaxrs-secured/subject/denied"").then()\n                .statusCode(401);\n    }\n']",subject;Without;axrs;denied;Code;Auth;axrs;Den;get;Get,1.280568540096283e-09;1.1641532182693481e-09;8.731149137020111e-10;5.238689482212067e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-6.003291130065918, -5.5516486167907715, -4.608492851257324, -5.865574359893799, -5.417585372924805, -0.023874538019299507]",0.9764081835746765
2,"['    @Test\n    public void testJaxrsGetDenyAllWithAuth() {\n        RestAssured.given().auth().preemptive().basic(""scott"", ""jb0ss"")\n                .when().get(""/jaxrs-secured/subject/denied"").then()\n                .statusCode(403);\n    }\n']",basic;status;denied;All;Rest;get;preemptive;Den;axrs;auth,1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.7462298274040222e-10;2.9103830456733704e-11;0.0,5,5,"[-6.023202896118164, -5.575728893280029, -4.627007007598877, -5.848567008972168, -5.434648513793945, -0.023515736684203148]",0.976758599281311
2,"['    @Test\n    public void testTracer() {\n        RestAssured.when().get(""/tracer"").then()\n                .statusCode(200)\n                .body(is(""Hello Tracer!""));\n    }\n']",Hello;Tracer;Rest;Assured;body;Tracer;status;get;Code;tracer,3.259629011154175e-09;1.862645149230957e-09;8.149072527885437e-10;6.402842700481415e-10;3.4924596548080444e-10;3.4924596548080444e-10;-2.3283064365386963e-10;-5.238689482212067e-10;-1.0477378964424133e-09;-2.444721758365631e-09,5,5,"[-6.018082141876221, -5.483677387237549, -4.577993392944336, -5.879208564758301, -5.487813472747803, -0.02408554218709469]",0.9762023091316223
2,"['    @Test\n    public void testHelloEndpoint() {\n        given()\n                .when().get(""/hello"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello""));\n    }\n']",when;Hello;Endpoint;given;hello;body;status;hello;get;Code,3.259629011154175e-09;1.5133991837501526e-09;1.3969838619232178e-09;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-1.076841726899147e-09;-1.8044374883174896e-09,5,5,"[-6.019649028778076, -5.497603893280029, -4.576404094696045, -5.865366458892822, -5.484611511230469, -0.024092990905046463]",0.9761949181556702
2,"['    @Test\n    public void testGreetingEndpoint() {\n        String uuid = UUID.randomUUID().toString();\n        given()\n                .pathParam(""name"", uuid)\n                .when().get(""/hello/greeting/{name}"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello "" + uuid));\n    }\n']",random;reeting;uid;status;hello;body;Param;uid;uid;Code,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-6.032817363739014, -5.5013298988342285, -4.577672004699707, -5.882383346557617, -5.503692150115967, -0.023902006447315216]",0.976381242275238
2,"['    @Test\n    public void testHelloEndpoint() {\n        given()\n                .when().get(""/hello"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello""));\n    }\n']",when;Hello;Endpoint;given;hello;body;status;hello;get;Code,3.259629011154175e-09;1.5133991837501526e-09;1.3969838619232178e-09;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-1.076841726899147e-09;-1.8044374883174896e-09,5,5,"[-6.019649028778076, -5.497603893280029, -4.576404094696045, -5.865366458892822, -5.484611511230469, -0.024092990905046463]",0.9761949181556702
2,"['    @Test\n    public void t1() {\n        given()\n                .when().get(""/hello/greeting/foo"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello foo""));\n    }\n']",reeting;body;hello;foo;when;get;hello;Code;foo;given,1.3096723705530167e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;-4.656612873077393e-10;-1.2223608791828156e-09,5,5,"[-6.038322925567627, -5.531317710876465, -4.591004848480225, -5.861971378326416, -5.476985454559326, -0.023797478526830673]",0.9764834642410278
2,"['    @Test\n    public void t2() {\n        given()\n                .when().get(""/hello/greeting/foo"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello foo""));\n    }\n']",foo;Code;hello;body;given;get;status;reeting;foo;hello,2.561137080192566e-09;2.3283064365386963e-09;1.3969838619232178e-09;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;0.0;-3.4924596548080444e-10;-3.4924596548080444e-10;-1.1641532182693481e-09,5,5,"[-6.037248134613037, -5.523486614227295, -4.5891499519348145, -5.86369514465332, -5.480825901031494, -0.02382972277700901]",0.9764518737792969
2,"['    @Test\n    public void t3() {\n        given()\n                .when().get(""/hello/greeting/foo"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello foo""));\n    }\n']",reeting;foo;get;foo;Code;when;body;given;hello;hello,3.4924596548080444e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-6.984919309616089e-10;-1.1641532182693481e-09,5,5,"[-6.037215709686279, -5.524389266967773, -4.5907368659973145, -5.86121129989624, -5.479351043701172, -0.02382320538163185]",0.9764583110809326
2,"['    @Test\n    public void t4() {\n        given()\n                .when().get(""/hello/greeting/foo"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello foo""));\n    }\n']",when;body;hello;foo;Code;reeting;foo;get;status;given,1.3969838619232178e-09;8.149072527885437e-10;5.820766091346741e-10;2.3283064365386963e-10;0.0;-2.9103830456733704e-11;-5.820766091346741e-11;-2.6193447411060333e-10;-6.984919309616089e-10;-1.1059455573558807e-09,5,5,"[-6.03655481338501, -5.524813652038574, -4.589381694793701, -5.862522602081299, -5.479236125946045, -0.02383391372859478]",0.9764478802680969
2,"['    @Test\n    public void t5() {\n        given()\n                .when().get(""/hello/greeting/foo"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello foo""));\n    }\n']",hello;foo;get;body;given;foo;status;hello;when;Code,1.862645149230957e-09;1.1641532182693481e-09;6.402842700481415e-10;0.0;-4.0745362639427185e-10;-4.656612873077393e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-6.036301612854004, -5.523857116699219, -4.589227676391602, -5.861639499664307, -5.479736804962158, -0.02384054847061634]",0.976441502571106
2,"['    @Test\n    public void unitStyleTest2() {\n        Assertions.assertEquals(""UNIT"", UnitService.service());\n    }\n']",Style;service;Equals;UNIT;Assertions;Service;Unit;unit,4.190951585769653e-09;1.6298145055770874e-09;4.0745362639427185e-10;3.4924596548080444e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-1.1641532182693481e-09;-2.7939677238464355e-09,5,5,"[-6.0051798820495605, -5.635569095611572, -4.5767998695373535, -5.879795551300049, -5.378114223480225, -0.024020487442612648]",0.9762657284736633
2,"['    @Test\n    public void unitStyleTest() {\n        HelloResource res = new HelloResource();\n        Assertions.assertEquals(""Hi"", res.sayHello());\n    }\n']",Style;Resource;Hi;res;Hello;Equals;res;Resource;new;Hello,2.3283064365386963e-09;1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10;-6.984919309616089e-10,5,5,"[-6.000178337097168, -5.636689186096191, -4.601695537567139, -5.858127117156982, -5.368176460266113, -0.023879891261458397]",0.976402997970581
2,"['    @Test\n    public void testHelloEndpoint() {\n        given()\n                .when().get(""/hello"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello""));\n    }\n']",when;Hello;Endpoint;given;hello;body;status;hello;get;Code,3.259629011154175e-09;1.5133991837501526e-09;1.3969838619232178e-09;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-1.076841726899147e-09;-1.8044374883174896e-09,5,5,"[-6.019649028778076, -5.497603893280029, -4.576404094696045, -5.865366458892822, -5.484611511230469, -0.024092990905046463]",0.9761949181556702
2,"['    @Test\n    public void testGreetingEndpoint() {\n        String uuid = UUID.randomUUID().toString();\n        given()\n                .pathParam(""name"", uuid)\n                .when().get(""/hello/greeting/{name}"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello "" + uuid));\n    }\n']",random;reeting;uid;status;hello;body;Param;uid;uid;Code,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-6.032817363739014, -5.5013298988342285, -4.577672004699707, -5.882383346557617, -5.503692150115967, -0.023902006447315216]",0.976381242275238
2,"['    @Test\n    public void foo() {\n        given()\n                .when().get(""/hello/greeting/foo"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello foo""));\n    }\n']",reeting;Code;hello;get;given;foo;when;status;foo;body,3.725290298461914e-09;1.979060471057892e-09;3.4924596548080444e-10;2.9103830456733704e-10;1.7462298274040222e-10;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-5.238689482212067e-10;-6.984919309616089e-10,5,5,"[-6.037301063537598, -5.518306732177734, -4.580755233764648, -5.873159885406494, -5.486931324005127, -0.023885246366262436]",0.9763977527618408
2,"['    @Test\n    public void bar() {\n        given()\n                .when().get(""/hello/greeting/foo"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello foo""));\n    }\n']",bar;Code;foo;foo;given;body;get;when;hello;status,2.7939677238464355e-09;2.0954757928848267e-09;1.9208528101444244e-09;1.1059455573558807e-09;8.149072527885437e-10;6.984919309616089e-10;4.0745362639427185e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-6.038954257965088, -5.5181379318237305, -4.578803062438965, -5.874383926391602, -5.48776912689209, -0.023895371705293655]",0.9763878583908081
2,"['    @Test\n    public void testHelloEndpoint() {\n        given()\n                .when().get(""/hello"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello""));\n    }\n']",when;Hello;Endpoint;given;hello;body;status;hello;get;Code,3.259629011154175e-09;1.5133991837501526e-09;1.3969838619232178e-09;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-1.076841726899147e-09;-1.8044374883174896e-09,5,5,"[-6.019649028778076, -5.497603893280029, -4.576404094696045, -5.865366458892822, -5.484611511230469, -0.024092990905046463]",0.9761949181556702
2,"['    @Test\n    public void testGreetingEndpoint() {\n        String uuid = UUID.randomUUID().toString();\n        given()\n                .pathParam(""name"", uuid)\n                .when().get(""/hello/greeting/{name}"")\n                .then()\n                .statusCode(200)\n                .body(is(""hello "" + uuid));\n    }\n']",random;reeting;uid;status;hello;body;Param;uid;uid;Code,1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-6.032817363739014, -5.5013298988342285, -4.577672004699707, -5.882383346557617, -5.503692150115967, -0.023902006447315216]",0.976381242275238
2,"['    @Test\n    public void testDevServicesProperties() {\n        assertThat(context.devServicesProperties()).hasSize(1).containsKey(""quarkus.mongodb.connection-string"");\n    }\n']",dev;Properties;Services;Services;connection;Key;mongod;Properties;That;contains,1.280568540096283e-09;7.8580342233181e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;8.731149137020111e-11;0.0;-1.1641532182693481e-10,5,5,"[-5.994585990905762, -5.670973300933838, -4.62989616394043, -5.81862735748291, -5.333041667938232, -0.02377396449446678]",0.9765064120292664
2,"['    @Test\n    public void testFieldAndGetterReflectionOnEntityFromServlet() throws Exception {\n        RestAssured.when().get(""/core/reflection"").then()\n                .body(is(""OK""));\n    }\n']",Getter;when;core;Entity;get;reflection;From;Field;body;Exception,2.0954757928848267e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0;-2.9103830456733704e-10,5,5,"[-5.9970574378967285, -5.512720584869385, -4.6026129722595215, -5.866303443908691, -5.436997413635254, -0.02401874214410782]",0.976267397403717
2,"['    @Test\n    public void excludedNative() {\n        RestAssured.when()\n                .get(""/resources/test-resources/file.adoc"")\n                .then()\n                .statusCode(404);\n\n        RestAssured.when()\n                .get(""/resources/test-resources/excluded/unwanted.txt"")\n                .then()\n                .statusCode(404);\n\n        RestAssured.when()\n                .get(""/resources/META-INF/quarkus-native-resources.txt"")\n                .then()\n                .statusCode(404);\n    }\n']",quarkus;anted;excluded;Native;Rest;when;status;native;resources;excluded,1.979060471057892e-09;1.5133991837501526e-09;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.975502967834473, -5.433272361755371, -4.608619213104248, -5.836629390716553, -5.50712776184082, -0.024140004068613052]",0.9761490225791931
2,"['    @Test\n    public void testFieldAndGetterReflectionOnEntityFromServlet() throws Exception {\n        RestAssured.when().get(""/core/charsetsupport"").then()\n                .body(is(""OK""));\n    }\n']",Field;core;Rest;charsetsupport;Getter;OK;From;get;On;Entity,1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;5.820766091346741e-11;-5.820766091346741e-11;-3.2014213502407074e-10;-4.656612873077393e-10,5,5,"[-5.997870445251465, -5.527834892272949, -4.609967231750488, -5.859013557434082, -5.4273176193237305, -0.02394413948059082]",0.9763403534889221
2,"['    @Test\n    public void testSelfWithoutNested() {\n        final String resourceA = BASE_PKG + "".ResourceA"";\n\n        assertRegistration(""ResourceA"", resourceA);\n        assertRegistration(""FAILED"", resourceA + ""$InnerClassOfA"");\n        assertRegistration(""FAILED"", resourceA + ""$StaticClassOfA"");\n        assertRegistration(""FAILED"", resourceA + ""$InterfaceOfA"");\n    }\n']",Interface;PK;FAILED;Class;Resource;Inner;FAILED;resource;Registration;resource,9.313225746154785e-10;8.149072527885437e-10;5.384208634495735e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.4551915228366852e-10;5.093170329928398e-11;2.9103830456733704e-11;0.0;0.0,5,5,"[-5.958578109741211, -5.628029823303223, -4.642138481140137, -5.789575576782227, -5.344621658325195, -0.023933548480272293]",0.976350724697113
2,"['    @Test\n    public void testSelfWithNested() {\n        final String resourceB = BASE_PKG + "".ResourceB"";\n\n        assertRegistration(""ResourceB"", resourceB);\n        assertRegistration(""InnerClassOfB"", resourceB + ""$InnerClassOfB"");\n        assertRegistration(""StaticClassOfB"", resourceB + ""$StaticClassOfB"");\n        assertRegistration(""InterfaceOfB"", resourceB + ""$InterfaceOfB"");\n        assertRegistration(""InnerInnerOfB"", resourceB + ""$InnerClassOfB$InnerInnerOfB"");\n    }\n']",Interface;Class;Static;Registration;Self;resource;Class;Resource;Inner;Inner,9.89530235528946e-10;7.566995918750763e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.931069374084473, -5.587652683258057, -4.645116806030273, -5.767106533050537, -5.35186243057251, -0.02416548691689968]",0.9761240482330322
2,"['    @Test\n    public void testTargetWithNested() {\n        final String resourceC = BASE_PKG + "".ResourceC"";\n\n        assertRegistration(""FAILED"", resourceC);\n        assertRegistration(""InaccessibleClassOfC"", resourceC + ""$InaccessibleClassOfC"");\n        assertRegistration(""OtherInaccessibleClassOfC"", resourceC + ""$InaccessibleClassOfC$OtherInaccessibleClassOfC"");\n    }\n']",Target;PK;Inaccessible;Registration;resource;Registration;Inaccessible;FAILED;ested;Resource,1.6298145055770874e-09;1.1641532182693481e-09;5.966285243630409e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.940646171569824, -5.623063564300537, -4.653103351593018, -5.769487380981445, -5.335393905639648, -0.02400093711912632]",0.9762848019599915
2,"['    @Test\n    public void testTargetWithoutNested() {\n        final String resourceD = BASE_PKG + "".ResourceD"";\n\n        assertRegistration(""FAILED"", resourceD);\n        assertRegistration(""StaticClassOfD"", resourceD + ""$StaticClassOfD"");\n        assertRegistration(""FAILED"", resourceD + ""$StaticClassOfD$OtherAccessibleClassOfD"");\n    }\n']",Registration;Class;Accessible;Registration;Class;resource;resource;Static;Resource;Class,9.74978320300579e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.947603225708008, -5.637739658355713, -4.649436950683594, -5.78281307220459, -5.320439338684082, -0.023996397852897644]",0.9762893319129944
2,"['    @Test\n    public void testEntitySerializationFromServlet() throws Exception {\n        RestAssured.when().get(""/core/serialization"").then()\n                .body(is(""OK""));\n    }\n']",when;Assured;OK;core;From;Rest;Entity;Exception;body;serialization,6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;-8.731149137020111e-11;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-6.0025763511657715, -5.560335636138916, -4.60630464553833, -5.8544206619262695, -5.418071746826172, -0.023894673213362694]",0.9763885140419006
2,"['    @Test\n    public void testFieldAndGetterReflectionOnEntityFromServlet() throws Exception {\n        RestAssured.when().get(""/jpa/testreflection"").then()\n                .body(is(""OK""));\n    }\n']",when;On;OK;Reflection;From;Assured;Servlet;get;Field;body,1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.988871097564697, -5.5068817138671875, -4.612054824829102, -5.855250835418701, -5.429981708526611, -0.024030962958931923]",0.9762553572654724
2,"['    @Test\n    public void testRunTogetherCodestartsJava() throws Exception {\n        generateProjectRunTests(""maven"", ""java"", getExtensionCodestarts());\n    }\n']",maven;Codestarts;ests;java;get;Codestarts;Run;Run;Project;Together,3.725290298461914e-09;2.561137080192566e-09;2.2118911147117615e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;0.0;0.0;-4.656612873077393e-10,5,5,"[-5.985330581665039, -5.614725589752197, -4.587257385253906, -5.877082824707031, -5.3261027336120605, -0.024298597127199173]",0.9759941101074219
2,"['    @Test\n    public void testRunTogetherCodestartsKotlin() throws Exception {\n        generateProjectRunTests(""maven"", ""kotlin"", getExtensionCodestarts());\n    }\n']",maven;Together;Exception;generate;Run;Codestarts;otlin;Project;ests;get,6.6356733441352844e-09;5.122274160385132e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10,5,5,"[-5.963100433349609, -5.615042686462402, -4.608827114105225, -5.850898265838623, -5.3000898361206055, -0.024340365082025528]",0.9759534597396851
2,"['    @Test\n    public void testRunTogetherCodestartsScala() throws Exception {\n        generateProjectRunTests(""maven"", ""scala"", getExtensionCodestarts());\n    }\n']",Extension;Codestarts;maven;scala;Project;Run;get;Exception;Run;Codestarts,2.3283064365386963e-09;2.2118911147117615e-09;2.0954757928848267e-09;1.1641532182693481e-09;6.984919309616089e-10;-3.4924596548080444e-10;-5.238689482212067e-10;-8.149072527885437e-10;-9.313225746154785e-10;-1.3387762010097504e-09,5,5,"[-5.975582599639893, -5.617029666900635, -4.600946426391602, -5.859694004058838, -5.31033182144165, -0.0243031345307827]",0.975989818572998
2,"['    @ParameterizedTest\n    public void testGradle(String language) throws Exception {\n        final List<String> codestarts = getExtensionCodestarts();\n        generateProjectRunTests(""gradle"", language, codestarts);\n    }\n']",Codestarts;Parameterized;gradle;Run;ests;Exception;Extension;Gradle;List;generate,3.841705620288849e-09;3.725290298461914e-09;2.0954757928848267e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.023128032684326, -5.550770282745361, -4.577856540679932, -5.900266170501709, -5.439907550811768, -0.02394646778702736]",0.9763379693031311
2,"['    @ParameterizedTest\n    public void testGradleKotlinDSL(String language) throws Exception {\n        final List<String> codestarts = getExtensionCodestarts();\n        generateProjectRunTests(""gradle-kotlin-dsl"", language, codestarts);\n    }\n']",otlin;Codestarts;language;Project;language;get;codestarts;codestarts;generate;List,1.076841726899147e-09;1.0477378964424133e-09;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.92901711165905e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-6.007526874542236, -5.545406818389893, -4.5894317626953125, -5.887475490570068, -5.430355072021484, -0.02396450750529766]",0.9763203859329224
2,"['    @ParameterizedTest\n    public void testRunAloneCodestartsJava(String codestart) throws Exception {\n        generateProjectRunTests(""maven"", ""java"", singletonList(codestart));\n    }\n']",Codestarts;java;generate;codestart;Run;List;Run;Project;ests;Java,3.026798367500305e-09;2.0954757928848267e-09;1.862645149230957e-09;1.6298145055770874e-09;8.731149137020111e-10;8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-6.402842700481415e-10,5,5,"[-5.980404376983643, -5.6000261306762695, -4.604872703552246, -5.864851951599121, -5.342425346374512, -0.02413930557668209]",0.9761497378349304
2,"['    @ParameterizedTest\n    public void testRunAloneCodestartsKotlin(String codestart) throws Exception {\n        generateProjectRunTests(""maven"", ""kotlin"", singletonList(codestart));\n    }\n']",codestart;otlin;otlin;singleton;Run;generate;Project;ests;Codestarts;Exception,2.270098775625229e-09;1.3387762010097504e-09;1.280568540096283e-09;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0,5,5,"[-5.964347839355469, -5.6066765785217285, -4.622148513793945, -5.838998317718506, -5.320638656616211, -0.024164672940969467]",0.9761249423027039
2,"['    @ParameterizedTest\n    public void testRunAloneCodestartsScala(String codestart) throws Exception {\n        generateProjectRunTests(""maven"", ""scala"", singletonList(codestart));\n    }\n']",Parameterized;Codestarts;Exception;codestart;List;Project;Alone;generate;Run;ests,4.6566128730773926e-09;1.8044374883174896e-09;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.975768566131592, -5.613739967346191, -4.617224216461182, -5.839869022369385, -5.3219475746154785, -0.0241488479077816]",0.9761403799057007
2,"['    @Test\n    public void generateAzureFunctionsHttpExampleProjectRun() throws Exception {\n        generateProjectRunTests(""maven"", ""java"", singletonList(""azure-functions-http-example""));\n    }\n']",Example;Run;generate;ests;example;generate;List;functions;singleton;Exception,1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.9967360496521, -5.626636028289795, -4.608414173126221, -5.858166217803955, -5.351483345031738, -0.023936808109283447]",0.9763472676277161
2,"['    @Test\n    public void testNonAsciiDir() throws Exception {\n        final File testDir = initProject(""projects/classic"", ""projects/Ä\x9bÅ¡Ä\x8dÅ\x99Å¾Ã½Ã¡Ã\xadÃ©Å¯Ãº"");\n        final RunningInvoker running = new RunningInvoker(testDir, false);\n\n        final MavenProcessInvocationResult result = running.execute(Arrays.asList(""install"", ""-DskipTests""),\n                Collections.emptyMap());\n        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");\n        running.stop();\n\n        File output = new File(testDir, ""target/output.log"");\n        output.createNewFile();\n\n        Process process = doLaunch(new File(testDir, ""target/quarkus-app""), Paths.get(""quarkus-run.jar""), output,\n                Collections.emptyList()).start();\n        try {\n            // Wait until server up\n            dumpFileContentOnFailure(() -> {\n                await().pollDelay(1, TimeUnit.SECONDS)\n                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/package"", 200));\n                return null;\n            }, output, ConditionTimeoutException.class);\n        } finally {\n            process.destroy();\n        }\n\n    }\n']",ÂŃÃĥ;Â¯;List;SUCCESS;classic;On;output;Ãĥ;running;new,7.8580342233181e-10;7.421476766467094e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.41970007866621e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.951977729797363, -5.30618953704834, -4.648308753967285, -5.786656379699707, -5.52390193939209, -0.024495204910635948]",0.9758022427558899
2,"['    @Test\n    public void testThatJarRunnerConsoleOutputWorksCorrectly() throws MavenInvocationException, IOException {\n        File testDir = initProject(""projects/classic"", ""projects/project-classic-console-output"");\n        RunningInvoker running = new RunningInvoker(testDir, false);\n\n        MavenProcessInvocationResult result = running.execute(Arrays.asList(""package"", ""-DskipTests""), Collections.emptyMap());\n        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");\n        running.stop();\n\n        Path jar = testDir.toPath().toAbsolutePath()\n                .resolve(Paths.get(""target/quarkus-app/quarkus-run.jar""));\n        File output = new File(testDir, ""target/output.log"");\n        output.createNewFile();\n\n        Process process = doLaunch(jar, output).start();\n        try {\n            // Wait until server up\n            await()\n                    .pollDelay(1, TimeUnit.SECONDS)\n                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/package"", 200));\n\n            String logs = FileUtils.readFileToString(output, ""UTF-8"");\n\n            assertThatOutputWorksCorrectly(logs);\n\n            // test that the application name and version are properly set\n            assertApplicationPropertiesSetCorrectly();\n            assertResourceReadingFromClassPathWorksCorrectly("""");\n            assertUsingProtectionDomainWorksCorrectly("""");\n        } finally {\n            process.destroy();\n        }\n\n    }\n']",until;Most;Dev;up;Http;as;await;resolve;output;projects,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.890751361846924, -5.344786643981934, -4.68409538269043, -5.72941255569458, -5.44182014465332, -0.024661071598529816]",0.9756404161453247
2,"['    @Test\n    public void testPlatformPropertiesOverridenInApplicationProperties() throws Exception {\n        final File testDir = initProject(""projects/platform-properties-overrides"",\n                ""projects/platform-props-overriden-in-app-props"");\n        final RunningInvoker running = new RunningInvoker(testDir, false);\n\n        final MavenProcessInvocationResult result = running.execute(Arrays.asList(""install""),\n                Collections.emptyMap());\n        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");\n        running.stop();\n\n        File output = new File(testDir, ""app/target/output.log"");\n        output.createNewFile();\n\n        Process process = doLaunch(new File(testDir, ""app/target/quarkus-app""), Paths.get(""quarkus-run.jar""), output,\n                Collections.emptyList()).start();\n        try {\n            Assertions.assertEquals(""builder-image is customized"", DevModeTestUtils.getHttpResponse(""/hello""));\n        } finally {\n            process.destroy();\n        }\n    }\n']",customized;as;do;quarkus;final;Invoker;builder;List;jar;props,9.313225746154785e-10;7.566995918750763e-10;6.257323548197746e-10;6.111804395914078e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10;3.2014213502407074e-10,5,5,"[-5.950839519500732, -5.369365215301514, -4.646035671234131, -5.803815841674805, -5.492668151855469, -0.024285683408379555]",0.9760068655014038
2,"['    @Test\n    public void testPlatformPropertiesOverridenOnCommandLine() throws Exception {\n        final File testDir = initProject(""projects/platform-properties-overrides"",\n                ""projects/platform-props-overriden-on-cmd-line"");\n        final RunningInvoker running = new RunningInvoker(testDir, false);\n\n        final MavenProcessInvocationResult result = running.execute(\n                Arrays.asList(""install -Dquarkus.native.builder-image=commandline -DskipTests""),\n                Collections.emptyMap());\n        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");\n        running.stop();\n\n        File output = new File(testDir, ""app/target/output.log"");\n        output.createNewFile();\n\n        Process process = doLaunch(new File(testDir, ""app/target/quarkus-app""), Paths.get(""quarkus-run.jar""), output,\n                Collections.emptyList()).start();\n        try {\n            Assertions.assertEquals(""builder-image is commandline"", DevModeTestUtils.getHttpResponse(""/hello""));\n        } finally {\n            process.destroy();\n        }\n    }\n']",until;Exception;Platform;Assertions;Dir;running;Line;await;quarkus;finally,1.3969838619232178e-09;8.149072527885437e-10;6.402842700481415e-10;5.093170329928398e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.938809871673584, -5.353400230407715, -4.656575679779053, -5.785727500915527, -5.489908695220947, -0.024359678849577904]",0.975934624671936
2,['    @Test\n    public void testThatFastJarFormatWorks() throws Exception {\n        assertThatFastJarFormatWorks(null);\n    }\n'],Jar;Works;null;Jar;That;Works;Fast;Format;Format;That,1.3969838619232178e-09;1.2223608791828156e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;4.656612873077393e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-6.984919309616089e-10;-6.984919309616089e-10,5,5,"[-6.0088791847229, -5.6259002685546875, -4.55339241027832, -5.911970138549805, -5.370746612548828, -0.024240538477897644]",0.9760509133338928
2,"['    @Test\n    public void testThatFastJarCustomOutputDirFormatWorks() throws Exception {\n        assertThatFastJarFormatWorks(""custom"");\n    }\n']",Custom;Works;That;custom;Jar;That;Format;Fast;Dir;Format,3.026798367500305e-09;1.1641532182693481e-09;1.0477378964424133e-09;4.656612873077393e-10;2.3283064365386963e-10;0.0;-1.7462298274040222e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-5.9828572273254395, -5.653894424438477, -4.592851638793945, -5.8674635887146, -5.3076491355896, -0.024224016815423965]",0.9760670065879822
2,"['    @Test\n    public void testThatMutableFastJarWorks() throws Exception {\n        assertThatMutableFastJarWorks(""providers"", ""providers"");\n    }\n']",utable;providers;That;That;Works;Fast;utable;Exception;Fast;providers,3.725290298461914e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.1641532182693481e-09;9.313225746154785e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-6.003035068511963, -5.6184186935424805, -4.587197303771973, -5.874887466430664, -5.369192123413086, -0.02403666451573372]",0.9762500524520874
2,"['    @Test\n    public void testThatMutableFastJarWorksProvidersDirOutsideOutputDir() throws Exception {\n        assertThatMutableFastJarWorks(""outsidedir"", "".."" + File.separator + ""providers"");\n    }\n']",Dir;That;Outside;Output;That;Fast;utable;Jar;utable;Jar,1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.985552787780762, -5.610152244567871, -4.613860130310059, -5.841780662536621, -5.34608793258667, -0.024046091362833977]",0.9762406945228577
2,"['    @Test\n    public void testThatLegacyJarFormatWorks() throws Exception {\n        File testDir = initProject(""projects/rr-with-json-logging"", ""projects/rr-with-json-logging-legacy-jar"");\n        RunningInvoker running = new RunningInvoker(testDir, false);\n\n        MavenProcessInvocationResult result = running\n                .execute(Arrays.asList(""package"",\n                        ""-DskipTests"",\n                        ""-Dquarkus.package.type=legacy-jar""), Collections.emptyMap());\n\n        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");\n        running.stop();\n\n        Path jar = testDir.toPath().toAbsolutePath()\n                .resolve(Paths.get(""target"",\n                        JarResultBuildStep.DEFAULT_FAST_JAR_DIRECTORY_NAME,\n                        ""quarkus-run.jar""));\n        Assertions.assertFalse(Files.exists(jar));\n\n        jar = testDir.toPath().toAbsolutePath()\n                .resolve(Paths.get(""target/acme-1.0-SNAPSHOT-runner.jar""));\n        Assertions.assertTrue(Files.exists(jar));\n\n        Properties quarkusArtifactProperties = new Properties();\n        quarkusArtifactProperties\n                .load(new FileInputStream(testDir.toPath().resolve(""target"").resolve(""quarkus-artifact.properties"").toFile()));\n        Assertions.assertEquals(""jar"", quarkusArtifactProperties.get(""type""));\n        Assertions.assertEquals(""acme-1.0-SNAPSHOT-runner.jar"", quarkusArtifactProperties.get(""path""));\n\n        File output = new File(testDir, ""target/output.log"");\n        output.createNewFile();\n\n        Properties properties = new Properties();\n        properties\n                .load(new FileInputStream(testDir.toPath().resolve(""target"").resolve(""quarkus-artifact.properties"").toFile()));\n        Assertions.assertEquals(""jar"", properties.get(""type""));\n        Assertions.assertEquals(""acme-1.0-SNAPSHOT-runner.jar"", properties.get(""path""));\n\n        Process process = doLaunch(jar, output).start();\n        try {\n            // Wait until server up\n            dumpFileContentOnFailure(() -> {\n                await()\n                        .pollDelay(1, TimeUnit.SECONDS)\n                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/package"", 200));\n                return null;\n            }, output, ConditionTimeoutException.class);\n\n            String logs = FileUtils.readFileToString(output, ""UTF-8"");\n\n            assertThat(logs).isNotEmpty().contains(""resteasy-reactive"");\n\n            // test that the application name and version are properly set\n            assertApplicationPropertiesSetCorrectly();\n            assertResourceReadingFromClassPathWorksCorrectly("""");\n            assertUsingProtectionDomainWorksCorrectly("""");\n        } finally {\n            process.destroy();\n        }\n    }\n']",Works;Legacy;Format;Dir;projects;contains;with;rr;await;MINUTES,2.7939677238464355e-09;1.2078089639544487e-09;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.893620014190674, -5.348551273345947, -4.675111770629883, -5.746824741363525, -5.456394195556641, -0.02459838055074215]",0.9757016897201538
2,"['    @Test\n    public void testThatAppCDSAreUsable() throws Exception {\n        File testDir = initProject(""projects/classic"", ""projects/project-classic-console-output-appcds"");\n        RunningInvoker running = new RunningInvoker(testDir, false);\n\n        MavenProcessInvocationResult result = running\n                .execute(Arrays.asList(""package"", ""-DskipTests"", ""-Dquarkus.package.create-appcds=true""),\n                        Collections.emptyMap());\n\n        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");\n        running.stop();\n\n        Path jar = testDir.toPath().toAbsolutePath()\n                .resolve(Paths.get(""target/quarkus-app/quarkus-run.jar""));\n        File output = new File(testDir, ""target/output.log"");\n        output.createNewFile();\n\n        // by using \'-Xshare:on\' we ensure that the JVM will fail if for any reason is cannot use the AppCDS\n        // \'-Xlog:class+path=info\' will print diagnostic information that is useful for debugging if something goes wrong\n        Process process = doLaunch(jar.getFileName(), output,\n                Arrays.asList(""-XX:SharedArchiveFile=app-cds.jsa"", ""-Xshare:on"", ""-Xlog:class+path=info""))\n                        .directory(jar.getParent().toFile()).start();\n        try {\n            // Wait until server up\n            dumpFileContentOnFailure(() -> {\n                await()\n                        .pollDelay(1, TimeUnit.SECONDS)\n                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/package"", 200));\n                return null;\n            }, output, ConditionTimeoutException.class);\n\n            String logs = FileUtils.readFileToString(output, ""UTF-8"");\n\n            assertThatOutputWorksCorrectly(logs);\n        } finally {\n            process.destroy();\n        }\n\n    }\n']",until;MINUTES;result;ests;Collections;quarkus;Most;contains;quarkus;quarkus,1.0477378964424133e-09;5.675246939063072e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.43833414465189e-10;4.220055416226387e-10;4.0745362639427185e-10;3.637978807091713e-10;3.5652192309498787e-10,5,5,"[-5.932167053222656, -5.3527655601501465, -4.671124458312988, -5.783926963806152, -5.48469352722168, -0.024267997592687607]",0.9760240912437439
2,"['    @Test\n    public void testArcExcludeDependencyOnLocalModule() throws Exception {\n        File testDir = initProject(""projects/arc-exclude-dependencies"");\n        RunningInvoker running = new RunningInvoker(testDir, false);\n\n        MavenProcessInvocationResult result = running.execute(Arrays.asList(""package"", ""-DskipTests""), Collections.emptyMap());\n        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");\n        running.stop();\n\n        File targetDir = new File(testDir.getAbsoluteFile(), ""runner"" + File.separator + ""target"");\n        Path jar = targetDir.toPath().toAbsolutePath()\n                .resolve(Paths.get(""quarkus-app/quarkus-run.jar""));\n        File output = new File(targetDir, ""output.log"");\n        output.createNewFile();\n\n        Process process = doLaunch(jar, output).start();\n        try {\n            // Wait until server up\n            AtomicReference<String> response = new AtomicReference<>();\n            await()\n                    .pollDelay(1, TimeUnit.SECONDS)\n                    .atMost(1, TimeUnit.MINUTES).until(() -> {\n                        String ret = DevModeTestUtils.getHttpResponse(""/hello"", true);\n                        response.set(ret);\n                        return ret.contains(""hello:"");\n                    });\n\n            // Test that bean is not resolvable\n            assertThat(response.get()).containsIgnoringCase(""hello:false"");\n        } finally {\n            process.destroy();\n        }\n    }\n']",Alive;until;Process;Most;runner;arc;Local;Exclude;Invoker;resolve,7.130438461899757e-10;5.238689482212067e-10;4.511093720793724e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.942497730255127, -5.337065696716309, -4.6438984870910645, -5.793669700622559, -5.504125595092773, -0.024469148367643356]",0.975827693939209
2,"['    @Test\n    public void testCreateCoreExtension(TestInfo testInfo) throws Throwable {\n        testDir = initProject(""projects/create-extension-quarkus-core"", ""output/create-extension-quarkus-core"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""extensionId"", ""my-ext"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        final Path testDirPath = testDir.toPath();\n        assertThatDirectoryTreeMatchSnapshots(testInfo, testDirPath)\n                .contains(\n                        ""extensions/my-ext/pom.xml"",\n                        ""extensions/my-ext/runtime/src/main/resources/META-INF/quarkus-extension.yaml"",\n                        ""extensions/my-ext/deployment/src/main/java/org/acme/my/ext/deployment/MyExtProcessor.java"",\n                        ""integration-tests/my-ext/pom.xml"",\n                        ""integration-tests/my-ext/src/test/java/org/acme/my/ext/it/MyExtResourceTest.java"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""extensions/my-ext/pom.xml"");\n        assertThatMatchSnapshot(testInfo, testDirPath,\n                ""extensions/my-ext/runtime/src/main/resources/META-INF/quarkus-extension.yaml"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""bom/application/pom.xml"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""integration-tests/pom.xml"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""extensions/pom.xml"");\n    }\n']",tests;java;quarkus;java;deployment;contains;src;my;integration;output,7.566995918750763e-10;5.238689482212067e-10;3.92901711165905e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6193447411060333e-10,5,5,"[-5.842315196990967, -5.313389778137207, -4.682225227355957, -5.724614143371582, -5.431278228759766, -0.025038642808794975]",0.9752722382545471
2,"['    @Test\n    public void testCreateCoreExtensionFromExtensionsDir(TestInfo testInfo) throws Throwable {\n        testDir = initProject(""projects/create-extension-quarkus-core"", ""output/create-extension-quarkus-core-extensions-dir"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir.toPath().resolve(""extensions/"").toFile());\n\n        Properties properties = new Properties();\n        properties.put(""extensionId"", ""quarkus-my-ext"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        final Path testDirPath = testDir.toPath();\n        assertThatDirectoryTreeMatchSnapshots(testInfo, testDirPath)\n                .contains(\n                        ""extensions/my-ext/pom.xml"",\n                        ""extensions/my-ext/deployment/src/main/java/org/acme/my/ext/deployment/MyExtProcessor.java"",\n                        ""integration-tests/my-ext/pom.xml"",\n                        ""integration-tests/my-ext/src/test/java/org/acme/my/ext/it/MyExtResourceTest.java"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""extensions/my-ext/pom.xml"");\n        assertThatMatchSnapshot(testInfo, testDirPath,\n                ""extensions/my-ext/runtime/src/main/resources/META-INF/quarkus-extension.yaml"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""bom/application/pom.xml"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""integration-tests/pom.xml"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""extensions/pom.xml"");\n    }\n']",om;result;Directory;xml;Extensions;extensions;Tree;Zero;properties;Resource,5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.851039409637451, -5.33168363571167, -4.6767168045043945, -5.7390570640563965, -5.439043998718262, -0.024890979751944542]",0.9754162430763245
2,"['    @Test\n    public void testCreateQuarkiverseExtension(TestInfo testInfo) throws Throwable {\n        testDir = initEmptyProject(""output/create-quarkiverse-extension"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""groupId"", ""io.quarkiverse.my-quarki-ext"");\n        properties.put(""extensionId"", ""my-quarki-ext"");\n        properties.put(""quarkusVersion"", ""1.10.5.Final"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        final Path testDirPath = testDir.toPath();\n        assertThatDirectoryTreeMatchSnapshots(testInfo, testDirPath)\n                .contains(\n                        ""quarkus-my-quarki-ext/pom.xml"",\n                        ""quarkus-my-quarki-ext/deployment/src/main/java/io/quarkiverse/my/quarki/ext/deployment/MyQuarkiExtProcessor.java"",\n                        ""quarkus-my-quarki-ext/integration-tests/pom.xml"",\n                        ""quarkus-my-quarki-ext/integration-tests/src/test/java/io/quarkiverse/my/quarki/ext/it/MyQuarkiExtResourceTest.java"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""quarkus-my-quarki-ext/pom.xml"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""quarkus-my-quarki-ext/runtime/pom.xml"");\n    }\n']",Directory;Version;quarkiverse;Extension;Dir;deployment;src;Match;Info;java,4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.84378719329834, -5.31453275680542, -4.673202037811279, -5.750541687011719, -5.449028968811035, -0.0249499324709177]",0.9753587245941162
2,"['    @Test\n    public void testCreateStandaloneExtension(TestInfo testInfo) throws Throwable {\n        testDir = initEmptyProject(""output/create-standalone-extension"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""groupId"", ""io.standalone"");\n        properties.put(""extensionId"", ""my-own-ext"");\n        properties.put(""namespaceId"", ""my-org-"");\n        properties.put(""quarkusVersion"", ""1.10.5.Final"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        final Path testDirPath = testDir.toPath();\n        assertThatDirectoryTreeMatchSnapshots(testInfo, testDirPath)\n                .contains(\n                        ""my-org-my-own-ext/pom.xml"",\n                        ""my-org-my-own-ext/deployment/src/main/java/io/standalone/my/own/ext/deployment/MyOwnExtProcessor.java"",\n                        ""my-org-my-own-ext/integration-tests/pom.xml"",\n                        ""my-org-my-own-ext/integration-tests/src/test/java/io/standalone/my/own/ext/it/MyOwnExtResourceTest.java"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""my-org-my-own-ext/pom.xml"");\n        assertThatMatchSnapshot(testInfo, testDirPath, ""my-org-my-own-ext/runtime/pom.xml"");\n    }\n']",invoker;Project;Tree;init;om;Directory;That;Directory;it;src,5.529727786779404e-10;5.238689482212067e-10;4.511093720793724e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.833465576171875, -5.3336639404296875, -4.67931604385376, -5.735239028930664, -5.417823791503906, -0.02501690201461315]",0.9752933979034424
2,"['    @Test\n    public void testThatTheApplicationIsReloadedOnJavaChange()\n            throws MavenInvocationException, IOException, InterruptedException {\n        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-java-change-remote"");\n        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-java-change-local"");\n        runAndCheck();\n\n        // Edit the ""Hello"" message.\n        File source = new File(agentDir, ""src/main/java/org/acme/HelloResource.java"");\n        String uuid = UUID.randomUUID().toString();\n        filter(source, Collections.singletonMap(""return \\""hello\\"";"", ""return \\"""" + uuid + ""\\"";""));\n\n        // Wait until we get ""uuid""\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello"").contains(uuid));\n\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .pollInterval(1, TimeUnit.SECONDS)\n                .until(source::isFile);\n\n        filter(source, Collections.singletonMap(uuid, ""carambar""));\n\n        // Wait until we get ""carambar""\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello"").contains(""carambar""));\n\n        //also verify that the dev ui console is disabled\n        DevModeTestUtils.getHttpResponse(""/q/dev"", 404, 10, TimeUnit.SECONDS);\n    }\n']",until;await;The;the;carambar;Resource;hello;hello;Reloaded;src,2.3283064365386963e-09;9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.908051490783691, -5.402292728424072, -4.677443027496338, -5.757936477661133, -5.4358229637146, -0.024335479363799095]",0.9759582281112671
2,"['    @Test\n    public void testThatTheApplicationIsReloadedOnNewResource() throws MavenInvocationException, IOException {\n        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-new-resource-remote"");\n        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-new-resource-local"");\n        runAndCheck();\n\n        File source = new File(agentDir, ""src/main/java/org/acme/MyNewResource.java"");\n        String myNewResource = ""package org.acme;\\n"" +\n                ""\\n"" +\n                ""import javax.ws.rs.GET;\\n"" +\n                ""import javax.ws.rs.Path;\\n"" +\n                ""import javax.ws.rs.Produces;\\n"" +\n                ""import javax.ws.rs.core.MediaType;\\n"" +\n                ""\\n"" +\n                ""@Path(\\""/foo\\"")\\n"" +\n                ""public class MyNewResource {\\n"" +\n\n                ""    @GET\\n"" +\n                ""    @Produces(MediaType.TEXT_PLAIN)\\n"" +\n                ""    public String foo() {\\n"" +\n                ""        return \\""bar\\"";\\n"" +\n                ""    }\\n"" +\n']",Reloaded;Media;Resource;Dir;java;acme;IOException;That;classic;remote,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.893303394317627, -5.317965984344482, -4.666618347167969, -5.7427802085876465, -5.463357925415039, -0.024815047159790993]",0.9754903316497803
2,"['    @Test\n    public void testThatTheApplicationIsReloadedOnConfigChange() throws MavenInvocationException, IOException {\n        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-config-change-remote"");\n        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-config-change-local"");\n        assertThat(testDir).isDirectory();\n        runAndCheck();\n\n        String resp = DevModeTestUtils.getHttpResponse();\n        runningAgent = new RunningInvoker(agentDir, false);\n        runningAgent.execute(Arrays.asList(""compile"", ""quarkus:remote-dev""), Collections.emptyMap());\n\n        assertThat(resp).containsIgnoringCase(""ready"").containsIgnoringCase(""application"").containsIgnoringCase(""org.acme"")\n                .containsIgnoringCase(""1.0-SNAPSHOT"");\n\n        String greeting = DevModeTestUtils.getHttpResponse(""/app/hello/greeting"");\n        assertThat(greeting).containsIgnoringCase(""bonjour"");\n\n        File source = new File(agentDir, ""src/main/resources/application.properties"");\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .pollInterval(1, TimeUnit.SECONDS)\n                .until(source::isFile);\n\n        String uuid = UUID.randomUUID().toString();\n        filter(source, Collections.singletonMap(""bonjour"", uuid));\n\n        // Wait until we get ""uuid""\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .atMost(1, TimeUnit.MINUTES)\n                .until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/greeting"").contains(uuid));\n    }\n']",Invoker;Delay;Interval;UID;singleton;acme;dev;random;config;Agent,7.712515071034431e-10;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.882535934448242, -5.4278059005737305, -4.686761856079102, -5.734590530395508, -5.409332275390625, -0.02439900115132332]",0.9758962392807007
2,"['    @Test\n    public void testThatNewResourcesAreServed() throws MavenInvocationException, IOException {\n        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-resource-change-remote"");\n        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-resource-change-local"");\n        runAndCheck();\n\n        // Create a new resource\n        File source = new File(agentDir, ""src/main/resources/META-INF/resources/lorem.txt"");\n        FileUtils.write(source,\n                ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."",\n                ""UTF-8"");\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .atMost(1, TimeUnit.MINUTES)\n                .until(() -> DevModeTestUtils.getHttpResponse(""/lorem.txt"").contains(""Lorem ipsum""));\n\n        // Update the resource\n        String uuid = UUID.randomUUID().toString();\n        FileUtils.write(source, uuid, ""UTF-8"");\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .atMost(1, TimeUnit.MINUTES)\n                .until(() -> DevModeTestUtils.getHttpResponse(""/lorem.txt"").contains(uuid));\n\n        // Delete the resource\n        //TODO: not supported yet in remote dev\n        //        source.delete();\n        //        await()\n        //                .pollDelay(1, TimeUnit.SECONDS)\n        //                .atMost(1, TimeUnit.MINUTES)\n        //                .until(() -> getHttpResponse(""/lorem.txt"", 404));\n    }\n']",elit;iusmod;incididunt;Utils;Most;aliqu;contains;MINUTES;sed;Most,1.0622898116707802e-09;6.548361852765083e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.802132025361061e-10;4.220055416226387e-10;4.147295840084553e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.952621936798096, -5.428752899169922, -4.6688361167907715, -5.790761470794678, -5.470617294311523, -0.023918766528367996]",0.9763649106025696
2,"['    @Test\n    public void testThatApplicationRecoversCompilationIssue() throws MavenInvocationException, IOException {\n        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-compilation-issue-remote"");\n        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-compilation-issue-local"");\n        runAndCheck();\n\n        // Edit the ""Hello"" message.\n        File source = new File(agentDir, ""src/main/java/org/acme/HelloResource.java"");\n        String uuid = UUID.randomUUID().toString();\n        filter(source, Collections.singletonMap(""return \\""hello\\"";"", ""return \\"""" + uuid + ""\\"""")); // No semi-colon\n\n        // Wait until we get ""uuid""\n        AtomicReference<String> last = new AtomicReference<>();\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .atMost(1, TimeUnit.MINUTES).until(() -> {\n                    String content = DevModeTestUtils.getHttpResponse(""/app/hello"", true);\n                    last.set(content);\n                    return content.contains(uuid);\n                });\n\n        assertThat(last.get()).containsIgnoringCase(""error"")\n                .containsIgnoringCase(""return \\"""" + uuid + ""\\"""")\n                .containsIgnoringCase(""compile"");\n\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .pollInterval(1, TimeUnit.SECONDS)\n                .until(source::isFile);\n        filter(source, Collections.singletonMap(""\\"""" + uuid + ""\\"""", ""\\""carambar\\"";""));\n\n        // Wait until we get ""uuid""\n        await()\n                .pollDelay(1, TimeUnit.SECONDS)\n                .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello"").contains(""carambar""));\n    }\n']",until;Compilation;Ignoring;return;Delay;Time;IOException;singleton;Http;Collections,9.313225746154785e-10;8.36735125631094e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.919309616088867, -5.347061634063721, -4.6672210693359375, -5.767393589019775, -5.490353584289551, -0.024397023022174835]",0.9758982062339783
2,"['    @Test\n    public void testThatNewBeanAreDiscovered() throws IOException, MavenInvocationException {\n        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-new-bean-remote"");\n        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-run-new-bean-local"");\n        runAndCheck();\n\n        // Edit the ""Hello"" message.\n        File source = new File(agentDir, ""src/main/java/org/acme/MyBean.java"");\n        String content = ""package org.acme;\\n"" +\n                ""\\n"" +\n                ""import javax.enterprise.context.ApplicationScoped;\\n"" +\n                ""\\n"" +\n                ""@ApplicationScoped\\n"" +\n                ""public class MyBean {\\n"" +\n                ""\\n"" +\n                ""    public String get() {\\n"" +\n                ""        return \\""message\\"";\\n"" +\n                ""    }\\n"" +\n']",That;bean;classic;bean;run;src;Bean;Application;Project;class,4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.936318397521973, -5.3521318435668945, -4.651200771331787, -5.783949851989746, -5.484138011932373, -0.02445518970489502]",0.9758414030075073
2,"['    @Test\n    public void testProjectGeneration() throws MavenInvocationException, IOException {\n        testDir = initEmptyProject(""projects/project-generation"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""outputDirectory"", ""jbang"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n    }\n']",That;generation;Project;IOException;project;get;Empty;invoker;setup;Generation,1.5133991837501526e-09;1.3969838619232178e-09;1.0477378964424133e-09;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.967026233673096, -5.550437927246094, -4.639387607574463, -5.8291473388671875, -5.393068313598633, -0.023882800713181496]",0.9764002561569214
2,"['    @Test\n    public void testProjectGenerationFromScratch() throws MavenInvocationException, IOException {\n        testDir = initEmptyProject(""projects/project-generation"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""projectVersion"", ""1.0.0-SNAPSHOT"");\n\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        // As the directory is not empty (log) navigate to the artifactID directory\n        testDir = new File(testDir, ""acme"");\n\n        assertThat(new File(testDir, ""pom.xml"")).isFile();\n        assertThat(new File(testDir, ""src/main/java"")).isDirectory();\n        assertThat(new File(testDir, ""src/main/resources/application.properties"")).isFile();\n\n        String config = Files\n                .asCharSource(new File(testDir, ""src/main/resources/application.properties""), Charsets.UTF_8)\n                .read();\n        assertThat(config).isEmpty();\n\n        assertThat(new File(testDir, ""src/main/docker/Dockerfile.native"")).isFile();\n        assertThat(new File(testDir, ""src/main/docker/Dockerfile.jvm"")).isFile();\n\n        Model model = loadPom(testDir);\n        final DependencyManagement dependencyManagement = model.getDependencyManagement();\n        final List<Dependency> dependencies = dependencyManagement.getDependencies();\n        assertThat(dependencies.stream()\n                .anyMatch(d -> d.getArtifactId().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_VALUE)\n                        && d.getVersion().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_VERSION_VALUE)\n                        && d.getScope().equals(""import"")\n                        && d.getType().equals(""pom""))).isTrue();\n\n        assertThat(\n                model.getDependencies().stream().anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""quarkus-resteasy"")\n                        && d.getVersion() == null)).isTrue();\n\n        assertThat(model.getProfiles()).hasSize(1);\n        assertThat(model.getProfiles().get(0).getId()).isEqualTo(""native"");\n\n        Xpp3Dom surefireSystemProperties = Optional.ofNullable(model.getBuild())\n                .map(Build::getPlugins)\n                .flatMap(plugins -> plugins.stream().filter(p -> p.getArtifactId().equals(""maven-surefire-plugin"")).findFirst())\n                .map(Plugin::getConfiguration)\n                .map(Xpp3Dom.class::cast)\n                .map(cfg -> cfg.getChild(""systemPropertyVariables""))\n                .orElse(null);\n        assertThat(surefireSystemProperties).isNotNull();\n        assertThat(surefireSystemProperties.getChild(""java.util.logging.manager""))\n                .returns(LogManager.class.getName(), from(Xpp3Dom::getValue));\n        assertThat(surefireSystemProperties.getChild(""maven.home""))\n                .returns(""${maven.home}"", from(Xpp3Dom::getValue));\n    }\n']",Generation;generation;aven;That;Group;empty;Artifact;Source;result;to,6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.801243681460619e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8395915031433105, -5.376281261444092, -4.671501159667969, -5.719863414764404, -5.400002956390381, -0.02499992772936821]",0.9753099679946899
2,"['    @Test\n    public void testProjectGenerationWithExistingPomFileWithPackagingJarShouldFail() throws Exception {\n        testDir = initProject(""projects/simple-pom-it"", ""projects/project-generation-from-empty-pom"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n        InvocationResult result = setup(new Properties());\n\n        assertThat(result.getExitCode()).isOne();\n    }\n']",Packaging;Exit;om;Project;om;Generation;setup;projects;result;Dir,1.7462298274040222e-09;1.1641532182693481e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.989302158355713, -5.592043876647949, -4.627599239349365, -5.849186420440674, -5.3845696449279785, -0.02376011200249195]",0.9765199422836304
2,"['    @Test\n    public void testProjectGenerationWithExistingGradleFileShouldFail() throws Exception {\n        testDir = initProject(""projects/parent-gradle-it"", ""projects/project-generation-from-parent-gradle"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n        InvocationResult result = setup(new Properties());\n\n        assertThat(result.getExitCode()).isOne();\n    }\n']",File;Project;Should;Code;Result;gradle;One;from;parent;Gradle,1.57160684466362e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.980296611785889, -5.5900797843933105, -4.646931171417236, -5.83761739730835, -5.365121841430664, -0.02372577041387558]",0.9765534996986389
2,"['    @Test\n    public void testGradleProjectGenerationWithExistingGradleFileShouldFail() throws Exception {\n        testDir = initProject(""projects/parent-gradle-it"", ""projects/gradle-project-generation-from-parent-gradle"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""className"", ""org.acme.MyResource"");\n        properties.put(""buildTool"", ""gradle"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isOne();\n    }\n']",One;Project;Existing;File;That;gradle;Invoker;parent;project;acme,1.4551915228366852e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10,5,5,"[-5.964256763458252, -5.567424297332764, -4.649353504180908, -5.838179111480713, -5.384138584136963, -0.023739507421851158]",0.9765400290489197
2,"['    @Test\n    public void testGradleProjectGenerationWithExistingPomFileShouldFail() throws Exception {\n        testDir = initProject(""projects/parent-pom-it"", ""projects/gradle-project-generation-from-parent-pom"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""className"", ""org.acme.MyResource"");\n        properties.put(""buildTool"", ""gradle"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isOne();\n    }\n']",Exit;Gradle;Project;That;Code;Dir;Artifact;Fail;class;One,1.1059455573558807e-09;1.0477378964424133e-09;8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.962890148162842, -5.572608470916748, -4.643133640289307, -5.835211277008057, -5.378693103790283, -0.023818548768758774]",0.9764629006385803
2,"['    @Test\n    public void testProjectGenerationAsModuleWithExistingPomFileWithPackagingPom() throws Exception {\n        testDir = initProject(""projects/parent-pom-it"", ""projects/project-generation-from-parent-pom"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        String projectArtifactId = ""acme"";\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""io.acme.it"");\n        properties.put(""projectArtifactId"", projectArtifactId);\n        properties.put(""projectVersion"", ""1.0-SNAPSHOT"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        Model parentPomModel = loadPom(testDir);\n        assertThat(parentPomModel.getModules()).isNotEmpty();\n        assertThat(parentPomModel.getModules()).contains(projectArtifactId);\n\n        Model modulePomModel = loadPom(new File(testDir, projectArtifactId));\n        assertThat(modulePomModel.getParent()).isNotNull();\n        assertThat(modulePomModel.getParent().getGroupId()).isEqualTo(""io.acme.it"");\n        assertThat(modulePomModel.getParent().getArtifactId()).isEqualTo(""acme-parent-pom"");\n        assertThat(modulePomModel.getParent().getVersion()).isEqualTo(""0.0.1.BUILD-SNAPSHOT"");\n    }\n']",Existing;SNAPSHOT;SNAPSHOT;Dir;Project;Invoker;Directory;Artifact;load;invoker,8.149072527885437e-10;6.766640581190586e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.888706207275391, -5.519161701202393, -4.674534320831299, -5.7342729568481445, -5.353244781494141, -0.02437014877796173]",0.9759244322776794
2,"['    @Test\n    public void testProjectGenerationFromScratchWithResource() throws Exception {\n        testDir = initEmptyProject(""projects/project-generation-with-resource"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""className"", ""org.acme.MyResource.java"");\n        properties.put(""extensions"", ""resteasy"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        // As the directory is not empty (log) navigate to the artifactID directory\n        testDir = new File(testDir, ""acme"");\n\n        assertThat(new File(testDir, ""pom.xml"")).isFile();\n        assertThat(new File(testDir, ""src/main/java"")).isDirectory();\n\n        check(new File(testDir, ""src/main/java/org/acme/MyResource.java""), ""package org.acme;"");\n    }\n']",From;Exception;project;package;Exit;Generation;generation;Project;with;org,1.1059455573558807e-09;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.873794078826904, -5.438356876373291, -4.677268981933594, -5.752964019775391, -5.391772270202637, -0.024487877264618874]",0.9758095145225525
2,"['    @Test\n    public void testProjectGenerationWithInvalidPackage() throws Exception {\n        testDir = initEmptyProject(""projects/project-generation-invalid-package"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""className"", ""org.acme.invalid-package-name.MyResource"");\n\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isNotZero();\n        assertThat(new File(testDir, ""src/main/java/org/acme"")).doesNotExist();\n    }\n']",Exist;package;Exit;projects;Properties;java;My;class;Directory;Artifact,1.2223608791828156e-09;9.89530235528946e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.920513153076172, -5.5104169845581055, -4.6610589027404785, -5.808204174041748, -5.3884501457214355, -0.02404329925775528]",0.9762434363365173
2,"['    @Test\n    public void testProjectGenerationFromScratchWithMissingExtensionShouldFail() throws Exception {\n        testDir = initEmptyProject(""projects/project-generation-with-missing-extension"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""className"", ""org.acme.MyResource"");\n        properties.put(""extensions"", ""resteasy,smallrye-metrics,missing"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isOne();\n    }\n']",Scratch;Missing;Exit;metrics;My;Generation;Fail;org;properties;Project,3.3178366720676422e-09;1.0477378964424133e-09;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;2.3283064365386963e-10,5,5,"[-5.940511226654053, -5.522841453552246, -4.654919624328613, -5.818981647491455, -5.396626949310303, -0.023926332592964172]",0.976357638835907
2,"['    @Test\n    public void testProjectGenerationFromScratchWithExtensions() throws Exception {\n        testDir = initEmptyProject(""projects/project-generation-with-resources-and-extension"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""className"", ""org.acme.MyResource"");\n        properties.put(""extensions"", ""resteasy,smallrye-metrics"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        // As the directory is not empty (log) navigate to the artifactID directory\n        testDir = new File(testDir, ""acme"");\n\n        assertThat(new File(testDir, ""pom.xml"")).isFile();\n        assertThat(new File(testDir, ""src/main/java"")).isDirectory();\n\n        check(new File(testDir, ""src/main/java/org/acme/MyResource.java""), ""package org.acme;"");\n\n        assertThat(FileUtils.readFileToString(new File(testDir, ""pom.xml""), ""UTF-8""))\n                .contains(""quarkus-resteasy"", ""quarkus-smallrye-metrics"").doesNotContain(""missing"");\n\n        Model model = loadPom(testDir);\n        assertThat(model.getDependencyManagement().getDependencies().stream()\n                .anyMatch(d -> d.getArtifactId().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_VALUE)\n                        && d.getVersion().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_VERSION_VALUE)\n                        && d.getScope().equals(""import"")\n                        && d.getType().equals(""pom""))).isTrue();\n\n        assertThat(\n                model.getDependencies().stream().anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""quarkus-resteasy"")\n                        && d.getVersion() == null)).isTrue();\n\n        assertThat(model.getDependencies().stream()\n                .anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""quarkus-smallrye-metrics"")\n                        && d.getVersion() == null)).isTrue();\n    }\n']",resteasy;extension;Scratch;Exception;acme;navigate;Contain;quarkus;resteasy;invoker,6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.4019543565809727e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10,5,5,"[-5.835127830505371, -5.408495903015137, -4.693390846252441, -5.695316314697266, -5.376080513000488, -0.024850863963365555]",0.9754554033279419
2,"['    @Test\n    public void testGradleProjectGenerationFromScratchWithExtensions() throws Exception {\n        testDir = initEmptyProject(""projects/gradle-project-generation-with-extensions"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""className"", ""org.acme.MyResource"");\n        properties.put(""extensions"", ""kotlin,resteasy,jackson"");\n        properties.put(""buildTool"", ""gradle"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        // As the directory is not empty (log) navigate to the artifactID directory\n        testDir = new File(testDir, ""acme"");\n\n        assertThat(new File(testDir, ""build.gradle"")).isFile();\n        assertThat(new File(testDir, ""gradlew.bat"")).isFile();\n        assertThat(new File(testDir, ""gradlew"")).isFile();\n        assertThat(new File(testDir, ""gradle/wrapper"")).isDirectory();\n        assertThat(new File(testDir, ""src/main/kotlin"")).isDirectory();\n\n        check(new File(testDir, ""src/main/kotlin/org/acme/MyResource.kt""), ""package org.acme"");\n\n        assertThat(FileUtils.readFileToString(new File(testDir, ""build.gradle""), ""UTF-8""))\n                .contains(""quarkus-kotlin"", ""quarkus-jackson"").doesNotContain(""missing"");\n    }\n']",Scratch;invoker;navigate;org;acme;Generation;extensions;Properties;kt;to,9.022187441587448e-10;6.402842700481415e-10;5.820766091346741e-10;5.748006515204906e-10;4.94765117764473e-10;4.94765117764473e-10;4.802132025361061e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.843264102935791, -5.43274450302124, -4.676556587219238, -5.724904537200928, -5.369524955749512, -0.024806559085845947]",0.9754984974861145
2,"['    @Test\n    public void testProjectGenerationFromScratchWithCustomDependencies() throws Exception {\n        testDir = initEmptyProject(""projects/project-generation-with-resource-and-custom-deps"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""className"", ""org.acme.MyResource"");\n        properties.put(""extensions"", ""resteasy,commons-io:commons-io:2.5"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        // As the directory is not empty (log) navigate to the artifactID directory\n        testDir = new File(testDir, ""acme"");\n\n        assertThat(new File(testDir, ""pom.xml"")).isFile();\n        assertThat(new File(testDir, ""src/main/java/org/acme/MyResource.java"")).isFile();\n        assertThat(FileUtils.readFileToString(new File(testDir, ""pom.xml""), ""UTF-8""))\n                .contains(""commons-io"");\n\n        Model model = loadPom(testDir);\n        assertThat(model.getDependencyManagement().getDependencies().stream()\n                .anyMatch(d -> d.getArtifactId().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_VALUE)\n                        && d.getVersion().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_VERSION_VALUE)\n                        && d.getScope().equals(""import"")\n                        && d.getType().equals(""pom""))).isTrue();\n\n        assertThat(\n                model.getDependencies().stream().anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""quarkus-resteasy"")\n                        && d.getVersion() == null)).isTrue();\n\n        assertThat(model.getDependencies().stream().anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""commons-io"")\n                && d.getVersion().equalsIgnoreCase(""2.5""))).isTrue();\n    }\n']",navigate;Exit;to;From;model;custom;Match;Exception;ependency;java,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.854217052459717, -5.410135269165039, -4.689970016479492, -5.717739582061768, -5.386792182922363, -0.02469189092516899]",0.9756104350090027
2,"['    @Test\n    public void testProjectGenerationFromScratchWithAppConfigParameter() throws MavenInvocationException, IOException {\n        testDir = initEmptyProject(""projects/project-generation-with-config-param"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""projectVersion"", ""1.0.0-SNAPSHOT"");\n\n        List<String> configs = Arrays.asList(""custom.app.config1=val1"",\n                ""custom.app.config2=val2"", ""lib.config=val3"");\n        properties.put(""appConfig"", StringUtils.join(configs, "", ""));\n\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        // As the directory is not empty (log) navigate to the artifactID directory\n        testDir = new File(testDir, ""acme"");\n\n        assertThat(new File(testDir, ""pom.xml"")).isFile();\n        assertThat(new File(testDir, ""src/main/java"")).isDirectory();\n\n        String file = Files\n                .asCharSource(new File(testDir, ""src/main/resources/application.properties""), Charsets.UTF_8)\n                .read();\n        configs.forEach(conf -> Assertions.assertTrue(file.contains(conf)));\n\n    }\n']",Directory;navigate;directory;to;log;Arrays;Invocation;Dir;True;directory,6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.857970237731934, -5.368284225463867, -4.688052177429199, -5.714559078216553, -5.4186482429504395, -0.024758530780673027]",0.9755455851554871
2,"['    @Test\n    public void testThatDefaultPackageAreReplaced() throws Exception {\n        testDir = initEmptyProject(""projects/default-package-test"");\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""className"", ""MyGreatResource"");\n        properties.put(""extensions"", ""resteasy"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n        // As the directory is not empty (log) navigate to the artifactID directory\n        testDir = new File(testDir, ""code-with-quarkus"");\n        check(new File(testDir, ""src/main/java/org/acme/MyGreatResource.java""),\n                ""package org.acme;"");\n    }\n']",That;init;Are;directory;Great;Directory;Invoker;That;java;result,7.8580342233181e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9273905754089355, -5.472519397735596, -4.660179615020752, -5.800771713256836, -5.413940906524658, -0.0240981113165617]",0.976189911365509
2,['    @AfterEach\n    public void cleanup() {\n        if (running != null) {\n            running.stop();\n        }\n    }\n'],cleanup;if;running;null;running;stop;After;Each,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.6566128730773926e-09;-7.2177499532699585e-09,5,5,"[-6.04864501953125, -5.505810737609863, -4.534516334533691, -5.928107738494873, -5.479447364807129, -0.024283938109874725]",0.9760085344314575
2,"['    @Test\n    public void generateNewProjectAndRun() throws Exception {\n        testDir = initEmptyProject(""projects/project-generation-and-run"");\n\n        // Scaffold the new project\n        assertThat(testDir).isDirectory();\n        invoker = initInvoker(testDir);\n\n        Properties properties = new Properties();\n        properties.put(""projectGroupId"", ""org.acme"");\n        properties.put(""projectArtifactId"", ""acme"");\n        properties.put(""extensions"", ""resteasy"");\n        properties.put(""className"", ""org.acme.HelloResource"");\n        InvocationResult result = setup(properties);\n\n        assertThat(result.getExitCode()).isZero();\n\n        // Run\n        // As the directory is not empty (log) navigate to the artifactID directory\n        testDir = new File(testDir, ""acme"");\n        running = new RunningInvoker(testDir, false);\n        final Properties mvnRunProps = new Properties();\n        mvnRunProps.setProperty(""debug"", ""false"");\n        running.execute(Arrays.asList(""compile"", ""quarkus:dev""), Collections.emptyMap(), mvnRunProps);\n\n        String resp = DevModeTestUtils.getHttpResponse();\n\n        assertThat(resp).containsIgnoringCase(""ready"").containsIgnoringCase(""application"").containsIgnoringCase(""org.acme"")\n                .containsIgnoringCase(""1.0.0-SNAPSHOT"");\n\n        String greeting = DevModeTestUtils.getHttpResponse(""/hello"");\n        assertThat(greeting).containsIgnoringCase(""hello"");\n    }\n']",generate;compile;Scaffold;Http;Mode;Utils;Artifact;Http;quarkus;to,1.0477378964424133e-09;9.167706593871117e-10;8.440110832452774e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.851909160614014, -5.4147162437438965, -4.696110248565674, -5.706511974334717, -5.373342514038086, -0.0247216634452343]",0.9755814075469971
2,"['    @Test\n    public void testJavaLibraryPathAtRuntime() throws Exception {\n        final File testDir = initProject(""projects/native-image-app"", ""projects/native-image-app-output"");\n        final RunningInvoker running = new RunningInvoker(testDir, false);\n\n        // trigger mvn package -Pnative -Dquarkus.ssl.native=true\n        final String[] mvnArgs = new String[] { ""package"", ""-DskipTests"", ""-Pnative"", ""-Dquarkus.ssl.native=true"" };\n        final MavenProcessInvocationResult result = running.execute(Arrays.asList(mvnArgs), Collections.emptyMap());\n        await().atMost(10, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n        final String processLog = running.log();\n        try {\n            assertThat(processLog).containsIgnoringCase(""BUILD SUCCESS"");\n        } catch (AssertionError ae) {\n            // skip this test (instead of failing), if the native-image command wasn\'t available.\n            // Bit brittle to rely on the log message, but it\'s OK in the context of this test\n            Assumptions.assumeFalse(processLog.contains(""Cannot find the `native-image""),\n                    ""Skipping test since native-image tool isn\'t available"");\n            // native-image command was available but the build failed for some reason, throw the original error\n            throw ae;\n        } finally {\n            running.stop();\n        }\n\n        // now that the native image is built, run it\n        final Path nativeImageRunner = testDir.toPath().toAbsolutePath().resolve(Paths.get(""target/acme-1.0-SNAPSHOT-runner""));\n        final Path tmpDir = Files.createTempDirectory(""native-image-test"");\n        tmpDir.toFile().deleteOnExit();\n        final Process nativeImageRunWithAdditionalLibPath = runNativeImage(nativeImageRunner,\n                new String[] { ""-Djava.library.path="" + tmpDir.toString() });\n        try {\n            final String response = DevModeTestUtils.getHttpResponse(""/hello/javaLibraryPath"");\n            Assertions.assertTrue(response.contains(tmpDir.toString()),\n                    ""Response "" + response + "" for java.library.path was expected to contain the "" + tmpDir + "", but didn\'t"");\n        } finally {\n            nativeImageRunWithAdditionalLibPath.destroy();\n        }\n\n    }\n']",BUILD;the;await;available;Collections;image;Time;rely;original;null,6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.936107158660889, -5.337907791137695, -4.659385681152344, -5.810962200164795, -5.503999710083008, -0.02427777089178562]",0.9760144352912903
2,"['    @Test\n    public void testUberJarMavenPluginConfiguration()\n            throws MavenInvocationException, IOException, InterruptedException {\n        testDir = initProject(""projects/uberjar-maven-plugin-config"");\n        running = new RunningInvoker(testDir, false);\n        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),\n                Collections.emptyMap());\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        verifyUberJar();\n    }\n']",package;uberjar;List;Collections;Plugin;Result;verify;Jar;Process;Collections,2.0954757928848267e-09;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.956541061401367, -5.526531219482422, -4.636533260345459, -5.821661949157715, -5.407644748687744, -0.02399011328816414]",0.9762952327728271
2,"['    @Test\n    public void testQuarkusPackageOutputDirectory()\n            throws MavenInvocationException, IOException, InterruptedException {\n        testDir = initProject(""projects/quarkus.package.output-directory"");\n\n        running = new RunningInvoker(testDir, false);\n        // we do want to run the tests too\n        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),\n                Collections.emptyMap());\n\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        File targetDir = getTargetDir();\n        List<File> jars = getFilesEndingWith(targetDir, "".jar"");\n        assertThat(jars).hasSize(1);\n\n        targetDir = new File(targetDir, ""custom-output-dir"");\n        assertThat(targetDir).exists();\n        jars = getFilesEndingWith(targetDir, "".jar"");\n        assertThat(jars).hasSize(1);\n    }\n']",Package;output;Project;Dir;Process;Quarkus;we;too;jar;directory,9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10,5,5,"[-5.894523620605469, -5.423178195953369, -4.674968719482422, -5.77858304977417, -5.4178876876831055, -0.02431616559624672]",0.9759770035743713
2,"['    @Test\n    public void testDependencyOnPomMutableJar()\n            throws MavenInvocationException, IOException, InterruptedException {\n        testDir = initProject(""projects/dependency-on-pom"");\n\n        running = new RunningInvoker(testDir, false);\n        // we do want to run the tests too\n        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),\n                Collections.emptyMap());\n\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        File targetDir = getTargetDir();\n        List<File> jars = getFilesEndingWith(targetDir, "".jar"");\n        assertThat(jars).hasSize(1);\n    }\n']",Files;utable;to;jars;want;we;qual;Collections;projects;do,9.313225746154785e-10;8.585629984736443e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.933900833129883, -5.459843635559082, -4.6650800704956055, -5.813055038452148, -5.430415153503418, -0.023975564166903496]",0.9763095378875732
2,"['    @Test\n    public void testPackageWorksWhenUberjarIsTrue()\n            throws MavenInvocationException, IOException, InterruptedException {\n        testDir = initProject(""projects/uberjar-check"");\n\n        createAndVerifyUberJar();\n        // ensure that subsequent package without clean also works\n        createAndVerifyUberJar();\n    }\n']",clean;uberjar;Works;that;without;Uber;also;Exception;init;Interrupted,1.862645149230957e-09;1.7171259969472885e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.9850640296936035, -5.506039619445801, -4.617520809173584, -5.868271350860596, -5.434372425079346, -0.023931220173835754]",0.976352870464325
2,"['    @Test\n    public void testCustomPackaging()\n            throws Exception {\n        testDir = getTargetDir(""projects/custom-packaging-plugin"");\n\n        running = new RunningInvoker(testDir, false);\n        MavenProcessInvocationResult result = running.execute(Collections.singletonList(""install""),\n                Collections.emptyMap());\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        testDir = getTargetDir(""projects/custom-packaging-app"");\n\n        running = new RunningInvoker(testDir, false);\n        result = running.execute(Collections.singletonList(""package""),\n                Collections.emptyMap());\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        final File targetDir = getTargetDir();\n        final File[] files = targetDir.listFiles(f -> f.getName().endsWith("".jar""));\n        Set<String> jarNames = new HashSet<>(files.length);\n        for (File f : files) {\n            jarNames.add(f.getName());\n        }\n\n        final Path runnerJar = getTargetDir().toPath().resolve(""quarkus-app"").resolve(""quarkus-run.jar"");\n        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");\n        assertZipEntriesCanBeOpenedAndClosed(runnerJar);\n    }\n']",Runner;wait;Collections;projects;app;plugin;Files;quarkus;Path;Can,6.984919309616089e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.055902197957039e-10;2.9103830456733704e-10;2.546585164964199e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.891848087310791, -5.4129109382629395, -4.680408477783203, -5.741373062133789, -5.426601886749268, -0.024399466812610626]",0.975895881652832
2,"['    @Test\n    public void testRunnerUberJarHasValidCRC() throws Exception {\n        testDir = initProject(""projects/uberjar-check"", ""projects/project-uberjar-crc"");\n\n        running = new RunningInvoker(testDir, false);\n\n        Properties p = new Properties();\n        p.setProperty(""quarkus.package.type"", ""uber-jar"");\n        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),\n                Collections.emptyMap(), p);\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        final File targetDir = getTargetDir();\n        assertThat(getNumberOfFilesEndingWith(targetDir, "".jar"")).isEqualTo(1);\n        assertThat(getNumberOfFilesEndingWith(targetDir, "".original"")).isEqualTo(1);\n\n        final Path runnerJar = targetDir.toPath().resolve(""acme-1.0-SNAPSHOT-runner.jar"");\n        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");\n        assertZipEntriesCanBeOpenedAndClosed(runnerJar);\n    }\n']",quarkus;execute;jar;Invoker;project;uberjar;resolve;Opened;Property;uber,9.022187441587448e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.8750081062316895, -5.437925815582275, -4.67633581161499, -5.739736080169678, -5.3997697830200195, -0.024501370266079903]",0.9757964611053467
2,"['    @Test\n    public void testLegacyJarHasValidCRC() throws Exception {\n        testDir = initProject(""projects/uberjar-check"", ""projects/project-legacyjar-crc"");\n\n        running = new RunningInvoker(testDir, false);\n        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),\n                Collections.singletonMap(""QUARKUS_PACKAGE_TYPE"", ""legacy-jar""));\n\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        final File targetDir = getTargetDir();\n        assertThat(getNumberOfFilesEndingWith(targetDir, "".jar"")).isEqualTo(2);\n\n        final Path runnerJar = targetDir.toPath().resolve(""acme-1.0-SNAPSHOT-runner.jar"");\n        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");\n        assertZipEntriesCanBeOpenedAndClosed(runnerJar);\n    }\n']",legacyjar;QUARKUS;Files;Assertions;Process;Dir;Dir;Project;Exception;resolve,1.0477378964424133e-09;7.130438461899757e-10;5.529727786779404e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.857675075531006, -5.425205230712891, -4.686954975128174, -5.732850551605225, -5.383370876312256, -0.0246072206646204]",0.9756930470466614
2,"['    @Test\n    public void testFastJarHasValidCRC() throws Exception {\n        testDir = initProject(""projects/uberjar-check"", ""projects/project-fastjar-crc"");\n\n        running = new RunningInvoker(testDir, false);\n        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),\n                Collections.emptyMap());\n\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        final Path runnerJar = getTargetDir().toPath().resolve(""quarkus-app"").resolve(""quarkus-run.jar"");\n        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");\n        assertZipEntriesCanBeOpenedAndClosed(runnerJar);\n    }\n']",Fast;quarkus;app;Exception;Running;Path;resolve;init;resolve;Files,1.0477378964424133e-09;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;3.92901711165905e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.8816914558410645, -5.460436820983887, -4.684357643127441, -5.7418928146362305, -5.374666690826416, -0.024417264387011528]",0.9758784174919128
2,"['    @Test\n    public void testQuarkusIndexDependencyOnLocalModule() throws Exception {\n        testDir = initProject(""projects/quarkus-index-dependencies"");\n\n        running = new RunningInvoker(testDir, false);\n        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),\n                Collections.emptyMap());\n\n        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n\n        final File targetDir = new File(testDir.getAbsoluteFile(), ""runner"" + File.separator + ""target"");\n\n        final Path runnerJar = targetDir.toPath().resolve(""quarkus-app"").resolve(""quarkus-run.jar"");\n        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");\n        assertZipEntriesCanBeOpenedAndClosed(runnerJar);\n    }\n']",Quarkus;Module;Invocation;wait;singleton;run;runner;Files;exists;quarkus,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.874891601502895e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10,5,5,"[-5.864152908325195, -5.452121257781982, -4.6921844482421875, -5.71552038192749, -5.3670501708984375, -0.024554645642638206]",0.975744366645813
2,"['  @Test\n  public void compressionTest() {\n    List<Integer> testSizes = Lists.newArrayList(\n        1, 1024, 128 * 1024, 512 * 1024, 1024 * 1024, 4 * 1024 * 1024);\n    for (int size : testSizes) {\n      singleTest(size);\n    }\n  }\n']",List;Lists;Array;size;size;List;single;izes;new;izes,3.4924596548080444e-10;0.0;0.0;0.0;0.0;-4.0745362639427185e-10;-4.3655745685100555e-10;-4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-5.970369815826416, -5.581917762756348, -4.633717060089111, -5.8031907081604, -5.383980751037598, -0.02392866089940071]",0.9763553738594055
2,"['  @Test\n  public void odfsConfigurationTest() {\n    SparkConf conf = new SparkConf();\n    Configuration conf1 = RssShuffleUtils.newHadoopConfiguration(conf);\n    assertFalse(conf1.getBoolean(""dfs.namenode.odfs.enable"", false));\n    assertEquals(""org.apache.hadoop.fs.Hdfs"", conf1.get(""fs.AbstractFileSystem.hdfs.impl""));\n\n    conf.set(RssClientConfig.RSS_OZONE_DFS_NAMENODE_ODFS_ENABLE, ""true"");\n    conf1 = RssShuffleUtils.newHadoopConfiguration(conf);\n    assertTrue(conf1.getBoolean(""dfs.namenode.odfs.enable"", false));\n    assertEquals(""org.apache.hadoop.odfs.HdfsOdfsFilesystem"", conf1.get(""fs.hdfs.impl""));\n    assertEquals(""org.apache.hadoop.odfs.HdfsOdfs"", conf1.get(""fs.AbstractFileSystem.hdfs.impl""));\n\n    conf.set(RssClientConfig.RSS_OZONE_FS_HDFS_IMPL, ""expect_odfs_impl"");\n    conf.set(RssClientConfig.RSS_OZONE_FS_ABSTRACT_FILE_SYSTEM_HDFS_IMPL, ""expect_odfs_abstract_impl"");\n    conf1 = RssShuffleUtils.newHadoopConfiguration(conf);\n    assertEquals(""expect_odfs_impl"", conf1.get(""fs.hdfs.impl""));\n    assertEquals(""expect_odfs_abstract_impl"", conf1.get(""fs.AbstractFileSystem.hdfs.impl""));\n  }\n']",Filesystem;adoop;impl;odfs;Shuffle;ONE;abstract;adoop;Shuffle;odfs,7.130438461899757e-10;6.402842700481415e-10;5.820766091346741e-10;5.675246939063072e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.2928149923682213e-10,5,5,"[-5.8387627601623535, -5.520270824432373, -4.706631660461426, -5.649385452270508, -5.299908638000488, -0.024768415838479996]",0.9755359292030334
2,"['  @Test\n  public void readTest1() throws Exception {\n    String basePath = HDFS_URI + ""readTest1"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test1"", conf);\n\n    Map<String, String> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 2, 5, expectedData,\n        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);\n\n    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);\n\n    validateResult(rssShuffleDataIterator, expectedData, 10);\n\n    blockIdBitmap.add(ClientUtils.getBlockId(0, 0, Constants.MAX_SEQUENCE_NO));\n    rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);\n    int recNum = 0;\n    try {\n      // can\'t find all expected block id, data loss\n      while (rssShuffleDataIterator.hasNext()) {\n        rssShuffleDataIterator.next();\n        recNum++;\n      }\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().startsWith(""Blocks read inconsistent:""));\n    }\n    assertEquals(10, recNum);\n  }\n']",HDFS;Exception;Write;read;SERIALIZER;write;Next;expected;while;df,7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;3.710738383233547e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.906909942626953, -5.536900997161865, -4.681204319000244, -5.741593360900879, -5.370447158813477, -0.024076350033283234]",0.9762111902236938
2,"['  @Test\n  public void readTest2() throws Exception {\n    String basePath = HDFS_URI + ""readTest2"";\n    HdfsShuffleWriteHandler writeHandler1 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test2_1"", conf);\n    HdfsShuffleWriteHandler writeHandler2 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test2_2"", conf);\n\n    Map<String, String> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler1, 2, 5, expectedData,\n        blockIdBitmap, ""key1"", KRYO_SERIALIZER, 0);\n    writeTestData(writeHandler2, 2, 5, expectedData,\n        blockIdBitmap, ""key2"", KRYO_SERIALIZER, 0);\n\n    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);\n\n    validateResult(rssShuffleDataIterator, expectedData, 20);\n    assertEquals(20, rssShuffleDataIterator.getShuffleReadMetrics().recordsRead());\n    assertEquals(256, rssShuffleDataIterator.getShuffleReadMetrics().remoteBytesRead());\n    assertTrue(rssShuffleDataIterator.getShuffleReadMetrics().fetchWaitTime() > 0);\n  }\n']",SERIALIZER;HDFS;Bitmap;base;Handler;Roaring;expected;Shuffle;records;Data,1.1496013030409813e-09;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.885219097137451, -5.524835586547852, -4.691884994506836, -5.729322910308838, -5.3617730140686035, -0.024167697876691818]",0.9761220216751099
2,"['  @Test\n  public void readTest3() throws Exception {\n    String basePath = HDFS_URI + ""readTest3"";\n    HdfsShuffleWriteHandler writeHandler1 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test3_1"", conf);\n    HdfsShuffleWriteHandler writeHandler2 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test3_2"", conf);\n\n    Map<String, String> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler1, 2, 5, expectedData,\n        blockIdBitmap, ""key1"", KRYO_SERIALIZER, 0);\n    writeTestData(writeHandler2, 2, 5, expectedData,\n        blockIdBitmap, ""key2"", KRYO_SERIALIZER, 0);\n\n    // duplicate file created, it should be used in product environment\n    String shuffleFolder = basePath + ""/appId/0/0-1"";\n    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_1_0.data""), fs,\n        new Path(shuffleFolder + ""/test3_1_0.cp.data""), false, conf);\n    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_1_0.index""), fs,\n        new Path(shuffleFolder + ""/test3_1_0.cp.index""), false, conf);\n    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_2_0.data""), fs,\n        new Path(shuffleFolder + ""/test3_2_0.cp.data""), false, conf);\n    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_2_0.index""), fs,\n        new Path(shuffleFolder + ""/test3_2_0.cp.index""), false, conf);\n\n    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);\n\n    validateResult(rssShuffleDataIterator, expectedData, 20);\n  }\n']",SERIALIZER;read;conf;HDFS;Bitmap;copy;Roaring;task;SERIALIZER;environment,1.2078089639544487e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.880222320556641, -5.466904163360596, -4.686694145202637, -5.736341953277588, -5.382034778594971, -0.024354908615350723]",0.9759393930435181
2,"['  @Test\n  public void readTest4() throws Exception {\n    String basePath = HDFS_URI + ""readTest4"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test1"", conf);\n\n    Map<String, String> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 2, 5, expectedData,\n        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);\n\n    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);\n    // data file is deleted after iterator initialization\n    Path dataFile = new Path(basePath + ""/appId/0/0-1/test1_0.data"");\n    fs.delete(dataFile, true);\n    // sleep to wait delete operation\n    Thread.sleep(10000);\n    try {\n      fs.listStatus(dataFile);\n      fail(""Index file should be deleted"");\n    } catch (Exception e) {\n    }\n\n    try {\n      while (rssShuffleDataIterator.hasNext()) {\n        rssShuffleDataIterator.next();\n      }\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().startsWith(""Blocks read inconsistent: expected""));\n    }\n  }\n']",sleep;read;read;Next;to;Shuffle;fs;Maps;conf;URI,6.05359673500061e-09;9.313225746154785e-10;6.402842700481415e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.001776687800884e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.932395935058594, -5.530109882354736, -4.674909591674805, -5.77648401260376, -5.379822731018066, -0.023936457931995392]",0.9763477444648743
2,"['  @Test\n  public void readTest5() throws Exception {\n    String basePath = HDFS_URI + ""readTest5"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);\n\n    Map<String, String> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 2, 5, expectedData,\n        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);\n\n    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);\n    // index file is deleted after iterator initialization, it should be ok, all index infos are read already\n    Path indexFile = new Path(basePath + ""/appId/0/0-1/test.index"");\n    fs.delete(indexFile, true);\n    // sleep to wait delete operation\n    Thread.sleep(10000);\n    try {\n      fs.listStatus(indexFile);\n      fail(""Index file should be deleted"");\n    } catch (Exception e) {\n    }\n    validateResult(rssShuffleDataIterator, expectedData, 10);\n  }\n']",Thread;operation;Shuffle;app;read;RY;Bitmap;key;HDFS;Data,9.313225746154785e-10;8.149072527885437e-10;3.7834979593753815e-10;3.346940502524376e-10;2.9103830456733704e-10;2.764863893389702e-10;2.546585164964199e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.945568084716797, -5.555777072906494, -4.675803184509277, -5.777346134185791, -5.381488800048828, -0.023778971284627914]",0.9765016436576843
2,"['  @Test\n  public void readTest7() throws Exception {\n    String basePath = HDFS_URI + ""readTest7"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);\n\n    Map<String, String> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 2, 5, expectedData,\n        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);\n\n    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);\n\n    // crc32 is incorrect\n    try (MockedStatic<ChecksumUtils> checksumUtilsMock = Mockito.mockStatic(ChecksumUtils.class)) {\n      checksumUtilsMock.when(() -> ChecksumUtils.getCrc32((ByteBuffer) any())).thenReturn(-1L);\n      try {\n        while (rssShuffleDataIterator.hasNext()) {\n          rssShuffleDataIterator.next();\n        }\n        fail(EXPECTED_EXCEPTION_MESSAGE);\n      } catch (Exception e) {\n        assertTrue(e.getMessage().startsWith(""Unexpected crc value""));\n      }\n    }\n  }\n']",Exception;Mockito;HDFS;bitmap;EXPECTED;Write;ocked;Path;task;fail,5.820766091346741e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.920642852783203, -5.5123677253723145, -4.6710920333862305, -5.77133846282959, -5.402721881866455, -0.023987319320440292]",0.9762980937957764
2,"['  @Test\n  public void test() {\n    WriterBuffer wb = new WriterBuffer(32);\n    assertEquals(0, wb.getMemoryUsed());\n    assertEquals(0, wb.getDataLength());\n\n    serializeData(""key"", ""value"");\n    // size of serialized kv is 12\n    wb.addRecord(serializedData, serializedDataLength);\n    assertEquals(32, wb.getMemoryUsed());\n    assertEquals(12, wb.getDataLength());\n    wb.addRecord(serializedData, serializedDataLength);\n    assertEquals(32, wb.getMemoryUsed());\n    // case: data size < output buffer size, when getData(), [] + buffer with 24b = 24b\n    assertEquals(24, wb.getData().length);\n    wb.addRecord(serializedData, serializedDataLength);\n    // case: data size > output buffer size, when getData(), [1 buffer] + buffer with 12 = 36b\n    assertEquals(36, wb.getData().length);\n    assertEquals(64, wb.getMemoryUsed());\n    wb.addRecord(serializedData, serializedDataLength);\n    wb.addRecord(serializedData, serializedDataLength);\n    // case: data size > output buffer size, when getData(), 2 buffer + output with 12b = 60b\n    assertEquals(60, wb.getData().length);\n    assertEquals(96, wb.getMemoryUsed());\n\n    wb = new WriterBuffer(32);\n\n    serializeData(""key1111111111111111111111111111"", ""value222222222222222222222222222"");\n    wb.addRecord(serializedData, serializedDataLength);\n    assertEquals(67, wb.getMemoryUsed());\n    assertEquals(67, wb.getDataLength());\n\n    serializeData(""key"", ""value"");\n    wb.addRecord(serializedData, serializedDataLength);\n    // 67 + 32\n    assertEquals(99, wb.getMemoryUsed());\n    // 67 + 12\n    assertEquals(79, wb.getDataLength());\n    assertEquals(79, wb.getData().length);\n\n    wb.addRecord(serializedData, serializedDataLength);\n    assertEquals(99, wb.getMemoryUsed());\n    assertEquals(91, wb.getDataLength());\n    assertEquals(91, wb.getData().length);\n  }\n']",Writer;Memory;Writer;Buffer;output;size;Buffer;buffer;with;case,5.820766091346741e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.950229167938232, -5.597553730010986, -4.661391258239746, -5.74048376083374, -5.400890350341797, -0.023771636188030243]",0.9765087962150574
2,"['  @Test\n  public void addRecordTest() {\n    SparkConf conf = getConf();\n    WriteBufferManager wbm = createManager(conf);\n    wbm.setShuffleWriteMetrics(new ShuffleWriteMetrics());\n    String testKey = ""Key"";\n    String testValue = ""Value"";\n    List<ShuffleBlockInfo> result = wbm.addRecord(0, testKey, testValue);\n    // single buffer is not full, there is no data return\n    assertEquals(0, result.size());\n    assertEquals(512, wbm.getAllocatedBytes());\n    assertEquals(32, wbm.getUsedBytes());\n    assertEquals(0, wbm.getInSendListBytes());\n    assertEquals(1, wbm.getBuffers().size());\n    wbm.addRecord(0, testKey, testValue);\n    wbm.addRecord(0, testKey, testValue);\n    wbm.addRecord(0, testKey, testValue);\n    result = wbm.addRecord(0, testKey, testValue);\n    // single buffer is full\n    assertEquals(1, result.size());\n    assertEquals(512, wbm.getAllocatedBytes());\n    assertEquals(96, wbm.getUsedBytes());\n    assertEquals(96, wbm.getInSendListBytes());\n    assertEquals(0, wbm.getBuffers().size());\n    wbm.addRecord(0, testKey, testValue);\n    wbm.addRecord(1, testKey, testValue);\n    wbm.addRecord(2, testKey, testValue);\n    // single buffer is not full, and less than spill size\n    assertEquals(512, wbm.getAllocatedBytes());\n    assertEquals(192, wbm.getUsedBytes());\n    assertEquals(96, wbm.getInSendListBytes());\n    assertEquals(3, wbm.getBuffers().size());\n    // all buffer size > spill size\n    wbm.addRecord(3, testKey, testValue);\n    wbm.addRecord(4, testKey, testValue);\n    result = wbm.addRecord(5, testKey, testValue);\n    assertEquals(6, result.size());\n    assertEquals(512, wbm.getAllocatedBytes());\n    assertEquals(288, wbm.getUsedBytes());\n    assertEquals(288, wbm.getInSendListBytes());\n    assertEquals(0, wbm.getBuffers().size());\n    // free memory\n    wbm.freeAllocatedMemory(96);\n    assertEquals(416, wbm.getAllocatedBytes());\n    assertEquals(192, wbm.getUsedBytes());\n    assertEquals(192, wbm.getInSendListBytes());\n\n    assertEquals(11, wbm.getShuffleWriteMetrics().recordsWritten());\n    assertTrue(wbm.getShuffleWriteMetrics().bytesWritten() > 0);\n\n    wbm.freeAllocatedMemory(192);\n    wbm.addRecord(0, testKey, testValue);\n    wbm.addRecord(1, testKey, testValue);\n    wbm.addRecord(2, testKey, testValue);\n    result = wbm.clear();\n    assertEquals(3, result.size());\n    assertEquals(224, wbm.getAllocatedBytes());\n    assertEquals(96, wbm.getUsedBytes());\n    assertEquals(96, wbm.getInSendListBytes());\n  }\n']",Record;Shuffle;add;get;List;full;Send;Write;Value;buffer,6.402842700481415e-10;5.675246939063072e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9591474533081055, -5.588110446929932, -4.6305623054504395, -5.788021564483643, -5.413608551025391, -0.02387581765651703]",0.9764069318771362
2,"['  @Test\n  public void createBlockIdTest() {\n    SparkConf conf = getConf();\n    WriteBufferManager wbm = createManager(conf);\n    WriterBuffer mockWriterBuffer = mock(WriterBuffer.class);\n    when(mockWriterBuffer.getData()).thenReturn(new byte[]{});\n    when(mockWriterBuffer.getMemoryUsed()).thenReturn(0);\n    ShuffleBlockInfo sbi = wbm.createShuffleBlock(0, mockWriterBuffer);\n    // seqNo = 0, partitionId = 0, taskId = 0\n    assertEquals(0L, sbi.getBlockId());\n\n    // seqNo = 1, partitionId = 0, taskId = 0\n    sbi = wbm.createShuffleBlock(0, mockWriterBuffer);\n    assertEquals(17592186044416L, sbi.getBlockId());\n\n    // seqNo = 0, partitionId = 1, taskId = 0\n    sbi = wbm.createShuffleBlock(1, mockWriterBuffer);\n    assertEquals(1048576L, sbi.getBlockId());\n\n    // seqNo = 1, partitionId = 1, taskId = 0\n    sbi = wbm.createShuffleBlock(1, mockWriterBuffer);\n    assertEquals(17592187092992L, sbi.getBlockId());\n  }\n']",byte;Shuffle;Equals;Return;Block;Used;Buffer;Memory;create;Equals,1.0477378964424133e-09;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.911681175231934, -5.625151634216309, -4.672800540924072, -5.726108551025391, -5.31869649887085, -0.024106955155730247]",0.9761813879013062
2,"['  @Test\n  public void readTest() throws Exception {\n\n    String basePath = HDFS_URI + ""readTest1"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 0, basePath, ""test"", conf);\n    HdfsShuffleWriteHandler writeHandler1 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test"", conf);\n\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    Map<String, String> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n    writeTestData(writeHandler, 2, 5, expectedData,\n        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);\n\n\n\n    TaskContext contextMock = mock(TaskContext.class);\n    RssShuffleHandle handleMock = mock(RssShuffleHandle.class);\n    ShuffleDependency dependencyMock = mock(ShuffleDependency.class);\n    when(handleMock.getAppId()).thenReturn(""appId"");\n    when(handleMock.getDependency()).thenReturn(dependencyMock);\n    when(handleMock.getShuffleId()).thenReturn(1);\n    when(dependencyMock.serializer()).thenReturn(KRYO_SERIALIZER);\n    when(contextMock.attemptNumber()).thenReturn(1);\n    when(contextMock.taskAttemptId()).thenReturn(1L);\n    when(contextMock.taskMetrics()).thenReturn(new TaskMetrics());\n    doNothing().when(contextMock).killTaskIfInterrupted();\n    when(dependencyMock.aggregator()).thenReturn(Option.empty());\n    when(dependencyMock.keyOrdering()).thenReturn(Option.empty());\n    when(dependencyMock.mapSideCombine()).thenReturn(false);\n\n    Map<Integer, Roaring64NavigableMap> partitionToExpectBlocks = Maps.newHashMap();\n    partitionToExpectBlocks.put(0, blockIdBitmap);\n    RssShuffleReader rssShuffleReaderSpy = spy(new RssShuffleReader<String, String>(\n        0,\n        1,\n        0,\n        Integer.MAX_VALUE,\n        contextMock,\n        handleMock,\n        basePath,\n        1000,\n        conf,\n        StorageType.HDFS.name(),\n        1000,\n        1,\n        partitionToExpectBlocks,\n        taskIdBitmap,\n        new ShuffleReadMetrics()));\n    validateResult(rssShuffleReaderSpy.read(), expectedData, 10);\n\n    writeTestData(writeHandler1, 2, 4, expectedData,\n        blockIdBitmap1, ""another_key"", KRYO_SERIALIZER, 1);\n    partitionToExpectBlocks.put(1, blockIdBitmap1);\n    RssShuffleReader rssShuffleReaderSpy1 = spy(new RssShuffleReader<String, String>(\n        0,\n        2,\n        0,\n        Integer.MAX_VALUE,\n        contextMock,\n        handleMock,\n        basePath,\n        1000,\n        conf,\n        StorageType.HDFS.name(),\n        1000,\n        2,\n        partitionToExpectBlocks,\n        taskIdBitmap,\n        new ShuffleReadMetrics()));\n    validateResult(rssShuffleReaderSpy1.read(), expectedData, 18);\n\n    RssShuffleReader rssShuffleReaderSpy2 = spy(new RssShuffleReader<String, String>(\n        0,\n        2,\n        0,\n        Integer.MAX_VALUE,\n        contextMock,\n        handleMock,\n        basePath,\n        1000,\n        conf,\n        StorageType.HDFS.name(),\n        1000,\n        2,\n        partitionToExpectBlocks,\n        Roaring64NavigableMap.bitmapOf(),\n        new ShuffleReadMetrics()));\n    validateResult(rssShuffleReaderSpy2.read(), Maps.newHashMap(), 0);\n  }\n']",base;Context;Roaring;base;dependency;Bitmap;Shuffle;read;serializer;Handler,4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.255546860396862e-10;2.1827872842550278e-10,5,5,"[-5.906745910644531, -5.491959571838379, -4.6745195388793945, -5.760489463806152, -5.400622844696045, -0.024122780188918114]",0.9761658310890198
2,"['  @Test\n  public void checkBlockSendResultTest() {\n    SparkConf conf = new SparkConf();\n    conf.setAppName(""testApp"")\n        .setMaster(""local[2]"")\n        .set(RssClientConfig.RSS_TEST_FLAG, ""true"")\n        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_TIMEOUT, ""10000"")\n        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_INTERVAL, ""1000"")\n        .set(RssClientConfig.RSS_COORDINATOR_QUORUM, ""127.0.0.1:12345,127.0.0.1:12346"");\n    // init SparkContext\n    SparkContext sc = SparkContext.getOrCreate(conf);\n    Map<String, Set<Long>> failBlocks = Maps.newConcurrentMap();\n    Map<String, Set<Long>> successBlocks = Maps.newConcurrentMap();\n    Serializer kryoSerializer = new KryoSerializer(conf);\n    RssShuffleManager manager = TestUtils.createShuffleManager(\n        conf,\n        false,\n        null,\n        successBlocks,\n        failBlocks);\n\n    ShuffleWriteClient mockShuffleWriteClient = mock(ShuffleWriteClient.class);\n    Partitioner mockPartitioner = mock(Partitioner.class);\n    RssShuffleHandle mockHandle = mock(RssShuffleHandle.class);\n    ShuffleDependency mockDependency = mock(ShuffleDependency.class);\n    when(mockHandle.getDependency()).thenReturn(mockDependency);\n    when(mockPartitioner.numPartitions()).thenReturn(2);\n    TaskMemoryManager mockTaskMemoryManager = mock(TaskMemoryManager.class);\n    when(mockHandle.getPartitionToServers()).thenReturn(Maps.newHashMap());\n    when(mockDependency.partitioner()).thenReturn(mockPartitioner);\n\n    BufferManagerOptions bufferOptions = new BufferManagerOptions(conf);\n    WriteBufferManager bufferManager = new WriteBufferManager(\n        0, 0, bufferOptions, kryoSerializer,\n        Maps.newHashMap(), mockTaskMemoryManager, new ShuffleWriteMetrics());\n    WriteBufferManager bufferManagerSpy = spy(bufferManager);\n\n    RssShuffleWriter rssShuffleWriter = new RssShuffleWriter(""appId"", 0, ""taskId"", 1L,\n        bufferManagerSpy, (new TaskMetrics()).shuffleWriteMetrics(),\n        manager, conf, mockShuffleWriteClient, mockHandle);\n    doReturn(1000000L).when(bufferManagerSpy).acquireMemory(anyLong());\n\n    // case 1: all blocks are sent successfully\n    successBlocks.put(""taskId"", Sets.newHashSet(1L, 2L, 3L));\n    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));\n    successBlocks.clear();\n\n    // case 2: partial blocks aren\'t sent before spark.rss.writer.send.check.timeout,\n    // Runtime exception will be thrown\n    successBlocks.put(""taskId"", Sets.newHashSet(1L, 2L));\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(StringStartsWith.startsWith(""Timeout:""));\n    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));\n    successBlocks.clear();\n\n    // case 3: partial blocks are sent failed, Runtime exception will be thrown\n    successBlocks.put(""taskId"", Sets.newHashSet(1L, 2L));\n    failBlocks.put(""taskId"", Sets.newHashSet(3L));\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(StringStartsWith.startsWith(""Send failed:""));\n    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));\n    successBlocks.clear();\n    failBlocks.clear();\n\n    sc.stop();\n  }\n']",FLAG;QUORUM;Task;SS;Shuffle;set;Spark;Spark;END;Client,8.149072527885437e-10;4.0745362639427185e-10;3.637978807091713e-10;3.637978807091713e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10,5,5,"[-5.954496383666992, -5.531003952026367, -4.650705814361572, -5.795644760131836, -5.419303894042969, -0.02386452630162239]",0.9764179587364197
2,"['  @Test\n  public void writeTest() throws Exception {\n    SparkConf conf = new SparkConf();\n    conf.setAppName(""testApp"").setMaster(""local[2]"")\n        .set(RssClientConfig.RSS_WRITER_SERIALIZER_BUFFER_SIZE, ""32"")\n        .set(RssClientConfig.RSS_WRITER_BUFFER_SIZE, ""32"")\n        .set(RssClientConfig.RSS_TEST_FLAG, ""true"")\n        .set(RssClientConfig.RSS_WRITER_BUFFER_SEGMENT_SIZE, ""64"")\n        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_TIMEOUT, ""10000"")\n        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_INTERVAL, ""1000"")\n        .set(RssClientConfig.RSS_WRITER_BUFFER_SPILL_SIZE, ""128"")\n        .set(RssClientConfig.RSS_COORDINATOR_QUORUM, ""127.0.0.1:12345,127.0.0.1:12346"");\n    // init SparkContext\n    List<ShuffleBlockInfo> shuffleBlockInfos = Lists.newArrayList();\n    SparkContext sc = SparkContext.getOrCreate(conf);\n    Map<String, Set<Long>> successBlockIds = Maps.newConcurrentMap();\n    EventLoop<AddBlockEvent> testLoop = new EventLoop<AddBlockEvent>(""test"") {\n      @Override\n      public void onReceive(AddBlockEvent event) {\n        assertEquals(""taskId"", event.getTaskId());\n        shuffleBlockInfos.addAll(event.getShuffleDataInfoList());\n        Set<Long> blockIds = event.getShuffleDataInfoList().parallelStream()\n            .map(sdi -> sdi.getBlockId()).collect(Collectors.toSet());\n        successBlockIds.putIfAbsent(event.getTaskId(), Sets.newConcurrentHashSet());\n        successBlockIds.get(event.getTaskId()).addAll(blockIds);\n      }\n']",SERIALIZER;Spark;SIZE;Shuffle;success;on;Loop;Receive;Spark;SS,7.275957614183426e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.898897647857666, -5.51210355758667, -4.6784515380859375, -5.763076305389404, -5.383472442626953, -0.024094736203551292]",0.9761932492256165
2,"['  @Test\n  public void postBlockEventTest() throws Exception {\n    WriteBufferManager mockBufferManager = mock(WriteBufferManager.class);\n    ShuffleDependency mockDependency = mock(ShuffleDependency.class);\n    ShuffleWriteMetrics mockMetrics = mock(ShuffleWriteMetrics.class);\n    Partitioner mockPartitioner = mock(Partitioner.class);\n    when(mockDependency.partitioner()).thenReturn(mockPartitioner);\n    SparkConf sparkConf = new SparkConf();\n    when(mockPartitioner.numPartitions()).thenReturn(2);\n    List<AddBlockEvent> events = Lists.newArrayList();\n\n    EventLoop<AddBlockEvent> eventLoop = new EventLoop<AddBlockEvent>(""test"") {\n      @Override\n      public void onReceive(AddBlockEvent event) {\n        events.add(event);\n      }\n']",Block;Manager;mock;Lists;Partitioner;mock;ependency;Metrics;mock;Metrics,7.566995918750763e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;3.637978807091713e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.973231792449951, -5.5379533767700195, -4.609017848968506, -5.8451151847839355, -5.425451755523682, -0.02402549237012863]",0.9762607216835022
2,"['  @Test\n  public void readTest() throws Exception {\n\n    String basePath = HDFS_URI + ""readTest1"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);\n\n    Map<String, String> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n     writeTestData(writeHandler, 2, 5, expectedData,\n        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);\n\n    TaskContext contextMock = mock(TaskContext.class);\n    RssShuffleHandle handleMock = mock(RssShuffleHandle.class);\n    ShuffleDependency dependencyMock = mock(ShuffleDependency.class);\n    when(handleMock.getAppId()).thenReturn(""appId"");\n    when(handleMock.getShuffleId()).thenReturn(1);\n    when(handleMock.getDependency()).thenReturn(dependencyMock);\n    when(dependencyMock.serializer()).thenReturn(KRYO_SERIALIZER);\n    when(contextMock.taskAttemptId()).thenReturn(1L);\n    when(contextMock.attemptNumber()).thenReturn(1);\n    when(contextMock.taskMetrics()).thenReturn(new TaskMetrics());\n    doNothing().when(contextMock).killTaskIfInterrupted();\n    when(dependencyMock.mapSideCombine()).thenReturn(false);\n    when(dependencyMock.aggregator()).thenReturn(Option.empty());\n    when(dependencyMock.keyOrdering()).thenReturn(Option.empty());\n\n    RssShuffleReader rssShuffleReaderSpy = spy(new RssShuffleReader<String, String>(0, 1, contextMock,\n        handleMock, basePath, 1000, conf, StorageType.HDFS.name(),\n        1000, 2, 10, blockIdBitmap, taskIdBitmap));\n\n    validateResult(rssShuffleReaderSpy.read(), expectedData, 10);\n  }\n']",Exception;Combine;read;dependency;df;Task;URI;HDFS;Shuffle;Bitmap,1.5133991837501526e-09;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.928045749664307, -5.498873233795166, -4.663689136505127, -5.775558948516846, -5.420325756072998, -0.024000704288482666]",0.9762851595878601
2,"['  @Test\n  public void checkBlockSendResultTest() {\n    SparkConf conf = new SparkConf();\n    conf.setAppName(""testApp"")\n        .setMaster(""local[2]"")\n        .set(RssClientConfig.RSS_TEST_FLAG, ""true"")\n        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_TIMEOUT, ""10000"")\n        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_INTERVAL, ""1000"")\n        .set(RssClientConfig.RSS_COORDINATOR_QUORUM, ""127.0.0.1:12345,127.0.0.1:12346"");\n    // init SparkContext\n    SparkContext sc = SparkContext.getOrCreate(conf);\n    RssShuffleManager manager = new RssShuffleManager(conf, false);\n\n    Serializer kryoSerializer = new KryoSerializer(conf);\n    ShuffleWriteClient mockShuffleWriteClient = mock(ShuffleWriteClient.class);\n    Partitioner mockPartitioner = mock(Partitioner.class);\n    ShuffleDependency mockDependency = mock(ShuffleDependency.class);\n    RssShuffleHandle mockHandle = mock(RssShuffleHandle.class);\n    when(mockHandle.getDependency()).thenReturn(mockDependency);\n    when(mockDependency.partitioner()).thenReturn(mockPartitioner);\n    when(mockPartitioner.numPartitions()).thenReturn(2);\n    when(mockHandle.getPartitionToServers()).thenReturn(Maps.newHashMap());\n    TaskMemoryManager mockTaskMemoryManager = mock(TaskMemoryManager.class);\n\n    BufferManagerOptions bufferOptions = new BufferManagerOptions(conf);\n    WriteBufferManager bufferManager = new WriteBufferManager(\n        0, 0, bufferOptions, kryoSerializer,\n        Maps.newHashMap(), mockTaskMemoryManager, new ShuffleWriteMetrics());\n    WriteBufferManager bufferManagerSpy = spy(bufferManager);\n    doReturn(1000000L).when(bufferManagerSpy).acquireMemory(anyLong());\n\n    RssShuffleWriter rssShuffleWriter = new RssShuffleWriter(""appId"", 0, ""taskId"", 1L,\n        bufferManagerSpy, (new TaskMetrics()).shuffleWriteMetrics(),\n        manager, conf, mockShuffleWriteClient, mockHandle);\n\n    // case 1: all blocks are sent successfully\n    manager.addSuccessBlockIds(""taskId"", Sets.newHashSet(1L, 2L, 3L));\n    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));\n    manager.clearCachedBlockIds();\n\n    // case 2: partial blocks aren\'t sent before spark.rss.writer.send.check.timeout,\n    // Runtime exception will be thrown\n    manager.addSuccessBlockIds(""taskId"", Sets.newHashSet(1L, 2L));\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(StringStartsWith.startsWith(""Timeout:""));\n    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));\n\n    manager.clearCachedBlockIds();\n\n    // case 3: partial blocks are sent failed, Runtime exception will be thrown\n    manager.addSuccessBlockIds(""taskId"", Sets.newHashSet(1L, 2L));\n    manager.addFailedBlockIds(""taskId"", Sets.newHashSet(3L));\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(StringStartsWith.startsWith(""Send failed:""));\n    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));\n    manager.clearCachedBlockIds();\n\n    sc.stop();\n  }\n']",TIMEOUT;Block;QUORUM;EST;CHECK;conf;Partitioner;App;ependency;Kry,1.0477378964424133e-09;7.566995918750763e-10;6.693881005048752e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.936001777648926, -5.522024154663086, -4.656044006347656, -5.780797481536865, -5.409705638885498, -0.02398894913494587]",0.9762964844703674
2,"['  @Test\n  public void writeTest() throws Exception {\n    SparkConf conf = new SparkConf();\n    conf.setAppName(""testApp"").setMaster(""local[2]"")\n        .set(RssClientConfig.RSS_TEST_FLAG, ""true"")\n        .set(RssClientConfig.RSS_WRITER_BUFFER_SIZE, ""32"")\n        .set(RssClientConfig.RSS_WRITER_SERIALIZER_BUFFER_SIZE, ""32"")\n        .set(RssClientConfig.RSS_WRITER_BUFFER_SEGMENT_SIZE, ""64"")\n        .set(RssClientConfig.RSS_WRITER_BUFFER_SPILL_SIZE, ""128"")\n        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_TIMEOUT, ""10000"")\n        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_INTERVAL, ""1000"")\n        .set(RssClientConfig.RSS_COORDINATOR_QUORUM, ""127.0.0.1:12345,127.0.0.1:12346"");\n    // init SparkContext\n    SparkContext sc = SparkContext.getOrCreate(conf);\n    RssShuffleManager manager = new RssShuffleManager(conf, false);\n    List<ShuffleBlockInfo> shuffleBlockInfos = Lists.newArrayList();\n\n    manager.setEventLoop(new EventLoop<AddBlockEvent>(""test"") {\n      @Override\n      public void onReceive(AddBlockEvent event) {\n        assertEquals(""taskId"", event.getTaskId());\n        shuffleBlockInfos.addAll(event.getShuffleDataInfoList());\n        Set<Long> blockIds = event.getShuffleDataInfoList().parallelStream()\n            .map(sdi -> sdi.getBlockId()).collect(Collectors.toSet());\n        manager.addSuccessBlockIds(event.getTaskId(), blockIds);\n      }\n']",Loop;SPILL;SIZE;Master;manager;SERIALIZER;INTERVAL;SIZE;Context;WRITER,1.3969838619232178e-09;9.094947017729282e-10;8.149072527885437e-10;5.820766091346741e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.893235206604004, -5.498359680175781, -4.681750297546387, -5.752413749694824, -5.388572692871094, -0.024147100746631622]",0.9761421084403992
2,"['  @Test\n  public void postBlockEventTest() throws Exception {\n    WriteBufferManager mockBufferManager = mock(WriteBufferManager.class);\n    ShuffleWriteMetrics mockMetrics = mock(ShuffleWriteMetrics.class);\n    ShuffleDependency mockDependency = mock(ShuffleDependency.class);\n    Partitioner mockPartitioner = mock(Partitioner.class);\n    RssShuffleManager mockShuffleManager = mock(RssShuffleManager.class);\n    when(mockDependency.partitioner()).thenReturn(mockPartitioner);\n    when(mockPartitioner.numPartitions()).thenReturn(2);\n    List<AddBlockEvent> events = Lists.newArrayList();\n\n    EventLoop<AddBlockEvent> eventLoop = new EventLoop<AddBlockEvent>(""test"") {\n      @Override\n      public void onReceive(AddBlockEvent event) {\n        events.add(event);\n      }\n']",partitioner;ependency;num;when;post;class;Shuffle;Partitioner;Manager;ependency,6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.964492321014404, -5.539951801300049, -4.620864391326904, -5.836347579956055, -5.417221546173096, -0.02398359589278698]",0.9763017296791077
2,"['  @Test\n  public void getBlockIdTest() {\n    // max value of blockId\n    assertEquals(\n        new Long(9223372036854775807L), ClientUtils.getBlockId(16777215, 1048575, 524287));\n    // just a random test\n    assertEquals(\n        new Long(1759218709299300L), ClientUtils.getBlockId(100, 100, 100));\n    // min value of blockId\n    assertEquals(\n        new Long(0L), ClientUtils.getBlockId(0, 0, 0));\n    try {\n      ClientUtils.getBlockId(16777216, 0, 0);\n      fail(EXCEPTION_EXPECTED);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Can\'t support partitionId[16777216], the max value should be 16777215""));\n    }\n    try {\n      ClientUtils.getBlockId(0, 1048576, 0);\n      fail(EXCEPTION_EXPECTED);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Can\'t support taskAttemptId[1048576], the max value should be 1048575""));\n    }\n    try {\n      ClientUtils.getBlockId(0, 0, 524288);\n      fail(EXCEPTION_EXPECTED);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Can\'t support sequence[524288], the max value should be 524287""));\n    }\n  }\n']",catch;get;random;Equals;should;value;catch;Message;Long;value,2.7939677238464355e-09;8.731149137020111e-10;8.149072527885437e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.924394130706787, -5.577210903167725, -4.652624607086182, -5.743693828582764, -5.345933437347412, -0.024255314841866493]",0.9760364890098572
2,"['  @Test\n  public void getBitmapNumTest() {\n    // max value of taskNum, partitionNum, blockNumPerTaskPerPartition, it is unexpected in real job\n    assertEquals(\n        2147483647, ClientUtils.getBitmapNum(Integer.MAX_VALUE, Integer.MAX_VALUE, 1000000, 100000000L));\n    // taskNum * partitionNum * blockNumPerTaskPerPartition / blockNumPerBitmap > 0\n    assertEquals(\n        5001, ClientUtils.getBitmapNum(100000, 100000, 50, 100000000L));\n    // taskNum * partitionNum * blockNumPerTaskPerPartition / blockNumPerBitmap = 0\n    assertEquals(\n        1, ClientUtils.getBitmapNum(1999, 1999, 50, 100000000L));\n    try {\n      ClientUtils.getBitmapNum(1, 1, 1, 19999999L);\n      fail(EXCEPTION_EXPECTED);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""blockNumPerBitmap should be greater than""));\n    }\n    try {\n      ClientUtils.getBitmapNum(1, 1, 1000001, 20000000L);\n      fail(EXCEPTION_EXPECTED);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""blockNumPerTaskPerPartition should be less than""));\n    }\n  }\n']",catch;catch;fail;than;EXCEPTION;Exception;get;get;real;partition,3.259629011154175e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.8989739418029785, -5.589869976043701, -4.667229175567627, -5.715026378631592, -5.31898307800293, -0.02436421625316143]",0.9759302139282227
2,"['  @Test\n  public void readTest1() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest1"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 2, 30, 0, expectedData,\n        blockIdBitmap);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n\n    blockIdBitmap.addLong(Constants.MAX_TASK_ATTEMPT_ID - 1);\n    taskIdBitmap.addLong(Constants.MAX_TASK_ATTEMPT_ID - 1);\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n    TestUtils.validateResult(readClient, expectedData);\n    try {\n      // can\'t find all expected block id, data loss\n      readClient.checkProcessedBlockIds();\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Blocks read inconsistent:""));\n    } finally {\n      readClient.close();\n    }\n  }\n']",Processed;Impl;ES;EXPECTED;Result;Result;Roaring;Block;add;Roaring,6.257323548197746e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.859367847442627, -5.486526966094971, -4.694576740264893, -5.725220680236816, -5.3625264167785645, -0.02438666857779026]",0.9759082794189453
2,"['  @Test\n  public void readTest2() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest2"";\n    HdfsShuffleWriteHandler writeHandler1 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test2_1"", conf);\n    HdfsShuffleWriteHandler writeHandler2 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test2_2"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler1, 2, 30, 0, expectedData, blockIdBitmap);\n    writeTestData(writeHandler2, 2, 30, 0, expectedData, blockIdBitmap);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 1, 100, 2, 10, 1000,\n        basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",new;Client;Long;Handler;Client;Shuffle;Data;Map;Write;Path,5.093170329928398e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.055902197957039e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.255546860396862e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.90310001373291, -5.520769119262695, -4.68538236618042, -5.749789714813232, -5.376293182373047, -0.024058427661657333]",0.976228654384613
2,"['  @Test\n  public void readTest3() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest3"";\n    HdfsShuffleWriteHandler writeHandler1 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test3_1"", conf);\n    HdfsShuffleWriteHandler writeHandler2 =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test3_2"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler1, 2, 30, 0, expectedData, blockIdBitmap);\n    writeTestData(writeHandler2, 2, 30, 0, expectedData, blockIdBitmap);\n\n    // duplicate file created, it should be used in product environment\n    String shuffleFolder = basePath + ""/appId/0/0-1"";\n    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_1_0.data""), fs,\n        new Path(basePath + ""/test3_1.cp.data""), false, conf);\n    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_1_0.index""), fs,\n        new Path(basePath + ""/test3_1.cp.index""), false, conf);\n    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_2_0.data""), fs,\n        new Path(basePath + ""/test3_2.cp.data""), false, conf);\n    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_2_0.index""), fs,\n        new Path(basePath + ""/test3_2.cp.index""), false, conf);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 1, 100, 2, 10, 1000,\n        basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",Exception;df;bitmap;URI;Shuffle;should;Folder;df;base;shuffle,6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.880125999450684, -5.468837738037109, -4.687586307525635, -5.724804401397705, -5.384425163269043, -0.02436537854373455]",0.9759290814399719
2,"['  @Test\n  public void readTest4() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest4"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test1"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 2, 30, 0, expectedData, blockIdBitmap);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 1, 100, 2, 10, 1000,\n        basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n    Path dataFile = new Path(basePath + ""/appId/0/0-1/test1_0.data"");\n    // data file is deleted after readClient checkExpectedBlockIds\n    fs.delete(new Path(basePath + ""/appId/0/0-1/test1_0.data""), true);\n    // sleep to wait delete operation\n    Thread.sleep(10000);\n\n    assertNull(readClient.readShuffleBlockData());\n    try {\n      fs.listStatus(dataFile);\n      fail(""Index file should be deleted"");\n    } catch (Exception e) {\n    }\n\n    try {\n      readClient.checkProcessedBlockIds();\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().startsWith(""Blocks read inconsistent: expected""));\n    }\n    readClient.close();\n  }\n']",Thread;bitmap;sleep;deleted;be;Shuffle;Exception;Impl;expected;task,6.984919309616089e-10;5.966285243630409e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.902204513549805, -5.496818542480469, -4.689659595489502, -5.746331691741943, -5.375751972198486, -0.02413383685052395]",0.9761550426483154
2,"['  @Test\n  public void readTest5() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest5"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 2, 30, 0, expectedData, blockIdBitmap);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 1, 100, 2, 10, 1000,\n        basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n    // index file is deleted after iterator initialization, it should be ok, all index infos are read already\n    Path indexFile = new Path(basePath + ""/appId/0/0-1/test.index"");\n    fs.delete(indexFile, true);\n    readClient.close();\n\n    assertNull(readClient.readShuffleBlockData());\n  }\n']",Path;Configuration;expected;conf;already;read;Block;HDFS;app;fs,4.511093720793724e-10;4.220055416226387e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.9228997230529785, -5.565896034240723, -4.685678482055664, -5.743513107299805, -5.365797996520996, -0.023890366777777672]",0.9763927459716797
2,"['  @Test\n  public void readTest7() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest7"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);\n\n    Map<Long, byte[]> expectedData1 = Maps.newHashMap();\n    Map<Long, byte[]> expectedData2 = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 10, 30, 0, expectedData1, blockIdBitmap1);\n\n    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();\n    writeTestData(writeHandler, 10, 30, 0, expectedData2, blockIdBitmap2);\n\n    writeTestData(writeHandler, 10, 30, 0, expectedData1, blockIdBitmap1);\n\n    ShuffleReadClientImpl readClient1 = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 0, 100, 2, 10, 100,\n        basePath, blockIdBitmap1, taskIdBitmap, Lists.newArrayList(), new Configuration());\n    ShuffleReadClientImpl readClient2 = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 1, 100, 2, 10, 100,\n        basePath, blockIdBitmap2, taskIdBitmap, Lists.newArrayList(), new Configuration());\n    TestUtils.validateResult(readClient1, expectedData1);\n    readClient1.checkProcessedBlockIds();\n    readClient1.close();\n\n    TestUtils.validateResult(readClient2, expectedData2);\n    readClient2.checkProcessedBlockIds();\n    readClient2.close();\n  }\n']",read;Shuffle;Shuffle;Navigable;Shuffle;Impl;Path;bitmap;HDFS;Storage,6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.86151123046875, -5.464252948760986, -4.689977169036865, -5.725673198699951, -5.381824970245361, -0.024425873532891273]",0.9758700132369995
2,"['  @Test\n  public void readTest8() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest8"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 2, 30, 0, expectedData, blockIdBitmap);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 1, 100, 2, 10, 1000,\n        basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n    // crc32 is incorrect\n    try (MockedStatic<ChecksumUtils> checksumUtilsMock = Mockito.mockStatic(ChecksumUtils.class)) {\n      checksumUtilsMock.when(() -> ChecksumUtils.getCrc32((ByteBuffer) any())).thenReturn(-1L);\n      try {\n        ByteBuffer bb = readClient.readShuffleBlockData().getByteBuffer();\n        while (bb != null) {\n          bb = readClient.readShuffleBlockData().getByteBuffer();\n        }\n        fail(EXPECTED_EXCEPTION_MESSAGE);\n      } catch (Exception e) {\n        assertTrue(e.getMessage().startsWith(""Unexpected crc value""));\n      }\n    }\n    readClient.close();\n  }\n']",Shuffle;HDFS;EXCEPTION;bitmap;starts;base;Mockito;Handler;ESSAGE;read,6.984919309616089e-10;3.92901711165905e-10;2.9831426218152046e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.8917489796876907e-10,5,5,"[-5.920207977294922, -5.477640151977539, -4.67158317565918, -5.776110649108887, -5.4249114990234375, -0.02401350624859333]",0.9762725234031677
2,"['  @Test\n  public void readTest9() {\n    // empty data\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 1, 100, 2, 10, 1000,\n        ""basePath"", Roaring64NavigableMap.bitmapOf(), Roaring64NavigableMap.bitmapOf(),\n        Lists.newArrayList(), new Configuration());\n    assertNull(readClient.readShuffleBlockData());\n    readClient.checkProcessedBlockIds();\n  }\n']",Block;Processed;bitmap;Read;Data;Client;read;Navigable;Roaring;DF,1.0477378964424133e-09;8.731149137020111e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.729372449219227e-10;4.656612873077393e-10,5,5,"[-5.9771409034729, -5.601883411407471, -4.627735137939453, -5.833187103271484, -5.402710914611816, -0.023715991526842117]",0.976563036441803
2,"['  @Test\n  public void readTest10() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest10"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 5, 30, 0, expectedData, blockIdBitmap);\n    Roaring64NavigableMap wrongBlockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    LongIterator iter = blockIdBitmap.getLongIterator();\n    while (iter.hasNext()) {\n      wrongBlockIdBitmap.addLong(iter.next() + (1 << Constants.TASK_ATTEMPT_ID_MAX_LENGTH));\n    }\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        ""appId"", 0, 0, 100, 2, 10, 100,\n        basePath, wrongBlockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n    assertNull(readClient.readShuffleBlockData());\n    try {\n      readClient.checkProcessedBlockIds();\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Blocks read inconsistent:""));\n    }\n  }\n']",ATTEMPT;conf;Shuffle;wrong;EXPECTED;Shuffle;Block;task;df;app,9.89530235528946e-10;5.238689482212067e-10;5.093170329928398e-10;3.7834979593753815e-10;3.4560798667371273e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10,5,5,"[-5.918407440185547, -5.510491371154785, -4.670236587524414, -5.768185615539551, -5.402547359466553, -0.024020256474614143]",0.9762658476829529
2,"['  @Test\n  public void readTest11() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest11"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    writeTestData(writeHandler, 10, 30, 0, expectedData, blockIdBitmap);\n\n    // test with different indexReadLimit to validate result\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 1, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 2, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 3, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 10, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 11, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",read;Impl;HDFS;df;Handler;Block;check;Shuffle;read;Read,9.604264050722122e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.831179141998291, -5.482834815979004, -4.702994346618652, -5.685943603515625, -5.3376898765563965, -0.024662118405103683]",0.9756395220756531
2,"['  @Test\n  public void readTest12() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest12"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0, 1);\n    writeTestData(writeHandler, 5, 30, 0, expectedData, blockIdBitmap);\n    writeTestData(writeHandler, 5, 30, 1, expectedData, blockIdBitmap);\n    writeTestData(writeHandler, 5, 30, 2, Maps.newHashMap(), blockIdBitmap);\n\n    // unexpected taskAttemptId should be filtered\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    assertEquals(15, readClient.getProcessedBlockIds().getLongCardinality());\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",base;read;client;Navigable;Shuffle;Client;Client;Shuffle;Handler;df,7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;4.2928149923682213e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.886025905609131, -5.505194664001465, -4.68910026550293, -5.736741065979004, -5.373795986175537, -0.024190621450543404]",0.9760997295379639
2,"['  @Test\n  public void readTest13() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest13"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0, 3);\n    writeTestData(writeHandler, 5, 30, 0, expectedData, blockIdBitmap);\n    // test case: data generated by speculation task without report result\n    writeTestData(writeHandler, 5, 30, 1, Maps.newHashMap(), Roaring64NavigableMap.bitmapOf());\n    // test case: data generated by speculation task with report result\n    writeTestData(writeHandler, 5, 30, 2, Maps.newHashMap(), blockIdBitmap);\n    writeTestData(writeHandler, 5, 30, 3, expectedData, blockIdBitmap);\n\n    // unexpected taskAttemptId should be filtered\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    assertEquals(20, readClient.getProcessedBlockIds().getLongCardinality());\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",Exception;Handler;expected;conf;bitmap;Attempt;Shuffle;by;Equals;with,5.820766091346741e-10;3.7834979593753815e-10;3.7471181713044643e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.128661774098873e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.8819661140441895, -5.4990057945251465, -4.689050674438477, -5.731149196624756, -5.376621246337891, -0.02423367276787758]",0.9760577082633972
2,"['  @Test\n  public void readTest14() throws Exception {\n    String basePath = HDFS_URI + ""clientReadTest14"";\n    HdfsShuffleWriteHandler writeHandler =\n        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0, 2);\n    writeDuplicatedData(writeHandler, 5, 30, 0, expectedData, blockIdBitmap);\n    writeTestData(writeHandler, 5, 30, 1, Maps.newHashMap(), Roaring64NavigableMap.bitmapOf());\n    writeTestData(writeHandler, 5, 30, 2, expectedData, blockIdBitmap);\n\n    // unexpected taskAttemptId should be filtered\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,\n        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());\n\n    TestUtils.validateResult(readClient, expectedData);\n    assertEquals(15, readClient.getProcessedBlockIds().getLongCardinality());\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",base;Processed;df;Client;Roaring;Path;get;Block;Exception;Processed,6.83940015733242e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.897127151489258, -5.5139665603637695, -4.684715270996094, -5.741894245147705, -5.3826904296875, -0.024105092510581017]",0.9761831164360046
2,"['  @Test\n  public void testSendData() {\n    ShuffleWriteClientImpl shuffleWriteClient =\n        new ShuffleWriteClientImpl(""GRPC"", 3, 2000, 4);\n    ShuffleServerClient mockShuffleServerClient = mock(ShuffleServerClient.class);\n    ShuffleWriteClientImpl spyClient = spy(shuffleWriteClient);\n    doReturn(mockShuffleServerClient).when(spyClient).getShuffleServerClient(any());\n    when(mockShuffleServerClient.sendShuffleData(any())).thenReturn(\n        new RssSendShuffleDataResponse(ResponseStatusCode.NO_BUFFER));\n\n    List<ShuffleServerInfo> shuffleServerInfoList =\n        Lists.newArrayList(new ShuffleServerInfo(""id"", ""host"", 0));\n    List<ShuffleBlockInfo> shuffleBlockInfoList = Lists.newArrayList(new ShuffleBlockInfo(\n        0, 0, 10, 10, 10, new byte[]{1}, shuffleServerInfoList, 10, 100, 0));\n    SendShuffleDataResult result = spyClient.sendShuffleData(""appId"", shuffleBlockInfoList);\n\n    assertTrue(result.getFailedBlockIds().contains(10L));\n  }\n']",when;Data;Shuffle;Response;spy;shuffle;BUFFER;Client;Shuffle;Write,1.6298145055770874e-09;6.402842700481415e-10;5.238689482212067e-10;4.511093720793724e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.897008895874023, -5.52373743057251, -4.684001922607422, -5.743943214416504, -5.360633850097656, -0.02417025715112686]",0.9761193990707397
2,"['  @Test\n  public void jettyServerTest() throws FileNotFoundException {\n    RssBaseConf conf = new RssBaseConf();\n    conf.setString(""rss.jetty.http.port"", ""9527"");\n    JettyServer jettyServer = new JettyServer(conf);\n    Server server = jettyServer.getServer();\n\n    assertEquals(4, server.getBeans().size());\n    assertEquals(30000, server.getStopTimeout());\n    assertTrue(server.getThreadPool() instanceof ExecutorThreadPool);\n\n    assertEquals(1, server.getConnectors().length);\n    assertEquals(server, server.getHandler().getServer());\n    assertTrue(server.getConnectors()[0] instanceof ServerConnector);\n    ServerConnector connector = (ServerConnector) server.getConnectors()[0];\n    assertEquals(9527, connector.getPort());\n\n    assertEquals(1, server.getHandlers().length);\n    Handler handler = server.getHandler();\n    assertTrue(handler instanceof ServletContextHandler);\n  }\n']",Jetty;Jetty;new;server;Pool;size;handler;Server;Connectors;Connector,7.566995918750763e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.256435204297304e-10;4.220055416226387e-10;4.220055416226387e-10;3.92901711165905e-10,5,5,"[-5.914137363433838, -5.620481967926025, -4.671500205993652, -5.742008686065674, -5.300112724304199, -0.02417130582034588]",0.9761186242103577
2,"['  @Test\n  public void jettyServerStartTest() throws Exception {\n    try {\n      RssBaseConf conf = new RssBaseConf();\n      conf.setString(""rss.jetty.http.port"", ""9527"");\n      JettyServer jettyServer1 = new JettyServer(conf);\n      JettyServer jettyServer2 = new JettyServer(conf);\n      jettyServer1.start();\n\n      ExitUtils.disableSystemExit();\n      final String expectMessage = ""Fail to start jetty http server"";\n      final int expectStatus = 1;\n      try {\n        jettyServer2.start();\n      } catch (Exception e) {\n        assertEquals(expectMessage, e.getMessage());\n        assertEquals(expectStatus, ((ExitException) e).getStatus());\n      }\n\n      final Thread t = new Thread(null, () -> {\n        throw new AssertionError(""TestUncaughtException"");\n      }, ""testThread"");\n      t.start();\n      t.join();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail();\n    }\n\n  }\n']",jetty;Thread;port;to;Start;ss;Base;Exit;Base;Exception,8.149072527885437e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.990293025970459, -5.551466464996338, -4.630435466766357, -5.82908821105957, -5.421719074249268, -0.023775827139616013]",0.9765045046806335
2,"['  @Test\n  public void testBasicTypes() {\n    final ConfigOption<Integer> intConfig = ConfigOptions\n        .key(""rss.key1"")\n        .intType()\n        .defaultValue(1000)\n        .withDescription(""Int config key1"");\n    assertSame(Integer.class, intConfig.getClazz());\n    assertEquals(1000, (int) intConfig.defaultValue());\n    assertEquals(""Int config key1"", intConfig.description());\n\n    final ConfigOption<Long> longConfig = ConfigOptions\n        .key(""rss.key2"")\n        .longType()\n        .defaultValue(1999L);\n    assertTrue(longConfig.hasDefaultValue());\n    assertEquals(1999L, (long) longConfig.defaultValue());\n\n    final ConfigOption<String> stringConfig = ConfigOptions\n        .key(""rss.key3"")\n        .stringType()\n        .noDefaultValue();\n    assertFalse(stringConfig.hasDefaultValue());\n    assertEquals("""", stringConfig.description());\n\n    final ConfigOption<Boolean> booleanConfig = ConfigOptions\n        .key(""key4"")\n        .booleanType()\n        .defaultValue(false)\n        .withDescription(""Boolean config key"");\n    assertFalse(booleanConfig.defaultValue());\n    assertEquals(""Boolean config key"", booleanConfig.description());\n\n    final ConfigOption<Integer> positiveInt = ConfigOptions\n        .key(""key5"")\n        .intType()\n        .checkValue((v) -> {return v > 0;}, ""The value of key5 must be positive"")\n        .defaultValue(1)\n        .withDescription(""Positive integer key"");\n    RssBaseConf conf = new RssBaseConf();\n    conf.set(positiveInt, -1);\n    boolean isException = false;\n    try {\n      conf.get(positiveInt);\n    } catch (IllegalArgumentException ie) {\n      isException = true;\n      assertTrue(ie.getMessage().contains(""The value of key5 must be positive""));\n    }\n    assertTrue(isException);\n    conf.set(positiveInt, 1);\n    try {\n      conf.get(positiveInt);\n    } catch (IllegalArgumentException ie) {\n      fail();\n    }\n  }\n']",rss;must;description;description;with;False;Value;Config;Config;default,3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;1.8917489796876907e-10;1.8917489796876907e-10,5,5,"[-5.961342811584473, -5.513601779937744, -4.633706092834473, -5.784188747406006, -5.449917793273926, -0.023984525352716446]",0.976300835609436
2,"['    @Test\n    public void testOptionWithDefault() {\n        RssConf cfg = new RssConf();\n        cfg.setInteger(""int-key"", 11);\n        cfg.setString(""string-key"", ""abc"");\n\n        ConfigOption<String> presentStringOption = ConfigOptions\n                .key(""string-key"")\n                .stringType()\n                .defaultValue(""my-beautiful-default"");\n        ConfigOption<Integer> presentIntOption = ConfigOptions\n                .key(""int-key"")\n                .intType()\n                .defaultValue(87);\n\n        assertEquals(""abc"", cfg.getString(presentStringOption));\n        assertEquals(""abc"", cfg.getValue(presentStringOption));\n\n        assertEquals(11, cfg.getInteger(presentIntOption));\n        assertEquals(""11"", cfg.getValue(presentIntOption));\n    }\n']",Default;Option;default;beautiful;Int;Type;Config;Conf;present;present,8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.9246320724487305, -5.4842071533203125, -4.67151403427124, -5.747745037078857, -5.435873985290527, -0.024016298353672028]",0.9762699007987976
2,"['    @Test\n    public void testSetStringAndGetConcreteType() {\n        RssConf conf = new RssConf();\n        conf.setString(""boolean-type"", ""true"");\n        conf.setString(""int-type"", ""1111"");\n        conf.setString(""long-type"", ""1000"");\n        assertTrue(conf.getBoolean(""boolean-type"", false));\n        assertEquals(conf.getInteger(""int-type"", 100), 1111);\n        assertEquals(conf.getLong(""long-type"", 222L), 1000L);\n    }\n']",Boolean;long;Concrete;set;Type;Conf;false;type;conf;ss,1.280568540096283e-09;4.94765117764473e-10;3.346940502524376e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.944775104522705, -5.616580009460449, -4.6527180671691895, -5.766514301300049, -5.367123603820801, -0.023873023688793182]",0.9764095544815063
2,"['    @Test\n    public void testOptionWithNoDefault() {\n        RssConf cfg = new RssConf();\n        cfg.setInteger(""int-key"", 11);\n        cfg.setString(""string-key"", ""abc"");\n\n        ConfigOption<String> presentStringOption = ConfigOptions\n                .key(""string-key"")\n                .stringType()\n                .noDefaultValue();\n\n        assertEquals(""abc"", cfg.getString(presentStringOption));\n        assertEquals(""abc"", cfg.getValue(presentStringOption));\n\n        // test getting default when no value is present\n\n        ConfigOption<String> stringOption = ConfigOptions\n                .key(""test"")\n                .stringType()\n                .noDefaultValue();\n\n        // getting strings for null should work\n        assertNull(cfg.getValue(stringOption));\n        assertNull(cfg.getString(stringOption));\n\n        // overriding the null default should work\n        assertEquals(""override"", cfg.getString(stringOption, ""override""));\n    }\n']",Conf;no;overriding;string;null;Value;Default;override;string;cf,1.0477378964424133e-09;9.313225746154785e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.896879196166992, -5.467939376831055, -4.680842876434326, -5.723182678222656, -5.4222636222839355, -0.02421645261347294]",0.9760743975639343
2,"['  @Test\n  public void crc32TestWithByte() {\n    byte[] data = new byte[32 * 1024 * 1024];\n    new Random().nextBytes(data);\n    CRC32 crc32 = new CRC32();\n    crc32.update(data);\n    long expected = crc32.getValue();\n    assertEquals(expected, ChecksumUtils.getCrc32(data));\n\n    data = new byte[32 * 1024];\n    new Random().nextBytes(data);\n    crc32 = new CRC32();\n    crc32.update(data);\n    expected = crc32.getValue();\n    assertEquals(expected, ChecksumUtils.getCrc32(data));\n  }\n']",next;Bytes;Checksum;Random;long;rc;Byte;get;Random;new,1.280568540096283e-09;9.022187441587448e-10;7.130438461899757e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-6.003274917602539, -5.754642963409424, -4.6482253074646, -5.739299774169922, -5.2899885177612305, -0.023756038397550583]",0.9765239357948303
2,"['  @Test\n  public void crc32TestWithByteBuff() throws Exception {\n    int length = 32 * 1024 * 1024;\n    byte[] data = new byte[length];\n    new Random().nextBytes(data);\n\n    String tempDir = Files.createTempDirectory(""rss"").toString();\n    File file = new File(tempDir, ""crc_test.txt"");\n    file.createNewFile();\n    file.deleteOnExit();\n\n    try (FileOutputStream outputStream = new FileOutputStream(file)) {\n      outputStream.write(data);\n    }\n\n    long expectedChecksum = ChecksumUtils.getCrc32(data);\n\n    // test direct ByteBuffer\n    Path path = Paths.get(file.getAbsolutePath());\n    FileChannel fileChannel = FileChannel.open(path);\n    ByteBuffer buffer = ByteBuffer.allocateDirect(length);\n    int bytesRead = fileChannel.read(buffer);\n    fileChannel.close();\n    assertEquals(length, bytesRead);\n    buffer.flip();\n    assertEquals(expectedChecksum, ChecksumUtils.getCrc32(buffer));\n    assertEquals(length, buffer.position());\n\n    // test heap ByteBuffer\n    path = Paths.get(file.getAbsolutePath());\n    fileChannel = FileChannel.open(path);\n    buffer = ByteBuffer.allocate(length);\n    bytesRead = fileChannel.read(buffer);\n    fileChannel.close();\n    assertEquals(length, bytesRead);\n    buffer.flip();\n    assertEquals(expectedChecksum, ChecksumUtils.getCrc32(buffer));\n\n  }\n']",create;temp;heap;Dir;File;cr;to;expected;path;new,8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;3.637978807091713e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.972919940948486, -5.6045708656311035, -4.645691871643066, -5.768794536590576, -5.395615100860596, -0.02377082221210003]",0.9765093922615051
2,"['  @Test\n  public void testGetPropertiesFromFile() {\n    final String filePath = Objects.requireNonNull(\n        getClass().getClassLoader().getResource(""rss-defaults.conf"")).getFile();\n    Map<String, String> properties = RssUtils.getPropertiesFromFile(filePath);\n    assertEquals(""12121"", properties.get(""rss.coordinator.port""));\n    assertEquals(""155"", properties.get(""rss.server.heartbeat.interval""));\n    assertEquals(""true"", properties.get(""rss.x.y.z""));\n    assertEquals(""-XX:+PrintGCDetails-Dkey=value-Dnumbers=\\""one two three\\"""",\n        properties.get(""rss.a.b.c.extraJavaOptions""));\n  }\n']",coordinator;Print;Java;conf;Equals;extra;rss;Properties;Properties;Objects,1.280568540096283e-09;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10,5,5,"[-5.933004856109619, -5.626529693603516, -4.675966262817383, -5.7240166664123535, -5.33475399017334, -0.023940065875649452]",0.9763442277908325
2,"['  @Test\n  public void testGetHostIp() {\n    try {\n      String address = InetAddress.getLocalHost().getHostAddress();\n      String realIp = RssUtils.getHostIp();\n      assertNotEquals(""127.0.0.1"", realIp);\n      if (!address.equals(""127.0.0.1"")) {\n        assertEquals(address, realIp);\n      }\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n  }\n']",ss;Address;Host;Host;Equals;real;equals;address;fail;Host,9.89530235528946e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.6007106751203537e-10,5,5,"[-5.989653587341309, -5.659493923187256, -4.630478858947754, -5.8021674156188965, -5.326292514801025, -0.023905381560325623]",0.9763780832290649
2,"['  @Test\n  public void testSerializeBitmap() throws Exception {\n    Roaring64NavigableMap bitmap1 = Roaring64NavigableMap.bitmapOf(1, 2, 100, 10000);\n    byte[] bytes = RssUtils.serializeBitMap(bitmap1);\n    Roaring64NavigableMap bitmap2 = RssUtils.deserializeBitMap(bytes);\n    assertEquals(bitmap1, bitmap2);\n    assertEquals(Roaring64NavigableMap.bitmapOf(), RssUtils.deserializeBitMap(new byte[]{}));\n  }\n']",Exception;bitmap;Equals;bytes;Bit;ss;ss;Roaring;Navigable;bitmap,1.3969838619232178e-09;8.003553375601768e-10;7.421476766467094e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.952157974243164, -5.660107612609863, -4.6473002433776855, -5.765504837036133, -5.342608451843262, -0.023869648575782776]",0.9764129519462585
2,"[""  @Test\n  public void testShuffleIndexSegment() {\n    ShuffleIndexResult shuffleIndexResult = new ShuffleIndexResult();\n    List<ShuffleDataSegment> shuffleDataSegments =\n        RssUtils.transIndexDataToSegments(shuffleIndexResult, 1000);\n    assertTrue(shuffleDataSegments.isEmpty());\n\n    int readBufferSize = 32;\n    int totalLength = 0;\n    List<BufferSegment> bufferSegments = Lists.newArrayList();\n    int[] dataSegmentLength = new int[]{32, 16, 10, 32, 6};\n\n    for (int i = 0; i < dataSegmentLength.length; ++i) {\n      long offset = totalLength;\n      int length = dataSegmentLength[i];\n      bufferSegments.add(new BufferSegment(i, offset, length, i, i, i));\n      totalLength += length;\n    }\n\n    // those 5 segment's data length are [32, 16, 10, 32, 6] so the index should be\n    // split into 3 ShuffleDataSegment, which are [32, 16 + 10 + 32, 6]\n    int expectedTotalSegmentNum = 3;\n    ByteBuffer byteBuffer = ByteBuffer.allocate(5 * 40);\n\n    for (BufferSegment bufferSegment : bufferSegments) {\n      byteBuffer.putLong(bufferSegment.getOffset());\n      byteBuffer.putInt(bufferSegment.getLength());\n      byteBuffer.putInt(bufferSegment.getUncompressLength());\n      byteBuffer.putLong(bufferSegment.getCrc());\n      byteBuffer.putLong(bufferSegment.getBlockId());\n      byteBuffer.putLong(bufferSegment.getTaskAttemptId());\n    }\n\n    byte[] data = byteBuffer.array();\n    shuffleDataSegments = RssUtils.transIndexDataToSegments(new ShuffleIndexResult(data), readBufferSize);\n    assertEquals(expectedTotalSegmentNum, shuffleDataSegments.size());\n\n    assertEquals(0, shuffleDataSegments.get(0).getOffset());\n    assertEquals(32, shuffleDataSegments.get(0).getLength());\n    assertEquals(1, shuffleDataSegments.get(0).getBufferSegments().size());\n\n    assertEquals(32, shuffleDataSegments.get(1).getOffset());\n    assertEquals(58, shuffleDataSegments.get(1).getLength());\n    assertEquals(3,shuffleDataSegments.get(1).getBufferSegments().size());\n\n    assertEquals(90, shuffleDataSegments.get(2).getOffset());\n    assertEquals(6, shuffleDataSegments.get(2).getLength());\n    assertEquals(1, shuffleDataSegments.get(2).getBufferSegments().size());\n  }\n""]",those;length;Shuffle;buffer;Index;Shuffle;Segments;Buffer;True;Buffer,8.149072527885437e-10;7.566995918750763e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.966643333435059, -5.556126594543457, -4.649935245513916, -5.750240325927734, -5.4432454109191895, -0.023776642978191376]",0.9765037894248962
2,"['  @Test\n  public void test() {\n    try {\n    final int status = -1;\n    final String testExitMessage = ""testExitMessage"";\n    try {\n      ExitUtils.disableSystemExit();\n      ExitUtils.terminate(status, testExitMessage, null, null);\n      fail();\n    } catch (ExitException e) {\n      assertEquals(status, e.getStatus());\n      assertEquals(testExitMessage, e.getMessage());\n    }\n\n    final Thread t = new Thread(null, () -> {\n      throw new AssertionError(""TestUncaughtException"");\n    }, ""testThread"");\n    t.start();\n    t.join();\n  } catch (Exception e) {\n      e.printStackTrace();\n      fail();\n    }\n\n  }\n']",terminate;Un;Trace;Thread;Exit;Assertion;new;fail;Error;Stack,1.0477378964424133e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.346940502524376e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-6.008378028869629, -5.602953910827637, -4.59904670715332, -5.860017776489258, -5.3931450843811035, -0.02388838864862919]",0.9763946533203125
2,"['  @Test\n  public void testByteString() {\n\n    assertEquals(10 * PB, UnitConverter.byteStringAs(""10PB"", ByteUnit.BYTE));\n    assertEquals(10 * PB, UnitConverter.byteStringAs(""10pb"", ByteUnit.BYTE));\n    assertEquals(10 * PB, UnitConverter.byteStringAs(""10pB"", ByteUnit.BYTE));\n    assertEquals(10 * PB, UnitConverter.byteStringAs(""10p"", ByteUnit.BYTE));\n    assertEquals(10 * PB, UnitConverter.byteStringAs(""10P"", ByteUnit.BYTE));\n\n    assertEquals(10 * TB, UnitConverter.byteStringAs(""10TB"", ByteUnit.BYTE));\n    assertEquals(10 * TB, UnitConverter.byteStringAs(""10tb"", ByteUnit.BYTE));\n    assertEquals(10 * TB, UnitConverter.byteStringAs(""10tB"", ByteUnit.BYTE));\n    assertEquals(10 * TB, UnitConverter.byteStringAs(""10T"", ByteUnit.BYTE));\n    assertEquals(10 * TB, UnitConverter.byteStringAs(""10t"", ByteUnit.BYTE));\n\n    assertEquals(10 * GB, UnitConverter.byteStringAs(""10GB"", ByteUnit.BYTE));\n    assertEquals(10 * GB, UnitConverter.byteStringAs(""10gb"", ByteUnit.BYTE));\n    assertEquals(10 * GB, UnitConverter.byteStringAs(""10gB"", ByteUnit.BYTE));\n\n    assertEquals(10 * MB, UnitConverter.byteStringAs(""10MB"", ByteUnit.BYTE));\n    assertEquals(10 * MB, UnitConverter.byteStringAs(""10mb"", ByteUnit.BYTE));\n    assertEquals(10 * MB, UnitConverter.byteStringAs(""10mB"", ByteUnit.BYTE));\n    assertEquals(10 * MB, UnitConverter.byteStringAs(""10M"", ByteUnit.BYTE));\n    assertEquals(10 * MB, UnitConverter.byteStringAs(""10m"", ByteUnit.BYTE));\n\n    assertEquals(10 * KB, UnitConverter.byteStringAs(""10KB"", ByteUnit.BYTE));\n    assertEquals(10 * KB, UnitConverter.byteStringAs(""10kb"", ByteUnit.BYTE));\n    assertEquals(10 * KB, UnitConverter.byteStringAs(""10Kb"", ByteUnit.BYTE));\n    assertEquals(10 * KB, UnitConverter.byteStringAs(""10K"", ByteUnit.BYTE));\n    assertEquals(10 * KB, UnitConverter.byteStringAs(""10k"", ByteUnit.BYTE));\n\n    assertEquals(1111, UnitConverter.byteStringAs(""1111"", ByteUnit.BYTE));\n  }\n']",Byte;PB;PB;TB;byte;TB;pb;Unit;As;Unit,1.280568540096283e-09;1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.8198777474462986e-10;3.4924596548080444e-10,5,5,"[-5.888329029083252, -5.561408996582031, -4.676351547241211, -5.6374945640563965, -5.359906196594238, -0.024488458409905434]",0.9758089780807495
2,"['  @Test\n  public void argTest() {\n    String[] args = {""-c"", confFile};\n    Arguments arguments = new Arguments();\n    CommandLine commandLine = new CommandLine(arguments);\n    commandLine.parseArgs(args);\n    assertEquals(confFile, arguments.getConfigFile());\n  }\n']",Command;arguments;command;Line;command;arg;arguments;conf;Line;Command,9.89530235528946e-10;5.966285243630409e-10;5.820766091346741e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-6.00563907623291, -5.6546549797058105, -4.580587863922119, -5.831871509552002, -5.354529857635498, -0.02416374161839485]",0.9761258363723755
2,['  @Test\n  public void argEmptyTest() {\n    String[] args = new String[0];\n    Arguments arguments = new Arguments();\n    CommandLine commandLine = new CommandLine(arguments);\n    commandLine.parseArgs(args);\n    assertNull(arguments.getConfigFile());\n  }\n'],Arguments;args;Args;Line;new;Line;Command;command;Null;get,7.712515071034431e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;0.0;0.0;-5.820766091346741e-11;-7.275957614183426e-11,5,5,"[-6.012310981750488, -5.655233383178711, -4.565692901611328, -5.843125343322754, -5.361814975738525, -0.02423367276787758]",0.9760575890541077
2,"['  @Test\n  public void testMetricsManager() {\n    MetricsManager metricsManager = new MetricsManager();\n    assertEquals(CollectorRegistry.defaultRegistry, metricsManager.getCollectorRegistry());\n\n    CollectorRegistry expectedRegistry = new CollectorRegistry();\n    metricsManager = new MetricsManager(expectedRegistry);\n    assertEquals(expectedRegistry, metricsManager.getCollectorRegistry());\n\n    String expectedName1 = ""counter"";\n    String expectedHelp1 = ""Counter "" + expectedName1;\n    metricsManager.addCounter(expectedName1);\n\n    String expectedName2 = ""name2"";\n    String expectedHelp2 = ""Gauge "" + expectedName2;\n    String label = ""gaugeLabel"";\n    Gauge gauge = metricsManager.addGauge(expectedName2, label);\n    gauge.labels(""lv1"").inc();\n    gauge.labels(""lv2"").inc();\n\n    Map<String, MetricFamilySamples> metricsSamples = new HashMap<>();\n    Enumeration<MetricFamilySamples> mfs = expectedRegistry.metricFamilySamples();\n    while (mfs.hasMoreElements()) {\n      MetricFamilySamples cur = mfs.nextElement();\n      metricsSamples.put(cur.name, cur);\n    }\n\n    assertEquals(expectedHelp1, metricsSamples.get(expectedName1).help);\n    assertEquals(1, metricsSamples.get(expectedName1).samples.size());\n\n    assertEquals(expectedHelp2, metricsSamples.get(expectedName2).help);\n    List<MetricFamilySamples.Sample> f = metricsSamples.get(expectedName2).samples;\n    assertEquals(2, metricsSamples.get(expectedName2).samples.size());\n    String[] actualLabelValues = metricsSamples\n        .get(expectedName2).samples\n        .stream().map(i -> i.labelValues.get(0))\n        .collect(Collectors.toList()).toArray(new String[0]);\n    Arrays.sort(actualLabelValues);\n    assertArrayEquals(new String[]{""lv1"", ""lv2""}, actualLabelValues);\n  }\n']",Help;while;labels;inc;Enumeration;Metrics;Metrics;size;Collector;Registry,6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2741809263825417e-10;3.128661774098873e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6921043172478676e-10,5,5,"[-5.90479040145874, -5.533467769622803, -4.671448230743408, -5.7077412605285645, -5.393176078796387, -0.024195391684770584]",0.9760949611663818
2,"['  @Test\n  public void shufflePartitionedBlockTest() {\n    byte[] buf = new byte[3];\n    new Random().nextBytes(buf);\n\n    ShufflePartitionedBlock b1 = new ShufflePartitionedBlock(1, 1, 2, 3, 1, buf);\n    assertEquals(1, b1.getLength());\n    assertEquals(2, b1.getCrc());\n    assertEquals(3, b1.getBlockId());\n\n    ShufflePartitionedBlock b3 = new ShufflePartitionedBlock(1, 1, 2, 3, 3, buf);\n    assertArrayEquals(buf, b3.getData());\n  }\n']",new;next;buf;Shuffle;new;buf;Shuffle;rc;Block;Shuffle,8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9831426218152046e-10,5,5,"[-5.927955150604248, -5.69719934463501, -4.686569690704346, -5.6865949630737305, -5.266174793243408, -0.02407960779964924]",0.976207971572876
2,"['  @Test\n  public void readTest1() {\n    String testAppId = ""localReadTest1"";\n    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    createTestData(testAppId, expectedData, blockIdBitmap, taskIdBitmap);\n    blockIdBitmap.addLong((1 << Constants.TASK_ATTEMPT_ID_MAX_LENGTH));\n    ShuffleReadClientImpl readClient;\n    readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,\n        10, 1000, """", blockIdBitmap, taskIdBitmap, shuffleServerInfo, null);\n    validateResult(readClient, expectedData);\n    try {\n      // can\'t find all expected block id, data loss\n      readClient.checkProcessedBlockIds();\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Blocks read inconsistent:""));\n    } finally {\n      readClient.close();\n    }\n  }\n']",local;check;Shuffle;ENGTH;read;App;MAX;contains;Roaring;fail,9.313225746154785e-10;7.421476766467094e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.147295840084553e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.962643146514893, -5.5765862464904785, -4.648214340209961, -5.806957244873047, -5.404993057250977, -0.023716922849416733]",0.9765620827674866
2,"['  @Test\n  public void readTest2() {\n    String testAppId = ""localReadTest2"";\n    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    List<ShuffleBlockInfo> blocks = createShuffleBlockList(\n        0, 0, 0, 2, 30, blockIdBitmap, expectedData, mockSSI);\n    sendTestData(testAppId, blocks);\n    blocks = createShuffleBlockList(\n        0, 0, 0, 2, 30, blockIdBitmap, expectedData, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),\n        testAppId, 0, 0, 100, 1, 10, 1000,\n        """", blockIdBitmap, taskIdBitmap, shuffleServerInfo, null);\n\n    validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",Range;App;register;Roaring;Bitmap;Long;Read;App;expected;Hash,7.8580342233181e-10;6.693881005048752e-10;4.802132025361061e-10;4.147295840084553e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.930895805358887, -5.532670021057129, -4.661111831665039, -5.795515060424805, -5.401030540466309, -0.0239039845764637]",0.9763794541358948
2,"['  @Test\n  public void readTest3() throws Exception {\n    String testAppId = ""localReadTest3"";\n    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    List<ShuffleBlockInfo> blocks = createShuffleBlockList(\n        0, 0, 0, 2, 30, blockIdBitmap, expectedData, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),\n        testAppId, 0, 0, 100, 1, 10, 1000,\n        """", blockIdBitmap, taskIdBitmap, shuffleServerInfo, null);\n    FileUtils.deleteDirectory(new File(DATA_DIR1.getAbsolutePath() + ""/"" + testAppId + ""/0/0-0""));\n    FileUtils.deleteDirectory(new File(DATA_DIR2.getAbsolutePath() + ""/"" + testAppId + ""/0/0-0""));\n    // sleep to wait delete operation\n    Thread.sleep(2000);\n\n    try {\n      readClient.readShuffleBlockData();\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Failed to read shuffle index""));\n    }\n    readClient.close();\n  }\n']",sleep;Exception;to;Map;shuffle;Roaring;register;expected;Directory;Range,9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.907217502593994, -5.521398067474365, -4.67734956741333, -5.753849983215332, -5.367768287658691, -0.024148032069206238]",0.9761413335800171
2,"['  @Test\n  public void readTest4() {\n    String testAppId = ""localReadTest4"";\n    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 1)));\n\n    Map<Long, byte[]> expectedData1 = Maps.newHashMap();\n    Map<Long, byte[]> expectedData2 = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    List<ShuffleBlockInfo> blocks = createShuffleBlockList(\n        0, 0, 0, 10, 30, blockIdBitmap1, expectedData1, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();\n    blocks = createShuffleBlockList(\n        0, 1, 0, 10, 30, blockIdBitmap2, expectedData2, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    blocks = createShuffleBlockList(\n        0, 0, 0, 10, 30, blockIdBitmap1, expectedData1, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    ShuffleReadClientImpl readClient1 = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),\n        testAppId, 0, 0, 100, 2, 10, 100,\n        """", blockIdBitmap1, taskIdBitmap, shuffleServerInfo, null);\n    ShuffleReadClientImpl readClient2 = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),\n        testAppId, 0, 1, 100, 2, 10, 100,\n        """", blockIdBitmap2, taskIdBitmap, shuffleServerInfo, null);\n    validateResult(readClient1, expectedData1);\n    readClient1.checkProcessedBlockIds();\n    readClient1.close();\n\n    validateResult(readClient2, expectedData2);\n    readClient2.checkProcessedBlockIds();\n    readClient2.close();\n  }\n']",local;shuffle;Read;Long;Shuffle;LOCALFILE;Block;Data;Roaring;task,4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.879778861999512, -5.476677894592285, -4.680455207824707, -5.752382755279541, -5.394667148590088, -0.024261366575956345]",0.976030707359314
2,"['  @Test\n  public void readTest5() {\n    String testAppId = ""localReadTest5"";\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),\n        testAppId, 0, 1, 100, 2, 10, 1000,\n        """", Roaring64NavigableMap.bitmapOf(), Roaring64NavigableMap.bitmapOf(),\n        shuffleServerInfo, null);\n    assertNull(readClient.readShuffleBlockData());\n    readClient.checkProcessedBlockIds();\n  }\n']",Shuffle;bitmap;name;Null;Block;Block;Read;Read;Info;read,6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.473825588822365e-10;2.473825588822365e-10;2.473825588822365e-10;2.4010660126805305e-10,5,5,"[-5.992942810058594, -5.6014604568481445, -4.6102824211120605, -5.8623175621032715, -5.404850482940674, -0.02375708520412445]",0.9765228629112244
2,"['  @Test\n  public void readTest6() {\n    String testAppId = ""localReadTest6"";\n    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n    List<ShuffleBlockInfo> blocks = createShuffleBlockList(\n        0, 0, 0, 5, 30, blockIdBitmap, expectedData, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    Roaring64NavigableMap wrongBlockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    LongIterator iter = blockIdBitmap.getLongIterator();\n    while (iter.hasNext()) {\n      wrongBlockIdBitmap.addLong(iter.next() + (1 << Constants.TASK_ATTEMPT_ID_MAX_LENGTH));\n    }\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),\n        testAppId, 0, 0, 100, 1, 10, 100,\n        """", wrongBlockIdBitmap, taskIdBitmap, shuffleServerInfo, null);\n    assertNull(readClient.readShuffleBlockData());\n    try {\n      readClient.checkProcessedBlockIds();\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Blocks read inconsistent:""));\n    }\n  }\n']",ATTEMPT;List;Range;bitmap;True;App;inconsistent;Shuffle;fail;List,5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.9309892654418945, -5.510158538818359, -4.658263206481934, -5.787056922912598, -5.421792030334473, -0.023955196142196655]",0.9763295650482178
2,"['  @Test\n  public void readTest7() {\n    String testAppId = ""localReadTest7"";\n    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0, 1);\n\n    List<ShuffleBlockInfo> blocks = createShuffleBlockList(\n        0, 0, 0, 5, 30, blockIdBitmap, expectedData, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    blocks = createShuffleBlockList(\n        0, 0, 1, 5, 30, blockIdBitmap, expectedData, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    blocks = createShuffleBlockList(\n        0, 0, 2, 5, 30, blockIdBitmap, Maps.newHashMap(), mockSSI);\n    sendTestData(testAppId, blocks);\n\n    // unexpected taskAttemptId should be filtered\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,\n        10, 1000, """", blockIdBitmap, taskIdBitmap, shuffleServerInfo, null);\n\n    validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",Shuffle;local;mock;close;expected;Attempt;App;Block;SS;Navigable,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10,5,5,"[-5.895407199859619, -5.506457805633545, -4.678485870361328, -5.754444599151611, -5.386824607849121, -0.0241397712379694]",0.9761492609977722
2,"['  @Test\n  public void readTest8() {\n    String testAppId = ""localReadTest8"";\n    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0, 3);\n    List<ShuffleBlockInfo> blocks = createShuffleBlockList(\n        0, 0, 0, 5, 30, blockIdBitmap, expectedData, mockSSI);\n    sendTestData(testAppId, blocks);\n\n    // test case: data generated by speculation task without report result\n    blocks = createShuffleBlockList(\n        0, 0, 1, 5, 30, Roaring64NavigableMap.bitmapOf(), Maps.newHashMap(), mockSSI);\n    sendTestData(testAppId, blocks);\n    // test case: data generated by speculation task with report result\n    blocks = createShuffleBlockList(\n        0, 0, 2, 5, 30, blockIdBitmap, Maps.newHashMap(), mockSSI);\n    sendTestData(testAppId, blocks);\n\n    blocks = createShuffleBlockList(\n        0, 0, 3, 5, 30, Roaring64NavigableMap.bitmapOf(), Maps.newHashMap(), mockSSI);\n    sendTestData(testAppId, blocks);\n\n    // unexpected taskAttemptId should be filtered\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,\n        10, 1000, """", blockIdBitmap, taskIdBitmap, shuffleServerInfo, null);\n\n    validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",Read;List;shuffle;Map;blocks;App;Shuffle;App;validate;new,5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.8967742919921875, -5.499198913574219, -4.666428089141846, -5.757111549377441, -5.3962483406066895, -0.0242290198802948]",0.9760620594024658
2,"['  @Test\n  public void readTest9() throws Exception {\n    String testAppId = ""localReadTest9"";\n    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n\n    List<ShuffleBlockInfo> blocks;\n    ShuffleReadClientImpl readClient;\n\n    createTestData(testAppId, expectedData, blockIdBitmap, taskIdBitmap);\n    Roaring64NavigableMap beforeAdded = RssUtils.deserializeBitMap(RssUtils.serializeBitMap(blockIdBitmap));\n    // write data by another task, read data again, the cache for index file should be updated\n    blocks = createShuffleBlockList(\n        0, 0, 1, 3, 25, blockIdBitmap, Maps.newHashMap(), mockSSI);\n    sendTestData(testAppId, blocks);\n    // test with un-changed expected blockId\n    readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,\n        10, 1000, """", beforeAdded, taskIdBitmap,\n        shuffleServerInfo, null);\n    validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n\n    // test with changed expected blockId\n    readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,\n        10, 1000, """", blockIdBitmap, taskIdBitmap,\n        shuffleServerInfo, null);\n    validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n  }\n']",read;Shuffle;Range;Partition;Shuffle;bitmap;Storage;Info;Shuffle;Read,8.003553375601768e-10;7.275957614183426e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10,5,5,"[-5.893721103668213, -5.5301313400268555, -4.68319845199585, -5.732837200164795, -5.369790077209473, -0.024153850972652435]",0.9761354923248291
2,['  @Test\n  public void combineByKeyTest() throws Exception {\n    run();\n  }\n'],Key;run;By;combine;Exception,-4.656612873077393e-10;-6.984919309616089e-10;-1.3969838619232178e-09;-1.6298145055770874e-09;-3.4924596548080444e-09,5,5,"[-6.0415496826171875, -5.662435054779053, -4.50068998336792, -5.899342060089111, -5.3282952308654785, -0.024853188544511795]",0.9754531383514404
2,['  @Test\n  public void resultCompareTest() throws Exception {\n    run();\n    checkShuffleData();\n  }\n'],Shuffle;Compare;run;result;check;Data;Exception,7.101334631443024e-09;4.190951585769653e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;-1.1641532182693481e-09;-1.6298145055770874e-09,5,5,"[-6.020509243011475, -5.643263339996338, -4.5280375480651855, -5.884191989898682, -5.33962345123291, -0.02465374395251274]",0.9756476879119873
2,['  @Test\n  public void resultCompareTest() throws Exception {\n    run();\n  }\n'],Compare;run;Exception;result,3.958120942115784e-09;4.656612873077393e-10;-1.1641532182693481e-09;-1.862645149230957e-09,5,5,"[-6.026246070861816, -5.661655902862549, -4.508116722106934, -5.887988090515137, -5.303491115570068, -0.024966325610876083]",0.9753427505493164
2,"['  @Test\n  public void testMemoryRelease() throws Exception {\n    String fileName = generateTextFile(10000, 10000);\n    SparkConf sparkConf = createSparkConf();\n    updateSparkConfWithRss(sparkConf);\n    sparkConf.set(""spark.executor.memory"", ""500m"");\n    updateRssStorage(sparkConf);\n\n    // oom if there has no memory release\n    runSparkApp(sparkConf, fileName);\n  }\n']",executor;om;release;App;ss;there;spark;Spark;spark;update,1.4551915228366852e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.982579708099365, -5.672137260437012, -4.6231465339660645, -5.813093185424805, -5.318151950836182, -0.023959387093782425]",0.9763253331184387
2,['  @Test\n  public void groupByTest() throws Exception {\n    run();\n  }\n'],Exception;group;By;run,1.1641532182693481e-09;-2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-6.034451961517334, -5.641716480255127, -4.500741004943848, -5.891643524169922, -5.326046466827393, -0.024977371096611023]",0.9753319621086121
2,['  @Test\n  public void resultCompareTest() throws Exception {\n    run();\n    checkShuffleData();\n  }\n'],Shuffle;Compare;run;result;check;Data;Exception,7.101334631443024e-09;4.190951585769653e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;-1.1641532182693481e-09;-1.6298145055770874e-09,5,5,"[-6.020509243011475, -5.643263339996338, -4.5280375480651855, -5.884191989898682, -5.33962345123291, -0.02465374395251274]",0.9756476879119873
2,"['  @Test\n  public void rpcFailTest() throws Exception {\n    String testAppId = ""rpcFailTest"";\n    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo1,\n        testAppId, 0, Lists.newArrayList(new PartitionRange(0, 0)));\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n\n    // simulator a failed server\n    ShuffleServerInfo fakeShuffleServerInfo =\n        new ShuffleServerInfo(""127.0.0.1-20001"", shuffleServers.get(0).getIp(), SHUFFLE_SERVER_PORT + 100);\n    List<ShuffleBlockInfo> blocks = createShuffleBlockList(\n        0, 0, 0, 3, 25, blockIdBitmap,\n        expectedData, Lists.newArrayList(shuffleServerInfo1, fakeShuffleServerInfo));\n    SendShuffleDataResult result = shuffleWriteClientImpl.sendShuffleData(testAppId, blocks);\n    Roaring64NavigableMap failedBlockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap succBlockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    for (Long blockId : result.getFailedBlockIds()) {\n      failedBlockIdBitmap.addLong(blockId);\n    }\n    for (Long blockId : result.getSuccessBlockIds()) {\n      succBlockIdBitmap.addLong(blockId);\n    }\n    assertEquals(blockIdBitmap, failedBlockIdBitmap);\n    assertEquals(blockIdBitmap, succBlockIdBitmap);\n\n    boolean commitResult = shuffleWriteClientImpl.sendCommit(Sets.newHashSet(\n        shuffleServerInfo1, fakeShuffleServerInfo), testAppId, 0, 2);\n    assertFalse(commitResult);\n\n    Map<Integer, List<Long>> ptb = Maps.newHashMap();\n    ptb.put(1, Lists.newArrayList(1L));\n    try {\n      Map<Integer, List<ShuffleServerInfo>> partitionToServers = Maps.newHashMap();\n      partitionToServers.put(1, Lists.newArrayList(\n          shuffleServerInfo1, fakeShuffleServerInfo));\n      shuffleWriteClientImpl.reportShuffleResult(partitionToServers, testAppId, 0, 0, ptb, 2);\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Report shuffle result is failed for""));\n    }\n  }\n']",SERVER;Fail;simulator;App;Write;Impl;pc;Server;Fail;Data,1.6298145055770874e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.937186241149902, -5.537687301635742, -4.66873836517334, -5.782586574554443, -5.408989429473877, -0.023796897381544113]",0.9764838814735413
2,"['  @Test\n  public void reportMultipleServerTest() throws Exception {\n    String testAppId = ""reportMultipleServerTest"";\n\n    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo1,\n        testAppId, 1, Lists.newArrayList(new PartitionRange(1, 1)));\n\n    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo2,\n        testAppId, 1, Lists.newArrayList(new PartitionRange(2, 2)));\n\n    Map<Integer, List<ShuffleServerInfo>> partitionToServers = Maps.newHashMap();\n    partitionToServers.putIfAbsent(1, Lists.newArrayList(shuffleServerInfo1));\n    partitionToServers.putIfAbsent(2, Lists.newArrayList(shuffleServerInfo2));\n    Map<Integer, List<Long>> partitionToBlocks = Maps.newHashMap();\n    List<Long> blockIds = Lists.newArrayList();\n    for (int i = 0; i < 5; i++ ) {\n      blockIds.add(ClientUtils.getBlockId(1, 0, i));\n    }\n    partitionToBlocks.put(1, blockIds);\n    blockIds = Lists.newArrayList();\n    for (int i = 0; i < 7; i++ ) {\n      blockIds.add(ClientUtils.getBlockId(2, 0, i));\n    }\n    partitionToBlocks.put(2, blockIds);\n    shuffleWriteClientImpl\n        .reportShuffleResult(partitionToServers, testAppId, 1, 0, partitionToBlocks, 1);\n\n    Roaring64NavigableMap bitmap = shuffleWriteClientImpl\n        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo1), testAppId,\n        1, 0);\n    assertTrue(bitmap.isEmpty());\n\n    bitmap = shuffleWriteClientImpl\n        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo1), testAppId,\n        1, 1);\n    assertEquals(5, bitmap.getLongCardinality());\n    for (int i = 0; i < 5; i++) {\n      assertTrue(bitmap.contains(partitionToBlocks.get(1).get(i)));\n    }\n\n    bitmap = shuffleWriteClientImpl\n        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo1), testAppId,\n        1, 2);\n    assertTrue(bitmap.isEmpty());\n\n    bitmap = shuffleWriteClientImpl\n        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo2), testAppId,\n        1, 0);\n    assertTrue(bitmap.isEmpty());\n\n    bitmap = shuffleWriteClientImpl\n        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo2), testAppId,\n        1, 1);\n    assertTrue(bitmap.isEmpty());\n\n    bitmap = shuffleWriteClientImpl\n        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo2), testAppId,\n        1, 2);\n    assertEquals(7, bitmap.getLongCardinality());\n    for (int i = 0; i < 7; i++) {\n      assertTrue(bitmap.contains(partitionToBlocks.get(2).get(i)));\n    }\n  }\n']",Sets;Absent;Absent;report;Server;shuffle;Info;Info;Impl;shuffle,1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.881236553192139, -5.541202545166016, -4.704080581665039, -5.683370113372803, -5.324438095092773, -0.024338386952877045]",0.9759554862976074
2,"['  @Test\n  public void writeReadTest() throws Exception {\n    String testAppId = ""writeReadTest"";\n    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo1,\n        testAppId, 0, Lists.newArrayList(new PartitionRange(0, 0)));\n    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo2,\n        testAppId, 0, Lists.newArrayList(new PartitionRange(0, 0)));\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);\n\n    List<ShuffleBlockInfo> blocks = createShuffleBlockList(\n        0, 0, 0, 3, 25, blockIdBitmap,\n        expectedData, Lists.newArrayList(shuffleServerInfo1, shuffleServerInfo2));\n    shuffleWriteClientImpl.sendShuffleData(testAppId, blocks);\n    // send 1st commit, finish commit won\'t be sent to Shuffle server and data won\'t be persisted to disk\n    boolean commitResult = shuffleWriteClientImpl\n        .sendCommit(Sets.newHashSet(shuffleServerInfo1, shuffleServerInfo2), testAppId, 0, 2);\n    assertTrue(commitResult);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,\n        10, 1000, """", blockIdBitmap, taskIdBitmap,\n        Lists.newArrayList(shuffleServerInfo1, shuffleServerInfo2), null);\n\n    try {\n      readClient.readShuffleBlockData();\n      fail(EXPECTED_EXCEPTION_MESSAGE);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Failed to read shuffle index for""));\n    }\n    readClient.close();\n\n    // send 2nd commit, data will be persisted to disk\n    commitResult = shuffleWriteClientImpl\n        .sendCommit(Sets.newHashSet(shuffleServerInfo1, shuffleServerInfo2), testAppId, 0, 2);\n    assertTrue(commitResult);\n    readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,\n        10, 1000, """", blockIdBitmap, taskIdBitmap,\n        Lists.newArrayList(shuffleServerInfo1, shuffleServerInfo2), null);\n    validateResult(readClient, expectedData);\n    readClient.checkProcessedBlockIds();\n    readClient.close();\n\n    // commit will be failed because of fakeIp\n    commitResult = shuffleWriteClientImpl.sendCommit(Sets.newHashSet(new ShuffleServerInfo(\n        ""127.0.0.1-20001"", ""fakeIp"", SHUFFLE_SERVER_PORT)), testAppId, 0, 2);\n    assertFalse(commitResult);\n\n    // wait resource to be deleted\n    Thread.sleep(6000);\n\n    // commit is ok, but finish shuffle rpc will failed because resource was deleted\n    commitResult = shuffleWriteClientImpl\n        .sendCommit(Sets.newHashSet(shuffleServerInfo1, shuffleServerInfo2), testAppId, 0, 2);\n    assertFalse(commitResult);\n  }\n']",LOCALFILE;Write;won't;bitmap;Shuffle;Lists;and;Map;disk;data,7.566995918750763e-10;5.675246939063072e-10;5.238689482212067e-10;4.656612873077393e-10;3.710738383233547e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6193447411060333e-10,5,5,"[-5.882321834564209, -5.505090236663818, -4.687950134277344, -5.732302188873291, -5.370885372161865, -0.024241004139184952]",0.9760505557060242
2,"['  @Test\n  public void emptyTaskTest() {\n    String testAppId = ""emptyTaskTest"";\n    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo1,\n        testAppId, 0, Lists.newArrayList(new PartitionRange(0, 0)));\n    boolean commitResult = shuffleWriteClientImpl\n        .sendCommit(Sets.newHashSet(shuffleServerInfo1), testAppId, 0, 2);\n    assertTrue(commitResult);\n    commitResult = shuffleWriteClientImpl\n        .sendCommit(Sets.newHashSet(shuffleServerInfo2), testAppId, 0, 2);\n    assertFalse(commitResult);\n  }\n']",Lists;Impl;Task;shuffle;shuffle;shuffle;App;Client;ets;Write,1.367880031466484e-09;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.9553375244140625, -5.683575630187988, -4.650306224822998, -5.781481742858887, -5.296984672546387, -0.02392679825425148]",0.9763571619987488
2,"['  @Test\n  public void testGetPartitionToServers() {\n    GetShuffleAssignmentsResponse testResponse = generateShuffleAssignmentsResponse();\n\n    Map<Integer, List<ShuffleServerInfo>> partitionToServers =\n        coordinatorClient.getPartitionToServers(testResponse);\n\n    assertEquals(Arrays.asList(new ShuffleServerInfo(""id1"", ""0.0.0.1"", 100),\n        new ShuffleServerInfo(""id2"", ""0.0.0.2"", 100)),\n        partitionToServers.get(0));\n    assertEquals(Arrays.asList(new ShuffleServerInfo(""id1"", ""0.0.0.1"", 100),\n        new ShuffleServerInfo(""id2"", ""0.0.0.2"", 100)),\n        partitionToServers.get(1));\n    assertEquals(Arrays.asList(new ShuffleServerInfo(""id3"", ""0.0.0.3"", 100),\n        new ShuffleServerInfo(""id4"", ""0.0.0.4"", 100)),\n        partitionToServers.get(2));\n    assertEquals(Arrays.asList(new ShuffleServerInfo(""id3"", ""0.0.0.3"", 100),\n        new ShuffleServerInfo(""id4"", ""0.0.0.4"", 100)),\n        partitionToServers.get(3));\n    assertNull(partitionToServers.get(4));\n  }\n']",Map;Servers;List;Servers;as;Shuffle;Partition;Shuffle;Arrays;Arrays,9.89530235528946e-10;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.41970007866621e-10,5,5,"[-5.821694850921631, -5.516203880310059, -4.716638565063477, -5.631871700286865, -5.285127639770508, -0.024884119629859924]",0.9754229187965393
2,"['  @Test\n  public void getShuffleRegisterInfoTest() {\n    GetShuffleAssignmentsResponse testResponse = generateShuffleAssignmentsResponse();\n    Map<ShuffleServerInfo, List<PartitionRange>> serverToPartitionRanges =\n        coordinatorClient.getServerToPartitionRanges(testResponse);\n    List<ShuffleRegisterInfo> expected = Arrays.asList(\n        new ShuffleRegisterInfo(new ShuffleServerInfo(""id1"", ""0.0.0.1"", 100),\n            Lists.newArrayList(new PartitionRange(0, 1))),\n        new ShuffleRegisterInfo(new ShuffleServerInfo(""id2"", ""0.0.0.2"", 100),\n            Lists.newArrayList(new PartitionRange(0, 1))),\n        new ShuffleRegisterInfo(new ShuffleServerInfo(""id3"", ""0.0.0.3"", 100),\n            Lists.newArrayList(new PartitionRange(2, 3))),\n        new ShuffleRegisterInfo(new ShuffleServerInfo(""id4"", ""0.0.0.4"", 100),\n            Lists.newArrayList(new PartitionRange(2, 3))));\n    assertEquals(4, serverToPartitionRanges.size());\n    for (ShuffleRegisterInfo sri : expected) {\n      List<PartitionRange> partitionRanges = serverToPartitionRanges.get(sri.getShuffleServerInfo());\n      assertEquals(sri.getPartitionRanges(), partitionRanges);\n    }\n  }\n']",get;anges;server;Partition;Register;size;id;Server;coordinator;Partition,8.731149137020111e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.845324993133545, -5.4757795333862305, -4.700661659240723, -5.671414375305176, -5.343008995056152, -0.02469654381275177]",0.9756059050559998
2,"['  @Test\n  public void getShuffleAssignmentsTest() throws Exception {\n    String appId = ""getShuffleAssignmentsTest"";\n    CoordinatorTestUtils.waitForRegister(coordinatorClient,2);\n    RssGetShuffleAssignmentsRequest request = new RssGetShuffleAssignmentsRequest(\n        appId, 1, 10, 4, 1,\n        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));\n    RssGetShuffleAssignmentsResponse response = coordinatorClient.getShuffleAssignments(request);\n    Set<Integer> expectedStart = Sets.newHashSet(0, 4, 8);\n\n    Map<ShuffleServerInfo, List<PartitionRange>> serverToPartitionRanges = response.getServerToPartitionRanges();\n    assertEquals(2, serverToPartitionRanges.size());\n    List<PartitionRange> partitionRanges = Lists.newArrayList();\n    for (List<PartitionRange> ranges : serverToPartitionRanges.values()) {\n      partitionRanges.addAll(ranges);\n    }\n    for (PartitionRange pr : partitionRanges) {\n      switch (pr.getStart()) {\n        case 0:\n          assertEquals(3, pr.getEnd());\n          expectedStart.remove(0);\n          break;\n        case 4:\n          assertEquals(7, pr.getEnd());\n          expectedStart.remove(4);\n          break;\n        case 8:\n          assertEquals(11, pr.getEnd());\n          expectedStart.remove(8);\n          break;\n        default:\n          fail(""Shouldn\'t be here"");\n      }\n    }\n    assertTrue(expectedStart.isEmpty());\n\n    request = new RssGetShuffleAssignmentsRequest(\n        appId, 1, 10, 4, 2,\n        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));\n    response = coordinatorClient.getShuffleAssignments(request);\n    serverToPartitionRanges = response.getServerToPartitionRanges();\n    assertEquals(2, serverToPartitionRanges.size());\n    partitionRanges = Lists.newArrayList();\n    for (List<PartitionRange> ranges : serverToPartitionRanges.values()) {\n      partitionRanges.addAll(ranges);\n    }\n    assertEquals(6, partitionRanges.size());\n    int range0To3 = 0;\n    int range4To7 = 0;\n    int range8To11 = 0;\n    for (PartitionRange pr : partitionRanges) {\n      switch (pr.getStart()) {\n        case 0:\n          assertEquals(3, pr.getEnd());\n          range0To3++;\n          break;\n        case 4:\n          assertEquals(7, pr.getEnd());\n          range4To7++;\n          break;\n        case 8:\n          assertEquals(11, pr.getEnd());\n          range8To11++;\n          break;\n        default:\n          fail(""Shouldn\'t be here"");\n      }\n    }\n    assertEquals(2, range0To3);\n    assertEquals(2, range4To7);\n    assertEquals(2, range8To11);\n\n    request = new RssGetShuffleAssignmentsRequest(\n        appId, 3, 2, 1, 1,\n        Sets.newHashSet(""fake_version""));\n    try {\n      coordinatorClient.getShuffleAssignments(request);\n      fail(""Exception should be thrown"");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Empty assignment""));\n    }\n  }\n']",Register;Equals;response;Coordinator;Shuffle;Assignments;expected;Start;request;switch,9.89530235528946e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.917531490325928, -5.540271759033203, -4.670166969299316, -5.727232456207275, -5.3780341148376465, -0.024150243028998375]",0.9761390686035156
2,"['  @Test\n  public void appHeartbeatTest() throws Exception {\n    RssAppHeartBeatResponse response =\n        coordinatorClient.sendAppHeartBeat(new RssAppHeartBeatRequest(""appHeartbeatTest1"", 1000));\n    assertEquals(ResponseStatusCode.SUCCESS, response.getStatusCode());\n    assertEquals(Sets.newHashSet(""appHeartbeatTest1""),\n        coordinators.get(0).getApplicationManager().getAppIds());\n    coordinatorClient.sendAppHeartBeat(new RssAppHeartBeatRequest(""appHeartbeatTest2"", 1000));\n    assertEquals(Sets.newHashSet(""appHeartbeatTest1"", ""appHeartbeatTest2""),\n        coordinators.get(0).getApplicationManager().getAppIds());\n    int retry = 0;\n    while (retry < 5) {\n      coordinatorClient.sendAppHeartBeat(new RssAppHeartBeatRequest(""appHeartbeatTest1"", 1000));\n      retry++;\n      Thread.sleep(1000);\n    }\n    // appHeartbeatTest2 was removed because of expired\n    assertEquals(Sets.newHashSet(""appHeartbeatTest1""),\n        coordinators.get(0).getApplicationManager().getAppIds());\n  }\n']",sleep;Heartbeat;Code;retry;Heartbeat;Response;get;Beat;coordinators;Application,7.450580596923828e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;4.729372449219227e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.764863893389702e-10,5,5,"[-5.894296169281006, -5.606623649597168, -4.690974712371826, -5.728084087371826, -5.250818252563477, -0.024398069828748703]",0.9758971333503723
2,"['  @Test\n  public void shuffleServerHeartbeatTest() throws Exception {\n    CoordinatorTestUtils.waitForRegister(coordinatorClient, 2);\n    shuffleServers.get(0).stopServer();\n    Thread.sleep(5000);\n    SimpleClusterManager scm = (SimpleClusterManager) coordinators.get(0).getClusterManager();\n    List<ServerNode> nodes = scm.getServerList(Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));\n    assertEquals(1, nodes.size());\n    ServerNode node = nodes.get(0);\n    assertTrue(node.getTags().contains(Constants.SHUFFLE_SERVER_VERSION));\n    assertTrue(scm.getTagToNodes().get(Constants.SHUFFLE_SERVER_VERSION).contains(node));\n    ShuffleServerConf shuffleServerConf = shuffleServers.get(0).getShuffleServerConf();\n    shuffleServerConf.setInteger(""rss.rpc.server.port"", SHUFFLE_SERVER_PORT + 2);\n    shuffleServerConf.setInteger(""rss.jetty.http.port"", 18082);\n    ShuffleServer ss = new ShuffleServer(shuffleServerConf);\n    ss.start();\n    shuffleServers.set(0, ss);\n    Thread.sleep(3000);\n    assertEquals(2, coordinators.get(0).getClusterManager().getNodesNum());\n  }\n']",Heartbeat;Tag;Thread;Server;SHUFFLE;sleep;Num;Cluster;Tags;SERVER,8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.914086818695068, -5.612216472625732, -4.688830852508545, -5.721257209777832, -5.277426242828369, -0.02422366663813591]",0.9760673642158508
2,"['  @Test\n  public void rpcMetricsTest() throws Exception{\n    String appId = ""rpcMetricsTest"";\n    double oldValue = coordinators.get(0).getGrpcMetrics().getCounterMap()\n        .get(CoordinatorGrpcMetrics.HEARTBEAT_METHOD).get();\n    CoordinatorTestUtils.waitForRegister(coordinatorClient,2);\n    double newValue = coordinators.get(0).getGrpcMetrics().getCounterMap()\n        .get(CoordinatorGrpcMetrics.HEARTBEAT_METHOD).get();\n    assertTrue(newValue - oldValue > 1);\n    assertEquals(0,\n        coordinators.get(0).getGrpcMetrics().getGaugeMap()\n            .get(CoordinatorGrpcMetrics.HEARTBEAT_METHOD).get(), 0.5);\n\n    RssGetShuffleAssignmentsRequest request = new RssGetShuffleAssignmentsRequest(\n        appId, 1, 10, 4, 1,\n        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));\n    oldValue = coordinators.get(0).getGrpcMetrics().getCounterMap()\n        .get(CoordinatorGrpcMetrics.GET_SHUFFLE_ASSIGNMENTS_METHOD).get();\n    coordinatorClient.getShuffleAssignments(request);\n    newValue = coordinators.get(0).getGrpcMetrics().getCounterMap()\n        .get(CoordinatorGrpcMetrics.GET_SHUFFLE_ASSIGNMENTS_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        coordinators.get(0).getGrpcMetrics().getGaugeMap()\n            .get(CoordinatorGrpcMetrics.GET_SHUFFLE_ASSIGNMENTS_METHOD).get(), 0.5);\n  }\n']",Map;get;Sets;Equals;Exception;Metrics;app;pc;coordinators;get,6.984919309616089e-10;5.384208634495735e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.310560714453459e-10;3.2014213502407074e-10,5,5,"[-5.874904155731201, -5.481958389282227, -4.677801132202148, -5.724674701690674, -5.391074180603027, -0.0243860874325037]",0.9759088754653931
2,"['  @Test\n  public void getShuffleAssignmentsTest() throws Exception {\n    CoordinatorTestUtils.waitForRegister(coordinatorClient, 3);\n    RssGetShuffleAssignmentsRequest request = new RssGetShuffleAssignmentsRequest(\n        ""app1"",\n        1,\n        1,\n        1,\n        1,\n        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));\n    RssGetShuffleAssignmentsResponse response = coordinatorClient.getShuffleAssignments(request);\n    assertEquals(1, response.getPartitionToServers().size());\n    for (Map.Entry<Integer, List<ShuffleServerInfo>> entry : response.getPartitionToServers().entrySet()) {\n      assertEquals(1, entry.getValue().size());\n      assertEquals(SHUFFLE_SERVER_PORT + 1, entry.getValue().get(0).getPort());\n    }\n    request = new RssGetShuffleAssignmentsRequest(\n        ""app1"",\n        2,\n        1,\n        1,\n        1,\n        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));\n    response = coordinatorClient.getShuffleAssignments(request);\n    assertEquals(1, response.getPartitionToServers().size());\n    for (Map.Entry<Integer, List<ShuffleServerInfo>> entry : response.getPartitionToServers().entrySet()) {\n      assertEquals(1, entry.getValue().size());\n      assertEquals(SHUFFLE_SERVER_PORT + 1, entry.getValue().get(0).getPort());\n    }\n    request = new RssGetShuffleAssignmentsRequest(\n        ""app1"",\n        2,\n        1,\n        1,\n        1,\n        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));\n    response = coordinatorClient.getShuffleAssignments(request);\n    assertEquals(1, response.getPartitionToServers().size());\n    for (Map.Entry<Integer, List<ShuffleServerInfo>> entry : response.getPartitionToServers().entrySet()) {\n      assertEquals(1, entry.getValue().size());\n      assertEquals(SHUFFLE_SERVER_PORT, entry.getValue().get(0).getPort());\n    }\n  }\n']",For;Port;Shuffle;SERVER;Coordinator;coordinator;Hash;Assignments;response;Get,6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;2.764863893389702e-10,5,5,"[-5.894841194152832, -5.530740261077881, -4.689688205718994, -5.725544452667236, -5.351917743682861, -0.024197254329919815]",0.9760931730270386
2,"['  @Test\n  public void hdfsWriteReadTest() {\n    String appId = ""app_hdfs_read_write"";\n    String dataBasePath = HDFS_URI + ""rss/test"";\n    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(appId, 0,\n        Lists.newArrayList(new PartitionRange(0, 1)));\n    shuffleServerClient.registerShuffle(rrsr);\n    rrsr = new RssRegisterShuffleRequest(appId, 0, Lists.newArrayList(new PartitionRange(2, 3)));\n    shuffleServerClient.registerShuffle(rrsr);\n\n    Roaring64NavigableMap[] bitmaps = new Roaring64NavigableMap[4];\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Map<Integer, List<ShuffleBlockInfo>>  dataBlocks = createTestData(bitmaps, expectedData);\n    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = Maps.newHashMap();\n    partitionToBlocks.put(0, dataBlocks.get(0));\n    partitionToBlocks.put(1, dataBlocks.get(1));\n\n    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();\n    shuffleToBlocks.put(0, partitionToBlocks);\n\n    RssSendShuffleDataRequest rssdr = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);\n    shuffleServerClient.sendShuffleData(rssdr);\n    assertEquals(456, shuffleServers.get(0).getShuffleBufferManager().getUsedMemory());\n    assertEquals(0, shuffleServers.get(0).getShuffleBufferManager().getPreAllocatedSize());\n    RssSendCommitRequest rscr = new RssSendCommitRequest(appId, 0);\n    shuffleServerClient.sendCommit(rscr);\n    RssFinishShuffleRequest rfsr = new RssFinishShuffleRequest(appId, 0);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        appId, 0, 0, 100, 2, 10, 1000,\n        dataBasePath, bitmaps[0], Roaring64NavigableMap.bitmapOf(0), Lists.newArrayList(), new Configuration());\n    assertNull(readClient.readShuffleBlockData());\n    shuffleServerClient.finishShuffle(rfsr);\n\n    partitionToBlocks.clear();\n    partitionToBlocks.put(2, dataBlocks.get(2));\n    shuffleToBlocks.clear();\n    shuffleToBlocks.put(0, partitionToBlocks);\n    rssdr = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);\n    shuffleServerClient.sendShuffleData(rssdr);\n    assertEquals(0, shuffleServers.get(0).getShuffleBufferManager().getPreAllocatedSize());\n    rscr = new RssSendCommitRequest(appId, 0);\n    shuffleServerClient.sendCommit(rscr);\n    rfsr = new RssFinishShuffleRequest(appId, 0);\n    shuffleServerClient.finishShuffle(rfsr);\n\n    partitionToBlocks.clear();\n    partitionToBlocks.put(3, dataBlocks.get(3));\n    shuffleToBlocks.clear();\n    shuffleToBlocks.put(0, partitionToBlocks);\n    rssdr = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);\n    shuffleServerClient.sendShuffleData(rssdr);\n    rscr = new RssSendCommitRequest(appId, 0);\n    shuffleServerClient.sendCommit(rscr);\n    rfsr = new RssFinishShuffleRequest(appId, 0);\n    shuffleServerClient.finishShuffle(rfsr);\n\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        appId, 0, 0, 100, 2, 10, 1000,\n        dataBasePath, bitmaps[0], Roaring64NavigableMap.bitmapOf(0), Lists.newArrayList(), new Configuration());\n    validateResult(readClient, expectedData, bitmaps[0]);\n\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        appId, 0, 1, 100, 2, 10, 1000,\n        dataBasePath, bitmaps[1], Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(), new Configuration());\n    validateResult(readClient, expectedData, bitmaps[1]);\n\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        appId, 0, 2, 100, 2, 10, 1000,\n        dataBasePath, bitmaps[2], Roaring64NavigableMap.bitmapOf(2), Lists.newArrayList(), new Configuration());\n    validateResult(readClient, expectedData, bitmaps[2]);\n\n    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),\n        appId, 0, 3, 100, 2, 10, 1000,\n        dataBasePath, bitmaps[3], Roaring64NavigableMap.bitmapOf(3), Lists.newArrayList(), new Configuration());\n    validateResult(readClient, expectedData, bitmaps[3]);\n  }\n']",rss;Base;Buffer;Commit;Shuffle;Servers;Request;Buffer;Request;shuffle,5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.896092891693115, -5.53019905090332, -4.694159030914307, -5.713907241821289, -5.371820449829102, -0.024097295477986336]",0.9761906266212463
2,"['  @Test\n  public void hdfsFaultTolerance() {\n    try {\n      String appId = ""app_hdfs_fault_tolerance_data"";\n      Map<Long, byte[]> expectedData = Maps.newHashMap();\n      Map<Integer, List<Integer>> map = Maps.newHashMap();\n      map.put(2, Lists.newArrayList(0, 3));\n      map.put(3, Lists.newArrayList(3));\n      registerShuffle(appId, map);\n\n      Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n      Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();\n      Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();\n\n      List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(\n          2, 0, 1,11, 10 * 1024 * 1024, blockIdBitmap1, expectedData);\n\n      List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(\n          3, 3, 2,9, 10 * 1024 * 1024, blockIdBitmap2, expectedData);\n\n      List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(\n          2, 3, 2,9, 10 * 1024 * 1024, blockIdBitmap3, expectedData);\n\n      assertEquals(0, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 0));\n      assertEquals(0, ShuffleStorageUtils.getStorageIndex(2, appId, 3, 3));\n      assertEquals(0, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 3));\n      assertEquals(1, cluster.getDataNodes().size());\n      cluster.stopDataNode(0);\n      assertEquals(0, cluster.getDataNodes().size());\n\n      sendSinglePartitionToShuffleServer(appId, 2, 0, 1, blocks1);\n      boolean isException = false;\n      try {\n        sendSinglePartitionToShuffleServer(appId, 3, 3,2, blocks2);\n      } catch (RuntimeException re) {\n        isException = true;\n        assertTrue(re.getMessage().contains(""Fail to finish""));\n      }\n      assertTrue(isException);\n\n      cluster.startDataNodes(conf, 1, true, HdfsServerConstants.StartupOption.REGULAR,\n          null, null, null, false, true);\n      assertEquals(1, cluster.getDataNodes().size());\n\n      sendSinglePartitionToShuffleServer(appId, 2, 3, 2, blocks3);\n\n      validateResult(appId, 2, 0, blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), expectedData);\n      validateResult(appId, 2, 3, blockIdBitmap3, Roaring64NavigableMap.bitmapOf(2), expectedData);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail();\n    }\n  }\n']",Shuffle;Shuffle;Bitmap;Bitmap;Shuffle;Long;Shuffle;ault;block;Lists,1.979060471057892e-09;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.835356712341309, -5.4516682624816895, -4.706146717071533, -5.668154716491699, -5.376096248626709, -0.02463199384510517]",0.9756689071655273
2,"['  @Test\n  public void diskFaultTolerance() {\n    String appId = ""app_disk_fault_tolerance_data"";\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n\n    Map<Integer, List<Integer>> map = Maps.newHashMap();\n    map.put(2, Lists.newArrayList(1, 3));\n    map.put(3, Lists.newArrayList(1));\n    registerShuffle(appId, map);\n\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap4 = Roaring64NavigableMap.bitmapOf();\n\n    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(\n        2, 1, 1,11, 10 * 1024 * 1024, blockIdBitmap1, expectedData);\n\n    List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(\n        3, 1, 2,9, 10 * 1024 * 1024, blockIdBitmap2, expectedData);\n\n    List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(\n        2, 3, 2,9, 10 * 1024 * 1024, blockIdBitmap3, expectedData);\n\n    List<ShuffleBlockInfo> blocks4 = createShuffleBlockList(\n        2, 1, 1, 11, 10 * 1024 * 1024, blockIdBitmap4, expectedData);\n\n    assertEquals(1, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 1));\n    assertEquals(1, ShuffleStorageUtils.getStorageIndex(2, appId, 3, 1));\n    assertEquals(1, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 3));\n    assertEquals(1, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 1));\n    try {\n      sendSinglePartitionToShuffleServer(appId, 2, 1, 1, blocks1);\n      sendSinglePartitionToShuffleServer(appId, 3, 1,2, blocks2);\n      sendSinglePartitionToShuffleServer(appId, 2, 3, 2, blocks3);\n      sendSinglePartitionToShuffleServer(appId, 2, 1, 1, blocks4);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail();\n    }\n    validateResult(appId, 2, 1, blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), expectedData);\n    validateResult(appId, 3, 1, blockIdBitmap2, Roaring64NavigableMap.bitmapOf(2), expectedData);\n    validateResult(appId, 2, 3, blockIdBitmap3, Roaring64NavigableMap.bitmapOf(2), expectedData);\n  }\n']",disk;olerance;register;app;Shuffle;List;Shuffle;bitmap;put;Shuffle,8.731149137020111e-10;7.566995918750763e-10;6.402842700481415e-10;5.238689482212067e-10;4.802132025361061e-10;4.511093720793724e-10;4.511093720793724e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.2014213502407074e-10,5,5,"[-5.845121383666992, -5.466657638549805, -4.705288887023926, -5.662283897399902, -5.376669883728027, -0.024563603103160858]",0.975735604763031
2,"['  @Test\n  public void localWriteReadTest() throws Exception {\n    String testAppId = ""localWriteReadTest"";\n    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(testAppId, 0,\n        Lists.newArrayList(new PartitionRange(0, 1)));\n    shuffleServerClient.registerShuffle(rrsr);\n    rrsr = new RssRegisterShuffleRequest(testAppId, 0, Lists.newArrayList(new PartitionRange(2, 3)));\n    shuffleServerClient.registerShuffle(rrsr);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n\n    Roaring64NavigableMap[] bitmaps = new Roaring64NavigableMap[4];\n    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = createTestData(bitmaps, expectedData);\n\n    Set<Long> expectedBlockIds1 = transBitmapToSet(bitmaps[0]);\n    Set<Long> expectedBlockIds2 = transBitmapToSet(bitmaps[1]);\n    Set<Long> expectedBlockIds3 = transBitmapToSet(bitmaps[2]);\n    Set<Long> expectedBlockIds4 = transBitmapToSet(bitmaps[3]);\n\n    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();\n    shuffleToBlocks.put(0, partitionToBlocks);\n\n    RssSendShuffleDataRequest rssdr = new RssSendShuffleDataRequest(\n        testAppId, 3, 1000, shuffleToBlocks);\n    shuffleServerClient.sendShuffleData(rssdr);\n    RssSendCommitRequest rscr = new RssSendCommitRequest(testAppId, 0);\n    shuffleServerClient.sendCommit(rscr);\n    RssFinishShuffleRequest rfsr = new RssFinishShuffleRequest(testAppId, 0);\n    shuffleServerClient.finishShuffle(rfsr);\n\n    ShuffleDataResult sdr  = readShuffleData(\n        shuffleServerClient, testAppId, 0, 0, 2,\n        10, 1000, 0);\n    validateResult(sdr, expectedBlockIds1, expectedData, 0);\n    sdr  = readShuffleData(\n        shuffleServerClient, testAppId, 0, 1, 2,\n        10, 1000, 0);\n    validateResult(sdr, expectedBlockIds2, expectedData, 1);\n    sdr  = readShuffleData(\n        shuffleServerClient, testAppId, 0, 2, 2,\n        10, 1000, 0);\n    validateResult(sdr, expectedBlockIds3, expectedData, 2);\n    sdr  = readShuffleData(\n        shuffleServerClient, testAppId, 0, 3, 2,\n        10, 1000, 0);\n    validateResult(sdr, expectedBlockIds4, expectedData, 3);\n\n    assertEquals(4, shuffleServers.get(0).getShuffleTaskManager()\n        .getServerReadHandlers().get(testAppId).size());\n    assertNotNull(shuffleServers.get(0).getShuffleTaskManager()\n        .getPartitionsToBlockIds().get(testAppId));\n    Thread.sleep(8000);\n    assertNull(shuffleServers.get(0).getShuffleTaskManager().getServerReadHandlers().get(testAppId));\n    assertNull(shuffleServers.get(0).getShuffleTaskManager().getPartitionsToBlockIds().get(testAppId));\n  }\n']",Register;Exception;Shuffle;Lists;Send;rs;Shuffle;put;Request;Map,4.511093720793724e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8965983390808105, -5.539849758148193, -4.694548606872559, -5.707056045532227, -5.368486404418945, -0.0240922924131155]",0.9761955142021179
2,"['  @Test\n  public void clearResourceTest() throws Exception {\n    final ShuffleWriteClient shuffleWriteClient =\n        ShuffleClientFactory.getInstance().createShuffleWriteClient(\n            ""GRPC"", 2, 10000L, 4);\n    shuffleWriteClient.registerCoordinators(""127.0.0.1:19999"");\n    shuffleWriteClient.registerShuffle(\n        new ShuffleServerInfo(""127.0.0.1-20001"", ""127.0.0.1"", 20001),\n        ""clearResourceTest1"",\n        0,\n        Lists.newArrayList(new PartitionRange(0, 1)));\n\n    shuffleWriteClient.sendAppHeartbeat(""clearResourceTest1"", 1000L);\n    shuffleWriteClient.sendAppHeartbeat(""clearResourceTest2"", 1000L);\n\n    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(""clearResourceTest1"", 0,\n        Lists.newArrayList(new PartitionRange(0, 1)));\n    shuffleServerClient.registerShuffle(rrsr);\n    rrsr = new RssRegisterShuffleRequest(""clearResourceTest2"", 0,\n        Lists.newArrayList(new PartitionRange(0, 1)));\n    shuffleServerClient.registerShuffle(rrsr);\n    assertEquals(Sets.newHashSet(""clearResourceTest1"", ""clearResourceTest2""),\n        shuffleServers.get(0).getShuffleTaskManager().getAppIds().keySet());\n\n    // Thread will keep refresh clearResourceTest1 in coordinator\n    Thread t = new Thread(() -> {\n      int i = 0;\n      while (i < 20) {\n        shuffleWriteClient.sendAppHeartbeat(""clearResourceTest1"", 1000L);\n        i++;\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    });\n    t.start();\n\n    // Heartbeat is sent to coordinator too]\n    Thread.sleep(3000);\n    shuffleServerClient.registerShuffle(new RssRegisterShuffleRequest(""clearResourceTest1"", 0,\n        Lists.newArrayList(new PartitionRange(0, 1))));\n    assertEquals(Sets.newHashSet(""clearResourceTest1""),\n        coordinators.get(0).getApplicationManager().getAppIds());\n    // clearResourceTest2 will be removed because of rss.server.app.expired.withoutHeartbeat\n    Thread.sleep(2000);\n    assertEquals(Sets.newHashSet(""clearResourceTest1""),\n        shuffleServers.get(0).getShuffleTaskManager().getAppIds().keySet());\n\n    // clearResourceTest1 will be removed because of rss.server.app.expired.withoutHeartbeat\n    t.interrupt();\n    Thread.sleep(8000);\n    assertEquals(0, shuffleServers.get(0).getShuffleTaskManager().getAppIds().size());\n\n  }\n']",Coordinators;coordinator;new;clear;Resource;get;Write;send;Write;Shuffle,9.167706593871117e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.710738383233547e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.91848611831665, -5.459657669067383, -4.681771755218506, -5.77609920501709, -5.411994934082031, -0.024057496339082718]",0.9762296080589294
2,"['  @Test\n  public void shuffleResultTest() throws Exception {\n    Map<Integer, List<Long>> partitionToBlockIds = Maps.newHashMap();\n    List<Long> blockIds1 = getBlockIdList(1, 3);\n    List<Long> blockIds2 = getBlockIdList(2, 2);\n    List<Long> blockIds3 = getBlockIdList(3, 1);\n    partitionToBlockIds.put(1, blockIds1);\n    partitionToBlockIds.put(2, blockIds2);\n    partitionToBlockIds.put(3, blockIds3);\n\n    RssReportShuffleResultRequest request =\n        new RssReportShuffleResultRequest(""shuffleResultTest"", 0, 0L, partitionToBlockIds, 1);\n    try {\n      shuffleServerClient.reportShuffleResult(request);\n      fail(""Exception should be thrown"");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""error happened when report shuffle result""));\n    }\n\n    RssGetShuffleResultRequest req = new RssGetShuffleResultRequest(""shuffleResultTest"", 1, 1);\n    try {\n      shuffleServerClient.getShuffleResult(req);\n      fail(""Exception should be thrown"");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Can\'t get shuffle result""));\n    }\n\n    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(""shuffleResultTest"", 100,\n        Lists.newArrayList(new PartitionRange(0, 1)));\n    shuffleServerClient.registerShuffle(rrsr);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 1);\n    RssGetShuffleResultResponse result = shuffleServerClient.getShuffleResult(req);\n    Roaring64NavigableMap blockIdBitmap = result.getBlockIdBitmap();\n    assertEquals(Roaring64NavigableMap.bitmapOf(), blockIdBitmap);\n\n    request =\n        new RssReportShuffleResultRequest(""shuffleResultTest"", 0, 0L, partitionToBlockIds, 1);\n    RssReportShuffleResultResponse response = shuffleServerClient.reportShuffleResult(request);\n    assertEquals(ResponseStatusCode.SUCCESS, response.getStatusCode());\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 1);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    Roaring64NavigableMap expectedP1 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP1, blockIds1);\n    assertEquals(expectedP1, blockIdBitmap);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 2);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    Roaring64NavigableMap expectedP2 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP2, blockIds2);\n    assertEquals(expectedP2, blockIdBitmap);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 3);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    Roaring64NavigableMap expectedP3 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP3, blockIds3);\n    assertEquals(expectedP3, blockIdBitmap);\n\n    partitionToBlockIds = Maps.newHashMap();\n    blockIds1 = getBlockIdList(1, 3);\n    blockIds2 = getBlockIdList(2, 2);\n    blockIds3 = getBlockIdList(3, 1);\n    partitionToBlockIds.put(1, blockIds1);\n    partitionToBlockIds.put(2, blockIds2);\n    partitionToBlockIds.put(3, blockIds3);\n\n    request =\n        new RssReportShuffleResultRequest(""shuffleResultTest"", 0, 1L, partitionToBlockIds, 1);\n    shuffleServerClient.reportShuffleResult(request);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 1);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    addExpectedBlockIds(expectedP1, blockIds1);\n    assertEquals(expectedP1, blockIdBitmap);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 2);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    addExpectedBlockIds(expectedP2, blockIds2);\n    assertEquals(expectedP2, blockIdBitmap);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 3);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    addExpectedBlockIds(expectedP3, blockIds3);\n    assertEquals(expectedP3, blockIdBitmap);\n\n    request =\n        new RssReportShuffleResultRequest(""shuffleResultTest"", 1, 1L, Maps.newHashMap(), 1);\n    shuffleServerClient.reportShuffleResult(request);\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 1, 1);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    assertEquals(Roaring64NavigableMap.bitmapOf(), blockIdBitmap);\n\n    // test with bitmapNum > 1\n    partitionToBlockIds = Maps.newHashMap();\n    blockIds1 = getBlockIdList(1, 3);\n    blockIds2 = getBlockIdList(2, 2);\n    blockIds3 = getBlockIdList(3, 1);\n    partitionToBlockIds.put(1, blockIds1);\n    partitionToBlockIds.put(2, blockIds2);\n    partitionToBlockIds.put(3, blockIds3);\n    request =\n        new RssReportShuffleResultRequest(""shuffleResultTest"", 2, 1L, partitionToBlockIds, 3);\n    shuffleServerClient.reportShuffleResult(request);\n    // validate bitmap in shuffleTaskManager\n    Roaring64NavigableMap[] bitmaps = shuffleServers.get(0).getShuffleTaskManager()\n        .getPartitionsToBlockIds().get(""shuffleResultTest"").get(2);\n    assertEquals(3, bitmaps.length);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 2, 1);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    expectedP1 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP1, blockIds1);\n    assertEquals(expectedP1, blockIdBitmap);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 2, 2);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    expectedP2 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP2, blockIds2);\n    assertEquals(expectedP2, blockIdBitmap);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 2, 3);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    expectedP3 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP3, blockIds3);\n    assertEquals(expectedP3, blockIdBitmap);\n\n    partitionToBlockIds = Maps.newHashMap();\n    blockIds1 = getBlockIdList((int) Constants.MAX_PARTITION_ID, 3);\n    blockIds2 = getBlockIdList(2, 2);\n    blockIds3 = getBlockIdList(3, 1);\n    partitionToBlockIds.put((int) Constants.MAX_PARTITION_ID, blockIds1);\n    partitionToBlockIds.put(2, blockIds2);\n    partitionToBlockIds.put(3, blockIds3);\n    // bimapNum = 2\n    request =\n        new RssReportShuffleResultRequest(""shuffleResultTest"", 4, 1L, partitionToBlockIds, 2);\n    shuffleServerClient.reportShuffleResult(request);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 4, (int) Constants.MAX_PARTITION_ID);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    expectedP1 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP1, blockIds1);\n    assertEquals(expectedP1, blockIdBitmap);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 4, 2);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    expectedP2 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP2, blockIds2);\n    assertEquals(expectedP2, blockIdBitmap);\n\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 4, 3);\n    result = shuffleServerClient.getShuffleResult(req);\n    blockIdBitmap = result.getBlockIdBitmap();\n    expectedP3 = Roaring64NavigableMap.bitmapOf();\n    addExpectedBlockIds(expectedP3, blockIds3);\n    assertEquals(expectedP3, blockIdBitmap);\n\n    // wait resources are deleted\n    Thread.sleep(12000);\n    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 1, 1);\n    try {\n      shuffleServerClient.getShuffleResult(req);\n      fail(""Exception should be thrown"");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(""Can\'t get shuffle result""));\n    }\n  }\n']",shuffle;register;Exception;Result;Range;Block;Request;report;Message;when,1.3096723705530167e-09;6.402842700481415e-10;6.111804395914078e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.899860382080078, -5.5846405029296875, -4.692014217376709, -5.696183204650879, -5.331380367279053, -0.024148497730493546]",0.9761407375335693
2,"['  @Test\n  public void registerTest() {\n    shuffleServerClient.registerShuffle(new RssRegisterShuffleRequest(""registerTest"", 0,\n        Lists.newArrayList(new PartitionRange(0, 1))));\n    RssGetShuffleResultRequest req = new RssGetShuffleResultRequest(""registerTest"", 0, 0);\n    // no exception with getShuffleResult means register successfully\n    shuffleServerClient.getShuffleResult(req);\n    req = new RssGetShuffleResultRequest(""registerTest"", 0, 1);\n    shuffleServerClient.getShuffleResult(req);\n    shuffleServerClient.registerShuffle(new RssRegisterShuffleRequest(""registerTest"", 1,\n        Lists.newArrayList(new PartitionRange(0, 0), new PartitionRange(1, 1), new PartitionRange(2, 2))));\n    req = new RssGetShuffleResultRequest(""registerTest"", 1, 0);\n    shuffleServerClient.getShuffleResult(req);\n    req = new RssGetShuffleResultRequest(""registerTest"", 1, 1);\n    shuffleServerClient.getShuffleResult(req);\n    req = new RssGetShuffleResultRequest(""registerTest"", 1, 2);\n    shuffleServerClient.getShuffleResult(req);\n  }\n']",Partition;Client;Partition;shuffle;successfully;Shuffle;register;Shuffle;register;List,9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.917232990264893, -5.602412223815918, -4.689351558685303, -5.7232489585876465, -5.326511383056641, -0.023989880457520485]",0.9762957096099854
2,"['  @Test\n  public void sendDataWithoutRegisterTest() throws Exception {\n    List<ShuffleBlockInfo> blockInfos = Lists.newArrayList(new ShuffleBlockInfo(0, 0, 0, 100, 0,\n        new byte[]{}, Lists.newArrayList(), 0, 100, 0));\n    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = Maps.newHashMap();\n    partitionToBlocks.put(0, blockInfos);\n    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();\n    shuffleToBlocks.put(0, partitionToBlocks);\n\n    RssSendShuffleDataRequest rssdr = new RssSendShuffleDataRequest(\n        ""sendDataWithoutRegisterTest"", 3, 1000, shuffleToBlocks);\n    shuffleServerClient.sendShuffleData(rssdr);\n    assertEquals(132, shuffleServers.get(0).getPreAllocatedMemory());\n    Thread.sleep(10000);\n    assertEquals(0, shuffleServers.get(0).getPreAllocatedMemory());\n  }\n']",send;Thread;Block;partition;Info;os;ss;Register;Lists;Data,1.1641532182693481e-09;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.90051794052124, -5.570982456207275, -4.682872772216797, -5.733701229095459, -5.304987907409668, -0.024291615933179855]",0.9760010242462158
2,"['  @Test\n  public void multipleShuffleResultTest() throws Exception {\n    Set<Long> expectedBlockIds = Sets.newConcurrentHashSet();\n    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(""multipleShuffleResultTest"", 100,\n        Lists.newArrayList(new PartitionRange(0, 1)));\n    shuffleServerClient.registerShuffle(rrsr);\n\n    Runnable r1 = () -> {\n      for (int i = 0; i < 100; i++) {\n        Map<Integer, List<Long>> ptbs = Maps.newHashMap();\n        List<Long> blockIds = Lists.newArrayList();\n        Long blockId = ClientUtils.getBlockId(1, 0, i);\n        expectedBlockIds.add(blockId);\n        blockIds.add(blockId);\n        ptbs.put(1, blockIds);\n        RssReportShuffleResultRequest req1 =\n            new RssReportShuffleResultRequest(""multipleShuffleResultTest"", 1, 0, ptbs, 1);\n        shuffleServerClient.reportShuffleResult(req1);\n      }\n    };\n    Runnable r2 = () -> {\n      for (int i = 100; i < 200; i++) {\n        Map<Integer, List<Long>> ptbs = Maps.newHashMap();\n        List<Long> blockIds = Lists.newArrayList();\n        Long blockId = ClientUtils.getBlockId(1, 1, i);\n        expectedBlockIds.add(blockId);\n        blockIds.add(blockId);\n        ptbs.put(1, blockIds);\n        RssReportShuffleResultRequest req1 =\n            new RssReportShuffleResultRequest(""multipleShuffleResultTest"", 1, 1, ptbs, 1);\n        shuffleServerClient.reportShuffleResult(req1);\n      }\n    };\n    Runnable r3 = () -> {\n      for (int i = 200; i < 300; i++) {\n        Map<Integer, List<Long>> ptbs = Maps.newHashMap();\n        List<Long> blockIds = Lists.newArrayList();\n        Long blockId = ClientUtils.getBlockId(1, 2, i);\n        expectedBlockIds.add(blockId);\n        blockIds.add(blockId);\n        ptbs.put(1, blockIds);\n        RssReportShuffleResultRequest req1 =\n            new RssReportShuffleResultRequest(""multipleShuffleResultTest"", 1, 2, ptbs, 1);\n        shuffleServerClient.reportShuffleResult(req1);\n      }\n    };\n    Thread t1 = new Thread(r1);\n    Thread t2 = new Thread(r2);\n    Thread t3 = new Thread(r3);\n    t1.start();\n    t2.start();\n    t3.start();\n    t1.join();\n    t2.join();\n    t3.join();\n\n    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();\n    for (Long blockId : expectedBlockIds) {\n      blockIdBitmap.addLong(blockId);\n    }\n\n    RssGetShuffleResultRequest req = new RssGetShuffleResultRequest(\n        ""multipleShuffleResultTest"", 1, 1);\n    RssGetShuffleResultResponse result = shuffleServerClient.getShuffleResult(req);\n    Roaring64NavigableMap actualBlockIdBitmap = result.getBlockIdBitmap();\n    assertEquals(blockIdBitmap, actualBlockIdBitmap);\n  }\n']",multiple;shuffle;Register;req;Result;Shuffle;ptbs;Shuffle;Request;Set,1.862645149230957e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.637978807091713e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.937296390533447, -5.426980495452881, -4.657833099365234, -5.78411865234375, -5.464962005615234, -0.02411952242255211]",0.9761690497398376
2,"['  @Test\n  public void rpcMetricsTest() {\n    String appId = ""rpcMetricsTest"";\n    int shuffleId = 0;\n    double oldGrpcTotal = shuffleServers.get(0).getGrpcMetrics().getCounterGrpcTotal().get();\n    double oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().\n        get(ShuffleServerGrpcMetrics.REGISTER_SHUFFLE_METHOD).get();\n    shuffleServerClient.registerShuffle(new RssRegisterShuffleRequest(appId, shuffleId,\n        Lists.newArrayList(new PartitionRange(0, 1))));\n    double newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap()\n        .get(ShuffleServerGrpcMetrics.REGISTER_SHUFFLE_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.REGISTER_SHUFFLE_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.APP_HEARTBEAT_METHOD).get();\n    shuffleServerClient.sendHeartBeat(new RssAppHeartBeatRequest(appId, 10000));\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.APP_HEARTBEAT_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.APP_HEARTBEAT_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.REQUIRE_BUFFER_METHOD).get();\n    shuffleServerClient.requirePreAllocation(100, 10, 1000);\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.REQUIRE_BUFFER_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.REQUIRE_BUFFER_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.SEND_SHUFFLE_DATA_METHOD).get();\n    List<ShuffleBlockInfo> blockInfos = Lists.newArrayList(new ShuffleBlockInfo(shuffleId, 0, 0, 100, 0,\n        new byte[]{}, Lists.newArrayList(), 0, 100, 0));\n    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = Maps.newHashMap();\n    partitionToBlocks.put(0, blockInfos);\n    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();\n    shuffleToBlocks.put(0, partitionToBlocks);\n    RssSendShuffleDataRequest rssdr = new RssSendShuffleDataRequest(\n        appId, 3, 1000, shuffleToBlocks);\n    shuffleServerClient.sendShuffleData(rssdr);\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.SEND_SHUFFLE_DATA_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.SEND_SHUFFLE_DATA_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.COMMIT_SHUFFLE_TASK_METHOD).get();\n    shuffleServerClient.sendCommit(new RssSendCommitRequest(appId, shuffleId));\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.COMMIT_SHUFFLE_TASK_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.COMMIT_SHUFFLE_TASK_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.FINISH_SHUFFLE_METHOD).get();\n    shuffleServerClient.finishShuffle(new RssFinishShuffleRequest(appId, shuffleId));\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.FINISH_SHUFFLE_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.FINISH_SHUFFLE_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.REPORT_SHUFFLE_RESULT_METHOD).get();\n    Map<Integer, List<Long>> partitionToBlockIds = Maps.newHashMap();\n    List<Long> blockIds1 = getBlockIdList(1, 3);\n    List<Long> blockIds2 = getBlockIdList(2, 2);\n    List<Long> blockIds3 = getBlockIdList(3, 1);\n    partitionToBlockIds.put(1, blockIds1);\n    partitionToBlockIds.put(2, blockIds2);\n    partitionToBlockIds.put(3, blockIds3);\n    RssReportShuffleResultRequest request =\n        new RssReportShuffleResultRequest(appId, shuffleId, 0L, partitionToBlockIds, 1);\n    shuffleServerClient.reportShuffleResult(request);\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.REPORT_SHUFFLE_RESULT_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.REPORT_SHUFFLE_RESULT_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.GET_SHUFFLE_RESULT_METHOD).get();\n    shuffleServerClient.getShuffleResult(new RssGetShuffleResultRequest(appId, shuffleId, 1));\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.GET_SHUFFLE_RESULT_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.GET_SHUFFLE_RESULT_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.GET_SHUFFLE_INDEX_METHOD).get();\n    try {\n      shuffleServerClient.getShuffleIndex(new RssGetShuffleIndexRequest(\n          appId, shuffleId, 1, 1, 3));\n    } catch (Exception e) {\n      // ignore the exception, just test metrics value\n    }\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.GET_SHUFFLE_INDEX_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.GET_SHUFFLE_INDEX_METHOD).get(), 0.5);\n\n    oldValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.GET_SHUFFLE_DATA_METHOD).get();\n    try {\n      shuffleServerClient.getShuffleData(new RssGetShuffleDataRequest(\n          appId, shuffleId, 0, 1, 3,\n          0, 100));\n    } catch (Exception e) {\n      // ignore the exception, just test metrics value\n    }\n    newValue = shuffleServers.get(0).getGrpcMetrics().getCounterMap().get(\n        ShuffleServerGrpcMetrics.GET_SHUFFLE_DATA_METHOD).get();\n    assertEquals(oldValue + 1, newValue, 0.5);\n    assertEquals(0,\n        shuffleServers.get(0).getGrpcMetrics().getGaugeMap().get(\n            ShuffleServerGrpcMetrics.GET_SHUFFLE_DATA_METHOD).get(), 0.5);\n\n    double newGrpcTotal = shuffleServers.get(0).getGrpcMetrics().getCounterGrpcTotal().get();\n    // require buffer will be called one more time when send data\n    assertEquals(oldGrpcTotal + 11, newGrpcTotal, 0.5);\n    assertEquals(0, shuffleServers.get(0).getGrpcMetrics().getGaugeGrpcOpen().get(), 0.5);\n  }\n']",Counter;Map;Metrics;app;Map;Counter;Counter;Total;Shuffle;get,1.3969838619232178e-09;1.0477378964424133e-09;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;4.94765117764473e-10,5,5,"[-5.922807693481445, -5.474635124206543, -4.659662246704102, -5.752529621124268, -5.456310272216797, -0.024070531129837036]",0.9762168526649475
2,"['  @Test\n  public void readUploadedDataTest() {\n    String appId = ""ap_read_uploaded_data"";\n    RssRegisterShuffleRequest rr1 =  new RssRegisterShuffleRequest(appId, 0,\n        Lists.newArrayList(new PartitionRange(0, 0)));\n    RssRegisterShuffleRequest rr2 =  new RssRegisterShuffleRequest(appId, 0,\n        Lists.newArrayList(new PartitionRange(1, 1)));\n    RssRegisterShuffleRequest rr3 =  new RssRegisterShuffleRequest(appId, 0,\n        Lists.newArrayList(new PartitionRange(2, 2)));\n    RssRegisterShuffleRequest rr4 =  new RssRegisterShuffleRequest(appId, 0,\n        Lists.newArrayList(new PartitionRange(4, 4)));\n    shuffleServerClient.registerShuffle(rr1);\n    shuffleServerClient.registerShuffle(rr2);\n    shuffleServerClient.registerShuffle(rr3);\n    shuffleServerClient.registerShuffle(rr4);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Set<Long> expectedBlock1 = Sets.newHashSet();\n    Set<Long> expectedBlock2 = Sets.newHashSet();\n\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap4 = Roaring64NavigableMap.bitmapOf();\n\n    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(\n        0, 0, 1,3, 25, blockIdBitmap1, expectedData);\n    List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(\n        0, 1, 1,5,1024 * 1024, blockIdBitmap2, expectedData);\n    List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(\n        0, 2, 2,4, 25, blockIdBitmap3, expectedData);\n    List<ShuffleBlockInfo> blocks4 = createShuffleBlockList(\n        0, 4, 3,1, 1024 * 1024, blockIdBitmap4, expectedData);\n\n\n    blocks1.forEach(b -> expectedBlock1.add(b.getBlockId()));\n    blocks2.forEach(b -> expectedBlock2.add(b.getBlockId()));\n\n    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = Maps.newHashMap();\n    partitionToBlocks.put(0, blocks1);\n    partitionToBlocks.put(1, blocks2);\n    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();\n    shuffleToBlocks.put(0, partitionToBlocks);\n    RssSendShuffleDataRequest rs1 = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);\n    shuffleServerClient.sendShuffleData(rs1);\n\n    RssSendCommitRequest rc1 = new RssSendCommitRequest(appId, 0);\n    shuffleServerClient.sendCommit(rc1);\n    RssFinishShuffleRequest rf1 = new RssFinishShuffleRequest(appId, 0);\n    shuffleServerClient.finishShuffle(rf1);\n    Map<Integer, List<Long>> partitionToBlockIds = Maps.newHashMap();\n    partitionToBlockIds.put(0, new ArrayList<>(expectedBlock1));\n    partitionToBlockIds.put(1, new ArrayList<>(expectedBlock2));\n    RssReportShuffleResultRequest rrp1 = new RssReportShuffleResultRequest(\n        appId, 0, 1L, partitionToBlockIds, 2);\n    shuffleServerClient.reportShuffleResult(rrp1);\n\n    DiskItem item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 0);\n    assertTrue(item.canWrite());\n    assertEquals(3 * 25, item.getNotUploadedSize(appId + ""/"" + 0));\n    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 1);\n    assertTrue(item.canWrite());\n    assertEquals(5 * 1024 * 1024, item.getNotUploadedSize(appId + ""/"" + 0));\n\n    sendSinglePartitionToShuffleServer(appId, 0,2, 2L, blocks3);\n    sendSinglePartitionToShuffleServer(appId, 0, 4, 3L, blocks4);\n\n    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 2);\n    assertTrue(item.canWrite());\n    assertEquals(3 * 25 + 4 * 25, item.getNotUploadedSize(appId + ""/"" + 0));\n\n    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 4);\n    assertTrue(item.canWrite());\n    assertEquals(5 * 1024 * 1024 + 1024 * 1024, item.getNotUploadedSize(appId + ""/"" + 0));\n\n\n    RssGetShuffleResultRequest rg1 = new RssGetShuffleResultRequest(appId, 0, 0);\n    shuffleServerClient.getShuffleResult(rg1);\n    RssGetShuffleResultRequest rg2 = new RssGetShuffleResultRequest(appId, 0, 1);\n    shuffleServerClient.getShuffleResult(rg2);\n    RssGetShuffleResultRequest rg3 = new RssGetShuffleResultRequest(appId, 0, 2);\n    shuffleServerClient.getShuffleResult(rg3);\n    RssGetShuffleResultRequest rg4 = new RssGetShuffleResultRequest(appId, 0, 4);\n    shuffleServerClient.getShuffleResult(rg4);\n\n    readShuffleData(shuffleServerClient, appId, 0, 0, 1, 10, 100, 0);\n    readShuffleData(shuffleServerClient, appId, 0, 1, 1, 10, 100, 0);\n\n\n    wait(appId);\n\n    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 0);\n    assertTrue(item.canWrite());\n    assertEquals(0, item.getNotUploadedSize(appId + ""/"" + 0));\n\n    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 1);\n    assertTrue(item.canWrite());\n    assertEquals(0, item.getNotUploadedSize(appId + ""/"" + 0));\n\n    boolean isException = false;\n    try {\n      ShuffleDataResult result = readShuffleData(shuffleServerClient, appId, 0, 0,\n          1, 10, 1000,  0);\n    } catch (RuntimeException re) {\n      isException = true;\n      assertTrue(re.getMessage().contains(""Can\'t get shuffle index""));\n    }\n    assertTrue(isException);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",\n        appId, 0, 0, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",\n        blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(), conf);\n    validateResult(readClient, expectedData, blockIdBitmap1);\n\n    readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",\n        appId, 0, 1, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",\n        blockIdBitmap2, Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(), conf);\n    validateResult(readClient, expectedData, blockIdBitmap2);\n\n    readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",\n        appId, 0, 2, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",\n        blockIdBitmap3, Roaring64NavigableMap.bitmapOf(2), Lists.newArrayList(), conf);\n    validateResult(readClient, expectedData, blockIdBitmap3);\n\n    readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",\n        appId, 0, 4, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",\n        blockIdBitmap4, Roaring64NavigableMap.bitmapOf(3), Lists.newArrayList(), conf);\n    validateResult(readClient, expectedData, blockIdBitmap4);\n  }\n']",Uploaded;Data;Lists;app;register;Shuffle;Partition;app;new;Sets,9.022187441587448e-10;7.566995918750763e-10;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.874320030212402, -5.4778571128845215, -4.681997299194336, -5.718167304992676, -5.3909430503845215, -0.02438783273100853]",0.9759071469306946
2,"['  @Test\n  public void readLocalDataTest() {\n    String appId = ""app_read_not_uploaded_data"";\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    RssRegisterShuffleRequest rr1 =  new RssRegisterShuffleRequest(appId, 1,\n        Lists.newArrayList(new PartitionRange(0, 0)));\n    RssRegisterShuffleRequest rr2 =  new RssRegisterShuffleRequest(appId, 1,\n        Lists.newArrayList(new PartitionRange(1, 1)));\n    RssRegisterShuffleRequest rr3 =  new RssRegisterShuffleRequest(appId, 1,\n        Lists.newArrayList(new PartitionRange(2, 2)));\n    RssRegisterShuffleRequest rr4 =  new RssRegisterShuffleRequest(appId, 1,\n        Lists.newArrayList(new PartitionRange(3, 3)));\n    shuffleServerClient.registerShuffle(rr1);\n    shuffleServerClient.registerShuffle(rr2);\n    shuffleServerClient.registerShuffle(rr3);\n    shuffleServerClient.registerShuffle(rr4);\n\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap4 = Roaring64NavigableMap.bitmapOf();\n\n    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(\n        1, 0, 1,3, 25, blockIdBitmap1, expectedData);\n    List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(\n        1, 1, 2,5,1024 * 1024, blockIdBitmap2, expectedData);\n    List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(\n        1, 2, 3,4, 25, blockIdBitmap3, expectedData);\n    List<ShuffleBlockInfo> blocks4 = createShuffleBlockList(\n        1, 3, 4,1, 1024 * 1024, blockIdBitmap4, expectedData);\n\n    sendSinglePartitionToShuffleServer(appId, 1,0, 1L, blocks1);\n    sendSinglePartitionToShuffleServer(appId, 1,1, 2L, blocks2);\n    sendSinglePartitionToShuffleServer(appId, 1,2, 3L, blocks3);\n    sendSinglePartitionToShuffleServer(appId, 1,3, 4L, blocks4);\n\n    RssGetShuffleResultRequest rg1 = new RssGetShuffleResultRequest(appId, 1, 0);\n    shuffleServerClient.getShuffleResult(rg1);\n    RssGetShuffleResultRequest rg2 = new RssGetShuffleResultRequest(appId, 1, 1);\n    shuffleServerClient.getShuffleResult(rg2);\n    RssGetShuffleResultRequest rg3 = new RssGetShuffleResultRequest(appId, 1, 2);\n    shuffleServerClient.getShuffleResult(rg3);\n    RssGetShuffleResultRequest rg4 = new RssGetShuffleResultRequest(appId, 1, 3);\n    shuffleServerClient.getShuffleResult(rg4);\n\n    Uninterruptibles.sleepUninterruptibly(2, TimeUnit.SECONDS);\n    validateResult(appId, 1, 0, expectedData, getExpectBlockIds(blocks1));\n    Uninterruptibles.sleepUninterruptibly(2, TimeUnit.SECONDS);\n    validateResult(appId, 1, 1, expectedData, getExpectBlockIds(blocks2));\n    Uninterruptibles.sleepUninterruptibly(2, TimeUnit.SECONDS);\n    validateResult(appId, 1, 2, expectedData, getExpectBlockIds(blocks3));\n    Uninterruptibles.sleepUninterruptibly(2, TimeUnit.SECONDS);\n    validateResult(appId, 1, 3, expectedData, getExpectBlockIds(blocks4));\n    Uninterruptibles.sleepUninterruptibly(20, TimeUnit.SECONDS);\n    boolean isException = false;\n    try {\n      readShuffleData(shuffleServerClient, appId, 1, 0,\n          1, 10, 1000,  0);\n    } catch (RuntimeException re) {\n      isException = true;\n      assertTrue(re.getMessage().contains(""Can\'t get shuffle index""));\n    }\n    assertTrue(isException);\n  }\n']",uploaded;read;shuffle;read;Block;Bitmap;expected;Lists;Register;Request,7.566995918750763e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.147295840084553e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.891674518585205, -5.469987869262695, -4.672464847564697, -5.7502007484436035, -5.41591215133667, -0.024241818115115166]",0.9760497808456421
2,"['  @Test\n  public void readMixedDataTest() {\n    String appId = ""app_read_mix_data"";\n    RssRegisterShuffleRequest rr1 =  new RssRegisterShuffleRequest(appId, 0,\n        Lists.newArrayList(new PartitionRange(0, 0)));\n    shuffleServerClient.registerShuffle(rr1);\n\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    Set<Long> expectedBlock1 = Sets.newHashSet();\n\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n\n    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(\n        0, 0, 1,15, 1024 * 1024, blockIdBitmap1, expectedData);\n\n    blocks1.forEach(b -> expectedBlock1.add(b.getBlockId()));\n\n    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = Maps.newHashMap();\n    partitionToBlocks.put(0, blocks1);\n    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();\n    shuffleToBlocks.put(0, partitionToBlocks);\n    RssSendShuffleDataRequest rs1 = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);\n    shuffleServerClient.sendShuffleData(rs1);\n\n    RssSendCommitRequest rc1 = new RssSendCommitRequest(appId, 0);\n    shuffleServerClient.sendCommit(rc1);\n    RssFinishShuffleRequest rf1 = new RssFinishShuffleRequest(appId, 0);\n    shuffleServerClient.finishShuffle(rf1);\n    Map<Integer, List<Long>> partitionToBlockIds = Maps.newHashMap();\n    partitionToBlockIds.put(0, new ArrayList<>(expectedBlock1));\n    RssReportShuffleResultRequest rrp1 = new RssReportShuffleResultRequest(\n        appId, 0, 1L, partitionToBlockIds, 1);\n    shuffleServerClient.reportShuffleResult(rrp1);\n\n    RssGetShuffleResultRequest rg1 = new RssGetShuffleResultRequest(appId, 0, 0);\n    shuffleServerClient.getShuffleResult(rg1);\n\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",\n        appId, 0, 0, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",\n        blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(new ShuffleServerInfo(""test"", LOCALHOST, SHUFFLE_SERVER_PORT)), conf);\n\n    CompressedShuffleBlock csb = readClient.readShuffleBlockData();\n    Roaring64NavigableMap matched = Roaring64NavigableMap.bitmapOf();\n    assertNotNull(csb);\n    assertNotNull(csb.getByteBuffer());\n    for (Map.Entry<Long, byte[]> entry : expectedData.entrySet()) {\n      if (compareByte(entry.getValue(), csb.getByteBuffer())) {\n        matched.addLong(entry.getKey());\n      }\n    }\n    wait(appId);\n\n    csb = readClient.readShuffleBlockData();\n    while (csb != null && csb.getByteBuffer() != null) {\n      for (Map.Entry<Long, byte[]> entry : expectedData.entrySet()) {\n        if (compareByte(entry.getValue(), csb.getByteBuffer())) {\n          matched.addLong(entry.getKey());\n          break;\n        }\n      }\n      csb = readClient.readShuffleBlockData();\n    }\n    assertTrue(blockIdBitmap1.equals(matched));\n\n    boolean isException = false;\n    try {\n      readShuffleData(shuffleServerClient, appId, 0, 0,\n          1, 10, 1000, 0);\n    } catch (RuntimeException re) {\n      isException = true;\n      assertTrue(re.getMessage().contains(""Can\'t get shuffle index""));\n    }\n    assertTrue(isException);\n\n    List<ShuffleBlockInfo> blocks5 = createShuffleBlockList(\n        0, 0, 1,15, 1024 * 1024, blockIdBitmap1, expectedData);\n    partitionToBlocks.clear();\n    shuffleToBlocks.clear();\n    partitionToBlocks.put(0, blocks5);\n    shuffleToBlocks.put(0, partitionToBlocks);\n    RssSendShuffleDataRequest rs5 = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);\n    DiskItem diskItem = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 0);\n    String path = ShuffleStorageUtils.getFullShuffleDataFolder(diskItem.getBasePath(),\n        ShuffleStorageUtils.getShuffleDataPath(appId, 0, 0, 0));\n    File file = new File(path);\n    assertFalse(file.exists());\n    try {\n      shuffleServerClient.sendShuffleData(rs5);\n      shuffleServerClient.sendCommit(rc1);\n      shuffleServerClient.finishShuffle(rf1);\n      shuffleServerClient.reportShuffleResult(rrp1);\n    } catch (Exception e) {\n      fail();\n    }\n    assertFalse(file.exists());\n  }\n']",Shuffle;mix;Data;rc;expected;Shuffle;rr;Shuffle;expected;Map,1.57160684466362e-09;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.922805309295654, -5.492120265960693, -4.677063465118408, -5.747021675109863, -5.425324440002441, -0.02398429438471794]",0.9763010144233704
2,"['  @Test\n  public void diskUsageTest() {\n    String appId = ""app_read_diskusage_data"";\n    long originSize = shuffleServers.get(0).getShuffleBufferManager().getCapacity();\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n\n    RssRegisterShuffleRequest rr1 =  new RssRegisterShuffleRequest(appId, 2,\n        Lists.newArrayList(new PartitionRange(0, 0)));\n    shuffleServerClient.registerShuffle(rr1);\n\n    RssRegisterShuffleRequest rr2 =  new RssRegisterShuffleRequest(appId, 3,\n        Lists.newArrayList(new PartitionRange(1, 1)));\n    shuffleServerClient.registerShuffle(rr2);\n\n    RssRegisterShuffleRequest rr3 =  new RssRegisterShuffleRequest(appId, 2,\n        Lists.newArrayList(new PartitionRange(1, 1)));\n    shuffleServerClient.registerShuffle(rr3);\n\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();\n\n    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(\n        2, 0, 1,30, 10 * 1024 * 1024, blockIdBitmap1, expectedData);\n\n    List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(\n        3, 1, 2,9, 10 * 1024 * 1024, blockIdBitmap2, expectedData);\n\n    List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(\n        2, 1, 2,9, 10 * 1024 * 1024, blockIdBitmap3, expectedData);\n\n    DiskItem item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 2, 0);\n    item.createMetadataIfNotExist(appId + ""/"" + 2);\n    item.getLock(appId + ""/"" + 2).readLock().lock();\n    sendSinglePartitionToShuffleServer(appId, 2, 0, 1, blocks1);\n    assertFalse(item.canWrite());\n    assertEquals(30 * 1024 * 1024 * 10, item.getNotUploadedSize(appId + ""/"" + 2));\n    assertEquals(1, item.getNotUploadedPartitions(appId + ""/"" + 2).getCardinality());\n    boolean isException = false;\n    try {\n      sendSinglePartitionToShuffleServer(appId, 2, 1, 2, blocks3);\n    } catch (RuntimeException re) {\n      isException = true;\n      assertTrue(re.getMessage().contains(""Can\'t finish shuffle process""));\n    }\n    item.getLock(appId + ""/"" + 2).readLock().unlock();\n    Uninterruptibles.sleepUninterruptibly(6, TimeUnit.SECONDS);\n    assertEquals(originSize, shuffleServers.get(0).getShuffleBufferManager().getCapacity());\n    assertTrue(isException);\n    RssGetShuffleResultRequest rg1 = new RssGetShuffleResultRequest(appId, 2, 0);\n    shuffleServerClient.getShuffleResult(rg1);\n    validateResult(appId, 2, 0, expectedData, Sets.newHashSet());\n    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",\n        appId, 2, 0, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",\n        blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(new ShuffleServerInfo(""test"", LOCALHOST, SHUFFLE_SERVER_PORT)), conf);\n    validateResult(readClient, expectedData, blockIdBitmap1);\n    try {\n      sendSinglePartitionToShuffleServer(appId, 3, 1,2, blocks2);\n    } catch (RuntimeException re) {\n      fail();\n    }\n    RssGetShuffleResultRequest rg2 = new RssGetShuffleResultRequest(appId, 3, 1);\n    shuffleServerClient.getShuffleResult(rg2);\n    validateResult(appId, 3, 1, expectedData,\n        getExpectBlockIds(blocks2));\n\n    Uninterruptibles.sleepUninterruptibly(5, TimeUnit.SECONDS);\n  }\n']",Buffer;Shuffle;Servers;Usage;Shuffle;List;shuffle;shuffle;Bitmap;Shuffle,1.1641532182693481e-09;9.677023626863956e-10;7.130438461899757e-10;6.984919309616089e-10;6.83940015733242e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.9831426218152046e-10,5,5,"[-5.841451168060303, -5.452736854553223, -4.702873706817627, -5.680408954620361, -5.373015880584717, -0.024610942229628563]",0.9756893515586853
2,"['  @Test\n  public void removeMetaTest() {\n    String appId = ""app_read_diskusage_data_without_report"";\n    Map<Long, byte[]> expectedData = Maps.newHashMap();\n    RssRegisterShuffleRequest rr1 =  new RssRegisterShuffleRequest(appId, 2,\n        Lists.newArrayList(new PartitionRange(0, 0)));\n    shuffleServerClient.registerShuffle(rr1);\n    RssRegisterShuffleRequest rr2 =  new RssRegisterShuffleRequest(appId, 3,\n        Lists.newArrayList(new PartitionRange(1, 1)));\n    shuffleServerClient.registerShuffle(rr2);\n\n    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();\n    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();\n\n    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(\n        2, 0, 1,30, 10 * 1024 * 1024, blockIdBitmap1, expectedData);\n    List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(\n        3, 1, 2,9, 10 * 1024 * 1024, blockIdBitmap2, expectedData);\n\n    sendSinglePartitionToShuffleServerWithoutReport(appId, 2, 2, 2, blocks1);\n    sendSinglePartitionToShuffleServerWithoutReport(appId, 3, 1,2, blocks2);\n    shuffleServers.get(0).getShuffleTaskManager().removeResources(appId);\n    DiskItem item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 2, 0);\n    Uninterruptibles.sleepUninterruptibly(1500, TimeUnit.MILLISECONDS);\n    Set<String> keys = item.getShuffleMetaSet();\n    assertTrue(keys.isEmpty());\n    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 3, 1);\n    keys = item.getShuffleMetaSet();\n    assertTrue(keys.isEmpty());\n\n    appId = ""app_read_diskusage_data_with_report"";\n    rr1 =  new RssRegisterShuffleRequest(appId, 0, Lists.newArrayList(new PartitionRange(0, 0)));\n    shuffleServerClient.registerShuffle(rr1);\n    blocks1 = createShuffleBlockList(\n        0, 0, 1,30, 10 * 1024, blockIdBitmap1, expectedData);\n    sendSinglePartitionToShuffleServer(appId, 0, 0, 2, blocks1);\n    shuffleServers.get(0).getShuffleTaskManager().removeResources(appId);\n    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 0);\n    Uninterruptibles.sleepUninterruptibly(1500, TimeUnit.MILLISECONDS);\n    keys = item.getShuffleMetaSet();\n    assertTrue(keys.isEmpty());\n  }\n']",sleep;ILLISECONDS;Long;report;Disk;Partition;Disk;bitmap;shuffle;expected,9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.90218448638916, -5.480193138122559, -4.680857181549072, -5.747430324554443, -5.398379802703857, -0.02417793869972229]",0.9761121273040771
2,['  @Test\n  public void resultCompareTest() throws Exception {\n    run();\n  }\n'],Compare;run;Exception;result,3.958120942115784e-09;4.656612873077393e-10;-1.1641532182693481e-09;-1.862645149230957e-09,5,5,"[-6.026246070861816, -5.661655902862549, -4.508116722106934, -5.887988090515137, -5.303491115570068, -0.024966325610876083]",0.9753427505493164
2,['  @Test\n  public void resultCompareTest() throws Exception {\n    run();\n  }\n'],Compare;run;Exception;result,3.958120942115784e-09;4.656612873077393e-10;-1.1641532182693481e-09;-1.862645149230957e-09,5,5,"[-6.026246070861816, -5.661655902862549, -4.508116722106934, -5.887988090515137, -5.303491115570068, -0.024966325610876083]",0.9753427505493164
2,"['  @Test\n  public void testUploadFile() {\n    FileOutputStream fileOut = null;\n    DataOutputStream dataOut = null;\n    try {\n      TemporaryFolder tmpDir = new TemporaryFolder();\n      tmpDir.create();\n      File file = tmpDir.newFile(""test"");\n      fileOut = new FileOutputStream(file);\n      dataOut = new DataOutputStream(fileOut);\n      byte[] buf = new byte[2096];\n      new Random().nextBytes(buf);\n      dataOut.write(buf);\n      dataOut.close();\n      fileOut.close();\n      String path = HDFS_URI + ""test"";\n      HdfsFileWriter writer = new HdfsFileWriter(new Path(path), conf);\n      long size = ShuffleStorageUtils.uploadFile(file, writer, 1024);\n      assertEquals(2096, size);\n      size = ShuffleStorageUtils.uploadFile(file, writer, 100);\n      assertEquals(2096, size);\n      writer.close();\n      tmpDir.delete();\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail();\n    }\n  }\n']",Temporary;Shuffle;upload;File;Output;Stream;close;Folder;next;size,7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.0372681319713593e-10,5,5,"[-6.008439064025879, -5.564951419830322, -4.596336364746094, -5.858789443969727, -5.4474663734436035, -0.023819712921977043]",0.97646164894104
2,"['  @Test\n  public void mergeSegmentsTest() {\n    List<FileBasedShuffleSegment> segments = Lists.newArrayList(\n        new FileBasedShuffleSegment(1, 0, 40, 0, 0, 0));\n    List<DataFileSegment> fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);\n    assertEquals(1, fileSegments.size());\n    for (DataFileSegment seg : fileSegments) {\n      assertEquals(0, seg.getOffset());\n      assertEquals(40, seg.getLength());\n      assertEquals(""path"", seg.getPath());\n      List<BufferSegment> bufferSegments = seg.getBufferSegments();\n      assertEquals(1, bufferSegments.size());\n      assertEquals(new BufferSegment(1, 0, 40, 0, 0, 0), bufferSegments.get(0));\n    }\n\n    segments = Lists.newArrayList(\n        new FileBasedShuffleSegment(1, 0, 40, 0, 0, 0),\n        new FileBasedShuffleSegment(2, 40, 40, 0, 0, 0),\n        new FileBasedShuffleSegment(3, 80, 20, 0, 0, 0));\n    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);\n    assertEquals(1, fileSegments.size());\n    for (DataFileSegment seg : fileSegments) {\n      assertEquals(0, seg.getOffset());\n      assertEquals(100, seg.getLength());\n      assertEquals(""path"", seg.getPath());\n      List<BufferSegment> bufferSegments = seg.getBufferSegments();\n      assertEquals(3, bufferSegments.size());\n      Set<Long> testedBlockIds = Sets.newHashSet();\n      for (BufferSegment segment : bufferSegments) {\n        if (segment.getBlockId() == 1) {\n          assertTrue(segment.equals(new BufferSegment(1, 0, 40, 0, 0, 0)));\n          testedBlockIds.add(1L);\n        } else if (segment.getBlockId() == 2) {\n          assertTrue(segment.equals(new BufferSegment(2, 40, 40, 0, 0, 0)));\n          testedBlockIds.add(2L);\n        } else if (segment.getBlockId() == 3) {\n          assertTrue(segment.equals(new BufferSegment(3, 80, 20, 0, 0, 0)));\n          testedBlockIds.add(3L);\n        }\n      }\n      assertEquals(3, testedBlockIds.size());\n    }\n\n    segments = Lists.newArrayList(\n        new FileBasedShuffleSegment(1, 0, 40, 0, 0, 0),\n        new FileBasedShuffleSegment(2, 40, 40, 0, 0, 0),\n        new FileBasedShuffleSegment(3, 80, 20, 0, 0, 0),\n        new FileBasedShuffleSegment(4, 100, 20, 0, 0, 0));\n    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);\n    assertEquals(2, fileSegments.size());\n    boolean tested = false;\n    for (DataFileSegment seg : fileSegments) {\n      if (seg.getOffset() == 100) {\n        tested = true;\n        assertEquals(20, seg.getLength());\n        assertEquals(""path"", seg.getPath());\n        List<BufferSegment> bufferSegments = seg.getBufferSegments();\n        assertEquals(1, bufferSegments.size());\n        assertTrue(bufferSegments.get(0).equals(new BufferSegment(4, 0, 20, 0, 0, 0)));\n      }\n    }\n    assertTrue(tested);\n\n    segments = Lists.newArrayList(\n        new FileBasedShuffleSegment(1, 0, 40, 0, 0, 0),\n        new FileBasedShuffleSegment(2, 40, 40, 0, 0, 0),\n        new FileBasedShuffleSegment(3, 80, 20, 0, 0, 0),\n        new FileBasedShuffleSegment(4, 100, 20, 0, 0, 0),\n        new FileBasedShuffleSegment(5, 120, 100, 0, 0, 0));\n    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);\n    assertEquals(2, fileSegments.size());\n    tested = false;\n    for (DataFileSegment seg : fileSegments) {\n      if (seg.getOffset() == 100) {\n        tested = true;\n        assertEquals(120, seg.getLength());\n        assertEquals(""path"", seg.getPath());\n        List<BufferSegment> bufferSegments = seg.getBufferSegments();\n        assertEquals(2, bufferSegments.size());\n        Set<Long> testedBlockIds = Sets.newHashSet();\n        for (BufferSegment segment : bufferSegments) {\n          if (segment.getBlockId() == 4) {\n            assertTrue(segment.equals(new BufferSegment(4, 0, 20, 0, 0, 0)));\n            testedBlockIds.add(4L);\n          } else if (segment.getBlockId() == 5) {\n            assertTrue(segment.equals(new BufferSegment(5, 20, 100, 0, 0, 0)));\n            testedBlockIds.add(5L);\n          }\n        }\n        assertEquals(2, testedBlockIds.size());\n      }\n    }\n    assertTrue(tested);\n\n    segments = Lists.newArrayList(\n        new FileBasedShuffleSegment(1, 10, 40, 0, 0, 0),\n        new FileBasedShuffleSegment(2, 80, 20, 0, 0, 0),\n        new FileBasedShuffleSegment(3, 500, 120, 0, 0, 0),\n        new FileBasedShuffleSegment(4, 700, 20, 0, 0, 0));\n    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);\n    assertEquals(3, fileSegments.size());\n    Set<Long> expectedOffset = Sets.newHashSet(10L, 500L, 700L);\n    for (DataFileSegment seg : fileSegments) {\n      if (seg.getOffset() == 10) {\n        validResult(seg, 90, 1, 40, 2, 70);\n        expectedOffset.remove(10L);\n      }\n      if (seg.getOffset() == 500) {\n        assertEquals(120, seg.getLength());\n        List<BufferSegment> bufferSegments = seg.getBufferSegments();\n        assertEquals(1, bufferSegments.size());\n        assertTrue(bufferSegments.get(0).equals(new BufferSegment(3, 0, 120, 0, 0, 0)));\n        expectedOffset.remove(500L);\n      }\n      if (seg.getOffset() == 700) {\n        assertEquals(20, seg.getLength());\n        List<BufferSegment> bufferSegments = seg.getBufferSegments();\n        assertEquals(1, bufferSegments.size());\n        assertTrue(bufferSegments.get(0).equals(new BufferSegment(4, 0, 20, 0, 0, 0)));\n        expectedOffset.remove(700L);\n      }\n    }\n    assertTrue(expectedOffset.isEmpty());\n\n    segments = Lists.newArrayList(\n        new FileBasedShuffleSegment(5, 500, 120, 0, 0, 0),\n        new FileBasedShuffleSegment(3, 630, 10, 0, 0, 0),\n        new FileBasedShuffleSegment(2, 80, 20, 0, 0, 0),\n        new FileBasedShuffleSegment(1, 10, 40, 0, 0, 0),\n        new FileBasedShuffleSegment(6, 769, 20, 0, 0, 0),\n        new FileBasedShuffleSegment(4, 700, 20, 0, 0, 0));\n    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);\n    assertEquals(4, fileSegments.size());\n    expectedOffset = Sets.newHashSet(10L, 500L, 630L, 700L);\n    for (DataFileSegment seg : fileSegments) {\n      if (seg.getOffset() == 10) {\n        validResult(seg, 90, 1, 40, 2, 70);\n        expectedOffset.remove(10L);\n      }\n      if (seg.getOffset() == 500) {\n        assertEquals(120, seg.getLength());\n        List<BufferSegment> bufferSegments = seg.getBufferSegments();\n        assertEquals(1, bufferSegments.size());\n        assertTrue(bufferSegments.get(0).equals(new BufferSegment(5, 0, 120, 0, 0, 0)));\n        expectedOffset.remove(500L);\n      }\n      if (seg.getOffset() == 630) {\n        assertEquals(10, seg.getLength());\n        List<BufferSegment> bufferSegments = seg.getBufferSegments();\n        assertEquals(1, bufferSegments.size());\n        assertTrue(bufferSegments.get(0).equals(new BufferSegment(3, 0, 10, 0, 0, 0)));\n        expectedOffset.remove(630L);\n      }\n      if (seg.getOffset() == 700) {\n        validResult(seg, 89, 4, 20, 6, 69);\n        expectedOffset.remove(700L);\n      }\n    }\n    assertTrue(expectedOffset.isEmpty());\n  }\n']",Segments;Shuffle;Shuffle;Equals;Offset;segments;new;Equals;Shuffle;Segment,8.585629984736443e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7471181713044643e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.914339065551758, -5.547859191894531, -4.657888412475586, -5.727624893188477, -5.390066623687744, -0.024189341813325882]",0.9761008620262146
2,"['  @Test\n  public void getShuffleDataPathWithRangeTest() {\n    String result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 1, 3, 6);\n    assertEquals(""appId/0/0-2"", result);\n    result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 2, 3, 6);\n    assertEquals(""appId/0/0-2"", result);\n    result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 3, 3, 6);\n    assertEquals(""appId/0/3-5"", result);\n    result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 5, 3, 6);\n    assertEquals(""appId/0/3-5"", result);\n    try {\n      ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 6, 3, 6);\n      fail(""shouldn\'t be here"");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().startsWith(""Can\'t generate ShuffleData Path""));\n    }\n    result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 6, 3, 7);\n    assertEquals(""appId/0/6-8"", result);\n  }\n']",get;Range;Shuffle;Shuffle;app;app;be;Message;result;Equals,3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.546585164964199e-10,5,5,"[-5.896290302276611, -5.656803607940674, -4.6995110511779785, -5.665882110595703, -5.271578311920166, -0.024231811985373497]",0.9760594367980957
2,"['  @Test\n  public void getStorageIndexTest() {\n    int index = ShuffleStorageUtils.getStorageIndex(3, ""abcde"", 3, 1);\n    assertEquals(2, index);\n    index = ShuffleStorageUtils.getStorageIndex(3, ""abcde"", 3, 4);\n    assertEquals(1, index);\n  }\n']",Shuffle;Equals;Storage;get;Utils;Index;Utils;index;Shuffle;Storage,2.3283064365386963e-09;1.8044374883174896e-09;1.57160684466362e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.947778701782227, -5.723526954650879, -4.658816337585449, -5.726383686065674, -5.26579475402832, -0.02406890131533146]",0.9762184619903564
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void testExceptionOnEmpty() {\n        new BwcVersions(asList(""foo"", ""bar""), Version.fromString(""7.0.0""));\n    }\n']",expected;from;Exception;Empty;as;Exception;class;bar;List;Illegal,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.999443054199219, -5.625133514404297, -4.605742454528809, -5.843421459197998, -5.381866455078125, -0.023861035704612732]",0.9764214158058167
2,"['    @Test(expected = IllegalStateException.class)\n    public void testExceptionOnNonCurrent() {\n        new BwcVersions(singletonList(formatVersionToLine(""6.5.0"")), Version.fromString(""7.0.0""));\n    }\n']",expected;Exception;Current;Versions;Version;List;Non;Line;from;On,1.862645149230957e-09;1.5133991837501526e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.975442886352539, -5.602781295776367, -4.6132636070251465, -5.835713863372803, -5.377691268920898, -0.02397218905389309]",0.9763128757476807
2,"['    @Test(expected = IllegalStateException.class)\n    public void testExceptionOnTooManyMajors() {\n        new BwcVersions(\n            asList(formatVersionToLine(""5.6.12""), formatVersionToLine(""6.5.0""), formatVersionToLine(""7.0.0"")),\n            Version.fromString(""6.5.0"")\n        );\n    }\n']",Versions;Version;Version;class;Version;Many;format;as;format;Illegal,1.6298145055770874e-09;1.2223608791828156e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.975094318389893, -5.521520614624023, -4.622842788696289, -5.831796169281006, -5.430351734161377, -0.02396509051322937]",0.9763197898864746
2,"['    @Test\n    public void whenDependencyDoesntExistThenShouldDeleteDependencySha() throws IOException, NoSuchAlgorithmException {\n\n        File unusedSha = createFileIn(getLicensesDir(project), ""test.sha1"", """");\n        task.updateShas();\n\n        assertFalse(unusedSha.exists());\n    }\n']",ependency;IOException;No;Such;Doesnt;Sh;Shas;task;unused;Licenses,3.14321368932724e-09;1.1350493878126144e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.990025997161865, -5.571022033691406, -4.633196830749512, -5.854285717010498, -5.425865650177002, -0.023578496649861336]",0.9766973257064819
2,"['    @Test\n    public void whenDependencyExistsButShaNotThenShouldCreateNewShaFile() throws IOException, NoSuchAlgorithmException {\n        project.getDependencies().add(""compile"", dependency);\n\n        getLicensesDir(project).mkdir();\n        task.updateShas();\n\n        Path groovySha = Files.list(getLicensesDir(project).toPath()).findFirst().get();\n\n        assertTrue(groovySha.toFile().getName().startsWith(""groovy-all""));\n    }\n']",Licenses;groovy;But;add;Exists;Algorithm;Sh;starts;list;New,1.6298145055770874e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.923677921295166, -5.560354232788086, -4.681561470031738, -5.7614426612854, -5.355101585388184, -0.023942161351442337]",0.9763422012329102
2,"['    @Test\n    public void whenDependencyAndWrongShaExistsThenShouldNotOverwriteShaFile() throws IOException, NoSuchAlgorithmException {\n        project.getDependencies().add(""compile"", dependency);\n\n        File groovyJar = task.getParentTask().getDependencies().getFiles().iterator().next();\n        String groovyShaName = groovyJar.getName() + "".sha1"";\n\n        File groovySha = createFileIn(getLicensesDir(project), groovyShaName, ""content"");\n        task.updateShas();\n\n        assertThat(FileUtils.readFileToString(groovySha), equalTo(""content""));\n    }\n']",Overwrite;read;Dir;Sh;project;Should;Not;ependencies;Exception;Jar,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.907459735870361, -5.570499420166016, -4.6951093673706055, -5.725414752960205, -5.338263034820557, -0.024019906297326088]",0.9762662649154663
2,"['    @Test\n    public void whenLicensesDirDoesntExistThenShouldThrowException() throws IOException, NoSuchAlgorithmException {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""isn\'t a valid directory""));\n\n        task.updateShas();\n    }\n']",expect;No;Exist;Then;Message;Dir;Throw;update;Doesnt;Gradle,2.9103830456733704e-09;2.444721758365631e-09;1.862645149230957e-09;1.6298145055770874e-09;1.4551915228366852e-09;1.3387762010097504e-09;8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-5.932587146759033, -5.517700672149658, -4.646402835845947, -5.841899871826172, -5.365649700164795, -0.024129297584295273]",0.9761595129966736
2,"['    @Test\n    public void givenProjectWithLicensesDirButNoDependenciesThenShouldThrowException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""exists, but there are no dependencies""));\n\n        getLicensesDir(project).mkdir();\n        task.get().checkDependencies();\n    }\n']",mkdir;Gradle;But;No;Project;given;dependencies;Licenses;no;are,2.270098775625229e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.957296848297119, -5.577606678009033, -4.643884181976318, -5.821037292480469, -5.355849742889404, -0.02395845577120781]",0.9763262867927551
2,"['    @Test\n    public void givenProjectWithoutLicensesDirButWithDependenciesThenShouldThrowException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""does not exist, but there are dependencies""));\n\n        project.getDependencies().add(""compile"", dependency);\n        task.get().checkDependencies();\n    }\n']",Gradle;ependencies;ependencies;Exception;Throw;But;there;Message;Licenses;exist,1.6298145055770874e-09;9.604264050722122e-10;8.440110832452774e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.9780659675598145, -5.560316562652588, -4.622756004333496, -5.839291572570801, -5.40028715133667, -0.023916788399219513]",0.9763668179512024
2,['    @Test\n    public void givenProjectWithoutLicensesDirNorDependenciesThenShouldReturnSilently() throws Exception {\n        task.get().checkDependencies();\n    }\n'],ependencies;check;Then;task;Dir;Silently;Licenses;Nor;Return;get,2.9103830456733704e-09;2.561137080192566e-09;1.862645149230957e-09;1.1641532182693481e-09;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;-3.7834979593753815e-10,5,5,"[-6.032549858093262, -5.552425384521484, -4.536860942840576, -5.928676605224609, -5.425602436065674, -0.024342691525816917]",0.9759511947631836
2,"['    @Test\n    public void givenProjectWithDependencyButNoShaFileThenShouldReturnException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""Missing SHA for ""));\n\n        File licensesDir = getLicensesDir(project);\n        createFileIn(licensesDir, ""groovy-all-LICENSE.txt"", PERMISSIVE_LICENSE_TEXT);\n        createFileIn(licensesDir, ""groovy-all-NOTICE.txt"", """");\n\n        project.getDependencies().add(""compile"", project.getDependencies().localGroovy());\n        task.get().checkDependencies();\n    }\n']",groovy;ependency;Licenses;Exception;Return;task;But;local;expected;ICENSE,1.3969838619232178e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10,5,5,"[-5.912904739379883, -5.525350570678711, -4.664239883422852, -5.769230842590332, -5.355391502380371, -0.024251708760857582]",0.9760400056838989
2,"['    @Test\n    public void givenProjectWithDependencyButNoLicenseFileThenShouldReturnException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""Missing LICENSE for ""));\n\n        project.getDependencies().add(""compile"", project.getDependencies().localGroovy());\n\n        getLicensesDir(project).mkdir();\n        updateShas.updateShas();\n        task.get().checkDependencies();\n    }\n']",Should;License;Exception;LICENSE;ependencies;Exception;mkdir;update;No;Message,2.3283064365386963e-09;1.1641532182693481e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.950461387634277, -5.5491132736206055, -4.646126747131348, -5.795065879821777, -5.371007919311523, -0.02407367341220379]",0.976213812828064
2,"['    @Test\n    public void givenProjectWithDependencyButNoNoticeFileThenShouldReturnException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""Missing NOTICE for ""));\n\n        project.getDependencies().add(""compile"", dependency);\n\n        createFileIn(getLicensesDir(project), ""groovy-all-LICENSE.txt"", PERMISSIVE_LICENSE_TEXT);\n\n        updateShas.updateShas();\n        task.get().checkDependencies();\n    }\n']",update;TEXT;expect;ependency;create;Shas;expected;ependencies;Then;project,8.731149137020111e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.941707611083984, -5.546449661254883, -4.657639026641846, -5.780008316040039, -5.374477386474609, -0.02402607537806034]",0.976260244846344
2,"['    @Test\n    public void givenProjectWithStrictDependencyButNoSourcesFileThenShouldReturnException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""Missing SOURCES for ""));\n\n        project.getDependencies().add(""compile"", dependency);\n\n        createFileIn(getLicensesDir(project), ""groovy-all-LICENSE.txt"", STRICT_LICENSE_TEXT);\n        createFileIn(getLicensesDir(project), ""groovy-all-NOTICE.txt"", """");\n\n        updateShas.updateShas();\n        task.get().checkDependencies();\n    }\n']",ICENSE;NOTICE;But;ependencies;project;Licenses;contains;SOURCES;Strict;ependencies,1.280568540096283e-09;1.280568540096283e-09;1.1350493878126144e-09;8.149072527885437e-10;6.984919309616089e-10;6.83940015733242e-10;6.693881005048752e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.899042129516602, -5.519619464874268, -4.674877643585205, -5.748018741607666, -5.3524885177612305, -0.0242942925542593]",0.9759984612464905
2,"['    @Test\n    public void givenProjectWithStrictDependencyAndEverythingInOrderThenShouldReturnSilently() throws Exception {\n        project.getDependencies().add(""compile"", dependency);\n\n        createFileIn(getLicensesDir(project), ""groovy-all-LICENSE.txt"", STRICT_LICENSE_TEXT);\n        createFileIn(getLicensesDir(project), ""groovy-all-NOTICE.txt"", """");\n        createFileIn(getLicensesDir(project), ""groovy-all-SOURCES.txt"", """");\n\n        updateShas.updateShas();\n        task.get().checkDependencies();\n    }\n']",groovy;ependency;update;task;TEXT;Exception;all;add;Dir;txt,1.280568540096283e-09;9.89530235528946e-10;9.604264050722122e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.930870056152344, -5.52972936630249, -4.658467769622803, -5.787834167480469, -5.374944686889648, -0.024087753146886826]",0.9762000441551208
2,"['    @Test\n    public void givenProjectWithDependencyAndEverythingInOrderThenShouldReturnSilently() throws Exception {\n        project.getDependencies().add(""compile"", dependency);\n\n        File licensesDir = getLicensesDir(project);\n\n        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");\n        task.get().checkDependencies();\n    }\n']",Exception;compile;In;ependency;all;dependency;Files;add;given;Dir,1.2078089639544487e-09;9.604264050722122e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.993630886077881, -5.53194522857666, -4.614412307739258, -5.85222053527832, -5.426018238067627, -0.023918651044368744]",0.9763650298118591
2,"['    @Test\n    public void givenProjectWithALicenseButWithoutTheDependencyThenShouldThrowException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""Unused license ""));\n\n        project.getDependencies().add(""compile"", dependency);\n\n        File licensesDir = getLicensesDir(project);\n        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");\n        createFileIn(licensesDir, ""non-declared-LICENSE.txt"", """");\n\n        task.get().checkDependencies();\n    }\n']",Exception;expect;given;In;expected;ependency;File;declared;Gradle;Exception,9.604264050722122e-10;7.275957614183426e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10,5,5,"[-5.9179253578186035, -5.542449474334717, -4.666838645935059, -5.7537922859191895, -5.342104434967041, -0.024257991462945938]",0.9760338664054871
2,"['    @Test\n    public void givenProjectWithANoticeButWithoutTheDependencyThenShouldThrowException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""Unused notice ""));\n\n        project.getDependencies().add(""compile"", dependency);\n\n        File licensesDir = getLicensesDir(project);\n        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");\n        createFileIn(licensesDir, ""non-declared-NOTICE.txt"", """");\n\n        task.get().checkDependencies();\n    }\n']",The;NOTICE;Exception;But;Should;Without;Unused;declared;Default;Throw,1.3969838619232178e-09;1.280568540096283e-09;1.2223608791828156e-09;1.076841726899147e-09;9.313225746154785e-10;8.731149137020111e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.914148807525635, -5.542285442352295, -4.67030668258667, -5.751315593719482, -5.338235378265381, -0.02426287904381752]",0.976029098033905
2,"['    @Test\n    public void givenProjectWithAShaButWithoutTheDependencyThenShouldThrowException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""Unused sha files found: \\n""));\n\n        project.getDependencies().add(""compile"", dependency);\n\n        File licensesDir = getLicensesDir(project);\n        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");\n        createFileIn(licensesDir, ""non-declared.sha1"", """");\n\n        task.get().checkDependencies();\n    }\n']",The;sha;Message;Should;Unused;Exception;Files;ASha;expect;Project,2.3283064365386963e-09;8.440110832452774e-10;6.984919309616089e-10;6.402842700481415e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.929271697998047, -5.5554399490356445, -4.667017936706543, -5.759180545806885, -5.351150035858154, -0.02411184273660183]",0.9761765003204346
2,"['    @Test\n    public void givenProjectWithADependencyWithWrongShaThenShouldThrowException() throws Exception {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""SHA has changed! Expected ""));\n\n        project.getDependencies().add(""compile"", dependency);\n\n        File licensesDir = getLicensesDir(project);\n        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");\n\n        Path groovySha = Files.list(licensesDir.toPath()).filter(file -> file.toFile().getName().contains(""sha"")).findFirst().get();\n\n        Files.write(groovySha, new byte[] { 1 }, StandardOpenOption.CREATE);\n\n        task.get().checkDependencies();\n    }\n']",licenses;Sh;Option;sha;groovy;Standard;contains;Exception;Exception;Expected,6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.43833414465189e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.899029731750488, -5.480937480926514, -4.6909332275390625, -5.724550247192383, -5.384546756744385, -0.024228554219007492]",0.9760625958442688
2,"['    @Test\n    public void givenProjectWithADependencyMappingThenShouldReturnSilently() throws Exception {\n        project.getDependencies().add(""compile"", dependency);\n\n        File licensesDir = getLicensesDir(project);\n        createAllDefaultDependencyFiles(licensesDir, ""groovy"");\n\n        Map<String, String> mappings = new HashMap<>();\n        mappings.put(""from"", ""groovy-all"");\n        mappings.put(""to"", ""groovy"");\n\n        task.get().mapping(mappings);\n        task.get().checkDependencies();\n    }\n']",from;groovy;to;licenses;Project;Silently;Files;put;add;Default,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;7.421476766467094e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.958421230316162, -5.522128105163574, -4.648193836212158, -5.7951860427856445, -5.404626846313477, -0.023983478546142578]",0.9763018488883972
2,"['    @Test\n    public void givenProjectWithAIgnoreShaConfigurationAndNoShaFileThenShouldReturnSilently() throws Exception {\n        project.getDependencies().add(""compile"", dependency);\n\n        File licensesDir = getLicensesDir(project);\n        createFileIn(licensesDir, ""groovy-all-LICENSE.txt"", PERMISSIVE_LICENSE_TEXT);\n        createFileIn(licensesDir, ""groovy-all-NOTICE.txt"", """");\n\n        task.get().ignoreSha(""groovy-all"");\n        task.get().checkDependencies();\n    }\n']",Licenses;groovy;ICENSE;No;ependencies;task;Dir;Dir;licenses;given,2.444721758365631e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.927000999450684, -5.528266429901123, -4.658780574798584, -5.783903121948242, -5.363070487976074, -0.024170374497771263]",0.9761195182800293
2,"['    @Test\n    public void givenProjectWithoutLicensesDirWhenAskingForShaFilesThenShouldThrowException() {\n        expectedException.expect(GradleException.class);\n        expectedException.expectMessage(containsString(""isn\'t a valid directory""));\n\n        task.get().getShaFiles();\n    }\n']",Dir;Asking;For;When;Project;Files;Throw;Exception;task;directory,1.3969838619232178e-09;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.941754341125488, -5.5658416748046875, -4.633033275604248, -5.814274311065674, -5.352705001831055, -0.02418922446668148]",0.9761009812355042
2,['        @Test\n        public void annotatedTestMethod() {\n\n        }\n'],Method;annotated,1.1641532182693481e-09;-1.3969838619232178e-09,5,5,"[-6.000474452972412, -5.5265350341796875, -4.600595474243164, -5.860689640045166, -5.418142318725586, -0.024075301364064217]",0.976212203502655
2,['    @Test\n    public void annotatedTestMethod() {\n\n    }\n'],annotated;Method,5.587935447692871e-09;-1.862645149230957e-09,5,5,"[-6.045373916625977, -5.63494873046875, -4.544713020324707, -5.92183256149292, -5.378954887390137, -0.024145007133483887]",0.9761441349983215
2,"['    @Test\n    public void testPluginInstalled() {\n        try (TransportClient client = new PreBuiltTransportClient(Settings.EMPTY)) {\n            Settings settings = client.settings();\n            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));\n            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.get(settings));\n        }\n    }\n']",EMPTY;client;Module;TRANSPORT;TRANSPORT;TYPE;Transport;Module;TYPE;NAME,9.89530235528946e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.910409927368164, -5.550442695617676, -4.668461322784424, -5.787502288818359, -5.346897125244141, -0.024100204929709435]",0.9761880040168762
2,"['    @Test\n    public void testInstallPluginTwice() {\n        for (Class<? extends Plugin> plugin :\n                Arrays.asList(ParentJoinPlugin.class, ReindexPlugin.class, PercolatorPlugin.class,\n                    MustachePlugin.class)) {\n            try {\n                new PreBuiltTransportClient(Settings.EMPTY, plugin);\n                fail(""exception expected"");\n            } catch (IllegalArgumentException ex) {\n                assertTrue(""Expected message to start with [plugin already exists: ] but was instead ["" + ex.getMessage() + ""]"",\n                        ex.getMessage().startsWith(""plugin already exists: ""));\n            }\n        }\n    }\n']",Install;message;extends;True;Mustache;was;ex;exists;to;Expected,8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.950621128082275, -5.436215400695801, -4.638572692871094, -5.800595760345459, -5.468450546264648, -0.02416478842496872]",0.9761248230934143
2,"['    @TestGroup(enabled = false, sysProperty = ""tests.awaitsfix"")\n    public void setup() throws Exception {\n        assumeFalse(failed); // skip rest of tests once one fails\n\n        sh.reset();\n        if (distribution().hasJdk == false) {\n            Platforms.onLinux(() -> sh.getEnv().put(""JAVA_HOME"", systemJavaHome));\n            Platforms.onWindows(() -> sh.getEnv().put(""JAVA_HOME"", systemJavaHome));\n        }\n    }\n']",of;Group;enabled;on;setup;awaitsfix;Exception;False;if;Java,4.889443516731262e-09;1.979060471057892e-09;1.280568540096283e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.921916484832764, -5.523599147796631, -4.670798301696777, -5.785854816436768, -5.3661417961120605, -0.024066340178251266]",0.976220965385437
2,"['@TestRuleLimitSysouts.Limit(bytes = 14000)\n    public void testRestClient() throws URISyntaxException, IOException {\n        final String baseUrl = buildBaseUrl();\n\n        try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n            final String endpoint = baseUrl + ""/employees/1"";\n            logger.info(""Connecting to uri: "" + baseUrl);\n\n            final HttpPut put = new HttpPut(new URI(endpoint));\n\n            final String body = ""{""\n                + ""  \\""first_name\\"": \\""John\\"",""\n                + ""  \\""last_name\\"": \\""Smith\\"",""\n                + ""  \\""age\\"": 25,""\n                + ""  \\""about\\"": \\""I love to go rock climbing\\"",""\n                + ""  \\""interests\\"": [""\n                + ""    \\""sports\\"",""\n                + ""    \\""music\\""""\n                + ""  ]""\n                + ""}"";\n\n            put.setEntity(new StringEntity(body, ContentType.APPLICATION_JSON));\n            try (CloseableHttpResponse response = client.execute(put)) {\n                int status = response.getStatusLine().getStatusCode();\n                assertThat(\n                    ""expected a 201 response but got: "" + status + "" - body: "" + EntityUtils.toString(response.getEntity()),\n                    status,\n                    equalTo(201)\n                );\n            }\n\n            logger.info(""Fetching resource at "" + endpoint);\n\n            final HttpGet get = new HttpGet(new URI(endpoint));\n            try (\n                CloseableHttpResponse response = client.execute(get);\n                XContentParser parser = JsonXContent.jsonXContent.createParser(\n                    new NamedXContentRegistry(ClusterModule.getNamedXWriteables()),\n                    DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                    response.getEntity().getContent()\n                )\n            ) {\n                final Map<String, Object> map = parser.map();\n                assertThat(map.get(""first_name""), equalTo(""John""));\n                assertThat(map.get(""last_name""), equalTo(""Smith""));\n                assertThat(map.get(""age""), equalTo(25));\n                assertThat(map.get(""about""), equalTo(""I love to go rock climbing""));\n                final Object interests = map.get(""interests"");\n                assertThat(interests, instanceOf(List.class));\n                @SuppressWarnings(""unchecked"")\n                final List<String> interestsAsList = (List<String>) interests;\n                assertThat(interestsAsList, containsInAnyOrder(""sports"", ""music""));\n            }\n        }\n    }\n']",Rule;Limit;interest;That;go;Content;Http;bytes;new;employees,1.862645149230957e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.837623469531536e-10;2.6193447411060333e-10,5,5,"[-5.869231700897217, -5.249183177947998, -4.683035373687744, -5.714898109436035, -5.471435070037842, -0.025142807513475418]",0.9751705527305603
2,"['    @TestGroup(enabled = false, sysProperty = OpenSearchIntegTestCase.SYSPROP_THIRDPARTY)\n    public ClusterService clusterService() {\n        return internalCluster().clusterService();\n    }\n']",Cluster;Case;SYSP;Search;false;cluster;Service;Property;Open;Service,2.2118911147117615e-09;1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-6.004698276519775, -5.600071907043457, -4.5880937576293945, -5.8951945304870605, -5.3883376121521, -0.02394344098865986]",0.9763408303260803
2,"['    @TestLogging(\n    public void testTracerLog() throws Exception {\n        TransportRequestHandler<TransportRequest> handler = (request, channel, task) -> channel.sendResponse(new StringMessageResponse(""""));\n        TransportRequestHandler<StringMessageRequest> handlerWithError = (request, channel, task) -> {\n            if (request.timeout() > 0) {\n                Thread.sleep(request.timeout);\n            }\n            channel.sendResponse(new RuntimeException(""""));\n\n        };\n\n        TransportResponseHandler<StringMessageResponse> noopResponseHandler = new TransportResponseHandler<StringMessageResponse>() {\n\n            @Override\n            public StringMessageResponse read(StreamInput in) throws IOException {\n                return new StringMessageResponse(in);\n            }\n']",noop;Input;Exception;timeout;Transport;send;channel;Message;Request;channel,8.294591680169106e-10;5.093170329928398e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.927651882171631, -5.270620822906494, -4.626298904418945, -5.817511081695557, -5.507504940032959, -0.024935631081461906]",0.9753726720809937
2,"['    @Test\n    public void testReproducible() throws IOException {\n        if (ITER++ == 0) {\n            CLUSTER_SEED = cluster().seed();\n            for (int i = 0; i < SEQUENCE.length; i++) {\n                SEQUENCE[i] = randomLong();\n            }\n        } else {\n            assertEquals(CLUSTER_SEED, Long.valueOf(cluster().seed()));\n            for (int i = 0; i < SEQUENCE.length; i++) {\n                assertThat(SEQUENCE[i], equalTo(randomLong()));\n            }\n        }\n    }\n']",Reproducible;SEQUENCE;ITER;SEQUENCE;Long;CLUSTER;value;SEED;SEQUENCE;if,1.3969838619232178e-09;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.6007106751203537e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.90641975402832, -5.51436710357666, -4.683156967163086, -5.752142429351807, -5.376332759857178, -0.02408868446946144]",0.9761991500854492
2,"['        @TestLogging(value = ""xyz:TRACE,foo:WARN,foo.bar:ERROR"", reason = ""testing TestLogging method annotations"")\n        public void annotatedTestMethod() {\n\n        }\n']",TRACE;method;WARN;annotations;value;foo;Method;ERROR;testing;annotated,1.862645149230957e-09;1.7462298274040222e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.923497676849365, -5.589039325714111, -4.718386650085449, -5.712620258331299, -5.297776222229004, -0.023934828117489815]",0.9763492345809937
2,"['        @TestLogging(value = ""abc:TRACE,xyz:DEBUG"", reason = ""testing TestLogging method annotations"")\n        public void annotatedTestMethod2() {\n\n        }\n']",xy;DEBUG;Logging;value;Logging;Method;TRACE;abc;method;annotations,2.7939677238464355e-09;1.862645149230957e-09;1.280568540096283e-09;9.313225746154785e-10;3.4924596548080444e-10;3.4924596548080444e-10;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10,5,5,"[-5.960690975189209, -5.524526596069336, -4.676517486572266, -5.79158878326416, -5.400571346282959, -0.023723559454083443]",0.9765556454658508
2,"['        @TestIssueLogging(value = ""xyz:TRACE,foo:WARN,foo.bar:ERROR"", issueUrl = ""https://example.com"")\n        public void annotatedTestMethod() {\n\n        }\n']",WARN;TRACE;xy;Logging;Issue;ERROR;com;https;Method;value,2.3283064365386963e-09;1.7462298274040222e-09;1.3969838619232178e-09;1.3387762010097504e-09;9.313225746154785e-10;6.984919309616089e-10;8.731149137020111e-11;0.0;0.0;-2.3283064365386963e-10,5,5,"[-5.952218055725098, -5.683122634887695, -4.731893062591553, -5.688701629638672, -5.1993231773376465, -0.0240027979016304]",0.9762829542160034
2,"['        @TestIssueLogging(value = ""abc:TRACE,xyz:DEBUG"", issueUrl = ""https://example.com"")\n        public void annotatedTestMethod2() {\n\n        }\n']",Issue;https;example;value;xy;com;DEBUG;Method;abc;issue,3.725290298461914e-09;1.5133991837501526e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;-6.984919309616089e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.862645149230957e-09;-1.862645149230957e-09,5,5,"[-5.984263896942139, -5.666715145111084, -4.701328277587891, -5.74992561340332, -5.243434429168701, -0.023806676268577576]",0.9764744639396667
2,"['        @TestIssueLogging(value =""foo.bar:ERROR"", issueUrl = ""https://example.com"")\n        public void annotatedTestMethod() {\n\n        }\n']",Issue;annotated;Url;Logging;issue;Method;value;bar;com;https,2.444721758365631e-09;1.979060471057892e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;6.984919309616089e-10;4.656612873077393e-10;0.0;-4.656612873077393e-10;-1.3969838619232178e-09,5,5,"[-6.0035881996154785, -5.639130592346191, -4.669161796569824, -5.821062088012695, -5.3240132331848145, -0.023517834022641182]",0.9767564535140991
2,"['        @TestIssueLogging(value = ""xyz:DEBUG"", issueUrl = ""https://example.com"")\n        public void annotatedTestMethod2() {\n\n        }\n']",issue;Url;value;annotated;com;https;DEBUG;Method;Logging;xy,2.0954757928848267e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;2.3283064365386963e-10;-3.4924596548080444e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.862645149230957e-09;-1.862645149230957e-09,5,5,"[-5.998607635498047, -5.618161201477051, -4.66835355758667, -5.809412956237793, -5.325586795806885, -0.02364322915673256]",0.9766340851783752
2,"['        @TestLogging(value = ""abc:INFO:WARN"", reason = ""testing an invalid TestLogging method annotation"")\n        public void invalidMethod() {\n\n        }\n']",value;annotation;Method;testing;method;invalid;reason;Logging;invalid;INFO,1.0477378964424133e-09;8.149072527885437e-10;5.238689482212067e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.9103830456733704e-10;-2.9103830456733704e-10;-6.984919309616089e-10;-1.1641532182693481e-09,5,5,"[-5.976975440979004, -5.588437557220459, -4.673923969268799, -5.8051958084106445, -5.374199390411377, -0.023534134030342102]",0.9767406582832336
2,"['        @TestIssueLogging(value = ""abc:INFO:WARN"", issueUrl = ""https://example.com"")\n        public void invalidMethod() {\n\n        }\n']",WARN;Issue;abc;Logging;https;com;Method;invalid;Url;value,4.190951585769653e-09;2.7939677238464355e-09;2.7939677238464355e-09;2.0954757928848267e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;1.7462298274040222e-10;-4.656612873077393e-10,5,5,"[-5.997155666351318, -5.661129474639893, -4.683074474334717, -5.787657260894775, -5.29325008392334, -0.023581406101584435]",0.9766944646835327
2,"['    @TestLogging(reason=""ensure logging happens"", value=""org.opensearch.discovery.HandshakingTransportAddressConnector:INFO"")\n    public void testLogsFullConnectionFailureAfterSuccessfulHandshake() throws Exception {\n\n        remoteNode = new DiscoveryNode(""remote-node"", buildNewFakeTransportAddress(), Version.CURRENT);\n        remoteClusterName = ""local-cluster"";\n        discoveryAddress = buildNewFakeTransportAddress();\n\n        fullConnectionFailure = new ConnectTransportException(remoteNode, ""simulated"", new OpenSearchException(""root cause""));\n\n        FailureListener failureListener = new FailureListener();\n\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""message"",\n                HandshakingTransportAddressConnector.class.getCanonicalName(),\n                Level.WARN,\n                ""*completed handshake with [*] but followup connection failed*""));\n        Logger targetLogger = LogManager.getLogger(HandshakingTransportAddressConnector.class);\n        Loggers.addAppender(targetLogger, mockAppender);\n\n        try {\n            handshakingTransportAddressConnector.connectToRemoteMasterNode(discoveryAddress, failureListener);\n            failureListener.assertFailure();\n            mockAppender.assertAllExpectationsMatched();\n        } finally {\n            Loggers.removeAppender(targetLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n']",simulated;Successful;ensure;Node;Connector;Mock;Transport;Version;Transport;iscovery,1.3969838619232178e-09;1.2223608791828156e-09;7.712515071034431e-10;6.402842700481415e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.918210506439209, -5.311267852783203, -4.616885662078857, -5.838068962097168, -5.517238140106201, -0.024744343012571335]",0.975559413433075
2,"['    @TestLogging(value = ""org.opensearch.cluster.service:TRACE"", reason = ""to ensure that we log cluster state events on TRACE level"")\n    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test1 start"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""executing cluster state update for [test1]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test1 computation"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""took [1s] to compute cluster state update for [test1]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test1 notification"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""took [0s] to notify listeners on unchanged cluster state for [test1]""));\n\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test2 start"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""executing cluster state update for [test2]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test2 failure"",\n                MasterService.class.getCanonicalName(),\n                Level.TRACE,\n                ""failed to execute cluster state update (on version: [*], uuid: [*]) for [test2]*""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test2 computation"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""took [2s] to compute cluster state update for [test2]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test2 notification"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""took [0s] to notify listeners on unchanged cluster state for [test2]""));\n\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test3 start"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""executing cluster state update for [test3]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test3 computation"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""took [3s] to compute cluster state update for [test3]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test3 notification"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""took [4s] to notify listeners on successful publication of cluster state (version: *, uuid: *) for [test3]""));\n\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test4"",\n                MasterService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""executing cluster state update for [test4]""));\n\n        Logger clusterLogger = LogManager.getLogger(MasterService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try (MasterService masterService = createMasterService(true)) {\n            masterService.submitStateUpdateTask(""test1"", new ClusterStateUpdateTask() {\n                @Override\n                public ClusterState execute(ClusterState currentState) {\n                    relativeTimeInMillis += TimeValue.timeValueSeconds(1).millis();\n                    return currentState;\n                }\n']",opensearch;Logging;mock;Expectation;value;Service;state;Mock;that;reason,8.003553375601768e-10;5.675246939063072e-10;5.238689482212067e-10;5.093170329928398e-10;4.0745362639427185e-10;4.001776687800884e-10;3.5652192309498787e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.899385929107666, -5.347901344299316, -4.639801502227783, -5.7944793701171875, -5.495048999786377, -0.02461070939898491]",0.9756897687911987
2,"['    @TestLogging(value = ""org.opensearch.cluster.service:WARN"", reason = ""to ensure that we log cluster state events on WARN level"")\n    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n            new MockLogAppender.UnseenEventExpectation(\n                ""test1 shouldn\'t log because it was fast enough"",\n                MasterService.class.getCanonicalName(),\n                Level.WARN,\n                ""*took*test1*""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test2"",\n                MasterService.class.getCanonicalName(),\n                Level.WARN,\n                ""*took [*], which is over [10s], to compute cluster state update for [test2]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test3"",\n                MasterService.class.getCanonicalName(),\n                Level.WARN,\n                ""*took [*], which is over [10s], to compute cluster state update for [test3]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test4"",\n                MasterService.class.getCanonicalName(),\n                Level.WARN,\n                ""*took [*], which is over [10s], to compute cluster state update for [test4]""));\n        mockAppender.addExpectation(\n            new MockLogAppender.UnseenEventExpectation(\n                ""test5 should not log despite publishing slowly"",\n                MasterService.class.getCanonicalName(),\n                Level.WARN,\n                ""*took*test5*""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test6 should log due to slow and failing publication"",\n                MasterService.class.getCanonicalName(),\n                Level.WARN,\n                ""took [*] and then failed to publish updated cluster state (version: *, uuid: *) for [test6]:*""));\n\n        Logger clusterLogger = LogManager.getLogger(MasterService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try (MasterService masterService = new MasterService(Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), MasterServiceTests.class.getSimpleName())\n            .put(Node.NODE_NAME_SETTING.getKey(), ""test_node"")\n            .build(), new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS), threadPool)) {\n\n            final DiscoveryNode localNode = new DiscoveryNode(""node1"", buildNewFakeTransportAddress(), emptyMap(),\n                emptySet(), Version.CURRENT);\n            final ClusterState initialClusterState = ClusterState.builder(new ClusterName(MasterServiceTests.class.getSimpleName()))\n                .nodes(DiscoveryNodes.builder().add(localNode).localNodeId(localNode.getId()).masterNodeId(localNode.getId()))\n                .blocks(ClusterBlocks.EMPTY_CLUSTER_BLOCK).build();\n            final AtomicReference<ClusterState> clusterStateRef = new AtomicReference<>(initialClusterState);\n            masterService.setClusterStatePublisher((event, publishListener, ackListener) -> {\n                if (event.source().contains(""test5"")) {\n                    relativeTimeInMillis += MasterService.MASTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING.get(Settings.EMPTY).millis()\n                        + randomLongBetween(1, 1000000);\n                }\n                if (event.source().contains(""test6"")) {\n                    relativeTimeInMillis += MasterService.MASTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING.get(Settings.EMPTY).millis()\n                        + randomLongBetween(1, 1000000);\n                    throw new OpenSearchException(""simulated error during slow publication which should trigger logging"");\n                }\n                clusterStateRef.set(event.state());\n                publishListener.onResponse(null);\n            });\n            masterService.setClusterStateSupplier(clusterStateRef::get);\n            masterService.start();\n\n            final CountDownLatch latch = new CountDownLatch(6);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            masterService.submitStateUpdateTask(""test1"", new ClusterStateUpdateTask() {\n                @Override\n                public ClusterState execute(ClusterState currentState) {\n                    relativeTimeInMillis += randomLongBetween(0L,\n                        MasterService.MASTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING.get(Settings.EMPTY).millis());\n                    return currentState;\n                }\n']",ook;Appender;Long;Mock;to;opensearch;cluster;Appender;Seen;Level,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;3.055902197957039e-10,5,5,"[-5.904616832733154, -5.346412658691406, -4.642539024353027, -5.790887355804443, -5.5031819343566895, -0.024553366005420685]",0.9757457375526428
2,"['    @TestLogging(value = ""org.opensearch.cluster.service:TRACE"", reason = ""to ensure that we log cluster state events on TRACE level"")\n    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        ""test1"",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        ""*processing [test1]: took [1s] no change in cluster state""));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        ""test2"",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        ""*failed to execute cluster state applier in [2s]*""));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                ""test3"",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                ""*processing [test3]: took [0s] no change in cluster state*""));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(""test1"",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n']",TRACE;TRACE;TRACE;level;Expectation;org;opensearch;took;DEBUG;add,1.0186340659856796e-09;8.440110832452774e-10;6.402842700481415e-10;3.92901711165905e-10;3.8562575355172157e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9831426218152046e-10,5,5,"[-5.892942428588867, -5.321640491485596, -4.640865802764893, -5.788886547088623, -5.503678798675537, -0.02472933940589428]",0.9755738973617554
2,"['    @TestLogging(value = ""org.opensearch.cluster.service:WARN"", reason = ""to ensure that we log cluster state events on WARN level"")\n    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        ""test1 shouldn\'t see because setting is too low"",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        ""*cluster state applier task [test1] took [*] which is above the warn threshold of *""));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        ""test2"",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        ""*cluster state applier task [test2] took [32s] which is above the warn threshold of [*]: "" +\n                            ""[running task [test2]] took [*""));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        ""test4"",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        ""*cluster state applier task [test3] took [34s] which is above the warn threshold of [*]: "" +\n                            ""[running task [test3]] took [*""));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(""test1"",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n']",Expectation;value;task;which;Event;warn;Unseen;org;setting;cluster,7.130438461899757e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.900896072387695, -5.28730583190918, -4.6435370445251465, -5.782922267913818, -5.526618480682373, -0.024779578670859337]",0.97552490234375
2,"['    @TestLogging(reason=""testing that DEBUG-level logging is reasonable"", value=""org.opensearch.cluster.NodeConnectionsService:DEBUG"")\n    public void testDebugLogging() throws IllegalAccessException {\n        final DeterministicTaskQueue deterministicTaskQueue\n            = new DeterministicTaskQueue(builder().put(NODE_NAME_SETTING.getKey(), ""node"").build(), random());\n\n        MockTransport transport = new MockTransport(deterministicTaskQueue.getThreadPool());\n        TestTransportService transportService = new TestTransportService(transport, deterministicTaskQueue.getThreadPool());\n        transportService.start();\n        transportService.acceptIncomingRequests();\n\n        final NodeConnectionsService service\n            = new NodeConnectionsService(Settings.EMPTY, deterministicTaskQueue.getThreadPool(), transportService);\n        service.start();\n\n        final List<DiscoveryNode> allNodes = generateNodes();\n        final DiscoveryNodes targetNodes = discoveryNodesFromList(randomSubsetOf(allNodes));\n        service.connectToNodes(targetNodes, () -> {});\n        deterministicTaskQueue.runAllRunnableTasks();\n\n        // periodic reconnections to unexpectedly-disconnected nodes are logged\n        final Set<DiscoveryNode> disconnectedNodes = new HashSet<>(randomSubsetOf(allNodes));\n        for (DiscoveryNode disconnectedNode : disconnectedNodes) {\n            transportService.disconnectFromNode(disconnectedNode);\n        }\n        MockLogAppender appender = new MockLogAppender();\n        try {\n            appender.start();\n            Loggers.addAppender(LogManager.getLogger(""org.opensearch.cluster.NodeConnectionsService""), appender);\n            for (DiscoveryNode targetNode : targetNodes) {\n                if (disconnectedNodes.contains(targetNode)) {\n                    appender.addExpectation(new MockLogAppender.SeenEventExpectation(""connecting to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connecting to "" + targetNode));\n                    appender.addExpectation(new MockLogAppender.SeenEventExpectation(""connected to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connected to "" + targetNode));\n                } else {\n                    appender.addExpectation(new MockLogAppender.UnseenEventExpectation(""connecting to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connecting to "" + targetNode));\n                    appender.addExpectation(new MockLogAppender.UnseenEventExpectation(""connected to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connected to "" + targetNode));\n                }\n            }\n\n            runTasksUntil(deterministicTaskQueue, CLUSTER_NODE_RECONNECT_INTERVAL_SETTING.get(Settings.EMPTY).millis());\n            appender.assertAllExpectationsMatched();\n        } finally {\n            Loggers.removeAppender(LogManager.getLogger(""org.opensearch.cluster.NodeConnectionsService""), appender);\n            appender.stop();\n        }        for (DiscoveryNode disconnectedNode : disconnectedNodes) {\n            transportService.disconnectFromNode(disconnectedNode);\n        }\n\n        // changes to the expected set of nodes are logged, including reconnections to any unexpectedly-disconnected nodes\n        final DiscoveryNodes newTargetNodes = discoveryNodesFromList(randomSubsetOf(allNodes));\n        for (DiscoveryNode disconnectedNode : disconnectedNodes) {\n            transportService.disconnectFromNode(disconnectedNode);\n        }\n        appender = new MockLogAppender();\n        try {\n            appender.start();\n            Loggers.addAppender(LogManager.getLogger(""org.opensearch.cluster.NodeConnectionsService""), appender);\n            for (DiscoveryNode targetNode : targetNodes) {\n                if (disconnectedNodes.contains(targetNode) && newTargetNodes.get(targetNode.getId()) != null) {\n                    appender.addExpectation(new MockLogAppender.SeenEventExpectation(""connecting to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connecting to "" + targetNode));\n                    appender.addExpectation(new MockLogAppender.SeenEventExpectation(""connected to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connected to "" + targetNode));\n                } else {\n                    appender.addExpectation(new MockLogAppender.UnseenEventExpectation(""connecting to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connecting to "" + targetNode));\n                    appender.addExpectation(new MockLogAppender.UnseenEventExpectation(""connected to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connected to "" + targetNode));\n                }\n                if (newTargetNodes.get(targetNode.getId()) == null) {\n                    appender.addExpectation(new MockLogAppender.SeenEventExpectation(""disconnected from "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""disconnected from "" + targetNode));\n                }\n            }\n            for (DiscoveryNode targetNode : newTargetNodes) {\n                appender.addExpectation(new MockLogAppender.UnseenEventExpectation(""disconnected from "" + targetNode,\n                    ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                    ""disconnected from "" + targetNode));\n                if (targetNodes.get(targetNode.getId()) == null) {\n                    appender.addExpectation(new MockLogAppender.SeenEventExpectation(""connecting to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connecting to "" + targetNode));\n                    appender.addExpectation(new MockLogAppender.SeenEventExpectation(""connected to "" + targetNode,\n                        ""org.opensearch.cluster.NodeConnectionsService"", Level.DEBUG,\n                        ""connected to "" + targetNode));\n                }\n            }\n\n            service.disconnectFromNodesExcept(newTargetNodes);\n            service.connectToNodes(newTargetNodes, () -> {});\n            deterministicTaskQueue.runAllRunnableTasks();\n            appender.assertAllExpectationsMatched();\n        } finally {\n            Loggers.removeAppender(LogManager.getLogger(""org.opensearch.cluster.NodeConnectionsService""), appender);\n            appender.stop();\n        }\n    }\n']",DEBUG;Thread;cluster;logged;that;periodic;unexpectedly;are;connect;nodes,5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.958918571472168, -5.301708698272705, -4.624920845031738, -5.846928119659424, -5.541777610778809, -0.024475663900375366]",0.9758214354515076
2,"['    @TestLogging(value=""org.opensearch.cluster.routing.allocation.DiskThresholdMonitor:INFO"", reason=""testing INFO/WARN logging"")\n    public void testDiskMonitorLogging() throws IllegalAccessException {\n        final ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY))\n            .nodes(DiscoveryNodes.builder().add(newNode(""node1""))).build();\n        final AtomicReference<ClusterState> clusterStateRef = new AtomicReference<>(clusterState);\n        final AtomicBoolean advanceTime = new AtomicBoolean(randomBoolean());\n\n        final LongSupplier timeSupplier = new LongSupplier() {\n            long time;\n\n            @Override\n            public long getAsLong() {\n                if (advanceTime.get()) {\n                    time += DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.get(Settings.EMPTY).getMillis() + 1;\n                }\n                logger.info(""time: [{}]"", time);\n                return time;\n            }\n']",INTERVAL;Access;advance;org;Settings;Logging;Boolean;time;CLUSTER;Atomic,9.022187441587448e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.384208634495735e-10;4.656612873077393e-10;4.43833414465189e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.940925121307373, -5.386218070983887, -4.6664509773254395, -5.75710916519165, -5.498112201690674, -0.024158621206879616]",0.9761308431625366
2,"['    @TestLogging(value = ""org.opensearch.gateway:WARN"", reason = ""to ensure that we log gateway events on WARN level"")\n    public void testSlowLogging() throws WriteStateException, IllegalAccessException {\n        final long slowWriteLoggingThresholdMillis;\n        final Settings settings;\n        if (randomBoolean()) {\n            slowWriteLoggingThresholdMillis = PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.get(Settings.EMPTY).millis();\n            settings = Settings.EMPTY;\n        } else {\n            slowWriteLoggingThresholdMillis = randomLongBetween(2, 100000);\n            settings = Settings.builder()\n                .put(PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.getKey(), slowWriteLoggingThresholdMillis + ""ms"")\n                .build();\n        }\n\n        final DiscoveryNode localNode = newNode(""node"");\n        final ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT)\n            .nodes(DiscoveryNodes.builder().add(localNode).localNodeId(localNode.getId())).build();\n\n        final long startTimeMillis = randomLongBetween(0L, Long.MAX_VALUE - slowWriteLoggingThresholdMillis * 10);\n        final AtomicLong currentTime = new AtomicLong(startTimeMillis);\n        final AtomicLong writeDurationMillis = new AtomicLong(slowWriteLoggingThresholdMillis);\n\n        final ClusterSettings clusterSettings = new ClusterSettings(settings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        final IncrementalClusterStateWriter incrementalClusterStateWriter\n            = new IncrementalClusterStateWriter(settings, clusterSettings, mock(MetaStateService.class),\n            new Manifest(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), Collections.emptyMap()),\n            clusterState, () -> currentTime.getAndAdd(writeDurationMillis.get()));\n\n        assertExpectedLogs(clusterState, incrementalClusterStateWriter, new MockLogAppender.SeenEventExpectation(\n            ""should see warning at threshold"",\n            IncrementalClusterStateWriter.class.getCanonicalName(),\n            Level.WARN,\n            ""writing cluster state took [*] which is above the warn threshold of [*]; "" +\n                ""wrote metadata for [0] indices and skipped [0] unchanged indices""));\n\n        writeDurationMillis.set(randomLongBetween(slowWriteLoggingThresholdMillis, slowWriteLoggingThresholdMillis * 2));\n        assertExpectedLogs(clusterState, incrementalClusterStateWriter, new MockLogAppender.SeenEventExpectation(\n            ""should see warning above threshold"",\n            IncrementalClusterStateWriter.class.getCanonicalName(),\n            Level.WARN,\n            ""writing cluster state took [*] which is above the warn threshold of [*]; "" +\n                ""wrote metadata for [0] indices and skipped [0] unchanged indices""));\n\n        writeDurationMillis.set(randomLongBetween(1, slowWriteLoggingThresholdMillis - 1));\n        assertExpectedLogs(clusterState, incrementalClusterStateWriter, new MockLogAppender.UnseenEventExpectation(\n            ""should not see warning below threshold"",\n            IncrementalClusterStateWriter.class.getCanonicalName(),\n            Level.WARN,\n            ""*""));\n\n        clusterSettings.applySettings(Settings.builder()\n            .put(PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.getKey(), writeDurationMillis.get() + ""ms"")\n            .build());\n        assertExpectedLogs(clusterState, incrementalClusterStateWriter, new MockLogAppender.SeenEventExpectation(\n            ""should see warning at reduced threshold"",\n            IncrementalClusterStateWriter.class.getCanonicalName(),\n            Level.WARN,\n            ""writing cluster state took [*] which is above the warn threshold of [*]; "" +\n                ""wrote metadata for [0] indices and skipped [0] unchanged indices""));\n\n        assertThat(currentTime.get(), lessThan(startTimeMillis + 10 * slowWriteLoggingThresholdMillis)); // ensure no overflow\n    }\n']",Logging;THRES;SLOW;WRITE;Slow;random;EMPTY;Logging;Illegal;Write,1.979060471057892e-09;8.731149137020111e-10;8.585629984736443e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.9244890213012695, -5.392518043518066, -4.652948379516602, -5.792762279510498, -5.504610538482666, -0.02416420727968216]",0.9761254191398621
2,"['    @TestLogging(value = ""org.opensearch.gateway:WARN"", reason = ""to ensure that we log gateway events on WARN level"")\n    public void testSlowLogging() throws IOException, IllegalAccessException {\n        final long slowWriteLoggingThresholdMillis;\n        final Settings settings;\n        if (randomBoolean()) {\n            slowWriteLoggingThresholdMillis = PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.get(Settings.EMPTY).millis();\n            settings = Settings.EMPTY;\n        } else {\n            slowWriteLoggingThresholdMillis = randomLongBetween(2, 100000);\n            settings = Settings.builder()\n                .put(PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.getKey(), slowWriteLoggingThresholdMillis + ""ms"")\n                .build();\n        }\n\n        final DiscoveryNode localNode = new DiscoveryNode(""node"", buildNewFakeTransportAddress(), Version.CURRENT);\n        final ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT)\n            .nodes(DiscoveryNodes.builder().add(localNode).localNodeId(localNode.getId())).build();\n\n        final long startTimeMillis = randomLongBetween(0L, Long.MAX_VALUE - slowWriteLoggingThresholdMillis * 10);\n        final AtomicLong currentTime = new AtomicLong(startTimeMillis);\n        final AtomicLong writeDurationMillis = new AtomicLong(slowWriteLoggingThresholdMillis);\n\n        final ClusterSettings clusterSettings = new ClusterSettings(settings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        try (NodeEnvironment nodeEnvironment = newNodeEnvironment(createDataPaths())) {\n            PersistedClusterStateService persistedClusterStateService = new PersistedClusterStateService(nodeEnvironment,\n                    xContentRegistry(), getBigArrays(), clusterSettings, () -> currentTime.getAndAdd(writeDurationMillis.get()));\n\n            try (Writer writer = persistedClusterStateService.createWriter()) {\n                assertExpectedLogs(1L, null, clusterState, writer, new MockLogAppender.SeenEventExpectation(\n                    ""should see warning at threshold"",\n                    PersistedClusterStateService.class.getCanonicalName(),\n                    Level.WARN,\n                    ""writing cluster state took [*] which is above the warn threshold of [*]; "" +\n                        ""wrote full state with [0] indices""));\n\n                writeDurationMillis.set(randomLongBetween(slowWriteLoggingThresholdMillis, slowWriteLoggingThresholdMillis * 2));\n                assertExpectedLogs(1L, null, clusterState, writer, new MockLogAppender.SeenEventExpectation(\n                    ""should see warning above threshold"",\n                    PersistedClusterStateService.class.getCanonicalName(),\n                    Level.WARN,\n                    ""writing cluster state took [*] which is above the warn threshold of [*]; "" +\n                        ""wrote full state with [0] indices""));\n\n                writeDurationMillis.set(randomLongBetween(1, slowWriteLoggingThresholdMillis - 1));\n                assertExpectedLogs(1L, null, clusterState, writer, new MockLogAppender.UnseenEventExpectation(\n                    ""should not see warning below threshold"",\n                    PersistedClusterStateService.class.getCanonicalName(),\n                    Level.WARN,\n                    ""*""));\n\n                clusterSettings.applySettings(Settings.builder()\n                    .put(PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.getKey(), writeDurationMillis.get() + ""ms"")\n                    .build());\n                assertExpectedLogs(1L, null, clusterState, writer, new MockLogAppender.SeenEventExpectation(\n                    ""should see warning at reduced threshold"",\n                    PersistedClusterStateService.class.getCanonicalName(),\n                    Level.WARN,\n                    ""writing cluster state took [*] which is above the warn threshold of [*]; "" +\n                        ""wrote full state with [0] indices""));\n\n                final ClusterState newClusterState = ClusterState.builder(clusterState)\n                    .metadata(Metadata.builder(clusterState.metadata())\n                        .version(clusterState.version())\n                        .put(IndexMetadata.builder(""test"")\n                            .settings(Settings.builder()\n                                .put(IndexMetadata.INDEX_NUMBER_OF_SHARDS_SETTING.getKey(), 1)\n                                .put(IndexMetadata.INDEX_NUMBER_OF_REPLICAS_SETTING.getKey(), 0)\n                                .put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(), Version.CURRENT)\n                                .put(IndexMetadata.SETTING_INDEX_UUID, ""test-uuid""))))\n                    .incrementVersion().build();\n\n                assertExpectedLogs(1L, clusterState, newClusterState, writer, new MockLogAppender.SeenEventExpectation(\n                    ""should see warning at threshold"",\n                    PersistedClusterStateService.class.getCanonicalName(),\n                    Level.WARN,\n                    ""writing cluster state took [*] which is above the warn threshold of [*]; "" +\n                        ""wrote global metadata [false] and metadata for [1] indices and skipped [0] unchanged indices""));\n\n                writeDurationMillis.set(randomLongBetween(0, writeDurationMillis.get() - 1));\n                assertExpectedLogs(1L, clusterState, newClusterState, writer, new MockLogAppender.UnseenEventExpectation(\n                    ""should not see warning below threshold"",\n                    PersistedClusterStateService.class.getCanonicalName(),\n                    Level.WARN,\n                    ""*""));\n\n                assertThat(currentTime.get(), lessThan(startTimeMillis + 14 * slowWriteLoggingThresholdMillis)); // ensure no overflow\n            }\n        }\n    }\n']",Logging;opensearch;gateway;WRITE;odes;EMPTY;WRITE;Logging;long;add,6.984919309616089e-10;6.257323548197746e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.923252105712891, -5.396146774291992, -4.656395435333252, -5.786609649658203, -5.4989094734191895, -0.024160251021385193]",0.9761292934417725
2,"['    @TestLogging(value=""org.opensearch.common.settings.IndexScopedSettings:INFO"",\n    public void testLogSettingUpdate() throws Exception {\n        final IndexMetadata metadata = newIndexMeta(""index1"",\n            Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), ""20s"").build());\n        final IndexSettings settings = new IndexSettings(metadata, Settings.EMPTY);\n\n        final MockLogAppender mockLogAppender = new MockLogAppender();\n        mockLogAppender.addExpectation(new MockLogAppender.SeenEventExpectation(\n            ""message"",\n            ""org.opensearch.common.settings.IndexScopedSettings"",\n            Level.INFO,\n            ""updating [index.refresh_interval] from [20s] to [10s]"") {\n            @Override\n            public boolean innerMatch(LogEvent event) {\n                return event.getMarker().getName().equals("" [index1]"");\n            }\n']",opensearch;Logging;opensearch;metadata;Log;Mock;builder;Exception;final;mock,9.89530235528946e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9446258544921875, -5.405129432678223, -4.648189544677734, -5.805736541748047, -5.4835591316223145, -0.024146171286702156]",0.9761430025100708
2,"['    @TestLogging(\n    public void testTracerLog() throws Exception {\n        final String includeSettings;\n        final String excludeSettings;\n        if (randomBoolean()) {\n            includeSettings = randomBoolean() ? ""*"" : """";\n        } else {\n            includeSettings = ""/internal/test"";\n        }\n        excludeSettings = ""/internal/testNotSeen"";\n\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        try (AbstractHttpServerTransport transport =\n                 new AbstractHttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool, xContentRegistry(),\n                     new HttpServerTransport.Dispatcher() {\n                         @Override\n                         public void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext) {\n                             channel.sendResponse(emptyResponse(RestStatus.OK));\n                         }\n']",CLUSTER;Settings;Cluster;send;if;Boolean;Rest;Cluster;Settings;Response,5.820766091346741e-10;5.093170329928398e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.926865100860596, -5.2377848625183105, -4.620177268981934, -5.817555904388428, -5.547111988067627, -0.025013646110892296]",0.9752966165542603
2,"['    @TestLogging(reason = ""testing logging"", value = ""org.opensearch.transport.TcpTransport:DEBUG"")\n    public void testExceptionHandling() throws IllegalAccessException {\n        testExceptionHandling(false, new OpenSearchException(""simulated""), true,\n            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.ERROR, ""*""),\n            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.WARN, ""*""),\n            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.INFO, ""*""),\n            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.DEBUG, ""*""));\n        testExceptionHandling(new OpenSearchException(""simulated""),\n            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",\n                Level.WARN, ""exception caught on transport layer [*], closing connection""));\n        testExceptionHandling(new ClosedChannelException(),\n            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",\n                Level.DEBUG, ""close connection exception caught on transport layer [*], disconnecting from relevant node""));\n        testExceptionHandling(new OpenSearchException(""Connection reset""),\n            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",\n                Level.DEBUG, ""close connection exception caught on transport layer [*], disconnecting from relevant node""));\n        testExceptionHandling(new BindException(),\n            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",\n                Level.DEBUG, ""bind exception caught on transport layer [*]""));\n        testExceptionHandling(new CancelledKeyException(),\n            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",\n                Level.DEBUG, ""cancelled key exception caught on transport layer [*], disconnecting from relevant node""));\n        testExceptionHandling(true, new TcpTransport.HttpRequestOnTransportException(""test""), false,\n            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.ERROR, ""*""),\n            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.WARN, ""*""),\n            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.INFO, ""*""),\n            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.DEBUG, ""*""));\n        testExceptionHandling(new StreamCorruptedException(""simulated""),\n            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",\n                Level.WARN, ""simulated, [*], closing connection""));\n    }\n']",testing;Exception;cp;DEBUG;Channel;reset;Exception;Exception;Exception;relevant,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.841244220733643, -5.335698127746582, -4.6602044105529785, -5.794902324676514, -5.438988208770752, -0.024880167096853256]",0.9754267930984497
2,"['@TestLogging(value = ""org.opensearch.transport.TransportLogger:trace"", reason = ""to ensure we log network events on TRACE level"")\n    public void setUp() throws Exception {\n        super.setUp();\n        appender = new MockLogAppender();\n        Loggers.addAppender(LogManager.getLogger(TransportLogger.class), appender);\n        appender.start();\n    }\n']",Logging;Mock;Up;ensure;level;transport;Appender;TRACE;Loggers;log,8.09086486697197e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.009171962738037, -5.622110843658447, -4.60353946685791, -5.846065521240234, -5.376969337463379, -0.02388547919690609]",0.9763975143432617
2,"['    @TestLogging(\n    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ""foo_bar_cluster"").build();\n        try (MockTransportService remoteTransport = startTransport(""remote_node"", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(onlyRole(DiscoveryNodeRole.REMOTE_CLUSTER_CLIENT_ROLE))\n                .put(""cluster.remote.test.seeds"",\n                    remoteNode.getAddress().getAddress() + "":"" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                // this test is not perfect since we might reconnect concurrently but it will fail most of the time if we don\'t have\n                // the right calls in place in the RemoteAwareClient\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertBusy(() -> assertTrue(remoteClusterService.isRemoteNodeConnected(""test"", remoteNode)));\n                for (int i = 0; i < 10; i++) {\n                    RemoteClusterConnection remoteClusterConnection = remoteClusterService.getRemoteClusterConnection(""test"");\n                    assertBusy(remoteClusterConnection::assertNoRunningConnections);\n                    ConnectionManager connectionManager = remoteClusterConnection.getConnectionManager();\n                    Transport.Connection connection = connectionManager.getConnection(remoteNode);\n                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture();\n                    connection.addCloseListener(closeFuture);\n                    connectionManager.disconnectFromNode(remoteNode);\n                    closeFuture.get();\n\n                    Client client = remoteClusterService.getRemoteClusterClient(threadPool, ""test"");\n                    ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                    assertNotNull(clusterStateResponse);\n                    assertEquals(""foo_bar_cluster"", clusterStateResponse.getState().getClusterName().value());\n                    assertTrue(remoteClusterConnection.isNodeConnected(remoteNode));\n                }\n            }\n        }\n    }\n']",the;Service;fail;empty;Requests;Service;place;Logging;the;thread,6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.961669445037842, -5.325376033782959, -4.63572359085083, -5.836477279663086, -5.551819324493408, -0.02423204481601715]",0.9760593175888062
2,"['    @TestLogging(value = ""org.opensearch.monitor.fs:WARN"", reason = ""to ensure that we log on hung IO at WARN level"")\n    public void testLoggingOnHungIO() throws Exception {\n        long slowLogThreshold = randomLongBetween(100, 200);\n        final Settings settings = Settings.builder().put(FsHealthService.SLOW_PATH_LOGGING_THRESHOLD_SETTING.getKey(),\n            slowLogThreshold + ""ms"").build();\n        FileSystem fileSystem = PathUtils.getDefaultFileSystem();\n        TestThreadPool testThreadPool = new TestThreadPool(getClass().getName(), settings);\n        FileSystemFsyncHungProvider disruptFileSystemProvider = new FileSystemFsyncHungProvider(fileSystem,\n            randomLongBetween(slowLogThreshold + 1 , 400), testThreadPool);\n        fileSystem = disruptFileSystemProvider.getFileSystem(null);\n        PathUtilsForTesting.installMock(fileSystem);\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n\n        Logger logger = LogManager.getLogger(FsHealthService.class);\n        Loggers.addAppender(logger, mockAppender);\n        try (NodeEnvironment env = newNodeEnvironment()) {\n            FsHealthService fsHealthService = new FsHealthService(settings, clusterSettings, testThreadPool, env);\n            int counter = 0;\n            for(Path path : env.nodeDataPaths()){\n                mockAppender.addExpectation(\n                    new MockLogAppender.SeenEventExpectation(\n                        ""test"" + ++counter,\n                        FsHealthService.class.getCanonicalName(),\n                        Level.WARN,\n                        ""health check of ["" + path + ""] took [*ms] which is above the warn threshold*""));\n            }\n\n            //disrupt file system\n            disruptFileSystemProvider.injectIODelay.set(true);\n            fsHealthService.new FsHealthMonitor().run();\n            assertEquals(env.nodeDataPaths().length, disruptFileSystemProvider.getInjectedPathCount());\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(logger, mockAppender);\n            mockAppender.stop();\n            PathUtilsForTesting.teardown();\n            ThreadPool.terminate(testThreadPool, 500, TimeUnit.MILLISECONDS);\n        }\n    }\n']",Logging;THRES;hung;log;Logging;IO;LOG;Threshold;ING;PATH,2.444721758365631e-09;2.2118911147117615e-09;1.0477378964424133e-09;1.0186340659856796e-09;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10;4.220055416226387e-10,5,5,"[-5.949522972106934, -5.3322834968566895, -4.630212306976318, -5.831754207611084, -5.536281585693359, -0.02436119131743908]",0.9759331345558167
2,"['    @Test\n    public void testExecution() throws EventNotificationException {\n        notificationResourceHandler.test(getHttpNotification(), ""testUser"");\n\n        ArgumentCaptor<EventNotificationContext> captor = ArgumentCaptor.forClass(EventNotificationContext.class);\n        verify(eventNotification, times(1)).execute(captor.capture());\n\n        assertThat(captor.getValue()).satisfies(ctx -> {\n            assertThat(ctx.event().message()).isEqualTo(""Notification test message triggered from user <testUser>"");\n            assertThat(ctx.notificationId()).isEqualTo(NotificationTestData.TEST_NOTIFICATION_ID);\n            assertThat(ctx.notificationConfig().type()).isEqualTo(HTTPEventNotificationConfig.TYPE_NAME);\n            assertThat(ctx.eventDefinition().get().title()).isEqualTo(""Event Definition Test Title"");\n        });\n    }\n']",Handler;triggered;Class;captor;Notification;Notification;ification;execute;Notification;ID,5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10,5,5,"[-5.816117286682129, -5.443400859832764, -4.69819450378418, -5.707584381103516, -5.338918209075928, -0.024843420833349228]",0.9754626154899597
2,"['    @Test\n    public void testValidateWithEmptyTitle() {\n        final NotificationDto invalidNotification = getHttpNotification().toBuilder().title("""").build();\n        final ValidationResult validationResult = invalidNotification.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""title"");\n    }\n']",Notification;That;final;Empty;get;Title;Result;final;title;True,8.440110832452774e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-6.003481388092041, -5.628161907196045, -4.6155314445495605, -5.83876895904541, -5.402142524719238, -0.023659296333789825]",0.9766184091567993
2,"['    @Test\n    public void testValidateWithEmptyConfig() {\n        final NotificationDto invalidNotification = NotificationDto.builder()\n                .title(""Foo"")\n                .description("""")\n                .config(new EventNotificationConfig.FallbackNotificationConfig())\n                .build();\n        final ValidationResult validationResult = invalidNotification.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""config"");\n    }\n']",oo;Keys;Notification;contains;get;validation;Only;Result;validation;validate,6.402842700481415e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.99061918258667, -5.543856620788574, -4.628330230712891, -5.809432029724121, -5.441563606262207, -0.02379724755883217]",0.9764835834503174
2,"['    @Test\n    public void testValidateHttpWithEmptyConfigParameters() {\n        final HTTPEventNotificationConfig emptyConfig = HTTPEventNotificationConfig.Builder.create()\n                .url("""")\n                .build();\n        final NotificationDto emptyNotification = getHttpNotification().toBuilder().config(emptyConfig).build();\n        final ValidationResult validationResult = emptyNotification.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""url"");\n    }\n']",Validate;That;build;final;Notification;empty;Config;validate;Parameters;get,6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.999281406402588, -5.566775321960449, -4.629286289215088, -5.805225849151611, -5.435488700866699, -0.023714827373623848]",0.9765640497207642
2,"['    @Test\n    public void testValidateEmailWithEmptyConfigParameters() {\n        final EmailEventNotificationConfig emptyConfig = EmailEventNotificationConfig.Builder.create()\n                .sender("""")\n                .subject("""")\n                .bodyTemplate("""")\n                .build();\n        final NotificationDto emptyNotification = getEmailNotification().toBuilder().config(emptyConfig).build();\n        final ValidationResult validationResult = emptyNotification.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors().size()).isEqualTo(4);\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""subject"", ""sender"", ""body_template"", ""recipients"");\n    }\n']",Template;Email;subject;Notification;Errors;contains;That;Config;template;to,1.1641532182693481e-09;6.984919309616089e-10;6.257323548197746e-10;5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.6007106751203537e-10,5,5,"[-5.985359191894531, -5.544349193572998, -4.643031120300293, -5.800240993499756, -5.4455790519714355, -0.02367349900305271]",0.9766045212745667
2,"['    @Test\n    public void testValidateLegacyWithEmptyConfigParameters() {\n        final LegacyAlarmCallbackEventNotificationConfig emptyConfig = LegacyAlarmCallbackEventNotificationConfig.Builder.create()\n                .callbackType("""")\n                .configuration(new HashMap<>())\n                .build();\n        final NotificationDto emptyNotification = getLegacyNotification().toBuilder().config(emptyConfig).build();\n        final ValidationResult validationResult = emptyNotification.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""callback_type"");\n    }\n']",Notification;callback;Errors;create;Empty;Builder;Alarm;new;Legacy;Notification,1.3460521586239338e-09;8.149072527885437e-10;5.893525667488575e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.9831085205078125, -5.554253578186035, -4.638517379760742, -5.798795223236084, -5.432631015777588, -0.023746492341160774]",0.9765332341194153
2,['    @Test\n    public void testValidHttpNotification() {\n        final NotificationDto validNotification = getHttpNotification();\n\n        final ValidationResult validationResult = validNotification.validate();\n        assertThat(validationResult.failed()).isFalse();\n        assertThat(validationResult.getErrors().size()).isEqualTo(0);\n    }\n'],Valid;Errors;Notification;Notification;Result;validation;valid;size;Validation;to,1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.989517688751221, -5.604913711547852, -4.615622043609619, -5.844546318054199, -5.410804748535156, -0.023723559454083443]",0.9765556454658508
2,['    @Test\n    public void testValidEmailNotification() {\n        final NotificationDto validNotification = getEmailNotification();\n\n        final ValidationResult validationResult = validNotification.validate();\n        assertThat(validationResult.failed()).isFalse();\n        assertThat(validationResult.getErrors().size()).isEqualTo(0);\n    }\n'],Notification;Result;valid;valid;failed;Notification;get;That;Errors;validation,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.546585164964199e-10,5,5,"[-5.988248825073242, -5.597813129425049, -4.613979339599609, -5.851431846618652, -5.416398048400879, -0.023724373430013657]",0.976554811000824
2,['    @Test\n    public void testValidLegacyNotification() {\n        final NotificationDto validNotification = getLegacyNotification();\n\n        final ValidationResult validationResult = validNotification.validate();\n        assertThat(validationResult.failed()).isFalse();\n        assertThat(validationResult.getErrors().size()).isEqualTo(0);\n    }\n'],Notification;final;final;Result;get;Notification;Result;That;Legacy;Legacy,9.458744898438454e-10;7.421476766467094e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.988982200622559, -5.631509780883789, -4.620901107788086, -5.829759120941162, -5.393150806427002, -0.023698413744568825]",0.9765803217887878
2,"['    @Test\n    public void canProcessTimerange() {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n\n        final EventProcessorStateDto stateDto1 = EventProcessorStateDto.builder()\n                .eventDefinitionId(""a"")\n                .minProcessedTimestamp(now.minusDays(1))\n                .maxProcessedTimestamp(now)\n                .build();\n        final EventProcessorStateDto stateDto2 = EventProcessorStateDto.builder()\n                .eventDefinitionId(""b"")\n                .minProcessedTimestamp(now.minusDays(1))\n                .maxProcessedTimestamp(now.minusHours(1))\n                .build();\n        final EventProcessorStateDto stateDto3 = EventProcessorStateDto.builder()\n                .eventDefinitionId(""c"")\n                .minProcessedTimestamp(now.minusDays(1))\n                .maxProcessedTimestamp(now.minusHours(2))\n                .build();\n\n        // No state objects yet\n        assertThat(dependencyCheck.canProcessTimerange(now, ImmutableSet.of(""a""))).isFalse();\n\n        stateService.setState(stateDto1);\n        stateService.setState(stateDto2);\n        stateService.setState(stateDto3);\n\n        // No state object has processedTimerageEnd >= now + 1h\n        assertThat(dependencyCheck.canProcessTimerange(now.plusHours(1), ImmutableSet.of(""a""))).isFalse();\n\n        // Only processor ""a"" has been processed at ""now""\n        assertThat(dependencyCheck.canProcessTimerange(now, ImmutableSet.of(""a""))).isTrue();\n        assertThat(dependencyCheck.canProcessTimerange(now, ImmutableSet.of(""a"", ""b""))).isFalse();\n        assertThat(dependencyCheck.canProcessTimerange(now, ImmutableSet.of(""a"", ""c""))).isFalse();\n        assertThat(dependencyCheck.canProcessTimerange(now, ImmutableSet.of(""a"", ""b"", ""c""))).isFalse();\n        assertThat(dependencyCheck.canProcessTimerange(now, ImmutableSet.of(""b""))).isFalse();\n        assertThat(dependencyCheck.canProcessTimerange(now, ImmutableSet.of(""c""))).isFalse();\n\n        // Only processors ""a"" and ""b"" have been processed at now - 1h\n        assertThat(dependencyCheck.canProcessTimerange(now.minusHours(1), ImmutableSet.of(""a"", ""b""))).isTrue();\n        assertThat(dependencyCheck.canProcessTimerange(now.minusHours(1), ImmutableSet.of(""a"", ""c""))).isFalse();\n\n        // Processors ""a"", ""b"" and ""c"" have been processed at now - 2h\n        assertThat(dependencyCheck.canProcessTimerange(now.minusHours(2), ImmutableSet.of(""a"", ""b"", ""c""))).isTrue();\n        assertThat(dependencyCheck.canProcessTimerange(now.minusHours(2), ImmutableSet.of(""a"", ""b""))).isTrue();\n        assertThat(dependencyCheck.canProcessTimerange(now.minusHours(2), ImmutableSet.of(""a"", ""c""))).isTrue();\n        assertThat(dependencyCheck.canProcessTimerange(now.minusHours(2), ImmutableSet.of(""a""))).isTrue();\n        assertThat(dependencyCheck.canProcessTimerange(now.minusHours(2), ImmutableSet.of(""b""))).isTrue();\n        assertThat(dependencyCheck.canProcessTimerange(now.minusHours(2), ImmutableSet.of(""c""))).isTrue();\n    }\n']",Timerange;max;min;Processed;build;Timestamp;to;Service;Event;minus,5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.934266090393066, -5.389859199523926, -4.635796070098877, -5.799211025238037, -5.5102314949035645, -0.024275559931993484]",0.9760167002677917
2,['    @Test\n    public void hasMessagesIndexedUpTo() {\n        final DateTime timestamp = DateTime.now(DateTimeZone.UTC);\n\n        when(dbProcessingStatusService.earliestPostIndexingTimestamp()).thenReturn(Optional.of(timestamp));\n\n        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp)).isTrue();\n        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp.minusHours(1))).isTrue();\n        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp.plusHours(1))).isFalse();\n\n        // The method should always return false if there is no value for the max indexed timestamp available\n        when(dbProcessingStatusService.earliestPostIndexingTimestamp()).thenReturn(Optional.empty());\n\n        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp)).isFalse();\n        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp.minusHours(1))).isFalse();\n        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp.plusHours(1))).isFalse();\n    }\n'],Hours;Hours;Messages;timestamp;timestamp;final;Hours;minus;Date;earliest,1.3096723705530167e-09;9.313225746154785e-10;7.130438461899757e-10;6.984919309616089e-10;6.548361852765083e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.816796779632568, -5.554675579071045, -4.682607650756836, -5.679055690765381, -5.285369396209717, -0.024890398606657982]",0.9754168391227722
2,"['    @Test\n    public void falseWithDisabledGracePeriod() {\n        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();\n\n        when(settings.gracePeriodMs()).thenReturn(0L);\n        when(definition.notificationSettings()).thenReturn(settings);\n        when(definition.id()).thenReturn(""1234"");\n\n        final Event event = new TestEvent();\n        event.setKeyTuple(ImmutableList.of(""testkey""));\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n    }\n']",when;Grace;in;event;final;settings;Settings;Grace;ification;ification,5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.890835762023926, -5.546309471130371, -4.684919834136963, -5.740475177764893, -5.359058380126953, -0.024106837809085846]",0.9761813879013062
2,"['    @Test\n    public void withinGracePeriod() {\n        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();\n\n        when(settings.gracePeriodMs()).thenReturn(10L);\n        when(definition.notificationSettings()).thenReturn(settings);\n        when(definition.id()).thenReturn(""1234"");\n\n        final Event event = new TestEvent();\n        event.setKeyTuple(ImmutableList.of(""testkey""));\n        final Event event2 = new TestEvent();\n        event2.setKeyTuple(ImmutableList.of(""testkey""));\n        event2.setEventTimestamp(event.getEventTimestamp().plus(5L));\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isTrue();\n    }\n']",Service;within;Return;Period;notification;when;Period;Notification;Grace;Period,7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.891448020935059, -5.532687664031982, -4.682532787322998, -5.739651203155518, -5.374720573425293, -0.024110330268740654]",0.976177990436554
2,"['    @Test\n    public void outsideGracePeriod() {\n        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();\n\n        when(settings.gracePeriodMs()).thenReturn(10L);\n        when(definition.notificationSettings()).thenReturn(settings);\n        when(definition.id()).thenReturn(""1234"");\n\n        final Event event = new TestEvent();\n        event.setKeyTuple(ImmutableList.of(""testkey""));\n        final Event event2 = new TestEvent();\n        event2.setKeyTuple(ImmutableList.of(""testkey""));\n        event2.setEventTimestamp(event.getEventTimestamp().plus(11L));\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isFalse();\n    }\n']",Ms;outside;Notification;Service;Period;Period;Period;set;in;Period,1.1641532182693481e-09;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;5.529727786779404e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10,5,5,"[-5.894835948944092, -5.537294864654541, -4.681524276733398, -5.743771076202393, -5.3750810623168945, -0.024076465517282486]",0.9762110710144043
2,"['    @Test\n    public void insideThenInsideGracePeriod() {\n        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();\n\n        when(settings.gracePeriodMs()).thenReturn(10L);\n        when(definition.notificationSettings()).thenReturn(settings);\n        when(definition.id()).thenReturn(""1234"");\n\n        final Event event = new TestEvent(DateTime.now(UTC), ""testkey"");\n        final Event event2 = new TestEvent(event.getEventTimestamp().plus(5L), ""testkey"");\n        final Event event3 = new TestEvent(event2.getEventTimestamp().plus(4L), ""testkey"");\n\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isTrue();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event3)).isTrue();\n    }\n']",Period;notification;Service;Period;Grace;Grace;Notification;grace;Inside;Grace,1.6880221664905548e-09;1.1641532182693481e-09;1.1350493878126144e-09;9.022187441587448e-10;8.440110832452774e-10;7.275957614183426e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.675246939063072e-10,5,5,"[-5.848994255065918, -5.516562461853027, -4.69748067855835, -5.706444263458252, -5.344751358032227, -0.02441389113664627]",0.9758816957473755
2,"['    @Test\n    public void insideOutsideInsideGracePeriod() {\n        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();\n\n        when(settings.gracePeriodMs()).thenReturn(10L);\n        when(definition.notificationSettings()).thenReturn(settings);\n        when(definition.id()).thenReturn(""1234"");\n\n        final Event event = new TestEvent(DateTime.now(UTC), ""testkey"");\n        final Event event2 = new TestEvent(event.getEventTimestamp().plus(5L), ""testkey"");\n        final Event event3 = new TestEvent(event2.getEventTimestamp().plus(6L), ""testkey"");\n        final Event event4 = new TestEvent(event3.getEventTimestamp().plus(6L), ""testkey"");\n\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isTrue();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event3)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event4)).isTrue();\n    }\n']",Grace;Inside;definition;Service;inside;final;when;Period;Return;Grace,9.89530235528946e-10;6.402842700481415e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.856809139251709, -5.481080055236816, -4.686861038208008, -5.723884582519531, -5.380773067474365, -0.024407492950558662]",0.9758879542350769
2,"['    @Test\n    public void differentKey() {\n        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();\n\n        when(settings.gracePeriodMs()).thenReturn(10L);\n        when(definition.notificationSettings()).thenReturn(settings);\n        when(definition.id()).thenReturn(""1234"");\n\n        final Event event = new TestEvent();\n        event.setKeyTuple(ImmutableList.of(""testkey""));\n        final Event event2 = new TestEvent();\n        event2.setKeyTuple(ImmutableList.of(""otherkey""));\n        event2.setEventTimestamp(event.getEventTimestamp().plus(1L));\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isFalse();\n    }\n']",Service;Period;ification;Period;Grace;Immutable;Service;definition;Return;plus,1.1059455573558807e-09;1.0186340659856796e-09;6.984919309616089e-10;6.402842700481415e-10;5.675246939063072e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.882948875427246, -5.5381622314453125, -4.686157703399658, -5.730401992797852, -5.360834121704102, -0.02417502924799919]",0.9761148691177368
2,"['    @Test\n    public void differentNotification() {\n        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();\n\n        when(settings.gracePeriodMs()).thenReturn(10L);\n        when(definition.notificationSettings()).thenReturn(settings);\n        when(definition.id()).thenReturn(""1234"");\n\n        final Event event = new TestEvent();\n        event.setKeyTuple(ImmutableList.of(""testkey""));\n        final Event event2 = new TestEvent();\n        event2.setKeyTuple(ImmutableList.of(""testkey""));\n        event2.setEventTimestamp(event.getEventTimestamp().plus(1L));\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""4242"", event2)).isFalse();\n    }\n']",plus;Notification;uple;definition;Service;Period;grace;Event;Period;when,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.904168605804443, -5.541508674621582, -4.677628993988037, -5.749912738800049, -5.385183811187744, -0.024002449586987495]",0.9762831926345825
2,"['    @Test\n    public void emptyKey() {\n        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();\n\n        when(settings.gracePeriodMs()).thenReturn(10L);\n        when(definition.notificationSettings()).thenReturn(settings);\n        when(definition.id()).thenReturn(""1234"");\n\n        final Event event = new TestEvent();\n        event.setKeyTuple(ImmutableList.of());\n        final Event event2 = new TestEvent();\n        event.setKeyTuple(ImmutableList.of());\n        event2.setEventTimestamp(event.getEventTimestamp().plus(1L));\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();\n        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isTrue();\n    }\n']",Key;Return;Period;Ms;uple;Notification;Notification;when;ification;Immutable,9.313225746154785e-10;6.693881005048752e-10;6.548361852765083e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10,5,5,"[-5.896581172943115, -5.553106784820557, -4.679934501647949, -5.744947910308838, -5.3659162521362305, -0.024063199758529663]",0.9762241244316101
2,"['    @Test\n    public void testFunctionMapping() {\n        testToSeriesSpec(AggregationFunction.AVG, Average.class);\n        testToSeriesSpec(AggregationFunction.CARD, Cardinality.class);\n        testToSeriesSpec(AggregationFunction.COUNT, Count.class);\n        testToSeriesSpec(AggregationFunction.MAX, Max.class);\n        testToSeriesSpec(AggregationFunction.MIN, Min.class);\n        testToSeriesSpec(AggregationFunction.STDDEV, StdDev.class);\n        testToSeriesSpec(AggregationFunction.SUM, Sum.class);\n        testToSeriesSpec(AggregationFunction.SUMOFSQUARES, SumOfSquares.class);\n        testToSeriesSpec(AggregationFunction.VARIANCE, Variance.class);\n    }\n']",Cardinality;STDDEV;AV;Function;Series;Spec;Function;Series;ARD;Aggregation,1.4551915228366852e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-6.023333549499512, -5.590061664581299, -4.595229625701904, -5.857778072357178, -5.462827682495117, -0.02363240160048008]",0.9766445159912109
2,"['    @Test\n    public void fieldRequirements() {\n        assertThatCode(() -> AggregationFunction.AVG.toSeriesSpec(""a"", null))\n                .hasMessageContaining(""<avg>"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatCode(() -> AggregationFunction.CARD.toSeriesSpec(""a"", null))\n                .hasMessageContaining(""<card>"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatCode(() -> AggregationFunction.COUNT.toSeriesSpec(""a"", null))\n                .doesNotThrowAnyException();\n\n        assertThatCode(() -> AggregationFunction.MAX.toSeriesSpec(""a"", null))\n                .hasMessageContaining(""<max>"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatCode(() -> AggregationFunction.MIN.toSeriesSpec(""a"", null))\n                .hasMessageContaining(""<min>"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatCode(() -> AggregationFunction.STDDEV.toSeriesSpec(""a"", null))\n                .hasMessageContaining(""<stddev>"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatCode(() -> AggregationFunction.SUM.toSeriesSpec(""a"", null))\n                .hasMessageContaining(""<sum>"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatCode(() -> AggregationFunction.SUMOFSQUARES.toSeriesSpec(""a"", null))\n                .hasMessageContaining(""<sumofsquares>"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatCode(() -> AggregationFunction.VARIANCE.toSeriesSpec(""a"", null))\n                .hasMessageContaining(""<variance>"")\n                .isInstanceOf(IllegalArgumentException.class);\n    }\n']",ARD;Aggregation;min;STDDEV;That;That;av;MIN;That;has,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.8260698318481445, -5.356919765472412, -4.667953014373779, -5.659792900085449, -5.406430721282959, -0.025345992296934128]",0.9749726057052612
2,"['    @Test\n    public void toJobSchedulerConfig() {\n        final EventDefinitionDto dto = dbService.get(""54e3deadbeefdeadbeefaffe"").orElse(null);\n\n        assertThat(dto).isNotNull();\n\n        assertThat(dto.config().toJobSchedulerConfig(dto, clock)).isPresent().get().satisfies(schedulerConfig -> {\n            assertThat(schedulerConfig.jobDefinitionConfig()).satisfies(jobDefinitionConfig -> {\n                assertThat(jobDefinitionConfig).isInstanceOf(EventProcessorExecutionJob.Config.class);\n\n                final EventProcessorExecutionJob.Config config = (EventProcessorExecutionJob.Config) jobDefinitionConfig;\n\n                assertThat(config.eventDefinitionId()).isEqualTo(dto.id());\n                assertThat(config.processingWindowSize()).isEqualTo(300000);\n                assertThat(config.processingHopSize()).isEqualTo(300000);\n                assertThat(config.parameters()).isEqualTo(AggregationEventProcessorParameters.builder()\n                        .timerange(AbsoluteRange.create(clock.nowUTC().minus(300000), clock.nowUTC()))\n                        .build());\n            });\n\n            assertThat(schedulerConfig.schedule()).satisfies(schedule -> {\n                assertThat(schedule).isInstanceOf(IntervalJobSchedule.class);\n\n                final IntervalJobSchedule config = (IntervalJobSchedule) schedule;\n\n                assertThat(config.interval()).isEqualTo(300000);\n                assertThat(config.unit()).isEqualTo(TimeUnit.MILLISECONDS);\n            });\n        });\n    }\n']",minus;schedule;Config;to;atisfies;Present;class;null;That;That,1.862645149230957e-09;7.8580342233181e-10;7.566995918750763e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.2928149923682213e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.737950801849365, -5.316940784454346, -4.717121124267578, -5.591747283935547, -5.316836833953857, -0.026042871177196503]",0.9742932319641113
2,"['    @Test\n    public void testValidateWithInvalidTimeRange() {\n        final AggregationEventProcessorConfig invalidConfig1 = getConfig().toBuilder()\n            .searchWithinMs(-1)\n            .build();\n\n        final ValidationResult validationResult1 = invalidConfig1.validate();\n        assertThat(validationResult1.failed()).isTrue();\n        assertThat(validationResult1.getErrors()).containsOnlyKeys(""search_within_ms"");\n\n        final AggregationEventProcessorConfig invalidConfig2 = invalidConfig1.toBuilder()\n            .searchWithinMs(0)\n            .build();\n\n        final ValidationResult validationResult2 = invalidConfig2.validate();\n        assertThat(validationResult2.failed()).isTrue();\n        assertThat(validationResult2.getErrors()).containsOnlyKeys(""search_within_ms"");\n    }\n']",search;search;search;Processor;Within;That;Errors;Invalid;Ms;Aggregation,7.275957614183426e-10;6.402842700481415e-10;5.529727786779404e-10;5.093170329928398e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10,5,5,"[-5.921082019805908, -5.5508952140808105, -4.672644138336182, -5.743814945220947, -5.376617908477783, -0.02402607537806034]",0.976260244846344
2,"['    @Test\n    public void testValidateWithInvalidExecutionTime() {\n        final AggregationEventProcessorConfig invalidConfig1 = getConfig().toBuilder()\n            .executeEveryMs(-1)\n            .build();\n\n        final ValidationResult validationResult1 = invalidConfig1.validate();\n        assertThat(validationResult1.failed()).isTrue();\n        assertThat(validationResult1.getErrors()).containsOnlyKeys(""execute_every_ms"");\n\n        final AggregationEventProcessorConfig invalidConfig2 = invalidConfig1.toBuilder()\n            .executeEveryMs(0)\n            .build();\n\n        final ValidationResult validationResult2 = invalidConfig2.validate();\n        assertThat(validationResult2.failed()).isTrue();\n        assertThat(validationResult2.getErrors()).containsOnlyKeys(""execute_every_ms"");\n    }\n']",Validate;Ms;execute;Result;Processor;validate;Only;execute;That;failed,6.402842700481415e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9054718017578125, -5.524629592895508, -4.6765241622924805, -5.741960525512695, -5.372007846832275, -0.02416606992483139]",0.976123571395874
2,"['    @Test\n    public void testValidateWithIncompleteAggregationOptions() {\n        AggregationEventProcessorConfig invalidConfig = getConfig().toBuilder()\n            .groupBy(ImmutableList.of(""foo""))\n            .build();\n\n        ValidationResult validationResult = invalidConfig.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""series"", ""conditions"");\n\n        invalidConfig = getConfig().toBuilder()\n            .series(ImmutableList.of(this.getSeries()))\n            .build();\n\n        validationResult = invalidConfig.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""conditions"");\n\n        invalidConfig = getConfig().toBuilder()\n            .conditions(this.getConditions())\n            .build();\n\n        validationResult = invalidConfig.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""series"");\n    }\n']",Errors;series;By;Incomplete;Builder;validation;Aggregation;Errors;Immutable;Builder,9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.934173583984375, -5.494838237762451, -4.664683818817139, -5.756350040435791, -5.426793575286865, -0.0240236297249794]",0.976262629032135
2,['    @Test\n    public void testValidConfiguration() {\n        final ValidationResult validationResult = getConfig().validate();\n        assertThat(validationResult.failed()).isFalse();\n        assertThat(validationResult.getErrors().size()).isEqualTo(0);\n    }\n'],validation;validation;Valid;get;validate;qual;size;Result;That;Validation,6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;1.8917489796876907e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-6.015061378479004, -5.614551067352295, -4.5842061042785645, -5.877888202667236, -5.419326305389404, -0.02380993403494358]",0.9764711856842041
2,"['    @Test\n    public void testValidFilterConfiguration() {\n        final AggregationEventProcessorConfig config = getConfig().toBuilder()\n            .query(""foo"")\n            .streams(ImmutableSet.of(""1"", ""2""))\n            .build();\n\n        final ValidationResult validationResult = config.validate();\n        assertThat(validationResult.failed()).isFalse();\n        assertThat(validationResult.getErrors().size()).isEqualTo(0);\n    }\n']",Valid;Processor;That;validation;False;validation;Configuration;Result;qual;Config,7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.999763488769531, -5.577274322509766, -4.626061916351318, -5.813333511352539, -5.432542324066162, -0.02369329147040844]",0.9765850901603699
2,"['    @Test\n    public void testValidAggregationConfiguration() {\n        final AggregationEventProcessorConfig config = getConfig().toBuilder()\n            .groupBy(ImmutableList.of(""bar""))\n            .series(ImmutableList.of(this.getSeries()))\n            .conditions(this.getConditions())\n            .build();\n\n        final ValidationResult validationResult = config.validate();\n        assertThat(validationResult.failed()).isFalse();\n        assertThat(validationResult.getErrors().size()).isEqualTo(0);\n    }\n']",Valid;Result;Processor;Immutable;List;False;final;Builder;of;Aggregation,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.055902197957039e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-6.0021233558654785, -5.589687824249268, -4.631035327911377, -5.791869640350342, -5.434632778167725, -0.02364683896303177]",0.9766305685043335
2,"['    @Test\n    public void requiredPermissions() {\n        assertThat(dbService.get(""54e3deadbeefdeadbeefaffe"")).get().satisfies(definition -> {\n            assertThat(definition.config().requiredPermissions()).containsOnly(""streams:read:stream-a"", ""streams:read:stream-b"");\n        });\n    }\n']",required;required;definition;db;stream;contains;Service;read;stream;config,1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.945703983306885, -5.601862907409668, -4.675189971923828, -5.754753589630127, -5.352827548980713, -0.023815521970391273]",0.9764657020568848
2,"['    @Test\n    public void requiredPermissionsWithEmptyStreams() {\n        assertThat(dbService.get(""54e3deadbeefdeadbeefafff"")).get().satisfies(definition -> {\n            assertThat(definition.config().requiredPermissions()).containsOnly(""streams:read"");\n        });\n    }\n']",atisfies;stream;db;config;Permissions;required;Service;required;Stream;definition,1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;1.1641532182693481e-10;0.0,5,5,"[-5.941086769104004, -5.650979995727539, -4.671298980712891, -5.769638538360596, -5.295392036437988, -0.023922840133309364]",0.9763611555099487
2,"['    @Test\n    public void testEventsFromAggregationResult() {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));\n\n        // We expect to get the end of the aggregation timerange as event time\n        final TestEvent event1 = new TestEvent(timerange.to());\n        final TestEvent event2 = new TestEvent(timerange.to());\n        when(eventFactory.createEvent(any(EventDefinition.class), eq(now), anyString()))\n                .thenReturn(event1)  // first invocation return value\n                .thenReturn(event2); // second invocation return value\n\n        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()\n                .id(""dto-id-1"")\n                .title(""Test Aggregation"")\n                .description(""A test aggregation event processors"")\n                .priority(1)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .config(AggregationEventProcessorConfig.builder()\n                        .query("""")\n                        .streams(ImmutableSet.of(""stream-2""))\n                        .groupBy(ImmutableList.of(""group_field_one"", ""group_field_two""))\n                        .series(ImmutableList.of())\n                        .conditions(null)\n                        .searchWithinMs(30000)\n                        .executeEveryMs(30000)\n                        .build())\n                .keySpec(ImmutableList.of())\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .timerange(timerange)\n                .build();\n\n        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);\n\n        final AggregationResult result = AggregationResult.builder()\n                .effectiveTimerange(timerange)\n                .totalAggregatedMessages(1)\n                .sourceStreams(ImmutableSet.of(""stream-1"", ""stream-2""))\n                .keyResults(ImmutableList.of(\n                        AggregationKeyResult.builder()\n                                .key(ImmutableList.of(""one"", ""two""))\n                                .timestamp(now)\n                                .seriesValues(ImmutableList.of(\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(42.0d)\n                                                .series(AggregationSeries.builder()\n                                                        .id(""abc123"")\n                                                        .function(AggregationFunction.COUNT)\n                                                        .field(""source"")\n                                                        .build())\n                                                .build(),\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(23.0d)\n                                                .series(AggregationSeries.builder()\n                                                        .id(""abc123-no-field"")\n                                                        .function(AggregationFunction.COUNT)\n                                                        .build())\n                                                .build(),\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(1.0d)\n                                                .series(AggregationSeries.builder()\n                                                        .id(""xyz789"")\n                                                        .function(AggregationFunction.CARD)\n                                                        .field(""source"")\n                                                        .build())\n                                                .build()\n                                ))\n                                .build()\n                ))\n                .build();\n\n        final ImmutableList<EventWithContext> eventsWithContext = eventProcessor.eventsFromAggregationResult(eventFactory, parameters, result);\n\n        assertThat(eventsWithContext).hasSize(1);\n\n        assertThat(eventsWithContext.get(0)).satisfies(eventWithContext -> {\n            final Event event = eventWithContext.event();\n\n            assertThat(event.getId()).isEqualTo(event1.getId());\n            assertThat(event.getMessage()).isEqualTo(event1.getMessage());\n            assertThat(event.getEventTimestamp()).isEqualTo(timerange.to());\n            assertThat(event.getTimerangeStart()).isEqualTo(timerange.from());\n            assertThat(event.getTimerangeEnd()).isEqualTo(timerange.to());\n            // Should only contain the streams that have been configured in event definition\n            assertThat(event.getSourceStreams()).containsOnly(""stream-2"");\n\n            final Message message = eventWithContext.messageContext().orElse(null);\n\n            assertThat(message).isNotNull();\n            assertThat(message.getField(""group_field_one"")).isEqualTo(""one"");\n            assertThat(message.getField(""group_field_two"")).isEqualTo(""two"");\n            assertThat(message.getField(""aggregation_key"")).isEqualTo(""one|two"");\n            assertThat(message.getField(""aggregation_value_count_source"")).isEqualTo(42.0d);\n            // Make sure that the count with a ""null"" field doesn\'t include the field in the name\n            assertThat(message.getField(""aggregation_value_count"")).isEqualTo(23.0d);\n            assertThat(message.getField(""aggregation_value_card_source"")).isEqualTo(1.0d);\n        });\n    }\n']",the;title;Hours;to;timerange;description;aggregation;to;class;Aggregation,1.0186340659856796e-09;9.313225746154785e-10;4.94765117764473e-10;3.92901711165905e-10;3.7834979593753815e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10,5,5,"[-5.971103668212891, -5.39750337600708, -4.628311634063721, -5.818231582641602, -5.53773307800293, -0.02404562570154667]",0.9762411713600159
2,"['    @Test\n    public void testEventsFromAggregationResultWithConditions() {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));\n\n        // We expect to get the end of the aggregation timerange as event time\n        final TestEvent event1 = new TestEvent(timerange.to());\n        final TestEvent event2 = new TestEvent(timerange.to());\n        when(eventFactory.createEvent(any(EventDefinition.class), eq(now), anyString()))\n                .thenReturn(event1)  // first invocation return value\n                .thenReturn(event2); // second invocation return value\n\n        // There should only be one result because the second result\'s ""abc123"" value is less than 40. (it is 23)\n        // See result builder below\n        final AggregationConditions conditions = AggregationConditions.builder()\n                .expression(Expr.And.create(\n                        Expr.Greater.create(Expr.NumberReference.create(""abc123""), Expr.NumberValue.create(40.0d)),\n                        Expr.Lesser.create(Expr.NumberReference.create(""xyz789""), Expr.NumberValue.create(2.0d))\n                ))\n                .build();\n\n        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()\n                .id(""dto-id-1"")\n                .title(""Test Aggregation"")\n                .description(""A test aggregation event processors"")\n                .priority(1)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .config(AggregationEventProcessorConfig.builder()\n                        .query("""")\n                        .streams(ImmutableSet.of())\n                        .groupBy(ImmutableList.of(""group_field_one"", ""group_field_two""))\n                        .series(ImmutableList.of())\n                        .conditions(conditions)\n                        .searchWithinMs(30000)\n                        .executeEveryMs(30000)\n                        .build())\n                .keySpec(ImmutableList.of())\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .timerange(timerange)\n                .build();\n\n        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);\n\n        final AggregationResult result = AggregationResult.builder()\n                .effectiveTimerange(timerange)\n                .totalAggregatedMessages(1)\n                .sourceStreams(ImmutableSet.of(""stream-1"", ""stream-2"", ""stream-3""))\n                .keyResults(ImmutableList.of(\n                        AggregationKeyResult.builder()\n                                .key(ImmutableList.of(""one"", ""two""))\n                                .timestamp(now)\n                                .seriesValues(ImmutableList.of(\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(42.0d)\n                                                .series(AggregationSeries.builder()\n                                                        .id(""abc123"")\n                                                        .function(AggregationFunction.COUNT)\n                                                        .field(""source"")\n                                                        .build())\n                                                .build(),\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(1.0d)\n                                                .series(AggregationSeries.builder()\n                                                        .id(""xyz789"")\n                                                        .function(AggregationFunction.CARD)\n                                                        .field(""source"")\n                                                        .build())\n                                                .build()\n                                ))\n                                .build(),\n                        AggregationKeyResult.builder()\n                                .key(ImmutableList.of(now.toString(), ""one"", ""two""))\n                                .seriesValues(ImmutableList.of(\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(23.0d) // Doesn\'t match condition\n                                                .series(AggregationSeries.builder()\n                                                        .id(""abc123"")\n                                                        .function(AggregationFunction.COUNT)\n                                                        .field(""source"")\n                                                        .build())\n                                                .build(),\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(1.0d)\n                                                .series(AggregationSeries.builder()\n                                                        .id(""xyz789"")\n                                                        .function(AggregationFunction.CARD)\n                                                        .field(""source"")\n                                                        .build())\n                                                .build()\n                                ))\n                                .build()\n                ))\n                .build();\n\n        final ImmutableList<EventWithContext> eventsWithContext = eventProcessor.eventsFromAggregationResult(eventFactory, parameters, result);\n\n        assertThat(eventsWithContext).hasSize(1);\n\n        assertThat(eventsWithContext.get(0)).satisfies(eventWithContext -> {\n            final Event event = eventWithContext.event();\n\n            assertThat(event.getId()).isEqualTo(event1.getId());\n            assertThat(event.getMessage()).isEqualTo(event1.getMessage());\n            assertThat(event.getEventTimestamp()).isEqualTo(timerange.to());\n            assertThat(event.getTimerangeStart()).isEqualTo(timerange.from());\n            assertThat(event.getTimerangeEnd()).isEqualTo(timerange.to());\n            // Should contain all streams because when config.streams is empty, we search in all streams\n            assertThat(event.getSourceStreams()).containsOnly(""stream-1"", ""stream-2"", ""stream-3"");\n\n            final Message message = eventWithContext.messageContext().orElse(null);\n\n            assertThat(message).isNotNull();\n            assertThat(message.getField(""group_field_one"")).isEqualTo(""one"");\n            assertThat(message.getField(""group_field_two"")).isEqualTo(""two"");\n            assertThat(message.getField(""aggregation_key"")).isEqualTo(""one|two"");\n            assertThat(message.getField(""aggregation_value_count_source"")).isEqualTo(42.0d);\n            assertThat(message.getField(""aggregation_value_card_source"")).isEqualTo(1.0d);\n        });\n    }\n']",when;timerange;any;result;aggregation;Events;Conditions;Reference;the;Return,6.984919309616089e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.9778218269348145, -5.403223514556885, -4.633472442626953, -5.802011013031006, -5.5527849197387695, -0.023939717561006546]",0.9763445854187012
2,"['    @Test\n    public void createEventsWithFilter() throws Exception {\n        when(eventProcessorDependencyCheck.hasMessagesIndexedUpTo(any(DateTime.class))).thenReturn(true);\n\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));\n\n        final AggregationEventProcessorConfig config = AggregationEventProcessorConfig.builder()\n                .query("""")\n                .streams(ImmutableSet.of())\n                .groupBy(ImmutableList.of())\n                .series(ImmutableList.of())\n                .conditions(null)\n                .searchWithinMs(30000)\n                .executeEveryMs(30000)\n                .build();\n        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()\n                .id(""dto-id-1"")\n                .title(""Test Aggregation"")\n                .description(""A test aggregation event processors"")\n                .priority(1)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .config(config)\n                .keySpec(ImmutableList.of())\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .timerange(timerange)\n                .build();\n\n        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);\n\n        assertThatCode(() -> eventProcessor.createEvents(eventFactory, parameters, (events) -> {})).doesNotThrowAnyException();\n\n        verify(moreSearch, times(1)).scrollQuery(\n                eq(config.query()),\n                eq(config.streams()),\n                eq(config.queryParameters()),\n                eq(parameters.timerange()),\n                eq(parameters.batchSize()),\n                any(MoreSearch.ScrollCallback.class)\n        );\n        verify(searchFactory, never()).create(eq(config), eq(parameters), any(String.class), eq(eventDefinitionDto));\n    }\n']",Filter;query;Hours;when;create;Settings;with;Settings;UTC;Aggregation,7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.2928149923682213e-10;4.0745362639427185e-10;3.710738383233547e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.9978928565979, -5.359198570251465, -4.588498592376709, -5.860450267791748, -5.589730262756348, -0.024234138429164886]",0.9760572910308838
2,"['    @Test\n    public void createEventsWithoutRequiredMessagesBeingIndexed() throws Exception {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));\n\n        final AggregationEventProcessorConfig config = AggregationEventProcessorConfig.builder()\n                .query("""")\n                .streams(ImmutableSet.of())\n                .groupBy(ImmutableList.of())\n                .series(ImmutableList.of())\n                .conditions(null)\n                .searchWithinMs(30000)\n                .executeEveryMs(30000)\n                .build();\n        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()\n                .id(""dto-id-1"")\n                .title(""Test Aggregation"")\n                .description(""A test aggregation event processors"")\n                .priority(1)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .config(config)\n                .keySpec(ImmutableList.of())\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .timerange(timerange)\n                .build();\n\n        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);\n\n        // If the dependency check returns true, there should be no exception raised and the state service should be called\n        when(eventProcessorDependencyCheck.hasMessagesIndexedUpTo(timerange.to())).thenReturn(true);\n\n        assertThatCode(() -> eventProcessor.createEvents(eventFactory, parameters, (events) -> {})).doesNotThrowAnyException();\n\n        verify(stateService, times(1)).setState(""dto-id-1"", timerange.from(), timerange.to());\n        verify(moreSearch, times(1)).scrollQuery(\n                eq(config.query()),\n                eq(config.streams()),\n                eq(config.queryParameters()),\n                eq(parameters.timerange()),\n                eq(parameters.batchSize()),\n                any(MoreSearch.ScrollCallback.class)\n        );\n\n        reset(stateService, moreSearch, searchFactory); // Rest mocks so we can verify it again\n\n        // If the dependency check returns false, a precondition exception should be raised and the state service not be called\n        when(eventProcessorDependencyCheck.hasMessagesIndexedUpTo(timerange.to())).thenReturn(false);\n\n        assertThatCode(() -> eventProcessor.createEvents(eventFactory, parameters, (events) -> {}))\n                .hasMessageContaining(eventDefinitionDto.title())\n                .hasMessageContaining(eventDefinitionDto.id())\n                .hasMessageContaining(timerange.from().toString())\n                .hasMessageContaining(timerange.to().toString())\n                .isInstanceOf(EventProcessorPreconditionException.class);\n\n        verify(stateService, never()).setState(any(String.class), any(DateTime.class), any(DateTime.class));\n        verify(searchFactory, never()).create(any(), any(), any(), any());\n        verify(moreSearch, never()).scrollQuery(\n                eq(config.query()),\n                eq(config.streams()),\n                eq(config.queryParameters()),\n                eq(parameters.timerange()),\n                eq(parameters.batchSize()),\n                any(MoreSearch.ScrollCallback.class)\n        );\n    }\n']",conditions;Immutable;Processor;null;Immutable;Being;priority;group;key;to,5.820766091346741e-10;5.093170329928398e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.979327201843262, -5.365368366241455, -4.610960483551025, -5.839081764221191, -5.554977893829346, -0.024219011887907982]",0.9760717749595642
2,"['    @Test\n    public void testEventsFromAggregationResultWithEmptyResultUsesEventDefinitionStreamAsSourceStreams() {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));\n\n        // We expect to get the end of the aggregation timerange as event time\n        final TestEvent event1 = new TestEvent(timerange.to());\n        final TestEvent event2 = new TestEvent(timerange.to());\n        when(eventFactory.createEvent(any(EventDefinition.class), eq(now), anyString()))\n                .thenReturn(event1)  // first invocation return value\n                .thenReturn(event2); // second invocation return value\n\n        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()\n                .id(""dto-id-1"")\n                .title(""Test Aggregation"")\n                .description(""A test aggregation event processors"")\n                .priority(1)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .config(AggregationEventProcessorConfig.builder()\n                        .query("""")\n                        .streams(ImmutableSet.of(""stream-2""))\n                        .groupBy(ImmutableList.of(""group_field_one"", ""group_field_two""))\n                        .series(ImmutableList.of())\n                        .conditions(null)\n                        .searchWithinMs(30000)\n                        .executeEveryMs(30000)\n                        .build())\n                .keySpec(ImmutableList.of())\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .timerange(timerange)\n                .build();\n\n        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);\n\n        final AggregationResult result = AggregationResult.builder()\n                .effectiveTimerange(timerange)\n                .totalAggregatedMessages(0)\n                .sourceStreams(ImmutableSet.of()) // No streams in result\n                .keyResults(ImmutableList.of(\n                        AggregationKeyResult.builder()\n                                .key(ImmutableList.of(""one"", ""two""))\n                                .timestamp(now)\n                                .seriesValues(ImmutableList.of(\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(0.0d)\n                                                .series(AggregationSeries.builder()\n                                                        .id(""abc123"")\n                                                        .function(AggregationFunction.COUNT)\n                                                        .build())\n                                                .build()\n                                ))\n                                .build()\n                ))\n                .build();\n\n        final ImmutableList<EventWithContext> eventsWithContext = eventProcessor.eventsFromAggregationResult(eventFactory, parameters, result);\n\n        assertThat(eventsWithContext).hasSize(1);\n\n        assertThat(eventsWithContext.get(0)).satisfies(eventWithContext -> {\n            final Event event = eventWithContext.event();\n\n            assertThat(event.getId()).isEqualTo(event1.getId());\n            assertThat(event.getMessage()).isEqualTo(event1.getMessage());\n            assertThat(event.getEventTimestamp()).isEqualTo(timerange.to());\n            assertThat(event.getTimerangeStart()).isEqualTo(timerange.from());\n            assertThat(event.getTimerangeEnd()).isEqualTo(timerange.to());\n            // Must contain the stream from the event definition because there is none in the result\n            assertThat(event.getSourceStreams()).containsOnly(""stream-2"");\n\n            final Message message = eventWithContext.messageContext().orElse(null);\n\n            assertThat(message).isNotNull();\n            assertThat(message.getField(""group_field_one"")).isEqualTo(""one"");\n            assertThat(message.getField(""group_field_two"")).isEqualTo(""two"");\n            assertThat(message.getField(""aggregation_key"")).isEqualTo(""one|two"");\n            assertThat(message.getField(""aggregation_value_count"")).isEqualTo(0.0d);\n        });\n    }\n']",Uses;aggregation;title;Grace;Definition;timerange;Immutable;event;Result;Config,8.731149137020111e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9509382247924805, -5.382811546325684, -4.638805866241455, -5.806009769439697, -5.526009559631348, -0.024148032069206238]",0.9761412143707275
2,"['    @Test\n    public void testEventsFromAggregationResultWithEmptyResultAndNoConfiguredStreamsUsesAllStreamsAsSourceStreams() {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));\n\n        // We expect to get the end of the aggregation timerange as event time\n        final TestEvent event1 = new TestEvent(timerange.to());\n        final TestEvent event2 = new TestEvent(timerange.to());\n        when(eventFactory.createEvent(any(EventDefinition.class), eq(now), anyString()))\n                .thenReturn(event1)  // first invocation return value\n                .thenReturn(event2); // second invocation return value\n\n        when(streamService.loadAll()).thenReturn(ImmutableList.of(\n                new StreamMock(Collections.singletonMap(""_id"", ""stream-1""), Collections.emptyList()),\n                new StreamMock(Collections.singletonMap(""_id"", ""stream-2""), Collections.emptyList()),\n                new StreamMock(Collections.singletonMap(""_id"", ""stream-3""), Collections.emptyList()),\n                new StreamMock(Collections.singletonMap(""_id"", StreamImpl.DEFAULT_STREAM_ID), Collections.emptyList()),\n                new StreamMock(Collections.singletonMap(""_id"", StreamImpl.DEFAULT_EVENTS_STREAM_ID), Collections.emptyList()),\n                new StreamMock(Collections.singletonMap(""_id"", StreamImpl.DEFAULT_SYSTEM_EVENTS_STREAM_ID), Collections.emptyList())\n        ));\n\n        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()\n                .id(""dto-id-1"")\n                .title(""Test Aggregation"")\n                .description(""A test aggregation event processors"")\n                .priority(1)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .config(AggregationEventProcessorConfig.builder()\n                        .query("""")\n                        .streams(ImmutableSet.of()) // No configured streams!\n                        .groupBy(ImmutableList.of(""group_field_one"", ""group_field_two""))\n                        .series(ImmutableList.of())\n                        .conditions(null)\n                        .searchWithinMs(30000)\n                        .executeEveryMs(30000)\n                        .build())\n                .keySpec(ImmutableList.of())\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .timerange(timerange)\n                .build();\n\n        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);\n\n        final AggregationResult result = AggregationResult.builder()\n                .effectiveTimerange(timerange)\n                .totalAggregatedMessages(0)\n                .sourceStreams(ImmutableSet.of()) // No streams in result\n                .keyResults(ImmutableList.of(\n                        AggregationKeyResult.builder()\n                                .key(ImmutableList.of(""one"", ""two""))\n                                .timestamp(now)\n                                .seriesValues(ImmutableList.of(\n                                        AggregationSeriesValue.builder()\n                                                .key(ImmutableList.of(""a""))\n                                                .value(0.0d)\n                                                .series(AggregationSeries.builder()\n                                                        .id(""abc123"")\n                                                        .function(AggregationFunction.COUNT)\n                                                        .build())\n                                                .build()\n                                ))\n                                .build()\n                ))\n                .build();\n\n        final ImmutableList<EventWithContext> eventsWithContext = eventProcessor.eventsFromAggregationResult(eventFactory, parameters, result);\n\n        assertThat(eventsWithContext).hasSize(1);\n\n        assertThat(eventsWithContext.get(0)).satisfies(eventWithContext -> {\n            final Event event = eventWithContext.event();\n\n            assertThat(event.getId()).isEqualTo(event1.getId());\n            assertThat(event.getMessage()).isEqualTo(event1.getMessage());\n            assertThat(event.getEventTimestamp()).isEqualTo(timerange.to());\n            assertThat(event.getTimerangeStart()).isEqualTo(timerange.from());\n            assertThat(event.getTimerangeEnd()).isEqualTo(timerange.to());\n            // Must contain all existing streams but the default event streams!\n            assertThat(event.getSourceStreams()).containsOnly(\n                    ""stream-1"",\n                    ""stream-2"",\n                    ""stream-3"",\n                    StreamImpl.DEFAULT_STREAM_ID\n            );\n\n            final Message message = eventWithContext.messageContext().orElse(null);\n\n            assertThat(message).isNotNull();\n            assertThat(message.getField(""group_field_one"")).isEqualTo(""one"");\n            assertThat(message.getField(""group_field_two"")).isEqualTo(""two"");\n            assertThat(message.getField(""aggregation_key"")).isEqualTo(""one|two"");\n            assertThat(message.getField(""aggregation_value_count"")).isEqualTo(0.0d);\n        });\n    }\n']",Hours;Source;Zone;Result;Event;of;From;Configured;ock;Immutable,6.111804395914078e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.921718597412109, -5.420137882232666, -4.654685020446777, -5.783015251159668, -5.491725444793701, -0.02411254122853279]",0.976175844669342
2,"['    @Test\n    public void testExtractValuesWithGroupBy() throws Exception {\n        final AbsoluteRange timerange = AbsoluteRange.create(DateTime.now(DateTimeZone.UTC).minusSeconds(3600), DateTime.now(DateTimeZone.UTC));\n        final AggregationSeries seriesCount = AggregationSeries.create(""abc123"", AggregationFunction.COUNT, ""source"");\n        final AggregationSeries seriesCard = AggregationSeries.create(""abc123"", AggregationFunction.CARD, ""source"");\n        final AggregationEventProcessorConfig config = AggregationEventProcessorConfig.builder()\n                .query("""")\n                .streams(Collections.emptySet())\n                .groupBy(Collections.emptyList())\n                .series(ImmutableList.of(seriesCount, seriesCard))\n                .conditions(null)\n                .searchWithinMs(30000)\n                .executeEveryMs(30000)\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .streams(Collections.emptySet())\n                .timerange(timerange)\n                .batchSize(500)\n                .build();\n\n        final PivotAggregationSearch pivotAggregationSearch = new PivotAggregationSearch(\n                config,\n                parameters,\n                ""test"",\n                eventDefinition,\n                searchJobService,\n                queryEngine,\n                EventsConfigurationTestProvider.create(),\n                moreSearch,\n                permittedStreams);\n\n        final String toString = timerange.getTo().toString();\n        final PivotResult pivotResult = PivotResult.builder()\n                .id(""test"")\n                .effectiveTimerange(timerange)\n                .total(1)\n                .addRow(PivotResult.Row.builder()\n                        .key(ImmutableList.of(toString, ""a"", ""b""))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/source/abc123""), 42, true, ""row-leaf""))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/card/source/abc123""), 1, true, ""row-leaf""))\n                        .source(""leaf"")\n                        .build())\n                .addRow(PivotResult.Row.builder()\n                        .key(ImmutableList.of(toString, ""a""))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/source/abc123""), 84, true, ""row-inner""))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/card/source/abc123""), 1, true, ""row-inner""))\n                        .source(""non-leaf"")\n                        .build())\n                .addRow(PivotResult.Row.builder()\n                        .key(ImmutableList.of(toString, ""a"", ""c""))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/source/abc123""), 42, true, ""row-leaf""))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/card/source/abc123""), 1, true, ""row-leaf""))\n                        .source(""leaf"")\n                        .build())\n                .build();\n\n        final ImmutableList<AggregationKeyResult> results = pivotAggregationSearch.extractValues(pivotResult);\n\n        assertThat(results.size()).isEqualTo(2);\n\n        assertThat(results.get(0)).isEqualTo(AggregationKeyResult.builder()\n                .timestamp(timerange.getTo())\n                .key(ImmutableList.of(""a"", ""b""))\n                .seriesValues(ImmutableList.of(\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of(""a"", ""b""))\n                                .value(42.0)\n                                .series(seriesCount)\n                                .build(),\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of(""a"", ""b""))\n                                .value(1.0)\n                                .series(seriesCard)\n                                .build()\n                ))\n                .build());\n\n        assertThat(results.get(1)).isEqualTo(AggregationKeyResult.builder()\n                .timestamp(timerange.getTo())\n                .key(ImmutableList.of(""a"", ""c""))\n                .seriesValues(ImmutableList.of(\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of(""a"", ""c""))\n                                .value(42.0)\n                                .series(seriesCount)\n                                .build(),\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of(""a"", ""c""))\n                                .value(1.0)\n                                .series(seriesCard)\n                                .build()\n                ))\n                .build());\n    }\n']",query;group;By;timerange;stream;Config;Size;Values;builder;Aggregation,9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;4.656612873077393e-10;4.511093720793724e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.055902197957039e-10;3.055902197957039e-10,5,5,"[-5.9958062171936035, -5.373249530792236, -4.601909160614014, -5.861386775970459, -5.573256492614746, -0.024094153195619583]",0.9761937856674194
2,"['    @Test\n    public void testExtractValuesWithoutGroupBy() throws Exception {\n        final AbsoluteRange timerange = AbsoluteRange.create(DateTime.now(DateTimeZone.UTC).minusSeconds(3600), DateTime.now(DateTimeZone.UTC));\n        final AggregationSeries seriesCount = AggregationSeries.create(""abc123"", AggregationFunction.COUNT, ""source"");\n        final AggregationSeries seriesCountNoField = AggregationSeries.create(""abc123"", AggregationFunction.COUNT, """");\n        final AggregationSeries seriesCard = AggregationSeries.create(""abc123"", AggregationFunction.CARD, ""source"");\n        final AggregationEventProcessorConfig config = AggregationEventProcessorConfig.builder()\n                .query("""")\n                .streams(Collections.emptySet())\n                .groupBy(Collections.emptyList())\n                .series(ImmutableList.of(seriesCount, seriesCountNoField, seriesCard))\n                .conditions(null)\n                .searchWithinMs(30000)\n                .executeEveryMs(30000)\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .streams(Collections.emptySet())\n                .timerange(timerange)\n                .batchSize(500)\n                .build();\n\n        final PivotAggregationSearch pivotAggregationSearch = new PivotAggregationSearch(\n                config,\n                parameters,\n                ""test"",\n                eventDefinition,\n                searchJobService,\n                queryEngine,\n                EventsConfigurationTestProvider.create(),\n                moreSearch,\n                permittedStreams);\n\n        final PivotResult pivotResult = PivotResult.builder()\n                .id(""test"")\n                .effectiveTimerange(timerange)\n                .total(1)\n                .addRow(PivotResult.Row.builder()\n                        .key(ImmutableList.of(timerange.getTo().toString()))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/source/abc123""), 42, true, ""row-leaf""))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/<no-field>/abc123""), 23, true, ""row-leaf""))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/card/source/abc123""), 1, true, ""row-leaf""))\n                        .source(""leaf"")\n                        .build())\n                .build();\n\n        final ImmutableList<AggregationKeyResult> results = pivotAggregationSearch.extractValues(pivotResult);\n\n        assertThat(results.size()).isEqualTo(1);\n\n        assertThat(results.get(0)).isEqualTo(AggregationKeyResult.builder()\n                .key(ImmutableList.of())\n                .timestamp(timerange.getTo())\n                .seriesValues(ImmutableList.of(\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of())\n                                .value(42.0)\n                                .series(seriesCount)\n                                .build(),\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of())\n                                .value(23.0)\n                                .series(seriesCountNoField)\n                                .build(),\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of())\n                                .value(1.0)\n                                .series(seriesCard)\n                                .build()\n                ))\n                .build());\n    }\n']",By;minus;timerange;Extract;Processor;abc;parameters;empty;Parameters;Time,8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10;2.764863893389702e-10,5,5,"[-6.006661891937256, -5.395335674285889, -4.598952293395996, -5.869699478149414, -5.572049140930176, -0.02397393435239792]",0.9763112664222717
2,"['    @Test\n    public void testExtractValuesWithNullValues() throws Exception {\n        final AbsoluteRange timerange = AbsoluteRange.create(DateTime.now(DateTimeZone.UTC).minusSeconds(3600), DateTime.now(DateTimeZone.UTC));\n        final AggregationSeries seriesCount = AggregationSeries.create(""abc123"", AggregationFunction.COUNT, ""source"");\n        final AggregationSeries seriesAvg = AggregationSeries.create(""abc123"", AggregationFunction.AVG, ""some_field"");\n        final AggregationEventProcessorConfig config = AggregationEventProcessorConfig.builder()\n                .query("""")\n                .streams(Collections.emptySet())\n                .groupBy(Collections.emptyList())\n                .series(ImmutableList.of(seriesCount, seriesAvg))\n                .conditions(null)\n                .searchWithinMs(30000)\n                .executeEveryMs(30000)\n                .build();\n        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()\n                .streams(Collections.emptySet())\n                .timerange(timerange)\n                .batchSize(500)\n                .build();\n\n        final PivotAggregationSearch pivotAggregationSearch = new PivotAggregationSearch(\n                config,\n                parameters,\n                ""test"",\n                eventDefinition,\n                searchJobService,\n                queryEngine,\n                EventsConfigurationTestProvider.create(),\n                moreSearch,\n                permittedStreams);\n\n        final PivotResult pivotResult = PivotResult.builder()\n                .id(""test"")\n                .effectiveTimerange(timerange)\n                .total(1)\n                .addRow(PivotResult.Row.builder()\n                        .key(ImmutableList.of(timerange.getTo().toString()))\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/source/abc123""), 42, true, ""row-leaf""))\n                        // A ""null"" value can happen with some Elasticsearch aggregations (e.g. avg on a non-existent field)\n                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/avg/some_field/abc123""), null, true, ""row-leaf""))\n                        .source(""leaf"")\n                        .build())\n                .build();\n\n        final ImmutableList<AggregationKeyResult> results = pivotAggregationSearch.extractValues(pivotResult);\n\n        assertThat(results.size()).isEqualTo(1);\n\n        assertThat(results.get(0)).isEqualTo(AggregationKeyResult.builder()\n                .key(ImmutableList.of())\n                .timestamp(timerange.getTo())\n                .seriesValues(ImmutableList.of(\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of())\n                                .value(42.0)\n                                .series(seriesCount)\n                                .build(),\n                        AggregationSeriesValue.builder()\n                                .key(ImmutableList.of())\n                                .value(Double.NaN) // For ""null"" we expect NaN\n                                .series(seriesAvg)\n                                .build()\n                ))\n                .build());\n    }\n']",search;AV;abc;series;null;build;Parameters;Count;Collections;Collections,7.566995918750763e-10;6.984919309616089e-10;4.802132025361061e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.995900630950928, -5.368770599365234, -4.601265907287598, -5.860753536224365, -5.574309825897217, -0.02411963976919651]",0.9761689305305481
2,"['    @Test\n    public void testDateRangeBucketWithOneTumblingWindow() {\n        final long processingWindowSize = Duration.standardSeconds(60).getMillis();\n        final long processingHopSize = Duration.standardSeconds(60).getMillis();\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final DateTime from = now;\n        final DateTime to = now.plusMillis((int) processingWindowSize);\n        TimeRange timeRange = AbsoluteRange.create(from, to);\n        final DateRangeBucket rangeBucket = PivotAggregationSearch.buildDateRangeBuckets(timeRange, processingWindowSize, processingHopSize);\n\n        assertThat(rangeBucket.ranges()).containsExactly(DateRange.create(from, to));\n    }\n']",ucket;Aggregation;to;umbling;Mill;Mill;Date;Range;Zone;final,1.862645149230957e-09;1.7171259969472885e-09;1.0477378964424133e-09;9.313225746154785e-10;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.050873279571533, -5.603838920593262, -4.577511787414551, -5.875955104827881, -5.5129899978637695, -0.023432480171322823]",0.9768399000167847
2,"['    @Test\n    public void testDateRangeBucketWithCatchUpTumblingWindows() {\n        final long processingWindowSize = Duration.standardSeconds(60).getMillis();\n        final long processingHopSize = Duration.standardSeconds(60).getMillis();\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final DateTime from = now;\n        // We are 3 full processingWindows behind\n        final DateTime to = now.plusMillis((int) processingWindowSize * 3);\n        TimeRange timeRange = AbsoluteRange.create(from, to);\n        final DateRangeBucket rangeBucket = PivotAggregationSearch.buildDateRangeBuckets(timeRange, processingWindowSize, processingHopSize);\n\n        assertThat(rangeBucket.ranges()).containsExactly(\n                DateRange.create(from.plusMillis((int) (processingWindowSize * 0)), from.plusMillis((int) (processingWindowSize * 1))),\n                DateRange.create(from.plusMillis((int) (processingWindowSize * 1)), from.plusMillis((int) (processingWindowSize * 2))),\n                DateRange.create(from.plusMillis((int) (processingWindowSize * 2)), from.plusMillis((int) (processingWindowSize * 3)))\n        );\n    }\n']",behind;ucket;UTC;Range;ucket;create;to;Range;uckets;processing,1.5133991837501526e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.980086326599121, -5.50538444519043, -4.619619846343994, -5.806123733520508, -5.510746955871582, -0.023782696574926376]",0.9764978885650635
2,"['    @Test\n    public void testDateRangeBucketWithSlidingWindow() {\n        final long processingWindowSize = Duration.standardSeconds(3600).getMillis();\n        final long processingHopSize = Duration.standardSeconds(60).getMillis();\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final DateTime from = now;\n        final DateTime to = now.plusMillis((int) processingWindowSize);\n        TimeRange timeRange = AbsoluteRange.create(from, to);\n        final DateRangeBucket rangeBucket = PivotAggregationSearch.buildDateRangeBuckets(timeRange, processingWindowSize, processingHopSize);\n\n        assertThat(rangeBucket.ranges()).containsExactly(\n                DateRange.create(from, to)\n        );\n    }\n']",ucket;ucket;Sliding;ivot;Mill;plus;Duration;now;Window;Size,1.3969838619232178e-09;1.1641532182693481e-09;8.731149137020111e-10;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-6.08398962020874, -5.59566068649292, -4.535034656524658, -5.907761096954346, -5.556040287017822, -0.02357756532728672]",0.976698100566864
2,"['    @Test\n    public void testDateRangeBucketWithCatchUpSlidingWindows() {\n        final int processingWindowSizeSec = 120;\n        final int processingHopSizeSec = 60;\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final DateTime from = now;\n        // We are 3 full processingWindows behind\n        final DateTime to = now.plusSeconds(processingWindowSizeSec * 3);\n        TimeRange timeRange = AbsoluteRange.create(from, to);\n        final DateRangeBucket rangeBucket = PivotAggregationSearch.buildDateRangeBuckets(timeRange, processingWindowSizeSec * 1000, processingHopSizeSec * 1000);\n\n        assertThat(rangeBucket.ranges()).containsExactly(\n                DateRange.create(from.plusSeconds(processingHopSizeSec * 0), from.plusSeconds(processingWindowSizeSec)),\n                DateRange.create(from.plusSeconds(processingHopSizeSec * 1), from.plusSeconds(processingHopSizeSec * 1).plusSeconds(processingWindowSizeSec)),\n                DateRange.create(from.plusSeconds(processingHopSizeSec * 2), from.plusSeconds(processingHopSizeSec * 2).plusSeconds(processingWindowSizeSec)),\n                DateRange.create(from.plusSeconds(processingHopSizeSec * 3), from.plusSeconds(processingHopSizeSec * 3).plusSeconds(processingWindowSizeSec)),\n                DateRange.create(from.plusSeconds(processingHopSizeSec * 4), to)\n        );\n    }\n']",uckets;ucket;UTC;Date;Exactly;final;Window;Sliding;final;Range,8.731149137020111e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.41970007866621e-10;3.346940502524376e-10,5,5,"[-5.9754767417907715, -5.448954105377197, -4.593408584594727, -5.838622570037842, -5.544126510620117, -0.02407006546854973]",0.9762174487113953
2,"['    @Test\n    public void create() {\n        final EventDefinitionDto newDto = EventDefinitionDto.builder()\n                .title(""Test"")\n                .description(""A test event definition"")\n                .config(TestEventProcessorConfig.builder()\n                        .message(""This is a test event processor"")\n                        .searchWithinMs(300000)\n                        .executeEveryMs(60001)\n                        .build())\n                .priority(3)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .keySpec(ImmutableList.of(""a"", ""b""))\n                .notifications(ImmutableList.of())\n                .build();\n\n        final EventDefinitionDto dto = handler.create(newDto, Optional.empty());\n\n        // Handler should create the event definition\n        assertThat(eventDefinitionService.get(dto.id())).isPresent();\n\n        final Optional<JobDefinitionDto> jobDefinition = jobDefinitionService.getByConfigField(""event_definition_id"", dto.id());\n\n        // Handler also should create the job definition for the event definition/processor\n        assertThat(jobDefinition).isPresent().get().satisfies(definition -> {\n            assertThat(definition.title()).isEqualTo(""Test"");\n            assertThat(definition.description()).isEqualTo(""A test event definition"");\n            assertThat(definition.config()).isInstanceOf(EventProcessorExecutionJob.Config.class);\n\n            final EventProcessorExecutionJob.Config config = (EventProcessorExecutionJob.Config) definition.config();\n\n\n            assertThat(config.processingWindowSize()).isEqualTo(300000);\n            assertThat(config.processingHopSize()).isEqualTo(60001);\n        });\n\n        // And the handler should also create a job trigger for the created job definition\n        final Optional<JobTriggerDto> jobTrigger = jobTriggerService.nextRunnableTrigger();\n\n        assertThat(jobTrigger).isPresent().get().satisfies(trigger -> {\n            assertThat(trigger.jobDefinitionId()).isEqualTo(jobDefinition.get().id());\n            assertThat(trigger.schedule()).isInstanceOf(IntervalJobSchedule.class);\n\n            final IntervalJobSchedule schedule = (IntervalJobSchedule) trigger.schedule();\n\n            assertThat(schedule.interval()).isEqualTo(60001);\n            assertThat(schedule.unit()).isEqualTo(TimeUnit.MILLISECONDS);\n        });\n    }\n']",Processor;search;Within;Definition;final;to;to;job;Settings;Optional,4.94765117764473e-10;4.656612873077393e-10;3.637978807091713e-10;3.2014213502407074e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.903977870941162, -5.318048000335693, -4.65772819519043, -5.774470329284668, -5.5066986083984375, -0.024583840742707253]",0.9757157564163208
2,"['    @Test\n    public void createWithoutSchedule() {\n        final EventDefinitionDto newDto = EventDefinitionDto.builder()\n                .title(""Test"")\n                .description(""A test event definition"")\n                .config(TestEventProcessorConfig.builder()\n                        .message(""This is a test event processor"")\n                        .searchWithinMs(300000)\n                        .executeEveryMs(60001)\n                        .build())\n                .priority(3)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .keySpec(ImmutableList.of(""a"", ""b""))\n                .notifications(ImmutableList.of())\n                .build();\n\n        final EventDefinitionDto dto = handler.createWithoutSchedule(newDto, Optional.empty());\n\n        // Handler should create the event definition\n        assertThat(eventDefinitionService.get(dto.id())).isPresent();\n\n        // Handler should NOT create a job definition for the event definition/processor\n        assertThat(jobDefinitionService.getByConfigField(""event_definition_id"", dto.id())).isNotPresent();\n\n        // And the handler should also NOT create a job trigger for the created job definition\n        assertThat(jobTriggerService.nextRunnableTrigger()).isNotPresent();\n    }\n']",processor;Without;Every;of;event;Within;Event;Immutable;builder;Definition,4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.924663066864014, -5.341094970703125, -4.6476149559021, -5.791851043701172, -5.517759323120117, -0.024410400539636612]",0.9758850932121277
2,"['    @Test\n    public void update() {\n        final String newTitle = ""A NEW TITLE "" + DateTime.now(DateTimeZone.UTC).toString();\n        final String newDescription = ""A NEW DESCRIPTION "" + DateTime.now(DateTimeZone.UTC).toString();\n\n        final EventDefinitionDto existingDto = eventDefinitionService.get(""54e3deadbeefdeadbeef0000"").orElse(null);\n        final JobDefinitionDto existingJobDefinition = jobDefinitionService.get(""54e3deadbeefdeadbeef0001"").orElse(null);\n        final JobTriggerDto existingTrigger = jobTriggerService.get(""54e3deadbeefdeadbeef0002"").orElse(null);\n        final TestEventProcessorConfig existingConfig = (TestEventProcessorConfig) existingDto.config();\n        final TestEventProcessorConfig newConfig = existingConfig.toBuilder()\n                .executeEveryMs(550000)\n                .searchWithinMs(800000)\n                .build();\n        final EventProcessorExecutionJob.Data existingTriggerData = (EventProcessorExecutionJob.Data) existingTrigger.data().orElseThrow(AssertionError::new);\n\n        assertThat(existingDto).isNotNull();\n        assertThat(existingJobDefinition).isNotNull();\n        assertThat(existingTrigger).isNotNull();\n\n        final EventDefinitionDto updatedDto = existingDto.toBuilder()\n                .title(newTitle)\n                .description(newDescription)\n                .config(newConfig)\n                .build();\n\n        assertThat(handler.update(updatedDto, true)).isNotEqualTo(existingDto);\n\n        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {\n            assertThat(dto.id()).isEqualTo(existingDto.id());\n            assertThat(dto.title()).isEqualTo(newTitle);\n            assertThat(dto.description()).isEqualTo(newDescription);\n        });\n\n        // Test that the schedule is updated to the new config\n        final JobDefinitionDto newJobDefinition = jobDefinitionService.get(""54e3deadbeefdeadbeef0001"").orElseThrow(AssertionError::new);\n        assertThat(newJobDefinition.title()).isEqualTo(newTitle);\n        assertThat(newJobDefinition.description()).isEqualTo(newDescription);\n        assertThat(((EventProcessorExecutionJob.Config) newJobDefinition.config()).processingHopSize()).isEqualTo(550000);\n        assertThat(((EventProcessorExecutionJob.Config) newJobDefinition.config()).processingWindowSize()).isEqualTo(800000);\n\n        // Test if the EventDefinition update removed the old trigger data\n        // and reset the job definition timerange to the new parameters\n        final EventProcessorExecutionJob.Config newJobConfig = (EventProcessorExecutionJob.Config) newJobDefinition.config();\n        final TimeRange newTimeRange = newJobConfig.parameters().timerange();\n        assertThat(newTimeRange.getFrom()).isEqualTo(clock.nowUTC().minus(newConfig.searchWithinMs()));\n        assertThat(newTimeRange.getTo()).isEqualTo(clock.nowUTC());\n\n        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isPresent().get().satisfies(trigger -> {\n            assertThat(trigger.data()).isEmpty();\n            assertThat(trigger.nextTime()).isEqualTo(clock.nowUTC());\n        });\n    }\n']",NEW;NEW;DESCRIPTION;Assertion;Else;to;Date;Execution;TITLE;existing,1.862645149230957e-09;9.89530235528946e-10;9.313225746154785e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.892146587371826, -5.3987016677856445, -4.672131061553955, -5.742058753967285, -5.452664375305176, -0.024424711242318153]",0.9758711457252502
2,"['    @Test\n    public void updateWithSchedulingDisabled() {\n        final String newTitle = ""A NEW TITLE "" + DateTime.now(DateTimeZone.UTC).toString();\n        final String newDescription = ""A NEW DESCRIPTION "" + DateTime.now(DateTimeZone.UTC).toString();\n\n        final EventDefinitionDto existingDto = eventDefinitionService.get(""54e3deadbeefdeadbeef0000"").orElse(null);\n        final JobDefinitionDto existingJobDefinition = jobDefinitionService.get(""54e3deadbeefdeadbeef0001"").orElse(null);\n        final JobTriggerDto existingTrigger = jobTriggerService.get(""54e3deadbeefdeadbeef0002"").orElse(null);\n        final TestEventProcessorConfig existingConfig = (TestEventProcessorConfig) existingDto.config();\n        final TestEventProcessorConfig newConfig = existingConfig.toBuilder()\n                .executeEveryMs(550000)\n                .searchWithinMs(800000)\n                .build();\n\n        assertThat(existingDto).isNotNull();\n        assertThat(existingJobDefinition).isNotNull();\n        assertThat(existingTrigger).isNotNull();\n\n        final EventDefinitionDto updatedDto = existingDto.toBuilder()\n                .title(newTitle)\n                .description(newDescription)\n                .config(newConfig)\n                .build();\n\n        assertThat(handler.update(updatedDto, false)).isNotEqualTo(existingDto);\n\n        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {\n            assertThat(dto.id()).isEqualTo(existingDto.id());\n            assertThat(dto.title()).isEqualTo(newTitle);\n            assertThat(dto.description()).isEqualTo(newDescription);\n        });\n\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isNotPresent();\n        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isNotPresent();\n    }\n']",Description;Processor;Ms;cheduling;Definition;null;Every;to;Description;Service,4.802132025361061e-10;4.729372449219227e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.874553203582764, -5.40656042098999, -4.678384780883789, -5.7108893394470215, -5.429373741149902, -0.024586400017142296]",0.9757133722305298
2,"['    @Test\n    public void updateWithSchedulingReEnabled() {\n        final String newTitle = ""A NEW TITLE "" + DateTime.now(DateTimeZone.UTC).toString();\n        final String newDescription = ""A NEW DESCRIPTION "" + DateTime.now(DateTimeZone.UTC).toString();\n\n        final EventDefinitionDto existingDto = eventDefinitionService.get(""54e3deadbeefdeadbeef0000"").orElse(null);\n        final TestEventProcessorConfig existingConfig = (TestEventProcessorConfig) existingDto.config();\n        final TestEventProcessorConfig newConfig = existingConfig.toBuilder()\n                .executeEveryMs(550000)\n                .searchWithinMs(800000)\n                .build();\n\n        assertThat(existingDto).isNotNull();\n\n        final EventDefinitionDto updatedDto = existingDto.toBuilder()\n                .title(newTitle)\n                .description(newDescription)\n                .config(newConfig)\n                .build();\n\n        assertThat(handler.update(updatedDto, true)).isNotEqualTo(existingDto);\n\n        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {\n            assertThat(dto.id()).isEqualTo(existingDto.id());\n            assertThat(dto.title()).isEqualTo(newTitle);\n            assertThat(dto.description()).isEqualTo(newDescription);\n        });\n\n        final JobDefinitionDto newJobDefinition = jobDefinitionService.getByConfigField(""event_definition_id"", existingDto.id())\n                .orElseThrow(AssertionError::new);\n        assertThat(newJobDefinition.title()).isEqualTo(newTitle);\n        assertThat(newJobDefinition.description()).isEqualTo(newDescription);\n        assertThat(((EventProcessorExecutionJob.Config) newJobDefinition.config()).processingHopSize()).isEqualTo(550000);\n\n        assertThat(jobTriggerService.getForJob(newJobDefinition.id()).get(0)).satisfies(trigger -> {\n            final IntervalJobSchedule schedule = (IntervalJobSchedule) trigger.schedule();\n            assertThat(schedule.interval()).isEqualTo(550000);\n        });\n    }\n']",deadbeefdeadbeef;TITLE;DESCRIPTION;config;That;description;Config;to;Event;existing,1.367880031466484e-09;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.880950450897217, -5.4193806648254395, -4.681616306304932, -5.689171314239502, -5.427533149719238, -0.024561624974012375]",0.9757376909255981
2,"['    @Test\n    public void updateWithErrors() {\n        final String newTitle = ""A NEW TITLE "" + DateTime.now(DateTimeZone.UTC).toString();\n        final String newDescription = ""A NEW DESCRIPTION "" + DateTime.now(DateTimeZone.UTC).toString();\n\n        final EventDefinitionDto existingDto = eventDefinitionService.get(""54e3deadbeefdeadbeef0000"").orElse(null);\n        final JobDefinitionDto existingJobDefinition = jobDefinitionService.get(""54e3deadbeefdeadbeef0001"").orElse(null);\n        final JobTriggerDto existingTrigger = jobTriggerService.get(""54e3deadbeefdeadbeef0002"").orElse(null);\n\n        assertThat(existingDto).isNotNull();\n        assertThat(existingJobDefinition).isNotNull();\n        assertThat(existingTrigger).isNotNull();\n\n        final EventDefinitionDto updatedDto = existingDto.toBuilder()\n                .title(newTitle)\n                .description(newDescription)\n                .build();\n\n        doThrow(new NullPointerException(""yolo1"")).when(eventDefinitionService).save(any());\n\n        assertThatCode(() -> handler.update(updatedDto, true))\n                .isInstanceOf(NullPointerException.class)\n                .hasMessageContaining(""yolo1"");\n\n        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {\n            assertThat(dto.id()).isEqualTo(existingDto.id());\n            assertThat(dto.title()).isEqualTo(existingDto.title());\n            assertThat(dto.description()).isEqualTo(existingDto.description());\n        });\n\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent().get().satisfies(definition -> {\n            assertThat(definition.title()).isEqualTo(existingJobDefinition.title());\n            assertThat(definition.description()).isEqualTo(existingJobDefinition.description());\n        });\n\n        // Reset all before doing new stubs\n        reset(eventDefinitionService);\n        reset(jobDefinitionService);\n        reset(jobTriggerService);\n\n        doThrow(new NullPointerException(""yolo2"")).when(jobDefinitionService).save(any());\n\n        assertThatCode(() -> handler.update(updatedDto, true))\n                .isInstanceOf(NullPointerException.class)\n                .hasMessageContaining(""yolo2"");\n\n        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {\n            assertThat(dto.id()).isEqualTo(existingDto.id());\n            assertThat(dto.title()).isEqualTo(existingDto.title());\n            assertThat(dto.description()).isEqualTo(existingDto.description());\n        });\n\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent().get().satisfies(definition -> {\n            assertThat(definition.title()).isEqualTo(existingJobDefinition.title());\n            assertThat(definition.description()).isEqualTo(existingJobDefinition.description());\n        });\n\n        // Reset all before doing new stubs\n        reset(eventDefinitionService);\n        reset(jobDefinitionService);\n        reset(jobTriggerService);\n\n        doThrow(new NullPointerException(""yolo3"")).when(jobTriggerService).update(any());\n\n        assertThatCode(() -> handler.update(updatedDto, true))\n                .isInstanceOf(NullPointerException.class)\n                .hasMessageContaining(""yolo3"");\n\n        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {\n            assertThat(dto.id()).isEqualTo(existingDto.id());\n            assertThat(dto.title()).isEqualTo(existingDto.title());\n            assertThat(dto.description()).isEqualTo(existingDto.description());\n        });\n\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent().get().satisfies(definition -> {\n            assertThat(definition.title()).isEqualTo(existingJobDefinition.title());\n            assertThat(definition.description()).isEqualTo(existingJobDefinition.description());\n        });\n    }\n']",description;update;Trigger;get;Throw;final;Title;Definition;Zone;update,6.111804395914078e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;4.001776687800884e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.834306716918945, -5.390735626220703, -4.697037220001221, -5.674254417419434, -5.402992248535156, -0.02484888583421707]",0.9754573106765747
2,"['    @Test\n    public void delete() {\n        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isPresent();\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent();\n        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isPresent();\n\n        assertThat(handler.delete(""54e3deadbeefdeadbeef0000"")).isTrue();\n\n        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isNotPresent();\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isNotPresent();\n        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isNotPresent();\n    }\n']",deadbeefdeadbeef;Definition;Present;Service;Definition;Definition;Service;deadbeefdeadbeef;Present;get,1.0040821507573128e-09;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.829290390014648, -5.5843353271484375, -4.679887771606445, -5.702139377593994, -5.272793769836426, -0.024748295545578003]",0.975555419921875
2,"['    @Test\n    public void schedule() {\n        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isPresent();\n        assertThat(jobDefinitionService.streamAll().count()).isEqualTo(0);\n        assertThat(jobTriggerService.all()).isEmpty();\n\n        handler.schedule(""54e3deadbeefdeadbeef0000"");\n\n        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isPresent();\n\n        assertThat(jobDefinitionService.getByConfigField(""event_definition_id"", ""54e3deadbeefdeadbeef0000""))\n                .get()\n                .satisfies(definition -> {\n                    assertThat(definition.title()).isEqualTo(""Test"");\n                    assertThat(definition.description()).isEqualTo(""A test event definition"");\n                    assertThat(definition.config()).isInstanceOf(EventProcessorExecutionJob.Config.class);\n\n                    final EventProcessorExecutionJob.Config config = (EventProcessorExecutionJob.Config) definition.config();\n\n\n                    assertThat(config.processingWindowSize()).isEqualTo(300000);\n                    assertThat(config.processingHopSize()).isEqualTo(60000);\n\n                    assertThat(jobTriggerService.nextRunnableTrigger()).get().satisfies(trigger -> {\n                        assertThat(trigger.jobDefinitionId()).isEqualTo(definition.id());\n                        assertThat(trigger.schedule()).isInstanceOf(IntervalJobSchedule.class);\n\n                        final IntervalJobSchedule schedule = (IntervalJobSchedule) trigger.schedule();\n\n                        assertThat(schedule.interval()).isEqualTo(60000);\n                        assertThat(schedule.unit()).isEqualTo(TimeUnit.MILLISECONDS);\n                    });\n                });\n\n\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isNotPresent();\n        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isNotPresent();\n    }\n']",definition;definition;event;schedule;Execution;Execution;get;Execution;That;Job,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.2014213502407074e-10;3.055902197957039e-10;2.473825588822365e-10;2.4010660126805305e-10,5,5,"[-5.714832782745361, -5.33884859085083, -4.722045421600342, -5.584165573120117, -5.278322219848633, -0.02619291841983795]",0.9741470217704773
2,"['    @Test\n    public void scheduleWithMissingEventDefinition() {\n        final String id = ""54e3deadbeefdeadbeef9999"";\n\n        // The event definition should not exist so our test works\n        assertThat(eventDefinitionService.get(id)).isNotPresent();\n\n        assertThatThrownBy(() -> handler.schedule(id))\n                .hasMessageContaining(""doesn\'t exist"")\n                .isInstanceOf(IllegalArgumentException.class);\n    }\n']",deadbeefdeadbeef;Service;id;Event;That;That;event;class;final;Containing,1.6298145055770874e-09;6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.961858749389648, -5.588046073913574, -4.655988693237305, -5.7990593910217285, -5.402697563171387, -0.023633915930986404]",0.9766432046890259
2,"['    @Test\n    public void unschedule() {\n        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isPresent();\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent();\n        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isPresent();\n\n        handler.unschedule(""54e3deadbeefdeadbeef0000"");\n\n        // Unschedule should NOT delete the event definition!\n        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isPresent();\n\n        // Only the job definition and the trigger\n        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isNotPresent();\n        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isNotPresent();\n    }\n']",deadbeefdeadbeef;unschedule;Present;Present;job;trigger;Unschedule;definition;Present;That,1.0622898116707802e-09;1.0477378964424133e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.844564437866211, -5.548928737640381, -4.684430122375488, -5.730381488800049, -5.3149590492248535, -0.02448589913547039]",0.9758114218711853
2,"['    @Test\n    public void unscheduleWithMissingEventDefinition() {\n        final String id = ""54e3deadbeefdeadbeef9999"";\n\n        // The event definition should not exist so our test works\n        assertThat(eventDefinitionService.get(id)).isNotPresent();\n\n        assertThatThrownBy(() -> handler.unschedule(id))\n                .hasMessageContaining(""doesn\'t exist"")\n                .isInstanceOf(IllegalArgumentException.class);\n    }\n']",Thrown;class;id;Exception;event;id;By;get;That;Missing,8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.957839488983154, -5.583263397216797, -4.658657550811768, -5.798071384429932, -5.4014573097229, -0.0236456748098135]",0.9766317009925842
2,"['    @Test\n    public void testValidateWithEmptyTitle() {\n        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()\n            .title("""")\n            .build();\n        final ValidationResult validationResult = invalidEventDefinition.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""title"");\n    }\n']",failed;Result;validate;Title;True;get;Event;final;invalid;Validation,5.238689482212067e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-6.024341106414795, -5.58645486831665, -4.591851711273193, -5.8602070808410645, -5.445918560028076, -0.023745911195874214]",0.9765338897705078
2,"['    @Test\n    public void testValidateWithEmptyConfigType() {\n        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()\n            .config(new EventProcessorConfig.FallbackConfig())\n            .build();\n        final ValidationResult validationResult = invalidEventDefinition.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""config"");\n    }\n']",Keys;That;Definition;Empty;invalid;Definition;Event;validate;Event;validation,6.402842700481415e-10;6.402842700481415e-10;5.529727786779404e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-6.008458137512207, -5.5723419189453125, -4.603679180145264, -5.854477405548096, -5.435724258422852, -0.02377990260720253]",0.9765005111694336
2,"['    @Test\n    public void testValidateWithInvalidConfig() {\n        final AggregationEventProcessorConfig configMock = mock(AggregationEventProcessorConfig.class);\n        final ValidationResult mockedValidationResult = new ValidationResult();\n        mockedValidationResult.addError(""foo"", ""bar"");\n        when(configMock.validate()).thenReturn(mockedValidationResult);\n\n        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()\n            .config(configMock)\n            .build();\n        final ValidationResult validationResult = invalidEventDefinition.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""foo"");\n    }\n']",foo;Processor;That;Errors;Validate;validation;Aggregation;config;contains;Invalid,5.529727786779404e-10;4.802132025361061e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.992229461669922, -5.541574478149414, -4.618721008300781, -5.833069324493408, -5.4469380378723145, -0.02380341663956642]",0.9764776229858398
2,"['    @Test\n    public void testValidateWithInvalidFieldName() {\n        final EventFieldSpec fieldSpecMock = mock(EventFieldSpec.class);\n        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()\n            .fieldSpec(ImmutableMap.of(""foo\\\\bar"", fieldSpecMock, ""$yo&^a"", fieldSpecMock))\n            .build();\n        final ValidationResult validationResult = invalidEventDefinition.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""field_spec"");\n        final List<String> fieldValidation = (List<String>) validationResult.getErrors().get(""field_spec"");\n        assertThat(fieldValidation.size()).isEqualTo(2);\n        assertThat(fieldValidation.get(0)).contains(""foo\\\\bar"");\n        assertThat(fieldValidation.get(1)).contains(""$yo&^a"");\n    }\n']",ock;Validation;Validate;validate;contains;Result;final;Definition;Event;mock,5.238689482212067e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.511093720793724e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.916761875152588, -5.556784152984619, -4.671857833862305, -5.7295074462890625, -5.3817243576049805, -0.024045277386903763]",0.9762415289878845
2,"['    @Test\n    public void testValidateWithKeySpecNotInFieldSpec() {\n        final EventFieldSpec fieldSpecMock = mock(EventFieldSpec.class);\n        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()\n            .fieldSpec(ImmutableMap.of(""bar"", fieldSpecMock, ""baz"", fieldSpecMock))\n            .keySpec(ImmutableList.of(""foo""))\n            .build();\n        final ValidationResult validationResult = invalidEventDefinition.validate();\n        assertThat(validationResult.failed()).isTrue();\n        assertThat(validationResult.getErrors()).containsOnlyKeys(""key_spec"");\n    }\n']",Errors;That;Spec;invalid;class;Immutable;Spec;ock;Validation;ock,8.149072527885437e-10;7.566995918750763e-10;5.238689482212067e-10;4.729372449219227e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.9658331871032715, -5.5740814208984375, -4.637202739715576, -5.804113388061523, -5.409998416900635, -0.023812728002667427]",0.976468563079834
2,['    @Test\n    public void testValidEventDefinition() {\n        final ValidationResult validationResult = testSubject.validate();\n        assertThat(validationResult.failed()).isFalse();\n        assertThat(validationResult.getErrors().size()).isEqualTo(0);\n    }\n'],validation;Event;validation;Result;validation;Result;That;validate;Errors;Validation,1.5133991837501526e-09;6.984919309616089e-10;5.384208634495735e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;-5.820766091346741e-11;-5.820766091346741e-11,5,5,"[-6.0110273361206055, -5.619611740112305, -4.585542678833008, -5.877720355987549, -5.414572238922119, -0.02380935288965702]",0.9764717221260071
2,"['    @Test\n    public void testValidEventDefinitionWithKeySpecInFieldSpec() {\n        final EventFieldSpec fieldSpecMock = mock(EventFieldSpec.class);\n        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()\n            .fieldSpec(ImmutableMap.of(""foo"", fieldSpecMock, ""bar"", fieldSpecMock))\n            .keySpec(ImmutableList.of(""foo"", ""bar""))\n            .build();\n        final ValidationResult validationResult = invalidEventDefinition.validate();\n        assertThat(validationResult.failed()).isFalse();\n        assertThat(validationResult.getErrors().size()).isEqualTo(0);\n    }\n']",That;Errors;Field;Spec;Event;validate;Field;Field;Spec;Definition,6.984919309616089e-10;6.548361852765083e-10;5.238689482212067e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.959164619445801, -5.570188999176025, -4.639285564422607, -5.800781726837158, -5.403879642486572, -0.023863129317760468]",0.9764193296432495
2,"['    @Test\n    public void automaticallyAddsPersistToStreamsStorageHandler() {\n        final EventStorageHandler.Config testStorageHandlerConfig = new EventStorageHandler.Config() {\n            @Override\n            public String type() {\n                return ""storage-test"";\n            }\n']",Config;Persist;Handler;Stream;Storage;return;Event;new;Config;Handler,8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.014612674713135, -5.4464006423950195, -4.583386421203613, -5.86578369140625, -5.503218650817871, -0.02417316660284996]",0.9761167764663696
2,"['    @Test\n    public void loadPersisted() {\n        final List<EventDefinitionDto> dtos = dbService.streamAll().collect(Collectors.toList());\n\n        assertThat(dtos).hasSize(1);\n\n        assertThat(dtos.get(0)).satisfies(dto -> {\n            assertThat(dto.id()).isNotBlank();\n            assertThat(dto.title()).isEqualTo(""Test"");\n            assertThat(dto.description()).isEqualTo(""A test event definition"");\n            assertThat(dto.priority()).isEqualTo(2);\n            assertThat(dto.keySpec()).isEqualTo(ImmutableList.of(""username""));\n            assertThat(dto.fieldSpec()).isEmpty();\n            assertThat(dto.notifications()).isEmpty();\n            assertThat(dto.storage()).hasSize(1);\n\n            assertThat(dto.config()).isInstanceOf(TestEventProcessorConfig.class);\n            assertThat(dto.config()).satisfies(abstractConfig -> {\n                final TestEventProcessorConfig config = (TestEventProcessorConfig) abstractConfig;\n\n                assertThat(config.type()).isEqualTo(""__test_event_processor_config__"");\n                assertThat(config.message()).isEqualTo(""This is a test event processor"");\n            });\n        });\n    }\n']",abstract;event;atisfies;to;Config;username;to;to;key;Persisted,3.92901711165905e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.4010660126805305e-10,5,5,"[-5.808565139770508, -5.348443508148193, -4.681389808654785, -5.676635265350342, -5.383561134338379, -0.025358660146594048]",0.9749600291252136
2,"['    @Test\n    public void save() {\n        final EventDefinitionDto newDto = EventDefinitionDto.builder()\n                .title(""Test"")\n                .description(""A test event definition"")\n                .config(TestEventProcessorConfig.builder()\n                        .message(""This is a test event processor"")\n                        .searchWithinMs(1000)\n                        .executeEveryMs(1000)\n                        .build())\n                .priority(3)\n                .alert(false)\n                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))\n                .keySpec(ImmutableList.of(""a"", ""b""))\n                .notifications(ImmutableList.of())\n                .build();\n\n        final EventDefinitionDto dto = dbService.save(newDto);\n\n        assertThat(dto.id()).isNotBlank();\n        assertThat(dto.title()).isEqualTo(""Test"");\n        assertThat(dto.description()).isEqualTo(""A test event definition"");\n        assertThat(dto.priority()).isEqualTo(3);\n        assertThat(dto.keySpec()).isEqualTo(ImmutableList.of(""a"", ""b""));\n        assertThat(dto.fieldSpec()).isEmpty();\n        assertThat(dto.notifications()).isEmpty();\n        assertThat(dto.storage()).hasSize(1);\n        // We will always add a persist-to-streams handler for now\n        assertThat(dto.storage()).containsOnly(PersistToStreamsStorageHandler.Config.createWithDefaultEventsStream());\n    }\n']",priority;Spec;builder;final;new;Grace;Settings;Event;save;to,5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.922485828399658, -5.3631978034973145, -4.653158664703369, -5.77844762802124, -5.502283573150635, -0.02436119131743908]",0.9759331345558167
2,"['    @Test\n    public void persistence() {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final DateTime min = now.minusHours(1);\n        final DateTime max = now;\n\n        final EventProcessorStateDto stateDto = EventProcessorStateDto.builder()\n                .eventDefinitionId(""abc123"")\n                .minProcessedTimestamp(min)\n                .maxProcessedTimestamp(max)\n                .build();\n\n        assertThat(stateService.setState(stateDto)).isPresent().get().satisfies(dto -> {\n            assertThat(dto.id()).isNotBlank();\n            assertThat(dto.eventDefinitionId()).isEqualTo(""abc123"");\n            assertThat(dto.minProcessedTimestamp()).isEqualTo(min);\n            assertThat(dto.maxProcessedTimestamp()).isEqualTo(max);\n        });\n\n        assertThatThrownBy(() -> stateService.setState("""", min, max))\n                .hasMessageContaining(""eventDefinitionId"")\n                .isInstanceOf(IllegalArgumentException.class);\n        assertThatThrownBy(() -> stateService.setState(null, min, max))\n                .hasMessageContaining(""eventDefinitionId"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatThrownBy(() -> stateService.setState(""a"", null, max))\n                .hasMessageContaining(""minProcessedTimestamp"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatThrownBy(() -> stateService.setState(""a"", min, null))\n                .hasMessageContaining(""maxProcessedTimestamp"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        // A max timestamp that is older than the min timestamp is an error! (e.g. mixing up arguments)\n        assertThatThrownBy(() -> stateService.setState(""a"", max, min))\n                .hasMessageContaining(""minProcessedTimestamp"")\n                .hasMessageContaining(""maxProcessedTimestamp"")\n                .isInstanceOf(IllegalArgumentException.class);\n    }\n']",min;Time;Hours;Time;Date;persistence;Date;now;now;atisfies,2.2118911147117615e-09;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.931244373321533, -5.458711624145508, -4.639863967895508, -5.757220268249512, -5.467164993286133, -0.02424798533320427]",0.9760437607765198
2,"['    @Test\n    public void loading() {\n        final Optional<EventProcessorStateDto> stateDto = stateService.findByEventDefinitionId(""54e3deadbeefdeadbeefaff3"");\n\n        assertThat(stateDto).isPresent().get().satisfies(dto -> {\n            assertThat(dto.id()).isEqualTo(""54e3deadbeefdeadbeefaffe"");\n            assertThat(dto.eventDefinitionId()).isEqualTo(""54e3deadbeefdeadbeefaff3"");\n            assertThat(dto.minProcessedTimestamp()).isEqualTo(DateTime.parse(""2019-01-01T00:00:00.000Z""));\n            assertThat(dto.maxProcessedTimestamp()).isEqualTo(DateTime.parse(""2019-01-01T01:00:00.000Z""));\n        });\n    }\n']",deadbeefdeadbeefaff;Optional;max;Processor;Processed;deadbeefdeadbeefaff;Event;Date;state;That,2.000888343900442e-09;9.89530235528946e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.257323548197746e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.852023124694824, -5.52523136138916, -4.684553146362305, -5.705611228942871, -5.339518070220947, -0.02451951801776886]",0.9757786393165588
2,"['    @Test\n    public void findByEventProcessorId() {\n        assertThat(stateService.findByEventDefinitionId(""54e3deadbeefdeadbeefaff3"")).isPresent();\n\n        assertThat(stateService.findByEventDefinitionId(""nope"")).isNotPresent();\n\n        assertThatThrownBy(() -> stateService.findByEventDefinitionId(null))\n                .hasMessageContaining(""eventDefinitionId"")\n                .isInstanceOf(IllegalArgumentException.class);\n\n        assertThatThrownBy(() -> stateService.findByEventDefinitionId(""""))\n                .hasMessageContaining(""eventDefinitionId"")\n                .isInstanceOf(IllegalArgumentException.class);\n    }\n']",find;class;state;By;Present;Service;Present;By;find;deadbeefdeadbeefaff,6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.824757099151611, -5.513050079345703, -4.693614959716797, -5.688055992126465, -5.305766582489014, -0.024794697761535645]",0.9755100607872009
2,"['    @Test\n    public void findByEventProcessorsAndMaxTimestamp() {\n        assertThat(stateService.findByEventDefinitionId(""54e3deadbeefdeadbeefaff3"")).isPresent().get().satisfies(dto -> {\n            final DateTime maxTs = dto.maxProcessedTimestamp();\n            final String id = dto.eventDefinitionId();\n\n            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id), maxTs))\n                    .hasSize(1);\n            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id), maxTs.minusHours(1)))\n                    .hasSize(1);\n            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id), maxTs.plusHours(1)))\n                    .hasSize(0);\n\n            assertThatThrownBy(() -> stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(), maxTs))\n                    .isInstanceOf(IllegalArgumentException.class);\n            assertThatThrownBy(() -> stateService.findByEventDefinitionsAndMaxTimestamp(null, maxTs))\n                    .isInstanceOf(IllegalArgumentException.class);\n            assertThatThrownBy(() -> stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id), null))\n                    .isInstanceOf(IllegalArgumentException.class);\n\n            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(""nope""), maxTs))\n                    .hasSize(0);\n            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id, ""nope""), maxTs))\n                    .hasSize(1);\n        });\n    }\n']",Processed;By;max;Timestamp;plus;By;That;Hours;id;Max,7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.795373916625977, -5.359158515930176, -4.663820266723633, -5.667377948760986, -5.378673553466797, -0.025571908801794052]",0.9747523069381714
2,"['    @Test\n    public void setState() {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n\n        // Before we set the state, there should be no record\n        assertThat(stateService.findByEventDefinitionId(""yolo"")).isNotPresent();\n\n        assertThat(stateService.setState(""yolo"", now.minusHours(1), now))\n                .isPresent()\n                .get()\n                .satisfies(dto1 -> {\n                    assertThat(dto1.minProcessedTimestamp()).isEqualTo(now.minusHours(1));\n                    assertThat(dto1.maxProcessedTimestamp()).isEqualTo(now);\n                    assertThat(dto1.eventDefinitionId()).isEqualTo(""yolo"");\n\n                    assertThat(stateService.setState(""yolo"", now, now.plusHours(1)))\n                            .isPresent()\n                            .get()\n                            .satisfies(dto2 -> {\n                                // The second setState call should update the existing one\n                                assertThat(dto2.id()).isEqualTo(dto1.id());\n                                assertThat(dto2.eventDefinitionId()).isEqualTo(""yolo"");\n                                assertThat(dto2.minProcessedTimestamp()).isEqualTo(dto1.minProcessedTimestamp());\n                                assertThat(dto2.maxProcessedTimestamp()).isEqualTo(dto1.maxProcessedTimestamp().plusHours(1));\n                            });\n                });\n    }\n']",to;atisfies;atisfies;Hours;existing;final;olo;minus;get;Present,1.3969838619232178e-09;1.0186340659856796e-09;6.402842700481415e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.9103830456733704e-10,5,5,"[-5.843329429626465, -5.323637962341309, -4.6768717765808105, -5.679509162902832, -5.431143760681152, -0.025190236046910286]",0.9751244187355042
2,"['    @Test\n    public void setStateKeepsMinMaxTimestamp() {\n        final DateTime now = DateTime.now(DateTimeZone.UTC);\n        final DateTime min = now.minusHours(1);\n        final DateTime max = now;\n\n        // Before we set the state, there should be no record\n        assertThat(stateService.findByEventDefinitionId(""yolo"")).isNotPresent();\n\n        // Create state\n        stateService.setState(""yolo"", min, now);\n\n        // Check that it has been created\n        assertThat(stateService.findByEventDefinitionId(""yolo""))\n                .isPresent()\n                .get()\n                .satisfies(dto -> {\n                    assertThat(dto.minProcessedTimestamp()).isEqualTo(min);\n                    assertThat(dto.maxProcessedTimestamp()).isEqualTo(now);\n                });\n\n        // Overwrite state with an EARLIER max timestamp\n        stateService.setState(""yolo"", min, max.minusMinutes(10));\n\n        // Max timestamp should NOT be overwritten by older timestamp\n        assertThat(stateService.findByEventDefinitionId(""yolo""))\n                .isPresent()\n                .get()\n                .satisfies(dto -> {\n                    assertThat(dto.minProcessedTimestamp()).isEqualTo(min);\n                    assertThat(dto.maxProcessedTimestamp()).isEqualTo(max);\n                });\n\n        // Overwrite state with a LATER min timestamp\n        stateService.setState(""yolo"", min.plusMinutes(5), max);\n\n        // Min timestamp should NOT be overwritten by younger timestamp\n        assertThat(stateService.findByEventDefinitionId(""yolo""))\n                .isPresent()\n                .get()\n                .satisfies(dto -> {\n                    assertThat(dto.minProcessedTimestamp()).isEqualTo(min);\n                    assertThat(dto.maxProcessedTimestamp()).isEqualTo(max);\n                });\n\n        // Overwrite state with a NEWER max timestamp\n        stateService.setState(""yolo"", min, max.plusDays(10));\n\n        // Max timestamp is now set to the newer one\n        assertThat(stateService.findByEventDefinitionId(""yolo""))\n                .isPresent()\n                .get()\n                .satisfies(dto -> {\n                    assertThat(dto.minProcessedTimestamp()).isEqualTo(min);\n                    assertThat(dto.maxProcessedTimestamp()).isEqualTo(max.plusDays(10));\n                });\n\n        // Overwrite state with an OLDER min timestamp\n        stateService.setState(""yolo"", min.minusDays(100), max.plusDays(10));\n\n        // Min timestamp is now set to the older one\n        assertThat(stateService.findByEventDefinitionId(""yolo""))\n                .isPresent()\n                .get()\n                .satisfies(dto -> {\n                    assertThat(dto.minProcessedTimestamp()).isEqualTo(min.minusDays(100));\n                    assertThat(dto.maxProcessedTimestamp()).isEqualTo(max.plusDays(10));\n                });\n    }\n']",atisfies;Present;now;Keep;That;min;max;Minutes;Date;olo,8.36735125631094e-10;4.3655745685100555e-10;4.147295840084553e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.921931743621826, -5.475195407867432, -4.661252021789551, -5.7298736572265625, -5.445479393005371, -0.02417724020779133]",0.9761126637458801
2,"['    @Test\n    public void deleteByEventProcessorId() {\n        assertThat(stateService.deleteByEventDefinitionId(""54e3deadbeefdeadbeefaff3"")).isEqualTo(1);\n        assertThat(stateService.deleteByEventDefinitionId(""nope"")).isEqualTo(0);\n    }\n']",Event;By;qual;Event;That;By;That;Definition;Event;By,1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;-1.1641532182693481e-10,5,5,"[-5.961289882659912, -5.743458271026611, -4.66018009185791, -5.768144607543945, -5.255696773529053, -0.023870928213000298]",0.9764117002487183
2,"['    @Test\n    public void exportEntity() {\n        final ModelId id = ModelId.of(""5d4d33753d27460ad18e0c4d"");\n        final EntityDescriptor descriptor = EntityDescriptor.create(id, ModelTypes.NOTIFICATION_V1);\n        final EntityDescriptorIds entityDescriptorIds = EntityDescriptorIds.of(descriptor);\n        final Optional<Entity> entity = facade.exportEntity(descriptor, entityDescriptorIds);\n        assertThat(entity).isPresent();\n        final EntityV1 entityV1 = (EntityV1) entity.get();\n        final NotificationEntity notificationEntity = objectMapper.convertValue(entityV1.data(),\n                NotificationEntity.class);\n        assertThat(notificationEntity.title().asString()).isEqualTo(""title"");\n        assertThat(notificationEntity.description().asString()).isEqualTo(""description"");\n        assertThat(notificationEntity.config().type()).isEqualTo(""email-notification-v1"");\n    }\n']",export;Types;descriptor;entity;title;final;Entity;That;Descriptor;facade,1.3969838619232178e-09;2.6193447411060333e-10;2.1100277081131935e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.950178146362305, -5.573604583740234, -4.667942523956299, -5.762712001800537, -5.399754047393799, -0.023733453825116158]",0.9765459895133972
2,"['    @Test\n    public void createNativeEntity() {\n        final EntityV1 entityV1 = createTestEntity();\n        final JobDefinitionDto jobDefinitionDto = mock(JobDefinitionDto.class);\n\n        when(jobDefinitionService.save(any(JobDefinitionDto.class))).thenReturn(jobDefinitionDto);\n        final UserImpl kmerzUser = new UserImpl(mock(PasswordAlgorithmFactory.class), new Permissions(ImmutableSet.of()), ImmutableMap.of(""username"", ""kmerz""));\n        when(userService.load(""kmerz"")).thenReturn(kmerzUser);\n\n        final NativeEntity<NotificationDto> nativeEntity = facade.createNativeEntity(\n            entityV1,\n            ImmutableMap.of(),\n            ImmutableMap.of(),\n            ""kmerz"");\n        assertThat(nativeEntity).isNotNull();\n\n        final NotificationDto notificationDto = nativeEntity.entity();\n        assertThat(notificationDto.title()).isEqualTo(""title"");\n        assertThat(notificationDto.description()).isEqualTo(""descriptions"");\n        assertThat(notificationDto.config().type()).isEqualTo(""http-notification-v1"");\n    }\n']",Native;mock;Definition;create;Permissions;User;class;class;Impl;Service,7.275957614183426e-10;5.820766091346741e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.958487033843994, -5.469847202301025, -4.636953830718994, -5.80734395980835, -5.482390880584717, -0.023931803181767464]",0.9763523936271667
2,"['    @Test\n    public void loadNativeEntity() {\n        final NativeEntityDescriptor nativeEntityDescriptor = NativeEntityDescriptor.create(\n                ModelId.of(""content-pack-id""),\n                ModelId.of(""5d4d33753d27460ad18e0c4d""),\n                ModelTypes.NOTIFICATION_V1,\n                ""title"");\n        final Optional<NativeEntity<NotificationDto>> optionalNativeEntity = facade.loadNativeEntity(\n                nativeEntityDescriptor);\n        assertThat(optionalNativeEntity).isPresent();\n        final NativeEntity<NotificationDto> nativeEntity = optionalNativeEntity.get();\n        assertThat(nativeEntity.entity()).isNotNull();\n        final NotificationDto notificationDto = nativeEntity.entity();\n        assertThat(notificationDto.id()).isEqualTo(""5d4d33753d27460ad18e0c4d"");\n    }\n']",Optional;Native;Native;Entity;of;ad;qual;That;Notification;Model,1.1641532182693481e-09;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.953099727630615, -5.517894268035889, -4.660851001739502, -5.778832912445068, -5.4515380859375, -0.02373182401061058]",0.9765474200248718
2,"['    @Test\n    public void createExcerpt() {\n        final Optional<NotificationDto> notificationDto = notificationService.get(\n                ""5d4d33753d27460ad18e0c4d"");\n        assertThat(notificationDto).isPresent();\n        final EntityExcerpt excerpt = facade.createExcerpt(notificationDto.get());\n        assertThat(excerpt.title()).isEqualTo(""title"");\n        assertThat(excerpt.id()).isEqualTo(ModelId.of(""5d4d33753d27460ad18e0c4d""));\n        assertThat(excerpt.type()).isEqualTo(ModelTypes.NOTIFICATION_V1);\n    }\n']",title;get;final;of;Model;Excerpt;to;Excerpt;to;Excerpt,6.111804395914078e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.950141906738281, -5.638664245605469, -4.669515609741211, -5.746333599090576, -5.359415054321289, -0.023717040196061134]",0.9765620231628418
2,"['    @Test\n    public void listExcerpts() {\n        final Set<EntityExcerpt> excerpts = facade.listEntityExcerpts();\n        final EntityExcerpt excerpt = excerpts.iterator().next();\n        assertThat(excerpt.title()).isEqualTo(""title"");\n        assertThat(excerpt.id()).isEqualTo(ModelId.of(""5d4d33753d27460ad18e0c4d""));\n        assertThat(excerpt.type()).isEqualTo(ModelTypes.NOTIFICATION_V1);\n    }\n']",excerpts;Excerpt;excerpts;Excerpt;of;facade;title;Model;That;excerpt,1.3969838619232178e-09;6.257323548197746e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.6193447411060333e-10;2.0372681319713593e-10,5,5,"[-5.944756031036377, -5.611875534057617, -4.647468090057373, -5.788868427276611, -5.374422550201416, -0.023836474865674973]",0.9764453768730164
2,"['    @Test\n    public void delete() {\n        long countBefore = notificationService.streamAll().count();\n        assertThat(countBefore).isEqualTo(1);\n\n        final Optional<NotificationDto> notificationDto = notificationService.get(\n                ""5d4d33753d27460ad18e0c4d"");\n        assertThat(notificationDto).isPresent();\n        facade.delete(notificationDto.get());\n\n        long countAfter = notificationService.streamAll().count();\n        assertThat(countAfter).isEqualTo(0);\n    }\n']",facade;to;After;Optional;notification;qual;count;count;notification;That,1.0477378964424133e-09;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;2.3283064365386963e-10,5,5,"[-5.949456691741943, -5.604125022888184, -4.658782482147217, -5.7650465965271, -5.3812055587768555, -0.023786071687936783]",0.9764946103096008
2,"['    @Test\n    public void exportEntity() {\n        final ModelId id = ModelId.of(""5d4032513d2746703d1467f6"");\n\n        when(jobDefinitionService.getByConfigField(eq(""event_definition_id""), eq(id.id())))\n                .thenReturn(Optional.of(mock(JobDefinitionDto.class)));\n\n        final EntityDescriptor descriptor = EntityDescriptor.create(id, ModelTypes.EVENT_DEFINITION_V1);\n        final EntityDescriptorIds entityDescriptorIds = EntityDescriptorIds.of(descriptor);\n        final Optional<Entity> entity = facade.exportEntity(descriptor, entityDescriptorIds);\n        assertThat(entity).isPresent();\n        final EntityV1 entityV1 = (EntityV1) entity.get();\n        final EventDefinitionEntity eventDefinitionEntity = objectMapper.convertValue(entityV1.data(),\n                EventDefinitionEntity.class);\n        assertThat(eventDefinitionEntity.title().asString()).isEqualTo(""title"");\n        assertThat(eventDefinitionEntity.description().asString()).isEqualTo(""description"");\n        assertThat(eventDefinitionEntity.config().type()).isEqualTo(AggregationEventProcessorConfigEntity.TYPE_NAME);\n        assertThat(eventDefinitionEntity.isScheduled().asBoolean(ImmutableMap.of())).isTrue();\n    }\n']",Entity;Types;Return;Descriptor;description;eq;By;That;True;final,5.820766091346741e-10;3.710738383233547e-10;3.2014213502407074e-10;3.019522409886122e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.90947961807251, -5.474937915802002, -4.675424575805664, -5.729217529296875, -5.424412250518799, -0.024172700941562653]",0.9761171340942383
2,"['    @Test\n    public void exportEntityWithoutScheduling() {\n        final ModelId id = ModelId.of(""5d4032513d2746703d1467f6"");\n\n        when(jobDefinitionService.getByConfigField(eq(""event_definition_id""), eq(id.id())))\n                .thenReturn(Optional.empty());\n\n        final EntityDescriptor descriptor = EntityDescriptor.create(id, ModelTypes.EVENT_DEFINITION_V1);\n        final EntityDescriptorIds entityDescriptorIds = EntityDescriptorIds.of(descriptor);\n        final Optional<Entity> entity = facade.exportEntity(descriptor, entityDescriptorIds);\n        assertThat(entity).isPresent();\n        final EntityV1 entityV1 = (EntityV1) entity.get();\n        final EventDefinitionEntity eventDefinitionEntity = objectMapper.convertValue(entityV1.data(),\n                EventDefinitionEntity.class);\n        assertThat(eventDefinitionEntity.title().asString()).isEqualTo(""title"");\n        assertThat(eventDefinitionEntity.description().asString()).isEqualTo(""description"");\n        assertThat(eventDefinitionEntity.config().type()).isEqualTo(AggregationEventProcessorConfigEntity.TYPE_NAME);\n        assertThat(eventDefinitionEntity.isScheduled().asBoolean(ImmutableMap.of())).isFalse();\n    }\n']",export;Immutable;Entity;By;Optional;definition;when;Model;Entity;Descriptor,6.984919309616089e-10;4.220055416226387e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.925351142883301, -5.5029215812683105, -4.672152519226074, -5.741394996643066, -5.425539016723633, -0.023996397852897644]",0.9762892127037048
2,"['    @Test\n    public void createNativeEntity() {\n        final EntityV1 entityV1 = createTestEntity();\n        final NotificationDto notificationDto = NotificationDto.builder()\n                .config(HTTPEventNotificationConfig.builder().url(""https://hulud.net"").build())\n                .title(""Notify me Senpai"")\n                .description(""A notification for senpai"")\n                .id(""dead-beef"")\n                .build();\n        final EntityDescriptor entityDescriptor = EntityDescriptor.create(""123123"", ModelTypes.NOTIFICATION_V1);\n        final ImmutableMap<EntityDescriptor, Object> nativeEntities = ImmutableMap.of(\n                entityDescriptor, notificationDto);\n\n        final JobDefinitionDto jobDefinitionDto = mock(JobDefinitionDto.class);\n        final JobTriggerDto jobTriggerDto = mock(JobTriggerDto.class);\n        when(jobDefinitionDto.id()).thenReturn(""job-123123"");\n        when(jobSchedulerClock.nowUTC()).thenReturn(DateTime.now(DateTimeZone.UTC));\n        when(jobDefinitionService.save(any(JobDefinitionDto.class))).thenReturn(jobDefinitionDto);\n        when(jobTriggerService.create(any(JobTriggerDto.class))).thenReturn(jobTriggerDto);\n        final UserImpl kmerzUser = new UserImpl(mock(PasswordAlgorithmFactory.class), new Permissions(ImmutableSet.of()), ImmutableMap.of(""username"", ""kmerz""));\n        when(userService.load(""kmerz"")).thenReturn(kmerzUser);\n\n\n        final NativeEntity<EventDefinitionDto> nativeEntity = facade.createNativeEntity(\n                entityV1,\n                ImmutableMap.of(),\n                nativeEntities,\n                ""kmerz"");\n        assertThat(nativeEntity).isNotNull();\n\n        final EventDefinitionDto eventDefinitionDto = nativeEntity.entity();\n        assertThat(eventDefinitionDto.title()).isEqualTo(""title"");\n        assertThat(eventDefinitionDto.description()).isEqualTo(""description"");\n        assertThat(eventDefinitionDto.config().type()).isEqualTo(""aggregation-v1"");\n        // verify that ownership was registered for this entity\n        verify(entityOwnershipService, times(1)).registerNewEventDefinition(nativeEntity.entity().id(), kmerzUser);\n    }\n']",Native;Entity;Senpai;native;notification;Definition;notification;Entity;ock;now,5.820766091346741e-10;5.093170329928398e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.957306861877441, -5.363410472869873, -4.623252868652344, -5.8382110595703125, -5.540031909942627, -0.024224016815423965]",0.9760670065879822
2,"['    @Test\n    public void loadNativeEntity() {\n        final NativeEntityDescriptor nativeEntityDescriptor = NativeEntityDescriptor\n                .create(ModelId.of(""content-pack-id""),\n                        ModelId.of(""5d4032513d2746703d1467f6""),\n                        ModelTypes.EVENT_DEFINITION_V1,\n                        ""title"");\n        final Optional<NativeEntity<EventDefinitionDto>> optionalNativeEntity = facade.loadNativeEntity(nativeEntityDescriptor);\n        assertThat(optionalNativeEntity).isPresent();\n        final NativeEntity<EventDefinitionDto> nativeEntity = optionalNativeEntity.get();\n        assertThat(nativeEntity.entity()).isNotNull();\n        final EventDefinitionDto eventDefinition = nativeEntity.entity();\n        assertThat(eventDefinition.id()).isEqualTo(""5d4032513d2746703d1467f6"");\n    }\n']",DEFINITION;Native;Native;create;native;Entity;Entity;Entity;Definition;entity,6.693881005048752e-10;6.693881005048752e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.907820701599121, -5.475320339202881, -4.668643951416016, -5.753652572631836, -5.42202615737915, -0.024171188473701477]",0.9761186838150024
2,"['    @Test\n    public void createExcerpt() {\n        final Optional<EventDefinitionDto> eventDefinitionDto = eventDefinitionService.get(\n                ""5d4032513d2746703d1467f6"");\n        assertThat(eventDefinitionDto).isPresent();\n        final EntityExcerpt excerpt = facade.createExcerpt(eventDefinitionDto.get());\n        assertThat(excerpt.title()).isEqualTo(""title"");\n        assertThat(excerpt.id()).isEqualTo(ModelId.of(""5d4032513d2746703d1467f6""));\n        assertThat(excerpt.type()).isEqualTo(ModelTypes.EVENT_DEFINITION_V1);\n    }\n']",Excerpt;title;event;Entity;to;type;Definition;event;Optional;Definition,8.149072527885437e-10;7.8580342233181e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.9158034324646, -5.600499153137207, -4.667270660400391, -5.741009712219238, -5.346891403198242, -0.024051794782280922]",0.9762351512908936
2,"['    @Test\n    public void listExcerpts() {\n        final Set<EntityExcerpt> excerpts = facade.listEntityExcerpts();\n        final EntityExcerpt excerpt = excerpts.iterator().next();\n        assertThat(excerpt.title()).isEqualTo(""title"");\n        assertThat(excerpt.id()).isEqualTo(ModelId.of(""5d4032513d2746703d1467f6""));\n        assertThat(excerpt.type()).isEqualTo(ModelTypes.EVENT_DEFINITION_V1);\n    }\n']",Types;Excerpt;excerpts;id;title;qual;Model;excerpt;excerpt;iterator,8.149072527885437e-10;7.203198038041592e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.936161518096924, -5.602616786956787, -4.647789001464844, -5.78392219543457, -5.368975639343262, -0.02393273450434208]",0.9763513803482056
2,"['    @Test\n    public void delete() {\n        long countBefore = eventDefinitionService.streamAll().count();\n        assertThat(countBefore).isEqualTo(1);\n\n        final Optional<EventDefinitionDto> eventDefinitionDto = eventDefinitionService.get(\n                ""5d4032513d2746703d1467f6"");\n        assertThat(eventDefinitionDto).isPresent();\n        facade.delete(eventDefinitionDto.get());\n\n        long countAfter = eventDefinitionService.streamAll().count();\n        assertThat(countAfter).isEqualTo(0);\n    }\n']",count;stream;Definition;event;Service;final;event;That;long;event,7.566995918750763e-10;5.238689482212067e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.922610759735107, -5.598278522491455, -4.670559406280518, -5.738164901733398, -5.351565361022949, -0.023996513336896896]",0.9762890934944153
2,"['    @Test\n    public void resolveNativeEntity() {\n        EntityDescriptor eventDescriptor = EntityDescriptor\n                .create(""5d4032513d2746703d1467f6"", ModelTypes.EVENT_DEFINITION_V1);\n        EntityDescriptor streamDescriptor = EntityDescriptor\n                .create(""5cdab2293d27467fbe9e8a72"", ModelTypes.STREAM_V1);\n        Set<EntityDescriptor> expectedNodes = ImmutableSet.of(eventDescriptor, streamDescriptor);\n        Graph<EntityDescriptor> graph = facade.resolveNativeEntity(eventDescriptor);\n        assertThat(graph).isNotNull();\n        Set<EntityDescriptor> nodes = graph.nodes();\n        assertThat(nodes).isEqualTo(expectedNodes);\n    }\n']",EVENT;Entity;Native;event;Descriptor;Descriptor;Entity;Descriptor;Entity;stream,1.3969838619232178e-09;1.1641532182693481e-09;6.693881005048752e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.964133262634277, -5.5757975578308105, -4.660589694976807, -5.801797389984131, -5.405612468719482, -0.023608535528182983]",0.9766679406166077
2,"['    @Test\n    public void resolveForInstallation() {\n        EntityV1 eventEntityV1 = createTestEntity();\n\n        final NotificationEntity notificationEntity = NotificationEntity.builder()\n                .title(ValueReference.of(""title""))\n                .description(ValueReference.of(""description""))\n                .config(HttpEventNotificationConfigEntity.builder()\n                        .url(ValueReference.of(""http://url"")).build())\n                .build();\n        final JsonNode data = objectMapper.convertValue(notificationEntity, JsonNode.class);\n        final EntityV1 notificationV1 = EntityV1.builder()\n                .data(data)\n                .id(ModelId.of(""123123""))\n                .type(ModelTypes.EVENT_DEFINITION_V1)\n                .build();\n\n        final EntityDescriptor entityDescriptor = EntityDescriptor.create(""123123"", ModelTypes.NOTIFICATION_V1);\n\n        Map<String, ValueReference> parameters = ImmutableMap.of();\n        Map<EntityDescriptor, Entity> entities = ImmutableMap.of(entityDescriptor, notificationV1);\n\n        Graph<Entity> graph = facade.resolveForInstallation(eventEntityV1, parameters, entities);\n        assertThat(graph).isNotNull();\n        Set<Entity> expectedNodes = ImmutableSet.of(eventEntityV1, notificationV1);\n        assertThat(graph.nodes()).isEqualTo(expectedNodes);\n    }\n']",EVENT;DEFINITION;Entity;Immutable;description;title;expected;event;of;convert,8.149072527885437e-10;4.511093720793724e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.925596714019775, -5.339253902435303, -4.639896869659424, -5.801214218139648, -5.513121128082275, -0.024483107030391693]",0.9758142828941345
2,"['    @Test\n    public void run() {\n        final int migratedConditions = 10;\n        final int migratedCallbacks = 4;\n\n        assertThat(migrator.run(Collections.emptySet(), Collections.emptySet())).satisfies(result -> {\n            assertThat(result.completedAlertConditions()).containsOnly(\n                    ""00000000-0000-0000-0000-000000000001"",\n                    ""00000000-0000-0000-0000-000000000002"",\n                    ""00000000-0000-0000-0000-000000000003"",\n                    ""00000000-0000-0000-0000-000000000004"",\n                    ""00000000-0000-0000-0000-000000000005"",\n                    ""00000000-0000-0000-0000-000000000006"",\n                    ""00000000-0000-0000-0000-000000000007"",\n                    ""00000000-0000-0000-0000-000000000008"",\n                    ""00000000-0000-0000-0000-000000000009"",\n                    ""00000000-0000-0000-0000-000000000010""\n            );\n            assertThat(result.completedAlarmCallbacks()).containsOnly(\n                    ""54e3deadbeefdeadbeef0001"",\n                    ""54e3deadbeefdeadbeef0002"",\n                    ""54e3deadbeefdeadbeef0003"",\n                    ""54e3deadbeefdeadbeef0004""\n            );\n        });\n\n        // Make sure we use the EventDefinitionHandler to create the event definitions\n        verify(eventDefinitionHandler, times(migratedConditions)).create(any(EventDefinitionDto.class), any(Optional.class));\n\n        // Make sure we use the NotificationResourceHandler to create the notifications\n        verify(notificationResourceHandler, times(migratedCallbacks)).create(any(NotificationDto.class), any(Optional.class));\n\n        assertThat(eventDefinitionService.streamAll().count()).isEqualTo(migratedConditions);\n        assertThat(notificationService.streamAll().count()).isEqualTo(migratedCallbacks);\n\n        final NotificationDto httpNotification = notificationService.streamAll()\n                .filter(n -> n.title().equals(""HTTP Callback Test""))\n                .findFirst()\n                .orElse(null);\n\n        assertThat(httpNotification).isNotNull();\n        assertThat(httpNotification.title()).isEqualTo(""HTTP Callback Test"");\n        assertThat(httpNotification.description()).isEqualTo(""Migrated legacy alarm callback"");\n        assertThat(httpNotification.config()).isInstanceOf(LegacyAlarmCallbackEventNotificationConfig.class);\n        assertThat((LegacyAlarmCallbackEventNotificationConfig) httpNotification.config()).satisfies(config -> {\n            assertThat(config.callbackType()).isEqualTo(""org.graylog2.alarmcallbacks.HTTPAlarmCallback"");\n            assertThat(config.configuration().get(""url"")).isEqualTo(""http://localhost:11000/"");\n        });\n\n        final NotificationDto httpNotificationWithoutTitle = notificationService.streamAll()\n                .filter(n -> n.title().equals(""Untitled""))\n                .findFirst()\n                .orElse(null);\n\n        assertThat(httpNotificationWithoutTitle).isNotNull();\n        assertThat(httpNotificationWithoutTitle.title()).isEqualTo(""Untitled"");\n        assertThat(httpNotificationWithoutTitle.description()).isEqualTo(""Migrated legacy alarm callback"");\n        assertThat(httpNotificationWithoutTitle.config()).isInstanceOf(LegacyAlarmCallbackEventNotificationConfig.class);\n        assertThat((LegacyAlarmCallbackEventNotificationConfig) httpNotificationWithoutTitle.config()).satisfies(config -> {\n            assertThat(config.callbackType()).isEqualTo(""org.graylog2.alarmcallbacks.HTTPAlarmCallback"");\n            assertThat(config.configuration().get(""url"")).isEqualTo(""http://localhost:11000/"");\n        });\n\n        final NotificationDto emailNotification = notificationService.streamAll()\n                .filter(n -> n.title().equals(""Email Callback Test""))\n                .findFirst()\n                .orElse(null);\n\n        assertThat(emailNotification).isNotNull();\n        assertThat(emailNotification.title()).isEqualTo(""Email Callback Test"");\n        assertThat(emailNotification.description()).isEqualTo(""Migrated legacy alarm callback"");\n        assertThat(emailNotification.config()).isInstanceOf(LegacyAlarmCallbackEventNotificationConfig.class);\n        assertThat((LegacyAlarmCallbackEventNotificationConfig) emailNotification.config()).satisfies(config -> {\n            assertThat(config.callbackType()).isEqualTo(""org.graylog2.alarmcallbacks.EmailAlarmCallback"");\n            assertThat(config.configuration().get(""sender"")).isEqualTo(""graylog@example.org"");\n            assertThat(config.configuration().get(""subject"")).isEqualTo(""Graylog alert for stream: ${stream.title}: ${check_result.resultDescription}"");\n            assertThat((String) config.configuration().get(""body"")).contains(""Alert Description: ${check_result.resultDescription}\\nDate: "");\n            assertThat(config.configuration().get(""user_receivers"")).isEqualTo(Collections.emptyList());\n            assertThat(config.configuration().get(""email_receivers"")).isEqualTo(Collections.singletonList(""jane@example.org""));\n        });\n\n        final NotificationDto slackNotification = notificationService.streamAll()\n                .filter(n -> n.title().equals(""Slack Callback Test""))\n                .findFirst()\n                .orElse(null);\n\n        assertThat(slackNotification).isNotNull();\n        assertThat(slackNotification.title()).isEqualTo(""Slack Callback Test"");\n        assertThat(slackNotification.description()).isEqualTo(""Migrated legacy alarm callback"");\n        assertThat(slackNotification.config()).isInstanceOf(LegacyAlarmCallbackEventNotificationConfig.class);\n        assertThat((LegacyAlarmCallbackEventNotificationConfig) slackNotification.config()).satisfies(config -> {\n            assertThat(config.callbackType()).isEqualTo(""org.graylog2.plugins.slack.callback.SlackAlarmCallback"");\n            assertThat(config.configuration().get(""icon_url"")).isEqualTo("""");\n            assertThat(config.configuration().get(""graylog2_url"")).isEqualTo("""");\n            assertThat(config.configuration().get(""link_names"")).isEqualTo(true);\n            assertThat(config.configuration().get(""webhook_url"")).isEqualTo(""http://example.com/slack-hook"");\n            assertThat(config.configuration().get(""color"")).isEqualTo(""#FF0000"");\n            assertThat(config.configuration().get(""icon_emoji"")).isEqualTo("""");\n            assertThat(config.configuration().get(""user_name"")).isEqualTo(""Graylog"");\n            assertThat(config.configuration().get(""backlog_items"")).isEqualTo(5);\n            assertThat(config.configuration().get(""custom_fields"")).isEqualTo("""");\n            assertThat(config.configuration().get(""proxy_address"")).isEqualTo("""");\n            assertThat(config.configuration().get(""channel"")).isEqualTo(""#channel"");\n            assertThat(config.configuration().get(""notify_channel"")).isEqualTo(false);\n            assertThat(config.configuration().get(""add_attachment"")).isEqualTo(true);\n            assertThat(config.configuration().get(""short_mode"")).isEqualTo(false);\n        });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Message Count - MORE"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(120000);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(10);\n\n                    assertThat(eventDefinition.notifications()).hasSize(2);\n                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toList()))\n                            .containsOnly(httpNotification.id(), httpNotificationWithoutTitle.id());\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0001"");\n                        assertThat(config.query()).isEqualTo(""hello:world"");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(10 * 60 * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);\n                        assertThat(config.series().get(0).field()).isNotPresent();\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Greater.class);\n\n                                final Expr.Greater greater = (Expr.Greater) expression;\n\n                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(1));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Message Count - LESS"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(0);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(0);\n\n                    assertThat(eventDefinition.notifications()).hasSize(2);\n                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toList()))\n                            .containsOnly(httpNotification.id(), httpNotificationWithoutTitle.id());\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0001"");\n                        assertThat(config.query()).isEmpty();\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(4 * 60 * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);\n                        assertThat(config.series().get(0).field()).isNotPresent();\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Lesser.class);\n\n                                final Expr.Lesser lesser = (Expr.Lesser) expression;\n\n                                assertThat(lesser.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(lesser.right()).isEqualTo(Expr.NumberValue.create(42));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - HIGHER - MEAN"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);\n                    assertThat(eventDefinition.notifications()).isEmpty();\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");\n                        assertThat(config.query()).isEqualTo(""*"");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.AVG);\n                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Greater.class);\n\n                                final Expr.Greater greater = (Expr.Greater) expression;\n\n                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(23));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - LOWER - SUM"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);\n                    assertThat(eventDefinition.notifications()).isEmpty();\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");\n                        assertThat(config.query()).isEqualTo(""*"");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.SUM);\n                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Lesser.class);\n\n                                final Expr.Lesser lesser = (Expr.Lesser) expression;\n\n                                assertThat(lesser.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(lesser.right()).isEqualTo(Expr.NumberValue.create(23));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - LOWER - MIN"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);\n                    assertThat(eventDefinition.notifications()).isEmpty();\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");\n                        assertThat(config.query()).isEqualTo(""*"");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.MIN);\n                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Lesser.class);\n\n                                final Expr.Lesser lesser = (Expr.Lesser) expression;\n\n                                assertThat(lesser.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(lesser.right()).isEqualTo(Expr.NumberValue.create(23));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - LOWER - MAX"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);\n                    assertThat(eventDefinition.notifications()).isEmpty();\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");\n                        assertThat(config.query()).isEqualTo(""*"");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.MAX);\n                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Lesser.class);\n\n                                final Expr.Lesser lesser = (Expr.Lesser) expression;\n\n                                assertThat(lesser.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(lesser.right()).isEqualTo(Expr.NumberValue.create(23));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - LOWER - STDDEV"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);\n                    assertThat(eventDefinition.notifications()).isEmpty();\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");\n                        assertThat(config.query()).isEqualTo(""*"");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.STDDEV);\n                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Greater.class);\n\n                                final Expr.Greater greater = (Expr.Greater) expression;\n\n                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(23));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Content - WITHOUT QUERY"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(120000);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(100);\n\n                    assertThat(eventDefinition.notifications()).hasSize(2);\n                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toSet()))\n                            .containsOnly(emailNotification.id(), slackNotification.id());\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0003"");\n                        assertThat(config.query()).isEqualTo(""test_field_2:\\""hello\\"""");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(CHECK_INTERVAL * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);\n                        assertThat(config.series().get(0).field()).isNotPresent();\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Greater.class);\n\n                                final Expr.Greater greater = (Expr.Greater) expression;\n\n                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(0));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Content - WITH QUERY"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(0);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(0);\n\n                    assertThat(eventDefinition.notifications()).hasSize(2);\n                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toSet()))\n                            .containsOnly(emailNotification.id(), slackNotification.id());\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0003"");\n                        assertThat(config.query()).isEqualTo(""test_field_3:\\""foo\\"" AND foo:bar"");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(CHECK_INTERVAL * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);\n                        assertThat(config.series().get(0).field()).isNotPresent();\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Greater.class);\n\n                                final Expr.Greater greater = (Expr.Greater) expression;\n\n                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(0));\n                            });\n                        });\n                    });\n                });\n\n        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Untitled"")).findFirst())\n                .get()\n                .satisfies(eventDefinition -> {\n                    assertThat(eventDefinition.alert()).isTrue();\n                    assertThat(eventDefinition.priority()).isEqualTo(2);\n                    assertThat(eventDefinition.keySpec()).isEmpty();\n                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(0);\n                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(0);\n\n                    assertThat(eventDefinition.notifications()).hasSize(2);\n                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toSet()))\n                            .containsOnly(emailNotification.id(), slackNotification.id());\n\n                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {\n                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0003"");\n                        assertThat(config.query()).isEqualTo(""test_field_3:\\""foo\\"" AND foo:bar"");\n                        assertThat(config.groupBy()).isEmpty();\n                        assertThat(config.searchWithinMs()).isEqualTo(CHECK_INTERVAL * 1000);\n                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);\n\n                        assertThat(config.series()).hasSize(1);\n                        assertThat(config.series().get(0).id()).isNotBlank();\n                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);\n                        assertThat(config.series().get(0).field()).isNotPresent();\n\n                        assertThat(config.conditions()).get().satisfies(conditions -> {\n                            assertThat(conditions.expression()).get().satisfies(expression -> {\n                                assertThat(expression).isInstanceOf(Expr.Greater.class);\n\n                                final Expr.Greater greater = (Expr.Greater) expression;\n\n                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));\n                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(0));\n                            });\n                        });\n                    });\n                });\n    }\n']",atisfies;Conditions;result;deadbeefdeadbeef;That;Callbacks;Alarm;Conditions;migrated;contains,2.2118911147117615e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.020410753786564e-10;3.92901711165905e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.933311939239502, -5.322859764099121, -4.630967617034912, -5.7845072746276855, -5.5332183837890625, -0.024602102115750313]",0.9756981730461121
2,"['    @Test\n    public void runWithMigrationStatus() {\n        final int migratedConditions = 9; // Only 8 because we pass one migrated condition in\n        final int migratedCallbacks = 3;  // Only 2 because we pass one migrated callback in\n\n        assertThat(migrator.run(Collections.singleton(""00000000-0000-0000-0000-000000000002""), Collections.singleton(""54e3deadbeefdeadbeef0001""))).satisfies(result -> {\n            assertThat(result.completedAlertConditions()).containsOnly(\n                    ""00000000-0000-0000-0000-000000000001"",\n                    ""00000000-0000-0000-0000-000000000002"",\n                    ""00000000-0000-0000-0000-000000000003"",\n                    ""00000000-0000-0000-0000-000000000004"",\n                    ""00000000-0000-0000-0000-000000000005"",\n                    ""00000000-0000-0000-0000-000000000006"",\n                    ""00000000-0000-0000-0000-000000000007"",\n                    ""00000000-0000-0000-0000-000000000008"",\n                    ""00000000-0000-0000-0000-000000000009"",\n                    ""00000000-0000-0000-0000-000000000010""\n            );\n            assertThat(result.completedAlarmCallbacks()).containsOnly(\n                    ""54e3deadbeefdeadbeef0001"",\n                    ""54e3deadbeefdeadbeef0002"",\n                    ""54e3deadbeefdeadbeef0003"",\n                    ""54e3deadbeefdeadbeef0004""\n            );\n        });\n\n        // Make sure we use the EventDefinitionHandler to create the event definitions\n        verify(eventDefinitionHandler, times(migratedConditions)).create(any(EventDefinitionDto.class), any(Optional.class));\n\n        // Make sure we use the NotificationResourceHandler to create the notifications\n        verify(notificationResourceHandler, times(migratedCallbacks)).create(any(NotificationDto.class), any(Optional.class));\n\n        assertThat(eventDefinitionService.streamAll().count()).isEqualTo(migratedConditions);\n        assertThat(notificationService.streamAll().count()).isEqualTo(migratedCallbacks);\n    }\n']",Conditions;result;run;Callbacks;contains;Collections;callback;pass;in;because,1.1641532182693481e-09;9.313225746154785e-10;7.8580342233181e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.920562267303467, -5.330620288848877, -4.654883861541748, -5.75669002532959, -5.514692306518555, -0.024526845663785934]",0.9757714867591858
2,"['    @Test\n    public void testWithMessageContext() {\n        final String fieldValueString = ""world"";\n        final String expectedLookupValue = ""lookup-world"";\n\n        final TestEvent event = new TestEvent();\n        final Message message = newMessage(ImmutableMap.of(""hello"", fieldValueString));\n        final EventWithContext eventWithContext = EventWithContext.create(event, message);\n\n        final LookupTableFieldValueProvider.Config config = newConfig(""test"", ""hello"");\n\n        setupMocks(""test"");\n        when(lookupTableFunction.lookup(""world"")).thenReturn(LookupResult.single(""lookup-"" + message.getField(""hello"")));\n\n        final FieldValue fieldValue = newProvider(config).doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.value()).isEqualTo(expectedLookupValue);\n    }\n']",hello;when;Field;Context;world;lookup;event;event;Config;Event,6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2741809263825417e-10,5,5,"[-5.909727573394775, -5.467713832855225, -4.685718059539795, -5.740671157836914, -5.411052703857422, -0.024128133431077003]",0.9761605262756348
2,"['    @Test\n    public void testWithEventContext() {\n        final String fieldValueString = ""event"";\n        final String expectedLookupValue = ""lookup-event"";\n\n        final TestEvent event = new TestEvent();\n        final TestEvent eventContext = new TestEvent();\n\n        eventContext.setField(""hello"", FieldValue.string(fieldValueString));\n\n        final EventWithContext eventWithContext = EventWithContext.create(event, eventContext);\n\n        final LookupTableFieldValueProvider.Config config = newConfig(""test"", ""hello"");\n\n        setupMocks(""test"");\n        when(lookupTableFunction.lookup(fieldValueString)).thenReturn(LookupResult.single(""lookup-"" + eventContext.getField(""hello"").value()));\n\n        final FieldValue fieldValue = newProvider(config).doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.value()).isEqualTo(expectedLookupValue);\n    }\n']",Config;Lookup;hello;get;Return;Table;qual;final;Event;final,9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.840860366821289, -5.401527404785156, -4.6980767250061035, -5.692012786865234, -5.385360240936279, -0.024789581075310707]",0.9755151867866516
2,"['    @Test\n    public void testWithMissingLookupTable() {\n        final TestEvent event = new TestEvent();\n        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""hello"", ""world"")));\n\n        final LookupTableFieldValueProvider.Config config = newConfig(""test-doesntexist"", ""hello"");\n\n        setupMocks(""test"");\n        when(lookupTableFunction.lookup(""world"")).thenReturn(LookupResult.single(""lookup-world""));\n\n        assertThatThrownBy(() -> newProvider(config).doGet(""test"", eventWithContext))\n                .hasMessageContaining(""test-doesntexist"")\n                .isInstanceOf(IllegalArgumentException.class);\n    }\n']",do;doesntexist;world;Lookup;Immutable;has;event;when;Containing;Config,9.89530235528946e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.899143695831299, -5.434506893157959, -4.673788070678711, -5.742990016937256, -5.420011520385742, -0.02436886914074421]",0.9759257435798645
2,"['    @Test\n    public void templateWithMessageContext() {\n        final TestEvent event = new TestEvent();\n        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""hello"", ""world"")));\n\n        final FieldValue fieldValue = newTemplate(""hello: ${source.hello}"").doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.value()).isEqualTo(""hello: world"");\n    }\n']",template;Template;hello;Event;value;create;event;final;Value;new,2.0954757928848267e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.9294610023498535, -5.57831335067749, -4.68692684173584, -5.733078479766846, -5.355650424957275, -0.023895489051938057]",0.9763877391815186
2,"['    @Test\n    public void templateWithEventContext() {\n        final TestEvent event = new TestEvent();\n        final TestEvent eventContext = new TestEvent();\n\n        eventContext.setField(""hello"", FieldValue.string(""event""));\n\n        final EventWithContext eventWithContext = EventWithContext.create(event, eventContext);\n\n        final FieldValue fieldValue = newTemplate(""hello: ${source.hello}"").doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.value()).isEqualTo(""hello: event"");\n    }\n']",hello;hello;Context;hello;Field;Template;Context;Context;event;event,1.3969838619232178e-09;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10,5,5,"[-5.863632678985596, -5.485057353973389, -4.691689968109131, -5.6972808837890625, -5.362307548522949, -0.024503348395228386]",0.9757944345474243
2,"['    @Test\n    public void templateWithError() {\n        final TestEvent event = new TestEvent();\n        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""hello"", ""world"")));\n\n        final FieldValue fieldValue = newTemplate(""hello: ${source.yolo}"", true).doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.dataType()).isEqualTo(FieldValueType.ERROR);\n    }\n']",hello;Event;olo;event;do;Error;Type;Type;true;Value,1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.9037322998046875, -5.526634216308594, -4.6831536293029785, -5.739955425262451, -5.374046325683594, -0.024096596986055374]",0.9761914014816284
2,"['    @Test\n    @Ignore(""template engine doesn\'t support expressions"")\n    public void templateCalculation() {\n        final TestEvent event = new TestEvent();\n        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""bytes"", 1024)));\n\n        final FieldValue fieldValue = newTemplate(""${source.bytes / 1024}"").doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.value()).isEqualTo(""1"");\n    }\n']",Calculation;engine;Immutable;Get;create;Context;expressions;do;event;event,3.725290298461914e-09;6.984919309616089e-10;6.693881005048752e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.90720796585083, -5.526230812072754, -4.6742987632751465, -5.765304088592529, -5.374083995819092, -0.024090314283967018]",0.9761975407600403
2,"['    @Test\n    public void templateNumberFormatting() {\n        final TestEvent event = new TestEvent();\n        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""count"", 10241234, ""avg"", 1024.42)));\n\n        final FieldValue fieldValue = newTemplate(""count: ${source.count} avg: ${source.avg}"").doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.value()).isEqualTo(""count: 10241234 avg: 1024.42"");\n    }\n']",avg;Event;Context;Message;Context;qual;value;template;avg;of,6.693881005048752e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.876361846923828, -5.523639678955078, -4.68982458114624, -5.7014594078063965, -5.363705158233643, -0.024302087724208832]",0.9759908318519592
2,"['    @Test\n    public void templateDateFormatting() {\n        final TestEvent event = new TestEvent();\n        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""timestamp"", DateTime.parse(""2019-07-02T12:21:00.123Z""))));\n\n        final FieldValue fieldValue = newTemplate(""timestamp: ${source.timestamp}"").doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.value()).isEqualTo(""timestamp: 2019-07-02T12:21:00.123Z"");\n    }\n']",event;do;Event;Value;timestamp;value;event;create;Context;That,8.731149137020111e-10;6.111804395914078e-10;4.0745362639427185e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.927957057952881, -5.547975540161133, -4.659759521484375, -5.763255596160889, -5.4108805656433105, -0.023920396342873573]",0.9763634204864502
2,"['    @Test\n    public void templateBooleanFormatting() {\n        final TestEvent event = new TestEvent();\n        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""success"", true)));\n\n        final FieldValue fieldValue = newTemplate(""success: ${source.success}"").doGet(""test"", eventWithContext);\n\n        assertThat(fieldValue.value()).isEqualTo(""success: true"");\n    }\n']",template;Boolean;Event;Template;Event;Context;Map;Message;source;Value,1.3969838619232178e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.9196085929870605, -5.535598278045654, -4.663904666900635, -5.75246000289917, -5.389490604400635, -0.024086706340312958]",0.976201057434082
2,"['    @Test\n    public void deserializeDateTime() throws Exception {\n        final String json = ""{\\""date_time\\"":\\""2016-12-13 14:00:00.000\\""}"";\n        final DTO value = objectMapper.readValue(json, DTO.class);\n        assertThat(value.dateTime).isEqualTo(new DateTime(2016, 12, 13, 14, 0, DateTimeZone.UTC));\n    }\n']",read;Value;Time;Time;class;apper;value;object;date;new,8.87666828930378e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-6.00269079208374, -5.666383266448975, -4.619208812713623, -5.816451549530029, -5.400264739990234, -0.023561961948871613]",0.9767134785652161
2,"['    @Test\n    public void deserializeIsoDateTime() throws Exception {\n        final String json = ""{\\""date_time\\"":\\""2016-12-13T14:00:00.000\\""}"";\n        final DTO value = objectMapper.readValue(json, DTO.class);\n        assertThat(value.dateTime).isEqualTo(new DateTime(2016, 12, 13, 14, 0, DateTimeZone.UTC));\n    }\n']",UTC;Zone;so;deserialize;Exception;Time;date;value;object;json,2.3283064365386963e-09;2.0954757928848267e-09;1.3969838619232178e-09;9.89530235528946e-10;8.731149137020111e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.99555778503418, -5.652409553527832, -4.624349117279053, -5.818260192871094, -5.403548240661621, -0.02355765365064144]",0.9767177700996399
2,['  @Test public void testGoldenCacheResponse() throws Exception {\n  public Buffer gzip(String data) throws IOException {\n    Buffer result = new Buffer();\n    BufferedSink sink = Okio.buffer(new GzipSink(result));\n    sink.writeUtf8(data);\n    sink.close();\n    return result;\n  }\n'],Buffer;Buffer;Okio;result;Exception;buffer;IOException;new;data;sink,6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-6.018044471740723, -5.6331706047058105, -4.5721282958984375, -5.871133327484131, -5.389475345611572, -0.02401769533753395]",0.9762682914733887
2,"['  @Test\n  public void setInstanceFollowRedirectsFalse() throws Exception {\n    server.enqueue(new MockResponse()\n        .setResponseCode(302)\n        .addHeader(""Location: /b"")\n        .setBody(""A""));\n    server.enqueue(new MockResponse()\n        .setBody(""B""));\n\n    HttpURLConnection connection = factory.open(server.url(""/a"").url());\n    connection.setInstanceFollowRedirects(false);\n    assertResponseBody(connection, ""A"");\n    assertResponseCode(connection, 302);\n  }\n']",Redirect;Body;Follow;Mock;Mock;Response;enqueue;set;set;Body,1.57160684466362e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10,5,5,"[-5.976419448852539, -5.680603981018066, -4.649184226989746, -5.768627643585205, -5.313337802886963, -0.023850442841649055]",0.9764317274093628
2,"['  @Test\n  public void testURLFilter() throws Exception {\n    server.enqueue(new MockResponse()\n        .setBody(""B""));\n    final URL blockedURL = server.url(""/a"").url();\n    factory.setUrlFilter(new URLFilter() {\n      @Override\n      public void checkURLPermitted(URL url) throws IOException {\n        if (blockedURL.equals(url)) {\n          throw new IOException(""Blocked"");\n        }\n      }\n']",URLFilter;Response;Url;blocked;IOException;Exception;equals;URL;server;URLFilter,8.149072527885437e-10;6.984919309616089e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.9991230964660645, -5.542888641357422, -4.604726791381836, -5.858857154846191, -5.422549247741699, -0.02395554631948471]",0.9763290882110596
2,"['  @Test\n  public void testURLFilterRedirect() throws Exception {\n    MockWebServer cleartextServer = new MockWebServer();\n    cleartextServer.enqueue(new MockResponse()\n        .setBody(""Blocked!""));\n    final URL blockedURL = cleartextServer.url(""/"").url();\n\n    SslClient contextBuilder = SslClient.localhost();\n    server.useHttps(contextBuilder.socketFactory, false);\n    factory.setClient(factory.client().newBuilder()\n        .sslSocketFactory(contextBuilder.socketFactory, contextBuilder.trustManager)\n        .followSslRedirects(true)\n        .build());\n    factory.setUrlFilter(new URLFilter() {\n      @Override\n      public void checkURLPermitted(URL url) throws IOException {\n        if (blockedURL.equals(url)) {\n          throw new IOException(""Blocked"");\n        }\n      }\n']",blocked;Client;enqueue;server;sl;Server;Factory;set;Factory;ttps,7.275957614183426e-10;6.83940015733242e-10;5.820766091346741e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.9969635009765625, -5.532434940338135, -4.60811185836792, -5.856980323791504, -5.438143730163574, -0.0239041019231081]",0.9763793349266052
2,['  @Test @Ignore public void lenientUrlToUriNul() throws Exception {\n      @Override public Response get(Request request) throws IOException {\n        uriReference.set(request.url().uri());\n        throw new UnsupportedOperationException();\n      }\n'],Ignore;lenient;Exception;ri;Url;request;ur;Response;Operation;request,1.3969838619232178e-09;1.1641532182693481e-09;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;2.0372681319713593e-10;1.1641532182693481e-10;0.0,5,5,"[-5.978787422180176, -5.481439590454102, -4.603392601013184, -5.887698173522949, -5.440774917602539, -0.02411079593002796]",0.9761775732040405
2,"['  @Test\n  public void testNetscapeResponse() throws Exception {\n    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);\n    client = client.newBuilder()\n        .cookieJar(new JavaNetCookieJar(cookieManager))\n        .build();\n    MockWebServer server = new MockWebServer();\n    server.start();\n\n    HttpUrl urlWithIpAddress = urlWithIpAddress(server, ""/path/foo"");\n    server.enqueue(new MockResponse().addHeader(""Set-Cookie: a=android; ""\n        + ""expires=Fri, 31-Dec-9999 23:59:59 GMT; ""\n        + ""path=/path; ""\n        + ""domain="" + urlWithIpAddress.host() + ""; ""\n        + ""secure""));\n    get(urlWithIpAddress);\n\n    List<HttpCookie> cookies = cookieManager.getCookieStore().getCookies();\n    assertEquals(1, cookies.size());\n    HttpCookie cookie = cookies.get(0);\n    assertEquals(""a"", cookie.getName());\n    assertEquals(""android"", cookie.getValue());\n    assertEquals(null, cookie.getComment());\n    assertEquals(null, cookie.getCommentURL());\n    assertEquals(false, cookie.getDiscard());\n    assertTrue(cookie.getMaxAge() > 100000000000L);\n    assertEquals(""/path"", cookie.getPath());\n    assertEquals(true, cookie.getSecure());\n    assertEquals(0, cookie.getVersion());\n  }\n']",Jar;Mock;enqueue;Server;Cookie;new;Jar;Manager;ookie;url,5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.6193447411060333e-10,5,5,"[-5.968182563781738, -5.544226169586182, -4.645498275756836, -5.785830497741699, -5.437504291534424, -0.0237750131636858]",0.9765052795410156
2,"['  @Test public void cookieHandlerLikeAndroid() throws Exception {\n      @Override public void put(URI uri, Map<String, List<String>> map) throws IOException {\n      }\n']",URI;put;Like;map;IOException;List;Map;ur;cookie;Handler,1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;4.0745362639427185e-10;-2.9103830456733704e-10;-3.4924596548080444e-10;-4.0745362639427185e-10;-5.820766091346741e-10;-8.731149137020111e-10;-9.313225746154785e-10,5,5,"[-6.003087043762207, -5.531698703765869, -4.596344470977783, -5.890169143676758, -5.430144309997559, -0.023952636867761612]",0.9763320684432983
2,"['  @Test public void getHeadersRetainsCached200LevelWarnings() throws Exception {\n  public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {\n    List<String> actualCookies = new ArrayList<>();\n    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {\n      actualCookies.add(cookie.toString());\n    }\n    assertEquals(Arrays.asList(expectedCookies), actualCookies);\n  }\n']",Retains;expected;arnings;new;actual;ookie;uri;actual;Manager;add,3.725290298461914e-09;1.1350493878126144e-09;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.9666948318481445, -5.582022666931152, -4.642270565032959, -5.776398658752441, -5.40363883972168, -0.023845553398132324]",0.9764364957809448
2,"['  @Test public void networkInterceptorInvokedForConditionalGet() throws Exception {\n          @Override public Response intercept(Chain chain) throws IOException {\n            ifNoneMatch.compareAndSet(null, chain.request().header(""If-None-Match""));\n            return chain.proceed(chain.request());\n          }\n']",Conditional;intercept;Get;Set;header;request;return;Exception;chain;chain,1.6007106751203537e-09;1.280568540096283e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;2.0372681319713593e-10,5,5,"[-5.982433319091797, -5.457985877990723, -4.624507904052734, -5.8497138023376465, -5.474003314971924, -0.023952985182404518]",0.9763315916061401
2,['  @Test public void networkInterceptorNotInvokedForFullyCached() throws Exception {\n          @Override public Response intercept(Chain chain) throws IOException {\n            throw new AssertionError();\n          }\n'],Invoked;chain;IOException;ully;new;Not;For;ached;Interceptor;Error,1.6298145055770874e-09;1.2223608791828156e-09;9.89530235528946e-10;8.149072527885437e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-1.7462298274040222e-10,5,5,"[-5.972102165222168, -5.398633003234863, -4.59434175491333, -5.8745622634887695, -5.487307071685791, -0.024425407871603966]",0.9758704900741577
2,['  @Test public void etagConditionCanBeNonAscii() throws Exception {\n  public Buffer gzip(String data) throws IOException {\n    Buffer result = new Buffer();\n    BufferedSink sink = Okio.buffer(new GzipSink(result));\n    sink.writeUtf8(data);\n    sink.close();\n    return result;\n  }\n'],Asci;Non;Be;write;Buffer;sink;buffer;Okio;Buffer;result,1.5133991837501526e-09;1.3969838619232178e-09;8.731149137020111e-10;5.820766091346741e-10;4.94765117764473e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-6.021966934204102, -5.63092041015625, -4.581719875335693, -5.870797157287598, -5.400768280029297, -0.023863712325692177]",0.9764187932014465
2,['  @Test public void streamingPartHasNoLength() throws Exception {\n      @Override public MediaType contentType() {\n        return null;\n      }\n'],Media;Length;streaming;Exception;content;return;Type;Part;null;Has,2.7939677238464355e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;3.4924596548080444e-10;0.0;-3.4924596548080444e-10;-5.238689482212067e-10;-1.1641532182693481e-09,5,5,"[-6.037418842315674, -5.496520042419434, -4.550843715667725, -5.921146869659424, -5.4844865798950195, -0.02416956052184105]",0.9761201739311218
2,"['  @Test public void contentDisagreesWithContentLengthHeaderBodyTooShort() throws IOException {\n  public void testConnectViaSocketFactory(boolean useHttps) throws IOException {\n    SocketFactory uselessSocketFactory = new SocketFactory() {\n      public Socket createSocket() {\n        throw new IllegalArgumentException(""useless"");\n      }\n']",Disagrees;Body;boolean;Header;Illegal;IOException;Length;Factory;Content;throw,5.122274160385132e-09;2.3283064365386963e-09;2.0372681319713593e-09;1.1641532182693481e-09;9.89530235528946e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.954395294189453, -5.486470699310303, -4.624823093414307, -5.839929580688477, -5.3965630531311035, -0.02427579276263714]",0.9760165810585022
2,['  @Test public void redirectWithProxySelector() throws Exception {\n          @Override public List<Proxy> select(URI uri) {\n            proxySelectionRequests.add(uri);\n            MockWebServer proxyServer = (uri.getPort() == server.getPort())\n                ? server\n                : server2;\n            return Arrays.asList(proxyServer.toProxyAddress());\n          }\n'],Proxy;Requests;Web;Mock;Port;Arrays;Server;add;Port;redirect,1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.055902197957039e-10;2.3283064365386963e-10,5,5,"[-5.967052936553955, -5.408120155334473, -4.619998455047607, -5.836219310760498, -5.466935157775879, -0.024332337081432343]",0.9759613275527954
2,['  @Test public void interceptorsNotInvoked() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        throw new AssertionError();\n      }\n'],Chain;Exception;Assertion;intercept;new;Error;throw;Invoked;IOException;Not,1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;4.0745362639427185e-10;0.0;-2.3283064365386963e-10;-3.055902197957039e-10;-4.0745362639427185e-10;-4.656612873077393e-10,5,5,"[-5.972710132598877, -5.485532760620117, -4.594376087188721, -5.876770496368408, -5.423506736755371, -0.02431081421673298]",0.9759823083877563
2,"['  @Test public void unexpectedExceptionSync() throws Exception {\n          @Override public List<InetAddress> lookup(String hostname) {\n            throw new RuntimeException(""boom!"");\n          }\n']",boom;unexpected;List;Address;hostname;new;Inet;Exception;lookup;Sync,2.3283064365386963e-09;1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.937961101531982, -5.471701622009277, -4.644229888916016, -5.821187973022461, -5.4015421867370605, -0.02422308549284935]",0.9760679602622986
2,"['  @Test public void unexpectedExceptionAsync() throws Exception {\n          @Override public List<InetAddress> lookup(String hostname) {\n            throw new RuntimeException(""boom!"");\n          }\n']",unexpected;throw;Inet;Address;new;List;Exception;Runtime;Exception;hostname,1.862645149230957e-09;9.313225746154785e-10;6.402842700481415e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.402842700481415e-10,5,5,"[-5.939777851104736, -5.469475746154785, -4.642225742340088, -5.825761318206787, -5.403853893280029, -0.02422308549284935]",0.9760679602622986
2,['  @Test public void callsNotManagedByDispatcher() throws Exception {\n  public Buffer gzip(String data) throws IOException {\n    Buffer result = new Buffer();\n    BufferedSink gzipSink = Okio.buffer(new GzipSink(result));\n    gzipSink.writeUtf8(data);\n    gzipSink.close();\n    return result;\n  }\n'],buffer;Okio;Dispatcher;close;ink;ink;Managed;ink;Buffer;zip,1.1641532182693481e-09;9.458744898438454e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.010340213775635, -5.614187717437744, -4.582984447479248, -5.873650550842285, -5.404759407043457, -0.02391481027007103]",0.9763689041137695
2,['  @Test public void applicationInterceptorsCanShortCircuitResponses() throws Exception {\n          @Override public Response intercept(Chain chain) throws IOException {\n            return interceptorResponse;\n          }\n'],Responses;return;Exception;Response;intercept;IOException;Response;Can;chain;interceptor,7.2177499532699585e-09;1.1641532182693481e-09;2.3283064365386963e-10;-1.7462298274040222e-10;-4.656612873077393e-10;-5.238689482212067e-10;-5.820766091346741e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.280568540096283e-09,5,5,"[-5.964929103851318, -5.37330436706543, -4.598729133605957, -5.8685784339904785, -5.47654390335083, -0.024580933153629303]",0.9757187366485596
2,"['  @Test public void networkInterceptorsCannotShortCircuitResponses() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        return new Response.Builder()\n            .request(chain.request())\n            .protocol(Protocol.HTTP_1_1)\n            .code(200)\n            .message(""Intercepted!"")\n            .body(ResponseBody.create(MediaType.parse(""text/plain; charset=utf-8""), ""abc""))\n            .build();\n      }\n']",Circuit;Exception;intercept;request;IOException;request;message;new;code;HTTP,6.984919309616089e-10;5.675246939063072e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.979804515838623, -5.4419379234313965, -4.615484714508057, -5.855432510375977, -5.484055042266846, -0.02406180277466774]",0.9762254953384399
2,['  @Test public void networkInterceptorsCannotCallProceedMultipleTimes() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        chain.proceed(chain.request());\n        return chain.proceed(chain.request());\n      }\n'],proceed;Multiple;request;request;chain;annot;Exception;IOException;chain;return,1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.0372681319713593e-10,5,5,"[-5.980149745941162, -5.497961521148682, -4.601301193237305, -5.866817951202393, -5.431430816650391, -0.024160483852028847]",0.9761289358139038
2,"['  @Test public void networkInterceptorsCannotChangeServerAddress() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Address address = chain.connection().route().address();\n        String sameHost = address.url().host();\n        int differentPort = address.url().port() + 1;\n        return chain.proceed(chain.request().newBuilder()\n            .url(HttpUrl.parse(""http://"" + sameHost + "":"" + differentPort + ""/""))\n            .build());\n      }\n']",annot;intercept;Interceptors;proceed;address;Change;chain;Builder;chain;same,6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.982414245605469, -5.501969814300537, -4.6234636306762695, -5.841578006744385, -5.435183525085449, -0.023969978094100952]",0.9763151407241821
2,['  @Test public void networkInterceptorsHaveConnectionAccess() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Connection connection = chain.connection();\n        assertNotNull(connection);\n        return chain.proceed(chain.request());\n      }\n'],chain;connection;network;Connection;proceed;request;Response;chain;IOException;Exception,1.3969838619232178e-09;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;8.731149137020111e-11;0.0;0.0;-1.4551915228366852e-10;-1.7462298274040222e-10,5,5,"[-5.984954833984375, -5.493537425994873, -4.591158866882324, -5.888166904449463, -5.433711528778076, -0.024200046434998512]",0.9760904312133789
2,"['  @Test public void networkInterceptorsObserveNetworkHeaders() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        // The network request has everything: User-Agent, Host, Accept-Encoding.\n        Request networkRequest = chain.request();\n        assertNotNull(networkRequest.header(""User-Agent""));\n        assertEquals(server.getHostName() + "":"" + server.getPort(),\n            networkRequest.header(""Host""));\n        assertNotNull(networkRequest.header(""Accept-Encoding""));\n\n        // The network response also has everything, including the raw gzipped content.\n        Response networkResponse = chain.proceed(networkRequest);\n        assertEquals(""gzip"", networkResponse.header(""Content-Encoding""));\n        return networkResponse;\n      }\n']",Interceptors;has;everything;Port;Agent;also;server;get;network;Null,1.0186340659856796e-09;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.958020210266113, -5.445629119873047, -4.6456685066223145, -5.825401782989502, -5.47195291519165, -0.02394227869808674]",0.9763420820236206
2,"['  @Test public void networkInterceptorsCanChangeRequestMethodFromGetToPost() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Request originalRequest = chain.request();\n        MediaType mediaType = MediaType.parse(""text/plain"");\n        RequestBody body = RequestBody.create(mediaType, ""abc"");\n        return chain.proceed(originalRequest.newBuilder()\n            .method(""POST"", body)\n            .header(""Content-Type"", mediaType.toString())\n            .header(""Content-Length"", Long.toString(body.contentLength()))\n            .build());\n      }\n']",Interceptors;plain;original;Exception;Can;Type;media;Change;header;text,1.862645149230957e-09;5.820766091346741e-10;5.093170329928398e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.991268634796143, -5.5280256271362305, -4.627688884735107, -5.837825775146484, -5.44571590423584, -0.023761626332998276]",0.976518452167511
2,"['  @Test public void networkInterceptorsRewriteRequestToServer() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Request originalRequest = chain.request();\n        return chain.proceed(originalRequest.newBuilder()\n            .method(""POST"", uppercase(originalRequest.body()))\n            .addHeader(""OkHttp-Intercepted"", ""yep"")\n            .build());\n      }\n']",Interceptors;intercept;proceed;Chain;return;POST;Request;chain;original;body,2.0372681319713593e-09;9.89530235528946e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.4010660126805305e-10;2.3283064365386963e-10,5,5,"[-5.992165565490723, -5.500855922698975, -4.617251396179199, -5.8426618576049805, -5.4510416984558105, -0.023938670754432678]",0.9763455986976624
2,"['  @Test public void networkInterceptorsRewriteResponseFromServer() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Response originalResponse = chain.proceed(chain.request());\n        return originalResponse.newBuilder()\n            .body(uppercase(originalResponse.body()))\n            .addHeader(""OkHttp-Intercepted"", ""yep"")\n            .build();\n      }\n']",request;IOException;build;ep;Builder;original;Response;body;original;Response,6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-6.012252330780029, -5.491858959197998, -4.598074436187744, -5.8581461906433105, -5.476537704467773, -0.023965205997228622]",0.9763196706771851
2,"['  @Test public void multipleNetworkInterceptors() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Request originalRequest = chain.request();\n        Response originalResponse = chain.proceed(originalRequest.newBuilder()\n            .addHeader(""Request-Interceptor"", ""Android"") // 1. Added first.\n            .build());\n        return originalResponse.newBuilder()\n            .addHeader(""Response-Interceptor"", ""Donut"") // 4. Added last.\n            .build();\n      }\n']",intercept;Android;original;Donut;Interceptor;Request;chain;add;Response;Exception,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.969531536102295, -5.42165994644165, -4.6179633140563965, -5.845780372619629, -5.480833530426025, -0.024196438491344452]",0.9760939478874207
2,"['  @Test public void asyncNetworkInterceptors() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Response originalResponse = chain.proceed(chain.request());\n        return originalResponse.newBuilder()\n            .addHeader(""OkHttp-Intercepted"", ""yep"")\n            .build();\n      }\n']",async;Intercepted;intercept;add;original;ep;Interceptors;Http;Response;Response,1.0477378964424133e-09;8.87666828930378e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.994997501373291, -5.469417095184326, -4.607032299041748, -5.863506317138672, -5.465866565704346, -0.024042949080467224]",0.976243793964386
2,['  @Test public void applicationInterceptorsCanMakeMultipleRequestsToServer() throws Exception {\n          @Override public Response intercept(Chain chain) throws IOException {\n            Response response1 = chain.proceed(chain.request());\n            response1.body().close();\n            return chain.proceed(chain.request());\n          }\n'],Requests;proceed;intercept;Make;Response;chain;body;chain;return;request,1.0477378964424133e-09;7.203198038041592e-10;6.984919309616089e-10;6.984919309616089e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.1641532182693481e-10;2.9103830456733704e-11;0.0;0.0,5,5,"[-5.972939968109131, -5.406023979187012, -4.611613750457764, -5.845668792724609, -5.480705261230469, -0.024324310943484306]",0.9759692549705505
2,"['  @Test public void interceptorMakesAnUnrelatedRequest() throws Exception {\n          @Override public Response intercept(Chain chain) throws IOException {\n            if (chain.request().url().encodedPath().equals(""/b"")) {\n              Request requestA = new Request.Builder()\n                  .url(server.url(""/a""))\n                  .build();\n              Response responseA = client.newCall(requestA).execute();\n              assertEquals(""a"", responseA.body().string());\n            }\n\n            return chain.proceed(chain.request());\n          }\n']",intercept;interceptor;Exception;Response;proceed;chain;build;An;Chain;url,1.7462298274040222e-09;9.89530235528946e-10;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.5652192309498787e-10,5,5,"[-5.96399450302124, -5.427987575531006, -4.641043663024902, -5.803974151611328, -5.471385955810547, -0.024118708446621895]",0.9761698246002197
2,"['  @Test public void interceptorMakesAnUnrelatedAsyncRequest() throws Exception {\n          @Override public Response intercept(Chain chain) throws IOException {\n            if (chain.request().url().encodedPath().equals(""/b"")) {\n              Request requestA = new Request.Builder()\n                  .url(server.url(""/a""))\n                  .build();\n\n              try {\n                RecordingCallback callbackA = new RecordingCallback();\n                client.newCall(requestA).enqueue(callbackA);\n                callbackA.await(requestA.url()).assertBody(""a"");\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            }\n\n            return chain.proceed(chain.request());\n          }\n']",intercept;IOException;An;proceed;if;Async;catch;Callback;new;callback,1.2223608791828156e-09;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.96334171295166, -5.321908950805664, -4.615090370178223, -5.831655979156494, -5.529158115386963, -0.024557670578360558]",0.9757413864135742
2,"['  @Test public void networkInterceptorThrowsRuntimeExceptionSynchronous() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        throw new RuntimeException(""boom!"");\n      }\n']",boom;ynchronous;Interceptor;Chain;chain;Exception;throw;new;Exception;network,5.587935447692871e-09;3.259629011154175e-09;1.979060471057892e-09;1.6298145055770874e-09;9.313225746154785e-10;3.4924596548080444e-10;2.9103830456733704e-11;0.0;-1.4551915228366852e-10;-2.3283064365386963e-10,5,5,"[-5.972562789916992, -5.496270656585693, -4.603018760681152, -5.872590065002441, -5.4201483726501465, -0.024203769862651825]",0.9760866761207581
2,"['  @Test public void networkInterceptorModifiedRequestIsReturned() throws IOException {\n      @Override public Response intercept(Chain chain) throws IOException {\n        return chain.proceed(chain.request().newBuilder()\n            .header(""User-Agent"", ""intercepted request"")\n            .build());\n      }\n']",header;Response;Builder;request;chain;request;Chain;Request;chain;build,9.313225746154785e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;0.0,5,5,"[-6.002840995788574, -5.478592395782471, -4.597777843475342, -5.866759300231934, -5.4765777587890625, -0.02402304857969284]",0.9762632250785828
2,"['  @Test public void networkInterceptorThrowsRuntimeExceptionAsynchronous() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        throw new RuntimeException(""boom!"");\n      }\n']",boom;throw;Asynchronous;network;Response;Exception;chain;Exception;intercept;Runtime,3.026798367500305e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.977386951446533, -5.496271133422852, -4.599130630493164, -5.877440929412842, -5.426120281219482, -0.02419038861989975]",0.9760998487472534
2,['  @Test public void applicationInterceptorReturnsNull() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        chain.proceed(chain.request());\n        return null;\n      }\n'],Chain;Exception;return;chain;null;Interceptor;proceed;request;chain;chain,9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-2.6193447411060333e-10,5,5,"[-6.002201557159424, -5.456258773803711, -4.576111316680908, -5.898577690124512, -5.460440635681152, -0.024326171725988388]",0.9759673476219177
2,['  @Test public void networkInterceptorReturnsNull() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        chain.proceed(chain.request());\n        return null;\n      }\n'],chain;chain;Interceptor;Returns;request;Response;proceed;null;Exception;IOException,9.89530235528946e-10;7.275957614183426e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-2.9103830456733704e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-4.94765117764473e-10,5,5,"[-6.003179550170898, -5.464474678039551, -4.574217796325684, -5.899274826049805, -5.459046363830566, -0.024311978369951248]",0.9759811758995056
2,['  @Test public void networkInterceptorReturnsConnectionOnEmptyBody() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Response response = chain.proceed(chain.request());\n        assertNotNull(chain.connection());\n        return response;\n      }\n'],Empty;Returns;On;return;chain;response;intercept;Connection;Not;connection,3.026798367500305e-09;2.7939677238464355e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.970810890197754, -5.423605442047119, -4.58333683013916, -5.892431735992432, -5.45416784286499, -0.024521145969629288]",0.9757771492004395
2,['  @Test public void eachPeakIsIndependent() throws Exception {\n      @Override public void close() throws IOException {\n        closed = true;\n      }\n'],Independent;IOException;each;true;Exception;close;closed;Peak,2.7939677238464355e-09;1.3969838619232178e-09;4.656612873077393e-10;4.656612873077393e-10;-5.820766091346741e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-2.7939677238464355e-09,5,5,"[-6.042794227600098, -5.492342948913574, -4.543586254119873, -5.9307050704956055, -5.477652549743652, -0.0242557805031538]",0.976036012172699
2,['  @Test public void proxySelector() throws Exception {\n      @Override public List<Proxy> select(URI uri) {\n        return Collections.singletonList(socksProxy.proxy());\n      }\n'],Collections;ocks;URI;ur;Selector;Proxy;proxy;select;Exception;return,1.862645149230957e-09;1.6298145055770874e-09;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.980688095092773, -5.500803470611572, -4.591292858123779, -5.891385078430176, -5.422693252563477, -0.024219710379838943]",0.9760713577270508
2,['  @Test public void synchronousCallAccessors() throws Exception {\n              @Override public Response intercept(Chain chain) throws IOException {\n                try {\n                  ready.countDown();\n                  waiting.await();\n                } catch (InterruptedException e) {\n                  throw new AssertionError();\n                }\n                throw new IOException();\n              }\n'],catch;Exception;intercept;Interrupted;await;IOException;Call;throw;new;Down,2.3283064365386963e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.2223608791828156e-09;1.1059455573558807e-09;5.820766091346741e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.970439910888672, -5.278524398803711, -4.57078742980957, -5.853829383850098, -5.543458461761475, -0.02509712055325508]",0.9752153158187866
2,['  @Test public void idleCallbackInvokedWhenIdle() throws InterruptedException {\n      @Override public void run() {\n        idle.set(true);\n      }\n'],idle;When;Exception;le;true;Callback;set;Interrupted;run;Invoked,1.862645149230957e-09;8.149072527885437e-10;6.111804395914078e-10;-5.820766091346741e-11;-2.9103830456733704e-10;-5.820766091346741e-10;-5.820766091346741e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.1059455573558807e-09,5,5,"[-6.028059005737305, -5.485939979553223, -4.567326545715332, -5.918980598449707, -5.465258598327637, -0.024148963391780853]",0.9761402606964111
2,['  @Test public void clonedInterceptorsListsAreIndependent() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        return chain.proceed(chain.request());\n      }\n'],chain;Independent;ists;intercept;IOException;return;chain;chain;cloned;Interceptors,1.1059455573558807e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;0.0;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.992377281188965, -5.494091987609863, -4.580230712890625, -5.899984359741211, -5.436427593231201, -0.02424740418791771]",0.9760442972183228
2,"['  @Test public void connectionsAreNotReusedIfNetworkInterceptorInterferes() throws Exception {\n      @Override public Response intercept(Chain chain) throws IOException {\n        Response response = chain.proceed(chain.request());\n        return response.newBuilder()\n            .body(ResponseBody.create(null, ""unrelated response body!""))\n            .build();\n      }\n']",build;intercept;connections;Network;unrelated;Response;Builder;Exception;IOException;chain,1.57160684466362e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.402842700481415e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.9103830456733704e-10;1.8917489796876907e-10;1.8917489796876907e-10,5,5,"[-6.000732898712158, -5.471641540527344, -4.593226432800293, -5.8699493408203125, -5.470935821533203, -0.02412022091448307]",0.9761682152748108
2,"['  @Test\n  public void nonRetryableIOException() throws Exception {\n    ConnectionSpecSelector connectionSpecSelector =\n        createConnectionSpecSelector(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS);\n    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);\n    connectionSpecSelector.configureSecureSocket(socket);\n\n    boolean retry = connectionSpecSelector.connectionFailed(\n        new IOException(""Non-handshake exception""));\n    assertFalse(retry);\n    socket.close();\n  }\n']",LS;Protocol;IOException;COM;IOException;MODERN;socket;close;Version;Connection,1.862645149230957e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;7.275957614183426e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.957641124725342, -5.5986433029174805, -4.614876747131348, -5.859403133392334, -5.3741068840026855, -0.023965205997228622]",0.9763196706771851
2,"['  @Test\n  public void nonRetryableSSLHandshakeException() throws Exception {\n    ConnectionSpecSelector connectionSpecSelector =\n        createConnectionSpecSelector(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS);\n    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);\n    connectionSpecSelector.configureSecureSocket(socket);\n\n    SSLHandshakeException trustIssueException =\n        new SSLHandshakeException(""Certificate handshake exception"");\n    trustIssueException.initCause(new CertificateException());\n    boolean retry = connectionSpecSelector.connectionFailed(trustIssueException);\n    assertFalse(retry);\n    socket.close();\n  }\n']",COM;Retryable;LS;ailed;SSLHandshake;Spec;ATIBLE;create;Exception;Issue,1.862645149230957e-09;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.964887619018555, -5.566913604736328, -4.611674785614014, -5.856893062591553, -5.397988796234131, -0.02399616502225399]",0.9762894511222839
2,"['  @Test\n  public void retryableSSLHandshakeException() throws Exception {\n    ConnectionSpecSelector connectionSpecSelector =\n        createConnectionSpecSelector(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS);\n    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);\n    connectionSpecSelector.configureSecureSocket(socket);\n\n    boolean retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);\n    assertTrue(retry);\n    socket.close();\n  }\n']",LS;Protocol;LS;Connection;Socket;SSLHandshake;Secure;RETRYABLE;True;ATIBLE,3.259629011154175e-09;1.5570549294352531e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.951084136962891, -5.595137596130371, -4.617332935333252, -5.857577800750732, -5.365400791168213, -0.024017928168177605]",0.9762682318687439
2,"['  @Test\n  public void someFallbacksSupported() throws Exception {\n    ConnectionSpec sslV3 =\n        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n            .tlsVersions(TlsVersion.SSL_3_0)\n            .build();\n\n    ConnectionSpecSelector connectionSpecSelector = createConnectionSpecSelector(\n        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, sslV3);\n\n    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};\n    SSLSocket socket = createSocketWithEnabledProtocols(enabledSocketTlsVersions);\n\n    // MODERN_TLS is used here.\n    connectionSpecSelector.configureSecureSocket(socket);\n    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);\n\n    boolean retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);\n    assertTrue(retry);\n    socket.close();\n\n    // COMPATIBLE_TLS is used here.\n    socket = createSocketWithEnabledProtocols(enabledSocketTlsVersions);\n    connectionSpecSelector.configureSecureSocket(socket);\n    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);\n\n    retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);\n    assertFalse(retry);\n    socket.close();\n\n    // sslV3 is not used because SSLv3 is not enabled on the socket.\n  }\n']",ATIBLE;Exception;Connection;False;Connection;LS;SSL;Protocol;Secure;Enabled,1.0186340659856796e-09;7.8580342233181e-10;6.693881005048752e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.879090309143066, -5.474113464355469, -4.6918463706970215, -5.761309623718262, -5.377226829528809, -0.02421959489583969]",0.9760713577270508
2,"['  @Test public void proxySelectorReturnsNull() throws Exception {\n      @Override public List<Proxy> select(URI uri) {\n        assertEquals(uriHost, uri.getHost());\n        return null;\n      }\n']",Null;Returns;ur;return;proxy;uri;Host;List;null;get,1.5133991837501526e-09;9.313225746154785e-10;7.712515071034431e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-1.7462298274040222e-10,5,5,"[-5.960117816925049, -5.520356178283691, -4.620451927185059, -5.846229553222656, -5.3957719802856445, -0.02414814941585064]",0.976141095161438
2,"['  @Test public void racingReaders() throws Exception {\n      @Override public ByteString call() throws Exception {\n        Buffer buffer = new Buffer();\n        while (source.read(buffer, 16384) != -1) {\n        }\n        source.close();\n        return buffer.readByteString();\n      }\n']",while;call;Exception;Buffer;buffer;close;buffer;read;Exception;return,9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;0.0;-5.820766091346741e-11,5,5,"[-6.004998207092285, -5.496589660644531, -4.601346492767334, -5.864588737487793, -5.457937717437744, -0.023991508409380913]",0.9762939810752869
2,"['  @Test\n  public void buildsWhenJdk9() {\n    assumeTrue(getPlatform().equals(""jdk9""));\n\n    assertNotNull(Jdk9Platform.buildIfSupported());\n  }\n']",Supported;Platform;build;dk;True;get;assume;dk;equals;When,1.862645149230957e-09;1.280568540096283e-09;9.89530235528946e-10;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;5.820766091346741e-11;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.965267181396484, -5.70009183883667, -4.600104808807373, -5.826793193817139, -5.2711334228515625, -0.024341994896531105]",0.9759519100189209
2,"['  @Test\n  public void findsAlpnMethods() {\n    assumeTrue(getPlatform().equals(""jdk9""));\n\n    Jdk9Platform platform = Jdk9Platform.buildIfSupported();\n\n    assertEquals(""getApplicationProtocol"", platform.getProtocolMethod.getName());\n    assertEquals(""setApplicationProtocols"", platform.setProtocolMethod.getName());\n  }\n']",Alpn;build;Application;Equals;dk;platform;get;set;finds;Protocol,3.026798367500305e-09;9.604264050722122e-10;9.313225746154785e-10;8.440110832452774e-10;6.111804395914078e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.896312236785889, -5.638988018035889, -4.678584098815918, -5.71359395980835, -5.259765625, -0.024390507489442825]",0.9759045243263245
2,"['  @Test\n  public void testBuildsWithJettyBoot() {\n    assumeTrue(getPlatform().equals(""jdk-with-jetty-boot""));\n\n    assertNotNull(JdkWithJettyBootPlatform.buildIfSupported());\n  }\n']",Platform;Null;Supported;Build;dk;Platform;Boot;Boot;build;Jetty,2.7939677238464355e-09;1.280568540096283e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-5.953834056854248, -5.6817169189453125, -4.61754846572876, -5.8209357261657715, -5.273486614227295, -0.024263111874461174]",0.9760288596153259
2,['  @Test\n  public void isSupported() throws Exception {\n    {\n      BaseClass base = new BaseClass();\n      assertTrue(STRING_METHOD_RETURNS_ANY.isSupported(base));\n      assertTrue(STRING_METHOD_RETURNS_STRING.isSupported(base));\n      assertFalse(STRING_METHOD_RETURNS_INT.isSupported(base));\n      assertTrue(VOID_METHOD_RETURNS_ANY.isSupported(base));\n      assertTrue(VOID_METHOD_RETURNS_VOID.isSupported(base));\n      assertFalse(SUBCLASS_METHOD_RETURNS_ANY.isSupported(base));\n      assertFalse(SUBCLASS_METHOD_RETURNS_STRING.isSupported(base));\n      assertFalse(SUBCLASS_METHOD_RETURNS_INT.isSupported(base));\n      assertFalse(METHOD_WITH_ARGS_WRONG_PARAMS.isSupported(base));\n      assertFalse(METHOD_WITH_ARGS_CORRECT_PARAMS.isSupported(base));\n    }\n    {\n      SubClass1 subClass1 = new SubClass1();\n      assertTrue(STRING_METHOD_RETURNS_ANY.isSupported(subClass1));\n      assertTrue(STRING_METHOD_RETURNS_STRING.isSupported(subClass1));\n      assertFalse(STRING_METHOD_RETURNS_INT.isSupported(subClass1));\n      assertTrue(VOID_METHOD_RETURNS_ANY.isSupported(subClass1));\n      assertTrue(VOID_METHOD_RETURNS_VOID.isSupported(subClass1));\n      assertTrue(SUBCLASS_METHOD_RETURNS_ANY.isSupported(subClass1));\n      assertTrue(SUBCLASS_METHOD_RETURNS_STRING.isSupported(subClass1));\n      assertFalse(SUBCLASS_METHOD_RETURNS_INT.isSupported(subClass1));\n      assertFalse(METHOD_WITH_ARGS_WRONG_PARAMS.isSupported(subClass1));\n      assertTrue(METHOD_WITH_ARGS_CORRECT_PARAMS.isSupported(subClass1));\n    }\n    {\n      SubClass2 subClass2 = new SubClass2();\n      assertTrue(STRING_METHOD_RETURNS_ANY.isSupported(subClass2));\n      assertTrue(STRING_METHOD_RETURNS_STRING.isSupported(subClass2));\n      assertFalse(STRING_METHOD_RETURNS_INT.isSupported(subClass2));\n      assertTrue(VOID_METHOD_RETURNS_ANY.isSupported(subClass2));\n      assertTrue(VOID_METHOD_RETURNS_VOID.isSupported(subClass2));\n      assertTrue(SUBCLASS_METHOD_RETURNS_ANY.isSupported(subClass2));\n      assertFalse(SUBCLASS_METHOD_RETURNS_STRING.isSupported(subClass2));\n      assertTrue(SUBCLASS_METHOD_RETURNS_INT.isSupported(subClass2));\n      assertFalse(METHOD_WITH_ARGS_WRONG_PARAMS.isSupported(subClass2));\n      assertTrue(METHOD_WITH_ARGS_CORRECT_PARAMS.isSupported(subClass2));\n    }\n  }\n'],Exception;METHOD;PARAMS;WRONG;Supported;base;STRING;Supported;ITH;RETURNS,9.313225746154785e-10;4.220055416226387e-10;3.710738383233547e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.916017532348633, -5.503925800323486, -4.627786636352539, -5.836050033569336, -5.437891483306885, -0.024100089445710182]",0.9761880040168762
2,"['  @Test\n  public void invoke() throws Exception {\n    {\n      BaseClass base = new BaseClass();\n      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invoke(base));\n      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invoke(base));\n      assertErrorOnInvoke(STRING_METHOD_RETURNS_INT, base);\n      assertNull(VOID_METHOD_RETURNS_ANY.invoke(base));\n      assertNull(VOID_METHOD_RETURNS_VOID.invoke(base));\n      assertErrorOnInvoke(SUBCLASS_METHOD_RETURNS_ANY, base);\n      assertErrorOnInvoke(SUBCLASS_METHOD_RETURNS_STRING, base);\n      assertErrorOnInvoke(SUBCLASS_METHOD_RETURNS_INT, base);\n      assertErrorOnInvoke(METHOD_WITH_ARGS_WRONG_PARAMS, base);\n      assertErrorOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, base);\n    }\n    {\n      SubClass1 subClass1 = new SubClass1();\n      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invoke(subClass1));\n      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invoke(subClass1));\n      assertErrorOnInvoke(STRING_METHOD_RETURNS_INT, subClass1);\n      assertNull(VOID_METHOD_RETURNS_ANY.invoke(subClass1));\n      assertNull(VOID_METHOD_RETURNS_VOID.invoke(subClass1));\n      assertEquals(""subclassMethod1"", SUBCLASS_METHOD_RETURNS_ANY.invoke(subClass1));\n      assertEquals(""subclassMethod1"", SUBCLASS_METHOD_RETURNS_STRING.invoke(subClass1));\n      assertErrorOnInvoke(SUBCLASS_METHOD_RETURNS_INT, subClass1);\n      assertErrorOnInvoke(METHOD_WITH_ARGS_WRONG_PARAMS, subClass1);\n      assertEquals(""arg"", METHOD_WITH_ARGS_CORRECT_PARAMS.invoke(subClass1, ""arg""));\n    }\n\n    {\n      SubClass2 subClass2 = new SubClass2();\n      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invoke(subClass2));\n      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invoke(subClass2));\n      assertErrorOnInvoke(STRING_METHOD_RETURNS_INT, subClass2);\n      assertNull(VOID_METHOD_RETURNS_ANY.invoke(subClass2));\n      assertNull(VOID_METHOD_RETURNS_VOID.invoke(subClass2));\n      assertEquals(1234, SUBCLASS_METHOD_RETURNS_ANY.invoke(subClass2));\n      assertErrorOnInvoke(SUBCLASS_METHOD_RETURNS_STRING, subClass2);\n      assertEquals(1234, SUBCLASS_METHOD_RETURNS_INT.invoke(subClass2));\n      assertErrorOnInvoke(METHOD_WITH_ARGS_WRONG_PARAMS, subClass2);\n      assertEquals(""arg"", METHOD_WITH_ARGS_CORRECT_PARAMS.invoke(subClass2, ""arg""));\n    }\n  }\n']",VOID;Class;METHOD;METHOD;subclass;VOID;ITH;PARAMS;RETURNS;invoke,4.729372449219227e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.2014213502407074e-10;3.128661774098873e-10;3.128661774098873e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.9073286056518555, -5.557760238647461, -4.647947311401367, -5.787757396697998, -5.3833088874816895, -0.024103697389364243]",0.9761844873428345
2,"['  @Test\n  public void invokeBadArgs() throws Exception {\n    SubClass1 subClass1 = new SubClass1();\n    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1); // no args\n    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1, 123);\n    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1, true);\n    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1,\n        new Object());\n    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1, ""one"",\n        ""two"");\n  }\n']",METHOD;On;Illegal;Exception;Invoke;CORRECT;ITH;Class;CORRECT;Exception,8.731149137020111e-10;5.238689482212067e-10;5.093170329928398e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.905012130737305, -5.571250915527344, -4.6616621017456055, -5.778956413269043, -5.335207939147949, -0.024183174595236778]",0.9761068820953369
2,['  @Test\n  public void invokeWithException() throws Exception {\n    SubClass2 subClass2 = new SubClass2();\n    try {\n      THROWS_EXCEPTION.invoke(subClass2);\n    } catch (InvocationTargetException expected) {\n      assertTrue(expected.getTargetException() instanceof IOException);\n    }\n\n    try {\n      THROWS_RUNTIME_EXCEPTION.invoke(subClass2);\n    } catch (InvocationTargetException expected) {\n      assertTrue(expected.getTargetException() instanceof NumberFormatException);\n    }\n  }\n'],get;True;Class;new;expected;catch;Exception;Target;sub;Exception,5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.947534561157227, -5.609189033508301, -4.624408721923828, -5.8163251876831055, -5.328086853027344, -0.02420830726623535]",0.9760823845863342
2,"['  @Test\n  public void invokeNonPublic() throws Exception {\n    SubClass2 subClass2 = new SubClass2();\n    assertFalse(NON_PUBLIC.isSupported(subClass2));\n    assertErrorOnInvoke(NON_PUBLIC, subClass2);\n  }\n']",Supported;Public;PUBLIC;PUBLIC;ON;ON;Sub;sub;Sub;Class,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.973679542541504, -5.646964073181152, -4.590755939483643, -5.854450225830078, -5.331941604614258, -0.024210751056671143]",0.9760800004005432
2,"['  @Test\n  public void invokeOptional() throws Exception {\n    {\n      BaseClass base = new BaseClass();\n      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invokeOptional(base));\n      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invokeOptional(base));\n      assertNull(STRING_METHOD_RETURNS_INT.invokeOptional(base));\n      assertNull(VOID_METHOD_RETURNS_ANY.invokeOptional(base));\n      assertNull(VOID_METHOD_RETURNS_VOID.invokeOptional(base));\n      assertNull(SUBCLASS_METHOD_RETURNS_ANY.invokeOptional(base));\n      assertNull(SUBCLASS_METHOD_RETURNS_STRING.invokeOptional(base));\n      assertNull(SUBCLASS_METHOD_RETURNS_INT.invokeOptional(base));\n      assertNull(METHOD_WITH_ARGS_WRONG_PARAMS.invokeOptional(base));\n      assertNull(METHOD_WITH_ARGS_CORRECT_PARAMS.invokeOptional(base));\n    }\n    {\n      SubClass1 subClass1 = new SubClass1();\n      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invokeOptional(subClass1));\n      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invokeOptional(subClass1));\n      assertNull(STRING_METHOD_RETURNS_INT.invokeOptional(subClass1));\n      assertNull(VOID_METHOD_RETURNS_ANY.invokeOptional(subClass1));\n      assertNull(VOID_METHOD_RETURNS_VOID.invokeOptional(subClass1));\n      assertEquals(""subclassMethod1"", SUBCLASS_METHOD_RETURNS_ANY.invokeOptional(subClass1));\n      assertEquals(""subclassMethod1"", SUBCLASS_METHOD_RETURNS_STRING.invokeOptional(subClass1));\n      assertNull(SUBCLASS_METHOD_RETURNS_INT.invokeOptional(subClass1));\n      assertNull(METHOD_WITH_ARGS_WRONG_PARAMS.invokeOptional(subClass1));\n      assertEquals(""arg"", METHOD_WITH_ARGS_CORRECT_PARAMS.invokeOptional(subClass1, ""arg""));\n    }\n\n    {\n      SubClass2 subClass2 = new SubClass2();\n      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invokeOptional(subClass2));\n      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invokeOptional(subClass2));\n      assertNull(STRING_METHOD_RETURNS_INT.invokeOptional(subClass2));\n      assertNull(VOID_METHOD_RETURNS_ANY.invokeOptional(subClass2));\n      assertNull(VOID_METHOD_RETURNS_VOID.invokeOptional(subClass2));\n      assertEquals(1234, SUBCLASS_METHOD_RETURNS_ANY.invokeOptional(subClass2));\n      assertNull(SUBCLASS_METHOD_RETURNS_STRING.invokeOptional(subClass2));\n      assertEquals(1234, SUBCLASS_METHOD_RETURNS_INT.invokeOptional(subClass2));\n      assertNull(METHOD_WITH_ARGS_WRONG_PARAMS.invokeOptional(subClass2));\n      assertEquals(""arg"", METHOD_WITH_ARGS_CORRECT_PARAMS.invokeOptional(subClass2, ""arg""));\n    }\n  }\n']",Optional;Method;Class;subclass;Optional;Equals;PARAMS;PARAMS;invoke;INT,1.6298145055770874e-09;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1100277081131935e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.910703659057617, -5.551906585693359, -4.641068458557129, -5.787771224975586, -5.396386623382568, -0.024124061688780785]",0.9761645793914795
2,"['  @Test\n  public void invokeOptionalBadArgs() throws Exception {\n    SubClass1 subClass1 = new SubClass1();\n    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS,\n        subClass1); // no args\n    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1, 123);\n    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1,\n        true);\n    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1,\n        new Object());\n    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1,\n        ""one"", ""two"");\n  }\n']",args;Optional;Class;Class;METHOD;On;Args;Invoke;ARGS;ITH,1.1641532182693481e-09;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.885465145111084, -5.571982383728027, -4.671024799346924, -5.754435062408447, -5.3151469230651855, -0.024323845282197]",0.9759696125984192
2,['  @Test\n  public void invokeOptionalWithException() throws Exception {\n    SubClass2 subClass2 = new SubClass2();\n    try {\n      THROWS_EXCEPTION.invokeOptional(subClass2);\n    } catch (InvocationTargetException expected) {\n      assertTrue(expected.getTargetException() instanceof IOException);\n    }\n\n    try {\n      THROWS_RUNTIME_EXCEPTION.invokeOptional(subClass2);\n    } catch (InvocationTargetException expected) {\n      assertTrue(expected.getTargetException() instanceof NumberFormatException);\n    }\n  }\n'],Invocation;True;UNTIME;Optional;invoke;THROWS;IOException;Exception;Sub;new,1.0040821507573128e-09;8.149072527885437e-10;6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.936171531677246, -5.608727931976318, -4.634581089019775, -5.800771713256836, -5.319279670715332, -0.02423076517879963]",0.9760604500770569
2,"['  @Test\n  public void invokeOptionalNonPublic() throws Exception {\n    SubClass2 subClass2 = new SubClass2();\n    assertFalse(NON_PUBLIC.isSupported(subClass2));\n    assertErrorOnInvokeOptional(NON_PUBLIC, subClass2);\n  }\n']",Optional;invoke;Supported;Class;Non;Exception;Error;PUBLIC;Class;Sub,2.3283064365386963e-09;1.4551915228366852e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.965043544769287, -5.6403303146362305, -4.601711273193359, -5.8345842361450195, -5.328333377838135, -0.024220990017056465]",0.976069986820221
2,"['  @Test public void onlyOneLiteralHeadersFrame() throws IOException {\n      @Override public void headers(boolean inFinished, int streamId,\n          int associatedStreamId, List<Header> headerBlock) {\n        assertTrue(inFinished);\n        assertEquals(expectedStreamId, streamId);\n        assertEquals(-1, associatedStreamId);\n        assertEquals(sentHeaders, headerBlock);\n      }\n']",expected;Equals;Stream;iteral;sent;Block;Frame;in;List;stream,7.566995918750763e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.960209369659424, -5.529181480407715, -4.611440658569336, -5.839651584625244, -5.441269874572754, -0.024016065523028374]",0.9762700200080872
2,"['  @Test public void headersWithPriority() throws IOException {\n      @Override public void priority(int streamId, int streamDependency, int weight,\n          boolean exclusive) {\n        assertEquals(0, streamDependency);\n        assertEquals(256, weight);\n        assertFalse(exclusive);\n      }\n']",boolean;exclusive;exclusive;stream;False;stream;weight;weight;Equals;stream,6.984919309616089e-10;5.384208634495735e-10;4.656612873077393e-10;1.7462298274040222e-10;8.731149137020111e-11;0.0;0.0;-1.1641532182693481e-10;-1.3096723705530167e-10;-4.0745362639427185e-10,5,5,"[-5.963531017303467, -5.509805202484131, -4.611906051635742, -5.849808216094971, -5.444227695465088, -0.024038875475525856]",0.9762477278709412
2,"['  @Test public void headersFrameThenContinuation() throws IOException {\n      @Override public void headers(boolean inFinished, int streamId,\n          int associatedStreamId, List<Header> headerBlock) {\n        assertFalse(inFinished);\n        assertEquals(expectedStreamId, streamId);\n        assertEquals(-1, associatedStreamId);\n        assertEquals(sentHeaders, headerBlock);\n      }\n']",Block;headers;associated;sent;Equals;IOException;Stream;stream;headers;stream,1.1932570487260818e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.962706565856934, -5.513801574707031, -4.6092610359191895, -5.849220275878906, -5.443669319152832, -0.024055633693933487]",0.9762313961982727
2,"['  @Test public void pushPromise() throws IOException {\n      public void pushPromise(int streamId, int promisedStreamId, List<Header> headerBlock) {\n        assertEquals(expectedStreamId, streamId);\n        assertEquals(expectedPromisedStreamId, promisedStreamId);\n        assertEquals(pushPromise, headerBlock);\n      }\n']",push;push;List;IOException;Equals;promised;header;Promise;Block;Block,1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0;-2.9103830456733704e-11,5,5,"[-5.964745044708252, -5.566242694854736, -4.610633850097656, -5.852492332458496, -5.416492462158203, -0.02393762208521366]",0.976346492767334
2,"['  @Test public void pushPromiseThenContinuation() throws IOException {\n      public void pushPromise(int streamId, int promisedStreamId, List<Header> headerBlock) {\n        assertEquals(expectedStreamId, streamId);\n        assertEquals(expectedPromisedStreamId, promisedStreamId);\n        assertEquals(pushPromise, headerBlock);\n      }\n']",promised;Equals;Promise;Equals;stream;Promise;Equals;Stream;Stream;expected,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;5.020410753786564e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0,5,5,"[-5.954423427581787, -5.550571918487549, -4.6199212074279785, -5.845396041870117, -5.409696102142334, -0.023984642699360847]",0.9763007164001465
2,"['  @Test public void readRstStreamFrame() throws IOException {\n      @Override public void rstStream(int streamId, ErrorCode errorCode) {\n        assertEquals(expectedStreamId, streamId);\n        assertEquals(ErrorCode.PROTOCOL_ERROR, errorCode);\n      }\n']",IOException;PROTOCOL;Code;stream;Code;Code;read;Stream;Equals;st,8.149072527885437e-10;6.402842700481415e-10;5.966285243630409e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.937229633331299, -5.537611961364746, -4.640712261199951, -5.839698314666748, -5.383232116699219, -0.024014785885810852]",0.9762712717056274
2,"['  @Test public void readSettingsFrame() throws IOException {\n      @Override public void settings(boolean clearPrevious, Settings settings) {\n        assertFalse(clearPrevious); // No clearPrevious in HTTP/2.\n        assertEquals(reducedTableSizeBytes, settings.getHeaderTableSize());\n        assertEquals(false, settings.getEnablePush(true));\n      }\n']",Equals;clear;Size;Table;clear;Header;clear;false;No;settings,7.8580342233181e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.974936008453369, -5.548161029815674, -4.630451202392578, -5.841767311096191, -5.432203769683838, -0.02374335005879402]",0.976536214351654
2,"['  @Test public void readSettingsFrameUnknownSettingId() throws IOException {\n      @Override public void settings(boolean clearPrevious, Settings settings) {\n        settingValue.set(settings.get(7));\n      }\n']",boolean;Frame;get;Setting;set;Value;settings;Previous;setting;settings,2.561137080192566e-09;2.153683453798294e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.473825588822365e-10;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-6.009401798248291, -5.52324104309082, -4.60095739364624, -5.888075828552246, -5.443350791931152, -0.02387057989835739]",0.9764120578765869
2,"['  @Test public void pingRoundTrip() throws IOException {\n      @Override public void ping(boolean ack, int payload1, int payload2) {\n        assertTrue(ack);\n        assertEquals(expectedPayload1, payload1);\n        assertEquals(expectedPayload2, payload2);\n      }\n']",Round;ping;ck;payload;payload;Payload;boolean;ack;Payload;Equals,3.725290298461914e-09;2.561137080192566e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;2.6193447411060333e-10;1.1641532182693481e-10;0.0;0.0;0.0,5,5,"[-5.9676079750061035, -5.58034086227417, -4.620709419250488, -5.8389387130737305, -5.396302700042725, -0.023906197398900986]",0.9763773083686829
2,"['  @Test public void maxLengthDataFrame() throws IOException {\n      @Override public void data(boolean inFinished, int streamId, BufferedSource source,\n          int length) throws IOException {\n        assertFalse(inFinished);\n        assertEquals(expectedStreamId, streamId);\n        assertEquals(Http2.INITIAL_MAX_FRAME_SIZE, length);\n        ByteString data = source.readByteString(length);\n        for (byte b : data.toByteArray()) {\n          assertEquals(2, b);\n        }\n      }\n']",MAX;FRAME;Buffered;source;data;INITIAL;Equals;False;Length;Stream,9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.935347557067871, -5.489125728607178, -4.647637844085693, -5.800013542175293, -5.431346893310547, -0.02405167743563652]",0.9762352705001831
2,"['  @Test public void windowUpdateRoundTrip() throws IOException {\n      @Override public void windowUpdate(int streamId, long windowSizeIncrement) {\n        assertEquals(expectedStreamId, streamId);\n        assertEquals(expectedWindowSizeIncrement, windowSizeIncrement);\n      }\n']",Round;window;window;expected;window;Stream;Window;Equals;stream;Update,5.587935447692871e-09;1.862645149230957e-09;9.89530235528946e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.967401504516602, -5.5540242195129395, -4.619654655456543, -5.8595380783081055, -5.410398006439209, -0.023894673213362694]",0.9763886332511902
2,"['  @Test public void goAwayWithoutDebugDataRoundTrip() throws IOException {\n      @Override public void goAway(\n          int lastGoodStreamId, ErrorCode errorCode, ByteString debugData) {\n        assertEquals(expectedStreamId, lastGoodStreamId);\n        assertEquals(expectedError, errorCode);\n        assertEquals(0, debugData.size());\n      }\n']",go;way;debug;expected;IOException;debug;size;error;way;Stream,3.3760443329811096e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.585629984736443e-10;6.984919309616089e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.965405464172363, -5.498218536376953, -4.608906269073486, -5.863492965698242, -5.458386421203613, -0.02401047945022583]",0.9762755036354065
2,"['  @Test public void goAwayWithDebugDataRoundTrip() throws IOException {\n      @Override public void goAway(\n          int lastGoodStreamId, ErrorCode errorCode, ByteString debugData) {\n        assertEquals(0, lastGoodStreamId);\n        assertEquals(expectedError, errorCode);\n        assertEquals(expectedData, debugData);\n      }\n']",go;Good;way;Code;way;Debug;go;debug;last;error,1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.970617294311523, -5.501389026641846, -4.606842994689941, -5.863689422607422, -5.4591965675354, -0.024000471457839012]",0.9762852787971497
2,"['  @Test public void streamIdHasReservedBit() throws IOException {\n      @Override public void headers(boolean inFinished, int streamId,\n          int associatedStreamId, List<Header> headerBlock) {\n        assertFalse(inFinished);\n        assertEquals(expectedStreamId, streamId);\n        assertEquals(-1, associatedStreamId);\n        assertEquals(headerEntries(""foo"", ""barrr"", ""baz"", ""qux""), headerBlock);\n      }\n']",Block;in;az;foo;stream;Equals;Finished;False;Has;Stream,8.731149137020111e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.964365482330322, -5.535560131072998, -4.624229907989502, -5.833026885986328, -5.44375467300415, -0.023858707398176193]",0.9764236807823181
2,['  @Test public void serverSendsSettingsToClient() throws Exception {\n      @Override public void onStream(Http2Stream stream) throws IOException {\n        throw new AssertionError();\n      }\n'],ends;Assertion;stream;on;Exception;Error;Stream;Stream;throw;Settings,2.2118911147117615e-09;1.3387762010097504e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-5.820766091346741e-10;-6.984919309616089e-10,5,5,"[-5.951264381408691, -5.439058780670166, -4.601351261138916, -5.87640380859375, -5.428317546844482, -0.024476826190948486]",0.9758203029632568
2,"['  @Test public void blockedStreamDoesntStarveNewStream() throws Exception {\n    @Override public boolean onRequest(int streamId, List<Header> requestHeaders) {\n      return false;\n    }\n']",Doesnt;Headers;Header;Stream;boolean;return;Starve;List;New;Request,2.3865140974521637e-09;8.149072527885437e-10;6.402842700481415e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-6.019771575927734, -5.501219749450684, -4.55634069442749, -5.928882598876953, -5.465346336364746, -0.02419515885412693]",0.9760951995849609
2,['  @Test public void interruptReadingResponseBody() throws Exception {\n      @Override public void run() {\n        try {\n          sleep(delayMillis);\n          connection.disconnect();\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      }\n'],sleep;new;connection;catch;delay;Exception;disconnect;Exception;run;Exception,6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-6.016412258148193, -5.421894550323486, -4.568758487701416, -5.899880886077881, -5.4892897605896, -0.024393649771809578]",0.9759014844894409
2,['  @Test public void interruptReadingResponseBody() throws Exception {\n      @Override public void run() {\n        try {\n          sleep(delayMillis);\n          toInterrupt.interrupt();\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      }\n'],Interrupt;Exception;run;Interrupted;Body;Reading;Exception;Exception;sleep;Runtime,1.280568540096283e-09;8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-1.7462298274040222e-10,5,5,"[-6.011963844299316, -5.4028730392456055, -4.566132545471191, -5.900104522705078, -5.4994378089904785, -0.024476245045661926]",0.975820779800415
2,"['  @Test public void invalidClientAuthFails() throws Throwable {\n  public OkHttpClient buildClient(HeldCertificate cert, HeldCertificate... chain) {\n    SslClient.Builder sslClientBuilder = new SslClient.Builder()\n        .addTrustedCertificate(serverRootCa.certificate);\n\n    if (cert != null) {\n      sslClientBuilder.certificateChain(cert, chain);\n    }\n\n    SslClient sslClient = sslClientBuilder.build();\n    return new OkHttpClient.Builder()\n        .sslSocketFactory(sslClient.socketFactory, sslClient.trustManager)\n        .build();\n  }\n']",Throwable;Trusted;Client;Auth;Certificate;Certificate;build;Ca;Client;Ok,1.280568540096283e-09;1.2514647096395493e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;6.111804395914078e-10;4.656612873077393e-10,5,5,"[-5.954469203948975, -5.54880428314209, -4.638556480407715, -5.811424732208252, -5.388066291809082, -0.024007918313145638]",0.9762780666351318
2,"['  @Test public void abortAfterDetach() throws Exception {\n  public void writeFile(File file, String content) throws Exception {\n    BufferedSink sink = Okio.buffer(fileSystem.sink(file));\n    sink.writeUtf8(content);\n    sink.close();\n  }\n']",Exception;ink;abort;content;After;file;Okio;ink;close;File,5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-6.005914211273193, -5.619159698486328, -4.580936431884766, -5.87286376953125, -5.391949653625488, -0.023990578949451447]",0.976294994354248
2,"['  @Test public void getInstalledWithWrongTypeInstalled() {\n      public CacheResponse get(URI uri, String requestMethod,\n          Map<String, List<String>> requestHeaders) {\n        return null;\n      }\n']",Installed;Headers;Installed;URI;Wrong;Type;return;List;request;Map,3.14321368932724e-09;2.3865140974521637e-09;1.979060471057892e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.9965500831604, -5.483560562133789, -4.608223915100098, -5.869461536407471, -5.459171295166016, -0.023978007957339287]",0.9763071537017822
2,"['  @Test public void get_httpGet() throws Exception {\n      @Override public CacheResponse get(\n          URI uri, String method, Map<String, List<String>> headers) throws IOException {\n        try {\n          assertEquals(toUri(serverUrl), uri);\n          assertEquals(""GET"", method);\n          assertTrue(""Arbitrary standard header not present"", headers.containsKey(""User-Agent""));\n          assertEquals(Collections.singletonList(""value1""), headers.get(""key1""));\n          return null;\n        } catch (Throwable t) {\n          throw new IOException(""unexpected cache failure"", t);\n        }\n      }\n']",catch;singleton;Exception;http;get;Collections;IOException;URI;Equals;Key,1.6298145055770874e-09;9.313225746154785e-10;8.731149137020111e-10;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.710738383233547e-10;3.4924596548080444e-10,5,5,"[-5.928311824798584, -5.494290351867676, -4.663773536682129, -5.774091720581055, -5.412554740905762, -0.02405819483101368]",0.9762287735939026
2,"['  @Test public void get_httpsGet() throws Exception {\n      @Override public CacheResponse get(URI uri, String method, Map<String, List<String>> headers)\n          throws IOException {\n        try {\n          assertEquals(""https"", uri.getScheme());\n          assertEquals(toUri(serverUrl), uri);\n          assertEquals(""GET"", method);\n          assertTrue(""Arbitrary standard header not present"", headers.containsKey(""User-Agent""));\n          assertEquals(Collections.singletonList(""value1""), headers.get(""key1""));\n          return null;\n        } catch (Throwable t) {\n          throw new IOException(""unexpected cache failure"", t);\n        }\n      }\n']",https;get;https;ri;unexpected;singleton;Equals;key;Cache;Get,1.862645149230957e-09;1.1059455573558807e-09;5.820766091346741e-10;5.384208634495735e-10;4.5838532969355583e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.920738697052002, -5.496523857116699, -4.662485122680664, -5.770623683929443, -5.40787410736084, -0.024114519357681274]",0.9761738181114197
2,"['  @Test public void put_httpGet() throws Exception {\n      @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {\n        try {\n          assertTrue(connection instanceof HttpURLConnection);\n          assertFalse(connection instanceof HttpsURLConnection);\n\n          assertEquals(response.length, connection.getContentLength());\n\n          HttpURLConnection httpUrlConnection = (HttpURLConnection) connection;\n          assertEquals(""GET"", httpUrlConnection.getRequestMethod());\n          assertTrue(httpUrlConnection.getDoInput());\n          assertFalse(httpUrlConnection.getDoOutput());\n\n          assertEquals(""Fantastic"", httpUrlConnection.getResponseMessage());\n          assertEquals(toUri(serverUrl), uri);\n          assertEquals(serverUrl, connection.getURL());\n          assertEquals(""value"", connection.getRequestProperty(""key""));\n\n          // Check retrieval by string key.\n          assertEquals(statusLine, httpUrlConnection.getHeaderField(null));\n          assertEquals(""c"", httpUrlConnection.getHeaderField(""A""));\n          // The RI and OkHttp supports case-insensitive matching for this method.\n          assertEquals(""c"", httpUrlConnection.getHeaderField(""a""));\n          return null;\n        } catch (Throwable t) {\n          throw new IOException(""unexpected cache failure"", t);\n        }\n      }\n']",insensitive;Output;Exception;Get;Do;URLConnection;Line;http;Request;Do,1.3096723705530167e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.867646217346191, -5.331948757171631, -4.656137466430664, -5.76308536529541, -5.469141483306885, -0.024829117581248283]",0.9754765033721924
2,"['  @Test public void put_httpPost() throws Exception {\n      @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {\n        try {\n          assertTrue(connection instanceof HttpURLConnection);\n          assertFalse(connection instanceof HttpsURLConnection);\n\n          assertEquals(0, connection.getContentLength());\n\n          HttpURLConnection httpUrlConnection = (HttpURLConnection) connection;\n          assertEquals(""POST"", httpUrlConnection.getRequestMethod());\n          assertTrue(httpUrlConnection.getDoInput());\n          assertTrue(httpUrlConnection.getDoOutput());\n\n          assertEquals(""Fantastic"", httpUrlConnection.getResponseMessage());\n          assertEquals(toUri(serverUrl), uri);\n          assertEquals(serverUrl, connection.getURL());\n          assertEquals(""value"", connection.getRequestProperty(""key""));\n\n          // Check retrieval by string key.\n          assertEquals(statusLine, httpUrlConnection.getHeaderField(null));\n          assertEquals(""c"", httpUrlConnection.getHeaderField(""A""));\n          // The RI and OkHttp supports case-insensitive matching for this method.\n          assertEquals(""c"", httpUrlConnection.getHeaderField(""a""));\n          return null;\n        } catch (Throwable t) {\n          throw new IOException(""unexpected cache failure"", t);\n        }\n      }\n']",Input;http;and;Http;catch;Header;Connection;Method;supports;Ok,8.149072527885437e-10;4.94765117764473e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.86598014831543, -5.325895309448242, -4.65576171875, -5.763991832733154, -5.470740795135498, -0.024857956916093826]",0.9754484295845032
2,"['  @Test public void put_httpsGet() throws Exception {\n      @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {\n        try {\n          assertTrue(connection instanceof HttpsURLConnection);\n          assertEquals(toUri(serverUrl), uri);\n          assertEquals(serverUrl, connection.getURL());\n\n          HttpsURLConnection cacheHttpsUrlConnection = (HttpsURLConnection) connection;\n          HttpsURLConnection realHttpsUrlConnection =\n              (HttpsURLConnection) CacheAdapterTest.this.connection;\n          assertEquals(realHttpsUrlConnection.getCipherSuite(),\n              cacheHttpsUrlConnection.getCipherSuite());\n          assertEquals(realHttpsUrlConnection.getPeerPrincipal(),\n              cacheHttpsUrlConnection.getPeerPrincipal());\n          assertArrayEquals(realHttpsUrlConnection.getLocalCertificates(),\n              cacheHttpsUrlConnection.getLocalCertificates());\n          assertArrayEquals(realHttpsUrlConnection.getServerCertificates(),\n              cacheHttpsUrlConnection.getServerCertificates());\n          assertEquals(realHttpsUrlConnection.getLocalPrincipal(),\n              cacheHttpsUrlConnection.getLocalPrincipal());\n          return null;\n        } catch (Throwable t) {\n          throw new IOException(""unexpected cache failure"", t);\n        }\n      }\n']",Get;Peer;put;Request;ipher;Server;Cache;Local;Peer;Connection,8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.864252090454102, -5.307840347290039, -4.6397705078125, -5.812399864196777, -5.4718918800354, -0.02495400235056877]",0.975354790687561
2,"['  @Test public void getHeadersRetainsCached200LevelWarnings() throws Exception {\n  public void assertCookies(URL url, String... expectedCookies) throws Exception {\n    List<String> actualCookies = new ArrayList<>();\n    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.toURI())) {\n      actualCookies.add(cookie.toString());\n    }\n    assertEquals(Arrays.asList(expectedCookies), actualCookies);\n  }\n']",Retains;get;ookie;Exception;Cookies;URI;Store;Arrays;List;Level,2.3283064365386963e-09;1.6298145055770874e-09;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.802132025361061e-10;4.3655745685100555e-10;3.4924596548080444e-10,5,5,"[-5.971550941467285, -5.5828118324279785, -4.641021251678467, -5.780416965484619, -5.408031940460205, -0.023809120059013367]",0.9764720797538757
2,['  @Test public void emptyResponseHeaderNameFromCacheIsLenient() throws Exception {\n  public Buffer gzip(String data) throws IOException {\n    Buffer result = new Buffer();\n    BufferedSink sink = Okio.buffer(new GzipSink(result));\n    sink.writeUtf8(data);\n    sink.close();\n    return result;\n  }\n'],empty;Cache;From;return;Buffered;sink;ink;Name;data;close,8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-6.022408962249756, -5.623490333557129, -4.582274913787842, -5.872739791870117, -5.407583236694336, -0.02384706772863865]",0.9764348864555359
2,"['  @Test public void responseCacheCallbackApis() throws Exception {\n      @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {\n        HttpURLConnection httpURLConnection = (HttpURLConnection) connection;\n        assertEquals(server.url(""/"").url(), uri.toURL());\n        assertEquals(200, httpURLConnection.getResponseCode());\n        InputStream is = httpURLConnection.getInputStream();\n        try {\n          is.read();\n          fail();\n        } catch (UnsupportedOperationException expected) {\n        }\n        assertEquals(""5"", connection.getHeaderField(""Content-Length""));\n        assertEquals(""text/plain"", connection.getHeaderField(""Content-Type""));\n        assertEquals(""ijk"", connection.getHeaderField(""fgh""));\n        cacheCount.incrementAndGet();\n        return null;\n      }\n']",expected;gh;ijk;Equals;fail;to;URI;Stream;connection;Field,5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.710738383233547e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.933165073394775, -5.456318378448486, -4.657825946807861, -5.795454502105713, -5.445962905883789, -0.024048302322626114]",0.9762385487556458
2,"['  @Test public void responseCacheReturnsNullOutputStream() throws Exception {\n      @Override public CacheRequest put(URI uri, URLConnection connection) {\n        return new CacheRequest() {\n          @Override public void abort() {\n            aborted.set(true);\n          }\n']",Cache;new;put;return;response;Cache;URLConnection;ur;Stream;Output,8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.964597225189209, -5.380099773406982, -4.598672389984131, -5.85836935043335, -5.471054553985596, -0.024603499099612236]",0.9756966829299927
2,"['  @Test public void responseCacheReturnsNullStatusLine() throws Exception {\n      public CacheResponse get(URI uri, String requestMethod,\n          Map<String, List<String>> requestHeaders)\n']",Cache;get;Response;List;Null;request;ur;Method;response;Map,1.076841726899147e-09;1.0477378964424133e-09;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;0.0;-2.9103830456733704e-11,5,5,"[-5.972923278808594, -5.5003814697265625, -4.630195140838623, -5.849245071411133, -5.415952682495117, -0.023997794836759567]",0.9762879610061646
2,"['  @Test public void responseCacheRequestHeaders() throws IOException, URISyntaxException {\n      @Override public CacheResponse get(URI uri, String requestMethod,\n          Map<String, List<String>> requestHeaders) throws IOException {\n        requestHeadersRef.set(requestHeaders);\n        return null;\n      }\n']",IOException;Headers;IOException;Cache;request;Headers;List;request;Response;request,1.862645149230957e-09;1.1641532182693481e-09;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.994658470153809, -5.4925336837768555, -4.600275039672852, -5.873247146606445, -5.473748207092285, -0.023952286690473557]",0.9763323068618774
2,"['  @Test public void createOkResponseForCacheGet() throws Exception {\n      @Override public InputStream getBody() throws IOException {\n        return new ByteArrayInputStream(""HelloWorld"".getBytes(StandardCharsets.UTF_8));\n      }\n']",Exception;World;Body;Get;get;Input;Standard;Byte;get;Hello,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.9777913093566895, -5.521190166473389, -4.627933502197266, -5.856420516967773, -5.4090256690979, -0.023931918665766716]",0.9763520359992981
2,['  @Test public void createOkResponseForCacheGet_withMissingStatusLine() throws Exception {\n      @Override public InputStream getBody() throws IOException {\n        return null; // Should never be called\n      }\n'],Exception;Ok;called;Stream;Should;Line;get;null;Response;never,1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.99871301651001, -5.528536319732666, -4.614406108856201, -5.880369186401367, -5.42206335067749, -0.023855913430452347]",0.976426362991333
2,"['  @Test public void createOkResponseForCacheGet_secure() throws Exception {\n      @Override public InputStream getBody() throws IOException {\n        return new ByteArrayInputStream(""HelloWorld"".getBytes(StandardCharsets.UTF_8));\n      }\n']",Exception;UTF;Cache;Ok;For;Input;Body;secure;create;Charsets,1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.96505880355835, -5.518867015838623, -4.63606071472168, -5.844400882720947, -5.398466110229492, -0.023977892473340034]",0.9763072729110718
2,"['  @Test public void extractStatusLine() throws Exception {\n      @Override public MediaType contentType() {\n        return MediaType.parse(""text/plain; charset=utf-8"");\n      }\n']",Status;Type;extract;Media;plain;return;Media;content;Type;Type,3.725290298461914e-09;1.280568540096283e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.313225746154785e-10;5.529727786779404e-10;4.656612873077393e-10;0.0;0.0;-3.4924596548080444e-10,5,5,"[-6.014282703399658, -5.583509922027588, -4.605571269989014, -5.887484073638916, -5.413114070892334, -0.02370947226881981]",0.976569414138794
2,['  @Test public void streamingMessage() throws IOException {\n      @Override public MediaType contentType() {\n        return TEXT;\n      }\n'],content;streaming;TEXT;return;Media;Type;Type;Message;IOException,8.149072527885437e-10;5.820766091346741e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;-4.656612873077393e-10;-6.984919309616089e-10;-1.0477378964424133e-09;-1.280568540096283e-09,5,5,"[-6.024947643280029, -5.5201921463012695, -4.561446189880371, -5.9029107093811035, -5.457840442657471, -0.024153269827365875]",0.9761360883712769
2,"['  @Test public void streamingMessageCanInterleavePing() throws IOException, InterruptedException {\n      @Override public MediaType contentType() {\n        return TEXT;\n      }\n']",Type;Ping;return;Type;Interleave;Message;Exception;IOException;streaming;content,1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-5.820766091346741e-10;-6.984919309616089e-10;-8.149072527885437e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-6.010951995849609, -5.4994587898254395, -4.57006311416626, -5.91119384765625, -5.461516380310059, -0.024143261834979057]",0.97614586353302
2,"['    @Test\n    public void testJSFFeatureMap() throws IOException, Exception {\n\n        WebClient client = new WebClient();\n        HtmlPage page = client.getPage(url + ""index.jsf"");\n\n        // this part of the page is rendered\n        assertTrue(page.asText().contains(""Text for ENABLED feature!""));\n\n        // this part is disabled\n        assertFalse(page.asText().contains(""Text for DISABLED feature!""));\n\n        // one div can be found the other not\n        assertNotNull(page.getElementById(""enabledDiv""));\n        assertNull(page.getElementById(""disabledDiv""));\n\n    }\n']",disabled;Div;JSFF;rendered;IOException;tml;Div;other;disabled;the,1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1059455573558807e-09;9.89530235528946e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.889952182769775, -5.519379615783691, -4.686324119567871, -5.736756801605225, -5.362593650817871, -0.02420039474964142]",0.9760900735855103
2,"['    @Test\n    public void shouldBeInactiveForEmptyParams() throws Exception {\n        String[] emptyArguments = new String[]{"""", """", """"};\n        assertThat(requestFrom(NORMAL)).isInactiveWithParams(emptyArguments);\n        cleanup();\n        assertThat(requestFrom(TABLET)).isInactiveWithParams(emptyArguments);\n        cleanup();\n        assertThat(requestFrom(MOBILE)).isInactiveWithParams(emptyArguments);\n        cleanup();\n    }\n']",MOBILE;TABLE;From;Params;Params;should;request;Inactive;From;request,2.6775524020195007e-09;1.862645149230957e-09;6.984919309616089e-10;6.693881005048752e-10;6.548361852765083e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.913194179534912, -5.607479572296143, -4.651413917541504, -5.7667765617370605, -5.320903301239014, -0.02423134632408619]",0.9760598540306091
2,"['    @Test\n    public void shouldBeActiveForDesktop() throws Exception {\n        String[] desktopOn = new String[]{""YES"", ""NO"", ""NO""};\n        assertThat(requestFrom(NORMAL)).isActiveWithParams(desktopOn);\n        cleanup();\n        assertThat(requestFrom(TABLET)).isInactiveWithParams(desktopOn);\n        cleanup();\n        assertThat(requestFrom(MOBILE)).isInactiveWithParams(desktopOn);\n        cleanup();\n    }\n']",cleanup;NORMAL;Active;Exception;new;From;For;On;Active;Params,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.912408828735352, -5.6250433921813965, -4.6541829109191895, -5.767606258392334, -5.305246829986572, -0.024217266589403152]",0.9760735034942627
2,"['    @Test\n    public void shouldBeActiveForTablet() throws Exception {\n        String[] tabletOn = new String[]{""NO"", ""YES"", ""NO""};\n        assertThat(requestFrom(NORMAL)).isInactiveWithParams(tabletOn);\n        cleanup();\n        assertThat(requestFrom(TABLET)).isActiveWithParams(tabletOn);\n        cleanup();\n        assertThat(requestFrom(MOBILE)).isInactiveWithParams(tabletOn);\n        cleanup();\n    }\n']",For;That;On;tablet;YES;request;table;Params;Exception;table,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.710738383233547e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.914248466491699, -5.614528179168701, -4.648599147796631, -5.771899223327637, -5.319638252258301, -0.02421947754919529]",0.9760714769363403
2,"['    @Test\n    public void shouldBeActiveForMobile() throws Exception {\n        String[] mobileOn = new String[]{""NO"", ""NO"", ""YES""};\n        assertThat(requestFrom(NORMAL)).isInactiveWithParams(mobileOn);\n        cleanup();\n        assertThat(requestFrom(TABLET)).isInactiveWithParams(mobileOn);\n        cleanup();\n        assertThat(requestFrom(MOBILE)).isActiveWithParams(mobileOn);\n        cleanup();\n    }\n']",Active;That;From;cleanup;From;That;NO;mobile;That;Inactive,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.922445774078369, -5.626094341278076, -4.645750999450684, -5.780332565307617, -5.323443412780762, -0.024136047810316086]",0.976152777671814
2,"['    @Test\n    public void shouldBeAccurateForLowerCaseParams() throws Exception {\n        String[] desktopOn = new String[]{""yes"", ""no"", ""yes""};\n        assertThat(requestFrom(NORMAL)).isActiveWithParams(desktopOn);\n        cleanup();\n        String[] tabletOn = new String[]{""no"", ""yes"", ""NO""};\n        assertThat(requestFrom(TABLET)).isActiveWithParams(tabletOn);\n        cleanup();\n        String[] mobileOn = new String[]{""no"", ""no"", ""yes""};\n        assertThat(requestFrom(MOBILE)).isActiveWithParams(mobileOn);\n        cleanup();\n    }\n']",Accurate;MOBILE;TABLE;Be;Lower;Exception;desktop;cleanup;From;desktop,1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;7.566995918750763e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.9070940017700195, -5.608155250549316, -4.677003860473633, -5.727675437927246, -5.31467866897583, -0.024157574400305748]",0.976131796836853
2,"['    @Test\n    public void testShiroAsAnonymousUser() throws Exception {\n\n        WebClient client = new WebClient();\n        TextPage page = client.getPage(url + ""features"");\n        assertTrue(page.getContent().contains(""DISABLED = false""));\n        assertTrue(page.getContent().contains(""ENABLED_FOR_ALL = true""));\n        assertTrue(page.getContent().contains(""ENABLED_FOR_CK = false""));\n\n        TextPage userPage = client.getPage(url + ""user"");\n        assertTrue(userPage.getContent().contains(""USER = null""));\n        assertTrue(userPage.getContent().contains(""ADMIN = null""));\n\n    }\n']",As;USER;features;DISABLED;client;page;True;Web;Text;Page,1.6298145055770874e-09;1.3969838619232178e-09;1.1932570487260818e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;3.4924596548080444e-10,5,5,"[-5.89638090133667, -5.509380340576172, -4.6719136238098145, -5.75670862197876, -5.3823652267456055, -0.02420121058821678]",0.9760891795158386
2,"['    @Test\n    public void testShiroLoginAsFeatureAdmin() throws Exception {\n\n        WebClient client = new WebClient();\n\n        TextPage beforeLogin = client.getPage(url + ""user"");\n        assertTrue(beforeLogin.getContent().contains(""USER = null""));\n        assertTrue(beforeLogin.getContent().contains(""ADMIN = null""));\n\n        TextPage loginPage = client.getPage(url + ""login?user=ck"");\n        assertTrue(loginPage.getContent().contains(""SUCCESS""));\n\n        TextPage afterLogin = client.getPage(url + ""user"");\n        assertTrue(afterLogin.getContent().contains(""USER = ck""));\n        assertTrue(afterLogin.getContent().contains(""ADMIN = true""));\n\n        TextPage logoutPage = client.getPage(url + ""logout"");\n        assertTrue(logoutPage.getContent().contains(""SUCCESS""));\n\n        TextPage afterLogout = client.getPage(url + ""user"");\n        assertTrue(afterLogout.getContent().contains(""USER = null""));\n        assertTrue(afterLogout.getContent().contains(""ADMIN = null""));\n\n    }\n']",Feature;Admin;Shiro;SUCCESS;login;Exception;Client;Text;new;ADMIN,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;5.602487362921238e-10;5.238689482212067e-10;4.3655745685100555e-10;3.92901711165905e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.88080358505249, -5.47265625, -4.675931930541992, -5.741052150726318, -5.407016277313232, -0.024298714473843575]",0.9759941101074219
2,"['    @Test\n    public void testShiroLoginAsNormalUser() throws Exception {\n\n        WebClient client = new WebClient();\n\n        TextPage beforeLogin = client.getPage(url + ""user"");\n        assertTrue(beforeLogin.getContent().contains(""USER = null""));\n        assertTrue(beforeLogin.getContent().contains(""ADMIN = null""));\n\n        TextPage loginPage = client.getPage(url + ""login?user=somebody"");\n        assertTrue(loginPage.getContent().contains(""SUCCESS""));\n\n        TextPage afterLogin = client.getPage(url + ""user"");\n        assertTrue(afterLogin.getContent().contains(""USER = somebody""));\n        assertTrue(afterLogin.getContent().contains(""ADMIN = false""));\n\n        TextPage logoutPage = client.getPage(url + ""logout"");\n        assertTrue(logoutPage.getContent().contains(""SUCCESS""));\n\n        TextPage afterLogout = client.getPage(url + ""user"");\n        assertTrue(afterLogout.getContent().contains(""USER = null""));\n        assertTrue(afterLogout.getContent().contains(""ADMIN = null""));\n\n    }\n']",Exception;ADMIN;user;USER;Page;ADMIN;login;contains;Text;false,6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.875924110412598, -5.462585926055908, -4.6737213134765625, -5.74092960357666, -5.411558151245117, -0.02435700222849846]",0.9759373664855957
2,"['    @Test\n    public void testShiroWithCorrectUser() throws Exception {\n\n        WebClient client = new WebClient();\n\n        TextPage beforeLogin = client.getPage(url + ""features"");\n        assertTrue(beforeLogin.getContent().contains(""DISABLED = false""));\n        assertTrue(beforeLogin.getContent().contains(""ENABLED_FOR_ALL = true""));\n        assertTrue(beforeLogin.getContent().contains(""ENABLED_FOR_CK = false""));\n\n        TextPage loginPage = client.getPage(url + ""login?user=ck"");\n        assertTrue(loginPage.getContent().contains(""SUCCESS""));\n\n        TextPage afterLogin = client.getPage(url + ""features"");\n        assertTrue(afterLogin.getContent().contains(""DISABLED = false""));\n        assertTrue(afterLogin.getContent().contains(""ENABLED_FOR_ALL = true""));\n        assertTrue(afterLogin.getContent().contains(""ENABLED_FOR_CK = true""));\n\n        TextPage logoutPage = client.getPage(url + ""logout"");\n        assertTrue(logoutPage.getContent().contains(""SUCCESS""));\n\n        TextPage afterLogout = client.getPage(url + ""features"");\n        assertTrue(afterLogout.getContent().contains(""DISABLED = false""));\n        assertTrue(afterLogout.getContent().contains(""ENABLED_FOR_ALL = true""));\n        assertTrue(afterLogout.getContent().contains(""ENABLED_FOR_CK = false""));\n\n    }\n']",features;Page;Login;Client;ck;after;ALL;User;FOR;Page,6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10;4.220055416226387e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.871497631072998, -5.455507278442383, -4.669325351715088, -5.738075256347656, -5.410094738006592, -0.02445879578590393]",0.9758378863334656
2,"['    @Test\n    public void testShiroWithSomeOtherUser() throws Exception {\n\n        WebClient client = new WebClient();\n\n        TextPage beforeLogin = client.getPage(url + ""features"");\n        assertTrue(beforeLogin.getContent().contains(""DISABLED = false""));\n        assertTrue(beforeLogin.getContent().contains(""ENABLED_FOR_ALL = true""));\n        assertTrue(beforeLogin.getContent().contains(""ENABLED_FOR_CK = false""));\n\n        TextPage loginPage = client.getPage(url + ""login?user=somebody"");\n        assertTrue(loginPage.getContent().contains(""SUCCESS""));\n\n        TextPage afterLogin = client.getPage(url + ""features"");\n        assertTrue(afterLogin.getContent().contains(""DISABLED = false""));\n        assertTrue(afterLogin.getContent().contains(""ENABLED_FOR_ALL = true""));\n        assertTrue(afterLogin.getContent().contains(""ENABLED_FOR_CK = false""));\n\n        TextPage logoutPage = client.getPage(url + ""logout"");\n        assertTrue(logoutPage.getContent().contains(""SUCCESS""));\n\n        TextPage afterLogout = client.getPage(url + ""features"");\n        assertTrue(afterLogout.getContent().contains(""DISABLED = false""));\n        assertTrue(afterLogout.getContent().contains(""ENABLED_FOR_ALL = true""));\n        assertTrue(afterLogout.getContent().contains(""ENABLED_FOR_CK = false""));\n\n    }\n']",Other;features;Web;Client;Shiro;user;features;DISABLED;DISABLED;Some,1.862645149230957e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;5.456968210637569e-10;5.384208634495735e-10;4.656612873077393e-10,5,5,"[-5.871472358703613, -5.4569091796875, -4.673130989074707, -5.742555618286133, -5.409977436065674, -0.02440202608704567]",0.9758933186531067
2,['    @Test\n    public void testFeaturesActiveByDefault() {\n        assertTrue(MyFeatures.FEATURE_ONE.isActive());\n    }\n'],True;Features;Default;My;Active;FEATURE;Features;ONE;By;Active,9.89530235528946e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.280568540096283e-09;-1.862645149230957e-09;-2.3283064365386963e-09,5,5,"[-6.023768424987793, -5.632937431335449, -4.553913593292236, -5.910011291503906, -5.388876438140869, -0.024091709405183792]",0.9761961698532104
2,"['    @Test(expected = UnsupportedOperationException.class)\n    public void testFeatureManagerImmutable() {\n        FeatureContext.getFeatureManager().setFeatureState(new FeatureState(MyFeatures.FEATURE_ONE, false));\n    }\n']",FEATURE;Context;Unsupported;ONE;new;Exception;false;State;Features;Manager,1.6298145055770874e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;0.0;0.0;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.996214866638184, -5.578838348388672, -4.60801362991333, -5.862739086151123, -5.4096832275390625, -0.02383507788181305]",0.9764467477798462
2,['    @Test\n    public void featureShouldBeInactiveByDefault() {\n        assertFalse(manager.isActive(MyFeatures.ONE));\n    }\n'],Inactive;Default;By;My;manager;Features;Should;False;Be;feature,3.259629011154175e-09;3.026798367500305e-09;2.3283064365386963e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-09,5,5,"[-6.034444808959961, -5.619100093841553, -4.554403305053711, -5.909110069274902, -5.40177583694458, -0.024053655564785004]",0.9762333035469055
2,['    @Test\n    public void shouldToggleIndividualFeature() {\n\n        // enable\n        manager.enable(MyFeatures.ONE);\n        assertTrue(manager.isActive(MyFeatures.ONE));\n\n        // disable\n        manager.disable(MyFeatures.ONE);\n        assertFalse(manager.isActive(MyFeatures.ONE));\n\n    }\n'],enable;disable;disable;Individual;enable;Active;Features;My;manager;Active,2.6775524020195007e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;8.149072527885437e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.955325126647949, -5.593177318572998, -4.646174430847168, -5.799844741821289, -5.37369441986084, -0.023860802873969078]",0.976421594619751
2,['    @Test\n    public void shouldToggleAllFeatures() {\n\n        // enable\n        manager.enableAll();\n        assertTrue(manager.isActive(MyFeatures.ONE));\n        assertTrue(manager.isActive(MyFeatures.TWO));\n\n        // disable\n        manager.disableAll();\n        assertFalse(manager.isActive(MyFeatures.ONE));\n        assertFalse(manager.isActive(MyFeatures.TWO));\n\n    }\n'],TW;disable;enable;should;manager;Features;My;Active;False;True,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.9387993812561035, -5.608824729919434, -4.643374919891357, -5.777222156524658, -5.3461174964904785, -0.024077164009213448]",0.976210355758667
2,"['    @Test\n    public void shouldSupportTogglingUntypedFeature() {\n\n        // enable\n        manager.enable(new NamedFeature(""ONE""));\n        assertTrue(manager.isActive(MyFeatures.ONE));\n\n        // disable\n        manager.disable(new NamedFeature(""ONE""));\n        assertFalse(manager.isActive(MyFeatures.ONE));\n\n    }\n']",disable;enable;Untyped;Feature;Support;False;new;Features;Active;True,2.7939677238464355e-09;2.0954757928848267e-09;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.940607070922852, -5.581232070922852, -4.648244857788086, -5.792841911315918, -5.369857311248779, -0.02396578900516033]",0.9763191342353821
2,"['    @Test\n    public void shouldSupportReadingWithNamedFeature() {\n\n        // enable\n        manager.enable(MyFeatures.ONE);\n        assertTrue(manager.isActive(new NamedFeature(""ONE"")));\n\n        // disable\n        manager.disable(MyFeatures.ONE);\n        assertFalse(manager.isActive(new NamedFeature(""ONE"")));\n\n    }\n']",should;Support;ONE;Feature;enable;enable;Feature;new;My;manager,1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10,5,5,"[-5.942559242248535, -5.606841087341309, -4.65977144241333, -5.776862144470215, -5.347926616668701, -0.023906545713543892]",0.9763769507408142
2,"['    @Test\n    public void contextRefreshed() {\n        ContextRefreshedEvent contextRefreshedEvent = mock(ContextRefreshedEvent.class);\n        when(contextRefreshedEvent.getApplicationContext()).thenReturn(applicationContext);\n        // Invoke context refreshed event\n        applicationListener.onApplicationEvent(contextRefreshedEvent);\n        // Assert application context bound\n        assertSame(applicationContext, ContextClassLoaderApplicationContextHolder.get());\n    }\n']",Class;refreshed;bound;Invoke;application;application;get;Context;Assert;context,1.1059455573558807e-09;1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-6.002936363220215, -5.55473518371582, -4.6043195724487305, -5.873231887817383, -5.4528093338012695, -0.02372635342180729]",0.9765529036521912
2,"['    @Test\n    public void contextRefreshedWhileContextAlreadyBound() {\n        // Bind application context before context refreshed event invoked\n        ContextClassLoaderApplicationContextHolder.bind(mock(ApplicationContext.class));\n        applicationContext = mock(ApplicationContext.class);\n        ContextRefreshedEvent contextRefreshedEvent = mock(ContextRefreshedEvent.class);\n        when(contextRefreshedEvent.getApplicationContext()).thenReturn(applicationContext);\n        // Invoke context refreshed application event\n        applicationListener.onApplicationEvent(contextRefreshedEvent);\n        // Assert application context bound\n        assertSame(applicationContext, ContextClassLoaderApplicationContextHolder.get());\n    }\n']",invoked;before;Class;ock;Invoke;Context;Application;context;application;event,8.731149137020111e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;3.92901711165905e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.973532199859619, -5.517113208770752, -4.63548469543457, -5.8342084884643555, -5.4310383796691895, -0.023850442841649055]",0.9764316082000732
2,['    @Test\n    public void contextClosed() {\n        // Bind application context before context closed event invoked\n        ContextClassLoaderApplicationContextHolder.bind(applicationContext);\n        ContextClosedEvent contextClosedEvent = mock(ContextClosedEvent.class);\n        // Invoke context closed event\n        applicationListener.onApplicationEvent(contextClosedEvent);\n        // Assert application context released\n        assertNull(ContextClassLoaderApplicationContextHolder.get());\n    }\n'],invoked;released;Closed;Loader;context;mock;Event;Context;application;Closed,1.0477378964424133e-09;9.604264050722122e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.994424343109131, -5.5331130027771, -4.6104326248168945, -5.87559700012207, -5.446828365325928, -0.023791659623384476]",0.9764891266822815
2,"['    @Test\n    public void testGetId() {\n        assertEquals(SpringEnvironmentPropertyActivationStrategy.ID, strategy.getId());\n    }\n']",Get;get;Spring;Property;Environment;Strategy;ID;Equals;Activation;strategy,1.3969838619232178e-09;8.149072527885437e-10;4.656612873077393e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-2.561137080192566e-09;-3.725290298461914e-09,5,5,"[-6.0324296951293945, -5.68179988861084, -4.558588027954102, -5.901902675628662, -5.3697509765625, -0.023958222940564156]",0.976326584815979
2,['    @Test\n    public void testGetName() {\n        assertTrue(Strings.isNotBlank(strategy.getName()));\n    }\n'],Blank;Name;Get;strategy;get;True;Not;Name;Strings,5.296897143125534e-09;1.862645149230957e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;1.1641532182693481e-10;-4.3655745685100555e-10;-1.6880221664905548e-09,5,5,"[-6.038854598999023, -5.681500434875488, -4.5620574951171875, -5.886801242828369, -5.378316402435303, -0.02390829101204872]",0.9763752222061157
2,"['    @Test(expected = IllegalStateException.class)\n    public void testIsActiveThrowsWhenNoApplicationContext() {\n        FeatureState featureState = new FeatureState(TestFeatures.FEATURE_ONE, true);\n\n        strategy.isActive(featureState, null);\n    }\n']",expected;Active;State;No;State;Exception;Throws;Feature;Feature;ONE,2.3283064365386963e-09;1.979060471057892e-09;1.2223608791828156e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.993051052093506, -5.50442361831665, -4.591531753540039, -5.892828941345215, -5.462738037109375, -0.023988598957657814]",0.9762968420982361
2,"['    @Test\n    public void testGetParameters() {\n        Parameter[] parameters = strategy.getParameters();\n\n        assertEquals(1, parameters.length);\n\n        Parameter parameter = parameters[0];\n\n        assertNotNull(parameter);\n        assertEquals(SpringEnvironmentPropertyActivationStrategy.PARAM_NAME, parameter.getName());\n        assertTrue(parameter.isOptional());\n        assertTrue(Strings.isNotBlank(parameter.getLabel()));\n        assertTrue(Strings.isNotBlank(parameter.getDescription()));\n    }\n']",parameters;Activation;Parameters;PARAM;Strings;strategy;Strategy;parameter;get;Null,8.149072527885437e-10;7.566995918750763e-10;4.656612873077393e-10;4.3655745685100555e-10;3.2741809263825417e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.3283064365386963e-10,5,5,"[-5.922717571258545, -5.57181978225708, -4.647559642791748, -5.756396770477295, -5.375925064086914, -0.02414465881884098]",0.9761444926261902
2,"['    @Test\n    public void testGetId() {\n        assertEquals(SpringProfileActivationStrategy.ID, strategy.getId());\n    }\n']",Profile;strategy;Spring;get;Get;Equals;ID;Activation;Strategy,2.3283064365386963e-09;1.3969838619232178e-09;6.984919309616089e-10;2.3283064365386963e-10;1.7462298274040222e-10;-5.820766091346741e-10;-8.149072527885437e-10;-1.0477378964424133e-09;-2.444721758365631e-09,5,5,"[-6.047075271606445, -5.6816725730896, -4.539384365081787, -5.916885852813721, -5.383796215057373, -0.024022815749049187]",0.9762634634971619
2,['    @Test\n    public void testGetName() {\n        assertTrue(Strings.isNotBlank(strategy.getName()));\n    }\n'],Blank;Name;Get;strategy;get;True;Not;Name;Strings,5.296897143125534e-09;1.862645149230957e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;1.1641532182693481e-10;-4.3655745685100555e-10;-1.6880221664905548e-09,5,5,"[-6.038854598999023, -5.681500434875488, -4.5620574951171875, -5.886801242828369, -5.378316402435303, -0.02390829101204872]",0.9763752222061157
2,"['    @Test(expected = IllegalStateException.class)\n    public void testIsActiveThrowsWhenNoApplicationContext() {\n        FeatureState featureState = new FeatureState(TestFeatures.FEATURE_ONE, true);\n\n        ContextClassLoaderApplicationContextHolder.release();\n\n        strategy.isActive(featureState, null);\n    }\n']",Active;older;Application;Features;Class;strategy;State;Loader;Active;ONE,1.862645149230957e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.9585723876953125, -5.462417125701904, -4.620742321014404, -5.847024440765381, -5.447479248046875, -0.024157574400305748]",0.9761319756507874
2,"['    @Test\n    public void testGetParameters() {\n        Parameter[] parameters = strategy.getParameters();\n\n        assertEquals(1, parameters.length);\n\n        Parameter parameter = parameters[0];\n\n        assertNotNull(parameter);\n        assertEquals(SpringProfileActivationStrategy.PARAM_PROFILES, parameter.getName());\n        assertTrue(Strings.isNotBlank(parameter.getLabel()));\n        assertTrue(Strings.isNotBlank(parameter.getDescription()));\n    }\n']",Parameter;Profile;Label;Strategy;True;Activation;Strings;Equals;Not;Strings,1.4115357771515846e-09;9.313225746154785e-10;8.731149137020111e-10;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;3.92901711165905e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.909867286682129, -5.595815181732178, -4.657388687133789, -5.745115280151367, -5.348874568939209, -0.024158505722880363]",0.9761309623718262
2,"['    @Test\n    public void testGetTokenParameterName() {\n        assertEquals(SpringProfileActivationStrategy.PARAM_PROFILES, strategy.getTokenParameterName());\n    }\n']",Equals;PROFILES;PARAM;Name;Parameter;Profile;Parameter;Strategy;Name;Activation,2.735760062932968e-09;1.6298145055770874e-09;9.313225746154785e-10;6.402842700481415e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-3.4924596548080444e-10;-3.4924596548080444e-10,5,5,"[-5.999351978302002, -5.649703502655029, -4.601156234741211, -5.870692253112793, -5.360146999359131, -0.02384229563176632]",0.9764397144317627
2,"['    @Test\n    public void testGetTokenParameterTransformer() {\n        TokenTransformer transformer = strategy.getTokenParameterTransformer();\n\n        assertNotNull(transformer);\n        assertEquals(""foo"", transformer.transform(""FOO""));\n    }\n']",Get;strategy;Transformer;transformer;Not;Transformer;get;transform;Parameter;Null,1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;2.9103830456733704e-11;0.0;-1.0186340659856796e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.9802141189575195, -5.624831676483154, -4.620588302612305, -5.831085681915283, -5.371336460113525, -0.023847300559282303]",0.9764348268508911
2,['    @Test\n    public void testActiveByDefault() {\n\n        // should be true by default\n        assertFalse(MyFeatures.FEATURE_ONE.isActive());\n\n        // second result should be the same\n        assertFalse(MyFeatures.FEATURE_ONE.isActive());\n\n    }\n'],FEATURE;My;Active;be;default;be;second;Default;False;by,1.2223608791828156e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-5.909202575683594, -5.56420373916626, -4.6501994132995605, -5.804352283477783, -5.360799789428711, -0.02410648949444294]",0.9761817455291748
2,['    @Test\n    public void testToggleFeature() {\n\n        // initially false\n        assertFalse(MyFeatures.FEATURE_ONE.isActive());\n\n        // enable and check result\n        togglzRule.enable(MyFeatures.FEATURE_ONE);\n        assertTrue(MyFeatures.FEATURE_ONE.isActive());\n\n        // disable and check result\n        togglzRule.disable(MyFeatures.FEATURE_ONE);\n        assertFalse(MyFeatures.FEATURE_ONE.isActive());\n\n    }\n'],disable;enable;disable;FEATURE;enable;Active;Rule;initially;False;ONE,2.561137080192566e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.901911735534668, -5.580714702606201, -4.670563220977783, -5.753941059112549, -5.330499649047852, -0.024172818288207054]",0.9761170148849487
2,['    @Test\n    public void featureShouldBeInactiveByDefault()\n    {\n        assertFalse(MyFeatures.ONE.isActive());\n        assertFalse(MyFeatures.TWO.isActive());\n    }\n'],Inactive;By;False;My;False;My;Features;Should;Features;ONE,1.862645149230957e-09;1.862645149230957e-09;1.7462298274040222e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0,5,5,"[-6.012714862823486, -5.672668933868408, -4.580996513366699, -5.856870174407959, -5.357183456420898, -0.0239906944334507]",0.9762949347496033
2,['    @Test\n    public void featureShouldBeActiveWithAnnotation()\n    {\n        assertTrue(MyFeatures.ONE.isActive());\n        assertFalse(MyFeatures.TWO.isActive());\n    }\n'],ONE;True;Be;Annotation;My;Active;My;Active;Active;False,1.979060471057892e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-6.020898342132568, -5.664731025695801, -4.575039863586426, -5.871427536010742, -5.3724517822265625, -0.02394542098045349]",0.9763389825820923
2,['    @Test\n    public void shouldActivateMultipleFeatures()\n    {\n        assertTrue(MyFeatures.ONE.isActive());\n        assertTrue(MyFeatures.TWO.isActive());\n    }\n'],TW;should;Activate;Features;ONE;Features;True;Active;My;Active,8.847564458847046e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;7.566995918750763e-10;3.4924596548080444e-10;-6.984919309616089e-10;-8.149072527885437e-10,5,5,"[-6.02813196182251, -5.6807098388671875, -4.5695600509643555, -5.85154390335083, -5.358354568481445, -0.02405470423400402]",0.9762322902679443
2,['    @Test\n    public void testActiveByDefault() {\n\n        // should be true by default\n        assertTrue(MyFeatures.FEATURE_ONE.isActive());\n\n        // second result should be the same\n        assertTrue(MyFeatures.FEATURE_ONE.isActive());\n\n    }\n'],true;same;Active;Default;Features;should;second;My;By;Features,1.979060471057892e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.90466833114624, -5.564694881439209, -4.650064945220947, -5.805576801300049, -5.354984283447266, -0.02414279617369175]",0.9761462807655334
2,['    @Test\n    public void testToggleFeature() {\n\n        // initially true\n        assertTrue(MyFeatures.FEATURE_ONE.isActive());\n\n        // disable and check result\n        togglzRule.disable(MyFeatures.FEATURE_ONE);\n        assertFalse(MyFeatures.FEATURE_ONE.isActive());\n\n        // enable and check result\n        togglzRule.enable(MyFeatures.FEATURE_ONE);\n        assertTrue(MyFeatures.FEATURE_ONE.isActive());\n\n    }\n'],Active;FEATURE;True;My;initially;My;result;Active;disable;My,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.675246939063072e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.891608715057373, -5.579653739929199, -4.677966117858887, -5.7434234619140625, -5.322149276733398, -0.024211101233959198]",0.9760796427726746
2,['    @Test\n    public void test() {\n        assertTrue(MyFeatures.F1.isActive());\n        assertTrue(MyFeatures.F2.isActive() || !MyFeatures.F2.isActive());\n        assertTrue(MyFeatures.F3.isActive() || !MyFeatures.F3.isActive());\n    }\n'],True;Features;My;My;Active;Features;My;True;Features;Active,1.3969838619232178e-09;8.731149137020111e-10;8.149072527885437e-10;6.257323548197746e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.9507904052734375, -5.616329193115234, -4.629648685455322, -5.813714027404785, -5.359726428985596, -0.023973586037755013]",0.9763115048408508
2,['    @Test\n    public void test() {\n        assertTrue(MyFeatures.F1.isActive());\n        assertTrue(MyFeatures.F2.isActive() || !MyFeatures.F2.isActive());\n        assertTrue(MyFeatures.F3.isActive() || !MyFeatures.F3.isActive());\n    }\n'],True;Features;My;My;Active;Features;My;True;Features;Active,1.3969838619232178e-09;8.731149137020111e-10;8.149072527885437e-10;6.257323548197746e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.9507904052734375, -5.616329193115234, -4.629648685455322, -5.813714027404785, -5.359726428985596, -0.023973586037755013]",0.9763115048408508
2,"['    @Test\n    public void test() {\n\n        counter++;\n\n        switch (counter) {\n            case 1:\n                assertEquals(""C1, F1"", false, MyFeatures.F1.isActive());\n                assertEquals(""C1, F2"", false, MyFeatures.F2.isActive());\n                assertEquals(""C1, F3"", false, MyFeatures.F3.isActive());\n                break;\n\n            case 2:\n                assertEquals(""C2, F1"", false, MyFeatures.F1.isActive());\n                assertEquals(""C2, F2"", true, MyFeatures.F2.isActive());\n                assertEquals(""C2, F3"", false, MyFeatures.F3.isActive());\n                break;\n            case 3:\n                assertEquals(""C3, F1"", false, MyFeatures.F1.isActive());\n                assertEquals(""C3, F2"", false, MyFeatures.F2.isActive());\n                assertEquals(""C3, F3"", true, MyFeatures.F3.isActive());\n                break;\n\n            case 4:\n                assertEquals(""C4, F1"", false, MyFeatures.F1.isActive());\n                assertEquals(""C4, F2"", true, MyFeatures.F2.isActive());\n                assertEquals(""C4, F3"", true, MyFeatures.F3.isActive());\n                break;\n\n            default:\n                fail(""Incorrect execution cound"");\n\n        }\n    }\n']",break;Features;false;Equals;Equals;My;Features;Active;Features;Equals,5.820766091346741e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.4915713109076023e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.418811734765768e-10;1.3096723705530167e-10,5,5,"[-5.849742412567139, -5.4124274253845215, -4.672331809997559, -5.666143894195557, -5.409278392791748, -0.02493632771074772]",0.9753720164299011
2,['    @Test\n    public void test() {\n        expectedException.expect(AssertionError.class);\n\n        assertFalse(MyFeatures.F1.isActive());\n    }\n'],Assertion;Features;My;Active;class;Exception;expected;expect;Error;False,2.9103830456733704e-09;2.3283064365386963e-10;1.1641532182693481e-10;-2.9103830456733704e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.0477378964424133e-09;-1.7462298274040222e-09;-2.3283064365386963e-09,5,5,"[-5.964066505432129, -5.5724921226501465, -4.600703716278076, -5.857324600219727, -5.383322715759277, -0.024156061932444572]",0.9761333465576172
2,['    @Test\n    public void test() {\n        expectedException.expect(AssertionError.class);\n\n        assertTrue(MyFeatures.F1.isActive());\n    }\n'],class;expected;Exception;Active;Features;Error;True;Assertion;expect;My,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10;-8.149072527885437e-10;-1.1641532182693481e-09,5,5,"[-5.962825298309326, -5.575695037841797, -4.601388931274414, -5.856020927429199, -5.378641605377197, -0.024165837094187737]",0.9761239290237427
2,"['    @Test\n    public void testGuiceIntegration() throws IOException {\n\n        FeatureManager featureManager = FeatureContext.getFeatureManagerOrNull();\n\n        assertThat(featureManager).isNotNull();\n        assertThat(featureManager.getFeatures())\n            .containsExactly(GuiceFeatures.FEATURE1, GuiceFeatures.FEATURE2);\n\n    }\n']",Manager;get;That;Features;Feature;feature;IOException;feature;FEATURE;Guice,1.280568540096283e-09;1.1641532182693481e-09;9.604264050722122e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.877542018890381, -5.5596466064453125, -4.677931308746338, -5.728229522705078, -5.330409526824951, -0.0243387371301651]",0.975955069065094
2,['    @Test\n    public void shouldReturnNullWhenStateDoesntExist() {\n\n        final FeatureState state = repository.getFeatureState(TestFeature.F1);\n\n        assertNull(state);\n    }\n'],State;repository;should;Feature;final;State;Feature;get;Return;Null,1.862645149230957e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0,5,5,"[-5.975603103637695, -5.540689945220947, -4.6105475425720215, -5.863063335418701, -5.423056602478027, -0.023950891569256783]",0.9763336777687073
2,"['    @Test\n    public void shouldReadFalseStateWithoutStrategyAndParameters() {\n\n        addState(TestFeature.F1.name(), false);\n\n        FeatureState state = repository.getFeatureState(TestFeature.F1);\n\n        assertNotNull(state);\n        assertEquals(TestFeature.F1, state.getFeature());\n        assertEquals(false, state.isEnabled());\n        assertEquals(null, state.getStrategyId());\n        assertEquals(0, state.getParameterNames().size());\n    }\n']",Feature;State;Without;Names;Feature;Equals;false;get;Equals;Strategy,8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.902368545532227, -5.5767130851745605, -4.66685676574707, -5.731010437011719, -5.3451642990112305, -0.024225762113928795]",0.9760653376579285
2,"['    @Test\n    public void shouldReadTrueStateWithoutStrategyAndParameters() {\n\n        addState(TestFeature.F1.name(), true);\n\n        FeatureState state = repository.getFeatureState(TestFeature.F1);\n\n        /*\n         * THEN the properties should be set like expected\n         */\n        assertNotNull(state);\n        assertEquals(TestFeature.F1, state.getFeature());\n        assertEquals(true, state.isEnabled());\n        assertEquals(null, state.getStrategyId());\n        assertEquals(0, state.getParameterNames().size());\n    }\n']",should;Feature;Feature;Enabled;State;State;get;Without;state;Read,1.3969838619232178e-09;1.280568540096283e-09;7.566995918750763e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.922139644622803, -5.555159568786621, -4.6607866287231445, -5.753063678741455, -5.373642921447754, -0.024104394018650055]",0.9761837720870972
2,"['    @Test\n    public void withStrategyNoParameters() {\n\n        addState(TestFeature.F1.name(), true, ""S1"");\n        \n        FeatureState state = repository.getFeatureState(TestFeature.F1);\n\n        assertNotNull(state);\n        assertEquals(""S1"", state.getStrategyId());\n        assertEquals(0, state.getParameterNames().size());\n    }\n']",Strategy;No;size;Feature;Feature;Parameter;Names;Feature;name;Parameters,1.57160684466362e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.022187441587448e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.955146312713623, -5.599605560302734, -4.649930953979492, -5.780559062957764, -5.37100076675415, -0.023873256519436836]",0.9764094352722168
2,"['    @Test\n    public void withStrategyParameters() {\n\n        addState(TestFeature.F1.name(), true, ""S1"", new Param(""one"", ""A""), new Param(""two"", ""B""));\n\n        FeatureState state = repository.getFeatureState(TestFeature.F1);\n\n        assertEquals(2, state.getParameterNames().size());\n        assertEquals(""A"", state.getParameter(""one""));\n        assertEquals(""B"", state.getParameter(""two""));\n    }\n']",two;Feature;two;Names;state;State;Feature;Equals;Parameter;state,1.0477378964424133e-09;7.566995918750763e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.876585960388184, -5.607869625091553, -4.707167625427246, -5.638766288757324, -5.287793159484863, -0.024409238249063492]",0.9758862853050232
2,"['    @Test(expected=UnsupportedOperationException.class)\n    public void setState() {\n        \n        repository.setFeatureState(new FeatureState(TestFeature.F1, true));\n    }\n']",expected;class;repository;Feature;State;State;State;Feature;Unsupported;new,1.3969838619232178e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;5.820766091346741e-11;0.0,5,5,"[-6.024569034576416, -5.578370094299316, -4.577932357788086, -5.89773416519165, -5.429462432861328, -0.023887690156698227]",0.9763954877853394
2,"['    @Test\r\n    public void canProvideNamedUser() {\r\n        String username = ""named-user"";\r\n        boolean featureAdmin = true;\r\n        UserProvider userProvider = new SingleUserProvider(username, featureAdmin);\r\n        FeatureUser user = userProvider.getCurrentUser();\r\n        assertThat(user.getName(), equalTo(username));\r\n        assertThat(user.isFeatureAdmin(), equalTo(featureAdmin));\r\n    }\r\n']",get;equal;amed;Provider;That;Single;Admin;Provider;Provider;Admin,1.0477378964424133e-09;9.604264050722122e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.984407424926758, -5.640443325042725, -4.630776882171631, -5.815972328186035, -5.3719329833984375, -0.023720066994428635]",0.976559042930603
2,"['    @Test\n    public void buildWillReturnNullWhenFeatureGroupAnnotationIsNotPresent() throws Exception {\n        FeatureGroup result = AnnotationFeatureGroup.build(Label.class);\n\n        assertThat(result, nullValue());\n    }\n']",Null;Present;Label;Group;Will;Annotation;Feature;That;null;class,2.0954757928848267e-09;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0;-2.0372681319713593e-10;-2.3283064365386963e-10,5,5,"[-5.973293304443359, -5.565005779266357, -4.598974227905273, -5.874605655670166, -5.412417411804199, -0.023993954062461853]",0.9762917160987854
2,"['    @Test\n    public void buildWillReturnFeatureGroupWhenFeatureGroupAnnotationIsPresentForFieldLevelGroup() throws Exception {\n        FeatureGroup result = AnnotationFeatureGroup.build(FieldLevelGroup.class);\n\n        assertThat(result, notNullValue());\n        assertThat(result.getLabel(), is(FIELD_LEVEL_GROUP_LABEL));\n        assertThat(result.contains(TestFeatures.FEATURE), is(true));\n    }\n']",FEATURE;Value;contains;Level;Feature;Label;Group;Level;Group;Group,2.2118911147117615e-09;1.1641532182693481e-09;9.458744898438454e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;3.2014213502407074e-10,5,5,"[-5.93981409072876, -5.615202903747559, -4.646274089813232, -5.793216705322266, -5.357194423675537, -0.02391783520579338]",0.9763658046722412
2,"['    @Test\n    public void buildWillReturnFeatureGroupWhenFeatureGroupAnnotationIsPresentForClassLevelGroup() throws Exception {\n        FeatureGroup result = AnnotationFeatureGroup.build(ClassLevelGroup.class);\n\n        assertThat(result, notNullValue());\n        assertThat(result.getLabel(), is(CLASS_LEVEL_GROUP_LABEL));\n        assertThat(result.contains(TestFeatures.FEATURE), is(true));\n    }\n']",LABEL;Feature;Feature;contains;result;That;GROUP;Will;Label;true,1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-5.9358134269714355, -5.606289386749268, -4.642604827880859, -5.803030490875244, -5.358790397644043, -0.023960085585713387]",0.9763246774673462
2,"['    @Test\n    public void constructorWillPopulateGroupsFromAnnotations() throws Exception {\n        // act\n        EnumFeatureMetaData metaData = new EnumFeatureMetaData(TestFeatures.FEATURE);\n\n        // assert\n        Set<FeatureGroup> groups = metaData.getGroups();\n\n        assertThat(groups, notNullValue());\n        assertThat(groups.size(), is(2));\n\n        // verify field level group is there\n        FeatureGroup group1 = Iterables.find(groups, createFeatureGroupLabelPredicate(FIELD_LEVEL_GROUP_LABEL));\n        assertThat(group1.contains(TestFeatures.FEATURE), is(true));\n\n        // verify class level group is there\n        FeatureGroup group2 = Iterables.find(groups, createFeatureGroupLabelPredicate(CLASS_LEVEL_GROUP_LABEL));\n        assertThat(group2.contains(TestFeatures.FEATURE), is(true));\n    }\n']",constructor;Enum;LEVEL;CLASS;Exception;Feature;Features;FEATURE;Populate;field,1.6298145055770874e-09;1.0841176845133305e-09;7.275957614183426e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.3655745685100555e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.871242046356201, -5.503511905670166, -4.672102928161621, -5.749532222747803, -5.373691082000732, -0.02436002716422081]",0.9759343862533569
2,"['    @Test\n    public void constructorWillPopulateDefaultActivationStrategyFromAnnotations() throws Exception {\n        // act\n        EnumFeatureMetaData metaData = new EnumFeatureMetaData(TestFeatures.FEATURE_WITH_DEFAULT_STATE);\n\n        FeatureState featureState = metaData.getDefaultFeatureState();\n\n        assertThat(featureState, notNullValue());\n        assertThat(featureState.isEnabled(), is(true));\n        assertThat(featureState.getStrategyId(), is(""SomeActivationId""));\n        assertThat(featureState.getParameter(""SomeParameterName""), is(""someValue1,someValue2""));\n        assertThat(featureState.getParameter(""SomeParameterName2""), is(""someValue3,someValue4""));\n    }\n']",constructor;Features;Annotations;Meta;feature;act;Populate;some;DEFAULT;feature,1.1641532182693481e-09;1.0186340659856796e-09;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.884276866912842, -5.534120559692383, -4.681435585021973, -5.754087924957275, -5.356677532196045, -0.024174446240067482]",0.9761154055595398
2,"['\t@Test\n\tpublic void empty() {\n\t\tCompositeFeatureProvider provider = new CompositeFeatureProvider();\n\t\tassertThat(provider.getFeatures()).isEmpty();\n\t\tassertThat(provider.getMetaData(new NamedFeature(""FOO""))).isNull();\n\t}\n']",Feature;That;Features;Null;get;Composite;get;Empty;new;Feature,1.6298145055770874e-09;1.0477378964424133e-09;8.149072527885437e-10;6.111804395914078e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-6.045229434967041, -5.67534065246582, -4.570305824279785, -5.87113094329834, -5.396642208099365, -0.023785606026649475]",0.9764951467514038
2,"['\t@Test\n\tpublic void oneProvider() {\n\t\t@SuppressWarnings(""unchecked"")\n\t\tCompositeFeatureProvider provider = new CompositeFeatureProvider(new EnumBasedFeatureProvider(TestFeatures.class));\n\t\tassertThat(provider.getFeatures()).hasSize(2);\n\t\tassertThat(provider.getMetaData(new NamedFeature(""FOO""))).isNotNull();\n\t}\n']",Feature;Features;That;Feature;provider;Provider;one;Composite;Meta;Data,3.026798367500305e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-6.029407978057861, -5.6746506690979, -4.595425128936768, -5.844322681427002, -5.390054702758789, -0.023672685027122498]",0.9766052961349487
2,"['    @Test\r\n    public void shouldSupportDefinitionWithoutLabel() {\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(""F1"", """");\r\n\r\n        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);\r\n\r\n        Set<Feature> features = provider.getFeatures();\r\n        assertThat(features)\r\n            .hasSize(1)\r\n            .areExactly(1, featureNamed(""F1""));\r\n\r\n        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));\r\n        assertThat(metadata).isNotNull();\r\n        assertThat(metadata.getLabel()).isEqualTo(""F1"");\r\n        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();\r\n        assertThat(defaultFeatureState.isEnabled()).isFalse();\r\n        assertThat(metadata.getGroups()).isEmpty();\r\n\r\n    }\r\n']",Support;Definition;Feature;Features;Meta;properties;State;features;That;Enabled,7.566995918750763e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.971237659454346, -5.6120429039001465, -4.639739036560059, -5.785118103027344, -5.380141258239746, -0.023826580494642258]",0.97645503282547
2,"['    @Test\r\n    public void shouldSupportDefinitionWithOnlyLabel() {\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(""F1"", ""My Feature"");\r\n\r\n        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);\r\n\r\n        Set<Feature> features = provider.getFeatures();\r\n        assertThat(features)\r\n            .hasSize(1)\r\n            .areExactly(1, featureNamed(""F1""));\r\n\r\n        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));\r\n        assertThat(metadata).isNotNull();\r\n        assertThat(metadata.getLabel()).isEqualTo(""My Feature"");\r\n        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();\r\n        assertThat(defaultFeatureState.isEnabled()).isFalse();\r\n        assertThat(metadata.getGroups()).isEmpty();\r\n\r\n    }\r\n']",Label;Set;Feature;Feature;properties;Only;metadata;get;That;Properties,6.220943760126829e-10;5.529727786779404e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.956476211547852, -5.59514045715332, -4.648929119110107, -5.771378040313721, -5.374561786651611, -0.023908641189336777]",0.9763748049736023
2,"['    @Test\r\n    public void shouldSupportDefinitionWithLabelAndDefault() {\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(""F1"", ""My Feature;true"");\r\n\r\n        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);\r\n\r\n        Set<Feature> features = provider.getFeatures();\r\n        assertThat(features)\r\n            .hasSize(1)\r\n            .areExactly(1, featureNamed(""F1""));\r\n\r\n        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));\r\n        assertThat(metadata).isNotNull();\r\n        assertThat(metadata.getLabel()).isEqualTo(""My Feature"");\r\n        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();\r\n        assertThat(defaultFeatureState.isEnabled()).isTrue();\r\n        assertThat(metadata.getGroups()).isEmpty();\r\n\r\n    }\r\n']",Null;Feature;Feature;Definition;Default;are;State;Property;Property;new,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.950833797454834, -5.5765604972839355, -4.654207706451416, -5.76795768737793, -5.378316402435303, -0.023936575278639793]",0.9763476252555847
2,"['    @Test\r\n    public void shouldSupportDefinitionWithLabelAndDefaultAndTrailingSemicolon() {\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(""F1"", ""My Feature;true;"");\r\n\r\n        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);\r\n\r\n        Set<Feature> features = provider.getFeatures();\r\n        assertThat(features)\r\n            .hasSize(1)\r\n            .areExactly(1, featureNamed(""F1""));\r\n\r\n        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));\r\n        assertThat(metadata).isNotNull();\r\n        assertThat(metadata.getLabel()).isEqualTo(""My Feature"");\r\n        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();\r\n        assertThat(defaultFeatureState.isEnabled()).isTrue();\r\n        assertThat(metadata.getGroups()).isEmpty();\r\n\r\n    }\r\n']",emicolon;should;Default;are;Properties;Provider;true;Feature;get;Properties,5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.954987049102783, -5.581783771514893, -4.661098957061768, -5.762524127960205, -5.3751702308654785, -0.023870695382356644]",0.9764119386672974
2,"['    @Test\r\n    public void shouldSupportDefinitionWithSingleGroup() {\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(""F1"", ""My Feature;true;Group1"");\r\n\r\n        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);\r\n\r\n        Set<Feature> features = provider.getFeatures();\r\n        assertThat(features)\r\n            .hasSize(1)\r\n            .areExactly(1, featureNamed(""F1""));\r\n\r\n        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));\r\n        assertThat(metadata).isNotNull();\r\n        assertThat(metadata.getLabel()).isEqualTo(""My Feature"");\r\n        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();\r\n        assertThat(defaultFeatureState.isEnabled()).isTrue();\r\n        assertThat(metadata.getGroups())\r\n            .hasSize(1)\r\n            .areExactly(1, groupNamed(""Group1""));\r\n\r\n    }\r\n']",should;Exactly;Single;Support;Data;Set;Exactly;Features;Label;Feature,6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.926859378814697, -5.576200008392334, -4.6698994636535645, -5.740939617156982, -5.358529567718506, -0.02403305657207966]",0.9762534499168396
2,"['    @Test\r\n    public void canInitializeFromProperties() {\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(""ID_1"", ""ID 1;true;Group 1,Group Other"");\r\n        properties.setProperty(""ID_2"", ""ID 2;false;Group 2"");\r\n\r\n        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);\r\n\r\n        Set<Feature> features = provider.getFeatures();\r\n\r\n        assertThat(features)\r\n            .hasSize(2)\r\n            .areExactly(1, featureNamed(""ID_1""))\r\n            .areExactly(1, featureNamed(""ID_2""));\r\n\r\n        FeatureMetaData metadata1 = provider.getMetaData(new NamedFeature(""ID_1""));\r\n        assertThat(metadata1).isNotNull();\r\n        assertThat(metadata1.getLabel()).isEqualTo(""ID 1"");\r\n        FeatureState defaultFeatureState1 = metadata1.getDefaultFeatureState();\r\n        assertThat(defaultFeatureState1.isEnabled()).isTrue();\r\n        assertThat(metadata1.getGroups())\r\n            .hasSize(2)\r\n            .areExactly(1, groupNamed(""Group 1""))\r\n            .areExactly(1, groupNamed(""Group Other""));\r\n\r\n        FeatureMetaData metadata2 = provider.getMetaData(new NamedFeature(""ID_2""));\r\n        assertThat(metadata2).isNotNull();\r\n        assertThat(metadata2.getLabel()).isEqualTo(""ID 2"");\r\n        FeatureState defaultFeatureState2 = metadata2.getDefaultFeatureState();\r\n        assertThat(defaultFeatureState2.isEnabled()).isFalse();\r\n        assertThat(metadata2.getGroups())\r\n            .hasSize(1)\r\n            .areExactly(1, groupNamed(""Group 2""));\r\n\r\n    }\r\n']",Initialize;can;Property;has;Feature;ID;Feature;Features;group;Feature,4.94765117764473e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.346940502524376e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.91788911819458, -5.568199634552002, -4.684047222137451, -5.702943325042725, -5.358530521392822, -0.02408147044479847]",0.9762063026428223
2,['    @Test(expected = IllegalArgumentException.class)\n    public void shouldFailForNull() {\n        new EnumBasedFeatureProvider(null);\n    }\n'],For;expected;new;Feature;null;class;Fail;Exception;Argument;Enum,4.423782229423523e-09;2.6775524020195007e-09;1.9208528101444244e-09;9.313225746154785e-10;1.1641532182693481e-10;0.0;0.0;-4.656612873077393e-10;-6.984919309616089e-10;-6.984919309616089e-10,5,5,"[-6.008334159851074, -5.503655433654785, -4.556290149688721, -5.905252933502197, -5.436748504638672, -0.02440504916012287]",0.9758903384208679
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void shouldFailForArrayWithNull() {\n        new EnumBasedFeatureProvider(ValidFeatureEnum.class, null);\n    }\n']",Array;new;Exception;Based;Illegal;Fail;class;class;null;Valid,2.0954757928848267e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3387762010097504e-09;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0,5,5,"[-5.998472690582275, -5.519164562225342, -4.584059238433838, -5.9002203941345215, -5.432618618011475, -0.024103812873363495]",0.9761844873428345
2,['    @Test(expected = IllegalArgumentException.class)\n    public void shouldFailForNonEnumType() {\n        new EnumBasedFeatureProvider(NotAnEnum.class);\n    }\n'],Enum;Enum;new;Feature;Based;class;An;Not;Illegal;Type,2.561137080192566e-09;1.7462298274040222e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;6.548361852765083e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.99971866607666, -5.5270233154296875, -4.561702728271484, -5.909368515014648, -5.426633358001709, -0.024306276813149452]",0.9759867191314697
2,['    @Test(expected = IllegalStateException.class)\n    public void shouldFailForDuplicateFeatureName() {\n        \n        EnumBasedFeatureProvider provider = new EnumBasedFeatureProvider();\n        provider.addFeatureEnum(ValidFeatureEnum.class);\n        provider.addFeatureEnum(DuplicateNameFeatureEnum.class); // should throw IllegalStateException\n    }\n'],Enum;expected;Duplicate;For;should;Name;Feature;Based;Feature;Enum,1.6298145055770874e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10,5,5,"[-5.982393264770508, -5.4936299324035645, -4.605443954467773, -5.877808094024658, -5.459172248840332, -0.023976147174835205]",0.9763091206550598
2,"['    @Test\n    public void shouldReturnCorrectListOfFeaturesForEnum() {\n\n        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);\n        assertThat(provider.getFeatures())\n            .containsSequence(ValidFeatureEnum.FEATURE1, ValidFeatureEnum.FEATURE2);\n\n    }\n']",should;FEATURE;Correct;provider;Feature;class;Valid;Return;Enum;Feature,3.259629011154175e-09;2.9103830456733704e-09;2.3283064365386963e-09;1.5133991837501526e-09;1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10,5,5,"[-5.9416375160217285, -5.5086846351623535, -4.653926372528076, -5.796505451202393, -5.423462390899658, -0.02393750660121441]",0.9763467311859131
2,"['    @Test\n    public void shouldReturnMetaDataWithCorrectLabel() {\n\n        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);\n        FeatureMetaData metaData = provider.getMetaData(ValidFeatureEnum.FEATURE1);\n        assertThat(metaData.getLabel()).isEqualTo(""First feature"");\n\n    }\n']",Feature;provider;Feature;Correct;Feature;Feature;Meta;Meta;Return;Provider,2.0954757928848267e-09;1.0186340659856796e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-5.974647521972656, -5.566727638244629, -4.646122455596924, -5.809150695800781, -5.427894115447998, -0.023633450269699097]",0.9766435027122498
2,"['    @Test\n    public void shouldReturnMetaDataWhenRequestedWithOtherFeatureImplementation() {\n\n        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);\n        FeatureMetaData metaData =\n            provider.getMetaData(new OtherFeatureImpl(ValidFeatureEnum.FEATURE1.name()));\n        assertThat(metaData.getLabel()).isEqualTo(""First feature"");\n\n    }\n']",Provider;Data;Label;Feature;Requested;Feature;meta;Other;Meta;Meta,1.862645149230957e-09;7.8580342233181e-10;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.967568397521973, -5.547187328338623, -4.654947757720947, -5.807275772094727, -5.431143760681152, -0.023634031414985657]",0.9766430854797363
2,"['    @Test\n    public void shouldReturnOwnerNameIfAnnotationPresent() {\n        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);\n        FeatureMetaData metaData = provider.getMetaData(ValidFeatureEnum.WITH_OWNER);\n        assertThat(metaData.getAttributes())\n            .containsValue(""Christian"");\n    }\n']",Owner;Provider;Enum;Attributes;Feature;Data;meta;Present;ITH;Data,9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-6.005281448364258, -5.565374374389648, -4.614555835723877, -5.865272521972656, -5.450819492340088, -0.02360597252845764]",0.9766705632209778
2,"['    @Test\n    public void shouldReturnNullForOwnerNameByDefault() {\n        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);\n        FeatureMetaData metaData = provider.getMetaData(ValidFeatureEnum.FEATURE1);\n        assertThat(metaData.getAttributes())\n            .doesNotContainValue(""Christian"");\n    }\n']",Feature;Enum;Christian;Name;For;Provider;Provider;That;Value;Valid,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-6.006796836853027, -5.574738502502441, -4.6163434982299805, -5.849852561950684, -5.452968597412109, -0.023583270609378815]",0.9766927361488342
2,"['    @Test\n    public void shouldReturnInfoLinkIfAnnotationPresent() {\n        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);\n        FeatureMetaData metaData = provider.getMetaData(ValidFeatureEnum.WITH_LINK);\n        assertThat(metaData.getAttributes())\n            .containsValue(""https://github.com/togglz/togglz/pull/33"");\n    }\n']",oggl;Annotation;INK;github;Meta;pull;Data;Attributes;Data;Enum,2.0954757928848267e-09;1.6880221664905548e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.987875461578369, -5.527390003204346, -4.6154255867004395, -5.867526054382324, -5.470480442047119, -0.02370109036564827]",0.9765775799751282
2,"['    @Test\n    public void shouldReturnNullForInfoLinkByDefault() {\n        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);\n        FeatureMetaData metaData = provider.getMetaData(ValidFeatureEnum.FEATURE1);\n        assertThat(metaData.getAttributes())\n            .doesNotContainValue(""https://github.com/togglz/togglz/pull/33"");\n    }\n']",oggl;Feature;should;Null;That;Based;meta;Enum;Feature;Attributes,2.0954757928848267e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0477378964424133e-09;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10,5,5,"[-5.987403392791748, -5.553344249725342, -4.622698783874512, -5.850235939025879, -5.458384037017822, -0.02362751215696335]",0.9766494035720825
2,['    @Test\n    public void shouldReturnCombinedFeatureListForMultipleEnums() {\n\n        FeatureProvider provider = new EnumBasedFeatureProvider()\n            .addFeatureEnum(ValidFeatureEnum.class)\n            .addFeatureEnum(OtherFeatureEnum.class);\n\n        // all feature are in the list\n        assertThat(provider.getFeatures())\n            .hasSize(ValidFeatureEnum.values().length + OtherFeatureEnum.values().length)\n            .contains(ValidFeatureEnum.FEATURE1)\n            .contains(OtherFeatureEnum.ADDITIONAL_FEATURE);\n\n    }\n'],ADDITIONAL;class;Based;Feature;Size;Enum;Enum;the;Provider;Features,6.868503987789154e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;8.731149137020111e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.905316352844238, -5.474059581756592, -4.649627685546875, -5.778135299682617, -5.41876220703125, -0.02430429868400097]",0.9759886860847473
2,"['    @Test\n    public void shouldBuildMetadataForMultipleEnums() {\n\n        FeatureProvider provider = new EnumBasedFeatureProvider()\n            .addFeatureEnum(ValidFeatureEnum.class)\n            .addFeatureEnum(OtherFeatureEnum.class);\n\n        assertThat(provider.getMetaData(ValidFeatureEnum.FEATURE1).getLabel())\n            .isEqualTo(""First feature"");\n        assertThat(provider.getMetaData(OtherFeatureEnum.ADDITIONAL_FEATURE).getLabel())\n            .isEqualTo(""Additional Feature"");\n\n    }\n']",ADDITIONAL;Enums;Metadata;Provider;Label;provider;should;Feature;FEATURE;get,3.14321368932724e-09;3.14321368932724e-09;9.89530235528946e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.862718105316162, -5.500790596008301, -4.6769561767578125, -5.731441497802734, -5.352248668670654, -0.024512188509106636]",0.9757857918739319
2,"['    @Test\n        public void shouldReturnCombinedFeatureListForMultipleEnumsViaConstructor() {\n\n            FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class, OtherFeatureEnum.class);\n\n            // all feature are in the list\n            assertThat(provider.getFeatures())\n                .hasSize(ValidFeatureEnum.values().length + OtherFeatureEnum.values().length)\n                .contains(ValidFeatureEnum.FEATURE1)\n                .contains(OtherFeatureEnum.ADDITIONAL_FEATURE);\n\n        }\n']",class;should;Via;Enum;Valid;Provider;all;Constructor;ADDITIONAL;the,1.862645149230957e-09;9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10,5,5,"[-5.879997730255127, -5.447144031524658, -4.684329986572266, -5.734538555145264, -5.411191463470459, -0.02433466538786888]",0.975959062576294
2,"['        @Test\n        public void shouldBuildMetadataForMultipleEnumsViaConstructor() {\n\n            FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class, OtherFeatureEnum.class);\n\n            assertThat(provider.getMetaData(ValidFeatureEnum.FEATURE1).getLabel())\n                .isEqualTo(""First feature"");\n            assertThat(provider.getMetaData(OtherFeatureEnum.ADDITIONAL_FEATURE).getLabel())\n                .isEqualTo(""Additional Feature"");\n\n        }\n']",FEATURE;FEATURE;Feature;Build;Provider;Based;Label;Valid;get;Feature,1.0943040251731873e-08;3.4924596548080444e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10,5,5,"[-5.796167373657227, -5.461735248565674, -4.730916976928711, -5.635674953460693, -5.287771701812744, -0.025035852566361427]",0.975274920463562
2,"['    @Test\n    public void shouldAddStrategyIfUsingDefaultProvider() {\n\n        DefaultActivationStrategyProvider provider = new DefaultActivationStrategyProvider();\n\n        FeatureManagerBuilder.begin()\n            .featureEnum(Features.class)\n            .activationStrategyProvider(provider)\n            .activationStrategy(new CustomActivationStrategy())\n            .build();\n\n        assertThat(provider.getActivationStrategies())\n            .extracting(""id"")\n            .contains(CustomActivationStrategy.class.getSimpleName());\n\n    }\n']",That;Strategies;Custom;provider;Strategy;id;Provider;provider;Add;contains,1.0477378964424133e-09;6.984919309616089e-10;6.548361852765083e-10;6.548361852765083e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.930805683135986, -5.4563469886779785, -4.64714241027832, -5.800693035125732, -5.432459831237793, -0.024202723056077957]",0.9760878086090088
2,['    @Test(expected = IllegalStateException.class)\n    public void shouldFailIfAddingStrategyWithCustomProvider() {\n\n        CustomStrategyProvider provider = new CustomStrategyProvider();\n\n        FeatureManagerBuilder.begin()\n            .featureEnum(Features.class)\n            .activationStrategyProvider(provider)\n            .activationStrategy(new CustomActivationStrategy())\n            .build();\n\n    }\n'],expected;Strategy;Exception;State;activation;Fail;Activation;Custom;Illegal;Custom,2.0954757928848267e-09;1.5133991837501526e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.982478141784668, -5.448728084564209, -4.604233264923096, -5.863967418670654, -5.464165210723877, -0.024200046434998512]",0.9760904312133789
2,"['    @Test\n    public void testGetFeatures() {\n        assertThat(manager.getFeatures())\n            .contains(MyFeatures.DELETE_USERS, MyFeatures.EXPERIMENTAL, MyFeatures.MISSING_STRATEGY);\n    }\n']",EXPERIMENTAL;USERS;STRATEGY;That;DELETE;Features;My;My;Features;Get,2.6775524020195007e-09;2.3283064365386963e-09;1.862645149230957e-09;1.280568540096283e-09;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.960840225219727, -5.557474136352539, -4.6080451011657715, -5.852768421173096, -5.4022674560546875, -0.024073323234915733]",0.9762141108512878
2,"['    @Test\n    public void testIsActive() {\n\n        // DELETE_USERS disabled for unknown user\n        featureUserProvider.setFeatureUser(null);\n        assertEquals(false, manager.isActive(MyFeatures.DELETE_USERS));\n\n        // DELETE_USERS enabled for admin user\n        featureUserProvider.setFeatureUser(new SimpleFeatureUser(""admin"", false));\n        assertEquals(true, manager.isActive(MyFeatures.DELETE_USERS));\n\n        // DELETE_USERS enabled for other user\n        featureUserProvider.setFeatureUser(new SimpleFeatureUser(""somebody"", false));\n        assertEquals(false, manager.isActive(MyFeatures.DELETE_USERS));\n\n        // EXPERIMENTAL disabled for all\n        featureUserProvider.setFeatureUser(null);\n        assertEquals(false, manager.isActive(MyFeatures.EXPERIMENTAL));\n\n        // MISSING_STRATEGY disabled for all\n        assertEquals(false, manager.isActive(MyFeatures.MISSING_STRATEGY));\n\n        // EMPTY_STRATEGY enabled for all\n        assertEquals(true, manager.isActive(MyFeatures.EMPTY_STRATEGY));\n    }\n']",enabled;Active;USERS;DELETE;Feature;Equals;Feature;all;true;User,1.862645149230957e-09;6.984919309616089e-10;6.693881005048752e-10;4.43833414465189e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.147295840084553e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.832409858703613, -5.471758842468262, -4.690568923950195, -5.709327697753906, -5.339710712432861, -0.02473178133368492]",0.9755715131759644
2,"['    @Test\n    public void testIsActiveUsingDefaultFeatureState() {\n        FeatureProvider featureProvider = mock(FeatureProvider.class);\n        FeatureMetaData featureMetaData = mock(FeatureMetaData.class);\n        when(featureMetaData.getDefaultFeatureState()).thenReturn(new FeatureState(MyFeatures.NOT_STORED_FEATURE, true));\n        when(featureProvider.getMetaData(MyFeatures.NOT_STORED_FEATURE)).thenReturn(featureMetaData);\n\n        FeatureManager manager = new FeatureManagerBuilder()\n            .featureEnum(MyFeatures.class)\n            .stateRepository(repository)\n            .featureProvider(featureProvider)\n            .userProvider(featureUserProvider)\n            .build();\n\n        assertEquals(true, manager.isActive(MyFeatures.NOT_STORED_FEATURE));\n\n    }\n']",Active;FEATURE;user;Feature;get;feature;mock;Builder;Repository;Manager,9.313225746154785e-10;5.748006515204906e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.942960262298584, -5.477804660797119, -4.650033473968506, -5.796918869018555, -5.44071626663208, -0.0240236297249794]",0.9762627482414246
2,"['    @Test\n    public void testShouldHandleEnabledFlagCorrectlyWithCustomStrategy() {\n\n        // enabled for admin\n        featureUserProvider.setFeatureUser(new SimpleFeatureUser(""admin"", false));\n        assertEquals(true, manager.isActive(MyFeatures.DELETE_USERS));\n\n        // disable feature, but keep configuration\n        FeatureState state = repository.getFeatureState(MyFeatures.DELETE_USERS);\n        state.setEnabled(false);\n        repository.setFeatureState(state);\n\n        // enabled for admin\n        assertEquals(false, manager.isActive(MyFeatures.DELETE_USERS));\n\n    }\n']",set;Strategy;keep;User;Provider;Correctly;Simple;Active;User;Handle,9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.864302158355713, -5.519277095794678, -4.703030109405518, -5.7096076011657715, -5.3247880935668945, -0.024393998086452484]",0.9759011268615723
2,"['    @Test\n    public void testGetFeatureState() {\n\n        FeatureState state = manager.getFeatureState(MyFeatures.DELETE_USERS);\n        assertEquals(MyFeatures.DELETE_USERS, state.getFeature());\n        assertEquals(true, state.isEnabled());\n        assertEquals(""admin"", state.getParameter(UsernameActivationStrategy.PARAM_USERS));\n\n    }\n']",USERS;Parameter;Feature;USERS;Equals;get;Get;My;Username;Features,1.4842953532934189e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;6.111804395914078e-10;5.529727786779404e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.894781589508057, -5.564220905303955, -4.6687726974487305, -5.760621547698975, -5.339430809020996, -0.024208540096879005]",0.9760821461677551
2,"['    @Test\n    public void testGetFeatureStateUsingDefaultFeatureState() {\n        FeatureProvider featureProvider = mock(FeatureProvider.class);\n        FeatureMetaData featureMetaData = mock(FeatureMetaData.class);\n        when(featureMetaData.getDefaultFeatureState()).thenReturn(new FeatureState(MyFeatures.NOT_STORED_FEATURE, true));\n        when(featureProvider.getMetaData(MyFeatures.NOT_STORED_FEATURE)).thenReturn(featureMetaData);\n\n        FeatureManager manager = new FeatureManagerBuilder()\n            .featureEnum(MyFeatures.class)\n            .stateRepository(repository)\n            .featureProvider(featureProvider)\n            .userProvider(featureUserProvider)\n            .build();\n\n\n        FeatureState state = manager.getFeatureState(MyFeatures.NOT_STORED_FEATURE);\n        assertEquals(MyFeatures.NOT_STORED_FEATURE, state.getFeature());\n        assertEquals(true, state.isEnabled());\n\n    }\n']",Enum;user;Default;State;FEATURE;STORED;Return;State;feature;Get,1.2223608791828156e-09;8.149072527885437e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;4.001776687800884e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2378011383116245e-10;2.6193447411060333e-10,5,5,"[-5.936914920806885, -5.4641642570495605, -4.6550140380859375, -5.790843963623047, -5.443965435028076, -0.02405458688735962]",0.9762324094772339
2,"['    @Test\n    public void testShouldSaveStateWithoutStrategyOrParameters() throws SQLException {\n\n        /*\n         * WHEN a feature without strategy is persisted\n         */\n        FeatureState state = new FeatureState(TestFeature.F1).disable();\n        repository.setFeatureState(state);\n\n        /*\n         * THEN there should be a corresponding entry in the database\n         */\n        assertEquals(1l, query(dataSource, ""SELECT COUNT(*) FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(0, query(dataSource, ""SELECT FEATURE_ENABLED FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(null, query(dataSource, ""SELECT STRATEGY_ID FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(null, query(dataSource, ""SELECT STRATEGY_PARAMS FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n\n    }\n']",Save;Strategy;Parameters;SQLE;FEATURE;OUNT;NAME;State;TO;GL,8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.837623469531536e-10;2.6193447411060333e-10,5,5,"[-5.903787136077881, -5.412158966064453, -4.657268524169922, -5.788136005401611, -5.46491003036499, -0.024272069334983826]",0.9760201573371887
2,"['    @Test\n    public void testShouldSaveStateStrategyAndParameters() throws SQLException {\n\n        /*\n         * WHEN a feature without strategy is persisted\n         */\n        FeatureState state = new FeatureState(TestFeature.F1)\n            .enable()\n            .setStrategyId(""someId"")\n            .setParameter(""param"", ""foo"");\n        repository.setFeatureState(state);\n\n        /*\n         * THEN there should be a corresponding entry in the database\n         */\n        assertEquals(1l, query(dataSource, ""SELECT COUNT(*) FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(1, query(dataSource, ""SELECT FEATURE_ENABLED FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(""someId"", query(dataSource, ""SELECT STRATEGY_ID FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(""param=foo"", query(dataSource, ""SELECT STRATEGY_PARAMS FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n\n    }\n']",Strategy;param;corresponding;SQLE;foo;State;OUNT;Strategy;persisted;new,1.280568540096283e-09;7.130438461899757e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.916308879852295, -5.4258880615234375, -4.665663242340088, -5.777090549468994, -5.46440315246582, -0.024130577221512794]",0.9761581420898438
2,"['    @Test\n    public void testShouldReadStateWithoutStrategyAndParameters() throws SQLException {\n\n        /*\n         * GIVEN a database row containing a simple feature state\n         */\n        update(dataSource, ""INSERT INTO TOGGLZ VALUES (\'F1\', 0, NULL, NULL)"");\n\n        /*\n         * WHEN the repository reads the state\n         */\n        FeatureState state = repository.getFeatureState(TestFeature.F1);\n\n        /*\n         * THEN the properties should be set like expected\n         */\n        assertNotNull(state);\n        assertEquals(TestFeature.F1, state.getFeature());\n        assertEquals(false, state.isEnabled());\n        assertEquals(null, state.getStrategyId());\n        assertEquals(0, state.getParameterNames().size());\n\n    }\n']",INTO;SQLE;Feature;the;simple;the;Without;size;state;Source,9.313225746154785e-10;7.8580342233181e-10;7.566995918750763e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.924515247344971, -5.42989444732666, -4.653988838195801, -5.803469181060791, -5.4556193351745605, -0.02415897138416767]",0.9761305451393127
2,"['    @Test\n    public void testShouldReadStateWithStrategyAndParameters() throws SQLException {\n\n        /*\n         * GIVEN a database row containing a simple feature state\n         */\n        update(dataSource, ""INSERT INTO TOGGLZ VALUES (\'F1\', 1, \'myStrategy\', \'param23=foobar\')"");\n\n        /*\n         * WHEN the repository reads the state\n         */\n        FeatureState state = repository.getFeatureState(TestFeature.F1);\n\n        /*\n         * THEN the properties should be set like expected\n         */\n        assertNotNull(state);\n        assertEquals(TestFeature.F1, state.getFeature());\n        assertEquals(true, state.isEnabled());\n        assertEquals(""myStrategy"", state.getStrategyId());\n        assertEquals(1, state.getParameterNames().size());\n        assertEquals(""foobar"", state.getParameter(""param23""));\n\n    }\n']",INTO;Source;row;foobar;Strategy;feature;reads;Equals;Strategy;get,1.367880031466484e-09;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.914748668670654, -5.433509826660156, -4.672222137451172, -5.775396347045898, -5.449441909790039, -0.024108467623591423]",0.976179838180542
2,"['    @Test\n    public void testShouldUpdateExistingDatabaseEntry() throws SQLException {\n\n        /*\n         * GIVEN a database row containing a simple feature state\n         */\n        update(dataSource, ""INSERT INTO TOGGLZ VALUES (\'F1\', 1, \'myStrategy\', \'param23=foobar\')"");\n\n        /*\n         * AND the database entries are like expected\n         */\n        assertEquals(1l, query(dataSource, ""SELECT COUNT(*) FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(1, query(dataSource, ""SELECT FEATURE_ENABLED FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(""myStrategy"", query(dataSource, ""SELECT STRATEGY_ID FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(""param23=foobar"", query(dataSource, ""SELECT STRATEGY_PARAMS FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n\n        /*\n         * WHEN the repository writes new state\n         */\n        FeatureState state = new FeatureState(TestFeature.F1)\n            .disable()\n            .setStrategyId(""someId"")\n            .setParameter(""param"", ""foo"");\n        repository.setFeatureState(state);\n\n        /*\n         * THEN the properties should be set like expected\n         */\n        assertEquals(1l, query(dataSource, ""SELECT COUNT(*) FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(0, query(dataSource, ""SELECT FEATURE_ENABLED FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(""someId"", query(dataSource, ""SELECT STRATEGY_ID FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n        assertEquals(""param=foo"", query(dataSource, ""SELECT STRATEGY_PARAMS FROM TOGGLZ WHERE FEATURE_NAME = \'F1\'""));\n\n\t}\n']",the;foobar;SQLE;VALUES;Should;ception;query;WHEN;IVEN;Existing,1.2514647096395493e-09;8.731149137020111e-10;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.8844313621521, -5.3733391761779785, -4.6755595207214355, -5.7524333000183105, -5.464401721954346, -0.024447744712233543]",0.9758486747741699
2,"['\t@Test(expected = IllegalStateException.class)\n\tpublic void testShouldPropagateTheExceptionWhenReadFails() throws SQLException {\n\n\t\t/*\n\t\t * GIVEN a database row containing a simple feature state\n\t\t */\n\t\tupdate(dataSource, ""INSERT INTO TOGGLZ VALUES (\'F1\', 0, NULL, NULL)"");\n\n\t\t/**\n\t\t * AND the datasource throws an exception when we try to get a\n\t\t * connection\n\t\t */\n\t\tDataSource spyedDataSource = Mockito.spy(dataSource);\n\t\trepository = new JDBCStateRepository(spyedDataSource, ""TOGGLZ"", true, DefaultMapSerializer.multiline());\n\t\tMockito.when(spyedDataSource.getConnection()).thenThrow(new SQLException(""Failed to get a connection""));\n\n\t\t/*\n\t\t * WHEN the repository reads the state\n\t\t */\n\t\trepository.getFeatureState(TestFeature.F1);\n\n\t\t/*\n\t\t * THEN an IllegalStateException is thrown\n\t\t */\n\t}\n']",VALUES;INSERT;ockito;expected;when;GL;Throw;repository;Exception;NULL,2.153683453798294e-09;1.57160684466362e-09;1.2078089639544487e-09;1.1641532182693481e-09;9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.938471794128418, -5.521022319793701, -4.649319171905518, -5.805522441864014, -5.3793487548828125, -0.024116147309541702]",0.9761723279953003
2,"['\t@Test(expected = IllegalStateException.class)\n\tpublic void testShouldPropagateTheExceptionWhenWriteFails() throws SQLException {\n\n\t\t/*\n\t\t * GIVEN a feature state to persist\n\t\t */\n\t\tFeatureState state = new FeatureState(TestFeature.F1).enable();\n\n\t\t/**\n\t\t * AND the datasource throws an exception when we try to get a\n\t\t * connection\n\t\t */\n\t\tDataSource spyedDataSource = Mockito.spy(dataSource);\n\t\trepository = new JDBCStateRepository(spyedDataSource, ""TOGGLZ"", true, DefaultMapSerializer.multiline());\n\t\tMockito.when(spyedDataSource.getConnection()).thenThrow(new SQLException(""Failed to get a connection""));\n\n\t\t/*\n\t\t * WHEN the feature state is persisted\n\t\t */\n\t\trepository.setFeatureState(state);\n\n\t\t/*\n\t\t * THEN an IllegalStateException is thrown\n\t\t */\n    }\n']",state;when;THEN;Throw;expected;Source;IVEN;AND;When;to,3.725290298461914e-09;1.3969838619232178e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.96184778213501, -5.528268337249756, -4.623902320861816, -5.83831262588501, -5.393388748168945, -0.024111144244670868]",0.9761773347854614
2,['    @Test\n    public void shouldUpdateWithAutoCommitEnabled() {\n        givenSomeDataSourceWithAutoCommitSetTo(true);\n        whenTheFeatureIsEnabled();\n        thenTheDatabaseShouldBeUpdated();\n    }\n'],Should;true;Database;Data;given;Source;Update;Updated;Some;The,2.3283064365386963e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.006869792938232, -5.561270713806152, -4.575920581817627, -5.8816070556640625, -5.409749984741211, -0.024154897779226303]",0.9761344790458679
2,['    @Test\n    public void shouldUpdateWithAutoCommitDisabled() {\n        givenSomeDataSourceWithAutoCommitSetTo(false);\n        whenTheFeatureIsEnabled();\n        thenTheDatabaseShouldBeUpdated();\n    }\n'],should;given;Auto;Updated;The;Commit;Source;Commit;Data;Set,1.862645149230957e-09;1.8044374883174896e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;6.402842700481415e-10;5.820766091346741e-10;0.0;-3.92901711165905e-10;-4.0745362639427185e-10,5,5,"[-6.001035213470459, -5.543696880340576, -4.579606056213379, -5.884266376495361, -5.417222499847412, -0.02415897138416767]",0.9761305451393127
2,"['    @Test\n    public void shouldDetectMissingTable() throws SQLException {\n\n        Connection connection = createConnection();\n        try {\n\n            SchemaUpdater updater = new SchemaUpdater(connection, ""TOGGLZ"", DefaultMapSerializer.multiline());\n            assertFalse(updater.doesTableExist());\n\n        } finally {\n            DbUtils.closeQuietly(connection);\n        }\n\n    }\n']",finally;SQLE;Detect;create;ater;Up;connection;ater;Exist;connection,3.259629011154175e-09;2.444721758365631e-09;2.2118911147117615e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;8.731149137020111e-10,5,5,"[-5.950224876403809, -5.443846702575684, -4.623032093048096, -5.828409671783447, -5.458470344543457, -0.024245308712124825]",0.9760461449623108
2,"['    @Test\n    public void shouldMigrateToVersion1() throws SQLException {\n\n        Connection connection = createConnection();\n        try {\n\n            SchemaUpdater updater = new SchemaUpdater(connection, ""TOGGLZ"", DefaultMapSerializer.multiline());\n            assertFalse(updater.doesTableExist());\n\n            updater.migrateToVersion1();\n\n            assertTrue(updater.doesTableExist());\n            assertTrue(querySucceeds(connection, ""SELECT FEATURE_NAME FROM TOGGLZ""));\n\n        } finally {\n            DbUtils.closeQuietly(connection);\n        }\n\n    }\n']",igrate;FROM;Schema;False;Exist;finally;Connection;close;Version;does,9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.878138542175293, -5.47578239440918, -4.672787666320801, -5.756601333618164, -5.3716535568237305, -0.024437740445137024]",0.9758585691452026
2,"['    @Test\n    public void shouldDetectVersion1() throws SQLException {\n\n        Connection connection = createConnection();\n        try {\n\n            SchemaUpdater updater = new SchemaUpdater(connection, ""TOGGLZ"", DefaultMapSerializer.multiline());\n            assertFalse(updater.doesTableExist());\n\n            assertFalse(updater.isSchemaVersion1());\n\n            updater.migrateToVersion1();\n\n            assertTrue(updater.isSchemaVersion1());\n\n        } finally {\n            DbUtils.closeQuietly(connection);\n        }\n\n    }\n']",ater;Table;Default;False;up;does;should;connection;ater;ater,7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.891214847564697, -5.470801830291748, -4.667412281036377, -5.761409759521484, -5.392175197601318, -0.02436119131743908]",0.9759332537651062
2,"['    @Test\n    public void shouldMigrateToVersion2() throws SQLException {\n\n        Connection connection = createConnection();\n        try {\n\n            // create schema version 1\n            SchemaUpdater updater = new SchemaUpdater(connection, ""TOGGLZ"", DefaultMapSerializer.multiline());\n            assertFalse(updater.doesTableExist());\n            updater.migrateToVersion1();\n            assertTrue(updater.isSchemaVersion1());\n\n            // insert two feature states\n            update(connection, ""INSERT INTO TOGGLZ VALUES (\'F1\', 1, \'ck, admin\')"");\n            update(connection, ""INSERT INTO TOGGLZ VALUES (\'F2\', 1, \'\')"");\n            update(connection, ""INSERT INTO TOGGLZ VALUES (\'F3\', 1, NULL)"");\n\n            List<Object[]> dataBefore = query(connection,\n                ""SELECT FEATURE_NAME, FEATURE_USERS FROM TOGGLZ ORDER BY FEATURE_NAME"");\n            assertEquals(3, dataBefore.size());\n            assertEquals(""F1"", dataBefore.get(0)[0]);\n            assertEquals(""ck, admin"", dataBefore.get(0)[1]);\n\n            // migrate the schema\n            updater.migrateToVersion2();\n\n            // check the new columns are present\n            assertTrue(querySucceeds(connection, ""SELECT FEATURE_NAME,STRATEGY_ID,STRATEGY_PARAMS FROM TOGGLZ""));\n\n            // check the old users column is deleted\n            assertFalse(querySucceeds(connection, ""SELECT FEATURE_USERS FROM TOGGLZ""));\n\n            // check 3 features are there after the migration\n            List<Object[]> dataAfter = query(connection,\n                ""SELECT FEATURE_NAME, STRATEGY_ID, STRATEGY_PARAMS FROM TOGGLZ ORDER BY FEATURE_NAME"");\n            assertEquals(3, dataBefore.size());\n\n            // first feature is migrated\n            assertEquals(""F1"", dataAfter.get(0)[0]);\n            assertEquals(UsernameActivationStrategy.ID, dataAfter.get(0)[1]);\n            assertEquals(""users=ck, admin"", dataAfter.get(0)[2].toString().trim());\n\n            // second feature didn\'t change\n            assertEquals(""F2"", dataAfter.get(1)[0]);\n            assertEquals(null, dataAfter.get(1)[1]);\n            assertEquals(null, dataAfter.get(1)[2]);\n\n            // second feature didn\'t change\n            assertEquals(""F3"", dataAfter.get(2)[0]);\n            assertEquals(null, dataAfter.get(2)[1]);\n            assertEquals(null, dataAfter.get(2)[2]);\n\n        } finally {\n            DbUtils.closeQuietly(connection);\n        }\n\n    }\n']",columns;TO;FEATURE;INSERT;feature;FEATURE;igrate;query;Version;GL,6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.865631580352783, -5.381481647491455, -4.675318241119385, -5.722850799560547, -5.435051918029785, -0.024692589417099953]",0.9756097793579102
2,"['    @Test\n    public void testZipObservableOfObservables() {\n        EventStream.getEventStream(""HTTP-ClusterB"", 20)\n                .groupBy(new Func1<Event, String>() {\n\n                    @Override\n                    public String call(Event e) {\n                        return e.instanceId;\n                    }\n']",Zip;Stream;instance;HTTP;Event;call;Stream;Observables;get;Event,1.862645149230957e-09;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;1.4551915228366852e-11;-1.1641532182693481e-10;-1.4551915228366852e-10;-2.3283064365386963e-10;-3.2014213502407074e-10,5,5,"[-5.943816184997559, -5.381388187408447, -4.629825115203857, -5.786925792694092, -5.471066951751709, -0.02455301769077778]",0.9757459759712219
2,"['    @Test\n    public void testCovarianceOfZip() {\n        Observable<HorrorMovie> horrors = Observable.from(new HorrorMovie());\n        Observable<CoolRating> ratings = Observable.from(new CoolRating());\n\n        Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine).toBlockingObservable().forEach(action);\n        Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine).toBlockingObservable().forEach(action);\n        Observable.<Media, Rating, ExtendedResult> zip(horrors, ratings, combine).toBlockingObservable().forEach(extendedAction);\n        Observable.<Media, Rating, Result> zip(horrors, ratings, combine).toBlockingObservable().forEach(action);\n        Observable.<Media, Rating, ExtendedResult> zip(horrors, ratings, combine).toBlockingObservable().forEach(action);\n\n        Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine);\n    }\n']",ovariance;Observable;Observable;Cool;zip;Blocking;Observable;horrors;Horror;zip,2.0954757928848267e-09;1.6880221664905548e-09;1.0331859812140465e-09;7.8580342233181e-10;6.83940015733242e-10;6.766640581190586e-10;5.966285243630409e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.905829906463623, -5.493870258331299, -4.664033889770508, -5.779181480407715, -5.421853065490723, -0.024061104282736778]",0.9762260317802429
2,['    @Test\n    public void testCovarianceOfFrom() {\n        Observable.<Movie> from(new HorrorMovie());\n        Observable.<Movie> from(new ArrayList<HorrorMovie>());\n        // Observable.<HorrorMovie>from(new Movie()); // may not compile\n    }\n'],ovariance;Horror;Array;Horror;Movie;may;Movie;Movie;from;Movie,3.259629011154175e-09;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.975297927856445, -5.553025245666504, -4.610075950622559, -5.853754997253418, -5.42597770690918, -0.023921212181448936]",0.9763626456260681
2,"['    @Test\n    public void testSortedList() {\n        Func2<Media, Media, Integer> SORT_FUNCTION = new Func2<Media, Media, Integer>() {\n\n            @Override\n            public Integer call(Media t1, Media t2) {\n                return 1;\n            }\n']",FUNCTION;call;Media;new;Fun;Fun;Media;Media;Media;orted,8.149072527885437e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.1641532182693481e-10;2.9103830456733704e-11;-5.820766091346741e-11;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-5.927762985229492, -5.421057224273682, -4.653108596801758, -5.7837018966674805, -5.427830696105957, -0.024383528158068657]",0.9759112596511841
2,"['    @Test\n    public void testWindow() {\n        final ArrayList<List<Integer>> lists = new ArrayList<List<Integer>>();\n        Observable.from(1, 2, 3, 4, 5, 6)\n                .window(3).map(new Func1<Observable<Integer>, List<Integer>>() {\n\n                    @Override\n                    public List<Integer> call(Observable<Integer> o) {\n                        return o.toList().toBlockingObservable().single();\n                    }\n']",Window;Observable;call;List;new;Observable;to;from;List;map,1.3969838619232178e-09;1.3969838619232178e-09;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.937001705169678, -5.359889030456543, -4.631836891174316, -5.775366306304932, -5.4883246421813965, -0.024616524577140808]",0.9756839871406555
2,"['    @Test\n    public void testConcatSimple() {\n        Observable<String> o1 = Observable.from(""one"", ""two"");\n        Observable<String> o2 = Observable.from(""three"", ""four"");\n\n        List<String> values = Observable.concat(o1, o2).toList().toBlockingObservable().single();\n\n        assertEquals(""one"", values.get(0));\n        assertEquals(""two"", values.get(1));\n        assertEquals(""three"", values.get(2));\n        assertEquals(""four"", values.get(3));\n    }\n']",Observable;single;three;four;four;Observable;Observable;List;Equals;values,6.548361852765083e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.5652192309498787e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.905631065368652, -5.654333114624023, -4.658667087554932, -5.695642471313477, -5.301975250244141, -0.024341529235243797]",0.9759522080421448
2,"['    @Test\n    public void testConcatWithObservableOfObservable() {\n        Observable<String> o1 = Observable.from(""one"", ""two"");\n        Observable<String> o2 = Observable.from(""three"", ""four"");\n        Observable<String> o3 = Observable.from(""five"", ""six"");\n\n        Observable<Observable<String>> os = Observable.from(o1, o2, o3);\n\n        List<String> values = Observable.concat(os).toList().toBlockingObservable().single();\n\n        assertEquals(""one"", values.get(0));\n        assertEquals(""two"", values.get(1));\n        assertEquals(""three"", values.get(2));\n        assertEquals(""four"", values.get(3));\n    }\n']",four;two;Observable;one;concat;Observable;Observable;two;Observable;os,1.7462298274040222e-09;1.6298145055770874e-09;8.731149137020111e-10;6.257323548197746e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.916255950927734, -5.6115593910217285, -4.661129951477051, -5.694182872772217, -5.352776050567627, -0.024197254329919815]",0.9760931730270386
2,"['    @Test\n    public void testConcatWithIterableOfObservable() {\n        Observable<String> o1 = Observable.from(""one"", ""two"");\n        Observable<String> o2 = Observable.from(""three"", ""four"");\n        Observable<String> o3 = Observable.from(""five"", ""six"");\n\n        @SuppressWarnings(""unchecked"")\n        Iterable<Observable<String>> is = Arrays.asList(o1, o2, o3);\n\n        List<String> values = Observable.concat(Observable.from(is)).toList().toBlockingObservable().single();\n\n        assertEquals(""one"", values.get(0));\n        assertEquals(""two"", values.get(1));\n        assertEquals(""three"", values.get(2));\n        assertEquals(""four"", values.get(3));\n    }\n']",Observable;Suppress;Arrays;Observable;Iterable;Blocking;four;Observable;Observable;single,9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.91116189956665, -5.601924896240234, -4.669457912445068, -5.691093921661377, -5.35233736038208, -0.024180032312870026]",0.9761098623275757
2,"['    @Test\n    public void testConcatCovariance() {\n        Observable<Media> o1 = Observable.<Media> from(new HorrorMovie(), new Movie());\n        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());\n\n        Observable<Observable<Media>> os = Observable.from(o1, o2);\n\n        List<Media> values = Observable.concat(os).toList().toBlockingObservable().single();\n    }\n']",ovariance;concat;Horror;single;Observable;Horror;values;Concat;os;Media,2.561137080192566e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.951358318328857, -5.528794765472412, -4.621923923492432, -5.813718318939209, -5.433087348937988, -0.024049699306488037]",0.9762371778488159
2,"['    @Test\n    public void testConcatCovariance2() {\n        Observable<Media> o1 = Observable.from(new HorrorMovie(), new Movie(), new Media());\n        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());\n\n        Observable<Observable<Media>> os = Observable.from(o1, o2);\n\n        List<Media> values = Observable.concat(os).toList().toBlockingObservable().single();\n    }\n']",Movie;Observable;Observable;from;to;new;Movie;Observable;from;os,3.4924596548080444e-09;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.953317642211914, -5.509639263153076, -4.613072872161865, -5.827680587768555, -5.447263240814209, -0.024107303470373154]",0.9761809706687927
2,"['    @Test\n    public void testConcatCovariance3() {\n        Observable<Movie> o1 = Observable.from(new HorrorMovie(), new Movie());\n        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());\n\n        List<Media> values = Observable.concat(o1, o2).toList().toBlockingObservable().single();\n        \n        assertTrue(values.get(0) instanceof HorrorMovie);\n        assertTrue(values.get(1) instanceof Movie);\n        assertTrue(values.get(2) instanceof Media);\n        assertTrue(values.get(3) instanceof HorrorMovie);\n    }\n']",ovariance;Observable;Observable;concat;Movie;Blocking;new;Media;new;List,4.6566128730773926e-09;2.240994945168495e-09;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.920186519622803, -5.558053970336914, -4.638988018035889, -5.781044006347656, -5.388735294342041, -0.024151058867573738]",0.9761383533477783
2,"[""    @Test\n    public void testConcatCovariance4() {\n\n        Observable<Movie> o1 = Observable.create(new OnSubscribeFunc<Movie>() {\n\n            @Override\n            public Subscription onSubscribe(Observer<? super Movie> o) {\n                o.onNext(new HorrorMovie());\n                o.onNext(new Movie());\n                //                o.onNext(new Media()); // correctly doesn't compile\n                o.onCompleted();\n                return Subscriptions.empty();\n            }\n""]",ovariance;unc;Completed;new;create;new;Next;on;Movie;Observer,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.907258987426758, -5.261364459991455, -4.605783462524414, -5.791931629180908, -5.495282173156738, -0.025379348546266556]",0.9749401211738586
2,"['\t@Test public void demoInterval() throws Exception {\n\tpublic void testLongObservable(Observable<Long> o, final String testname) throws Exception {\n\t\tfinal List<Long> l = new ArrayList<Long>();\n\t\tAction1<Long> onNext = new Action1<Long>() {\n\t\t\tpublic void call(Long i) { \n\t\t\t\tl.add(i);\n\t\t\t\tSystem.out.println(testname + "" got "" + i);\n\t\t\t}\n']",call;Observable;final;got;println;Long;System;List;Long;List,8.149072527885437e-10;6.984919309616089e-10;4.3655745685100555e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.4551915228366852e-11;0.0;-5.820766091346741e-11;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.940736293792725, -5.433938980102539, -4.61478328704834, -5.838886737823486, -5.426192760467529, -0.024509979411959648]",0.9757878184318542
2,"['    @Test\n    public void fromArray() {\n        String[] items = new String[] { ""one"", ""two"", ""three"" };\n        assertEquals(new Integer(3), Observable.from(items).count().toBlockingObservable().single());\n        assertEquals(""two"", Observable.from(items).skip(1).take(1).toBlockingObservable().single());\n        assertEquals(""three"", Observable.from(items).takeLast(1).toBlockingObservable().single());\n    }\n']",Observable;one;three;Array;items;Equals;single;new;from;two,1.5133991837501526e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.941464900970459, -5.630079746246338, -4.63384485244751, -5.78166389465332, -5.360864162445068, -0.023999888449907303]",0.9762858152389526
2,"['    @Test\n    public void fromIterable() {\n        ArrayList<String> items = new ArrayList<String>();\n        items.add(""one"");\n        items.add(""two"");\n        items.add(""three"");\n\n        assertEquals(new Integer(3), Observable.from(items).count().toBlockingObservable().single());\n        assertEquals(""two"", Observable.from(items).skip(1).take(1).toBlockingObservable().single());\n        assertEquals(""three"", Observable.from(items).takeLast(1).toBlockingObservable().single());\n    }\n']",two;items;three;items;Observable;Iterable;items;add;Equals;items,1.6298145055770874e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.914355754852295, -5.598155975341797, -4.644145488739014, -5.758389472961426, -5.345580101013184, -0.02423972450196743]",0.9760518074035645
2,"['    @Test\n    public void fromArityArgs3() {\n        Observable<String> items = Observable.from(""one"", ""two"", ""three"");\n\n        assertEquals(new Integer(3), items.count().toBlockingObservable().single());\n        assertEquals(""two"", items.skip(1).take(1).toBlockingObservable().single());\n        assertEquals(""three"", items.takeLast(1).toBlockingObservable().single());\n    }\n']",Observable;skip;three;single;items;Observable;Last;count;items;Blocking,1.775333657860756e-09;1.2223608791828156e-09;8.731149137020111e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.924786567687988, -5.621793270111084, -4.646982669830322, -5.747896671295166, -5.348225116729736, -0.02411545068025589]",0.9761728644371033
2,"['    @Test\n    public void fromArityArgs1() {\n        Observable<String> items = Observable.from(""one"");\n\n        assertEquals(new Integer(1), items.count().toBlockingObservable().single());\n        assertEquals(""one"", items.takeLast(1).toBlockingObservable().single());\n    }\n']",Arity;one;to;Blocking;count;Equals;from;items;Blocking;items,2.6775524020195007e-09;6.984919309616089e-10;6.402842700481415e-10;5.384208634495735e-10;4.656612873077393e-10;3.7834979593753815e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.3096723705530167e-10,5,5,"[-5.928504943847656, -5.61485481262207, -4.6360087394714355, -5.776162147521973, -5.3517045974731445, -0.02413162589073181]",0.9761571884155273
2,"['    @Test\n    public void testCreate() {\n\n        Observable<String> observable = Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(Observer<? super String> Observer) {\n                Observer.onNext(""one"");\n                Observer.onNext(""two"");\n                Observer.onNext(""three"");\n                Observer.onCompleted();\n                return Subscriptions.empty();\n            }\n']",Observable;Subscribe;empty;Observer;Subscriptions;return;Next;Next;Subscription;on,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-5.937965393066406, -5.3259687423706055, -4.6013712882995605, -5.825419902801514, -5.486624240875244, -0.02494097873568535]",0.9753676056861877
2,"['    @Test\n    public void testCountAFewItems() {\n        Observable<String> observable = Observable.from(""a"", ""b"", ""c"", ""d"");\n        observable.count().subscribe(w);\n        // we should be called only once\n        verify(w, times(1)).onNext(anyInt());\n        verify(w).onNext(4);\n        verify(w, never()).onError(any(Throwable.class));\n        verify(w, times(1)).onCompleted();\n    }\n']",Items;any;class;once;only;on;count;from;times;Error,1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.9941086769104, -5.5978851318359375, -4.6165313720703125, -5.847942352294922, -5.399389743804932, -0.02377152070403099]",0.9765086770057678
2,"['    @Test\n    public void testCountZeroItems() {\n        Observable<String> observable = Observable.empty();\n        observable.count().subscribe(w);\n        // we should be called only once\n        verify(w, times(1)).onNext(anyInt());\n        verify(w).onNext(0);\n        verify(w, never()).onError(any(Throwable.class));\n        verify(w, times(1)).onCompleted();\n    }\n']",empty;observable;Completed;any;verify;count;called;never;only;times,1.7462298274040222e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.111804395914078e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.989180088043213, -5.54957914352417, -4.606231689453125, -5.867433547973633, -5.416904926300049, -0.02393936738371849]",0.9763447642326355
2,['    @Test\n    public void testCountError() {\n        Observable<String> o = Observable.create(new OnSubscribeFunc<String>() {\n            @Override\n            public Subscription onSubscribe(Observer<? super String> obsv) {\n                obsv.onError(new RuntimeException());\n                return Subscriptions.empty();\n            }\n'],Observable;Subscribe;Runtime;Error;Observable;empty;on;obs;super;Subscriptions,5.587935447692871e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10,5,5,"[-5.950614929199219, -5.321524143218994, -4.585783958435059, -5.848006248474121, -5.494678020477295, -0.024989115074276924]",0.9753205180168152
2,"['    @Test\n    public void testFirstWithPredicateOfNoneMatchingThePredicate() {\n        Observable<Integer> observable = Observable.from(1, 3, 5, 7, 9, 7, 5, 3, 1);\n        observable.first(IS_EVEN).subscribe(w);\n        verify(w, never()).onNext(anyInt());\n        verify(w, times(1)).onCompleted();\n        verify(w, never()).onError(any(Throwable.class));\n    }\n']",subscribe;observable;never;None;The;First;verify;atching;on;on,3.958120942115784e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.97891902923584, -5.571681022644043, -4.622384071350098, -5.837096214294434, -5.400252342224121, -0.02388058975338936]",0.9764022827148438
2,"['    @Test\n    public void testFirstOfSome() {\n        Observable<Integer> observable = Observable.from(1, 2, 3);\n        observable.first().subscribe(w);\n        verify(w, times(1)).onNext(anyInt());\n        verify(w).onNext(1);\n        verify(w, times(1)).onCompleted();\n        verify(w, never()).onError(any(Throwable.class));\n    }\n']",Observable;Some;observable;Completed;first;any;never;times;verify;times,2.3283064365386963e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.975507736206055, -5.6033549308776855, -4.617251873016357, -5.831262111663818, -5.3725409507751465, -0.023967184126377106]",0.9763177633285522
2,"['    @Test\n    public void testFirstOfNone() {\n        Observable<Integer> observable = Observable.empty();\n        observable.first().subscribe(w);\n        verify(w, never()).onNext(anyInt());\n        verify(w, times(1)).onCompleted();\n        verify(w, never()).onError(any(Throwable.class));\n    }\n']",any;Observable;Next;None;Int;First;verify;any;never;first,4.423782229423523e-09;1.7462298274040222e-09;1.280568540096283e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.971009254455566, -5.565398216247559, -4.604245662689209, -5.856095790863037, -5.388767242431641, -0.0241071879863739]",0.9761810898780823
2,"['    @Test\n    public void testReduce() {\n        Observable<Integer> observable = Observable.from(1, 2, 3, 4);\n        observable.reduce(new Func2<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n']",reduce;observable;return;from;observable;Observable;call;Reduce;Fun;new,3.958120942115784e-09;1.1641532182693481e-09;7.566995918750763e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-8.731149137020111e-10;-9.313225746154785e-10,5,5,"[-5.9439544677734375, -5.418672561645508, -4.633628845214844, -5.792632102966309, -5.443569183349609, -0.024444371461868286]",0.9758519530296326
2,"['    @Test\n    public void testReduceWithInitialValue() {\n        Observable<Integer> observable = Observable.from(1, 2, 3, 4);\n        observable.reduce(50, new Func2<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n']",Observable;reduce;Initial;call;Reduce;observable;observable;return;Observable;from,1.1874362826347351e-08;2.7939677238464355e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10,5,5,"[-5.9305500984191895, -5.392080783843994, -4.647587776184082, -5.78086519241333, -5.439866542816162, -0.024518471211194992]",0.97577965259552
2,"['    @Test\n    public void testSequenceEqual() {\n        Observable<Integer> first = Observable.from(1, 2, 3);\n        Observable<Integer> second = Observable.from(1, 2, 4);\n        @SuppressWarnings(""unchecked"")\n        Observer<Boolean> result = mock(Observer.class);\n        Observable.sequenceEqual(first, second).subscribe(result);\n        verify(result, times(2)).onNext(true);\n        verify(result, times(1)).onNext(false);\n    }\n']",Next;second;Boolean;mock;on;from;class;result;Observable;result,1.1059455573558807e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.9731669425964355, -5.607597827911377, -4.621278762817383, -5.811670303344727, -5.377208709716797, -0.023953916504979134]",0.976330578327179
2,"['    @Test\n    public void testOnSubscribeFails() {\n        @SuppressWarnings(""unchecked"")\n        Observer<String> observer = mock(Observer.class);\n        final RuntimeException re = new RuntimeException(""bad impl"");\n        Observable<String> o = Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(Observer<? super String> t1) {\n                throw re;\n            }\n']",Runtime;impl;create;Observable;On;Observable;throw;unchecked;Runtime;super,5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.976731777191162, -5.425762176513672, -4.600433826446533, -5.846042156219482, -5.481581687927246, -0.024334082379937172]",0.9759595990180969
2,"['    @Test\n    public void testMaterializeDematerializeChaining() {\n        Observable<Integer> obs = Observable.just(1);\n        Observable<Integer> chained = obs.materialize().dematerialize();\n\n        @SuppressWarnings(""unchecked"")\n        Observer<Integer> observer = mock(Observer.class);\n        chained.subscribe(observer);\n\n        verify(observer, times(1)).onNext(1);\n        verify(observer, times(1)).onCompleted();\n        verify(observer, times(0)).onError(any(Throwable.class));\n    }\n']",Observable;Materialize;Observer;just;any;Completed;mock;observer;chained;on,1.280568540096283e-09;1.0477378964424133e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.960236072540283, -5.561247825622559, -4.637618064880371, -5.806153297424316, -5.400538921356201, -0.02391073666512966]",0.9763728380203247
2,"['    @Test\n    public void testCustomObservableWithErrorInObserverAsynchronous() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n        Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(final Observer<? super String> observer) {\n                final BooleanSubscription s = new BooleanSubscription();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            if (!s.isUnsubscribed()) {\n                                observer.onNext(""1"");\n                                observer.onNext(""2"");\n                                observer.onNext(""three"");\n                                observer.onNext(""4"");\n                                observer.onCompleted();\n                            }\n                        } finally {\n                            latch.countDown();\n                        }\n                    }\n']",three;new;Next;Custom;new;Throwable;final;unc;observer;Down,9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.915945529937744, -5.150677680969238, -4.600143909454346, -5.789698123931885, -5.579931735992432, -0.025701230391860008]",0.974626362323761
2,"['    @Test\n    public void testCustomObservableWithErrorInObserverSynchronous() {\n        final AtomicInteger count = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n        Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(Observer<? super String> observer) {\n                observer.onNext(""1"");\n                observer.onNext(""2"");\n                observer.onNext(""three"");\n                observer.onNext(""4"");\n                observer.onCompleted();\n                return Subscriptions.empty();\n            }\n']",Custom;Observer;Subscribe;ynchronous;On;Atomic;Next;In;on;Throwable,1.4551915228366852e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.9701313972473145, -5.367681503295898, -4.60772180557251, -5.839582443237305, -5.510768413543701, -0.02444274164736271]",0.9758535623550415
2,"['    @Test\n    public void testCustomObservableWithErrorInObservableSynchronous() {\n        final AtomicInteger count = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n        Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(Observer<? super String> observer) {\n                observer.onNext(""1"");\n                observer.onNext(""2"");\n                throw new NumberFormatException();\n            }\n']",on;Atomic;Error;Observable;final;unc;Custom;ynchronous;throw;Subscribe,1.1059455573558807e-09;8.731149137020111e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.94706392288208, -5.351963043212891, -4.61815881729126, -5.821771144866943, -5.4936137199401855, -0.024598613381385803]",0.9757013320922852
2,"['    @Test\n    public void testPublish() throws InterruptedException {\n        final AtomicInteger counter = new AtomicInteger();\n        ConnectableObservable<String> o = Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(final Observer<? super String> observer) {\n                final BooleanSubscription subscription = new BooleanSubscription();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        counter.incrementAndGet();\n                        observer.onNext(""one"");\n                        observer.onCompleted();\n                    }\n']",Subscribe;observer;observer;on;able;Get;run;Subscription;new;Observer,1.1350493878126144e-09;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.909776210784912, -5.172769546508789, -4.585752010345459, -5.807835578918457, -5.539079189300537, -0.025842849165201187]",0.9744881987571716
2,"['    @Test\n    public void testReplay() throws InterruptedException {\n        final AtomicInteger counter = new AtomicInteger();\n        ConnectableObservable<String> o = Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(final Observer<? super String> observer) {\n                final BooleanSubscription subscription = new BooleanSubscription();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        counter.incrementAndGet();\n                        observer.onNext(""one"");\n                        observer.onCompleted();\n                    }\n']",Interrupted;on;Subscribe;observer;Subscription;Atomic;Thread;subscription;Boolean;Observer,2.7939677238464355e-09;1.4551915228366852e-09;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.901689052581787, -5.154427528381348, -4.585174560546875, -5.801241397857666, -5.538393020629883, -0.02600245177745819]",0.9743328094482422
2,"['    @Test\n    public void testCache() throws InterruptedException {\n        final AtomicInteger counter = new AtomicInteger();\n        Observable<String> o = Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(final Observer<? super String> observer) {\n                final BooleanSubscription subscription = new BooleanSubscription();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        counter.incrementAndGet();\n                        observer.onNext(""one"");\n                        observer.onCompleted();\n                    }\n']",Interrupted;Exception;Subscription;on;Run;unc;Subscription;counter;Boolean;increment,1.862645149230957e-09;7.566995918750763e-10;7.421476766467094e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.891471862792969, -5.138665676116943, -4.58302640914917, -5.798984050750732, -5.5333147048950195, -0.02617538347840309]",0.9741642475128174
2,"['    @Test\n    public void testErrorThrownWithoutErrorHandlerSynchronous() {\n        try {\n            Observable.error(new RuntimeException(""failure"")).subscribe(new Action1<Object>() {\n\n                @Override\n                public void call(Object t1) {\n                    // won\'t get anything\n                }\n']",subscribe;Error;failure;new;Handler;Thrown;won't;Object;Observable;anything,3.14321368932724e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.2223608791828156e-09;1.1932570487260818e-09;1.1059455573558807e-09;6.984919309616089e-10;2.3283064365386963e-10;5.820766091346741e-11,5,5,"[-5.935504913330078, -5.261725425720215, -4.587833404541016, -5.831595420837402, -5.5068278312683105, -0.025315307080745697]",0.9750025272369385
2,"['    @Test\n    public void testErrorThrownWithoutErrorHandlerAsynchronous() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n        Observable.create(new OnSubscribeFunc<String>() {\n\n            @Override\n            public Subscription onSubscribe(final Observer<? super String> observer) {\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            observer.onError(new Error(""failure""));\n                        } catch (Throwable e) {\n                            // without an onError handler it has to just throw on whatever thread invokes it\n                            exception.set(e);\n                        }\n                        latch.countDown();\n                    }\n']",Thrown;to;count;handler;On;it;Handler;Observable;invokes;final,1.5133991837501526e-09;1.1641532182693481e-09;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.905375957489014, -5.117011070251465, -4.585704803466797, -5.802094459533691, -5.572754859924316, -0.02607341669499874]",0.9742635488510132
2,"['    @Test\n    public void testTakeWithErrorInObserver() {\n        final AtomicInteger count = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n        Observable.from(""1"", ""2"", ""three"", ""4"").take(3).subscribe(new Observer<String>() {\n\n            @Override\n            public void onCompleted() {\n                System.out.println(""completed"");\n            }\n']",subscribe;Observer;Atomic;new;new;completed;Take;Reference;Atomic;final,1.1641532182693481e-09;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.971393585205078, -5.462137222290039, -4.621586322784424, -5.813632011413574, -5.45397424697876, -0.024188295006752014]",0.9761017560958862
2,"['    @Test\n    public void testOfType() {\n        Observable<String> observable = Observable.from(1, ""abc"", false, 2L).ofType(String.class);\n\n        @SuppressWarnings(""unchecked"")\n        Observer<Object> aObserver = mock(Observer.class);\n        observable.subscribe(aObserver);\n        verify(aObserver, never()).onNext(1);\n        verify(aObserver, times(1)).onNext(""abc"");\n        verify(aObserver, never()).onNext(false);\n        verify(aObserver, never()).onNext(2L);\n        verify(aObserver, never()).onError(\n                org.mockito.Matchers.any(Throwable.class));\n        verify(aObserver, times(1)).onCompleted();\n    }\n']",of;observable;from;any;on;ockito;times;false;Observer;on,4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.956218719482422, -5.548172473907471, -4.645934581756592, -5.7962727546691895, -5.395377159118652, -0.023945653811097145]",0.9763387441635132
2,"['    @Test\n    public void testOfTypeWithPolymorphism() {\n        ArrayList<Integer> l1 = new ArrayList<Integer>();\n        l1.add(1);\n        LinkedList<Integer> l2 = new LinkedList<Integer>();\n        l2.add(2);\n\n        @SuppressWarnings(""rawtypes"")\n        Observable<List> observable = Observable.<Object>from(l1, l2, ""123"").ofType(List.class);\n\n        @SuppressWarnings(""unchecked"")\n        Observer<Object> aObserver = mock(Observer.class);\n        observable.subscribe(aObserver);\n        verify(aObserver, times(1)).onNext(l1);\n        verify(aObserver, times(1)).onNext(l2);\n        verify(aObserver, never()).onNext(""123"");\n        verify(aObserver, never()).onError(\n                org.mockito.Matchers.any(Throwable.class));\n        verify(aObserver, times(1)).onCompleted();\n    }\n']",Observable;observable;Observer;rawtypes;Observer;on;add;times;Observable;subscribe,2.153683453798294e-09;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.946944236755371, -5.497959613800049, -4.6453537940979, -5.7930192947387695, -5.444884300231934, -0.023967068642377853]",0.9763178825378418
2,"['    @Test\n    public void testThrottle() {\n        @SuppressWarnings(""unchecked"")\n        Observer<Integer> observer = mock(Observer.class);\n        TestScheduler s = new TestScheduler();\n        PublishSubject<Integer> o = PublishSubject.create();\n        o.throttleFirst(500, TimeUnit.MILLISECONDS, s).subscribe(observer);\n\n        // send events with simulated time increments\n        s.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        o.onNext(1); // deliver\n        o.onNext(2); // skip\n        s.advanceTimeTo(501, TimeUnit.MILLISECONDS);\n        o.onNext(3); // deliver\n        s.advanceTimeTo(600, TimeUnit.MILLISECONDS);\n        o.onNext(4); // skip\n        s.advanceTimeTo(700, TimeUnit.MILLISECONDS);\n        o.onNext(5); // skip\n        o.onNext(6); // skip\n        s.advanceTimeTo(1001, TimeUnit.MILLISECONDS);\n        o.onNext(7); // deliver\n        s.advanceTimeTo(1501, TimeUnit.MILLISECONDS);\n        o.onCompleted();\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer).onNext(1);\n        inOrder.verify(observer).onNext(3);\n        inOrder.verify(observer).onNext(7);\n        inOrder.verify(observer).onCompleted();\n        inOrder.verifyNoMoreInteractions();\n    }\n']",Suppress;time;ILLISECONDS;Next;ILLISECONDS;observer;advance;observer;ILLISECONDS;cheduler,1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.548361852765083e-10;4.802132025361061e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.9446187019348145, -5.44517183303833, -4.618741035461426, -5.834301948547363, -5.478111743927002, -0.024195276200771332]",0.9760950803756714
2,"['    @Test\n    public void testObserveOnWithNewThreadScheduler() {\n        final AtomicInteger count = new AtomicInteger();\n        final int _multiple = 99;\n\n        Observable.range(1, 100000).map(new Func1<Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1) {\n                return t1 * _multiple;\n            }\n']",Observable;On;map;multiple;return;new;Thread;final;final;call,3.958120942115784e-09;1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;5.165929906070232e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.9552130699157715, -5.393337726593018, -4.62665319442749, -5.817066192626953, -5.47577428817749, -0.02438480779528618]",0.9759101867675781
2,"['    @Test\n    public void testObserveOnWithThreadPoolScheduler() {\n        final AtomicInteger count = new AtomicInteger();\n        final int _multiple = 99;\n\n        Observable.range(1, 100000).map(new Func1<Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1) {\n                return t1 * _multiple;\n            }\n']",new;Observe;multiple;Pool;map;return;multiple;count;new;range,9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;8.731149137020111e-11;0.0,5,5,"[-5.958991527557373, -5.394598007202148, -4.6257524490356445, -5.818134307861328, -5.47840690612793, -0.024363400414586067]",0.9759309887886047
2,"['    @Test\n    public void testObserveOnOrderingConcurrency() {\n        final AtomicInteger count = new AtomicInteger();\n        final int _multiple = 99;\n\n        Observable.range(1, 10000).map(new Func1<Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1) {\n                if (randomIntFrom0to100() > 98) {\n                    try {\n                        Thread.sleep(2);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                return t1 * _multiple;\n            }\n']",Observe;multiple;return;Thread;map;Interrupted;to;Stack;final;Atomic,1.3387762010097504e-09;8.149072527885437e-10;6.693881005048752e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.908055305480957, -5.23754358291626, -4.629114151000977, -5.774456024169922, -5.511509418487549, -0.025256261229515076]",0.9750598669052124
2,['    @Test\n    public void testCovarianceOfMerge() {\n        Observable<HorrorMovie> horrors = Observable.from(new HorrorMovie());\n        Observable<Observable<HorrorMovie>> metaHorrors = Observable.just(horrors);\n        Observable.<Media> merge(metaHorrors);\n    }\n'],Observable;just;Media;Horrors;Observable;Observable;from;Horror;Movie;meta,1.1059455573558807e-09;8.440110832452774e-10;6.984919309616089e-10;6.693881005048752e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.999568939208984, -5.533689975738525, -4.577219009399414, -5.869658946990967, -5.4685378074646, -0.024042483419179916]",0.9762440919876099
2,"['    @Test\n    public void testMergeCovariance() {\n        Observable<Media> o1 = Observable.<Media> from(new HorrorMovie(), new Movie());\n        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());\n\n        Observable<Observable<Media>> os = Observable.from(o1, o2);\n\n        List<Media> values = Observable.merge(os).toList().toBlockingObservable().single();\n    }\n']",ovariance;os;Merge;Movie;Observable;Observable;Media;from;List;Observable,5.587935447692871e-09;1.3387762010097504e-09;1.1641532182693481e-09;9.313225746154785e-10;8.440110832452774e-10;6.693881005048752e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.953476905822754, -5.525546073913574, -4.621232032775879, -5.815669059753418, -5.440113067626953, -0.024026889353990555]",0.9762593507766724
2,"['    @Test\n    public void testMergeCovariance2() {\n        Observable<Media> o1 = Observable.from(new HorrorMovie(), new Movie(), new Media());\n        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());\n\n        Observable<Observable<Media>> os = Observable.from(o1, o2);\n\n        List<Media> values = Observable.merge(os).toList().toBlockingObservable().single();\n    }\n']",ovariance;Merge;Horror;Observable;Movie;Media;Media;Media;new;Observable,2.7939677238464355e-09;1.6298145055770874e-09;1.280568540096283e-09;1.2514647096395493e-09;9.313225746154785e-10;7.8580342233181e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.9566874504089355, -5.5131659507751465, -4.612637519836426, -5.830531120300293, -5.4505295753479, -0.024065177887678146]",0.9762220978736877
2,"['    @Test\n    public void testMergeCovariance3() {\n        Observable<Movie> o1 = Observable.from(new HorrorMovie(), new Movie());\n        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());\n\n        List<Media> values = Observable.merge(o1, o2).toList().toBlockingObservable().single();\n        \n        assertTrue(values.get(0) instanceof HorrorMovie);\n        assertTrue(values.get(1) instanceof Movie);\n        assertTrue(values.get(2) instanceof Media);\n        assertTrue(values.get(3) instanceof HorrorMovie);\n    }\n']",Observable;single;from;Movie;new;Movie;values;Blocking;from;Observable,1.1641532182693481e-09;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9270830154418945, -5.5638556480407715, -4.636155128479004, -5.785839557647705, -5.39462947845459, -0.02409461885690689]",0.9761932492256165
2,"[""    @Test\n    public void testMergeCovariance4() {\n\n        Observable<Movie> o1 = Observable.create(new OnSubscribeFunc<Movie>() {\n\n            @Override\n            public Subscription onSubscribe(Observer<? super Movie> o) {\n                o.onNext(new HorrorMovie());\n                o.onNext(new Movie());\n                //                o.onNext(new Media()); // correctly doesn't compile\n                o.onCompleted();\n                return Subscriptions.empty();\n            }\n""]",Observable;ovariance;Merge;Horror;unc;Completed;new;Subscriptions;Subscribe;on,3.6088749766349792e-09;2.2118911147117615e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;1.2514647096395493e-09;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.9049882888793945, -5.248172283172607, -4.602559566497803, -5.790964126586914, -5.49912166595459, -0.025476273149251938]",0.9748455286026001
2,"['    @Test\n    public void reduceInts() {\n        Observable<Integer> o = Observable.from(1, 2, 3);\n        int value = o.reduce(new Func2<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n']",reduce;value;call;Fun;return;new;reduce;from;Int;Observable,1.862645149230957e-09;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;-1.1641532182693481e-10;-5.820766091346741e-10;-5.820766091346741e-10;-8.731149137020111e-10;-1.3969838619232178e-09,5,5,"[-5.960030555725098, -5.454179286956787, -4.635519981384277, -5.792301654815674, -5.448495864868164, -0.02420353703200817]",0.9760870337486267
2,"['    @Test\n    public void reduceWithObjects() {\n        Observable<Movie> horrorMovies = Observable.<Movie> from(new HorrorMovie());\n\n        Func2<Movie, Movie, Movie> chooseSecondMovie =\n                new Func2<Movie, Movie, Movie>() {\n                    public Movie call(Movie t1, Movie t2) {\n                        return t2;\n                    }\n']",Fun;reduce;Horror;Movie;Movie;Movie;Movie;Movie;Movie;from,2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;8.36735125631094e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.918519973754883, -5.381335258483887, -4.634307384490967, -5.7735724449157715, -5.443994522094727, -0.024737946689128876]",0.9755655527114868
2,"['    @Test\n    public void reduceWithCovariantObjects() {\n        Observable<Movie> horrorMovies = Observable.<Movie> from(new HorrorMovie());\n\n        Func2<Movie, Movie, Movie> chooseSecondMovie =\n                new Func2<Movie, Movie, Movie>() {\n                    public Movie call(Movie t1, Movie t2) {\n                        return t2;\n                    }\n']",ovariant;Observable;reduce;Observable;ovies;choose;Movie;Movie;Movie;Fun,2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6880221664905548e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10,5,5,"[-5.913883209228516, -5.382857799530029, -4.634105682373047, -5.773159503936768, -5.438187599182129, -0.02477271854877472]",0.9755315780639648
2,['    @Test\n    public void reduceCovariance() {\n        // must type it to <Movie>\n        Observable<Movie> horrorMovies = Observable.<Movie> from(new HorrorMovie());\n        libraryFunctionActingOnMovieObservables(horrorMovies);\n    }\n'],ovariance;type;Acting;ovies;ovies;Observables;Movie;horror;new;Movie,2.444721758365631e-09;1.6298145055770874e-09;1.280568540096283e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.989154815673828, -5.535902976989746, -4.583096981048584, -5.873043537139893, -5.441133975982666, -0.024108700454235077]",0.9761794805526733
2,"['    @Test\n    public void testCovarianceOfCombineLatest() {\n        Observable<HorrorMovie> horrors = Observable.from(new HorrorMovie());\n        Observable<CoolRating> ratings = Observable.from(new CoolRating());\n\n        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);\n        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);\n        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(extendedAction);\n        Observable.<Media, Rating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);\n        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);\n\n        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine);\n    }\n']",Each;Observable;Observable;Observable;to;combine;Cool;Observable;Movie;ratings,1.3969838619232178e-09;1.1932570487260818e-09;1.1423253454267979e-09;9.167706593871117e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.929389476776123, -5.507680892944336, -4.658353328704834, -5.798387050628662, -5.438490867614746, -0.02385847456753254]",0.9764238595962524
2,"['    @Test\n    public void testThrottle() {\n        @SuppressWarnings(""unchecked"")\n        Observer<Integer> observer = mock(Observer.class);\n        TestScheduler s = new TestScheduler();\n        PublishSubject<Integer> o = PublishSubject.create();\n        o.throttleLast(500, TimeUnit.MILLISECONDS, s).subscribe(observer);\n\n        // send events with simulated time increments\n        s.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        o.onNext(1); // skip\n        o.onNext(2); // deliver\n        s.advanceTimeTo(501, TimeUnit.MILLISECONDS);\n        o.onNext(3); // skip\n        s.advanceTimeTo(600, TimeUnit.MILLISECONDS);\n        o.onNext(4); // skip\n        s.advanceTimeTo(700, TimeUnit.MILLISECONDS);\n        o.onNext(5); // skip\n        o.onNext(6); // deliver\n        s.advanceTimeTo(1001, TimeUnit.MILLISECONDS);\n        o.onNext(7); // deliver\n        s.advanceTimeTo(1501, TimeUnit.MILLISECONDS);\n        o.onCompleted();\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer).onNext(2);\n        inOrder.verify(observer).onNext(6);\n        inOrder.verify(observer).onNext(7);\n        inOrder.verify(observer).onCompleted();\n        inOrder.verifyNoMoreInteractions();\n    }\n']",Throttle;advance;subscribe;arnings;advance;ILLISECONDS;ILLISECONDS;deliver;Observer;ILLISECONDS,1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;7.275957614183426e-10;5.675246939063072e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.94525671005249, -5.446559906005859, -4.61884069442749, -5.833611488342285, -5.477503776550293, -0.02419108711183071]",0.9760991930961609
2,"['    @Test\n    public void testUnsubscribeScan() {\n\n        EventStream.getEventStream(""HTTP-ClusterB"", 20)\n                .scan(new HashMap<String, String>(), new Func2<Map<String, String>, Event, Map<String, String>>() {\n\n                    @Override\n                    public Map<String, String> call(Map<String, String> accum, Event perInstanceEvent) {\n                        accum.put(""instance"", perInstanceEvent.instanceId);\n                        return accum;\n                    }\n\n                })\n                .take(10)\n                .toBlockingObservable().forEach(new Action1<Map<String, String>>() {\n\n                    @Override\n                    public void call(Map<String, String> v) {\n                        System.out.println(v);\n                    }\n']",Event;println;accum;System;Event;accum;Cluster;Event;per;instance,6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.879464149475098, -5.180465221405029, -4.632394313812256, -5.739562511444092, -5.5265116691589355, -0.025676017627120018]",0.9746509194374084
2,"['    @Test\n    public void startWith1() {\n        List<String> values = Observable.from(""one"", ""two"").startWith(""zero"").toList().toBlockingObservable().single();\n\n        assertEquals(""zero"", values.get(0));\n        assertEquals(""two"", values.get(2));\n    }\n']",single;from;start;zero;zero;List;get;Blocking;values;get,9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.3096723705530167e-10,5,5,"[-5.95796537399292, -5.66749906539917, -4.6425251960754395, -5.749172210693359, -5.349711894989014, -0.023893043398857117]",0.97639000415802
2,"['    @Test\n    public void startWithIterable() {\n        List<String> li = new ArrayList<String>();\n        li.add(""alpha"");\n        li.add(""beta"");\n        List<String> values = Observable.from(""one"", ""two"").startWith(li).toList().toBlockingObservable().single();\n\n        assertEquals(""alpha"", values.get(0));\n        assertEquals(""beta"", values.get(1));\n        assertEquals(""one"", values.get(2));\n        assertEquals(""two"", values.get(3));\n    }\n']",Equals;li;Equals;alpha;Iterable;li;Observable;to;add;values,6.693881005048752e-10;5.529727786779404e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.9203643798828125, -5.605006217956543, -4.646648406982422, -5.73732852935791, -5.347358703613281, -0.02423262596130371]",0.9760586023330688
2,"['    @Test\n    public void testThrottle() {\n        @SuppressWarnings(""unchecked"")\n        Observer<Integer> observer = mock(Observer.class);\n        TestScheduler s = new TestScheduler();\n        PublishSubject<Integer> o = PublishSubject.create();\n        o.throttleWithTimeout(500, TimeUnit.MILLISECONDS, s).subscribe(observer);\n\n        // send events with simulated time increments\n        s.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        o.onNext(1); // skip\n        o.onNext(2); // deliver\n        s.advanceTimeTo(501, TimeUnit.MILLISECONDS);\n        o.onNext(3); // skip\n        s.advanceTimeTo(600, TimeUnit.MILLISECONDS);\n        o.onNext(4); // skip\n        s.advanceTimeTo(700, TimeUnit.MILLISECONDS);\n        o.onNext(5); // skip\n        o.onNext(6); // deliver at 1300 after 500ms has passed since onNext(5)\n        s.advanceTimeTo(1300, TimeUnit.MILLISECONDS);\n        o.onNext(7); // deliver\n        s.advanceTimeTo(1800, TimeUnit.MILLISECONDS);\n        o.onCompleted();\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer).onNext(2);\n        inOrder.verify(observer).onNext(6);\n        inOrder.verify(observer).onNext(7);\n        inOrder.verify(observer).onCompleted();\n        inOrder.verifyNoMoreInteractions();\n    }\n']",Timeout;throttle;observer;deliver;increments;ILLISECONDS;Publish;Completed;Time;Next,1.7462298274040222e-09;1.2223608791828156e-09;8.731149137020111e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;3.637978807091713e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.939548492431641, -5.459488391876221, -4.6224260330200195, -5.8193359375, -5.465726375579834, -0.024207260459661484]",0.9760832786560059
2,"['    @Test\n    public void testTakeUnsubscribesOnGroupBy() {\n        Observable.merge(\n                EventStream.getEventStream(""HTTP-ClusterA"", 50),\n                EventStream.getEventStream(""HTTP-ClusterB"", 20))\n                // group by type (2 clusters)\n                .groupBy(new Func1<Event, String>() {\n\n                    @Override\n                    public String call(Event event) {\n                        return event.type;\n                    }\n']",Unsubscribes;type;Group;Observable;On;call;merge;group;get;Event,5.005858838558197e-09;9.89530235528946e-10;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.929049968719482, -5.290083408355713, -4.614383697509766, -5.78982400894165, -5.517845630645752, -0.0249934159219265]",0.9753163456916809
2,"['    @Test\n    public void testTakeUnsubscribesOnFlatMapOfGroupBy() {\n        Observable.merge(\n                EventStream.getEventStream(""HTTP-ClusterA"", 50),\n                EventStream.getEventStream(""HTTP-ClusterB"", 20))\n                // group by type (2 clusters)\n                .groupBy(new Func1<Event, String>() {\n\n                    @Override\n                    public String call(Event event) {\n                        return event.type;\n                    }\n']",Unsubscribes;Stream;Take;Fun;Stream;Map;By;Cluster;type;merge,2.1245796233415604e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.924994468688965, -5.307309150695801, -4.624101638793945, -5.781277656555176, -5.500275611877441, -0.0249178409576416]",0.9753900170326233
2,['    @BeforeEach\n    public void setup() {\n        this.unirestInstance = Unirest.spawnInstance();\n        this.unirestInstance.config().interceptor(interceptor);\n    }\n'],Before;unirest;Instance;this;setup;this;Instance;unirest;interceptor;config,4.6566128730773926e-09;3.3178366720676422e-09;9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;3.2014213502407074e-10;1.7462298274040222e-10;1.4551915228366852e-10;0.0;-2.9103830456733704e-11,5,5,"[-6.019925594329834, -5.581235885620117, -4.565121173858643, -5.901028633117676, -5.4208221435546875, -0.02405342273414135]",0.9762334227561951
2,"['    @Test\n        public String writeValue(Object value) {\n            return ""derp"";\n        }\n']",Value;value;return;Object;der;write,2.3283064365386963e-09;1.979060471057892e-09;6.984919309616089e-10;-1.7462298274040222e-10;-3.725290298461914e-09;-4.6566128730773926e-09,5,5,"[-6.016841411590576, -5.550337314605713, -4.5649895668029785, -5.882059097290039, -5.436325550079346, -0.024167697876691818]",0.9761220216751099
2,"['    @Test\n    public void expectAnyPath(){\n        client.expect(HttpMethod.GET)\n                .thenReturn(""woh"");\n\n        Unirest.get(path).asEmpty();\n\n        client.verifyAll();\n    }\n']",Path;Method;expect;path;client;expect;All;Return;oh;as,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10,5,5,"[-5.999166488647461, -5.4904656410217285, -4.576627731323242, -5.876893043518066, -5.471160888671875, -0.024196438491344452]",0.9760938286781311
2,['    @Test\n    public void setTimeoutsAndCustomClient() {\n        try {\n            Unirest.config().connectTimeout(1000).socketTimeout(2000);\n        } catch (Exception e) {\n            fail();\n        }\n\n        try {\n            Unirest.config().asyncClient(HttpAsyncClientBuilder.create().build());\n        } catch (Exception e) {\n            fail();\n        }\n\n        try {\n            Unirest.config().asyncClient(HttpAsyncClientBuilder.create().build());\n            Unirest.config().connectTimeout(1000).socketTimeout(2000);\n            fail();\n        } catch (Exception e) {\n            // Ok\n        }\n\n        try {\n            Unirest.config().httpClient(HttpClientBuilder.create().build());\n            Unirest.config().connectTimeout(1000).socketTimeout(2000);\n            fail();\n        } catch (Exception e) {\n            // Ok\n        }\n    }\n'],socket;Timeout;set;socket;socket;async;http;connect;connect;Unirest,1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.729372449219227e-10,5,5,"[-5.99425745010376, -5.444443225860596, -4.605957984924316, -5.874548435211182, -5.4873151779174805, -0.024041086435317993]",0.9762455821037292
2,"['    @Test\n        public void process(org.apache.http.HttpRequest httpRequest, org.apache.http.protocol.HttpContext httpContext) throws HttpException, IOException {\n            httpRequest.addHeader(""x-custom"", ""foo"");\n        }\n']",apache;apache;add;protocol;Request;http;ttp;Exception;IOException;Request,1.280568540096283e-09;1.0477378964424133e-09;9.89530235528946e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;1.7462298274040222e-10,5,5,"[-6.014627933502197, -5.5758185386657715, -4.634708881378174, -5.835404872894287, -5.444974899291992, -0.023453092202544212]",0.9768198132514954
2,['    @BeforeEach\n    public void setUp() {\n        super.setUp();\n    }\n'],Each;Up;Up;super;set;set;Before,1.6298145055770874e-09;8.149072527885437e-10;6.984919309616089e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-6.984919309616089e-10;-3.725290298461914e-09,5,5,"[-6.049905776977539, -5.594235420227051, -4.520806789398193, -5.927404880523682, -5.425689220428467, -0.024318261072039604]",0.9759750366210938
2,['    @AfterEach\n    public void tearDown() {\n        super.tearDown();\n        requestConfigUsed = false;\n    }\n'],Each;After;Used;Down;false;Down;ear;Config;super;request,4.190951585769653e-09;2.7939677238464355e-09;1.4551915228366852e-09;1.3969838619232178e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-6.0802812576293945, -5.59901762008667, -4.505700588226318, -5.945400714874268, -5.473801136016846, -0.024136977270245552]",0.9761520028114319
2,['    @Test\n        public Object getClient() {\n            return null;\n        }\n'],Client;return;null;Object;get,6.984919309616089e-10;6.984919309616089e-10;-1.1641532182693481e-10;-5.238689482212067e-10;-1.2223608791828156e-09,5,5,"[-6.028918743133545, -5.542507648468018, -4.549161434173584, -5.886889457702637, -5.445310592651367, -0.0242854505777359]",0.9760070443153381
2,"['    @Test\n    public void testMangler_encoding() {\n        assertLinkSurvives(""http://localhost/test%2Fthis"");\n    }\n']",Survives;angler;http;Link;this;localhost;encoding,5.3551048040390015e-09;1.6298145055770874e-09;9.313225746154785e-10;-1.1641532182693481e-10;-1.280568540096283e-09;-1.3969838619232178e-09;-3.8708094507455826e-09,5,5,"[-6.0244364738464355, -5.661829948425293, -4.597425937652588, -5.884195327758789, -5.354950428009033, -0.02376069501042366]",0.9765193462371826
2,"['    @Test\n    public void testMangler_fragment() {\n        assertLinkSurvives(""http://localhost/test?a=b#fragment"");\n    }\n']",Link;angler;localhost;http;fragment;Survives;fragment,1.3387762010097504e-09;-4.656612873077393e-10;-2.3283064365386963e-09;-2.7939677238464355e-09;-5.0640664994716644e-09;-5.122274160385132e-09;-5.122274160385132e-09,5,5,"[-6.051610469818115, -5.737187385559082, -4.613731384277344, -5.866569519042969, -5.31606912612915, -0.023511545732617378]",0.9767628312110901
2,"['    @Test\n    public void basicBoringUri() {\n        assertLinkSurvives(""http://localhost/test?a=b"");\n    }\n']",Link;Survives;ri;oring;basic;http;localhost,1.3969838619232178e-09;8.149072527885437e-10;4.656612873077393e-10;0.0;-1.862645149230957e-09;-1.862645149230957e-09;-2.7939677238464355e-09,5,5,"[-6.061608791351318, -5.755866050720215, -4.606601238250732, -5.861127853393555, -5.305321216583252, -0.023569297045469284]",0.9767063856124878
2,"['    @Test\n    public void semicolonsAsParam() {\n        assertLinkSurvives(""http://localhost/test?a=b;foo=bar"");\n    }\n']",localhost;As;Link;Param;http;Survives;bar;foo;semicolons,2.7939677238464355e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-9.313225746154785e-10;-3.026798367500305e-09;-4.773028194904327e-09,5,5,"[-6.086277484893799, -5.909509181976318, -4.596536159515381, -5.75391149520874, -5.172951698303223, -0.024202723056077957]",0.9760876893997192
2,"['    @Test\n    public void utf8Chars(){\n        assertLinkSurvives(""http://localhost/test?foo=ã\x81\x93ã\x82\x93ã\x81«ã\x81¡ã\x81¯"");\n    }\n']",Â¯;Ã£;Â«;Ã£;foo;ut;Ã£;Ã£;Ã£;http,3.259629011154175e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-6.022252559661865, -5.579446792602539, -4.595802307128906, -5.860880374908447, -5.447722911834717, -0.02372705191373825]",0.9765522480010986
2,['    @AfterEach\n    public void before(){\n        Unirest.shutDown(true);\n    }\n'],Each;true;Down;before;Unirest;shut;After,3.841705620288849e-09;2.2118911147117615e-09;1.1641532182693481e-09;9.313225746154785e-10;-4.656612873077393e-10;-9.313225746154785e-10;-2.7939677238464355e-09,5,5,"[-6.051826477050781, -5.604337215423584, -4.5156168937683105, -5.925549030303955, -5.426079750061035, -0.024336759001016617]",0.9759570956230164
2,"['    @Test\n        public String toString(){\n            return ""Hello World"";\n        }\n']",return;Hello;World;to,9.89530235528946e-10;2.3283064365386963e-10;-1.862645149230957e-09;-3.259629011154175e-09,5,5,"[-6.00935697555542, -5.603861331939697, -4.597851753234863, -5.848719596862793, -5.385396480560303, -0.023964274674654007]",0.9763206839561462
2,['    @Test\n        public Date getDate() {\n            return date;\n        }\n'],return;Date;date;Date;get,9.313225746154785e-10;3.4924596548080444e-10;-4.656612873077393e-10;-1.1641532182693481e-09;-1.3969838619232178e-09,5,5,"[-6.030079364776611, -5.576267719268799, -4.5569915771484375, -5.877365589141846, -5.430802345275879, -0.024156760424375534]",0.9761326909065247
2,['    @AfterEach\n    public void tearDown() {\n        super.tearDown();\n        asyncDone = false;\n        status = 0;\n        File file = test.toFile();\n        if(file.exists()){\n            file.delete();\n        }\n    }\n'],After;false;Down;if;delete;Down;to;file;exists;File,4.190951585769653e-09;7.421476766467094e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;5.820766091346741e-11;-1.1641532182693481e-10;-1.3096723705530167e-10;-1.7462298274040222e-10,5,5,"[-6.065468788146973, -5.559814929962158, -4.532540321350098, -5.92275333404541, -5.500508785247803, -0.023971956223249435]",0.9763129949569702
2,['    @Test\n        public String writeValue(Object value) {\n            writeWasCalled = true;\n            return new Gson().toJson(value);\n        }\n'],son;write;to;Value;new;alled;true;value;Object;return,1.862645149230957e-09;1.3969838619232178e-09;5.238689482212067e-10;4.0745362639427185e-10;2.3283064365386963e-10;0.0;0.0;-2.0372681319713593e-10;-2.3283064365386963e-10;-3.4924596548080444e-10,5,5,"[-6.019740104675293, -5.549673080444336, -4.577795505523682, -5.884006977081299, -5.4537787437438965, -0.023944605141878128]",0.9763398170471191
2,['    @Override @BeforeEach\n    public void setUp() {\n        super.setUp();\n        clearUnirestHooks();\n    }\n'],Up;Unirest;set;ooks;set;clear;Before;Up;super;Each,1.862645149230957e-09;9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;1.7462298274040222e-10;-5.820766091346741e-11;-9.313225746154785e-10;-1.1059455573558807e-09;-1.57160684466362e-09;-2.3283064365386963e-09,5,5,"[-6.041262149810791, -5.519199371337891, -4.53237771987915, -5.938404560089111, -5.469978332519531, -0.024282658472657204]",0.9760097861289978
2,['    @Test\n        public T getSomeTees() {\n            return someTees;\n        }\n'],ees;return;Some;get;some;ees,2.0372681319713593e-09;2.3283064365386963e-10;0.0;-7.566995918750763e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-6.028017044067383, -5.5576348304748535, -4.558969497680664, -5.888495445251465, -5.447335720062256, -0.024108119308948517]",0.9761800765991211
2,"['    @Test @Disabled\n                        public void completed(HttpResponse<JsonNode> response) {\n                            throw new UnirestException(""Failure!"");\n                        }\n']",throw;Http;new;Failure;Response;response;son;Disabled;completed;Node,1.862645149230957e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.0372681319713593e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-3.7834979593753815e-10,5,5,"[-5.879599094390869, -5.354180812835693, -4.679293155670166, -5.735997676849365, -5.429370880126953, -0.02472643181681633]",0.975576639175415
2,"['    @Test @Disabled\n                    public void completed(HttpResponse<JsonNode> response) {\n                        throw new UnirestException(""Failure!"");\n                    }\n']",Exception;Unirest;throw;Http;Response;Disabled;response;Failure;new;completed,1.4551915228366852e-09;1.0477378964424133e-09;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10;1.4551915228366852e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10,5,5,"[-5.907515525817871, -5.414106845855713, -4.672435760498047, -5.758133888244629, -5.424158573150635, -0.024382248520851135]",0.9759125113487244
2,['    @BeforeEach\n    public void setUp() {\n        super.setUp();\n        this.monitor = new TestMonitor();\n    }\n'],Monitor;Up;set;super;Up;Each;set;new;this;monitor,1.6298145055770874e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;0.0;-4.656612873077393e-10;-6.984919309616089e-10;-1.862645149230957e-09,5,5,"[-6.068206787109375, -5.5920610427856445, -4.516145706176758, -5.9406208992004395, -5.4600830078125, -0.024146519601345062]",0.9761427044868469
2,['    @AfterEach\n    public void tearDown() {\n        super.tearDown();\n        captured = null;\n    }\n'],Each;ear;Down;After;Down;captured;tear;null;super,1.3969838619232178e-09;1.3969838619232178e-09;6.984919309616089e-10;0.0;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-6.073790073394775, -5.578760147094727, -4.504227638244629, -5.941158294677734, -5.475219249725342, -0.024251824244856834]",0.9760398864746094
2,['    @Test\n        public void accept(HttpResponse<?> httpResponse) {\n\n            this.httpResponse = httpResponse;\n        }\n'],this;Response;http;Response;http;http;Http;Response;Response;accept,8.149072527885437e-10;5.820766091346741e-10;5.675246939063072e-10;0.0;-1.7462298274040222e-10;-2.3283064365386963e-10;-4.0745362639427185e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.862645149230957e-09,5,5,"[-6.010604381561279, -5.51692533493042, -4.576390743255615, -5.875690937042236, -5.461331367492676, -0.024105675518512726]",0.9761825203895569
2,['    @Override @AfterEach\n    public void tearDown() {\n        try {\n            Files.delete(test);\n        } catch (Exception ignored) { }\n    }\n'],catch;After;Each;tear;Files;Exception;ignored;delete;Down,5.820766091346741e-10;0.0;0.0;0.0;-4.656612873077393e-10;-6.984919309616089e-10;-6.984919309616089e-10;-1.3969838619232178e-09;-1.6880221664905548e-09,5,5,"[-6.011812686920166, -5.440220832824707, -4.548857688903809, -5.915146827697754, -5.483926296234131, -0.024516725912690163]",0.975781261920929
2,['    @Test\n        public void invalidate() {\n            regular.invalidateAll();\n            async.invalidateAll();\n        }\n'],invalidate;All;async;invalidate;invalidate;regular;All,1.8044374883174896e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;4.3655745685100555e-10;1.7462298274040222e-10;-6.984919309616089e-10,5,5,"[-6.008469581604004, -5.527947902679443, -4.578083038330078, -5.865124225616455, -5.443465709686279, -0.024157226085662842]",0.976132333278656
2,['    @AfterEach\n    public void tearDown() {\n        super.tearDown();\n        Unirest.shutDown(true);\n        JankyProxy.shutdown();\n    }\n'],After;Each;Down;Down;shutdown;super;ear;true;anky;Proxy,5.587935447692871e-09;2.7939677238464355e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;5.820766091346741e-11,5,5,"[-6.049192905426025, -5.617266654968262, -4.541103363037109, -5.906965255737305, -5.435393810272217, -0.024022117257118225]",0.9762641191482544
2,"['    @BeforeEach\n    public void setUp() {\n        super.setUp();\n        interceptor = new UniInterceptor(""x-custom"", ""foo"");\n    }\n']",Before;Up;super;set;custom;Uni;Up;new;set;foo,1.862645149230957e-09;9.313225746154785e-10;4.0745362639427185e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-8.440110832452774e-10;-9.313225746154785e-10,5,5,"[-6.036678791046143, -5.60856819152832, -4.564262866973877, -5.902927875518799, -5.4354023933410645, -0.023846251890063286]",0.9764357209205627
2,"['    @Test\n            public void onRequest(HttpRequest<?> request, Config config) {\n                request.getBody().ifPresent(b ->\n                        b.multiParts().forEach(part ->\n                                values.add(part.toString())));\n            }\n']",Each;Present;add;request;request;config;part;to;part;get,8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;3.055902197957039e-10;2.6193447411060333e-10;2.0372681319713593e-10;1.1641532182693481e-10;5.820766091346741e-11;4.3655745685100555e-11;-2.3283064365386963e-10,5,5,"[-5.985690593719482, -5.354441165924072, -4.5977935791015625, -5.834469318389893, -5.53386926651001, -0.024488691240549088]",0.9758087396621704
2,['    @BeforeEach\n    public void setUp() {\n        super.setUp();\n        customOm = Mockito.spy(JsonObjectMapper.class);\n    }\n'],Mockito;super;set;custom;Object;set;son;class;Up;apper,3.958120942115784e-09;1.862645149230957e-09;1.280568540096283e-09;9.313225746154785e-10;4.656612873077393e-10;1.7462298274040222e-10;0.0;-1.1641532182693481e-10;-3.7834979593753815e-10;-4.656612873077393e-10,5,5,"[-6.046472072601318, -5.591564655303955, -4.5377197265625, -5.9239726066589355, -5.450107097625732, -0.024050397798419]",0.9762364029884338
2,['    @Override @BeforeEach\n    public void setUp() {\n        super.setUp();\n        this.monitor = new TestMonitor();\n    }\n'],Each;Before;Up;set;this;Monitor;super;monitor;new;set,5.122274160385132e-09;2.7939677238464355e-09;9.313225746154785e-10;8.731149137020111e-10;3.4924596548080444e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;-2.3283064365386963e-10;-5.820766091346741e-10,5,5,"[-6.046985626220703, -5.506008625030518, -4.528409004211426, -5.951262950897217, -5.485993385314941, -0.024264158681035042]",0.9760279655456543
2,"['    @Test\n    public void simpleSequence() throws Exception\n    {\n        Distribution dist = OptionDistribution.get(""seq(1..10)"").get();\n        assertTrue(dist instanceof DistributionSequence);\n\n        assertEquals(1, dist.minValue());\n        assertEquals(10, dist.maxValue());\n        assertEquals(5, dist.average());\n\n        assertEquals(1, dist.inverseCumProb(0d));\n        assertEquals(10, dist.inverseCumProb(1d));\n\n        long min = dist.next();\n        assertEquals(1,min);\n\n        long last = min;\n        for (int i=0; i<9; i++)\n        {\n            long next = dist.next();\n            assertEquals(next, last+1); //increase by one each step\n            last = next;\n        }\n\n        assertEquals(1, dist.next()); // wrapping\n    }\n']",Exception;Sequence;Pro;Distribution;average;um;dist;Value;seq;each,1.1059455573558807e-09;7.275957614183426e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.885214328765869, -5.534093379974365, -4.678221225738525, -5.69615364074707, -5.363401889801025, -0.024363750591874123]",0.9759306311607361
2,"['    @Test\n    public void negValueSequence() throws Exception\n    {\n        Distribution dist = OptionDistribution.get(""seq(-1000..-10)"").get();\n        assertTrue(dist instanceof DistributionSequence);\n\n        assertEquals(-1000, dist.minValue());\n        assertEquals( -10, dist.maxValue());\n        assertEquals(-504, dist.average());\n\n        assertEquals(-1000, dist.inverseCumProb(0d));\n        assertEquals(-10, dist.inverseCumProb(1d));\n\n        long min = dist.next();\n        assertEquals(-1000, min);\n\n        long last = min;\n        long next = dist.next();\n        while (last<next)\n        {\n            assertEquals(next, last+1); //increase by one each step\n            last = next;\n            next = dist.next();\n        }\n\n        assertEquals(-10, last); // wrapping\n        assertEquals(-1000, next); // wrapping\n    }\n']",inverse;neg;um;Option;by;Distribution;one;next;dist;Distribution,2.8230715543031693e-09;1.862645149230957e-09;7.566995918750763e-10;7.275957614183426e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.891055107116699, -5.528384685516357, -4.667552947998047, -5.70858907699585, -5.37302827835083, -0.024383993819355965]",0.9759109020233154
2,"['    @Test\n    public void bigSequence() throws Exception\n    {\n        Distribution dist = OptionDistribution.get(String.format(""seq(1..%d)"", Long.MAX_VALUE)).get();\n        assertTrue(dist instanceof DistributionSequence);\n\n        assertEquals(1, dist.minValue());\n        assertEquals(Long.MAX_VALUE, dist.maxValue());\n\n        assertEquals(1, dist.inverseCumProb(0d));\n        assertEquals(Long.MAX_VALUE, dist.inverseCumProb(1d));\n\n    }\n']",big;Option;inverse;Distribution;MAX;Equals;Pro;Value;instanceof;get,1.3969838619232178e-09;1.1641532182693481e-09;1.076841726899147e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.934943675994873, -5.578029155731201, -4.6371541023254395, -5.770938396453857, -5.3993120193481445, -0.024033639580011368]",0.9762528538703918
2,"['    @Test\n    public void setSeed() throws Exception\n    {\n        Distribution dist = OptionDistribution.get(""seq(1..10)"").get();\n        assertTrue(dist instanceof DistributionSequence);\n\n        for (int seed=1; seed<500; seed+=seed)\n        {\n            dist.setSeed(seed);\n            assertEquals(1, dist.minValue());\n            assertEquals(10, dist.maxValue());\n            assertEquals(5, dist.average());\n\n            assertEquals(1, dist.inverseCumProb(0d));\n            assertEquals(10, dist.inverseCumProb(1d));\n\n            long last = dist.next();\n            for (int i = 0; i < 9; i++)\n            {\n                long next = dist.next();\n                if (next>1)\n                {\n                    assertEquals(next, last + 1); //increase by one each step\n                }else{\n                    assertEquals(last, 10); //wrap after the end\n                }\n                last = next;\n            }\n        }\n    }\n']",Equals;increase;True;seed;Option;Distribution;Equals;Pro;get;eed,9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.8725762367248535, -5.405636787414551, -4.667379856109619, -5.697591781616211, -5.435632705688477, -0.024719221517443657]",0.9755837917327881
2,"['    @Test\n    public void simpleGaussian()\n    {\n        Distribution dist = OptionDistribution.get(""gaussian(1..10)"").get();\n        assertTrue(dist instanceof DistributionBoundApache);\n\n        assertEquals(1, dist.minValue());\n        assertEquals(10, dist.maxValue());\n        assertEquals(5, dist.average());\n\n        assertEquals(1, dist.inverseCumProb(0d));\n        assertEquals(10, dist.inverseCumProb(1d));\n\n        int testCount = 100000;\n        int[] results = new int[11];\n        for (int i = 0; i < testCount; i++)\n        {\n            int val = toIntExact(dist.next());\n            results[val]++;\n        }\n\n        // Increasing for the first half\n        for (int i = toIntExact(dist.minValue()); i < dist.average(); i++)\n        {\n            assertTrue(results[i] < results[i + 1]);\n        }\n\n        // Decreasing for the second half\n        for (int i = toIntExact(dist.average()) + 1; i < dist.maxValue(); i++)\n        {\n            assertTrue(results[i] > results[i + 1]);\n        }\n    }\n']",simple;Decreasing;Gaussian;half;second;Distribution;Increasing;Value;Int;average,7.566995918750763e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.908883094787598, -5.501890182495117, -4.669159412384033, -5.724862098693848, -5.410849094390869, -0.024196438491344452]",0.9760939478874207
2,"['    @Test\n    public void negValueGaussian()\n    {\n        Distribution dist = OptionDistribution.get(""gaussian(-1000..-10)"").get();\n        assertTrue(dist instanceof DistributionBoundApache);\n\n        assertEquals(-1000, dist.minValue());\n        assertEquals( -10, dist.maxValue());\n        assertEquals(-504, dist.average());\n\n        assertEquals(-1000, dist.inverseCumProb(0d));\n        assertEquals(-10, dist.inverseCumProb(1d));\n    }\n']",inverse;min;Distribution;instanceof;inverse;average;Pro;gaussian;max;Distribution,1.5133991837501526e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.130438461899757e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.944963455200195, -5.6421308517456055, -4.6482977867126465, -5.746910572052002, -5.357231140136719, -0.02393284998834133]",0.976351261138916
2,"['    @Test\n    public void delegatesToInitialPrintStream() throws Exception\n    {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(output, true);\n        MultiResultLogger underTest = new MultiResultLogger(printStream);\n\n        underTest.println(""Very important result"");\n\n        assertEquals(""Very important result\\n"", output.toString());\n    }\n']",Exception;new;Print;Stream;print;Multi;true;Output;Multi;Print,6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.601599019020796e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.979055404663086, -5.511634826660156, -4.594472885131836, -5.865631103515625, -5.458353042602539, -0.02406121976673603]",0.9762259721755981
2,"['    @Test\n    public void printingExceptions() throws Exception\n    {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(output, true);\n        MultiResultLogger underTest = new MultiResultLogger(printStream);\n\n        underTest.printException(new RuntimeException(""Bad things""));\n\n        String stackTrace = output.toString();\n        assertTrue(""Expected strack trace to be printed but got: "" + stackTrace, stackTrace.startsWith(""java.lang.RuntimeException: Bad things\\n"" +\n                                                ""\\tat org.apache.cassandra.stress.util.MultiResultLoggerTest.printingExceptions""));\n    }\n']",stress;Exceptions;things;apache;Logger;Logger;Expected;new;true;Stream,5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9831426218152046e-10,5,5,"[-5.943089485168457, -5.400297164916992, -4.626761436462402, -5.820889472961426, -5.486034393310547, -0.024328265339136124]",0.9759652614593506
2,"['    @Test\n    public void delegatesToAdditionalPrintStreams() throws Exception\n    {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        PrintStream additionalPrintStream = new PrintStream(output, true);\n        MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));\n\n        underTest.addStream(additionalPrintStream);\n        underTest.println(""Very important result"");\n\n        assertEquals(""Very important result\\n"", output.toString());\n    }\n']",NOOP;additional;Additional;Byte;Array;Output;Logger;Stream;Array;under,1.076841726899147e-09;8.36735125631094e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.976108074188232, -5.499670028686523, -4.595686435699463, -5.866739273071289, -5.469719409942627, -0.024053655564785004]",0.9762334227561951
2,"['    @Test\n    public void delegatesPrintfToAdditionalPrintStreams() throws Exception\n    {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        PrintStream additionalPrintStream = new PrintStream(output, true);\n        MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));\n\n        underTest.addStream(additionalPrintStream);\n        underTest.printf(""%s %s %s"", ""one"", ""two"", ""three"");\n\n        assertEquals(""one two three"", output.toString());\n    }\n']",two;NOOP;three;Logger;three;output;Result;Stream;Print;additional,1.3969838619232178e-09;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.96687126159668, -5.54306697845459, -4.6165385246276855, -5.831187725067139, -5.44345235824585, -0.02390643022954464]",0.9763771891593933
2,"['    @Test\n    public void delegatesPrintlnToAdditionalPrintStreams() throws Exception\n    {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        PrintStream additionalPrintStream = new PrintStream(output, true);\n        MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));\n\n        underTest.addStream(additionalPrintStream);\n        underTest.println();\n\n        assertEquals(""\\n"", output.toString());\n    }\n']",NOOP;Exception;Logger;Println;Print;Stream;Result;Stream;add;Stream,1.6298145055770874e-09;8.440110832452774e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.988084316253662, -5.502007484436035, -4.58158016204834, -5.87624454498291, -5.481374263763428, -0.024082399904727936]",0.9762054085731506
2,"['    @Test\n    public void testDefaults() throws Exception\n    {\n        SettingsNode settingsNode = new SettingsNode(new SettingsNode.Options());\n        assertEquals(null, settingsNode.datacenter);\n    }\n']",Equals;Defaults;Settings;Node;new;Node;new;Node;Options;settings,1.4260876923799515e-09;1.0477378964424133e-09;9.313225746154785e-10;3.346940502524376e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.6193447411060333e-10,5,5,"[-6.01210880279541, -5.613703727722168, -4.58036470413208, -5.886085510253906, -5.404124736785889, -0.023906895890831947]",0.9763765931129456
2,"['    @Test\n    public void testOveridingDataCenter() throws Exception\n    {\n        SettingsNode.Options options = new SettingsNode.Options();\n        options.accept(""datacenter=dc1"");\n        SettingsNode settingsNode = new SettingsNode(options);\n        assertEquals(""dc1"", settingsNode.datacenter);\n    }\n']",Overiding;options;Center;Node;options;dc;new;datacenter;Settings;Node,3.4924596548080444e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;8.731149137020111e-11,5,5,"[-5.9956769943237305, -5.611260414123535, -4.606782913208008, -5.853734970092773, -5.397188663482666, -0.023809468373656273]",0.9764717221260071
2,"['    @Test\n    public void versionTriggersSpecialOption() throws Exception\n    {\n        assertTrue(SettingsMisc.maybeDoSpecial(ImmutableMap.of(""version"", new String[] {})));\n    }\n']",Settings;Option;Map;Special;Triggers;True;Exception;Special;new;version,1.7462298274040222e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;6.402842700481415e-10;2.3283064365386963e-10;0.0;0.0;0.0;-4.0745362639427185e-10,5,5,"[-6.019643306732178, -5.62654972076416, -4.566359519958496, -5.899794101715088, -5.405310153961182, -0.023944256827235222]",0.976340115070343
2,['    @Test\n    public void noSpecialOptions() throws Exception\n    {\n        assertFalse(SettingsMisc.maybeDoSpecial(Collections.emptyMap()));\n    }\n'],Special;maybe;False;Special;Options;no;Do;isc;Map;empty,2.2118911147117615e-09;1.280568540096283e-09;9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10;-6.984919309616089e-10,5,5,"[-6.015153408050537, -5.605566024780273, -4.552309513092041, -5.915599346160889, -5.398031234741211, -0.024174097925424576]",0.976115882396698
2,"['    @Test\n    public void parsesVersionMatch() throws Exception\n    {\n        String versionString = SettingsMisc.parseVersionFile(""CassandraVersion=TheBestVersion\\n"");\n        assertEquals(""Version: TheBestVersion"", versionString);\n    }\n']",Best;version;Version;File;Best;The;parse;version;Match;The,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.993899822235107, -5.692253112792969, -4.612541675567627, -5.823678970336914, -5.335028648376465, -0.023851023986935616]",0.9764310717582703
2,"['    @Test\n    public void parsesVersionNoMatch() throws Exception\n    {\n        String versionString = SettingsMisc.parseVersionFile(""VersionFileChangedFormat :("");\n        assertEquals(""Unable to find version information"", versionString);\n    }\n']",Version;Settings;Equals;version;to;Changed;File;find;version;parses,1.280568540096283e-09;1.0477378964424133e-09;9.022187441587448e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;1.4551915228366852e-10;2.9103830456733704e-11;0.0,5,5,"[-5.9903950691223145, -5.636582851409912, -4.597574234008789, -5.858659267425537, -5.369529724121094, -0.023939600214362144]",0.9763447046279907
2,"['    @Test\n    public void defaultsToReplicationFactorOfOne() throws Exception\n    {\n        OptionReplication defaults = new OptionReplication();\n        assertEquals(ImmutableMap.of(""replication_factor"", ""1""), defaults.getOptions());\n    }\n']",Factor;One;Immutable;Exception;replication;new;Replication;get;Options;Replication,4.423782229423523e-09;2.3283064365386963e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;0.0,5,5,"[-6.002274513244629, -5.616438865661621, -4.591097831726074, -5.868488788604736, -5.394055366516113, -0.023906545713543892]",0.9763769507408142
2,"['    @Test\n    public void isSerializable() throws Exception\n    {\n        Map<String, String[]> args = new HashMap<>();\n        args.put(""write"", new String[] {});\n        StressSettings settings = StressSettings.get(args);\n        // Will throw if not all settings are Serializable\n        new ObjectOutputStream(new ByteArrayOutputStream()).writeObject(settings);\n    }\n']",Stress;Serializable;get;Map;args;Stream;write;Output;all;new,8.149072527885437e-10;7.566995918750763e-10;4.802132025361061e-10;4.3655745685100555e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-6.0124711990356445, -5.568935871124268, -4.59610652923584, -5.867436408996582, -5.443227291107178, -0.023789912462234497]",0.9764907360076904
2,"['    @Test\n    public void testOrderedReplay() throws IOException\n    {\n        File f = generateQueries(100, true);\n        int queryCount = 0;\n        try (ChronicleQueue queue = ChronicleQueueBuilder.single(f).build();\n             FQLQueryIterator iter = new FQLQueryIterator(queue.createTailer(), 101))\n        {\n            long last = -1;\n            while (iter.hasNext())\n            {\n                FQLQuery q = iter.next();\n                assertTrue(q.queryStartTime >= last);\n                last = q.queryStartTime;\n                queryCount++;\n            }\n        }\n        assertEquals(100, queryCount);\n    }\n']",query;while;Chronicle;Time;next;ailer;last;Next;query;iter,6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.1827872842550278e-10;1.8917489796876907e-10,5,5,"[-5.97778844833374, -5.47743558883667, -4.624792098999023, -5.824958324432373, -5.47406530380249, -0.02395182102918625]",0.9763327240943909
2,"['    @Test\n    public void testQueryIterator() throws IOException\n    {\n        File f = generateQueries(100, false);\n        int queryCount = 0;\n        try (ChronicleQueue queue = ChronicleQueueBuilder.single(f).build();\n             FQLQueryIterator iter = new FQLQueryIterator(queue.createTailer(), 1))\n        {\n            long last = -1;\n            while (iter.hasNext())\n            {\n                FQLQuery q = iter.next();\n                assertTrue(q.queryStartTime >= last);\n                last = q.queryStartTime;\n                queryCount++;\n            }\n        }\n        assertEquals(100, queryCount);\n    }\n']",while;ailer;Query;Count;Builder;QLQuery;Iterator;Iterator;query;generate,1.3969838619232178e-09;1.2369127944111824e-09;6.402842700481415e-10;4.802132025361061e-10;3.4924596548080444e-10;3.128661774098873e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.473825588822365e-10;2.1827872842550278e-10,5,5,"[-5.984333038330078, -5.484222412109375, -4.621171951293945, -5.82953405380249, -5.471798419952393, -0.02393820509314537]",0.976345956325531
2,"['    @Test\n    public void testMergingIterator() throws IOException\n    {\n        File f = generateQueries(100, false);\n        File f2 = generateQueries(100, false);\n        int queryCount = 0;\n        try (ChronicleQueue queue = ChronicleQueueBuilder.single(f).build();\n             ChronicleQueue queue2 = ChronicleQueueBuilder.single(f2).build();\n             FQLQueryIterator iter = new FQLQueryIterator(queue.createTailer(), 101);\n             FQLQueryIterator iter2 = new FQLQueryIterator(queue2.createTailer(), 101);\n             MergeIterator<FQLQuery, List<FQLQuery>> merger = MergeIterator.get(Lists.newArrayList(iter, iter2), FQLQuery::compareTo, new Replay.Reducer()))\n        {\n            long last = -1;\n\n            while (merger.hasNext())\n            {\n                List<FQLQuery> qs = merger.next();\n                assertEquals(2, qs.size());\n                assertEquals(0, qs.get(0).compareTo(qs.get(1)));\n                assertTrue(qs.get(0).queryStartTime >= last);\n                last = qs.get(0).queryStartTime;\n                queryCount++;\n            }\n        }\n        assertEquals(100, queryCount);\n    }\n']",Next;Iterator;Chronicle;build;QLQuery;iter;Merging;Queue;new;Iterator,8.149072527885437e-10;5.238689482212067e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.8917489796876907e-10,5,5,"[-5.904229164123535, -5.387402534484863, -4.666098117828369, -5.742804050445557, -5.465237617492676, -0.02444402128458023]",0.9758523106575012
2,"['    @Test\n    public void testFQLQueryReader() throws IOException\n    {\n        FQLQueryReader reader = new FQLQueryReader();\n\n        try (ChronicleQueue queue = ChronicleQueueBuilder.single(generateQueries(1000, true)).build())\n        {\n            ExcerptTailer tailer = queue.createTailer();\n            int queryCount = 0;\n            while (tailer.readDocument(reader))\n            {\n                assertNotNull(reader.getQuery());\n                if (reader.getQuery() instanceof FQLQuery.Single)\n                {\n                    assertTrue(reader.getQuery().keyspace() == null || reader.getQuery().keyspace().equals(""querykeyspace""));\n                }\n                else\n                {\n                    assertEquals(""someks"", reader.getQuery().keyspace());\n                }\n                queryCount++;\n            }\n            assertEquals(1000, queryCount);\n        }\n    }\n']",while;Chronicle;keyspace;Equals;Reader;IOException;someks;equals;QLQuery;Query,7.566995918750763e-10;5.238689482212067e-10;4.729372449219227e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.1827872842550278e-10,5,5,"[-5.9221343994140625, -5.441926002502441, -4.6473283767700195, -5.776662349700928, -5.454231262207031, -0.02426706627011299]",0.9760249853134155
2,"['    @Test\n    public void testStoringResults() throws Throwable\n    {\n        File tmpDir = Files.createTempDirectory(""results"").toFile();\n        File queryDir = Files.createTempDirectory(""queries"").toFile();\n\n        ResultHandler.ComparableResultSet res = createResultSet(10, 10, true);\n        ResultStore rs = new ResultStore(Collections.singletonList(tmpDir), queryDir);\n        FQLQuery query = new FQLQuery.Single(""abc"", QueryOptions.DEFAULT.getProtocolVersion().asInt(), QueryOptions.DEFAULT, 12345, 11111, 22, ""select * from abc"", Collections.emptyList());\n        try\n        {\n            rs.storeColumnDefinitions(query, Collections.singletonList(res.getColumnDefinitions()));\n            Iterator<ResultHandler.ComparableRow> it = res.iterator();\n            while (it.hasNext())\n            {\n                List<ResultHandler.ComparableRow> row = Collections.singletonList(it.next());\n                rs.storeRows(row);\n            }\n            // this marks the end of the result set:\n            rs.storeRows(Collections.singletonList(null));\n        }\n        finally\n        {\n            rs.close();\n        }\n\n        compareResults(Collections.singletonList(Pair.create(query, res)),\n                       readResultFile(tmpDir, queryDir));\n\n    }\n']",Storing;Iterator;Temp;it;Dir;abc;Throwable;while;store;query,6.693881005048752e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1100277081131935e-10;1.8917489796876907e-10,5,5,"[-6.001043319702148, -5.422522068023682, -4.620783805847168, -5.836690425872803, -5.527871608734131, -0.023913878947496414]",0.9763697981834412
2,"['    @Test\n    public void testCompareColumnDefinitions()\n    {\n        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);\n        ResultComparator rc = new ResultComparator();\n\n        List<ResultHandler.ComparableColumnDefinitions> colDefs = new ArrayList<>(100);\n        List<String> targetHosts = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++)\n        {\n            targetHosts.add(""host""+i);\n            colDefs.add(res.getColumnDefinitions());\n        }\n        assertTrue(rc.compareColumnDefinitions(targetHosts, null, colDefs));\n        colDefs.set(50, createResultSet(9, 9, false).getColumnDefinitions());\n        assertFalse(rc.compareColumnDefinitions(targetHosts, null, colDefs));\n    }\n']",host;add;Comparator;Def;compare;create;Comparator;Array;Host;Definitions,1.5133991837501526e-09;1.0477378964424133e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.926894187927246, -5.543205738067627, -4.659784317016602, -5.734455585479736, -5.395603179931641, -0.024106604978442192]",0.9761816263198853
2,"['    @Test\n    public void testCompareEqualRows()\n    {\n        ResultComparator rc = new ResultComparator();\n\n        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);\n        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);\n        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2);\n        List<Iterator<ResultHandler.ComparableRow>> iters = toCompare.stream().map(Iterable::iterator).collect(Collectors.toList());\n\n        while (true)\n        {\n            List<ResultHandler.ComparableRow> rows = ResultHandler.rows(iters);\n            assertTrue(rc.compareRows(Lists.newArrayList(""eq1"", ""eq2""), null, rows));\n            if (rows.stream().allMatch(Objects::isNull))\n                break;\n        }\n    }\n']",map;Comparator;to;create;if;collect;rc;eq;Comparable;iters,5.820766091346741e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.945880889892578, -5.51835823059082, -4.666473388671875, -5.7460856437683105, -5.4176483154296875, -0.02395193837583065]",0.9763327240943909
2,"['    @Test\n    public void testCompareRowsDifferentCount()\n    {\n        ResultComparator rc = new ResultComparator();\n        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);\n        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);\n        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, createResultSet(10, 11, false));\n        List<Iterator<ResultHandler.ComparableRow>> iters = toCompare.stream().map(Iterable::iterator).collect(Collectors.toList());\n        boolean foundMismatch = false;\n        while (true)\n        {\n            List<ResultHandler.ComparableRow> rows = ResultHandler.rows(iters);\n            if (rows.stream().allMatch(Objects::isNull))\n                break;\n            if (!rc.compareRows(Lists.newArrayList(""eq1"", ""eq2"", ""diff""), null, rows))\n            {\n                foundMismatch = true;\n            }\n        }\n        assertTrue(foundMismatch);\n    }\n']",Comparator;compare;null;collect;found;iterator;Match;new;all;iters,6.257323548197746e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;3.4924596548080444e-10;3.346940502524376e-10;2.764863893389702e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.981550693511963, -5.49925422668457, -4.636107444763184, -5.800432205200195, -5.472834587097168, -0.0238170363008976]",0.9764643311500549
2,"['    @Test\n    public void testCompareRowsDifferentContent()\n    {\n        ResultComparator rc = new ResultComparator();\n        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);\n        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);\n        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, createResultSet(10, 10, true));\n        List<Iterator<ResultHandler.ComparableRow>> iters = toCompare.stream().map(Iterable::iterator).collect(Collectors.toList());\n        while (true)\n        {\n            List<ResultHandler.ComparableRow> rows = ResultHandler.rows(iters);\n            if (rows.stream().allMatch(Objects::isNull))\n                break;\n            assertFalse(rows.toString(), rc.compareRows(Lists.newArrayList(""eq1"", ""eq2"", ""diff""), null, rows));\n        }\n    }\n']",while;Set;Content;to;Iterable;Comparable;iterator;False;Collectors;map,5.820766091346741e-10;4.94765117764473e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.953107833862305, -5.508234977722168, -4.6561055183410645, -5.772082328796387, -5.433121204376221, -0.02392086200416088]",0.9763628840446472
2,"['    @Test\n    public void testCompareRowsDifferentColumnCount()\n    {\n        ResultComparator rc = new ResultComparator();\n        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);\n        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);\n        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, createResultSet(11, 10, false));\n        List<Iterator<ResultHandler.ComparableRow>> iters = toCompare.stream().map(Iterable::iterator).collect(Collectors.toList());\n        while (true)\n        {\n            List<ResultHandler.ComparableRow> rows = ResultHandler.rows(iters);\n            if (rows.stream().allMatch(Objects::isNull))\n                break;\n            assertFalse(rows.toString(), rc.compareRows(Lists.newArrayList(""eq1"", ""eq2"", ""diff""), null, rows));\n        }\n    }\n']",False;Different;Comparable;while;to;all;Comparator;Set;Comparable;Row,7.566995918750763e-10;7.566995918750763e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.955918788909912, -5.509982585906982, -4.65585994720459, -5.771297454833984, -5.437288284301758, -0.023892462253570557]",0.9763907194137573
2,"['    @Test\n    public void testResultHandler() throws IOException\n    {\n        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");\n        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();\n        File queryDir = Files.createTempDirectory(""queries"").toFile();\n        List<File> resultPaths = new ArrayList<>();\n        targetHosts.forEach(host -> { File f = new File(tmpDir, host); f.mkdir(); resultPaths.add(f);});\n\n        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);\n        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);\n        ResultHandler.ComparableResultSet res3 = createResultSet(10, 10, false);\n        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, res3);\n        FQLQuery query = new FQLQuery.Single(""abcabc"", QueryOptions.DEFAULT.getProtocolVersion().asInt(), QueryOptions.DEFAULT, 1111, 2222, 3333, ""select * from xyz"", Collections.emptyList());\n        try (ResultHandler rh = new ResultHandler(targetHosts, resultPaths, queryDir))\n        {\n            rh.handleResults(query, toCompare);\n        }\n        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results1 = readResultFile(resultPaths.get(0), queryDir);\n        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results2 = readResultFile(resultPaths.get(1), queryDir);\n        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results3 = readResultFile(resultPaths.get(2), queryDir);\n        compareResults(results1, results2);\n        compareResults(results1, results3);\n        compareResults(results3, Collections.singletonList(Pair.create(query, res)));\n    }\n']",Result;Each;Lists;query;File;Result;create;rh;host;resulthandler,1.0477378964424133e-09;1.0477378964424133e-09;3.7834979593753815e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.000888343900442e-10,5,5,"[-5.915834903717041, -5.361169338226318, -4.657865524291992, -5.791807651519775, -5.496528625488281, -0.024325357750058174]",0.9759680032730103
2,"['    @Test\n    public void testResultHandlerWithDifference() throws IOException\n    {\n        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");\n        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();\n        File queryDir = Files.createTempDirectory(""queries"").toFile();\n        List<File> resultPaths = new ArrayList<>();\n        targetHosts.forEach(host -> { File f = new File(tmpDir, host); f.mkdir(); resultPaths.add(f);});\n\n        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);\n        ResultHandler.ComparableResultSet res2 = createResultSet(10, 5, false);\n        ResultHandler.ComparableResultSet res3 = createResultSet(10, 10, false);\n        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, res3);\n        FQLQuery query = new FQLQuery.Single(""aaa"", QueryOptions.DEFAULT.getProtocolVersion().asInt(), QueryOptions.DEFAULT, 123123, 11111, 22222, ""select * from abcabc"", Collections.emptyList());\n        try (ResultHandler rh = new ResultHandler(targetHosts, resultPaths, queryDir))\n        {\n            rh.handleResults(query, toCompare);\n        }\n        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results1 = readResultFile(resultPaths.get(0), queryDir);\n        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results2 = readResultFile(resultPaths.get(1), queryDir);\n        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results3 = readResultFile(resultPaths.get(2), queryDir);\n        compareResults(results1, results3);\n        compareResults(results2, Collections.singletonList(Pair.create(query, res2)));\n    }\n']",Difference;Handler;from;DEFAULT;Array;target;Dir;rh;Result;File,4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.912552356719971, -5.35751485824585, -4.658883571624756, -5.789529323577881, -5.494598865509033, -0.024357467889785767]",0.975936770439148
2,"['    @Test\n    public void testResultHandlerMultipleResultSets() throws IOException\n    {\n        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");\n        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();\n        File queryDir = Files.createTempDirectory(""queries"").toFile();\n        List<File> resultPaths = new ArrayList<>();\n        targetHosts.forEach(host -> { File f = new File(tmpDir, host); f.mkdir(); resultPaths.add(f);});\n        List<Pair<FQLQuery, List<ResultHandler.ComparableResultSet>>> resultSets = new ArrayList<>();\n        Random random = new Random();\n        for (int i = 0; i < 10; i++)\n        {\n            List<ResultHandler.ComparableResultSet> results = new ArrayList<>();\n            List<ByteBuffer> values = Collections.singletonList(ByteBufferUtil.bytes(i * 50));\n            for (int jj = 0; jj < targetHosts.size(); jj++)\n            {\n                results.add(createResultSet(5, 1 + random.nextInt(10), true));\n            }\n            FQLQuery q = i % 2 == 0\n                         ? new FQLQuery.Single(""abc""+i,\n                                             3,\n                                             QueryOptions.forInternalCalls(values),\n                                             i * 1000,\n                                             12345,\n                                             54321,\n                                             ""select * from xyz where id = ""+i,\n                                             values)\n                         : new FQLQuery.Batch(""abc""+i,\n                                              3,\n                                              QueryOptions.forInternalCalls(values),\n                                              i * 1000,\n                                              i * 54321,\n                                              i * 12345,\n                                              com.datastax.driver.core.BatchStatement.Type.UNLOGGED,\n                                              Lists.newArrayList(""select * from aaaa""),\n                                              Collections.singletonList(values));\n\n            resultSets.add(Pair.create(q, results));\n        }\n        try (ResultHandler rh = new ResultHandler(targetHosts, resultPaths, queryDir))\n        {\n            for (int i = 0; i < resultSets.size(); i++)\n                rh.handleResults(resultSets.get(i).left, resultSets.get(i).right);\n        }\n\n        for (int i = 0; i < targetHosts.size(); i++)\n            compareWithFile(resultPaths, queryDir, resultSets, i);\n    }\n']",resulthandler;queries;Path;add;host;Random;Lists;Comparable;tmp;host,9.022187441587448e-10;8.440110832452774e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.947361469268799, -5.301079750061035, -4.637031555175781, -5.800515174865723, -5.541444778442383, -0.024530567228794098]",0.9757678508758545
2,"['    @Test\n    public void testResultHandlerFailedQuery() throws IOException\n    {\n        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"", ""hostd"");\n        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();\n        File queryDir = Files.createTempDirectory(""queries"").toFile();\n        List<File> resultPaths = new ArrayList<>();\n        targetHosts.forEach(host -> { File f = new File(tmpDir, host); f.mkdir(); resultPaths.add(f);});\n\n        List<Pair<FQLQuery, List<ResultHandler.ComparableResultSet>>> resultSets = new ArrayList<>();\n        Random random = new Random();\n        for (int i = 0; i < 10; i++)\n        {\n            List<ResultHandler.ComparableResultSet> results = new ArrayList<>();\n            List<ByteBuffer> values = Collections.singletonList(ByteBufferUtil.bytes(i * 50));\n            for (int jj = 0; jj < targetHosts.size(); jj++)\n            {\n                results.add(createResultSet(5, 1 + random.nextInt(10), true));\n            }\n            results.set(0, StoredResultSet.failed(""testing abc""));\n            results.set(3, StoredResultSet.failed(""testing abc""));\n            FQLQuery q = new FQLQuery.Single(""abc""+i,\n                                             3,\n                                             QueryOptions.forInternalCalls(values),\n                                             i * 1000,\n                                             i * 12345,\n                                             i * 54321,\n                                             ""select * from xyz where id = ""+i,\n                                             values);\n            resultSets.add(Pair.create(q, results));\n        }\n        try (ResultHandler rh = new ResultHandler(targetHosts, resultPaths, queryDir))\n        {\n            for (int i = 0; i < resultSets.size(); i++)\n                rh.handleResults(resultSets.get(i).left, resultSets.get(i).right);\n        }\n        for (int i = 0; i < targetHosts.size(); i++)\n            compareWithFile(resultPaths, queryDir, resultSets, i);\n    }\n']",resulthandler;ailed;Host;QLQuery;Collections;abc;target;results;Int;List,6.111804395914078e-10;4.94765117764473e-10;4.3655745685100555e-10;4.2928149923682213e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.94113302230835, -5.304232597351074, -4.638687610626221, -5.808465480804443, -5.544893741607666, -0.02447647787630558]",0.9758206605911255
2,"['    @Test\n    public void testCompare()\n    {\n        FQLQuery q1 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.emptyList());\n        FQLQuery q2 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222,""aaaa"", Collections.emptyList());\n\n        assertEquals(0, q1.compareTo(q2));\n        assertEquals(0, q2.compareTo(q1));\n\n        FQLQuery q3 = new FQLQuery.Batch(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, com.datastax.driver.core.BatchStatement.Type.UNLOGGED, Collections.emptyList(), Collections.emptyList());\n        // single queries before batch queries\n        assertTrue(q1.compareTo(q3) < 0);\n        assertTrue(q3.compareTo(q1) > 0);\n\n        // check that smaller query time\n        FQLQuery q4 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 124, 111, 222, ""aaaa"", Collections.emptyList());\n        assertTrue(q1.compareTo(q4) < 0);\n        assertTrue(q4.compareTo(q1) > 0);\n\n        FQLQuery q5 = new FQLQuery.Batch(""abc"", 0, QueryOptions.DEFAULT, 124, 111, 222, com.datastax.driver.core.BatchStatement.Type.UNLOGGED, Collections.emptyList(), Collections.emptyList());\n        assertTrue(q1.compareTo(q5) < 0);\n        assertTrue(q5.compareTo(q1) > 0);\n\n        FQLQuery q6 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.singletonList(ByteBufferUtil.bytes(10)));\n        FQLQuery q7 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.emptyList());\n        assertTrue(q6.compareTo(q7) > 0);\n        assertTrue(q7.compareTo(q6) < 0);\n\n        FQLQuery q8 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.singletonList(ByteBufferUtil.bytes(""a"")));\n        FQLQuery q9 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.singletonList(ByteBufferUtil.bytes(""b"")));\n        assertTrue(q8.compareTo(q9) < 0);\n        assertTrue(q9.compareTo(q8) > 0);\n    }\n']",abc;queries;abc;datastax;True;abc;DEFAULT;UNLOG;queries;core,9.313225746154785e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.41970007866621e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.823927402496338, -5.4860053062438965, -4.69237756729126, -5.6710591316223145, -5.352920055389404, -0.02474748156964779]",0.9755562543869019
2,"['    @Test\n    public void testFQLQuerySingleToStatement()\n    {\n        List<ByteBuffer> values = new ArrayList<>();\n        for (int i = 0; i < 10; i++)\n            values.add(ByteBufferUtil.bytes(i));\n        FQLQuery.Single single = new FQLQuery.Single(""xyz"",\n                                                     QueryOptions.DEFAULT.getProtocolVersion().asInt(),\n                                                     QueryOptions.forInternalCalls(values),\n                                                     1234,\n                                                     12345,\n                                                     54321,\n                                                     ""select * from aaa"",\n                                                     values);\n        Statement stmt = single.toStatement();\n        assertEquals(stmt.getDefaultTimestamp(), 12345);\n        assertTrue(stmt instanceof SimpleStatement);\n        SimpleStatement simpleStmt = (SimpleStatement)stmt;\n        assertEquals(""select * from aaa"",simpleStmt.getQueryString(CodecRegistry.DEFAULT_INSTANCE));\n        assertArrayEquals(values.toArray(), simpleStmt.getValues(com.datastax.driver.core.ProtocolVersion.fromInt(QueryOptions.DEFAULT.getProtocolVersion().asInt()), CodecRegistry.DEFAULT_INSTANCE));\n    }\n']",Version;Statement;Buffer;Query;Internal;QLQuery;new;aa;Buffer;Options,7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;4.001776687800884e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.876949787139893, -5.165254592895508, -4.612713813781738, -5.757967948913574, -5.545210838317871, -0.025834137573838234]",0.974496603012085
2,"['    @Test\n    public void testFQLQueryBatchToStatement()\n    {\n        List<List<ByteBuffer>> values = new ArrayList<>();\n        List<String> queries = new ArrayList<>();\n        for (int bqCount = 0; bqCount < 10; bqCount++)\n        {\n            queries.add(""select * from asdf where x = ? and y = "" + bqCount);\n            List<ByteBuffer> queryValues = new ArrayList<>();\n            for (int i = 0; i < 10; i++)\n                queryValues.add(ByteBufferUtil.bytes(i + "":"" + bqCount));\n            values.add(queryValues);\n        }\n\n        FQLQuery.Batch batch = new FQLQuery.Batch(""xyz"",\n                                                   QueryOptions.DEFAULT.getProtocolVersion().asInt(),\n                                                   QueryOptions.DEFAULT,\n                                                   1234,\n                                                   12345,\n                                                   54321,\n                                                   com.datastax.driver.core.BatchStatement.Type.UNLOGGED,\n                                                   queries,\n                                                   values);\n        Statement stmt = batch.toStatement();\n        assertEquals(stmt.getDefaultTimestamp(), 12345);\n        assertTrue(stmt instanceof com.datastax.driver.core.BatchStatement);\n        com.datastax.driver.core.BatchStatement batchStmt = (com.datastax.driver.core.BatchStatement)stmt;\n        List<Statement> statements = Lists.newArrayList(batchStmt.getStatements());\n        List<Statement> fromFQLQueries = batch.queries.stream().map(FQLQuery.Single::toStatement).collect(Collectors.toList());\n        assertEquals(statements.size(), fromFQLQueries.size());\n        assertEquals(12345, batchStmt.getDefaultTimestamp());\n        for (int i = 0; i < statements.size(); i++)\n            compareStatements(statements.get(i), fromFQLQueries.get(i));\n    }\n']",values;QLQuery;queries;Options;new;select;add;bytes;List;queries,6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.93594217300415, -5.299081325531006, -4.621359825134277, -5.7807297706604, -5.5515217781066895, -0.024750040844082832]",0.9755536317825317
2,"['    @Test\n    public void testParser() {\n        QueryReplayer.ParsedTargetHost pth;\n        pth = fromString(""127.0.0.1"");\n        assertEquals(""127.0.0.1"", pth.host);\n        assertEquals(9042, pth.port );\n        assertNull(pth.user);\n        assertNull(pth.password);\n\n        pth = fromString(""127.0.0.1:3333"");\n        assertEquals(""127.0.0.1"", pth.host);\n        assertEquals(3333, pth.port );\n        assertNull(pth.user);\n        assertNull(pth.password);\n\n        pth = fromString(""aaa:bbb@127.0.0.1:3333"");\n        assertEquals(""127.0.0.1"", pth.host);\n        assertEquals(3333, pth.port );\n        assertEquals(""aaa"", pth.user);\n        assertEquals(""bbb"", pth.password);\n\n        pth = fromString(""aaa:bbb@127.0.0.1"");\n        assertEquals(""127.0.0.1"", pth.host);\n        assertEquals(9042, pth.port );\n        assertEquals(""aaa"", pth.user);\n        assertEquals(""bbb"", pth.password);\n    }\n']",Replayer;host;port;user;user;arsed;th;host;Equals;bb,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.310560714453459e-10;2.6193447411060333e-10,5,5,"[-5.894528388977051, -5.555768013000488, -4.683572292327881, -5.714399814605713, -5.325943470001221, -0.024320820346474648]",0.9759726524353027
2,"['    @Test(expected = RuntimeException.class)\n    public void testNoPass()\n    {\n        fromString(""blabla@abc.com:1234"");\n    }\n']",blabla;abc;Pass;Exception;from;expected;No;com;Runtime;class,8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10;-1.3969838619232178e-09;-1.3969838619232178e-09;-1.3969838619232178e-09;-1.6298145055770874e-09;-1.7462298274040222e-09,5,5,"[-6.021393299102783, -5.712079048156738, -4.596980571746826, -5.865771770477295, -5.295273303985596, -0.02394891157746315]",0.9763355851173401
2,"['    @Test(expected = RuntimeException.class)\n    public void testBadPort()\n    {\n        fromString(""aaa:bbb@abc.com:xyz"");\n    }\n']",Runtime;Exception;Bad;expected;bb;from;abc;xy;class;com,1.280568540096283e-09;1.1641532182693481e-09;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-6.984919309616089e-10;-6.984919309616089e-10;-8.149072527885437e-10;-9.022187441587448e-10,5,5,"[-6.002089500427246, -5.8271260261535645, -4.611804962158203, -5.808712005615234, -5.134991645812988, -0.024541037157177925]",0.9757576584815979
2,"['    @Test (expected = IORuntimeException.class)\n    public void testFutureVersion() throws Exception\n    {\n        FQLQueryReader reader = new FQLQueryReader();\n        File dir = Files.createTempDirectory(""chronicle"").toFile();\n        try (ChronicleQueue queue = ChronicleQueueBuilder.single(dir).build())\n        {\n            ExcerptAppender appender = queue.acquireAppender();\n            appender.writeDocument(new BinLog.ReleaseableWriteMarshallable() {\n                protected long version()\n                {\n                    return 999;\n                }\n\n                protected String type()\n                {\n                    return FullQueryLogger.SINGLE_QUERY;\n                }\n\n                public void writeMarshallablePayload(WireOut wire)\n                {\n                    wire.write(""future-field"").text(""future_value"");\n                }\n']",expected;protected;Releaseable;class;future;appender;appender;version;wire;future,9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.956975936889648, -5.226879119873047, -4.5838704109191895, -5.849039554595947, -5.578438758850098, -0.025147924199700356]",0.9751656651496887
2,"['    @Test (expected = IORuntimeException.class)\n    public void testUnknownRecord() throws Exception\n    {\n        FQLQueryReader reader = new FQLQueryReader();\n        File dir = Files.createTempDirectory(""chronicle"").toFile();\n        try (ChronicleQueue queue = ChronicleQueueBuilder.single(dir).build())\n        {\n            ExcerptAppender appender = queue.acquireAppender();\n            appender.writeDocument(new BinLog.ReleaseableWriteMarshallable() {\n                protected long version()\n                {\n                    return FullQueryLogger.CURRENT_VERSION;\n                }\n\n                protected String type()\n                {\n                    return ""unknown-type"";\n                }\n\n                public void writeMarshallablePayload(WireOut wire)\n                {\n                    wire.write(""unknown-field"").text(""unknown_value"");\n                }\n']",Appender;protected;return;ORuntime;field;Chronicle;Marshallable;write;Log;new,9.89530235528946e-10;9.89530235528946e-10;9.022187441587448e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10,5,5,"[-5.9519147872924805, -5.219797134399414, -4.588944911956787, -5.844010353088379, -5.576894760131836, -0.02516849897801876]",0.9751455783843994
2,"['    @Test\n    public void endToEnd() throws IOException\n    {\n        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"");\n        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();\n        File queryDir = Files.createTempDirectory(""queries"").toFile();\n        List<File> resultPaths = generateResultSets(targetHosts, tmpDir, queryDir, true, false);\n        Compare.compare(queryDir.toString(), resultPaths.stream().map(File::toString).collect(Collectors.toList()));\n    }\n']",resulthandler;Collectors;tmp;compare;IOException;host;query;target;stream;Dir,6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.984374046325684, -5.557480812072754, -4.632440090179443, -5.820663928985596, -5.420059680938721, -0.023780250921845436]",0.9765002727508545
2,"['    @Test\n    public void endToEndQueryFailures() throws IOException\n    {\n        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"");\n        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();\n        File queryDir = Files.createTempDirectory(""queries"").toFile();\n        List<File> resultPaths = generateResultSets(targetHosts, tmpDir, queryDir, true,true);\n        Compare.compare(queryDir.toString(), resultPaths.stream().map(File::toString).collect(Collectors.toList()));\n    }\n']",end;Host;ets;Lists;Dir;query;File;Files;host;Query,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.985604763031006, -5.5413055419921875, -4.631401062011719, -5.823915004730225, -5.425664901733398, -0.023816686123609543]",0.9764646887779236
2,"['    @Test\n    public void compareEqual() throws IOException\n    {\n        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"");\n        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();\n        File queryDir = Files.createTempDirectory(""queries"").toFile();\n        List<File> resultPaths = generateResultSets(targetHosts, tmpDir, queryDir, false,false);\n\n        ResultComparator comparator = new ResultComparator();\n        List<ChronicleQueue> readQueues = null;\n        try\n        {\n            readQueues = resultPaths.stream().map(s -> ChronicleQueueBuilder.single(s).readOnly(true).build()).collect(Collectors.toList());\n            List<Iterator<ResultHandler.ComparableResultSet>> its = readQueues.stream().map(q -> new Compare.StoredResultSetIterator(q.createTailer())).collect(Collectors.toList());\n            List<ResultHandler.ComparableResultSet> resultSets = Compare.resultSets(its);\n            while(resultSets.stream().allMatch(Objects::nonNull))\n            {\n                assertTrue(comparator.compareColumnDefinitions(targetHosts, query(), resultSets.stream().map(ResultHandler.ComparableResultSet::getColumnDefinitions).collect(Collectors.toList())));\n                List<Iterator<ResultHandler.ComparableRow>> rows = resultSets.stream().map(Iterable::iterator).collect(Collectors.toList());\n\n                List<ResultHandler.ComparableRow> toCompare = ResultHandler.rows(rows);\n\n                while (toCompare.stream().allMatch(Objects::nonNull))\n                {\n                    assertTrue(comparator.compareRows(targetHosts, query(), ResultHandler.rows(rows)));\n                    toCompare = ResultHandler.rows(rows);\n                }\n                resultSets = Compare.resultSets(its);\n            }\n        }\n        finally\n        {\n            if (readQueues != null)\n                readQueues.forEach(Closeable::close);\n        }\n    }\n']",comparator;false;compare;Queue;host;read;Dir;Temp;File;Row,5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.928478717803955, -5.357208728790283, -4.6568427085876465, -5.769821643829346, -5.496903419494629, -0.024387715384364128]",0.9759072661399841
2,['//    @Test\n//    public void isOpen()\n//    {\n//        Assert.assertTrue(inputPlus.isOpen());\n//        inputPlus.requestClosure();\n//        Assert.assertFalse(inputPlus.isOpen());\n//    }\n'],True;Plus;Open;input;request;Open;Assert;input;Plus;False,1.280568540096283e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;1.7462298274040222e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0;-4.0745362639427185e-10,5,5,"[-5.97376012802124, -5.586356163024902, -4.590085983276367, -5.85624885559082, -5.361291408538818, -0.024294758215546608]",0.9759978652000427
2,['    @Test\n    public void append_closed()\n    {\n        inputPlus = new AsyncStreamingInputPlus(channel);\n        inputPlus.requestClosure();\n        inputPlus.close();\n        buf = channel.alloc().buffer(4);\n        assertFalse(inputPlus.append(buf));\n    }\n'],append;close;Async;alloc;Plus;buf;input;input;input;channel,1.0477378964424133e-09;7.275957614183426e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-6.032670021057129, -5.604172229766846, -4.554104804992676, -5.893665790557861, -5.432305812835693, -0.024021536111831665]",0.9762646555900574
2,"['    @Test\n    public void append_normal()\n    {\n        inputPlus = new AsyncStreamingInputPlus(channel);\n        int size = 4;\n        buf = channel.alloc().buffer(size);\n        buf.writerIndex(size);\n        inputPlus.append(buf);\n        Assert.assertEquals(buf.readableBytes(), inputPlus.unsafeAvailable());\n    }\n']",Async;normal;Plus;channel;buf;size;Input;size;buffer;append,1.6298145055770874e-09;1.1641532182693481e-09;1.1059455573558807e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.033027172088623, -5.598813533782959, -4.569967746734619, -5.867337703704834, -5.454737663269043, -0.0238471832126379]",0.9764348268508911
2,"[""    @Test\n    public void read() throws IOException\n    {\n        inputPlus = new AsyncStreamingInputPlus(channel);\n        // put two buffers of 8 bytes each into the queue.\n        // then read an int, then a long. the latter tests offset into the inputPlus, as well as spanning across queued buffers.\n        // the values of those int/long will both be '42', but spread across both queue buffers.\n        ByteBuf buf = channel.alloc().buffer(8);\n        buf.writeInt(42);\n        buf.writerIndex(8);\n        inputPlus.append(buf);\n        buf = channel.alloc().buffer(8);\n        buf.writeInt(42);\n        buf.writerIndex(8);\n        inputPlus.append(buf);\n        Assert.assertEquals(16, inputPlus.unsafeAvailable());\n\n//        ByteBuffer out = ByteBuffer.allocate(4);\n//        int readCount = inputPlus.read(out);\n//        Assert.assertEquals(4, readCount);\n//        out.flip();\n//        Assert.assertEquals(42, out.getInt());\n//        Assert.assertEquals(12, inputPlus.unsafeAvailable());\n\n//        out = ByteBuffer.allocate(8);\n//        readCount = inputPlus.read(out);\n//        Assert.assertEquals(8, readCount);\n//        out.flip();\n//        Assert.assertEquals(42, out.getLong());\n//        Assert.assertEquals(4, inputPlus.unsafeAvailable());\n    }\n""]",spread;queue;the;input;unsafe;queued;as;Plus;into;Int,6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-6.005208492279053, -5.541079044342041, -4.6366167068481445, -5.814858436584473, -5.482577323913574, -0.023493962362408638]",0.9767798781394958
2,['//    @Test (expected = EOFException.class)\n//    public void read_closed() throws IOException\n//    {\n//        inputPlus.requestClosure();\n//        ByteBuffer buf = ByteBuffer.allocate(1);\n//        inputPlus.read(buf);\n//    }\n'],Closure;allocate;buf;request;Buffer;IOException;Buffer;Plus;buf;expected,1.3969838619232178e-09;8.731149137020111e-10;7.566995918750763e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-5.99148416519165, -5.521634578704834, -4.597954273223877, -5.872374534606934, -5.419436931610107, -0.024105675518512726]",0.9761825203895569
2,['    @Test\n    public void available_closed()\n    {\n        inputPlus = new AsyncStreamingInputPlus(channel);\n        inputPlus.requestClosure();\n        inputPlus.unsafeAvailable();\n    }\n'],available;closed;Streaming;unsafe;Plus;Plus;Plus;Closure;new;Input,3.259629011154175e-09;2.561137080192566e-09;1.862645149230957e-09;1.7462298274040222e-09;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;0.0;-2.3283064365386963e-10,5,5,"[-6.027432441711426, -5.5761027336120605, -4.547607421875, -5.910970211029053, -5.429969310760498, -0.024174215272068977]",0.9761157631874084
2,"['    @Test\n    public void available_HappyPath()\n    {\n        inputPlus = new AsyncStreamingInputPlus(channel);\n        int size = 4;\n        buf = channel.alloc().heapBuffer(size);\n        buf.writerIndex(size);\n        inputPlus.append(buf);\n        Assert.assertEquals(size, inputPlus.unsafeAvailable());\n    }\n']",Happy;Plus;buf;heap;input;unsafe;buf;Buffer;size;size,9.313225746154785e-10;6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.021307945251465, -5.60660982131958, -4.577462196350098, -5.864797115325928, -5.437194347381592, -0.02385242097079754]",0.97642982006073
2,"['    @Test\n    public void available_ClosedButWithBytes()\n    {\n        inputPlus = new AsyncStreamingInputPlus(channel);\n        int size = 4;\n        buf = channel.alloc().heapBuffer(size);\n        buf.writerIndex(size);\n        inputPlus.append(buf);\n        inputPlus.requestClosure();\n        Assert.assertEquals(size, inputPlus.unsafeAvailable());\n    }\n']",Async;channel;alloc;buf;new;size;buf;append;buf;size,1.0477378964424133e-09;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.511093720793724e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-6.02349853515625, -5.609002590179443, -4.579954147338867, -5.8612799644470215, -5.437507629394531, -0.02382064424455166]",0.9764608144760132
2,"['    @Test\n    public void consumeUntil_SingleBuffer_Partial_HappyPath() throws IOException\n    {\n        consumeUntilTestCycle(1, 8, 0, 4);\n    }\n']",IOException;Until;Path;consume;Cycle;Single;consume;Partial;Happy;Buffer,4.889443516731262e-09;1.3969838619232178e-09;0.0;-3.4924596548080444e-10;-1.1641532182693481e-09;-1.862645149230957e-09;-2.7939677238464355e-09;-3.026798367500305e-09;-3.259629011154175e-09;-3.550667315721512e-09,5,5,"[-5.986530303955078, -5.594499588012695, -4.590886116027832, -5.868692874908447, -5.377180576324463, -0.024110212922096252]",0.9761781096458435
2,"['    @Test\n    public void consumeUntil_SingleBuffer_AllBytes_HappyPath() throws IOException\n    {\n        consumeUntilTestCycle(1, 8, 0, 8);\n    }\n']",consume;All;Bytes;consume;IOException;Single;Until;Until;Path;Buffer,1.1641532182693481e-09;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-1.1059455573558807e-09;-2.0954757928848267e-09,5,5,"[-5.971427917480469, -5.594263553619385, -4.606219291687012, -5.847970962524414, -5.3621392250061035, -0.024124527350068092]",0.9761641621589661
2,"['    @Test\n    public void consumeUntil_MultipleBufferr_Partial_HappyPath() throws IOException\n    {\n        consumeUntilTestCycle(2, 8, 0, 13);\n    }\n']",consume;Until;Bufferr;Path;IOException;Happy;Cycle;consume;Multiple;Partial,1.3969838619232178e-09;9.313225746154785e-10;1.1641532182693481e-10;0.0;-8.731149137020111e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-5.964151859283447, -5.576610088348389, -4.605194568634033, -5.857726573944092, -5.362634181976318, -0.024190854281187057]",0.9760993719100952
2,"['    @Test\n    public void consumeUntil_MultipleBuffer_AllBytes_HappyPath() throws IOException\n    {\n        consumeUntilTestCycle(2, 8, 0, 16);\n    }\n']",consume;Path;Bytes;Happy;Until;consume;Multiple;IOException;Until;Buffer,3.4924596548080444e-09;2.7939677238464355e-09;2.0954757928848267e-09;1.5133991837501526e-09;1.3969838619232178e-09;3.4924596548080444e-10;0.0;-2.3283064365386963e-10;-9.313225746154785e-10;-2.7939677238464355e-09,5,5,"[-5.978785991668701, -5.611388683319092, -4.6088480949401855, -5.8476409912109375, -5.362565517425537, -0.02401280775666237]",0.9762731790542603
2,"['    @Test(expected = EOFException.class)\n    public void consumeUntil_SingleBuffer_Fails() throws IOException\n    {\n        consumeUntilTestCycle(1, 8, 0, 9);\n    }\n']",Until;class;Single;Buffer;ails;consume;IOException;expected;OFException;Until,3.259629011154175e-09;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.6298145055770874e-09;-1.6298145055770874e-09,5,5,"[-5.942823886871338, -5.579460144042969, -4.620195388793945, -5.827203273773193, -5.343971252441406, -0.02426520548760891]",0.976026713848114
2,"['    @Test(expected = EOFException.class)\n    public void consumeUntil_MultipleBuffer_Fails() throws IOException\n    {\n        consumeUntilTestCycle(2, 8, 0, 17);\n    }\n']",ails;Until;expected;consume;OFException;Until;IOException;class;consume;Buffer,3.259629011154175e-09;3.026798367500305e-09;2.3283064365386963e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.862645149230957e-09;1.8044374883174896e-09;6.984919309616089e-10;4.656612873077393e-10;-2.7939677238464355e-09,5,5,"[-5.939070701599121, -5.585756301879883, -4.623966217041016, -5.819769382476807, -5.340042591094971, -0.024254849180579185]",0.9760368466377258
2,"['    @Test\n    public void rebufferTimeout() throws IOException\n    {\n        long timeoutMillis = 1000;\n        inputPlus = new AsyncStreamingInputPlus(channel, timeoutMillis, TimeUnit.MILLISECONDS);\n\n        long startNanos = System.nanoTime();\n        try\n        {\n            inputPlus.readInt();\n            Assert.fail(""should not have been able to read from the queue"");\n        }\n        catch (InputTimeoutException e)\n        {\n            // this is the success case, and is expected. any other exception is a failure.\n        }\n\n        long durationNanos = System.nanoTime() - startNanos;\n        Assert.assertTrue(TimeUnit.MILLISECONDS.toNanos(timeoutMillis) <= durationNanos);\n    }\n']",Timeout;rebuffer;read;other;catch;the;should;Time;Exception;Input,1.3969838619232178e-09;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.43833414465189e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.9893879890441895, -5.500753402709961, -4.624393463134766, -5.858123302459717, -5.487450122833252, -0.023671403527259827]",0.976606547832489
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void testAcceptsNoLessThanThreeArguments() throws Exception\n    {\n        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""1""), new TestTimeSource(), 10);\n    }\n']",Pressure;Back;new;Exception;Rate;new;of;Exception;Source;Immutable,2.561137080192566e-09;1.7462298274040222e-09;1.3387762010097504e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.026371955871582, -5.610567092895508, -4.579050064086914, -5.915597915649414, -5.446839332580566, -0.023621691390872]",0.9766552448272705
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void testHighRatioMustBeBiggerThanZero() throws Exception\n    {\n        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0"", FACTOR, ""2"", FLOW, ""FAST""), new TestTimeSource(), 10);\n    }\n']",Time;ATIO;Pressure;expected;Must;new;Back;Argument;Based;High,2.9802322387695312e-08;5.122274160385132e-09;5.122274160385132e-09;3.4924596548080444e-09;3.14321368932724e-09;2.7939677238464355e-09;2.561137080192566e-09;1.6880221664905548e-09;1.3969838619232178e-09;1.1641532182693481e-09,5,5,"[-6.128849506378174, -5.662026405334473, -4.488317966461182, -5.958984851837158, -5.52715539932251, -0.023733338341116905]",0.9765461087226868
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void testHighRatioMustBeSmallerEqualThanOne() throws Exception\n    {\n        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""2"", FACTOR, ""2"", FLOW, ""FAST""), new TestTimeSource(), 10);\n    }\n']",Pressure;IGH;Smaller;Based;Time;High;qual;FLOW;ATIO;Source,7.916241884231567e-09;3.259629011154175e-09;2.561137080192566e-09;2.5029294192790985e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.4551915228366852e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-6.12777853012085, -5.670342445373535, -4.495729923248291, -5.963099956512451, -5.527574062347412, -0.023608651012182236]",0.9766678810119629
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void testFactorMustBeBiggerEqualThanOne() throws Exception\n    {\n        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""0"", FLOW, ""FAST""), new TestTimeSource(), 10);\n    }\n']",Bigger;One;Exception;Factor;expected;FLOW;Based;Rate;Must;ATIO,1.1175870895385742e-08;1.1175870895385742e-08;2.7939677238464355e-09;2.7939677238464355e-09;2.2118911147117615e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09,5,5,"[-6.103020668029785, -5.647175312042236, -4.526916027069092, -5.932689666748047, -5.508840560913086, -0.023554977029561996]",0.9767202734947205
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void testWindowSizeMustBeBiggerEqualThanTen() throws Exception\n    {\n        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""5"", FLOW, ""FAST""), new TestTimeSource(), 1);\n    }\n']",FLOW;Pressure;Based;qual;expected;Ten;Exception;Time;class;Back,4.6566128730773926e-09;3.841705620288849e-09;1.862645149230957e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-6.120968341827393, -5.685885906219482, -4.505828857421875, -5.9508376121521, -5.506810665130615, -0.02357267402112484]",0.9767029881477356
2,"['    @Test\n    public void testFlowMustBeEitherFASTorSLOW() throws Exception\n    {\n        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""1"", FLOW, ""FAST""), new TestTimeSource(), 10);\n        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""1"", FLOW, ""SLOW""), new TestTimeSource(), 10);\n        try\n        {\n            new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""1"", FLOW, ""WRONG""), new TestTimeSource(), 10);\n            fail(""Expected to fail with wrong flow type."");\n        }\n        catch (Exception ex)\n        {\n        }\n    }\n']",SLOW;Must;ASTor;WRONG;new;FLOW;ACTOR;to;Time;Based,2.0372681319713593e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.968061931431293e-10;9.604264050722122e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.893700122833252, -5.55582857131958, -4.6832075119018555, -5.747407913208008, -5.344242572784424, -0.024126272648572922]",0.9761624336242676
2,"['    @Test\n    public void testBackPressureStateUpdates()\n    {\n        long windowSize = 6000;\n        TestTimeSource timeSource = new TestTimeSource();\n        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);\n\n        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());\n        state.onMessageSent(null);\n        assertEquals(0, state.incomingRate.size());\n        assertEquals(0, state.outgoingRate.size());\n\n        state = strategy.newState(InetAddressAndPort.getLoopbackAddress());\n        state.onResponseReceived();\n        assertEquals(1, state.incomingRate.size());\n        assertEquals(1, state.outgoingRate.size());\n\n        state = strategy.newState(InetAddressAndPort.getLoopbackAddress());\n        state.onResponseTimeout();\n        assertEquals(0, state.incomingRate.size());\n        assertEquals(1, state.outgoingRate.size());\n    }\n']",time;Loopback;Response;ACTOR;Loopback;Received;Source;Message;Pressure;incoming,9.022187441587448e-10;5.820766091346741e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.927114963531494, -5.497158527374268, -4.633797645568848, -5.811573028564453, -5.438304424285889, -0.024110212922096252]",0.9761781096458435
2,"['    @Test\n    public void testBackPressureIsNotUpdatedBeyondInfinity() throws Exception\n    {\n        long windowSize = 6000;\n        TestTimeSource timeSource = new TestTimeSource();\n        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);\n        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());\n\n        // Get initial rate:\n        double initialRate = state.rateLimiter.getRate();\n        assertEquals(Double.POSITIVE_INFINITY, initialRate, 0.0);\n\n        // Update incoming and outgoing rate equally:\n        state.incomingRate.update(1);\n        state.outgoingRate.update(1);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify the rate doesn\'t change because already at infinity:\n        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);\n        assertEquals(initialRate, state.rateLimiter.getRate(), 0.0);\n    }\n']",INFINITY;ACTOR;POSITIVE;ATIO;time;Pressure;Equals;Address;Exception;outgoing,1.367880031466484e-09;1.0477378964424133e-09;9.89530235528946e-10;8.149072527885437e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.9322943687438965, -5.479064464569092, -4.650165557861328, -5.808696269989014, -5.457380294799805, -0.023935876786708832]",0.976348340511322
2,"['    @Test\n    public void testBackPressureIsUpdatedOncePerWindowSize() throws Exception\n    {\n        long windowSize = 6000;\n        TestTimeSource timeSource = new TestTimeSource();\n        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);\n        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());\n\n        // Get initial time:\n        long current = state.getLastIntervalAcquire();\n        assertEquals(0, current);\n\n        // Update incoming and outgoing rate:\n        state.incomingRate.update(1);\n        state.outgoingRate.update(1);\n\n        // Move time ahead by window size:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify the timestamp changed:\n        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);\n        current = state.getLastIntervalAcquire();\n        assertEquals(timeSource.currentTimeMillis(), current);\n\n        // Move time ahead by less than interval:\n        long previous = current;\n        timeSource.sleep(windowSize / 2, TimeUnit.MILLISECONDS);\n\n        // Verify the last timestamp didn\'t change because below the window size:\n        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);\n        current = state.getLastIntervalAcquire();\n        assertEquals(previous, current);\n    }\n']",sleep;Source;Size;Acquire;Rate;initial;Hash;Based;Once;FLOW,1.862645149230957e-09;6.111804395914078e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.89811897277832, -5.453625679016113, -4.665884971618652, -5.763150215148926, -5.429612159729004, -0.02425403520464897]",0.9760377407073975
2,"['    @Test\n    public void testBackPressureWhenBelowHighRatio() throws Exception\n    {\n        long windowSize = 6000;\n        TestTimeSource timeSource = new TestTimeSource();\n        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);\n        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());\n\n        // Update incoming and outgoing rate so that the ratio is 0.5:\n        state.incomingRate.update(50);\n        state.outgoingRate.update(100);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify the rate is decreased by factor:\n        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);\n        assertEquals(7.4, state.rateLimiter.getRate(), 0.1);\n    }\n']",AST;Loopback;rate;Limiter;incoming;strategy;window;ILLISECONDS;SECONDS;Ratio,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.602487362921238e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.945504188537598, -5.481826305389404, -4.6476569175720215, -5.813619613647461, -5.469392776489258, -0.023845786228775978]",0.9764362573623657
2,"['    @Test\n    public void testBackPressureRateLimiterIsIncreasedAfterGoingAgainAboveHighRatio() throws Exception\n    {\n        long windowSize = 6000;\n        TestTimeSource timeSource = new TestTimeSource();\n        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);\n        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());\n\n        // Update incoming and outgoing rate so that the ratio is 0.5:\n        state.incomingRate.update(50);\n        state.outgoingRate.update(100);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify the rate decreased:\n        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);\n        assertEquals(7.4, state.rateLimiter.getRate(), 0.1);\n\n        // Update incoming and outgoing rate back above high rate:\n        state.incomingRate.update(50);\n        state.outgoingRate.update(50);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify rate limiter is increased by factor:\n        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);\n        assertEquals(8.25, state.rateLimiter.getRate(), 0.1);\n\n        // Update incoming and outgoing rate to keep it below the limiter rate:\n        state.incomingRate.update(1);\n        state.outgoingRate.update(1);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify rate limiter is not increased as already higher than the actual rate:\n        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);\n        assertEquals(8.25, state.rateLimiter.getRate(), 0.1);\n    }\n']",sleep;ATIO;update;Rate;IGH;Address;time;Back;Pressure;Update,3.725290298461914e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.921356201171875, -5.441151142120361, -4.642744064331055, -5.798427581787109, -5.472151756286621, -0.024171538650989532]",0.976118266582489
2,"['    @Test\n    public void testBackPressureFastFlow() throws Exception\n    {\n        long windowSize = 6000;\n        TestTimeSource timeSource = new TestTimeSource();\n        TestableBackPressure strategy = new TestableBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);\n        RateBasedBackPressureState state1 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.1""));\n        RateBasedBackPressureState state2 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.2""));\n        RateBasedBackPressureState state3 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.3""));\n\n        // Update incoming and outgoing rates:\n        state1.incomingRate.update(50);\n        state1.outgoingRate.update(100);\n        state2.incomingRate.update(80); // fast\n        state2.outgoingRate.update(100);\n        state3.incomingRate.update(20);\n        state3.outgoingRate.update(100);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify the fast replica rate limiting has been applied:\n        Set<RateBasedBackPressureState> replicaGroup = Sets.newHashSet(state1, state2, state3);\n        strategy.apply(replicaGroup, 1, TimeUnit.SECONDS);\n        assertTrue(strategy.checkAcquired());\n        assertTrue(strategy.checkApplied());\n        assertEquals(12.0, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);\n    }\n']",ahead;Acquired;Unit;Address;FLOW;ACTOR;Fast;long;window;state,8.731149137020111e-10;8.149072527885437e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.893389701843262, -5.389085292816162, -4.672781467437744, -5.779526233673096, -5.457860946655273, -0.024316050112247467]",0.9759771823883057
2,"['    @Test\n    public void testBackPressureSlowFlow() throws Exception\n    {\n        long windowSize = 6000;\n        TestTimeSource timeSource = new TestTimeSource();\n        TestableBackPressure strategy = new TestableBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""SLOW""), timeSource, windowSize);\n        RateBasedBackPressureState state1 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.1""));\n        RateBasedBackPressureState state2 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.2""));\n        RateBasedBackPressureState state3 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.3""));\n\n        // Update incoming and outgoing rates:\n        state1.incomingRate.update(50);\n        state1.outgoingRate.update(100);\n        state2.incomingRate.update(100);\n        state2.outgoingRate.update(100);\n        state3.incomingRate.update(20); // slow\n        state3.outgoingRate.update(100);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify the slow replica rate limiting has been applied:\n        Set<RateBasedBackPressureState> replicaGroup = Sets.newHashSet(state1, state2, state3);\n        strategy.apply(replicaGroup, 1, TimeUnit.SECONDS);\n        assertTrue(strategy.checkAcquired());\n        assertTrue(strategy.checkApplied());\n        assertEquals(3.0, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);\n    }\n']",sleep;Pressure;Slow;Hash;Exception;ACTOR;window;Time;rate;able,1.862645149230957e-09;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.894425868988037, -5.381877422332764, -4.669945240020752, -5.782173156738281, -5.464474201202393, -0.024337107315659523]",0.9759566783905029
2,"['    @Test\n    public void testBackPressureWithDifferentGroups() throws Exception\n    {\n        long windowSize = 6000;\n        TestTimeSource timeSource = new TestTimeSource();\n        TestableBackPressure strategy = new TestableBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""SLOW""), timeSource, windowSize);\n        RateBasedBackPressureState state1 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.1""));\n        RateBasedBackPressureState state2 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.2""));\n        RateBasedBackPressureState state3 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.3""));\n        RateBasedBackPressureState state4 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.4""));\n\n        // Update incoming and outgoing rates:\n        state1.incomingRate.update(50); // this\n        state1.outgoingRate.update(100);\n        state2.incomingRate.update(100);\n        state2.outgoingRate.update(100);\n        state3.incomingRate.update(20); // this\n        state3.outgoingRate.update(100);\n        state4.incomingRate.update(80);\n        state4.outgoingRate.update(100);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify the first group:\n        Set<RateBasedBackPressureState> replicaGroup = Sets.newHashSet(state1, state2);\n        strategy.apply(replicaGroup, 1, TimeUnit.SECONDS);\n        assertTrue(strategy.checkAcquired());\n        assertTrue(strategy.checkApplied());\n        assertEquals(7.4, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);\n\n        // Verify the second group:\n        replicaGroup = Sets.newHashSet(state3, state4);\n        strategy.apply(replicaGroup, 1, TimeUnit.SECONDS);\n        assertTrue(strategy.checkAcquired());\n        assertTrue(strategy.checkApplied());\n        assertEquals(3.0, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);\n    }\n']",Different;IGH;Pressure;roups;window;of;update;Immutable;Back;incoming,1.280568540096283e-09;1.076841726899147e-09;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9467628337442875e-10,5,5,"[-5.89004373550415, -5.370011806488037, -4.67268180847168, -5.767293930053711, -5.465394973754883, -0.02442273311316967]",0.9758729934692383
2,"['    @Test\n    public void testBackPressurePastTimeout() throws Exception\n    {\n        long windowSize = 10000;\n        TestTimeSource timeSource = new TestTimeSource();\n        TestableBackPressure strategy = new TestableBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""SLOW""), timeSource, windowSize);\n        RateBasedBackPressureState state1 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.1""));\n        RateBasedBackPressureState state2 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.2""));\n        RateBasedBackPressureState state3 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.3""));\n\n        // Update incoming and outgoing rates:\n        state1.incomingRate.update(5); // slow\n        state1.outgoingRate.update(100);\n        state2.incomingRate.update(100);\n        state2.outgoingRate.update(100);\n        state3.incomingRate.update(100);\n        state3.outgoingRate.update(100);\n\n        // Move time ahead:\n        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);\n\n        // Verify the slow replica rate limiting has been applied:\n        Set<RateBasedBackPressureState> replicaGroup = Sets.newHashSet(state1, state2, state3);\n        strategy.apply(replicaGroup, 4, TimeUnit.SECONDS);\n        assertTrue(strategy.checkAcquired());\n        assertTrue(strategy.checkApplied());\n        assertEquals(0.5, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);\n\n        // Make one more apply call to saturate the rate limit timeout (0.5 requests per second means 2 requests span\n        // 4 seconds, but we can only make one as we have to subtract the incoming response time):\n        strategy.apply(replicaGroup, 4, TimeUnit.SECONDS);\n\n        // Now verify another call to apply doesn\'t acquire the rate limit because of the max timeout of 4 seconds minus\n        // 2 seconds of response time, so the time source itself sleeps two second:\n        long start = timeSource.currentTimeMillis();\n        strategy.apply(replicaGroup, 4, TimeUnit.SECONDS);\n        assertFalse(strategy.checkAcquired());\n        assertTrue(strategy.checkApplied());\n        assertEquals(TimeUnit.NANOSECONDS.convert(2, TimeUnit.SECONDS),\n                     strategy.timeout);\n        assertEquals(strategy.timeout,\n                     TimeUnit.NANOSECONDS.convert(timeSource.currentTimeMillis() - start, TimeUnit.MILLISECONDS));\n    }\n']",Past;Pressure;Inet;Unit;limiting;True;Hash;Time;time;long,1.3969838619232178e-09;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.902677536010742, -5.398573875427246, -4.666085720062256, -5.786135196685791, -5.463319301605225, -0.024265553802251816]",0.9760264754295349
2,"['    @Test\n    public void testDroppedMessages()\n    {\n        Verb verb = Verb.READ_REQ;\n\n        for (int i = 1; i <= 5000; i++)\n            messagingService.metrics.recordDroppedMessage(verb, i, MILLISECONDS, i % 2 == 0);\n\n        List<String> logs = new ArrayList<>();\n        messagingService.metrics.resetAndConsumeDroppedErrors(logs::add);\n        assertEquals(1, logs.size());\n        Pattern regexp = Pattern.compile(""READ_REQ messages were dropped in last 5000 ms: (\\\\d+) internal and (\\\\d+) cross node. Mean internal dropped latency: (\\\\d+) ms and Mean cross-node dropped latency: (\\\\d+) ms"");\n        Matcher matcher = regexp.matcher(logs.get(0));\n        assertTrue(matcher.find());\n        assertEquals(2500, Integer.parseInt(matcher.group(1)));\n        assertEquals(2500, Integer.parseInt(matcher.group(2)));\n        assertTrue(Integer.parseInt(matcher.group(3)) > 0);\n        assertTrue(Integer.parseInt(matcher.group(4)) > 0);\n        assertEquals(5000, (int) messagingService.metrics.getDroppedMessages().get(verb.toString()));\n\n        logs.clear();\n        messagingService.metrics.resetAndConsumeDroppedErrors(logs::add);\n        assertEquals(0, logs.size());\n\n        for (int i = 0; i < 2500; i++)\n            messagingService.metrics.recordDroppedMessage(verb, i, MILLISECONDS, i % 2 == 0);\n\n        logs.clear();\n        messagingService.metrics.resetAndConsumeDroppedErrors(logs::add);\n        assertEquals(1, logs.size());\n        matcher = regexp.matcher(logs.get(0));\n        assertTrue(matcher.find());\n        assertEquals(1250, Integer.parseInt(matcher.group(1)));\n        assertEquals(1250, Integer.parseInt(matcher.group(2)));\n        assertTrue(Integer.parseInt(matcher.group(3)) > 0);\n        assertTrue(Integer.parseInt(matcher.group(4)) > 0);\n        assertEquals(7500, (int) messagingService.metrics.getDroppedMessages().get(verb.toString()));\n    }\n']",MILLISECONDS;latency;Mean;ms;Equals;verb;reset;add;Verb;Messages,8.440110832452774e-10;6.984919309616089e-10;4.656612873077393e-10;4.3655745685100555e-10;4.147295840084553e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.861123085021973, -5.4643354415893555, -4.692289352416992, -5.692471504211426, -5.399291038513184, -0.024436110630631447]",0.975860059261322
2,"['    @Test\n    public void testDCLatency() throws Exception\n    {\n        int latency = 100;\n        ConcurrentHashMap<String, MessagingMetrics.DCLatencyRecorder> dcLatency = MessagingService.instance().metrics.dcLatency;\n        dcLatency.clear();\n\n        long now = System.currentTimeMillis();\n        long sentAt = now - latency;\n        assertNull(dcLatency.get(""datacenter1""));\n        addDCLatency(sentAt, now);\n        assertNotNull(dcLatency.get(""datacenter1""));\n        assertEquals(1, dcLatency.get(""datacenter1"").dcLatency.getCount());\n        long expectedBucket = bucketOffsets[Math.abs(Arrays.binarySearch(bucketOffsets, MILLISECONDS.toNanos(latency))) - 1];\n        assertEquals(expectedBucket, dcLatency.get(""datacenter1"").dcLatency.getSnapshot().getMax());\n    }\n']",Search;anos;binary;clear;metrics;instance;Math;datacenter;Snapshot;now,1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.920029640197754, -5.548022747039795, -4.666490077972412, -5.748773097991943, -5.402014255523682, -0.02396450750529766]",0.9763203859329224
2,"[""    @Test\n    public void testNegativeDCLatency()\n    {\n        MessagingMetrics.DCLatencyRecorder updater = MessagingService.instance().metrics.internodeLatencyRecorder(InetAddressAndPort.getLocalHost());\n\n        // if clocks are off should just not track anything\n        int latency = -100;\n\n        long now = System.currentTimeMillis();\n        long sentAt = now - latency;\n\n        long count = updater.dcLatency.getCount();\n        updater.accept(now - sentAt, MILLISECONDS);\n        // negative value shoudln't be recorded\n        assertEquals(count, updater.dcLatency.getCount());\n    }\n""]",shoudln't;Metrics;Latency;sent;value;Messaging;dc;long;dc;latency,1.4260876923799515e-09;7.8580342233181e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.969244480133057, -5.486030101776123, -4.636706352233887, -5.843337535858154, -5.469400882720947, -0.023783395066857338]",0.9764971137046814
2,"['    @Test\n    public void testQueueWaitLatency()\n    {\n        int latency = 100;\n        Verb verb = Verb.MUTATION_REQ;\n\n        Map<Verb, Timer> queueWaitLatency = MessagingService.instance().metrics.internalLatency;\n        MessagingService.instance().metrics.recordInternalLatency(verb, latency, MILLISECONDS);\n        assertEquals(1, queueWaitLatency.get(verb).getCount());\n        long expectedBucket = bucketOffsets[Math.abs(Arrays.binarySearch(bucketOffsets, MILLISECONDS.toNanos(latency))) - 1];\n        assertEquals(expectedBucket, queueWaitLatency.get(verb).getSnapshot().getMax());\n    }\n']",Wait;Queue;Latency;anos;Latency;MILLISECONDS;verb;abs;Ver;Latency,1.3969838619232178e-09;1.0477378964424133e-09;7.712515071034431e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.958796977996826, -5.555412769317627, -4.646482944488525, -5.802748680114746, -5.437553882598877, -0.023692592978477478]",0.976585865020752
2,"['    @Test\n    public void testNegativeQueueWaitLatency() throws Exception\n    {\n        int latency = -100;\n        Verb verb = Verb.MUTATION_REQ;\n\n        Map<Verb, Timer> queueWaitLatency = MessagingService.instance().metrics.internalLatency;\n        queueWaitLatency.clear();\n\n        assertNull(queueWaitLatency.get(verb));\n        MessagingService.instance().metrics.recordInternalLatency(verb, latency, MILLISECONDS);\n        assertNull(queueWaitLatency.get(verb));\n    }\n']",Negative;Messaging;Ver;Exception;Latency;Latency;Latency;latency;Service;metrics,8.847564458847046e-09;2.5029294192790985e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10,5,5,"[-5.942227363586426, -5.51162052154541, -4.63231086730957, -5.818558216094971, -5.435662269592285, -0.024014320224523544]",0.9762718677520752
2,"['    @Test\n    public void testUpdatesBackPressureOnSendWhenEnabledAndWithSupportedCallback() throws UnknownHostException\n    {\n        MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getBackPressureState(InetAddressAndPort.getByName(""127.0.0.2""));\n        RequestCallback bpCallback = new BackPressureCallback();\n        RequestCallback noCallback = new NoBackPressureCallback();\n        Message<?> ignored = null;\n\n        DatabaseDescriptor.setBackPressureEnabled(true);\n        messagingService.updateBackPressureOnSend(InetAddressAndPort.getByName(""127.0.0.2""), noCallback, ignored);\n        assertFalse(backPressureState.onSend);\n\n        DatabaseDescriptor.setBackPressureEnabled(false);\n        messagingService.updateBackPressureOnSend(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, ignored);\n        assertFalse(backPressureState.onSend);\n\n        DatabaseDescriptor.setBackPressureEnabled(true);\n        messagingService.updateBackPressureOnSend(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, ignored);\n        assertTrue(backPressureState.onSend);\n    }\n']",Pressure;Port;Enabled;Port;Send;False;Pressure;Host;Descriptor;On,4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10;3.346940502524376e-10;3.2014213502407074e-10;3.092281986027956e-10;2.9103830456733704e-10,5,5,"[-5.8888750076293945, -5.454647064208984, -4.678197383880615, -5.769521236419678, -5.407814025878906, -0.02423623390495777]",0.9760550856590271
2,"['    @Test\n    public void testUpdatesBackPressureOnReceiveWhenEnabledAndWithSupportedCallback() throws UnknownHostException\n    {\n        MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getBackPressureState(InetAddressAndPort.getByName(""127.0.0.2""));\n        RequestCallback bpCallback = new BackPressureCallback();\n        RequestCallback noCallback = new NoBackPressureCallback();\n        boolean timeout = false;\n\n        DatabaseDescriptor.setBackPressureEnabled(true);\n        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), noCallback, timeout);\n        assertFalse(backPressureState.onReceive);\n        assertFalse(backPressureState.onTimeout);\n\n        DatabaseDescriptor.setBackPressureEnabled(false);\n        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, timeout);\n        assertFalse(backPressureState.onReceive);\n        assertFalse(backPressureState.onTimeout);\n\n        DatabaseDescriptor.setBackPressureEnabled(true);\n        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, timeout);\n        assertTrue(backPressureState.onReceive);\n        assertFalse(backPressureState.onTimeout);\n    }\n']",Receive;Supported;Timeout;Receive;Callback;Back;True;Callback;update;When,9.022187441587448e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.9272966384887695, -5.478535175323486, -4.653783321380615, -5.808394908905029, -5.439017295837402, -0.023998258635401726]",0.9762874245643616
2,"['    @Test\n    public void testUpdatesBackPressureOnTimeoutWhenEnabledAndWithSupportedCallback() throws UnknownHostException\n    {\n        MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getBackPressureState(InetAddressAndPort.getByName(""127.0.0.2""));\n        RequestCallback bpCallback = new BackPressureCallback();\n        RequestCallback noCallback = new NoBackPressureCallback();\n        boolean timeout = true;\n\n        DatabaseDescriptor.setBackPressureEnabled(true);\n        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), noCallback, timeout);\n        assertFalse(backPressureState.onReceive);\n        assertFalse(backPressureState.onTimeout);\n\n        DatabaseDescriptor.setBackPressureEnabled(false);\n        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, timeout);\n        assertFalse(backPressureState.onReceive);\n        assertFalse(backPressureState.onTimeout);\n\n        DatabaseDescriptor.setBackPressureEnabled(true);\n        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, timeout);\n        assertFalse(backPressureState.onReceive);\n        assertTrue(backPressureState.onTimeout);\n    }\n']",Pressure;boolean;Receive;Enabled;messaging;true;On;Service;State;Back,4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.9240193367004395, -5.46683406829834, -4.653751373291016, -5.81062650680542, -5.443951606750488, -0.024029100313782692]",0.97625732421875
2,"['    @Test\n    public void testAppliesBackPressureWhenEnabled() throws UnknownHostException\n    {\n        DatabaseDescriptor.setBackPressureEnabled(false);\n        messagingService.applyBackPressure(Arrays.asList(InetAddressAndPort.getByName(""127.0.0.2"")), ONE_SECOND);\n        assertFalse(MockBackPressureStrategy.applied);\n\n        DatabaseDescriptor.setBackPressureEnabled(true);\n        messagingService.applyBackPressure(Arrays.asList(InetAddressAndPort.getByName(""127.0.0.2"")), ONE_SECOND);\n        assertTrue(MockBackPressureStrategy.applied);\n    }\n']",Pressure;Port;false;Host;Enabled;Port;SECOND;Pressure;messaging;applied,8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.884507179260254, -5.6460418701171875, -4.694129943847656, -5.723798751831055, -5.25059700012207, -0.024266252294182777]",0.9760258197784424
2,"['    @Test\n    public void testDoesntApplyBackPressureToBroadcastAddress() throws UnknownHostException\n    {\n        DatabaseDescriptor.setBackPressureEnabled(true);\n        messagingService.applyBackPressure(Arrays.asList(InetAddressAndPort.getByName(""127.0.0.1"")), ONE_SECOND);\n        assertFalse(MockBackPressureStrategy.applied);\n    }\n']",applied;Pressure;Service;Doesnt;SECOND;messaging;Pressure;Enabled;get;Address,1.1059455573558807e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10,5,5,"[-5.985507965087891, -5.602265357971191, -4.608649253845215, -5.8654046058654785, -5.404277324676514, -0.02378351055085659]",0.9764971137046814
2,"['    @Test\n    public void testFailedInternodeAuth() throws Exception\n    {\n        MessagingService ms = MessagingService.instance();\n        DatabaseDescriptor.setInternodeAuthenticator(ALLOW_NOTHING_AUTHENTICATOR);\n        InetAddressAndPort address = InetAddressAndPort.getByName(""127.0.0.250"");\n\n        //Should return null\n        Message messageOut = Message.out(Verb.ECHO_REQ, NoPayload.noPayload);\n        assertFalse(ms.isConnected(address, messageOut));\n\n        //Should tolerate null\n        ms.closeOutbound(address);\n        ms.send(messageOut, address);\n    }\n']",out;ECH;instance;Inet;ailed;ms;No;ALLOW;message;Payload,5.820766091346741e-10;5.820766091346741e-10;5.020410753786564e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.942265033721924, -5.5218892097473145, -4.653436660766602, -5.817607402801514, -5.399414539337158, -0.023931104689836502]",0.976352870464325
2,"['//    @Test\n//    public void reconnectWithNewIp() throws Exception\n//    {\n//        InetAddressAndPort publicIp = InetAddressAndPort.getByName(""127.0.0.2"");\n//        InetAddressAndPort privateIp = InetAddressAndPort.getByName(""127.0.0.3"");\n//\n//        // reset the preferred IP value, for good test hygene\n//        SystemKeyspace.updatePreferredIP(publicIp, publicIp);\n//\n//        // create pool/conn with public addr\n//        Assert.assertEquals(publicIp, messagingService.getCurrentEndpoint(publicIp));\n//        messagingService.maybeReconnectWithNewIp(publicIp, privateIp).await(1L, TimeUnit.SECONDS);\n//        Assert.assertEquals(privateIp, messagingService.getCurrentEndpoint(publicIp));\n//\n//        messagingService.closeOutbound(publicIp);\n//\n//        // recreate the pool/conn, and make sure the preferred ip addr is used\n//        Assert.assertEquals(privateIp, messagingService.getCurrentEndpoint(publicIp));\n//    }\n']",SECONDS;reconnect;preferred;hy;Reconnect;Inet;await;reset;sure;addr,1.1059455573558807e-09;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;5.384208634495735e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.914654731750488, -5.506970405578613, -4.678024768829346, -5.760225772857666, -5.36476469039917, -0.024174097925424576]",0.9761157631874084
2,"['    @Test\n    public void listenPlainConnection() throws InterruptedException\n    {\n        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()\n                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.none);\n        listen(serverEncryptionOptions, false);\n    }\n']",Plain;Encryption;server;false;Encryption;Server;Connection;Encryption;Options;server,1.7462298274040222e-09;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.989101409912109, -5.407310962677002, -4.56041145324707, -5.889218807220459, -5.5032429695129395, -0.024589888751506805]",0.9757099747657776
2,"['    @Test\n    public void listenPlainConnectionWithBroadcastAddr() throws InterruptedException\n    {\n        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()\n                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.none);\n        listen(serverEncryptionOptions, true);\n    }\n']",Exception;Options;Options;Internode;listen;server;Server;Encryption;Encryption;Encryption,9.313225746154785e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.3283064365386963e-10,5,5,"[-5.992461204528809, -5.411128044128418, -4.5604448318481445, -5.893866539001465, -5.503430366516113, -0.02454952709376812]",0.9757493734359741
2,"['    @Test\n    public void listenRequiredSecureConnection() throws InterruptedException\n    {\n        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()\n                                                          .withOptional(false)\n                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.all)\n                                                          .withLegacySslStoragePort(false);\n        listen(serverEncryptionOptions, false);\n    }\n']",Interrupted;listen;Server;Optional;Options;Storage;Internode;sl;Server;false,2.153683453798294e-09;1.3387762010097504e-09;6.039044819772243e-10;4.656612873077393e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.94377326965332, -5.273349285125732, -4.560091972351074, -5.854093074798584, -5.531509876251221, -0.02535656839609146]",0.9749622344970703
2,"['    @Test\n    public void listenRequiredSecureConnectionWithBroadcastAddr() throws InterruptedException\n    {\n        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()\n                                                          .withOptional(false)\n                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.all)\n                                                          .withLegacySslStoragePort(false);\n        listen(serverEncryptionOptions, true);\n    }\n']",Exception;Required;Server;Optional;Port;with;false;server;new;Encryption,9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.748006515204906e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.953512191772461, -5.281132221221924, -4.550386428833008, -5.872068881988525, -5.53652286529541, -0.025321584194898605]",0.9749963283538818
2,"['    @Test\n    public void listenRequiredSecureConnectionWithLegacyPort() throws InterruptedException\n    {\n        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()\n                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.all)\n                                                          .withOptional(false)\n                                                          .withLegacySslStoragePort(true);\n        listen(serverEncryptionOptions, false);\n    }\n']",Optional;Internode;Exception;Storage;Options;listen;Port;Legacy;Options;false,1.862645149230957e-09;1.2223608791828156e-09;9.313225746154785e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.952518939971924, -5.282794952392578, -4.554196357727051, -5.861936569213867, -5.533167362213135, -0.025317398831248283]",0.9750003814697266
2,"['    @Test\n    public void listenRequiredSecureConnectionWithBroadcastAddrAndLegacyPort() throws InterruptedException\n    {\n        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()\n                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.all)\n                                                          .withOptional(false)\n                                                          .withLegacySslStoragePort(true);\n        listen(serverEncryptionOptions, true);\n    }\n']",with;with;listen;server;true;Optional;Server;Legacy;Encryption;Server,1.8335413187742233e-09;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.947319507598877, -5.262725830078125, -4.552177906036377, -5.863121032714844, -5.530539512634277, -0.02546592988073826]",0.9748556017875671
2,"['    @Test\n    public void listenOptionalSecureConnection() throws InterruptedException\n    {\n        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()\n                                                          .withOptional(true);\n        listen(serverEncryptionOptions, false);\n    }\n']",Optional;listen;Options;Encryption;listen;Server;Secure;Optional;Options;Interrupted,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0,5,5,"[-6.000271320343018, -5.393770694732666, -4.549320697784424, -5.896727561950684, -5.509471893310547, -0.02469642646610737]",0.9756060242652893
2,"['    @Test\n    public void listenOptionalSecureConnectionWithBroadcastAddr() throws InterruptedException\n    {\n        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()\n                                                          .withOptional(true);\n        listen(serverEncryptionOptions, true);\n    }\n']",Interrupted;Optional;listen;Optional;new;Options;Encryption;server;Connection;Options,3.3760443329811096e-09;1.979060471057892e-09;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-6.005428791046143, -5.415079116821289, -4.5549540519714355, -5.895423412322998, -5.503946781158447, -0.02455080673098564]",0.9757480025291443
2,"['//    @Test\n//    public void getPreferredRemoteAddrUsesPrivateIp() throws UnknownHostException\n//    {\n//        MessagingService ms = MessagingService.instance();\n//        InetAddressAndPort remote = InetAddressAndPort.getByNameOverrideDefaults(""127.0.0.151"", 7000);\n//        InetAddressAndPort privateIp = InetAddressAndPort.getByName(""127.0.0.6"");\n//\n//        OutboundConnectionSettings template = new OutboundConnectionSettings(remote)\n//                                              .withConnectTo(privateIp)\n//                                              .withAuthenticator(ALLOW_NOTHING_AUTHENTICATOR);\n//        OutboundConnections pool = new OutboundConnections(template, new MockBackPressureStrategy(null).newState(remote));\n//        ms.channelManagers.put(remote, pool);\n//\n//        Assert.assertEquals(privateIp, ms.getPreferredRemoteAddr(remote));\n//    }\n']",Authenticator;Remote;Mock;Equals;Add;Port;remote;Connection;ING;By,1.5133991837501526e-09;1.1641532182693481e-09;1.1641532182693481e-09;7.566995918750763e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.928069114685059, -5.339599609375, -4.652600288391113, -5.802972793579102, -5.480125904083252, -0.024482758715748787]",0.9758144021034241
2,"['//    @Test\n//    public void getPreferredRemoteAddrUsesPreferredIp() throws UnknownHostException\n//    {\n//        MessagingService ms = MessagingService.instance();\n//        InetAddressAndPort remote = InetAddressAndPort.getByNameOverrideDefaults(""127.0.0.115"", 7000);\n//\n//        InetAddressAndPort preferredIp = InetAddressAndPort.getByName(""127.0.0.16"");\n//        SystemKeyspace.updatePreferredIP(remote, preferredIp);\n//\n//        Assert.assertEquals(preferredIp, ms.getPreferredRemoteAddr(remote));\n//    }\n']",Messaging;preferred;Unknown;preferred;Add;Address;Address;Inet;get;By,8.149072527885437e-10;7.566995918750763e-10;4.3655745685100555e-10;3.346940502524376e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.4551915228366852e-10,5,5,"[-5.934245586395264, -5.523863792419434, -4.668934345245361, -5.773268222808838, -5.358125686645508, -0.02412790060043335]",0.9761608242988586
2,"['//    @Test\n//    public void getPreferredRemoteAddrUsesPrivateIpOverridesPreferredIp() throws UnknownHostException\n//    {\n//        MessagingService ms = MessagingService.instance();\n//        InetAddressAndPort local = InetAddressAndPort.getByNameOverrideDefaults(""127.0.0.4"", 7000);\n//        InetAddressAndPort remote = InetAddressAndPort.getByNameOverrideDefaults(""127.0.0.105"", 7000);\n//        InetAddressAndPort privateIp = InetAddressAndPort.getByName(""127.0.0.6"");\n//\n//        OutboundConnectionSettings template = new OutboundConnectionSettings(remote)\n//                                              .withConnectTo(privateIp)\n//                                              .withAuthenticator(ALLOW_NOTHING_AUTHENTICATOR);\n//\n//        OutboundConnections pool = new OutboundConnections(template, new MockBackPressureStrategy(null).newState(remote));\n//        ms.channelManagers.put(remote, pool);\n//\n//        InetAddressAndPort preferredIp = InetAddressAndPort.getByName(""127.0.0.16"");\n//        SystemKeyspace.updatePreferredIP(remote, preferredIp);\n//\n//        Assert.assertEquals(privateIp, ms.getPreferredRemoteAddr(remote));\n//    }\n']",remote;local;Preferred;Port;Messaging;instance;Preferred;Port;Remote;Add,6.402842700481415e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.055902197957039e-10;2.546585164964199e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.909826278686523, -5.341790199279785, -4.66916561126709, -5.773322582244873, -5.461724281311035, -0.02453417330980301]",0.9757643342018127
2,['    @Test (expected = IllegalArgumentException.class)\n    public void build_SmallSendSize()\n    {\n        test(settings -> settings.withSocketSendBufferSizeInBytes(999));\n    }\n'],build;settings;expected;Exception;Send;In;Buffer;class;Illegal;Argument,2.561137080192566e-09;1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;0.0;-5.820766091346741e-11;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-6.033570766448975, -5.588098049163818, -4.556278228759766, -5.936504364013672, -5.440975666046143, -0.023900028318166733]",0.9763834476470947
2,['    @Test (expected = IllegalArgumentException.class)\n    public void build_SendSizeLessThanZero()\n    {\n        test(settings -> settings.withSocketSendBufferSizeInBytes(-1));\n    }\n'],Than;Buffer;class;Less;Size;Send;Exception;Zero;Bytes;Socket,5.3551048040390015e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.979060471057892e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.0186340659856796e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10,5,5,"[-6.093125343322754, -5.65315580368042, -4.516899585723877, -5.962080001831055, -5.476000785827637, -0.023727400228381157]",0.9765517711639404
2,['    @Test (expected = IllegalArgumentException.class)\n    public void build_TcpConnectTimeoutLessThanZero()\n    {\n        test(settings -> settings.withTcpConnectTimeoutInMS(-1));\n    }\n'],expected;cp;build;with;MS;Connect;cp;Illegal;Exception;Connect,4.889443516731262e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-6.07824182510376, -5.650753021240234, -4.520190238952637, -5.972643852233887, -5.464695930480957, -0.023755107074975967]",0.976524829864502
2,"['    @Test\n    public void repeatsOperationWithQueryByChangeOfTable() {\n        User user = putUserBlocking();\n\n        PreparedGetObject<User> operation = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(query)\n                .prepare();\n\n        verifyChangesReceived(operation, tableChanges, user);\n    }\n']",Changes;prepare;Received;Blocking;table;Object;operation;User;class;Table,1.280568540096283e-09;9.313225746154785e-10;8.440110832452774e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-6.0045599937438965, -5.510751247406006, -4.601185321807861, -5.828293323516846, -5.462338447570801, -0.024023396894335747]",0.9762627482414246
2,"['    @Test\n    public void repeatsOperationWithRawQueryByChangeOfTable() {\n        User user = putUserBlocking();\n\n        PreparedGetObject<User> operation = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(query)\n                .prepare();\n\n        verifyChangesReceived(operation, tableChanges, user);\n    }\n']",Blocking;table;Change;user;Query;User;class;Received;user;operation,1.1641532182693481e-09;9.89530235528946e-10;9.89530235528946e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.007111549377441, -5.5165205001831055, -4.598052024841309, -5.830983638763428, -5.463357448577881, -0.02401292324066162]",0.9762731194496155
2,"['    @Test\n    public void repeatsOperationWithQueryByChangeOfTag() {\n        User user = putUserBlocking();\n\n        PreparedGetObject<User> operation = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(query)\n                .prepare();\n\n        verifyChangesReceived(operation, tagChanges, user);\n    }\n']",Blocking;repeats;Query;Change;OSQLite;tag;object;operation;Prepared;with,1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.548361852765083e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.003979682922363, -5.519964218139648, -4.606078147888184, -5.826467037200928, -5.459340572357178, -0.023955196142196655]",0.9763293266296387
2,"['    @Test\n    public void repeatsOperationWithRawQueryByChangeOfTag() {\n        User user = putUserBlocking();\n\n        PreparedGetObject<User> operation = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(query)\n                .prepare();\n\n        verifyChangesReceived(operation, tagChanges, user);\n    }\n']",Received;Prepared;Get;verify;User;Query;User;stor;Raw;Changes,1.1059455573558807e-09;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;3.2014213502407074e-10,5,5,"[-6.00753927230835, -5.5273871421813965, -4.602894306182861, -5.828615665435791, -5.4600958824157715, -0.02393878623843193]",0.9763454794883728
2,"['    @Test\n    public void repeatsOperationWithQueryByChangeOfTable() {\n        User user = putUserBlocking();\n\n        PreparedGetListOfObjects<User> operation = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(query)\n                .prepare();\n\n        verifyChangesReceived(operation, tableChanges, singletonList(user));\n    }\n']",stor;Prepared;table;singleton;Received;By;List;Object;user;put,6.257323548197746e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.5652192309498787e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.0059051513671875, -5.518105983734131, -4.603113174438477, -5.82600736618042, -5.466811656951904, -0.023957524448633194]",0.9763273000717163
2,"['    @Test\n    public void repeatsOperationWithRawQueryByChangeOfTable() {\n        User user = putUserBlocking();\n\n        PreparedGetListOfObjects<User> operation = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(rawQuery)\n                .prepare();\n\n        verifyChangesReceived(operation, tableChanges, singletonList(user));\n    }\n']",Query;User;User;Received;repeats;Raw;List;By;class;verify,8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-6.008398056030273, -5.531172752380371, -4.604248046875, -5.823768138885498, -5.461414337158203, -0.023916322737932205]",0.9763674139976501
2,"['    @Test\n    public void repeatsOperationWithQueryByChangeOfTag() {\n        User user = putUserBlocking();\n\n        PreparedGetListOfObjects<User> operation = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(query)\n                .prepare();\n\n        verifyChangesReceived(operation, tagChanges, singletonList(user));\n    }\n']",operation;stor;tag;repeats;Changes;Blocking;List;Change;with;operation,1.0186340659856796e-09;8.585629984736443e-10;7.566995918750763e-10;6.984919309616089e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.005719184875488, -5.522984027862549, -4.607544422149658, -5.825527191162109, -5.467299461364746, -0.023891763761639595]",0.9763912558555603
2,"['    @Test\n    public void repeatsOperationWithRawQueryByChangeOfTag() {\n        User user = putUserBlocking();\n\n        PreparedGetListOfObjects<User> operation = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(rawQuery)\n                .prepare();\n\n        verifyChangesReceived(operation, tagChanges, singletonList(user));\n    }\n']",operation;repeats;tag;Received;put;Object;Change;get;Query;operation,9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.5652192309498787e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-6.010536193847656, -5.5381879806518555, -4.608129501342773, -5.823028564453125, -5.462607383728027, -0.02383996732532978]",0.9764419794082642
2,"['    @Test\n    public void insertEmission() {\n        final List<User> users = TestFactory.newUsers(10);\n\n        final Queue<Changes> expectedChanges = new LinkedList<Changes>();\n        expectedChanges.add(Changes.newInstance(UserTableMeta.TABLE, UserTableMeta.NOTIFICATION_TAG));\n\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedChanges);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        putUsersBlocking(users);\n\n        // Should receive changes of Users table\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n']",NOTIFICATION;subscribe;TAG;Table;insert;Expected;Meta;Changes;Emission;List,1.367880031466484e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.41970007866621e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.939330577850342, -5.49738073348999, -4.655481338500977, -5.78635835647583, -5.43380880355835, -0.023961016908288002]",0.9763237833976746
2,"['    @Test\n    public void updateEmission() {\n        final List<User> users = putUsersBlocking(10);\n        final List<User> updated = new ArrayList<User>(users.size());\n\n        for (User user : users) {\n            updated.add(User.newInstance(user.id(), user.email()));\n        }\n\n        final Queue<Changes> expectedChanges = new LinkedList<Changes>();\n        expectedChanges.add(Changes.newInstance(UserTableMeta.TABLE, UserTableMeta.NOTIFICATION_TAG));\n\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedChanges);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        storIOSQLite\n                .put()\n                .objects(updated)\n                .prepare()\n                .executeAsBlocking();\n\n        // Should receive changes of Users table\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n']",As;await;Expected;Blocking;List;Users;Emission;Changes;Expected;Instance,1.1059455573558807e-09;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.7284841053187847e-10;2.6193447411060333e-10,5,5,"[-5.950800895690918, -5.437966823577881, -4.643483638763428, -5.7982892990112305, -5.4850263595581055, -0.024044113233685493]",0.9762426614761353
2,"['    @Test\n    public void deleteEmission() {\n        final List<User> users = putUsersBlocking(10);\n\n        final Queue<Changes> expectedChanges = new LinkedList<Changes>();\n        expectedChanges.add(Changes.newInstance(UserTableMeta.TABLE, UserTableMeta.NOTIFICATION_TAG));\n\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedChanges);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        deleteUsersBlocking(users);\n\n        // Should receive changes of Users table\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n']",TAG;NOTIFICATION;Queue;mission;Value;Table;subscription;delete;That;put,2.3283064365386963e-09;1.862645149230957e-09;1.3387762010097504e-09;1.1641532182693481e-09;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.942072868347168, -5.533332347869873, -4.670703887939453, -5.762715816497803, -5.410398006439209, -0.02383938431739807]",0.9764425158500671
2,['    @Test\n    public void queryAll() {\n        final List<User> users = putUsersBlocking(3);\n        final List<User> usersFromQuery = getAllUsersBlocking();\n        assertThat(users.equals(usersFromQuery)).isTrue();\n    }\n'],Blocking;Blocking;final;From;users;Users;Query;users;equals;True,1.8044374883174896e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.0186340659856796e-09;5.966285243630409e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.001477241516113, -5.596198081970215, -4.592160701751709, -5.850316047668457, -5.415412902832031, -0.02392854355275631]",0.9763554930686951
2,"['    @Test\n    public void queryOneByField() {\n        final List<User> users = putUsersBlocking(3);\n\n        for (User user : users) {\n            final List<User> usersFromQuery = storIOSQLite\n                    .get()\n                    .listOfObjects(User.class)\n                    .withQuery(Query.builder()\n                            .table(UserTableMeta.TABLE)\n                            .where(UserTableMeta.COLUMN_EMAIL + ""=?"")\n                            .whereArgs(user.email())\n                            .build())\n                    .prepare()\n                    .executeAsBlocking();\n\n            assertThat(usersFromQuery).isNotNull();\n            assertThat(usersFromQuery).hasSize(1);\n            assertThat(usersFromQuery.get(0)).isEqualTo(user);\n        }\n    }\n']",email;Table;Blocking;user;where;Query;execute;Size;users;final,6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.5279510989785194e-10;1.3096723705530167e-10,5,5,"[-5.909189701080322, -5.361014366149902, -4.641264915466309, -5.767727375030518, -5.495424270629883, -0.024588260799646378]",0.9757115840911865
2,"['    @Test\n    public void queryOrdered() {\n        final List<User> users = TestFactory.newUsers(3);\n\n        // Reverse sorting by email before inserting, for the purity of the experiment.\n        Collections.reverse(users);\n\n        putUsersBlocking(users);\n\n        final List<User> usersFromQueryOrdered = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .orderBy(UserTableMeta.COLUMN_EMAIL)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(usersFromQueryOrdered).isNotNull();\n        assertThat(usersFromQueryOrdered).hasSize(users.size());\n\n        // Sorting by email for check ordering.\n        Collections.sort(users);\n\n        for (int i = 0; i < users.size(); i++) {\n            assertThat(usersFromQueryOrdered.get(i)).isEqualTo(users.get(i));\n        }\n    }\n']",inserting;sort;Ordered;Query;EMAIL;experiment;purity;put;sorting;Ordered,1.4551915228366852e-09;1.1641532182693481e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.939405918121338, -5.393750190734863, -4.652400016784668, -5.7759928703308105, -5.512412071228027, -0.024143842980265617]",0.9761453866958618
2,"['    @Test\n    public void queryOrderedDesc() {\n        final List<User> users = TestFactory.newUsers(3);\n\n        // Sorting by email before inserting, for the purity of the experiment.\n        Collections.sort(users);\n\n        putUsersBlocking(users);\n\n        final List<User> usersFromQueryOrdered = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .orderBy(UserTableMeta.COLUMN_EMAIL + "" DESC"")\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(usersFromQueryOrdered).isNotNull();\n        assertThat(usersFromQueryOrdered).hasSize(users.size());\n\n        // Reverse sorting by email for check ordering.\n        Collections.reverse(users);\n\n        for (int i = 0; i < users.size(); i++) {\n            assertThat(usersFromQueryOrdered.get(i)).isEqualTo(users.get(i));\n        }\n    }\n']",check;email;EMAIL;Desc;DES;Meta;by;Ordered;reverse;Blocking,1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;7.566995918750763e-10;6.111804395914078e-10;5.966285243630409e-10;5.529727786779404e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.938310146331787, -5.393497467041016, -4.650046348571777, -5.779292106628418, -5.514499664306641, -0.02415175549685955]",0.9761374592781067
2,['    @Test\n    public void querySingleLimit() {\n        putUsersBlocking(10);\n\n        final int limit = 8;\n        final List<User> usersFromQuery = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .limit(String.valueOf(limit))\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(usersFromQuery).isNotNull();\n        assertThat(usersFromQuery).hasSize(limit);\n    }\n'],Single;query;Null;get;Query;execute;prepare;Not;with;final,1.6298145055770874e-09;9.313225746154785e-10;6.83940015733242e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.710738383233547e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.977095603942871, -5.430426120758057, -4.605103015899658, -5.822884559631348, -5.50363826751709, -0.02424042299389839]",0.9760509133338928
2,"['    @Test\n    public void queryLimitOffset() {\n        final List<User> users = putUsersBlocking(10);\n\n        final int offset = 5;\n        final int limit = 3;\n        final List<User> usersFromQuery = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .orderBy(UserTableMeta.COLUMN_EMAIL)\n                        .limit(offset + "", "" + limit)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(usersFromQuery).isNotNull();\n        assertThat(usersFromQuery).hasSize(Math.min(limit, users.size() - offset));\n\n        Collections.sort(users);\n\n        int position = 0;\n        for (int i = offset; i < offset + limit; i++) {\n            assertThat(usersFromQuery.get(position++)).isEqualTo(users.get(i));\n        }\n    }\n']",users;Blocking;List;EMAIL;sort;That;User;has;offset;Query,3.055902197957039e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.952064514160156, -5.3838982582092285, -4.635858535766602, -5.795887470245361, -5.524651050567627, -0.024205980822443962]",0.9760845303535461
2,['    @Test\n    public void queryIntegerLimit() {\n        putUsersBlocking(10);\n\n        final int limit = 8;\n        final List<User> usersFromQuery = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .limit(limit)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(usersFromQuery).isNotNull();\n        assertThat(usersFromQuery).hasSize(limit);\n    }\n'],TABLE;query;User;execute;That;final;Not;limit;builder;users,5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.055902197957039e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.982038974761963, -5.428767681121826, -4.603953838348389, -5.823445796966553, -5.5032830238342285, -0.024246705695986748]",0.9760448932647705
2,"['    @Test\n    public void queryLimitOffsetQuantity() {\n        final List<User> users = putUsersBlocking(10);\n\n        final int offset = 5;\n        final int quantity = 3;\n        final List<User> usersFromQuery = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .orderBy(UserTableMeta.COLUMN_EMAIL)\n                        .limit(offset, quantity)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(usersFromQuery).isNotNull();\n        assertThat(usersFromQuery).hasSize(Math.min(quantity, users.size() - offset));\n\n        Collections.sort(users);\n\n        int position = 0;\n        for (int i = offset; i < offset + quantity; i++) {\n            assertThat(usersFromQuery.get(position++)).isEqualTo(users.get(i));\n        }\n    }\n']",Blocking;limit;Offset;Query;Collections;query;prepare;position;execute;Size,5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.948322296142578, -5.384944915771484, -4.635500907897949, -5.791366100311279, -5.525204181671143, -0.024226458743214607]",0.9760645031929016
2,"['    @Test\n    public void queryGroupBy() {\n        final List<User> users = TestFactory.newUsers(10);\n\n        for (int i = 0; i < users.size(); i++) {\n            final String commonEmail;\n            if (i < 3) {\n                commonEmail = ""first_group@gmail.com"";\n            } else {\n                commonEmail = ""second_group@gmail.com"";\n            }\n\n            users.set(i, User.newInstance(null, commonEmail));\n        }\n\n        putUsersBlocking(users);\n\n        final List<User> groupsOfUsers = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .columns(UserTableMeta.COLUMN_EMAIL)\n                        .groupBy(UserTableMeta.COLUMN_EMAIL)\n                        .build())\n                .withGetResolver(new DefaultGetResolver<User>() {\n                    @NonNull\n                    @Override\n                    public User mapFromCursor(@NonNull StorIOSQLite storIOSQLite, @NonNull Cursor cursor) {\n                        return User.newInstance(null, cursor.getString(cursor.getColumnIndex(UserTableMeta.COLUMN_EMAIL)));\n                    }\n']",com;Users;common;with;EMAIL;query;second;build;group;final,5.675246939063072e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.937836647033691, -5.306578636169434, -4.618630409240723, -5.809225559234619, -5.545941352844238, -0.02466770075261593]",0.9756340384483337
2,"['    @Test\n    public void queryHaving() {\n        final List<User> users = TestFactory.newUsers(10);\n\n        for (int i = 0; i < users.size(); i++) {\n            final String commonEmail;\n            if (i < 3) {\n                commonEmail = ""first_group@gmail.com"";\n            } else {\n                commonEmail = ""second_group@gmail.com"";\n            }\n\n            users.set(i, User.newInstance(null, commonEmail));\n        }\n\n        putUsersBlocking(users);\n\n        final int bigGroupThreshold = 5;\n\n        final List<User> groupsOfUsers = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .columns(UserTableMeta.COLUMN_EMAIL)\n                        .groupBy(UserTableMeta.COLUMN_EMAIL)\n                        .having(""COUNT(*) >= "" + bigGroupThreshold)\n                        .build())\n                .withGetResolver(new DefaultGetResolver<User>() {\n                    @NonNull\n                    @Override\n                    public User mapFromCursor(@NonNull StorIOSQLite storIOSQLite, @NonNull Cursor cursor) {\n                        return User.newInstance(null, cursor.getString(cursor.getColumnIndex(UserTableMeta.COLUMN_EMAIL)));\n                    }\n']",gmail;with;having;common;put;Users;User;Object;Email;table,1.979060471057892e-09;9.313225746154785e-10;5.820766091346741e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.934736251831055, -5.302021026611328, -4.624773979187012, -5.802593231201172, -5.547054767608643, -0.024653278291225433]",0.975648045539856
2,"['    @Test\n    public void queryDistinct() {\n        final List<User> users = new ArrayList<User>();\n\n        for (int i = 0; i < 10; i++) {\n            users.add(User.newInstance((long) i, ""same@email.com""));\n        }\n\n        putUsersBlocking(users);\n\n        final GetResolver<User> customGetResolver = new DefaultGetResolver<User>() {\n            @NonNull\n            @Override\n            public User mapFromCursor(@NonNull StorIOSQLite storIOSQLite, @NonNull Cursor cursor) {\n                return User.newInstance(null, cursor.getString(cursor.getColumnIndex(UserTableMeta.COLUMN_EMAIL)));\n            }\n']",long;EMAIL;same;Table;From;add;OSQLite;User;Null;map,9.022187441587448e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.96812629699707, -5.402665615081787, -4.635016441345215, -5.8120903968811035, -5.510170936584473, -0.02409403771162033]",0.976193904876709
2,"['    @Test\n    public void queryWithRawQuery() {\n        final List<User> users = TestFactory.newUsers(20);\n\n        int counter = 1;\n\n        for (int i = 0; i < users.size(); i++) {\n            char[] chars = new char[counter++];\n            Arrays.fill(chars, \'*\'); // wtf is going on?\n            users.set(i, User.newInstance(null, new String(chars)));\n        }\n\n        putUsersBlocking(users);\n\n        final List<User> usersWithLongName = new ArrayList<User>(users.size());\n\n        int lengthSum = 0;\n        for (User user : users) {\n            lengthSum += user.email().length();\n        }\n\n        final int avrLength = lengthSum / users.size();\n\n        for (User user : users) {\n            if (user.email().length() > avrLength) {\n                usersWithLongName.add(user);\n            }\n        }\n\n        final String query = ""Select * from "" + UserTableMeta.TABLE\n                + "" where length("" + UserTableMeta.COLUMN_EMAIL + "") > ""\n                + ""(select avg(length("" + UserTableMeta.COLUMN_EMAIL + "")) from users)"";\n\n        final List<User> usersFromQuery = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(RawQuery.builder()\n                        .query(query)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(usersFromQuery).isEqualTo(usersWithLongName);\n    }\n']",Raw;EMAIL;Blocking;From;query;tf;where;stor;Select;char,8.731149137020111e-10;6.693881005048752e-10;4.94765117764473e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.928633213043213, -5.35172700881958, -4.655438423156738, -5.746886730194092, -5.526731491088867, -0.024378176778554916]",0.9759164452552795
2,"['    @Test\n    public void queryWithRawQueryAndArguments() {\n        final User testUser = User.newInstance(null, ""testUserName"");\n\n        final List<User> users = TestFactory.newUsers(10);\n        users.add(testUser);\n        putUsersBlocking(users);\n\n        final String query = ""SELECT * FROM "" + UserTableMeta.TABLE\n                + "" WHERE "" + UserTableMeta.COLUMN_EMAIL + "" LIKE ?"";\n\n        final List<User> usersFromQuery = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(RawQuery.builder()\n                        .query(query)\n                        .args(testUser.email())\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(usersFromQuery).isNotNull();\n        assertThat(usersFromQuery).hasSize(1);\n        assertThat(usersFromQuery.get(0)).isEqualTo(testUser);\n    }\n']",email;Table;Arguments;query;list;users;EMAIL;users;Blocking;COLUM,6.402842700481415e-10;4.94765117764473e-10;2.473825588822365e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-5.940415382385254, -5.3960676193237305, -4.635159492492676, -5.791576385498047, -5.498903751373291, -0.02430732361972332]",0.9759857058525085
2,"['    @Test\n    public void queryWithRawQuerySqlInjectionFail() {\n        final List<User> users = putUsersBlocking(10);\n\n        final String query = ""SELECT * FROM "" + UserTableMeta.TABLE\n                + "" WHERE "" + UserTableMeta.COLUMN_EMAIL + "" LIKE ?"";\n\n        final String arg = ""(DELETE FROM "" + UserTableMeta.TABLE + "")"";\n\n        storIOSQLite.get()\n                .listOfObjects(User.class)\n                .withQuery(RawQuery.builder()\n                        .query(query)\n                        .args(arg)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(getAllUsersBlocking()).isEqualTo(users);\n    }\n']",LIKE;Table;DELETE;Query;Query;FROM;Raw;COLUM;Users;users,5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.955469131469727, -5.392084121704102, -4.632150173187256, -5.79736328125, -5.506847381591797, -0.024264274165034294]",0.9760276079177856
2,['    @Test\n    public void getNumberOfResults() {\n        putUsersBlocking(8);\n\n        Integer numberOfResults = storIOSQLite\n                .get()\n                .numberOfResults()\n                .withQuery(UserTableMeta.QUERY_ALL)\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(numberOfResults).isEqualTo(8);\n    }\n'],Blocking;get;User;number;QUERY;execute;ALL;Meta;qual;with,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.972023010253906, -5.48933219909668, -4.611999034881592, -5.816699028015137, -5.456866264343262, -0.02414512261748314]",0.976144015789032
2,"['    @Test\n    public void queryOneExistedObject() {\n        final List<User> users = putUsersBlocking(3);\n        final User user = users.get(0);\n\n        final User userFromQuery = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .where(UserTableMeta.COLUMN_EMAIL + ""=?"")\n                        .whereArgs(user.email())\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(userFromQuery).isNotNull();\n        assertThat(userFromQuery).isEqualTo(user);\n    }\n']",One;Blocking;users;where;Blocking;As;Table;Args;Meta;Object,1.3969838619232178e-09;9.313225746154785e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.957680702209473, -5.391026973724365, -4.610310077667236, -5.8274922370910645, -5.512037754058838, -0.024369800463318825]",0.9759247303009033
2,"['    @Test\n    public void queryOneNonExistedObject() {\n        putUsersBlocking(3);\n\n        final User userFromQuery = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .where(UserTableMeta.COLUMN_EMAIL + ""=?"")\n                        .whereArgs(""some arg"")\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(userFromQuery).isNull();\n    }\n']",That;table;prepare;Args;Table;arg;object;Table;Query;class,9.89530235528946e-10;6.693881005048752e-10;6.621121428906918e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.989031791687012, -5.42492151260376, -4.593982219696045, -5.84644889831543, -5.512097358703613, -0.02424321509897709]",0.9760481715202332
2,"['    @Test\n    public void deleteOne() {\n        final User user = putUserBlocking();\n\n        final Cursor cursorAfterInsert = db.query(UserTableMeta.TABLE, null, null, null, null, null, null);\n        assertThat(cursorAfterInsert.getCount()).isEqualTo(1);\n        cursorAfterInsert.close();\n\n        deleteUserBlocking(user);\n\n        final Cursor cursorAfterDelete = db.query(UserTableMeta.TABLE, null, null, null, null, null, null);\n        assertThat(cursorAfterDelete.getCount()).isEqualTo(0);\n        cursorAfterDelete.close();\n    }\n']",final;ursor;TABLE;Meta;ursor;db;Delete;qual;That;cursor,3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.923343181610107, -5.622550964355469, -4.674441814422607, -5.731264591217041, -5.32690954208374, -0.024010363966226578]",0.9762755632400513
2,"[""    @Test\n    public void deleteCollection() {\n        final List<User> allUsers = putUsersBlocking(10);\n\n        final List<User> usersToDelete = new ArrayList<User>();\n\n        for (int i = 0; i < allUsers.size(); i += 2) {  // Delete every second user\n            usersToDelete.add(allUsers.get(i));\n        }\n\n        final DeleteResults<User> deleteResults = storIOSQLite\n                .delete()\n                .objects(usersToDelete)\n                .prepare()\n                .executeAsBlocking();\n\n        final List<User> usersAfterDelete = getAllUsersBlocking();\n\n        assertThat(usersAfterDelete).hasSize(allUsers.size() / 2);\n\n        for (User user : allUsers) {\n            final boolean shouldBeDeleted = usersToDelete.contains(user);\n\n            // Check that we deleted what we going to.\n            assertThat(deleteResults.wasDeleted(user)).isEqualTo(shouldBeDeleted);\n\n            // Check that we didn't delete users that we didn't want to\n            assertThat(usersAfterDelete.contains(user)).isEqualTo(!shouldBeDeleted);\n        }\n    }\n""]",that;what;That;Blocking;Delete;OSQLite;Collection;delete;want;should,7.566995918750763e-10;7.566995918750763e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.896983623504639, -5.431419849395752, -4.687317371368408, -5.708970069885254, -5.443127632141113, -0.024270208552479744]",0.9760220646858215
2,['    @Test\n    public void insertEmission() {\n        final List<User> initialUsers = putUsersBlocking(10);\n        final List<User> usersForInsert = TestFactory.newUsers(10);\n        final List<User> allUsers = new ArrayList<User>(initialUsers.size() + usersForInsert.size());\n\n        allUsers.addAll(initialUsers);\n        allUsers.addAll(usersForInsert);\n\n        final Queue<List<User>> expectedUsers = new LinkedList<List<User>>();\n        expectedUsers.add(initialUsers);\n        expectedUsers.add(allUsers);\n\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedUsers);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        // Should receive initial users\n        emissionChecker.awaitNextExpectedValue();\n\n        putUsersBlocking(usersForInsert);\n\n        // Should receive initial users + inserted users\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n'],subscription;Queue;initial;await;Blocking;List;final;users;receive;users,6.984919309616089e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.930527687072754, -5.4390974044799805, -4.647108554840088, -5.795454978942871, -5.469873428344727, -0.024131741374731064]",0.9761571288108826
2,"['    @Test\n    public void updateEmission() {\n        final List<User> users = putUsersBlocking(10);\n\n        final Queue<List<User>> expectedUsers = new LinkedList<List<User>>();\n\n        final List<User> updatedList = new ArrayList<User>(users.size());\n\n        int count = 1;\n        for (User user : users) {\n            updatedList.add(User.newInstance(user.id(), ""new_email"" + count++));\n        }\n        expectedUsers.add(users);\n        expectedUsers.add(updatedList);\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedUsers);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        // Should receive all users\n        emissionChecker.awaitNextExpectedValue();\n\n        storIOSQLite\n                .put()\n                .objects(updatedList)\n                .prepare()\n                .executeAsBlocking();\n\n        // Should receive updated users\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n']",Subscription;await;List;Next;List;final;As;email;Left;expected,4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.95135498046875, -5.429601669311523, -4.648924827575684, -5.783843517303467, -5.48866605758667, -0.024056216701865196]",0.9762307405471802
2,['    @Test\n    public void deleteEmission() {\n        final List<User> usersThatShouldBeSaved = TestFactory.newUsers(10);\n        final List<User> usersThatShouldBeDeleted = TestFactory.newUsers(10);\n        final List<User> allUsers = new ArrayList<User>();\n\n        allUsers.addAll(usersThatShouldBeSaved);\n        allUsers.addAll(usersThatShouldBeDeleted);\n\n        putUsersBlocking(allUsers);\n\n        final Queue<List<User>> expectedUsers = new LinkedList<List<User>>();\n\n        expectedUsers.add(allUsers);\n        expectedUsers.add(usersThatShouldBeSaved);\n\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedUsers);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        // Should receive all users\n        emissionChecker.awaitNextExpectedValue();\n\n        deleteUsersBlocking(usersThatShouldBeDeleted);\n\n        // Should receive users that should be saved\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n'],Blocking;Deleted;add;put;subscription;delete;Factory;That;Checker;aved,6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.764863893389702e-10;2.473825588822365e-10,5,5,"[-5.92280912399292, -5.408337116241455, -4.65696907043457, -5.778371334075928, -5.48357629776001, -0.02419038861989975]",0.9760998487472534
2,"['    @Test\n    public void concurrentPutWithoutGlobalTransaction() throws InterruptedException {\n        final int numberOfConcurrentPuts = ConcurrencyTesting.optimalTestThreadsCount();\n\n        TestSubscriber<Changes> testSubscriber = new TestSubscriber<Changes>();\n\n        storIOSQLite\n                .observeChangesInTable(TweetTableMeta.TABLE)\n                .subscribe(testSubscriber);\n\n        final CountDownLatch concurrentPutLatch = new CountDownLatch(1);\n        final CountDownLatch allPutsDoneLatch = new CountDownLatch(numberOfConcurrentPuts);\n\n        for (int i = 0; i < numberOfConcurrentPuts; i++) {\n            final int iCopy = i;\n\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        concurrentPutLatch.await();\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    storIOSQLite\n                            .put()\n                            .object(Tweet.newInstance(null, 1L, ""Some text: "" + iCopy))\n                            .prepare()\n                            .executeAsBlocking();\n\n                    allPutsDoneLatch.countDown();\n                }\n']",concurrent;optimal;new;atch;Thread;atch;observe;atch;stor;uts,9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.930288314819336, -5.189080238342285, -4.593729496002197, -5.8301920890808105, -5.579257488250732, -0.025382136926054955]",0.9749371409416199
2,['    @Test\n    public void nestedTransaction() {\n        storIOSQLite.lowLevel().beginTransaction();\n\n        storIOSQLite.lowLevel().beginTransaction();\n\n        storIOSQLite.lowLevel().setTransactionSuccessful();\n        storIOSQLite.lowLevel().endTransaction();\n\n        storIOSQLite.lowLevel().setTransactionSuccessful();\n        storIOSQLite.lowLevel().endTransaction();\n    }\n'],stor;Level;begin;OSQLite;Level;low;stor;Transaction;Transaction;Transaction,7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.931501388549805, -5.525454521179199, -4.640908241271973, -5.831354141235352, -5.366491794586182, -0.02418212778866291]",0.9761078953742981
2,"['    @Test\n    public void queryOneExistedObjectObservable() {\n        final List<User> users = putUsersBlocking(3);\n        final User expectedUser = users.get(0);\n\n        final Observable<User> userObservable = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .where(UserTableMeta.COLUMN_EMAIL + ""=?"")\n                        .whereArgs(expectedUser.email())\n                        .build())\n                .prepare()\n                .asRxObservable()\n                .take(1);\n\n        TestSubscriber<User> testSubscriber = new TestSubscriber<User>();\n        userObservable.subscribe(testSubscriber);\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValue(expectedUser);\n    }\n']",Observable;Observable;Blocking;take;Terminal;Object;Observable;final;object;EMAIL,1.4551915228366852e-09;7.8580342233181e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.961255073547363, -5.321712970733643, -4.596907138824463, -5.858144760131836, -5.558792591094971, -0.02455301769077778]",0.9757459759712219
2,"['    @Test\n    public void queryOneNonExistedObjectObservable() {\n        putUsersBlocking(3);\n\n        final Observable<User> userObservable = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .where(UserTableMeta.COLUMN_EMAIL + ""=?"")\n                        .whereArgs(""some arg"")\n                        .build())\n                .prepare()\n                .asRxObservable()\n                .take(1);\n\n        TestSubscriber<User> testSubscriber = new TestSubscriber<User>();\n        userObservable.subscribe(testSubscriber);\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValue(null);\n    }\n']",Observable;await;EMAIL;Observable;Users;Observable;SECONDS;user;arg;object,1.6298145055770874e-09;1.3969838619232178e-09;1.2223608791828156e-09;9.89530235528946e-10;9.313225746154785e-10;8.440110832452774e-10;7.166818249970675e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.981650352478027, -5.354215621948242, -4.590984344482422, -5.874483585357666, -5.557638168334961, -0.024358049035072327]",0.975936233997345
2,"['    @Test\n    public void queryOneExistedObjectTableUpdate() {\n        User expectedUser = User.newInstance(null, ""such@email.com"");\n        putUsersBlocking(3);\n\n        final Observable<User> userObservable = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .where(UserTableMeta.COLUMN_EMAIL + ""=?"")\n                        .whereArgs(expectedUser.email())\n                        .build())\n                .prepare()\n                .asRxObservable()\n                .take(2);\n\n        TestSubscriber<User> testSubscriber = new TestSubscriber<User>();\n        userObservable.subscribe(testSubscriber);\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValue(null);\n\n        putUserBlocking(expectedUser);\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValues(null, expectedUser);\n    }\n']",Observable;email;await;subscribe;Table;Meta;take;Users;Args;User,1.6298145055770874e-09;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.953813552856445, -5.354720115661621, -4.632388591766357, -5.829814434051514, -5.529508113861084, -0.024251475930213928]",0.976040244102478
2,"['    @Test\n    public void queryOneNonexistedObjectTableUpdate() {\n        final Observable<User> userObservable = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(Query.builder()\n                        .table(UserTableMeta.TABLE)\n                        .where(UserTableMeta.COLUMN_EMAIL + ""=?"")\n                        .whereArgs(""some arg"")\n                        .build())\n                .prepare()\n                .asRxObservable()\n                .take(2);\n\n        TestSubscriber<User> testSubscriber = new TestSubscriber<User>();\n        userObservable.subscribe(testSubscriber);\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValue(null);\n\n        putUserBlocking();\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValues(null, null);\n    }\n']",Observable;EMAIL;One;await;take;await;object;Table;prepare;TABLE,1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;5.529727786779404e-10;5.238689482212067e-10;4.147295840084553e-10;3.2014213502407074e-10,5,5,"[-5.969165325164795, -5.37837553024292, -4.608707427978516, -5.856441020965576, -5.536221027374268, -0.024230415001511574]",0.9760608077049255
2,"['    @Test\n    public void queryListOfObjectsAsSingle() {\n        final List<User> users = putUsersBlocking(10);\n\n        final Single<List<User>> usersSingle = storIOSQLite\n                .get()\n                .listOfObjects(User.class)\n                .withQuery(UserTableMeta.QUERY_ALL)\n                .prepare()\n                .asRxSingle();\n\n        TestSubscriber<List<User>> testSubscriber = new TestSubscriber<List<User>>();\n        usersSingle.subscribe(testSubscriber);\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValue(users);\n        testSubscriber.assertCompleted();\n    }\n']",Subscriber;prepare;QUERY;Subscriber;User;list;users;Blocking;ALL;Single,5.384208634495735e-10;4.94765117764473e-10;4.656612873077393e-10;3.92901711165905e-10;3.8562575355172157e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.973670482635498, -5.434352397918701, -4.6184306144714355, -5.838087558746338, -5.501015663146973, -0.024061452597379684]",0.976225733757019
2,"['    @Test\n    public void queryObjectAsSingle() {\n        final List<User> users = putUsersBlocking(3);\n\n        final Single<User> usersSingle = storIOSQLite\n                .get()\n                .object(User.class)\n                .withQuery(UserTableMeta.QUERY_ALL)\n                .prepare()\n                .asRxSingle();\n\n        TestSubscriber<User> testSubscriber = new TestSubscriber<User>();\n        usersSingle.subscribe(testSubscriber);\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValues(users.get(0));\n        testSubscriber.assertCompleted();\n    }\n']",Blocking;subscribe;Terminal;Subscriber;Table;List;Subscriber;with;Errors;final,1.6880221664905548e-09;1.57160684466362e-09;7.421476766467094e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.971107482910156, -5.427022457122803, -4.616669654846191, -5.837424278259277, -5.498487949371338, -0.024131393060088158]",0.9761574268341064
2,"['    @Test\n    public void queryNumberOfResultsAsSingle() {\n        final List<User> users = putUsersBlocking(3);\n\n        final Single<Integer> usersSingle = storIOSQLite\n                .get()\n                .numberOfResults()\n                .withQuery(UserTableMeta.QUERY_ALL)\n                .prepare()\n                .asRxSingle();\n\n        TestSubscriber<Integer> testSubscriber = new TestSubscriber<Integer>();\n        usersSingle.subscribe(testSubscriber);\n\n        testSubscriber.awaitTerminalEvent(5, SECONDS);\n        testSubscriber.assertNoErrors();\n        testSubscriber.assertValue(users.size());\n        testSubscriber.assertCompleted();\n    }\n']",Single;with;Results;Terminal;Subscriber;QUERY;Errors;prepare;Single;Blocking,8.731149137020111e-10;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.970105171203613, -5.435544967651367, -4.625001907348633, -5.825197696685791, -5.49024772644043, -0.0240832157433033]",0.9762044548988342
2,['    @Test\n    public void deleteByQuery() {\n        storIOSQLite.delete()\n                .byQuery(DeleteQuery.builder()\n                        .table(TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],by;Tweet;delete;table;OSQLite;Query;Meta;As;By;Table,5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-6.027393817901611, -5.4765944480896, -4.5679192543029785, -5.869189262390137, -5.5116119384765625, -0.024128366261720657]",0.9761604070663452
2,['    @Test\n    public void deleteCollectionOfObjects() {\n        storIOSQLite.delete()\n                .objects(Collections.singleton(createTweet()))\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],Interceptors;OSQLite;As;Blocking;Tweet;alls;Object;execute;delete;check,1.6298145055770874e-09;7.8580342233181e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.9103830456733704e-11,5,5,"[-6.029428005218506, -5.551970481872559, -4.590758800506592, -5.85107421875, -5.462578296661377, -0.023832982406020164]",0.9764487743377686
2,['    @Test\n    public void deleteObject() {\n        storIOSQLite.delete()\n                .object(createTweet())\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],Blocking;execute;Tweet;As;Interceptors;delete;check;OSQLite;create;object,1.9208528101444244e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-11;0.0;-1.4551915228366852e-10;-1.7462298274040222e-10;-2.3283064365386963e-10,5,5,"[-6.041224479675293, -5.507278919219971, -4.5616865158081055, -5.884848117828369, -5.499382972717285, -0.024037480354309082]",0.9762492179870605
2,"['    @Test\n    public void execSql() {\n        storIOSQLite.executeSQL()\n                .withQuery(RawQuery.builder()\n                        .query(""select * from "" + TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n']",Blocking;Query;Query;Raw;Table;OSQLite;ql;builder;execute;with,2.3283064365386963e-09;7.566995918750763e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-6.012731075286865, -5.469672203063965, -4.571780204772949, -5.861083030700684, -5.495983123779297, -0.024242401123046875]",0.9760490655899048
2,"['    @Test\n    public void getCursorWithRawQuery() {\n        storIOSQLite.get()\n                .cursor()\n                .withQuery(RawQuery.builder()\n                        .query(""select * from "" + TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n']",get;ursor;Query;Query;Blocking;get;builder;stor;check;As,1.1641532182693481e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.990041255950928, -5.4414544105529785, -4.592201232910156, -5.839901924133301, -5.484756946563721, -0.02431919053196907]",0.9759740233421326
2,['    @Test\n    public void getCursorWithQuery() {\n        storIOSQLite.get()\n                .cursor()\n                .withQuery(Query.builder()\n                        .table(TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],get;get;Interceptors;As;build;alls;Table;ursor;Meta;TABLE,4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;2.9103830456733704e-11;0.0;0.0;-5.820766091346741e-11,5,5,"[-6.004876136779785, -5.41712760925293, -4.56948184967041, -5.863250732421875, -5.5105109214782715, -0.024452397599816322]",0.9758440256118774
2,"['    @Test\n    public void getListOfObjectsWithRawQuery() {\n        storIOSQLite.get()\n                .listOfObjects(Tweet.class)\n                .withQuery(RawQuery.builder()\n                        .query(""select * from "" + TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n']",Tweet;from;List;builder;OSQLite;alls;check;TABLE;select;Object,1.3969838619232178e-09;7.566995918750763e-10;7.275957614183426e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-6.004629135131836, -5.486971855163574, -4.596219062805176, -5.839572906494141, -5.484353065490723, -0.02404574304819107]",0.9762411713600159
2,['    @Test\n    public void getListOfObjectsWithQuery() {\n        storIOSQLite.get()\n                .listOfObjects(Tweet.class)\n                .withQuery(Query.builder()\n                        .table(TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],List;Meta;Tweet;check;Query;class;get;get;list;Table,5.820766091346741e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-6.002967834472656, -5.467846393585205, -4.588154315948486, -5.84379243850708, -5.487060070037842, -0.024191319942474365]",0.9760988354682922
2,"['    @Test\n    public void getNumberOfResultsWithRawQuery() {\n        storIOSQLite.get()\n                .numberOfResults()\n                .withQuery(RawQuery.builder()\n                        .query(""select * from "" + TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n']",Blocking;alls;from;Query;query;Results;OSQLite;As;Tweet;get,9.89530235528946e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-6.001670837402344, -5.455078601837158, -4.590202331542969, -5.845705986022949, -5.495213985443115, -0.024188758805394173]",0.9761013388633728
2,['    @Test\n    public void getNumberOfResultsWithQuery() {\n        storIOSQLite.get()\n                .numberOfResults()\n                .withQuery(Query.builder()\n                        .table(TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],stor;get;As;get;with;Results;TABLE;number;alls;OSQLite,1.280568540096283e-09;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;0.0,5,5,"[-6.010290622711182, -5.4463348388671875, -4.581986904144287, -5.856440544128418, -5.503838539123535, -0.024223551154136658]",0.9760674834251404
2,"['    @Test\n    public void getObjectWithRawQuery() {\n        storIOSQLite.get()\n                .object(Tweet.class)\n                .withQuery(RawQuery.builder()\n                        .query(""select * from "" + TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n']",Interceptors;from;Raw;class;query;Object;check;get;alls;stor,5.384208634495735e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;1.7462298274040222e-10;5.820766091346741e-11;2.9103830456733704e-11;0.0;0.0,5,5,"[-6.0022969245910645, -5.459688663482666, -4.586771011352539, -5.846230506896973, -5.492819309234619, -0.024211334064602852]",0.9760794043540955
2,['    @Test\n    public void getObjectWithQuery() {\n        storIOSQLite.get()\n                .object(Tweet.class)\n                .withQuery(Query.builder()\n                        .table(TweetTableMeta.TABLE)\n                        .build()\n                )\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],get;execute;Tweet;stor;table;TABLE;Object;get;alls;Query,6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-6.013673782348633, -5.454658508300781, -4.575857639312744, -5.8618011474609375, -5.500814437866211, -0.024239957332611084]",0.9760515689849854
2,['    @Test\n    public void putCollection() {\n        storIOSQLite.put()\n                .objects(Collections.singleton(createTweet()))\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],singleton;check;Collection;objects;Collections;Tweet;put;alls;create;Blocking,1.862645149230957e-09;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;7.275957614183426e-11;0.0;0.0;-1.8917489796876907e-10;-3.4924596548080444e-10,5,5,"[-6.03482723236084, -5.522290229797363, -4.577352046966553, -5.870957374572754, -5.485743045806885, -0.023922141641378403]",0.9763617515563965
2,['    @Test\n    public void putContentValues() {\n        storIOSQLite.put()\n                .contentValues(createContentValues())\n                .withPutResolver(createCVPutResolver())\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],stor;VPut;with;Interceptors;put;Values;Content;Resolver;content;execute,1.3969838619232178e-09;9.604264050722122e-10;8.440110832452774e-10;8.149072527885437e-10;6.402842700481415e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.0372681319713593e-10,5,5,"[-6.024415493011475, -5.492196083068848, -4.592905044555664, -5.8653154373168945, -5.485052108764648, -0.023929592221975327]",0.9763543605804443
2,"['    @Test\n    public void putContentValuesIterable() {\n        storIOSQLite.put()\n                .contentValues(createContentValues(), createContentValues())\n                .withPutResolver(createCVPutResolver())\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n']",Resolver;Interceptors;VPut;Values;with;OSQLite;Content;prepare;content;Values,1.367880031466484e-09;1.1059455573558807e-09;7.566995918750763e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;2.6193447411060333e-10,5,5,"[-6.01926326751709, -5.508045196533203, -4.598649024963379, -5.862558841705322, -5.471542835235596, -0.023882567882537842]",0.9764003753662109
2,['    @Test\n    public void putObject() {\n        storIOSQLite.put()\n                .object(createTweet())\n                .prepare()\n                .executeAsBlocking();\n        checkInterceptorsCalls();\n    }\n'],put;Blocking;put;Interceptors;stor;Object;create;object;check;execute,1.57160684466362e-09;1.2223608791828156e-09;9.313225746154785e-10;8.731149137020111e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-6.039487361907959, -5.485169410705566, -4.557406902313232, -5.8910651206970215, -5.509005546569824, -0.02412254922091961]",0.9761659502983093
2,"['    @Test\n    public void insertOne() {\n        final User user = putUserBlocking();\n\n        // why we created StorIOSQLite: nobody loves nulls\n        final Cursor cursor = db.query(UserTableMeta.TABLE, null, null, null, null, null, null);\n\n        // asserting that values was really inserted to db\n        assertThat(cursor.getCount()).isEqualTo(1);\n        assertThat(cursor.moveToFirst()).isTrue();\n\n        final User insertedUser = UserTableMeta.GET_RESOLVER.mapFromCursor(storIOSQLite, cursor);\n\n        assertThat(insertedUser.id()).isNotNull();\n        assertThat(user.equalsExceptId(insertedUser)).isTrue();\n\n        cursor.close();\n    }\n']",RESOLVER;put;Blocking;cursor;Table;OSQLite;Table;inserted;ursor;close,9.604264050722122e-10;6.402842700481415e-10;6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.874725818634033, -5.528683185577393, -4.694458484649658, -5.718218803405762, -5.3575968742370605, -0.024215172976255417]",0.9760756492614746
2,"['    @Test\n    public void insertCollection() {\n        final List<User> users = putUsersBlocking(3);\n\n        // asserting that values was really inserted to db\n        final Cursor cursor = db.query(UserTableMeta.TABLE, null, null, null, null, null, null);\n\n        assertThat(cursor.getCount()).isEqualTo(users.size());\n\n        for (int i = 0; i < users.size(); i++) {\n            assertThat(cursor.moveToNext()).isTrue();\n            assertThat(UserTableMeta.GET_RESOLVER.mapFromCursor(storIOSQLite, cursor)).isEqualTo(users.get(i));\n        }\n\n        cursor.close();\n    }\n']",RESOLVER;insert;Users;map;users;Collection;that;close;Next;final,5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.852377891540527, -5.506679534912109, -4.698739051818848, -5.6828742027282715, -5.33695650100708, -0.024552669376134872]",0.9757463932037354
2,"['    @Test\n    public void insertAndDeleteTwice() {\n        final User user = TestFactory.newUser();\n\n        for (int i = 0; i < 2; i++) {\n            putUserBlocking(user);\n\n            final List<User> existUsers = getAllUsersBlocking();\n\n            assertThat(existUsers).isNotNull();\n            assertThat(existUsers).hasSize(1);\n\n            final Cursor cursorAfterPut = db.query(UserTableMeta.TABLE, null, null, null, null, null, null);\n            assertThat(cursorAfterPut.getCount()).isEqualTo(1);\n            cursorAfterPut.close();\n\n            deleteUserBlocking(user);\n\n            final Cursor cursorAfterDelete = db.query(UserTableMeta.TABLE, null, null, null, null, null, null);\n            assertThat(cursorAfterDelete.getCount()).isEqualTo(0);\n            cursorAfterDelete.close();\n        }\n    }\n']",That;TABLE;ursor;put;db;insert;close;Twice;That;final,5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.865886688232422, -5.463594436645508, -4.691269397735596, -5.699291229248047, -5.3823699951171875, -0.02449055202305317]",0.9758068919181824
2,"['    @Test\n    public void insertOneWithNullField() {\n        User user = User.newInstance(null, ""user@example.com"", null); // phone is null\n        putUserBlocking(user);\n\n        final Cursor cursor = db.query(UserTableMeta.TABLE, null, null, null, null, null, null);\n\n        // asserting that values was really inserted to db\n        assertThat(cursor.getCount()).isEqualTo(1);\n        assertThat(cursor.moveToFirst()).isTrue();\n\n        final User insertedUser = UserTableMeta.GET_RESOLVER.mapFromCursor(storIOSQLite, cursor);\n\n        assertThat(insertedUser.id()).isNotNull();\n        assertThat(user.equalsExceptId(insertedUser)).isTrue();\n\n        cursor.close();\n    }\n']",move;example;asserting;inserted;User;was;equals;really;ursor;ursor,6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.869808673858643, -5.542367935180664, -4.704478740692139, -5.70029878616333, -5.3274006843566895, -0.02428963966667652]",0.976003110408783
2,"['    @Test\n    public void updateOne() {\n        final User userForInsert = putUserBlocking();\n\n        final User userForUpdate = User.newInstance(\n                userForInsert.id(), // using id of inserted user\n                ""new@email.com"" // new value\n        );\n\n        updateUserBlocking(userForUpdate);\n        checkOnlyOneItemInStorage(userForUpdate);  // update should not add new rows!\n    }\n']",Blocking;Item;value;put;Update;Storage;user;For;new;User,1.949956640601158e-09;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-6.0286760330200195, -5.529400825500488, -4.594464302062988, -5.872641563415527, -5.480167388916016, -0.023748470470309258]",0.9765313267707825
2,"['    @Test\n    public void updateNullFieldToNotNull() {\n        final User userForInsert = User.newInstance(null, ""user@email.com"", null); // phone is null\n\n        putUserBlocking(userForInsert);\n\n        final User userForUpdate = User.newInstance(\n                userForInsert.id(),\n                userForInsert.email(),\n                ""1-999-547867""  // phone not null\n        );\n\n        updateUserBlocking(userForUpdate);\n        checkOnlyOneItemInStorage(userForUpdate);\n    }\n']",For;phone;Update;Update;User;null;user;user;User;For,5.238689482212067e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.473825588822365e-10,5,5,"[-5.975831031799316, -5.552366256713867, -4.654327392578125, -5.805017471313477, -5.418962001800537, -0.023659761995077133]",0.9766179323196411
2,"['    @Test\n    public void updateNotNullFieldToNull() {\n        final User userForInsert = User.newInstance(null, ""user@email.com"", ""1-999-547867""); // phone not null\n\n        putUserBlocking(userForInsert);\n\n        final User userForUpdate = User.newInstance(\n                userForInsert.id(),\n                userForInsert.email(),\n                null    // phone is null\n        );\n\n        updateUserBlocking(userForUpdate);\n        checkOnlyOneItemInStorage(userForUpdate);\n    }\n']",Blocking;check;Update;com;Not;Update;user;For;One;null,2.2118911147117615e-09;5.529727786779404e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.9890055656433105, -5.587602615356445, -4.655862331390381, -5.8052287101745605, -5.405303955078125, -0.023535065352916718]",0.9767397046089172
2,"['    @Test\n    public void updateCollection() {\n        final List<User> usersForInsert = TestFactory.newUsers(3);\n\n        final PutResults<User> insertResults = storIOSQLite\n                .put()\n                .objects(usersForInsert)\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(insertResults.numberOfInserts()).isEqualTo(usersForInsert.size());\n\n        final List<User> usersForUpdate = new ArrayList<User>(usersForInsert.size());\n\n        for (int i = 0; i < usersForInsert.size(); i++) {\n            usersForUpdate.add(User.newInstance(usersForInsert.get(i).id(), ""new"" + i + ""@email.com"" + i));\n        }\n\n        final PutResults<User> updateResults = storIOSQLite\n                .put()\n                .objects(usersForUpdate)\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(updateResults.numberOfUpdates()).isEqualTo(usersForUpdate.size());\n\n        final Cursor cursor = db.query(UserTableMeta.TABLE, null, null, null, null, null, null);\n\n        assertThat(cursor.getCount()).isEqualTo(usersForUpdate.size()); // update should not add new rows!\n\n        for (int i = 0; i < usersForUpdate.size(); i++) {\n            assertThat(cursor.moveToNext()).isTrue();\n            assertThat(UserTableMeta.GET_RESOLVER.mapFromCursor(storIOSQLite, cursor)).isEqualTo(usersForUpdate.get(i));\n        }\n\n        cursor.close();\n    }\n']",Blocking;stor;Put;objects;Table;Insert;prepare;Results;Blocking;update,1.3969838619232178e-09;5.675246939063072e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.850494861602783, -5.385091304779053, -4.692874431610107, -5.6863179206848145, -5.422340393066406, -0.024735502898693085]",0.9755679368972778
2,"['    @Test\n    public void insertEmission() {\n        final List<User> users = TestFactory.newUsers(10);\n\n        final Queue<Changes> expectedChanges = new LinkedList<Changes>();\n        expectedChanges.add(Changes.newInstance(UserTableMeta.TABLE, UserTableMeta.NOTIFICATION_TAG));\n\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedChanges);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        putUsersBlocking(users);\n\n        // Should receive changes of Users table\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n']",NOTIFICATION;subscribe;TAG;Table;insert;Expected;Meta;Changes;Emission;List,1.367880031466484e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.41970007866621e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.939330577850342, -5.49738073348999, -4.655481338500977, -5.78635835647583, -5.43380880355835, -0.023961016908288002]",0.9763237833976746
2,"['    @Test\n    public void updateEmission() {\n        final List<User> users = putUsersBlocking(10);\n        final List<User> updated = new ArrayList<User>(users.size());\n\n        for (User user : users) {\n            updated.add(User.newInstance(user.id(), user.email()));\n        }\n\n        final Queue<Changes> expectedChanges = new LinkedList<Changes>();\n        expectedChanges.add(Changes.newInstance(UserTableMeta.TABLE, UserTableMeta.NOTIFICATION_TAG));\n\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedChanges);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        storIOSQLite\n                .put()\n                .objects(updated)\n                .prepare()\n                .executeAsBlocking();\n\n        // Should receive changes of Users table\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n']",As;await;Expected;Blocking;List;Users;Emission;Changes;Expected;Instance,1.1059455573558807e-09;5.529727786779404e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.7284841053187847e-10;2.6193447411060333e-10,5,5,"[-5.950800895690918, -5.437966823577881, -4.643483638763428, -5.7982892990112305, -5.4850263595581055, -0.024044113233685493]",0.9762426614761353
2,"['    @Test\n    public void deleteEmission() {\n        final List<User> users = putUsersBlocking(10);\n\n        final Queue<Changes> expectedChanges = new LinkedList<Changes>();\n        expectedChanges.add(Changes.newInstance(UserTableMeta.TABLE, UserTableMeta.NOTIFICATION_TAG));\n\n        final EmissionChecker emissionChecker = new EmissionChecker(expectedChanges);\n        final Subscription subscription = emissionChecker.subscribe();\n\n        deleteUsersBlocking(users);\n\n        // Should receive changes of Users table\n        emissionChecker.awaitNextExpectedValue();\n\n        emissionChecker.assertThatNoExpectedValuesLeft();\n\n        subscription.unsubscribe();\n    }\n']",TAG;NOTIFICATION;Queue;mission;Value;Table;subscription;delete;That;put,2.3283064365386963e-09;1.862645149230957e-09;1.3387762010097504e-09;1.1641532182693481e-09;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.942072868347168, -5.533332347869873, -4.670703887939453, -5.762715816497803, -5.410398006439209, -0.02383938431739807]",0.9764425158500671
2,"['    @Test\n    public void shouldReturnQueryInGetData() {\n        final RawQuery query = RawQuery.builder()\n                .query(""DROP TABLE IF EXISTS no_such_table"") // we don\'t want to really delete table\n                .build();\n        final PreparedExecuteSQL operation = storIOSQLite\n                .executeSQL()\n                .withQuery(query)\n                .prepare();\n\n        assertThat(operation.getData()).isEqualTo(query);\n    }\n']",builder;Execute;DROP;TABLE;Data;really;prepare;Query;query;no,1.280568540096283e-09;1.1350493878126144e-09;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.005588531494141, -5.504748344421387, -4.614771366119385, -5.826059341430664, -5.4648847579956055, -0.023902587592601776]",0.9763807058334351
2,"['    @Test\n    public void execSQLWithEmptyArgs() {\n        // Should not throw exceptions!\n        storIOSQLite\n                .executeSQL()\n                .withQuery(RawQuery.builder()\n                        .query(""DROP TABLE IF EXISTS no_such_table"") // we don\'t want to really delete table\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n    }\n']",Empty;such;EXISTS;TABLE;Query;Query;DROP;IF;Blocking;Args,1.3969838619232178e-09;1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;3.7834979593753815e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-6.001677989959717, -5.41574239730835, -4.582437038421631, -5.86418342590332, -5.517347812652588, -0.024299180135130882]",0.9759935736656189
2,"['    @Test\n    public void shouldPassArgsAsObjects() {\n        final User user = putUserBlocking();\n\n        assertThat(user.id()).isNotNull();\n        //noinspection ConstantConditions\n        final long uid = user.id();\n\n        final String query = ""UPDATE "" + UserTableMeta.TABLE\n                + "" SET "" + UserTableMeta.COLUMN_ID + "" = MIN("" + UserTableMeta.COLUMN_ID + "", ?)"";\n\n        storIOSQLite\n                .executeSQL()\n                .withQuery(\n                        RawQuery.builder()\n                                .query(query)\n                                .args(uid - 1)  // as integer is less, as string is greater\n                                .build())\n                .prepare()\n                .executeAsBlocking();\n\n        List<User> users = getAllUsersBlocking();\n\n        assertThat(users.size()).isEqualTo(1);\n\n        // Was updated, because (uid - 1) passed as object, not string, and (uid - 1) < uid.\n        assertThat(users.get(0).id()).isEqualTo(uid - 1);\n    }\n']",UPDATE;prepare;Raw;Blocking;OSQLite;User;That;greater;get;Table,1.1059455573558807e-09;9.313225746154785e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2741809263825417e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.866843223571777, -5.331566333770752, -4.677044868469238, -5.707189559936523, -5.464838027954102, -0.024835746735334396]",0.975470244884491
2,['    @Test\n    public void repeatsOperationWithQueryByChangeOfTable() {\n        putUserBlocking();\n\n        TestSubscriber<Cursor> testSubscriber = new TestSubscriber<Cursor>();\n        storIOSQLite\n                .get()\n                .cursor()\n                .withQuery(query)\n                .prepare()\n                .asRxObservable()\n                .subscribe(testSubscriber);\n\n        testSubscriber.assertValueCount(1);\n\n        storIOSQLite.lowLevel().notifyAboutChanges(tableChanges);\n\n        testSubscriber.assertValueCount(2);\n    }\n'],Change;OSQLite;ursor;Value;Value;OSQLite;ursor;with;Observable;Subscriber,5.529727786779404e-10;4.94765117764473e-10;3.7834979593753815e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.965792179107666, -5.4541916847229, -4.625553607940674, -5.822849750518799, -5.46966552734375, -0.024101601913571358]",0.9761866331100464
2,['    @Test\n    public void repeatsOperationWithRawQueryByChangeOfTable() {\n        putUserBlocking();\n\n        TestSubscriber<Cursor> testSubscriber = new TestSubscriber<Cursor>();\n        storIOSQLite\n                .get()\n                .cursor()\n                .withQuery(rawQuery)\n                .prepare()\n                .asRxObservable()\n                .subscribe(testSubscriber);\n\n        testSubscriber.assertValueCount(1);\n\n        storIOSQLite.lowLevel().notifyAboutChanges(tableChanges);\n\n        testSubscriber.assertValueCount(2);\n    }\n'],Blocking;stor;prepare;Table;Changes;new;low;Subscriber;About;OSQLite,1.1641532182693481e-09;7.712515071034431e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.968782901763916, -5.4690423011779785, -4.628640174865723, -5.819190502166748, -5.465510845184326, -0.02402712218463421]",0.9762591123580933
2,['    @Test\n    public void repeatsOperationWithQueryByChangeOfTag() {\n        putUserBlocking();\n\n        TestSubscriber<Cursor> testSubscriber = new TestSubscriber<Cursor>();\n        storIOSQLite\n                .get()\n                .cursor()\n                .withQuery(query)\n                .prepare()\n                .asRxObservable()\n                .subscribe(testSubscriber);\n\n        testSubscriber.assertValueCount(1);\n\n        storIOSQLite.lowLevel().notifyAboutChanges(tagChanges);\n\n        testSubscriber.assertValueCount(2);\n    }\n'],Blocking;subscribe;stor;Query;Observable;ursor;Tag;User;Subscriber;Subscriber,1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;7.275957614183426e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.962136268615723, -5.453244209289551, -4.630631923675537, -5.822434425354004, -5.4669718742370605, -0.0240773968398571]",0.9762102365493774
2,['    @Test\n    public void repeatsOperationWithRawQueryByChangeOfTag() {\n        putUserBlocking();\n\n        TestSubscriber<Cursor> testSubscriber = new TestSubscriber<Cursor>();\n        storIOSQLite\n                .get()\n                .cursor()\n                .withQuery(rawQuery)\n                .prepare()\n                .asRxObservable()\n                .subscribe(testSubscriber);\n\n        testSubscriber.assertValueCount(1);\n\n        storIOSQLite.lowLevel().notifyAboutChanges(tagChanges);\n\n        testSubscriber.assertValueCount(2);\n    }\n'],Blocking;put;raw;By;as;About;OSQLite;Subscriber;Subscriber;Changes,1.3969838619232178e-09;9.89530235528946e-10;5.529727786779404e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.966535568237305, -5.47006368637085, -4.632869720458984, -5.820016384124756, -5.463424205780029, -0.023993022739887238]",0.9762925505638123
2,"['    @Test\n    public void repeatsOperationWithQueryByChangeOfTable() {\n        putUserBlocking();\n\n        PreparedGetNumberOfResults operation = storIOSQLite\n                .get()\n                .numberOfResults()\n                .withQuery(query)\n                .prepare();\n\n        verifyChangesReceived(operation, tableChanges, 1);\n    }\n']",Blocking;repeats;Operation;Query;Get;table;Table;operation;verify;number,3.259629011154175e-09;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.998826503753662, -5.523737907409668, -4.610961437225342, -5.818528652191162, -5.446262836456299, -0.023984525352716446]",0.976300835609436
2,"['    @Test\n    public void repeatsOperationWithRawQueryByChangeOfTable() {\n        putUserBlocking();\n\n        PreparedGetNumberOfResults operation = storIOSQLite\n                .get()\n                .numberOfResults()\n                .withQuery(rawQuery)\n                .prepare();\n\n        verifyChangesReceived(operation, tableChanges, 1);\n    }\n']",Raw;put;Changes;get;raw;Received;Results;User;Prepared;prepare,5.820766091346741e-10;4.656612873077393e-10;3.92901711165905e-10;3.92901711165905e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.99813985824585, -5.532422065734863, -4.614161968231201, -5.811373710632324, -5.4422607421875, -0.0239579901099205]",0.9763267040252686
2,"['    @Test\n    public void repeatsOperationWithQueryByChangeOfTag() {\n        putUserBlocking();\n\n        PreparedGetNumberOfResults operation = storIOSQLite\n                .get()\n                .numberOfResults()\n                .withQuery(query)\n                .prepare();\n\n        verifyChangesReceived(operation, tagChanges, 1);\n    }\n']",with;Operation;Tag;operation;verify;Received;operation;OSQLite;stor;tag,9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-5.996901512145996, -5.528719902038574, -4.614549160003662, -5.8179931640625, -5.4448065757751465, -0.02394064888358116]",0.9763436317443848
2,"['    @Test\n    public void repeatsOperationWithRawQueryByChangeOfTag() {\n        putUserBlocking();\n\n        PreparedGetNumberOfResults operation = storIOSQLite\n                .get()\n                .numberOfResults()\n                .withQuery(rawQuery)\n                .prepare();\n\n        verifyChangesReceived(operation, tagChanges, 1);\n    }\n']",Blocking;Change;verify;By;number;Number;Get;Received;Changes;stor,1.6298145055770874e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;1.3096723705530167e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.996829032897949, -5.538412094116211, -4.617597579956055, -5.809760093688965, -5.440871715545654, -0.023913413286209106]",0.9763702750205994
2,"['    @Test\n    public void insertObject() {\n        final Book book = Book.builder()\n                .id(1)\n                .title(""What a great book"")\n                .author(""Somebody"")\n                .build();\n\n        final PutResult putResult = storIOSQLite\n                .put()\n                .object(book)\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(putResult.wasInserted()).isTrue();\n\n        final List<Book> storedBooks = storIOSQLite\n                .get()\n                .listOfObjects(Book.class)\n                .withQuery(Query.builder()\n                        .table(BookTableMeta.TABLE)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(storedBooks).hasSize(1);\n\n        assertThat(storedBooks.get(0)).isEqualTo(book);\n    }\n']",insert;prepare;Meta;builder;Result;Query;execute;stor;book;Table,1.0477378964424133e-09;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.929690837860107, -5.368795871734619, -4.6385087966918945, -5.785794734954834, -5.502779483795166, -0.024433551356196404]",0.9758625030517578
2,"['    @Test\n    public void updateObject() {\n        final Book book = Book.builder()\n                .id(1)\n                .title(""What a great book"")\n                .author(""Somebody"")\n                .build();\n\n        final PutResult putResult1 = storIOSQLite\n                .put()\n                .object(book)\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(putResult1.wasInserted()).isTrue();\n\n        final Book bookWithUpdatedInfo = Book.builder()\n                .id(1) // Same id, should be updated\n                .title(""Corrected title"")\n                .author(""Corrected author"")\n                .build();\n\n        final PutResult putResult2 = storIOSQLite\n                .put()\n                .object(bookWithUpdatedInfo)\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(putResult2.wasUpdated()).isTrue();\n\n        final List<Book> storedBooks = storIOSQLite\n                .get()\n                .listOfObjects(Book.class)\n                .withQuery(Query.builder()\n                        .table(BookTableMeta.TABLE)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(storedBooks).hasSize(1);\n\n        assertThat(storedBooks.get(0)).isEqualTo(bookWithUpdatedInfo);\n    }\n']",author;was;Blocking;book;Result;id;put;True;final;Put,4.656612873077393e-10;4.147295840084553e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.1827872842550278e-10,5,5,"[-5.9357428550720215, -5.394921779632568, -4.652929782867432, -5.777307987213135, -5.491836071014404, -0.02422483079135418]",0.9760662317276001
2,"['    @Test\n    public void deleteObject() {\n        final Book book = Book.builder()\n                .id(1)\n                .title(""What a great book"")\n                .author(""Somebody"")\n                .build();\n\n        final PutResult putResult = storIOSQLite\n                .put()\n                .object(book)\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(putResult.wasInserted()).isTrue();\n\n        final DeleteResult deleteResult = storIOSQLite\n                .delete()\n                .object(book)\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(deleteResult.numberOfRowsDeleted()).isEqualTo(1);\n\n        final List<Book> storedBooks = storIOSQLite\n                .get()\n                .listOfObjects(Book.class)\n                .withQuery(Query.builder()\n                        .table(BookTableMeta.TABLE)\n                        .build())\n                .prepare()\n                .executeAsBlocking();\n\n        assertThat(storedBooks).hasSize(0);\n    }\n']",delete;Somebody;What;That;Query;with;stored;stor;Object;put,6.402842700481415e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.255546860396862e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.952570915222168, -5.360035419464111, -4.628012180328369, -5.80059289932251, -5.52581262588501, -0.02437712997198105]",0.9759175777435303
2,['    @Test(expected = NullPointerException.class)\n    public void nullPutResolver() {\n        SQLiteTypeMapping.builder()\n                .putResolver(null)\n                .getResolver(mock(GetResolver.class))\n                .deleteResolver(mock(DeleteResolver.class))\n                .build();\n    }\n'],null;Resolver;Resolver;SQLite;Exception;delete;class;builder;Resolver;Resolver,1.1350493878126144e-09;9.240466170012951e-10;5.675246939063072e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.994277477264404, -5.472110271453857, -4.597234725952148, -5.860894203186035, -5.470380783081055, -0.0241219662129879]",0.9761666655540466
2,['    @Test(expected = NullPointerException.class)\n    public void nullMapFromCursor() {\n        SQLiteTypeMapping.builder()\n                .putResolver(mock(PutResolver.class))\n                .getResolver(null)\n                .deleteResolver(mock(DeleteResolver.class))\n                .build();\n    }\n'],expected;ursor;Resolver;Resolver;null;delete;ock;Map;Resolver;builder,1.979060471057892e-09;1.6298145055770874e-09;1.4260876923799515e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.9940409660339355, -5.465212345123291, -4.591544151306152, -5.8695855140686035, -5.47703218460083, -0.024157458916306496]",0.9761319756507874
2,['    @Test(expected = NullPointerException.class)\n    public void nullMapToDeleteQuery() {\n        SQLiteTypeMapping.builder()\n                .putResolver(mock(PutResolver.class))\n                .getResolver(mock(GetResolver.class))\n                .deleteResolver(null)\n                .build();\n    }\n'],Resolver;Delete;class;Map;build;Resolver;Query;Resolver;put;Type,7.712515071034431e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.41970007866621e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.010943412780762, -5.471714019775391, -4.576119899749756, -5.884200572967529, -5.490832805633545, -0.024147333577275276]",0.9761419892311096
2,['    @Test\n    public void build() {\n        class TestItem {\n\n        }\n\n        final PutResolver<TestItem> putResolver = mock(PutResolver.class);\n        final GetResolver<TestItem> getResolver = mock(GetResolver.class);\n        final DeleteResolver<TestItem> deleteResolver = mock(DeleteResolver.class);\n\n        final SQLiteTypeMapping<TestItem> typeMapping = SQLiteTypeMapping.<TestItem>builder()\n                .putResolver(putResolver)\n                .getResolver(getResolver)\n                .deleteResolver(deleteResolver)\n                .build();\n\n        assertThat(typeMapping.putResolver()).isSameAs(putResolver);\n        assertThat(typeMapping.getResolver()).isSameAs(getResolver);\n        assertThat(typeMapping.deleteResolver()).isSameAs(deleteResolver);\n    }\n'],build;Resolver;Put;Item;Item;put;That;apping;Type;class,5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.91049337387085, -5.459918975830078, -4.655616760253906, -5.748013496398926, -5.4262375831604, -0.024355722591280937]",0.9759384989738464
2,"['    @Test\n    public void shouldNotAllowNullTable() {\n        expectedException.expect(NullPointerException.class);\n        expectedException.expectMessage(equalTo(""Table name is null or empty""));\n        expectedException.expectCause(nullValue(Throwable.class));\n\n        //noinspection ConstantConditions\n        InsertQuery.builder().table(null);\n    }\n']",Message;Allow;Table;Cause;Throwable;Conditions;null;expect;equal;Exception,1.3969838619232178e-09;9.89530235528946e-10;8.585629984736443e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.9276862144470215, -5.530067443847656, -4.621888160705566, -5.816455841064453, -5.381082057952881, -0.02433943562209606]",0.9759544730186462
2,"['    @Test\n    public void shouldNotAllowEmptyTable() {\n        expectedException.expect(IllegalStateException.class);\n        expectedException.expectMessage(equalTo(""Table name is null or empty""));\n        expectedException.expectCause(nullValue(Throwable.class));\n\n        InsertQuery.builder().table("""");\n    }\n']",Message;Not;Cause;Query;Table;Throwable;expect;expected;Illegal;Allow,1.862645149230957e-09;1.1496013030409813e-09;1.0477378964424133e-09;9.313225746154785e-10;9.022187441587448e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.918180465698242, -5.550600528717041, -4.630365371704102, -5.8005218505859375, -5.358222007751465, -0.02435583993792534]",0.9759383797645569
2,"['    @Test\n    public void nullColumnHackShouldBeNullByDefault() {\n        InsertQuery insertQuery = InsertQuery.builder()\n                .table(""test_table"")\n                .build();\n\n        assertThat(insertQuery.nullColumnHack()).isNull();\n    }\n']",Null;table;Hack;Be;Should;By;build;null;builder;Query,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.990056991577148, -5.526119232177734, -4.609239101409912, -5.838476657867432, -5.44073486328125, -0.023979056626558304]",0.976306140422821
2,"['    @Test\n    public void completeBuilderShouldNotAllowNullTable() {\n        try {\n            //noinspection ConstantConditions\n            InsertQuery.builder()\n                    .table(""test_table"")\n                    .table(null);\n            failBecauseExceptionWasNotThrown(NullPointerException.class);\n        } catch (NullPointerException expected) {\n            assertThat(expected)\n                    .hasMessage(""Table name is null or empty"")\n                    .hasNoCause();\n        }\n    }\n']",catch;table;has;Null;Should;fail;Was;Table;Table;table,1.862645149230957e-09;8.731149137020111e-10;7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.9876909255981445, -5.483571529388428, -4.599205493927002, -5.842899322509766, -5.473061561584473, -0.024110911414027214]",0.976177453994751
2,"['    @Test\n    public void completeBuilderShouldNotAllowEmptyTable() {\n        try {\n            InsertQuery.builder()\n                    .table(""test_table"")\n                    .table("""");\n            failBecauseExceptionWasNotThrown(IllegalStateException.class);\n        } catch (IllegalStateException expected) {\n            assertThat(expected)\n                    .hasMessage(""Table name is null or empty"")\n                    .hasNoCause();\n        }\n    }\n']",fail;Cause;Empty;Table;expected;Illegal;expected;has;or;Because,6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.147295840084553e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.967313766479492, -5.4816999435424805, -4.621834754943848, -5.801651477813721, -5.455325126647949, -0.02414337731897831]",0.97614586353302
2,"['    @Test\n    public void completeBuilderShouldUpdateTable() {\n        InsertQuery query = InsertQuery.builder()\n                .table(""old_table"")\n                .table(""new_table"")\n                .build();\n\n        assertThat(query.table()).isEqualTo(""new_table"");\n    }\n']",Builder;new;builder;Should;That;table;Insert;Query;Table;Insert,1.1641532182693481e-09;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.993215560913086, -5.526176929473877, -4.604196548461914, -5.817325115203857, -5.442183971405029, -0.02407972328364849]",0.9762078523635864
2,"['    @Test\n    public void createdThroughToBuilderQueryShouldBeEqual() {\n        final String table = ""test_table"";\n        final String nullColumnHack = ""test_null_column_hack"";\n        final String tag = ""test_tag"";\n\n        final InsertQuery firstQuery = InsertQuery.builder()\n                .table(table)\n                .nullColumnHack(nullColumnHack)\n                .affectsTags(tag)\n                .build();\n\n        final InsertQuery secondQuery = firstQuery.toBuilder().build();\n\n        assertThat(secondQuery).isEqualTo(firstQuery);\n    }\n']",affect;created;qual;That;second;Insert;Tags;Through;Query;final,1.6880221664905548e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.962414264678955, -5.486840724945068, -4.62380313873291, -5.809950351715088, -5.455444812774658, -0.024088336154818535]",0.9761994481086731
2,"['    @Test\n    public void affectsTagsCollectionShouldRewrite() {\n        InsertQuery insertQuery = InsertQuery.builder()\n                .table(""table"")\n                .affectsTags(new HashSet<String>((singletonList(""first_call_collection""))))\n                .affectsTags(new HashSet<String>((singletonList(""second_call_collection""))))\n                .build();\n\n        assertThat(insertQuery.affectsTags()).isEqualTo(singleton(""second_call_collection""));\n    }\n']",builder;collection;collection;qual;Should;new;Query;second;affects;first,1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.905340671539307, -5.517443656921387, -4.656447887420654, -5.7471160888671875, -5.375121116638184, -0.02435758337378502]",0.9759365320205688
2,"['    @Test\n    public void affectsTagsVarargShouldRewrite() {\n        InsertQuery insertQuery = InsertQuery.builder()\n                .table(""table"")\n                .affectsTags(""first_call_vararg"")\n                .affectsTags(""second_call_vararg"")\n                .build();\n\n        assertThat(insertQuery.affectsTags()).isEqualTo(singleton(""second_call_vararg""));\n    }\n']",affects;Vararg;table;second;affect;Insert;Insert;build;builder;Tags,1.862645149230957e-09;8.149072527885437e-10;6.548361852765083e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.919880390167236, -5.514033317565918, -4.63974142074585, -5.772481441497803, -5.390239715576172, -0.02434234321117401]",0.9759515523910522
2,"['    @Test\n    public void affectsTagsCollectionAllowsNull() {\n        InsertQuery insertQuery = InsertQuery.builder()\n                .table(""table"")\n                .affectsTags(new HashSet<String>((singletonList(""first_call_collection""))))\n                .affectsTags(null)\n                .build();\n\n        assertThat(insertQuery.affectsTags()).isEmpty();\n    }\n']",That;affect;build;collection;builder;table;Tags;Insert;Tags;List,1.1641532182693481e-09;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.128661774098873e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.9563679695129395, -5.531805038452148, -4.634289741516113, -5.770209312438965, -5.411107063293457, -0.024135814979672432]",0.9761530160903931
2,"['    @Test\n    public void buildWithNormalValues() {\n        final String table = ""test_table"";\n        final String nullColumnHack = ""test_null_column_hack"";\n        final Set<String> tags = singleton(""tag"");\n\n        final InsertQuery insertQuery = InsertQuery.builder()\n                .table(table)\n                .nullColumnHack(nullColumnHack)\n                .affectsTags(tags)\n                .build();\n\n        assertThat(insertQuery.table()).isEqualTo(table);\n        assertThat(insertQuery.nullColumnHack()).isEqualTo(nullColumnHack);\n        assertThat(insertQuery.affectsTags()).isEqualTo(tags);\n    }\n']",Column;tags;Tags;Hack;Query;table;Query;Column;Values;table,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.936216354370117, -5.482611179351807, -4.632176399230957, -5.790858268737793, -5.4496965408325195, -0.02417677454650402]",0.9761130213737488
2,"['    @Test\n    public void shouldNotAllowNullTag() {\n        expectedException.expect(NullPointerException.class);\n        expectedException.expectMessage(startsWith(""affectsTag must not be null or empty, affectsTags = ""));\n        expectedException.expectCause(nullValue(Throwable.class));\n\n        //noinspection ConstantConditions\n        InsertQuery.builder()\n                .table(""table"")\n                .affectsTags((String) null)\n                .build();\n    }\n']",Null;noinspection;affect;Tag;null;builder;affects;build;Not;Exception,9.313225746154785e-10;8.585629984736443e-10;7.566995918750763e-10;5.820766091346741e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.948380470275879, -5.483839988708496, -4.619573593139648, -5.813477039337158, -5.429656505584717, -0.024284519255161285]",0.9760079979896545
2,"['    @Test\n    public void shouldNotAllowEmptyTag() {\n        expectedException.expect(IllegalStateException.class);\n        expectedException.expectMessage(startsWith(""affectsTag must not be null or empty, affectsTags = ""));\n        expectedException.expectCause(nullValue(Throwable.class));\n\n        //noinspection ConstantConditions\n        InsertQuery.builder()\n                .table(""table"")\n                .affectsTags("""")\n                .build();\n    }\n']",affect;should;starts;Allow;Exception;expect;null;class;Message;Constant,1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;4.3655745685100555e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.952894687652588, -5.486090183258057, -4.620126247406006, -5.815240859985352, -5.43096399307251, -0.02424612268805504]",0.9760454297065735
2,"['    @Test\n    public void shouldDecodeRequestWithSimpleXml() {\n        Object temp;\n\n        write(XML1);\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlDocumentStart.class));\n        assertThat(((XmlDocumentStart) temp).version(), is(""1.0""));\n        assertThat(((XmlDocumentStart) temp).encoding(), is(""UTF-8""));\n        assertThat(((XmlDocumentStart) temp).standalone(), is(false));\n        assertThat(((XmlDocumentStart) temp).encodingScheme(), is(nullValue()));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlDTD.class));\n        assertThat(((XmlDTD) temp).text(), is(""employee.dtd""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlProcessingInstruction.class));\n        assertThat(((XmlProcessingInstruction) temp).target(), is(""xml-stylesheet""));\n        assertThat(((XmlProcessingInstruction) temp).data(), is(""type=\\""text/css\\"" href=\\""netty.css\\""""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlProcessingInstruction.class));\n        assertThat(((XmlProcessingInstruction) temp).target(), is(""xml-test""));\n        assertThat(((XmlProcessingInstruction) temp).data(), is(""""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementStart.class));\n        assertThat(((XmlElementStart) temp).name(), is(""employee""));\n        assertThat(((XmlElementStart) temp).prefix(), is(""""));\n        assertThat(((XmlElementStart) temp).namespace(), is(""""));\n        assertThat(((XmlElementStart) temp).attributes().size(), is(0));\n        assertThat(((XmlElementStart) temp).namespaces().size(), is(1));\n        assertThat(((XmlElementStart) temp).namespaces().get(0).prefix(), is(""nettya""));\n        assertThat(((XmlElementStart) temp).namespaces().get(0).uri(), is(""http://netty.io/netty/a""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementStart.class));\n        assertThat(((XmlElementStart) temp).name(), is(""id""));\n        assertThat(((XmlElementStart) temp).prefix(), is(""nettya""));\n        assertThat(((XmlElementStart) temp).namespace(), is(""http://netty.io/netty/a""));\n        assertThat(((XmlElementStart) temp).attributes().size(), is(0));\n        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlEntityReference.class));\n        assertThat(((XmlEntityReference) temp).name(), is(""plusmn""));\n        assertThat(((XmlEntityReference) temp).text(), is(""""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlCharacters.class));\n        assertThat(((XmlCharacters) temp).data(), is(""1""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementEnd.class));\n        assertThat(((XmlElementEnd) temp).name(), is(""id""));\n        assertThat(((XmlElementEnd) temp).prefix(), is(""nettya""));\n        assertThat(((XmlElementEnd) temp).namespace(), is(""http://netty.io/netty/a""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlCharacters.class));\n        assertThat(((XmlCharacters) temp).data(), is(""\\n""));\n\n        temp = channel.readInbound();\n        assertThat(temp, nullValue());\n\n        write(XML2);\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementStart.class));\n        assertThat(((XmlElementStart) temp).name(), is(""name""));\n        assertThat(((XmlElementStart) temp).prefix(), is(""""));\n        assertThat(((XmlElementStart) temp).namespace(), is(""""));\n        assertThat(((XmlElementStart) temp).attributes().size(), is(1));\n        assertThat(((XmlElementStart) temp).attributes().get(0).name(), is(""type""));\n        assertThat(((XmlElementStart) temp).attributes().get(0).value(), is(""given""));\n        assertThat(((XmlElementStart) temp).attributes().get(0).prefix(), is(""""));\n        assertThat(((XmlElementStart) temp).attributes().get(0).namespace(), is(""""));\n        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlCharacters.class));\n        assertThat(((XmlCharacters) temp).data(), is(""Alba""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementEnd.class));\n        assertThat(((XmlElementEnd) temp).name(), is(""name""));\n        assertThat(((XmlElementEnd) temp).prefix(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespace(), is(""""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlCdata.class));\n        assertThat(((XmlCdata) temp).data(), is("" <some data &gt;/> ""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlCharacters.class));\n        assertThat(((XmlCharacters) temp).data(), is(""   ""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlComment.class));\n        assertThat(((XmlComment) temp).data(), is("" namespaced ""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementStart.class));\n        assertThat(((XmlElementStart) temp).name(), is(""salary""));\n        assertThat(((XmlElementStart) temp).prefix(), is(""nettyb""));\n        assertThat(((XmlElementStart) temp).namespace(), is(""http://netty.io/netty/b""));\n        assertThat(((XmlElementStart) temp).attributes().size(), is(1));\n        assertThat(((XmlElementStart) temp).attributes().get(0).name(), is(""period""));\n        assertThat(((XmlElementStart) temp).attributes().get(0).value(), is(""weekly""));\n        assertThat(((XmlElementStart) temp).attributes().get(0).prefix(), is(""nettyb""));\n        assertThat(((XmlElementStart) temp).attributes().get(0).namespace(), is(""http://netty.io/netty/b""));\n        assertThat(((XmlElementStart) temp).namespaces().size(), is(1));\n        assertThat(((XmlElementStart) temp).namespaces().get(0).prefix(), is(""nettyb""));\n        assertThat(((XmlElementStart) temp).namespaces().get(0).uri(), is(""http://netty.io/netty/b""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlCharacters.class));\n        assertThat(((XmlCharacters) temp).data(), is(""100""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementEnd.class));\n        assertThat(((XmlElementEnd) temp).name(), is(""salary""));\n        assertThat(((XmlElementEnd) temp).prefix(), is(""nettyb""));\n        assertThat(((XmlElementEnd) temp).namespace(), is(""http://netty.io/netty/b""));\n        assertThat(((XmlElementEnd) temp).namespaces().size(), is(1));\n        assertThat(((XmlElementEnd) temp).namespaces().get(0).prefix(), is(""nettyb""));\n        assertThat(((XmlElementEnd) temp).namespaces().get(0).uri(), is(""http://netty.io/netty/b""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementStart.class));\n        assertThat(((XmlElementStart) temp).name(), is(""last""));\n        assertThat(((XmlElementStart) temp).prefix(), is(""""));\n        assertThat(((XmlElementStart) temp).namespace(), is(""""));\n        assertThat(((XmlElementStart) temp).attributes().size(), is(0));\n        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementEnd.class));\n        assertThat(((XmlElementEnd) temp).name(), is(""last""));\n        assertThat(((XmlElementEnd) temp).prefix(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespace(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespaces().size(), is(0));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementEnd.class));\n        assertThat(((XmlElementEnd) temp).name(), is(""employee""));\n        assertThat(((XmlElementEnd) temp).prefix(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespace(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespaces().size(), is(1));\n        assertThat(((XmlElementEnd) temp).namespaces().get(0).prefix(), is(""nettya""));\n        assertThat(((XmlElementEnd) temp).namespaces().get(0).uri(), is(""http://netty.io/netty/a""));\n\n        temp = channel.readInbound();\n        assertThat(temp, nullValue());\n    }\n']",Decode;instance;channel;Value;netty;css;channel;null;Inbound;TD,6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;3.128661774098873e-10;2.764863893389702e-10,5,5,"[-5.814414978027344, -5.443268299102783, -4.673410892486572, -5.689335346221924, -5.342099666595459, -0.02513071894645691]",0.9751824140548706
2,"['    @Test\n    public void shouldDecodeXmlHeader() {\n        Object temp;\n\n        write(XML3);\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlDocumentStart.class));\n        assertThat(((XmlDocumentStart) temp).version(), is(""1.1""));\n        assertThat(((XmlDocumentStart) temp).encoding(), is(""UTF-8""));\n        assertThat(((XmlDocumentStart) temp).standalone(), is(true));\n        assertThat(((XmlDocumentStart) temp).encodingScheme(), is(""UTF-8""));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementStart.class));\n        assertThat(((XmlElementStart) temp).name(), is(""netty""));\n        assertThat(((XmlElementStart) temp).prefix(), is(""""));\n        assertThat(((XmlElementStart) temp).namespace(), is(""""));\n        assertThat(((XmlElementStart) temp).attributes().size(), is(0));\n        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementEnd.class));\n        assertThat(((XmlElementEnd) temp).name(), is(""netty""));\n        assertThat(((XmlElementEnd) temp).prefix(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespace(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespaces().size(), is(0));\n\n        temp = channel.readInbound();\n        assertThat(temp, nullValue());\n    }\n']",should;channel;Header;Decode;standalone;temp;UTF;temp;That;encoding,9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6921043172478676e-10,5,5,"[-5.843441963195801, -5.476431369781494, -4.6674394607543945, -5.70467472076416, -5.350274085998535, -0.024863189086318016]",0.9754433631896973
2,"['    @Test\n    public void shouldDecodeWithoutHeader() {\n        Object temp;\n\n        write(XML4);\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlDocumentStart.class));\n        assertThat(((XmlDocumentStart) temp).version(), is(nullValue()));\n        assertThat(((XmlDocumentStart) temp).encoding(), is(""UTF-8""));\n        assertThat(((XmlDocumentStart) temp).standalone(), is(false));\n        assertThat(((XmlDocumentStart) temp).encodingScheme(), is(nullValue()));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementStart.class));\n        assertThat(((XmlElementStart) temp).name(), is(""netty""));\n        assertThat(((XmlElementStart) temp).prefix(), is(""""));\n        assertThat(((XmlElementStart) temp).namespace(), is(""""));\n        assertThat(((XmlElementStart) temp).attributes().size(), is(0));\n        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));\n\n        temp = channel.readInbound();\n        assertThat(temp, instanceOf(XmlElementEnd.class));\n        assertThat(((XmlElementEnd) temp).name(), is(""netty""));\n        assertThat(((XmlElementEnd) temp).prefix(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespace(), is(""""));\n        assertThat(((XmlElementEnd) temp).namespaces().size(), is(0));\n\n        temp = channel.readInbound();\n        assertThat(temp, nullValue());\n    }\n']",Inbound;Scheme;encoding;should;Decode;channel;instance;temp;UTF;netty,1.2223608791828156e-09;9.89530235528946e-10;7.494236342608929e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;3.92901711165905e-10;3.055902197957039e-10;2.9831426218152046e-10,5,5,"[-5.847683906555176, -5.46367073059082, -4.6610941886901855, -5.718453407287598, -5.367802143096924, -0.024835746735334396]",0.975470244884491
2,"['    @Test\n    public void getCommandFromCache() {\n        assertSame(SmtpCommand.DATA, SmtpCommand.valueOf(""DATA""));\n        assertSame(SmtpCommand.EHLO, SmtpCommand.valueOf(""EHLO""));\n        assertNotSame(SmtpCommand.EHLO, SmtpCommand.valueOf(""ehlo""));\n    }\n']",HL;value;Command;Cache;ehlo;HL;Command;Same;Command;Not,5.587935447692871e-09;2.2118911147117615e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-5.933021545410156, -5.597579479217529, -4.631900310516357, -5.813346862792969, -5.343203544616699, -0.024150708690285683]",0.9761384725570679
2,"['    @Test\n    public void equalsIgnoreCase() {\n        assertEquals(SmtpCommand.MAIL, SmtpCommand.valueOf(""mail""));\n        assertEquals(SmtpCommand.valueOf(""test""), SmtpCommand.valueOf(""TEST""));\n    }\n']",EST;MAIL;Smtp;value;Command;equals;Command;mail;Equals;Command,2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;3.2014213502407074e-10;0.0,5,5,"[-5.966029644012451, -5.675759792327881, -4.626206398010254, -5.823390483856201, -5.303152561187744, -0.024003496393561363]",0.9762822985649109
2,"['    @Test\n    public void isContentExpected() {\n        assertTrue(SmtpCommand.valueOf(""DATA"").isContentExpected());\n        assertTrue(SmtpCommand.valueOf(""data"").isContentExpected());\n\n        assertFalse(SmtpCommand.HELO.isContentExpected());\n        assertFalse(SmtpCommand.HELP.isContentExpected());\n        assertFalse(SmtpCommand.valueOf(""DATA2"").isContentExpected());\n    }\n']",Smtp;EL;True;Content;False;Command;EL;Content;Command;Expected,1.8917489796876907e-09;1.3969838619232178e-09;9.604264050722122e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;2.6193447411060333e-10,5,5,"[-5.904736518859863, -5.518286228179932, -4.620537757873535, -5.85595703125, -5.376870155334473, -0.024366192519664764]",0.9759282469749451
2,"['    @Test\n    public void testEncodeEhlo() {\n        testEncode(SmtpRequests.ehlo(""localhost""), ""EHLO localhost\\r\\n"");\n    }\n']",Encode;localhost;Smtp;Encode;HL;Requests;ehlo;Ehlo;localhost,3.3760443329811096e-09;2.561137080192566e-09;1.3387762010097504e-09;1.0477378964424133e-09;4.656612873077393e-10;-8.149072527885437e-10;-2.7939677238464355e-09;-3.4924596548080444e-09;-5.122274160385132e-09,5,5,"[-5.969797611236572, -5.709786891937256, -4.633023262023926, -5.819292068481445, -5.246011257171631, -0.02412022091448307]",0.9761683344841003
2,"['    @Test\n    public void testEncodeHelo() {\n        testEncode(SmtpRequests.helo(""localhost""), ""HELO localhost\\r\\n"");\n    }\n']",localhost;Requests;localhost;Encode;hel;EL;Encode;Hel;Smtp,1.1641532182693481e-09;8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.1641532182693481e-09;-2.9103830456733704e-09,5,5,"[-5.978542804718018, -5.6861958503723145, -4.636552333831787, -5.813729763031006, -5.281929969787598, -0.023969978094100952]",0.9763150215148926
2,"['    @Test\n    public void testEncodeMail() {\n        testEncode(SmtpRequests.mail(""me@netty.io""), ""MAIL FROM:<me@netty.io>\\r\\n"");\n    }\n']",FROM;MAIL;Encode;mail;Smtp;netty;me;netty;io;Mail,1.979060471057892e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;8.731149137020111e-11;0.0,5,5,"[-5.998530387878418, -5.821570873260498, -4.641903877258301, -5.817384719848633, -5.150144100189209, -0.024147916585206985]",0.9761414527893066
2,"['    @Test\n    public void testEncodeMailNullSender() {\n        testEncode(SmtpRequests.mail(null), ""MAIL FROM:<>\\r\\n"");\n    }\n']",Smtp;FROM;ender;null;Null;mail;Requests;MAIL;Encode;Mail,1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;0.0;-4.0745362639427185e-10;-5.820766091346741e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-6.022110462188721, -5.695553302764893, -4.601778030395508, -5.881341934204102, -5.320289134979248, -0.02378234639763832]",0.9764982461929321
2,"['    @Test\n    public void testEncodeRcpt() {\n        testEncode(SmtpRequests.rcpt(""me@netty.io""), ""RCPT TO:<me@netty.io>\\r\\n"");\n    }\n']",Encode;RCPT;io;me;Requests;io;TO;me;pt;netty,8.149072527885437e-10;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;1.1641532182693481e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-5.9568190574646, -5.796950817108154, -4.684514999389648, -5.756351947784424, -5.152283191680908, -0.024099040776491165]",0.9761890172958374
2,"['    @Test\n    public void testEncodeNoop() {\n        testEncode(SmtpRequests.noop(), ""NOOP\\r\\n"");\n    }\n']",Encode;Requests;Noop;NOOP;noop;Encode;Smtp,1.862645149230957e-09;6.402842700481415e-10;5.820766091346741e-10;2.3283064365386963e-10;1.7462298274040222e-10;-1.862645149230957e-09;-2.735760062932968e-09,5,5,"[-6.021798133850098, -5.64747428894043, -4.5892438888549805, -5.897645473480225, -5.377194404602051, -0.02375894784927368]",0.9765210747718811
2,"['    @Test\n    public void testEncodeRset() {\n        testEncode(SmtpRequests.rset(), ""RSET\\r\\n"");\n    }\n']",set;RSET;Encode;Smtp;set;Requests;Encode,5.820766091346741e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-8.87666828930378e-10;-2.7066562324762344e-09,5,5,"[-6.016565322875977, -5.674253940582275, -4.592167854309082, -5.877586364746094, -5.361584663391113, -0.023777689784765244]",0.9765028953552246
2,"['    @Test\n    public void testEncodeHelp() {\n        testEncode(SmtpRequests.help(null), ""HELP\\r\\n"");\n    }\n']",Help;Encode;EL;Encode;null;Requests;help;Smtp,6.984919309616089e-09;7.566995918750763e-10;-2.3283064365386963e-10;-7.275957614183426e-10;-1.3969838619232178e-09;-1.6589183360338211e-09;-2.0954757928848267e-09;-2.5320332497358322e-09,5,5,"[-6.023055076599121, -5.6012749671936035, -4.581892013549805, -5.902693271636963, -5.405423164367676, -0.023857543244957924]",0.9764248132705688
2,"['    @Test\n    public void testEncodeHelpWithArg() {\n        testEncode(SmtpRequests.help(""MAIL""), ""HELP MAIL\\r\\n"");\n    }\n']",MAIL;Requests;help;Encode;MAIL;EL;Encode;Arg;Smtp;Help,7.916241884231567e-09;2.2118911147117615e-09;1.862645149230957e-09;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;-5.238689482212067e-10;-1.0477378964424133e-09;-1.2223608791828156e-09;-1.862645149230957e-09,5,5,"[-5.992272853851318, -5.613583087921143, -4.626648426055908, -5.863254070281982, -5.349381923675537, -0.023807723075151443]",0.9764734506607056
2,"['    @Test\n    public void testEncodeData() {\n        testEncode(SmtpRequests.data(), ""DATA\\r\\n"");\n    }\n']",DATA;Encode;Requests;data;Encode;Data;Smtp,5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;5.820766091346741e-11;-6.984919309616089e-10;-7.8580342233181e-10;-2.6775524020195007e-09,5,5,"[-6.0342535972595215, -5.652384281158447, -4.57335901260376, -5.904322624206543, -5.39142370223999, -0.023791659623384476]",0.976489245891571
2,"['    @Test\n    public void testEncodeDataAndContent() {\n        EmbeddedChannel channel = new EmbeddedChannel(new SmtpRequestEncoder());\n        assertTrue(channel.writeOutbound(SmtpRequests.data()));\n        assertTrue(channel.writeOutbound(\n                new DefaultSmtpContent(Unpooled.copiedBuffer(""Subject: Test\\r\\n\\r\\n"", CharsetUtil.US_ASCII))));\n        assertTrue(channel.writeOutbound(\n                new DefaultLastSmtpContent(Unpooled.copiedBuffer(""Test\\r\\n"", CharsetUtil.US_ASCII))));\n        assertTrue(channel.finish());\n\n        assertEquals(""DATA\\r\\nSubject: Test\\r\\n\\r\\nTest\\r\\n.\\r\\n"", getWrittenString(channel));\n    }\n']",Data;Encoder;Encode;Unpooled;Subject;ASCII;channel;write;Channel;Written,1.280568540096283e-09;1.0477378964424133e-09;6.402842700481415e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.946427822113037, -5.550565719604492, -4.6462907791137695, -5.807807922363281, -5.41394567489624, -0.023837406188249588]",0.9764443635940552
2,['    @Test(expected = EncoderException.class)\n    public void testThrowsIfContentExpected() {\n        EmbeddedChannel channel = new EmbeddedChannel(new SmtpRequestEncoder());\n        try {\n            assertTrue(channel.writeOutbound(SmtpRequests.data()));\n            channel.writeOutbound(SmtpRequests.noop());\n        } finally {\n            channel.finishAndReleaseAll();\n        }\n    }\n'],noop;channel;Exception;Request;Release;finally;Outbound;channel;Outbound;Encoder,2.444721758365631e-09;8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.987086772918701, -5.497413158416748, -4.617045879364014, -5.859340667724609, -5.451446056365967, -0.02391725406050682]",0.9763665199279785
2,"['    @Test\n    public void testRsetClearsContentExpectedFlag() {\n        EmbeddedChannel channel = new EmbeddedChannel(new SmtpRequestEncoder());\n\n        assertTrue(channel.writeOutbound(SmtpRequests.data()));\n        assertTrue(channel.writeOutbound(SmtpRequests.rset()));\n        assertTrue(channel.writeOutbound(SmtpRequests.noop()));\n        assertTrue(channel.finish());\n\n        assertEquals(""DATA\\r\\nRSET\\r\\nNOOP\\r\\n"", getWrittenString(channel));\n    }\n']",Encoder;Embedded;Channel;Clears;Outbound;Equals;set;Request;Written;channel,9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.83940015733242e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.901113510131836, -5.544422626495361, -4.651196479797363, -5.794198989868164, -5.367637634277344, -0.024196438491344452]",0.9760939478874207
2,"['    @Test\n    public void testDecodeOneLineResponse() {\n        EmbeddedChannel channel = newChannel();\n        assertTrue(channel.writeInbound(newBuffer(""200 Ok\\r\\n"")));\n        assertTrue(channel.finish());\n\n        SmtpResponse response = channel.readInbound();\n        assertEquals(200, response.code());\n        List<CharSequence> sequences = response.details();\n        assertEquals(1, sequences.size());\n\n        assertEquals(""Ok"", sequences.get(0).toString());\n        assertNull(channel.readInbound());\n    }\n']",Smtp;Ok;Ok;write;channel;new;details;sequences;Equals;channel,4.5838532969355583e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.6007106751203537e-10;1.4551915228366852e-10,5,5,"[-5.940737247467041, -5.58554220199585, -4.640131950378418, -5.7864990234375, -5.382401466369629, -0.023989181965589523]",0.9762962460517883
2,"['    @Test\n    public void testDecodeOneLineResponseNoDetails() {\n        EmbeddedChannel channel = newChannel();\n        assertTrue(channel.writeInbound(newBuffer(""250 \\r\\n"")));\n        assertTrue(channel.finish());\n\n        SmtpResponse response = channel.readInbound();\n        assertEquals(250, response.code());\n        List<CharSequence> sequences = response.details();\n        assertEquals(0, sequences.size());\n    }\n']",No;Inbound;Buffer;Embedded;details;Details;One;sequences;channel;True,1.1059455573558807e-09;1.0477378964424133e-09;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.981471061706543, -5.59613037109375, -4.614089012145996, -5.831221103668213, -5.412491321563721, -0.023825068026781082]",0.9764565229415894
2,"['    @Test\n    public void testDecodeOneLineResponseChunked() {\n        EmbeddedChannel channel = newChannel();\n        assertFalse(channel.writeInbound(newBuffer(""200 Ok"")));\n        assertTrue(channel.writeInbound(newBuffer(""\\r\\n"")));\n        assertTrue(channel.finish());\n\n        SmtpResponse response = channel.readInbound();\n        assertEquals(200, response.code());\n        List<CharSequence> sequences = response.details();\n        assertEquals(1, sequences.size());\n\n        assertEquals(""Ok"", sequences.get(0).toString());\n        assertNull(channel.readInbound());\n    }\n']",Channel;Inbound;Response;Chunked;Sequence;Line;channel;new;read;One,7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.838511813431978e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.94305419921875, -5.593629837036133, -4.641711235046387, -5.790005683898926, -5.3821821212768555, -0.023926332592964172]",0.9763575196266174
2,"['    @Test\n    public void testDecodeTwoLineResponse() {\n        EmbeddedChannel channel = newChannel();\n        assertTrue(channel.writeInbound(newBuffer(""200-Hello\\r\\n200 Ok\\r\\n"")));\n        assertTrue(channel.finish());\n\n        SmtpResponse response = channel.readInbound();\n        assertEquals(200, response.code());\n        List<CharSequence> sequences = response.details();\n        assertEquals(2, sequences.size());\n\n        assertEquals(""Hello"", sequences.get(0).toString());\n        assertEquals(""Ok"", sequences.get(1).toString());\n        assertNull(channel.readInbound());\n    }\n']",Decode;Inbound;Hello;Inbound;Response;Hello;response;Ok;new;True,1.280568540096283e-09;7.8580342233181e-10;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.9262471199035645, -5.570728302001953, -4.654468059539795, -5.770756721496582, -5.376420974731445, -0.02402304857969284]",0.9762631058692932
2,"['    @Test\n    public void testDecodeTwoLineResponseChunked() {\n        EmbeddedChannel channel = newChannel();\n        assertFalse(channel.writeInbound(newBuffer(""200-"")));\n        assertFalse(channel.writeInbound(newBuffer(""Hello\\r\\n2"")));\n        assertFalse(channel.writeInbound(newBuffer(""00 Ok"")));\n        assertTrue(channel.writeInbound(newBuffer(""\\r\\n"")));\n        assertTrue(channel.finish());\n\n        SmtpResponse response = channel.readInbound();\n        assertEquals(200, response.code());\n        List<CharSequence> sequences = response.details();\n        assertEquals(2, sequences.size());\n\n        assertEquals(""Hello"", sequences.get(0).toString());\n        assertEquals(""Ok"", sequences.get(1).toString());\n        assertNull(channel.readInbound());\n    }\n']",Chunked;False;Inbound;Decode;write;channel;Inbound;Inbound;write;Buffer,9.313225746154785e-10;6.693881005048752e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;3.637978807091713e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.9332685470581055, -5.570451736450195, -4.647617340087891, -5.782519340515137, -5.388437271118164, -0.02397824078798294]",0.9763069748878479
2,"['    @Test(expected = DecoderException.class)\n    public void testDecodeInvalidSeparator() {\n        EmbeddedChannel channel = newChannel();\n        assertTrue(channel.writeInbound(newBuffer(""200:Ok\\r\\n"")));\n    }\n']",Invalid;Decoder;Inbound;new;Buffer;channel;new;expected;write;True,5.587935447692871e-09;1.862645149230957e-09;1.6298145055770874e-09;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11,5,5,"[-5.985931396484375, -5.6225409507751465, -4.609385967254639, -5.839869499206543, -5.383886814117432, -0.023869067430496216]",0.9764135479927063
2,"['    @Test(expected = DecoderException.class)\n    public void testDecodeInvalidCode() {\n        EmbeddedChannel channel = newChannel();\n        assertTrue(channel.writeInbound(newBuffer(""xyz Ok\\r\\n"")));\n    }\n']",Invalid;Ok;expected;Exception;Channel;Decoder;class;new;Channel;channel,1.862645149230957e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.0745362639427185e-10,5,5,"[-5.98642635345459, -5.5817179679870605, -4.603883743286133, -5.860917568206787, -5.413333892822266, -0.023879891261458397]",0.976402997970581
2,"['    @Test(expected = DecoderException.class)\n    public void testDecodeInvalidLine() {\n        EmbeddedChannel channel = newChannel();\n        assertTrue(channel.writeInbound(newBuffer(""Ok\\r\\n"")));\n    }\n']",Line;Exception;write;Channel;Ok;new;new;expected;True;Buffer,3.026798367500305e-09;1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.992002964019775, -5.6109161376953125, -4.596672058105469, -5.856662750244141, -5.396244049072266, -0.023919930681586266]",0.9763638973236084
2,['    @Test\n    public void testPooledAllocatorIsBufferCopyNeededForWrite() {\n        testIsBufferCopyNeededForWrite(PooledByteBufAllocator.DEFAULT);\n    }\n'],Needed;Pooled;Byte;Write;Allocator;Copy;uf;Pooled;For;Allocator,2.0954757928848267e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.2223608791828156e-09;5.820766091346741e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-3.2014213502407074e-10,5,5,"[-5.973956108093262, -5.62575101852417, -4.60205078125, -5.867283821105957, -5.351293563842773, -0.02403840981423855]",0.9762482047080994
2,['    @Test\n    public void testUnPooledAllocatorIsBufferCopyNeededForWrite() {\n        testIsBufferCopyNeededForWrite(UnpooledByteBufAllocator.DEFAULT);\n    }\n'],Byte;Unpooled;Un;DEFAULT;Needed;Buffer;Needed;For;Buffer;Copy,1.862645149230957e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1932570487260818e-09;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.979450702667236, -5.625394344329834, -4.600931167602539, -5.8645172119140625, -5.3610076904296875, -0.023998025804758072]",0.9762876629829407
2,['    @Test\n    public void testKeepAlive() throws Exception {\n        assertFalse(socket.isKeepAlive());\n        socket.setKeepAlive(true);\n        assertTrue(socket.isKeepAlive());\n    }\n'],Alive;Keep;Alive;Keep;Exception;True;Alive;False;true;Keep,1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.984229564666748, -5.645639896392822, -4.591487884521484, -5.885735511779785, -5.343177318572998, -0.024034803733229637]",0.9762517213821411
2,['    @Test\n    public void testTcpNoDelay() throws Exception {\n        assertFalse(socket.isTcpNoDelay());\n        socket.setTcpNoDelay(true);\n        assertTrue(socket.isTcpNoDelay());\n    }\n'],Delay;No;Exception;Delay;False;No;cp;Delay;set;Delay,1.8044374883174896e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3387762010097504e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.966285243630409e-10;2.9103830456733704e-10;1.7462298274040222e-10,5,5,"[-6.004521369934082, -5.655317783355713, -4.581081867218018, -5.9235711097717285, -5.374185085296631, -0.02380155399441719]",0.9764794707298279
2,['    @Test\n    public void testReceivedBufferSize() throws Exception {\n        int size = socket.getReceiveBufferSize();\n        int newSize = 65535;\n        assertTrue(size > 0);\n        socket.setReceiveBufferSize(newSize);\n        // Linux usually set it to double what is specified\n        assertTrue(newSize <= socket.getReceiveBufferSize());\n    }\n'],Receive;double;it;specified;Received;set;new;Size;Receive;Size,2.0954757928848267e-09;1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-6.011414527893066, -5.621870994567871, -4.608048915863037, -5.868612289428711, -5.433409690856934, -0.023508984595537186]",0.9767653346061707
2,['    @Test\n    public void testSendBufferSize() throws Exception {\n        int size = socket.getSendBufferSize();\n        int newSize = 65535;\n        assertTrue(size > 0);\n        socket.setSendBufferSize(newSize);\n        // Linux usually set it to double what is specified\n        assertTrue(newSize <= socket.getSendBufferSize());\n    }\n'],set;Buffer;size;Buffer;new;to;double;Linux;socket;socket,1.3969838619232178e-09;8.731149137020111e-10;7.566995918750763e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.009115695953369, -5.628602504730225, -4.610488414764404, -5.861372947692871, -5.420871734619141, -0.023542284965515137]",0.9767325520515442
2,"['    @Test\n    public void testSoLinger() throws Exception {\n        assertEquals(-1, socket.getSoLinger());\n        socket.setSoLinger(10);\n        assertEquals(10, socket.getSoLinger());\n    }\n']",inger;socket;socket;So;inger;get;So;inger;inger;So,1.5133991837501526e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.2223608791828156e-09;9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.940441131591797, -5.6344780921936035, -4.625673770904541, -5.819047927856445, -5.320687770843506, -0.024149544537067413]",0.9761397242546082
2,['    @Test\n    public void testDoubleCloseDoesNotThrow() throws IOException {\n        Socket socket = Socket.newSocketStream();\n        socket.close();\n        socket.close();\n    }\n'],Double;Throw;new;socket;socket;Socket;close;Stream;Close;Not,2.7939677238464355e-09;2.6775524020195007e-09;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-4.656612873077393e-10;-9.313225746154785e-10,5,5,"[-6.025943279266357, -5.567435264587402, -4.559433460235596, -5.9013776779174805, -5.421714782714844, -0.024147916585206985]",0.9761412143707275
2,"['    @Test\n    public void testTrafficClass() throws IOException {\n        // IPTOS_THROUGHPUT\n        final int value = 0x08;\n        socket.setTrafficClass(value);\n        assertEquals(value, socket.getTrafficClass());\n    }\n']",Traffic;TH;HPUT;socket;Class;value;socket;value;value;final,2.3283064365386963e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;-5.820766091346741e-11;-5.820766091346741e-11;-1.1641532182693481e-10;-2.9103830456733704e-10,5,5,"[-5.990764617919922, -5.523106098175049, -4.596734046936035, -5.875025749206543, -5.46112060546875, -0.023921212181448936]",0.9763626456260681
2,['    @Test(timeout = 10000)\n    public void clientCloseWithoutServerReadIsDetectedNoExtraReadRequested() throws InterruptedException {\n        clientCloseWithoutServerReadIsDetected0(false);\n    }\n'],Extra;Interrupted;Requested;Close;client;client;No;Exception;Read;Server,3.725290298461914e-09;1.862645149230957e-09;1.2223608791828156e-09;1.1059455573558807e-09;1.0477378964424133e-09;5.820766091346741e-10;2.3283064365386963e-10;2.3283064365386963e-10;8.731149137020111e-11;0.0,5,5,"[-6.004862308502197, -5.583637237548828, -4.579310894012451, -5.915067672729492, -5.4062113761901855, -0.023959269747138023]",0.9763253331184387
2,['    @Test(timeout = 10000)\n    public void clientCloseWithoutServerReadIsDetectedExtraReadRequested() throws InterruptedException {\n        clientCloseWithoutServerReadIsDetected0(true);\n    }\n'],Requested;Interrupted;Extra;Close;true;Server;Exception;Server;Detected;Read,2.9685907065868378e-09;2.6775524020195007e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-6.009434700012207, -5.585488319396973, -4.57863712310791, -5.9196457862854, -5.40709924697876, -0.023931220173835754]",0.9763529896736145
2,['    @Test(timeout = 10000)\n    public void serverCloseWithoutClientReadIsDetectedNoExtraReadRequested() throws InterruptedException {\n        serverCloseWithoutClientReadIsDetected0(false);\n    }\n'],Close;timeout;server;Without;Requested;Exception;Without;server;Detected;false,3.259629011154175e-09;2.3283064365386963e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;2.9103830456733704e-10;5.820766091346741e-11,5,5,"[-5.999906539916992, -5.5774126052856445, -4.5840959548950195, -5.911149978637695, -5.402582168579102, -0.02397335320711136]",0.9763117432594299
2,['    @Test(timeout = 10000)\n    public void serverCloseWithoutClientReadIsDetectedExtraReadRequested() throws InterruptedException {\n        serverCloseWithoutClientReadIsDetected0(true);\n    }\n'],Extra;Close;Detected;server;Exception;Client;server;true;Without;Client,1.862645149230957e-09;1.6298145055770874e-09;1.57160684466362e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;4.656612873077393e-10;0.0;0.0;-4.656612873077393e-10,5,5,"[-6.002683162689209, -5.57719087600708, -4.581261157989502, -5.915052890777588, -5.406278133392334, -0.023969046771526337]",0.9763159155845642
2,['    @Test(expected = UnsupportedOperationException.class)\n    public void testInternalNioBufferAfterRelease() {\n        super.testInternalNioBufferAfterRelease();\n    }\n'],io;Operation;Buffer;Release;Buffer;After;Internal;After;super;expected,2.444721758365631e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-6.002529144287109, -5.582131862640381, -4.576366424560547, -5.898162841796875, -5.408106327056885, -0.024040622636675835]",0.976246178150177
2,"['    @Test\n    public void testForward() {\n        final ByteBuf buf =\n                Unpooled.copiedBuffer(""abc\\r\\n\\ndef\\r\\rghi\\n\\njkl\\0\\0mno  \\t\\tx"", CharsetUtil.ISO_8859_1);\n        final int length = buf.readableBytes();\n\n        assertEquals(3,  buf.forEachByte(0,  length, ByteProcessor.FIND_CRLF));\n        assertEquals(6,  buf.forEachByte(3,  length - 3, ByteProcessor.FIND_NON_CRLF));\n        assertEquals(9,  buf.forEachByte(6,  length - 6, ByteProcessor.FIND_CR));\n        assertEquals(11, buf.forEachByte(9,  length - 9, ByteProcessor.FIND_NON_CR));\n        assertEquals(14, buf.forEachByte(11, length - 11, ByteProcessor.FIND_LF));\n        assertEquals(16, buf.forEachByte(14, length - 14, ByteProcessor.FIND_NON_LF));\n        assertEquals(19, buf.forEachByte(16, length - 16, ByteProcessor.FIND_NUL));\n        assertEquals(21, buf.forEachByte(19, length - 19, ByteProcessor.FIND_NON_NUL));\n        assertEquals(24, buf.forEachByte(19, length - 19, ByteProcessor.FIND_ASCII_SPACE));\n        assertEquals(24, buf.forEachByte(21, length - 21, ByteProcessor.FIND_LINEAR_WHITESPACE));\n        assertEquals(28, buf.forEachByte(24, length - 24, ByteProcessor.FIND_NON_LINEAR_WHITESPACE));\n        assertEquals(-1, buf.forEachByte(28, length - 28, ByteProcessor.FIND_LINEAR_WHITESPACE));\n\n        buf.release();\n    }\n']",ASCII;Forward;WHITES;SPACE;buf;abc;CR;Buffer;ACE;uf,7.275957614183426e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.861555576324463, -5.4503326416015625, -4.667462348937988, -5.709955215454102, -5.416614532470703, -0.024592680856585503]",0.9757072329521179
2,"['    @Test\n    public void testBackward() {\n        final ByteBuf buf =\n                Unpooled.copiedBuffer(""abc\\r\\n\\ndef\\r\\rghi\\n\\njkl\\0\\0mno  \\t\\tx"", CharsetUtil.ISO_8859_1);\n        final int length = buf.readableBytes();\n\n        assertEquals(27, buf.forEachByteDesc(0, length, ByteProcessor.FIND_LINEAR_WHITESPACE));\n        assertEquals(25, buf.forEachByteDesc(0, length, ByteProcessor.FIND_ASCII_SPACE));\n        assertEquals(23, buf.forEachByteDesc(0, 28, ByteProcessor.FIND_NON_LINEAR_WHITESPACE));\n        assertEquals(20, buf.forEachByteDesc(0, 24, ByteProcessor.FIND_NUL));\n        assertEquals(18, buf.forEachByteDesc(0, 21, ByteProcessor.FIND_NON_NUL));\n        assertEquals(15, buf.forEachByteDesc(0, 19, ByteProcessor.FIND_LF));\n        assertEquals(13, buf.forEachByteDesc(0, 16, ByteProcessor.FIND_NON_LF));\n        assertEquals(10, buf.forEachByteDesc(0, 14, ByteProcessor.FIND_CR));\n        assertEquals(8,  buf.forEachByteDesc(0, 11, ByteProcessor.FIND_NON_CR));\n        assertEquals(5,  buf.forEachByteDesc(0, 9, ByteProcessor.FIND_CRLF));\n        assertEquals(2,  buf.forEachByteDesc(0, 6, ByteProcessor.FIND_NON_CRLF));\n        assertEquals(-1, buf.forEachByteDesc(0, 3, ByteProcessor.FIND_CRLF));\n\n        buf.release();\n    }\n']",Charset;readable;gh;ndef;ON;WHITES;ON;Desc;IND;Each,9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;5.384208634495735e-10;5.384208634495735e-10;3.637978807091713e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.866402626037598, -5.448534965515137, -4.668041706085205, -5.708842754364014, -5.429525375366211, -0.024526380002498627]",0.9757720828056335
2,"['    @Test(expected = NullPointerException.class)\n    public void shouldNotAllowNullInConstructor1() {\n        new UnpooledHeapByteBuf(null, new byte[1], 0);\n    }\n']",Unpooled;expected;Heap;Exception;Allow;new;new;byte;Null;Not,3.841705620288849e-09;1.862645149230957e-09;1.1641532182693481e-09;7.566995918750763e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.9103830456733704e-11;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-5.964447021484375, -5.581033229827881, -4.604384422302246, -5.851930618286133, -5.373592376708984, -0.024146053940057755]",0.9761432409286499
2,"['    @Test(expected = NullPointerException.class)\n    public void shouldNotAllowNullInConstructor2() {\n        new UnpooledHeapByteBuf(UnpooledByteBufAllocator.DEFAULT, null, 0);\n    }\n']",Constructor;uf;Null;uf;Exception;Byte;Byte;In;new;Not,2.9103830456733704e-09;2.0954757928848267e-09;1.3387762010097504e-09;1.1641532182693481e-09;9.604264050722122e-10;9.313225746154785e-10;6.984919309616089e-10;2.3283064365386963e-10;0.0;-3.4924596548080444e-10,5,5,"[-5.944692611694336, -5.560196876525879, -4.605450630187988, -5.853952407836914, -5.36669921875, -0.024295689538121223]",0.9759969711303711
2,['    @Test\n    public void testIsWritable() {\n        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);\n        assertFalse(empty.isWritable());\n        assertFalse(empty.isWritable(1));\n    }\n'],Writable;False;Unpooled;uf;Allocator;Writable;Empty;uf;Byte;False,1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;0.0;0.0,5,5,"[-5.974195957183838, -5.609297275543213, -4.605735778808594, -5.862987041473389, -5.387003421783447, -0.02390340343117714]",0.9763799905776978
2,['    @Test\n    public void testWriteEmptyByteBuf() {\n        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);\n        empty.writeBytes(Unpooled.EMPTY_BUFFER); // Ok\n        ByteBuf nonEmpty = UnpooledByteBufAllocator.DEFAULT.buffer().writeBoolean(false);\n        try {\n            empty.writeBytes(nonEmpty);\n            fail();\n        } catch (IndexOutOfBoundsException ignored) {\n            // Ignore.\n        } finally {\n            nonEmpty.release();\n        }\n    }\n'],finally;EMPTY;new;Empty;Allocator;fail;Boolean;Byte;uf;ounds,7.566995918750763e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.92901711165905e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.019369602203369, -5.526541233062744, -4.591896057128906, -5.866018772125244, -5.47858190536499, -0.02383577637374401]",0.9764460325241089
2,['    @Test\n    public void testIsReadable() {\n        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);\n        assertFalse(empty.isReadable());\n        assertFalse(empty.isReadable(1));\n    }\n'],Allocator;Unpooled;Byte;Readable;empty;Byte;False;Empty;uf;Empty,1.979060471057892e-09;1.7462298274040222e-09;9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.97087287902832, -5.607938289642334, -4.60529899597168, -5.859121799468994, -5.388490676879883, -0.023925982415676117]",0.9763581156730652
2,"['    @Test\n    public void testArray() {\n        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);\n        assertThat(empty.hasArray(), is(true));\n        assertThat(empty.array().length, is(0));\n        assertThat(empty.arrayOffset(), is(0));\n    }\n']",Offset;DEFAULT;Byte;uf;Array;That;Empty;That;has;empty,1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.9528913497924805, -5.646036148071289, -4.62893533706665, -5.811425685882568, -5.350658416748047, -0.023916788399219513]",0.9763668179512024
2,"['    @Test\n    public void testNioBuffer() {\n        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);\n        assertThat(empty.nioBufferCount(), is(1));\n        assertThat(empty.nioBuffer().position(), is(0));\n        assertThat(empty.nioBuffer().limit(), is(0));\n        assertThat(empty.nioBuffer(), is(sameInstance(empty.nioBuffer())));\n        assertThat(empty.nioBuffer(), is(sameInstance(empty.internalNioBuffer(empty.readerIndex(), 0))));\n    }\n']",Allocator;reader;Buffer;Buffer;That;Buffer;That;io;io;same,1.7462298274040222e-09;1.5133991837501526e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.895360469818115, -5.638452053070068, -4.660571098327637, -5.753598690032959, -5.302004337310791, -0.02421528846025467]",0.9760754108428955
2,"['    @Test\n    public void testMemoryAddress() {\n        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);\n        if (empty.hasMemoryAddress()) {\n            assertThat(empty.memoryAddress(), is(not(0L)));\n        } else {\n            try {\n                empty.memoryAddress();\n                fail();\n            } catch (UnsupportedOperationException ignored) {\n                // Ignore.\n            }\n        }\n    }\n']",Address;Allocator;Ignore;new;ignored;if;uf;Memory;Address;Operation,1.280568540096283e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.002836227416992, -5.501514911651611, -4.60561990737915, -5.8521904945373535, -5.470900058746338, -0.02391248196363449]",0.976371169090271
2,"['    @Test\n    public void consistentEqualsAndHashCodeWithAbstractBytebuf() {\n        ByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);\n        ByteBuf emptyAbstract = new UnpooledHeapByteBuf(UnpooledByteBufAllocator.DEFAULT, 0, 0);\n        assertEquals(emptyAbstract, empty);\n        assertEquals(emptyAbstract.hashCode(), empty.hashCode());\n        assertEquals(EmptyByteBuf.EMPTY_BYTE_BUF_HASH_CODE, empty.hashCode());\n        assertTrue(emptyAbstract.release());\n        assertFalse(empty.release());\n    }\n']",consistent;BU;Equals;empty;empty;DEFAULT;uf;Equals;Code;Empty,1.4551915228366852e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.930747032165527, -5.6001505851745605, -4.645571708679199, -5.78981351852417, -5.371082305908203, -0.02395007573068142]",0.9763344526290894
2,['    @Test\n    public void decodeRandomHexBytesWithEvenLength() {\n        decodeRandomHexBytes(256);\n    }\n'],Bytes;ex;decode;Length;Bytes;Even;decode;ex;Random;Random,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;-4.656612873077393e-10;-2.561137080192566e-09;-3.3760443329811096e-09;-3.841705620288849e-09,5,5,"[-6.061019420623779, -5.596347332000732, -4.5388569831848145, -5.933112621307373, -5.443657875061035, -0.023988250643014908]",0.9762970805168152
2,['    @Test\n    public void decodeRandomHexBytesWithOddLength() {\n        decodeRandomHexBytes(257);\n    }\n'],Random;Length;dd;Random;ex;decode;decode;Bytes;Bytes;ex,2.735760062932968e-09;1.862645149230957e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;-2.3283064365386963e-10;-1.862645149230957e-09;-2.153683453798294e-09,5,5,"[-6.043702125549316, -5.5918731689453125, -4.546640396118164, -5.924868106842041, -5.437199592590332, -0.02401350624859333]",0.9762726426124573
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void decodeHexDumpWithOddLength() {\n        ByteBufUtil.decodeHexDump(""abc"");\n    }\n']",Illegal;Util;decode;ump;decode;Byte;expected;dd;abc;class,1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-6.025911331176758, -5.634970664978027, -4.595785140991211, -5.884753227233887, -5.413343906402588, -0.023594796657562256]",0.9766814112663269
2,"['    @Test(expected = IllegalArgumentException.class)\n    public void decodeHexDumpWithInvalidChar() {\n        ByteBufUtil.decodeHexDump(""fg"");\n    }\n']",Invalid;Char;Exception;decode;ump;ump;Illegal;fg;Byte;decode,2.7939677238464355e-09;2.0954757928848267e-09;1.862645149230957e-09;1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;-5.820766091346741e-11,5,5,"[-6.018420219421387, -5.619173049926758, -4.601470470428467, -5.8704938888549805, -5.409644603729248, -0.02367093786597252]",0.9766070246696472
2,"['    @Test\n    public void equalsBufferSubsections() {\n        byte[] b1 = new byte[128];\n        byte[] b2 = new byte[256];\n        Random rand = new Random();\n        rand.nextBytes(b1);\n        rand.nextBytes(b2);\n        final int iB1 = b1.length / 2;\n        final int iB2 = iB1 + b1.length;\n        final int length = b1.length - iB1;\n        System.arraycopy(b1, iB1, b2, iB2, length);\n        assertTrue(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2, length));\n    }\n']",next;new;rand;Random;next;Buffer;rand;Byte;final;final,4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.970885753631592, -5.569202423095703, -4.656376361846924, -5.7757415771484375, -5.423476696014404, -0.02365766651928425]",0.9766199588775635
2,"['    @Test\n    public void notEqualsBufferSubsections() {\n        byte[] b1 = new byte[50];\n        byte[] b2 = new byte[256];\n        Random rand = new Random();\n        rand.nextBytes(b1);\n        rand.nextBytes(b2);\n        final int iB1 = b1.length / 2;\n        final int iB2 = iB1 + b1.length;\n        final int length = b1.length - iB1;\n        System.arraycopy(b1, iB1, b2, iB2, length);\n        // Randomly pick an index in the range that will be compared and make the value at that index differ between\n        // the 2 arrays.\n        int diffIndex = random(rand, iB1, iB1 + length - 1);\n        ++b1[diffIndex];\n        assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2, length));\n    }\n']",Equals;that;the;arraycopy;index;compared;next;between;Buffer;rand,6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.974233150482178, -5.537241458892822, -4.653289318084717, -5.779196739196777, -5.455317497253418, -0.023653358221054077]",0.9766243100166321
2,"['    @Test\n    public void notEqualsBufferOverflow() {\n        byte[] b1 = new byte[8];\n        byte[] b2 = new byte[16];\n        Random rand = new Random();\n        rand.nextBytes(b1);\n        rand.nextBytes(b2);\n        final int iB1 = b1.length / 2;\n        final int iB2 = iB1 + b1.length;\n        final int length = b1.length - iB1;\n        System.arraycopy(b1, iB1, b2, iB2, length - 1);\n        assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2,\n                Math.max(b1.length, b2.length) * 2));\n    }\n']",arraycopy;Random;Unpooled;Buffer;wrapped;Random;Byte;False;new;rand,1.280568540096283e-09;6.402842700481415e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.950774192810059, -5.562525749206543, -4.66336727142334, -5.753106117248535, -5.411150932312012, -0.02379782870411873]",0.9764831066131592
2,"['    @Test (expected = IllegalArgumentException.class)\n    public void notEqualsBufferUnderflow() {\n        byte[] b1 = new byte[8];\n        byte[] b2 = new byte[16];\n        Random rand = new Random();\n        rand.nextBytes(b1);\n        rand.nextBytes(b2);\n        final int iB1 = b1.length / 2;\n        final int iB2 = iB1 + b1.length;\n        final int length = b1.length - iB1;\n        System.arraycopy(b1, iB1, b2, iB2, length - 1);\n        assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2,\n                -1));\n    }\n']",expected;Random;new;Illegal;Bytes;wrapped;System;Buffer;Bytes;Buffer,1.5133991837501526e-09;4.0745362639427185e-10;3.8562575355172157e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.960825443267822, -5.544981479644775, -4.658907413482666, -5.772639274597168, -5.431705951690674, -0.023727983236312866]",0.9765511751174927
2,"['    @Test\n    public void writeShortBE() {\n        int expected = 0x1234;\n\n        ByteBuf buf = Unpooled.buffer(2).order(ByteOrder.BIG_ENDIAN);\n        ByteBufUtil.writeShortBE(buf, expected);\n        assertEquals(expected, buf.readShort());\n        buf.resetReaderIndex();\n        assertEquals(ByteBufUtil.swapShort((short) expected), buf.readShortLE());\n        buf.release();\n\n        buf = Unpooled.buffer(2).order(ByteOrder.LITTLE_ENDIAN);\n        ByteBufUtil.writeShortBE(buf, expected);\n        assertEquals((short) expected, buf.readShortLE());\n        buf.resetReaderIndex();\n        assertEquals(ByteBufUtil.swapShort((short) expected), buf.readShort());\n        buf.release();\n    }\n']",ITTLE;Short;Short;Index;buffer;buf;order;expected;buf;order,8.585629984736443e-10;6.693881005048752e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.923107147216797, -5.56239652633667, -4.671847820281982, -5.75510311126709, -5.381744861602783, -0.023921560496091843]",0.9763621687889099
2,"['    @Test\n    public void setShortBE() {\n        int shortValue = 0x1234;\n\n        ByteBuf buf = Unpooled.wrappedBuffer(new byte[2]).order(ByteOrder.BIG_ENDIAN);\n        ByteBufUtil.setShortBE(buf, 0, shortValue);\n        assertEquals(shortValue, buf.readShort());\n        buf.resetReaderIndex();\n        assertEquals(ByteBufUtil.swapShort((short) shortValue), buf.readShortLE());\n        buf.release();\n\n        buf = Unpooled.wrappedBuffer(new byte[2]).order(ByteOrder.LITTLE_ENDIAN);\n        ByteBufUtil.setShortBE(buf, 0, shortValue);\n        assertEquals((short) shortValue, buf.readShortLE());\n        buf.resetReaderIndex();\n        assertEquals(ByteBufUtil.swapShort((short) shortValue), buf.readShort());\n        buf.release();\n    }\n']",order;Reader;Unpooled;LE;new;LE;Equals;order;Short;uf,1.1641532182693481e-09;5.529727786779404e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10,5,5,"[-5.916477680206299, -5.560009956359863, -4.666650772094727, -5.752648830413818, -5.384161472320557, -0.023995814844965935]",0.9762898087501526
2,"['    @Test\n    public void writeMediumBE() {\n        int mediumValue = 0x123456;\n\n        ByteBuf buf = Unpooled.buffer(4).order(ByteOrder.BIG_ENDIAN);\n        ByteBufUtil.writeMediumBE(buf, mediumValue);\n        assertEquals(mediumValue, buf.readMedium());\n        buf.resetReaderIndex();\n        assertEquals(ByteBufUtil.swapMedium(mediumValue), buf.readMediumLE());\n        buf.release();\n\n        buf = Unpooled.buffer(4).order(ByteOrder.LITTLE_ENDIAN);\n        ByteBufUtil.writeMediumBE(buf, mediumValue);\n        assertEquals(mediumValue, buf.readMediumLE());\n        buf.resetReaderIndex();\n        assertEquals(ByteBufUtil.swapMedium(mediumValue), buf.readMedium());\n        buf.release();\n    }\n']",Equals;ENDIAN;Index;BE;Util;Order;LE;Value;order;read,8.731149137020111e-10;6.402842700481415e-10;5.675246939063072e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.94554328918457, -5.5823774337768555, -4.655868053436279, -5.777507305145264, -5.394616603851318, -0.02380516193807125]",0.9764758348464966
2,"['    @Test\n    public void testWriteUsAscii() {\n        String usAscii = ""NettyRocks"";\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeAscii(buf2, usAscii);\n\n        assertEquals(buf, buf2);\n\n        buf.release();\n        buf2.release();\n    }\n']",Unpooled;Us;Asci;buffer;us;release;Bytes;buf;release;buf,1.5133991837501526e-09;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.991657257080078, -5.613032817840576, -4.628505229949951, -5.822275638580322, -5.412939548492432, -0.02361493930220604]",0.9766618013381958
2,"['    @Test\n    public void testWriteUsAsciiSwapped() {\n        String usAscii = ""NettyRocks"";\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));\n        SwappedByteBuf buf2 = new SwappedByteBuf(Unpooled.buffer(16));\n        ByteBufUtil.writeAscii(buf2, usAscii);\n\n        assertEquals(buf, buf2);\n\n        buf.release();\n        buf2.release();\n    }\n']",Write;Byte;uf;release;Swapped;Equals;Asci;Byte;us;release,4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.979520797729492, -5.61025333404541, -4.640115261077881, -5.803969860076904, -5.404423236846924, -0.02363612875342369]",0.9766409993171692
2,"['    @Test\n    public void testWriteUsAsciiWrapped() {\n        String usAscii = ""NettyRocks"";\n        ByteBuf buf = unreleasableBuffer(Unpooled.buffer(16));\n        assertWrapped(buf);\n        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));\n        ByteBuf buf2 = unreleasableBuffer(Unpooled.buffer(16));\n        assertWrapped(buf2);\n        ByteBufUtil.writeAscii(buf2, usAscii);\n\n        assertEquals(buf, buf2);\n\n        buf.unwrap().release();\n        buf2.unwrap().release();\n    }\n']",Write;write;Netty;ocks;buf;Asci;Byte;buf;ASCII;unwrap,6.693881005048752e-10;6.693881005048752e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.97406530380249, -5.615633964538574, -4.634596347808838, -5.810216426849365, -5.396024227142334, -0.023704467341303825]",0.9765743017196655
2,"['    @Test\n    public void testWriteUsAsciiComposite() {\n        String usAscii = ""NettyRocks"";\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));\n        ByteBuf buf2 = Unpooled.compositeBuffer().addComponent(\n                Unpooled.buffer(8)).addComponent(Unpooled.buffer(24));\n        // write some byte so we start writing with an offset.\n        buf2.writeByte(1);\n        ByteBufUtil.writeAscii(buf2, usAscii);\n\n        // Skip the previously written byte.\n        assertEquals(buf, buf2.skipBytes(1));\n\n        buf.release();\n        buf2.release();\n    }\n']",with;an;Charset;Netty;we;buffer;Component;Unpooled;us;Unpooled,1.0477378964424133e-09;9.313225746154785e-10;7.275957614183426e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.981887340545654, -5.559197902679443, -4.6418609619140625, -5.811821937561035, -5.438051223754883, -0.023632634431123734]",0.9766444563865662
2,"['    @Test\n    public void testWriteUsAsciiCompositeWrapped() {\n        String usAscii = ""NettyRocks"";\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));\n        ByteBuf buf2 = new WrappedCompositeByteBuf(Unpooled.compositeBuffer().addComponent(\n                Unpooled.buffer(8)).addComponent(Unpooled.buffer(24)));\n        // write some byte so we start writing with an offset.\n        buf2.writeByte(1);\n        ByteBufUtil.writeAscii(buf2, usAscii);\n\n        // Skip the previously written byte.\n        assertEquals(buf, buf2.skipBytes(1));\n\n        buf.release();\n        buf2.release();\n    }\n']",Unpooled;buffer;Wrapped;release;Unpooled;Netty;an;buffer;start;Write,7.8580342233181e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9780168533325195, -5.55239725112915, -4.646128177642822, -5.804086208343506, -5.443633556365967, -0.023626580834388733]",0.9766503572463989
2,"['    @Test\n    public void testWriteUtf8() {\n        String usAscii = ""Some UTF-8 like Ã¤Ã\x84â\x88\x8fÅ\x92Å\x92"";\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(usAscii.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, usAscii);\n\n        assertEquals(buf, buf2);\n\n        buf.release();\n        buf2.release();\n    }\n']",Some;Charset;buffer;Ut;Unpooled;Unpooled;buf;buf;Util;buf,1.8044374883174896e-09;1.2223608791828156e-09;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.994440078735352, -5.610546112060547, -4.639424800872803, -5.794849872589111, -5.425873756408691, -0.02353401854634285]",0.9767407178878784
2,"['    @Test\n    public void testWriteUtf8Composite() {\n        String utf8 = ""Some UTF-8 like Ã¤Ã\x84â\x88\x8fÅ\x92Å\x92"";\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(utf8.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.compositeBuffer().addComponent(\n                Unpooled.buffer(8)).addComponent(Unpooled.buffer(24));\n        // write some byte so we start writing with an offset.\n        buf2.writeByte(1);\n        ByteBufUtil.writeUtf8(buf2, utf8);\n\n        // Skip the previously written byte.\n        assertEquals(buf, buf2.skipBytes(1));\n\n        buf.release();\n        buf2.release();\n    }\n']",Charset;composite;Some;offset;byte;like;buf;Unpooled;we;skip,1.4551915228366852e-09;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.9912590980529785, -5.549382209777832, -4.638297080993652, -5.810831546783447, -5.4600982666015625, -0.023588625714182854]",0.9766874313354492
2,"['    @Test\n    public void testWriteUtf8CompositeWrapped() {\n        String utf8 = ""Some UTF-8 like Ã¤Ã\x84â\x88\x8fÅ\x92Å\x92"";\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(utf8.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = new WrappedCompositeByteBuf(Unpooled.compositeBuffer().addComponent(\n                Unpooled.buffer(8)).addComponent(Unpooled.buffer(24)));\n        // write some byte so we start writing with an offset.\n        buf2.writeByte(1);\n        ByteBufUtil.writeUtf8(buf2, utf8);\n\n        // Skip the previously written byte.\n        assertEquals(buf, buf2.skipBytes(1));\n\n        buf.release();\n        buf2.release();\n    }\n']",Ãĥ;Wrapped;UTF;composite;new;previously;ut;Ã¢;add;byte,9.313225746154785e-10;6.475602276623249e-10;5.820766091346741e-10;5.311449058353901e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.981368541717529, -5.539769649505615, -4.648806571960449, -5.794416904449463, -5.458670616149902, -0.02360597252845764]",0.9766704440116882
2,"[""    @Test\n    public void testWriteUtf8Surrogates() {\n        // leading surrogate + trailing surrogate\n        String surrogateString = new StringBuilder(2)\n                                .append('a')\n                                .append('\\uD800')\n                                .append('\\uDC00')\n                                .append('b')\n                                .toString();\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, surrogateString);\n\n        assertEquals(buf, buf2);\n        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));\n\n        buf.release();\n        buf2.release();\n    }\n""]",surrogate;Write;append;Surrogates;Ut;buf;append;buffer;Bytes;Ut,8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.128661774098873e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.975944995880127, -5.404846668243408, -4.626216888427734, -5.806746006011963, -5.5460944175720215, -0.024021651595830917]",0.9762645959854126
2,"[""    @Test\n    public void testWriteUtf8InvalidOnlyTrailingSurrogate() {\n        String surrogateString = new StringBuilder(2)\n                                .append('a')\n                                .append('\\uDC00')\n                                .append('b')\n                                .toString();\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, surrogateString);\n\n        assertEquals(buf, buf2);\n        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));\n\n        buf.release();\n        buf2.release();\n    }\n""]",Unpooled;write;append;Unpooled;UTF;Equals;Equals;uf;Ut;buf,8.585629984736443e-10;6.984919309616089e-10;6.984919309616089e-10;5.966285243630409e-10;3.4924596548080444e-10;3.346940502524376e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.0186340659856796e-10,5,5,"[-5.971924304962158, -5.429311275482178, -4.635279655456543, -5.80454158782959, -5.524073123931885, -0.02392609976232052]",0.9763577580451965
2,"[""    @Test\n    public void testWriteUtf8InvalidOnlyLeadingSurrogate() {\n        String surrogateString = new StringBuilder(2)\n                                .append('a')\n                                .append('\\uD800')\n                                .append('b')\n                                .toString();\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, surrogateString);\n\n        assertEquals(buf, buf2);\n        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));\n\n        buf.release();\n        buf2.release();\n    }\n""]",Surrogate;Invalid;surrogate;append;Ut;Builder;surrogate;append;get;release,1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10,5,5,"[-5.97014045715332, -5.429591178894043, -4.635013103485107, -5.804881572723389, -5.523141384124756, -0.02393506094813347]",0.9763491153717041
2,"[""    @Test\n    public void testWriteUtf8InvalidSurrogatesSwitched() {\n        String surrogateString = new StringBuilder(2)\n                                .append('a')\n                                .append('\\uDC00')\n                                .append('\\uD800')\n                                .append('b')\n                                .toString();\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, surrogateString);\n\n        assertEquals(buf, buf2);\n        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));\n\n        buf.release();\n        buf2.release();\n    }\n""]",Switched;Builder;Ut;append;surrogate;Unpooled;Equals;buf;Ut;append,5.587935447692871e-09;9.313225746154785e-10;8.731149137020111e-10;6.111804395914078e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.8562575355172157e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.955771446228027, -5.3890275955200195, -4.630959510803223, -5.795109748840332, -5.534063816070557, -0.02418515272438526]",0.9761050939559937
2,"[""    @Test\n    public void testWriteUtf8InvalidTwoLeadingSurrogates() {\n        String surrogateString = new StringBuilder(2)\n                                .append('a')\n                                .append('\\uD800')\n                                .append('\\uD800')\n                                .append('b')\n                                .toString();\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, surrogateString);\n\n        assertEquals(buf, buf2);\n        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));\n        buf.release();\n        buf2.release();\n    }\n""]",append;to;append;write;release;Equals;new;Equals;release;Byte,5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.1100277081131935e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.976603031158447, -5.403253555297852, -4.623894214630127, -5.811745643615723, -5.546724796295166, -0.024032708257436752]",0.9762538075447083
2,"[""    @Test\n    public void testWriteUtf8InvalidTwoTrailingSurrogates() {\n        String surrogateString = new StringBuilder(2)\n                                .append('a')\n                                .append('\\uDC00')\n                                .append('\\uDC00')\n                                .append('b')\n                                .toString();\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, surrogateString);\n\n        assertEquals(buf, buf2);\n        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));\n\n        buf.release();\n        buf2.release();\n    }\n""]",Two;append;append;Trailing;surrogate;to;surrogate;Byte;release;uf,1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10;1.382431946694851e-10,5,5,"[-5.969966888427734, -5.399295806884766, -4.633105754852295, -5.796111583709717, -5.542547225952148, -0.024041086435317993]",0.9762454628944397
2,"[""    @Test\n    public void testWriteUtf8InvalidEndOnLeadingSurrogate() {\n        String surrogateString = new StringBuilder(2)\n                                .append('\\uD800')\n                                .toString();\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, surrogateString);\n\n        assertEquals(buf, buf2);\n        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));\n\n        buf.release();\n        buf2.release();\n    }\n""]",Leading;Surrogate;surrogate;Ut;append;Byte;buf;Bytes;buf;Ut,8.149072527885437e-10;7.566995918750763e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.986733913421631, -5.512239456176758, -4.633222579956055, -5.803875923156738, -5.479148864746094, -0.023740671575069427]",0.9765390157699585
2,"[""    @Test\n    public void testWriteUtf8InvalidEndOnTrailingSurrogate() {\n        String surrogateString = new StringBuilder(2)\n                                .append('\\uDC00')\n                                .toString();\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeUtf8(buf2, surrogateString);\n\n        assertEquals(buf, buf2);\n        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));\n\n        buf.release();\n        buf2.release();\n    }\n""]",End;surrogate;Write;append;release;utf;On;new;UTF;Ut,9.313225746154785e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.384208634495735e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.637978807091713e-10,5,5,"[-5.993868350982666, -5.5186052322387695, -4.635322093963623, -5.803467273712158, -5.483323097229004, -0.023658713325858116]",0.9766189455986023
2,"['    @Test\n    public void testWriteUsAsciiString() {\n        AsciiString usAscii = new AsciiString(""NettyRocks"");\n        ByteBuf buf = Unpooled.buffer(16);\n        buf.writeBytes(usAscii.toString().getBytes(CharsetUtil.US_ASCII));\n        ByteBuf buf2 = Unpooled.buffer(16);\n        ByteBufUtil.writeAscii(buf2, usAscii);\n\n        assertEquals(buf, buf2);\n\n        buf.release();\n        buf2.release();\n    }\n']",Unpooled;Write;Netty;release;Asci;Asci;buf;to;US;Bytes,1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.993250370025635, -5.6324076652526855, -4.631932258605957, -5.811678409576416, -5.4013447761535645, -0.023590371012687683]",0.9766857028007507
2,"['    @Test\n    public void testWriteUtf8Wrapped() {\n        String usAscii = ""Some UTF-8 like Ã¤Ã\x84â\x88\x8fÅ\x92Å\x92"";\n        ByteBuf buf = unreleasableBuffer(Unpooled.buffer(16));\n        assertWrapped(buf);\n        buf.writeBytes(usAscii.getBytes(CharsetUtil.UTF_8));\n        ByteBuf buf2 = unreleasableBuffer(Unpooled.buffer(16));\n        assertWrapped(buf2);\n        ByteBufUtil.writeUtf8(buf2, usAscii);\n\n        assertEquals(buf, buf2);\n\n        buf.release();\n        buf2.release();\n    }\n']",Some;Unpooled;UTF;unreleasable;UTF;Wrapped;us;Asci;release;Bytes,2.3283064365386963e-09;1.4551915228366852e-09;1.1641532182693481e-09;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.311449058353901e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.984401226043701, -5.612977981567383, -4.6407670974731445, -5.801451206207275, -5.41920280456543, -0.023547176271677017]",0.9767280220985413
2,"['    @Test\n    public void testDecodeUsAscii() {\n        testDecodeString(""This is a test"", CharsetUtil.US_ASCII);\n    }\n']",Decode;ASCII;This;Us;Charset;Asci;US;Decode;Util,1.8917489796876907e-09;1.6298145055770874e-09;1.0477378964424133e-09;2.9103830456733704e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-6.984919309616089e-10;-8.149072527885437e-10,5,5,"[-6.0005645751953125, -5.639150142669678, -4.603198051452637, -5.886308670043945, -5.374477386474609, -0.02374323271214962]",0.9765363931655884
2,"['    @Test\n    public void testDecodeUtf8() {\n        testDecodeString(""Some UTF-8 like Ã¤Ã\x84â\x88\x8fÅ\x92Å\x92"", CharsetUtil.UTF_8);\n    }\n']",like;Ut;Decode;Decode;Ãĥ;Ã¢;Charset;UTF;Util;UTF,3.026798367500305e-09;1.6298145055770874e-09;1.7462298274040222e-10;5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-9.313225746154785e-10;-1.367880031466484e-09;-1.862645149230957e-09,5,5,"[-6.022508144378662, -5.623874187469482, -4.599287033081055, -5.846569538116455, -5.440009593963623, -0.02359863929450512]",0.9766775369644165
2,"['    @Test\n    public void testToStringDoesNotThrowIndexOutOfBounds() {\n        CompositeByteBuf buffer = Unpooled.compositeBuffer();\n        try {\n            byte[] bytes = ""1234"".getBytes(CharsetUtil.UTF_8);\n            buffer.addComponent(Unpooled.buffer(bytes.length).writeBytes(bytes));\n            buffer.addComponent(Unpooled.buffer(bytes.length).writeBytes(bytes));\n            assertEquals(""1234"", buffer.toString(bytes.length, bytes.length, CharsetUtil.UTF_8));\n        } finally {\n            buffer.release();\n        }\n    }\n']",Index;buffer;UTF;Composite;buffer;buffer;Throw;get;Bytes;Not,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.973893165588379, -5.55828857421875, -4.642584800720215, -5.804450988769531, -5.427147388458252, -0.023721346631646156]",0.9765577912330627
2,"['    @Test\n    public void testIsTextWithUtf8() {\n        byte[][] validUtf8Bytes = {\n                ""netty"".getBytes(CharsetUtil.UTF_8),\n                {(byte) 0x24},\n                {(byte) 0xC2, (byte) 0xA2},\n                {(byte) 0xE2, (byte) 0x82, (byte) 0xAC},\n                {(byte) 0xF0, (byte) 0x90, (byte) 0x8D, (byte) 0x88},\n                {(byte) 0x24,\n                        (byte) 0xC2, (byte) 0xA2,\n                        (byte) 0xE2, (byte) 0x82, (byte) 0xAC,\n                        (byte) 0xF0, (byte) 0x90, (byte) 0x8D, (byte) 0x88} // multiple characters\n        };\n        for (byte[] bytes : validUtf8Bytes) {\n            assertIsText(bytes, true, CharsetUtil.UTF_8);\n        }\n        byte[][] invalidUtf8Bytes = {\n                {(byte) 0x80},\n                {(byte) 0xF0, (byte) 0x82, (byte) 0x82, (byte) 0xAC}, // Overlong encodings\n                {(byte) 0xC2},                                        // not enough bytes\n                {(byte) 0xE2, (byte) 0x82},                           // not enough bytes\n                {(byte) 0xF0, (byte) 0x90, (byte) 0x8D},              // not enough bytes\n                {(byte) 0xC2, (byte) 0xC0},                           // not correct bytes\n                {(byte) 0xE2, (byte) 0x82, (byte) 0xC0},              // not correct bytes\n                {(byte) 0xF0, (byte) 0x90, (byte) 0x8D, (byte) 0xC0}, // not correct bytes\n                {(byte) 0xC1, (byte) 0x80},                           // out of lower bound\n                {(byte) 0xE0, (byte) 0x80, (byte) 0x80},              // out of lower bound\n                {(byte) 0xED, (byte) 0xAF, (byte) 0x80}               // out of upper bound\n        };\n        for (byte[] bytes : invalidUtf8Bytes) {\n            assertIsText(bytes, false, CharsetUtil.UTF_8);\n        }\n    }\n']",get;Text;byte;valid;UTF;valid;byte;Ut;Charset;Util,4.220055416226387e-10;3.637978807091713e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.910402774810791, -5.336053848266602, -4.656560897827148, -5.73427152633667, -5.509559631347656, -0.024606406688690186]",0.9756938815116882
2,"['    @Test\n    public void testIsTextWithoutOptimization() {\n        byte[] validBytes = {(byte) 0x01, (byte) 0xD8, (byte) 0x37, (byte) 0xDC};\n        byte[] invalidBytes = {(byte) 0x01, (byte) 0xD8};\n\n        assertIsText(validBytes, true, CharsetUtil.UTF_16LE);\n        assertIsText(invalidBytes, false, CharsetUtil.UTF_16LE);\n    }\n']",DC;Bytes;Charset;LE;Util;byte;Text;Text;byte;UTF,1.5133991837501526e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.943538188934326, -5.577386379241943, -4.658077716827393, -5.768332004547119, -5.401423454284668, -0.023806210607290268]",0.9764750599861145
2,"['    @Test\n    public void testIsTextWithAscii() {\n        byte[] validBytes = {(byte) 0x00, (byte) 0x01, (byte) 0x37, (byte) 0x7F};\n        byte[] invalidBytes = {(byte) 0x80, (byte) 0xFF};\n\n        assertIsText(validBytes, true, CharsetUtil.US_ASCII);\n        assertIsText(invalidBytes, false, CharsetUtil.US_ASCII);\n    }\n']",Asci;ASCII;byte;ASCII;byte;Util;valid;false;Bytes;byte,8.731149137020111e-10;8.003553375601768e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.977522850036621, -5.600929260253906, -4.63956356048584, -5.787199020385742, -5.42214298248291, -0.023653242737054825]",0.9766243100166321
2,"['    @Test\n    public void testIsTextWithInvalidIndexAndLength() {\n        ByteBuf buffer = Unpooled.buffer();\n        try {\n            buffer.writeBytes(new byte[4]);\n            int[][] validIndexLengthPairs = {\n                    {4, 0},\n                    {0, 4},\n                    {1, 3},\n            };\n            for (int[] pair : validIndexLengthPairs) {\n                assertTrue(ByteBufUtil.isText(buffer, pair[0], pair[1], CharsetUtil.US_ASCII));\n            }\n            int[][] invalidIndexLengthPairs = {\n                    {4, 1},\n                    {-1, 2},\n                    {3, -1},\n                    {3, -2},\n                    {5, 0},\n                    {1, 5},\n            };\n            for (int[] pair : invalidIndexLengthPairs) {\n                try {\n                    ByteBufUtil.isText(buffer, pair[0], pair[1], CharsetUtil.US_ASCII);\n                    fail(""Expected IndexOutOfBoundsException"");\n                } catch (IndexOutOfBoundsException e) {\n                    // expected\n                }\n            }\n        } finally {\n            buffer.release();\n        }\n    }\n']",ASCII;Index;write;buffer;valid;pair;US;Length;Length;pair,6.693881005048752e-10;5.238689482212067e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.3096723705530167e-10,5,5,"[-5.921210289001465, -5.3574419021606445, -4.654817581176758, -5.759411334991455, -5.506557464599609, -0.02441924251616001]",0.9758763909339905
2,"['    @Test\n    public void testUtf8Bytes() {\n        final String s = ""Some UTF-8 like Ã¤Ã\x84â\x88\x8fÅ\x92Å\x92"";\n        checkUtf8Bytes(s);\n    }\n']",Bytes;check;Ãĥ;Some;Ãĥ;Ut;final;Bytes;Ut;Ã¢,9.313225746154785e-10;5.820766091346741e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-4.656612873077393e-10;-1.1641532182693481e-09;-1.862645149230957e-09,5,5,"[-6.0501179695129395, -5.5723557472229, -4.575321197509766, -5.8761396408081055, -5.497526168823242, -0.023641832172870636]",0.9766354560852051
2,"['    @Test\n    public void testUtf8BytesWithSurrogates() {\n        final String s = ""a\\uD800\\uDC00b"";\n        checkUtf8Bytes(s);\n    }\n']",Surrogates;Ut;DC;final;check;Bytes;Bytes;Ut,2.6193447411060333e-09;1.2223608791828156e-09;9.313225746154785e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-9.313225746154785e-10;-1.6298145055770874e-09,5,5,"[-6.077674865722656, -5.6623406410217285, -4.583250045776367, -5.86586332321167, -5.445419788360596, -0.023412100970745087]",0.9768598079681396
2,"['    @Test\n    public void testUtf8BytesWithNonSurrogates3Bytes() {\n        final String s = ""a\\uE000b"";\n        checkUtf8Bytes(s);\n    }\n']",Bytes;Ut;Non;final;Bytes;Ut;check;Bytes;Surrogates,1.6298145055770874e-09;1.3969838619232178e-09;4.656612873077393e-10;2.3283064365386963e-10;0.0;-4.656612873077393e-10;-8.149072527885437e-10;-9.313225746154785e-10;-5.122274160385132e-09,5,5,"[-6.069864273071289, -5.635195255279541, -4.572422027587891, -5.8868536949157715, -5.456440448760986, -0.023533552885055542]",0.9767411947250366
2,"['    @Test\n    public void testUtf8BytesWithNonSurrogatesNonAscii() {\n        final char nonAscii = (char) 0x81;\n        final String s = ""a"" + nonAscii + ""b"";\n        checkUtf8Bytes(s);\n    }\n']",Asci;char;Bytes;Bytes;Non;final;final;Surrogates;non;Ut,8.149072527885437e-10;7.566995918750763e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.41970007866621e-10;2.0372681319713593e-10;0.0;-5.820766091346741e-11,5,5,"[-6.031312942504883, -5.594186782836914, -4.612254619598389, -5.845754623413086, -5.456057548522949, -0.023487325757741928]",0.9767863750457764
2,"['    @Test\n    public void testIsTextMultiThreaded() throws Throwable {\n        final ByteBuf buffer = Unpooled.copiedBuffer(""Hello, World!"", CharsetUtil.ISO_8859_1);\n\n        try {\n            final AtomicInteger counter = new AtomicInteger(60000);\n            final AtomicReference<Throwable> errorRef = new AtomicReference<Throwable>();\n            List<Thread> threads = new ArrayList<Thread>();\n            for (int i = 0; i < 10; i++) {\n                Thread thread = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        try {\n                            while (errorRef.get() == null && counter.decrementAndGet() > 0) {\n                                assertTrue(ByteBufUtil.isText(buffer, CharsetUtil.ISO_8859_1));\n                            }\n                        } catch (Throwable cause) {\n                            errorRef.compareAndSet(null, cause);\n                        }\n                    }\n']",Buffer;Byte;new;ISO;cause;uf;error;Atomic;Throwable;compare,4.3655745685100555e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.546585164964199e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1827872842550278e-10,5,5,"[-5.908806324005127, -5.175853252410889, -4.620689392089844, -5.770967960357666, -5.566166877746582, -0.025476504117250443]",0.974845290184021
2,"['    @Test(expected = IllegalReferenceCountException.class)\n    public void testRetainOverflow() {\n        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();\n        referenceCounted.setRefCnt(Integer.MAX_VALUE);\n        assertEquals(Integer.MAX_VALUE, referenceCounted.refCnt());\n        referenceCounted.retain();\n    }\n']",expected;uf;Counted;nt;reference;Counted;Byte;reference;Ref;Counted,2.0954757928848267e-09;1.1641532182693481e-09;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.006627082824707, -5.655984878540039, -4.603426456451416, -5.826345920562744, -5.4168291091918945, -0.023643694818019867]",0.976633608341217
2,"['    @Test(expected = IllegalReferenceCountException.class)\n    public void testRetainOverflow2() {\n        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();\n        assertEquals(1, referenceCounted.refCnt());\n        referenceCounted.retain(Integer.MAX_VALUE);\n    }\n']",Overflow;Counted;expected;Byte;Abstract;VALUE;Reference;new;Counted;nt,2.473825588822365e-09;1.3969838619232178e-09;1.280568540096283e-09;8.731149137020111e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-6.010631084442139, -5.633627414703369, -4.595244407653809, -5.839353084564209, -5.433836460113525, -0.02368316240608692]",0.9765951037406921
2,"['    @Test(expected = IllegalReferenceCountException.class)\n    public void testReleaseOverflow() {\n        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();\n        referenceCounted.setRefCnt(0);\n        assertEquals(0, referenceCounted.refCnt());\n        referenceCounted.release(Integer.MAX_VALUE);\n    }\n']",nt;nt;Ref;Counted;Reference;Reference;Equals;ref;reference;uf,1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.74978320300579e-10;9.313225746154785e-10;8.731149137020111e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.011043548583984, -5.679103851318359, -4.606500148773193, -5.826777458190918, -5.3982157707214355, -0.02360341139137745]",0.9766729474067688
2,"['    @Test\n    public void testReleaseErrorMessage() {\n        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();\n        assertTrue(referenceCounted.release());\n        try {\n            referenceCounted.release(1);\n            fail(""IllegalReferenceCountException didn\'t occur"");\n        } catch (IllegalReferenceCountException e) {\n            assertEquals(""refCnt: 0, decrement: 1"", e.getMessage());\n        }\n    }\n']",release;decrement;Reference;Reference;Exception;Byte;Counted;Illegal;Abstract;Illegal,1.1641532182693481e-09;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.456968210637569e-10;5.238689482212067e-10;4.0745362639427185e-10;2.9103830456733704e-10,5,5,"[-5.957624912261963, -5.588922500610352, -4.634274959564209, -5.80055570602417, -5.380991458892822, -0.02395193837583065]",0.9763326048851013
2,"['    @Test(expected = IllegalReferenceCountException.class)\n    public void testRetainResurrect() {\n        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();\n        assertTrue(referenceCounted.release());\n        assertEquals(0, referenceCounted.refCnt());\n        referenceCounted.retain();\n    }\n']",Resurrect;retain;Byte;expected;Counted;Exception;Counted;Retain;reference;Count,6.51925802230835e-09;3.259629011154175e-09;1.5425030142068863e-09;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;3.4924596548080444e-10;3.055902197957039e-10;2.3283064365386963e-10,5,5,"[-6.005627155303955, -5.653032302856445, -4.595719814300537, -5.844117641448975, -5.409693241119385, -0.02371564321219921]",0.9765634536743164
2,"['    @Test(expected = IllegalReferenceCountException.class)\n    public void testRetainResurrect2() {\n        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();\n        assertTrue(referenceCounted.release());\n        assertEquals(0, referenceCounted.refCnt());\n        referenceCounted.retain(2);\n    }\n']",expected;Retain;Reference;True;Counted;release;Illegal;retain;uf;nt,2.561137080192566e-09;1.6298145055770874e-09;8.149072527885437e-10;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.00651216506958, -5.656976699829102, -4.597463607788086, -5.840642929077148, -5.415253639221191, -0.02366616576910019]",0.9766116738319397
2,['    @Test\n    public void testCopyDirect() {\n        testCopy(true);\n    }\n'],Copy;true;Copy;Direct,2.3283064365386963e-09;2.3283064365386963e-10;-4.656612873077393e-10;-4.190951585769653e-09,5,5,"[-6.022628307342529, -5.611251354217529, -4.5305495262146, -5.916316509246826, -5.377220630645752, -0.024467170238494873]",0.9758297204971313
2,['        @Test\n                public void setRegisterDefaultExceptionMappers(Boolean registerDefaultExceptionMappers) {\n                    assertThat(registerDefaultExceptionMappers).isFalse();\n                }\n'],Boolean;Default;Default;set;Exception;False;register;appers;appers;That,1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.924985885620117, -5.449183464050293, -4.655518054962158, -5.791601657867432, -5.420753479003906, -0.02424926497042179]",0.9760425090789795
2,['        @Test\n                public Server build(Environment environment) {\n                    return null;\n                }\n'],Environment;environment;Server;null;return;build,1.1641532182693481e-09;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;-9.313225746154785e-10;-2.7939677238464355e-09,5,5,"[-5.950383186340332, -5.3707170486450195, -4.604956150054932, -5.819567680358887, -5.48609733581543, -0.02467246912419796]",0.9756292700767517
2,['        @Test\n                public void setRegisterDefaultExceptionMappers(Boolean registerDefaultExceptionMappers) {\n                    assertThat(registerDefaultExceptionMappers).isFalse();\n                }\n'],Boolean;Default;Default;set;Exception;False;register;appers;appers;That,1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.924985885620117, -5.449183464050293, -4.655518054962158, -5.791601657867432, -5.420753479003906, -0.02424926497042179]",0.9760425090789795
2,"['        @Test\n                public void setRegisterDefaultExceptionMappers(Boolean registerDefaultExceptionMappers) {\n                    throw new RuntimeException(""oops"");\n                }\n']",Boolean;Register;Runtime;Default;appers;register;throw;Exception;Exception;appers,2.6775524020195007e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.3969838619232178e-09;1.280568540096283e-09;1.280568540096283e-09;5.820766091346741e-10;3.4924596548080444e-10;1.1641532182693481e-10,5,5,"[-5.936263561248779, -5.43958854675293, -4.652832984924316, -5.801754951477051, -5.424948692321777, -0.024236582219600677]",0.9760547876358032
2,['        @Test\n                public void setRegisterDefaultExceptionMappers(Boolean registerDefaultExceptionMappers) {\n                    assertThat(registerDefaultExceptionMappers).isFalse();\n                }\n'],Boolean;Default;Default;set;Exception;False;register;appers;appers;That,1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.924985885620117, -5.449183464050293, -4.655518054962158, -5.791601657867432, -5.420753479003906, -0.02424926497042179]",0.9760425090789795
2,"['        @Test\n                public Connector build(Server server, MetricRegistry metricRegistry, String s, ThreadPool threadPool) {\n                    return null;\n                }\n']",build;thread;server;Registry;Thread;null;Server;return;metric;Registry,1.862645149230957e-09;1.0477378964424133e-09;6.984919309616089e-10;4.802132025361061e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-5.820766091346741e-10;-9.89530235528946e-10,5,5,"[-5.952052116394043, -5.420400619506836, -4.631997108459473, -5.790897846221924, -5.4682440757751465, -0.02432861551642418]",0.9759649634361267
2,"['        @Test\n                public Connector build(Server server, MetricRegistry metricRegistry, String s, ThreadPool threadPool) {\n                    return null;\n                }\n']",build;thread;server;Registry;Thread;null;Server;return;metric;Registry,1.862645149230957e-09;1.0477378964424133e-09;6.984919309616089e-10;4.802132025361061e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-5.820766091346741e-10;-9.89530235528946e-10,5,5,"[-5.952052116394043, -5.420400619506836, -4.631997108459473, -5.790897846221924, -5.4682440757751465, -0.02432861551642418]",0.9759649634361267
2,"['        @Test\n                public void handle(MonitoredJob job, Exception exception) {\n                    taskHandledCount.incrementAndGet();\n                }\n']",increment;Count;job;task;Get;Monitored;exception;Handled;Exception;handle,3.026798367500305e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;-6.984919309616089e-10;-7.566995918750763e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-5.951696872711182, -5.412856101989746, -4.63329553604126, -5.810622215270996, -5.47639799118042, -0.024254733696579933]",0.9760370254516602
2,"['        @Test\n                public void handle(MonitoredJob job, Exception exception) {\n                    throw new RuntimeException(""error handling error"");\n                }\n']",Monitored;job;error;Runtime;exception;error;handle;throw;Exception;new,2.7939677238464355e-09;1.6298145055770874e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;6.402842700481415e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.402842700481415e-10,5,5,"[-5.936794281005859, -5.423755168914795, -4.646953105926514, -5.812668323516846, -5.445931911468506, -0.024236349388957024]",0.9760549068450928
2,"['\t@Test\n\tpublic void readWrite() throws IOException {\n\t\tCandidateComponentsMetadata metadata = new CandidateComponentsMetadata();\n\t\tmetadata.add(createItem(""com.foo"", ""first"", ""second""));\n\t\tmetadata.add(createItem(""com.bar"", ""first""));\n\n\t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\t\tPropertiesMarshaller.write(metadata, outputStream);\n\t\tCandidateComponentsMetadata readMetadata = PropertiesMarshaller.read(\n\t\t\t\tnew ByteArrayInputStream(outputStream.toByteArray()));\n\t\tassertThat(readMetadata).has(Metadata.of(""com.foo"", ""first"", ""second""));\n\t\tassertThat(readMetadata).has(Metadata.of(""com.bar"", ""first""));\n\t\tassertThat(readMetadata.getItems()).hasSize(2);\n\t}\n']",foo;Components;read;Marshaller;Metadata;has;output;Candidate;bar;Size,9.313225746154785e-10;6.111804395914078e-10;5.529727786779404e-10;5.093170329928398e-10;4.2928149923682213e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.960704803466797, -5.675961494445801, -4.669059753417969, -5.7328948974609375, -5.3337907791137695, -0.023729262873530388]",0.9765500426292419
2,"['\t@Test\n\tpublic void metadataIsWrittenDeterministically() throws IOException {\n\t\tCandidateComponentsMetadata metadata = new CandidateComponentsMetadata();\n\t\tmetadata.add(createItem(""com.b"", ""type""));\n\t\tmetadata.add(createItem(""com.c"", ""type""));\n\t\tmetadata.add(createItem(""com.a"", ""type""));\n\n\t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\t\tPropertiesMarshaller.write(metadata, outputStream);\n\t\tString contents = new String(outputStream.toByteArray(), StandardCharsets.ISO_8859_1);\n\t\tassertThat(contents.split(System.lineSeparator())).containsExactly(""com.a=type"", ""com.b=type"", ""com.c=type"");\n\t}\n']",Marshaller;metadata;Components;Stream;create;metadata;split;Item;com;new,6.402842700481415e-10;5.820766091346741e-10;5.675246939063072e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10;2.4010660126805305e-10;2.3283064365386963e-10,5,5,"[-5.963525772094727, -5.659467697143555, -4.666696071624756, -5.7371745109558105, -5.351901054382324, -0.023700043559074402]",0.9765784740447998
2,"['\t@Test  // SPR-16103\n\t\tpublic void someMethod(Integer theArg, Object otherArg) {\n\t\t}\n']",SPR;Method;Arg;some;Object;other;Arg;the,4.6566128730773926e-09;1.3969838619232178e-09;1.3969838619232178e-09;0.0;-9.313225746154785e-10;-3.4924596548080444e-09;-4.773028194904327e-09;-5.122274160385132e-09,5,5,"[-6.104959487915039, -5.66528844833374, -4.495292663574219, -5.944911956787109, -5.443270683288574, -0.02408973127603531]",0.9761981964111328
2,"['\t@Test\n\t\tpublic ResolvableType getResolvableType() {\n\t\t\tif (this.type == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn ResolvableType.forClassWithGenerics(getClass(), this.type);\n\t\t}\n']",Generics;return;Class;Type;Type;null;Resolvable;type;Resolvable;Class,1.862645149230957e-09;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;-8.731149137020111e-11,5,5,"[-6.041973114013672, -5.620874881744385, -4.534649848937988, -5.887749671936035, -5.417727470397949, -0.024230647832155228]",0.9760605692863464
2,['\t@Test\n\tpublic void verifyEquals() throws Exception {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1.equals(null)).isFalse();\n\n\t\tassertThat(testClass1.equals(testClass1)).isTrue();\n\t\tassertThat(testClass2.equals(testClass2)).isTrue();\n\t\tassertThat(testClass1.equals(testClass2)).isTrue();\n\t\tassertThat(testClass2.equals(testClass1)).isTrue();\n\n\t\tassertThat(testMemberClass1.equals(testMemberClass1)).isTrue();\n\t\tassertThat(testMemberClass2.equals(testMemberClass2)).isTrue();\n\t\tassertThat(testMemberClass1.equals(testMemberClass2)).isTrue();\n\t\tassertThat(testMemberClass2.equals(testMemberClass1)).isTrue();\n\n\t\tassertThat(testClass1.equals(testMemberClass1)).isFalse();\n\t\tassertThat(testMemberClass1.equals(testClass1)).isFalse();\n\t}\n'],verify;Class;Annotation;Member;That;Exception;Member;Metadata;Class;class,9.313225746154785e-10;5.238689482212067e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.8477911949157715, -5.554139137268066, -4.671402931213379, -5.699309349060059, -5.311452865600586, -0.02470247447490692]",0.9756001234054565
2,['\t@Test\n\tpublic void verifyHashCode() throws Exception {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).hasSameHashCodeAs(testClass2);\n\t\tassertThat(testMemberClass1).hasSameHashCodeAs(testMemberClass2);\n\n\t\tassertThat(testClass1).doesNotHaveSameHashCodeAs(testMemberClass1);\n\t}\n'],Metadata;Have;get;Code;Hash;class;Same;Member;Member;class,6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.913225173950195, -5.625732898712158, -4.6527862548828125, -5.757994651794434, -5.317124843597412, -0.02419702149927616]",0.9760933518409729
2,['\t@Test\n\tpublic void verifyToString() throws Exception {\n\t\tassertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());\n\t}\n'],That;Class;verify;qual;class;class;get;Name;to;Exception,2.561137080192566e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-11;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-6.021564960479736, -5.721844673156738, -4.567692279815674, -5.862422943115234, -5.28954553604126, -0.024261830374598503]",0.9760301113128662
2,['\t@Test\n\tpublic void getClassNameReturnsClassName() {\n\t\tassertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());\n\t}\n'],Class;Name;Class;get;Class;Returns;Class;class;Class;Name,1.862645149230957e-09;1.5133991837501526e-09;8.149072527885437e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-6.016937255859375, -5.723926067352295, -4.568511486053467, -5.854604721069336, -5.281777858734131, -0.024320702999830246]",0.9759725332260132
2,['\t@Test\n\tpublic void isInterfaceWhenInterfaceReturnsTrue() {\n\t\tassertThat(get(TestInterface.class).isInterface()).isTrue();\n\t\tassertThat(get(TestAnnotation.class).isInterface()).isTrue();\n\t}\n'],That;Interface;get;That;Interface;True;Interface;class;class;Interface,2.444721758365631e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0,5,5,"[-5.9842376708984375, -5.696138381958008, -4.580548286437988, -5.837278366088867, -5.291231155395508, -0.024373289197683334]",0.9759213328361511
2,['\t@Test\n\tpublic void isInterfaceWhenNotInterfaceReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isInterface()).isFalse();\n\t}\n'],False;Not;Interface;That;Returns;Interface;Class;class;False;get,2.3283064365386963e-09;2.2118911147117615e-09;1.1641532182693481e-09;1.1641532182693481e-09;4.656612873077393e-10;0.0;-2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-6.009052276611328, -5.701066970825195, -4.551851272583008, -5.871457576751709, -5.294524192810059, -0.024481596425175667]",0.9758157730102539
2,['\t@Test\n\tpublic void isAnnotationWhenAnnotationReturnsTrue() {\n\t\tassertThat(get(TestAnnotation.class).isAnnotation()).isTrue();\n\t}\n'],Annotation;Returns;Annotation;When;get;That;Annotation;class;True;True,2.561137080192566e-09;6.984919309616089e-10;5.820766091346741e-10;2.3283064365386963e-10;2.3283064365386963e-10;-5.820766091346741e-11;-5.820766091346741e-11;-2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10,5,5,"[-5.973794460296631, -5.650257587432861, -4.572360515594482, -5.86803674697876, -5.302292823791504, -0.024501021951436996]",0.9757966995239258
2,['\t@Test\n\tpublic void isAnnotationWhenNotAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotation()).isFalse();\n\t\tassertThat(get(TestInterface.class).isAnnotation()).isFalse();\n\t}\n'],That;Class;Returns;get;Annotation;Annotation;Not;False;class;False,1.280568540096283e-09;9.313225746154785e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;0.0;0.0;0.0;-5.820766091346741e-11;-8.731149137020111e-11,5,5,"[-5.968639850616455, -5.677916526794434, -4.593393325805664, -5.834504127502441, -5.290583610534668, -0.02435479126870632]",0.9759393930435181
2,['\t@Test\n\tpublic void isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(get(TestFinalClass.class).isFinal()).isTrue();\n\t}\n'],When;Final;class;Class;Final;Final;True;get;True;That,2.3283064365386963e-09;1.280568540096283e-09;1.1641532182693481e-09;3.4924596548080444e-10;1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-4.656612873077393e-10;-1.0477378964424133e-09;-1.862645149230957e-09,5,5,"[-5.9994964599609375, -5.706096172332764, -4.554958343505859, -5.86583137512207, -5.2877888679504395, -0.02450602315366268]",0.9757918119430542
2,['\t@Test\n\tpublic void isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isFinal()).isFalse();\n\t}\n'],Returns;get;False;Final;Non;class;When;That;Class;Final,9.313225746154785e-10;9.313225746154785e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-6.011013507843018, -5.712205410003662, -4.554438591003418, -5.869863033294678, -5.2954511642456055, -0.024410517886281013]",0.9758850336074829
2,['\t@Test\n\tpublic void isIndependentWhenIndependentReturnsTrue() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();\n\t\tassertThat(get(TestClass.class).isIndependent()).isTrue();\n\t}\n'],When;Independent;get;Metadata;True;True;class;Class;class;Independent,2.561137080192566e-09;1.0477378964424133e-09;9.313225746154785e-10;2.9103830456733704e-10;1.1641532182693481e-10;5.820766091346741e-11;5.820766091346741e-11;5.820766091346741e-11;-8.731149137020111e-11;-1.1641532182693481e-10,5,5,"[-5.98665189743042, -5.685251712799072, -4.585177421569824, -5.835370063781738, -5.312918663024902, -0.024251243099570274]",0.9760404825210571
2,['\t@Test\n\tpublic void isIndependentWhenNotIndependentReturnsFalse() {\n\t\tassertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\n\t}\n'],That;False;Independent;class;False;Returns;Independent;Static;Not;get,8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0;0.0;-4.656612873077393e-10;-6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-6.013808250427246, -5.682386875152588, -4.547126293182373, -5.883455276489258, -5.332993030548096, -0.024356769397854805]",0.9759374856948853
2,['\t@Test\n\tpublic void getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\n\t\tassertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(\n\t\t\t\tAbstractAnnotationMetadataTests.class.getName());\n\t}\n'],Enclosing;class;Metadata;Annotation;Class;get;qual;Class;get;Name,1.4260876923799515e-09;1.0477378964424133e-09;9.313225746154785e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.993409633636475, -5.656937122344971, -4.568482398986816, -5.8602447509765625, -5.336825370788574, -0.024316979572176933]",0.975976288318634
2,['\t@Test\n\tpublic void getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\n\t}\n'],Annotation;Metadata;ests;get;Enclosing;When;Class;Enclosing;class;get,2.4156179279088974e-09;2.3283064365386963e-09;2.0954757928848267e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-6.000966548919678, -5.650132179260254, -4.550714015960693, -5.881278038024902, -5.3463873863220215, -0.02440504916012287]",0.9758903384208679
2,['\t@Test\n\tpublic void getSuperClassNameWhenHasSuperClassReturnsName() {\n\t\tassertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\n\t\tassertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\n\t}\n'],get;That;Name;Super;Has;get;Super;Object;That;Class,9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.953086853027344, -5.717953205108643, -4.6184916496276855, -5.774539470672607, -5.238555431365967, -0.024462169036269188]",0.9758344888687134
2,['\t@Test\n\tpublic void getSuperClassNameWhenHasNoSuperClassReturnsNull() {\n\t\tassertThat(get(Object.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestInterface.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\n\t}\n'],Interface;When;Has;get;class;get;get;Name;Class;get,9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.973456382751465, -5.727750301361084, -4.607689380645752, -5.796814918518066, -5.268693923950195, -0.02425391972064972]",0.976037859916687
2,['\t@Test\n\tpublic void getInterfaceNamesWhenHasInterfacesReturnsNames() {\n\t\tassertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t\tassertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t}\n'],Interface;That;Names;Name;When;contains;Has;contains;class;Returns,1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.9568986892700195, -5.706982612609863, -4.641858100891113, -5.774059295654297, -5.259639739990234, -0.024143727496266365]",0.9761452674865723
2,['\t@Test\n\tpublic void getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\n\t}\n'],Interfaces;Interface;Has;That;Array;Names;get;get;Interface;class,2.3283064365386963e-09;1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.025838375091553, -5.667133808135986, -4.543803691864014, -5.877651691436768, -5.324325084686279, -0.02447636052966118]",0.9758208990097046
2,"['\t@Test\n\tpublic void getMemberClassNamesWhenHasMemberClassesReturnsNames() {\n\t\tassertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(\n\t\t\tTestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\n\t}\n']",Member;get;get;Order;Class;Class;Interface;class;Any;In,1.280568540096283e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.992945671081543, -5.676571369171143, -4.587560176849365, -5.8516716957092285, -5.319159030914307, -0.0241607166826725]",0.9761288166046143
2,['\t@Test\n\tpublic void getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\n\t}\n'],Names;Member;Array;Class;Class;That;Names;Empty;class;No,1.6298145055770874e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;5.820766091346741e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-6.025282382965088, -5.703223705291748, -4.548395156860352, -5.881561756134033, -5.307125568389893, -0.024377478286623955]",0.9759171605110168
2,"['\t@Test\n\tpublic void getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThat(get(WithDirectAnnotations.class).getAnnotations().stream())\n\t\t\t.filteredOn(MergedAnnotation::isDirectlyPresent)\n\t\t\t.extracting(a -> a.getType().getName())\n\t\t\t.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n']",filtered;On;Type;Annotation;class;get;Name;Annotations;Name;class,9.89530235528946e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-6.014878749847412, -5.606861591339111, -4.589452266693115, -5.860235691070557, -5.414119243621826, -0.023859405890107155]",0.9764229655265808
2,['\t@Test\n\tpublic void isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\n\t}\n'],An;When;Returns;Direct;ated;ated;Direct;An;Annotation;True,1.5133991837501526e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1059455573558807e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.998348236083984, -5.696541786193848, -4.575201988220215, -5.863941192626953, -5.309262752532959, -0.02422122284770012]",0.9760697484016418
2,['\t@Test\n\tpublic void isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\n\t}\n'],That;ated;Annotation;Annotation;Meta;ated;get;Returns;True;An,3.14321368932724e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;4.0745362639427185e-10;3.4924596548080444e-10;1.4551915228366852e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.998377323150635, -5.694655418395996, -4.567216396331787, -5.862903594970703, -5.30598258972168, -0.024331873282790184]",0.9759616255760193
2,['\t@Test\n\tpublic void isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\n\t}\n'],Not;That;Annotation;When;Annotation;get;Meta;Returns;ated;class,1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.996841907501221, -5.714657783508301, -4.5702900886535645, -5.865672588348389, -5.286638259887695, -0.024326171725988388]",0.9759673476219177
2,"['\t@Test\n\tpublic void getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))\n\t\t\t.containsOnly(entry(""name"", ""test""), entry(""size"", 1));\n\t}\n']",That;entry;Attributes;size;Returns;Annotation;Annotation;class;entry;get,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-6.006308078765869, -5.66746187210083, -4.599488258361816, -5.834994316101074, -5.34520149230957, -0.023955779150128365]",0.9763287901878357
2,"['\t@Test\n\tpublic void getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes =\n\t\t\t\tget(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(""name"", ""size"");\n\t\tassertThat(attributes.get(""name"")).containsExactlyInAnyOrder(""m1"", ""m2"");\n\t\tassertThat(attributes.get(""size"")).containsExactlyInAnyOrder(1, 2);\n\t}\n']",Annotation;Annotation;Attributes;attributes;Order;Keys;get;class;Attributes;That,1.862645149230957e-09;1.4551915228366852e-09;9.89530235528946e-10;8.731149137020111e-10;7.130438461899757e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.970381736755371, -5.6659746170043945, -4.650450706481934, -5.762017250061035, -5.3544416427612305, -0.02372344210743904]",0.9765557646751404
2,"['\t@Test\n\tpublic void getAnnotationTypesReturnsDirectAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithDirectAnnotations.class);\n\t\tassertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(\n\t\t\t\tDirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n']",Annotations;Annotation;Annotation;That;get;Direct;In;get;contains;Name,1.6880221664905548e-09;1.6589183360338211e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.000606536865234, -5.636376857757568, -4.587325096130371, -5.859891414642334, -5.390280723571777, -0.02391911670565605]",0.9763646721839905
2,"['\t@Test\n\tpublic void getMetaAnnotationTypesReturnsMetaAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithMetaAnnotations.class);\n\t\tassertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))\n\t\t\t.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());\n\t}\n']",Types;That;contains;Annotations;Annotation;Meta;Root;get;Meta;class,1.2223608791828156e-09;1.1641532182693481e-09;1.0913936421275139e-09;7.8580342233181e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.976593017578125, -5.6318511962890625, -4.611416339874268, -5.828391075134277, -5.366474628448486, -0.023955196142196655]",0.9763294458389282
2,['\t@Test\n\tpublic void hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();\n\t}\n'],When;Annotation;True;Annotation;class;Returns;get;True;That;Annotation,1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.011570930480957, -5.684085845947266, -4.561283111572266, -5.880868911743164, -5.335325241088867, -0.024199698120355606]",0.9760907888412476
2,['\t@Test\n\tpublic void hasAnnotationWhenMatchesMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation2.class.getName())).isFalse();\n\t}\n'],False;That;Annotation;Matches;Annotations;False;Meta;That;get;False,1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.693881005048752e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.953321933746338, -5.697608947753906, -4.6142096519470215, -5.795045852661133, -5.2731428146362305, -0.024324774742126465]",0.9759687781333923
2,['\t@Test\n\tpublic void hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n'],Returns;That;Class;Annotation;Direct;Direct;has;Or;class;Match,1.7462298274040222e-09;1.280568540096283e-09;1.1641532182693481e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.000056266784668, -5.703140735626221, -4.56279182434082, -5.872585296630859, -5.297520637512207, -0.024360841140151024]",0.9759334921836853
2,['\t@Test\n\tpublic void hasMetaAnnotationWhenMatchesDirectReturnsFalse() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n'],Annotation;Meta;Annotation;False;Direct;get;Direct;That;Meta;has,1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-6.019381523132324, -5.716535568237305, -4.562233924865723, -5.872742652893066, -5.317485332489014, -0.024170955643057823]",0.976118803024292
2,['\t@Test\n\tpublic void hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();\n\t}\n'],True;has;That;Annotation;Annotation;get;Annotation;Name;Annotation;Annotation,5.587935447692871e-09;3.725290298461914e-09;3.259629011154175e-09;2.7939677238464355e-09;1.8044374883174896e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.280568540096283e-09;1.280568540096283e-09,5,5,"[-5.954928398132324, -5.680224418640137, -4.611892223358154, -5.802221775054932, -5.28779411315918, -0.02430557832121849]",0.975987434387207
2,['\t@Test\n\tpublic void hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t}\n'],Direct;Match;Returns;False;Annotation;Meta;Meta;Does;False;has,2.9685907065868378e-09;2.444721758365631e-09;1.7462298274040222e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.99522066116333, -5.703412055969238, -4.5629730224609375, -5.8680291175842285, -5.293816566467285, -0.024402489885687828]",0.9758928418159485
2,['\t@Test\n\tpublic void hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();\n\t}\n'],True;Methods;Methods;has;Method;An;Name;True;ated;Annotation,1.1059455573558807e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.004996299743652, -5.662625789642334, -4.556807041168213, -5.880293369293213, -5.340310573577881, -0.02431686408817768]",0.9759764075279236
2,['\t@Test\n\tpublic void hasAnnotatedMethodsWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isTrue();\n\t}\n'],Annotation;An;ated;ated;An;Methods;Method;When;get;True,1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9987897872924805, -5.66775369644165, -4.556404113769531, -5.877974510192871, -5.329360485076904, -0.02437957189977169]",0.9759151935577393
2,['\t@Test\n\tpublic void hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();\n\t\tassertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();\n\t}\n'],That;That;An;False;Direct;class;False;class;Name;has,1.6298145055770874e-09;1.280568540096283e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.184563972055912e-10;5.820766091346741e-10,5,5,"[-5.959048748016357, -5.673896789550781, -4.604685306549072, -5.811457633972168, -5.3032612800598145, -0.024282541126012802]",0.9760099053382874
2,"['\t@Test\n\tpublic void getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {\n\t\tassertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))\n\t\t\t.extracting(MethodMetadata::getMethodName)\n\t\t\t.containsExactlyInAnyOrder(""direct"", ""meta"");\n\t}\n']",extracting;meta;direct;Any;Returns;An;Exactly;In;Metadata;Meta,1.1641532182693481e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-6.003832817077637, -5.62232780456543, -4.598055362701416, -5.847917079925537, -5.390100479125977, -0.02388733997941017]",0.9763957262039185
2,"['\t\tpublic void doWork(@TestQualifier(""myColor"") java.awt.Color color) {\n\t\tpublic void doSleep() {\n\t\t}\n']",my;Sleep;do;java;Color;color;aw;do;Qualifier;Color,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;0.0;0.0;-1.1641532182693481e-09;-1.862645149230957e-09;-1.862645149230957e-09;-3.725290298461914e-09,5,5,"[-5.9740681648254395, -5.4440789222717285, -4.5700788497924805, -5.905497074127197, -5.418801784515381, -0.02468177303671837]",0.9756203293800354
2,['\t@Test\n\tpublic void verifyEquals() throws Exception {\n\t\tMethodMetadata withMethod1 = getTagged(WithMethod.class);\n\t\tMethodMetadata withMethod2 = getTagged(WithMethod.class);\n\t\tMethodMetadata withMethodWithTwoArguments1 = getTagged(WithMethodWithTwoArguments.class);\n\t\tMethodMetadata withMethodWithTwoArguments2 = getTagged(WithMethodWithTwoArguments.class);\n\n\t\tassertThat(withMethod1.equals(null)).isFalse();\n\n\t\tassertThat(withMethod1.equals(withMethod1)).isTrue();\n\t\tassertThat(withMethod2.equals(withMethod2)).isTrue();\n\t\tassertThat(withMethod1.equals(withMethod2)).isTrue();\n\t\tassertThat(withMethod2.equals(withMethod1)).isTrue();\n\n\t\tassertThat(withMethodWithTwoArguments1.equals(withMethodWithTwoArguments1)).isTrue();\n\t\tassertThat(withMethodWithTwoArguments2.equals(withMethodWithTwoArguments2)).isTrue();\n\t\tassertThat(withMethodWithTwoArguments1.equals(withMethodWithTwoArguments2)).isTrue();\n\t\tassertThat(withMethodWithTwoArguments2.equals(withMethodWithTwoArguments1)).isTrue();\n\n\t\tassertThat(withMethod1.equals(withMethodWithTwoArguments1)).isFalse();\n\t\tassertThat(withMethodWithTwoArguments1.equals(withMethod1)).isFalse();\n\t}\n'],with;Method;with;with;Method;That;agged;with;equals;Equals,6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.848477840423584, -5.555840969085693, -4.68928337097168, -5.671559810638428, -5.30029821395874, -0.024676889181137085]",0.9756249785423279
2,['\t@Test\n\tpublic void verifyHashCode() throws Exception {\n\t\tMethodMetadata withMethod1 = getTagged(WithMethod.class);\n\t\tMethodMetadata withMethod2 = getTagged(WithMethod.class);\n\t\tMethodMetadata withMethodWithTwoArguments1 = getTagged(WithMethodWithTwoArguments.class);\n\t\tMethodMetadata withMethodWithTwoArguments2 = getTagged(WithMethodWithTwoArguments.class);\n\n\t\tassertThat(withMethod1).hasSameHashCodeAs(withMethod2);\n\t\tassertThat(withMethodWithTwoArguments1).hasSameHashCodeAs(withMethodWithTwoArguments2);\n\n\t\tassertThat(withMethod1).doesNotHaveSameHashCodeAs(withMethodWithTwoArguments1);\n\t}\n'],Method;with;Metadata;with;Arguments;with;Arguments;has;That;Two,1.57160684466362e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;7.421476766467094e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.905480861663818, -5.6402268409729, -4.667494297027588, -5.727437496185303, -5.284408092498779, -0.024290453642606735]",0.9760021567344666
2,"['\t@Test\n\tpublic void verifyToString() throws Exception {\n\t\tassertThat(getTagged(WithMethod.class).toString())\n\t\t\t.endsWith(WithMethod.class.getName() + "".test()"");\n\n\t\tassertThat(getTagged(WithMethodWithOneArgument.class).toString())\n\t\t\t.endsWith(WithMethodWithOneArgument.class.getName() + "".test(java.lang.String)"");\n\n\t\tassertThat(getTagged(WithMethodWithTwoArguments.class).toString())\n\t\t\t.endsWith(WithMethodWithTwoArguments.class.getName() + "".test(java.lang.String,java.lang.Integer)"");\n\t}\n']",ends;Arguments;lang;Method;ends;verify;Arguments;That;get;get,1.0477378964424133e-09;8.440110832452774e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.546585164964199e-10;2.3283064365386963e-10,5,5,"[-5.9334259033203125, -5.670413017272949, -4.665310382843018, -5.763442039489746, -5.280676364898682, -0.02402782067656517]",0.9762585759162903
2,"['\t@Test\n\tpublic void getMethodNameReturnsMethodName() {\n\t\tassertThat(getTagged(WithMethod.class).getMethodName()).isEqualTo(""test"");\n\t}\n']",agged;That;Method;Method;get;Returns;qual;get;Name;get,1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;0.0;-3.4924596548080444e-10;-4.0745362639427185e-10;-4.656612873077393e-10,5,5,"[-6.020852088928223, -5.709278583526611, -4.550806045532227, -5.871721267700195, -5.303725242614746, -0.024387367069721222]",0.9759076237678528
2,['\t@Test\n\tpublic void getDeclaringClassReturnsDeclaringClass() {\n\t\tassertThat(getTagged(WithMethod.class).getDeclaringClassName()).isEqualTo(\n\t\t\t\tWithMethod.class.getName());\n\t}\n'],Declaring;agged;Name;Name;get;Returns;Class;get;get;Declaring,2.3865140974521637e-09;1.3969838619232178e-09;1.1059455573558807e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;4.3655745685100555e-10;4.0745362639427185e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-6.040226459503174, -5.679788589477539, -4.530013561248779, -5.894669532775879, -5.347615718841553, -0.02438422664999962]",0.9759105443954468
2,['\t@Test\n\tpublic void getReturnTypeReturnsReturnType() {\n\t\tassertThat(getTagged(WithMethod.class).getReturnTypeName()).isEqualTo(\n\t\t\t\tString.class.getName());\n\t}\n'],Return;Type;agged;get;Type;Return;Return;get;Name;qual,2.444721758365631e-09;1.862645149230957e-09;1.5133991837501526e-09;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;8.731149137020111e-11,5,5,"[-6.052748680114746, -5.656435012817383, -4.510253429412842, -5.907866954803467, -5.393349647521973, -0.02440202608704567]",0.9758933186531067
2,['\t@Test\n\tpublic void isAbstractWhenAbstractReturnsTrue() {\n\t\tassertThat(getTagged(WithAbstractMethod.class).isAbstract()).isTrue();\n\t}\n'],Abstract;That;Abstract;True;Method;Abstract;True;When;class;get,2.561137080192566e-09;2.3283064365386963e-09;1.3969838619232178e-09;2.3283064365386963e-10;0.0;0.0;-3.4924596548080444e-10;-5.820766091346741e-10;-6.402842700481415e-10;-6.984919309616089e-10,5,5,"[-6.000289440155029, -5.659577369689941, -4.536566257476807, -5.8728437423706055, -5.3094563484191895, -0.024735039100050926]",0.9755683541297913
2,['\t@Test\n\tpublic void isAbstractWhenNotAbstractReturnsFalse() {\n\t\tassertThat(getTagged(WithMethod.class).isAbstract()).isFalse();\n\t}\n'],When;Abstract;Abstract;agged;Method;Not;Returns;Abstract;class;False,2.7939677238464355e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-6.013186931610107, -5.676207542419434, -4.529000759124756, -5.881046772003174, -5.315115451812744, -0.02467479556798935]",0.9756271243095398
2,['\t@Test\n\tpublic void isStatusWhenStaticReturnsTrue() {\n\t\tassertThat(getTagged(WithStaticMethod.class).isStatic()).isTrue();\n\t}\n'],When;Static;True;Status;Static;True;Method;agged;class;get,2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.3969838619232178e-09;9.022187441587448e-10;6.984919309616089e-10;3.4924596548080444e-10;0.0;-1.7462298274040222e-10;-4.656612873077393e-10,5,5,"[-6.029789924621582, -5.685855865478516, -4.5038933753967285, -5.899901390075684, -5.320102214813232, -0.02480260469019413]",0.9755025506019592
2,['\t@Test\n\tpublic void isStaticWhenNotStaticReturnsFalse() {\n\t\tassertThat(getTagged(WithMethod.class).isStatic()).isFalse();\n\t}\n'],Static;Method;Static;Static;When;False;That;class;False;get,1.862645149230957e-09;1.862645149230957e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-11;-4.656612873077393e-10,5,5,"[-6.033341407775879, -5.682776927947998, -4.503621578216553, -5.901327133178711, -5.33157205581665, -0.02474643476307392]",0.9755573868751526
2,['\t@Test\n\tpublic void isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(getTagged(WithFinalMethod.class).isFinal()).isTrue();\n\t}\n'],get;Returns;Final;Method;Final;True;Final;Final;When;class,1.9208528101444244e-09;1.6298145055770874e-09;1.1641532182693481e-09;5.820766091346741e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-8.149072527885437e-10;-8.731149137020111e-10;-1.1641532182693481e-09;-1.1641532182693481e-09,5,5,"[-6.01453161239624, -5.693571090698242, -4.540040969848633, -5.879954814910889, -5.310546398162842, -0.024515679106116295]",0.9757823944091797
2,['\t@Test\n\tpublic void isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(getTagged(WithMethod.class).isFinal()).isFalse();\n\t}\n'],agged;Non;Method;That;Returns;Final;False;Final;get;Final,3.026798367500305e-09;2.444721758365631e-09;1.862645149230957e-09;1.6298145055770874e-09;6.984919309616089e-10;5.820766091346741e-10;0.0;-2.9103830456733704e-10;-3.4924596548080444e-10;-6.984919309616089e-10,5,5,"[-6.024972915649414, -5.700799465179443, -4.542292594909668, -5.884598731994629, -5.324187755584717, -0.024358399212360382]",0.9759358763694763
2,['\t@Test\n\tpublic void isOverridableWhenOverridableReturnsTrue() {\n\t\tassertThat(getTagged(WithMethod.class).isOverridable()).isTrue();\n\t}\n'],True;Method;Overridable;Returns;When;class;Overridable;get;True;agged,1.862645149230957e-09;1.7462298274040222e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;3.637978807091713e-10;-7.275957614183426e-11;-1.7462298274040222e-10;-2.3283064365386963e-10;-1.862645149230957e-09,5,5,"[-6.040558338165283, -5.6739654541015625, -4.536574363708496, -5.900134563446045, -5.3729634284973145, -0.024194344878196716]",0.9760960936546326
2,['\t@Test\n\tpublic void isOverridableWhenNonOverridableReturnsFalse() {\n\t\tassertThat(getTagged(WithStaticMethod.class).isOverridable()).isFalse();\n\t\tassertThat(getTagged(WithFinalMethod.class).isOverridable()).isFalse();\n\t\tassertThat(getTagged(WithPrivateMethod.class).isOverridable()).isFalse();\n\t}\n'],Returns;agged;Overridable;Method;Final;Overridable;Static;class;agged;Private,9.313225746154785e-10;9.313225746154785e-10;7.421476766467094e-10;6.984919309616089e-10;6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.982027053833008, -5.717700004577637, -4.616687774658203, -5.8020429611206055, -5.301753044128418, -0.02398603968322277]",0.9762993454933167
2,"['\t@Test\n\tpublic void getAnnotationsReturnsDirectAnnotations() {\n\t\tMethodMetadata metadata = getTagged(WithDirectAnnotation.class);\n\t\tassertThat(metadata.getAnnotations().stream().filter(\n\t\t\t\tMergedAnnotation::isDirectlyPresent).map(\n\t\t\t\t\t\ta -> a.getType().getName())).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\t\tTag.class.getName(),\n\t\t\t\t\t\t\t\tDirectAnnotation.class.getName());\n\t}\n']",map;Any;Annotation;get;Name;Tag;Direct;Order;metadata;class,2.0954757928848267e-09;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.92901711165905e-10,5,5,"[-6.029470443725586, -5.5168776512146, -4.570296287536621, -5.892240047454834, -5.487692832946777, -0.023962995037436485]",0.976321816444397
2,['\t@Test\n\tpublic void isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(getTagged(WithDirectAnnotation.class).isAnnotated(\n\t\t\t\tDirectAnnotation.class.getName())).isTrue();\n\t}\n'],When;That;class;class;Annotation;get;True;An;Name;Matches,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;1.7462298274040222e-10;2.9103830456733704e-11;0.0,5,5,"[-6.007239818572998, -5.655638694763184, -4.559466361999512, -5.8780694007873535, -5.3515424728393555, -0.024259155616164207]",0.9760327339172363
2,['\t@Test\n\tpublic void isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(getTagged(WithMetaAnnotation.class).isAnnotated(\n\t\t\t\tDirectAnnotation.class.getName())).isTrue();\n\t}\n'],Annotation;Meta;ated;Direct;class;ated;get;Annotation;When;True,1.4551915228366852e-09;1.3969838619232178e-09;1.280568540096283e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-6.013276100158691, -5.64581298828125, -4.549195766448975, -5.8834004402160645, -5.3636016845703125, -0.024316631257534027]",0.9759766459465027
2,['\t@Test\n\tpublic void isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(getTagged(WithMethod.class).isAnnotated(\n\t\t\t\tDirectAnnotation.class.getName())).isFalse();\n\t}\n'],That;Annotation;agged;Meta;False;Name;Not;get;Direct;Does,2.0954757928848267e-09;1.5133991837501526e-09;1.4551915228366852e-09;1.0477378964424133e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;1.7462298274040222e-10;8.731149137020111e-11;0.0,5,5,"[-6.024681091308594, -5.653375148773193, -4.535125255584717, -5.900057315826416, -5.373744487762451, -0.024318842217326164]",0.9759745001792908
2,"['\t@Test\n\tpublic void getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(getTagged(WithAnnotationAttributes.class).getAnnotationAttributes(\n\t\t\t\tAnnotationAttributes.class.getName())).containsOnly(entry(""name"", ""test""),\n\t\t\t\t\t\tentry(""size"", 1));\n\t}\n']",Returns;Annotation;entry;Attributes;Name;agged;That;Attributes;class;entry,1.862645149230957e-09;9.313225746154785e-10;7.566995918750763e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-6.009578227996826, -5.6373162269592285, -4.582825183868408, -5.859442234039307, -5.374527931213379, -0.024015484377741814]",0.9762706160545349
2,"['\t@Test\n\tpublic void getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes = getTagged(\n\t\t\t\tWithMetaAnnotationAttributes.class).getAllAnnotationAttributes(\n\t\t\t\t\t\tAnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(""name"", ""size"");\n\t\tassertThat(attributes.get(""name"")).containsExactlyInAnyOrder(""m1"", ""m2"");\n\t\tassertThat(attributes.get(""size"")).containsExactlyInAnyOrder(1, 2);\n\t}\n']",That;That;That;get;Attributes;Annotation;Attributes;attributes;All;Order,9.313225746154785e-10;8.149072527885437e-10;7.8580342233181e-10;7.566995918750763e-10;7.566995918750763e-10;6.83940015733242e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.981140613555908, -5.644289493560791, -4.632688045501709, -5.796258926391602, -5.380142688751221, -0.023717273026704788]",0.9765617847442627
2,['\t@Test // gh-24375\n\tpublic void metadataLoadsForNestedAnnotations() {\n\t\tAnnotationMetadata annotationMetadata = get(AnnotatedComponent.class);\n\t\tassertThat(annotationMetadata.getAnnotationTypes()).containsExactly(EnclosingAnnotation.class.getName());\n\t}\n'],gh;For;Enclosing;Component;Exactly;Annotation;That;get;Annotation;Load,3.14321368932724e-09;1.1059455573558807e-09;1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-6.029131889343262, -5.642934799194336, -4.559405326843262, -5.864727973937988, -5.413323879241943, -0.02399860881268978]",0.9762870669364929
2,"['\t@Test\n\t\t\tpublic AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n\t\t\t\treturn MergedAnnotationReadingVisitor.get(getClass().getClassLoader(),\n\t\t\t\t\t\tnull, descriptor, visible,\n\t\t\t\t\t\tannotation -> MergedAnnotationMetadataVisitorTests.this.annotation = annotation);\n\t\t\t}\n']",Visitor;Annotation;Reading;visible;Class;annotation;descriptor;Annotation;Loader;Merged,1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.969660758972168, -5.507227897644043, -4.589722633361816, -5.874111652374268, -5.42983865737915, -0.02425508201122284]",0.9760368466377258
2,['\t@Test\n\tpublic void verifyEquals() throws Exception {\n\t}\n'],Equals;verify;Exception,4.656612873077393e-10;-3.4924596548080444e-10;-1.280568540096283e-09,5,5,"[-6.03367280960083, -5.693823337554932, -4.495349407196045, -5.8973283767700195, -5.2733564376831055, -0.025110024958848953]",0.975202739238739
2,['\t@Test\n\tpublic void verifyHashCode() throws Exception {\n\t}\n'],Exception;verify;Hash;Code,1.2223608791828156e-09;9.313225746154785e-10;-9.313225746154785e-10;-2.7939677238464355e-09,5,5,"[-6.055466175079346, -5.682003974914551, -4.486901760101318, -5.910170555114746, -5.304725646972656, -0.024996789172291756]",0.9753130674362183
2,['\t@Test\n\tpublic void verifyToString() {\n\t}\n'],verify,-2.0954757928848267e-09,5,5,"[-6.064815521240234, -5.703301429748535, -4.475447177886963, -5.904818534851074, -5.290953159332275, -0.025119325146079063]",0.9751935601234436
2,['\t@Test\n\tpublic void getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t.isThrownBy(super::getAnnotationsReturnsDirectAnnotations);\n\t}\n'],Unsupported;Returns;Exception;Type;Thrown;class;Annotations;get;Direct;Annotations,2.6193447411060333e-09;9.313225746154785e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;-1.7462298274040222e-10;-2.0372681319713593e-10;-2.3283064365386963e-10;-2.6193447411060333e-10;-2.6193447411060333e-10,5,5,"[-6.009166717529297, -5.633483409881592, -4.562123775482178, -5.8763508796691895, -5.368024826049805, -0.024231579154729843]",0.9760595560073853
2,['\t@Test\n\tpublic void verifyEquals() throws Exception {\n\t}\n'],Equals;verify;Exception,4.656612873077393e-10;-3.4924596548080444e-10;-1.280568540096283e-09,5,5,"[-6.03367280960083, -5.693823337554932, -4.495349407196045, -5.8973283767700195, -5.2733564376831055, -0.025110024958848953]",0.975202739238739
2,['\t@Test\n\tpublic void verifyHashCode() throws Exception {\n\t}\n'],Exception;verify;Hash;Code,1.2223608791828156e-09;9.313225746154785e-10;-9.313225746154785e-10;-2.7939677238464355e-09,5,5,"[-6.055466175079346, -5.682003974914551, -4.486901760101318, -5.910170555114746, -5.304725646972656, -0.024996789172291756]",0.9753130674362183
2,['\t@Test\n\tpublic void verifyToString() {\n\t}\n'],verify,-2.0954757928848267e-09,5,5,"[-6.064815521240234, -5.703301429748535, -4.475447177886963, -5.904818534851074, -5.290953159332275, -0.025119325146079063]",0.9751935601234436
2,['\t@Test\n\tpublic void getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(\n\t\t\t\tsuper::getAnnotationsReturnsDirectAnnotations);\n\t}\n'],Returns;Unsupported;Thrown;Exception;Type;Annotations;class;Annotations;By;get,1.3969838619232178e-09;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;2.6193447411060333e-10;5.820766091346741e-11;0.0,5,5,"[-6.0216264724731445, -5.628925800323486, -4.556297302246094, -5.888740539550781, -5.388762474060059, -0.02414628677070141]",0.9761428833007812
2,['\t@Test\n\t\t\t\tpublic boolean equals(Object obj) {\n\t\t\t\t\treturn (obj == this);\n\t\t\t\t}\n'],equals;boolean;return;this;obj;obj;Object,1.4551915228366852e-09;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-6.062837600708008, -5.633610248565674, -4.508105278015137, -5.902515411376953, -5.425177097320557, -0.024353861808776855]",0.9759404063224792
2,['\t@Test\n\t\tpublic void subscribe(CoreSubscriber<? super T> actual) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n'],Core;Exception;actual;Operation;throw;super;new;Unsupported;Subscriber;subscribe,1.862645149230957e-09;1.3969838619232178e-09;0.0;0.0;-1.1641532182693481e-10;-5.820766091346741e-10;-5.820766091346741e-10;-1.8044374883174896e-09;-2.0954757928848267e-09;-2.561137080192566e-09,5,5,"[-6.069260597229004, -5.621354579925537, -4.48075008392334, -5.9509596824646, -5.422819137573242, -0.024575117975473404]",0.9757243990898132
2,['\t@Test\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}\n'],return;order;get;Order;this,4.656612873077393e-10;1.7462298274040222e-10;-2.3283064365386963e-10;-8.149072527885437e-10;-9.89530235528946e-10,5,5,"[-6.072574138641357, -5.633092880249023, -4.477785110473633, -5.915134906768799, -5.393927574157715, -0.024788301438093185]",0.9755163192749023
2,"['\t@BeforeEach\n\t\t\tpublic String toString() {\n\t\t\t\treturn ""A"";\n\t\t\t}\n']",return;Each;to;Before,1.862645149230957e-09;-9.313225746154785e-10;-1.1641532182693481e-09;-3.026798367500305e-09,5,5,"[-6.069073677062988, -5.613211154937744, -4.506287574768066, -5.9114155769348145, -5.418647766113281, -0.024439716711640358]",0.9758565425872803
2,"['\t@Test\n\t\t\tpublic String toString() {\n\t\t\t\treturn new ToStringCreator(this).append(""familyFavoriteSport"", map).toString();\n\t\t\t}\n']",to;Favorite;to;Creator;Sport;new;map;append;return;family,1.5133991837501526e-09;1.280568540096283e-09;3.7834979593753815e-10;1.1641532182693481e-10;1.1641532182693481e-10;5.820766091346741e-11;-4.0745362639427185e-10;-4.656612873077393e-10;-8.003553375601768e-10;-8.731149137020111e-10,5,5,"[-6.064904689788818, -5.654609680175781, -4.529073238372803, -5.894356727600098, -5.417413234710693, -0.024096596986055374]",0.9761914014816284
2,"['\t@Test\n\t\tpublic String getFor(Class<String> cls) {\n\t\t\treturn ""foo"";\n\t\t}\n']",Class;get;return;For;cl;foo,1.862645149230957e-09;1.0477378964424133e-09;3.4924596548080444e-10;2.3283064365386963e-10;-1.6298145055770874e-09;-2.0954757928848267e-09,5,5,"[-6.060726165771484, -5.656795501708984, -4.511678218841553, -5.907918453216553, -5.3726654052734375, -0.024462750181555748]",0.9758340120315552
2,"['\t@TestPropSource(locations = ""test.properties"")\n\t\tpublic void handleParameterized(T t) {\n\t\t}\n']",Parameterized;Prop;Source;properties;locations;handle,6.51925802230835e-09;4.190951585769653e-09;2.7939677238464355e-09;1.862645149230957e-09;6.984919309616089e-10;2.3283064365386963e-10,5,5,"[-6.038942813873291, -5.619177341461182, -4.5317792892456055, -5.913463115692139, -5.371062278747559, -0.02442098781466484]",0.9758747816085815
2,"['\t@TestComponentScan(packages = ""com.example.app.test"")\n\t\tpublic Object doIt() {\n\t\t\treturn null;\n\t\t}\n']",Scan;Object;It;Component;packages;example;do;com;app;return,3.3760443329811096e-09;1.1641532182693481e-09;1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;-1.1641532182693481e-10,5,5,"[-6.031023979187012, -5.646857738494873, -4.567648410797119, -5.882686138153076, -5.348132610321045, -0.024147450923919678]",0.9761417508125305
2,['\t@Test\n\t\tpublic int getOrder() {\n\t\t\treturn order;\n\t\t}\n'],return;Order;order;get,1.7462298274040222e-09;1.3969838619232178e-09;-8.731149137020111e-10;-1.3969838619232178e-09,5,5,"[-6.061722755432129, -5.620065212249756, -4.483034610748291, -5.912942409515381, -5.384769916534424, -0.024850165471434593]",0.9754560589790344
2,"['\t@TestPropertySource(locations = ""test.properties"")\n\t\tpublic void handleParameterized(T t) {\n\t\t}\n']",locations;properties;Parameterized;handle;Property;Source,1.0477378964424133e-09;-6.984919309616089e-10;-8.149072527885437e-10;-1.3969838619232178e-09;-2.444721758365631e-09;-4.6566128730773926e-09,5,5,"[-6.043423175811768, -5.630215167999268, -4.5369133949279785, -5.918552398681641, -5.368903636932373, -0.02430906891822815]",0.9759840369224548
2,"['\t@TestComponentScan(packages = ""com.example.app.test"")\n\t\tpublic void doIt() {\n\t\t}\n']",app;Component;com;do;example;It;packages;Scan,2.444721758365631e-09;9.313225746154785e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;-1.280568540096283e-09;-2.0372681319713593e-09;-2.6775524020195007e-09,5,5,"[-6.0278191566467285, -5.672430038452148, -4.567070960998535, -5.8795166015625, -5.315972328186035, -0.02423856034874916]",0.9760528206825256
2,['\t@Test  // gh-23929\n\t\tpublic void annotatedOnRoot() {\n\t\t}\n'],annotated;On;Root;gh,3.026798367500305e-09;0.0;-2.0954757928848267e-09;-5.587935447692871e-09,5,5,"[-6.063752174377441, -5.648087501525879, -4.50538969039917, -5.945302486419678, -5.400981426239014, -0.02432279847562313]",0.9759705066680908
2,"['\t@Test\n\t\t\t\t\tpublic String doWithAggregate(Object context, int aggregateIndex) {\n\t\t\t\t\t\treturn """";\n\t\t\t\t\t}\n']",Index;aggregate;context;Aggregate;do;return;Object,1.862645149230957e-09;1.3969838619232178e-09;2.3283064365386963e-10;0.0;-9.313225746154785e-10;-1.280568540096283e-09;-1.4551915228366852e-09,5,5,"[-6.073007106781006, -5.563930511474609, -4.50294303894043, -5.923116683959961, -5.484794616699219, -0.024334082379937172]",0.9759594798088074
2,"['\t@Test\n\t\t\t\t\tpublic String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\tObject source, Annotation[] annotations) {\n\t\t\t\t\t\treturn ""K"";\n\t\t\t\t\t}\n']",Annotation;Annotations;do;Index;context;Object;source;Object;annotations;return,2.3283064365386963e-09;1.4842953532934189e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10;4.656612873077393e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-6.060978412628174, -5.560739040374756, -4.516656875610352, -5.921504497528076, -5.499138355255127, -0.024164555594325066]",0.9761249423027039
2,['\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n'],Annotation;method,4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-6.066200256347656, -5.635834693908691, -4.469962120056152, -5.938442230224609, -5.376034736633301, -0.024905283004045486]",0.975402295589447
2,['\t\t@TestAnnotation2\n\t\tpublic void method() {\n\t\t}\n'],method;Annotation,9.313225746154785e-10;-2.3283064365386963e-10,5,5,"[-6.059713363647461, -5.64371919631958, -4.482739448547363, -5.925679683685303, -5.363153457641602, -0.024839235469698906]",0.9754667282104492
2,['\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n'],method;Inherited;Annotation,6.984919309616089e-10;-3.4924596548080444e-09;-4.423782229423523e-09,5,5,"[-6.055776119232178, -5.581589221954346, -4.482934474945068, -5.935449123382568, -5.402362823486328, -0.024867607280611992]",0.9754389524459839
2,['\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n'],Annotation;method,4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-6.066200256347656, -5.635834693908691, -4.469962120056152, -5.938442230224609, -5.376034736633301, -0.024905283004045486]",0.975402295589447
2,['\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n'],Annotation;method,4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-6.066200256347656, -5.635834693908691, -4.469962120056152, -5.938442230224609, -5.376034736633301, -0.024905283004045486]",0.975402295589447
2,['\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n'],Annotation;method,4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-6.066200256347656, -5.635834693908691, -4.469962120056152, -5.938442230224609, -5.376034736633301, -0.024905283004045486]",0.975402295589447
2,['\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n'],Annotation;method,4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-6.066200256347656, -5.635834693908691, -4.469962120056152, -5.938442230224609, -5.376034736633301, -0.024905283004045486]",0.975402295589447
2,['\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n'],method;Inherited;Annotation,6.984919309616089e-10;-3.4924596548080444e-09;-4.423782229423523e-09,5,5,"[-6.055776119232178, -5.581589221954346, -4.482934474945068, -5.935449123382568, -5.402362823486328, -0.024867607280611992]",0.9754389524459839
2,['\t\t@TestAnnotation3\n\t\tpublic void method() {\n\t\t}\n'],Annotation;method,-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-6.066067695617676, -5.639559745788574, -4.4781270027160645, -5.930212020874023, -5.3731231689453125, -0.024832723662257195]",0.9754730463027954
2,['\t\t@TestAnnotation1\n\t\tpublic void method(String arg) {\n\t\t}\n'],Annotation;arg;method,6.984919309616089e-09;0.0;-6.402842700481415e-10,5,5,"[-6.070675849914551, -5.63986349105835, -4.479605674743652, -5.9564666748046875, -5.394339561462402, -0.02463304065167904]",0.9756678938865662
2,['\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n'],Annotation;method,4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-6.066200256347656, -5.635834693908691, -4.469962120056152, -5.938442230224609, -5.376034736633301, -0.024905283004045486]",0.975402295589447
2,['\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n'],Annotation;method,4.656612873077393e-10;-1.280568540096283e-09,5,5,"[-6.066200256347656, -5.635834693908691, -4.469962120056152, -5.938442230224609, -5.376034736633301, -0.024905283004045486]",0.975402295589447
2,['\t\t@TestAnnotation1\n\t\tpublic void method(String argument) {\n\t\t}\n'],argument;method;Annotation,1.1641532182693481e-09;2.3283064365386963e-10;-3.026798367500305e-09,5,5,"[-6.073968887329102, -5.639017105102539, -4.478148937225342, -5.955524921417236, -5.397318363189697, -0.024633971974253654]",0.9756669402122498
2,"['    @Test\n    public void testConstructor() {\n        assertNotNull(new ClassPathUtils());\n        final Constructor<?>[] cons = ClassPathUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n        assertTrue(Modifier.isPublic(ClassPathUtils.class.getModifiers()));\n        assertFalse(Modifier.isFinal(ClassPathUtils.class.getModifiers()));\n    }\n']",Modifiers;Utils;Modifier;cons;Public;Class;final;True;class;Class,6.984919309616089e-10;5.748006515204906e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.955946445465088, -5.591844081878662, -4.619814872741699, -5.837011337280273, -5.384652137756348, -0.023961948230862617]",0.9763228893280029
2,"['    @Test\n    public void testToFullyQualifiedNameNullClassString() {\n        assertThrows(NullPointerException.class,\n                () -> ClassPathUtils.toFullyQualifiedName((Class<?>) null, ""Test.properties""));\n    }\n']",Pointer;Qualified;Null;to;Class;null;Throws;class;Qualified;ully,1.5133991837501526e-09;9.604264050722122e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10,5,5,"[-5.9961628913879395, -5.574825286865234, -4.614681243896484, -5.850372791290283, -5.412145137786865, -0.023807723075151443]",0.976473331451416
2,"['    @Test\n    public void testToFullyQualifiedNameClassNull() {\n        assertThrows(NullPointerException.class, () -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, null));\n    }\n']",Path;ully;Name;ully;class;Class;Null;Pointer;Name;Class,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.015347957611084, -5.591658592224121, -4.584280490875244, -5.88423490524292, -5.4193806648254395, -0.023876631632447243]",0.9764061570167542
2,"['    @Test\n    public void testToFullyQualifiedNameClassString() {\n        final String expected = ""org.apache.commons.lang3.Test.properties"";\n        final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, ""Test.properties"");\n\n        assertEquals(expected, actual);\n    }\n']",Path;Path;lang;expected;Utils;properties;apache;Qualified;commons;Utils,1.1059455573558807e-09;9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.992307186126709, -5.601555347442627, -4.622959613800049, -5.829914569854736, -5.401777744293213, -0.02374020591378212]",0.9765393733978271
2,"['    @Test\n    public void testToFullyQualifiedNameNullPackageString() {\n        assertThrows(NullPointerException.class,\n                () -> ClassPathUtils.toFullyQualifiedName((Package) null, ""Test.properties""));\n    }\n']",properties;to;Package;Null;Name;Utils;Name;Pointer;null;Exception,1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;0.0;-5.820766091346741e-11,5,5,"[-5.9948225021362305, -5.570865154266357, -4.621581077575684, -5.837760925292969, -5.413090705871582, -0.0237900298088789]",0.9764907360076904
2,"['    @Test\n    public void testToFullyQualifiedNamePackageNull() {\n        assertThrows(NullPointerException.class,\n                () -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), null));\n    }\n']",Package;Name;Pointer;Path;Utils;Throws;Class;Exception;Utils;Path,3.259629011154175e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.3387762010097504e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.999362468719482, -5.5695953369140625, -4.608945846557617, -5.858561992645264, -5.417037487030029, -0.02383205108344555]",0.9764496684074402
2,"['    @Test\n    public void testToFullyQualifiedNamePackageString() {\n        final String expected = ""org.apache.commons.lang3.Test.properties"";\n        final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), ""Test.properties"");\n\n        assertEquals(expected, actual);\n    }\n']",Package;org;Package;lang;properties;final;class;expected;apache;ully,2.0954757928848267e-09;1.0477378964424133e-09;9.89530235528946e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.97756814956665, -5.600632190704346, -4.63799524307251, -5.810027599334717, -5.3854451179504395, -0.02376791276037693]",0.9765123128890991
2,"['    @Test\n    public void testToFullyQualifiedPathClassNullString() {\n        assertThrows(NullPointerException.class,\n                () -> ClassPathUtils.toFullyQualifiedPath((Class<?>) null, ""Test.properties""));\n    }\n']",to;Pointer;Utils;Null;Class;Path;Path;Qualified;properties;Class,1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;1.1641532182693481e-10;-5.820766091346741e-11,5,5,"[-5.997675895690918, -5.572937488555908, -4.613988876342773, -5.8488969802856445, -5.413464069366455, -0.023816686123609543]",0.9764646887779236
2,"['    @Test\n    public void testToFullyQualifiedPathClassNull() {\n        assertThrows(NullPointerException.class, () -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, null));\n    }\n']",Throws;ully;Utils;Null;ully;Path;class;class;null;Qualified,1.4551915228366852e-09;6.984919309616089e-10;5.529727786779404e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;-2.9103830456733704e-11;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-6.018049716949463, -5.593493938446045, -4.584758281707764, -5.884011745452881, -5.417486667633057, -0.023867204785346985]",0.9764154553413391
2,"['    @Test\n    public void testToFullyQualifiedPathClass() {\n        final String expected = ""org/apache/commons/lang3/Test.properties"";\n        final String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, ""Test.properties"");\n\n        assertEquals(expected, actual);\n    }\n']",expected;Path;Equals;actual;actual;final;lang;Class;to;Path,9.313225746154785e-10;8.149072527885437e-10;7.712515071034431e-10;7.566995918750763e-10;7.275957614183426e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.992254734039307, -5.596753120422363, -4.631514072418213, -5.830441474914551, -5.395463466644287, -0.023700391873717308]",0.9765781164169312
2,"['    @Test\n    public void testToFullyQualifiedPathPackageNullString() {\n        assertThrows(NullPointerException.class,\n                () -> ClassPathUtils.toFullyQualifiedPath((Package) null, ""Test.properties""));\n    }\n']",Exception;Path;Package;Package;Path;to;Class;Null;Qualified;null,1.5133991837501526e-09;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.1641532182693481e-10;1.1641532182693481e-10;-8.731149137020111e-11,5,5,"[-6.000586032867432, -5.566843509674072, -4.615072250366211, -5.844873428344727, -5.419798374176025, -0.023805046454072]",0.9764759540557861
2,"['    @Test\n    public void testToFullyQualifiedPathPackageNull() {\n        assertThrows(NullPointerException.class,\n                () -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), null));\n    }\n']",Class;Null;to;Throws;Exception;Qualified;ully;class;Utils;get,1.3969838619232178e-09;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0,5,5,"[-5.997422695159912, -5.570200443267822, -4.610100269317627, -5.855237007141113, -5.413413047790527, -0.023849163204431534]",0.9764330983161926
2,"['    @Test\n    public void testToFullyQualifiedPathPackage() {\n        final String expected = ""org/apache/commons/lang3/Test.properties"";\n        final String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), ""Test.properties"");\n\n        assertEquals(expected, actual);\n    }\n']",org;apache;Path;Equals;expected;expected;Path;Utils;actual;final,1.6298145055770874e-09;1.0477378964424133e-09;9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.983545303344727, -5.595727443695068, -4.640381336212158, -5.817299842834473, -5.385517597198486, -0.023724956437945366]",0.976554274559021
2,"['    @Test\n    public void testIsEmpty() {\n        assertTrue(StringUtils.isEmpty(null));\n        assertTrue(StringUtils.isEmpty(""""));\n        assertFalse(StringUtils.isEmpty("" ""));\n        assertFalse(StringUtils.isEmpty(""foo""));\n        assertFalse(StringUtils.isEmpty(""  foo  ""));\n    }\n']",True;Utils;Utils;True;Empty;null;Utils;False;Empty;Empty,1.1641532182693481e-09;6.548361852765083e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;5.820766091346741e-11;0.0;0.0;-2.9103830456733704e-11,5,5,"[-5.982859134674072, -5.666591167449951, -4.612726211547852, -5.84134578704834, -5.3584136962890625, -0.02380027249455452]",0.9764807224273682
2,"['    @Test\n    public void testIsNotEmpty() {\n        assertFalse(StringUtils.isNotEmpty(null));\n        assertFalse(StringUtils.isNotEmpty(""""));\n        assertTrue(StringUtils.isNotEmpty("" ""));\n        assertTrue(StringUtils.isNotEmpty(""foo""));\n        assertTrue(StringUtils.isNotEmpty(""  foo  ""));\n    }\n']",foo;foo;null;Utils;False;Not;True;Not;Empty;Empty,2.0954757928848267e-09;9.313225746154785e-10;8.149072527885437e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;1.1641532182693481e-10;5.820766091346741e-11,5,5,"[-5.970520496368408, -5.656902313232422, -4.619810104370117, -5.833706855773926, -5.351324081420898, -0.023852188140153885]",0.9764299988746643
2,"['    @Test\n    public void testIsAnyEmpty() {\n        assertTrue(StringUtils.isAnyEmpty((String) null));\n        assertFalse(StringUtils.isAnyEmpty((String[]) null));\n        assertTrue(StringUtils.isAnyEmpty(null, ""foo""));\n        assertTrue(StringUtils.isAnyEmpty("""", ""bar""));\n        assertTrue(StringUtils.isAnyEmpty(""bob"", """"));\n        assertTrue(StringUtils.isAnyEmpty(""  bob  "", null));\n        assertFalse(StringUtils.isAnyEmpty("" "", ""bar""));\n        assertFalse(StringUtils.isAnyEmpty(""foo"", ""bar""));\n    }\n']",ob;bob;Empty;True;Empty;True;Utils;Empty;Empty;Empty,1.862645149230957e-09;8.149072527885437e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.921702861785889, -5.648918151855469, -4.659550189971924, -5.736389636993408, -5.322091102600098, -0.02406901679933071]",0.9762184619903564
2,"['    @Test\n    public void testIsNoneEmpty() {\n        assertFalse(StringUtils.isNoneEmpty((String) null));\n        assertTrue(StringUtils.isNoneEmpty((String[]) null));\n        assertFalse(StringUtils.isNoneEmpty(null, ""foo""));\n        assertFalse(StringUtils.isNoneEmpty("""", ""bar""));\n        assertFalse(StringUtils.isNoneEmpty(""bob"", """"));\n        assertFalse(StringUtils.isNoneEmpty(""  bob  "", null));\n        assertTrue(StringUtils.isNoneEmpty("" "", ""bar""));\n        assertTrue(StringUtils.isNoneEmpty(""foo"", ""bar""));\n    }\n']",False;None;False;False;True;bob;Empty;None;None;True,5.238689482212067e-10;4.220055416226387e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9264326095581055, -5.669354438781738, -4.659489631652832, -5.7418951988220215, -5.313678741455078, -0.024007687345147133]",0.9762781858444214
2,"['    @Test\n    public void testIsAllEmpty() {\n        assertTrue(StringUtils.isAllEmpty());\n        assertTrue(StringUtils.isAllEmpty(new String[]{}));\n        assertTrue(StringUtils.isAllEmpty((String) null));\n        assertTrue(StringUtils.isAllEmpty((String[]) null));\n        assertFalse(StringUtils.isAllEmpty(null, ""foo""));\n        assertFalse(StringUtils.isAllEmpty("""", ""bar""));\n        assertFalse(StringUtils.isAllEmpty(""bob"", """"));\n        assertFalse(StringUtils.isAllEmpty(""  bob  "", null));\n        assertFalse(StringUtils.isAllEmpty("" "", ""bar""));\n        assertFalse(StringUtils.isAllEmpty(""foo"", ""bar""));\n        assertTrue(StringUtils.isAllEmpty("""", null));\n    }\n']",foo;foo;null;False;All;All;True;All;Utils;null,1.0477378964424133e-09;9.89530235528946e-10;7.566995918750763e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.911910057067871, -5.612655162811279, -4.657373428344727, -5.7342658042907715, -5.3390727043151855, -0.024173051118850708]",0.9761166572570801
2,"['    @Test\n    public void testIsBlank() {\n        assertTrue(StringUtils.isBlank(null));\n        assertTrue(StringUtils.isBlank(""""));\n        assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n        assertFalse(StringUtils.isBlank(""foo""));\n        assertFalse(StringUtils.isBlank(""  foo  ""));\n    }\n']",ACE;foo;null;Blank;WHITES;True;Utils;Blank;True;Blank,1.57160684466362e-09;1.1641532182693481e-09;1.0477378964424133e-09;1.0186340659856796e-09;6.402842700481415e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10,5,5,"[-5.966618537902832, -5.640525817871094, -4.616421222686768, -5.839789390563965, -5.370129108428955, -0.02384706772863865]",0.9764350056648254
2,"['    @Test\n    public void testIsNotBlank() {\n        assertFalse(StringUtils.isNotBlank(null));\n        assertFalse(StringUtils.isNotBlank(""""));\n        assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n        assertTrue(StringUtils.isNotBlank(""foo""));\n        assertTrue(StringUtils.isNotBlank(""  foo  ""));\n    }\n']",ACE;Utils;False;WHITES;Not;Not;Utils;Not;Utils;Not,1.3969838619232178e-09;6.83940015733242e-10;6.111804395914078e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.9601826667785645, -5.621665000915527, -4.618646621704102, -5.834438800811768, -5.383996963500977, -0.023861151188611984]",0.9764212965965271
2,"['    @Test\n    public void testIsAnyBlank() {\n        assertTrue(StringUtils.isAnyBlank((String) null));\n        assertFalse(StringUtils.isAnyBlank((String[]) null));\n        assertTrue(StringUtils.isAnyBlank(null, ""foo""));\n        assertTrue(StringUtils.isAnyBlank(null, null));\n        assertTrue(StringUtils.isAnyBlank("""", ""bar""));\n        assertTrue(StringUtils.isAnyBlank(""bob"", """"));\n        assertTrue(StringUtils.isAnyBlank(""  bob  "", null));\n        assertTrue(StringUtils.isAnyBlank("" "", ""bar""));\n        assertFalse(StringUtils.isAnyBlank(""foo"", ""bar""));\n    }\n']",foo;Blank;Any;null;Blank;null;null;Any;True;Utils,9.313225746154785e-10;5.238689482212067e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.5643308870494366e-10,5,5,"[-5.909995079040527, -5.6111626625061035, -4.659425258636475, -5.740828514099121, -5.341239929199219, -0.024131741374731064]",0.9761571288108826
2,"['    @Test\n    public void testIsNoneBlank() {\n        assertFalse(StringUtils.isNoneBlank((String) null));\n        assertTrue(StringUtils.isNoneBlank((String[]) null));\n        assertFalse(StringUtils.isNoneBlank(null, ""foo""));\n        assertFalse(StringUtils.isNoneBlank(null, null));\n        assertFalse(StringUtils.isNoneBlank("""", ""bar""));\n        assertFalse(StringUtils.isNoneBlank(""bob"", """"));\n        assertFalse(StringUtils.isNoneBlank(""  bob  "", null));\n        assertFalse(StringUtils.isNoneBlank("" "", ""bar""));\n        assertTrue(StringUtils.isNoneBlank(""foo"", ""bar""));\n    }\n']",bar;Blank;False;null;bob;Blank;False;bar;Blank;None,1.3969838619232178e-09;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.922014236450195, -5.621534824371338, -4.654292106628418, -5.756404876708984, -5.3486199378967285, -0.024022933095693588]",0.9762633442878723
2,"['    @Test\n    public void testIsAllBlank() {\n        assertTrue(StringUtils.isAllBlank((String) null));\n        assertTrue(StringUtils.isAllBlank((String[]) null));\n        assertTrue(StringUtils.isAllBlank(null, null));\n        assertTrue(StringUtils.isAllBlank(null, "" ""));\n        assertFalse(StringUtils.isAllBlank(null, ""foo""));\n        assertFalse(StringUtils.isAllBlank("""", ""bar""));\n        assertFalse(StringUtils.isAllBlank(""bob"", """"));\n        assertFalse(StringUtils.isAllBlank(""  bob  "", null));\n        assertFalse(StringUtils.isAllBlank("" "", ""bar""));\n        assertFalse(StringUtils.isAllBlank(""foo"", ""bar""));\n    }\n']",False;False;Utils;null;True;All;Utils;All;False;All,5.529727786779404e-10;4.3655745685100555e-10;3.019522409886122e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.913580417633057, -5.603160858154297, -4.657522201538086, -5.743383884429932, -5.3516035079956055, -0.024111492559313774]",0.9761768579483032
2,"['    @Test\n    public void testFirstNonBlank() {\n        assertNull(StringUtils.firstNonBlank());\n        assertNull(StringUtils.firstNonBlank((String[]) null));\n        assertNull(StringUtils.firstNonBlank(null, null, null));\n        assertNull(StringUtils.firstNonBlank(null, """", "" ""));\n        assertNull(StringUtils.firstNonBlank(null, null, "" ""));\n        assertEquals(""zz"", StringUtils.firstNonBlank(null, ""zz""));\n        assertEquals(""abc"", StringUtils.firstNonBlank(""abc""));\n        assertEquals(""xyz"", StringUtils.firstNonBlank(null, ""xyz""));\n        assertEquals(""xyz"", StringUtils.firstNonBlank(null, ""xyz"", ""abc""));\n    }\n']",abc;abc;First;Blank;null;xy;xy;xy;first;first,1.5133991837501526e-09;1.0477378964424133e-09;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.915287971496582, -5.605742454528809, -4.662292003631592, -5.742680549621582, -5.350545406341553, -0.024058077484369278]",0.9762288928031921
2,"['    @Test\n    public void testFirstNonEmpty() {\n        assertNull(StringUtils.firstNonEmpty());\n        assertNull(StringUtils.firstNonEmpty((String[]) null));\n        assertNull(StringUtils.firstNonEmpty(null, null, null));\n        assertEquals("" "", StringUtils.firstNonEmpty(null, """", "" ""));\n        assertNull(StringUtils.firstNonEmpty(null, null, """"));\n        assertEquals(""zz"", StringUtils.firstNonEmpty(null, ""zz""));\n        assertEquals(""abc"", StringUtils.firstNonEmpty(""abc""));\n        assertEquals(""xyz"", StringUtils.firstNonEmpty(null, ""xyz""));\n        assertEquals(""xyz"", StringUtils.firstNonEmpty(null, ""xyz"", ""abc""));\n    }\n']",null;xy;Utils;Null;first;Null;first;first;null;first,9.89530235528946e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.346940502524376e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.900271415710449, -5.6139326095581055, -4.665891170501709, -5.726805686950684, -5.3266754150390625, -0.024204468354582787]",0.9760861396789551
2,"['    @Test\n    public void test_getInstance() {\n        final FastDateFormat format1 = FastDateFormat.getInstance();\n        final FastDateFormat format2 = FastDateFormat.getInstance();\n        assertSame(format1, format2);\n    }\n']",format;Same;Date;Date;format;final;Instance;Fast;Format;Fast,9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-6.001688003540039, -5.630051136016846, -4.604081153869629, -5.880672931671143, -5.3964128494262695, -0.02367768995463848]",0.9766004085540771
2,"['    @Test\n    public void test_getInstance_String() {\n        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"");\n        final FastDateFormat format2 = FastDateFormat.getInstance(""MM-DD-yyyy"");\n        final FastDateFormat format3 = FastDateFormat.getInstance(""MM-DD-yyyy"");\n\n        assertNotSame(format1, format2);\n        assertSame(format2, format3);\n        assertEquals(""MM/DD/yyyy"", format1.getPattern());\n        assertEquals(TimeZone.getDefault(), format1.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n    }\n']",yyyy;Equals;Fast;yyyy;Date;MM;format;Fast;format;final,7.566995918750763e-10;6.402842700481415e-10;5.529727786779404e-10;5.529727786779404e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.968084335327148, -5.603440284729004, -4.628752708435059, -5.8509840965271, -5.419069290161133, -0.02359572798013687]",0.9766804575920105
2,"['    @Test\n    public void test_getInstance_String_TimeZone() {\n\n        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"",\n                TimeZone.getTimeZone(""Atlantic/Reykjavik""));\n        final FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");\n        final FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());\n        final FastDateFormat format4 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());\n        final FastDateFormat format5 = FastDateFormat.getInstance(""MM-DD-yyyy"", TimeZone.getDefault());\n        final FastDateFormat format6 = FastDateFormat.getInstance(""MM-DD-yyyy"");\n\n        assertNotSame(format1, format2);\n        assertEquals(TimeZone.getTimeZone(""Atlantic/Reykjavik""), format1.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n        assertSame(format3, format4);\n        assertNotSame(format3, format5);\n        assertNotSame(format4, format6);\n    }\n']",eykjavik;get;Instance;Instance;Instance;final;Time;format;Not;get,7.275957614183426e-10;4.0745362639427185e-10;4.001776687800884e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.255546860396862e-10;2.1827872842550278e-10;1.964508555829525e-10;1.7462298274040222e-10,5,5,"[-5.891724586486816, -5.501143932342529, -4.672339916229248, -5.769588947296143, -5.40547513961792, -0.024095667526125908]",0.9761922955513
2,"['    @Test\n    public void test_getInstance_String_Locale() {\n        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);\n        final FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");\n        final FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);\n\n        assertNotSame(format1, format2);\n        assertSame(format1, format3);\n        assertEquals(Locale.GERMANY, format1.getLocale());\n    }\n']",Locale;yyyy;GERMAN;Locale;final;format;get;Date;Locale;Format,1.3387762010097504e-09;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.917555809020996, -5.58001184463501, -4.658496856689453, -5.7961273193359375, -5.381653785705566, -0.023867087438702583]",0.9764154553413391
2,"['    @Test\n    public void test_changeDefault_Locale_DateInstance() {\n        final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n        final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n        Locale.setDefault(Locale.GERMANY);\n        final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n\n        assertSame(Locale.GERMANY, format1.getLocale());\n        assertEquals(Locale.US, format2.getLocale());\n        assertSame(Locale.GERMANY, format3.getLocale());\n        assertNotSame(format1, format2);\n        assertNotSame(format2, format3);\n    }\n']",GERMAN;GERMAN;ULL;Same;Format;Date;GERMAN;get;Format;Fast,1.1641532182693481e-09;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.894836902618408, -5.618231773376465, -4.678099632263184, -5.73038911819458, -5.319614887237549, -0.024110097438097]",0.9761782288551331
2,"['    @Test\n    public void test_changeDefault_Locale_DateTimeInstance() {\n        final FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n        final FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n        Locale.setDefault(Locale.GERMANY);\n        final FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n\n        assertSame(Locale.GERMANY, format1.getLocale());\n        assertEquals(Locale.US, format2.getLocale());\n        assertSame(Locale.GERMANY, format3.getLocale());\n        assertNotSame(format1, format2);\n        assertNotSame(format2, format3);\n    }\n']",Locale;GERMAN;Locale;Locale;Locale;Date;Date;Not;Instance;Fast,7.275957614183426e-10;6.402842700481415e-10;4.0745362639427185e-10;4.001776687800884e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.888237476348877, -5.583911895751953, -4.674012660980225, -5.740240097045898, -5.337164402008057, -0.02417782135307789]",0.9761121273040771
2,"['    @Test\n    public void test_getInstance_String_TimeZone_Locale() {\n        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"",\n                TimeZone.getTimeZone(""Atlantic/Reykjavik""), Locale.GERMANY);\n        final FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);\n        final FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"",\n                TimeZone.getDefault(), Locale.GERMANY);\n\n        assertNotSame(format1, format2);\n        assertEquals(TimeZone.getTimeZone(""Atlantic/Reykjavik""), format1.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format3.getTimeZone());\n        assertEquals(Locale.GERMANY, format1.getLocale());\n        assertEquals(Locale.GERMANY, format2.getLocale());\n        assertEquals(Locale.GERMANY, format3.getLocale());\n    }\n']",yyyy;GERMAN;eykjavik;Format;Instance;GERMAN;Date;GERMAN;Locale;Locale,1.280568540096283e-09;7.566995918750763e-10;6.83940015733242e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.834190845489502, -5.496103763580322, -4.697336673736572, -5.6972432136535645, -5.341513156890869, -0.024591751396656036]",0.9757081866264343
2,"['    @Test\n    public void testCheckDefaults() {\n        final FastDateFormat format = FastDateFormat.getInstance();\n        final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT);\n        assertEquals(medium, format);\n\n        final SimpleDateFormat sdf = new SimpleDateFormat();\n        assertEquals(sdf.toPattern(), format.getPattern());\n\n        assertEquals(Locale.getDefault(), format.getLocale());\n        assertEquals(TimeZone.getDefault(), format.getTimeZone());\n    }\n']",Defaults;Pattern;Zone;Fast;Pattern;Format;format;Default;get;Fast,9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.918158054351807, -5.578226089477539, -4.654227256774902, -5.789164066314697, -5.365366458892822, -0.024013040587306023]",0.9762730002403259
2,"['    @Test\n    public void testCheckDifferingStyles() {\n        final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US);\n        final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US);\n        final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT, Locale.US);\n        final FastDateFormat longLong = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.LONG, Locale.US);\n\n        assertNotEquals(shortShort, shortLong);\n        assertNotEquals(shortShort, longShort);\n        assertNotEquals(shortShort, longLong);\n        assertNotEquals(shortLong, longShort);\n        assertNotEquals(shortLong, longLong);\n        assertNotEquals(longShort, longLong);\n    }\n']",Short;ONG;Fast;Differing;short;Fast;short;Fast;US;Instance,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;5.529727786779404e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.957641124725342, -5.573920249938965, -4.6356611251831055, -5.808437824249268, -5.429824352264404, -0.023747075349092484]",0.9765327572822571
2,"['    @Test\n    public void testDateDefaults() {\n        assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA),\n                FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));\n\n        assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone(""America/New_York"")),\n                FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone(""America/New_York""), Locale.getDefault()));\n\n        assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG),\n                FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));\n    }\n']",CANADA;Zone;get;ONG;Default;get;Equals;Instance;Date;Zone,8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.800168514251709, -5.536459445953369, -4.651981830596924, -5.699810028076172, -5.250754356384277, -0.025420721620321274]",0.9748996496200562
2,"['    @Test\n    public void testTimeDefaults() {\n        assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA),\n                FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));\n\n        assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone(""America/New_York"")),\n                FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone(""America/New_York""), Locale.getDefault()));\n\n        assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG),\n                FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));\n    }\n']",ONG;America;ONG;York;Zone;CANADA;ONG;Zone;Date;get,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.813183307647705, -5.545639514923096, -4.6517229080200195, -5.7096357345581055, -5.257526397705078, -0.02527625299990177]",0.9750404953956604
2,"['    @Test\n    public void testTimeDateDefaults() {\n        assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA),\n                FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA));\n\n        assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone(""America/New_York"")),\n                FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone(""America/New_York""), Locale.getDefault()));\n\n        assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM),\n                FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault()));\n    }\n']",CANADA;MEDIUM;Zone;America;ONG;Time;Default;Date;get;MEDIUM,1.1932570487260818e-09;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.823368549346924, -5.494840621948242, -4.6301445960998535, -5.717858791351318, -5.3103508949279785, -0.025364704430103302]",0.9749541878700256
2,"['    @Test\n    public void testParseSync() throws InterruptedException {\n        final String pattern = ""yyyy-MM-dd\'T\'HH:mm:ss.SSS"";\n        final SimpleDateFormat inner = new SimpleDateFormat(pattern);\n        final Format sdf= new Format() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public StringBuffer format(final Object obj,\n                    final StringBuffer toAppendTo,\n']",serial;SS;Interrupted;long;HH;Buffer;Date;to;MM;new,2.444721758365631e-09;2.444721758365631e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-6.052894592285156, -5.434828281402588, -4.529048442840576, -5.936822891235352, -5.552611351013184, -0.024314885959029198]",0.9759783148765564
2,"['    @Test\n    public void testLANG_954() {\n        final String pattern = ""yyyy-MM-dd\'T\'"";\n        FastDateFormat.getInstance(pattern);\n    }\n']",yyyy;Date;MM;dd;Instance;Format;pattern;Fast;final;pattern,2.3283064365386963e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;2.3283064365386963e-10;0.0,5,5,"[-6.08784818649292, -5.613290786743164, -4.511427879333496, -5.955005645751953, -5.4867730140686035, -0.023919930681586266]",0.9763638973236084
2,"['    @Test\n    public void testLANG_1152() {\n        final TimeZone utc = FastTimeZone.getGmtTimeZone();\n        final Date date = new Date(Long.MAX_VALUE);\n\n        String dateAsString = FastDateFormat.getInstance(""yyyy-MM-dd"", utc, Locale.US).format(date);\n        assertEquals(""292278994-08-17"", dateAsString);\n\n        dateAsString = FastDateFormat.getInstance(""dd/MM/yyyy"", utc, Locale.US).format(date);\n        assertEquals(""17/08/292278994"", dateAsString);\n    }\n']",MM;dd;MM;Locale;yyyy;VALUE;Fast;Date;As;Locale,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.3655745685100555e-10,5,5,"[-5.979054927825928, -5.624678134918213, -4.645657062530518, -5.814865589141846, -5.404915809631348, -0.023493263870477676]",0.9767805337905884
2,"['    @Test\n    public void testLANG_1267() {\n        FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss.SSSXXX"");\n    }\n']",dd;MM;Instance;get;ss;ANG;Format;SS;mm;Date,2.3283064365386963e-09;9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;-4.656612873077393e-10;-4.656612873077393e-10;-8.149072527885437e-10;-9.313225746154785e-10;-1.3969838619232178e-09,5,5,"[-6.155323028564453, -5.770847320556641, -4.416901588439941, -5.998343467712402, -5.4397454261779785, -0.0244302935898304]",0.9758657217025757
2,"['    @Test\n    public void hoursOutOfRange() {\n        assertThrows(IllegalArgumentException.class, () -> new GmtTimeZone(false, 24, 0));\n    }\n']",Out;Exception;Argument;class;Zone;Time;Range;false;Throws;Illegal,9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;0.0;-5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-6.001002788543701, -5.5701141357421875, -4.5861124992370605, -5.891716003417969, -5.415518760681152, -0.02397288754582405]",0.9763120412826538
2,"['    @Test\n    public void hoursInRange() {\n        assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());\n    }\n']",Range;In;hours;mt;Raw;Offset;get;Time;Zone;Equals,3.259629011154175e-09;2.7939677238464355e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;7.785274647176266e-10;4.656612873077393e-10;4.656612873077393e-10;-4.0745362639427185e-10,5,5,"[-6.021942138671875, -5.630253314971924, -4.579742431640625, -5.881152629852295, -5.401088237762451, -0.023855680599808693]",0.9764266014099121
2,"['    @Test\n    public void minutesOutOfRange() {\n        assertThrows(IllegalArgumentException.class, () -> new GmtTimeZone(false, 0, 60));\n    }\n']",minutes;class;false;Throws;Illegal;Out;Exception;new;Time;Argument,9.313225746154785e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-6.066647529602051, -5.595254421234131, -4.521554470062256, -5.946141719818115, -5.470739364624023, -0.024016648530960083]",0.9762694835662842
2,"['    @Test\n    public void minutesInRange() {\n        assertEquals(59 * 60 * 1000, new GmtTimeZone(false, 0, 59).getRawOffset());\n    }\n']",In;Zone;Offset;Range;false;Equals;Time;mt;get;Raw,1.862645149230957e-09;1.1641532182693481e-09;1.1641532182693481e-09;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-6.056122779846191, -5.633401393890381, -4.536018371582031, -5.923398494720459, -5.437312602996826, -0.02394763194024563]",0.9763369560241699
2,"['    @Test\n    public void getOffset() {\n        assertEquals(0, new GmtTimeZone(false, 0, 0).getOffset(234304));\n    }\n']",Equals;Time;Offset;new;get;Offset;get;mt;false;Zone,2.648448571562767e-09;2.3283064365386963e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;0.0;-1.7462298274040222e-10;-2.3283064365386963e-10;-8.149072527885437e-10;-9.313225746154785e-10,5,5,"[-6.006204128265381, -5.653633117675781, -4.581796646118164, -5.856110095977783, -5.3713154792785645, -0.024000704288482666]",0.976284921169281
2,"['    @Test\n    public void setRawOffset() {\n        assertThrows(UnsupportedOperationException.class, () -> new GmtTimeZone(false, 0, 0).setRawOffset(0));\n    }\n']",Offset;Zone;class;new;Time;Raw;set;Raw;Offset;mt,2.270098775625229e-09;1.862645149230957e-09;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;-2.3283064365386963e-10;-3.4924596548080444e-10,5,5,"[-5.966587543487549, -5.599148750305176, -4.6084465980529785, -5.850495338439941, -5.371021270751953, -0.024045975878834724]",0.9762408137321472
2,"['    @Test\n    public void getRawOffset() {\n        assertEquals(0, new GmtTimeZone(false, 0, 0).getRawOffset());\n    }\n']",Time;Raw;Offset;Offset;Zone;get;false;new;mt;Raw,2.3283064365386963e-09;2.0954757928848267e-09;1.6298145055770874e-09;1.280568540096283e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;-5.820766091346741e-10;-6.984919309616089e-10,5,5,"[-6.006242752075195, -5.657041072845459, -4.577795505523682, -5.869417667388916, -5.374725818634033, -0.023975564166903496]",0.9763095378875732
2,"['    @Test\n    public void getID() {\n        assertEquals(""GMT+00:00"", new GmtTimeZone(false, 0, 0).getID());\n        assertEquals(""GMT+01:02"", new GmtTimeZone(false, 1, 2).getID());\n        assertEquals(""GMT+11:22"", new GmtTimeZone(false, 11, 22).getID());\n        assertEquals(""GMT-01:02"", new GmtTimeZone(true, 1, 2).getID());\n        assertEquals(""GMT-11:22"", new GmtTimeZone(true, 11, 22).getID());\n    }\n']",true;get;Zone;Equals;mt;Time;false;new;Zone;mt,8.149072527885437e-10;6.984919309616089e-10;5.529727786779404e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.921778202056885, -5.692673683166504, -4.6736226081848145, -5.722785472869873, -5.273124694824219, -0.02407495304942131]",0.9762124419212341
2,"['    @Test\n    public void useDaylightTime() {\n        assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());\n    }\n']",False;use;Time;new;false;Time;Time;use;Zone;mt,3.259629011154175e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-1.862645149230957e-09;-2.3283064365386963e-09,5,5,"[-5.9929375648498535, -5.633895397186279, -4.583336353302002, -5.875219345092773, -5.368433475494385, -0.02404818683862686]",0.9762386679649353
2,"['    @Test\n    public void inDaylightTime() {\n        assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());\n    }\n']",use;Zone;Time;Daylight;False;new;mt;Time;false;Daylight,2.0954757928848267e-09;9.313225746154785e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-4.0745362639427185e-10;-5.820766091346741e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.1059455573558807e-09,5,5,"[-5.99631404876709, -5.630789756774902, -4.585465431213379, -5.874792098999023, -5.37436056137085, -0.024001633748412132]",0.9762840867042542
2,"['    @Test\n    public void testToString() {\n        assertEquals(""[GmtTimeZone id=\\""GMT-12:00\\"",offset=-43200000]"",\n            new GmtTimeZone(true, 12, 0).toString());\n    }\n']",id;Time;offset;Zone;Equals;true;Zone;to;GMT;mt,9.313225746154785e-10;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10;-5.238689482212067e-10,5,5,"[-6.007762432098389, -5.637726306915283, -4.607941627502441, -5.840852737426758, -5.391567707061768, -0.023733453825116158]",0.9765459895133972
2,"['    @Test\n    public void testGetOffset() {\n        assertEquals(-(6 * 60 + 30) * 60 * 1000,\n            new GmtTimeZone(true, 6, 30).getOffset(1, 1, 1, 1, 1, 1));\n    }\n']",Time;Zone;Get;Offset;Equals;Offset;get;true;new;mt,1.1641532182693481e-09;6.984919309616089e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-2.6193447411060333e-10;-3.4924596548080444e-10;-6.402842700481415e-10;-9.313225746154785e-10,5,5,"[-5.971099376678467, -5.572696685791016, -4.633656024932861, -5.820340156555176, -5.38927698135376, -0.023885594680905342]",0.9763972759246826
2,"['    @BeforeEach\n    public void setUp() {\n        aCalendar = Calendar.getInstance();\n        aCalendar.set(2005, months, days, hours, minutes, seconds);\n        aCalendar.set(Calendar.MILLISECOND, millis);\n        aDate = aCalendar.getTime();\n    }\n']",Before;Calendar;hours;months;ILLISECOND;set;Calendar;Up;Calendar;get,2.0954757928848267e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.604264050722122e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-6.058593273162842, -5.6330885887146, -4.57249116897583, -5.895678520202637, -5.467452049255371, -0.023494545370340347]",0.9767792820930481
2,"['    @Test\n    public void testNullDate() {\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND));\n\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND));\n\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND));\n\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND));\n\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND));\n    }\n']",class;Argument;null;Illegal;Throws;Fragment;ILLISECOND;Fragment;class;Date,2.9802322387695312e-08;8.847564458847046e-09;6.28642737865448e-09;2.7939677238464355e-09;2.6775524020195007e-09;2.6775524020195007e-09;2.0954757928848267e-09;1.979060471057892e-09;1.862645149230957e-09;1.862645149230957e-09,5,5,"[-6.031808853149414, -5.448311805725098, -4.532525062561035, -5.901183128356934, -5.586177825927734, -0.02423495426774025]",0.9760562181472778
2,"['    @Test\n    public void testNullCalendar() {\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND));\n\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND));\n\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND));\n\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND));\n\n        assertThrows(\n                IllegalArgumentException.class,\n                () -> DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND));\n    }\n']",ILLISECOND;Days;Illegal;Calendar;Minutes;ILLISECOND;null;Throws;Argument;Throws,7.894414011389017e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.637978807091713e-10,5,5,"[-5.999258518218994, -5.439802646636963, -4.566669464111328, -5.879607677459717, -5.553868770599365, -0.024171538650989532]",0.976118266582489
2,"['    @Test\n    public void testInvalidFragmentWithDate() {\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMilliseconds(aDate, 0));\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInSeconds(aDate, 0));\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMinutes(aDate, 0));\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInHours(aDate, 0));\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInDays(aDate, 0));\n    }\n']",Days;In;In;Throws;In;Throws;Date;Date;Date;class,1.862645149230957e-09;1.1641532182693481e-09;1.1350493878126144e-09;1.0477378964424133e-09;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.044238090515137, -5.650660991668701, -4.549482822418213, -5.8695173263549805, -5.47529935836792, -0.023752428591251373]",0.9765274524688721
2,"['    @Test\n    public void testInvalidFragmentWithCalendar() {\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMilliseconds(aCalendar, 0));\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInSeconds(aCalendar, 0));\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMinutes(aCalendar, 0));\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInHours(aCalendar, 0));\n        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInDays(aCalendar, 0));\n    }\n']",Calendar;Days;Calendar;Second;Calendar;Fragment;Throws;Utils;Hours;Fragment,1.862645149230957e-09;1.862645149230957e-09;1.6589183360338211e-09;1.6298145055770874e-09;1.1059455573558807e-09;6.548361852765083e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.982921123504639, -5.600827217102051, -4.607501983642578, -5.833971977233887, -5.4385552406311035, -0.023744862526655197]",0.9765348434448242
2,"['    @Test\n    public void testMillisecondFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));\n    }\n']",Hours;Days;Milliseconds;Equals;Date;Calendar;Fragment;Fragment;In;Calendar,2.7939677238464355e-09;2.3283064365386963e-09;1.5425030142068863e-09;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-6.1493048667907715, -5.721980094909668, -4.37592887878418, -5.9516377449035645, -5.5390849113464355, -0.02482190914452076]",0.9754835963249207
2,"['    @Test\n    public void testMillisecondFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));\n    }\n']",Unit;arger;Hours;Millisecond;In;Utils;Date;ILLISECOND;Calendar;In,5.122274160385132e-09;4.6566128730773926e-09;1.862645149230957e-09;9.458744898438454e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.16157341003418, -5.687050819396973, -4.356254577636719, -5.984961032867432, -5.571495056152344, -0.024954698979854584]",0.9753540754318237
2,"['    @Test\n    public void testSecondFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));\n    }\n']",Days;Minutes;SECOND;Date;In;In;Second;get;Fragment;SECOND,2.7939677238464355e-09;2.3283064365386963e-09;1.3969838619232178e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.121093273162842, -5.749028205871582, -4.447789192199707, -5.919181823730469, -5.4878997802734375, -0.024200860410928726]",0.9760897159576416
2,"['    @Test\n    public void testSecondFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));\n    }\n']",Hours;Days;Calendar;Calendar;Fragment;Calendar;Utils;In;Date;Fragment,1.862645149230957e-09;1.862645149230957e-09;1.3387762010097504e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-6.07834005355835, -5.7237324714660645, -4.506386756896973, -5.901302814483643, -5.453000068664551, -0.02390037663280964]",0.9763829708099365
2,"['    @Test\n    public void testMinuteFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));\n        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));\n    }\n']",MINUTE;arger;Date;Date;MINUTE;Fragment;Calendar;In;Fragment;Fragment,2.7939677238464355e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-6.194349765777588, -5.760955333709717, -4.349538803100586, -5.990025043487549, -5.5409417152404785, -0.024834001436829567]",0.9754717350006104
2,"['    @Test\n    public void testMinuteFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));\n        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));\n    }\n']",MINUTE;Fragment;Minute;In;Fragment;In;Calendar;Calendar;get;MINUTE,6.51925802230835e-09;2.561137080192566e-09;2.153683453798294e-09;1.367880031466484e-09;1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;6.693881005048752e-10;4.656612873077393e-10,5,5,"[-6.1074323654174805, -5.725858688354492, -4.4907636642456055, -5.931573867797852, -5.484566688537598, -0.023784209042787552]",0.9764965176582336
2,"['    @Test\n    public void testHourOfDayFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));\n    }\n']",Hour;OUR;Date;Hours;OF;DAY;OF;get;In;Date,1.210719347000122e-08;1.1175870895385742e-08;5.587935447692871e-09;2.3283064365386963e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.076858997344971, -5.692633152008057, -4.534414768218994, -5.906553745269775, -5.467088222503662, -0.023621108382940292]",0.9766556620597839
2,"['    @Test\n    public void testHourOfDayFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));\n    }\n']",Hours;arger;Calendar;Days;DAY;Calendar;Day;In;Fragment;Utils,3.3760443329811096e-09;3.259629011154175e-09;2.2118911147117615e-09;1.862645149230957e-09;1.2223608791828156e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10,5,5,"[-6.037269115447998, -5.66960334777832, -4.5714263916015625, -5.888667583465576, -5.440529823303223, -0.02356370911002159]",0.976711630821228
2,"['    @Test\n    public void testDayOfYearFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));\n    }\n']",Date;OF;In;Date;In;Utils;Date;arger;get;Day,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;0.0;-8.149072527885437e-10;-1.1641532182693481e-09,5,5,"[-6.128661155700684, -5.695515155792236, -4.462386131286621, -5.963659763336182, -5.502362251281738, -0.024008849635720253]",0.9762770533561707
2,"['    @Test\n    public void testDayOfYearFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));\n    }\n']",EAR;OF;Date;Fragment;Calendar;Day;In;get;Calendar;Unit,1.280568540096283e-09;1.1641532182693481e-09;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-6.088303089141846, -5.663376331329346, -4.514749050140381, -5.9341511726379395, -5.473748683929443, -0.023810632526874542]",0.9764707088470459
2,"['    @Test\n    public void testDateFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));\n    }\n']",arger;Unit;Date;ATE;Date;get;Utils;Calendar;Fragment;In,4.190951585769653e-09;1.7462298274040222e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-6.076427459716797, -5.672058582305908, -4.522678375244141, -5.936282157897949, -5.456438064575195, -0.02378828264772892]",0.9764924049377441
2,"['    @Test\n    public void testDateFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));\n    }\n']",Calendar;Date;In;Calendar;Date;Utils;Fragment;In;get;Equals,1.862645149230957e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.2223608791828156e-09;5.820766091346741e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-8.149072527885437e-10;-1.0477378964424133e-09,5,5,"[-6.118933200836182, -5.680635452270508, -4.459908962249756, -5.976596832275391, -5.497642517089844, -0.02409752830862999]",0.9761905074119568
2,"['    @Test\n    public void testMillisecondsOfSecondWithDate() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);\n        assertEquals(millis, testResult);\n    }\n']",Utils;Second;Result;Date;Equals;get;final;Result;SECOND;Date,5.471520125865936e-09;3.725290298461914e-09;2.7939677238464355e-09;1.862645149230957e-09;6.984919309616089e-10;4.656612873077393e-10;-8.149072527885437e-10;-9.313225746154785e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-6.185088157653809, -5.692580223083496, -4.381783485412598, -6.015721321105957, -5.563863754272461, -0.024505792185664177]",0.9757921695709229
2,"['    @Test\n    public void testMillisecondsOfSecondWithCalendar() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);\n        assertEquals(millis, testResult);\n        assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);\n    }\n']",SECOND;Calendar;Fragment;Second;ILLISECOND;Result;get;Equals;Calendar;Result,7.2177499532699585e-09;3.14321368932724e-09;3.026798367500305e-09;1.862645149230957e-09;1.0477378964424133e-09;3.4924596548080444e-10;1.7462298274040222e-10;1.0186340659856796e-10;5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-6.083611965179443, -5.7054877281188965, -4.54233455657959, -5.907375812530518, -5.462207317352295, -0.02349349670112133]",0.9767804145812988
2,"['    @Test\n    public void testMillisecondsOfMinuteWithDate() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n    }\n']",Milliseconds;PER;Calendar;SECOND;Equals;In;Utils;get;final;Result,2.735760062932968e-09;2.5029294192790985e-09;1.979060471057892e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-6.306422710418701, -5.669765949249268, -4.12870979309082, -6.088785171508789, -5.675510883331299, -0.027447236701846123]",0.9729260206222534
2,"['    @Test\n    public void testMillisecondsOfMinuteWithCalender() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n    }\n']",Calendar;Calender;Milliseconds;get;Utils;mill;Date;Result;Result;ILLIS,2.7939677238464355e-09;2.561137080192566e-09;2.561137080192566e-09;1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;6.984919309616089e-10;1.7462298274040222e-10;0.0;-5.820766091346741e-11,5,5,"[-6.331344127655029, -5.658761978149414, -4.054019451141357, -6.109907627105713, -5.691740989685059, -0.028619125485420227]",0.9717864990234375
2,"['    @Test\n    public void testSecondsofMinuteWithDate() {\n        final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);\n        assertEquals(seconds, testResult);\n    }\n']",Secondso;Second;Date;final;Result;In;long;Date;Utils;get,4.190951585769653e-09;1.862645149230957e-09;1.6298145055770874e-09;1.0477378964424133e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-11,5,5,"[-6.223984718322754, -5.724297046661377, -4.314444541931152, -6.027940273284912, -5.568800449371338, -0.02516036108136177]",0.9751535058021545
2,"['    @Test\n    public void testSecondsofMinuteWithCalendar() {\n        final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);\n        assertEquals(seconds, testResult);\n        assertEquals(aCalendar.get(Calendar.SECOND), testResult);\n    }\n']",Result;Calendar;seconds;Equals;In;get;final;Equals;Utils;Result,1.6298145055770874e-09;1.1641532182693481e-09;9.313225746154785e-10;6.111804395914078e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10,5,5,"[-6.127105236053467, -5.723000526428223, -4.483042240142822, -5.932309150695801, -5.498217582702637, -0.02377873845398426]",0.9765018820762634
2,"['    @Test\n    public void testMillisecondsOfHourWithDate() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n    }\n']",Hour;PER;Fragment;Milliseconds;OF;In;ILLIS;long;OUR;Date,3.725290298461914e-09;3.259629011154175e-09;1.6298145055770874e-09;1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.89530235528946e-10;4.656612873077393e-10;4.656612873077393e-10;0.0,5,5,"[-6.232460975646973, -5.674276351928711, -4.344422340393066, -6.016923904418945, -5.645756721496582, -0.024647695943713188]",0.9756535887718201
2,"['    @Test\n    public void testMillisecondsOfHourWithCalendar() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n    }\n']",Fragment;PER;OUR;Milliseconds;Utils;Calendar;Calendar;ILLIS;SECOND;Date,3.958120942115784e-09;3.725290298461914e-09;3.725290298461914e-09;2.3865140974521637e-09;1.8044374883174896e-09;1.6007106751203537e-09;1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10,5,5,"[-6.2112040519714355, -5.673150062561035, -4.396046161651611, -5.998908519744873, -5.623110294342041, -0.02415408380329609]",0.9761353135108948
2,"['    @Test\n    public void testSecondsofHourWithDate() {\n        final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);\n        assertEquals(\n                seconds\n                        + (minutes\n                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n                testResult);\n    }\n']",Second;In;OUR;Fragment;Hour;seconds;MINUTE;Secondso;SECOND;PER,4.540197551250458e-09;2.7939677238464355e-09;2.561137080192566e-09;2.3283064365386963e-09;1.862645149230957e-09;1.6298145055770874e-09;1.5425030142068863e-09;1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10,5,5,"[-6.100739002227783, -5.531240940093994, -4.491454601287842, -5.928130149841309, -5.579765319824219, -0.024132322520017624]",0.9761565327644348
2,"['    @Test\n    public void testSecondsofHourWithCalendar() {\n        final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);\n        assertEquals(\n                seconds\n                        + (minutes\n                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n                testResult);\n    }\n']",PER;ILLIS;Date;Secondso;Hour;Calendar;ILLIS;Fragment;Date;get,2.0954757928848267e-09;2.0954757928848267e-09;1.862645149230957e-09;1.5133991837501526e-09;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-6.098503112792969, -5.526690483093262, -4.495387554168701, -5.930507659912109, -5.584025859832764, -0.02408798597753048]",0.9761996865272522
2,"['    @Test\n    public void testMinutesOfHourWithDate() {\n        final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);\n        assertEquals(minutes, testResult);\n    }\n']",OUR;Minutes;Result;Fragment;get;Date;final;DAY;Date;Date,6.51925802230835e-09;2.7939677238464355e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-6.168611526489258, -5.6959004402160645, -4.438740253448486, -5.97863245010376, -5.532688140869141, -0.024038875475525856]",0.9762477278709412
2,"['    @Test\n    public void testMinutesOfHourWithCalendar() {\n        final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);\n        assertEquals(minutes, testResult);\n    }\n']",Minutes;Fragment;DAY;Equals;OF;get;long;Calendar;Hour;In,7.916241884231567e-09;4.6566128730773926e-09;1.862645149230957e-09;1.7462298274040222e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0,5,5,"[-6.159656047821045, -5.701059818267822, -4.455826759338379, -5.973139762878418, -5.521158695220947, -0.02389676868915558]",0.9763864874839783
2,"['    @Test\n    public void testMillisecondsOfDayWithDate() {\n        long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);\n        final long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);\n        assertEquals(expectedValue, testresult);\n        testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testresult);\n    }\n']",OUR;Calendar;PER;Date;OF;Value;MINUTE;Date;ILLIS;expected,2.7939677238464355e-09;2.444721758365631e-09;1.862645149230957e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10,5,5,"[-6.059749126434326, -5.6036458015441895, -4.563971519470215, -5.890328407287598, -5.531256198883057, -0.023439699783921242]",0.9768329858779907
2,"['    @Test\n    public void testMillisecondsOfDayWithCalendar() {\n        long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);\n        final long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);\n        assertEquals(expectedValue, testresult);\n        testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testresult);\n    }\n']",ATE;DAY;ILLIS;Equals;Milliseconds;Equals;PER;ILLIS;EAR;expected,2.7939677238464355e-09;2.561137080192566e-09;1.6298145055770874e-09;1.6152625903487206e-09;1.6007106751203537e-09;1.1641532182693481e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10,5,5,"[-6.040757656097412, -5.599407196044922, -4.58539342880249, -5.874958038330078, -5.509809970855713, -0.023407094180583954]",0.9768646359443665
2,"['    @Test\n    public void testSecondsOfDayWithDate() {\n        long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);\n        final long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n        assertEquals(expectedValue, testresult);\n        testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testresult);\n    }\n']",minutes;Calendar;SECOND;OUR;Date;ATE;ILLIS;ILLIS;Date;Calendar,5.587935447692871e-09;4.190951585769653e-09;3.725290298461914e-09;3.6088749766349792e-09;3.259629011154175e-09;3.259629011154175e-09;2.6775524020195007e-09;2.0954757928848267e-09;2.0954757928848267e-09;1.979060471057892e-09,5,5,"[-6.129282474517822, -5.619716167449951, -4.4599432945251465, -5.956430912017822, -5.597179889678955, -0.02394891157746315]",0.9763357043266296
2,"['    @Test\n    public void testSecondsOfDayWithCalendar() {\n        long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);\n        final long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n        assertEquals(expectedValue, testresult);\n        testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testresult);\n    }\n']",Calendar;OUR;ILLIS;result;minutes;Second;result;DAY;Utils;result,1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.966285243630409e-10;4.656612873077393e-10,5,5,"[-6.096524238586426, -5.603808403015137, -4.50886344909668, -5.933823108673096, -5.569111347198486, -0.023685956373810768]",0.9765923619270325
2,"['    @Test\n    public void testMinutesOfDayWithDate() {\n        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);\n        final long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;\n        assertEquals(expectedValue, testResult);\n        testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testResult);\n    }\n']",ATE;PER;OUR;Date;MINUTE;ILLIS;Result;Date;Date;Utils,2.561137080192566e-09;1.862645149230957e-09;1.7462298274040222e-09;1.280568540096283e-09;1.2223608791828156e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10,5,5,"[-6.116163730621338, -5.631478786468506, -4.488033771514893, -5.947822093963623, -5.569979667663574, -0.023734502494335175]",0.9765450358390808
2,"['    @Test\n    public void testMinutesOfDayWithCalendar() {\n        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);\n        final long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;\n        assertEquals(expectedValue, testResult);\n        testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testResult);\n    }\n']",OUR;Date;Result;DAY;Value;Utils;Fragment;expected;expected;Equals,2.3283064365386963e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;8.003553375601768e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10,5,5,"[-6.074368476867676, -5.618826866149902, -4.550133228302002, -5.912257194519043, -5.5250678062438965, -0.023460544645786285]",0.9768125414848328
2,"['    @Test\n    public void testHoursOfDayWithDate() {\n        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);\n        final long expectedValue = hours;\n        assertEquals(expectedValue, testResult);\n        testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testResult);\n    }\n']",Fragment;Day;expected;expected;OF;ATE;Equals;Fragment;In;Equals,2.35741026699543e-09;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.985435962677002, -5.631990432739258, -4.624080181121826, -5.8291335105896, -5.398507595062256, -0.02365056425333023]",0.9766268134117126
2,"['    @Test\n    public void testHoursOfDayWithCalendar() {\n        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);\n        final long expectedValue = hours;\n        assertEquals(expectedValue, testResult);\n        testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testResult);\n    }\n']",Hours;expected;Hours;long;final;Utils;long;Fragment;Calendar;OF,6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;1.1641532182693481e-10;1.1641532182693481e-10;7.275957614183426e-11,5,5,"[-5.993546009063721, -5.6279754638671875, -4.619265556335449, -5.8422980308532715, -5.413511753082275, -0.02358478307723999]",0.9766911864280701
2,"['    @Test\n    public void testMillisecondsOfMonthWithDate() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY),\n                testResult);\n    }\n']",minutes;DAY;seconds;Date;days;Result;MINUTE;ILLIS;ILLIS;mill,2.7939677238464355e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.862645149230957e-09;1.57160684466362e-09;1.3387762010097504e-09;1.0477378964424133e-09;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10,5,5,"[-6.120388507843018, -5.553487777709961, -4.487965106964111, -5.939849853515625, -5.618229866027832, -0.023861035704612732]",0.9764214754104614
2,"['    @Test\n    public void testMillisecondsOfMonthWithCalendar() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY),\ntestResult);\n    }\n']",minutes;Month;OUR;Milliseconds;hours;Date;days;Date;MONTH;SECOND,7.916241884231567e-09;5.587935447692871e-09;4.190951585769653e-09;1.862645149230957e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;9.313225746154785e-10,5,5,"[-6.144092559814453, -5.624752044677734, -4.490810871124268, -5.9493913650512695, -5.590746879577637, -0.023580707609653473]",0.9766952395439148
2,"['    @Test\n    public void testSecondsOfMonthWithDate() {\n        final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);\n        assertEquals(\n                seconds\n                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_SECOND,\n                testResult);\n    }\n']",Fragment;Month;DAY;hours;Date;Equals;OUR;In;long;get,4.190951585769653e-09;3.725290298461914e-09;3.4924596548080444e-09;2.7939677238464355e-09;1.862645149230957e-09;1.7462298274040222e-09;1.6298145055770874e-09;1.3969838619232178e-09;1.0477378964424133e-09;8.149072527885437e-10,5,5,"[-6.1156792640686035, -5.524396896362305, -4.465607643127441, -5.934834003448486, -5.618114948272705, -0.024262994527816772]",0.9760288596153259
2,"['    @Test\n    public void testSecondsOfMonthWithCalendar() {\n        final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);\n        assertEquals(\n                seconds\n                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_SECOND,\n                testResult);\n    }\n']",Month;In;OUR;Utils;PER;final;Equals;ILLIS;Second;ILLIS,2.6775524020195007e-09;1.3969838619232178e-09;9.313225746154785e-10;9.022187441587448e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-6.0984601974487305, -5.519937515258789, -4.495665073394775, -5.919843673706055, -5.6011810302734375, -0.024076465517282486]",0.9762111902236938
2,"['    @Test\n    public void testMinutesOfMonthWithDate() {\n        final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);\n        assertEquals(minutes\n                                + ((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_MINUTE,\n                testResult);\n    }\n']",Minutes;Date;Calendar;ILLIS;Equals;OUR;Date;long;days;PER,3.259629011154175e-09;2.7939677238464355e-09;2.3283064365386963e-09;1.862645149230957e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;6.984919309616089e-10,5,5,"[-6.120548248291016, -5.571017742156982, -4.482881546020508, -5.93776273727417, -5.6029558181762695, -0.023913180455565453]",0.9763704538345337
2,"['    @Test\n    public void testMinutesOfMonthWithCalendar() {\n        final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);\n        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_MINUTE,\n                testResult);\n    }\n']",Month;Equals;PER;In;ILLIS;get;ILLIS;Utils;Date;days,4.190951585769653e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.127499103546143, -5.592058181762695, -4.502650260925293, -5.937893390655518, -5.589489936828613, -0.023640668019652367]",0.9766364693641663
2,"['    @Test\n    public void testHoursOfMonthWithDate() {\n        final long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);\n        assertEquals(hours + (((days - 1) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_HOUR,\n                testResult);\n    }\n']",Hours;MONTH;Month;Date;DAY;ILLIS;long;Date;Utils;Equals,6.51925802230835e-09;5.122274160385132e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-6.12814998626709, -5.593442440032959, -4.494077682495117, -5.936766624450684, -5.575742244720459, -0.02378770150244236]",0.9764930009841919
2,"['    @Test\n    public void testHoursOfMonthWithCalendar() {\n        final long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);\n        assertEquals( hours +(((days - 1) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_HOUR,\n                testResult);\n    }\n']",MONTH;Month;Calendar;Calendar;PER;Equals;Result;Utils;Fragment;ILLIS,4.190951585769653e-09;2.561137080192566e-09;2.0954757928848267e-09;1.4551915228366852e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.112450122833252, -5.594727993011475, -4.518186092376709, -5.925919055938721, -5.560617446899414, -0.02363426424562931]",0.9766429662704468
2,"['    @Test\n    public void testMillisecondsOfYearWithDate() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);\n        final Calendar cal = Calendar.getInstance();\n        cal.setTime(aDate);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1)* DateUtils.MILLIS_PER_DAY),\n                testResult);\n    }\n']",MINUTE;Milliseconds;hours;ILLIS;seconds;OF;PER;PER;Year;EAR,2.3283064365386963e-09;1.6298145055770874e-09;1.6298145055770874e-09;1.1641532182693481e-09;9.89530235528946e-10;9.604264050722122e-10;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;4.3655745685100555e-10,5,5,"[-6.088119983673096, -5.544363498687744, -4.535447597503662, -5.91071081161499, -5.580419540405273, -0.02366022765636444]",0.9766175746917725
2,"['    @Test\n    public void testMillisecondsOfYearWithCalendar() {\n        final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                + (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY),\ntestResult);\n    }\n']",seconds;Year;Date;EAR;Equals;Fragment;DAY;Utils;In;get,3.725290298461914e-09;2.3865140974521637e-09;2.3283064365386963e-09;1.1641532182693481e-09;9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10,5,5,"[-6.1290812492370605, -5.622681140899658, -4.509546279907227, -5.930576801300049, -5.576522350311279, -0.023513874039053917]",0.9767604470252991
2,['    @Test\n    public void nothing() {\n        //tests fail when not running a maven based build. need to figure out how to determine that\n    }\n'],to;need;nothing;running;fail;that;build;to;out;figure,2.2118911147117615e-09;1.3969838619232178e-09;9.313225746154785e-10;5.820766091346741e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;0.0;-2.3283064365386963e-10;-6.984919309616089e-10,5,5,"[-6.0545334815979, -5.586122989654541, -4.5577473640441895, -5.939685344696045, -5.419140815734863, -0.02393028885126114]",0.9763537645339966
2,"['//    @Test\n//    public void testUpdate() throws Exception{\n//        Verifier verifier=createVerifier();\n//\n//        verifier.executeGoal( ""clean"" );\n//        verifier.executeGoal( ""install"" );\n//\n//        //Verify everithing has gone well.\n//        verifier.verifyErrorFreeLog();\n//\n//        //Reset the streams before executing the verifier\n//        verifier.resetStreams();\n//    }\n']",has;execute;gone;verifier;verifier;verifier;execute;Error;install;Goal,1.280568540096283e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.384208634495735e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.030498504638672, -5.547634124755859, -4.576014041900635, -5.900273323059082, -5.427586555480957, -0.02401525154709816]",0.9762707948684692
2,"['//    @Test\n//    public void testRollbackTag() throws Exception {\n//        Verifier verifier= createVerifier();\n//\n//\n//        verifier.executeGoal(""clean"");\n//        verifier.executeGoal(""liquibase:tag"");\n//        verifier.executeGoal(""package""); //runs update that is bound to test phase\n//        verifier.executeGoal(""liquibase:rollback"");\n//        //If we can reupdate rollback has succeded\n//        verifier.executeGoal(""liquibase:update"");\n//\n//        //Verify everithing has gone well.\n//        verifier.verifyErrorFreeLog();\n//\n//        //Reset the streams before executing the verifier\n//        verifier.resetStreams();\n//    }\n']",to;execute;gone;the;Verify;Goal;phase;Verifier;verifier;verifier,6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.994027137756348, -5.541717052459717, -4.619399547576904, -5.865683078765869, -5.409698963165283, -0.02386266551911831]",0.9764198064804077
2,"['    @Test\n    public void sampleChangeLogs() throws Exception {\n        new XMLChangeLogSAXParser().parse(""changelogs/cache/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/db2/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/derby/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/firebird/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/h2/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/hsqldb/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/maxdb/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/mysql/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/oracle/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/pgsql/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/sybase/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/asany/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n        new XMLChangeLogSAXParser().parse(""changelogs/unsupported/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());\n    }\n']",hs;XMLChange;Log;SAXParser;cache;Exception;SAXParser;changel;Log;complete,4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.001776687800884e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.898082256317139, -5.3764543533325195, -4.605363845825195, -5.821054935455322, -5.482364654541016, -0.024795744568109512]",0.9755091667175293
2,['    @Test\n    public void testRunChangeLog() throws Exception {\n        super.testRunChangeLog();    //To change body of overridden methods use File | Settings | File Templates.\n    }\n'],body;Templates;overridden;super;Exception;Change;Run;Change;change;of,1.6298145055770874e-09;1.6298145055770874e-09;1.2223608791828156e-09;7.566995918750763e-10;6.984919309616089e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.993757247924805, -5.511195182800293, -4.587895393371582, -5.90183687210083, -5.436002731323242, -0.024088801816105843]",0.9761989116668701
2,"['    @Test\n    public void snapshot() throws Exception {\n        if (getDatabase() == null) {\n            return;\n        }\n\n\n        runCompleteChangeLog();\n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(getDatabase().getDefaultSchema(), getDatabase(), new SnapshotControl(getDatabase()));\n        System.out.println(snapshot);\n    }\n']",Exception;if;System;Instance;new;Change;snapshot;Database;null;get,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.0100178718566895, -5.584396839141846, -4.605895042419434, -5.860015869140625, -5.425448417663574, -0.02373659797012806]",0.9765428900718689
2,"['    @Test\n    public void dateDefaultValue() throws Exception {\n        if (getDatabase() == null) {\n            return;\n        }\n        ExecutorService.getInstance().getExecutor(getDatabase()).execute(new RawSqlStatement(""DROP TABLE IF "" +\n                                                                                                     ""EXISTS ad""));\n        \n        try {\n            ExecutorService.getInstance().getExecutor(getDatabase()).execute(new RawSqlStatement(""CREATE TABLE ad (\\n"" +\n                                                                                                         ""ad_id int(10) unsigned NOT NULL AUTO_INCREMENT,\\n"" +\n                                                                                                         ""advertiser_id int(10) unsigned NOT NULL,\\n"" +\n                                                                                                         ""ad_type_id int(10) unsigned NOT NULL,\\n"" +\n                                                                                                         ""name varchar(155) NOT NULL DEFAULT \'\',\\n"" +\n                                                                                                         ""label varchar(155)NOT NULL DEFAULT \'\',\\n"" +\n                                                                                                         ""description text NOT NULL,\\n"" +\n                                                                                                         ""active tinyint(1) NOT NULL DEFAULT \'0\',\\n"" +\n                                                                                                         ""created datetime NOT NULL DEFAULT \'0000-00-00 00:00:00\',\\n"" +\n                                                                                                         ""updated datetime DEFAULT \'0000-00-00 00:00:00\',\\n"" +\n                                                                                                         ""PRIMARY KEY (ad_id),\\n"" +\n                                                                                                         ""KEY active (active)\\n"" +\n                                                                                                         "")""));\n        } catch (DatabaseException e) {\n            if (e.getCause() instanceof SQLSyntaxErrorException) {\n                Scope.getCurrentScope().getLog(getClass()).warning(LogType.LOG, ""MySQL returned DatabaseException"", e);\n                assumeTrue(""MySQL seems to run in strict mode (no datetime literals with 0000-00-00 allowed). "" + ""Cannot run this test"", false);\n                \n            } else {\n                throw e;\n            }\n        }\n        \n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, getDatabase(), new SnapshotControl(getDatabase()));\n        Column createdColumn = snapshot.get(new Column().setRelation(new Table().setName(""ad"").setSchema(new Schema())).setName(""created""));\n        \n        Object defaultValue = createdColumn.getDefaultValue();\n        assertNotNull(defaultValue);\n        assertEquals(""0000-00-00 00:00:00"", defaultValue);\n    }\n']",Database;ad;date;execute;ad;NULL;ql;TABLE;Service;execute,1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.867518901824951, -5.142989635467529, -4.586169242858887, -5.778552532196045, -5.5532989501953125, -0.026169229298830032]",0.9741702079772949
2,['    @Test\n    public void testRunChangeLog() throws Exception {\n        super.testRunChangeLog();    //To change body of overridden methods use File | Settings | File Templates.\n    }\n'],body;Templates;overridden;super;Exception;Change;Run;Change;change;of,1.6298145055770874e-09;1.6298145055770874e-09;1.2223608791828156e-09;7.566995918750763e-10;6.984919309616089e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.993757247924805, -5.511195182800293, -4.587895393371582, -5.90183687210083, -5.436002731323242, -0.024088801816105843]",0.9761989116668701
2,"['    @Test\n    public void snapshot() throws Exception {\n        if (getDatabase() == null) {\n            return;\n        }\n\n\n        runCompleteChangeLog();\n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(getDatabase().getDefaultSchema(), getDatabase(), new SnapshotControl(getDatabase()));\n        System.out.println(snapshot);\n    }\n']",Exception;if;System;Instance;new;Change;snapshot;Database;null;get,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.0100178718566895, -5.584396839141846, -4.605895042419434, -5.860015869140625, -5.425448417663574, -0.02373659797012806]",0.9765428900718689
2,"['    @Test\n    public void dateDefaultValue() throws Exception {\n        if (getDatabase() == null) {\n            return;\n        }\n        ExecutorService.getInstance().getExecutor(getDatabase()).execute(new RawSqlStatement(""DROP TABLE IF "" +\n             ""EXISTS ad""));\n    \n        try {\n            ExecutorService.getInstance().getExecutor(getDatabase()).execute(new RawSqlStatement(""CREATE TABLE ad (\\n"" +\n                    ""ad_id int(10) unsigned NOT NULL AUTO_INCREMENT,\\n"" +\n                    ""advertiser_id int(10) unsigned NOT NULL,\\n"" +\n                    ""ad_type_id int(10) unsigned NOT NULL,\\n"" +\n                    ""name varchar(155) NOT NULL DEFAULT \'\',\\n"" +\n                    ""label varchar(155)NOT NULL DEFAULT \'\',\\n"" +\n                    ""description text NOT NULL,\\n"" +\n                    ""active tinyint(1) NOT NULL DEFAULT \'0\',\\n"" +\n                    ""created datetime NOT NULL DEFAULT \'0000-00-00 00:00:00\',\\n"" +\n                    ""updated datetime DEFAULT \'0000-00-00 00:00:00\',\\n"" +\n                    ""PRIMARY KEY (ad_id),\\n"" +\n                    ""KEY active (active)\\n"" +\n                    "")""));\n        } catch (DatabaseException e) {\n            if (e.getCause() instanceof SQLSyntaxErrorException) {\n                Scope.getCurrentScope().getLog(getClass()).warning(LogType.LOG, ""MariaDB returned DatabaseException"", e);\n                assumeTrue(""MariaDB seems to run in strict mode (no datetime literals with 0000-00-00 allowed). "" + ""Cannot run this test"", false);\n                \n            } else {\n                throw e;\n            }\n        }\n    \n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, getDatabase(), new SnapshotControl(getDatabase()));\n        Column createdColumn = snapshot.get(new Column().setRelation(new Table().setName(""ad"").setSchema(new Schema())).setName(""created""));\n\n        Object defaultValue = createdColumn.getDefaultValue();\n        assertNotNull(defaultValue);\n        assertEquals(""0000-00-00 00:00:00"", defaultValue);\n    }\n']",Executor;Instance;DROP;EXISTS;INCREMENT;Value;Executor;Database;Service;get,1.979060471057892e-09;1.3387762010097504e-09;9.89530235528946e-10;8.440110832452774e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.900707244873047, -5.346467971801758, -4.651616096496582, -5.77399206161499, -5.495798110961914, -0.02455895021557808]",0.9757400751113892
2,"['    @Test\n    public void diffToPrintStream() throws Exception{\n        if (getDatabase() == null) {\n            return;\n        }\n\n        runCompleteChangeLog();\n\n        DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(getDatabase(), null, new CompareControl());\n        new DiffToReport(diffResult, System.out).print();\n    }\n']",diff;Print;if;Diff;Result;Result;print;Log;Stream;Complete,1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;5.384208634495735e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.975246429443359, -5.529980182647705, -4.631840229034424, -5.833817481994629, -5.426002502441406, -0.023853585124015808]",0.9764286875724792
2,"['    @Test\n    public void diffToChangeLog() throws Exception{\n        if (getDatabase() == null) {\n            return;\n        }\n\n        runCompleteChangeLog();\n\n        DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(getDatabase(), null, new CompareControl());\n        File outputFile = new File(""diffToChangeLog_"" + getDatabase().getShortName() + "".log"");\n        if (outputFile.exists())\n            outputFile.delete();\n        PrintStream writer = new PrintStream(outputFile);\n\n        new DiffToChangeLog(diffResult, new DiffOutputControl(true, true, true, null)).print(writer);\n        writer.close();\n\n\n    }\n']",delete;Log;Generator;Compare;output;Complete;Control;Result;output;Output,5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.994095325469971, -5.561890602111816, -4.631957530975342, -5.810649871826172, -5.43658447265625, -0.023699112236499786]",0.976579487323761
2,"['    @Test\n    public void snapshot() throws Exception {\n        if (getDatabase() == null) {\n            return;\n        }\n\n\n        runCompleteChangeLog();\n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(getDatabase().getDefaultSchema(), getDatabase(), new SnapshotControl(getDatabase()));\n        System.out.println(snapshot);\n    }\n']",Exception;if;System;Instance;new;Change;snapshot;Database;null;get,1.3969838619232178e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.0100178718566895, -5.584396839141846, -4.605895042419434, -5.860015869140625, -5.425448417663574, -0.02373659797012806]",0.9765428900718689
2,['    @Test\n    public void canSpecifyDbmsForIndividualChanges() throws Exception {\n        runChangeLogFile(changeSpecifyDbmsChangeLog);\n    }\n'],Changes;change;Exception;Change;Log;File;Log;can;Individual;Dbms,3.259629011154175e-09;3.259629011154175e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;0.0;0.0;0.0,5,5,"[-6.024882793426514, -5.615846157073975, -4.551750659942627, -5.9076948165893555, -5.38668966293335, -0.02419213391840458]",0.9760981798171997
2,['    @Test\n    public void h2IsExcludedFromRunningChangeset() throws Exception {\n        runChangeLogFile(dbmsExcludeChangelog);\n    }\n'],Excluded;Change;Running;Exception;Exclude;From;File;Changelog;Log;run,3.725290298461914e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.1641532182693481e-09;1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;-1.0477378964424133e-09;-3.958120942115784e-09,5,5,"[-6.008684158325195, -5.604297637939453, -4.557720184326172, -5.895374298095703, -5.379377841949463, -0.024280447512865067]",0.9760119318962097
2,"['    @Test\n    public void runYamlChangelog() throws Exception {\n        if (getDatabase() == null) {\n            return;\n        }\n\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        //run again to test changelog testing logic\n        liquibase = createLiquibase(""changelogs/yaml/common.tests.changelog.yaml"");\n        liquibase.setChangeLogParameter(""loginuser"", getUsername());\n\n        try {\n            liquibase.update(this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n\n\n    }\n']",aml;Exception;loginuser;to;Changelog;Username;iquibase;liquibase;liquibase;catch,1.0477378964424133e-09;9.604264050722122e-10;8.294591680169106e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.966285243630409e-10;4.0745362639427185e-10;3.2741809263825417e-10;3.2014213502407074e-10,5,5,"[-6.000993728637695, -5.495179176330566, -4.618682384490967, -5.852047920227051, -5.468879699707031, -0.023819945752620697]",0.9764614105224609
2,"['    @Test\n    public void runJsonChangelog() throws Exception {\n        if (getDatabase() == null) {\n            return;\n        }\n\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        //run again to test changelog testing logic\n        liquibase = createLiquibase(""changelogs/json/common.tests.changelog.json"");\n        liquibase.setChangeLogParameter(""loginuser"", getUsername());\n\n        try {\n            liquibase.update(this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n    }\n']",print;tests;Descriptive;testing;Database;liquibase;Validation;json;this;common,9.313225746154785e-10;9.313225746154785e-10;7.130438461899757e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.8917489796876907e-10,5,5,"[-6.002603054046631, -5.505424976348877, -4.621624946594238, -5.850796222686768, -5.461856842041016, -0.02377745695412159]",0.9765030145645142
2,['    @Test\n    public void testGenerateChangeLogWithNoChanges() throws Exception {\n        super.testGenerateChangeLogWithNoChanges();    //To change body of overridden methods use File | Settings |\n        // File Templates.\n    }\n'],WithNo;Exception;Log;File;use;Generate;Changes;of;change;Generate,1.3969838619232178e-09;1.280568540096283e-09;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.996314525604248, -5.46273136138916, -4.58352518081665, -5.900166034698486, -5.465251445770264, -0.024209586903452873]",0.976081132888794
2,['    @Test\n    public void testRunChangeLog() throws Exception {\n        super.testRunChangeLog();    //To change body of overridden methods use File | Settings | File Templates.\n    }\n'],body;Templates;overridden;super;Exception;Change;Run;Change;change;of,1.6298145055770874e-09;1.6298145055770874e-09;1.2223608791828156e-09;7.566995918750763e-10;6.984919309616089e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.993757247924805, -5.511195182800293, -4.587895393371582, -5.90183687210083, -5.436002731323242, -0.024088801816105843]",0.9761989116668701
2,"['    @Test\n    public void smartDataLoad() throws Exception {\n        if (this.getDatabase() == null) {\n            return;\n        }\n\n        Liquibase liquibase = createLiquibase(""changelogs/common/smartDataLoad.changelog.xml"");\n        clearDatabase();\n\n        try {\n            liquibase.update(this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n\n        // check that the automatically rollback now works too\n        try {\n            liquibase.rollback(new Date(0), this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n    }\n']",Liquibase;print;Database;update;liquibase;get;Validation;iquibase;Error;this,7.130438461899757e-10;6.402842700481415e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.1100277081131935e-10,5,5,"[-5.988569736480713, -5.490655422210693, -4.630518436431885, -5.824331283569336, -5.465508937835693, -0.023849163204431534]",0.9764329791069031
2,"['    @Test\n    public void testDiffExternalForeignKeys() throws Exception {\n        //cross-schema security for oracle is a bother, ignoring test for now\n    }\n']",security;bother;Foreign;now;Keys;Exception;Diff;oracle;External;ignoring,3.725290298461914e-09;3.259629011154175e-09;3.026798367500305e-09;9.313225746154785e-10;3.4924596548080444e-10;2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-1.7462298274040222e-09,5,5,"[-6.033805847167969, -5.574039936065674, -4.557349681854248, -5.946587085723877, -5.441250324249268, -0.023913761600852013]",0.9763699173927307
2,['    @Test\n    public void testRunChangeLog() throws Exception {\n        super.testRunChangeLog();    //To change body of overridden methods use File | Settings | File Templates.\n    }\n'],body;Templates;overridden;super;Exception;Change;Run;Change;change;of,1.6298145055770874e-09;1.6298145055770874e-09;1.2223608791828156e-09;7.566995918750763e-10;6.984919309616089e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10,5,5,"[-5.993757247924805, -5.511195182800293, -4.587895393371582, -5.90183687210083, -5.436002731323242, -0.024088801816105843]",0.9761989116668701
2,"['    @Test\n    public void indexCreatedOnCorrectSchema() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(this.indexOnSchemaChangeLog);\n        clearDatabase();\n\n        try {\n            liquibase.update(this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n\n        Statement queryIndex = ((JdbcConnection) this.getDatabase().getConnection()).getUnderlyingConnection().createStatement();\n\n        ResultSet indexOwner = queryIndex.executeQuery(""SELECT owner FROM ALL_INDEXES WHERE index_name = \'IDX_BOOK_ID\'"");\n\n        assertTrue(indexOwner.next());\n\n        String owner = indexOwner.getString(""owner"");\n\n        assertEquals(""LBCAT2"", owner);\n\n        // check that the automatically rollback now works too\n        try {\n            liquibase.rollback( new Date(0),this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n\n\n\n\n    }\n']",System;Validation;Change;INDEXES;On;Date;catch;next;query;rollback,7.8580342233181e-10;6.402842700481415e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.880370140075684, -5.4482102394104, -4.684036731719971, -5.733575344085693, -5.40214204788208, -0.024376431480050087]",0.975918173789978
2,"['    @Test\n    public void viewCreatedOnCorrectSchema() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(this.viewOnSchemaChangeLog);\n        clearDatabase();\n\n        try {\n            liquibase.update(this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n\n        Statement queryIndex = ((JdbcConnection) this.getDatabase().getConnection()).getUnderlyingConnection().createStatement();\n\n        ResultSet indexOwner = queryIndex.executeQuery(""SELECT owner FROM ALL_VIEWS WHERE view_name = \'V_BOOK2\'"");\n\n        assertTrue(indexOwner.next());\n\n        String owner = indexOwner.getString(""owner"");\n\n        assertEquals(""LBCAT2"", owner);\n\n        // check that the automatically rollback now works too\n        try {\n            liquibase.rollback( new Date(0),this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n    }\n']",Descriptive;Validation;Log;Schema;automatically;Date;liquibase;too;get;ailed,6.584741640836e-10;5.238689482212067e-10;4.94765117764473e-10;4.94765117764473e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.882506847381592, -5.442156791687012, -4.6822309494018555, -5.73868465423584, -5.40929651260376, -0.024364564567804337]",0.9759299755096436
2,"['    @Test\n    public void smartDataLoad() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(""changelogs/common/smartDataLoad.changelog.xml"");\n        clearDatabase();\n\n        try {\n            liquibase.update(this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n\n        // check that the automatically rollback now works too\n        try {\n            liquibase.rollback( new Date(0),this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n    }\n']",Descriptive;Database;smart;xml;print;Load;clear;print;Error;update,1.1496013030409813e-09;9.022187441587448e-10;8.149072527885437e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.964817523956299, -5.498196125030518, -4.652756214141846, -5.802021503448486, -5.4335432052612305, -0.023868601769208908]",0.9764140248298645
2,"['    @Test\n    public void testDiffExternalForeignKeys() throws Exception {\n        //cross-schema security for oracle is a bother, ignoring test for now\n    }\n']",security;bother;Foreign;now;Keys;Exception;Diff;oracle;External;ignoring,3.725290298461914e-09;3.259629011154175e-09;3.026798367500305e-09;9.313225746154785e-10;3.4924596548080444e-10;2.3283064365386963e-10;-4.656612873077393e-10;-9.313225746154785e-10;-1.0477378964424133e-09;-1.7462298274040222e-09,5,5,"[-6.033805847167969, -5.574039936065674, -4.557349681854248, -5.946587085723877, -5.441250324249268, -0.023913761600852013]",0.9763699173927307
2,"['    @Test\n    public void testBatchInsert() throws Exception {\n        if (this.getDatabase() == null) {\n            return;\n        }\n        clearDatabase();\n\n        createLiquibase(""changelogs/common/batchInsert.changelog.xml"").update(this.contexts);\n        // ChangeLog already contains the verification code\n    }\n']",atch;Database;iquibase;return;batch;verification;changelogs;common;get;if,1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;7.8580342233181e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-6.0066070556640625, -5.522809982299805, -4.605323314666748, -5.861602783203125, -5.452075958251953, -0.02387232519686222]",0.9764103889465332
2,"['    @Test\n    public void testDatabaseIsReachableIfRequired() {\n        if (isDatabaseProvidedByTravisCI()) {\n            assertNotNull(\n                    ""This integration test is expected to pass on Travis CI.\\n"" +\n                            ""If you are running on a dev machine and do not have the required\\n"" +\n                            ""database installed, you may choose to ignore this failed test.\\n"" +\n                            ""To run this test on a dev machine, you will need to install the corresponding\\n"" +\n                            ""database and configure liquibase.integrationtest.local.properties"",\n                    getDatabase());\n        } else {\n            assumeNotNull(this.getDatabase());\n        }\n    }\n']",Provided;integration;database;pass;to;integration;on;the;Null;This,1.4551915228366852e-09;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.955280303955078, -5.281270503997803, -4.612059593200684, -5.850185871124268, -5.562354564666748, -0.024629319086670876]",0.9756715297698975
2,['    @Test\n    public void testRunChangeLog() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        runCompleteChangeLog();\n    }\n'],Change;Run;Database;Change;this;get;run;assume;Not;Null,1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;-4.656612873077393e-10,5,5,"[-5.9993577003479, -5.544334888458252, -4.58327054977417, -5.888556957244873, -5.416959285736084, -0.02411125972867012]",0.9761770963668823
2,"['    @Test\n    public void testRunUpdateOnOldChangelogTableFormat() throws Exception {\n        assumeNotNull(this.getDatabase());\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        String nullableKeyword = database.requiresExplicitNullForColumns() ? "" NULL"" : """";\n\n        String sql = ""CREATE TABLE "" +\n                database.escapeTableName(\n                        database.getDefaultCatalogName(), database.getDefaultSchemaName(), ""DATABASECHANGELOG""\n                ) +\n                "" (id varchar(150) NOT NULL, "" +\n                ""author VARCHAR(150) NOT NULL, "" +\n                ""filename VARCHAR(255) NOT NULL, "" +\n                ""dateExecuted "" +\n                DataTypeFactory.getInstance().fromDescription(\n                        ""datetime"", database\n                ).toDatabaseDataType(database) + "" NOT NULL, "" +\n                ""md5sum VARCHAR(32)"" + nullableKeyword + "", "" +\n                ""description VARCHAR(255)"" + nullableKeyword + "", "" +\n                ""comments VARCHAR(255)"" + nullableKeyword + "", "" +\n                ""tag VARCHAR(255)"" + nullableKeyword + "", "" +\n                ""liquibase VARCHAR(10)"" + nullableKeyword + "", "" +\n                ""PRIMARY KEY (id, author, filename))"";\n        Scope.getCurrentScope().getLog(getClass()).info(LogType.WRITE_SQL, sql);\n\n        Connection conn = ((JdbcConnection) database.getConnection()).getUnderlyingConnection();\n        boolean savedAcSetting = conn.getAutoCommit();\n        conn.setAutoCommit(false);\n        conn.createStatement().execute(sql);\n        conn.commit();\n        conn.setAutoCommit(savedAcSetting);\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        liquibase.update(this.contexts);\n\n    }\n']",liquibase;Run;Keyword;archar;Table;Update;Table;Column;CREATE;requires,6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.910957336425781, -5.320372104644775, -4.647210597991943, -5.779917240142822, -5.509987831115723, -0.024624666199088097]",0.9756760597229004
2,"['    @Test\n    public void testOutputChangeLog() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        StringWriter output = new StringWriter();\n        Liquibase liquibase;\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter(""loginuser"", getUsername());\n        liquibase.update(this.contexts, output);\n\n        String outputResult = output.getBuffer().toString();\n        assertNotNull(""generated output change log must not be empty"", outputResult);\n        assertTrue(""generated output change log is at least 100 bytes long"", outputResult.length() > 100);\n\n        // TODO should better written to a file so CI servers can pick it up as test artifacts.\n        System.out.println(outputResult);\n        assertTrue(""create databasechangelog command not found in: \\n"" + outputResult, outputResult.contains(""CREATE TABLE ""+database.escapeTableName(database.getLiquibaseCatalogName(), database.getLiquibaseSchemaName(), database.getDatabaseChangeLogTableName())));\n        assertTrue(""create databasechangeloglock command not found in: \\n"" + outputResult, outputResult.contains(""CREATE TABLE ""+database.escapeTableName(database.getLiquibaseCatalogName(), database.getLiquibaseSchemaName(), database.getDatabaseChangeLogLockTableName())));\n\n        assertTrue(""generated output contains a correctly encoded Euro sign"", outputResult.contains(""â\x82¬""));\n\n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));\n        assertEquals(""no database objects were actually created during creation of the output changelog"",\n                0, snapshot.get(Schema.class).iterator().next().getDatabaseObjects(Table.class).size());\n    }\n']",Generator;loginuser;Result;it;CI;were;output;up;Table;Snapshot,4.5838532969355583e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.853340148925781, -5.4482808113098145, -4.699535846710205, -5.69204044342041, -5.389743328094482, -0.02450718730688095]",0.9757906794548035
2,"['    @Test\n    public void testUpdateTwice() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        liquibase.update(this.contexts);\n        liquibase.update(this.contexts);\n    }\n']",iquibase;Database;iquibase;Username;create;Not;Database;clear;this;create,1.4551915228366852e-09;1.076841726899147e-09;9.022187441587448e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.9750895500183105, -5.571634769439697, -4.640186786651611, -5.815282821655273, -5.399290084838867, -0.02378351055085659]",0.9764971137046814
2,"['    @Test\n    public void testUpdateClearUpdate() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        liquibase.update(this.contexts);\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        liquibase.update(this.contexts);\n    }\n']",iquibase;Database;loginuser;Clear;update;liquibase;liquibase;Log;Log;get,1.57160684466362e-09;1.3969838619232178e-09;1.0477378964424133e-09;6.402842700481415e-10;5.820766091346741e-10;4.729372449219227e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.917043685913086, -5.570998191833496, -4.675987720489502, -5.776153564453125, -5.337062358856201, -0.02401280775666237]",0.9762731790542603
2,"['    @Test\n    public void testRollbackableChangeLog() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(rollbackChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.update(this.contexts);\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.rollback(new Date(0), this.contexts);\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.update(this.contexts);\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.rollback(new Date(0), this.contexts);\n    }\n']",iquibase;liquibase;update;Exception;Change;Log;create;Not;Liquibase;Date,1.367880031466484e-09;1.1932570487260818e-09;1.1641532182693481e-09;7.275957614183426e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.896343231201172, -5.4976325035095215, -4.662259578704834, -5.7805962562561035, -5.37359619140625, -0.024308370426297188]",0.9759846925735474
2,"['    @Test\n    public void testRollbackableChangeLogScriptOnExistingDatabase() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(rollbackChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.update(this.contexts);\n\n        StringWriter writer = new StringWriter();\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.rollback(new Date(0), this.contexts, writer);\n    }\n']",Liquibase;Database;Existing;liquibase;Database;Rollbackable;Exception;rollback;new;Date,1.6298145055770874e-09;9.313225746154785e-10;9.022187441587448e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10,5,5,"[-5.934116363525391, -5.5510053634643555, -4.665998935699463, -5.77947473526001, -5.369457721710205, -0.023973120376467705]",0.9763120412826538
2,"['    @Test\n    public void testRollbackableChangeLogScriptOnFutureDatabase() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        StringWriter writer = new StringWriter();\n\n        Liquibase liquibase = createLiquibase(rollbackChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.futureRollbackSQL(new Contexts(this.contexts), new LabelExpression(), writer);\n    }\n']",On;Rollbackable;iquibase;Future;SQL;Database;Database;rollback;rollback;Liquibase,1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.9606804847717285, -5.552493572235107, -4.635601043701172, -5.816460132598877, -5.404829978942871, -0.023912714794278145]",0.9763708114624023
2,"['    @Test\n    public void testTag() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        liquibase.update(this.contexts);\n\n        liquibase.tag(""Test Tag"");\n    }\n']",iquibase;liquibase;Database;iquibase;complete;Tag;Database;Not;liquibase;liquibase,2.153683453798294e-09;1.0186340659856796e-09;9.604264050722122e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10,5,5,"[-5.965846061706543, -5.568138122558594, -4.6514410972595215, -5.801214218139648, -5.389752388000488, -0.023798177018761635]",0.9764827489852905
2,"['    @Test\n    public void testDiff() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        runCompleteChangeLog();\n\n        CompareControl compareControl = new CompareControl();\n        compareControl.addSuppressedField(Column.class, ""defaultValue"");  //database returns different data even if the same\n        compareControl.addSuppressedField(Column.class, ""autoIncrementInformation""); //database returns different data even if the same\n        DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(database, database, compareControl);\n\n        try {\n            assertTrue(""comapring a database with itself should return a result of \'DBs are equal\'"",\n                    diffResult.areEqual());\n        } catch (AssertionError e) {\n            new DiffToReport(diffResult, System.err).print();\n            throw e;\n        }\n    }\n']",database;are;different;database;returns;print;Diff;diff;return;Result,7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.919597625732422, -5.491543292999268, -4.663512229919434, -5.764532566070557, -5.413487911224365, -0.02412254922091961]",0.9761660695075989
2,"['    @Test\n    public void testRerunDiffChangeLog() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        for (int run=0; run < 2; run++) { //run once outputting data as insert, once as csv\n            boolean outputCsv = run == 1;\n            runCompleteChangeLog();\n\n            SnapshotControl snapshotControl = new SnapshotControl(database);\n\n            DatabaseSnapshot originalSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, snapshotControl);\n\n            CompareControl compareControl = new CompareControl();\n            compareControl.addSuppressedField(Column.class, ""defaultValue"");  //database returns different data even if the same\n            compareControl.addSuppressedField(Column.class, ""autoIncrementInformation""); //database returns different data even if the same\n            if (database instanceof OracleDatabase) {\n                compareControl.addSuppressedField(Column.class, ""type""); //database returns different nvarchar2 info even though they are the same\n                compareControl.addSuppressedField(Column.class, ""nullable""); // database returns different nullable on views, e.g. v_person.id\n            }\n            if (database instanceof PostgresDatabase) {\n                compareControl.addSuppressedField(Column.class, ""type""); //database returns different nvarchar2 info even though they are the same\n            }\n\n            DiffOutputControl diffOutputControl = new DiffOutputControl();\n            File tempFile = tempDirectory.getRoot().createTempFile(""liquibase-test"", "".xml"");\n\n            if (outputCsv) {\n                diffOutputControl.setDataDir(new File(tempFile.getParentFile(), ""liquibase-data"").getCanonicalPath().replaceFirst(""\\\\w:"",""""));\n            }\n\n            DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(database, null, compareControl);\n\n\n            FileOutputStream output = new FileOutputStream(tempFile);\n            try {\n                new DiffToChangeLog(diffResult, new DiffOutputControl()).print(new PrintStream(output));\n                output.flush();\n            } finally {\n                output.close();\n            }\n\n            Liquibase liquibase = createLiquibase(tempFile.getName());\n            clearDatabase();\n\n            DatabaseSnapshot emptySnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));\n\n            //run again to test changelog testing logic\n            liquibase = createLiquibase(tempFile.getName());\n            try {\n                liquibase.update(this.contexts);\n            } catch (ValidationFailedException e) {\n                e.printDescriptiveError(System.out);\n                throw e;\n            }\n\n            DatabaseSnapshot migratedSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));\n\n            DiffResult finalDiffResult = DiffGeneratorFactory.getInstance().compare(originalSnapshot, migratedSnapshot, compareControl);\n            try {\n                assertTrue(""recreating the database from the generated change log should cause both \'before\' and "" +\n                                ""\'after\' snapshots to be equal."",\n                        finalDiffResult.areEqual());\n            } catch (AssertionError e) {\n                new DiffToReport(finalDiffResult, System.err).print();\n                throw e;\n            }\n\n            //diff to empty and drop all\n            DiffResult emptyDiffResult = DiffGeneratorFactory.getInstance().compare(emptySnapshot, migratedSnapshot, compareControl);\n            output = new FileOutputStream(tempFile);\n            try {\n                new DiffToChangeLog(emptyDiffResult, new DiffOutputControl(true, true, true, null)).print(new PrintStream(output));\n                output.flush();\n            } finally {\n                output.close();\n            }\n\n            liquibase = createLiquibase(tempFile.getName());\n            Scope.getCurrentScope().getLog(getClass()).info(LogType.LOG, ""updating from ""+tempFile.getCanonicalPath());\n            try {\n                liquibase.update(this.contexts);\n            } catch (LiquibaseException e) {\n                throw e;\n            }\n\n            DatabaseSnapshot emptyAgainSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));\n            assertEquals(""a database that was \'updated\' to an empty snapshot should only have 2 tables left: "" +\n                            ""the database change log table and the lock table."",\n                    2, emptyAgainSnapshot.get(Table.class).size());\n            assertEquals(""a database that was \'updated\' to an empty snapshot should not contain any views."",\n                    0, emptyAgainSnapshot.get(View.class).size());\n        }\n    }\n']",same;erun;the;person;Exception;Diff;sv;Postgres;this;if,1.1059455573558807e-09;9.89530235528946e-10;9.313225746154785e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10,5,5,"[-5.871492385864258, -5.317646026611328, -4.676539421081543, -5.720037460327148, -5.47836971282959, -0.024794697761535645]",0.9755101799964905
2,"['    @Test\n    public void testRerunDiffChangeLogAltSchema() throws Exception {\n        assumeNotNull(this.getDatabase());\n        if (database.getShortName().equalsIgnoreCase(""mssql"")) {\n            return; // not possible on MSSQL.\n        }\n        if (!database.supportsSchemas()) {\n            return;\n        }\n\n        Liquibase liquibase = createLiquibase(includedChangeLog);\n        database.setDefaultSchemaName(""lbcat2"");\n        clearDatabase();\n\n\n        LockService lockService = LockServiceFactory.getInstance().getLockService(database);\n        lockService.forceReleaseLock();\n\n        liquibase.update(includedChangeLog);\n\n        DatabaseSnapshot originalSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));\n\n        CompareControl compareControl = new CompareControl(\n                new CompareControl.SchemaComparison[]{\n                        new CompareControl.SchemaComparison(\n                                CatalogAndSchema.DEFAULT,\n                                new CatalogAndSchema(null, ""lbcat2"")\n                        )\n                },\n                originalSnapshot.getSnapshotControl().getTypesToInclude()\n        );\n        DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(database, null, compareControl);\n\n        File tempFile = File.createTempFile(""liquibase-test"", "".xml"");\n\n        FileOutputStream output = new FileOutputStream(tempFile);\n        try {\n            new DiffToChangeLog(diffResult, new DiffOutputControl()).print(new PrintStream(output));\n            output.flush();\n        } finally {\n            output.close();\n        }\n\n        liquibase = createLiquibase(tempFile.getName());\n        clearDatabase();\n\n        //run again to test changelog testing logic\n        Executor executor = ExecutorService.getInstance().getExecutor(database);\n        try {\n            executor.execute(new DropTableStatement(""lbcat2"", ""lbcat2"", database.getDatabaseChangeLogTableName(), false));\n        } catch (DatabaseException e) {\n            //ok\n        }\n        try {\n            executor.execute(new DropTableStatement(""lbcat2"", ""lbcat2"", database.getDatabaseChangeLogLockTableName(), false));\n        } catch (DatabaseException e) {\n            //ok\n        }\n        database.commit();\n\n        DatabaseConnection connection = DatabaseTestContext.getInstance().getConnection(getJdbcUrl(), username, password);\n        database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);\n        database.setDefaultSchemaName(""lbcat2"");\n        liquibase = createLiquibase(tempFile.getName());\n        try {\n            liquibase.update(this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n\n        tempFile.deleteOnExit();\n\n        DatabaseSnapshot finalSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));\n\n        CompareControl finalCompareControl = new CompareControl();\n        finalCompareControl.addSuppressedField(Column.class, ""autoIncrementInformation"");\n        DiffResult finalDiffResult = DiffGeneratorFactory.getInstance().compare(originalSnapshot, finalSnapshot, finalCompareControl);\n        new DiffToReport(finalDiffResult, System.out).print();\n        assertTrue(""running the same change log two times against an alternative schema should produce "" +\n                        ""equal snapshots."",\n                finalDiffResult.areEqual());\n    }\n']",new;erun;Alt;iquibase;Short;Database;database;this;Exception;Schema,7.130438461899757e-10;5.820766091346741e-10;5.820766091346741e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.128661774098873e-10,5,5,"[-5.954561233520508, -5.404976844787598, -4.6411213874816895, -5.7843828201293945, -5.499570846557617, -0.024188991636037827]",0.9761012196540833
2,"['    @Test\n    public void testClearChecksums() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        liquibase.update(this.contexts);\n\n        liquibase.clearCheckSums();\n    }\n']",Username;iquibase;complete;Database;create;liquibase;Database;liquibase;Not;liquibase,1.0477378964424133e-09;6.621121428906918e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.128661774098873e-10,5,5,"[-5.942266464233398, -5.537928104400635, -4.656596660614014, -5.804951190948486, -5.388603210449219, -0.02392435446381569]",0.9763595461845398
2,"['    @Test\n    public void testTagEmptyDatabase() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.checkLiquibaseTables(false, null, new Contexts(), new LabelExpression());\n        liquibase.tag(""empty"");\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.update(new Contexts());\n\n        liquibase.rollback(""empty"", new Contexts());\n\n    }\n']",ables;iquibase;rollback;iquibase;Database;new;liquibase;Context;false;assume,2.561137080192566e-09;9.604264050722122e-10;7.275957614183426e-10;6.475602276623249e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.900012493133545, -5.517691612243652, -4.6777801513671875, -5.749349117279053, -5.356338977813721, -0.024248799309134483]",0.9760428667068481
2,"['    @Test\n    public void testUnrunChangeSetsEmptyDatabase() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        List<ChangeSet> list = liquibase.listUnrunChangeSets(new Contexts(this.contexts), new LabelExpression());\n\n        assertTrue(""querying the changelog table on an empty target should return at least 1 un-run change set"", !list.isEmpty());\n\n    }\n']",on;Username;changelog;target;loginuser;list;least;Empty;Null;Change,1.6298145055770874e-09;9.89530235528946e-10;9.74978320300579e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.87237024307251, -5.54013204574585, -4.701681613922119, -5.722679138183594, -5.330684185028076, -0.02422483079135418]",0.9760661125183105
2,"['    @Test\n    public void testAbsolutePathChangeLog() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        String fileUrlToChangeLog = getClass().getResource(""/"" + includedChangeLog).toString();\n        assertTrue(fileUrlToChangeLog.startsWith(""file:/""));\n\n        String absolutePathOfChangeLog = fileUrlToChangeLog.replaceFirst(""file:\\\\/"", """");\n        if (System.getProperty(""os.name"").startsWith(""Windows "")) {\n            absolutePathOfChangeLog = absolutePathOfChangeLog.replace(\'/\', \'\\\\\');\n        } else {\n            absolutePathOfChangeLog = ""/"" + absolutePathOfChangeLog;\n        }\n        Liquibase liquibase = createLiquibase(absolutePathOfChangeLog, new FileSystemResourceAccessor());\n        clearDatabase();\n\n        liquibase.update(this.contexts);\n\n        liquibase.update(this.contexts); //try again, make sure there are no errors\n\n        clearDatabase();\n    }\n']",Absolute;sure;Log;make;clear;no;Log;Change;Change;Database,9.313225746154785e-10;6.402842700481415e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.873530387878418, -5.4638671875, -4.703930377960205, -5.712960243225098, -5.375682353973389, -0.02433396689593792]",0.9759597182273865
2,"['    @Test\n    public void testRollbackToChange() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(rollbackChangeLog);\n        wipeDatabase();\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.update(this.contexts);\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.rollback(8, this.contexts);\n\n        liquibase.tag(""testRollbackToChange"");\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.update(this.contexts);\n\n        liquibase = createLiquibase(rollbackChangeLog);\n        liquibase.rollback(""testRollbackToChange"", this.contexts);\n    }\n']",rollback;Database;liquibase;tag;rollback;liquibase;update;create;iquibase;Change,1.1059455573558807e-09;9.313225746154785e-10;8.294591680169106e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.346940502524376e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.886744022369385, -5.460376739501953, -4.673559188842773, -5.754175662994385, -5.384119510650635, -0.024421103298664093]",0.975874662399292
2,"['    @Test\n    public void testDbDoc() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase;\n        clearDatabase();\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        liquibase.update(this.contexts);\n\n        Path outputDir = tempDirectory.newFolder().toPath().normalize();\n        logger.fine(LogType.LOG, ""Database documentation will be written to this temporary folder: "" + outputDir);\n\n        liquibase = createLiquibase(completeChangeLog);\n        liquibase.setChangeLogParameter( ""loginuser"", getUsername());\n        liquibase.generateDocumentation(outputDir.toAbsolutePath().toString(), this.contexts);\n    }\n']",iquibase;liquibase;documentation;Database;Absolute;iquibase;Path;Username;Not;liquibase,6.402842700481415e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.473825588822365e-10;2.1827872842550278e-10;2.1827872842550278e-10,5,5,"[-5.918900966644287, -5.553234100341797, -4.693636894226074, -5.731546878814697, -5.3489203453063965, -0.023997444659471512]",0.9762883186340332
2,"['    @Test\n    public void testEncodingUpdating2SQL() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(encodingChangeLog);\n\n        StringWriter writer=new StringWriter();\n        liquibase.update(this.contexts,writer);\n        assertTrue(""Update to SQL preserves encoding"",\n            new RegexMatcher(writer.toString(), new String[] {\n                //For the UTF-8 encoded cvs\n                ""^.*INSERT.*VALUES.*Ã\xa0Ã¨Ã¬Ã²Ã¹Ã¡Ã©Ã\xadÃ³ÃºÃ\x80Ã\x88Ã\x8cÃ\x92Ã\x99Ã\x81Ã\x89Ã\x8dÃ\x93Ã\x9aÃ¢ÃªÃ®Ã´Ã»Ã¤Ã«Ã¯Ã¶Ã¼.*?\\\\)"",\n                ""Ã§Ã±Â®"",\n                //For the latin1 one\n                ""^.*INSERT.*VALUES.*Ã\xa0Ã¨Ã¬Ã²Ã¹Ã¡Ã©Ã\xadÃ³ÃºÃ\x80Ã\x88Ã\x8cÃ\x92Ã\x99Ã\x81Ã\x89Ã\x8dÃ\x93Ã\x9aÃ¢ÃªÃ®Ã´Ã»Ã¤Ã«Ã¯Ã¶Ã¼.*?\\\\)"",\n                ""Ã§Ã±Â®""\n            }).allMatchedInSequentialOrder());\n    }\n']",one;latin;Log;Â¯;VALUES;Encoding;Â¶;Â¨;Â²;new,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.940221309661865, -5.365377426147461, -4.662420272827148, -5.750378131866455, -5.509028434753418, -0.024274630472064018]",0.9760176539421082
2,"['   @Test\n   public void testDiffExternalForeignKeys() throws Exception {\n       assumeNotNull(this.getDatabase());\n       clearDatabase();\n       Liquibase liquibase = createLiquibase(externalfkInitChangeLog);\n       liquibase.update(contexts);\n\n       DiffResult diffResult = liquibase.diff(database, null, new CompareControl());\n       DiffResultAssert.assertThat(diffResult).containsMissingForeignKeyWithName(""fk_person_country"");\n   }\n']",External;liquibase;update;externalf;diff;Database;Diff;database;Foreign;Change,9.313225746154785e-10;9.022187441587448e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.94821834564209, -5.629607677459717, -4.640093803405762, -5.7948174476623535, -5.355080604553223, -0.02390829101204872]",0.9763753414154053
2,"['    @Test\n    public void testInvalidIncludeDoesntBreakLiquibase() throws Exception {\n        assumeNotNull(this.getDatabase());\n        Liquibase liquibase = createLiquibase(invalidReferenceChangeLog);\n        try {\n            liquibase.update(new Contexts());\n            fail(""Did not fail with invalid include"");\n        } catch (ChangeLogParseException ignored) {\n            //expected\n        }\n\n        LockService lockService = LockServiceFactory.getInstance().getLockService(database);\n        assertFalse(lockService.hasChangeLogLock());\n    }\n']",Break;iquibase;invalid;Did;Parse;Invalid;Null;expected;assume;Lock,8.731149137020111e-10;8.440110832452774e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.973657608032227, -5.517625331878662, -4.631362438201904, -5.82918119430542, -5.439011573791504, -0.023868601769208908]",0.9764140248298645
2,"['    @Test\n    public void testContextsWithHyphensWorkInFormattedSql() throws Exception {\n        assumeNotNull(this.getDatabase());\n        Liquibase liquibase = createLiquibase(""changelogs/common/sqlstyle/formatted.changelog.sql"");\n        liquibase.update(""hyphen-context-using-sql,camelCaseContextUsingSql"");\n\n        SnapshotGeneratorFactory tableSnapshotGenerator = SnapshotGeneratorFactory.getInstance();\n        assertNotNull(tableSnapshotGenerator.has(new Table().setName(""hyphen_context""), database));\n        assertNotNull(tableSnapshotGenerator.has(new Table().setName(""camel_context""), database));\n        assertNotNull(tableSnapshotGenerator.has(new Table().setName(""bar_id""), database));\n        assertNotNull(tableSnapshotGenerator.has(new Table().setName(""foo_id""), database));\n    }\n']",database;Work;hyphen;bar;Generator;Formatted;sql;Liquibase;formatted;Generator,2.7939677238464355e-09;1.7462298274040222e-09;8.440110832452774e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.897021770477295, -5.545475482940674, -4.6834025382995605, -5.74918794631958, -5.358057022094727, -0.02408333122730255]",0.9762043356895447
2,"['    @Test\n    public void testObjectQuotingStrategy() throws Exception {\n        assumeNotNull(this.getDatabase());\n        if (!Arrays.asList(""oracle,h2,hsqldb,postgresql,mysql"").contains(database.getShortName())) {\n            return;\n        }\n\n        Liquibase liquibase = createLiquibase(objectQuotingStrategyChangeLog);\n        clearDatabase();\n        liquibase.update(contexts);\n        clearDatabase();\n    }\n']",oracle;database;ld;Strategy;Strategy;if;Not;object;Quoting;as,1.3969838619232178e-09;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.994399547576904, -5.57244348526001, -4.627069473266602, -5.821884632110596, -5.420964241027832, -0.023741720244288445]",0.9765378832817078
2,"['    @Test\n    public void testOutputChangeLogIgnoringSchema() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        String schemaName = getDatabase().getDefaultSchemaName();\n        if (schemaName == null) {\n            return;\n        }\n\n        getDatabase().setOutputDefaultSchema(false);\n        getDatabase().setOutputDefaultCatalog(false);\n\n        StringWriter output = new StringWriter();\n        Liquibase liquibase = createLiquibase(includedChangeLog);\n        clearDatabase();\n\n        liquibase = createLiquibase(includedChangeLog);\n        liquibase.update(contexts, output);\n\n        String outputResult = output.getBuffer().toString();\n        assertNotNull(""generated SQL may not be empty"", outputResult);\n        assertTrue(""Expect at least 100 bytes of output in generated SQL"", outputResult.length() > 100);\n        CharSequence expected = ""CREATE TABLE ""+getDatabase().escapeTableName(getDatabase().getLiquibaseCatalogName(), getDatabase().getLiquibaseSchemaName(), getDatabase().getDatabaseChangeLogTableName());\n        assertTrue(""create databasechangelog command not found in: \\n"" + outputResult, outputResult.contains(expected));\n        assertTrue(""create databasechangeloglock command not found in: \\n"" + outputResult, outputResult.contains(expected));\n        assertFalse(""the schema name \'"" + schemaName + ""\' should be ignored\\n\\n"" + outputResult, outputResult.contains\n                (schemaName+"".""));\n    }\n']",iquibase;expected;Null;assume;iquibase;schema;Liquibase;Output;expected;expected,6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.912888050079346, -5.462587833404541, -4.670680046081543, -5.752642631530762, -5.437578201293945, -0.024125922471284866]",0.9761627912521362
2,"['    @Test\n    public void testGenerateChangeLogWithNoChanges() throws Exception {\n        assumeNotNull(this.getDatabase());\n\n        runCompleteChangeLog();\n\n        DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(database, database, new CompareControl());\n\n        DiffToChangeLog changeLogWriter = new DiffToChangeLog(diffResult, new DiffOutputControl(false, false, false, null));\n        List<ChangeSet> changeSets = changeLogWriter.generateChangeSets();\n        assertEquals(""generating two change logs without any changes in between should result in an empty generated "" +\n                ""differential change set."", 0, changeSets.size());\n    }\n']",two;changes;Null;Complete;Not;Result;Diff;assume;Instance;Set,8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.9413838386535645, -5.576496124267578, -4.663182258605957, -5.74949312210083, -5.3798112869262695, -0.023927729576826096]",0.9763563871383667
2,"['    @Test\n    public void defaultValuesTests() throws Exception {\n        clearDatabase();\n\n        assumeNotNull(this.getDatabase());\n\n        Liquibase liquibase = createLiquibase(""changelogs/mssql/issues/default.values.xml"");\n        liquibase.update((String) null);\n\n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, this.getDatabase(), new SnapshotControl(getDatabase()));\n\n        for (Table table : snapshot.get(Table.class)) {\n            for (Column column : table.getColumns()) {\n                if (column.getName().toLowerCase().endsWith(""_default"")) {\n                    Object defaultValue = column.getDefaultValue();\n                    assertNotNull(""Null default value for "" + table.getName() + ""."" + column.getName(), defaultValue);\n                    if (column.getName().toLowerCase().contains(""date"") || column.getName().toLowerCase().contains(""time"")) {\n                        if (defaultValue instanceof String) {\n                            assertTrue(defaultValue.equals(""2017-12-09 23:52:39.1234567 +01:00""));\n                        } else if (defaultValue instanceof DatabaseFunction) {\n                            ((DatabaseFunction) defaultValue).getValue().contains(""type datetimeoffset"");\n                        } else if (defaultValue instanceof Time) {\n                            Calendar calendar = Calendar.getInstance();\n                            calendar.setTime(((Date) defaultValue));\n                            assertEquals(23, calendar.get(Calendar.HOUR_OF_DAY));\n                            assertEquals(52, calendar.get(Calendar.MINUTE));\n                            assertEquals(39, calendar.get(Calendar.SECOND));\n                        } else {\n                            assertTrue(""Unexpected default type ""+defaultValue.getClass().getName()+"" for "" + table.getName() + ""."" + column.getName(), defaultValue instanceof Date);\n                            Calendar calendar = Calendar.getInstance();\n                            calendar.setTime(((Date) defaultValue));\n                            assertEquals(9, calendar.get(Calendar.DAY_OF_MONTH));\n                            assertEquals(11, calendar.get(Calendar.MONTH));\n                            assertEquals(2017, calendar.get(Calendar.YEAR));\n                        }\n                    } else if (column.getName().toLowerCase().contains(""char_"")) {\n                        assertTrue(""Unexpected default type ""+defaultValue.getClass().getName()+"" for "" + table.getName() + ""."" + column.getName(), defaultValue instanceof String);\n                    } else if (column.getName().toLowerCase().contains(""binary_"")) {\n                        assertTrue(""Unexpected default type ""+defaultValue.getClass().getName()+"" for "" + table.getName() + ""."" + column.getName(), defaultValue instanceof DatabaseFunction);\n                    } else {\n                        assertTrue(""Unexpected default type ""+defaultValue.getClass().getName()+"" for "" + table.getName() + ""."" + column.getName(), defaultValue instanceof Number);\n                        assertEquals(1, ((Number) defaultValue).intValue());\n                    }\n                }\n            }\n        }\n    }\n']",changelogs;update;iquibase;Schema;time;default;assume;Function;liquibase;null,6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.055902197957039e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.804525375366211, -5.321282863616943, -4.69520902633667, -5.636936664581299, -5.398515224456787, -0.025447452440857887]",0.9748736023902893
2,"['    @Test\n    public void dataTypesTest() throws Exception {\n        assumeNotNull(this.getDatabase());\n        clearDatabase();\n\n        Liquibase liquibase = createLiquibase(""changelogs/mssql/issues/data.types.xml"");\n        liquibase.update((String) null);\n\n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, this.getDatabase(), new SnapshotControl(getDatabase()));\n\n        for (Table table : snapshot.get(Table.class)) {\n            if (getDatabase().isLiquibaseObject(table)) {\n                continue;\n            }\n            for (Column column : table.getColumns()) {\n                String expectedType = column.getName().split(""_"")[0];\n\n                switch(expectedType.toUpperCase()) {\n                    // See https://docs.microsoft.com/en-us/sql/t-sql/data-types/ntext-text-and-image-transact-sql\n                    // Types text, ntext and image are deprecated and should be translated into\n                    // varchar(max), nvarchar(max) and varbinary(max).\n                    case ""TEXT"":\n                        expectedType=""varchar"";\n                        break;\n                    case ""NTEXT"":\n                        expectedType=""nvarchar"";\n                        break;\n                    case ""IMAGE"":\n                        expectedType=""varbinary"";\n                        break;\n                    default:\n                        // nothing to do\n                }\n\n                String foundTypeDefinition = DataTypeFactory.getInstance().from(column.getType(), new MSSQLDatabase()).toDatabaseDataType(getDatabase()).toString();\n                // [varbinary] -> varbinary\n                foundTypeDefinition = foundTypeDefinition.replaceFirst(""^\\\\[(.*?)\\\\]"", ""$1"");\n                String foundType = foundTypeDefinition.replaceFirst(""\\\\(.*"", """").trim();\n\n                assertEquals(""Wrong data type for "" + table.getName() + ""."" + column.getName(),\n                    expectedType.toLowerCase(),\n                    foundType.toLowerCase()\n                );\n\n                if (""varbinary"".equalsIgnoreCase(expectedType)) {\n                    if (column.getName().endsWith(""_MAX"")) {\n                        assertEquals(""VARBINARY(MAX)"", foundTypeDefinition.toUpperCase());\n                    } else {\n                        assertEquals(""VARBINARY(1)"", foundTypeDefinition.toUpperCase());\n                    }\n                }\n            }\n        }\n    }\n']",iquibase;liquibase;case;en;switch;data;text;clear;Database;ssql,9.022187441587448e-10;6.621121428906918e-10;6.402842700481415e-10;5.529727786779404e-10;4.656612873077393e-10;3.637978807091713e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.919460296630859, -5.29379940032959, -4.6598687171936035, -5.754493236541748, -5.53350305557251, -0.024597682058811188]",0.9757023453712463
2,"['    @Test\n    public void dataTypeParamsTest() throws Exception {\n        assumeNotNull(this.getDatabase());\n        clearDatabase();\n\n        Liquibase liquibase = createLiquibase(""changelogs/mssql/issues/data.type.params.xml"");\n        liquibase.update((String) null);\n\n        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, this.getDatabase(), new SnapshotControl(getDatabase()));\n\n        for (Table table : snapshot.get(Table.class)) {\n            if (getDatabase().isLiquibaseObject(table)) {\n                continue;\n            }\n            for (Column column : table.getColumns()) {\n                String expectedType = column.getName().split(""_"")[0];\n\n                String foundTypeDefinition = DataTypeFactory.getInstance().from(column.getType(), new MSSQLDatabase()).toDatabaseDataType(getDatabase()).toString();\n                assertFalse(""Parameter found in "" + table.getName() + ""."" + column.getName(), foundTypeDefinition.contains(""(""));\n            }\n        }\n    }\n']",Schema;iquibase;data;liquibase;expected;DEFAULT;SSQLDatabase;Catalog;continue;Definition,1.2223608791828156e-09;8.003553375601768e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.8946757316589355, -5.471682548522949, -4.689358711242676, -5.694561958312988, -5.4040069580078125, -0.024306509643793106]",0.9759865403175354
2,"['    @Test\n    public void impossibleDefaultSchema() {\n        Exception caughtException = null;\n        try {\n            getDatabase().setDefaultSchemaName(""lbuser"");\n        } catch (Exception ex) {\n            caughtException = ex;\n        }\n        assertNotNull(""Must not allow using a defaultSchemaName that is different from the DB user\'s login schema."",\n            caughtException);\n\n    }\n']",caught;impossible;Default;caught;DB;allow;Exception;ex;from;Not,6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-6.001326560974121, -5.546939849853516, -4.6177592277526855, -5.839447498321533, -5.446893692016602, -0.023749519139528275]",0.9765301942825317
2,"['    @Test\n    public void smartDataLoad() throws Exception {\n        assumeNotNull(this.getDatabase());\n        Liquibase liquibase = createLiquibase(""changelogs/common/smartDataLoad.changelog.xml"");\n        clearDatabase();\n        try {\n            liquibase.update(this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n        try {\n            liquibase.rollback(new Date(0), this.contexts);\n        } catch (ValidationFailedException e) {\n            e.printDescriptiveError(System.out);\n            throw e;\n        }\n    }\n']",smart;liquibase;liquibase;Exception;get;print;Validation;Exception;Date;ailed,9.313225746154785e-10;7.712515071034431e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.994367599487305, -5.530514717102051, -4.6278204917907715, -5.830662727355957, -5.439979553222656, -0.023789213970303535]",0.9764915108680725
2,"['    @Test\n    public void generateSql() throws Exception {\n        this.statementUnderTest = new UnlockDatabaseChangeLogStatement();\n        assertCorrect(""update [databasechangeloglock] set [locked] = 0, [lockedby] = null, [lockgranted] = null where [id] = 1"", MSSQLDatabase.class, SybaseDatabase.class);\n        assertCorrect(""update [databasechangeloglock] set [locked] = 0, [lockedby] = null, [lockgranted] = null where [id] = 1"", MSSQLDatabase.class, SybaseASADatabase.class);\n        assertCorrect(""update [databasechangeloglock] set [locked] = \'f\', [lockedby] = null, [lockgranted] = null where [id] = 1"", InformixDatabase.class);\n        assertCorrect(""update [databasechangeloglock] set [locked] = false, [lockedby] = null, [lockgranted] = null where [id] = 1"", PostgresDatabase.class, HsqlDatabase.class, H2Database.class);\n        assertCorrectOnRest(""update [databasechangeloglock] set [locked] = 0, [lockedby] = null, [lockgranted] = null where [id] = 1"");\n    }\n']",statement;Sybase;new;Change;locked;databasechangeloglock;Statement;Log;SSQLDatabase;update,9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.803513526916504, -5.453415870666504, -4.70051908493042, -5.669181823730469, -5.321441173553467, -0.025036318227648735]",0.9752745032310486
2,"['    @Test\n    public void generateSql_autoIncrement() throws Exception {\n        this.statementUnderTest = new AddColumnStatement(null, ""table_name"", ""column_name"", ""int"", null, new AutoIncrementConstraint(""column_name""));\n\n        assertCorrect(""alter table table_name add column_name serial"", InformixDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] int default autoincrement null"", SybaseASADatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] serial"", PostgresDatabase.class);\n        assertCorrect(""alter table [dbo].[table_name] add [column_name] int identity"", MSSQLDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] int identity null"", SybaseDatabase.class);\n        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);\n        assertCorrect(""alter table table_name add column_name int auto_increment_clause"");\n    }\n']",Sybase;ASADatabase;Correct;fixme;serial;SQLite;column;Database;alter;null,1.2223608791828156e-09;9.022187441587448e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.888042449951172, -5.481968879699707, -4.648907661437988, -5.7629570960998535, -5.403553009033203, -0.024444371461868286]",0.9758520722389221
2,"['    @Test\n    public void generateSql_notNull() throws Exception {\n        this.statementUnderTest = new AddColumnStatement(null, null, ""table_name"", ""column_name"", ""int"", 42, new NotNullConstraint());\n        assertCorrect(""alter table [table_name] add [column_name] int default 42 not null"", SybaseASADatabase.class, SybaseDatabase.class);\n        assertCorrect(""alter table table_name add column_name int default 42 not null"", PostgresDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] [int] constraint df_table_name_column_name default 42 not null"", MSSQLDatabase.class);\n        assertCorrect(""alter table table_name add column_name int default 42 not null"", MySQLDatabase.class);\n        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);\n        assertCorrect(""ALTER TABLE [table_name] ADD [column_name] int DEFAULT 42 NOT NULL"");\n    }\n']",Statement;ALTER;Correct;alter;null;Constraint;column;table;add;table,1.1059455573558807e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.860640525817871, -5.506948471069336, -4.6727142333984375, -5.725060939788818, -5.358564853668213, -0.024523820728063583]",0.9757744669914246
2,"['    @Test\n    public void fullNoConstraints() throws Exception {\n        this.statementUnderTest = new AddColumnStatement(null, null, ""table_name"", ""column_name"", ""int"", 42);\n\n\n        assertCorrect(""alter table [table_name] add [column_name] int default 42 null"", SybaseDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] int constraint df_table_name_column_name default 42"", MSSQLDatabase.class);\n//        assertCorrect(""alter table [table_name] add [column_name] integer default 42"", SQLiteDatabase.class);\n        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);\n        assertCorrect(""alter table table_name add column_name int default 42"", PostgresDatabase.class, InformixDatabase.class, OracleDatabase.class, DerbyDatabase.class, HsqlDatabase.class, DB2Database.class, H2Database.class, FirebirdDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] int default 42 null"", SybaseASADatabase.class);\n        assertCorrect(""alter table table_name add column_name int default 42 null"", MySQLDatabase.class, MariaDBDatabase.class);\n        assertCorrectOnRest(""ALTER TABLE [table_name] ADD [column_name] int DEFAULT 42"");\n    }\n']",constraint;ASADatabase;Under;Constraints;Exception;SSQLDatabase;ADD;Informix;default;full,1.4551915228366852e-09;1.3969838619232178e-09;1.3387762010097504e-09;9.022187441587448e-10;6.111804395914078e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.860903739929199, -5.444587707519531, -4.668593406677246, -5.727738857269287, -5.400496959686279, -0.024623271077871323]",0.9756775498390198
2,"['    @Test\n    public void autoIncrement() throws Exception {\n        this.statementUnderTest = new AddColumnStatement(null, TABLE_NAME, ""column_name"", ""int"", null, new AutoIncrementConstraint());\n\n        assertCorrect(""ALTER TABLE [dbo].[table_name] ADD [column_name] int auto_increment_clause"", MSSQLDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] int default autoincrement null"", SybaseASADatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] int identity null"", SybaseDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] serial"", PostgresDatabase.class, InformixDatabase.class);\n        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);\n        assertCorrectOnRest(""ALTER TABLE [table_name] ADD [column_name] int auto_increment_clause"");\n    }\n']",Increment;increment;Exception;Correct;null;Sybase;ADD;Correct;Informix;Under,1.6589183360338211e-09;9.604264050722122e-10;8.440110832452774e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10,5,5,"[-5.865164279937744, -5.482483386993408, -4.66558837890625, -5.742870807647705, -5.370040416717529, -0.024568138644099236]",0.9757311940193176
2,"['    @Test\n    public void notNull() throws Exception {\n        this.statementUnderTest = new AddColumnStatement(null, null, TABLE_NAME, ""column_name"", ""int"", 42, new NotNullConstraint());\n\n        assertCorrect(""ALTER TABLE [table_name] ADD [column_name] int DEFAULT 42 NOT NULL"", SybaseASADatabase.class, SybaseDatabase.class);\n        assertCorrect(""alter table table_name add column_name int default 42 not null"", InformixDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] int constraint df_table_name_column_name default 42 not null"", MSSQLDatabase.class);\n        assertCorrect(""alter table table_name add column_name int default 42 not null"", OracleDatabase.class, DerbyDatabase.class, HsqlDatabase.class, DB2Database.class, H2Database.class, FirebirdDatabase.class);\n        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);\n        assertCorrectOnRest(""ALTER TABLE [table_name] ADD [column_name] int default 42 not null"");\n    }\n']",table;constraint;table;class;column;Database;Add;Rest;null;name,9.313225746154785e-10;6.984919309616089e-10;6.111804395914078e-10;5.675246939063072e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.821579456329346, -5.461671352386475, -4.691659927368164, -5.683847427368164, -5.340137958526611, -0.024883538484573364]",0.9754235148429871
2,"['    @Test\n    public void generateSql_primaryKey() throws Exception {\n        this.statementUnderTest = new AddColumnStatement(null, ""table_name"", ""column_name"", ""int"", null, new PrimaryKeyConstraint());\n\n        assertCorrect(""alter table [table_name] add [column_name] int not null primary key"", HsqlDatabase.class);\n        assertCorrect(""alter table [table_name] add [column_name] int primary key not null"", SybaseASADatabase.class, SybaseDatabase.class);\n        assertCorrect(""alter table [dbo].[table_name] add [column_name] int not null primary key"", MSSQLDatabase.class);\n        assertCorrect(""alter table table_name add column_name int not null primary key"", PostgresDatabase.class);\n        assertCorrect(""alter table `table_name` add `column_name` int not null primary key"", MySQLDatabase.class);\n        assertCorrect(""ALTER TABLE [table_name] ADD [column_name] int PRIMARY KEY NOT NULL"");\n    }\n']",generate;ALTER;Under;primary;statement;NOT;Add;Constraint;Sybase;Correct,1.0477378964424133e-09;8.585629984736443e-10;7.566995918750763e-10;6.111804395914078e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10,5,5,"[-5.865840435028076, -5.500224590301514, -4.66441011428833, -5.744160175323486, -5.367977619171143, -0.02450823411345482]",0.9757897853851318
2,"['    @Test\n    public void generateSql_foreignKey() throws Exception {\n        this.statementUnderTest = new AddColumnStatement(null, ""table_name"", ""column_name"", ""int"", null, new PrimaryKeyConstraint(), new ForeignKeyConstraint(""fk_test_fk"", ""table_name(column_name)""));\n\n        assertCorrect(new String[] {""alter table [table_name] add [column_name] int not null primary key"", ""alter table [table_name] add constraint [fk_test_fk] foreign key ([column_name]) references [table_name]([column_name])""}, HsqlDatabase.class);\n        assertCorrect(new String[] {""alter table [table_name] add [column_name] int primary key not null"", ""alter table [table_name] add constraint [fk_test_fk] foreign key ([column_name]) references [table_name]([column_name])""}, SybaseASADatabase.class, SybaseDatabase.class);\n        assertCorrect(new String[] {""alter table [dbo].[table_name] add [column_name] int not null primary key"", ""alter table [dbo].[table_name] add constraint [fk_test_fk] foreign key ([column_name]) references [dbo].[table_name]([column_name])""}, MSSQLDatabase.class);\n        assertCorrect(new String[] {""alter table table_name add column_name int not null primary key"", ""alter table [table_name] add constraint [fk_test_fk] foreign key ([column_name]) references [table_name]([column_name])""}, PostgresDatabase.class);\n        assertCorrect(new String[] {""alter table `table_name` add `column_name` int not null primary key"", ""alter table [table_name] add constraint [fk_test_fk] foreign key ([column_name]) references [table_name]([column_name])""}, MySQLDatabase.class);\n        assertCorrect(new String[] {""ALTER TABLE [table_name] ADD [column_name] int PRIMARY KEY NOT NULL"", ""alter table [table_name] add constraint  foreign key ([column_name]) references [table_name]([column_name]) constraint [fk_test_fk]""}, InformixDatabase.class);\n        assertCorrect(new String[] {""ALTER TABLE [table_name] ADD [column_name] int PRIMARY KEY NOT NULL"", ""alter table [table_name] add constraint [fk_test_fk] foreign key ([column_name]) references [table_name]([column_name])""});\n    }\n']",Statement;Add;Exception;this;foreign;ASADatabase;foreign;generate;MySQLDatabase;null,8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.9103830456733704e-10,5,5,"[-5.7180094718933105, -5.341952323913574, -4.69370174407959, -5.577005863189697, -5.2989068031311035, -0.026350490748882294]",0.9739935398101807
2,"['    //    @Test\n//    public void execute_noSchema() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(null, new AddUniqueConstraintStatement(null, TABLE_NAME, COLUMN_NAME, ""uq_adduqtest"")) {\n//\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertFalse(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        //todo: enable snapshot and assertion when snapshot can check for unique constraints\n//                        //snapshot = new DatabaseSnapshotGenerator(snapshot);\n//                    \tassertTrue(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());\n//                    }\n//                });\n//    }\n']",NAME;Available;Constraint;no;Exception;null;Statement;Column;Snapshot;new,7.275957614183426e-10;6.984919309616089e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.6193447411060333e-10,5,5,"[-5.907861709594727, -5.307446002960205, -4.6460676193237305, -5.788751602172852, -5.491090774536133, -0.02476097270846367]",0.9755430817604065
2,"['//    @Test\n//    public void execute_withSchema() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(TestContext.ALT_SCHEMA, new AddUniqueConstraintStatement(TestContext.ALT_SCHEMA, TABLE_NAME, COLUMN_NAME, ""uq_adduqtest"")) {\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertFalse(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        //todo: enable snapshot and assertion when snapshot can check for unique constraints\n//                snapshot = new DatabaseSnapshotGenerator(database, TestContext.ALT_SCHEMA);\n//                assertTrue(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());\n//                    }\n//\n//                });\n//    }\n']",assertion;TABLE;pre;with;Generator;new;Column;Statement;Unique;NAME,1.0477378964424133e-09;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.891486167907715, -5.321606159210205, -4.657791614532471, -5.773760795593262, -5.472724437713623, -0.024746552109718323]",0.9755570292472839
2,"['//    @Test\n//    public void execute_withTablespace() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(null, new AddUniqueConstraintStatement(null, TABLE_NAME, COLUMN_NAME, ""uq_adduqtest"").setTablespace(TestContext.ALT_TABLESPACE)) {\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertFalse(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        //todo: enable snapshot and assertion when snapshot can check for unique constraints\n//                        // snapshot = new DatabaseSnapshotGenerator(database);\n////                assertTrue(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());\n//                    }\n//                });\n//    }\n']",post;snapshot;TABLE;enable;Database;Snapshot;TABLE;Context;get;database,6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.165929906070232e-10;4.802132025361061e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.895641803741455, -5.304891109466553, -4.656803607940674, -5.772772789001465, -5.481808185577393, -0.024793069809675217]",0.9755116701126099
2,"['    @Test\n    public void execute_noSchema() throws Exception {\n        this.statementUnderTest = new AddUniqueConstraintStatement(null, null, TABLE_NAME, new ColumnConfig[] { new ColumnConfig().setName(COLUMN_NAME)}, CONSTRAINT_NAME);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", MSSQLDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseASADatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", MySQLDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint unique (coltomakeuq) constraint uq_test"", InformixDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", OracleDatabase.class);\n        assertCorrect(""alter table \\""adduqtest\\"" add constraint uq_test unique (\\""coltomakeuq\\"")"", PostgresDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", DerbyDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"");\n    }\n']",TABLE;Informix;Add;SSQLDatabase;MySQLDatabase;Statement;Config;alter;NAME;Database,9.313225746154785e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.055902197957039e-10,5,5,"[-5.857226371765137, -5.376001358032227, -4.639429569244385, -5.759420394897461, -5.443132400512695, -0.02493586204946041]",0.9753724932670593
2,"['    @Test\n    public void execute_noConstraintName() throws Exception {\n        this.statementUnderTest = new AddUniqueConstraintStatement(null, null, TABLE_NAME, new ColumnConfig[] { new ColumnConfig().setName(COLUMN_NAME)}, null);\n        assertCorrect(""alter table adduqtest add unique (coltomakeuq)"", MySQLDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint unique (coltomakeuq)"", InformixDatabase.class);\n        assertCorrect(""alter table adduqtest add unique (coltomakeuq)"", OracleDatabase.class);\n        assertCorrect(""alter table \\""adduqtest\\"" add unique (\\""coltomakeuq\\"")"", PostgresDatabase.class);\n        assertCorrect(""alter table adduqtest add unique (coltomakeuq)"", DerbyDatabase.class);\n        assertCorrect(""alter table [adduqtest] add unique ([coltomakeuq])"", SybaseASADatabase.class, SybaseDatabase.class);\n        assertCorrect(""alter table [adduqtest] add unique ([coltomakeuq])"", MSSQLDatabase.class);\n\n        assertCorrect(""alter table [adduqtest] add unique ([coltomakeuq])"");\n    }\n']",Informix;Statement;alter;unique;Under;NAME;Database;Correct;unique;coltomake,1.0477378964424133e-09;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.867865085601807, -5.422621250152588, -4.649609088897705, -5.763762950897217, -5.423276424407959, -0.024663398042321205]",0.9756382703781128
2,"['    @Test\n    public void execute_withSchema() throws Exception {\n        statementUnderTest = new AddUniqueConstraintStatement(\n                DatabaseTestContext.ALT_CATALOG,\n                DatabaseTestContext.ALT_SCHEMA,\n                TABLE_NAME,\n                new ColumnConfig[]\n                        {new ColumnConfig().setName(COLUMN_NAME)},\n                CONSTRAINT_NAME\n        );\n\n        assertCorrect(""ALTER TABLE liquibasec.adduqtest ADD CONSTRAINT uq_test UNIQUE (coltomakeuq)"", MySQLDatabase\n                .class);\n        /*\n         * In Informix, this test case is actually impossible. While it is allowed to cross-select data from\n          * different databases (using the database:schema.table notation), it is not allowed to send DDL to a\n          * different database (even if the database is on the same instance). So, even as the following\n          * statement is semantically false, it is syntactically correct.\n         */\n        assertCorrect(""ALTER TABLE liquibasec:liquibaseb.adduqtest ADD CONSTRAINT UNIQUE (coltomakeuq) CONSTRAINT "" +\n                ""uq_test"", InformixDatabase.class);\n\n        assertCorrect(""alter table liquibasec.adduqtest add constraint uq_test unique (coltomakeuq)"", OracleDatabase.class);\n        assertCorrect(""alter table liquibaseb.\\""adduqtest\\"" add constraint uq_test unique (\\""coltomakeuq\\"")"", PostgresDatabase.class);\n        assertCorrect(""alter table liquibasec.adduqtest add constraint uq_test unique (coltomakeuq)"", DerbyDatabase\n                .class);\n        assertCorrect(""alter table [liquibaseb].[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"",\n                SybaseASADatabase.class, SybaseDatabase.class);\n        assertCorrect(""alter table [liquibasec].[liquibaseb].[adduqtest] add constraint [uq_test] unique "" +\n                ""([coltomakeuq])"", MSSQLDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", FirebirdDatabase.class);\n\n        assertCorrect(""alter table [liquibaseb].[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", HsqlDatabase.class);\n        assertCorrect(""alter table \\""liquibasec\\"".[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", DB2Database.class, Db2zDatabase.class);\n        assertCorrect(""alter table [liquibaseb].[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", H2Database.class);\n        assertCorrectOnRest(""alter table [liquibasec].[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"");\n\n    }\n']",cross;allowed;Under;to;different;new;schema;alter;Exception;ALTER,2.0954757928848267e-09;1.2223608791828156e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.908260822296143, -5.276658535003662, -4.629240989685059, -5.818026065826416, -5.53585147857666, -0.02481016330420971]",0.9754951000213623
2,"['    @Test\n    public void execute_withTablespace() throws Exception {\n        statementUnderTest = new AddUniqueConstraintStatement(null, null, TABLE_NAME, new ColumnConfig[] { new ColumnConfig().setName(COLUMN_NAME)}, CONSTRAINT_NAME).setTablespace(TABLESPACE_NAME);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseASADatabase.class, SybaseDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq]) on liquibase2"", MSSQLDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint unique (coltomakeuq) constraint uq_test"", InformixDatabase.class);\n        assertCorrect(""alter table \\""adduqtest\\"" add constraint uq_test unique (\\""coltomakeuq\\"") USING INDEX TABLESPACE "" + TABLESPACE_NAME, PostgresDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", MySQLDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", MariaDBDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", DerbyDatabase.class, HsqlDatabase.class, DB2Database.class, H2Database.class, FirebirdDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", Db2zDatabase.class);\n        assertCorrectOnRest(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq]) USING INDEX TABLESPACE "" + TABLESPACE_NAME);\n    }\n']",ablespace;MySQLDatabase;Under;on;TABLES;ASADatabase;Unique;Constraint;Column;On,1.4551915228366852e-09;1.2514647096395493e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10,5,5,"[-5.784323215484619, -5.3354573249816895, -4.670741558074951, -5.684110164642334, -5.370007514953613, -0.025637907907366753]",0.974687933921814
2,"['    @Test\n    public void execute_withDefferedAndDisabled() throws Exception {\n        statementUnderTest = new AddUniqueConstraintStatement(null, null, TABLE_NAME, new ColumnConfig[] { new ColumnConfig().setName(COLUMN_NAME)}, CONSTRAINT_NAME).setDeferrable(true).setInitiallyDeferred(true).setDisabled(true);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", MSSQLDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseASADatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", MySQLDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint unique (coltomakeuq) constraint uq_test"", InformixDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq) DEFERRABLE INITIALLY "" +\n                ""DEFERRED DISABLE"", OracleDatabase.class);\n        assertCorrect(""ALTER TABLE \\""adduqtest\\"" ADD CONSTRAINT uq_test unique (\\""coltomakeuq\\"") DEFERRABLE INITIALLY"" +\n                "" DEFERRED"", PostgresDatabase.class);\n        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", DerbyDatabase.class);\n        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"");\n    }\n']",Deferrable;Deffered;addu;statement;Disabled;NAME;constraint;unique;addu;constraint,9.89530235528946e-10;7.566995918750763e-10;5.384208634495735e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.816955089569092, -5.37106990814209, -4.66639518737793, -5.700476169586182, -5.397480010986328, -0.025219645351171494]",0.9750956892967224
2,"['    @Test\n    public void generateSql_insert() throws Exception {\n        this.statementUnderTest = new MarkChangeSetRanStatement(new ChangeSet(""a"", ""b"", false, false, ""c"", ""e"", ""f"",\n                null), ChangeSet.ExecType.EXECUTED);\n        String version = LiquibaseUtil.getBuildVersion().replaceAll(""SNAPSHOT"", ""SNP"");\n        assertCorrect(""insert into [databasechangelog] ([id], [author], [filename], [dateexecuted], "" +\n                        ""[orderexecuted], [md5sum], [description], [comments], [exectype], [contexts], [labels], "" +\n                        ""[liquibase], [deployment_id]) values (\'a\', \'b\', \'c\', getdate(), 1, "" +\n                        ""\'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, \'"" + version + ""\',"" +\n                        "" null)"",\n                MSSQLDatabase.class);\n        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +\n                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +\n                        ""(\'a\', \'b\', \'c\', systimestamp, 1, \'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', "" +\n                        ""\'executed\', \'e\', null, \'"" + version + ""\', null)"",\n                OracleDatabase.class);\n        assertCorrect(""insert into [databasechangelog] ([id], [author], [filename], [dateexecuted], "" +\n                        ""[orderexecuted], [md5sum], [description], [comments], [exectype], [contexts], [labels], "" +\n                        ""[liquibase], [deployment_id]) values (\'a\', \'b\', \'c\', getdate(), 1, "" +\n                        ""\'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, \'"" + version + ""\',"" +\n                        "" null)"",\n                SybaseDatabase.class);\n        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +\n                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +\n                        ""(\'a\', \'b\', \'c\', "" +\n                        ""current year to fraction(5), 1, \'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', "" +\n                        ""\'executed\', "" +\n                        ""\'e\', null, \'"" + version + ""\', null)"",\n                InformixDatabase.class);\n        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +\n                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +\n                        ""(\'a\', \'b\', \'c\', current timestamp, 1, "" +\n                        ""\'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, \'"" + version + ""\',"" +\n                        "" null)"",\n                DB2Database.class);\n        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +\n                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +\n                        ""(\'a\', \'b\', \'c\', current_timestamp, 1, "" +\n                        ""\'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, \'"" + version + ""\',"" +\n                        "" null)"",\n                FirebirdDatabase.class, DerbyDatabase.class);\n        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +\n                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +\n                        ""(\'a\', \'b\', \'c\', now, 1, "" +\n                        ""\'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, \'"" + version + ""\',"" +\n                        "" null)"",\n                HsqlDatabase.class);\n        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +\n                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +\n                        ""(\'a\', \'b\', \'c\', now(), 1, "" +\n                        ""\'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, \'"" + version + ""\',"" +\n                        "" null)"",\n                SybaseASADatabase.class);\n        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +\n                        ""md5sum, `description`, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +\n                        ""(\'a\', \'b\', \'c\', now(), 1, "" +\n                        ""\'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, \'"" + version + ""\',"" +\n                        "" null)"",\n                MySQLDatabase.class, MariaDBDatabase.class);\n        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +\n                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +\n                        ""(\'a\', \'b\', \'c\', now(), 1, "" +\n                        ""\'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, \'"" + version + ""\',"" +\n                        "" null)"",\n                PostgresDatabase.class, H2Database.class);\n        assertCorrectOnRest(""insert into databasechangelog (id, author, filename, dateexecuted, "" +\n                ""orderexecuted, md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) "" +\n                ""values (\'a\', \'b\', \'c\', "" +\n                ""current timestamp, 1, \'8:d41d8cd98f00b204e9800998ecf8427e\', \'empty\', \'\', \'executed\', \'e\', null, "" +\n                ""\'"" + version + ""\', null)"");\n    }\n']",dateexecuted;SNAPSHOT;executed;this;Change;description;labels;databasechangelog;comments;version,5.093170329928398e-10;4.802132025361061e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.8762617111206055, -5.3405985832214355, -4.671497344970703, -5.712663173675537, -5.4735822677612305, -0.024760624393820763]",0.9755433797836304
2,"['    @Test\n    public void generateSql_update() throws Exception {\n        this.statementUnderTest = new MarkChangeSetRanStatement(new ChangeSet(""a"", ""b"", false, false, ""c"", ""e"", ""f"",\n                null), ChangeSet.ExecType.RERAN);\n        assertCorrect(""update [databasechangelog] set [dateexecuted] = getdate(), [deployment_id] = null, [exectype] "" +\n                        ""= \'reran\', [md5sum] = \'8:d41d8cd98f00b204e9800998ecf8427e\', [orderexecuted] = 2 where [id] ="" +\n                        "" \'a\' and"" +\n                        "" [author] = \'b\' and [filename] = \'c\'"",\n                MSSQLDatabase.class);\n        assertCorrect(""update databasechangelog set dateexecuted = systimestamp, deployment_id = null, exectype = "" +\n                        ""\'reran\', md5sum = \'8:d41d8cd98f00b204e9800998ecf8427e\', orderexecuted = 2 where id = \'a\' and"" +\n                        "" author "" +\n                        ""= \'b\' and filename = \'c\'"",\n                OracleDatabase.class);\n        assertCorrect(""update [databasechangelog] set [dateexecuted] = getdate(), [deployment_id] = null, [exectype] "" +\n                ""= \'reran\', [md5sum] = \'8:d41d8cd98f00b204e9800998ecf8427e\', [orderexecuted] = 2 where [id] = \'a\' and"" +\n                "" [author] = \'b\' and [filename] = \'c\'"", SybaseDatabase.class);\n        assertCorrect(""update [databasechangelog] set [dateexecuted] = current year to fraction(5), deployment_id = "" +\n                ""null, exectype = \'reran\', md5sum = \'8:d41d8cd98f00b204e9800998ecf8427e\', orderexecuted = 2 where id "" +\n                ""= \'a\' and author = \'b\' and filename = \'c\'"", InformixDatabase.class);\n        assertCorrect(""update [databasechangelog] set [dateexecuted] = current timestamp, deployment_id = null, "" +\n                        ""exectype = \'reran\', md5sum = \'8:d41d8cd98f00b204e9800998ecf8427e\', orderexecuted = 2 where "" +\n                        ""id = \'a\' and author = \'b\' and filename = \'c\'"",\n                DB2Database.class);\n        assertCorrect(""update [databasechangelog] set [dateexecuted] = current_timestamp, deployment_id = null, "" +\n                        ""exectype = \'reran\', md5sum = \'8:d41d8cd98f00b204e9800998ecf8427e\', orderexecuted = 2 where "" +\n                        ""id = \'a\' and author = \'b\' and filename = \'c\'"",\n                FirebirdDatabase.class,\n                DerbyDatabase.class);\n        assertCorrect(""update [databasechangelog] set [dateexecuted] = NOW(), deployment_id = null, exectype = "" +\n                        ""\'reran\', md5sum = \'8:d41d8cd98f00b204e9800998ecf8427e\', orderexecuted = 2 where id = \'a\' and"" +\n                        "" author = \'b\' and filename = \'c\'"",\n                SybaseASADatabase.class);\n        assertCorrect(""update [databasechangelog] set [dateexecuted] = NOW(), deployment_id = null, exectype = "" +\n                        ""\'reran\', md5sum = \'8:d41d8cd98f00b204e9800998ecf8427e\', orderexecuted = 2 where id = \'a\' and"" +\n                        "" author = \'b\' and filename = \'c\'"",\n                MySQLDatabase.class, MariaDBDatabase.class, HsqlDatabase.class, PostgresDatabase.class, H2Database\n                        .class);\n        assertCorrectOnRest(""update [databasechangelog] set [dateexecuted] = NOW(), [deployment_id] = null, [exectype] = \'reran\', [md5sum] = "" +\n                ""\'8:d41d8cd98f00b204e9800998ecf8427e\', [orderexecuted] = 2 where id = \'a\' and author = \'b\' and filename = \'c\'"");\n    }\n']",ERAN;exectype;ordere;and;and;reran;ecuted;databasechangelog;Type;cd,1.1641532182693481e-09;9.022187441587448e-10;5.966285243630409e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.833553314208984, -5.376220226287842, -4.698333740234375, -5.661739826202393, -5.408715724945068, -0.02492539770901203]",0.9753828048706055
2,"['    @Test\n    public void generate() throws Exception {\n        this.statementUnderTest = new CreateDatabaseChangeLogLockTableStatement();\n\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] boolean not null, "" +\n                ""[lockgranted] datetime, "" +\n                ""[lockedby] text, "" +\n                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, SQLiteDatabase.class);\n\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] bit not null, "" +\n                ""[lockgranted] datetime null, "" +\n                ""[lockedby] varchar(255) null, "" +\n                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, SybaseDatabase.class);\n\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] bit not null, "" +\n                ""[lockgranted] datetime null, "" +\n                ""[lockedby] varchar(255) null, "" +\n                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, SybaseASADatabase.class);\n\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] boolean not null, "" +\n                ""[lockgranted] datetime, "" +\n                ""[lockedby] varchar(255), "" +\n                ""primary key (id))""}, InformixDatabase.class);\n    \n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] [int] not null, "" +\n                ""[locked] [bit] not null, "" +\n                ""[lockgranted] [datetime2](3), "" +\n                ""[lockedby] [nvarchar](255), "" +\n                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, MSSQLDatabase.class);\n\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] integer not null, "" +\n                ""[locked] smallint not null, "" +\n                ""[lockgranted] timestamp, "" +\n                ""[lockedby] varchar(255), "" +\n                ""constraint [pk_dbchgloglock] primary key ([id]))""}, DB2Database.class);\n    \n        assertCorrect(new String[]{""create table databasechangeloglock ("" +\n                ""id integer not null, "" +\n                ""locked number(1) not null, "" +\n                ""lockgranted timestamp, "" +\n                ""lockedby varchar2(255), "" +\n                ""constraint pk_databasechangeloglock primary key (id))""}, OracleDatabase.class);\n\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] boolean not null, "" +\n                ""[lockgranted] datetime null, "" +\n                ""[lockedby] varchar(255) null, "" +\n                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, MySQLDatabase.class);\n    \n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] boolean not null, "" +\n                ""[lockgranted] datetime null, "" +\n                ""[lockedby] varchar(255) null, "" +\n                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, MariaDBDatabase.class);\n\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] boolean not null, "" +\n                ""[lockgranted] datetime, "" +\n                ""[lockedby] varchar(255), "" +\n                ""constraint [databasechangeloglock_pkey] primary key ([id]))""}, PostgresDatabase.class);\n\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] boolean not null, "" +\n                ""[lockgranted] datetime, "" +\n                ""[lockedby] varchar(255), "" +\n                ""constraint [pk_dbchgloglock] primary key ([id]))""}, Db2zDatabase.class);\n\n        // all other RDBMS\n        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +\n                ""[id] int not null, "" +\n                ""[locked] boolean not null, "" +\n                ""[lockgranted] datetime, "" +\n                ""[lockedby] varchar(255), "" +\n                ""constraint [pk_databasechangeloglock] primary key ([id]))""});\n\n    }\n']",statement;Lock;databasechangeloglock;boolean;lockgranted;Statement;Correct;class;datetime;table,7.275957614183426e-10;5.238689482212067e-10;4.911271389573812e-10;4.656612873077393e-10;3.92901711165905e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.851526260375977, -5.31459379196167, -4.640491485595703, -5.762076377868652, -5.474669456481934, -0.025096306577324867]",0.9752160906791687
2,"['    @Test\n    public void noSchema() throws Exception {\n        this.statementUnderTest = new RenameColumnStatement(null, null, TABLE_NAME, COLUMN_NAME, ""new_name"", ""int"");\n\n        assertCorrect(""rename column table_name.column_name to new_name"", DerbyDatabase.class, InformixDatabase.class);\n        assertCorrect(""alter table table_name alter column column_name rename to new_name"", H2Database.class, HsqlDatabase.class);\n        assertCorrect(""alter table table_name alter column column_name to new_name"", FirebirdDatabase.class);\n        assertCorrect(""alter table table_name change column_name new_name int"", MySQLDatabase.class, MariaDBDatabase.class);\n        assertCorrect(""exec sp_rename \'[table_name].[column_name]\', \'new_name\'"", MSSQLDatabase.class);\n        assertCorrect(""exec sp_rename \'table_name.column_name\', \'new_name\'"", SybaseDatabase.class);\n        assertCorrect(""alter table [table_name] rename column_name to new_name"",SybaseASADatabase.class);\n        assertCorrectOnRest(""alter table [table_name] rename column [column_name] to [new_name]"");\n    }\n']",Column;Derby;this;ASADatabase;TABLE;rename;alter;statement;Maria;rename,7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.81734561920166, -5.4504475593566895, -4.686408519744873, -5.677871227264404, -5.346462726593018, -0.024984929710626602]",0.9753246307373047
2,"['    @Test\n    public void noSchema() throws Exception {\n        this.statementUnderTest = new AddAutoIncrementStatement(null, null, TABLE_NAME, COLUMN_NAME, ""int"", null, null, null, null);\n\n        assertCorrect(""alter table [table_name] modify column_name serial"", PostgresDatabase.class);\n        assertCorrect(""alter table table_name modify column_name int auto_increment"", MySQLDatabase.class);\n        assertCorrect(""ALTER TABLE [table_name] ALTER COLUMN [column_name] SET GENERATED BY DEFAULT AS IDENTITY"", DB2Database.class);\n        assertCorrect(""alter table table_name alter column column_name int generated by default as identity"", HsqlDatabase.class);\n        assertCorrect(""alter table table_name alter column column_name int auto_increment"", H2Database.class);\n\n        assertCorrect(""ALTER TABLE [table_name] MODIFY [column_name] serial"", InformixDatabase.class);\n        assertCorrect(""ALTER TABLE [table_name] ALTER [column_name] SET DEFAULT AUTOINCREMENT"", SybaseASADatabase.class);\n        assertCorrect(""ALTER TABLE [table_name] MODIFY [column_name] int identity"", SybaseDatabase.class);\n        assertCorrect(""ALTER TABLE [table_name] ALTER column [column_name] SET GENERATED BY DEFAULT AS IDENTITY"", Db2zDatabase.class);\n\n        assertCorrectOnRest(""ALTER TABLE [table_name] MODIFY [column_name] int AUTO_INCREMENT"");\n    }\n']",ALTER;INCREMENT;IDENTITY;no;DEFAULT;IDENTITY;increment;Auto;Increment;SET,9.604264050722122e-10;9.313225746154785e-10;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.803653240203857, -5.410816192626953, -4.679478168487549, -5.681339263916016, -5.3564629554748535, -0.025209998711943626]",0.9751051068305969
2,"['//    @Test\n//    public void execute_stringDefault() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""varchar(50)"", ""new default"")) {\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);\n//                        assertNotNull(columnSnapshot);\n//                        assertEquals(NEW_COLUMN_NAME.toUpperCase(), columnSnapshot.getName().toUpperCase());\n//                        assertEquals(""varchar"".toUpperCase(), columnSnapshot.getShortName().toUpperCase().replaceAll(""VARCHAR2"", ""VARCHAR""));\n//                        assertEquals(50, columnSnapshot.getColumnSize());\n//                        assertEquals(""new default"", columnSnapshot.getDefaultValue());\n//\n//                        assertEquals(true, columnSnapshot.isNullable());\n//                    }\n//                });\n//    }\n']",On;protected;NEW;TABLE;Assert;Column;NAME;TABLE;Short;ql,7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.799054145812988, -5.28145694732666, -4.686247825622559, -5.678530216217041, -5.412598133087158, -0.025538675487041473]",0.9747846722602844
2,"['//    @Test\n//    public void execute_intDefault() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""int"", 42)) {\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);\n//                        assertNotNull(columnSnapshot);\n//                        assertEquals(NEW_COLUMN_NAME.toUpperCase(), columnSnapshot.getName().toUpperCase());\n//                        if (snapshot.getDatabase() instanceof OracleDatabase) {\n//                            assertEquals(""NUMBER"", columnSnapshot.getShortName().toUpperCase());\n//                        } else {\n//                            assertTrue(columnSnapshot.getShortName().toUpperCase().startsWith(""INT""));\n//                        }\n//                        assertEquals(42, ((Number) columnSnapshot.getDefaultValue()).intValue());\n//\n//                        assertEquals(true, columnSnapshot.isNullable());\n//                    }\n//\n//                }\n//\n//        );\n//    }\n']",Null;Databases;Add;Default;new;COLUM;new;snapshot;Column;Oracle,6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.821716785430908, -5.253607749938965, -4.666988372802734, -5.71293306350708, -5.447813510894775, -0.025523336604237556]",0.974799633026123
2,"['//    @Test\n//    public void execute_floatDefault() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""float"", 42.5)) {\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);\n//                        assertNotNull(columnSnapshot);\n//                        assertEquals(NEW_COLUMN_NAME.toUpperCase(), columnSnapshot.getName().toUpperCase());\n//                        assertEquals(new Double(42.5), new Double(((Number) columnSnapshot.getDefaultValue()).doubleValue()));\n//\n//                        assertEquals(true, columnSnapshot.isNullable());\n//                    }\n//                });\n//    }\n']",protected;Double;Equals;NAME;Databases;Default;Equals;snapshot;Snapshot;execute,5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.824317932128906, -5.301112651824951, -4.676387786865234, -5.701148986816406, -5.4289045333862305, -0.025300895795226097]",0.9750164747238159
2,"['//    @Test\n//    public void execute_notNull() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""int"", 42, new NotNullConstraint())) {\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);\n//                        assertNotNull(columnSnapshot);\n//                        assertEquals(false, columnSnapshot.isNullable());\n//                    }\n//                }\n//\n//        );\n//    }\n']",Assert;Execute;Null;snapshot;Column;Databases;Column;Exception;COLUM;Snapshot,1.0040821507573128e-09;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.894826889038086, -5.333794116973877, -4.646196365356445, -5.782354354858398, -5.476831436157227, -0.024745039641857147]",0.9755585789680481
2,"['//    @Test\n//    public void execute_primaryKey_nonAutoIncrement() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""int"", null, new PrimaryKeyConstraint())) {\n//\n//                    protected boolean expectedException(Database database, DatabaseException exception) {\n//                        return (database instanceof DB2Database\n//                                || database instanceof DerbyDatabase\n//                                || database instanceof H2Database\n//                                || database instanceof CacheDatabase);\n//                    }\n//\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);\n//                        assertNotNull(columnSnapshot);\n//                        assertEquals(false, columnSnapshot.isNullable());\n//                        assertTrue(columnSnapshot.isPrimaryKey());\n//                        assertEquals(false, columnSnapshot.isAutoIncrement());\n//                    }\n//                });\n//    }\n']",protected;Key;Auto;DB;pre;Column;post;Generator;get;snapshot,1.280568540096283e-09;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.473825588822365e-10;2.1827872842550278e-10;2.1100277081131935e-10,5,5,"[-5.918789863586426, -5.186684608459473, -4.605560302734375, -5.807740211486816, -5.558150291442871, -0.025456516072154045]",0.9748647809028625
2,"['//    @Test\n//    public void execute_altSchema() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new SqlStatementDatabaseTest(TestContext.ALT_SCHEMA, new AddColumnStatement(TestContext.ALT_SCHEMA, TABLE_NAME, NEW_COLUMN_NAME, ""varchar(50)"", ""new default"")) {\n//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));\n//                    }\n//\n//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);\n//                        assertNotNull(columnSnapshot);\n//                        assertEquals(NEW_COLUMN_NAME.toUpperCase(), columnSnapshot.getName().toUpperCase());\n//                        assertEquals(""new default"", columnSnapshot.getDefaultValue());\n//\n//                        assertEquals(true, columnSnapshot.isNullable());\n//                    }\n//\n//                });\n//    }\n']",Null;protected;CHEMA;Execute;pre;Assert;ALT;Database;Context;NAME,8.731149137020111e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.833212852478027, -5.296117305755615, -4.673481464385986, -5.721655368804932, -5.439958095550537, -0.02520848624408245]",0.9751067161560059
2,"['//    @Test\n//      public void execute_primaryKeyAutoIncrement() throws Exception {\n//          new DatabaseTestTemplate().testOnAvailableDatabases(\n//                  new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""int"", null, new PrimaryKeyConstraint(), new AutoIncrementConstraint())) {\n//\n//                      protected boolean expectedException(Database database, DatabaseException exception) {\n//                          return (database instanceof DB2Database\n//                                  || database instanceof DerbyDatabase\n//                                  || database instanceof H2Database\n//                                  || database instanceof CacheDatabase\n//                                    || !database.supportsAutoIncrement());\n//                      }\n//\n//                      protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                          assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));\n//                      }\n//\n//                      protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {\n//                          Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);\n//                          assertNotNull(columnSnapshot);\n//                          assertEquals(false, columnSnapshot.isNullable());\n//                          assertTrue(columnSnapshot.isPrimaryKey());\n//                          assertEquals(true, columnSnapshot.isAutoIncrement());\n//                      }\n//                  });\n//      }\n']",Execute;Assert;instanceof;protected;boolean;execute;Exception;NEW;Increment;Null,6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10,5,5,"[-5.919966697692871, -5.198218822479248, -4.608086109161377, -5.800442218780518, -5.5561747550964355, -0.025392016395926476]",0.9749276638031006
2,"['    @Test\n    public void generateSql() throws Exception {\n        this.statementUnderTest = new SelectFromDatabaseChangeLogLockStatement(""LOCKED"");\n        assertCorrect(""select [locked] from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseDatabase.class);\n        assertCorrect(""select [locked] from [databasechangeloglock] where [id]=1"", SybaseASADatabase.class);\n        assertCorrect(""select [locked] from [databasechangeloglock] where [id]=1 for update"", OracleDatabase.class);\n        assertCorrectOnRest(""select [locked] from [databasechangeloglock] where [id]=1"");\n    }\n']",Rest;databasechangeloglock;databasechangeloglock;where;databasechangeloglock;from;Correct;select;Sybase;select,1.0477378964424133e-09;7.566995918750763e-10;7.275957614183426e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.858963966369629, -5.54914665222168, -4.669229507446289, -5.741468906402588, -5.314051151275635, -0.024555576965212822]",0.9757435917854309
2,"['    @Test\n    public void generateSql_count() throws Exception {\n        this.statementUnderTest = new SelectFromDatabaseChangeLogLockStatement(new ColumnConfig().setName(""COUNT(*)"", true));\n        assertCorrect(""select count(*) from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseDatabase.class);\n        assertCorrect(""select count(*) from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseASADatabase.class);\n        assertCorrect(""select count(*) from [databasechangeloglock] where [id]=1 for update"", OracleDatabase.class);\n        assertCorrectOnRest(""select count(*) from [databasechangeloglock] where [id]=1"");\n    }\n']",OUNT;Column;new;class;Statement;Correct;Log;Correct;Oracle;From,1.1641532182693481e-09;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.860379695892334, -5.549609661102295, -4.675666809082031, -5.733298301696777, -5.3251142501831055, -0.02445937693119049]",0.9758373498916626
2,"['    @Test\n    public void generateSql_multicolumn() throws Exception {\n        this.statementUnderTest = new SelectFromDatabaseChangeLogLockStatement(""LOCKED"", ""LOCKEDBY"");\n        assertCorrect(""select [locked],[lockedby] from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseDatabase.class);\n        assertCorrect(""select [locked],[lockedby] from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseASADatabase.class);\n        assertCorrect(""select [locked],[lockedby] from [databasechangeloglock] where [id]=1 for update"", OracleDatabase.class);\n        assertCorrectOnRest(""select [locked],[lockedby] from [databasechangeloglock] where [id]=1"");\n    }\n']",generate;databasechangeloglock;Rest;On;where;ASADatabase;class;Sybase;locked;Select,1.3969838619232178e-09;8.731149137020111e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.845178604125977, -5.544262409210205, -4.683872699737549, -5.715998649597168, -5.310322284698486, -0.02457965351641178]",0.9757199883460999
2,['    @Test\n    public void nothing() {\n\n    }\n'],nothing,-3.725290298461914e-09,5,5,"[-6.032234191894531, -5.653377532958984, -4.524457931518555, -5.896212577819824, -5.3434343338012695, -0.024575117975473404]",0.9757243990898132
2,['//    @Test\n//    public void waitForLock_twoConnections() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest() {\n//            public void performTest(Database database) throws Exception {\n////                if (database instanceof H2Database) {\n////                    return;\n////                }\n//\n//                String url = DatabaseTestContext.getInstance().getTestUrl(database);\n//                System.out.println(url);\n//                DatabaseConnection connection2 = DatabaseTestContext.getInstance().openDatabaseConnection(url);\n//                Database database2 = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection2);\n//\n//                assertTrue(LockService.getInstance(database).acquireLock());\n//                assertTrue(LockService.getInstance(database).hasChangeLogLock());\n//                assertFalse(LockService.getInstance(database2).hasChangeLogLock());\n//\n//                assertFalse(LockService.getInstance(database2).acquireLock());\n//                assertFalse(LockService.getInstance(database2).acquireLock());\n//\n//                LockService.getInstance(database).releaseLock();\n//                assertTrue(LockService.getInstance(database2).acquireLock());\n//\n//            }\n'],wait;perform;Databases;has;Context;Lock;acquire;return;True;Lock,4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.931472301483154, -5.347567081451416, -4.628378391265869, -5.826900005340576, -5.491962909698486, -0.02455069124698639]",0.9757482409477234
2,['//    @Test\n//    public void waitForLock_severalAquireLocksCalled() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest() {\n//            public void performTest(Database database) throws Exception {\n//                assertTrue(LockService.getInstance(database).acquireLock());\n//                assertTrue(LockService.getInstance(database).acquireLock());\n//                assertTrue(LockService.getInstance(database).acquireLock());\n//                assertTrue(LockService.getInstance(database).acquireLock());\n//            }\n'],Template;acquire;acquire;database;Databases;Database;new;Instance;database;True,1.57160684466362e-09;9.022187441587448e-10;8.149072527885437e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.473825588822365e-10;2.0372681319713593e-10,5,5,"[-5.854275226593018, -5.414290428161621, -4.6781792640686035, -5.762803077697754, -5.360378742218018, -0.02476155385375023]",0.9755424857139587
2,"['//    @Test\n//    public void waitForLock_emptyDatabase() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new DatabaseTest() {\n//\n//                    public void performTest(Database database) throws Exception {\n//                        Executor executor = ExecutorService.getInstance().getExecutor(database);\n//                        try {\n//                            LockService.getInstance(database).resetAll();\n//\n//                            executor.execute(new DropTableStatement(null, database.getDatabaseChangeLogTableName(), false), new ArrayList<SqlVisitor>());\n//                        } catch (DatabaseException e) {\n//                            ; //must not be there\n//                        }\n//                        try {\n//                            executor.execute(new DropTableStatement(null, database.getDatabaseChangeLogLockTableName(), false), new ArrayList<SqlVisitor>());\n//                        } catch (DatabaseException e) {\n//                            ; //must not be there\n//                        }\n//\n//                        database.commit();\n//\n//                        LockService lockManager = LockService.getInstance(database);\n//                        lockManager.waitForLock();\n//                        lockManager.waitForLock();\n//                    }\n']",Executor;Databases;Service;new;Visitor;Database;Database;Database;Array;perform,3.026798367500305e-09;1.076841726899147e-09;6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.907327175140381, -5.129640579223633, -4.59650993347168, -5.809418678283691, -5.5660576820373535, -0.025881880894303322]",0.9744501709938049
2,"['//    @Test\n//    public void waitForLock_loggingDatabase() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new DatabaseTest() {\n//\n//                    public void performTest(Database database) throws Exception {\n//\n//                        LockService.getInstance(database).resetAll();\n//\n//                        Executor executor = ExecutorService.getInstance().getExecutor(database);\n//                        try {\n//                            executor.execute(new DropTableStatement(null, database.getDatabaseChangeLogTableName(), false), new ArrayList<SqlVisitor>());\n//                        } catch (DatabaseException e) {\n//                            ; //must not be there\n//                        }\n//                        try {\n//                            executor.execute(new DropTableStatement(null, database.getDatabaseChangeLogLockTableName(), false), new ArrayList<SqlVisitor>());\n//                        } catch (DatabaseException e) {\n//                            ; //must not be there\n//                        }\n//\n//                        database.commit();\n//\n//                        ExecutorService.getInstance().setExecutor(database, (new LoggingExecutor(ExecutorService.getInstance().getExecutor(database), new StringWriter(), database)));\n//\n//                        LockService lockManager = LockService.getInstance(database);\n//                        lockManager.waitForLock();\n//                    }\n']",Template;database;get;Service;Array;database;Database;Change;Drop;must,4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.055902197957039e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.923213958740234, -5.162572383880615, -4.594836235046387, -5.825170040130615, -5.56715726852417, -0.025606071576476097]",0.9747189879417419
2,"['//    @Test\n//    public void waitForLock_loggingThenExecute() throws Exception {\n//        new DatabaseTestTemplate().testOnAvailableDatabases(\n//                new DatabaseTest() {\n//\n//                    public void performTest(Database database) throws Exception {\n//\n//                        LockService.getInstance(database).resetAll();\n//\n//                        try {\n//                            ExecutorService.getInstance().getExecutor(database).execute(new DropTableStatement(null, database.getDatabaseChangeLogTableName(), false), new ArrayList<SqlVisitor>());\n//                        } catch (DatabaseException e) {\n//                            ; //must not be there\n//                        }\n//                        try {\n//                            ExecutorService.getInstance().getExecutor(database).execute(new DropTableStatement(null, database.getDatabaseChangeLogLockTableName(), false), new ArrayList<SqlVisitor>());\n//                        } catch (DatabaseException e) {\n//                            ; //must not be there\n//                        }\n//\n//                        database.commit();\n//\n////                        Database clearDatabase = database.getClass().getConstructor().newInstance();\n////                        clearDatabase.setConnection(database.getConnection());\n//\n//                        Executor originalTemplate = ExecutorService.getInstance().getExecutor(database);\n//                        ExecutorService.getInstance().setExecutor(database, new LoggingExecutor(originalTemplate, new StringWriter(), database));\n//\n//                        LockService lockManager = LockService.getInstance(database);\n//                        lockManager.waitForLock();\n//\n//                        ExecutorService.getInstance().setExecutor(database, originalTemplate);\n//                        lockManager.waitForLock();\n//\n////                        database.getWriteExecutor().execute(database.getSelectChangeLogLockSQL());\n//                    }\n']",catch;Exception;new;Then;Executor;Change;Table;Database;Lock;Service,1.979060471057892e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9142537117004395, -5.206723690032959, -4.625398635864258, -5.798579216003418, -5.541200160980225, -0.025249751284718513]",0.9750662446022034
2,"['    @Test\n    public void shouldntRunWhenShouldRunIsFalse() {\n        System.setProperty(""liquibase.shouldRun"", ""false"");\n        validateRunningState(false);\n    }\n']",When;shouldnt;Run;State;Should;False;validate;false;false;Running,1.5133991837501526e-09;8.731149137020111e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.996459484100342, -5.647642135620117, -4.597518444061279, -5.853207588195801, -5.352046012878418, -0.0239847581833601]",0.9763007164001465
2,"['    @Test\n    public void shouldRunWhenShouldRunIsTrue() {\n        System.setProperty(""liquibase.shouldRun"", ""true"");\n        validateRunningState(true);\n    }\n']",System;Property;When;Should;true;validate;Run;Running;true;True,1.3969838619232178e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-6.0060200691223145, -5.640964031219482, -4.592142581939697, -5.862252712249756, -5.369650840759277, -0.023929009214043617]",0.9763550162315369
2,"['    @Test\n    public void shouldntRunWhenConfigShouldRunIsFalse() {\n        System.setProperty(""liquibase.config.shouldRun"", ""false"");\n        validateRunningState(false);\n    }\n']",config;Property;System;validate;Run;should;When;false;Should;set,1.0186340659856796e-09;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;1.1641532182693481e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.9103830456733704e-10,5,5,"[-5.99747371673584, -5.658519744873047, -4.603219985961914, -5.843711853027344, -5.344180583953857, -0.02395065873861313]",0.9763338565826416
2,"['    @Test\n    public void shouldRunWhenConfigShouldRunIsTrue() {\n        System.setProperty(""liquibase.config.shouldRun"", ""true"");\n        validateRunningState(true);\n    }\n']",Should;When;State;should;True;iquibase;config;set;true;Config,1.6298145055770874e-09;1.5133991837501526e-09;1.1641532182693481e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.006649971008301, -5.645634651184082, -4.598849773406982, -5.851378917694092, -5.365307331085205, -0.02389374189078808]",0.976389467716217
2,"['//    @Test\n//    public void testCreateCDILiquibaseConfig() throws Exception {\n//        Set<Bean<?>> beans = new LinkedHashSet<Bean<?>>();\n//        beans.add(mockBean(new A1()));\n//        beans.add(mockBean(new B2()));\n//\n//        when(bm.getBeans(eq(Object.class), eq(new SchemesCDIConfigBuilder.AnnotationLiteralDefault()))).thenReturn(beans);\n//\n//        CDILiquibaseConfig config = schemesCDIConfigBuilder.createCDILiquibaseConfig();\n//\n//        Assert.assertNotNull(config);\n//        Assert.assertEquals(""liquibase.cdi.schema.xml"", config.getChangeLog());\n//    }\n']",ock;add;schemes;Bean;Object;add;beans;beans;Bean;new,5.238689482212067e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.1650415621697903e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.961711406707764, -5.552489280700684, -4.639379024505615, -5.789491176605225, -5.409878253936768, -0.02393284998834133]",0.976351261138916
2,['    @BeforeEach\n    public void setupPropertyReader() throws Exception {\n      propertyReader = newSingletonPropertyReader(PRESENT_PROPERTY_VALUE);\n    }\n'],Property;Each;VALUE;Singleton;setup;property;Reader;PRESENT;Reader;new,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-4.94765117764473e-10;-6.111804395914078e-10,5,5,"[-6.0458984375, -5.601595878601074, -4.5200042724609375, -5.945115089416504, -5.448443412780762, -0.024159669876098633]",0.976129949092865
2,"['    @Test\n    public void shouldThrowExceptionWhenKeyIsNull() {\n      assertThrows(NullPointerException.class, () -> propertyReader.readProperty(null));\n    }\n']",When;property;read;Key;Throw;Throws;Exception;Property;Exception;class,6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-2.3283064365386963e-10;-4.656612873077393e-10;-4.656612873077393e-10,5,5,"[-5.987181186676025, -5.605236530303955, -4.573506832122803, -5.886804580688477, -5.362195014953613, -0.024269510060548782]",0.9760226011276245
2,"['    @Test\n    public void shouldThrowExceptionWhenKeyIsEmptyOrOnlyWhitespace() {\n      assertThrows(IllegalArgumentException.class, () -> propertyReader.readProperty(""""));\n      assertThrows(IllegalArgumentException.class, () -> propertyReader.readProperty(""    ""));\n    }\n']",Whitespace;Only;read;Illegal;property;Throws;class;property;Reader;Key,3.725290298461914e-09;1.6298145055770874e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.963695049285889, -5.588020324707031, -4.62094259262085, -5.829702854156494, -5.37386417388916, -0.02401757799088955]",0.9762685298919678
2,"['    @Test\n    public void shouldReturnValueWhenKeyIsPresent() {\n      assertThat(propertyReader.readProperty(PRESENT_PROPERTY_KEY), is(PRESENT_PROPERTY_VALUE));\n    }\n']",When;PRESENT;KEY;read;Key;Property;That;property;VALUE;Reader,2.0954757928848267e-09;1.6298145055770874e-09;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-5.820766091346741e-11,5,5,"[-5.99021577835083, -5.6661248207092285, -4.581584930419922, -5.872437000274658, -5.358713150024414, -0.024011991918087006]",0.9762740135192871
2,"['    @Test\n    public void shouldReturnTrimmedValueWhenKeyIsPresentAndValueHasLeadingAndTrailingWhitespace()\n        throws Exception {\n      final PropertyReader propertyReader =\n          newSingletonPropertyReader(""  "" + PRESENT_PROPERTY_VALUE + ""  "");\n\n      assertThat(propertyReader.readProperty(PRESENT_PROPERTY_KEY), is(PRESENT_PROPERTY_VALUE));\n    }\n']",should;VALUE;Singleton;property;Reader;Leading;Has;Reader;Property;property,1.280568540096283e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;7.275957614183426e-10;6.111804395914078e-10;5.820766091346741e-10;5.711626727133989e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.96648645401001, -5.5708112716674805, -4.6256022453308105, -5.828488349914551, -5.418917655944824, -0.023824485018849373]",0.9764571785926819
2,"['    @Test\n    public void shouldReturnEmptyWhenKeyIsAbsent() {\n      assertThat(propertyReader.readProperty(ABSENT_PROPERTY_KEY), is(emptyString()));\n    }\n']",should;When;read;BSENT;Key;empty;Reader;That;KEY;property,1.3969838619232178e-09;9.313225746154785e-10;6.693881005048752e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-6.005617618560791, -5.681083679199219, -4.568340301513672, -5.869803428649902, -5.353242874145508, -0.02409403771162033]",0.976193904876709
2,"['    @Test\n    public void shouldReturnValueWhenKeyIsPresent() throws Exception {\n      final String value = ""value"";\n      final PropertyReader propertyReader = newSingletonPropertyReader(value);\n\n      assertThat(\n          propertyReader.readPropertyOrDefault(PRESENT_PROPERTY_KEY, ""defaultValue""), is(value));\n    }\n']",That;should;PROPERTY;default;When;Reader;final;property;KEY;Property,1.280568540096283e-09;1.1641532182693481e-09;8.731149137020111e-10;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10,5,5,"[-5.947415351867676, -5.586794853210449, -4.6250739097595215, -5.818410396575928, -5.378636360168457, -0.02403550036251545]",0.9762510657310486
2,"['    @Test\n    public void shouldReturnDefaultValueWhenKeyIsAbsent() throws Exception {\n      final String defaultValue = ""defaultValue"";\n      final PropertyReader propertyReader = newEmptyPropertyReader();\n\n      assertThat(\n          propertyReader.readPropertyOrDefault(ABSENT_PROPERTY_KEY, defaultValue),\n          is(defaultValue));\n    }\n']",PROPERTY;final;Return;Property;Default;Reader;Or;Empty;Value;Key,1.4551915228366852e-09;4.511093720793724e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.346940502524376e-10;2.9103830456733704e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.961382865905762, -5.578768253326416, -4.613286972045898, -5.833302021026611, -5.401166915893555, -0.023998143151402473]",0.9762875437736511
2,"['    @Test\n    public void shouldReturnValueWhenKeyIsPresent() throws Exception {\n      final boolean value = true;\n      final PropertyReader propertyReader = newSingletonPropertyReader(String.valueOf(value));\n\n      assertThat(\n          propertyReader.readBooleanPropertyOrDefault(PRESENT_PROPERTY_KEY, false), is(value));\n    }\n']",should;PRESENT;Reader;Return;property;Value;Present;Exception;final;Or,2.3283064365386963e-09;1.1059455573558807e-09;8.149072527885437e-10;4.656612873077393e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.9700026512146, -5.575062274932861, -4.610280990600586, -5.848239898681641, -5.4140119552612305, -0.023917021229863167]",0.9763668179512024
2,"['    @Test\n    public void shouldReturnDefaultValueWhenKeyIsAbsent() throws Exception {\n      final boolean defaultValue = true;\n      final PropertyReader propertyReader = newEmptyPropertyReader();\n\n      assertThat(\n          propertyReader.readBooleanPropertyOrDefault(ABSENT_PROPERTY_KEY, defaultValue),\n          is(defaultValue));\n    }\n']",That;When;Return;Default;Exception;Reader;Property;Or;Property;Value,1.3969838619232178e-09;1.1641532182693481e-09;1.1059455573558807e-09;7.566995918750763e-10;7.566995918750763e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.968203544616699, -5.543206691741943, -4.59970235824585, -5.856995105743408, -5.428462028503418, -0.024064479395747185]",0.9762227535247803
2,"['    @Test\n    public void shouldReturnValueWhenKeyIsPresent() throws Exception {\n      final int value = 42;\n      final PropertyReader propertyReader = newSingletonPropertyReader(String.valueOf(value));\n\n      assertThat(propertyReader.readIntegerPropertyOrDefault(PRESENT_PROPERTY_KEY, -1), is(value));\n    }\n']",Value;When;Key;That;final;final;Default;value;should;Exception,4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.969306945800781, -5.604443550109863, -4.625647068023682, -5.835096836090088, -5.397417068481445, -0.023766398429870605]",0.9765138030052185
2,"['    @Test\n    public void shouldReturnDefaultValueWhenKeyIsPresentAndValueIsNotAnInteger() throws Exception {\n      final int defaultValue = 777;\n      final PropertyReader propertyReader = newSingletonPropertyReader(""other"");\n\n      assertThat(\n          propertyReader.readIntegerPropertyOrDefault(PRESENT_PROPERTY_KEY, defaultValue),\n          is(defaultValue));\n    }\n']",should;Property;Exception;Property;PROPERTY;Reader;default;final;Value;Reader,1.076841726899147e-09;9.313225746154785e-10;8.149072527885437e-10;7.130438461899757e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.944361686706543, -5.560807704925537, -4.632881164550781, -5.810162544250488, -5.39323091506958, -0.024023281410336494]",0.9762628674507141
2,"['    @Test\n    public void shouldReturnDefaultValueWhenKeyIsAbsent() throws Exception {\n      final int defaultValue = 777;\n      final PropertyReader propertyReader = newEmptyPropertyReader();\n\n      assertThat(\n          propertyReader.readIntegerPropertyOrDefault(ABSENT_PROPERTY_KEY, defaultValue),\n          is(defaultValue));\n    }\n']",That;Default;Value;Exception;Key;Default;Property;property;Or;Reader,2.6775524020195007e-09;9.89530235528946e-10;9.89530235528946e-10;7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10,5,5,"[-5.964494228363037, -5.557259559631348, -4.609265327453613, -5.845874309539795, -5.418589115142822, -0.023997677490115166]",0.9762879610061646
2,['  @Test\n          public void connectionRemoved(final INode to) {\n            serverCount.decrementAndGet();\n          }\n'],Removed;server;to;INode;Get;connection;final;decrement;Count,1.862645149230957e-09;1.5425030142068863e-09;1.5133991837501526e-09;1.0477378964424133e-09;6.402842700481415e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.3969838619232178e-09;-1.862645149230957e-09,5,5,"[-6.014078617095947, -5.54874324798584, -4.580619812011719, -5.86005163192749, -5.446494102478027, -0.024034105241298676]",0.976252555847168
2,"['  @Test\n    public void messageReceived(final Serializable msg, final INode from) {\n      synchronized (lock) {\n        messages.add(msg);\n        senders.add(from);\n        lock.notifyAll();\n      }\n    }\n']",synchronized;lock;final;from;message;final;msg;All;ify;messages,1.7462298274040222e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;5.820766091346741e-11;-2.9103830456733704e-11;-5.820766091346741e-11;-1.1641532182693481e-10,5,5,"[-6.031296730041504, -5.5902509689331055, -4.556190490722656, -5.888693332672119, -5.435256481170654, -0.024056099355220795]",0.976230800151825
2,['  @Test\n    public void updatePlayerList(final Collection<ChatParticipant> players) {\n      playerCount.set(players.size());\n    }\n'],Participant;update;size;players;set;final;players;Collection;Count;Player,3.3760443329811096e-09;1.1059455573558807e-09;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0,5,5,"[-6.052338123321533, -5.642819404602051, -4.54117488861084, -5.902414321899414, -5.429904460906982, -0.023957176133990288]",0.9763275384902954
2,['  @Test\n    public int increment(final int testVal) {\n      senderNode = MessageContext.getSender();\n      return testVal + 1;\n    }\n'],increment;Message;Val;sender;Node;return;Val;final;ender;get,1.3969838619232178e-09;8.731149137020111e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-2.3283064365386963e-10;-5.820766091346741e-10,5,5,"[-6.032079696655273, -5.626495361328125, -4.555390357971191, -5.8769941329956055, -5.412452697753906, -0.024063199758529663]",0.9762240052223206
2,['  @Test\n    public void testNoParams() {\n      incrementCount();\n    }\n'],increment;No;Count;Params,6.51925802230835e-09;1.862645149230957e-09;1.6298145055770874e-09;-3.026798367500305e-09,5,5,"[-6.03973913192749, -5.600286960601807, -4.513016700744629, -5.9211015701293945, -5.383304595947266, -0.024619782343506813]",0.9756808280944824
2,"['  @Test\n    public void run() {\n      Interruptibles.sleep(0L, 1);\n      done = true;\n    }\n']",sleep;Interruptibles;done;true;run,3.725290298461914e-09;3.259629011154175e-09;1.862645149230957e-09;-5.820766091346741e-11;-4.656612873077393e-10,5,5,"[-6.0505194664001465, -5.58294153213501, -4.519219398498535, -5.924315929412842, -5.429825782775879, -0.024367589503526688]",0.9759268760681152
2,"['    @BeforeEach\n    public void createLobbyLoginValidator() throws Exception {\n      lobbyLoginValidator =\n          new LobbyLoginValidator(\n              databaseDao,\n              new RsaAuthenticator(TestSecurityUtils.loadRsaKeyPair()),\n              () -> bcryptSalt,\n              failedLoginThrottle,\n              tempPasswordVerification,\n              new AllowLoginRules(databaseDao),\n              AllowCreateUserRules.builder()\n                  .userDao(userDao)\n                  .nameValidator(PlayerNameValidation::validate)\n                  .emailValidator(PlayerEmailValidation::validate)\n                  .build());\n    }\n']",sa;Salt;builder;Login;Rules;new;Login;Validator;ao;ao,7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.220055416226387e-10;3.4924596548080444e-10,5,5,"[-5.996374607086182, -5.405671119689941, -4.582972049713135, -5.885573387145996, -5.529314994812012, -0.02424263209104538]",0.9760487675666809
2,['    @BeforeEach\n    public void givenNoBans() {\n      givenNoMacIsBanned();\n      givenNoUsernameIsBanned();\n      when(databaseDao.getBadWordDao()).thenReturn(badWordDao);\n    }\n'],Username;Before;Word;No;ans;bad;database;ao;Mac;anned,1.862645149230957e-09;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-6.023902893066406, -5.626970291137695, -4.570896148681641, -5.888737678527832, -5.422736644744873, -0.02383565902709961]",0.9764461517333984
2,['    @BeforeEach\n    public void before()\n    {\n        container = new MBeanContainer(ManagementFactory.getPlatformMBeanServer());\n    }\n'],Bean;Server;Management;Before;before;new;Platform;Container;container;get,3.841705620288849e-09;2.7939677238464355e-09;1.979060471057892e-09;1.862645149230957e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;2.3283064365386963e-10;1.1641532182693481e-10;-4.656612873077393e-10,5,5,"[-6.027108192443848, -5.584452152252197, -4.548568248748779, -5.904958724975586, -5.4171648025512695, -0.024206912145018578]",0.9760837554931641
2,['    @AfterEach\n    public void after()\n    {\n        container.destroy();\n        container = null;\n    }\n'],After;Each;container;null;destroy;container;after,6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;2.9103830456733704e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-5.820766091346741e-10,5,5,"[-6.0575175285339355, -5.588289737701416, -4.521430492401123, -5.920733451843262, -5.442988872528076, -0.024256711825728416]",0.9760351181030273
2,['    @Test\n    public void testMBeanForNull()\n    {\n        Object mBean = container.mbeanFor(null);\n        assertNull(mBean);\n    }\n'],Null;Bean;For;Bean;Object;Null;null;Bean;container;For,2.444721758365631e-09;5.820766091346741e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-9.313225746154785e-10;-9.313225746154785e-10;-1.1641532182693481e-09,5,5,"[-6.023925304412842, -5.614523410797119, -4.545973300933838, -5.896435260772705, -5.403175354003906, -0.024216918274760246]",0.9760739803314209
2,"['    @Test\n    public void testMBeanForString()\n    {\n        String obj = ""foo"";\n        Object mbean = container.mbeanFor(obj);\n        assertNotNull(mbean);\n        container.beanAdded(null, obj);\n        ObjectName objectName = container.findMBean(obj);\n        assertNotNull(objectName);\n    }\n']",Bean;Bean;Added;container;Object;Name;Null;bean;Null;null,1.0477378964424133e-09;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.4551915228366852e-10,5,5,"[-6.009915828704834, -5.636303901672363, -4.586699485778809, -5.855761528015137, -5.396842956542969, -0.023883849382400513]",0.9763990044593811
2,"['    @Test\n    public void testMBeanForStringArray()\n    {\n        String[] obj = {""a"", ""b""};\n        Object mbean = container.mbeanFor(obj);\n        assertNotNull(mbean);\n        container.beanAdded(null, obj);\n        ObjectName objectName = container.findMBean(obj);\n        assertNotNull(objectName);\n    }\n']",Added;Not;obj;container;Null;find;obj;Name;object;object,1.1059455573558807e-09;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-6.001497745513916, -5.657303333282471, -4.600175857543945, -5.829653739929199, -5.376920700073242, -0.023860570043325424]",0.9764218330383301
2,"['    @Test\n    public void testMBeanForIntArray()\n    {\n        int[] obj = {0, 1, 2};\n        Object mbean = container.mbeanFor(obj);\n        assertNotNull(mbean);\n        container.beanAdded(null, obj);\n        ObjectName objectName = container.findMBean(obj);\n        assertNotNull(objectName);\n    }\n']",Null;null;Array;Object;For;Int;bean;Null;object;Name,1.0477378964424133e-09;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.8917489796876907e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.4551915228366852e-10,5,5,"[-5.99258279800415, -5.638960838317871, -4.602930545806885, -5.829007148742676, -5.379770278930664, -0.023909687995910645]",0.9763739109039307
2,"['    @Test\n    public void testMetaDataCaching()\n    {\n        Derived derived = new Derived();\n        ObjectMBean derivedMBean = (ObjectMBean)container.mbeanFor(derived);\n        ObjectMBean derivedMBean2 = (ObjectMBean)container.mbeanFor(derived);\n        assertNotSame(derivedMBean, derivedMBean2);\n        assertSame(derivedMBean.metaData(), derivedMBean2.metaData());\n    }\n']",bean;derived;Same;Meta;container;Bean;derived;Data;Object;Bean,9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;3.8562575355172157e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.962718486785889, -5.623770236968994, -4.612103462219238, -5.8078484535217285, -5.3781208992004395, -0.024021418765187263]",0.9762647747993469
2,"['    @Test\n    public void testDerivedAttributes() throws Exception\n    {\n        Derived derived = new Derived();\n        Managed managed = derived.getManagedInstance();\n        ObjectMBean derivedMBean = (ObjectMBean)container.mbeanFor(derived);\n        ObjectMBean managedMBean = (ObjectMBean)container.mbeanFor(managed);\n\n        container.beanAdded(null, derived);\n        container.beanAdded(null, managed);\n\n        MBeanInfo derivedInfo = derivedMBean.getMBeanInfo();\n        assertNotNull(derivedInfo);\n        MBeanInfo managedInfo = managedMBean.getMBeanInfo();\n        assertNotNull(managedInfo);\n\n        assertEquals(""com.acme.Derived"", derivedInfo.getClassName(), ""name does not match"");\n        assertEquals(""Test the mbean stuff"", derivedInfo.getDescription(), ""description does not match"");\n        assertEquals(5, derivedInfo.getAttributes().length, ""attribute count does not match"");\n        assertEquals(""Full Name"", derivedMBean.getAttribute(""fname""), ""attribute values does not match"");\n\n        derivedMBean.setAttribute(new Attribute(""fname"", ""Fuller Name""));\n        assertEquals(""Fuller Name"", derivedMBean.getAttribute(""fname""), ""set attribute value does not match"");\n        assertEquals(""goop"", derivedMBean.getAttribute(""goop""), ""proxy attribute values do not match"");\n    }\n']",null;Derived;goop;Bean;managed;Derived;Description;stuff;derived;Attribute,1.3387762010097504e-09;6.83940015733242e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.128661774098873e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.848476409912109, -5.476394176483154, -4.679539203643799, -5.66691255569458, -5.360133647918701, -0.02481609396636486]",0.9754891991615295
2,"['    @Test\n    public void testDerivedOperations() throws Exception\n    {\n        Derived derived = new Derived();\n        ObjectMBean mbean = (ObjectMBean)container.mbeanFor(derived);\n\n        container.beanAdded(null, derived);\n\n        MBeanInfo info = mbean.getMBeanInfo();\n        assertEquals(5, info.getOperations().length, ""operation count does not match"");\n\n        MBeanOperationInfo[] operationInfos = info.getOperations();\n        boolean publish = false;\n        boolean doodle = false;\n        boolean good = false;\n        for (MBeanOperationInfo operationInfo : operationInfos)\n        {\n            if (""publish"".equals(operationInfo.getName()))\n            {\n                publish = true;\n                assertEquals(""publish something"", operationInfo.getDescription(), ""description doesn\'t match"");\n            }\n\n            if (""doodle"".equals(operationInfo.getName()))\n            {\n                doodle = true;\n                assertEquals(""Doodle something"", operationInfo.getDescription(), ""description doesn\'t match"");\n                MBeanParameterInfo[] parameterInfos = operationInfo.getSignature();\n                assertEquals(""A description of the argument"", parameterInfos[0].getDescription(), ""parameter description doesn\'t match"");\n                assertEquals(""doodle"", parameterInfos[0].getName(), ""parameter name doesn\'t match"");\n            }\n\n            // This is a proxied operation on the MBean wrapper.\n            if (""good"".equals(operationInfo.getName()))\n            {\n                good = true;\n                assertEquals(""test of proxy operations"", operationInfo.getDescription(), ""description does not match"");\n                assertEquals(""not bad"", mbean.invoke(""good"", new Object[]{}, new String[]{}), ""execution contexts wrong"");\n            }\n        }\n\n        assertTrue(publish, ""publish operation was not not found"");\n        assertTrue(doodle, ""doodle operation was not not found"");\n        assertTrue(good, ""good operation was not not found"");\n    }\n']",Added;boolean;Bean;publish;operation;derived;oodle;Description;good;boolean,4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.881003379821777, -5.410583972930908, -4.664220333099365, -5.730228900909424, -5.4356207847595215, -0.024592332541942596]",0.975707471370697
2,"['    @Test\n    public void testMethodNameMining()\n    {\n        assertEquals(""fullName"", MetaData.toAttributeName(""getFullName""));\n        assertEquals(""fullName"", MetaData.toAttributeName(""getfullName""));\n        assertEquals(""fullName"", MetaData.toAttributeName(""isFullName""));\n        assertEquals(""fullName"", MetaData.toAttributeName(""isfullName""));\n        assertEquals(""fullName"", MetaData.toAttributeName(""setFullName""));\n        assertEquals(""fullName"", MetaData.toAttributeName(""setfullName""));\n        assertEquals(""fullName"", MetaData.toAttributeName(""FullName""));\n        assertEquals(""fullName"", MetaData.toAttributeName(""fullName""));\n    }\n']",Method;Full;set;full;Equals;Meta;Name;Full;Name;Name,2.561137080192566e-09;4.3655745685100555e-10;3.7834979593753815e-10;3.128661774098873e-10;3.055902197957039e-10;3.055902197957039e-10;2.1827872842550278e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.906764507293701, -5.636236667633057, -4.66299295425415, -5.740227222442627, -5.304431915283203, -0.024199465289711952]",0.9760909676551819
2,['    @BeforeEach\n    public void prepare() throws Exception\n    {\n        container = new ContainerLifeCycle();\n        mbeanServer = ManagementFactory.getPlatformMBeanServer();\n        MBeanContainer mbeanContainer = new MBeanContainer(mbeanServer);\n        container.addBean(mbeanContainer);\n        container.start();\n    }\n'],Bean;Bean;Server;container;Container;Life;bean;container;bean;bean,1.2223608791828156e-09;1.1932570487260818e-09;1.1641532182693481e-09;9.89530235528946e-10;8.149072527885437e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-6.016410827636719, -5.560906887054443, -4.570199966430664, -5.88944673538208, -5.43262243270874, -0.024067038670182228]",0.9762202501296997
2,['    @AfterEach\n    public void dispose() throws Exception\n    {\n        container.stop();\n    }\n'],Exception;After;dispose;Each;stop;container,1.862645149230957e-09;9.313225746154785e-10;9.313225746154785e-10;-6.984919309616089e-10;-1.3969838619232178e-09;-1.6298145055770874e-09,5,5,"[-6.044562339782715, -5.581338882446289, -4.518764495849609, -5.928584575653076, -5.415527820587158, -0.024446232244372368]",0.9758500456809998
2,"['    @Test\n    public void testAddBeanRegistersMBeanRemoveBeanUnregistersMBean() throws Exception\n    {\n        // Adding a bean to the container should register the MBean.\n        QueuedThreadPool bean = new QueuedThreadPool();\n        container.addBean(bean);\n\n        String pkg = bean.getClass().getPackage().getName();\n        Set<ObjectName> objectNames = mbeanServer.queryNames(ObjectName.getInstance(pkg + "":*""), null);\n        assertEquals(1, objectNames.size());\n\n        // Removing the bean should unregister the MBean.\n        container.removeBean(bean);\n        objectNames = mbeanServer.queryNames(ObjectName.getInstance(pkg + "":*""), null);\n        assertEquals(0, objectNames.size());\n    }\n']",Removing;Set;bean;bean;pkg;Unregisters;Equals;get;container;to,6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.941798210144043, -5.533749103546143, -4.657002925872803, -5.786890983581543, -5.39138126373291, -0.023981848731637]",0.9763034582138062
2,"['    @Test\n    public void testStoppingContainerDoesNotUnregistersMBeans() throws Exception\n    {\n        QueuedThreadPool bean = new QueuedThreadPool();\n        container.addBean(bean, true);\n\n        String pkg = bean.getClass().getPackage().getName();\n        Set<ObjectName> objectNames = mbeanServer.queryNames(ObjectName.getInstance(pkg + "":*""), null);\n        // QueuedThreadPool and ThreadPoolBudget.\n        assertEquals(2, objectNames.size());\n\n        container.stop();\n\n        objectNames = mbeanServer.queryNames(ObjectName.getInstance(pkg + "":*""), null);\n        assertEquals(2, objectNames.size());\n\n        // Remove the MBeans to start clean on the next test.\n        objectNames.forEach(objectName ->\n        {\n            try\n            {\n                mbeanServer.unregisterMBean(objectName);\n            }\n            catch (Throwable ignored)\n            {\n            }\n        });\n    }\n']",the;udget;Each;Stopping;Bean;Bean;Class;Equals;pkg;new,1.7462298274040222e-09;1.280568540096283e-09;9.313225746154785e-10;8.731149137020111e-10;6.257323548197746e-10;6.111804395914078e-10;6.111804395914078e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.949539661407471, -5.4260172843933105, -4.651642799377441, -5.815669059753418, -5.467118263244629, -0.024044228717684746]",0.9762426614761353
2,"['    @Test\n    public void testDestroyingContainerUnregistersMBeans() throws Exception\n    {\n        QueuedThreadPool bean = new QueuedThreadPool();\n        container.addBean(bean, true);\n\n        String pkg = bean.getClass().getPackage().getName();\n        Set<ObjectName> objectNames = mbeanServer.queryNames(ObjectName.getInstance(pkg + "":*""), null);\n        // QueuedThreadPool and ThreadPoolBudget.\n        assertEquals(2, objectNames.size());\n\n        container.stop();\n        container.destroy();\n\n        objectNames = mbeanServer.queryNames(ObjectName.getInstance(pkg + "":*""), null);\n        assertEquals(0, objectNames.size());\n    }\n']",pkg;kg;and;container;Equals;new;object;size;Instance;Thread,1.3969838619232178e-09;1.367880031466484e-09;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.921108722686768, -5.536558628082275, -4.6705780029296875, -5.775156021118164, -5.368629455566406, -0.024040039628744125]",0.9762465953826904
2,"['    @Test\n    public void testOpenPojo()\n    {\n        Validator validator = ValidatorBuilder.create().with(new SetterTester()).with(new GetterTester()).build();\n        List<Class> classes = Arrays.asList(MBeanContainer.class, ObjectMBean.class);\n        for (Class clazz : classes)\n        {\n            validator.validate(PojoClassFactory.getPojoClass(clazz));\n        }\n    }\n']",Pojo;Bean;Getter;validator;new;List;clazz;Open;Factory;Class,8.149072527885437e-10;7.8580342233181e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.991600513458252, -5.534426689147949, -4.5982513427734375, -5.8554582595825195, -5.4354047775268555, -0.024027587845921516]",0.9762587547302246
2,['    @BeforeEach\n    public void setUp()\n    {\n        container = new MBeanContainer(ManagementFactory.getPlatformMBeanServer());\n        derivedExtended = new DerivedExtended();\n        objectMBean = (ObjectMBean)container.mbeanFor(derivedExtended);\n        objectMBeanInfo = objectMBean.getMBeanInfo();\n    }\n'],bean;Server;set;Bean;Info;Info;new;Bean;container;get,2.0372681319713593e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;4.802132025361061e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;1.4551915228366852e-10,5,5,"[-6.029130458831787, -5.592489719390869, -4.563605308532715, -5.876037120819092, -5.459525108337402, -0.023902587592601776]",0.9763808250427246
2,"['    @Test\n    public void testBasicOperations()\n    {\n        assertEquals(derivedExtended, objectMBean.getManagedObject(), ""Managed objects should be equal"");\n        assertNull(objectMBean.getObjectName(), ""This method call always returns null in the actual code"");\n        assertNull(objectMBean.getObjectNameBasis(), ""This method call always returns null in the actual code"");\n        assertNull(objectMBean.getObjectContextBasis(), ""This method call always returns null in the actual code"");\n        assertEquals(container, objectMBean.getMBeanContainer(), ""Mbean container should be equal"");\n        assertEquals(""Test the mbean extended stuff"", objectMBeanInfo.getDescription(), ""Mbean description must be equal to : Test the mbean extended stuff"");\n    }\n']",Operations;object;extended;Extended;object;stuff;Bas;Equals;Container;code,1.3969838619232178e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.923856735229492, -5.604763984680176, -4.659486293792725, -5.761088848114014, -5.3446364402771, -0.02403433807194233]",0.9762521982192993
2,"['    @Test\n    public void testGetAttributeMBeanException() throws Exception\n    {\n        Attribute attribute = new Attribute(""doodle4"", ""charu"");\n        objectMBean.setAttribute(attribute);\n\n        MBeanException e = assertThrows(MBeanException.class, () -> objectMBean.getAttribute(""doodle4""));\n\n        assertNotNull(e, ""An InvocationTargetException must have occurred by now as doodle4() internally throwing exception"");\n    }\n']",oodle;Throws;Exception;must;Attribute;object;Exception;get;new;exception,1.3969838619232178e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.915918827056885, -5.544889450073242, -4.662331581115723, -5.758859157562256, -5.377013683319092, -0.02411254122853279]",0.9761757254600525
2,"['    @Test\n    public void testGetAttributeAttributeNotFoundException()\n    {\n        AttributeNotFoundException e = assertThrows(AttributeNotFoundException.class, () -> objectMBean.getAttribute(""ffname""));\n\n        assertNotNull(e, ""An AttributeNotFoundException must have occurred by now as there is no attribute with the name ffname in bean"");\n    }\n']",with;ffname;as;by;bean;Attribute;name;Attribute;get;Get,1.1641532182693481e-09;6.984919309616089e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.930819511413574, -5.5806684494018555, -4.662484645843506, -5.7902936935424805, -5.35964298248291, -0.023912597447633743]",0.9763710498809814
2,"['    @Test\n    public void testSetAttributeWithCorrectAttrName() throws Exception\n    {\n        Attribute attribute = new Attribute(""fname"", ""charu"");\n        objectMBean.setAttribute(attribute);\n\n        String value = (String)objectMBean.getAttribute(""fname"");\n\n        assertEquals(""charu"", value, ""Attribute(fname) value must be equal to charu"");\n    }\n']",char;Equals;attribute;set;Bean;Exception;Attribute;Set;value;attribute,1.1641532182693481e-09;6.402842700481415e-10;4.656612873077393e-10;4.147295840084553e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.9126200675964355, -5.5787248611450195, -4.662606716156006, -5.738595485687256, -5.350531101226807, -0.02417910099029541]",0.9761107563972473
2,"['    @Test\n    public void testSetAttributeNullCheck() throws Exception\n    {\n        objectMBean.setAttribute(null);\n\n        AttributeNotFoundException e = assertThrows(AttributeNotFoundException.class, () -> objectMBean.getAttribute(null));\n\n        assertNotNull(e, ""An AttributeNotFoundException must have occurred by now as there is no attribute with the name null"");\n    }\n']",Null;Attribute;as;have;the;with;Exception;name;Attribute;Attribute,1.3969838619232178e-09;1.280568540096283e-09;1.1641532182693481e-09;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10,5,5,"[-5.918888568878174, -5.577945232391357, -4.664649963378906, -5.77725076675415, -5.3525309562683105, -0.024010363966226578]",0.9762755632400513
2,"['    @Test\n    public void testSetAttributeAttributeWithWrongAttrName()\n    {\n        attribute = new Attribute(""fnameee"", ""charu"");\n\n        AttributeNotFoundException e = assertThrows(AttributeNotFoundException.class, () -> objectMBean.setAttribute(attribute));\n\n        assertNotNull(e, ""An AttributeNotFoundException must have occurred by now as there is no attribute "" + ""with the name ffname in bean"");\n    }\n']",Wrong;bean;set;the;Attribute;Throws;new;no;attribute;Not,6.51925802230835e-09;1.3387762010097504e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.111804395914078e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.925747394561768, -5.596858024597168, -4.681018829345703, -5.7631988525390625, -5.347639560699463, -0.02383100427687168]",0.9764507412910461
2,"['    @Test\n    public void testSetAttributesWithCorrectValues()\n    {\n        AttributeList attributes = getAttributes(""fname"", ""vijay"");\n        objectMBean.setAttributes(attributes);\n\n        attributes = objectMBean.getAttributes(new String[]{""fname""});\n\n        assertEquals(1, attributes.size());\n        assertEquals(""vijay"", ((Attribute)(attributes.get(0))).getValue(), ""Fname value must be equal to vijay"");\n    }\n']",Attributes;name;new;value;set;attributes;get;Attributes;equal;must,5.820766091346741e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2741809263825417e-10;2.9103830456733704e-10;2.546585164964199e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.905090808868408, -5.624963760375977, -4.6775665283203125, -5.694815158843994, -5.313392162322998, -0.024213194847106934]",0.9760776162147522
2,"['    @Test\n    public void testSetAttributesForArrayTypeAttribute() throws Exception\n    {\n        Derived[] deriveds = getArrayTypeAttribute();\n\n        derivedManaged.setAddresses(deriveds);\n        mBeanDerivedManaged.getMBeanInfo();\n\n        assertNotNull(mBeanDerivedManaged.getAttribute(""addresses""), ""Address object shouldn\'t be null"");\n    }\n']",Addresses;be;shouldn't;Null;get;object;derived;Managed;null;Bean,1.280568540096283e-09;8.003553375601768e-10;4.0745362639427185e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.4551915228366852e-10;1.1641532182693481e-10;8.731149137020111e-11;5.820766091346741e-11;5.820766091346741e-11,5,5,"[-5.954858303070068, -5.620906829833984, -4.6440863609313965, -5.782436370849609, -5.369794845581055, -0.02385137416422367]",0.9764308333396912
2,"['    @Test\n    public void testSetAttributesForCollectionTypeAttribute() throws Exception\n    {\n        ArrayList<Derived> aliasNames = new ArrayList<>(Arrays.asList(getArrayTypeAttribute()));\n\n        derivedManaged.setAliasNames(aliasNames);\n        mBeanDerivedManaged.getMBeanInfo();\n\n        assertNotNull(mBeanDerivedManaged.getAttribute(""aliasNames""), ""Address object shouldn\'t be null"");\n        assertNull(mBeanDerivedManaged.getAttribute(""derived""), ""Derived object shouldn\'t registered with container so its value will be null"");\n    }\n']",Type;Collection;with;Derived;Derived;Attribute;Managed;For;Exception;so,1.1059455573558807e-09;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;5.966285243630409e-10;5.529727786779404e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.907311916351318, -5.603554725646973, -4.6677422523498535, -5.728904724121094, -5.337266445159912, -0.024146519601345062]",0.9761427044868469
2,"['    @Test\n    public void testSetAttributesException()\n    {\n        AttributeList attributes = getAttributes(""fnameee"", ""charu"");\n\n        attributes = objectMBean.setAttributes(attributes);\n\n        // Original code eating the exception and returning zero size list\n        assertEquals(0, attributes.size(), ""As there is no attribute with the name fnameee, this should return empty"");\n    }\n']",returning;nameee;attributes;Attributes;zero;set;the;size;and;get,9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.93980073928833, -5.6147027015686035, -4.671597480773926, -5.771829128265381, -5.357056617736816, -0.023742185905575752]",0.9765374660491943
2,"['    @Test\n    public void testInvokeMBeanException()\n    {\n        ReflectionException e = assertThrows(ReflectionException.class, () -> objectMBean.invoke(""doodle2"", new Object[0], new String[0]));\n\n        assertNotNull(e, ""An ReflectionException must have occurred by now as doodle2() in Derived bean is private"");\n    }\n']",doodle;Reflection;oodle;by;Exception;must;new;Reflection;as;Exception,1.8044374883174896e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.9404191970825195, -5.563170909881592, -4.648542404174805, -5.8041863441467285, -5.3828301429748535, -0.0239370409399271]",0.9763472080230713
2,"['    @Test\n    public void testInvokeReflectionException()\n    {\n        MBeanException e = assertThrows(MBeanException.class, () -> objectMBean.invoke(""doodle1"", new Object[0], new String[0]));\n\n        assertNotNull(e, ""MBeanException is null"");\n    }\n']",class;Exception;object;invoke;null;Bean;new;Null;oodle;Exception,1.862645149230957e-09;1.280568540096283e-09;8.440110832452774e-10;6.984919309616089e-10;4.0745362639427185e-10;4.0745362639427185e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10,5,5,"[-5.941516876220703, -5.566915988922119, -4.641697883605957, -5.803048610687256, -5.377846717834473, -0.024013739079236984]",0.9762722849845886
2,"['    @Test\n    public void testInvoke() throws Exception\n    {\n        String value = (String)objectMBean.invoke(""good"", new Object[0], new String[0]);\n\n        assertEquals(""not bad"", value, ""Method(good) invocation on objectMBean must return not bad"");\n    }\n']",good;invocation;bad;Equals;Object;value;Invoke;value;new;Method,1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.4551915228366852e-10;0.0;0.0,5,5,"[-5.949113845825195, -5.605276584625244, -4.638106822967529, -5.801673889160156, -5.361783504486084, -0.023962296545505524]",0.9763224124908447
2,"['    @Test\n    public void testInvokeNoSuchMethodException()\n    {\n        // DerivedMBean contains a managed method with the name good,\n        // we must call this method without any arguments.\n        ReflectionException e = assertThrows(ReflectionException.class, () ->\n            objectMBean.invoke(""good"", new Object[0], new String[]{\n                ""int aone""\n            }));\n\n        assertNotNull(e, ""A ReflectionException must have occurred by now as we cannot call a method with wrong signature"");\n    }\n']",Throws;good;managed;wrong;one;with;arguments;method;Invoke;call,1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.947716236114502, -5.482616424560547, -4.639075756072998, -5.825941562652588, -5.43339729309082, -0.024041784927248955]",0.9762449264526367
2,"['    @Test\n    public void testToAttributeName()\n    {\n        assertEquals(""fullName"", MetaData.toAttributeName(""isfullName""));\n    }\n']",Meta;Attribute;Name;Name;to;Name;Name;isfull;Data;Attribute,1.1641532182693481e-09;9.313225746154785e-10;3.4924596548080444e-10;2.3283064365386963e-10;8.731149137020111e-11;0.0;-2.9103830456733704e-11;-3.4924596548080444e-10;-4.656612873077393e-10;-4.656612873077393e-10,5,5,"[-6.012942314147949, -5.708308696746826, -4.595309734344482, -5.844935894012451, -5.335724353790283, -0.023857543244957924]",0.9764248132705688
2,['    @AfterEach\n    public void tearDown() throws Exception\n    {\n        if (connectorServer != null)\n            connectorServer.stop();\n    }\n'],Each;After;null;Down;connector;if;Server;connector;Exception;Server,6.51925802230835e-09;4.6566128730773926e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;0.0;0.0;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-6.03649377822876, -5.54707670211792, -4.536419868469238, -5.934697151184082, -5.440707683563232, -0.024275094270706177]",0.9760170578956604
2,"['    @Test\n    public void testAddressAfterStart() throws Exception\n    {\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi:///jmxrmi""), objectName);\n        connectorServer.start();\n\n        JMXServiceURL address = connectorServer.getAddress();\n        assertTrue(address.toString().matches(""service:jmx:rmi://[^:]+:\\\\d+/jndi/rmi://[^:]+:\\\\d+/jmxrmi""));\n    }\n']",mx;mx;Start;MXService;After;address;Server;MXService;mx;to,7.8580342233181e-10;6.693881005048752e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;2.764863893389702e-10,5,5,"[-5.958472728729248, -5.546742916107178, -4.654726028442383, -5.824691295623779, -5.388636112213135, -0.02380341663956642]",0.9764775633811951
2,"['    @Test\n    public void testNoRegistryHostBindsToHost() throws Exception\n    {\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi:///jmxrmi""), objectName);\n        connectorServer.start();\n\n        // Verify that I can connect to the RMI registry using a non-loopback address.\n        new Socket(InetAddress.getLocalHost(), 1099).close();\n        assertThrows(ConnectException.class, () ->\n        {\n            // Verify that I cannot connect to the RMI registry using the loopback address.\n            new Socket(InetAddress.getLoopbackAddress(), 1099).close();\n        });\n    }\n']",Throws;Socket;address;MXService;address;Exception;registry;Connector;close;connect,2.561137080192566e-09;1.5133991837501526e-09;1.1641532182693481e-09;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.953016757965088, -5.503699779510498, -4.655139446258545, -5.827402591705322, -5.4113054275512695, -0.023876631632447243]",0.9764061570167542
2,"['    @Test\n    public void testNoRegistryHostNonDefaultRegistryPort() throws Exception\n    {\n        ServerSocket serverSocket = new ServerSocket(0);\n        int registryPort = serverSocket.getLocalPort();\n        serverSocket.close();\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi://:"" + registryPort + ""/jmxrmi""), objectName);\n        connectorServer.start();\n\n        // Verify that I can connect to the RMI registry using a non-loopback address.\n        new Socket(InetAddress.getLocalHost(), registryPort).close();\n        assertThrows(ConnectException.class, () ->\n        {\n            // Verify that I cannot connect to the RMI registry using the loopback address.\n            new Socket(InetAddress.getLoopbackAddress(), registryPort).close();\n        });\n    }\n']",MXService;loopback;Default;registry;Socket;the;Socket;using;Loopback;Port,1.0186340659856796e-09;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.980524063110352, -5.486544609069824, -4.631254196166992, -5.859389781951904, -5.453131675720215, -0.023829840123653412]",0.9764519333839417
2,"['    @Test\n    public void testAnyRegistryHostBindsToAny() throws Exception\n    {\n        ServerSocket serverSocket = new ServerSocket(0);\n        int registryPort = serverSocket.getLocalPort();\n        serverSocket.close();\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi://0.0.0.0:"" + registryPort + ""/jmxrmi""), objectName);\n        connectorServer.start();\n\n        // Verify that I can connect to the RMI registry using a non-loopback address.\n        new Socket(InetAddress.getLocalHost(), registryPort).close();\n        // Verify that I can connect to the RMI registry using the loopback address.\n        new Socket(InetAddress.getLoopbackAddress(), registryPort).close();\n    }\n']",loopback;close;registry;using;Socket;Host;object;the;new;Any,1.3969838619232178e-09;1.0186340659856796e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.965803623199463, -5.507599830627441, -4.641607284545898, -5.848654270172119, -5.420841217041016, -0.02385242097079754]",0.97642982006073
2,"['    @Test\n    public void testLocalhostRegistryBindsToLoopback() throws Exception\n    {\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi""), objectName);\n        connectorServer.start();\n\n        InetAddress localHost = InetAddress.getLocalHost();\n        if (!localHost.isLoopbackAddress())\n        {\n            assertThrows(ConnectException.class, () ->\n            {\n                // Verify that I cannot connect to the RMIRegistry using a non-loopback address.\n                new Socket(localHost, 1099);\n            });\n        }\n\n        InetAddress loopback = InetAddress.getLoopbackAddress();\n        new Socket(loopback, 1099).close();\n    }\n']",class;Loopback;Loopback;address;Inet;MXService;Loopback;if;connector;nd,1.280568540096283e-09;1.1059455573558807e-09;8.003553375601768e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;5.311449058353901e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.948721408843994, -5.417473793029785, -4.648425102233887, -5.826345443725586, -5.461864471435547, -0.024106837809085846]",0.9761812686920166
2,"['    @Test\n    public void testNoRMIHostBindsToHost() throws Exception\n    {\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi:///jmxrmi""), objectName);\n        connectorServer.start();\n\n        // Verify that I can connect to the RMI server using a non-loopback address.\n        new Socket(InetAddress.getLocalHost(), connectorServer.getAddress().getPort()).close();\n        assertThrows(ConnectException.class, () ->\n        {\n            // Verify that I cannot connect to the RMI server using the loopback address.\n            new Socket(InetAddress.getLoopbackAddress(), connectorServer.getAddress().getPort()).close();\n        });\n    }\n']",loopback;class;address;the;Loopback;Inet;Socket;Port;get;that,1.3096723705530167e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10,5,5,"[-5.955963611602783, -5.496585845947266, -4.65781831741333, -5.821958065032959, -5.420958995819092, -0.023844972252845764]",0.9764370918273926
2,"['    @Test\n    public void testAnyRMIHostBindsToAny() throws Exception\n    {\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi://0.0.0.0/jndi/rmi:///jmxrmi""), objectName);\n        connectorServer.start();\n\n        // Verify that I can connect to the RMI server using a non-loopback address.\n        new Socket(InetAddress.getLocalHost(), connectorServer.getAddress().getPort()).close();\n        // Verify that I can connect to the RMI server using the loopback address.\n        new Socket(InetAddress.getLoopbackAddress(), connectorServer.getAddress().getPort()).close();\n    }\n']",loopback;Connector;Bind;mi;Any;new;Socket;Exception;start;Socket,1.7462298274040222e-09;1.0695657692849636e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.957035064697266, -5.568661212921143, -4.659329414367676, -5.835471153259277, -5.368267059326172, -0.023739740252494812]",0.9765398502349854
2,"['    @Test\n    public void testLocalhostRMIBindsToLoopback() throws Exception\n    {\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi://localhost/jndi/rmi://localhost:1099/jmxrmi""), objectName);\n        connectorServer.start();\n        JMXServiceURL address = connectorServer.getAddress();\n\n        InetAddress localHost = InetAddress.getLocalHost();\n        if (!localHost.isLoopbackAddress())\n        {\n            assertThrows(ConnectException.class, () ->\n            {\n                // Verify that I cannot connect to the RMIRegistry using a non-loopback address.\n                new Socket(localHost, address.getPort());\n            });\n        }\n\n        InetAddress loopback = InetAddress.getLoopbackAddress();\n        new Socket(loopback, address.getPort()).close();\n    }\n']",loopback;RMIRegistry;localhost;Socket;loopback;Exception;class;Server;connector;Inet,1.3969838619232178e-09;1.0913936421275139e-09;6.984919309616089e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.7834979593753815e-10,5,5,"[-5.953623294830322, -5.438561916351318, -4.655273914337158, -5.827505111694336, -5.4549384117126465, -0.023958805948495865]",0.976326048374176
2,"['    @Test\n    public void testRMIServerPort() throws Exception\n    {\n        ServerSocket server = new ServerSocket(0);\n        int port = server.getLocalPort();\n        server.close();\n\n        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi://localhost:"" + port + ""/jndi/rmi:///jmxrmi""), objectName);\n        connectorServer.start();\n\n        JMXServiceURL address = connectorServer.getAddress();\n        assertEquals(port, address.getPort());\n\n        InetAddress loopback = InetAddress.getLoopbackAddress();\n        new Socket(loopback, port).close();\n    }\n']",Loopback;Server;MXService;RMIServer;Socket;Local;mi;Inet;object;Address,1.1641532182693481e-09;8.440110832452774e-10;8.294591680169106e-10;8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10,5,5,"[-5.960631847381592, -5.5432538986206055, -4.649743556976318, -5.81204891204834, -5.390223503112793, -0.02389153093099594]",0.976391613483429
2,"['    @Test\n    public void testRMIServerAndRMIRegistryOnSameHostAndSamePort() throws Exception\n    {\n        // RMI can multiplex connections on the same address and port for different\n        // RMI objects, in this case the RMI registry and the RMI server. In this\n        // case, the RMIServerSocketFactory will be invoked only once.\n        // The case with different address and same port is already covered by TCP,\n        // that can listen to 192.168.0.1:1099 and 127.0.0.1:1099 without problems.\n\n        String host = ""localhost"";\n        ServerSocket serverSocket = new ServerSocket(0);\n        int port = serverSocket.getLocalPort();\n        serverSocket.close();\n\n        connectorServer = new ConnectorServer(new JMXServiceURL(""rmi"", host, port, ""/jndi/rmi://"" + host + "":"" + port + ""/jmxrmi""), objectName);\n        connectorServer.start();\n\n        JMXServiceURL address = connectorServer.getAddress();\n        assertEquals(port, address.getPort());\n    }\n']",RMIServer;multiple;Same;in;the;and;objects;Port;only;Port,8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.41970007866621e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.976743221282959, -5.446960926055908, -4.665543556213379, -5.852830410003662, -5.471632480621338, -0.023613307625055313]",0.9766632914543152
2,"['    @Test\n    public void testJMXOverTLS() throws Exception\n    {\n        SslContextFactory.Server sslContextFactory = new SslContextFactory.Server();\n        String keyStorePath = MavenTestingUtils.getTestResourcePath(""keystore.p12"").toString();\n        String keyStorePassword = ""storepwd"";\n        sslContextFactory.setKeyStorePath(keyStorePath);\n        sslContextFactory.setKeyStorePassword(keyStorePassword);\n        sslContextFactory.start();\n\n        // The RMIClientSocketFactory is stored within the RMI stub.\n        // When using TLS, the stub is deserialized in a possibly different\n        // JVM that does not have access to the server keystore, and there\n        // is no way to provide TLS configuration during the deserialization\n        // of the stub. Therefore the client must provide system properties\n        // to specify the TLS configuration. For this test it needs the\n        // trustStore because the server certificate is self-signed.\n        // The server needs to contact the RMI registry and therefore also\n        // needs these system properties.\n        System.setProperty(""javax.net.ssl.trustStore"", keyStorePath);\n        System.setProperty(""javax.net.ssl.trustStorePassword"", keyStorePassword);\n\n        connectorServer = new ConnectorServer(new JMXServiceURL(""rmi"", null, 1100, ""/jndi/rmi://localhost:1100/jmxrmi""), null, objectName, sslContextFactory);\n        connectorServer.start();\n\n        // The client needs to talk TLS to the RMI registry to download\n        // the RMI server stub, and this is independent from JMX.\n        // The RMI server stub then contains the SslRMIClientSocketFactory\n        // needed to talk to the RMI server.\n        Map<String, Object> clientEnv = new HashMap<>();\n        clientEnv.put(ConnectorServer.RMI_REGISTRY_CLIENT_SOCKET_FACTORY_ATTRIBUTE, new SslRMIClientSocketFactory());\n        try (JMXConnector client = JMXConnectorFactory.connect(connectorServer.getAddress(), clientEnv))\n        {\n            client.getMBeanServerConnection().queryNames(null, null);\n        }\n    }\n']",localhost;TLS;Connector;needs;possibly;TLS;certificate;VM;deserialization;Server,5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.958849906921387, -5.3584208488464355, -4.634395122528076, -5.85750150680542, -5.5220112800598145, -0.024148615077137947]",0.9761406183242798
2,['    @BeforeEach\n    public void setUp()\n    {\n        mbeanServer = ManagementFactory.getPlatformMBeanServer();\n        mbeanContainer = new MBeanContainer(mbeanServer);\n    }\n'],Each;Bean;bean;Server;Factory;Up;get;Container;Management;Container,3.725290298461914e-09;1.9208528101444244e-09;9.313225746154785e-10;9.313225746154785e-10;7.275957614183426e-10;5.820766091346741e-10;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-6.0221171379089355, -5.602392673492432, -4.564842224121094, -5.876929759979248, -5.407220840454102, -0.024100670590996742]",0.9761874079704285
2,"['    @Test\n    public void testMakeName()\n    {\n        beanName = ""mngd:bean"";\n\n        beanName = mbeanContainer.makeName(beanName);\n\n        assertEquals(""mngd_bean"", beanName, ""Bean name should be mngd_bean"");\n    }\n']",Bean;bean;bean;Container;ng;Name;Equals;bean;ng;Name,6.257323548197746e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.940634727478027, -5.630141258239746, -4.6496968269348145, -5.773766040802002, -5.331670761108398, -0.02401292324066162]",0.9762731194496155
2,"['    @Test\n    public void testFindBean()\n    {\n        managed = getManaged();\n\n        objectName = mbeanContainer.findMBean(managed);\n        assertNotNull(objectName);\n\n        assertEquals(managed, mbeanContainer.findBean(objectName), ""Bean must be added"");\n        assertNull(mbeanContainer.findBean(null), ""It must return null as there is no bean with the name null"");\n    }\n']",Bean;with;Find;managed;Container;Null;managed;no;Name;must,9.604264050722122e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.931394100189209, -5.630911827087402, -4.656806468963623, -5.76805305480957, -5.3272600173950195, -0.024005824699997902]",0.9762800335884094
2,"['    @Test\n    public void testMBeanContainer()\n    {\n        assertNotNull(mbeanContainer, ""Container shouldn\'t be null"");\n    }\n']",Not;bean;Bean;shouldn't;Container;Container;null;Container;be;Null,1.5133991837501526e-09;9.313225746154785e-10;6.402842700481415e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-3.2014213502407074e-10;-6.402842700481415e-10,5,5,"[-6.021358966827393, -5.6707892417907715, -4.574901103973389, -5.874937057495117, -5.355996131896973, -0.02399325557053089]",0.9762924313545227
2,"['    @Test\n    public void testGetMBeanServer()\n    {\n        assertEquals(mbeanServer, mbeanContainer.getMBeanServer(), ""MBean server Instance must be equal"");\n    }\n']",Server;Get;Container;bean;Server;equal;bean;must;Server;Bean,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.970673084259033, -5.668255805969238, -4.617433547973633, -5.811089992523193, -5.299013614654541, -0.02416478842496872]",0.9761248230934143
2,"['    @Test\n    public void testDomain()\n    {\n        String domain = ""Test"";\n\n        mbeanContainer.setDomain(domain);\n\n        assertEquals(domain, mbeanContainer.getDomain(), ""Domain name must be Test"");\n    }\n']",domain;set;get;bean;Domain;domain;Equals;Domain;must;name,7.566995918750763e-10;4.0745362639427185e-10;2.764863893389702e-10;2.3283064365386963e-10;1.1641532182693481e-10;5.820766091346741e-11;-6.548361852765083e-11;-2.6193447411060333e-10;-2.764863893389702e-10;-2.9103830456733704e-10,5,5,"[-5.991776943206787, -5.644608497619629, -4.63144588470459, -5.807737350463867, -5.371936798095703, -0.023704467341303825]",0.9765743017196655
2,"['    @Test\n    public void testBeanAdded()\n    {\n        setBeanAdded();\n\n        objectName = mbeanContainer.findMBean(managed);\n\n        assertTrue(mbeanServer.isRegistered(objectName), ""Bean must have been registered"");\n    }\n']",bean;Bean;Bean;Added;Bean;object;Container;registered;managed;object,1.1641532182693481e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;1.7462298274040222e-10,5,5,"[-5.985950469970703, -5.616878032684326, -4.614714622497559, -5.8326215744018555, -5.3872222900390625, -0.02384182997047901]",0.9764401316642761
2,"['    @Test\n    public void testBeanAddedNullCheck()\n    {\n        setBeanAdded();\n        Integer mbeanCount = mbeanServer.getMBeanCount();\n\n        mbeanContainer.beanAdded(null, null);\n\n        assertEquals(mbeanCount, mbeanServer.getMBeanCount(), ""MBean count must not change after beanAdded(null, null) call"");\n    }\n']",Added;Count;Container;Server;change;Added;bean;Count;Check;bean,1.1059455573558807e-09;7.275957614183426e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.943800926208496, -5.601696014404297, -4.653604984283447, -5.7747802734375, -5.367150783538818, -0.023896420374512672]",0.9763868451118469
2,"['    @Test\n    public void testBeanRemoved()\n    {\n        setUpBeanRemoved();\n\n        mbeanContainer.beanRemoved(null, managed);\n\n        assertNull(mbeanContainer.findMBean(managed), ""Bean shouldn\'t be registered with container as we removed the bean"");\n    }\n']",managed;managed;the;container;bean;bean;find;Up;with;registered,1.6298145055770874e-09;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.9585041999816895, -5.65536642074585, -4.647583961486816, -5.784274101257324, -5.3172430992126465, -0.023933082818984985]",0.9763510227203369
2,"['    @Test\n    public void testBeanRemovedInstanceNotFoundException() throws Exception\n    {\n        // given\n        setUpBeanRemoved();\n        objectName = mbeanContainer.findMBean(managed);\n\n        // when\n        mbeanContainer.getMBeanServer().unregisterMBean(objectName);\n\n        // then\n        assertFalse(mbeanServer.isRegistered(objectName), ""Bean must not have been registered as we unregistered the bean"");\n        // this flow covers InstanceNotFoundException. Actual code just eating\n        // the exception. i.e Actual code just printing the stacktrace, whenever\n        // an exception of type InstanceNotFoundException occurs.\n        mbeanContainer.beanRemoved(null, managed);\n    }\n']",Registered;unregistered;code;just;we;Not;Up;Instance;Exception;Bean,9.89530235528946e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.9597859382629395, -5.506790637969971, -4.64156436920166, -5.841366291046143, -5.432876110076904, -0.023839501664042473]",0.9764423966407776
2,"['    @Test\n    public void testDump()\n    {\n        assertNotNull(mbeanContainer.dump(), ""Dump operation shouldn\'t return null if operation is success"");\n    }\n']",dump;ump;shouldn't;success;return;operation;ump;null;Not;Container,2.7939677238464355e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;1.1641532182693481e-10;-1.7462298274040222e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-6.0327582359313965, -5.665975093841553, -4.5523762702941895, -5.9012627601623535, -5.384045124053955, -0.024013971909880638]",0.9762720465660095
2,"['    @Test\n    public void testDestroy()\n    {\n        setUpDestroy();\n\n        objectName = mbeanContainer.findMBean(managed);\n        mbeanContainer.destroy();\n\n        assertFalse(mbeanContainer.getMBeanServer().isRegistered(objectName), ""Unregistered bean - managed"");\n    }\n']",managed;destroy;Container;Registered;get;Container;bean;Up;managed;Name,6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.3096723705530167e-10,5,5,"[-5.97475528717041, -5.6351542472839355, -4.6298418045043945, -5.7982258796691895, -5.360206127166748, -0.02388431504368782]",0.9763985276222229
2,"['    @Test\n    public void testDestroyInstanceNotFoundException() throws Exception\n    {\n        setUpDestroy();\n\n        objectName = mbeanContainer.findMBean(managed);\n        mbeanContainer.getMBeanServer().unregisterMBean(objectName);\n\n        assertFalse(mbeanContainer.getMBeanServer().isRegistered(objectName), ""Unregistered bean - managed"");\n        // this flow covers InstanceNotFoundException. Actual code just eating\n        // the exception. i.e Actual code just printing the stacktrace, whenever\n        // an exception of type InstanceNotFoundException occurs.\n        mbeanContainer.destroy();\n    }\n']",the;Server;code;Actual;Bean;exception;Container;Bean;get;Instance,1.1059455573558807e-09;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;4.2928149923682213e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.9395432472229, -5.540399551391602, -4.66038179397583, -5.804811954498291, -5.389863014221191, -0.02387954294681549]",0.9764032959938049
2,['    @Test\n    public void testNonManagedLifecycleNotUnregistered() throws Exception\n    {\n        testNonManagedObjectNotUnregistered(new ContainerLifeCycle());\n    }\n'],ifecycle;Non;Unregistered;Life;Managed;Exception;Not;Container;Not;Managed,3.026798367500305e-09;2.444721758365631e-09;2.444721758365631e-09;1.7462298274040222e-09;1.0186340659856796e-09;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-2.3283064365386963e-10,5,5,"[-6.01719856262207, -5.532723903656006, -4.527463436126709, -5.943548679351807, -5.456910133361816, -0.024384109303355217]",0.9759107828140259
2,['    @Test\n    public void testNonManagedPojoNotUnregistered() throws Exception\n    {\n        testNonManagedObjectNotUnregistered(new Object());\n    }\n'],Pojo;Non;Not;Not;Exception;Managed;Managed;Unregistered;Non;new,2.3283064365386963e-09;1.5133991837501526e-09;1.1641532182693481e-09;9.313225746154785e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-5.987485885620117, -5.565047264099121, -4.557680130004883, -5.909482479095459, -5.396288871765137, -0.02436724118888378]",0.9759273529052734
2,"['    @Test\n    public void testSampleAnnotation() throws Exception\n    {\n        String[] classNames = new String[]{""org.eclipse.jetty.annotations.ClassA""};\n        AnnotationParser parser = new AnnotationParser();\n\n        class SampleAnnotationHandler extends AnnotationParser.AbstractHandler\n        {\n            private List<String> methods = Arrays.asList(""a"", ""b"", ""c"", ""d"", ""l"");\n\n            @Override\n            public void handle(ClassInfo info, String annotation)\n            {\n                if (annotation == null || !""org.eclipse.jetty.annotations.Sample"".equals(annotation))\n                    return;\n\n                assertEquals(""org.eclipse.jetty.annotations.ClassA"", info.getClassName());\n            }\n']",Sample;Arrays;extends;clipse;clipse;jetty;Exception;annotations;Class;Annotation,1.6298145055770874e-09;8.440110832452774e-10;8.149072527885437e-10;6.402842700481415e-10;4.3655745685100555e-10;3.710738383233547e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.907068252563477, -5.3028950691223145, -4.650595188140869, -5.782365798950195, -5.491359710693359, -0.02476097270846367]",0.9755430817604065
2,"['    @Test\n    public void testMultiAnnotation() throws Exception\n    {\n        String[] classNames = new String[]{""org.eclipse.jetty.annotations.ClassB""};\n        AnnotationParser parser = new AnnotationParser();\n\n        class MultiAnnotationHandler extends AnnotationParser.AbstractHandler\n        {\n            @Override\n            public void handle(ClassInfo info, String annotation)\n            {\n                if (annotation == null || !""org.eclipse.jetty.annotations.Multi"".equals(annotation))\n                    return;\n                assertTrue(""org.eclipse.jetty.annotations.ClassB"".equals(info.getClassName()));\n            }\n']",Class;class;clipse;Multi;org;Class;annotations;Parser;Annotation;Annotation,8.731149137020111e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.9265923500061035, -5.353445053100586, -4.6431965827941895, -5.798239707946777, -5.479793548583984, -0.02452765963971615]",0.9757707118988037
2,"['    @Test\n    public void testHiddenFilesInJar() throws Exception\n    {\n        File badClassesJar = MavenTestingUtils.getTestResourceFile(""bad-classes.jar"");\n        AnnotationParser parser = new AnnotationParser();\n        Set<Handler> emptySet = Collections.emptySet();\n        parser.parse(emptySet, badClassesJar.toURI());\n        // only the valid classes inside bad-classes.jar should be parsed. If any invalid classes are parsed and exception would be thrown here\n    }\n']",here;Classes;Jar;exception;empty;Handler;Jar;Parser;jar;inside,9.313225746154785e-10;6.548361852765083e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.5838532969355583e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.985551357269287, -5.489654541015625, -4.611481189727783, -5.8797383308410645, -5.4630656242370605, -0.023900609463453293]",0.9763827323913574
2,"['    @Test\n    public void testModuleInfoClassInJar() throws Exception\n    {\n        File badClassesJar = MavenTestingUtils.getTestResourceFile(""jdk9/slf4j-api-1.8.0-alpha2.jar"");\n        AnnotationParser parser = new AnnotationParser();\n        Set<Handler> emptySet = Collections.emptySet();\n        parser.parse(emptySet, badClassesJar.toURI());\n        // Should throw no exceptions, and happily skip the module-info.class files\n    }\n']",exceptions;and;dk;Jar;throw;aven;In;Should;Resource;Parser,2.3283064365386963e-09;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10,5,5,"[-6.002741813659668, -5.512823104858398, -4.594961643218994, -5.897696495056152, -5.464823246002197, -0.023870812729001045]",0.9764118194580078
2,"['    @Test\n    public void testJep238MultiReleaseInJar() throws Exception\n    {\n        File badClassesJar = MavenTestingUtils.getTestResourceFile(""jdk9/log4j-api-2.9.0.jar"");\n        AnnotationParser parser = new AnnotationParser();\n        Set<Handler> emptySet = Collections.emptySet();\n        parser.parse(emptySet, badClassesJar.toURI());\n        // Should throw no exceptions, and skip the META-INF/versions/9/* files\n    }\n']",log;ETA;In;jar;bad;Parser;Jar;Jar;empty;Utils,9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.473825588822365e-10,5,5,"[-5.996665000915527, -5.547663688659668, -4.611351013183594, -5.879724502563477, -5.439885139465332, -0.023737063631415367]",0.9765424728393555
2,"['    @Test\n    public void testJep238MultiReleaseInJarJDK10() throws Exception\n    {\n        File jdk10Jar = MavenTestingUtils.getTestResourceFile(""jdk10/multirelease-10.jar"");\n        AnnotationParser parser = new AnnotationParser();\n        DuplicateClassScanHandler handler = new DuplicateClassScanHandler();\n        Set<Handler> handlers = Collections.singleton(handler);\n        parser.parse(handlers, new PathResource(jdk10Jar));\n        // Should throw no exceptions\n    }\n']",singleton;ep;Duplicate;jar;Multi;new;exceptions;parser;Path;File,8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-6.009142875671387, -5.541323184967041, -4.585192680358887, -5.888670921325684, -5.451505184173584, -0.02392377145588398]",0.9763601422309875
2,"['    @Test\n    public void testBasedirExclusion() throws Exception\n    {\n        // Build up basedir, which itself has a path segment that violates java package and classnaming.\n        // The basedir should have no effect on annotation scanning.\n        // Intentionally using a base director name that starts with a "".""\n        // This mimics what you see in jenkins, hudson, hadoop, solr, camel, and selenium for their \n        // installed and/or managed webapps\n        File basedir = testdir.getPathFile("".base/workspace/classes"").toFile();\n        FS.ensureEmpty(basedir);\n\n        // Copy in class that is known to have annotations.\n        copyClass(ClassA.class, basedir);\n\n        // Setup Tracker\n        TrackingAnnotationHandler tracker = new TrackingAnnotationHandler(Sample.class.getName());\n\n        // Setup annotation scanning\n        AnnotationParser parser = new AnnotationParser();\n\n        // Parse\n        parser.parse(Collections.singleton(tracker), basedir.toURI());\n\n        // Validate\n        assertThat(""Found Class"", tracker.foundClasses, contains(ClassA.class.getName()));\n    }\n']",that;violates;path;in;sol;you;no;basedir;their;URI,1.0477378964424133e-09;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.2928149923682213e-10;3.346940502524376e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.9474077224731445, -5.354543685913086, -4.64763879776001, -5.8310322761535645, -5.514431953430176, -0.024176541715860367]",0.9761132597923279
2,"['    @Test\n    public void testScanDuplicateClassesInJars() throws Exception\n    {\n        Resource testJar = Resource.newResource(MavenTestingUtils.getTestResourceFile(""tinytest.jar""));\n        Resource testJar2 = Resource.newResource(MavenTestingUtils.getTestResourceFile(""tinytest_copy.jar""));\n        AnnotationParser parser = new AnnotationParser();\n        DuplicateClassScanHandler handler = new DuplicateClassScanHandler();\n        Set<Handler> handlers = Collections.singleton(handler);\n        parser.parse(handlers, testJar);\n        parser.parse(handlers, testJar2);\n        List<String> locations = handler.getParsedList(""org.acme.ClassOne"");\n        assertNotNull(locations);\n        assertEquals(2, locations.size());\n        assertTrue(!(locations.get(0).equals(locations.get(1))));\n    }\n']",handler;Resource;Set;Class;One;Annotation;Scan;Class;aven;Duplicate,1.0477378964424133e-09;6.402842700481415e-10;5.820766091346741e-10;3.710738383233547e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10,5,5,"[-5.944146633148193, -5.502999782562256, -4.640259265899658, -5.816100597381592, -5.424488544464111, -0.0240236297249794]",0.976262629032135
2,"['    @Test\n    public void testScanDuplicateClasses() throws Exception\n    {\n        Resource testJar = Resource.newResource(MavenTestingUtils.getTestResourceFile(""tinytest.jar""));\n        File testClasses = new File(MavenTestingUtils.getTargetDir(), ""test-classes"");\n        AnnotationParser parser = new AnnotationParser();\n        DuplicateClassScanHandler handler = new DuplicateClassScanHandler();\n        Set<Handler> handlers = Collections.singleton(handler);\n        parser.parse(handlers, testJar);\n        parser.parse(handlers, Resource.newResource(testClasses));\n        List<String> locations = handler.getParsedList(""org.acme.ClassOne"");\n        assertNotNull(locations);\n        assertEquals(2, locations.size());\n        assertTrue(!(locations.get(0).equals(locations.get(1))));\n    }\n']",Testing;Class;Duplicate;Scan;handlers;Jar;Jar;Handler;Resource;Class,7.566995918750763e-10;6.984919309616089e-10;6.257323548197746e-10;4.656612873077393e-10;3.710738383233547e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.956873893737793, -5.521035194396973, -4.635047912597656, -5.826309680938721, -5.425169944763184, -0.02393273450434208]",0.9763513803482056
2,"['    @BeforeEach\n    public void setup() throws Exception\n    {\n        web25 = MavenTestingUtils.getTestResourceFile(""web25.xml"");\n        web31false = MavenTestingUtils.getTestResourceFile(""web31false.xml"");\n        web31true = MavenTestingUtils.getTestResourceFile(""web31true.xml"");\n\n        // prepare an sci that will be on the webapp\'s classpath\n        jarDir = new File(MavenTestingUtils.getTestResourcesDir().getParentFile(), ""jar"");\n        testSciJar = new File(jarDir, ""test-sci.jar"");\n        assertTrue(testSciJar.exists());\n\n        testContainerSciJar = new File(jarDir, ""test-sci-for-container-path.jar"");\n        testWebInfClassesJar = new File(jarDir, ""test-sci-for-webinf.jar"");\n\n        // unpack some classes to pretend that are in WEB-INF/classes\n        unpacked = new File(MavenTestingUtils.getTargetTestingDir(), ""test-sci-for-webinf"");\n        unpacked.mkdirs();\n        FS.cleanDirectory(unpacked);\n        JAR.unpack(testWebInfClassesJar, unpacked);\n        webInfClasses = Resource.newResource(unpacked);\n\n        containerLoader = new URLClassLoader(new URL[]{\n            testContainerSciJar.toURI().toURL()\n        }, Thread.currentThread().getContextClassLoader());\n\n        targetClasses = Resource.newResource(MavenTestingUtils.getTargetDir().toURI()).addPath(""/test-classes"");\n\n        classes = Arrays.asList(new Resource[]{webInfClasses, targetClasses});\n\n        webAppLoader = new URLClassLoader(new URL[]{\n            testSciJar.toURI().toURL(), targetClasses.getURI().toURL(), webInfClasses.getURI().toURL()\n        },\n            containerLoader);\n    }\n']",Each;Before;URI;setup;current;xml;on;Class;that;URL,3.3760443329811096e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.896830081939697, -5.369114398956299, -4.672711372375488, -5.750907897949219, -5.446737289428711, -0.024542316794395447]",0.9757565259933472
2,"[""    @Test\n    public void testAnnotationScanControl() throws Exception\n    {\n        //check that a 2.5 webapp with configurationDiscovered will discover annotations\n        TestableAnnotationConfiguration config25 = new TestableAnnotationConfiguration();\n        WebAppContext context25 = new WebAppContext();\n        context25.setClassLoader(Thread.currentThread().getContextClassLoader());\n        context25.setAttribute(AnnotationConfiguration.MULTI_THREADED, Boolean.FALSE);\n        context25.setAttribute(AnnotationConfiguration.MAX_SCAN_WAIT, 0);\n        context25.setConfigurationDiscovered(false);\n        context25.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web25)));\n        context25.getServletContext().setEffectiveMajorVersion(2);\n        context25.getServletContext().setEffectiveMinorVersion(5);\n        config25.configure(context25);\n        config25.assertAnnotationDiscovery(false);\n\n        //check that a 2.5 webapp discover annotations\n        TestableAnnotationConfiguration config25b = new TestableAnnotationConfiguration();\n        WebAppContext context25b = new WebAppContext();\n        context25b.setClassLoader(Thread.currentThread().getContextClassLoader());\n        context25b.setAttribute(AnnotationConfiguration.MULTI_THREADED, Boolean.FALSE);\n        context25b.setAttribute(AnnotationConfiguration.MAX_SCAN_WAIT, 0);\n        context25b.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web25)));\n        context25b.getServletContext().setEffectiveMajorVersion(2);\n        context25b.getServletContext().setEffectiveMinorVersion(5);\n        config25b.configure(context25b);\n        config25b.assertAnnotationDiscovery(true);\n\n        //check that a 3.x webapp with metadata true won't discover annotations\n        TestableAnnotationConfiguration config31 = new TestableAnnotationConfiguration();\n        WebAppContext context31 = new WebAppContext();\n        context31.setClassLoader(Thread.currentThread().getContextClassLoader());\n        context31.setAttribute(AnnotationConfiguration.MULTI_THREADED, Boolean.FALSE);\n        context31.setAttribute(AnnotationConfiguration.MAX_SCAN_WAIT, 0);\n        context31.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web31true)));\n        context31.getServletContext().setEffectiveMajorVersion(3);\n        context31.getServletContext().setEffectiveMinorVersion(1);\n        config31.configure(context31);\n        config31.assertAnnotationDiscovery(false);\n\n        //check that a 3.x webapp with metadata false will discover annotations\n        TestableAnnotationConfiguration config31b = new TestableAnnotationConfiguration();\n        WebAppContext context31b = new WebAppContext();\n        context31b.setClassLoader(Thread.currentThread().getContextClassLoader());\n        context31b.setAttribute(AnnotationConfiguration.MULTI_THREADED, Boolean.FALSE);\n        context31b.setAttribute(AnnotationConfiguration.MAX_SCAN_WAIT, 0);\n        context31b.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web31false)));\n        context31b.getServletContext().setEffectiveMajorVersion(3);\n        context31b.getServletContext().setEffectiveMinorVersion(1);\n        config31b.configure(context31b);\n        config31b.assertAnnotationDiscovery(true);\n    }\n""]",that;Loader;false;Scan;Loader;Boolean;webapp;WAIT;Annotation;Effective,1.1059455573558807e-09;1.0477378964424133e-09;5.966285243630409e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.8198777474462986e-10;3.7834979593753815e-10,5,5,"[-5.8733439445495605, -5.4638543128967285, -4.682061195373535, -5.759765148162842, -5.3739333152771, -0.024393416941165924]",0.97590172290802
2,"['    @Test\n    public void testServerAndWebappSCIs() throws Exception\n    {\n        ClassLoader old = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(webAppLoader);\n\n        try\n        {\n            AnnotationConfiguration config = new AnnotationConfiguration();\n            WebAppContext context = new WebAppContext();\n            List<ServletContainerInitializer> scis;\n\n            //test 3.1 webapp loads both server and app scis\n            context.setClassLoader(webAppLoader);\n            context.getMetaData().addWebInfResource(Resource.newResource(testSciJar.toURI().toURL()));\n            context.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web31true)));\n            context.getMetaData().setWebInfClassesResources(classes);\n            context.getServletContext().setEffectiveMajorVersion(3);\n            context.getServletContext().setEffectiveMinorVersion(1);\n            scis = config.getNonExcludedInitializers(context);\n            assertNotNull(scis);\n            assertEquals(3, scis.size());\n            assertEquals(""com.acme.ServerServletContainerInitializer"", scis.get(0).getClass().getName()); //container path\n            assertEquals(""com.acme.webinf.WebInfClassServletContainerInitializer"", scis.get(1).getClass().getName()); // web-inf\n            assertEquals(""com.acme.initializer.FooInitializer"", scis.get(2).getClass().getName()); //web-inf jar no web-fragment\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(old);\n        }\n    }\n']",Thread;Initializers;Servlet;webin;Equals;context;Servlet;Web;Class;Equals,4.0745362639427185e-10;3.8562575355172157e-10;3.637978807091713e-10;3.2014213502407074e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;2.0372681319713593e-10,5,5,"[-5.8738226890563965, -5.343532085418701, -4.673463821411133, -5.735832691192627, -5.437613010406494, -0.02481423318386078]",0.9754909873008728
2,"['    @Test\n    public void testClassScanHandlersForSCIs() throws Exception\n    {\n        //test that SCIs with a @HandlesTypes that is an annotation registers\n        //handlers for the scanning phase that will capture the class hierarchy,\n        //and also capture all classes that contain the annotation\n        ClassLoader old = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(webAppLoader);\n\n        try\n        {\n            class MyAnnotationConfiguration extends AnnotationConfiguration\n            {\n\n                @Override\n                public void createServletContainerInitializerAnnotationHandlers(WebAppContext context, List<ServletContainerInitializer> scis) throws Exception\n                {\n                    super.createServletContainerInitializerAnnotationHandlers(context, scis);\n                    //check class hierarchy scanner handler is registered\n                    assertNotNull(_classInheritanceHandler);\n                    //check \n                    assertEquals(1, _containerInitializerAnnotationHandlers.size());\n                    ContainerInitializerAnnotationHandler handler = _containerInitializerAnnotationHandlers.get(0);\n                    assertThat(handler._holder.toString(), containsString(""com.acme.initializer.FooInitializer""));\n                    assertEquals(""com.acme.initializer.Foo"", handler._annotation.getName());\n                }\n']",annotation;Exception;Inheritance;Thread;phase;SC;App;that;Initializer;the,1.3387762010097504e-09;8.149072527885437e-10;5.675246939063072e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10,5,5,"[-5.888209819793701, -5.189175605773926, -4.6351799964904785, -5.797818183898926, -5.538887977600098, -0.02533622831106186]",0.9749820232391357
2,"['    @Test\n    public void testMetaDataCompleteSCIs() throws Exception\n    {\n        ClassLoader old = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(webAppLoader);\n\n        try\n        {\n            AnnotationConfiguration config = new AnnotationConfiguration();\n            WebAppContext context = new WebAppContext();\n            List<ServletContainerInitializer> scis;\n            // test a 3.1 webapp with metadata-complete=false loads both server\n            // and webapp scis\n            context.setClassLoader(webAppLoader);\n            context.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web31false)));\n            context.getMetaData().setWebInfClassesResources(classes);\n            context.getMetaData().addWebInfResource(Resource.newResource(testSciJar.toURI().toURL()));\n            context.getServletContext().setEffectiveMajorVersion(3);\n            context.getServletContext().setEffectiveMinorVersion(1);\n            scis = config.getNonExcludedInitializers(context);\n            assertNotNull(scis);\n            assertEquals(3, scis.size());\n            assertEquals(""com.acme.ServerServletContainerInitializer"", scis.get(0).getClass().getName()); // container\n            // path\n            assertEquals(""com.acme.webinf.WebInfClassServletContainerInitializer"", scis.get(1).getClass().getName()); // web-inf\n            assertEquals(""com.acme.initializer.FooInitializer"", scis.get(2).getClass().getName()); // web-inf\n            // jar\n            // no\n            // web-fragment\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(old);\n        }\n    }\n']",Loader;Thread;Complete;Loader;Descriptor;Initializer;Class;Major;Web;Resources,4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2378011383116245e-10;3.2378011383116245e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.902323246002197, -5.35360860824585, -4.662658214569092, -5.764133930206299, -5.459653854370117, -0.024598613381385803]",0.9757013320922852
2,"['    @Test\n    public void testRelativeOrderingWithSCIs() throws Exception\n    {\n        // test a 3.1 webapp with RELATIVE ORDERING loads sci from\n        // equivalent of WEB-INF/classes first as well as container path\n\n        ClassLoader old = Thread.currentThread().getContextClassLoader();\n\n        File orderedFragmentJar = new File(jarDir, ""test-sci-with-ordering.jar"");\n        assertTrue(orderedFragmentJar.exists());\n        URLClassLoader orderedLoader = new URLClassLoader(new URL[]{\n            orderedFragmentJar.toURI().toURL(), testSciJar.toURI().toURL(),\n            targetClasses.getURI().toURL(), webInfClasses.getURI().toURL()\n        },\n            containerLoader);\n        Thread.currentThread().setContextClassLoader(orderedLoader);\n\n        try\n        {\n            AnnotationConfiguration config = new AnnotationConfiguration();\n            WebAppContext context = new WebAppContext();\n            List<ServletContainerInitializer> scis;\n            context.setClassLoader(orderedLoader);\n            context.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web31true)));\n            RelativeOrdering ordering = new RelativeOrdering(context.getMetaData());\n            context.getMetaData().setOrdering(ordering);\n            context.getMetaData().addWebInfResource(Resource.newResource(orderedFragmentJar.toURI().toURL()));\n            context.getMetaData().addWebInfResource(Resource.newResource(testSciJar.toURI().toURL()));\n            context.getMetaData().setWebInfClassesResources(classes);\n            context.getMetaData().orderFragments();\n            context.getServletContext().setEffectiveMajorVersion(3);\n            context.getServletContext().setEffectiveMinorVersion(1);\n            scis = config.getNonExcludedInitializers(context);\n            assertNotNull(scis);\n            assertEquals(4, scis.size());\n            assertEquals(""com.acme.ServerServletContainerInitializer"", scis.get(0).getClass().getName()); //container path\n            assertEquals(""com.acme.webinf.WebInfClassServletContainerInitializer"", scis.get(1).getClass().getName()); // web-inf\n            assertEquals(""com.acme.ordering.AcmeServletContainerInitializer"", scis.get(2).getClass().getName()); // first\n            assertEquals(""com.acme.initializer.FooInitializer"", scis.get(3).getClass().getName()); //other in ordering\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(old);\n        }\n    }\n']",RELATIVE;equivalent;WE;first;webapp;URL;Relative;ordered;Thread;Ordering,1.1641532182693481e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.91362190246582, -5.271908283233643, -4.6566081047058105, -5.777093887329102, -5.519344329833984, -0.02474457398056984]",0.9755590558052063
2,"['    @Test\n    public void testDiscoveredFalseWithSCIs() throws Exception\n    {\n        ClassLoader old = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(webAppLoader);\n        try\n        {\n            //test 2.5 webapp with configurationDiscovered=false loads only server scis\n            AnnotationConfiguration config = new AnnotationConfiguration();\n            WebAppContext context = new WebAppContext();\n            List<ServletContainerInitializer> scis;\n            context.setConfigurationDiscovered(false);\n            context.setClassLoader(webAppLoader);\n            context.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web25)));\n            context.getMetaData().setWebInfClassesResources(classes);\n            context.getMetaData().addWebInfResource(Resource.newResource(testSciJar.toURI().toURL()));\n            context.getServletContext().setEffectiveMajorVersion(2);\n            context.getServletContext().setEffectiveMinorVersion(5);\n            scis = config.getNonExcludedInitializers(context);\n            assertNotNull(scis);\n            for (ServletContainerInitializer s : scis)\n            {\n                //should not have any of the web-inf lib scis in here\n                assertFalse(s.getClass().getName().equals(""com.acme.ordering.AcmeServletContainerInitializer""));\n                assertFalse(s.getClass().getName().equals(""com.acme.initializer.FooInitializer""));\n                //NOTE: should also not have the web-inf classes scis in here either, but due to the\n                //way the test is set up, the sci we\'re pretending is in web-inf classes will actually\n                //NOT be loaded by the webapp\'s classloader, but rather by the junit classloader, so\n                //it looks as if it is a container class.\n            }\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(old);\n        }\n    }\n']",False;Null;Loader;Effective;web;Initializer;should;Resource;old;Resources,6.984919309616089e-10;6.402842700481415e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.927786350250244, -5.304722309112549, -4.637220859527588, -5.8037543296813965, -5.510852336883545, -0.024677935987710953]",0.9756240844726562
2,"['    @Test\n    public void testDiscoveredTrueWithSCIs() throws Exception\n    {\n        ClassLoader old = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(webAppLoader);\n        try\n        {\n            //test 2.5 webapp with configurationDiscovered=true loads both server and webapp scis\n            AnnotationConfiguration config = new AnnotationConfiguration();\n            WebAppContext context = new WebAppContext();\n            List<ServletContainerInitializer> scis;\n            context.setConfigurationDiscovered(true);\n            context.setClassLoader(webAppLoader);\n            context.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web25)));\n            context.getMetaData().setWebInfClassesResources(classes);\n            context.getMetaData().addWebInfResource(Resource.newResource(testSciJar.toURI().toURL()));\n            context.getServletContext().setEffectiveMajorVersion(2);\n            context.getServletContext().setEffectiveMinorVersion(5);\n            scis = config.getNonExcludedInitializers(context);\n            assertNotNull(scis);\n            assertEquals(3, scis.size());\n            assertEquals(""com.acme.ServerServletContainerInitializer"", scis.get(0).getClass().getName()); //container path\n            assertEquals(""com.acme.webinf.WebInfClassServletContainerInitializer"", scis.get(1).getClass().getName()); // web-inf\n            assertEquals(""com.acme.initializer.FooInitializer"", scis.get(2).getClass().getName()); //web-inf jar no web-fragment\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(old);\n        }\n    }\n']",Loader;Discovered;Class;Classes;Servlet;Null;Resource;Loader;new;context,5.820766091346741e-10;4.94765117764473e-10;3.92901711165905e-10;3.7471181713044643e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.897359371185303, -5.332181930541992, -4.655651092529297, -5.767776966094971, -5.468626976013184, -0.02473515458405018]",0.9755683541297913
2,"['    @Test\n    public void testDenyAllOnClass() throws Exception\n    {\n\n        WebAppContext wac = makeWebAppContext(DenyServlet.class.getCanonicalName(), ""denyServlet"", new String[]{\n            ""/foo/*"", ""*.foo""\n        });\n\n        //Assume we found 1 servlet with a @HttpConstraint with value=EmptyRoleSemantic.DENY security annotation\n        ServletSecurityAnnotationHandler annotationHandler = new ServletSecurityAnnotationHandler(wac);\n        AnnotationIntrospector introspector = new AnnotationIntrospector(wac);\n        introspector.registerHandler(annotationHandler);\n\n        //set up the expected outcomes:\n        //1 ConstraintMapping per ServletMapping pathSpec\n        Constraint expectedConstraint = new Constraint();\n        expectedConstraint.setAuthenticate(true);\n        expectedConstraint.setDataConstraint(Constraint.DC_NONE);\n\n        ConstraintMapping[] expectedMappings = new ConstraintMapping[2];\n\n        expectedMappings[0] = new ConstraintMapping();\n        expectedMappings[0].setConstraint(expectedConstraint);\n        expectedMappings[0].setPathSpec(""/foo/*"");\n\n        expectedMappings[1] = new ConstraintMapping();\n        expectedMappings[1].setConstraint(expectedConstraint);\n        expectedMappings[1].setPathSpec(""*.foo"");\n\n        introspector.introspect(new DenyServlet(), null);\n\n        compareResults(expectedMappings, ((ConstraintAware)wac.getSecurityHandler()).getConstraintMappings());\n    }\n']",outcomes;annotation;On;Den;Authenticate;All;Assume;set;Annotation;Den,2.0954757928848267e-09;1.5425030142068863e-09;1.1350493878126144e-09;1.1059455573558807e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.055902197957039e-10,5,5,"[-5.804222106933594, -5.2765421867370605, -4.690620422363281, -5.677402496337891, -5.411960124969482, -0.02551380731165409]",0.9748088121414185
2,"['    @Test\n    public void testPermitAll() throws Exception\n    {\n        //Assume we found 1 servlet with a @ServletSecurity security annotation\n        WebAppContext wac = makeWebAppContext(PermitServlet.class.getCanonicalName(), ""permitServlet"", new String[]{\n            ""/foo/*"", ""*.foo""\n        });\n\n        ServletSecurityAnnotationHandler annotationHandler = new ServletSecurityAnnotationHandler(wac);\n        AnnotationIntrospector introspector = new AnnotationIntrospector(wac);\n        introspector.registerHandler(annotationHandler);\n\n        //set up the expected outcomes - no constraints at all as per Servlet Spec 3.1 pg 129\n        //1 ConstraintMapping per ServletMapping pathSpec\n\n        ConstraintMapping[] expectedMappings = new ConstraintMapping[]{};\n        PermitServlet permit = new PermitServlet();\n        introspector.introspect(permit, null);\n\n        compareResults(expectedMappings, ((ConstraintAware)wac.getSecurityHandler()).getConstraintMappings());\n    }\n']",rospect;annotation;All;App;permit;per;Constraint;no;all;with,6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.2741809263825417e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.893458843231201, -5.350504398345947, -4.668888568878174, -5.759890556335449, -5.447955131530762, -0.02464362420141697]",0.9756575226783752
2,"['    @Test\n    public void testRolesAllowedWithTransportGuarantee() throws Exception\n    {\n        //Assume we found 1 servlet with annotation with roles defined and\n        //and a TransportGuarantee\n\n        WebAppContext wac = makeWebAppContext(RolesServlet.class.getCanonicalName(), ""rolesServlet"", new String[]{\n            ""/foo/*"", ""*.foo""\n        });\n\n        ServletSecurityAnnotationHandler annotationHandler = new ServletSecurityAnnotationHandler(wac);\n        AnnotationIntrospector introspector = new AnnotationIntrospector(wac);\n        introspector.registerHandler(annotationHandler);\n\n        //set up the expected outcomes:compareResults\n        //1 ConstraintMapping per ServletMapping\n        Constraint expectedConstraint = new Constraint();\n        expectedConstraint.setAuthenticate(true);\n        expectedConstraint.setRoles(new String[]{""tom"", ""dick"", ""harry""});\n        expectedConstraint.setDataConstraint(Constraint.DC_CONFIDENTIAL);\n\n        ConstraintMapping[] expectedMappings = new ConstraintMapping[2];\n        expectedMappings[0] = new ConstraintMapping();\n        expectedMappings[0].setConstraint(expectedConstraint);\n        expectedMappings[0].setPathSpec(""/foo/*"");\n\n        expectedMappings[1] = new ConstraintMapping();\n        expectedMappings[1].setConstraint(expectedConstraint);\n        expectedMappings[1].setPathSpec(""*.foo"");\n        introspector.introspect(new RolesServlet(), null);\n        compareResults(expectedMappings, ((ConstraintAware)wac.getSecurityHandler()).getConstraintMappings());\n    }\n']",Allowed;Introspector;defined;Web;with;IDENTIAL;annotation;Transport;Security;apping,8.440110832452774e-10;5.384208634495735e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.637978807091713e-10;3.128661774098873e-10;2.9103830456733704e-10,5,5,"[-5.8827900886535645, -5.327167510986328, -4.673182487487793, -5.747831344604492, -5.476178169250488, -0.024663979187607765]",0.975637674331665
2,"['    @Test\n    public void testMethodAnnotation() throws Exception\n    {\n        //ServletSecurity annotation with HttpConstraint of TransportGuarantee.CONFIDENTIAL, and a list of rolesAllowed, and\n        //an HttpMethodConstraint for GET method that permits all and has TransportGuarantee.NONE (ie is default)\n\n        WebAppContext wac = makeWebAppContext(Method1Servlet.class.getCanonicalName(), ""method1Servlet"", new String[]{\n            ""/foo/*"", ""*.foo""\n        });\n\n        //set up the expected outcomes: - a Constraint for the RolesAllowed on the class\n        //with userdata constraint of DC_CONFIDENTIAL\n        //and mappings for each of the pathSpecs\n        Constraint expectedConstraint1 = new Constraint();\n        expectedConstraint1.setAuthenticate(true);\n        expectedConstraint1.setRoles(new String[]{""tom"", ""dick"", ""harry""});\n        expectedConstraint1.setDataConstraint(Constraint.DC_CONFIDENTIAL);\n\n        //a Constraint for the PermitAll on the doGet method with a userdata\n        //constraint of DC_CONFIDENTIAL inherited from the class\n        Constraint expectedConstraint2 = new Constraint();\n        expectedConstraint2.setDataConstraint(Constraint.DC_NONE);\n\n        ConstraintMapping[] expectedMappings = new ConstraintMapping[4];\n        expectedMappings[0] = new ConstraintMapping();\n        expectedMappings[0].setConstraint(expectedConstraint1);\n        expectedMappings[0].setPathSpec(""/foo/*"");\n        expectedMappings[0].setMethodOmissions(new String[]{""GET""});\n        expectedMappings[1] = new ConstraintMapping();\n        expectedMappings[1].setConstraint(expectedConstraint1);\n        expectedMappings[1].setPathSpec(""*.foo"");\n        expectedMappings[1].setMethodOmissions(new String[]{""GET""});\n\n        expectedMappings[2] = new ConstraintMapping();\n        expectedMappings[2].setConstraint(expectedConstraint2);\n        expectedMappings[2].setPathSpec(""/foo/*"");\n        expectedMappings[2].setMethod(""GET"");\n        expectedMappings[3] = new ConstraintMapping();\n        expectedMappings[3].setConstraint(expectedConstraint2);\n        expectedMappings[3].setPathSpec(""*.foo"");\n        expectedMappings[3].setMethod(""GET"");\n\n        AnnotationIntrospector introspector = new AnnotationIntrospector(wac);\n        ServletSecurityAnnotationHandler annotationHandler = new ServletSecurityAnnotationHandler(wac);\n        introspector.registerHandler(annotationHandler);\n        introspector.introspect(new Method1Servlet(), null);\n        compareResults(expectedMappings, ((ConstraintAware)wac.getSecurityHandler()).getConstraintMappings());\n    }\n']",Annotation;with;Guarantee;the;IDENTIAL;ick;Exception;Security;Specs;ie,1.1932570487260818e-09;1.1641532182693481e-09;1.1059455573558807e-09;1.1059455573558807e-09;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.850321292877197, -5.299984931945801, -4.685671806335449, -5.7292399406433105, -5.453621864318848, -0.02493574656546116]",0.9753724932670593
2,"['    @Test\n    public void testMethodAnnotation2() throws Exception\n    {\n        //A ServletSecurity annotation that has HttpConstraint of CONFIDENTIAL with defined roles, but a\n        //HttpMethodConstraint for GET that permits all, but also requires CONFIDENTIAL\n        WebAppContext wac = makeWebAppContext(Method2Servlet.class.getCanonicalName(), ""method2Servlet"", new String[]{\n            ""/foo/*"", ""*.foo""\n        });\n\n        AnnotationIntrospector introspector = new AnnotationIntrospector(wac);\n        ServletSecurityAnnotationHandler annotationHandler = new ServletSecurityAnnotationHandler(wac);\n        introspector.registerHandler(annotationHandler);\n\n        //set up the expected outcomes: - a Constraint for the RolesAllowed on the class\n        //with userdata constraint of DC_CONFIDENTIAL\n        //and mappings for each of the pathSpecs\n        Constraint expectedConstraint1 = new Constraint();\n        expectedConstraint1.setAuthenticate(true);\n        expectedConstraint1.setRoles(new String[]{""tom"", ""dick"", ""harry""});\n        expectedConstraint1.setDataConstraint(Constraint.DC_CONFIDENTIAL);\n\n        //a Constraint for the Permit on the GET method with a userdata\n        //constraint of DC_CONFIDENTIAL\n        Constraint expectedConstraint2 = new Constraint();\n        expectedConstraint2.setDataConstraint(Constraint.DC_CONFIDENTIAL);\n\n        ConstraintMapping[] expectedMappings = new ConstraintMapping[4];\n        expectedMappings[0] = new ConstraintMapping();\n        expectedMappings[0].setConstraint(expectedConstraint1);\n        expectedMappings[0].setPathSpec(""/foo/*"");\n        expectedMappings[0].setMethodOmissions(new String[]{""GET""});\n        expectedMappings[1] = new ConstraintMapping();\n        expectedMappings[1].setConstraint(expectedConstraint1);\n        expectedMappings[1].setPathSpec(""*.foo"");\n        expectedMappings[1].setMethodOmissions(new String[]{""GET""});\n\n        expectedMappings[2] = new ConstraintMapping();\n        expectedMappings[2].setConstraint(expectedConstraint2);\n        expectedMappings[2].setPathSpec(""/foo/*"");\n        expectedMappings[2].setMethod(""GET"");\n        expectedMappings[3] = new ConstraintMapping();\n        expectedMappings[3].setConstraint(expectedConstraint2);\n        expectedMappings[3].setPathSpec(""*.foo"");\n        expectedMappings[3].setMethod(""GET"");\n\n        introspector.introspect(new Method2Servlet(), null);\n        compareResults(expectedMappings, ((ConstraintAware)wac.getSecurityHandler()).getConstraintMappings());\n    }\n']",CON;of;foo;expected;ttp;IDENTIAL;Web;Annotation;also;Annotation,1.1641532182693481e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.877346992492676, -5.314973831176758, -4.670574188232422, -5.755571365356445, -5.47579288482666, -0.024742132052779198]",0.9755614399909973
2,"['    @Test\n    public void testAnnotationDecorator() throws Exception\n    {\n        assertThrows(NullPointerException.class, () ->\n        {\n            new AnnotationDecorator(null);\n        });\n\n        WebAppContext context = new WebAppContext();\n        AnnotationDecorator decorator = new AnnotationDecorator(context);\n        ServletE servlet = new ServletE();\n        //test without BaseHolder metadata\n        decorator.decorate(servlet);\n        LifeCycleCallbackCollection callbacks = (LifeCycleCallbackCollection)context.getAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION);\n        assertNotNull(callbacks);\n        assertFalse(callbacks.getPreDestroyCallbacks().isEmpty());\n\n        //reset\n        context.removeAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION);\n\n        //test with BaseHolder metadata, should not introspect with metdata-complete==true\n        context.getMetaData().setWebDescriptor(new TestWebDescriptor(MetaData.Complete.True));\n        assertTrue(context.getMetaData().isMetaDataComplete());\n        ServletHolder holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, """"));\n        holder.setHeldClass(ServletE.class);\n        context.getServletHandler().addServlet(holder);\n        DecoratedObjectFactory.associateInfo(holder);\n        decorator = new AnnotationDecorator(context);\n        decorator.decorate(servlet);\n        DecoratedObjectFactory.disassociateInfo();\n        callbacks = (LifeCycleCallbackCollection)context.getAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION);\n        assertNull(callbacks);\n\n        //reset\n        context.removeAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION);\n\n        //test with BaseHolder metadata, should introspect with metadata-complete==false\n        context.getMetaData().setWebDescriptor(new TestWebDescriptor(MetaData.Complete.False));\n        DecoratedObjectFactory.associateInfo(holder);\n        decorator = new AnnotationDecorator(context);\n        decorator.decorate(servlet);\n        DecoratedObjectFactory.disassociateInfo();\n        callbacks = (LifeCycleCallbackCollection)context.getAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION);\n        assertNotNull(callbacks);\n        assertFalse(callbacks.getPreDestroyCallbacks().isEmpty());\n    }\n']",Throws;Null;App;Pointer;Empty;Held;Exception;Decorator;ALLBACK;Web,1.280568540096283e-09;5.529727786779404e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.092281986027956e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.914956569671631, -5.364446640014648, -4.648143291473389, -5.801423072814941, -5.484333515167236, -0.02442866563796997]",0.9758672714233398
2,"['    @AfterEach\n    public void destroy() throws Exception\n    {\n        classNames.clear();\n        InitialContext ic = new InitialContext();\n        Context comp = (Context)ic.lookup(""java:comp"");\n        comp.destroySubcontext(""env"");\n    }\n']",Each;After;destroy;destroy;lookup;clear;comp;comp;env;Names,2.7939677238464355e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;3.4924596548080444e-10;1.1641532182693481e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0,5,5,"[-5.994173526763916, -5.599893569946289, -4.60445499420166, -5.849982738494873, -5.391825199127197, -0.0239159744232893]",0.9763677716255188
2,"['    @Test\n    public void testParseClassNames() throws Exception\n    {\n        classNames.add(ClassA.class.getName());\n        classNames.add(ClassB.class.getName());\n\n        SampleHandler handler = new SampleHandler();\n        AnnotationParser parser = new AnnotationParser();\n        parser.parse(Collections.singleton(handler), classNames);\n\n        //check we got  2 class annotations\n        assertEquals(2, handler.annotatedClassNames.size());\n\n        //check we got all annotated methods on each class\n        assertEquals(7, handler.annotatedMethods.size());\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.a""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.b""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.c""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.d""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.l""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassB.a""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassB.c""));\n\n        //check we got all annotated fields on each class\n        assertEquals(1, handler.annotatedFields.size());\n        assertEquals(""org.eclipse.jetty.annotations.ClassA.m"", handler.annotatedFields.get(0));\n    }\n']",Collections;contains;Handler;Sample;parser;Annotation;Names;annotated;we;on,5.820766091346741e-10;2.6921043172478676e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.8774285316467285, -5.441958427429199, -4.655415058135986, -5.742100238800049, -5.423834323883057, -0.0245602298527956]",0.9757388234138489
2,"['    @Test\n    public void testParseClass() throws Exception\n    {\n        SampleHandler handler = new SampleHandler();\n        AnnotationParser parser = new AnnotationParser();\n        parser.parse(Collections.singleton(handler), ClassB.class, true);\n\n        //check we got  2 class annotations\n        assertEquals(2, handler.annotatedClassNames.size());\n\n        //check we got all annotated methods on each class\n        assertEquals(7, handler.annotatedMethods.size());\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.a""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.b""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.c""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.d""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.l""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassB.a""));\n        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassB.c""));\n\n        //check we got all annotated fields on each class\n        assertEquals(1, handler.annotatedFields.size());\n        assertEquals(""org.eclipse.jetty.annotations.ClassA.m"", handler.annotatedFields.get(0));\n    }\n']",Sample;Sample;singleton;Exception;Class;got;new;fields;Equals;class,1.1641532182693481e-09;1.0477378964424133e-09;7.8580342233181e-10;7.275957614183426e-10;5.238689482212067e-10;5.238689482212067e-10;3.2741809263825417e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9831426218152046e-10,5,5,"[-5.889857769012451, -5.434850692749023, -4.646224498748779, -5.763453960418701, -5.443817138671875, -0.024487528949975967]",0.9758097529411316
2,"['    @Test\n    public void testTypeInheritanceHandling() throws Exception\n    {\n        Map<String, Set<String>> map = new ConcurrentHashMap<>();\n\n        AnnotationParser parser = new AnnotationParser();\n        ClassInheritanceHandler handler = new ClassInheritanceHandler(map);\n\n        class Foo implements InterfaceD\n        {\n        }\n\n        classNames.clear();\n        classNames.add(ClassA.class.getName());\n        classNames.add(ClassB.class.getName());\n        classNames.add(InterfaceD.class.getName());\n        classNames.add(Foo.class.getName());\n\n        parser.parse(Collections.singleton(handler), classNames);\n\n        assertNotNull(map);\n        assertFalse(map.isEmpty());\n        assertEquals(2, map.size());\n\n        assertThat(map, hasKey(""org.eclipse.jetty.annotations.ClassA""));\n        assertThat(map, hasKey(""org.eclipse.jetty.annotations.InterfaceD""));\n        Set<String> classes = map.get(""org.eclipse.jetty.annotations.ClassA"");\n        assertThat(classes, contains(""org.eclipse.jetty.annotations.ClassB""));\n\n        classes = map.get(""org.eclipse.jetty.annotations.InterfaceD"");\n        assertThat(classes, containsInAnyOrder(""org.eclipse.jetty.annotations.ClassB"",\n            Foo.class.getName()));\n    }\n']",Interface;Foo;handler;implements;Inheritance;Class;Class;Set;oo;Interface,4.656612873077393e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.879852771759033, -5.429592132568359, -4.659553050994873, -5.7331223487854, -5.434060096740723, -0.02455197088420391]",0.9757469892501831
2,"['    @Test\n    public void testIsIntrospectable() throws Exception\n    {\n        try (StacklessLogging ignore = new StacklessLogging(AnnotationIntrospector.class))\n        {\n            WebAppContext wac = new WebAppContext();\n            AnnotationIntrospector introspector = new AnnotationIntrospector(wac);\n            //can\'t introspect nothing\n            assertFalse(introspector.isIntrospectable(null, null));\n\n            //can introspect if no metadata to say otherwise\n            assertTrue(introspector.isIntrospectable(new Object(), null));\n\n            //can introspect if metdata isn\'t a BaseHolder\n            assertTrue(introspector.isIntrospectable(new Object(), new Object()));\n\n            //an EMBEDDED sourced servlet can be introspected\n            ServletHolder holder = new ServletHolder();\n            holder.setHeldClass(ServletE.class);\n            assertTrue(introspector.isIntrospectable(new ServletE(), holder));\n\n            //a JAVAX API sourced servlet can be introspected\n            holder = new ServletHolder(Source.JAVAX_API);\n            holder.setHeldClass(ServletE.class);\n            assertTrue(introspector.isIntrospectable(new ServletE(), holder));\n\n            //an ANNOTATION sourced servlet can be introspected\n            holder = new ServletHolder(new Source(Source.Origin.ANNOTATION, ServletE.class.getName()));\n            holder.setHeldClass(ServletE.class);\n            assertTrue(introspector.isIntrospectable(new ServletE(), holder));\n\n            //a DESCRIPTOR sourced servlet can be introspected if web.xml metdata-complete==false\n            File file = MavenTestingUtils.getTestResourceFile(""web31false.xml"");\n            Resource resource = Resource.newResource(file);\n            wac.getMetaData().setWebDescriptor(new WebDescriptor(resource));\n            holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, resource.toString()));\n            assertTrue(introspector.isIntrospectable(new ServletE(), holder));\n\n            //a DESCRIPTOR sourced servlet can be introspected if web-fragment.xml medata-complete==false && web.xml metadata-complete==false\n            file = MavenTestingUtils.getTestResourceFile(""web-fragment4false.xml"");\n            resource = Resource.newResource(file);\n            wac.getMetaData().addFragmentDescriptor(Resource.newResource(file.getParentFile()), new FragmentDescriptor(resource));\n            holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, resource.toString()));\n            assertTrue(introspector.isIntrospectable(new ServletE(), holder));\n\n            //a DESCRIPTOR sourced servlet cannot be introspected if web-fragment.xml medata-complete==true (&& web.xml metadata-complete==false)\n            file = MavenTestingUtils.getTestResourceFile(""web-fragment4true.xml"");\n            resource = Resource.newResource(file);\n            wac.getMetaData().addFragmentDescriptor(Resource.newResource(file.getParentFile()), new FragmentDescriptor(resource));\n            holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, resource.toString()));\n            assertFalse(introspector.isIntrospectable(new ServletE(), holder));\n\n            //a DESCRIPTOR sourced servlet cannot be introspected if web.xml medata-complete==true\n            file = MavenTestingUtils.getTestResourceFile(""web31true.xml"");\n            resource = Resource.newResource(file);\n            wac.getMetaData().setWebDescriptor(new WebDescriptor(resource));\n            holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, resource.toString()));\n            assertFalse(introspector.isIntrospectable(new ServletE(), holder));\n        }\n    }\n']",otherwise;can't;say;False;App;servlet;Annotation;Introspector;Introspectable;older,1.1059455573558807e-09;5.675246939063072e-10;4.656612873077393e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.855144023895264, -5.327043533325195, -4.65816593170166, -5.750985622406006, -5.450372695922852, -0.024991439655423164]",0.9753182530403137
2,"['    @Test\n    public void test() throws Exception\n    {\n        //SCI with @HandlesTypes[Ordinary, Sample]\n        SampleServletContainerInitializer sci = new SampleServletContainerInitializer();\n        \n        DiscoveredServletContainerInitializerHolder holder = \n            new DiscoveredServletContainerInitializerHolder(new Source(Source.Origin.ANNOTATION, sci.getClass().getName()),\n            sci);\n\n        //add the @HandlesTypes to the holder\n        holder.addStartupClasses(Ordinary.class, Sample.class);\n        \n        //pretend scanned and discovered that ASample has the Sample annotation\n        holder.addStartupClasses(ASample.class.getName());\n        \n        //pretend we scanned the entire class hierarchy and found:\n        //   com.acme.tom and com.acme.dick both extend Ordinary\n        //   ASample has subclass BSample\n        Map<String, Set<String>> classMap = new HashMap<>();\n        classMap.put(Ordinary.class.getName(), new HashSet(Arrays.asList(""com.acme.tom"", ""com.acme.dick"")));\n        classMap.put(ASample.class.getName(), new HashSet(Arrays.asList(BSample.class.getName())));\n        holder.resolveClasses(classMap);\n        \n        //we should now have the following classes that will be passed to the SampleServletContainerInitializer.onStartup\n        String toString = holder.toString();\n        assertThat(toString, containsString(""com.acme.tom""));\n        assertThat(toString, containsString(""com.acme.dick""));\n        assertThat(toString, containsString(ASample.class.getName()));\n        assertThat(toString, containsString(BSample.class.getName()));\n        assertThat(toString, containsString(""applicable=[],annotated=[]""));\n    }\n']",Handles;subclass;with;Ordinary;hierarchy;Discovered;discovered;Discovered;and;entire,1.3969838619232178e-09;1.1641532182693481e-09;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.8990983963012695, -5.367216110229492, -4.662534236907959, -5.786728382110596, -5.450763702392578, -0.024510560557246208]",0.9757875204086304
2,"['    @Test\n    public void testServletAnnotation() throws Exception\n    {\n        List<String> classes = new ArrayList<String>();\n        classes.add(""org.eclipse.jetty.annotations.ServletC"");\n        AnnotationParser parser = new AnnotationParser();\n\n        WebAppContext wac = new WebAppContext();\n        List<DiscoveredAnnotation> results = new ArrayList<DiscoveredAnnotation>();\n\n        TestWebServletAnnotationHandler handler = new TestWebServletAnnotationHandler(wac, results);\n\n        parser.parse(Collections.singleton(handler), classes);\n\n        assertEquals(1, results.size());\n        assertTrue(results.get(0) instanceof WebServletAnnotation);\n\n        results.get(0).apply();\n\n        ServletHolder[] holders = wac.getServletHandler().getServlets();\n        assertNotNull(holders);\n        assertEquals(1, holders.length);\n\n        // Verify servlet annotations\n        ServletHolder cholder = holders[0];\n        assertThat(""Servlet Name"", cholder.getName(), is(""CServlet""));\n        assertThat(""InitParameter[x]"", cholder.getInitParameter(""x""), is(""y""));\n        assertThat(""Init Order"", cholder.getInitOrder(), is(2));\n        assertThat(""Async Supported"", cholder.isAsyncSupported(), is(false));\n\n        // Verify mappings\n        ServletMapping[] mappings = wac.getServletHandler().getServletMappings();\n        assertNotNull(mappings);\n        assertEquals(1, mappings.length);\n        String[] paths = mappings[0].getPathSpecs();\n        assertNotNull(paths);\n        assertEquals(2, paths.length);\n    }\n']",Exception;parser;Annotation;Annotation;new;Discovered;Not;Init;That;cholder,4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.842381477355957, -5.371392726898193, -4.680052280426025, -5.7081990242004395, -5.419607639312744, -0.02488272450864315]",0.9754244089126587
2,"['    @Test\n    public void testWebServletAnnotationOverrideDefault() throws Exception\n    {\n        //if the existing servlet mapping TO A DIFFERENT SERVLET IS from a default descriptor we\n        //DO allow the annotation to replace the mapping.\n\n        WebAppContext wac = new WebAppContext();\n        ServletHolder defaultServlet = new ServletHolder();\n        defaultServlet.setClassName(""org.eclipse.jetty.servlet.DefaultServlet"");\n        defaultServlet.setName(""default"");\n        wac.getServletHandler().addServlet(defaultServlet);\n\n        ServletMapping m = new ServletMapping();\n        m.setPathSpec(""/"");\n        m.setServletName(""default"");\n        m.setFromDefaultDescriptor(true);  //this mapping will be from a default descriptor\n        wac.getServletHandler().addServletMapping(m);\n\n        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);\n        annotation.apply();\n\n        //test that as the original servlet mapping had only 1 pathspec, then the whole\n        //servlet mapping should be deleted as that pathspec will be remapped to the DServlet\n        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();\n        assertNotNull(resultMappings);\n        assertEquals(1, resultMappings.length);\n        assertEquals(2, resultMappings[0].getPathSpecs().length);\n        resultMappings[0].getServletName().equals(""DServlet"");\n        for (String s : resultMappings[0].getPathSpecs())\n        {\n            assertThat(s, anyOf(is(""/""), is(""/bah/*"")));\n        }\n    }\n']",IFFERENT;TO;default;the;SERVLET;Servlet;servlet;mapping;set;clipse,7.275957614183426e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.895151615142822, -5.367103576660156, -4.686640739440918, -5.7571892738342285, -5.462640762329102, -0.02433396689593792]",0.9759597182273865
2,"['    @Test\n    public void testWebServletAnnotationReplaceDefault() throws Exception\n    {\n        //if the existing servlet mapping TO A DIFFERENT SERVLET IS from a default descriptor we\n        //DO allow the annotation to replace the mapping.\n        WebAppContext wac = new WebAppContext();\n        ServletHolder defaultServlet = new ServletHolder();\n        defaultServlet.setClassName(""org.eclipse.jetty.servlet.DefaultServlet"");\n        defaultServlet.setName(""default"");\n        wac.getServletHandler().addServlet(defaultServlet);\n\n        ServletMapping m = new ServletMapping();\n        m.setPathSpec(""/"");\n        m.setServletName(""default"");\n        m.setFromDefaultDescriptor(true);  //this mapping will be from a default descriptor\n        wac.getServletHandler().addServletMapping(m);\n\n        ServletMapping m2 = new ServletMapping();\n        m2.setPathSpec(""/other"");\n        m2.setServletName(""default"");\n        m2.setFromDefaultDescriptor(true);  //this mapping will be from a default descriptor\n        wac.getServletHandler().addServletMapping(m2);\n\n        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);\n        annotation.apply();\n\n        //test that only the mapping for ""/"" was removed from the mappings to the default servlet\n        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();\n        assertNotNull(resultMappings);\n        assertEquals(2, resultMappings.length);\n        for (ServletMapping r : resultMappings)\n        {\n            if (r.getServletName().equals(""default""))\n            {\n                assertEquals(1, r.getPathSpecs().length);\n                assertEquals(""/other"", r.getPathSpecs()[0]);\n            }\n            else if (r.getServletName().equals(""DServlet""))\n            {\n                assertEquals(2, r.getPathSpecs().length);\n                for (String p : r.getPathSpecs())\n                {\n                    if (!p.equals(""/"") && !p.equals(""/bah/*""))\n                        fail(""Unexpected path"");\n                }\n            }\n            else\n                fail(""Unexpected servlet mapping: "" + r);\n        }\n    }\n']",Annotation;that;the;annotations;set;annotation;default;descriptor;clipse;Path,1.2223608791828156e-09;6.402842700481415e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.89729118347168, -5.348251819610596, -4.68052339553833, -5.755162239074707, -5.462975025177002, -0.024482060223817825]",0.9758151769638062
2,"['    @Test\n    public void testWebServletAnnotationNotOverride() throws Exception\n    {\n        //if the existing servlet mapping TO A DIFFERENT SERVLET IS NOT from a default descriptor we\n        //DO NOT allow the annotation to replace the mapping\n        WebAppContext wac = new WebAppContext();\n        ServletHolder servlet = new ServletHolder();\n        servlet.setClassName(""org.eclipse.jetty.servlet.FooServlet"");\n        servlet.setName(""foo"");\n        wac.getServletHandler().addServlet(servlet);\n        ServletMapping m = new ServletMapping();\n        m.setPathSpec(""/"");\n        m.setServletName(""foo"");\n        wac.getServletHandler().addServletMapping(m);\n\n        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);\n        annotation.apply();\n\n        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();\n        assertEquals(2, resultMappings.length);\n        for (ServletMapping r : resultMappings)\n        {\n            if (r.getServletName().equals(""DServlet""))\n            {\n                assertEquals(2, r.getPathSpecs().length);\n            }\n            else if (r.getServletName().equals(""foo""))\n            {\n                assertEquals(1, r.getPathSpecs().length);\n            }\n            else\n                fail(""Unexpected servlet name: "" + r);\n        }\n    }\n']",SERVLET;Annotation;Not;annotation;if;clipse;Servlet;mapping;Servlet;new,1.6298145055770874e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;2.764863893389702e-10;2.6193447411060333e-10,5,5,"[-5.908572673797607, -5.3537702560424805, -4.661149024963379, -5.774034023284912, -5.480801582336426, -0.024472173303365707]",0.9758248329162598
2,"['    @Test\n    public void testWebServletAnnotationIgnore() throws Exception\n    {\n        //an existing servlet OF THE SAME NAME has even 1 non-default mapping we can\'t use\n        //any of the url mappings in the annotation\n        WebAppContext wac = new WebAppContext();\n        ServletHolder servlet = new ServletHolder();\n        servlet.setClassName(""org.eclipse.jetty.servlet.OtherDServlet"");\n        servlet.setName(""DServlet"");\n        wac.getServletHandler().addServlet(servlet);\n\n        ServletMapping m = new ServletMapping();\n        m.setPathSpec(""/default"");\n        m.setFromDefaultDescriptor(true);\n        m.setServletName(""DServlet"");\n        wac.getServletHandler().addServletMapping(m);\n\n        ServletMapping m2 = new ServletMapping();\n        m2.setPathSpec(""/other"");\n        m2.setServletName(""DServlet"");\n        wac.getServletHandler().addServletMapping(m2);\n\n        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);\n        annotation.apply();\n\n        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();\n        assertEquals(2, resultMappings.length);\n\n        for (ServletMapping r : resultMappings)\n        {\n            assertEquals(1, r.getPathSpecs().length);\n            if (!r.getPathSpecs()[0].equals(""/default"") && !r.getPathSpecs()[0].equals(""/other""))\n                fail(""Unexpected path in mapping: "" + r);\n        }\n    }\n']",annotation;the;Servlet;appings;DServlet;annotation;NAME;appings;AME;Path,8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10;6.111804395914078e-10;4.511093720793724e-10;4.511093720793724e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.9075164794921875, -5.32426643371582, -4.664717197418213, -5.78457498550415, -5.491357803344727, -0.024507535621523857]",0.9757903218269348
2,"['    @Test\n    public void testWebServletAnnotationNoMappings() throws Exception\n    {\n        //an existing servlet OF THE SAME NAME has no mappings, therefore all mappings in the annotation\n        //should be accepted\n        WebAppContext wac = new WebAppContext();\n        ServletHolder servlet = new ServletHolder();\n        servlet.setName(""foo"");\n        wac.getServletHandler().addServlet(servlet);\n\n        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);\n        annotation.apply();\n\n        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();\n        assertEquals(1, resultMappings.length);\n        assertEquals(2, resultMappings[0].getPathSpecs().length);\n        for (String s : resultMappings[0].getPathSpecs())\n        {\n            assertThat(s, anyOf(is(""/""), is(""/bah/*"")));\n        }\n    }\n']",NAME;servlet;apply;THE;clipse;Annotation;Annotation;OF;the;annotation,6.984919309616089e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.923233985900879, -5.393111705780029, -4.657858371734619, -5.800273418426514, -5.479937553405762, -0.024197835475206375]",0.9760925769805908
2,['    @Test\n    public void testDeclareRoles()\n        throws Exception\n'],Declare;oles;Exception,2.0954757928848267e-09;1.862645149230957e-09;-5.471520125865936e-09,5,5,"[-6.029603481292725, -5.5835795402526855, -4.544587135314941, -5.915885925292969, -5.392574310302734, -0.024330127984285355]",0.9759633541107178
2,"['    @BeforeEach\n    public void init() throws Exception\n    {\n        server = new Server();\n        wac = new WebAppContext();\n        wac.setServer(server);\n        injections = new InjectionCollection();\n        wac.setAttribute(InjectionCollection.INJECTION_COLLECTION, injections);\n        InitialContext ic = new InitialContext();\n        comp = (Context)ic.lookup(""java:comp"");\n        env = comp.createSubcontext(""env"");\n    }\n']",Before;env;java;injections;Context;Injection;new;comp;Attribute;server,1.3969838619232178e-09;1.1059455573558807e-09;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.2014213502407074e-10,5,5,"[-6.019947052001953, -5.61448335647583, -4.600188732147217, -5.863541603088379, -5.412298202514648, -0.023705746978521347]",0.9765730500221252
2,"['    @AfterEach\n    public void destroy() throws Exception\n    {\n        comp.destroySubcontext(""env"");\n    }\n']",env;Each;comp;destroy;Subcontext;destroy;Exception;After,1.7462298274040222e-09;1.3969838619232178e-09;4.656612873077393e-10;-2.9103830456733704e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.3969838619232178e-09;-3.725290298461914e-09,5,5,"[-6.01995325088501, -5.633028507232666, -4.55748987197876, -5.900090217590332, -5.37370491027832, -0.024161530658602715]",0.9761280417442322
2,['    @Test\n    public void testResourceAnnotations()\n        throws Exception\n'],Resource;Annotations;Exception,2.3283064365386963e-09;-1.3969838619232178e-09;-5.122274160385132e-09,5,5,"[-6.033559322357178, -5.587070465087891, -4.534843921661377, -5.932434558868408, -5.393746376037598, -0.024362819269299507]",0.9759315848350525
2,['    @Test\n    public void testResourcesAnnotation()\n        throws Exception\n'],Exception;Resources;Annotation,2.7939677238464355e-09;0.0;-7.2177499532699585e-09,5,5,"[-6.031141757965088, -5.581972599029541, -4.534526348114014, -5.932340145111084, -5.390986442565918, -0.02440504916012287]",0.9758903384208679
2,"['    @Test\n    public void testRunAsAnnotation() throws Exception\n    {\n        WebAppContext wac = new WebAppContext();\n        \n        //pre-add a servlet but not by descriptor\n        ServletHolder holder = new ServletHolder();\n        holder.setName(""foo1"");\n        holder.setHeldClass(ServletC.class);\n        holder.setInitOrder(1); //load on startup\n        wac.getServletHandler().addServletWithMapping(holder, ""/foo/*"");\n        \n        //add another servlet of the same class, but as if by descriptor\n        ServletHolder holder2 = new ServletHolder();\n        holder2.setName(""foo2"");\n        holder2.setHeldClass(ServletC.class);\n        holder2.setInitOrder(1);\n        wac.getServletHandler().addServletWithMapping(holder2, ""/foo2/*"");\n        Resource fakeXml = Resource.newResource(new File(MavenTestingUtils.getTargetTestingDir(""run-as""), ""fake.xml""));\n        wac.getMetaData().setOrigin(holder2.getName() + "".servlet.run-as"", new WebDescriptor(fakeXml));\n        \n        AnnotationIntrospector parser = new AnnotationIntrospector(wac);\n        RunAsAnnotationHandler handler = new RunAsAnnotationHandler(wac);\n        parser.registerHandler(handler);\n        parser.introspect(new ServletC(), null);\n        \n        assertEquals(""admin"", holder.getRunAsRole());\n        assertEquals(null, holder2.getRunAsRole());\n    }\n']",Annotation;foo;Context;Resource;Class;servlet;Introspector;foo;parser;Held,7.566995918750763e-10;6.984919309616089e-10;4.656612873077393e-10;3.92901711165905e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.0372681319713593e-10,5,5,"[-5.9582695960998535, -5.3995161056518555, -4.633139610290527, -5.822752475738525, -5.486271381378174, -0.024220874533057213]",0.976069986820221
2,"['\t@Test\n\tpublic void testDefaultSettings() throws CoreException {\n\t\tconnector = new SocketListenMultiConnector();\n\t\tMap<String, Connector.Argument> defaults = connector.getDefaultArguments();\n\t\tassertTrue(defaults.containsKey(""connectionLimit""));\n\t\tassertEquals(1, ((Connector.IntegerArgument) defaults.get(""connectionLimit"")).intValue());\n\t}\n']",Connector;Argument;Core;Exception;connection;Limit;Listen;Argument;Socket;Settings,6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.026267051696777, -5.694931983947754, -4.59553861618042, -5.847439765930176, -5.370626449584961, -0.023691195994615555]",0.9765872359275818
2,"['\t@Test\n\tpublic void testDefaultBehaviour() throws CoreException, InterruptedException {\n\t\tconnector = new SocketListenMultiConnector();\n\t\tMap<String, String> arguments = new HashMap<>();\n\t\targuments.put(""port"", Integer.toString(port));\n\t\tconnector.connect(arguments, new NullProgressMonitor(), launch);\n\t\tThread.sleep(200);\n\n\t\tassertTrue(""first connect should succeed"", connect());\n\t\tassertFalse(""second connect should fail"", connect());\n\t}\n']",Default;Multi;should;Socket;True;port;should;connect;new;False,1.6298145055770874e-09;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-6.003348350524902, -5.6554155349731445, -4.596408843994141, -5.84735107421875, -5.351282119750977, -0.02397160790860653]",0.9763134121894836
2,"['\t@Test\n\tpublic void testSingleConnectionBehaviour() throws CoreException, InterruptedException {\n\t\tconnector = new SocketListenMultiConnector();\n\t\tMap<String, String> arguments = new HashMap<>();\n\t\targuments.put(""port"", Integer.toString(port));\n\t\targuments.put(""connectionLimit"", ""1"");\n\t\tconnector.connect(arguments, new NullProgressMonitor(), launch);\n\t\tThread.sleep(200);\n\n\t\tassertTrue(""first connect should succeed"", connect());\n\t\tassertFalse(""second connect should fail"", connect());\n\t}\n']",sleep;Behaviour;launch;Limit;arguments;Null;Exception;Connection;Multi;connector,1.862645149230957e-09;7.8580342233181e-10;7.275957614183426e-10;6.984919309616089e-10;6.693881005048752e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.004909992218018, -5.657912731170654, -4.59991455078125, -5.839330673217773, -5.344692230224609, -0.023978473618626595]",0.9763067364692688
2,"['\t@Test\n\tpublic void testTwoConnectionsBehaviour() throws CoreException, InterruptedException {\n\t\tconnector = new SocketListenMultiConnector();\n\t\tMap<String, String> arguments = new HashMap<>();\n\t\targuments.put(""port"", Integer.toString(port));\n\t\targuments.put(""connectionLimit"", ""2"");\n\t\tconnector.connect(arguments, new NullProgressMonitor(), launch);\n\t\tThread.sleep(200);\n\n\t\tassertTrue(""first connect should succeed"", connect());\n\t\tassertTrue(""second connect should succeed"", connect());\n\t}\n']",sleep;Connections;Two;Thread;connect;Multi;connector;arguments;True;connect,3.725290298461914e-09;1.8335413187742233e-09;1.3969838619232178e-09;1.1641532182693481e-09;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.9984235763549805, -5.65384578704834, -4.605847358703613, -5.837216377258301, -5.3406596183776855, -0.02397463284432888]",0.9763104915618896
2,"['\t@Test\n\tpublic void testUnlimitedConnectionsBehaviour() throws CoreException, InterruptedException {\n\t\tconnector = new SocketListenMultiConnector();\n\t\tMap<String, String> arguments = new HashMap<>();\n\t\targuments.put(""port"", Integer.toString(port));\n\t\targuments.put(""connectionLimit"", ""0"");\n\t\tconnector.connect(arguments, new NullProgressMonitor(), launch);\n\t\tThread.sleep(200);\n\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tassertTrue(""connection "" + i + "" should succeed"", connect());\n\t\t}\n\t}\n']",Connections;Progress;connector;Connector;sleep;Listen;launch;connector;to;Core,1.280568540096283e-09;8.149072527885437e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.00925350189209, -5.646216869354248, -4.608748435974121, -5.83779239654541, -5.3583879470825195, -0.02385719306766987]",0.9764251112937927
2,"['  @Test\n  public void testCloudSdkNotConfigured() {\n    Assert.assertEquals(""Deploy failed."", Messages.getString(""deploy.failed.error.message""));\n  }\n']",dk;Not;failed;Equals;Deploy;Cloud;Configured;message;Assert;get,3.725290298461914e-09;1.862645149230957e-09;1.3969838619232178e-09;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;-3.4924596548080444e-10;-5.820766091346741e-10,5,5,"[-6.008862018585205, -5.698120594024658, -4.593068599700928, -5.839565277099609, -5.311380863189697, -0.024063315242528915]",0.976223886013031
2,"['  @Test\n  public void testSpecifyVersionTooltip() {\n    Assert.assertEquals(\n        ""If checked, stops the previously running version when ""\n        + ""deploying a new version that receives all traffic."",\n        Messages.getString(""tooltip.stop.previous.version""));\n  }\n']",version;receives;Equals;checked;version;version;Assert;get;Messages;new,2.0954757928848267e-09;2.0954757928848267e-09;1.4551915228366852e-09;1.3969838619232178e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.973086357116699, -5.633727073669434, -4.615119457244873, -5.825717449188232, -5.338717937469482, -0.0240625012665987]",0.9762247204780579
2,"['  @Test\n  public void testAutoSelectSingleAccount() {\n    when(loginService.getAccounts()).thenReturn(oneAccountSet);\n    deployPanel = createPanel(true /* requireValues */);\n    assertThat(deployPanel.getSelectedCredential(), is(credential));\n\n    // verify not in error\n    IStatus status = getAccountSelectorValidationStatus();\n    assertTrue(""account selector is in error: "" + status.getMessage(), status.isOK());\n\n    assertThat(""auto-selected value should be propagated back to model"",\n        deployPanel.model.getAccountEmail(), is(account1.getEmail()));\n  }\n']",Single;Account;Email;That;Auto;Validation;Select;in;That;true,9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;7.421476766467094e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.969507694244385, -5.624258995056152, -4.632972240447998, -5.787349224090576, -5.36939001083374, -0.02389688603579998]",0.9763863682746887
2,"['  @Test\n  public void testAutoSelectSingleAccount_loadGcpProjects()\n      throws ProjectRepositoryException, InterruptedException {\n    when(loginService.getAccounts()).thenReturn(oneAccountSet);\n    initializeProjectRepository();\n    deployPanel = createPanel(true /* requireValues */);\n    assertNotNull(deployPanel.latestGcpProjectQueryJob);\n    deployPanel.latestGcpProjectQueryJob.join();\n\n    Table projectTable = getProjectSelector().getViewer().getTable();\n    assertThat(projectTable.getItemCount(), is(2));\n  }\n']",Account;latest;Query;Project;latest;Table;Panel;Item;Not;deploy,9.022187441587448e-10;8.731149137020111e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.998088836669922, -5.612112522125244, -4.605813503265381, -5.844050884246826, -5.399625778198242, -0.02382739447057247]",0.9764542579650879
2,"['  @Test\n  public void testValidationMessageWhenNotSignedIn() {\n    deployPanel = createPanel(true /* requireValues */);\n    IStatus status = getAccountSelectorValidationStatus();\n    assertThat(status.getMessage(), is(""Sign in to Google.""));\n  }\n']",Validation;When;Message;Panel;Sign;Selector;In;status;Account;status,2.444721758365631e-09;2.3283064365386963e-09;1.3969838619232178e-09;1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-6.029045104980469, -5.63900089263916, -4.571901798248291, -5.877175807952881, -5.399630546569824, -0.023906895890831947]",0.9763765931129456
2,"['  @Test\n  public void testValidationMessageWhenSignedIn() {\n    // Return two accounts because the account selector will auto-select if there exists only one.\n    when(loginService.getAccounts()).thenReturn(twoAccountSet);\n\n    deployPanel = createPanel(true /* requireValues */);\n    IStatus status = getAccountSelectorValidationStatus();\n    assertThat(status.getMessage(), is(""Select an account.""));\n  }\n']",login;require;true;That;Account;if;Validation;status;Service;igned,1.280568540096283e-09;9.313225746154785e-10;7.130438461899757e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-6.025548458099365, -5.614024639129639, -4.597134113311768, -5.870706558227539, -5.422165393829346, -0.023659411817789078]",0.9766182899475098
2,"['  @Test\n  public void testUncheckStopPreviousVersionButtonWhenDisabled() {\n    deployPanel = createPanel(true /* requireValues */);\n\n    Button promoteButton = getButtonWithText(""Promote the deployed version to receive all traffic"");\n    Button stopButton = getButtonWithText(""Stop previous version"");\n    SWTBotCheckBox promote = new SWTBotCheckBox(promoteButton);\n    SWTBotCheckBox stop = new SWTBotCheckBox(stopButton);\n\n    // Initially, everything is checked and enabled.\n    assertTrue(promoteButton.getSelection());\n    assertTrue(stopButton.getSelection());\n    assertTrue(stopButton.getEnabled());\n\n    promote.click();\n    assertFalse(promoteButton.getSelection());\n    assertFalse(stopButton.getSelection());\n    assertFalse(stopButton.getEnabled());\n\n    promote.click();\n    assertTrue(promoteButton.getSelection());\n    assertTrue(stopButton.getSelection());\n    assertTrue(stopButton.getEnabled());\n\n    stop.click();\n    assertTrue(promoteButton.getSelection());\n    assertFalse(stopButton.getSelection());\n    assertTrue(stopButton.getEnabled());\n\n    promote.click();\n    assertFalse(promoteButton.getSelection());\n    assertFalse(stopButton.getSelection());\n    assertFalse(stopButton.getEnabled());\n\n    promote.click();\n    assertTrue(promoteButton.getSelection());\n    assertFalse(stopButton.getSelection());\n    assertTrue(stopButton.getEnabled());\n  }\n']",Previous;traffic;previous;Promote;Stop;deploy;Initially;promote;click;promote,1.862645149230957e-09;1.3969838619232178e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.912405490875244, -5.498555660247803, -4.644764423370361, -5.779481410980225, -5.408395767211914, -0.024271372705698013]",0.9760206937789917
2,"['  @Test\n  public void testProjectSavedInPreferencesSelected()\n      throws ProjectRepositoryException, InterruptedException, BackingStoreException {\n    IEclipsePreferences node =\n        new ProjectScope(project).getNode(DeployPreferences.PREFERENCE_STORE_QUALIFIER);\n    try {\n      node.put(""project.id"", ""projectId1"");\n      node.put(""account.email"", EMAIL_1);\n      initializeProjectRepository();\n      when(loginService.getAccounts()).thenReturn(twoAccountSet);\n      deployPanel = createPanel(true /* requireValues */);\n      deployPanel.latestGcpProjectQueryJob.join();\n\n      ProjectSelector projectSelector = getProjectSelector();\n      IStructuredSelection selection = projectSelector.getViewer().getStructuredSelection();\n      assertThat(selection.size(), is(1));\n      assertThat(((GcpProject) selection.getFirstElement()).getId(), is(""projectId1""));\n    } finally {\n      node.clear();\n    }\n  }\n']",Interrupted;Selected;Preferences;join;PREFERENCE;That;IEclipse;email;when;Job,6.984919309616089e-10;6.984919309616089e-10;4.802132025361061e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.955860137939453, -5.549825191497803, -4.6495041847229, -5.799280166625977, -5.401087284088135, -0.023869067430496216]",0.9764135479927063
2,"['  @Test\n  public void testProjectNotSelectedIsAnErrorWhenRequireValuesIsTrue() {\n    deployPanel = createPanel(true /* requireValues */);\n    assertThat(getProjectSelectionValidator().getSeverity(), is(IStatus.ERROR));\n  }\n']",Status;Panel;True;get;ERROR;Error;Values;Project;When;Require,4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;0.0,5,5,"[-6.008702754974365, -5.691812038421631, -4.5947370529174805, -5.837924003601074, -5.3371710777282715, -0.023944372311234474]",0.9763399958610535
2,"['  @Test\n  public void testProjectNotSelectedIsNotAnErrorWhenRequireValuesIsFalse() {\n    deployPanel = createPanel(false /* requireValues */);\n    assertThat(getProjectSelectionValidator().getSeverity(), is(IStatus.INFO));\n  }\n']",That;deploy;Panel;Not;Values;Validator;Error;Not;false;Panel,1.6880221664905548e-09;1.3969838619232178e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.149072527885437e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.999741077423096, -5.684449672698975, -4.595192909240723, -5.843196392059326, -5.3356499671936035, -0.023979755118489265]",0.9763056039810181
2,"['  @Test\n  public void testProjectsExistThenNoProjectNotFoundError()\n      throws ProjectRepositoryException, InterruptedException {\n    when(loginService.getAccounts()).thenReturn(oneAccountSet);\n    initializeProjectRepository();\n    deployPanel = createPanel(false /* requireValues */);\n    selectAccount(account1);\n    deployPanel.latestGcpProjectQueryJob.join();\n    assertThat(getProjectSelectionValidator().getSeverity(), is(IStatus.OK));\n  }\n']",Interrupted;Then;login;Project;Exception;Account;get;Service;select;Error,2.2118911147117615e-09;1.6298145055770874e-09;8.149072527885437e-10;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-6.010037899017334, -5.596563339233398, -4.581354141235352, -5.875596523284912, -5.40262508392334, -0.02400326356291771]",0.97628253698349
2,"['  @Test\n  public void testRefreshProjectsForSelectedCredential()\n      throws ProjectRepositoryException, InterruptedException {\n    when(loginService.getAccounts()).thenReturn(twoAccountSet);\n    initializeProjectRepository();\n\n    deployPanel = createPanel(false /* requireValues */);\n    Table projectTable = getProjectSelector().getViewer().getTable();\n    assertNull(deployPanel.latestGcpProjectQueryJob);\n    assertThat(projectTable.getItemCount(), is(0));\n\n    selectAccount(account1);\n    assertNotNull(deployPanel.latestGcpProjectQueryJob);\n    deployPanel.latestGcpProjectQueryJob.join();\n    assertThat(projectTable.getItemCount(), is(2));\n    assertThat(((GcpProject) projectTable.getItem(0).getData()).getId(), is(""projectId1""));\n    assertThat(((GcpProject) projectTable.getItem(1).getData()).getId(), is(""projectId2""));\n  }\n']",redential;Selected;Table;get;deploy;project;two;Service;require;Job,1.1059455573558807e-09;7.566995918750763e-10;5.093170329928398e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.96051025390625, -5.61020565032959, -4.6522650718688965, -5.779925346374512, -5.368777751922607, -0.023808887228369713]",0.9764723181724548
2,"['  @Test\n  public void testRefreshProjectsForSelectedCredential_switchAccounts()\n      throws ProjectRepositoryException, InterruptedException {\n    when(loginService.getAccounts()).thenReturn(twoAccountSet);\n    initializeProjectRepository();\n\n    deployPanel = createPanel(false /* requireValues */);\n    Table projectTable = getProjectSelector().getViewer().getTable();\n    assertNull(deployPanel.latestGcpProjectQueryJob);\n    assertThat(projectTable.getItemCount(), is(0));\n\n    selectAccount(account1);\n    Job jobForAccount1 = deployPanel.latestGcpProjectQueryJob;\n    jobForAccount1.join();\n    assertThat(projectTable.getItemCount(), is(2));\n\n    selectAccount(account2);\n    assertNotEquals(jobForAccount1, deployPanel.latestGcpProjectQueryJob);\n    deployPanel.latestGcpProjectQueryJob.join();\n    assertThat(projectTable.getItemCount(), is(1));\n    assertThat(((GcpProject) projectTable.getItem(0).getData()).getId(), is(""projectId2""));\n  }\n']",latest;login;Refresh;latest;job;when;join;Project;latest;job,6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.95223331451416, -5.593260288238525, -4.656118869781494, -5.77315616607666, -5.372483730316162, -0.023861151188611984]",0.9764212965965271
2,"['  @Test\n  public void testNoProjectSelectedWhenSwitchingAccounts()\n      throws ProjectRepositoryException, InterruptedException {\n    when(loginService.getAccounts()).thenReturn(twoAccountSet);\n    initializeProjectRepository();\n\n    deployPanel = createPanel(false /* requireValues */);\n    selectAccount(account1);\n    deployPanel.latestGcpProjectQueryJob.join();\n\n    Table projectTable = getProjectSelector().getViewer().getTable();\n    assertThat(projectTable.getItemCount(), is(2));\n    projectTable.setSelection(0);\n    assertThat(projectTable.getSelectionCount(), is(1));\n\n    selectAccount(account2);\n    deployPanel.latestGcpProjectQueryJob.join();\n\n    assertThat(projectTable.getItemCount(), is(1));\n    assertThat(projectTable.getSelectionCount(), is(0));\n  }\n']",account;Job;That;That;when;select;Account;select;Table;Selector,6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.944992542266846, -5.630297660827637, -4.658368110656738, -5.753562927246094, -5.331679344177246, -0.023981034755706787]",0.9763042330741882
2,"['  @Test\n  public void testLimitedVisibility() {\n    NodeList pages = getDocument().getElementsByTagName(""page"");\n    Assert.assertEquals(2, pages.getLength());\n    NodeList enabledWhen = getDocument().getElementsByTagName(""enabledWhen"");\n    Assert.assertEquals(4, enabledWhen.getLength());\n    NodeList tests = getDocument().getElementsByTagName(""test"");\n    Assert.assertEquals(4, tests.getLength());\n    NodeList adapts = getDocument().getElementsByTagName(""adapt"");\n    Assert.assertEquals(4, adapts.getLength());\n\n    for (int i = 0; i < enabledWhen.getLength(); i++) {\n      Element element = (Element) enabledWhen.item(i);\n      Node parent = element.getParentNode();\n      assertThat(parent.getNodeName(), either(is(""page"")).or(is(""handler"")));\n    }\n\n    Element standardAdapt = (Element) adapts.item(0);\n    verifyAdapt(standardAdapt, AppEngineStandardFacet.ID);\n    Element flexAdapt = (Element) adapts.item(1);\n    verifyAdapt(flexAdapt, AppEngineFlexFacet.ID);\n  }\n']",adapt;Node;Tag;adapt;lex;When;Node;List;Document;Document,6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.919824600219727, -5.5937275886535645, -4.6633195877075195, -5.717465877532959, -5.358119487762451, -0.02412848360836506]",0.9761602878570557
2,"['  @Test(expected = NullPointerException.class)\n  public void testNullCredential() {\n    new GcpProjectQueryJob(null /* credential */, projectRepository, projectSelector,\n        dataBindingContext, isLatestQueryJob);\n  }\n']",Pointer;expected;Selector;Latest;Exception;null;Query;Job;new;cp,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;6.111804395914078e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.005960464477539, -5.63169002532959, -4.580753326416016, -5.866025924682617, -5.376564979553223, -0.024038061499595642]",0.976248562335968
2,"['  @Test\n  public void testRun_setsProjects() throws InterruptedException, ProjectRepositoryException {\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(projectRepository).getProjects(credential);\n    verify(isLatestQueryJob).apply(queryJob);\n    verify(projectSelector).isDisposed();\n    verify(projectSelector).setProjects(projects);\n  }\n']",projects;apply;Run;Project;verify;Selector;Job;join;sets;set,3.259629011154175e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.0186340659856796e-09;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;6.111804395914078e-10,5,5,"[-6.004210948944092, -5.6697468757629395, -4.5951151847839355, -5.845305919647217, -5.338882923126221, -0.02399860881268978]",0.9762871861457825
2,"['  @Test\n  public void testRun_abandonIfDisposed() throws InterruptedException, ProjectRepositoryException {\n    when(projectSelector.isDisposed()).thenReturn(true);\n\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(projectRepository).getProjects(credential);\n    verify(projectSelector, never()).setProjects(projects);\n  }\n']",Interrupted;Return;Exception;Exception;never;projects;Job;Repository;project;join,2.2118911147117615e-09;1.0477378964424133e-09;8.731149137020111e-10;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.984325885772705, -5.641843318939209, -4.622392177581787, -5.813912868499756, -5.338328838348389, -0.02396811544895172]",0.9763168096542358
2,"['  @Test\n  public void testRun_abandonIfNotLatestJob()\n      throws InterruptedException, ProjectRepositoryException {\n    when(isLatestQueryJob.apply(queryJob)).thenReturn(false);\n\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(projectRepository).getProjects(credential);\n    verify(projectSelector, never()).setProjects(projects);\n  }\n']",schedule;Repository;Interrupted;Latest;Job;Project;project;Job;Not;project,1.5133991837501526e-09;7.8580342233181e-10;6.693881005048752e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-6.0123419761657715, -5.644761085510254, -4.594010353088379, -5.846921920776367, -5.367111682891846, -0.023937156423926353]",0.9763470888137817
2,"['  @Test\n  public void testRun_abandonStaleJob() throws InterruptedException, ProjectRepositoryException {\n    // Prepare another concurrent query job.\n    Credential staleCredential = mock(Credential.class);\n\n    List<GcpProject> anotherProjectList = mock(List.class);\n    ProjectRepository projectRepository2 = mock(ProjectRepository.class);\n    when(projectRepository2.getProjects(staleCredential)).thenReturn(anotherProjectList);\n\n    Predicate<Job> notLatest = mock(Predicate.class);\n    Job staleJob = new GcpProjectQueryJob(staleCredential, projectRepository2,\n        projectSelector, dataBindingContext, notLatest);\n\n    // This second job is stale, i.e., it was fired, but user has selected another credential.\n    when(notLatest.apply(staleJob)).thenReturn(false);\n\n    queryJob.schedule();\n    queryJob.join();\n    // Make the stale job complete even after ""queryJob"" finishes.\n    staleJob.schedule();\n    staleJob.join();\n\n    verify(projectRepository).getProjects(credential);\n    verify(projectRepository2).getProjects(staleCredential);\n\n    verify(projectSelector).setProjects(projects);\n    verify(projectSelector, never()).setProjects(anotherProjectList);\n  }\n']",abandon;concurrent;Interrupted;schedule;complete;was;selected;Repository;Latest;mock,3.725290298461914e-09;9.313225746154785e-10;7.566995918750763e-10;7.130438461899757e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.994227886199951, -5.509329319000244, -4.630229949951172, -5.837234020233154, -5.469341278076172, -0.02370411716401577]",0.9765745997428894
2,['  @Test\n  public void testGetHelpContextId() {\n    assertNull(new BlankDeployPreferencesPanel(shellTestResource.getShell()).getHelpContextId());\n  }\n'],Preferences;Deploy;Help;Null;Resource;get;Context;Get;Context;Shell,1.862645149230957e-09;1.3969838619232178e-09;1.2223608791828156e-09;1.1641532182693481e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;0.0;-1.1641532182693481e-10;-1.7462298274040222e-10,5,5,"[-5.99372673034668, -5.685282230377197, -4.599380970001221, -5.844841480255127, -5.309811592102051, -0.02407309040427208]",0.9762143492698669
2,"['  @Test\n  public void testCorrectPanelIsShownForFacetedProject() {\n    DeployPropertyPage page = new DeployPropertyPage(loginService, googleApiFactory);\n    Shell parent = shellTestResource.getShell();\n    page.setElement(getProject());\n    page.createControl(parent);\n    page.setVisible(true);\n    Composite preferencePageComposite = (Composite) parent.getChildren()[0];\n    for (Control control : preferencePageComposite.getChildren()) {\n      if (control instanceof Composite) {\n        Composite maybeDeployPageComposite = (Composite) control;\n        Layout layout = maybeDeployPageComposite.getLayout();\n        if (layout instanceof StackLayout) {\n          StackLayout stackLayout = (StackLayout) layout;\n          assertThat(stackLayout.topControl, instanceOf(getPanelClass()));\n          return;\n        }\n      }\n    }\n    fail(""Did not find the deploy preferences panel"");\n  }\n']",Composite;Shell;For;Service;Resource;Factory;Deploy;login;Control;Panel,8.440110832452774e-10;6.402842700481415e-10;6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.94534158706665, -5.577595233917236, -4.640032768249512, -5.768674850463867, -5.362171173095703, -0.02416129782795906]",0.976128339767456
2,"['  @Test\n  public void testGetHelpContextId() {\n    IProject project = mock(IProject.class);\n    when(project.getName()).thenReturn("""");\n    StandardDeployPreferencesPanel panel = new StandardDeployPreferencesPanel(\n        shellResource.getShell(), project, mock(IGoogleLoginService.class), mock(Runnable.class),\n        false, mock(ProjectRepository.class));\n\n    assertEquals(\n        ""com.google.cloud.tools.eclipse.appengine.deploy.ui.DeployAppEngineStandardProjectContext"",\n        panel.getHelpContextId());\n  }\n']",appengine;mock;Return;Project;shell;class;cloud;Project;ui;class,8.731149137020111e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.969169616699219, -5.578083038330078, -4.633573055267334, -5.803591251373291, -5.3839545249938965, -0.023946933448314667]",0.9763374924659729
2,"['  @Test\n  public void testGetHelpContextId() {\n    FlexDeployPreferencesPanel panel = createPanel(true /* requireValues */);\n\n    assertEquals(\n        ""com.google.cloud.tools.eclipse.appengine.deploy.ui.DeployAppEngineFlexProjectContext"",\n        panel.getHelpContextId());\n  }\n']",Values;deploy;lex;Deploy;panel;Flex;appengine;Help;Project;Panel,1.1059455573558807e-09;1.076841726899147e-09;1.0186340659856796e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;3.4924596548080444e-10,5,5,"[-5.9854817390441895, -5.563503265380859, -4.6074371337890625, -5.8490190505981445, -5.410311698913574, -0.023965556174516678]",0.9763193130493164
2,"['  @Test\n  public void testDefaultAppYamlPathSet() {\n    FlexDeployPreferencesPanel panel = createPanel(true /* requireValues */);\n\n    Text appYamlField = findAppYamlField(panel);\n    assertEquals(""src/main/appengine/app.yaml"", appYamlField.getText());\n    assertTrue(getAppYamlPathValidationStatus(panel).isOK());\n  }\n']",Default;Values;OK;Preferences;App;Panel;Field;Flex;Status;aml,1.5133991837501526e-09;1.3969838619232178e-09;1.3387762010097504e-09;9.604264050722122e-10;9.022187441587448e-10;8.731149137020111e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10,5,5,"[-5.966022968292236, -5.6511735916137695, -4.64212703704834, -5.780503273010254, -5.330482006072998, -0.023927845060825348]",0.9763561487197876
2,"['  @Test\n  public void testAppYamlPathValidation_nonExistingAppYaml() {\n    FlexDeployPreferencesPanel panel = createPanel(true /* requireValues */);\n\n    Text appYamlField = findAppYamlField(panel);\n    appYamlField.setText(""non/existing/app.yaml"");\n    assertFalse(getAppYamlPathValidationStatus(panel).isOK());\n  }\n']",non;Panel;Validation;Preferences;App;Text;Deploy;Field;aml;create,3.259629011154175e-09;1.280568540096283e-09;1.0477378964424133e-09;9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;4.94765117764473e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.987508773803711, -5.619476318359375, -4.612778186798096, -5.8373799324035645, -5.378425598144531, -0.023875003680586815]",0.9764077663421631
2,"['  @Test\n  public void testAppYamlPathValidation_noValidationIfRequireValuesIsFalse() {\n    FlexDeployPreferencesPanel panel = createPanel(false /* requireValues */);\n\n    Text appYamlField = findAppYamlField(panel);\n    appYamlField.setText(""non/existing/app.yaml"");\n    assertNull(getAppYamlPathValidationStatus(panel));\n  }\n']",aml;Text;Null;app;Require;find;Validation;Values;Validation;Status,1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;6.83940015733242e-10;6.548361852765083e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.976188659667969, -5.603896617889404, -4.619494915008545, -5.823018550872803, -5.371178150177002, -0.023972073569893837]",0.9763129949569702
2,"['  @Test\n  public void testAppYamlPathValidation_absolutePathWorks() {\n    FlexDeployPreferencesPanel panel = createPanel(true /* requireValues */);\n    Text appYamlField = findAppYamlField(panel);\n\n    IPath absolutePath = project.getLocation().append(""src/main/appengine/app.yaml"");\n    assertTrue(absolutePath.isAbsolute());\n\n    appYamlField.setText(absolutePath.toString());\n    assertTrue(getAppYamlPathValidationStatus(panel).isOK());\n  }\n']",panel;set;Deploy;Absolute;Validation;aml;Location;Field;aml;main,1.0477378964424133e-09;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.9676337242126465, -5.630364894866943, -4.641643524169922, -5.7849531173706055, -5.355456829071045, -0.023867785930633545]",0.9764147996902466
2,['  @Test\n  public void testFlexPricingLabel() {\n    dialog.setBlockOnOpen(false);\n    dialog.open();\n    Composite dialogArea = (Composite) dialog.createDialogArea(shellResource.getShell());\n\n    assertNotNull(findGcpPricingLink(dialogArea));\n  }\n'],lex;find;ricing;Null;ricing;dialog;false;shell;Area;Dialog,1.862645149230957e-09;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-6.007198810577393, -5.638571262359619, -4.593060493469238, -5.85149621963501, -5.382201671600342, -0.02389734983444214]",0.9763859510421753
2,"['  @Test\n  public void testContructor_nonAbsoluteBasePath() {\n    try {\n      when(appYamlPath.getValue()).thenReturn(""app.yaml"");\n      new AppYamlValidator(new Path(""non/absolute/base/path""), appYamlPath);\n      fail();\n    } catch (IllegalArgumentException ex) {\n      assertEquals(""basePath is not absolute."", ex.getMessage());\n    }\n  }\n']",Contructor;aml;Argument;Equals;when;app;ex;base;app;Path,2.270098775625229e-09;5.238689482212067e-10;5.093170329928398e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.055902197957039e-10;2.9103830456733704e-10,5,5,"[-5.983900547027588, -5.63654899597168, -4.612894058227539, -5.816327095031738, -5.3418426513671875, -0.024059824645519257]",0.9762271642684937
2,"['  @Test\n  public void testValidate_relativePathAndNoAppYaml() {\n    when(appYamlPath.getValue()).thenReturn(""relative/path/app.yaml"");\n\n    IStatus result = pathValidator.validate();\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""app.yaml does not exist."", result.getMessage());\n  }\n']",aml;path;relative;Validate;app;result;Equals;get;aml;does,9.89530235528946e-10;7.8580342233181e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.959664821624756, -5.649790287017822, -4.646510601043701, -5.764571189880371, -5.328129768371582, -0.023968813940882683]",0.9763160347938538
2,"['  @Test\n  public void testValidate_absolutePathAndNoAppYaml() {\n    String absolutePath = basePath + ""/sub/directory/app.yaml"";\n    when(appYamlPath.getValue()).thenReturn(absolutePath);\n\n    IStatus result = pathValidator.validate();\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""app.yaml does not exist."", result.getMessage());\n  }\n']",App;Validate;directory;No;Path;exist;Path;Status;app;everity,1.280568540096283e-09;1.1641532182693481e-09;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.969589710235596, -5.643040657043457, -4.636732578277588, -5.776090145111084, -5.339117050170898, -0.023972654715180397]",0.9763123989105225
2,"['  @Test\n  public void testValidate_relativePathAndInvalidFileName() {\n    when(appYamlPath.getValue()).thenReturn(""relative/path/my-app.yaml"");\n\n    IStatus result = pathValidator.validate();\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""File name is not app.yaml: ""\n        + new Path(basePath + ""/relative/path/my-app.yaml"").toOSString(),\n        result.getMessage());\n  }\n']",aml;relative;app;Name;Status;my;Path;app;OS;Validator,6.984919309616089e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.950859069824219, -5.615209579467773, -4.653072834014893, -5.7571210861206055, -5.345089912414551, -0.023995233699679375]",0.9762903451919556
2,"['  @Test\n  public void testValidate_absolutePathInvalidFileName() {\n    String absolutePath = basePath + ""/sub/directory/my-app.yaml"";\n    when(appYamlPath.getValue()).thenReturn(absolutePath);\n\n    IStatus result = pathValidator.validate();\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""File name is not app.yaml: ""\n        + new Path(basePath + ""/sub/directory/my-app.yaml"").toOSString(),\n        result.getMessage());\n  }\n']",aml;everity;Path;absolute;Path;aml;Return;Path;path;app,1.0550138540565968e-09;5.529727786779404e-10;4.94765117764473e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.956905841827393, -5.614181041717529, -4.648482322692871, -5.763667106628418, -5.349468231201172, -0.02398545667529106]",0.9762998819351196
2,"['  @Test\n  public void testValidate_relativePathNotFile() {\n    createAppYamlAsDirectory(basePath);\n    when(appYamlPath.getValue()).thenReturn(""app.yaml"");\n\n    IStatus result = pathValidator.validate();\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""Not a file: "" + new Path(basePath + ""/app.yaml"").toOSString(),\n        result.getMessage());\n  }\n']",OS;Validate;Path;Directory;to;path;base;new;relative;aml,1.2223608791828156e-09;6.111804395914078e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.961819171905518, -5.639107704162598, -4.641223430633545, -5.769392490386963, -5.337914943695068, -0.02399022877216339]",0.9762953519821167
2,"['  @Test\n  public void testValidate_absolutePathNotFile() {\n    createAppYamlAsDirectory(basePath);\n\n    String absolutePath = basePath + ""/app.yaml"";\n    when(appYamlPath.getValue()).thenReturn(absolutePath);\n\n    IStatus result = pathValidator.validate();\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""Not a file: "" + new Path(basePath + ""/app.yaml"").toOSString(),\n        result.getMessage());\n  }\n']",aml;app;Not;aml;Validator;OS;everity;Path;file;Path,6.984919309616089e-10;6.984919309616089e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.055902197957039e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.939642906188965, -5.623661518096924, -4.654247760772705, -5.739293575286865, -5.325545310974121, -0.024137210100889206]",0.9761518836021423
2,"['  @Test\n  public void testValidate_relativePathWithAppYaml() throws IOException {\n    createAppYamlFile(basePath + ""/some/directory"", ""runtime: java"");\n\n    when(appYamlPath.getValue()).thenReturn(""some/directory/app.yaml"");\n    IStatus result = pathValidator.validate();\n    assertTrue(result.isOK());\n  }\n']",aml;directory;Validator;aml;True;App;OK;Status;path;Return,7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.968703269958496, -5.6577653884887695, -4.634504318237305, -5.783176422119141, -5.312198162078857, -0.02405586652457714]",0.9762311577796936
2,"['  @Test\n  public void testValidate_absolutePathWithAppYaml() throws IOException {\n    File absolutePath = tempFolder.newFolder(""another"", ""folder"");\n    File appYaml = createAppYamlFile(absolutePath.toString(), ""runtime: java"");\n\n    when(appYamlPath.getValue()).thenReturn(appYaml.toString());\n    IStatus result = pathValidator.validate();\n    assertTrue(result.isOK());\n  }\n']",Path;app;result;new;validate;File;Folder;aml;java;aml,6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.99016809463501, -5.656445503234863, -4.621236324310303, -5.788660526275635, -5.351297855377197, -0.02392679825425148]",0.9763571619987488
2,"['  @Test\n  public void testValidateRuntime_javaRuntime() throws IOException {\n    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""runtime: java"");\n    IStatus result = AppYamlValidator.validateRuntime(appYaml);\n    assertTrue(result.isOK());\n  }\n']",temp;Validate;Runtime;aml;aml;java;Runtime;App;to;java,1.6880221664905548e-09;1.3969838619232178e-09;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.994792938232422, -5.697885513305664, -4.606849670410156, -5.806861877441406, -5.3122477531433105, -0.024052491411566734]",0.9762343764305115
2,"['  @Test\n  public void testValidateRuntime_malformedAppYaml() throws IOException {\n    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), "": m a l f o r m e d !"");\n    IStatus result = AppYamlValidator.validateRuntime(appYaml);\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""Malformed app.yaml."", result.getMessage());\n  }\n']",Folder;Runtime;File;result;Validator;aml;aml;aml;Equals;Equals,8.731149137020111e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.940169811248779, -5.666347503662109, -4.660589694976807, -5.74384069442749, -5.293123245239258, -0.024068783968687057]",0.976218581199646
2,"['  @Test\n  public void testValidateRuntime_noRuntime() throws IOException {\n    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""env: flex"");\n    IStatus result = AppYamlValidator.validateRuntime(appYaml);\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""\\""runtime: null\\"" in app.yaml is not \\""java\\""."", result.getMessage());\n  }\n']",Validate;java;validate;Root;env;Runtime;Runtime;app;IOException;Message,1.6298145055770874e-09;1.1641532182693481e-09;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;2.6193447411060333e-10,5,5,"[-5.975712299346924, -5.670897960662842, -4.634007453918457, -5.765013217926025, -5.3335280418396, -0.02394704893231392]",0.9763374328613281
2,"['  @Test\n  public void testValidateRuntime_nullRuntime() throws IOException {\n    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""runtime:"");\n    IStatus result = AppYamlValidator.validateRuntime(appYaml);\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""\\""runtime: null\\"" in app.yaml is not \\""java\\""."", result.getMessage());\n  }\n']",Validator;temp;IOException;validate;result;result;null;in;app;Runtime,1.3387762010097504e-09;9.313225746154785e-10;6.693881005048752e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10,5,5,"[-5.976196765899658, -5.687351703643799, -4.63525390625, -5.759787082672119, -5.324460983276367, -0.023937739431858063]",0.9763466119766235
2,"['  @Test\n  public void testValidateRuntime_notJavaRuntime() throws IOException {\n    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""runtime: python"");\n    IStatus result = AppYamlValidator.validateRuntime(appYaml);\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""\\""runtime: python\\"" in app.yaml is not \\""java\\""."", result.getMessage());\n  }\n']",python;Runtime;Validator;File;result;runtime;app;Message;create;Folder,1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.968984603881836, -5.685124397277832, -4.642186164855957, -5.751882553100586, -5.318346977233887, -0.023951705545186996]",0.9763328433036804
2,"['  @Test\n  public void testValidateRuntime_customRuntime() throws IOException {\n    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""runtime: custom"");\n    IStatus result = AppYamlValidator.validateRuntime(appYaml);\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertEquals(""\\""runtime: custom\\"" is not yet supported by Cloud Tools for Eclipse."",\n        result.getMessage());\n  }\n']",Eclipse;Validate;Validator;by;App;Equals;runtime;create;result;IOException,1.7462298274040222e-09;9.313225746154785e-10;6.83940015733242e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10;3.7834979593753815e-10,5,5,"[-5.973709583282471, -5.672582626342773, -4.640133857727051, -5.77266788482666, -5.3192138671875, -0.023932384327054024]",0.9763518571853638
2,"['  @Test\n  public void testValidateRuntime_ioException() {\n    File nonExisting = new File(""/non/existing/file"");\n    IStatus result = AppYamlValidator.validateRuntime(nonExisting);\n    assertEquals(IStatus.ERROR, result.getSeverity());\n    assertTrue(result.getMessage().startsWith(""Cannot read app.yaml:""));\n  }\n']",Runtime;aml;Exception;app;aml;io;non;get;validate;Runtime,1.3533281162381172e-09;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.98038911819458, -5.6657633781433105, -4.624814033508301, -5.801822185516357, -5.343397617340088, -0.023880356922745705]",0.9764025211334229
2,"['  @Test\n  public void testRun_projectHasNoApplication()\n      throws ProjectRepositoryException, InterruptedException {\n    when(projectRepository.getAppEngineApplication(credential, ""projectId""))\n        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);\n    assertNull(project.getAppEngine());\n\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(projectRepository).getAppEngineApplication(credential, ""projectId"");\n    verify(isLatestQueryJob).apply(queryJob);\n    verify(projectSelector).isDisposed();\n    verify(projectSelection).isEmpty();\n    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);\n\n    assertEquals(AppEngine.NO_APPENGINE_APPLICATION, project.getAppEngine());\n  }\n']",apply;Job;NO;Status;Application;Application;Return;Engine;redential;verify,8.440110832452774e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;4.3655745685100555e-10;3.4924596548080444e-10,5,5,"[-5.9252142906188965, -5.599521160125732, -4.671051502227783, -5.7588701248168945, -5.316288948059082, -0.024086588993668556]",0.976201057434082
2,"['  @Test\n  public void testRun_projectHasApplication()\n      throws ProjectRepositoryException, InterruptedException {\n    AppEngine appEngine = AppEngine.withId(""unique-id"");\n    when(projectRepository.getAppEngineApplication(credential, ""projectId"")).thenReturn(appEngine);\n\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(isLatestQueryJob, never()).apply(queryJob);\n    verify(projectSelector, never()).isDisposed();\n    verify(projectSelector, never()).setStatusLink(anyString(), anyString());\n\n    assertTrue(appEngine == project.getAppEngine());\n  }\n']",when;App;Engine;Interrupted;never;Status;Engine;Engine;Engine;schedule,1.8044374883174896e-09;8.149072527885437e-10;5.820766091346741e-10;4.656612873077393e-10;4.511093720793724e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.95522928237915, -5.6297831535339355, -4.640882968902588, -5.7702131271362305, -5.321789741516113, -0.02412254922091961]",0.9761660695075989
2,"['  @Test\n  public void testRun_queryError() throws ProjectRepositoryException, InterruptedException {\n    when(projectRepository.getAppEngineApplication(credential, ""projectId""))\n        .thenThrow(new ProjectRepositoryException(""testException""));\n\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(isLatestQueryJob).apply(queryJob);\n    verify(projectSelector).isDisposed();\n    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_EXCEPTION, null);\n\n    assertNull(project.getAppEngine());\n  }\n']",EXPECTED;Interrupted;Project;WHEN;Query;project;apply;schedule;Disposed;Error,1.9208528101444244e-09;1.4551915228366852e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.9308648109436035, -5.634255886077881, -4.669147968292236, -5.751247406005859, -5.297743797302246, -0.02407914213836193]",0.9762085676193237
2,"['  @Test\n  public void testRun_abandonIfDisposed() throws InterruptedException, ProjectRepositoryException {\n    when(projectSelector.isDisposed()).thenReturn(true);\n    when(projectRepository.getAppEngineApplication(credential, ""projectId""))\n        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);\n\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(projectSelector).isDisposed();\n    verify(projectSelector, never()).setStatusLink(anyString(), anyString());\n  }\n']",Engine;join;App;Job;Project;project;project;project;App;Exception,1.862645149230957e-09;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.982645034790039, -5.621808052062988, -4.631955146789551, -5.814086437225342, -5.3556742668151855, -0.0238649919629097]",0.9764175415039062
2,"['  @Test\n  public void testRun_abandonIfNotLatestJob()\n      throws InterruptedException, ProjectRepositoryException {\n    when(isLatestQueryJob.apply(queryJob)).thenReturn(false);\n    when(projectRepository.getAppEngineApplication(credential, ""projectId""))\n        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);\n\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(isLatestQueryJob).apply(queryJob);\n    verify(projectSelector, never()).setStatusLink(anyString(), anyString());\n  }\n']",Interrupted;when;get;Run;APPLICATION;Query;when;Job;Selector;any,7.8580342233181e-10;6.984919309616089e-10;5.966285243630409e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.983702182769775, -5.627044677734375, -4.6306867599487305, -5.810172080993652, -5.353104591369629, -0.0238800086081028]",0.9764028787612915
2,"['  @Test\n  public void testRun_abandonIfProjectSelectorHasNoSelection()\n      throws ProjectRepositoryException, InterruptedException {\n    when(projectRepository.getAppEngineApplication(credential, ""projectId""))\n        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);\n    when(projectSelection.isEmpty()).thenReturn(true);\n\n    queryJob.schedule();\n    queryJob.join();\n\n    verify(isLatestQueryJob).apply(queryJob);\n    verify(projectSelector, never()).setStatusLink(anyString(), anyString());\n  }\n']",Repository;Status;Selector;query;APPENGINE;query;any;Selector;Selection;APPLICATION,8.440110832452774e-10;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.9824066162109375, -5.614858150482178, -4.626246929168701, -5.821680545806885, -5.358504295349121, -0.02391178347170353]",0.9763719439506531
2,"['  @Test\n  public void testRun_abandonStaleJob() throws InterruptedException, ProjectRepositoryException {\n    when(projectRepository.getAppEngineApplication(credential, ""projectId""))\n        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);\n\n    // Prepare another concurrent query job.\n    Credential staleCredential = mock(Credential.class);\n\n    GcpProject staleProject = new GcpProject(""name"", ""staleProjectId"");\n    ProjectRepository projectRepository2 = mock(ProjectRepository.class);\n    when(projectRepository2.getAppEngineApplication(staleCredential, ""staleProjectId""))\n        .thenThrow(new ProjectRepositoryException(""testException""));\n\n    Predicate<Job> notLatest = mock(Predicate.class);\n    Job staleJob = new AppEngineApplicationQueryJob(staleProject, staleCredential,\n        projectRepository2, projectSelector, EXPECTED_LINK, notLatest);\n\n    // This second job is stale, i.e., it was fired, but user has selected another credential.\n    when(notLatest.apply(staleJob)).thenReturn(false);\n\n    queryJob.schedule();\n    queryJob.join();\n    // Make the stale job complete even after ""queryJob"" finishes.\n    staleJob.schedule();\n    staleJob.join();\n\n    verify(projectRepository).getAppEngineApplication(credential, ""projectId"");\n    verify(projectRepository2).getAppEngineApplication(staleCredential, ""staleProjectId"");\n\n    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);\n    verify(projectSelector, never()).setStatusLink(EXPECTED_MESSAGE_WHEN_EXCEPTION, null);\n  }\n']",Stale;schedule;Application;schedule;Query;Repository;job;EXPECTED;Predicate;stale,7.566995918750763e-10;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10,5,5,"[-5.909963130950928, -5.486661911010742, -4.692478656768799, -5.747708320617676, -5.397883892059326, -0.024020256474614143]",0.9762659072875977
2,"['  @Test\n  public void testConstructor_nonAbsoluteBasePath() {\n    try {\n      new RelativeFileFieldSetter(field, new Path(""non/absolute/base/path""), dialog);\n      fail();\n    } catch (IllegalArgumentException ex) {}\n  }\n']",new;Exception;Argument;base;Path;catch;non;Path;Setter;Field,9.313225746154785e-10;8.731149137020111e-10;5.820766091346741e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;-2.9103830456733704e-11;-4.3655745685100555e-11,5,5,"[-6.002060890197754, -5.621709823608398, -4.587403774261475, -5.867012977600098, -5.36746883392334, -0.024055633693933487]",0.9762313961982727
2,"['  @Test\n  public void testFileDialogCanceled() {\n    when(field.getText()).thenReturn("""");\n    when(dialog.open()).thenReturn(null /* means canceled */);\n\n    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);\n    verify(field, never()).setText(anyString());\n  }\n']",anceled;field;get;Relative;Dialog;File;new;set;event;dialog,1.4551915228366852e-09;1.0477378964424133e-09;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.980152130126953, -5.649933338165283, -4.619804859161377, -5.807307720184326, -5.3498029708862305, -0.0239398330450058]",0.9763444662094116
2,"['  @Test\n  public void testSetField() {\n    when(field.getText()).thenReturn("""");\n    when(dialog.open()).thenReturn(basePath + ""/sub/directory/app.yaml"");\n\n    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);\n    verify(field).setText(""sub/directory/app.yaml"");\n  }\n']",widget;Selected;get;Text;new;base;aml;Setter;dialog;Return,1.862645149230957e-09;9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.958770275115967, -5.651057243347168, -4.642495155334473, -5.772732257843018, -5.318329334259033, -0.024029100313782692]",0.97625732421875
2,"['  @Test\n  public void testSetField_userSuppliesPathOutsideBase() {\n    when(field.getText()).thenReturn("""");\n    when(dialog.open()).thenReturn(""/path/outside/base/app.yaml"");\n\n    new RelativeFileFieldSetter(field, new Path(""/base/path""), dialog).widgetSelected(event);\n    verify(field).setText(""../../path/outside/base/app.yaml"");\n  }\n']",Field;user;when;Set;get;Return;Text;aml;event;app,4.6566128730773926e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;8.149072527885437e-10;8.149072527885437e-10,5,5,"[-5.942686557769775, -5.625679969787598, -4.668395519256592, -5.746086120605469, -5.309696674346924, -0.024041784927248955]",0.9762449264526367
2,"['  @Test\n  public void testFileDialogFilterSet_relativePathInField() {\n    when(field.getText()).thenReturn(""src/main/appengine/app.yaml"");\n    when(dialog.open()).thenReturn(null);\n\n    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);\n    // ""basePath"" is the first physically existing directory.\n    verify(dialog).setFilterPath(basePath.toString());\n\n    basePath.append(""src"").toFile().mkdir();\n    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);\n    verify(dialog).setFilterPath(basePath + ""/src"");\n  }\n']",dialog;Path;Set;field;Setter;Dialog;app;appengine;Setter;open,9.313225746154785e-10;8.731149137020111e-10;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.909122943878174, -5.62529182434082, -4.682829856872559, -5.705728054046631, -5.275138854980469, -0.024310000240802765]",0.9759830236434937
2,"['  @Test\n  public void testFileDialogFilterSet_absolutePathInField() {\n    when(field.getText()).thenReturn(basePath + ""/deploy/temp/app.yaml"");\n    when(dialog.open()).thenReturn(null);\n\n    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);\n    // ""basePath"" is the first physically existing directory.\n    verify(dialog).setFilterPath(basePath.toString());\n\n    basePath.append(""deploy"").toFile().mkdir();\n    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);\n    verify(dialog).setFilterPath(basePath + ""/deploy"");\n  }\n']",Filter;File;In;mkdir;verify;Path;verify;field;Return;when,9.89530235528946e-10;7.639755494892597e-10;6.984919309616089e-10;6.693881005048752e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.904318332672119, -5.605793476104736, -4.682084560394287, -5.708749294281006, -5.282904148101807, -0.02435234934091568]",0.9759416580200195
2,['  @Test\n  public void testSelectionChanged_emptySelection() {\n    when(event.getSelection()).thenReturn(new StructuredSelection());\n    listener.selectionChanged(event);\n    verify(projectSelector).clearStatusLink();\n  }\n'],event;verify;Selection;empty;Structured;Changed;Status;get;selection;project,9.313225746154785e-10;8.149072527885437e-10;7.566995918750763e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;1.4551915228366852e-10;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-6.008403778076172, -5.591309070587158, -4.564425468444824, -5.895241737365723, -5.416097640991211, -0.024088917300105095]",0.9761990308761597
2,"['  @Test\n  public void testSelectionChanged_repositoryException()\n      throws ProjectRepositoryException, InterruptedException {\n    initSelectionAndAccountSelector();\n    when(projectRepository.getAppEngineApplication(any(Credential.class), anyString()))\n        .thenThrow(new ProjectRepositoryException(""testException""));\n\n    listener.selectionChanged(event);\n    listener.latestQueryJob.join();\n    verify(projectSelector).clearStatusLink();  // Should clear initially.\n    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_EXCEPTION, null /* tooltip */);\n  }\n']",Changed;any;when;Repository;Query;init;WHEN;project;redential;Selector,1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;8.440110832452774e-10;6.766640581190586e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.940425395965576, -5.602957248687744, -4.657666206359863, -5.7875494956970215, -5.330227375030518, -0.024000704288482666]",0.9762851595878601
2,"['  @Test\n  public void testSelectionChanged_noAppEngineApplication()\n      throws ProjectRepositoryException, InterruptedException {\n    initSelectionAndAccountSelector();\n    when(projectRepository.getAppEngineApplication(any(Credential.class), anyString()))\n        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);\n\n    listener.selectionChanged(event);\n    listener.latestQueryJob.join();\n    verify(projectSelector).clearStatusLink();  // Should clear initially.\n    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);\n  }\n']",Status;no;latest;Application;get;listener;INK;APPLICATION;ESSAGE;Link,1.3387762010097504e-09;9.313225746154785e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.9357523918151855, -5.5937418937683105, -4.654814720153809, -5.798207759857178, -5.330624103546143, -0.024040738120675087]",0.9762459397315979
2,"['  @Test\n  public void testSelectionChanged_hasAppEngineApplication()\n      throws ProjectRepositoryException, InterruptedException {\n    initSelectionAndAccountSelector();\n    when(projectRepository.getAppEngineApplication(any(Credential.class), anyString()))\n        .thenReturn(AppEngine.withId(""id""));\n\n    listener.selectionChanged(event);\n    listener.latestQueryJob.join();\n    verify(projectSelector).clearStatusLink();\n  }\n']",when;listener;listener;Exception;get;App;any;Job;Repository;Application,1.3969838619232178e-09;9.89530235528946e-10;8.440110832452774e-10;7.8580342233181e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.996033668518066, -5.58292818069458, -4.601495265960693, -5.864040851593018, -5.3997802734375, -0.023928195238113403]",0.9763556718826294
2,"['  @Test\n  public void testSelectionChanged_doNotRunQueryJobIfCached() throws ProjectRepositoryException {\n    GcpProject gcpProject = new GcpProject(""projectName"", ""projectId"");\n    initSelectionAndAccountSelector(gcpProject);\n    gcpProject.setAppEngine(AppEngine.withId(""id""));\n\n    listener.selectionChanged(event);\n    assertNull(listener.latestQueryJob);\n    verify(projectRepository, never()).getAppEngineApplication(any(Credential.class), anyString());\n    verify(projectSelector).clearStatusLink();\n  }\n']",Selection;do;listener;cp;Selector;cp;cp;Engine;cp;new,1.2514647096395493e-09;1.1641532182693481e-09;7.421476766467094e-10;5.529727786779404e-10;5.384208634495735e-10;4.3655745685100555e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.962660789489746, -5.654559135437012, -4.649041652679443, -5.772903919219971, -5.308950901031494, -0.023988598957657814]",0.9762968420982361
2,"['  @Test\n  public void testSelectionChanged_whenCachedResultIsNoAppEngineApplication()\n      throws ProjectRepositoryException {\n    GcpProject gcpProject = new GcpProject(""projectName"", ""projectId"");\n    initSelectionAndAccountSelector(gcpProject);\n    gcpProject.setAppEngine(AppEngine.NO_APPENGINE_APPLICATION);\n\n    listener.selectionChanged(event);\n    assertNull(listener.latestQueryJob);\n    verify(projectRepository, never()).getAppEngineApplication(any(Credential.class), anyString());\n    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);\n  }\n']",EXPECTED;Changed;Project;Application;when;Engine;App;Application;cp;event,1.1059455573558807e-09;1.0477378964424133e-09;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.909222602844238, -5.616048812866211, -4.6717753410339355, -5.740292072296143, -5.27675199508667, -0.024325240403413773]",0.9759682416915894
2,"['  @Test\n  public void testSelectionChanged_changeSelectedProject()\n      throws ProjectRepositoryException, InterruptedException {\n    when(projectRepository.getAppEngineApplication(any(Credential.class), eq(""oldProjectId"")))\n        .thenThrow(new ProjectRepositoryException(""testException""));\n    when(projectRepository.getAppEngineApplication(any(Credential.class), eq(""projectId"")))\n        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);\n\n    initSelectionAndAccountSelector(new GcpProject(""oldProjectName"", ""oldProjectId""));\n    listener.selectionChanged(event);\n\n    Job oldJob = listener.latestQueryJob;\n    assertNotNull(oldJob);\n    oldJob.join();\n\n    initSelectionAndAccountSelector();\n    listener.selectionChanged(event);\n\n    Job newJob = listener.latestQueryJob;\n    assertNotNull(newJob);\n    assertNotEquals(oldJob, newJob);\n    newJob.join();\n\n    verify(projectRepository).getAppEngineApplication(any(Credential.class), eq(""oldProjectId""));\n    verify(projectRepository).getAppEngineApplication(any(Credential.class), eq(""projectId""));\n    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);\n  }\n']",Selection;join;listener;Project;Account;Engine;WHEN;Selector;redential;change,4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;3.346940502524376e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.2014213502407074e-10,5,5,"[-5.888431072235107, -5.534580707550049, -4.69606876373291, -5.724029541015625, -5.343587875366211, -0.02418561838567257]",0.9761044979095459
2,"['  @Test\n  public void testUrlOpenErrorDialogTitle() {\n    assertEquals(""Error"", Messages.getString(""openurllistener.error.title""));\n  }\n']",Messages;openurllistener;title;Error;Title;Url;Dialog;Open;Error;Equals,2.6775524020195007e-09;1.3387762010097504e-09;1.1641532182693481e-09;6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-6.024011611938477, -5.700572967529297, -4.579380035400391, -5.8623456954956055, -5.3231306076049805, -0.02403375506401062]",0.9762527346611023
2,"['  @Test\n  public void testUrlOpenErrorDialogMessage() {\n    assertEquals(""Could not open URL"", Messages.getString(""openurllistener.error.message""));\n  }\n']",openurllistener;Messages;Dialog;Error;Url;Equals;Message;open;get;Open,3.026798367500305e-09;1.862645149230957e-09;1.6298145055770874e-09;9.313225746154785e-10;5.820766091346741e-10;3.4924596548080444e-10;1.1641532182693481e-10;5.820766091346741e-11;-1.1641532182693481e-10;-3.4924596548080444e-10,5,5,"[-6.001796245574951, -5.67467737197876, -4.593956470489502, -5.856523036956787, -5.326333522796631, -0.024028286337852478]",0.9762580990791321
2,"['  @Test\n  public void testInvalidUrlErrorMessage() {\n    assertEquals(""Invalid URL: http://www.example.com"", \n        Messages.getString(""invalid.url"", ""http://www.example.com""));\n  }\n']",get;com;http;example;com;Invalid;Invalid;http;Equals;invalid,9.89530235528946e-10;8.440110832452774e-10;8.149072527885437e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.995689868927002, -5.781277656555176, -4.632705211639404, -5.785078525543213, -5.220443248748779, -0.024067969992756844]",0.9762193560600281
2,['  @Test\n  public void testCreateRefreshIcon() {\n    assertNotNull(SharedImages.REFRESH_IMAGE_DESCRIPTOR.createImage(shell.getDisplay()));\n  }\n'],Shared;Display;Null;Refresh;Icon;Create;IMAGE;Not;get;Images,1.280568540096283e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.4551915228366852e-11;0.0,5,5,"[-6.00071382522583, -5.70888614654541, -4.600532054901123, -5.835570335388184, -5.298654556274414, -0.02404678985476494]",0.9762401580810547
2,"['  @Test\n  public void testExtensionPoint() {\n    NodeList extensions = getDocument().getElementsByTagName(""extension"");\n    assertEquals(1, extensions.getLength());\n    Element extension = (Element) extensions.item(0);\n    assertEquals(""org.eclipse.ui.commands"", extension.getAttribute(""point""));\n\n    NodeList commandDefinitions = extension.getElementsByTagName(""command"");\n    assertEquals(1, commandDefinitions.getLength());\n    Element configExtension = (Element) commandDefinitions.item(0);\n    assertEquals(OpenDropDownMenuHandler.class.getName(),\n        configExtension.getAttribute(""defaultHandler""));\n    assertEquals(""com.google.cloud.tools.eclipse.ui.util.showPopup"",\n        configExtension.getAttribute(""id""));\n  }\n']",Extension;Down;Extension;Node;cloud;command;extension;Handler;Attribute;Drop,1.4260876923799515e-09;5.529727786779404e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.972762107849121, -5.638195991516113, -4.64592981338501, -5.770254135131836, -5.37283182144165, -0.02374684251844883]",0.9765329957008362
2,"['  @Test\n  public void testConvertFontToBold() {\n    Label label = new Label(shellTestResource.getShell(), SWT.NONE);\n    for (FontData fontData : label.getFont().getFontData()) {\n      assertThat(fontData.getStyle(), is(not(SWT.BOLD)));\n    }\n    FontUtil.convertFontToBold(label);\n    for (FontData fontData : label.getFont().getFontData()) {\n      assertThat(fontData.getStyle(), is(SWT.BOLD));\n    }\n  }\n']",Util;Font;SW;Font;Label;get;new;label;old;Data,7.275957614183426e-10;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.986026763916016, -5.717435359954834, -4.6340556144714355, -5.7823100090026855, -5.31527042388916, -0.02379550039768219]",0.9764853715896606
2,"['  @Test\n  public void testConvertFontToItalic() {\n    Label label = new Label(shellTestResource.getShell(), SWT.NONE);\n    for (FontData fontData : label.getFont().getFontData()) {\n      assertThat(fontData.getStyle(), is(not(SWT.ITALIC)));\n    }\n    FontUtil.convertFontToItalic(label);\n    for (FontData fontData : label.getFont().getFontData()) {\n      assertThat(fontData.getStyle(), is(SWT.ITALIC));\n    }\n  }\n']",Font;ONE;Font;Font;Resource;Italic;label;label;new;get,1.1641532182693481e-09;8.149072527885437e-10;6.984919309616089e-10;6.83940015733242e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.972850322723389, -5.707827091217041, -4.6473493576049805, -5.770265579223633, -5.3079118728637695, -0.023806210607290268]",0.9764750599861145
2,"['  @Test\n  public void testWidgetSelected_InvalidURI() {\n    SelectionEvent selectionEvent = getEvent(INVALID_URI);\n\n    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetSelected(selectionEvent);\n    verify(errorHandler).handle(captor.capture(), any(URI.class));\n    assertThat(captor.getValue(), instanceOf(URISyntaxException.class));\n  }\n']",Support;Widget;Provider;captor;Selected;browser;Event;selection;new;verify,2.7939677238464355e-09;1.6298145055770874e-09;1.1641532182693481e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.924920082092285, -5.595936298370361, -4.6614155769348145, -5.785539627075195, -5.3418288230896, -0.023981966078281403]",0.976303219795227
2,"['  @Test\n  public void testWidgetDefaultSelected_InvalidURI() {\n    SelectionEvent selectionEvent = getEvent(INVALID_URI);\n\n    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetDefaultSelected(selectionEvent);\n    verify(errorHandler).handle(captor.capture(), any(URI.class));\n    assertThat(captor.getValue(), instanceOf(URISyntaxException.class));\n  }\n']",Widget;Selected;Event;INVALID;error;Selection;URI;handle;Listener;instance,3.958120942115784e-09;1.280568540096283e-09;1.280568540096283e-09;1.1059455573558807e-09;9.604264050722122e-10;9.313225746154785e-10;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.111804395914078e-10,5,5,"[-5.910693168640137, -5.5935540199279785, -4.66689920425415, -5.77678108215332, -5.332157135009766, -0.024052724242210388]",0.9762342572212219
2,"['  @Test\n  public void testWidgetSelected_MalformedURL() {\n    SelectionEvent selectionEvent = getEvent(MALFORMED_URL);\n\n    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetSelected(selectionEvent);\n    verify(errorHandler).handle(captor.capture(), any(URI.class));\n    assertThat(captor.getValue(), instanceOf(MalformedURLException.class));\n  }\n']",Support;browser;Selected;Provider;Listener;Event;That;Handler;Event;MALFORMED,3.958120942115784e-09;1.862645149230957e-09;1.3096723705530167e-09;1.1641532182693481e-09;1.1059455573558807e-09;6.984919309616089e-10;6.984919309616089e-10;6.257323548197746e-10;5.820766091346741e-10;5.820766091346741e-10,5,5,"[-5.92420768737793, -5.589383125305176, -4.661484718322754, -5.791380882263184, -5.345644950866699, -0.023971375077962875]",0.9763136506080627
2,"['  @Test\n  public void testWidgetDefaultSelected_MalformedURL() {\n    SelectionEvent selectionEvent = getEvent(MALFORMED_URL);\n\n    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetDefaultSelected(selectionEvent);\n    verify(errorHandler).handle(captor.capture(), any(URI.class));\n    assertThat(captor.getValue(), instanceOf(MalformedURLException.class));\n  }\n']",Default;Widget;any;Malformed;That;URLE;Event;ri;ception;Event,1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.915391445159912, -5.579180717468262, -4.6623311042785645, -5.788915634155273, -5.346426010131836, -0.024030612781643867]",0.9762558341026306
2,"['  @Test\n  public void testWidgetSelected_errorInvokingBrowser() throws PartInitException {\n    SelectionEvent selectionEvent = getEvent(VALID_URI);\n    doThrow(new PartInitException(""fake exception"")).when(browser).openURL(any(URL.class));\n\n    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetSelected(selectionEvent);\n    verify(errorHandler).handle(captor.capture(), any(URI.class));\n    assertThat(captor.getValue(), instanceOf(PartInitException.class));\n  }\n']",captor;browser;That;handle;Invoking;Event;Provider;URL;Exception;instance,1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.440110832452774e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.901959419250488, -5.561363220214844, -4.667699813842773, -5.759195327758789, -5.328808307647705, -0.02426706627011299]",0.9760249853134155
2,"['  @Test\n  public void testWidgetDefaultSelected_errorInvokingBrowser() throws PartInitException {\n    SelectionEvent selectionEvent = getEvent(VALID_URI);\n    doThrow(new PartInitException(""fake exception"")).when(browser).openURL(any(URL.class));\n\n    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport)\n      .widgetDefaultSelected(selectionEvent);\n    verify(errorHandler).handle(captor.capture(), any(URI.class));\n    assertThat(captor.getValue(), instanceOf(PartInitException.class));\n  }\n']",Selection;Widget;do;selection;Provider;Browser;instance;Event;new;any,1.6298145055770874e-09;1.1059455573558807e-09;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.907698154449463, -5.5623908042907715, -4.663844585418701, -5.768115043640137, -5.335477828979492, -0.02422238700091839]",0.9760686159133911
2,"['  @Test\n  public void testWidgetSelected_successful() throws PartInitException, MalformedURLException {\n    SelectionEvent selectionEvent = getEvent(VALID_URI);\n    when(queryParameterProvider.getParameters()).thenReturn(Collections.singletonMap(URL_PARAM_PROJECT, PROJECT_ID));\n\n    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetSelected(selectionEvent);\n    verify(errorHandler, never()).handle(any(Exception.class), any(URI.class));\n    verify(browser).openURL(new URL(VALID_URI + ""?project="" + PROJECT_ID));\n  }\n']",Selection;verify;successful;any;URI;Provider;PROJECT;selection;when;Part,2.2118911147117615e-09;1.2223608791828156e-09;9.313225746154785e-10;7.566995918750763e-10;6.693881005048752e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.916693210601807, -5.571274757385254, -4.673203468322754, -5.750924110412598, -5.337355136871338, -0.02411894127726555]",0.9761695861816406
2,"['  @Test\n  public void testWidgetDefaultSelected_successful() throws PartInitException, MalformedURLException {\n    SelectionEvent selectionEvent = getEvent(VALID_URI);\n    when(queryParameterProvider.getParameters()).thenReturn(Collections.singletonMap(URL_PARAM_PROJECT, PROJECT_ID));\n\n    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport)\n      .widgetDefaultSelected(selectionEvent);\n    verify(errorHandler, never()).handle(any(Exception.class), any(URI.class));\n    verify(browser).openURL(new URL(VALID_URI + ""?project="" + PROJECT_ID));\n  }\n']",Default;successful;URI;URLE;Part;Event;URL;PROJECT;any;Handler,1.5133991837501526e-09;1.3969838619232178e-09;8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10,5,5,"[-5.919126987457275, -5.575446605682373, -4.675441741943359, -5.749922275543213, -5.3371901512146, -0.024078793823719025]",0.9762089252471924
2,['  @Test\n  public void testNegate() {\n    assertTrue((Boolean) BooleanConverter.negate().convert(Boolean.FALSE));\n    assertFalse((Boolean) BooleanConverter.negate().convert(Boolean.TRUE));\n  }\n'],TRUE;False;Boolean;ALSE;Boolean;convert;Boolean;negate;Boolean;True,3.4924596548080444e-09;2.9103830456733704e-09;1.3969838619232178e-09;9.313225746154785e-10;3.4924596548080444e-10;2.9103830456733704e-10;8.731149137020111e-11;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-6.037555694580078, -5.694636821746826, -4.563396453857422, -5.837967395782471, -5.368020534515381, -0.024042833596467972]",0.9762440323829651
2,"['  @Test\n  public void testValidation_nonStringInput() {\n    IStatus status = validator.validate(new Object());\n    assertThat(status.getSeverity(), is(IStatus.ERROR));\n    assertThat(status.getMessage(), is(""Invalid bucket name""));\n  }\n']",non;Validation;That;bucket;That;status;new;Status;Status;validate,1.6298145055770874e-09;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;1.1641532182693481e-10;0.0;0.0,5,5,"[-6.005148410797119, -5.691001892089844, -4.610935211181641, -5.8094024658203125, -5.345486640930176, -0.023835426196455956]",0.9764463901519775
2,"['  @Test\n  public void testValidation_emptyString() {\n    assertThat(validator.validate("""").getSeverity(), is(IStatus.OK));\n  }\n']",OK;validate;validator;empty;Status;Validation;get;That;everity,1.3969838619232178e-09;6.984919309616089e-10;1.4551915228366852e-10;0.0;0.0;-4.656612873077393e-10;-1.2223608791828156e-09;-1.3969838619232178e-09;-6.752088665962219e-09,5,5,"[-6.033510208129883, -5.668720245361328, -4.55059289932251, -5.878994941711426, -5.375269412994385, -0.024126272648572922]",0.9761624336242676
2,"['  @Test\n  public void testValidation_upperCaseLetter() {\n    IStatus status = validator.validate(""THISWOULDBEVALIDIFLOWERCASE"");\n    assertThat(status.getSeverity(), is(IStatus.ERROR));\n    assertThat(status.getMessage(), is(""Invalid bucket name: THISWOULDBEVALIDIFLOWERCASE""));\n  }\n']",ASE;everity;ASE;Letter;Validation;THIS;Message;Status;THIS;That,1.6298145055770874e-09;9.604264050722122e-10;9.313225746154785e-10;9.313225746154785e-10;8.731149137020111e-10;6.402842700481415e-10;4.511093720793724e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.969071388244629, -5.673573017120361, -4.654272556304932, -5.772741317749023, -5.34202766418457, -0.023688634857535362]",0.9765896201133728
2,"['  @Test\n  public void testValidation_startWithDot() {\n    assertThat(validator.validate("".bucket"").getSeverity(), is(IStatus.ERROR));\n  }\n']",start;everity;Validation;That;ot;get;bucket;Status;ERROR;validate,2.7939677238464355e-09;3.7834979593753815e-10;3.4924596548080444e-10;-4.656612873077393e-10;-6.984919309616089e-10;-6.984919309616089e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.3969838619232178e-09;-1.6298145055770874e-09,5,5,"[-6.032569885253906, -5.682003498077393, -4.573150157928467, -5.865790367126465, -5.362070560455322, -0.02394169569015503]",0.9763426184654236
2,"['  @Test\n  public void testValidation_endWithDot() {\n    assertThat(validator.validate(""bucket."").getSeverity(), is(IStatus.ERROR));\n  }\n']",bucket;Status;That;Validation;ot;validate;get;end;everity;ERROR,5.122274160385132e-09;1.1059455573558807e-09;6.984919309616089e-10;5.820766091346741e-11;0.0;0.0;-2.3283064365386963e-10;-9.313225746154785e-10;-1.1641532182693481e-09;-1.3969838619232178e-09,5,5,"[-6.032049179077148, -5.662909507751465, -4.574840545654297, -5.869301795959473, -5.381128787994385, -0.02389153093099594]",0.976391613483429
2,"['  @Test\n  public void testValidation_startWithHyphen() {\n    assertThat(validator.validate(""-bucket"").getSeverity(), is(IStatus.ERROR));\n  }\n']",Hyphen;start;ERROR;That;Validation;get;Status;validate;validator;bucket,2.7939677238464355e-09;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;2.3283064365386963e-10;5.820766091346741e-11;-3.4924596548080444e-10;-5.820766091346741e-10;-1.4551915228366852e-09;-2.561137080192566e-09,5,5,"[-6.03145170211792, -5.685022830963135, -4.571226119995117, -5.864560604095459, -5.3600945472717285, -0.02396753430366516]",0.9763175249099731
2,"['  @Test\n  public void testValidation_endWithHyphen() {\n    assertThat(validator.validate(""bucket-"").getSeverity(), is(IStatus.ERROR));\n  }\n']",end;everity;bucket;validate;That;get;ERROR;validator;Status;Validation,2.3283064365386963e-09;1.862645149230957e-09;9.313225746154785e-10;8.149072527885437e-10;4.656612873077393e-10;4.656612873077393e-10;0.0;-3.4924596548080444e-10;-4.656612873077393e-10;-7.566995918750763e-10,5,5,"[-6.034424304962158, -5.67426872253418, -4.579661846160889, -5.8611860275268555, -5.365933895111084, -0.023890484124422073]",0.9763926267623901
2,"['  @Test\n  public void testValidation_startWithUnderscore() {\n    assertThat(validator.validate(""_bucket"").getSeverity(), is(IStatus.ERROR));\n  }\n']",Status;validator;validate;get;That;everity;Validation;ERROR;bucket;start,1.5133991837501526e-09;1.2514647096395493e-09;1.2223608791828156e-09;1.0477378964424133e-09;9.313225746154785e-10;-1.1641532182693481e-10;-5.820766091346741e-10;-1.3969838619232178e-09;-1.5133991837501526e-09;-4.423782229423523e-09,5,5,"[-6.024811267852783, -5.704500675201416, -4.570512294769287, -5.860768795013428, -5.340163707733154, -0.024032242596149445]",0.9762542247772217
2,"['  @Test\n  public void testValidation_endWithUnderscore() {\n    assertThat(validator.validate(""bucket_"").getSeverity(), is(IStatus.ERROR));\n  }\n']",Underscore;Validation;end;That;validator;get;everity;validate;ERROR;Status,8.847564458847046e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;5.238689482212067e-10;3.4924596548080444e-10;-3.4924596548080444e-10;-5.238689482212067e-10;-6.984919309616089e-10;-1.3969838619232178e-09,5,5,"[-6.016070365905762, -5.711648941040039, -4.586031436920166, -5.848565101623535, -5.324713706970215, -0.023978590965270996]",0.9763064980506897
2,"['  @Test\n  public void testValidation_maxLengthWithoutDot() {\n    assertThat(validator.validate(LENGTH_63).getSeverity(), is(IStatus.OK));\n  }\n']",Length;Without;That;ENGTH;validator;ot;everity;OK;max;get,1.7462298274040222e-09;1.3969838619232178e-09;1.3969838619232178e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;2.3283064365386963e-10;2.3283064365386963e-10;0.0;-6.984919309616089e-10,5,5,"[-6.029328346252441, -5.650293350219727, -4.565167427062988, -5.883715629577637, -5.39923620223999, -0.023920048028230667]",0.9763637781143188
2,"['  @Test\n  public void testValidation_tooLongNameWithoutDot() {\n    assertThat(validator.validate(LENGTH_63 + ""4"").getSeverity(), is(IStatus.ERROR));\n  }\n']",ot;Without;Validation;That;Long;get;Status;validator;Name;everity,2.6193447411060333e-09;2.3283064365386963e-09;2.270098775625229e-09;1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;1.7462298274040222e-10;1.1641532182693481e-10;-9.313225746154785e-10;-9.313225746154785e-10,5,5,"[-6.030086040496826, -5.6775431632995605, -4.580312252044678, -5.8683390617370605, -5.380455493927002, -0.0237930566072464]",0.9764877557754517
2,"['  @Test\n  public void testValidation_validNameWithDot() {\n    assertThat(validator.validate(LENGTH_64_WITH_DOT).getSeverity(), is(IStatus.OK));\n  }\n']",everity;OK;That;validator;valid;Name;Validation;get;ot;ITH,3.958120942115784e-09;3.026798367500305e-09;1.3969838619232178e-09;1.3969838619232178e-09;8.731149137020111e-10;8.149072527885437e-10;2.6193447411060333e-10;1.4551915228366852e-10;1.1641532182693481e-10;0.0,5,5,"[-6.003815174102783, -5.673946857452393, -4.594780445098877, -5.861203193664551, -5.352429389953613, -0.02387523651123047]",0.976407527923584
2,"['  @Test\n  public void testValidation_tooLongNameWithDot() {\n    assertThat(validator.validate(LENGTH_222 + ""9"").getSeverity(), is(IStatus.ERROR));\n  }\n']",Long;too;ENGTH;validate;Status;That;ot;ERROR;everity;get,3.725290298461914e-09;3.259629011154175e-09;1.7462298274040222e-09;1.0477378964424133e-09;9.89530235528946e-10;9.313225746154785e-10;3.4924596548080444e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-5.820766091346741e-10,5,5,"[-6.031338691711426, -5.717624664306641, -4.58069372177124, -5.863804340362549, -5.339543342590332, -0.02385847456753254]",0.9764238595962524
2,"['  @Test\n  public void testValidation_maxLengthWithDot() {\n    assertThat(validator.validate(LENGTH_222).getSeverity(), is(IStatus.OK));\n  }\n']",ENGTH;Validation;That;ot;everity;validator;get;OK;Length;validate,2.3283064365386963e-09;2.0081643015146255e-09;1.6298145055770874e-09;1.5133991837501526e-09;1.3969838619232178e-09;1.1641532182693481e-09;4.656612873077393e-10;3.4924596548080444e-10;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-6.0230536460876465, -5.655551910400391, -4.572299480438232, -5.873282432556152, -5.38552188873291, -0.02393459714949131]",0.9763494729995728
2,"['  @Test\n  public void testRandomState() {\n    // Really, a test that the random generator state is reset in tests\n    RandomGenerator generator = RandomManager.getRandom();\n    assertEquals(1553355631, generator.nextInt());\n    assertNotEquals(1553355631, generator.nextInt());\n  }\n']",random;Random;next;State;Equals;Equals;Really;Manager;generator;the,2.7939677238464355e-09;1.6880221664905548e-09;8.149072527885437e-10;8.149072527885437e-10;6.402842700481415e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.962845802307129, -5.662247657775879, -4.644571304321289, -5.803358554840088, -5.302472114562988, -0.023941928520798683]",0.9763423800468445
2,"['  @Test\n  public void testRandomState() {\n    RandomGenerator generator = RandomManager.getRandom();\n    double unseededValue = generator.nextDouble();\n    RandomManager.useTestSeed();\n    double seededValue = generator.nextDouble();\n    assertNotEquals(unseededValue, seededValue);\n    assertEquals(seededValue, RandomManager.getRandom().nextDouble());\n  }\n']",Random;generator;Equals;Random;Random;seeded;Double;next;Random;Value,1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;8.731149137020111e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10,5,5,"[-5.978329658508301, -5.66521692276001, -4.625946044921875, -5.79433012008667, -5.329554557800293, -0.023967767134308815]",0.9763171672821045
2,"['  @Test\n  public void testSolveFToD() {\n    RealMatrix a = new Array2DRowRealMatrix(new double[][] {\n        {1.3, -2.0, 3.0},\n        {2.0, 0.0, 5.0},\n        {0.0, -1.5, 5.5},\n    });\n    Solver solver = new LinearSystemSolver().getSolver(a);\n    assertNotNull(solver);\n    double[] y = solver.solveFToD(new float[] {1.0f, 2.0f, 6.5f});\n    assertArrayEquals(\n        new double[] {-1.9560439560439564,0.002197802197802894,1.1824175824175824}, y);\n  }\n']",Linear;solver;Real;Matrix;Equals;olve;Not;new;solver;new,4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.3096723705530167e-10;1.1641532182693481e-10,5,5,"[-5.9064555168151855, -5.615487098693848, -4.683663845062256, -5.6769490242004395, -5.313105583190918, -0.02425031177699566]",0.9760414958000183
2,"['  @Test\n  public void testSolveDToD() {\n    RealMatrix a = new Array2DRowRealMatrix(new double[][] {\n        {1.3, -2.0, 3.0},\n        {2.0, 0.0, 5.0},\n        {0.0, -1.5, 5.5},\n    });\n    Solver solver = new LinearSystemSolver().getSolver(a);\n    assertNotNull(solver);\n    double[] y = solver.solveDToD(new double[]{1.0, 2.0, 6.5});\n    assertArrayEquals(\n        new double[] {-1.9560439560439564,0.002197802197802894,1.1824175824175824}, y);\n  }\n']",Real;Solver;olver;olver;olve;double;solver;Equals;Array;DRow,6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.90692663192749, -5.619602203369141, -4.683114528656006, -5.678997993469238, -5.307244777679443, -0.024261366575956345]",0.976030707359314
2,"['  @Test\n  public void testIsNonSingular() {\n    RealMatrix nonSingular = new Array2DRowRealMatrix(new double[][] {\n        {1.3, -2.0, 3.0},\n        {2.0, 0.0, 5.0},\n        {0.0, -1.5, 5.5},\n    });\n    assertTrue(new LinearSystemSolver().isNonSingular(nonSingular));\n    RealMatrix singular = new Array2DRowRealMatrix(new double[][] {\n        {1.3, -2.0, 3.0},\n        {2.6, -4.0, 6.0},\n        {0.0, -1.5, 5.5},\n    });\n    assertFalse(new LinearSystemSolver().isNonSingular(singular));\n  }\n']",new;False;Singular;double;True;singular;System;singular;Singular;Non,4.656612873077393e-10;4.2928149923682213e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.868722438812256, -5.583812236785889, -4.679470539093018, -5.675769805908203, -5.2848334312438965, -0.024666305631399155]",0.9756354093551636
2,"['  @Test\n  public void testApparentRank() {\n    RealMatrix nearSingular = new Array2DRowRealMatrix(new double[][] {\n        {1.31, -2.0, 3.0},\n        {2.6, -4.01, 6.01},\n        {0.0, -1.5, 5.5},\n    });\n    try {\n      new LinearSystemSolver().getSolver(nearSingular);\n    } catch (SingularMatrixSolverException smse) {\n      assertEquals(2, smse.getApparentRank());\n    }\n  }\n']",Linear;Apparent;olver;Matrix;Singular;near;near;Real;Array;smse,1.862645149230957e-09;1.3969838619232178e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.9196648597717285, -5.604023456573486, -4.65744686126709, -5.724888324737549, -5.321488857269287, -0.024301854893565178]",0.9759910702705383
2,"['  @Test\n  public void testDotFF() {\n    assertEquals(5.35, VectorMath.dot(VEC1, VEC2), FLOAT_EPSILON);\n  }\n']",FF;FL;Vector;EC;Equals;Math;dot;AT;ot;EC,2.6775524020195007e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;-1.1641532182693481e-10;-4.656612873077393e-10;-1.1641532182693481e-09;-1.2514647096395493e-09;-1.3969838619232178e-09;-1.3969838619232178e-09,5,5,"[-6.0092692375183105, -5.665535926818848, -4.585525035858154, -5.857104778289795, -5.367458343505859, -0.023927031084895134]",0.9763569235801697
2,"['  @Test\n  public void testDotDF() {\n    assertEquals(5.35, VectorMath.dot(VEC1D, VEC2), FLOAT_EPSILON);\n  }\n']",Vector;Equals;AT;EC;PSILON;dot;Math;DF;ot;FL,1.3969838619232178e-09;1.2223608791828156e-09;6.402842700481415e-10;4.656612873077393e-10;4.0745362639427185e-10;1.1641532182693481e-10;0.0;-5.820766091346741e-10;-6.111804395914078e-10;-8.149072527885437e-10,5,5,"[-6.0027384757995605, -5.663917541503906, -4.589065074920654, -5.854121685028076, -5.362151622772217, -0.02394646778702736]",0.9763379693031311
2,"['  @Test\n  public void testToFloats() {\n    assertArrayEquals(new float[] {1.2f}, VectorMath.toFloats(1.2), FLOAT_EPSILON);\n  }\n']",Floats;FL;PSILON;Array;new;Equals;Vector;Floats;to;float,1.4260876923799515e-09;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;-3.4924596548080444e-10;-4.0745362639427185e-10;-4.94765117764473e-10;-6.984919309616089e-10;-9.313225746154785e-10,5,5,"[-6.01564359664917, -5.677397727966309, -4.588573932647705, -5.842713832855225, -5.37380313873291, -0.02384962886571884]",0.9764325022697449
2,"['  @Test\n  public void testToDoubles() {\n    assertArrayEquals(new double[] {1.2}, VectorMath.toDoubles(1.2f), FLOAT_EPSILON);\n  }\n']",Array;Math;Vector;Doubles;to;PSILON;new;double;Doubles;Equals,1.1641532182693481e-09;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0;0.0;-1.1641532182693481e-10;-1.1641532182693481e-10,5,5,"[-6.006349563598633, -5.672140121459961, -4.596446514129639, -5.834160327911377, -5.366271018981934, -0.023871278390288353]",0.9764114022254944
2,"['  @Test\n  public void testParseVector() {\n    assertArrayEquals(\n        new double[] {-1.0, 2.01, 3.5},\n        VectorMath.parseVector(new String[] {""-1.0"", ""2.01"", ""3.5""}));\n  }\n']",Vector;Array;Math;Vector;Parse;parse;new;new;Equals;double,2.2118911147117615e-09;6.984919309616089e-10;5.820766091346741e-10;3.4924596548080444e-10;5.820766091346741e-11;0.0;-3.4924596548080444e-10;-4.656612873077393e-10;-5.820766091346741e-10;-9.313225746154785e-10,5,5,"[-5.927127838134766, -5.6288275718688965, -4.647593975067139, -5.7411627769470215, -5.3110432624816895, -0.024283820763230324]",0.9760086536407471
2,"['  @Test\n  public void testSmall() {\n    float[] a = { 1.0e-24f };\n    assertEquals(1.0e-24 * 1.0e-24, VectorMath.dot(a, a));\n  }\n']",Small;dot;Vector;Math;Equals;float,3.259629011154175e-09;1.1641532182693481e-10;-5.820766091346741e-10;-6.402842700481415e-10;-1.0477378964424133e-09;-1.1641532182693481e-09,5,5,"[-6.026552200317383, -5.640940189361572, -4.589908123016357, -5.860559463500977, -5.403326511383057, -0.02374812215566635]",0.9765316247940063
2,"['  @Test\n  public void testBig() {\n    float[] a = { 1.0e20f };\n    assertEquals((double) 1.0e20f * (double) 1.0e20f, VectorMath.dot(a, a));\n  }\n']",Big;double;Math;Equals;double;float;Vector;dot,2.3283064365386963e-09;9.89530235528946e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;0.0;0.0;0.0,5,5,"[-6.008298873901367, -5.66721773147583, -4.610445976257324, -5.815394401550293, -5.3710222244262695, -0.023774197325110435]",0.9765061736106873
2,"['  @Test\n  public void testNorm() {\n    assertEquals(0.0, VectorMath.norm(new float[] {0.0f}), FLOAT_EPSILON);\n    assertEquals(3.674234614174767, VectorMath.norm(VEC1), FLOAT_EPSILON);\n    assertEquals(10.72800074571213, VectorMath.norm(VEC2), FLOAT_EPSILON);\n  }\n']",PSILON;new;PSILON;Norm;PSILON;AT;Equals;AT;Vector;Math,9.89530235528946e-10;9.313225746154785e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;1.7462298274040222e-10,5,5,"[-5.930483341217041, -5.64790678024292, -4.661026477813721, -5.726433277130127, -5.3293328285217285, -0.02403131127357483]",0.9762551188468933
2,"['  @Test\n  public void testTransposeTimesSelf() {\n    Map<Integer,float[]> a = new HashMap<>();\n    a.put(-1, new float[] {1.3f, -2.0f, 3.0f});\n    a.put(1, new float[] {2.0f, 0.0f, 5.0f});\n    a.put(3, new float[] {0.0f, -1.5f, 5.5f});\n    RealMatrix ata = VectorMath.transposeTimesSelf(a.values());\n    RealMatrix expected = new Array2DRowRealMatrix(new double[][] {\n        {5.69, -2.6, 13.9},\n        {-2.6, 6.25, -14.25},\n        {13.9, -14.25, 64.25}\n    });\n    for (int row = 0; row < 3; row++) {\n      for (int col = 0; col < 3; col++) {\n        assertEquals(expected.getEntry(row, col), ata.getEntry(row, col), FLOAT_EPSILON);\n      }\n    }\n  }\n']",put;Matrix;expected;Map;double;Self;values;float;Array;get,1.3969838619232178e-09;8.731149137020111e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.859005451202393, -5.597020149230957, -4.697093486785889, -5.611545562744141, -5.257761478424072, -0.024853305891156197]",0.9754528999328613
2,"['  @Test\n  public void testNone() {\n    DoubleWeightedMean mean = new DoubleWeightedMean();\n    assertEquals(0, mean.getN());\n    assertTrue(Double.isNaN(mean.getResult()));\n  }\n']",None;Double;True;Mean;Weighted;Result;Double;Weighted;Equals;mean,9.313225746154785e-10;7.566995918750763e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.7462298274040222e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-6.041653156280518, -5.7059197425842285, -4.575069904327393, -5.847028732299805, -5.370762348175049, -0.023830188438296318]",0.9764515161514282
2,"['  @Test\n  public void testOne() {\n    DoubleWeightedMean mean = new DoubleWeightedMean();\n    mean.increment(1.5);\n    assertEquals(1, mean.getN());\n    assertEquals(1.5, mean.getResult());\n    assertEquals(""1.5"", mean.toString());\n  }\n']",increment;Weighted;Double;Equals;mean;Mean;Equals;Double;mean;Weighted,1.1059455573558807e-09;8.731149137020111e-10;8.149072527885437e-10;5.529727786779404e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;2.9103830456733704e-11,5,5,"[-6.005627632141113, -5.67718505859375, -4.606167316436768, -5.797904014587402, -5.357579708099365, -0.023907825350761414]",0.9763756990432739
2,"['  @Test\n  public void testWeighted() {\n    DoubleWeightedMean mean = new DoubleWeightedMean();\n    mean.increment(0.2, 4.0);\n    mean.increment(-0.1, 2.0);\n    assertEquals(2, mean.getN());\n    assertEquals(0.1, mean.getResult());\n  }\n']",Equals;increment;mean;Equals;Weighted;Mean;new;Weighted;Mean;mean,2.561137080192566e-09;1.7462298274040222e-09;6.984919309616089e-10;6.548361852765083e-10;6.111804395914078e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10,5,5,"[-6.027867317199707, -5.682638645172119, -4.603670597076416, -5.811568737030029, -5.384330749511719, -0.023689216002821922]",0.9765891432762146
2,"['  @Test\n  public void testNegative() {\n    DoubleWeightedMean mean = new DoubleWeightedMean();\n    mean.increment(-0.1, 2.1);\n    mean.increment(0.1, 2.1);\n    assertEquals(2, mean.getN());\n    assertEquals(0.0, mean.getResult());\n  }\n']",Equals;Weighted;Mean;Weighted;mean;Equals;Result;Double;mean;mean,9.604264050722122e-10;9.604264050722122e-10;5.529727786779404e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0,5,5,"[-6.027469635009766, -5.659510135650635, -4.59705114364624, -5.825572967529297, -5.393342018127441, -0.023755107074975967]",0.976524829864502
2,"['  @Test\n  public void testComplex() {\n    DoubleWeightedMean mean = new DoubleWeightedMean();\n    for (int i = 1; i <= 5; i++) {\n      mean.increment(1.0 / (i + 1), i);\n    }\n    assertEquals(5, mean.getN());\n    assertEquals((1.0/2.0 + 2.0/3.0 + 3.0/4.0 + 4.0/5.0 + 5.0/6.0) / 15.0, mean.getResult());\n  }\n']",Weighted;Mean;new;Equals;Double;Equals;get;Double;Weighted;mean,1.3387762010097504e-09;9.313225746154785e-10;4.656612873077393e-10;3.2014213502407074e-10;1.7462298274040222e-10;1.1641532182693481e-10;8.731149137020111e-11;0.0;-5.820766091346741e-11;-7.275957614183426e-11,5,5,"[-6.0230488777160645, -5.6761369705200195, -4.630639553070068, -5.775819778442383, -5.409905433654785, -0.023444008082151413]",0.9768286943435669
2,"['  @Test\n  public void testCopyEquals() {\n    DoubleWeightedMean mean = new DoubleWeightedMean();\n    mean.increment(0.2, 4.0);\n    mean.increment(-0.1, 2.0);\n    DoubleWeightedMean copy = mean.copy();\n    assertEquals(copy, mean);\n    assertEquals(copy.hashCode(), mean.hashCode());\n    DoubleWeightedMean zero = new DoubleWeightedMean();\n    mean.clear();\n    assertEquals(zero, mean);\n  }\n']",Double;Weighted;hash;increment;Double;mean;Mean;Equals;Equals;Equals,1.0477378964424133e-09;6.257323548197746e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.985640525817871, -5.707765579223633, -4.630624294281006, -5.763417720794678, -5.328244686126709, -0.02385859005153179]",0.9764236807823181
2,"[""  @Test\n  public void testShutdownHook() {\n    // Can't really test this except to verify that no exception is thrown now or at shutdown\n    JVMUtils.closeAtShutdown(new Closeable() {\n      @Override\n      public void close() {\n        // do nothing\n      }\n""]",Shutdown;or;do;really;at;exception;VMUtils;to;close;now,1.3969838619232178e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;6.111804395914078e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-6.0253400802612305, -5.527502536773682, -4.58882474899292, -5.8982391357421875, -5.418614864349365, -0.02402118593454361]",0.976265013217926
2,['  @Test\n  public void testUsedMemory() {\n    // Reasonable guess\n    assertTrue(JVMUtils.getUsedMemory() >= 1L << 20);\n  }\n'],True;VMUtils;Memory;Reasonable;Memory;get;Used;guess;Used,1.3969838619232178e-09;8.149072527885437e-10;0.0;-2.3283064365386963e-10;-3.4924596548080444e-10;-6.402842700481415e-10;-8.731149137020111e-10;-1.3969838619232178e-09;-1.862645149230957e-09,5,5,"[-6.023767471313477, -5.657393932342529, -4.5676350593566895, -5.88124942779541, -5.375109672546387, -0.02400209940969944]",0.9762836694717407
2,['  @Test(expected = IllegalStateException.class)\n  public void testLoggingRunnableException() {\n    new LoggingRunnable() {\n      @Override\n      public void doRun() throws IOException {\n        throw buildIOE();\n      }\n'],expected;Run;do;class;Run;build;Logging;Run;Exception;Logging,1.3969838619232178e-09;8.149072527885437e-10;8.149072527885437e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;8.731149137020111e-11;5.820766091346741e-11;0.0;-2.3283064365386963e-10,5,5,"[-5.991365432739258, -5.485011100769043, -4.578613758087158, -5.8765740394592285, -5.427043437957764, -0.02441389113664627]",0.9758816957473755
2,['  @Test\n  public void testLoggingCallable() {\n    Integer result = new LoggingCallable<Integer>() {\n      @Override\n      public Integer doCall() {\n        return 3;\n      }\n'],Callable;Callable;Logging;Call;return;result;new;Logging;do,1.862645149230957e-09;1.7462298274040222e-09;1.0186340659856796e-09;4.656612873077393e-10;4.656612873077393e-10;0.0;-7.566995918750763e-10;-9.022187441587448e-10;-1.1641532182693481e-09,5,5,"[-6.011840343475342, -5.540271759033203, -4.57406759262085, -5.886000633239746, -5.420459270477295, -0.024184221401810646]",0.9761058688163757
2,['  @Test(expected = IllegalStateException.class)\n  public void testLoggingCallableException() {\n    new LoggingCallable<Void>() {\n      @Override\n      public Void doCall() throws IOException {\n        throw buildIOE();\n      }\n'],oid;Exception;Logging;Callable;class;IOException;build;State;Exception;new,1.6298145055770874e-09;1.0477378964424133e-09;4.656612873077393e-10;4.656612873077393e-10;2.0372681319713593e-10;1.4551915228366852e-10;1.1641532182693481e-10;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.989246845245361, -5.546504020690918, -4.5979485511779785, -5.858005046844482, -5.401265621185303, -0.024135814979672432]",0.9761531352996826
2,['  @Test(expected = IllegalStateException.class)\n  public void testLoggingVoidCallableException() {\n    new LoggingVoidCallable() {\n      @Override\n      public void doCall() throws IOException {\n        throw buildIOE();\n      }\n'],State;Illegal;oid;expected;Call;Logging;throw;new;Exception;do,3.026798367500305e-09;2.0954757928848267e-09;9.89530235528946e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.986988067626953, -5.542260646820068, -4.596484661102295, -5.861567497253418, -5.397754669189453, -0.024179566651582718]",0.9761103987693787
2,"['  @Test\n  public void testHashDouble() {\n    for (int i = 0; i < 1000; i++) {\n      assertEquals(Double.valueOf(i).hashCode(), LangUtils.hashDouble(i));\n    }\n  }\n']",Code;Hash;Utils;Equals;Double;value;Double;Double;hash;hash,1.862645149230957e-09;1.3969838619232178e-09;7.8580342233181e-10;2.9103830456733704e-10;2.3283064365386963e-10;-5.820766091346741e-11;-2.3283064365386963e-10;-6.402842700481415e-10;-6.984919309616089e-10;-8.149072527885437e-10,5,5,"[-6.0104079246521, -5.688703536987305, -4.607983112335205, -5.818121433258057, -5.352594375610352, -0.02379910834133625]",0.9764819741249084
2,['  @Test\n  public void testClose() {\n    ReentrantLock lock = new ReentrantLock();\n    assertFalse(lock.isHeldByCurrentThread());\n    AutoLock al = new AutoLock(lock);\n    assertTrue(lock.isHeldByCurrentThread());\n    al.close();\n    assertFalse(lock.isHeldByCurrentThread());\n  }\n'],False;Reentrant;lock;Current;Close;lock;close;Lock;Held;al,1.0477378964424133e-09;8.149072527885437e-10;7.566995918750763e-10;7.566995918750763e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.983396530151367, -5.654292583465576, -4.601668357849121, -5.83579683303833, -5.33621072769165, -0.024080539122223854]",0.9762070775032043
2,['  @Test\n  public void testAutoClose() {\n    ReentrantLock lock = new ReentrantLock();\n    assertFalse(lock.isHeldByCurrentThread());\n    try (AutoLock al = new AutoLock(lock)) {\n      assertTrue(lock.isHeldByCurrentThread());\n    }\n    assertFalse(lock.isHeldByCurrentThread());\n  }\n'],Lock;True;By;Lock;lock;By;lock;Close;Current;new,8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.957250118255615, -5.63256311416626, -4.614396572113037, -5.807648658752441, -5.312860012054443, -0.024299761280417442]",0.9759930968284607
2,"['  @Test\n  public void testLoadClass() {\n    assertSame(ArrayList.class, ClassUtils.loadClass(ArrayList.class.getName()));\n  }\n']",Utils;Load;Same;get;Class;class;Array;load;class;Name,1.4551915228366852e-09;9.89530235528946e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;3.4924596548080444e-10;1.1641532182693481e-10;0.0;-1.7462298274040222e-10;-1.7462298274040222e-10,5,5,"[-6.025950908660889, -5.696519374847412, -4.559278964996338, -5.883605003356934, -5.331317901611328, -0.02415419928729534]",0.9761350750923157
2,"['  @Test\n  public void testLoadClass2() {\n    assertSame(ArrayList.class, ClassUtils.loadClass(ArrayList.class.getName(), List.class));\n  }\n']",Array;List;Load;List;Class;class;Same;get;List;Utils,1.0477378964424133e-09;4.656612873077393e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10;-5.820766091346741e-11;-4.0745362639427185e-10,5,5,"[-6.01029109954834, -5.694479942321777, -4.580364227294922, -5.858156204223633, -5.321521282196045, -0.024098925292491913]",0.976189136505127
2,['  @Test\n  public void testLoadInstanceOf() {\n    assertTrue(ClassUtils.loadInstanceOf(HashSet.class) instanceof HashSet);\n  }\n'],Instance;Class;instanceof;Set;Hash;Utils;True;Load;class;Set,1.862645149230957e-09;1.1641532182693481e-09;1.1059455573558807e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-11;-4.656612873077393e-10;-5.820766091346741e-10;-6.984919309616089e-10;-6.984919309616089e-10,5,5,"[-6.0264973640441895, -5.6934027671813965, -4.55123233795166, -5.88485050201416, -5.3303446769714355, -0.02425159141421318]",0.9760401248931885
2,"['  @Test\n  public void testLoadInstanceOf2() {\n    assertTrue(ClassUtils.loadInstanceOf(HashSet.class.getName(), Set.class) instanceof HashSet);\n  }\n']",Set;Instance;Load;class;load;Hash;class;True;get;Instance,2.0954757928848267e-09;1.1641532182693481e-09;6.984919309616089e-10;5.238689482212067e-10;4.656612873077393e-10;2.3283064365386963e-10;5.820766091346741e-11;0.0;0.0;-2.3283064365386963e-10,5,5,"[-6.015309810638428, -5.7043914794921875, -4.5778045654296875, -5.85565710067749, -5.325040817260742, -0.02406901679933071]",0.9762183427810669
2,"['  @Test\n  public void testInstantiateWithArgs() {\n    Number n = ClassUtils.loadInstanceOf(Integer.class.getName(),\n        Number.class,\n        new Class<?>[]{int.class},\n        new Object[]{3});\n    assertEquals(3, n.intValue());\n  }\n']",Instantiate;Args;Name;Number;Number;Value;Object;class;Instance;new,3.259629011154175e-09;1.0477378964424133e-09;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.1641532182693481e-10;0.0,5,5,"[-5.983093738555908, -5.643731594085693, -4.618700981140137, -5.800032138824463, -5.3526930809021, -0.023974167183041573]",0.9763109087944031
2,"['  @Test(expected = IllegalArgumentException.class)\n  public void testNoSuchMethod() {\n    ClassUtils.loadInstanceOf(Long.class.getName(), Long.class);\n  }\n']",expected;load;class;Class;Method;class;Exception;class;Name;Illegal,1.862645149230957e-09;1.862645149230957e-09;1.0477378964424133e-09;8.149072527885437e-10;3.4924596548080444e-10;3.4924596548080444e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.0745362639427185e-10,5,5,"[-6.026167392730713, -5.687078475952148, -4.592196464538574, -5.874444007873535, -5.346937656402588, -0.023788748309016228]",0.9764921069145203
2,"['  @Test(expected = IllegalStateException.class)\n  public void tesInvocationException() {\n    ClassUtils.loadInstanceOf(String.class.getName(),\n                              String.class,\n                              new Class<?>[] { char[].class },\n                              new Object[] { null });\n  }\n']",Instance;char;new;expected;load;Exception;new;State;Class;get,8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.973980903625488, -5.453514099121094, -4.590863227844238, -5.838245868682861, -5.475188255310059, -0.02436724118888378]",0.9759271144866943
2,"['  @Test\n  public void testExists() {\n    assertTrue(ClassUtils.classExists(""java.lang.String""));\n    assertTrue(ClassUtils.classExists(""com.cloudera.oryx.common.lang.ClassUtils""));\n    assertFalse(ClassUtils.classExists(""java.Foo""));\n  }\n']",class;lang;common;ory;Class;java;Class;Utils;False;Class,1.0477378964424133e-09;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;2.3283064365386963e-10;5.820766091346741e-11;5.820766091346741e-11;0.0;-2.0372681319713593e-10,5,5,"[-5.961384296417236, -5.681788921356201, -4.635242462158203, -5.790924549102783, -5.303267002105713, -0.024003729224205017]",0.9762819409370422
2,"['  @Test\n  public void testSkeleton() {\n    PMML pmml = PMMLUtils.buildSkeletonPMML();\n    assertEquals(""Oryx"", pmml.getHeader().getApplication().getName());\n    assertNotNull(pmml.getHeader().getTimestamp());\n  }\n']",ry;mm;PMMLUtils;Timestamp;get;get;Not;Equals;mm;get,1.1059455573558807e-09;9.313225746154785e-10;7.275957614183426e-10;5.820766091346741e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-6.00709867477417, -5.717249393463135, -4.612010955810547, -5.824585437774658, -5.33595085144043, -0.02373054437339306]",0.9765487909317017
2,"['  @Test\n  public void testReadWrite() throws Exception {\n    Path tempModelFile = Files.createTempFile(getTempDir(), ""model"", "".pmml.gz"");\n    PMML model = buildDummyModel();\n    PMMLUtils.write(model, tempModelFile);\n    assertTrue(Files.exists(tempModelFile));\n    PMML model2 = PMMLUtils.read(tempModelFile);\n    List<Model> models = model2.getModels();\n    assertEquals(1, models.size());\n    assertTrue(models.get(0) instanceof TreeModel);\n    TreeModel treeModel = (TreeModel) models.get(0);\n    assertEquals(123.0, treeModel.getNode().getRecordCount().doubleValue());\n    assertEquals(MiningFunctionType.CLASSIFICATION, treeModel.getFunctionName());\n  }\n']",Equals;PMMLUtils;mm;write;Type;True;model;Temp;Function;instanceof,1.5788828022778034e-09;9.604264050722122e-10;9.313225746154785e-10;4.656612873077393e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.966766834259033, -5.619820594787598, -4.637386798858643, -5.786981582641602, -5.369804859161377, -0.023875700309872627]",0.9764069318771362
2,"['  @Test\n  public void testToString() throws Exception {\n    PMML model = buildDummyModel();\n    model.getHeader().setTimestamp(null);\n    assertEquals(""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\"" standalone=\\""yes\\""?>\\n"" +\n                 ""<PMML version=\\""4.2.1\\"" xmlns=\\""http://www.dmg.org/PMML-4_2\\"">\\n"" +\n                 ""    <Header>\\n"" +\n                 ""        <Application name=\\""Oryx\\""/>\\n"" +\n                 ""    </Header>\\n"" +\n                 ""    <TreeModel functionName=\\""classification\\"">\\n"" +\n                 ""        <Node recordCount=\\""123.0\\""/>\\n"" +\n                 ""    </TreeModel>\\n"" +\n                 ""</PMML>\\n"",\n                 PMMLUtils.toString(model));\n  }\n']",xmlns;Timestamp;standalone;Exception;version;UTF;model;org;Name;PMML,4.94765117764473e-10;4.802132025361061e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.837623469531536e-10;2.3283064365386963e-10;1.8917489796876907e-10;1.7462298274040222e-10,5,5,"[-5.909883975982666, -5.389620780944824, -4.651961803436279, -5.741469383239746, -5.465030193328857, -0.024560462683439255]",0.9757387042045593
2,"['  @Test\n  public void testFromString() throws Exception {\n    PMML model = buildDummyModel();\n    PMML model2 = PMMLUtils.fromString(PMMLUtils.toString(model));\n    assertEquals(model.getHeader().getApplication().getName(),\n                 model2.getHeader().getApplication().getName());\n    assertEquals(model.getModels().get(0).getFunctionName(),\n                 model2.getModels().get(0).getFunctionName());\n  }\n']",PMML;Function;model;Function;From;model;PMMLUtils;model;get;PMML,5.529727786779404e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.1827872842550278e-10;2.1100277081131935e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.986199378967285, -5.6533989906311035, -4.630458354949951, -5.799874305725098, -5.372845649719238, -0.023717040196061134]",0.9765620827674866
2,"['  @Test\n  public void testDeleteRecursively() throws IOException {\n    Path testDir = createTestDirs();\n    IOUtils.deleteRecursively(testDir);\n    assertFalse(Files.exists(testDir));\n    assertFalse(Files.exists(testDir.resolve(""subFile1"")));\n  }\n']",Delete;Recursively;resolve;False;exists;Recursively;sub;IOException;Dir;Files,1.3969838619232178e-09;9.313225746154785e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.981836795806885, -5.639868259429932, -4.598974704742432, -5.836738586425781, -5.331932544708252, -0.02418270893394947]",0.9761072397232056
2,"['  @Test\n  public void testListFiles() throws IOException {\n    Path testDir = createTestDirs();\n    List<Path> files = IOUtils.listFiles(testDir, ""*"");\n    assertEquals(2, files.size());\n    assertTrue(files.contains(testDir.resolve(""subFile1"")));\n    assertFalse(files.contains(testDir.resolve("".hidden"")));\n    assertTrue(files.contains(testDir.resolve(""subDir1"")));\n  }\n']",IOException;OU;Dir;resolve;Path;True;Equals;irs;ils;Files,1.1641532182693481e-09;7.8580342233181e-10;4.94765117764473e-10;4.729372449219227e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.991127014160156, -5.645907402038574, -4.610406875610352, -5.8186445236206055, -5.368749141693115, -0.023895489051938057]",0.9763878583908081
2,"['  @Test\n  public void testListFiles2() throws IOException {\n    Path testDir = createTestDirs();\n    List<Path> files = IOUtils.listFiles(testDir, """");\n    assertEquals(2, files.size());\n    assertTrue(files.contains(testDir.resolve(""subFile1"")));\n    assertFalse(files.contains(testDir.resolve("".hidden"")));\n    assertTrue(files.contains(testDir.resolve(""subDir1"")));\n  }\n']",files;Dir;Files;False;Files;files;File;files;size;Dir,9.313225746154785e-10;7.566995918750763e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.989044189453125, -5.654550075531006, -4.609583377838135, -5.816357612609863, -5.359764099121094, -0.02392796240746975]",0.9763559103012085
2,"['  @Test\n  public void testListSubdirs() throws IOException {\n    Path testDir = createTestDirs();\n    List<Path> files = IOUtils.listFiles(testDir, ""*/*"");\n    assertEquals(2, files.size());\n    assertTrue(files.contains(testDir.resolve(""subDir1"").resolve(""subFile2"")));\n    assertTrue(files.contains(testDir.resolve(""subDir1"").resolve(""subDir2"")));\n  }\n']",Subdir;sub;Files;files;Dir;Equals;files;List;contains;Dir,1.3387762010097504e-09;7.8580342233181e-10;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.991778373718262, -5.638740539550781, -4.611856937408447, -5.812441349029541, -5.371310710906982, -0.023911667987704277]",0.9763719439506531
2,"['  @Test\n  public void testListSubdirs2() throws IOException {\n    Path testDir = createTestDirs();\n    List<Path> files = IOUtils.listFiles(testDir, ""*/subFile*"");\n    assertEquals(1, files.size());\n    assertTrue(files.contains(testDir.resolve(""subDir1"").resolve(""subFile2"")));\n  }\n']",Path;File;sub;files;resolve;OU;Subdir;sub;Path;ils,6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.981883525848389, -5.6568732261657715, -4.6199493408203125, -5.7943220138549805, -5.339896202087402, -0.023997677490115166]",0.9762880802154541
2,"['  @Test\n  public void testOrder() throws IOException {\n    Path testDir = createTestDirs();\n    List<Path> files = IOUtils.listFiles(testDir, ""*/*"");\n    assertEquals(testDir.resolve(""subDir1"").resolve(""subDir2""), files.get(0));\n    assertEquals(testDir.resolve(""subDir1"").resolve(""subFile2""), files.get(1));\n  }\n']",List;Files;Equals;Dir;Path;resolve;resolve;Dir;get;sub,9.313225746154785e-10;8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.8562575355172157e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.981983661651611, -5.636427402496338, -4.6255645751953125, -5.8021674156188965, -5.360591411590576, -0.023889785632491112]",0.9763933420181274
2,"['  @Test\n  public void testReadLines() throws IOException {\n    Path tempDir = getTempDir();\n    Path textFile = tempDir.resolve(""file.txt"");\n    Files.write(textFile, Arrays.asList(""foo"", ""bar"", ""baz""), StandardCharsets.UTF_8);\n    Iterator<String> it = IOUtils.readLines(textFile).iterator();\n    assertTrue(it.hasNext());\n    assertEquals(""foo"", it.next());\n    assertTrue(it.hasNext());\n    assertEquals(""bar"", it.next());\n    assertTrue(it.hasNext());\n    assertEquals(""baz"", it.next());\n    assertFalse(it.hasNext());\n  }\n']",ines;Dir;next;Equals;read;it;True;Next;Equals;temp,5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.128661774098873e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.963123798370361, -5.600207328796387, -4.612308025360107, -5.817944049835205, -5.372097969055176, -0.0241041611880064]",0.9761840105056763
2,"['  @Test\n  public void testChooseFreePort() throws IOException {\n    int freePort = IOUtils.chooseFreePort();\n    assertTrue(freePort >= 1024 && freePort < 65536);\n    try (ServerSocket socket = new ServerSocket(freePort, 0)) {\n      assertEquals(freePort, socket.getLocalPort());\n    }\n  }\n']",choose;socket;Choose;Server;Port;free;IOException;new;Free;free,1.3969838619232178e-09;1.280568540096283e-09;9.313225746154785e-10;9.313225746154785e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10,5,5,"[-5.9772467613220215, -5.694377422332764, -4.616729736328125, -5.795098781585693, -5.295618057250977, -0.024130461737513542]",0.9761583209037781
2,"[""  @Test\n  public void testDistinctFreePorts() throws IOException {\n    // This whole thing probably won't work unless successive calls really do return\n    // different ports instead of reusing free ephemeral ports.\n    Set<Integer> ports = new HashSet<>();\n    for (int i = 0; i < 10; i++) {\n      ports.add(IOUtils.chooseFreePort());\n    }\n    assertEquals(10, ports.size());\n  }\n""]",Distinct;Free;ports;new;unless;thing;whole;free;won't;size,2.2118911147117615e-09;8.731149137020111e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-6.018398284912109, -5.63437032699585, -4.628399848937988, -5.825031757354736, -5.397372245788574, -0.02353285439312458]",0.9767419695854187
2,"['  @Test\n  public void testDefaultConfig() {\n    Config config = ConfigUtils.getDefault();\n    assertEquals(""yarn-client"", config.getString(""oryx.batch.streaming.master""));\n  }\n']",arn;batch;Config;config;Equals;Default;streaming;ory;client;Default,2.3283064365386963e-09;1.3969838619232178e-09;1.1641532182693481e-09;9.313225746154785e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;2.3283064365386963e-10;1.1641532182693481e-10;0.0,5,5,"[-6.003471374511719, -5.710062026977539, -4.605391979217529, -5.822350978851318, -5.32476282119751, -0.02389374189078808]",0.976389467716217
2,"['  @Test\n  public void testSerialize() {\n    String serialized = ConfigUtils.serialize(ConfigUtils.getDefault());\n    assertTrue(serialized.contains(""update-class""));\n    Config deserialized = ConfigUtils.deserialize(serialized);\n    assertEquals(\n        ConfigUtils.getDefault().getString(""oryx.serving.api.port""),\n        deserialized.getString(""oryx.serving.api.port""));\n  }\n']",deserialize;Config;Equals;True;Config;ory;serving;serialize;Utils;class,1.1059455573558807e-09;6.984919309616089e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;2.3283064365386963e-10,5,5,"[-6.002505779266357, -5.688569068908691, -4.616894245147705, -5.8074164390563965, -5.3507866859436035, -0.02377035655081272]",0.9765099287033081
2,"['  @Test\n  public void testOptionalString() {\n    assertNull(ConfigUtils.getOptionalString(ConfigUtils.getDefault(), ""nonexistent""));\n  }\n']",Config;Optional;Default;Null;get;Utils;istent;get;none;Config,3.026798367500305e-09;9.313225746154785e-10;9.313225746154785e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;-1.1641532182693481e-10;-3.4924596548080444e-10;-4.656612873077393e-10,5,5,"[-6.026063442230225, -5.709716320037842, -4.575366020202637, -5.859581470489502, -5.343028545379639, -0.023949377238750458]",0.9763351082801819
2,"['  @Test\n  public void testOptionalStringList() {\n    assertNull(ConfigUtils.getOptionalStringList(ConfigUtils.getDefault(), ""nonexistent""));\n  }\n']",istent;List;none;Default;Null;Config;get;get;List;Utils,2.7939677238464355e-09;2.3283064365386963e-09;2.3283064365386963e-09;1.3969838619232178e-09;9.313225746154785e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;1.1641532182693481e-10;-5.529727786779404e-10,5,5,"[-6.016623497009277, -5.712262153625488, -4.587042808532715, -5.84113883972168, -5.337530612945557, -0.023923072963953018]",0.9763606786727905
2,"['  @Test\n  public void testOverlayOn() {\n    Map<String,Object> overlay = new HashMap<>();\n    overlay.put(""foo"", ""bar"");\n    Config config = ConfigUtils.overlayOn(overlay, ConfigUtils.getDefault());\n    assertEquals(""bar"", config.getString(""foo""));\n  }\n']",Config;Hash;Map;On;foo;Object;overlay;bar;On;overlay,6.984919309616089e-10;4.656612873077393e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;2.9103830456733704e-11;-1.1641532182693481e-10,5,5,"[-6.00473690032959, -5.730082035064697, -4.617136001586914, -5.777456760406494, -5.32950496673584, -0.023819362744688988]",0.9764620661735535
2,"['  @Test\n  public void testSetPath() throws Exception {\n    Path cwd = Paths.get(""."");\n    Map<String,Object> map = new HashMap<>();\n    ConfigUtils.set(map, ""cwd"", cwd);\n    ConfigUtils.set(map, ""temp"", Paths.get(""/tmp""));\n    assertEquals(""\\"""" + cwd.toRealPath(LinkOption.NOFOLLOW_LINKS).toUri() + ""\\"""", map.get(""cwd""));\n    assertEquals(""\\""file:///tmp/\\"""", map.get(""temp""));\n  }\n']",set;Option;tmp;Set;map;map;wd;get;Path;Utils,8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;5.238689482212067e-10;3.7834979593753815e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10,5,5,"[-5.933083534240723, -5.680605411529541, -4.6798930168151855, -5.701206684112549, -5.27849817276001, -0.02407122775912285]",0.976216197013855
2,"['  @Test\n  public void testRedact() {\n    String redacted = ConfigUtils.redact(""  password=foo \\nPassword=foo\\nPASSWORD = foo\\n"" +\n                                             "" the-password= foo \\nThe-Password =foo"");\n    assertFalse(redacted.contains(""foo""));\n    assertTrue(redacted.contains(""*****""));\n    assertTrue(redacted.contains(""password=""));\n    assertTrue(redacted.contains(""Password=""));\n    assertTrue(redacted.contains(""PASSWORD = ""));\n    assertTrue(redacted.contains(""the-password= ""));\n    assertTrue(redacted.contains(""The-Password =""));\n  }\n']",redact;password;contains;the;The;PASS;redacted;Config;Password;PASS,9.604264050722122e-10;8.149072527885437e-10;6.402842700481415e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.3283064365386963e-10,5,5,"[-5.94643497467041, -5.581822395324707, -4.653275966644287, -5.73763370513916, -5.384249687194824, -0.024007802829146385]",0.9762781858444214
2,"['  @Test\n  public void testEquals() {\n    assertEquals(new Pair<>(3.0, ""foo""), new Pair<>(3.0, ""foo""));\n    assertEquals(new Pair<>(null, null), new Pair<>(null, null));\n    assertFalse(new Pair<>(3.0, ""foo"").equals(new Pair<>(4.0, ""foo"")));\n    assertNotEquals(new Pair<>(3.0, ""foo""), new Pair<>(""foo"", 3.0));\n    assertNotEquals(""3.0,foo"", new Pair<>(3.0, ""foo""));\n  }\n']",null;foo;Pair;Equals;null;False;new;equals;Pair;new,9.313225746154785e-10;6.984919309616089e-10;6.984919309616089e-10;6.693881005048752e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.1641532182693481e-10,5,5,"[-5.904440402984619, -5.664567470550537, -4.668700695037842, -5.670077800750732, -5.295950412750244, -0.02433152310550213]",0.9759621024131775
2,"['  @Test\n  public void testHashCode() {\n    assertEquals(new Pair<>(3.0, ""foo"").hashCode(), new Pair<>(3.0, ""foo"").hashCode());\n    assertEquals(new Pair<>(null, null).hashCode(), new Pair<>(null, null).hashCode());\n  }\n']",new;foo;Pair;Code;Pair;Pair;new;hash;Code;hash,1.3969838619232178e-09;9.313225746154785e-10;7.275957614183426e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;5.820766091346741e-11;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.962207317352295, -5.665589809417725, -4.634760856628418, -5.76584529876709, -5.344086647033691, -0.023939019069075584]",0.9763451218605042
2,"['  @Test\n  public void testToString() {\n    assertEquals(""3.0,foo"", new Pair<>(3.0, ""foo"").toString());\n  }\n']",foo;foo;new;Pair;to;Equals,1.1641532182693481e-09;5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10;-4.656612873077393e-10;-1.979060471057892e-09,5,5,"[-6.010278701782227, -5.713441371917725, -4.594748497009277, -5.8230671882629395, -5.330338478088379, -0.02394472248852253]",0.97633957862854
2,"['  @Test\n  public void testAnd() {\n    NotContainsPredicate<String> a = new NotContainsPredicate<>(Arrays.asList(""foo""));\n    NotContainsPredicate<String> b = new NotContainsPredicate<>(Arrays.asList(""bar"", ""baz""));\n    AndPredicate<String> and = new AndPredicate<>(a, b);\n    assertFalse(and.test(""foo""));\n    assertFalse(and.test(""bar""));\n    assertFalse(and.test(""baz""));\n    assertTrue(and.test(""bing""));\n  }\n']",Predicate;Contains;foo;Predicate;Predicate;new;new;and;and;bing,9.458744898438454e-10;6.693881005048752e-10;6.111804395914078e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10,5,5,"[-5.961363792419434, -5.64793062210083, -4.630847930908203, -5.749567031860352, -5.354401588439941, -0.024045975878834724]",0.9762408137321472
2,"['  @Test\n  public void testPredicate() {\n    Collection<Integer> contains = Arrays.asList(1, 3, 5);\n    NotContainsPredicate<Integer> predicate = new NotContainsPredicate<>(contains);\n    assertTrue(predicate.test(2));\n    assertFalse(predicate.test(5));\n  }\n']",Arrays;predicate;List;Predicate;Not;contains;Contains;False;as;Collection,8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.992455959320068, -5.676699638366699, -4.602947235107422, -5.803647041320801, -5.3622918128967285, -0.023935411125421524]",0.9763486385345459
2,"['  @Test\n  public void testByFirst() {\n    List<Pair<Integer,String>> pairs = Arrays.asList(\n        new Pair<>(3, ""foo""),\n        new Pair<>(4, ""bing""),\n        new Pair<>(1, ""baz""),\n        new Pair<>(2, ""whizz"")\n    );\n    Collections.sort(pairs, PairComparators.<Integer>byFirst());\n    assertEquals(1, pairs.get(0).getFirst().intValue());\n    assertEquals(2, pairs.get(1).getFirst().intValue());\n    assertEquals(""baz"", pairs.get(0).getSecond());\n    assertEquals(""whizz"", pairs.get(1).getSecond());\n  }\n']",whizz;bing;air;List;foo;az;get;First;Pair;Second,8.149072527885437e-10;8.149072527885437e-10;7.8580342233181e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.937320232391357, -5.654768466949463, -4.645721912384033, -5.715756416320801, -5.327814102172852, -0.024180730804800987]",0.9761091470718384
2,"['  @Test\n  public void testBySecond() {\n    List<Pair<Integer,String>> pairs = Arrays.asList(\n        new Pair<>(3, ""foo""),\n        new Pair<>(4, ""bing""),\n        new Pair<>(1, ""baz""),\n        new Pair<>(2, ""whizz"")\n    );\n    Collections.sort(pairs, PairComparators.<String>bySecond());\n    assertEquals(1, pairs.get(0).getFirst().intValue());\n    assertEquals(4, pairs.get(1).getFirst().intValue());\n    assertEquals(""baz"", pairs.get(0).getSecond());\n    assertEquals(""bing"", pairs.get(1).getSecond());\n  }\n']",sort;bing;Comparators;by;new;Pair;Second;pairs;get;Value,9.313225746154785e-10;6.984919309616089e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.4551915228366852e-10;1.2005330063402653e-10,5,5,"[-5.933194637298584, -5.644454002380371, -4.644847393035889, -5.720552444458008, -5.330936431884766, -0.024206096306443214]",0.9760845303535461
2,"['  @Test\n  public void testKeyOnly() {\n    ObjObjMap<String,String> map = HashObjObjMaps.newMutableMap(\n        new String[]{""foo"", ""bar"", ""baz""},\n        new String[]{""1"", ""3"", ""4""}\n    );\n    map.removeIf(new KeyOnlyBiPredicate<String, String>(new Predicate<String>() {\n      @Override\n      public boolean test(String s) {\n        return s.startsWith(""b"");\n      }\n']",Obj;Obj;Predicate;remove;map;Obj;new;az;Bi;new,7.566995918750763e-10;6.111804395914078e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.1641532182693481e-10;1.1641532182693481e-10,5,5,"[-5.988180160522461, -5.616666316986084, -4.636535167694092, -5.768264293670654, -5.382561206817627, -0.02383926883339882]",0.9764426350593567
2,"['  @Test\n  public void testParseJSON() throws Exception {\n    assertArrayEquals(new String[] {""a"", ""1"", ""foo""},\n                      TextUtils.parseJSONArray(""[\\""a\\"",\\""1\\"",\\""foo\\""]""));\n    assertArrayEquals(new String[] {""a"", ""1"", ""foo"", """"},\n                      TextUtils.parseJSONArray(""[\\""a\\"",\\""1\\"",\\""foo\\"",\\""\\""]""));\n    assertArrayEquals(new String[] {""2.3""}, TextUtils.parseJSONArray(""[\\""2.3\\""]""));\n    assertArrayEquals(new String[] {}, TextUtils.parseJSONArray(""[]""));\n  }\n']",Equals;Equals;Exception;new;JSONArray;Equals;parse;new;parse;Text,6.548361852765083e-10;5.384208634495735e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.844241142272949, -5.610115051269531, -4.706094741821289, -5.601320266723633, -5.242474555969238, -0.024884352460503578]",0.975422739982605
2,"['  @Test\n  public void testParseDelimited() throws Exception {\n    assertArrayEquals(new String[] {""a"", ""1"", ""foo""}, TextUtils.parseDelimited(""a,1,foo"", \',\'));\n    assertArrayEquals(new String[] {""a"", ""1"", ""foo"", """"},\n                      TextUtils.parseDelimited(""a,1,foo,"", \',\'));\n    assertArrayEquals(new String[] {""2.3""}, TextUtils.parseDelimited(""2.3"", \',\'));\n    assertArrayEquals(new String[] {""\\""a\\""""}, TextUtils.parseDelimited(""\\""\\""\\""a\\""\\""\\"""", \',\'));\n    assertArrayEquals(new String[] {""\\"""", ""\\""\\""""},\n                      TextUtils.parseDelimited(""\\""\\""\\""\\"" \\""\\""\\""\\""\\""\\"""", \' \'));\n    // Different from JSON, sort of:\n    assertArrayEquals(new String[] {""""}, TextUtils.parseDelimited("""", \',\'));\n    assertArrayEquals(new String[] {""a"", ""1,"", "",foo""},\n                      TextUtils.parseDelimited(""a\\t1,\\t,foo"", \'\\t\'));\n    assertArrayEquals(new String[] {""a"", ""1"", ""foo"", """"},\n                      TextUtils.parseDelimited(""a 1 foo "", \' \'));\n    assertArrayEquals(new String[] {""-1.0"", ""a\\"" \\""b""},\n                      TextUtils.parseDelimited(""-1.0 a\\""\\\\ \\""b"", \' \'));\n    assertArrayEquals(new String[] {""-1.0"", ""a\\""b\\""c""},\n                      TextUtils.parseDelimited(""-1.0 \\""a\\\\\\""b\\\\\\""c\\"""", \' \'));\n\n  }\n']",Equals;Array;foo;Delimited;Equals;from;Equals;foo;new;new,4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.3646862246096134e-10;2.0372681319713593e-10;2.0372681319713593e-10;1.964508555829525e-10;1.7462298274040222e-10;1.7462298274040222e-10;1.7462298274040222e-10,5,5,"[-5.788691997528076, -5.455033779144287, -4.716773986816406, -5.558906078338623, -5.303377628326416, -0.02542909048497677]",0.9748914837837219
2,"['  @Test\n  public void testParsePMMLDelimited() {\n    assertArrayEquals(new String[] {""1"", ""22"", ""3""}, TextUtils.parsePMMLDelimited(""1 22 3""));\n    assertArrayEquals(new String[] {""ab"", ""a b"", ""with \\""quotes\\"" ""},\n                      TextUtils.parsePMMLDelimited(""ab  \\""a b\\""   \\""with \\\\\\""quotes\\\\\\"" \\"" ""));\n    assertArrayEquals(new String[] {""\\"" \\""""},\n                      TextUtils.parsePMMLDelimited(""\\""\\\\\\"" \\\\\\""\\""""));\n    assertArrayEquals(new String[] {"" c\\"" d \\""e "", "" c\\"" d \\""e ""},\n                      TextUtils.parsePMMLDelimited("" \\"" c\\\\\\"" d \\\\\\""e \\"" \\"" c\\\\\\"" d \\\\\\""e \\"" ""));\n  }\n']",Equals;Equals;PMMLDelimited;quotes;PMMLDelimited;with;Utils;parse;Equals;parse,6.984919309616089e-10;5.529727786779404e-10;4.220055416226387e-10;3.92901711165905e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.764863893389702e-10;2.3283064365386963e-10;2.1827872842550278e-10;1.7462298274040222e-10,5,5,"[-5.823308944702148, -5.539791107177734, -4.714414596557617, -5.5669264793396, -5.269800662994385, -0.0251302532851696]",0.9751828908920288
2,"['  @Test\n  public void testJoinDelimited() {\n    assertEquals(""1,2,3"", TextUtils.joinDelimited(Arrays.asList(""1"", ""2"", ""3""), \',\'));\n    assertEquals(""\\""a,b\\"""", TextUtils.joinDelimited(Arrays.asList(""a,b""), \',\'));\n    assertEquals(""\\""\\""\\""a\\""\\""\\"""", TextUtils.joinDelimited(Arrays.asList(""\\""a\\""""), \',\'));\n    assertEquals(""1 2 3"", TextUtils.joinDelimited(Arrays.asList(""1"", ""2"", ""3""), \' \'));\n    assertEquals(""\\""1 \\"" \\""2 \\"" 3"", TextUtils.joinDelimited(Arrays.asList(""1 "", ""2 "", ""3""), \' \'));\n    assertEquals(""\\""\\""\\""a\\""\\""\\"""", TextUtils.joinDelimited(Arrays.asList(""\\""a\\""""), \' \'));\n    assertEquals(""\\""\\""\\""\\"" \\""\\""\\""\\""\\""\\"""",\n                 TextUtils.joinDelimited(Arrays.asList(""\\"""", ""\\""\\""""), \' \'));\n    assertEquals("""", TextUtils.joinDelimited(Collections.emptyList(), \'\\t\'));\n  }\n']",Arrays;List;Equals;Collections;Delimited;Equals;Arrays;Arrays;as;Text,8.440110832452774e-10;4.0745362639427185e-10;3.8562575355172157e-10;3.7834979593753815e-10;3.637978807091713e-10;2.9103830456733704e-10;2.255546860396862e-10;2.0736479200422764e-10;2.0372681319713593e-10;1.6007106751203537e-10,5,5,"[-5.847358226776123, -5.614789009094238, -4.707210063934326, -5.563167572021484, -5.27821159362793, -0.024804232642054558]",0.9755008816719055
2,"['  @Test\n  public void testJoinPMMLDelimited() {\n    assertEquals(""ab \\""a b\\"" \\""with \\\\\\""quotes\\\\\\"" \\"""",\n                 TextUtils.joinPMMLDelimited(Arrays.asList(""ab"", ""a b"", ""with \\""quotes\\"" "")));\n    assertEquals(""1 22 3"",\n                 TextUtils.joinPMMLDelimited(Arrays.asList(""1"", ""22"", ""3"")));\n    assertEquals(""\\"" c\\\\\\"" d \\\\\\""e \\"" \\"" c\\\\\\"" d \\\\\\""e \\"""",\n                 TextUtils.joinPMMLDelimited(Arrays.asList("" c\\"" d \\""e "", "" c\\"" d \\""e "")));\n  }\n']",ab;PMMLDelimited;quotes;with;join;join;PMMLDelimited;with;List;as,9.313225746154785e-10;8.076312951743603e-10;5.238689482212067e-10;4.656612873077393e-10;4.3655745685100555e-10;2.9103830456733704e-10;2.3646862246096134e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.892927169799805, -5.630670070648193, -4.700051784515381, -5.634556293487549, -5.294767379760742, -0.02432337962090969]",0.9759700298309326
2,"['  @Test\n  public void testJoinPMMLDelimitedNumbers() {\n    assertEquals(""-1.0 2.01 3.5"",\n                 TextUtils.joinPMMLDelimitedNumbers(Arrays.asList(-1.0, 2.01, 3.5)));\n  }\n']",Utils;join;Equals;PMMLDelimited;List;PMMLDelimited;Arrays;as;Text;Join,9.604264050722122e-10;2.3283064365386963e-10;1.7462298274040222e-10;-1.7462298274040222e-10;-2.9103830456733704e-10;-3.7834979593753815e-10;-4.656612873077393e-10;-4.656612873077393e-10;-6.984919309616089e-10;-1.280568540096283e-09,5,5,"[-5.962482452392578, -5.633673667907715, -4.638430595397949, -5.789689064025879, -5.356724739074707, -0.023879891261458397]",0.976402997970581
2,"['  @Test\n  public void testJoinJSON() {\n    assertEquals(""[\\""1\\"",\\""2\\"",\\""3\\""]"", TextUtils.joinJSON(Arrays.asList(""1"", ""2"", ""3"")));\n    assertEquals(""[\\""1 \\"",\\""2 \\"",\\""3\\""]"", TextUtils.joinJSON(Arrays.asList(""1 "", ""2 "", ""3"")));\n    assertEquals(""[]"", TextUtils.joinJSON(Collections.emptyList()));\n  }\n']",JSON;Equals;List;Collections;Equals;join;JSON;empty;as;JSON,1.3969838619232178e-09;6.548361852765083e-10;6.402842700481415e-10;4.94765117764473e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10,5,5,"[-5.927929878234863, -5.757905006408691, -4.67779541015625, -5.622297286987305, -5.251709461212158, -0.02426823042333126]",0.9760238528251648
2,"['  @Test\n  public void testJSONList() {\n    List<Object> list = new ArrayList<>();\n    list.add(""foo"");\n    list.add(2);\n    assertEquals(""[\\""A\\"",[\\""foo\\"",2],\\""B\\""]"", TextUtils.joinJSON(Arrays.asList(""A"", list, ""B"")));\n  }\n']",add;add;Arrays;List;join;list;list;list;Array;list,1.3387762010097504e-09;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.9902496337890625, -5.783992290496826, -4.632765293121338, -5.683387279510498, -5.291707992553711, -0.024028751999139786]",0.9762575030326843
2,"['  @Test\n  public void testJSONMap() {\n    Map<Object,Object> map = new HashMap<>();\n    map.put(1, ""bar"");\n    map.put(""foo"", 2);\n    assertEquals(""[\\""A\\"",{\\""1\\"":\\""bar\\"",\\""foo\\"":2},\\""B\\""]"",\n                 TextUtils.joinJSON(Arrays.asList(""A"", map, ""B"")));\n  }\n']",foo;map;JSON;Object;Map;map;JSONMap;new;as;foo,2.2118911147117615e-09;4.220055416226387e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.3283064365386963e-10;1.7462298274040222e-10;5.820766091346741e-11;0.0;0.0;-5.820766091346741e-11,5,5,"[-5.970535755157471, -5.729019641876221, -4.657951354980469, -5.655129432678223, -5.311570644378662, -0.0240086168050766]",0.9762772917747498
2,"['  @Test\n  public void testFunction() {\n    Tuple2<Tuple2<Integer,Integer>,Double> tuple =\n        new RatingToTupleDouble().call(new Rating(1, 2, 3.0));\n    assertEquals(1, tuple._1()._1().intValue());\n    assertEquals(2, tuple._1()._2().intValue());\n    assertEquals(3.0, tuple._2().doubleValue());\n  }\n']",Rating;Equals;Rating;uple;Double;Value;uple;double;tuple;new,8.731149137020111e-10;8.294591680169106e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.977935791015625, -5.702452182769775, -4.617254734039307, -5.770625114440918, -5.331186294555664, -0.023993371054530144]",0.9762921929359436
2,"['  @Test\n  public void testHyperParameterTuning() throws Exception {\n    Path tempDir = getTempDir();\n    Path dataDir =  tempDir.resolve(""data"");\n    Path modelDir = tempDir.resolve(""model"");\n\n    Map<String,Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.batch.update-class"", ALSUpdate.class.getName());\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", dataDir);\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir);\n    overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC);\n    overlayConfig.put(""oryx.batch.streaming.block-interval-sec"", BLOCK_INTERVAL_SEC);\n    // Choose pairs of values where the best is predictable\n    overlayConfig.put(""oryx.als.hyperparams.features"", ""[1,"" + TEST_FEATURES + ""]"");\n    overlayConfig.put(""oryx.ml.eval.candidates"", 2);\n    overlayConfig.put(""oryx.ml.eval.parallelism"", 2);\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n\n    startMessaging();\n\n    startServerProduceConsumeTopics(config,\n                                    new FeaturesALSDataGenerator(TEST_ELEMENTS,\n                                                                 TEST_ELEMENTS,\n                                                                 TEST_FEATURES),\n                                    DATA_TO_WRITE,\n                                    WRITE_INTERVAL_MSEC);\n\n    List<Path> modelInstanceDirs = IOUtils.listFiles(modelDir, ""*"");\n\n    checkIntervals(modelInstanceDirs.size(), DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);\n\n    Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    Path modelFile = latestModelDir.resolve(MLUpdate.MODEL_FILE_NAME);\n    assertTrue(""No such model file: "" + modelFile, Files.exists(modelFile));\n\n    PMML pmml = PMMLUtils.read(modelFile);\n    assertEquals(8, pmml.getExtensions().size());\n    assertNotNull(AppPMMLUtils.getExtensionValue(pmml, ""X""));\n    assertNotNull(AppPMMLUtils.getExtensionValue(pmml, ""Y""));\n    Map<String,Object> expected = new HashMap<>();\n    expected.put(""features"", TEST_FEATURES);\n    expected.put(""lambda"", 0.001);\n    expected.put(""implicit"", true);\n    expected.put(""alpha"", 1.0);\n    checkExtensions(pmml, expected);\n  }\n']",TEST;Hyper;resolve;dir;Dir;Temp;best;sec;data;als,1.1059455573558807e-09;9.313225746154785e-10;8.149072527885437e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.883394718170166, -5.371644496917725, -4.674564361572266, -5.74110221862793, -5.448575019836426, -0.024574536830186844]",0.9757249355316162
2,"['  @Test\n  public void testModelContent() throws Exception {\n    Path tempDir = getTempDir();\n    Path modelDir = tempDir.resolve(""model"");\n\n    Map<String,Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.batch.update-class"", ALSUpdate.class.getName());\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", tempDir.resolve(""data""));\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir);\n    overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", 10);\n    overlayConfig.put(""oryx.batch.streaming.block-interval-sec"", 1);\n    overlayConfig.put(""oryx.ml.eval.test-fraction"", 0);\n    overlayConfig.put(""oryx.als.implicit"", false);\n    overlayConfig.put(""oryx.als.hyperparams.lambda"", 0.0001);\n    overlayConfig.put(""oryx.als.hyperparams.features"", 2);\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n\n    startMessaging();\n\n    ModelContentDataGenerator generator = new ModelContentDataGenerator();\n    List<Pair<String, String>> updates = startServerProduceConsumeTopics(\n        config,\n        generator,\n        generator.getSentData().size(),\n        20);\n\n    Collection<String> modelUsers = null;\n    Collection<String> modelItems = null;\n    Map<String,Collection<String>> knownUsersItems = new HashMap<>();\n\n    for (Pair<String, String> km : updates) {\n      String type = km.getFirst();\n      String value = km.getSecond();\n      log.debug(""{} = {}"", type, value);\n\n      if (""UP"".equals(type)) {\n\n        List<?> update = MAPPER.readValue(value, List.class);\n        if (""X"".equals(update.get(0).toString())) {\n          String userID = update.get(1).toString();\n          @SuppressWarnings(""unchecked"")\n          Collection<String> userKnownItems = (Collection<String>) update.get(3);\n          knownUsersItems.put(userID, new ArrayList<>(userKnownItems));\n        }\n\n      } else { // ""MODEL""\n\n        PMML pmml = PMMLUtils.fromString(value);\n        modelUsers = AppPMMLUtils.getExtensionContent(pmml, ""XIDs"");\n        modelItems = AppPMMLUtils.getExtensionContent(pmml, ""YIDs"");\n\n      }\n\n    }\n\n    assertContainsSame(Arrays.asList(""A0"", ""B1"", ""C2""), modelUsers);\n    assertContainsSame(Arrays.asList(""A0"", ""B1"", ""C2"", ""D3""), modelItems);\n    assertContainsSame(Arrays.asList(""A0"", ""B1"", ""C2"", ""D3""), knownUsersItems.get(""A0""));\n    assertContainsSame(Arrays.asList(""C2"", ""D3""), knownUsersItems.get(""B1""));\n    assertContainsSame(Arrays.asList(""D3""), knownUsersItems.get(""C2""));\n  }\n']",Consume;streaming;ALSUpdate;Dir;model;Server;Exception;Config;Config;Dir,1.6298145055770874e-09;6.402842700481415e-10;4.220055416226387e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.546585164964199e-10;2.3283064365386963e-10,5,5,"[-5.934347152709961, -5.539188861846924, -4.6731977462768555, -5.742353439331055, -5.400015354156494, -0.02392679825425148]",0.9763572812080383
2,"['  @Test\n  public void testALS() throws Exception {\n    Path tempDir = getTempDir();\n    Path dataDir =  tempDir.resolve(""data"");\n    Path modelDir = tempDir.resolve(""model"");\n\n    Map<String,Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.batch.update-class"", ALSUpdate.class.getName());\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", dataDir);\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir);\n    overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC);\n    overlayConfig.put(""oryx.batch.streaming.block-interval-sec"", BLOCK_INTERVAL_SEC);\n    overlayConfig.put(""oryx.als.implicit"", false);\n    overlayConfig.put(""oryx.als.hyperparams.lambda"", LAMBDA);\n    overlayConfig.put(""oryx.als.hyperparams.features"", FEATURES);\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n\n    startMessaging();\n\n    List<Pair<String,String>> updates = startServerProduceConsumeTopics(\n        config,\n        new RandomALSDataGenerator(NUM_USERS_ITEMS, NUM_USERS_ITEMS, 1, 5),\n        DATA_TO_WRITE,\n        WRITE_INTERVAL_MSEC);\n\n    List<Path> modelInstanceDirs = IOUtils.listFiles(modelDir, ""*"");\n\n    int generations = modelInstanceDirs.size();\n    checkIntervals(generations, DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);\n\n    List<Collection<String>> userIDs = new ArrayList<>();\n    userIDs.add(Collections.<String>emptySet()); // Add dummy empty set as prior value\n    List<Collection<String>> productIDs = new ArrayList<>();\n    productIDs.add(Collections.<String>emptySet()); // Add dummy empty set as prior value\n\n    for (Path modelInstanceDir : modelInstanceDirs) {\n      Path modelFile = modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);\n      assertTrue(""Model file should exist: "" + modelFile, Files.exists(modelFile));\n      assertTrue(""Model file should not be empty: "" + modelFile, Files.size(modelFile) > 0);\n      PMMLUtils.read(modelFile); // Shouldn\'t throw exception\n      Path xDir = modelInstanceDir.resolve(""X"");\n      assertTrue(Files.exists(xDir));\n      userIDs.add(checkFeatures(xDir, userIDs.get(userIDs.size() - 1)));\n      Path yDir = modelInstanceDir.resolve(""Y"");\n      assertTrue(Files.exists(yDir));\n      productIDs.add(checkFeatures(yDir, productIDs.get(productIDs.size() - 1)));\n    }\n    // Remove dummy empty sets\n    userIDs.remove(0);\n    productIDs.remove(0);\n\n    Collection<String> expectedUsers = null;\n    Collection<String> expectedProducts = null;\n    Collection<String> seenUsers = null;\n    Collection<String> seenProducts = null;\n    Collection<String> lastModelUsers = null;\n    Collection<String> lastModelProducts = null;\n    int whichGeneration = -1;\n    for (Pair<String,String> km : updates) {\n\n      String type = km.getFirst();\n      String value = km.getSecond();\n\n      log.debug(""{} = {}"", type, value);\n\n      boolean isModel = ""MODEL"".equals(type);\n      boolean isUpdate = ""UP"".equals(type);\n      assertTrue(isModel || isUpdate);\n\n      if (isUpdate) {\n\n        assertNotNull(seenUsers);\n        assertNotNull(seenProducts);\n\n        List<?> update = MAPPER.readValue(value, List.class);\n        // First field is X or Y, depending on whether it\'s a user or item vector\n        String whichMatrixField = update.get(0).toString();\n        boolean isUser = ""X"".equals(whichMatrixField);\n        boolean isProduct = ""Y"".equals(whichMatrixField);\n        // Next is user/item ID\n        String id = update.get(1).toString();\n        assertTrue(isUser || isProduct);\n        if (isUser) {\n          seenUsers.add(id);\n        } else {\n          seenProducts.add(id);\n        }\n        // Verify that feature vector are valid floats\n        for (float f : MAPPER.convertValue(update.get(2), float[].class)) {\n          assertTrue(!Float.isNaN(f) && !Float.isInfinite(f));\n        }\n\n        if (isUser) {\n          // Only known-items for users exist now, not known users for items\n          @SuppressWarnings(""unchecked"")\n          Collection<String> knownUsersItems = (Collection<String>) update.get(3);\n          assertFalse(knownUsersItems.isEmpty());\n          for (String known : knownUsersItems) {\n            int i = ALSUtilsTest.stringIDtoID(known);\n            assertTrue(i >= 0 && i < NUM_USERS_ITEMS);\n          }\n        }\n\n      } else {\n\n        PMML pmml = PMMLUtils.fromString(value);\n\n        checkHeader(pmml.getHeader());\n\n        assertEquals(7, pmml.getExtensions().size());\n        Map<String,Object> expected = new HashMap<>();\n        expected.put(""features"", FEATURES);\n        expected.put(""lambda"", LAMBDA);\n        expected.put(""implicit"", false);\n        checkExtensions(pmml, expected);\n\n        // See if users/item sets seen in updates match what was expected from output\n        assertContainsSame(expectedUsers, seenUsers);\n        assertContainsSame(expectedProducts, seenProducts);\n\n        // Also check key sets reported in model\n        assertContainsSame(expectedUsers, lastModelUsers);\n        assertContainsSame(expectedProducts, lastModelProducts);\n\n        // Update for next round\n        whichGeneration++;\n        expectedUsers = userIDs.get(whichGeneration);\n        expectedProducts = productIDs.get(whichGeneration);\n        seenUsers = new HashSet<>();\n        seenProducts = new HashSet<>();\n        lastModelUsers = AppPMMLUtils.getExtensionContent(pmml, ""XIDs"");\n        lastModelProducts = AppPMMLUtils.getExtensionContent(pmml, ""YIDs"");\n\n      }\n    }\n\n  }\n']",Temp;BLOCK;Messaging;Dir;sec;ALSData;overlay;INTERVAL;size;Produce,1.1641532182693481e-09;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.637978807091713e-10;3.5652192309498787e-10;3.5652192309498787e-10;3.4924596548080444e-10,5,5,"[-5.896090507507324, -5.475636005401611, -4.676880359649658, -5.7443528175354, -5.407360076904297, -0.024220990017056465]",0.976069986820221
2,"['  @Test\n  public void testKMeans() throws Exception {\n    Path tempDir = getTempDir();\n    Path dataDir = tempDir.resolve(""data"");\n    Path modelDir = tempDir.resolve(""model"");\n\n    Map<String,Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.batch.update-class"", KMeansUpdate.class.getName());\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", dataDir);\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir);\n    overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC);\n    overlayConfig.put(""oryx.batch.streaming.block-interval-sec"", BLOCK_INTERVAL_SEC);\n    overlayConfig.put(""oryx.kmeans.hyperparams.k"", NUM_CLUSTERS);\n    overlayConfig.put(""oryx.kmeans.iterations"", 5);\n    overlayConfig.put(""oryx.input-schema.num-features"", NUM_FEATURES);\n    overlayConfig.put(""oryx.input-schema.categorical-features"", ""[]"");\n    overlayConfig.put(""oryx.kmeans.evaluation-strategy"", EVALUATION_STRATEGY);\n\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n\n    startMessaging();\n\n    List<Pair<String, String>> updates = startServerProduceConsumeTopics(\n        config,\n        new RandomKMeansDataGenerator(NUM_FEATURES),\n        DATA_TO_WRITE,\n        WRITE_INTERVAL_MSEC);\n\n    List<Path> modelInstanceDirs = IOUtils.listFiles(modelDir, ""*"");\n\n    int generations = modelInstanceDirs.size();\n    checkIntervals(generations, DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);\n\n    for (Path modelInstanceDir : modelInstanceDirs) {\n      Path modelFile = modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);\n      assertTrue(""Model file should exist: "" + modelFile, Files.exists(modelFile));\n      assertTrue(""Model file should not be empty: "" + modelFile, Files.size(modelFile) > 0);\n      PMMLUtils.read(modelFile); // Shouldn\'t throw exception\n    }\n\n    InputSchema schema = new InputSchema(config);\n\n    for (Pair<String,String> km : updates) {\n\n      String type = km.getFirst();\n      String value = km.getSecond();\n\n      assertEquals(""MODEL"", type);\n\n      PMML pmml = PMMLUtils.fromString(value);\n\n      checkHeader(pmml.getHeader());\n\n      checkDataDictionary(schema, pmml.getDataDictionary());\n\n      Model rootModel = pmml.getModels().get(0);\n\n      ClusteringModel clusteringModel = (ClusteringModel) rootModel;\n\n      // Check if Basic hyperparameters match\n      assertEquals(NUM_CLUSTERS, clusteringModel.getNumberOfClusters().intValue());\n      assertEquals(NUM_CLUSTERS, clusteringModel.getClusters().size());\n      assertEquals(NUM_FEATURES, clusteringModel.getClusteringFields().size());\n      assertEquals(ComparisonMeasure.Kind.DISTANCE,\n                   clusteringModel.getComparisonMeasure().getKind());\n      assertEquals(NUM_FEATURES, clusteringModel.getClusters().get(0).getArray().getN().intValue());\n      for (Cluster cluster : clusteringModel.getClusters()) {\n        assertTrue(cluster.getSize() > 0);\n      }\n    }\n  }\n']",Topics;generation;generations;sec;INTERVAL;Exception;Random;GEN;NUM;CLUSTERS,8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.83940015733242e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.511093720793724e-10,5,5,"[-5.9041523933410645, -5.475287437438965, -4.67725133895874, -5.744437217712402, -5.417910575866699, -0.024147799238562584]",0.9761414527893066
2,"['  @Test\n  public void testKMeans() throws Exception {\n    Path tempDir = getTempDir();\n    Path dataDir = tempDir.resolve(""data"");\n    Path modelDir = tempDir.resolve(""model"");\n\n    Map<String,Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.batch.update-class"", KMeansUpdate.class.getName());\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", dataDir);\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir);\n    overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC);\n    overlayConfig.put(""oryx.batch.streaming.block-interval-sec"", BLOCK_INTERVAL_SEC);\n    overlayConfig.put(""oryx.kmeans.hyperparams.k"", ""[2,100]"");\n    overlayConfig.put(""oryx.kmeans.iterations"", 20);\n    overlayConfig.put(""oryx.kmeans.runs"", 20);\n    overlayConfig.put(""oryx.input-schema.num-features"", NUM_FEATURES);\n    overlayConfig.put(""oryx.input-schema.categorical-features"", ""[]"");\n    overlayConfig.put(""oryx.ml.eval.candidates"", 3);\n    overlayConfig.put(""oryx.ml.eval.parallelism"", 2);\n    overlayConfig.put(""oryx.kmeans.evaluation-strategy"", EVALUATION_STRATEGY);\n\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n\n    startMessaging();\n\n    startServerProduceConsumeTopics(\n        config,\n        new RandomKMeansDataGenerator(NUM_FEATURES),\n        DATA_TO_WRITE,\n        WRITE_INTERVAL_MSEC);\n\n    List<Path> modelInstanceDirs = IOUtils.listFiles(modelDir, ""*"");\n\n    checkIntervals(modelInstanceDirs.size(), DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);\n\n    Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    Path modelFile = latestModelDir.resolve(MLUpdate.MODEL_FILE_NAME);\n    assertTrue(""No such model file: "" + modelFile, Files.exists(modelFile));\n\n    PMML pmml = PMMLUtils.read(modelFile);\n    Model rootModel = pmml.getModels().get(0);\n    ClusteringModel clusteringModel = (ClusteringModel) rootModel;\n\n    // Should have picked highest k\n    assertEquals(100, clusteringModel.getNumberOfClusters().intValue());\n  }\n']",sec;GEN;num;Random;candidates;sec;eval;temp;data;overlay,6.257323548197746e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;3.7834979593753815e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.764863893389702e-10;2.473825588822365e-10,5,5,"[-5.907385349273682, -5.512013912200928, -4.680634021759033, -5.736447334289551, -5.394801616668701, -0.02408449538052082]",0.9762033224105835
2,"['  @Test\n  public void testFetchSampleEvalData() {\n    JavaRDD<Vector> evalData = SilhouetteCoefficient.fetchSampleData(getRddOfVectors());\n    assertEquals(6, evalData.count());\n  }\n']",Silhouette;Vector;etch;Data;Sample;DD;eval;Java;ectors;count,1.4551915228366852e-09;1.280568540096283e-09;1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;2.3283064365386963e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10,5,5,"[-6.016490459442139, -5.626156330108643, -4.588140964508057, -5.85591459274292, -5.407045841217041, -0.023842062801122665]",0.976439893245697
2,"['  @Test\n  public void testDunnIndexForClustering() {\n    List<ClusterInfo> clusters = getClusters();\n    DunnIndex dunnIndex = new DunnIndex(clusters);\n    double eval = dunnIndex.evaluate(getRddOfVectors());\n    log.info(""Dunn Index for {} clusters: {}"", clusters.size(), eval);\n    assertEquals(1.7142857142857142, eval);\n  }\n']",info;clusters;Clusters;eval;dd;dun;log;clusters;List;Index,9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-6.007787704467773, -5.720331192016602, -4.623027801513672, -5.783714294433594, -5.3426032066345215, -0.02370050922036171]",0.9765781164169312
2,"['  @Test\n  public void testDaviesBouldinIndexForClustering() {\n    List<ClusterInfo> clusters = getClusters();\n    DaviesBouldinIndex daviesBouldinIndex = new DaviesBouldinIndex(clusters);\n    double eval = daviesBouldinIndex.evaluate(getRddOfVectors());\n    log.info(""Davies Bouldin Index for {} clusters: {}"", clusters.size(), eval);\n    assertEquals(0.638888888888889, eval);\n  }\n']",List;Equals;ouldin;eval;clusters;Clustering;Clusters;log;dd;get,8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.966794013977051, -5.692285537719727, -4.6649980545043945, -5.742749214172363, -5.322529315948486, -0.023719018325209618]",0.9765600562095642
2,"['  @Test\n  public void testSilhouetteCoefficientForClustering() {\n    List<ClusterInfo> clusters = getClusters();\n    SilhouetteCoefficient silhouetteCoefficient = new SilhouetteCoefficient(clusters);\n    double eval = silhouetteCoefficient.evaluate(getRddOfVectors());\n    log.info(""Silhouette Coefficient for {} clusters: {}"", clusters.size(), eval);\n    assertEquals(0.48484126984126985, eval);\n  }\n']",Silhouette;oefficient;Silhouette;silhouette;eval;evaluate;Silhouette;Clustering;ectors;clusters,8.87666828930378e-10;7.566995918750763e-10;7.130438461899757e-10;6.984919309616089e-10;5.820766091346741e-10;5.529727786779404e-10;5.311449058353901e-10;5.238689482212067e-10;5.238689482212067e-10;4.802132025361061e-10,5,5,"[-5.986974239349365, -5.672241687774658, -4.650431156158447, -5.769883632659912, -5.356540203094482, -0.023623088374733925]",0.9766537547111511
2,"['  @Test\n  public void testComputeSilhouetteCoefficient() {\n    assertEquals(5.0, SilhouetteCoefficient.calcSilhouetteCoefficient(-0.8, 0.2));\n    assertEquals(-1.25, SilhouetteCoefficient.calcSilhouetteCoefficient(0.8, -0.2));\n    assertEquals(0.0, SilhouetteCoefficient.calcSilhouetteCoefficient(1.5, 1.5));\n    assertEquals(1.0, SilhouetteCoefficient.calcSilhouetteCoefficient(1.5, Double.POSITIVE_INFINITY));\n    assertEquals(-1.0, SilhouetteCoefficient.calcSilhouetteCoefficient(Double.POSITIVE_INFINITY, 1.5));\n  }\n']",oefficient;Double;oefficient;cal;oefficient;cal;oefficient;Double;Silhouette;Equals,6.402842700481415e-10;5.238689482212067e-10;5.093170329928398e-10;3.637978807091713e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.0372681319713593e-10;1.7462298274040222e-10;1.6007106751203537e-10,5,5,"[-5.947147369384766, -5.650082588195801, -4.6532487869262695, -5.721627712249756, -5.332666397094727, -0.024053655564785004]",0.9762333035469055
2,"['  @Test\n  public void testRDF() throws Exception {\n    Path tempDir = getTempDir();\n    Path dataDir = tempDir.resolve(""data"");\n    Path modelDir = tempDir.resolve(""model"");\n\n    Map<String,Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.batch.update-class"", RDFUpdate.class.getName());\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", dataDir);\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir);\n    overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC);\n    overlayConfig.put(""oryx.batch.streaming.block-interval-sec"", BLOCK_INTERVAL_SEC);\n    overlayConfig.put(""oryx.rdf.num-trees"", NUM_TREES);\n    // Low values like 1 are deliberately bad, won\'t work\n    overlayConfig.put(""oryx.rdf.hyperparams.max-depth"", ""[1,"" + MAX_DEPTH + ""]"");\n    overlayConfig.put(""oryx.rdf.hyperparams.max-split-candidates"", MAX_SPLIT_CANDIDATES);\n    overlayConfig.put(""oryx.rdf.hyperparams.impurity"", IMPURITY);\n    overlayConfig.put(""oryx.input-schema.num-features"", 5);\n    overlayConfig.put(""oryx.input-schema.numeric-features"", ""[\\""4\\""]"");\n    overlayConfig.put(""oryx.input-schema.id-features"", ""[\\""0\\""]"");\n    overlayConfig.put(""oryx.input-schema.target-feature"", ""\\""4\\"""");\n    overlayConfig.put(""oryx.ml.eval.candidates"", 2);\n    overlayConfig.put(""oryx.ml.eval.parallelism"", 2);\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n\n    startMessaging();\n\n    startServerProduceConsumeTopics(\n        config,\n        new RandomNumericRDFDataGenerator(3),\n        DATA_TO_WRITE,\n        WRITE_INTERVAL_MSEC);\n\n    List<Path> modelInstanceDirs = IOUtils.listFiles(modelDir, ""*"");\n\n    checkIntervals(modelInstanceDirs.size(), DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);\n\n    Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    Path modelFile = latestModelDir.resolve(MLUpdate.MODEL_FILE_NAME);\n    assertTrue(""No such model file: "" + modelFile, Files.exists(modelFile));\n\n    PMML pmml = PMMLUtils.read(modelFile);\n\n    assertEquals(3, pmml.getExtensions().size());\n    Map<String,Object> expected = new HashMap<>();\n    expected.put(""maxSplitCandidates"", MAX_SPLIT_CANDIDATES);\n    expected.put(""maxDepth"", MAX_DEPTH);\n    expected.put(""impurity"", IMPURITY);\n    checkExtensions(pmml, expected);\n\n    Pair<DecisionForest,CategoricalValueEncodings> forestEncoding = RDFPMMLUtils.read(pmml);\n    DecisionForest forest = forestEncoding.getFirst();\n    CategoricalValueEncodings encoding = forestEncoding.getSecond();\n\n    for (int f1 = 0; f1 <= 1; f1++) {\n      for (int f2 = 0; f2 <= 1; f2++) {\n        for (int f3 = 0; f3 <= 1; f3++) {\n          NumericPrediction prediction = (NumericPrediction) forest.predict(new Example(null,\n              null,\n              CategoricalFeature.forEncoding(encoding.getValueEncodingMap(1).get(f1 == 1 ? ""A"" : ""B"")),\n              CategoricalFeature.forEncoding(encoding.getValueEncodingMap(2).get(f2 == 1 ? ""A"" : ""B"")),\n              CategoricalFeature.forEncoding(encoding.getValueEncodingMap(3).get(f3 == 1 ? ""A"" : ""B""))));\n          int expectedCount = f1 + f2 + f3;\n          if (expectedCount == 3) {\n            // TODO this might be a bug in Spark RDF. The tree never creates a node for all\n            // positive classes even though it should. Plenty of nodes, info gain, etc.\n            assertEquals(2, Math.round(prediction.getPrediction()));\n          } else {\n            assertEquals(expectedCount, Math.round(prediction.getPrediction()));\n          }\n        }\n      }\n    }\n\n  }\n']",bad;impurity;generation;Path;rees;sec;num;Low;class;GEN,6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.932491302490234, -5.5448126792907715, -4.678430080413818, -5.738434791564941, -5.404739856719971, -0.023850325495004654]",0.9764318466186523
2,"['  @Test\n  public void testRDF() throws Exception {\n    Path tempDir = getTempDir();\n    Path dataDir = tempDir.resolve(""data"");\n    Path modelDir = tempDir.resolve(""model"");\n\n    Map<String,Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.batch.update-class"", RDFUpdate.class.getName());\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", dataDir);\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir);\n    overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC);\n    overlayConfig.put(""oryx.batch.streaming.block-interval-sec"", BLOCK_INTERVAL_SEC);\n    overlayConfig.put(""oryx.rdf.num-trees"", NUM_TREES);\n    overlayConfig.put(""oryx.rdf.hyperparams.max-depth"", MAX_DEPTH);\n    overlayConfig.put(""oryx.rdf.hyperparams.max-split-candidates"", MAX_SPLIT_CANDIDATES);\n    overlayConfig.put(""oryx.rdf.hyperparams.impurity"", IMPURITY);\n    overlayConfig.put(""oryx.input-schema.num-features"", 5);\n    overlayConfig.put(""oryx.input-schema.categorical-features"", ""[\\""4\\""]"");\n    overlayConfig.put(""oryx.input-schema.id-features"", ""[\\""0\\""]"");\n    overlayConfig.put(""oryx.input-schema.target-feature"", ""\\""4\\"""");\n\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n\n    startMessaging();\n\n    List<Pair<String, String>> updates = startServerProduceConsumeTopics(\n        config,\n        new RandomCategoricalRDFDataGenerator(3),\n        DATA_TO_WRITE,\n        WRITE_INTERVAL_MSEC);\n\n    List<Path> modelInstanceDirs = IOUtils.listFiles(modelDir, ""*"");\n\n    int generations = modelInstanceDirs.size();\n    checkIntervals(generations, DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);\n\n    for (Path modelInstanceDir : modelInstanceDirs) {\n      Path modelFile = modelInstanceDir.resolve(MLUpdate.MODEL_FILE_NAME);\n      assertTrue(""Model file should exist: "" + modelFile, Files.exists(modelFile));\n      assertTrue(""Model file should not be empty: "" + modelFile, Files.size(modelFile) > 0);\n      PMMLUtils.read(modelFile); // Shouldn\'t throw exception\n    }\n\n    InputSchema schema = new InputSchema(config);\n\n    for (Pair<String,String> km : updates) {\n\n      String type = km.getFirst();\n      String value = km.getSecond();\n\n      assertEquals(""MODEL"", type);\n\n      PMML pmml = PMMLUtils.fromString(value);\n\n      checkHeader(pmml.getHeader());\n\n      assertEquals(3, pmml.getExtensions().size());\n      Map<String,Object> expected = new HashMap<>();\n      expected.put(""maxDepth"", MAX_DEPTH);\n      expected.put(""maxSplitCandidates"", MAX_SPLIT_CANDIDATES);\n      expected.put(""impurity"", IMPURITY);\n      checkExtensions(pmml, expected);\n\n      checkDataDictionary(schema, pmml.getDataDictionary());\n\n      Model rootModel = pmml.getModels().get(0);\n      if (rootModel instanceof TreeModel) {\n        assertEquals(NUM_TREES, 1);\n        TreeModel treeModel = (TreeModel) rootModel;\n        checkTreeModel(treeModel);\n      } else if (rootModel instanceof MiningModel) {\n        MiningModel miningModel = (MiningModel) rootModel;\n        Segmentation segmentation = miningModel.getSegmentation();\n        if (schema.isClassification()) {\n          assertEquals(MultipleModelMethodType.WEIGHTED_MAJORITY_VOTE,\n                       segmentation.getMultipleModelMethod());\n        } else {\n          assertEquals(MultipleModelMethodType.WEIGHTED_AVERAGE,\n                       segmentation.getMultipleModelMethod());\n        }\n        List<Segment> segments = segmentation.getSegments();\n        assertEquals(NUM_TREES, segments.size());\n        for (int i = 0; i < segments.size(); i++) {\n          Segment segment = segments.get(i);\n          assertEquals(Integer.toString(i), segment.getId());\n          assertTrue(segment.getPredicate() instanceof True);\n          assertEquals(1.0, segment.getWeight());\n          assertTrue(segment.getModel() instanceof TreeModel);\n          checkTreeModel((TreeModel) segment.getModel());\n        }\n\n      } else {\n        fail(""Wrong model type: "" + rootModel.getClass());\n        return;\n      }\n\n      if (schema.isClassification()) {\n        assertEquals(MiningFunctionType.CLASSIFICATION, rootModel.getFunctionName());\n      } else {\n        assertEquals(MiningFunctionType.REGRESSION, rootModel.getFunctionName());\n      }\n\n      checkMiningSchema(schema, rootModel.getMiningSchema());\n\n    }\n  }\n']",impurity;IMPURITY;Topics;Consume;INTERVAL;Messaging;GEN;model;SEC;hyperparams,8.731149137020111e-10;6.984919309616089e-10;5.093170329928398e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.9187541007995605, -5.522401809692383, -4.680034637451172, -5.7289204597473145, -5.402578830718994, -0.024004776030778885]",0.976280927658081
2,"['  @Test\n  public void testRDF() throws Exception {\n    Path tempDir = getTempDir();\n    Path dataDir = tempDir.resolve(""data"");\n    Path modelDir = tempDir.resolve(""model"");\n\n    Map<String,Object> overlayConfig = new HashMap<>();\n    overlayConfig.put(""oryx.batch.update-class"", RDFUpdate.class.getName());\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", dataDir);\n    ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir);\n    overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC);\n    overlayConfig.put(""oryx.batch.streaming.block-interval-sec"", BLOCK_INTERVAL_SEC);\n    overlayConfig.put(""oryx.rdf.num-trees"", 10);\n    overlayConfig.put(""oryx.rdf.hyperparams.max-depth"", MAX_DEPTH);\n    // Low values like 1 are deliberately bad, won\'t work\n    overlayConfig.put(""oryx.rdf.hyperparams.max-depth"", ""[1,"" + MAX_DEPTH + ""]"");\n    overlayConfig.put(""oryx.rdf.hyperparams.max-split-candidates"", MAX_SPLIT_CANDIDATES);\n    overlayConfig.put(""oryx.input-schema.num-features"", 5);\n    overlayConfig.put(""oryx.input-schema.categorical-features"", ""[\\""4\\""]"");\n    overlayConfig.put(""oryx.input-schema.id-features"", ""[\\""0\\""]"");\n    overlayConfig.put(""oryx.input-schema.target-feature"", ""\\""4\\"""");\n    overlayConfig.put(""oryx.ml.eval.candidates"", 3);\n    overlayConfig.put(""oryx.ml.eval.parallelism"", 2);\n    Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());\n\n    startMessaging();\n\n    startServerProduceConsumeTopics(\n        config,\n        new RandomCategoricalRDFDataGenerator(3),\n        DATA_TO_WRITE,\n        WRITE_INTERVAL_MSEC);\n\n    List<Path> modelInstanceDirs = IOUtils.listFiles(modelDir, ""*"");\n\n    checkIntervals(modelInstanceDirs.size(), DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);\n\n    Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    Path modelFile = latestModelDir.resolve(MLUpdate.MODEL_FILE_NAME);\n    assertTrue(""No such model file: "" + modelFile, Files.exists(modelFile));\n\n    PMML pmml = PMMLUtils.read(modelFile);\n\n    assertEquals(3, pmml.getExtensions().size());\n    Map<String,Object> expected = new HashMap<>();\n    expected.put(""maxSplitCandidates"", MAX_SPLIT_CANDIDATES);\n    expected.put(""maxDepth"", MAX_DEPTH);\n    expected.put(""impurity"", IMPURITY);\n    checkExtensions(pmml, expected);\n\n    Pair<DecisionForest,CategoricalValueEncodings> forestEncoding = RDFPMMLUtils.read(pmml);\n    DecisionForest forest = forestEncoding.getFirst();\n    CategoricalValueEncodings encoding = forestEncoding.getSecond();\n    Map<String,Integer> targetEncoding = encoding.getValueEncodingMap(4);\n\n    int[] zeroOne = { 0, 1 };\n    for (int f1 : zeroOne) {\n      for (int f2 : zeroOne) {\n        for (int f3 : zeroOne) {\n          CategoricalPrediction prediction =\n              (CategoricalPrediction) forest.predict(new Example(null,\n                                                                 null,\n                                                                 NumericFeature.forValue(f1),\n                                                                 NumericFeature.forValue(f2),\n                                                                 NumericFeature.forValue(f3)));\n          boolean expectedPositive = f1 == 1 && f2 == 1 && f3 == 1;\n          assertEquals(targetEncoding.get(Boolean.toString(expectedPositive)).intValue(),\n                       prediction.getMostProbableCategoryEncoding());\n        }\n      }\n    }\n\n  }\n']",Path;feature;eval;streaming;num;BLOCK;Low;DEPTH;rees;parallelism,3.637978807091713e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;3.055902197957039e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.923393726348877, -5.540047645568848, -4.682878494262695, -5.732548236846924, -5.395914554595947, -0.02391236461699009]",0.9763714075088501
2,"['  @Test\n  public void testMultiRecommendRescorer() {\n    RescorerProvider multi = new MultiRescorerProvider(\n        new SimpleModRescorerProvider(2), new SimpleModRescorerProvider(3));\n    \n    Rescorer provider = multi.getRecommendRescorer(Collections.singletonList(""ABCDE""), null);\n    assertNull(provider);\n\n    Rescorer provider2 = multi.getRecommendRescorer(Collections.singletonList(""AB""), null);\n    assertNotNull(provider2);\n    assertFalse(provider2 instanceof MultiRescorer);\n    assertTrue(provider2.isFiltered(""ABC""));\n    assertFalse(provider2.isFiltered(""AB""));\n\n    Rescorer provider3 = multi.getRecommendRescorer(Collections.singletonList(""ABCDEF""), null);\n    assertNotNull(provider3);\n    assertTrue(provider3 instanceof MultiRescorer);\n    assertTrue(provider3.isFiltered(""ABC""));\n    assertTrue(provider3.isFiltered(""AB""));\n    assertFalse(provider3.isFiltered(""ABCDEFABCDEF""));\n  }\n']",Recommend;Mod;ABCDE;ABC;Multi;provider;Simple;Multi;multi;provider,6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.937104225158691, -5.613246440887451, -4.662834644317627, -5.7412190437316895, -5.359226703643799, -0.02392796240746975]",0.976356029510498
2,"['  @Test\n  public void testMultiRecommendToAnonymousRescorer() {\n    RescorerProvider multi = new MultiRescorerProvider(\n        new SimpleModRescorerProvider(2), new SimpleModRescorerProvider(3));\n    \n    Rescorer provider = multi.getRecommendToAnonymousRescorer(\n        Collections.singletonList(""ABCDE""), null);\n    assertNull(provider);\n\n    Rescorer provider2 =\n        multi.getRecommendToAnonymousRescorer(Collections.singletonList(""AB""), null);\n    assertNotNull(provider2);\n    assertFalse(provider2 instanceof MultiRescorer);\n    assertTrue(provider2.isFiltered(""ABC""));\n    assertFalse(provider2.isFiltered(""AB""));\n\n    Rescorer provider3 =\n        multi.getRecommendToAnonymousRescorer(Collections.singletonList(""ABCDEF""), null);\n    assertNotNull(provider3);\n    assertTrue(provider3 instanceof MultiRescorer);\n    assertTrue(provider3.isFiltered(""ABC""));\n    assertTrue(provider3.isFiltered(""AB""));\n    assertFalse(provider3.isFiltered(""ABCDEF""));\n  }\n']",Multi;Provider;Recommend;AB;Provider;Collections;Rescore;Rescore;escorer;get,1.1641532182693481e-09;9.89530235528946e-10;9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;4.3655745685100555e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.925715923309326, -5.6150689125061035, -4.672530651092529, -5.72593355178833, -5.341461181640625, -0.023995814844965935]",0.9762898087501526
2,"['  @Test\n  public void testMultiMostPopularItemsRescorer() {\n    RescorerProvider multi = new MultiRescorerProvider(\n        new SimpleModRescorerProvider(2), new SimpleModRescorerProvider(3));\n    Rescorer provider = multi.getMostPopularItemsRescorer(null);\n    assertNotNull(provider);\n    assertTrue(provider instanceof MultiRescorer);\n    assertTrue(provider.isFiltered(""ABC""));\n    assertTrue(provider.isFiltered(""AB""));\n    assertFalse(provider.isFiltered(""ABCDEF""));\n  }\n']",Most;ABC;Multi;Most;Provider;multi;Provider;Popular;Filtered;get,1.1059455573558807e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.976626873016357, -5.656158447265625, -4.62938928604126, -5.804111957550049, -5.356028079986572, -0.023810051381587982]",0.9764713048934937
2,"['  @Test\n  public void testMultiMostActiveUsersRescorer() {\n    RescorerProvider multi = new MultiRescorerProvider(\n        new SimpleModRescorerProvider(2), new SimpleModRescorerProvider(3));\n    Rescorer provider = multi.getMostActiveUsersRescorer(null);\n    assertNotNull(provider);\n    assertTrue(provider instanceof MultiRescorer);\n    assertTrue(provider.isFiltered(""ABC""));\n    assertTrue(provider.isFiltered(""AB""));\n    assertFalse(provider.isFiltered(""ABCDEF""));\n  }\n']",ABC;Multi;Users;instanceof;Rescore;provider;escorer;Active;Provider;Mod,1.5133991837501526e-09;8.731149137020111e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.971456527709961, -5.6520233154296875, -4.630794048309326, -5.7969841957092285, -5.351922512054443, -0.02386627346277237]",0.976416289806366
2,"['  @Test\n  public void testMultiMostSimilarItemsRescorer() {\n    RescorerProvider multi = new MultiRescorerProvider(\n        new SimpleModRescorerProvider(2), new SimpleModRescorerProvider(3));\n    Rescorer provider = multi.getMostSimilarItemsRescorer(null);\n    assertNotNull(provider);\n    assertTrue(provider instanceof MultiRescorer);\n    assertTrue(provider.isFiltered(""ABC""));\n    assertTrue(provider.isFiltered(""ABCDE""));\n    assertFalse(provider.isFiltered(""ABCDEFABCDEF""));\n  }\n']",ABC;Provider;escorer;escorer;multi;Provider;Provider;Rescore;escorer;multi,5.122274160385132e-09;9.89530235528946e-10;9.313225746154785e-10;9.313225746154785e-10;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.974098205566406, -5.651988983154297, -4.62771463394165, -5.8002543449401855, -5.357465744018555, -0.0238531194627285]",0.9764289855957031
2,"['  @Test\n  public void testDefault() {\n    RescorerProvider noop = new NullProvider1();\n    assertNull(noop.getMostActiveUsersRescorer(null));\n    assertNull(noop.getMostPopularItemsRescorer(null));\n    assertNull(noop.getMostSimilarItemsRescorer(null));\n    assertNull(noop.getRecommendRescorer(null, null));\n    assertNull(noop.getRecommendToAnonymousRescorer(null, null));\n  }\n']",Default;Recommend;escorer;Null;Rescore;Anonymous;Items;noop;null;get,1.862645149230957e-09;1.6298145055770874e-09;9.89530235528946e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.988128662109375, -5.669605255126953, -4.614162921905518, -5.804698467254639, -5.344949722290039, -0.023937739431858063]",0.9763463735580444
2,"['  @Test\n  public void testLoad() {\n    RescorerProvider provider = AbstractRescorerProvider.loadRescorerProviders(\n        ""com.cloudera.oryx.app.als.NullProvider2"");\n    assertTrue(provider instanceof NullProvider2);\n    RescorerProvider multiProvider = AbstractRescorerProvider.loadRescorerProviders(\n        ""com.cloudera.oryx.app.als.NullProvider1,com.cloudera.oryx.app.als.NullProvider2"");\n    assertTrue(multiProvider instanceof MultiRescorerProvider);\n  }\n']",instanceof;escorer;als;Provider;clouder;True;als;multi;app;True,9.313225746154785e-10;8.440110832452774e-10;6.111804395914078e-10;5.093170329928398e-10;4.802132025361061e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.966446399688721, -5.64884090423584, -4.647834300994873, -5.791703224182129, -5.325332164764404, -0.023869415745139122]",0.9764131903648376
2,"['  @Test(expected = IllegalArgumentException.class)\n  public void testNoClass() {\n    AbstractRescorerProvider.loadRescorerProviders(""noSuchClass"");\n  }\n']",Illegal;Such;class;Class;Argument;Class;Providers;Exception;no;load,2.0954757928848267e-09;1.3969838619232178e-09;1.280568540096283e-09;1.0477378964424133e-09;6.111804395914078e-10;4.656612873077393e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-5.238689482212067e-10,5,5,"[-6.0098490715026855, -5.6814866065979, -4.598072052001953, -5.856712818145752, -5.306167125701904, -0.024042483419179916]",0.9762442111968994
2,"['  @Test(expected = ClassCastException.class)\n  public void testWrongClass() {\n    AbstractRescorerProvider.loadRescorerProviders(\n        ""com.cloudera.oryx.app.als.AbstractRescorerProviderTest"");\n  }\n']",expected;ory;Class;clouder;Class;com;class;escorer;Provider;escorer,1.3969838619232178e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;6.984919309616089e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;1.1641532182693481e-10,5,5,"[-5.98362398147583, -5.6237335205078125, -4.609221458435059, -5.852466583251953, -5.348526954650879, -0.024004079401493073]",0.9762816429138184
2,"['  @Test\n  public void testServingLayer() throws Exception {\n    Map<String,Object> overlay = buildOverlay();\n    Config config = ConfigUtils.overlayOn(overlay, ConfigUtils.getDefault());\n    doTestServingLayer(config);\n  }\n']",overlay;Default;Overlay;Layer;Utils;Serving;build;overlay;Utils;Layer,1.979060471057892e-09;1.3969838619232178e-09;1.1641532182693481e-09;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10,5,5,"[-5.991724967956543, -5.650171279907227, -4.604506969451904, -5.830016136169434, -5.346404075622559, -0.02401222474873066]",0.976273775100708
2,"['  @Test\n  public void testServingLayerSecure() throws Exception {\n    Path keystoreFile = SecureAPIConfigIT.buildKeystoreFile();\n    Map<String,Object> overlay = buildOverlay();\n    overlay.put(""oryx.serving.api.keystore-file"", ""\\"""" + keystoreFile + ""\\"""");\n    overlay.put(""oryx.serving.api.keystore-password"", ""oryxpass"");\n    Config config = ConfigUtils.overlayOn(overlay, ConfigUtils.getDefault());\n    try {\n      doTestServingLayer(config);\n    } finally {\n      Files.delete(Paths.get(config.getString(""oryx.serving.api.keystore-file"")));\n    }\n  }\n']",Secure;serving;delete;Secure;overlay;build;IT;Keystore;api;Serving,7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;4.3655745685100555e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.970603942871094, -5.661000728607178, -4.653661727905273, -5.763758659362793, -5.313154220581055, -0.023907477036118507]",0.976375937461853
2,"['    @Test\n    public void testStrategyUriSimple() throws Exception {\n        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""tag"", mContext.getFilesDir());\n\n        File file = buildPath(mContext.getFilesDir(), ""file.test"");\n        assertEquals(""content://authority/tag/file.test"",\n                strat.getUriForFile(file).toString());\n\n        file = buildPath(mContext.getFilesDir(), ""subdir"", ""file.test"");\n        assertEquals(""content://authority/tag/subdir/file.test"",\n                strat.getUriForFile(file).toString());\n\n        file = buildPath(Environment.getExternalStorageDirectory(), ""file.test"");\n        try {\n            strat.getUriForFile(file);\n            fail(""somehow got uri for file outside roots?"");\n        } catch (IllegalArgumentException e) {\n        }\n    }\n']",Exception;catch;Argument;Exception;ur;strat;Illegal;Equals;new;Directory,3.958120942115784e-09;3.725290298461914e-09;2.7939677238464355e-09;1.1641532182693481e-09;1.1641532182693481e-09;9.313225746154785e-10;9.313225746154785e-10;8.294591680169106e-10;7.785274647176266e-10;7.712515071034431e-10,5,5,"[-5.897942066192627, -5.4717936515808105, -4.680924892425537, -5.743056774139404, -5.397598743438721, -0.024243097752332687]",0.9760484099388123
2,"['    @Test\n    public void testStrategyUriJumpOutside() throws Exception {\n        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""tag"", mContext.getFilesDir());\n\n        File file = buildPath(mContext.getFilesDir(), "".."", ""file.test"");\n        try {\n            strat.getUriForFile(file);\n            fail(""file escaped!"");\n        } catch (IllegalArgumentException e) {\n        }\n    }\n']",Jump;File;Outside;Root;Exception;authority;ri;Dir;fail;strat,1.1641532182693481e-09;9.022187441587448e-10;7.566995918750763e-10;6.257323548197746e-10;6.111804395914078e-10;4.729372449219227e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-6.000101566314697, -5.551986217498779, -4.623635768890381, -5.836562633514404, -5.428183555603027, -0.023765351623296738]",0.9765148162841797
2,"['    @Test\n    public void testStrategyUriShortestRoot() throws Exception {\n        SimplePathStrategy strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""tag1"", mContext.getFilesDir());\n        strat.addRoot(""tag2"", new File(""/""));\n\n        File file = buildPath(mContext.getFilesDir(), ""file.test"");\n        assertEquals(""content://authority/tag1/file.test"",\n                strat.getUriForFile(file).toString());\n\n        strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""tag1"", new File(""/""));\n        strat.addRoot(""tag2"", mContext.getFilesDir());\n\n        file = buildPath(mContext.getFilesDir(), ""file.test"");\n        assertEquals(""content://authority/tag2/file.test"",\n                strat.getUriForFile(file).toString());\n    }\n']",Shortest;Exception;Strategy;authority;Simple;Files;strat;authority;File;file,7.130438461899757e-10;6.693881005048752e-10;5.675246939063072e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.4010660126805305e-10,5,5,"[-5.8821516036987305, -5.520722389221191, -4.6896209716796875, -5.712576866149902, -5.34444522857666, -0.024354908615350723]",0.9759393930435181
2,"['    @Test\n    public void testStrategyFileSimple() throws Exception {\n        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""tag"", mContext.getFilesDir());\n\n        File expectedRoot = mContext.getFilesDir().getCanonicalFile();\n        File file = buildPath(expectedRoot, ""file.test"");\n        assertEquals(file.getPath(),\n                strat.getFileForUri(Uri.parse(""content://authority/tag/file.test"")).getPath());\n\n        file = buildPath(expectedRoot, ""subdir"", ""file.test"");\n        assertEquals(file.getPath(), strat.getFileForUri(\n                Uri.parse(""content://authority/tag/subdir/file.test"")).getPath());\n    }\n']",Simple;Dir;Context;Equals;File;final;Canonical;Context;strat;File,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.693881005048752e-10;5.820766091346741e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.92901711165905e-10,5,5,"[-5.887485504150391, -5.488394737243652, -4.677994728088379, -5.7449140548706055, -5.377058982849121, -0.02431977353990078]",0.9759735465049744
2,"['    @Test\n    public void testStrategyFileJumpOutside() throws Exception {\n        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""tag"", mContext.getFilesDir());\n\n        try {\n            strat.getFileForUri(Uri.parse(""content://authority/tag/../file.test""));\n            fail(""file escaped!"");\n        } catch (SecurityException e) {\n        }\n    }\n']",Strategy;fail;tag;Exception;new;tag;Path;escaped;Context;For,2.270098775625229e-09;7.566995918750763e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.998863220214844, -5.5247297286987305, -4.6228790283203125, -5.844257831573486, -5.4406867027282715, -0.023807141929864883]",0.9764739871025085
2,"['    @Test\n    public void testStrategyEscaping() throws Exception {\n        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""t/g"", mContext.getFilesDir());\n\n        File expectedRoot = mContext.getFilesDir().getCanonicalFile();\n        File file = buildPath(expectedRoot, ""lol\\""wat?foo&bar"", ""wat.txt"");\n        final String expected = ""content://authority/t%2Fg/lol%22wat%3Ffoo%26bar/wat.txt"";\n\n        assertEquals(expected,\n                strat.getUriForFile(file).toString());\n        assertEquals(file.getPath(),\n                strat.getFileForUri(Uri.parse(expected)).getPath());\n    }\n']",Escaping;wat;Canonical;strat;wat;Path;Root;authority;bar;Root,3.725290298461914e-09;7.566995918750763e-10;7.566995918750763e-10;6.984919309616089e-10;5.238689482212067e-10;5.093170329928398e-10;4.802132025361061e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.910328388214111, -5.488637924194336, -4.686038494110107, -5.745366096496582, -5.400392532348633, -0.02406773716211319]",0.9762197136878967
2,"['    @Test\n    public void testStrategyExtraParams() throws Exception {\n        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""tag"", mContext.getFilesDir());\n\n        File expectedRoot = mContext.getFilesDir().getCanonicalFile();\n        File file = buildPath(expectedRoot, ""file.txt"");\n        assertEquals(file.getPath(), strat.getFileForUri(\n                Uri.parse(""content://authority/tag/file.txt?extra=foo"")).getPath());\n    }\n']",Dir;Canonical;authority;Dir;ri;strat;Params;strat;Strategy;Files,1.3969838619232178e-09;7.8580342233181e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.946478366851807, -5.510231018066406, -4.65490198135376, -5.7962236404418945, -5.414353370666504, -0.02395077422261238]",0.9763337969779968
2,"['    @Test\n    public void testStrategyExtraSeparators() throws Exception {\n        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");\n        strat.addRoot(""tag"", mContext.getFilesDir());\n\n        // When canonicalized, the path separators are trimmed\n        File inFile = new File(mContext.getFilesDir(), ""//foo//bar//"");\n        File expectedRoot = mContext.getFilesDir().getCanonicalFile();\n        File outFile = new File(expectedRoot, ""/foo/bar"");\n        final String expected = ""content://authority/tag/foo/bar"";\n\n        assertEquals(expected,\n                strat.getUriForFile(inFile).toString());\n        assertEquals(outFile.getPath(),\n                strat.getFileForUri(Uri.parse(expected)).getPath());\n    }\n']",Extra;Dir;canonicalized;trimmed;Simple;Files;ri;Path;expected;tag,1.1641532182693481e-09;8.149072527885437e-10;8.149072527885437e-10;6.111804395914078e-10;5.820766091346741e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.925845623016357, -5.456565856933594, -4.668797492980957, -5.775477409362793, -5.434416770935059, -0.024075418710708618]",0.976212203502655
2,"['    @Test\n    public void testQueryProjectionNull() throws Exception {\n        final File file = new File(mContext.getFilesDir(), TEST_FILE);\n        final Uri uri = stageFileAndGetUri(file, TEST_DATA);\n\n        // Verify that null brings out default columns\n        Cursor cursor = mResolver.query(uri, null, null, null, null);\n        try {\n            assertEquals(1, cursor.getCount());\n            cursor.moveToFirst();\n            assertEquals(TEST_FILE, cursor.getString(cursor.getColumnIndex(DISPLAY_NAME)));\n            assertEquals(TEST_DATA.length, cursor.getLong(cursor.getColumnIndex(SIZE)));\n        } finally {\n            cursor.close();\n        }\n    }\n']",null;out;Verify;finally;Long;EST;Column;that;Column;stage,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10,5,5,"[-5.921863079071045, -5.523300647735596, -4.660333156585693, -5.778217792510986, -5.395771026611328, -0.024053074419498444]",0.9762338995933533
2,"['    @Test\n    public void testQueryProjectionOrder() throws Exception {\n        final File file = new File(mContext.getFilesDir(), TEST_FILE);\n        final Uri uri = stageFileAndGetUri(file, TEST_DATA);\n\n        // Verify that swapped order works\n        Cursor cursor = mResolver.query(uri, new String[] {\n                SIZE, DISPLAY_NAME }, null, null, null);\n        try {\n            assertEquals(1, cursor.getCount());\n            cursor.moveToFirst();\n            assertEquals(TEST_DATA.length, cursor.getLong(0));\n            assertEquals(TEST_FILE, cursor.getString(1));\n        } finally {\n            cursor.close();\n        }\n\n        cursor = mResolver.query(uri, new String[] {\n                DISPLAY_NAME, SIZE }, null, null, null);\n        try {\n            assertEquals(1, cursor.getCount());\n            cursor.moveToFirst();\n            assertEquals(TEST_FILE, cursor.getString(0));\n            assertEquals(TEST_DATA.length, cursor.getLong(1));\n        } finally {\n            cursor.close();\n        }\n    }\n']",works;Long;finally;TEST;Order;file;close;Count;query;FILE,7.275957614183426e-10;6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.891333103179932, -5.475982666015625, -4.664065361022949, -5.739266395568848, -5.393697261810303, -0.024435877799987793]",0.9758602380752563
2,"['    @Test\n    public void testQueryExtraColumn() throws Exception {\n        final File file = new File(mContext.getFilesDir(), TEST_FILE);\n        final Uri uri = stageFileAndGetUri(file, TEST_DATA);\n\n        // Verify that extra column doesn\'t gook things up\n        Cursor cursor = mResolver.query(uri, new String[] {\n                SIZE, ""foobar"", DISPLAY_NAME }, null, null, null);\n        try {\n            assertEquals(1, cursor.getCount());\n            cursor.moveToFirst();\n            assertEquals(TEST_DATA.length, cursor.getLong(0));\n            assertEquals(TEST_FILE, cursor.getString(1));\n        } finally {\n            cursor.close();\n        }\n    }\n']",Query;Dir;FILE;foobar;DATA;IZE;doesn't;uri;Uri;ri,7.275957614183426e-10;6.984919309616089e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10,5,5,"[-5.928394317626953, -5.508256912231445, -4.66605281829834, -5.781714916229248, -5.414271354675293, -0.023945536464452744]",0.9763387441635132
2,"['    @Test\n    public void testReadFile() throws Exception {\n        final File file = new File(mContext.getFilesDir(), TEST_FILE);\n        final Uri uri = stageFileAndGetUri(file, TEST_DATA);\n\n        assertContentsEquals(TEST_DATA, uri);\n    }\n']",Equals;File;Read;FILE;DATA;Get;Context;File;file;ur,9.458744898438454e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.958088397979736, -5.563069820404053, -4.640773296356201, -5.827053546905518, -5.382676601409912, -0.023897582665085793]",0.9763857126235962
2,"['    @Test\n    public void testWriteFile() throws Exception {\n        final File file = new File(mContext.getFilesDir(), TEST_FILE);\n        final Uri uri = stageFileAndGetUri(file, TEST_DATA);\n\n        assertContentsEquals(TEST_DATA, uri);\n\n        final OutputStream out = mResolver.openOutputStream(uri);\n        try {\n            out.write(TEST_DATA_ALT);\n        } finally {\n            closeQuietly(out);\n        }\n\n        assertContentsEquals(TEST_DATA_ALT, uri);\n    }\n']",EST;Contents;stage;Files;Stream;FILE;Resolver;Dir;EST;TEST,1.1641532182693481e-09;6.693881005048752e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.94765117764473e-10;4.874891601502895e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.962148666381836, -5.55833101272583, -4.653939247131348, -5.805938720703125, -5.397654056549072, -0.023770704865455627]",0.9765095710754395
2,"['    @Test\n    public void testWriteMissingFile() throws Exception {\n        final File file = new File(mContext.getFilesDir(), TEST_FILE);\n        final Uri uri = stageFileAndGetUri(file, null);\n\n        try {\n            assertContentsEquals(new byte[0], uri);\n            fail(""Somehow read missing file?"");\n        } catch(FileNotFoundException e) {\n        }\n\n        final OutputStream out = mResolver.openOutputStream(uri);\n        try {\n            out.write(TEST_DATA_ALT);\n        } finally {\n            closeQuietly(out);\n        }\n\n        assertContentsEquals(TEST_DATA_ALT, uri);\n    }\n']",TEST;DATA;read;Files;file;EST;Found;Stream;missing;Contents,1.7462298274040222e-09;5.529727786779404e-10;4.0745362639427185e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.989109516143799, -5.509328365325928, -4.627069473266602, -5.841137409210205, -5.462477207183838, -0.023766981437802315]",0.9765133261680603
2,"['    @Test\n    public void testDelete() throws Exception {\n        final File file = new File(mContext.getFilesDir(), TEST_FILE);\n        final Uri uri = stageFileAndGetUri(file, TEST_DATA);\n\n        assertContentsEquals(TEST_DATA, uri);\n\n        assertEquals(1, mResolver.delete(uri, null, null));\n        assertEquals(0, mResolver.delete(uri, null, null));\n\n        try {\n            assertContentsEquals(new byte[0], uri);\n            fail(""Somehow read missing file?"");\n        } catch(FileNotFoundException e) {\n        }\n    }\n']",Found;Exception;catch;stage;FILE;DATA;final;Resolver;Contents;null,6.402842700481415e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10;2.473825588822365e-10,5,5,"[-5.910909652709961, -5.549805641174316, -4.673056602478027, -5.75232458114624, -5.357553005218506, -0.02411789447069168]",0.9761705994606018
2,"['    @Test\n    public void testMetaDataTargets() {\n        Uri actual;\n\n        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,\n                new File(""/proc/version""));\n        assertEquals(""content://moocow/test_root/proc/version"", actual.toString());\n\n        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,\n                new File(""/proc/1/mountinfo""));\n        assertEquals(""content://moocow/test_init/mountinfo"", actual.toString());\n\n        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,\n                buildPath(mContext.getFilesDir(), ""meow""));\n        assertEquals(""content://moocow/test_files/meow"", actual.toString());\n\n        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,\n                buildPath(mContext.getFilesDir(), ""thumbs"", ""rawr""));\n        assertEquals(""content://moocow/test_thumbs/rawr"", actual.toString());\n\n        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,\n                buildPath(mContext.getCacheDir(), ""up"", ""down""));\n        assertEquals(""content://moocow/test_cache/up/down"", actual.toString());\n\n        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,\n                buildPath(Environment.getExternalStorageDirectory(), ""Android"", ""obb"", ""foobar""));\n        assertEquals(""content://moocow/test_external/Android/obb/foobar"", actual.toString());\n\n        File[] externalFilesDirs = ContextCompat.getExternalFilesDirs(mContext, null);\n        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,\n            buildPath(externalFilesDirs[0], ""foo"", ""bar""));\n        assertEquals(""content://moocow/test_external_files/foo/bar"", actual.toString());\n\n        File[] externalCacheDirs = ContextCompat.getExternalCacheDirs(mContext);\n        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,\n            buildPath(externalCacheDirs[0], ""foo"", ""bar""));\n        assertEquals(""content://moocow/test_external_cache/foo/bar"", actual.toString());\n    }\n']",Path;raw;Files;thumbs;down;UTHORITY;files;TEST;Dir;actual,4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.67435859516263e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.725849151611328, -5.3722639083862305, -4.711954116821289, -5.584995269775391, -5.2676777839660645, -0.026139382272958755]",0.9741992950439453
2,"['    @Test\n    public void testColorToHSL() {\n        for (TestEntry entry : sEntryList) {\n            verifyColorToHSL(entry.rgb, entry.hsl);\n        }\n    }\n']",Color;gb;sl;List;Color;entry;Entry;HS;entry;Entry,2.153683453798294e-09;1.6298145055770874e-09;1.2223608791828156e-09;4.656612873077393e-10;4.656612873077393e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-3.4924596548080444e-10,5,5,"[-6.016037464141846, -5.556441783905029, -4.587710380554199, -5.888861179351807, -5.440524578094482, -0.023867903277277946]",0.976414680480957
2,"['    @Test\n    public void testHSLToColor() {\n        for (TestEntry entry : sEntryList) {\n            verifyHSLToColor(entry.hsl, entry.rgb);\n        }\n    }\n']",Color;gb;entry;entry;entry;sl;Color;List;verify;Entry,1.8044374883174896e-09;1.1641532182693481e-09;5.238689482212067e-10;4.656612873077393e-10;2.9103830456733704e-10;1.1641532182693481e-10;0.0;-3.4924596548080444e-10;-4.656612873077393e-10;-6.984919309616089e-10,5,5,"[-6.023153305053711, -5.568100452423096, -4.582061767578125, -5.895679950714111, -5.442202091217041, -0.023836590349674225]",0.9764452576637268
2,"['    @Test\n    public void testColorToHslLimits() {\n        final float[] hsl = new float[3];\n\n        for (TestEntry entry : sEntryList) {\n            ColorUtils.colorToHSL(entry.rgb, hsl);\n\n            assertTrue(hsl[0] >= 0f && hsl[0] <= 360f);\n            assertTrue(hsl[1] >= 0f && hsl[1] <= 1f);\n            assertTrue(hsl[2] >= 0f && hsl[2] <= 1f);\n        }\n    }\n']",Color;Color;float;List;sl;Entry;sl;entry;sl;sl,5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;1.4551915228366852e-10;1.1641532182693481e-10,5,5,"[-5.936379432678223, -5.601967811584473, -4.675228118896484, -5.729433536529541, -5.3765716552734375, -0.02380935288965702]",0.9764718413352966
2,"['    @Test\n    public void testColorToXYZ() {\n        for (TestEntry entry : sEntryList) {\n            verifyColorToXYZ(entry.rgb, entry.xyz);\n        }\n    }\n']",Color;XY;XY;xy;Color;verify;entry;Entry;List;entry,1.979060471057892e-09;1.862645149230957e-09;1.6298145055770874e-09;1.1641532182693481e-09;6.984919309616089e-10;1.1641532182693481e-10;0.0;-1.1641532182693481e-10;-2.3283064365386963e-10;-2.9103830456733704e-10,5,5,"[-6.0021514892578125, -5.539980411529541, -4.593290328979492, -5.884087562561035, -5.44234561920166, -0.0239159744232893]",0.9763677716255188
2,"['    @Test\n    public void testColorToLAB() {\n        for (TestEntry entry : sEntryList) {\n            verifyColorToLAB(entry.rgb, entry.lab);\n        }\n    }\n']",Entry;LAB;List;LAB;Entry;Color;entry;entry;entry;gb,9.89530235528946e-10;9.89530235528946e-10;9.313225746154785e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;0.0;0.0,5,5,"[-6.008296489715576, -5.533551216125488, -4.590500831604004, -5.892620086669922, -5.438785552978516, -0.023946933448314667]",0.9763374924659729
2,"['    @Test\n    public void testLABToXYZ() {\n        for (TestEntry entry : sEntryList) {\n            verifyLABToXYZ(entry.lab, entry.xyz);\n        }\n    }\n']",XY;List;Entry;entry;Entry;XY;entry;verify;LAB;entry,4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;5.820766091346741e-11;0.0;0.0;-5.820766091346741e-11;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.3283064365386963e-10,5,5,"[-5.996396541595459, -5.528498649597168, -4.591732025146484, -5.890780448913574, -5.437568187713623, -0.023995349183678627]",0.976290225982666
2,"['    @Test\n    public void testXYZToColor() {\n        for (TestEntry entry : sEntryList) {\n            verifyXYZToColor(entry.xyz, entry.rgb);\n        }\n    }\n']",xy;Entry;gb;XY;Entry;Color;entry;verify;entry;List,1.6298145055770874e-09;1.280568540096283e-09;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;1.1641532182693481e-10;-2.3283064365386963e-10;-2.3283064365386963e-10;-2.9103830456733704e-10,5,5,"[-6.005255699157715, -5.549456596374512, -4.5972795486450195, -5.884401321411133, -5.438128471374512, -0.023846834897994995]",0.9764353632926941
2,"['    @Test\n    public void testLABToColor() {\n        for (TestEntry entry : sEntryList) {\n            verifyLABToColor(entry.lab, entry.rgb);\n        }\n    }\n']",LAB;List;verify;Entry;Color;lab;gb;entry;entry;entry,8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;3.4924596548080444e-10;1.1641532182693481e-10;1.1641532182693481e-10;-8.731149137020111e-11,5,5,"[-6.012770652770996, -5.539194107055664, -4.584816932678223, -5.897707939147949, -5.443192481994629, -0.02393820509314537]",0.9763460159301758
2,"['    @Test\n    public void testMinAlphas() {\n        for (TestEntry entry : sEntryList) {\n            verifyMinAlpha(""Black title"", entry.rgb, entry.blackMinAlpha30,\n                    ColorUtils.calculateMinimumAlpha(Color.BLACK, entry.rgb, 3.0f));\n            verifyMinAlpha(""Black body"", entry.rgb, entry.blackMinAlpha45,\n                    ColorUtils.calculateMinimumAlpha(Color.BLACK, entry.rgb, 4.5f));\n            verifyMinAlpha(""White title"", entry.rgb, entry.whiteMinAlpha30,\n                    ColorUtils.calculateMinimumAlpha(Color.WHITE, entry.rgb, 3.0f));\n            verifyMinAlpha(""White body"", entry.rgb, entry.whiteMinAlpha45,\n                    ColorUtils.calculateMinimumAlpha(Color.WHITE, entry.rgb, 4.5f));\n        }\n    }\n']",entry;WHITE;List;black;White;Min;Alpha;Alpha;gb;Utils,1.280568540096283e-09;1.1641532182693481e-09;6.984919309616089e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;2.9831426218152046e-10;2.9103830456733704e-10;2.764863893389702e-10,5,5,"[-5.918501853942871, -5.530436992645264, -4.669683456420898, -5.730208396911621, -5.416828155517578, -0.024001983925700188]",0.9762836694717407
2,"['    @Test\n    public void testCircularInterpolationForwards() {\n        assertEquals(0f, ColorUtils.circularInterpolate(0, 180, 0f), 0f);\n        assertEquals(90f, ColorUtils.circularInterpolate(0, 180, 0.5f), 0f);\n        assertEquals(180f, ColorUtils.circularInterpolate(0, 180, 1f), 0f);\n    }\n']",Interpolate;Interpolate;Equals;circular;Utils;Color;Color;Utils;Color;circular,1.3969838619232178e-09;7.275957614183426e-10;4.802132025361061e-10;4.220055416226387e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.7462298274040222e-10;8.731149137020111e-11;0.0;-1.1641532182693481e-10,5,5,"[-5.920121669769287, -5.650831699371338, -4.67669153213501, -5.7320427894592285, -5.306283473968506, -0.023995699360966682]",0.9762900471687317
2,"['    @Test\n    public void testCircularInterpolationBackwards() {\n        assertEquals(180f, ColorUtils.circularInterpolate(180, 0, 0f), 0f);\n        assertEquals(90f, ColorUtils.circularInterpolate(180, 0, 0.5f), 0f);\n        assertEquals(0f, ColorUtils.circularInterpolate(180, 0, 1f), 0f);\n    }\n']",circular;Color;Interpolation;Utils;Equals;Color;Utils;Utils;circular;Circular,6.257323548197746e-10;4.656612873077393e-10;4.656612873077393e-10;2.3283064365386963e-10;1.6007106751203537e-10;1.1641532182693481e-10;5.820766091346741e-11;0.0;-8.731149137020111e-11;-1.1641532182693481e-10,5,5,"[-5.922670841217041, -5.6481757164001465, -4.6768693923950195, -5.734836578369141, -5.30809211730957, -0.023978007957339287]",0.9763071537017822
2,"['    @Test\n    public void testCircularInterpolationCrossZero() {\n        assertEquals(270f, ColorUtils.circularInterpolate(270, 90, 0f), 0f);\n        assertEquals(180f, ColorUtils.circularInterpolate(270, 90, 0.5f), 0f);\n        assertEquals(90f, ColorUtils.circularInterpolate(270, 90, 1f), 0f);\n    }\n']",Interpolate;Color;Equals;Utils;Utils;Cross;circular;Equals;circular;Color,9.313225746154785e-10;5.238689482212067e-10;3.637978807091713e-10;2.255546860396862e-10;2.0372681319713593e-10;1.1641532182693481e-10;0.0;-1.4551915228366852e-10;-2.0372681319713593e-10;-2.3283064365386963e-10,5,5,"[-5.916737079620361, -5.669277191162109, -4.681379318237305, -5.726316452026367, -5.289514064788818, -0.023999540135264397]",0.9762861728668213
2,"['    @Test\n    public void testIsRtlContext() {\n        assertEquals(false, LTR_FMT.isRtlContext());\n        assertEquals(true, RTL_FMT.isRtlContext());\n\n        assertEquals(false, BidiFormatter.getInstance(Locale.ENGLISH).isRtlContext());\n        assertEquals(true, BidiFormatter.getInstance(true).isRtlContext());\n    }\n']",idi;ENGLISH;Context;tl;idi;Equals;get;Context;false;false,6.984919309616089e-10;5.529727786779404e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.3283064365386963e-10;2.0372681319713593e-10;1.7462298274040222e-10;0.0;0.0,5,5,"[-5.846751689910889, -5.566579341888428, -4.6659321784973145, -5.748677730560303, -5.301762104034424, -0.02459302917122841]",0.975706934928894
2,"['    @Test\n    public void testBuilderIsRtlContext() {\n        assertEquals(false, new BidiFormatter.Builder(false).build().isRtlContext());\n        assertEquals(true, new BidiFormatter.Builder(true).build().isRtlContext());\n    }\n']",build;Builder;Builder;tl;Context;false;Builder;idi;true;new,1.5133991837501526e-09;1.1059455573558807e-09;1.0477378964424133e-09;6.984919309616089e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.93694543838501, -5.607290267944336, -4.629283428192139, -5.814391613006592, -5.34203577041626, -0.02413220703601837]",0.9761567711830139
2,"['    @Test\n    public void testIsRtl() {\n        assertEquals(true, BidiFormatter.getInstance(true).isRtl(HE));\n        assertEquals(true, BidiFormatter.getInstance(false).isRtl(HE));\n\n        assertEquals(false, BidiFormatter.getInstance(true).isRtl(EN));\n        assertEquals(false, BidiFormatter.getInstance(false).isRtl(EN));\n    }\n']",false;tl;EN;true;Formatter;false;get;idi;Instance;EN,1.4551915228366852e-09;1.2078089639544487e-09;9.313225746154785e-10;8.731149137020111e-10;7.130438461899757e-10;6.402842700481415e-10;6.111804395914078e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10,5,5,"[-5.881628036499023, -5.60651969909668, -4.670356273651123, -5.734437465667725, -5.306721210479736, -0.024317096918821335]",0.9759761691093445
2,"['    @Test\n    public void testUnicodeWrap() {\n        // Make sure an input of null doesn\'t crash anything.\n        assertNull(LTR_FMT.unicodeWrap(null));\n\n        // Uniform directionality in opposite context.\n        assertEquals(""uniform dir opposite to LTR context"",\n                RLE + ""."" + HE + ""."" + PDF + LRM,\n                LTR_FMT_EXIT_RESET.unicodeWrap(""."" + HE + "".""));\n        assertEquals(""uniform dir opposite to LTR context, stereo reset"",\n                LRM + RLE + ""."" + HE + ""."" + PDF + LRM,\n                LTR_FMT.unicodeWrap(""."" + HE + "".""));\n        assertEquals(""uniform dir opposite to LTR context, stereo reset, no isolation"",\n                RLE + ""."" + HE + ""."" + PDF,\n                LTR_FMT.unicodeWrap(""."" + HE + ""."", false));\n        assertEquals(""neutral treated as opposite to LTR context"",\n                RLE + ""."" + PDF + LRM,\n                LTR_FMT_EXIT_RESET.unicodeWrap(""."", TextDirectionHeuristicsCompat.RTL));\n        assertEquals(""uniform dir opposite to RTL context"",\n                LRE + ""."" + EN + ""."" + PDF + RLM,\n                RTL_FMT_EXIT_RESET.unicodeWrap(""."" + EN + "".""));\n        assertEquals(""uniform dir opposite to RTL context, stereo reset"",\n                RLM + LRE + ""."" + EN + ""."" + PDF + RLM,\n                RTL_FMT.unicodeWrap(""."" + EN + "".""));\n        assertEquals(""uniform dir opposite to RTL context, stereo reset, no isolation"",\n                LRE + ""."" + EN + ""."" + PDF,\n                RTL_FMT.unicodeWrap(""."" + EN + ""."", false));\n        assertEquals(""neutral treated as opposite to RTL context"",\n                LRE + ""."" + PDF + RLM,\n                RTL_FMT_EXIT_RESET.unicodeWrap(""."", TextDirectionHeuristicsCompat.LTR));\n\n        // We test mixed-directionality cases only with an explicit overall directionality parameter\n        // because the estimation logic is outside the sphere of BidiFormatter, and different\n        // estimators will treat them differently.\n\n        // Overall directionality matching context, but with opposite exit directionality.\n        assertEquals(""exit dir opposite to LTR context"",\n                EN + HE + LRM,\n                LTR_FMT_EXIT_RESET.unicodeWrap(EN + HE, TextDirectionHeuristicsCompat.LTR));\n        assertEquals(""exit dir opposite to LTR context, stereo reset"",\n                EN + HE + LRM,\n                LTR_FMT.unicodeWrap(EN + HE, TextDirectionHeuristicsCompat.LTR));\n        assertEquals(""exit dir opposite to LTR context, stereo reset, no isolation"",\n                EN + HE,\n                LTR_FMT.unicodeWrap(EN + HE, TextDirectionHeuristicsCompat.LTR, false));\n\n        assertEquals(""exit dir opposite to RTL context"",\n                HE + EN + RLM,\n                RTL_FMT_EXIT_RESET.unicodeWrap(HE + EN, TextDirectionHeuristicsCompat.RTL));\n        assertEquals(""exit dir opposite to RTL context, stereo reset"",\n                HE + EN + RLM,\n                RTL_FMT.unicodeWrap(HE + EN, TextDirectionHeuristicsCompat.RTL));\n        assertEquals(""exit dir opposite to RTL context, stereo reset, no isolation"",\n                HE + EN,\n                RTL_FMT.unicodeWrap(HE + EN, TextDirectionHeuristicsCompat.RTL, false));\n\n        // Overall directionality matching context, but with opposite entry directionality.\n        assertEquals(""entry dir opposite to LTR context"",\n                HE + EN,\n                LTR_FMT_EXIT_RESET.unicodeWrap(HE + EN, TextDirectionHeuristicsCompat.LTR));\n        assertEquals(""entry dir opposite to LTR context, stereo reset"",\n                LRM + HE + EN,\n                LTR_FMT.unicodeWrap(HE + EN, TextDirectionHeuristicsCompat.LTR));\n        assertEquals(""entry dir opposite to LTR context, stereo reset, no isolation"",\n                HE + EN,\n                LTR_FMT.unicodeWrap(HE + EN, TextDirectionHeuristicsCompat.LTR, false));\n\n        assertEquals(""entry dir opposite to RTL context"",\n                EN + HE,\n                RTL_FMT_EXIT_RESET.unicodeWrap(EN + HE, TextDirectionHeuristicsCompat.RTL));\n        assertEquals(""entry dir opposite to RTL context, stereo reset"",\n                RLM + EN + HE,\n                RTL_FMT.unicodeWrap(EN + HE, TextDirectionHeuristicsCompat.RTL));\n        assertEquals(""entry dir opposite to RTL context, stereo reset, no isolation"",\n                EN + HE,\n                RTL_FMT.unicodeWrap(EN + HE, TextDirectionHeuristicsCompat.RTL, false));\n\n        // Overall directionality matching context, but with opposite entry and exit directionality.\n        assertEquals(""entry and exit dir opposite to LTR context"",\n                HE + EN + HE + LRM,\n                LTR_FMT_EXIT_RESET.unicodeWrap(HE + EN + HE, TextDirectionHeuristicsCompat.LTR));\n        assertEquals(""entry and exit dir opposite to LTR context, stereo reset"",\n                LRM + HE + EN + HE + LRM,\n                LTR_FMT.unicodeWrap(HE + EN + HE, TextDirectionHeuristicsCompat.LTR));\n        assertEquals(""entry and exit dir opposite to LTR context, no isolation"",\n                HE + EN + HE,\n                LTR_FMT_EXIT_RESET.unicodeWrap(HE + EN + HE, TextDirectionHeuristicsCompat.LTR,\n                        false));\n\n        assertEquals(""entry and exit dir opposite to RTL context"",\n                EN + HE + EN + RLM,\n                RTL_FMT_EXIT_RESET.unicodeWrap(EN + HE + EN, TextDirectionHeuristicsCompat.RTL));\n        assertEquals(""entry and exit dir opposite to RTL context, no isolation"",\n                EN + HE + EN,\n                RTL_FMT_EXIT_RESET.unicodeWrap(EN + HE + EN, TextDirectionHeuristicsCompat.RTL,\n                        false));\n\n        // Entry and exit directionality matching context, but with opposite overall directionality.\n        assertEquals(""overall dir (but not entry or exit dir) opposite to LTR context"",\n                RLE + EN + HE + EN + PDF + LRM,\n                LTR_FMT_EXIT_RESET.unicodeWrap(EN + HE + EN, TextDirectionHeuristicsCompat.RTL));\n        assertEquals(""overall dir (but not entry or exit dir) opposite to LTR context, stereo reset"",\n                LRM + RLE + EN + HE + EN + PDF + LRM,\n                LTR_FMT.unicodeWrap(EN + HE + EN, TextDirectionHeuristicsCompat.RTL));\n        assertEquals(""overall dir (but not entry or exit dir) opposite to LTR context, no isolation"",\n                RLE + EN + HE + EN + PDF,\n                LTR_FMT_EXIT_RESET.unicodeWrap(EN + HE + EN, TextDirectionHeuristicsCompat.RTL,\n                        false));\n\n        assertEquals(""overall dir (but not entry or exit dir) opposite to RTL context"",\n                LRE + HE + EN + HE + PDF + RLM,\n                RTL_FMT_EXIT_RESET.unicodeWrap(HE + EN + HE, TextDirectionHeuristicsCompat.LTR));\n        assertEquals(""overall dir (but not entry or exit dir) opposite to RTL context, stereo reset"",\n                RLM + LRE + HE + EN + HE + PDF + RLM,\n                RTL_FMT.unicodeWrap(HE + EN + HE, TextDirectionHeuristicsCompat.LTR));\n        assertEquals(""overall dir (but not entry or exit dir) opposite to RTL context, no isolation"",\n                LRE + HE + EN + HE + PDF,\n                RTL_FMT_EXIT_RESET.unicodeWrap(HE + EN + HE, TextDirectionHeuristicsCompat.LTR,\n                        false));\n    }\n']",opposite;Unicode;isolation;Compat;context;opposite;anything;stereo;uniform;Equals,5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.861573696136475, -5.423853397369385, -4.672397136688232, -5.7178778648376465, -5.417141914367676, -0.024634087458252907]",0.975666880607605
2,"['    @Test\n    public void testCharSequenceApis() {\n        final CharSequence CS_HE = new SpannableString(HE);\n        assertEquals(true, BidiFormatter.getInstance(true).isRtl(CS_HE));\n\n        final SpannableString CS_EN_HE = new SpannableString(EN + HE);\n        final Object RELATIVE_SIZE_SPAN = new RelativeSizeSpan(1.2f);\n        CS_EN_HE.setSpan(RELATIVE_SIZE_SPAN, 0, EN.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n\n        Spanned wrapped;\n        Object[] spans;\n\n        wrapped = (Spanned) LTR_FMT.unicodeWrap(CS_EN_HE);\n        assertEquals(EN + HE + LRM, wrapped.toString());\n        spans = wrapped.getSpans(0, wrapped.length(), Object.class);\n        assertEquals(1, spans.length);\n        assertEquals(RELATIVE_SIZE_SPAN, spans[0]);\n        assertEquals(0, wrapped.getSpanStart(RELATIVE_SIZE_SPAN));\n        assertEquals(EN.length(), wrapped.getSpanEnd(RELATIVE_SIZE_SPAN));\n\n        wrapped = (Spanned) LTR_FMT.unicodeWrap(CS_EN_HE, TextDirectionHeuristicsCompat.LTR);\n        assertEquals(EN + HE + LRM, wrapped.toString());\n        spans = wrapped.getSpans(0, wrapped.length(), Object.class);\n        assertEquals(1, spans.length);\n        assertEquals(RELATIVE_SIZE_SPAN, spans[0]);\n        assertEquals(0, wrapped.getSpanStart(RELATIVE_SIZE_SPAN));\n        assertEquals(EN.length(), wrapped.getSpanEnd(RELATIVE_SIZE_SPAN));\n\n        wrapped = (Spanned) LTR_FMT.unicodeWrap(CS_EN_HE, false);\n        assertEquals(EN + HE, wrapped.toString());\n        spans = wrapped.getSpans(0, wrapped.length(), Object.class);\n        assertEquals(1, spans.length);\n        assertEquals(RELATIVE_SIZE_SPAN, spans[0]);\n        assertEquals(0, wrapped.getSpanStart(RELATIVE_SIZE_SPAN));\n        assertEquals(EN.length(), wrapped.getSpanEnd(RELATIVE_SIZE_SPAN));\n\n        wrapped = (Spanned) LTR_FMT.unicodeWrap(CS_EN_HE, TextDirectionHeuristicsCompat.LTR, false);\n        assertEquals(EN + HE, wrapped.toString());\n        spans = wrapped.getSpans(0, wrapped.length(), Object.class);\n        assertEquals(1, spans.length);\n        assertEquals(RELATIVE_SIZE_SPAN, spans[0]);\n        assertEquals(0, wrapped.getSpanStart(RELATIVE_SIZE_SPAN));\n        assertEquals(EN.length(), wrapped.getSpanEnd(RELATIVE_SIZE_SPAN));\n    }\n']",INCLUSIVE;RELATIVE;tl;true;spans;Char;Compat;Start;CS;Equals,9.89530235528946e-10;5.675246939063072e-10;4.656612873077393e-10;3.637978807091713e-10;3.346940502524376e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.546585164964199e-10,5,5,"[-5.838113784790039, -5.49861478805542, -4.68480920791626, -5.683086395263672, -5.356308460235596, -0.02466432750225067]",0.9756373763084412
2,"['    @Test\n    public void testBareboneCustomTabIntent() {\n        CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build();\n        Intent intent = customTabsIntent.intent;\n        assertNotNull(intent);\n        assertNull(customTabsIntent.startAnimationBundle);\n\n        assertEquals(Intent.ACTION_VIEW, intent.getAction());\n        assertTrue(intent.hasExtra(CustomTabsIntent.EXTRA_SESSION));\n        if (Build.VERSION.SDK_INT >= 18) {\n            assertNull(intent.getExtras().getBinder(CustomTabsIntent.EXTRA_SESSION));\n        }\n        assertNull(intent.getComponent());\n    }\n']",Animation;Component;Null;Action;ESSION;True;Intent;ESSION;build;Not,9.313225746154785e-10;6.402842700481415e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.3655745685100555e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10,5,5,"[-5.9138665199279785, -5.537325382232666, -4.6621413230896, -5.7832465171813965, -5.383410930633545, -0.024042483419179916]",0.9762442111968994
2,"['    @Test\n    public void testToolbarColor() {\n        int color = Color.RED;\n        Intent intent = new CustomTabsIntent.Builder().setToolbarColor(color).build().intent;\n        assertTrue(intent.hasExtra(CustomTabsIntent.EXTRA_TOOLBAR_COLOR));\n        assertEquals(color, intent.getIntExtra(CustomTabsIntent.EXTRA_TOOLBAR_COLOR, 0));\n    }\n']",Intent;Builder;color;Color;True;Intent;intent;Toolbar;Toolbar;TOOL,1.0477378964424133e-09;8.149072527885437e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.969412803649902, -5.625969409942627, -4.64755916595459, -5.805466175079346, -5.386190414428711, -0.02361074648797512]",0.9766657948493958
2,"['    @Test\n    public void testToolbarColorIsNotAResource() {\n        @ColorRes int colorId = android.R.color.background_dark;\n        int color = InstrumentationRegistry.getContext().getResources().getColor(colorId);\n        Intent intent = new CustomTabsIntent.Builder().setToolbarColor(colorId).build().intent;\n        assertFalse(""The color should not be a resource ID"",\n                color == intent.getIntExtra(CustomTabsIntent.EXTRA_TOOLBAR_COLOR, 0));\n        intent = new CustomTabsIntent.Builder().setToolbarColor(color).build().intent;\n        assertEquals(color, intent.getIntExtra(CustomTabsIntent.EXTRA_TOOLBAR_COLOR, 0));\n    }\n']",Color;AResource;Toolbar;Toolbar;Color;Not;intent;Equals;color;TOOL,1.1641532182693481e-09;7.130438461899757e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.885846138000488, -5.598005294799805, -4.714272975921631, -5.705873966217041, -5.303224563598633, -0.02403852716088295]",0.9762479662895203
2,"['    @Test\n    public void nextAndBack() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        final String secondFragmentName = generateMethodTestName(""second"");\n        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                List actions = (List) invocation.getArguments()[0];\n                actions.add(new GuidedAction.Builder().id(1000).title(""OK"").build());\n                return null;\n            }\n']",Answer;Answer;Invocation;Fragment;generate;Arguments;next;return;OK;Void,1.0477378964424133e-09;9.313225746154785e-10;8.149072527885437e-10;7.275957614183426e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.965311527252197, -5.384466648101807, -4.61331844329834, -5.846754550933838, -5.497129440307617, -0.024354327470064163]",0.9759398698806763
2,"['    @Test\n    public void restoreFragments() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        final String secondFragmentName = generateMethodTestName(""second"");\n        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                List actions = (List) invocation.getArguments()[0];\n                actions.add(new GuidedAction.Builder().id(1000).title(""OK"").build());\n                actions.add(new GuidedAction.Builder().id(1001).editable(true).title(""text"")\n                        .build());\n                actions.add(new GuidedAction.Builder().id(1002).editable(true).title(""text"")\n                        .autoSaveRestoreEnabled(false).build());\n                return null;\n            }\n']",Invocation;ock;Answer;On;Arguments;title;Method;Support;restore;generate,1.5425030142068863e-09;9.313225746154785e-10;9.313225746154785e-10;5.820766091346741e-10;4.94765117764473e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.9511613845825195, -5.330505847930908, -4.617237091064453, -5.828216552734375, -5.529773712158203, -0.024533243849873543]",0.9757652282714844
2,"['    @Test\n    public void finishGuidedStepSupportFragment_finishes_activity() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                List actions = (List) invocation.getArguments()[0];\n                actions.add(new GuidedAction.Builder().id(1001).title(""Finish activity"").build());\n                return null;\n            }\n']",Fragment;do;generate;Support;build;Step;Guided;Void;Action;Invocation,8.731149137020111e-10;6.984919309616089e-10;5.820766091346741e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.940410137176514, -5.384120464324951, -4.624011993408203, -5.826570510864258, -5.4634904861450195, -0.024518238380551338]",0.9757798910140991
2,"['    @Test\n    public void finishGuidedStepSupportFragment_finishes_fragments() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                List actions = (List) invocation.getArguments()[0];\n                actions.add(new GuidedAction.Builder().id(1001).title(""Finish fragments"").build());\n                return null;\n            }\n']",ock;mock;answer;Answer;actions;Throwable;Step;Support;Fragment;invocation,1.1641532182693481e-09;1.0477378964424133e-09;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.943504333496094, -5.3697638511657715, -4.617218494415283, -5.8357744216918945, -5.476900100708008, -0.024560926482081413]",0.9757382273674011
2,"['    @Test\n    public void subActions() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        final String secondFragmentName = generateMethodTestName(""second"");\n        final boolean[] expandSubActionInOnCreateView = new boolean[] {false};\n        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                GuidedStepTestSupportFragment.Provider obj = (GuidedStepTestSupportFragment.Provider)\n                        invocation.getMock();\n                if (expandSubActionInOnCreateView[0]) {\n                    obj.getFragment().expandAction(obj.getFragment().findActionById(1000), false);\n                }\n                return null;\n            }\n']",Answer;Answer;ock;invocation;Provider;null;Method;generate;expand;ock,8.149072527885437e-10;5.675246939063072e-10;5.093170329928398e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.764863893389702e-10;2.473825588822365e-10,5,5,"[-5.9460601806640625, -5.3297834396362305, -4.624384880065918, -5.829950332641602, -5.519017696380615, -0.02451707422733307]",0.9757810235023499
2,"['    @Test\n    public void nextAndBack() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        final String secondFragmentName = generateMethodTestName(""second"");\n        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                List actions = (List) invocation.getArguments()[0];\n                actions.add(new GuidedAction.Builder().id(1000).title(""OK"").build());\n                return null;\n            }\n']",Guided;Throwable;Method;Method;Invocation;answer;first;second;oid;Fragment,1.1641532182693481e-09;9.313225746154785e-10;8.440110832452774e-10;6.984919309616089e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10,5,5,"[-5.965588569641113, -5.387759685516357, -4.614743709564209, -5.842043399810791, -5.495752811431885, -0.02434350736439228]",0.9759505391120911
2,"['    @Test\n    public void restoreFragments() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        final String secondFragmentName = generateMethodTestName(""second"");\n        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                List actions = (List) invocation.getArguments()[0];\n                actions.add(new GuidedAction.Builder().id(1000).title(""OK"").build());\n                actions.add(new GuidedAction.Builder().id(1001).editable(true).title(""text"")\n                        .build());\n                actions.add(new GuidedAction.Builder().id(1002).editable(true).title(""text"")\n                        .autoSaveRestoreEnabled(false).build());\n                return null;\n            }\n']",invocation;mock;Void;restore;oid;Guided;add;Method;Throwable;auto,3.259629011154175e-09;2.0954757928848267e-09;1.1641532182693481e-09;8.149072527885437e-10;7.566995918750763e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.951148986816406, -5.330429553985596, -4.617214202880859, -5.826371669769287, -5.529331207275391, -0.02454126998782158]",0.9757574200630188
2,"['    @Test\n    public void finishGuidedStepFragment_finishes_activity() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                List actions = (List) invocation.getArguments()[0];\n                actions.add(new GuidedAction.Builder().id(1001).title(""Finish activity"").build());\n                return null;\n            }\n']",ock;mock;List;Name;invocation;Guided;List;Fragment;do;Invocation,2.444721758365631e-09;1.1641532182693481e-09;6.984919309616089e-10;6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.940863132476807, -5.387501239776611, -4.626661777496338, -5.8247504234313965, -5.4618239402771, -0.024487178772687912]",0.9758101105690002
2,"['    @Test\n    public void finishGuidedStepFragment_finishes_fragments() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                List actions = (List) invocation.getArguments()[0];\n                actions.add(new GuidedAction.Builder().id(1001).title(""Finish fragments"").build());\n                return null;\n            }\n']",ock;Provider;return;Provider;Guided;final;invocation;Answer;finish;Finish,1.862645149230957e-09;9.89530235528946e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.939295291900635, -5.373900890350342, -4.623008728027344, -5.824927806854248, -5.4692864418029785, -0.02455953136086464]",0.975739598274231
2,"['    @Test\n    public void subActions() throws Throwable {\n        final String firstFragmentName = generateMethodTestName(""first"");\n        final String secondFragmentName = generateMethodTestName(""second"");\n        final boolean[] expandSubActionInOnCreateView = new boolean[] {false};\n        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                GuidedStepTestFragment.Provider obj = (GuidedStepTestFragment.Provider)\n                        invocation.getMock();\n                if (expandSubActionInOnCreateView[0]) {\n                    obj.getFragment().expandAction(obj.getFragment().findActionById(1000), false);\n                }\n                return null;\n            }\n']",Method;mock;Provider;expand;invocation;Fragment;Fragment;new;first;Name,1.2223608791828156e-09;9.313225746154785e-10;5.238689482212067e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.947669506072998, -5.329536437988281, -4.623509883880615, -5.829151630401611, -5.521395206451416, -0.02451544627547264]",0.9757826328277588
2,"['    @Test\n    public void parallaxTest() throws Throwable {\n        final int mDefaultVerticalOffset = -300;\n        Intent intent = new Intent();\n        intent.putExtra(DetailsTestFragment.VERTICAL_OFFSET, mDefaultVerticalOffset);\n        mActivity = activityTestRule.launchActivity(intent);\n\n        final DetailsTestFragment detailsFragment = mActivity.getDetailsFragment();\n        DetailsBackgroundParallaxHelper parallaxHelper = detailsFragment.getParallaxHelper();\n        final CompositeDrawable drawable = (CompositeDrawable) parallaxHelper.getDrawable();\n        final FitWidthBitmapDrawable bitmapDrawable = (FitWidthBitmapDrawable)\n                (drawable.getChildAt(0).getDrawable());\n\n        PollingCheck.waitFor(4000, new PollingCheck.PollingCheckCondition() {\n            @Override\n            public boolean canProceed() {\n                return mActivity.getDetailsFragment().getRowsFragment().getAdapter().size() > 1;\n            }\n']",parallax;wait;Vertical;Background;Polling;Details;launch;Drawable;final;Activity,9.458744898438454e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.5652192309498787e-10;3.41970007866621e-10;3.055902197957039e-10,5,5,"[-5.948699474334717, -5.34147310256958, -4.629825115203857, -5.828853607177734, -5.524167537689209, -0.024380037561058998]",0.9759148955345154
2,"['    @Test\n    public void setupTest() {\n        double delta = 0.0002;\n        DetailsParallaxManager dpm = new DetailsParallaxManager(\n                mActivity.getDetailsFragment().getRowsFragment().getVerticalGridView());\n\n        assertNotNull(dpm.getParallax());\n\n        ParallaxRecyclerViewSource.ChildPositionProperty frameTop = dpm.getFrameTop();\n        assertEquals(0f, frameTop.getFraction(), delta);\n        assertEquals(0f, frameTop.getAdapterPosition(), delta);\n\n\n        ParallaxRecyclerViewSource.ChildPositionProperty frameBottom = dpm.getFrameBottom();\n        assertEquals(1f, frameBottom.getFraction(), delta);\n        assertEquals(0f, frameBottom.getAdapterPosition(), delta);\n    }\n']",Property;Bottom;Position;cler;new;Equals;pm;View;pm;get,6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.8870849609375, -5.544054985046387, -4.67454195022583, -5.743853569030762, -5.363231658935547, -0.02419399656355381]",0.9760963320732117
2,['    @Test\n    public void setSurfaceViewCallbackBeforeCreate() {\n        Intent intent = new Intent();\n        mActivity = activityTestRule.launchActivity(intent);\n\n        InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() {\n            @Override\n            public void run() {\n                mActivity.replaceVideoFragment();\n            }\n'],Callback;Intent;launch;Activity;intent;Instrumentation;Activity;Main;new;Activity,8.731149137020111e-10;8.731149137020111e-10;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.9992570877075195, -5.477069854736328, -4.611645698547363, -5.846812725067139, -5.4575300216674805, -0.02403736300766468]",0.9762492179870605
2,['    @Test\n    public void setSurfaceViewCallbackAfterCreate() {\n        Intent intent = new Intent();\n        mActivity = activityTestRule.launchActivity(intent);\n\n        VideoFragment fragment = (VideoFragment) mActivity.getFragmentManager().findFragmentById(\n                R.id.video_fragment);\n        assertNotNull(fragment);\n\n        fragment.setSurfaceHolderCallback(new SurfaceHolder.Callback() {\n            @Override\n            public void surfaceCreated(SurfaceHolder holder) {\n            }\n'],Callback;launch;new;fragment;fragment;Create;View;ById;surface;Activity,6.111804395914078e-10;5.820766091346741e-10;5.820766091346741e-10;5.784386303275824e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.969396114349365, -5.4726362228393555, -4.637048244476318, -5.815351486206055, -5.4587836265563965, -0.023967301473021507]",0.9763176441192627
2,"['    @Test\n    public void testTwoBackKeysWithBackStack() throws Throwable {\n        final long dataLoadingDelay = 1000;\n        Intent intent = new Intent();\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , true);\n        mActivity = activityTestRule.launchActivity(intent);\n\n        Thread.sleep(dataLoadingDelay + TRANSITION_LENGTH);\n\n        assertNotNull(mActivity.getBrowseTestSupportFragment().getMainFragment());\n        sendKeys(KeyEvent.KEYCODE_DPAD_RIGHT);\n        Thread.sleep(TRANSITION_LENGTH);\n        sendKeys(KeyEvent.KEYCODE_BACK, KeyEvent.KEYCODE_BACK);\n    }\n']",launch;Back;DPAD;Rule;Throwable;Loading;send;Keys;Back;Browse,1.0477378964424133e-09;8.149072527885437e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;6.402842700481415e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.8913350105285645, -5.475411891937256, -4.686688423156738, -5.778180122375488, -5.36517858505249, -0.024231113493442535]",0.9760600924491882
2,"['    @Test\n    public void testTwoBackKeysWithoutBackStack() throws Throwable {\n        final long dataLoadingDelay = 1000;\n        Intent intent = new Intent();\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , false);\n        mActivity = activityTestRule.launchActivity(intent);\n\n        Thread.sleep(dataLoadingDelay + TRANSITION_LENGTH);\n\n        assertNotNull(mActivity.getBrowseTestSupportFragment().getMainFragment());\n        sendKeys(KeyEvent.KEYCODE_DPAD_RIGHT);\n        Thread.sleep(TRANSITION_LENGTH);\n        sendKeys(KeyEvent.KEYCODE_BACK, KeyEvent.KEYCODE_BACK);\n    }\n']",Throwable;Without;Back;Stack;launch;Browse;ELAY;BACKSTACK;Thread;TRANSITION,1.2223608791828156e-09;1.1641532182693481e-09;1.1641532182693481e-09;1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.529727786779404e-10;4.656612873077393e-10;3.92901711165905e-10,5,5,"[-5.892134189605713, -5.485039234161377, -4.685728073120117, -5.777441501617432, -5.36009407043457, -0.024223551154136658]",0.9760674834251404
2,"['    @Test\n    public void testPressRightBeforeMainFragmentCreated() throws Throwable {\n        final long dataLoadingDelay = 1000;\n        Intent intent = new Intent();\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , false);\n        mActivity = activityTestRule.launchActivity(intent);\n\n        assertNull(mActivity.getBrowseTestSupportFragment().getMainFragment());\n        sendKeys(KeyEvent.KEYCODE_DPAD_RIGHT);\n    }\n']",DPAD;EXTRA;Key;Activity;IGHT;LOAD;DATA;Intent;Main;Browse,9.022187441587448e-10;6.984919309616089e-10;6.83940015733242e-10;6.402842700481415e-10;6.111804395914078e-10;5.820766091346741e-10;4.802132025361061e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.9650115966796875, -5.509355068206787, -4.631270885467529, -5.847970008850098, -5.440526008605957, -0.023863479495048523]",0.9764190316200256
2,"['    @Test\n    public void testSelectCardOnARow() throws Throwable {\n        final int selectRow = 10;\n        final int selectItem = 20;\n        Intent intent = new Intent();\n        final long dataLoadingDelay = 1000;\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , true);\n        mActivity = activityTestRule.launchActivity(intent);\n\n        Thread.sleep(dataLoadingDelay + TRANSITION_LENGTH);\n\n        Presenter.ViewHolderTask itemTask = Mockito.spy(\n                new ItemSelectionTask(mActivity, selectRow));\n\n        final ListRowPresenter.SelectItemViewHolderTask task =\n                new ListRowPresenter.SelectItemViewHolderTask(selectItem);\n        task.setItemTask(itemTask);\n\n        mActivity.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                mActivity.getBrowseTestSupportFragment().setSelectedPosition(selectRow, true, task);\n            }\n']",Select;Thread;put;Fragment;Thread;Intent;Activity;Support;Loading;On,6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;5.238689482212067e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.91616153717041, -5.332922458648682, -4.658603668212891, -5.806503772735596, -5.47907829284668, -0.024483572691679]",0.9758137464523315
2,"['    @Test\n    public void activityRecreate_notCrash() throws Throwable {\n        final long dataLoadingDelay = 1000;\n        Intent intent = new Intent();\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , false);\n        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_SET_ADAPTER_AFTER_DATA_LOAD, true);\n        mActivity = activityTestRule.launchActivity(intent);\n\n        Thread.sleep(dataLoadingDelay + TRANSITION_LENGTH);\n\n        InstrumentationRegistry.getInstrumentation().callActivityOnRestart(mActivity);\n        activityTestRule.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                mActivity.recreate();\n            }\n']",Recreate;sleep;LOAD;ADAPTER;Delay;On;TRANSITION;Activity;Restart;new,1.862645149230957e-09;1.3969838619232178e-09;5.238689482212067e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.9437689781188965, -5.400828838348389, -4.64755392074585, -5.828948497772217, -5.473788261413574, -0.02414570562541485]",0.9761435985565186
2,['    @Test\n    public void workaroundVideoViewStealFocus() {\n        Intent intent = new Intent();\n        mActivity = activityTestRule.launchActivity(intent);\n\n        assertFalse(mActivity.findViewById(R.id.videoView).hasFocus());\n        assertTrue(mActivity.getPlaybackFragment().getView().hasFocus());\n    }\n'],Video;workaround;new;launch;True;Activity;View;Intent;Fragment;Playback,1.1641532182693481e-09;1.1059455573558807e-09;1.0477378964424133e-09;1.0477378964424133e-09;8.731149137020111e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;5.238689482212067e-10;2.9103830456733704e-10,5,5,"[-5.976288318634033, -5.587739944458008, -4.618734836578369, -5.858847141265869, -5.408193588256836, -0.02376127615571022]",0.9765188097953796
2,"['    @Test\n    public void testFastForwardToMaxThenReset() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);\n        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_REWIND);\n\n        assertFalse(glue.isMediaPlaying());\n        glue.onActionClicked(playPause);\n        assertTrue(glue.isMediaPlaying());\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n\n        // click multiple times to reach PLAYBACK_SPEED_FAST_L2\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n        assertEquals(1, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L1, glue.getCurrentSpeedId());\n        assertEquals(2, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());\n        assertEquals(3, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());\n        assertEquals(3, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n\n        // press playPause again put it back to play\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n    }\n']",fast;AST;Fast;Speed;Forward;FORWARD;glue;ACTION;times;Action,6.83940015733242e-10;6.402842700481415e-10;6.111804395914078e-10;6.111804395914078e-10;4.656612873077393e-10;4.001776687800884e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10,5,5,"[-5.88915491104126, -5.417661190032959, -4.658179759979248, -5.778879165649414, -5.447577953338623, -0.02438422664999962]",0.9759105443954468
2,"['    @Test\n    public void testFastRewindToMaxThenReset() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);\n        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_REWIND);\n\n        assertFalse(glue.isMediaPlaying());\n        glue.onActionClicked(playPause);\n        assertTrue(glue.isMediaPlaying());\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n\n        // click multiple times to reach PLAYBACK_SPEED_FAST_L2\n        glue.onActionClicked(rewind);\n        assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(1, rewind.getIndex());\n        glue.onActionClicked(rewind);\n        assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L1, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(2, rewind.getIndex());\n        glue.onActionClicked(rewind);\n        assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(3, rewind.getIndex());\n        glue.onActionClicked(rewind);\n        assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(3, rewind.getIndex());\n\n        // press playPause again put it back to play\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n    }\n']",Forward;Action;Then;rewind;fast;rewind;new;play;PAUSE;Clicked,9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.093170329928398e-10;4.802132025361061e-10;4.656612873077393e-10;4.3655745685100555e-10;4.0745362639427185e-10,5,5,"[-5.892408847808838, -5.408252716064453, -4.65340518951416, -5.786637783050537, -5.4579668045043945, -0.024394463747739792]",0.9759006500244141
2,"['    @Test\n    public void testFastForwardAbortKeyCodes() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);\n        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_REWIND);\n\n        glue.onActionClicked(playPause);\n        assertTrue(glue.isMediaPlaying());\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n\n        // Testing keycodes that will not abort seek\n        final int[] noAbortSeekKeyCodes = new int[] {\n                KeyEvent.KEYCODE_DPAD_CENTER,\n                KeyEvent.KEYCODE_ENTER\n        };\n        for (int i = 0; i < noAbortSeekKeyCodes.length; i++) {\n            glue.onActionClicked(fastForward);\n            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n            assertEquals(1, fastForward.getIndex());\n            assertEquals(0, rewind.getIndex());\n            KeyEvent kv = new KeyEvent(KeyEvent.ACTION_DOWN, noAbortSeekKeyCodes[i]);\n            glue.onKey(null, noAbortSeekKeyCodes[i], kv);\n            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n            glue.onActionClicked(playPause);\n            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        }\n\n        // Testing abortSeekKeyCodes\n        final int[] abortSeekKeyCodes = new int[] {\n            KeyEvent.KEYCODE_DPAD_UP,\n            KeyEvent.KEYCODE_DPAD_DOWN,\n            KeyEvent.KEYCODE_DPAD_RIGHT,\n            KeyEvent.KEYCODE_DPAD_LEFT,\n            KeyEvent.KEYCODE_BACK,\n            KeyEvent.KEYCODE_ESCAPE\n        };\n        for (int i = 0; i < abortSeekKeyCodes.length; i++) {\n            glue.onActionClicked(fastForward);\n            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n            assertEquals(1, fastForward.getIndex());\n            assertEquals(0, rewind.getIndex());\n            KeyEvent kv = new KeyEvent(KeyEvent.ACTION_DOWN, abortSeekKeyCodes[i]);\n            glue.onKey(null, abortSeekKeyCodes[i], kv);\n            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n            assertEquals(0, fastForward.getIndex());\n            assertEquals(0, rewind.getIndex());\n        }\n    }\n']",Pause;lookup;REWIND;PAUSE;FORWARD;AST;on;Forward;Row;keycodes,6.111804395914078e-10;6.111804395914078e-10;5.602487362921238e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.346940502524376e-10;3.2014213502407074e-10,5,5,"[-5.89255952835083, -5.351291656494141, -4.648850917816162, -5.801721096038818, -5.482316493988037, -0.024555692449212074]",0.9757434725761414
2,"['    @Test\n    public void testRewindAbortKeyCodes() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);\n        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_REWIND);\n\n        glue.onActionClicked(playPause);\n        assertTrue(glue.isMediaPlaying());\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n\n        // Testing keycodes that will not abort seek\n        final int[] noAbortSeekKeyCodes = new int[] {\n                KeyEvent.KEYCODE_DPAD_CENTER,\n                KeyEvent.KEYCODE_ENTER\n        };\n        for (int i = 0; i < noAbortSeekKeyCodes.length; i++) {\n            glue.onActionClicked(rewind);\n            assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n            assertEquals(0, fastForward.getIndex());\n            assertEquals(1, rewind.getIndex());\n            KeyEvent kv = new KeyEvent(KeyEvent.ACTION_DOWN, noAbortSeekKeyCodes[i]);\n            glue.onKey(null, noAbortSeekKeyCodes[i], kv);\n            assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n            glue.onActionClicked(playPause);\n            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        }\n\n        // Testing abortSeekKeyCodes\n        final int[] abortSeekKeyCodes = new int[] {\n                KeyEvent.KEYCODE_DPAD_UP,\n                KeyEvent.KEYCODE_DPAD_DOWN,\n                KeyEvent.KEYCODE_DPAD_RIGHT,\n                KeyEvent.KEYCODE_DPAD_LEFT,\n                KeyEvent.KEYCODE_BACK,\n                KeyEvent.KEYCODE_ESCAPE\n        };\n        for (int i = 0; i < abortSeekKeyCodes.length; i++) {\n            glue.onActionClicked(rewind);\n            assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n            assertEquals(0, fastForward.getIndex());\n            assertEquals(1, rewind.getIndex());\n            KeyEvent kv = new KeyEvent(KeyEvent.ACTION_DOWN, abortSeekKeyCodes[i]);\n            glue.onKey(null, abortSeekKeyCodes[i], kv);\n            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n            assertEquals(0, fastForward.getIndex());\n            assertEquals(0, rewind.getIndex());\n        }\n    }\n']",DPAD;CENTER;Pause;Key;adapter;PLAY;new;that;Glue;KEY,1.7462298274040222e-09;1.367880031466484e-09;8.149072527885437e-10;7.566995918750763e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10,5,5,"[-5.892160415649414, -5.352250576019287, -4.650984764099121, -5.79967737197876, -5.48115873336792, -0.024542316794395447]",0.9757562875747681
2,"['    @Test\n    public void testMediaPauseButtonOnFF() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);\n\n        glue.onActionClicked(playPause);\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PAUSE));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());\n    }\n']",Speed;fast;Equals;Sparse;AST;Pause;adapter;on;Action;MEDIA,5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.92901711165905e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.874332904815674, -5.3919477462768555, -4.661966323852539, -5.783272743225098, -5.436859130859375, -0.024542083963751793]",0.9757566452026367
2,"['    @Test\n    public void testMediaPauseButtonOnPlay() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PAUSE));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());\n    }\n']",Play;Key;Pause;Sparse;new;row;Pause;NORMAL;Key;Row,9.89530235528946e-10;6.984919309616089e-10;6.402842700481415e-10;5.238689482212067e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.893585681915283, -5.415947914123535, -4.650369644165039, -5.810602188110352, -5.43865442276001, -0.024396441876888275]",0.9758987426757812
2,"['    @Test\n    public void testMediaPauseButtonOnPause() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n\n        glue.onActionClicked(playPause);\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PAUSE));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());\n    }\n']",Clicked;Event;Clicked;parse;Pause;Event;KEY;MEDIA;SPEED;Control,4.43833414465189e-10;4.3655745685100555e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.7834979593753815e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.884799957275391, -5.4011359214782715, -4.655503749847412, -5.8037028312683105, -5.4365434646606445, -0.024469846859574318]",0.9758270978927612
2,"['    @Test\n    public void testMediaPlayButtonOnFF() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);\n\n        glue.onActionClicked(playPause);\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PLAY));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n    }\n']",Media;Pause;Key;Event;Pause;MEDIA;Action;Playback;ODE;adapter,1.3969838619232178e-09;1.1641532182693481e-09;9.89530235528946e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.8746795654296875, -5.397359371185303, -4.665560245513916, -5.778909683227539, -5.434206008911133, -0.024506838992238045]",0.9757910370826721
2,"['    @Test\n    public void testMediaPlayButtonOnPlay() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PLAY));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n    }\n']",lookup;Pause;Play;ctions;Key;adapter;SPEED;Key;Event;Key,8.003553375601768e-10;7.275957614183426e-10;5.529727786779404e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.89089822769165, -5.425841808319092, -4.657645225524902, -5.803313255310059, -5.429393291473389, -0.024351999163627625]",0.9759421348571777
2,"['    @Test\n    public void testMediaPlayButtonOnPause() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n\n        glue.onActionClicked(playPause);\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PLAY));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n    }\n']",Play;Pause;Button;on;PAUSE;KEY;Speed;Media;Key;Playback,1.1641532182693481e-09;6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.384208634495735e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10,5,5,"[-5.889983177185059, -5.407623291015625, -4.653972148895264, -5.80424165725708, -5.440889835357666, -0.02441924251616001]",0.9758766293525696
2,"['    @Test\n    public void testMediaPlayPauseButtonOnFF() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);\n\n        glue.onActionClicked(playPause);\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n    }\n']",on;DOWN;Forward;fast;glue;Media;Sparse;Action;Pause;Playback,1.0477378964424133e-09;8.149072527885437e-10;5.820766091346741e-10;4.94765117764473e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.874137878417969, -5.397176742553711, -4.662381172180176, -5.779750347137451, -5.434653282165527, -0.02453533746302128]",0.975763201713562
2,"['    @Test\n    public void testMediaPlayPauseButtonOnPlay() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());\n    }\n']",Key;Play;Media;SPEED;Playback;Event;ACTION;Equals;PAUSE;Multi,5.238689482212067e-10;4.656612873077393e-10;3.4924596548080444e-10;3.346940502524376e-10;3.055902197957039e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.890504837036133, -5.421169281005859, -4.652617931365967, -5.805769920349121, -5.434013843536377, -0.0243949294090271]",0.9759002327919006
2,"['    @Test\n    public void testMediaPlayPauseButtonOnPause() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);\n\n        glue.onActionClicked(playPause);\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());\n        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,\n                KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE));\n        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n    }\n']",Sparse;Pause;Key;MEDIA;Action;ACTION;on;SPEED;new;glue,6.402842700481415e-10;5.238689482212067e-10;4.0745362639427185e-10;3.92901711165905e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9103830456733704e-10,5,5,"[-5.885653495788574, -5.396355628967285, -4.653637886047363, -5.805664539337158, -5.44269323348999, -0.024474266916513443]",0.9758228063583374
2,"['    @Test\n    public void immediateRemoveFragment() throws Throwable {\n        Intent intent = new Intent();\n        ActivityTestRule<ImmediateRemoveFragmentActivity> activityTestRule =\n                new ActivityTestRule<>(ImmediateRemoveFragmentActivity.class, false, false);\n        ImmediateRemoveFragmentActivity activity = activityTestRule.launchActivity(intent);\n\n        Thread.sleep(1000);\n    }\n']",sleep;Fragment;intent;activity;Activity;Immediate;Fragment;Rule;Activity;Remove,1.862645149230957e-09;1.0477378964424133e-09;1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;6.402842700481415e-10;4.656612873077393e-10,5,5,"[-5.98353910446167, -5.5273661613464355, -4.626253128051758, -5.855955600738525, -5.429436206817627, -0.023817501962184906]",0.9764639139175415
2,"['    @Test\n    public void itemRangeChangedTest() {\n        int itemCount = 4;\n        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);\n        adapter.add(new SectionRow(""section 1""));\n        for (int i = 0; i < itemCount; i++) {\n            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);\n            adapter.add(new ListRow(headerItem, createListRowAdapter()));\n        }\n\n        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);\n        listRowDataAdapter.registerObserver(dataObserver);\n        SectionRow sectionRow = new SectionRow(""section 11"");\n        adapter.replace(0, sectionRow);\n\n        verify(dataObserver, times(1)).onItemRangeChanged(0, 1);\n        assertEquals(5, listRowDataAdapter.size());\n    }\n']",times;replace;Range;Observer;Observer;Adapter;Object;verify;section;adapter,6.984919309616089e-10;5.820766091346741e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;4.0745362639427185e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.968616008758545, -5.502622127532959, -4.6417555809021, -5.8135809898376465, -5.449831008911133, -0.023840315639972687]",0.9764416217803955
2,"['    @Test\n    public void adapterSize_nonVisibleRowPresent() {\n        int itemCount = 4;\n        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);\n        adapter.add(new SectionRow(""section 1""));\n        for (int i = 0; i < itemCount; i++) {\n            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);\n            adapter.add(new ListRow(headerItem, createListRowAdapter()));\n        }\n\n        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);\n        assertEquals(5, listRowDataAdapter.size());\n\n        List<DividerRow> invisibleRows = new ArrayList<>();\n        invisibleRows.add(new DividerRow());\n        invisibleRows.add(new DividerRow());\n        adapter.addAll(5, invisibleRows);\n        verify(dataObserver, times(0)).onItemRangeInserted(anyInt(), anyInt());\n        assertEquals(5, listRowDataAdapter.size());\n    }\n']",Divider;non;Present;adapter;invisible;verify;Equals;Object;add;size,4.874891601502895e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.346940502524376e-10;3.346940502524376e-10;3.346940502524376e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.1827872842550278e-10;2.1827872842550278e-10,5,5,"[-5.946243762969971, -5.489795684814453, -4.651223659515381, -5.776637554168701, -5.443075180053711, -0.024005359038710594]",0.9762804508209229
2,"['    @Test\n    public void adapterSize_visibleRowInserted() {\n        int itemCount = 4;\n        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);\n        adapter.add(new SectionRow(""section 1""));\n        for (int i = 0; i < itemCount; i++) {\n            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);\n            adapter.add(new ListRow(headerItem, createListRowAdapter()));\n        }\n\n        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);\n        assertEquals(5, listRowDataAdapter.size());\n\n        listRowDataAdapter.registerObserver(dataObserver);\n        List<ListRow> visibleRows = new ArrayList<>();\n        visibleRows.add(new ListRow(new HeaderItem(0, ""Header 51""), createListRowAdapter()));\n        visibleRows.add(new ListRow(new HeaderItem(0, ""Header 52""), createListRowAdapter()));\n        visibleRows.add(new ListRow(new HeaderItem(0, ""Header 53""), createListRowAdapter()));\n        adapter.addAll(2, visibleRows);\n        verify(dataObserver, times(1)).onItemRangeInserted(2, 3);\n        assertEquals(8, listRowDataAdapter.size());\n    }\n']",adapter;Observer;times;Inserted;Selector;Size;add;Adapter;data;Data,6.984919309616089e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.473825588822365e-10;2.3283064365386963e-10,5,5,"[-5.934452533721924, -5.4745707511901855, -4.6524834632873535, -5.763608932495117, -5.449300289154053, -0.024103812873363495]",0.9761843681335449
2,"['    @Test\n    public void adapterSize_nonVisibleRowInserted() {\n        int itemCount = 4;\n        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);\n        adapter.add(new SectionRow(""section 1""));\n        for (int i = 0; i < itemCount; i++) {\n            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);\n            adapter.add(new ListRow(headerItem, createListRowAdapter()));\n        }\n\n        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);\n        assertEquals(5, listRowDataAdapter.size());\n\n        List<DividerRow> invisibleRows = new ArrayList<>();\n        invisibleRows.add(new DividerRow());\n        invisibleRows.add(new DividerRow());\n\n        listRowDataAdapter.registerObserver(dataObserver);\n        adapter.addAll(adapter.size(), invisibleRows);\n        verify(dataObserver, times(0)).onItemRangeInserted(anyInt(), anyInt());\n        assertEquals(5, listRowDataAdapter.size());\n\n        adapter.add(new DividerRow());\n        verify(dataObserver, times(0)).onItemRangeInserted(anyInt(), anyInt());\n        assertEquals(5, listRowDataAdapter.size());\n\n        adapter.add(new ListRow(new HeaderItem(0, ""Header 5""), createListRowAdapter()));\n        verify(dataObserver, times(1)).onItemRangeInserted(5, 4);\n        assertEquals(9, listRowDataAdapter.size());\n    }\n']",register;Inserted;adapter;Observer;Section;adapter;Divider;header;Object;Divider,5.529727786779404e-10;4.656612873077393e-10;3.7834979593753815e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.764863893389702e-10;2.6193447411060333e-10;2.473825588822365e-10;2.255546860396862e-10,5,5,"[-5.904314041137695, -5.441826343536377, -4.658694267272949, -5.746103763580322, -5.445608139038086, -0.02434234321117401]",0.9759515523910522
2,"['    @Test\n    public void adapterSize_visibleRowRemoved() {\n        int itemCount = 4;\n        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);\n        adapter.add(new SectionRow(""section 1""));\n        for (int i = 0; i < itemCount; i++) {\n            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);\n            adapter.add(new ListRow(headerItem, createListRowAdapter()));\n        }\n\n        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);\n        assertEquals(5, listRowDataAdapter.size());\n        adapter.add(new DividerRow());\n        assertEquals(5, listRowDataAdapter.size());\n\n        listRowDataAdapter.registerObserver(dataObserver);\n        adapter.removeItems(2, 2);\n        verify(dataObserver, times(1)).onItemRangeRemoved(2, 2);\n        assertEquals(3, listRowDataAdapter.size());\n    }\n']",Observer;Data;adapter;Items;list;Row;add;Selector;adapter;data,7.566995918750763e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6921043172478676e-10;2.6193447411060333e-10;2.4010660126805305e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.0372681319713593e-10,5,5,"[-5.9505109786987305, -5.51633882522583, -4.648928642272949, -5.776703357696533, -5.430111408233643, -0.02396334335207939]",0.9763216376304626
2,"['    @Test\n    public void adapterSize_nonVisibleRowRemoved() {\n        int itemCount = 4;\n        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);\n        adapter.add(new SectionRow(""section 1""));\n        for (int i = 0; i < itemCount; i++) {\n            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);\n            adapter.add(new ListRow(headerItem, createListRowAdapter()));\n        }\n\n        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);\n        assertEquals(5, listRowDataAdapter.size());\n        adapter.add(new DividerRow());\n        assertEquals(5, listRowDataAdapter.size());\n\n        listRowDataAdapter.registerObserver(dataObserver);\n        adapter.removeItems(4, 1);\n        verify(dataObserver, times(1)).onItemRangeRemoved(4, 1);\n        assertEquals(4, listRowDataAdapter.size());\n\n        adapter.removeItems(4, 1);\n        verify(dataObserver, times(0)).onItemRangeInserted(anyInt(), anyInt());\n        assertEquals(4, listRowDataAdapter.size());\n    }\n']",Observer;Removed;Section;remove;non;Items;adapter;add;Divider;Data,6.402842700481415e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10,5,5,"[-5.930737018585205, -5.4878740310668945, -4.650744915008545, -5.7683281898498535, -5.434310436248779, -0.02412557415664196]",0.9761631488800049
2,"['    @Test\n    public void adapterSize_rowsRemoved() {\n        int itemCount = 4;\n        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);\n        adapter.add(new SectionRow(""section 1""));\n        for (int i = 0; i < itemCount; i++) {\n            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);\n            adapter.add(new ListRow(headerItem, createListRowAdapter()));\n        }\n\n        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);\n        assertEquals(5, listRowDataAdapter.size());\n\n        adapter.add(new DividerRow());\n        assertEquals(5, listRowDataAdapter.size());\n\n        listRowDataAdapter.registerObserver(dataObserver);\n        adapter.removeItems(3, 3);\n        verify(dataObserver, times(1)).onItemRangeRemoved(3, 2);\n        assertEquals(3, listRowDataAdapter.size());\n    }\n']",Removed;adapter;presenter;Divider;Selector;Size;Adapter;Data;Adapter;header,1.076841726899147e-09;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.764863893389702e-10;2.764863893389702e-10,5,5,"[-5.938241958618164, -5.504325866699219, -4.655463695526123, -5.766664028167725, -5.426469802856445, -0.024030612781643867]",0.9762559533119202
2,"['    @Test\n    public void customObjectAdapterTest() {\n        int itemCount = 4;\n        ArrayObjectAdapter adapter = new CustomAdapter(presenterSelector);\n        adapter.add(new SectionRow(""section 1""));\n        for (int i = 0; i < itemCount; i++) {\n            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);\n            adapter.add(new ListRow(headerItem, createListRowAdapter()));\n        }\n\n        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);\n        assertEquals(5, listRowDataAdapter.size());\n\n        adapter.add(new DividerRow());\n        assertEquals(5, listRowDataAdapter.size());\n\n        listRowDataAdapter.registerObserver(dataObserver);\n        adapter.removeItems(3, 3);\n        verify(dataObserver, times(1)).onChanged();\n        assertEquals(3, listRowDataAdapter.size());\n\n        Mockito.reset(dataObserver);\n        adapter.add(new DividerRow());\n        verify(dataObserver, times(1)).onChanged();\n        assertEquals(3, listRowDataAdapter.size());\n    }\n']",Observer;header;Mockito;Observer;adapter;Adapter;Items;list;adapter;Array,5.966285243630409e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.935539722442627, -5.4557108879089355, -4.643335342407227, -5.795857906341553, -5.458220481872559, -0.024131275713443756]",0.976157546043396
2,"['    @Test\n    public void testJanuaryToFebruaryTransitionForLeapYear() throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Intent intent = new Intent();\n\n        String title = ""Date Picker Transition Test"";\n        String breadcrumb = ""Month Transition Test Demo"";\n        String description = ""Testing the transition from Jan to Feb (leap year)"";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n\n        Calendar cal = Calendar.getInstance();\n\n        cal.set(Calendar.YEAR, 2016);   // 2016 is a leap year\n        cal.set(Calendar.MONTH, Calendar.JANUARY);\n        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\n        Date initialDate = cal.getTime();\n\n        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(\n                mContext)\n                .id(0)\n                .title(""Date"")\n                .date(initialDate.getTime())\n                .datePickerFormat(""DMY"")\n                .build();\n\n        actionList.add(action);\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        DatePicker mPickerView = (DatePicker) mActivity.findViewById(\n                R.id.guidedactions_activator_item);\n\n        verticalScrollToFieldValue(Calendar.MONTH, Calendar.FEBRUARY, new int[] {0, 1, 2},\n                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testJanuaryToFebruaryTransitionForLeapYear() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",MONTH;the;set;For;initial;Attributes;Calendar;to;Testing;DAY,7.566995918750763e-10;3.92901711165905e-10;3.2014213502407074e-10;3.2014213502407074e-10;2.764863893389702e-10;2.6193447411060333e-10;2.3283064365386963e-10;2.3283064365386963e-10;2.3283064365386963e-10;1.8917489796876907e-10,5,5,"[-5.933127403259277, -5.375946044921875, -4.652575492858887, -5.790781021118164, -5.508081436157227, -0.024213893339037895]",0.9760767817497253
2,"['    @Test\n    public void testFebruaryToMarchTransitionForLeapYear() throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Intent intent = new Intent();\n\n        String title = ""Date Picker Transition Test"";\n        String breadcrumb = ""Month Transition Test Demo"";\n        String description = ""Testing the transition from Feb to Mar (leap year)"";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n\n        Calendar cal = Calendar.getInstance();\n\n        cal.set(Calendar.YEAR, 2016);\n        cal.set(Calendar.MONTH, Calendar.FEBRUARY);\n        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\n        Date initialDate = cal.getTime();\n\n        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(\n                mContext)\n                .id(0)\n                .title(""Date"")\n                .date(initialDate.getTime())\n                .datePickerFormat(""DMY"")\n                .build();\n\n        actionList.add(action);\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        DatePicker mPickerView = (DatePicker) mActivity.findViewById(\n                R.id.guidedactions_activator_item);\n\n        verticalScrollToFieldValue(Calendar.MONTH, Calendar.MARCH, new int[] {0, 1, 2},\n                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testFebruaryToMarchTransition() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",Fragment;Guidance;year;Picker;Guidance;title;Attributes;initial;Calendar;February,9.74978320300579e-10;8.149072527885437e-10;5.820766091346741e-10;5.020410753786564e-10;4.94765117764473e-10;4.94765117764473e-10;4.3655745685100555e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.941787242889404, -5.378409385681152, -4.64979362487793, -5.801413059234619, -5.5146074295043945, -0.024146053940057755]",0.9761431217193604
2,"['    @Test\n    public void testJanuaryToFebruaryTransitionForNonLeapYear() throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Intent intent = new Intent();\n\n        String title = ""Date Picker Transition Test"";\n        String breadcrumb = ""Month Transition Test Demo"";\n        String description = ""Testing the transition from Jan to Feb (nonleap year)"";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n\n        Calendar cal = Calendar.getInstance();\n\n        cal.set(Calendar.YEAR, 2017);   // 2017 is a leap year\n        cal.set(Calendar.MONTH, Calendar.JANUARY);\n        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\n        Date initialDate = cal.getTime();\n\n        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(\n                mContext)\n                .id(0)\n                .title(""Date"")\n                .date(initialDate.getTime())\n                .datePickerFormat(""DMY"")\n                .build();\n\n        actionList.add(action);\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        DatePicker mPickerView = (DatePicker) mActivity.findViewById(\n                R.id.guidedactions_activator_item);\n\n        verticalScrollToFieldValue(Calendar.MONTH, Calendar.FEBRUARY, new int[] {0, 1, 2},\n                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testJanuaryToFebruaryTransition() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",Format;Leap;Non;Year;description;breadcrumb;EAR;action;Stylist;Date,5.820766091346741e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.837623469531536e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.9342570304870605, -5.382397651672363, -4.652040481567383, -5.78980827331543, -5.506824016571045, -0.02419387921690941]",0.9760963320732117
2,"['    @Test\n    public void testFebruaryToMarchTransitionForNonLeapYear() throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Intent intent = new Intent();\n\n        String title = ""Date Picker Transition Test"";\n        String breadcrumb = ""Month Transition Test Demo"";\n        String description = ""Testing the transition from Feb to Mar (nonleap year)"";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n\n        Calendar cal = Calendar.getInstance();\n\n        cal.set(Calendar.YEAR, 2017);\n        cal.set(Calendar.MONTH, Calendar.FEBRUARY);\n        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\n        Date initialDate = cal.getTime();\n\n        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(\n                mContext)\n                .id(0)\n                .title(""Date"")\n                .date(initialDate.getTime())\n                .datePickerFormat(""DMY"")\n                .build();\n\n        actionList.add(action);\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        DatePicker mPickerView = (DatePicker) mActivity.findViewById(\n                R.id.guidedactions_activator_item);\n\n        verticalScrollToFieldValue(Calendar.MONTH, Calendar.MARCH, new int[] {0, 1, 2},\n                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testFebruaryToMarchTransition() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",February;Feb;Non;Throwable;description;breadcrumb;Date;Guidance;Date;guidance,1.979060471057892e-09;6.984919309616089e-10;5.820766091346741e-10;5.675246939063072e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;2.9103830456733704e-10;2.9103830456733704e-10,5,5,"[-5.946652412414551, -5.383949279785156, -4.647871017456055, -5.802325248718262, -5.516672611236572, -0.024114402011036873]",0.976173996925354
2,"['    @Test\n    public void testDecemberToNovemberTransition() throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Intent intent = new Intent();\n\n        String title = ""Date Picker Transition Test"";\n        String breadcrumb = ""Month Transition Test Demo"";\n        String description = ""Testing the transition from Dec to Nov"";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n\n        Calendar cal = Calendar.getInstance();\n\n        cal.set(Calendar.YEAR, 2016);\n        cal.set(Calendar.MONTH, Calendar.DECEMBER);\n        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\n        Date initialDate = cal.getTime();\n\n        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(\n                mContext)\n                .id(0)\n                .title(""Date"")\n                .date(initialDate.getTime())\n                .datePickerFormat(""DMY"")\n                .build();\n\n        actionList.add(action);\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        DatePicker mPickerView = (DatePicker) mActivity.findViewById(\n                R.id.guidedactions_activator_item);\n\n        verticalScrollToFieldValue(Calendar.MONTH, Calendar.NOVEMBER, new int[] {0, 1, 2},\n                mPickerView, KeyEvent.KEYCODE_DPAD_UP);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testDecemberToNovember() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",description;icker;DAY;Transition;long;add;date;Month;Picker;Testing,8.149072527885437e-10;5.820766091346741e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.947990417480469, -5.377994060516357, -4.646683216094971, -5.803164005279541, -5.521886825561523, -0.024126620963215828]",0.9761621952056885
2,"['    @Test\n    public void testNovemberToOctoberTransition() throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Intent intent = new Intent();\n\n        String title = ""Date Picker Transition Test"";\n        String breadcrumb = ""Month Transition Test Demo"";\n        String description = ""Testing the transition from Nov to Oct"";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n\n        Calendar cal = Calendar.getInstance();\n\n        cal.set(Calendar.YEAR, 2016);\n        cal.set(Calendar.MONTH, Calendar.NOVEMBER);\n        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\n        Date initialDate = cal.getTime();\n\n        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(\n                mContext)\n                .id(0)\n                .title(""Date"")\n                .date(initialDate.getTime())\n                .datePickerFormat(""DMY"")\n                .build();\n\n        actionList.add(action);\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        DatePicker mPickerView = (DatePicker) mActivity.findViewById(\n                R.id.guidedactions_activator_item);\n\n        verticalScrollToFieldValue(Calendar.MONTH, Calendar.OCTOBER, new int[] {0, 1, 2},\n                mPickerView, KeyEvent.KEYCODE_DPAD_UP);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testNovemberToOctober() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",OVEMBER;October;icker;November;Time;guidance;DAY;icker;breadcrumb;Action,5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.9103830456733704e-10;2.6921043172478676e-10,5,5,"[-5.94046688079834, -5.381258487701416, -4.650992393493652, -5.797785758972168, -5.5123090744018555, -0.02414512261748314]",0.976144015789032
2,"['    @Test\n    public void testLeapToNonLeapYearTransition() throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Intent intent = new Intent();\n\n        String title = ""Date Picker Transition Test"";\n        String breadcrumb = ""Leap Year Transition Test Demo"";\n        String description = ""Testing Feb transition from leap to nonlneap year"";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n\n        Calendar cal = Calendar.getInstance();\n\n        cal.set(Calendar.YEAR, 2016);   // 2016 is a leap year\n        cal.set(Calendar.MONTH, Calendar.FEBRUARY);\n        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\n        Date initialDate = cal.getTime();\n\n        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(\n                mContext)\n                .id(0)\n                .title(""Date"")\n                .date(initialDate.getTime())\n                .datePickerFormat(""DMY"")\n                .build();\n\n        actionList.add(action);\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        DatePicker mPickerView = (DatePicker) mActivity.findViewById(\n                R.id.guidedactions_activator_item);\n\n        verticalScrollToFieldValue(Calendar.YEAR, 2017, new int[] {0, 1, 2},\n                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testLeapToNonLeapYearTransition() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",Throwable;leap;Transition;MONTH;Non;breadcrumb;Format;set;Year;intent,1.1932570487260818e-09;8.149072527885437e-10;5.238689482212067e-10;4.656612873077393e-10;4.0745362639427185e-10;3.710738383233547e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10,5,5,"[-5.941634654998779, -5.379096508026123, -4.6483869552612305, -5.799290657043457, -5.516449451446533, -0.02415594458580017]",0.9761334657669067
2,"['    @Test\n    public void testNonLeapToLeapYearTransition() throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Intent intent = new Intent();\n\n        String title = ""Date Picker Transition Test"";\n        String breadcrumb = ""Leap Year Transition Test Demo"";\n        String description = ""Testing Feb transition from nonleap to leap year"";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n\n        Calendar cal = Calendar.getInstance();\n\n        cal.set(Calendar.YEAR, 2017);   // 2017 is a non-leap year\n        cal.set(Calendar.MONTH, Calendar.FEBRUARY);\n        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\n        Date initialDate = cal.getTime();\n\n        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(\n                mContext)\n                .id(0)\n                .title(""Date"")\n                .date(initialDate.getTime())\n                .datePickerFormat(""DMY"")\n                .build();\n\n        actionList.add(action);\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        DatePicker mPickerView = (DatePicker) mActivity.findViewById(\n                R.id.guidedactions_activator_item);\n\n        verticalScrollToFieldValue(Calendar.YEAR, 2016, new int[] {0, 1, 2},\n                mPickerView, KeyEvent.KEYCODE_DPAD_UP);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testNonLeapToLeapYearTransition() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",to;Transition;Picker;Non;icker;Feb;Guidance;FEBR;leap;Guidance,5.820766091346741e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.5652192309498787e-10;3.4924596548080444e-10;3.346940502524376e-10;3.2014213502407074e-10;2.9831426218152046e-10,5,5,"[-5.934921741485596, -5.37423849105835, -4.649518013000488, -5.7994256019592285, -5.513519763946533, -0.024197719991207123]",0.9760926961898804
2,"['    @Test\n    public void testDateRangesMDYFormat() throws Throwable {\n\n        long startTime = System.currentTimeMillis();\n\n        GuidedDatePickerAction[] datePickerActions = setupDateActionsForMinAndMaxRangeTests();\n\n        scrollToMinAndMaxDates(new int[] {1, 0, 2}, datePickerActions[0]);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testDateRangesMDYFormat() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",sleep;ctions;ests;date;Mill;execution;ctions;start;Time;scroll,2.7939677238464355e-09;9.022187441587448e-10;6.402842700481415e-10;4.94765117764473e-10;4.656612873077393e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10,5,5,"[-5.887048721313477, -5.5474419593811035, -4.710413932800293, -5.722246170043945, -5.337360858917236, -0.024041086435317993]",0.9762454628944397
2,"['    @Test\n    public void testDateRangesWithYearEqual() throws Throwable {\n\n        long startTime = System.currentTimeMillis();\n\n        GuidedDatePickerAction[] datePickerActions = setupDateActionsForMinAndMaxRangeTests();\n\n        scrollToMinAndMaxDates(new int[] {0, 1, 2}, datePickerActions[2]);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testDateRangesWithYearEqual() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",WAIT;Max;sleep;Max;Min;Year;execution;anges;Range;scroll,1.0477378964424133e-09;9.313225746154785e-10;9.313225746154785e-10;9.313225746154785e-10;8.149072527885437e-10;6.984919309616089e-10;6.984919309616089e-10;6.984919309616089e-10;5.820766091346741e-10;5.238689482212067e-10,5,5,"[-5.882513046264648, -5.543686866760254, -4.71168327331543, -5.720375061035156, -5.333851337432861, -0.024081004783511162]",0.9762066006660461
2,"['    @Test\n    public void testDateRangesWithMonthAndYearEqual() throws Throwable {\n\n        long startTime = System.currentTimeMillis();\n\n        GuidedDatePickerAction[] datePickerActions = setupDateActionsForMinAndMaxRangeTests();\n\n        scrollToMinAndMaxDates(new int[] {0, 1, 2}, datePickerActions[3]);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testDateRangesWithMonthAndYearEqual() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",WAIT;execution;Year;scroll;long;long;start;ates;ctions;Time,2.2118911147117615e-09;9.313225746154785e-10;7.566995918750763e-10;5.238689482212067e-10;4.3655745685100555e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.6193447411060333e-10;2.6193447411060333e-10,5,5,"[-5.887638568878174, -5.5628342628479, -4.712411403656006, -5.709239959716797, -5.326326847076416, -0.024058660492300987]",0.9762284159660339
2,"['    @Test\n    public void testDateRangesWithAllFieldsEqual() throws Throwable {\n\n        long startTime = System.currentTimeMillis();\n\n        GuidedDatePickerAction[] datePickerActions = setupDateActionsForMinAndMaxRangeTests();\n\n        scrollToMinAndMaxDates(new int[] {0, 1, 2}, datePickerActions[4]);\n        long executionTime = System.currentTimeMillis() - startTime;\n        Log.d(TAG, ""testDateRangesWithAllFieldsEqual() Execution time: "" + executionTime);\n        Thread.sleep(FINAL_WAIT);\n    }\n']",WAIT;ates;execution;execution;scroll;anges;time;date;Time;long,1.0477378964424133e-09;1.0477378964424133e-09;9.313225746154785e-10;5.820766091346741e-10;4.94765117764473e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.2014213502407074e-10;2.6193447411060333e-10;2.3283064365386963e-10,5,5,"[-5.8628668785095215, -5.551093101501465, -4.723621845245361, -5.6926422119140625, -5.303943634033203, -0.02424333058297634]",0.9760481715202332
2,"['    @Test\n    public void testFocusDisabledOnActions() throws Throwable {\n\n        Intent intent = new Intent();\n        Resources res = mContext.getResources();\n\n        final int NUM_SEARCH_ACTIONS = 10;\n        final List<Integer> ACTIONS_WITH_DISABLED_FOCUS = new ArrayList<>(\n                Arrays.asList(1, 3, 4, 5, 8));\n        final int ACTION_ID_SEARCH = 1;\n        List<Integer> EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT = new ArrayList<>();\n\n        // we will traverse actions from top to bottom and then back to the top\n        for(int i = 0; i < NUM_SEARCH_ACTIONS; i++) {\n            if (!ACTIONS_WITH_DISABLED_FOCUS.contains(i))\n                EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.add(i);\n        }\n        for(int i = EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.size(); i-- != 0;) {\n            EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.add(EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.get(i));\n        }\n\n\n        String title = ""Guided Actions Focusable Test"";\n        String breadcrumb = ""Focusable Test Demo"";\n        String description = """";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n        for (int i = 0; i < NUM_SEARCH_ACTIONS; i++ ) {\n            actionList.add(new GuidedAction.Builder(mContext)\n                    .id(ACTION_ID_SEARCH)\n                    .title(res.getString(R.string.search) + """" + i)\n                    .description(res.getString(R.string.search_description) + i)\n                    .build()\n            );\n        }\n        for(int action_id : ACTIONS_WITH_DISABLED_FOCUS )\n            actionList.get(action_id).setFocusable(false);\n\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n\n        initActivity(intent);\n\n        int lastSelectedActionId = -1;\n        int selectIndex = 0;\n        GuidedStepFragment mFragment = (GuidedStepFragment) mActivity.getGuidedStepTestFragment();\n        int prevSelectedActionPosition = -1;\n        int nextSelectedActionPosition = mFragment.getSelectedActionPosition();\n        while ( nextSelectedActionPosition != prevSelectedActionPosition ) {\n            lastSelectedActionId = mFragment.getSelectedActionPosition();\n            assertTrue(res.getString(R.string.focusable_test_error_message,\n                    actionList.get(lastSelectedActionId).getTitle()),\n                    lastSelectedActionId == EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.get(selectIndex));\n            selectIndex++;\n            sendKey(KeyEvent.KEYCODE_DPAD_DOWN);\n            prevSelectedActionPosition = nextSelectedActionPosition;\n            nextSelectedActionPosition = mFragment.getSelectedActionPosition();\n            Thread.sleep(TRANSITION_LENGTH);\n        }\n\n        prevSelectedActionPosition = -1;\n        while ( nextSelectedActionPosition != prevSelectedActionPosition ) {\n            lastSelectedActionId = mFragment.getSelectedActionPosition();\n            assertTrue(res.getString(R.string.focusable_test_error_message,\n                    actionList.get(lastSelectedActionId).getTitle()),\n                    lastSelectedActionId == EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.get(selectIndex));\n            selectIndex++;\n            sendKey(KeyEvent.KEYCODE_DPAD_UP);\n            prevSelectedActionPosition = nextSelectedActionPosition;\n            nextSelectedActionPosition = mFragment.getSelectedActionPosition();\n            Thread.sleep(TRANSITION_LENGTH);\n        }\n\n    }\n']",ITH;and;the;to;back;SEARCH;ITH;intent;ACH;top,1.7462298274040222e-09;1.0477378964424133e-09;7.566995918750763e-10;6.402842700481415e-10;5.820766091346741e-10;5.675246939063072e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10,5,5,"[-5.90058708190918, -5.405640602111816, -4.692222595214844, -5.743947505950928, -5.471524715423584, -0.024089964106678963]",0.9761977791786194
2,"['    @Test\n    public void testDisabledActions() throws Throwable {\n\n        Intent intent = new Intent();\n        Resources res = mContext.getResources();\n\n        final int NUM_SEARCH_ACTIONS = 10;\n        final List<Integer> DISABLED_ACTIONS = new ArrayList<>(\n                Arrays.asList(1, 3, 5, 7));\n        final int ACTION_ID_REVERT_BUTTON = 0;\n        final int ACTION_ID_SEARCH_BEGIN = ACTION_ID_REVERT_BUTTON + 1;\n        int ACTION_ID_SEARCH_END = ACTION_ID_SEARCH_BEGIN;\n\n        // sequence of clicked actions simulated in the test\n        List<Integer> CLICK_SEQUENCE = new ArrayList<>();\n\n        // Expected Clicked sequence can be different from focused ones since some of the actions\n        // are disabled hence not clickable\n        List<Integer> EXPECTED_FOCUSED_SEQUENCE = new ArrayList<>();\n        List<Integer> EXPECTED_CLICKED_SEQUENCE = new ArrayList<>();\n        // Expected actions state according to list of DISABLED_ACTIONS: false for disabled actions\n        List<Boolean> EXPECTED_ACTIONS_STATE = new ArrayList<>(\n                Arrays.asList(new Boolean[NUM_SEARCH_ACTIONS])\n        );\n        Collections.fill(EXPECTED_ACTIONS_STATE, Boolean.TRUE);\n\n        for(int i = 0; i < NUM_SEARCH_ACTIONS; i++) {\n            CLICK_SEQUENCE.add(i + 1);\n        }\n        for(int clickedActionId : CLICK_SEQUENCE) {\n            EXPECTED_FOCUSED_SEQUENCE.add(clickedActionId);\n            if (!DISABLED_ACTIONS.contains(clickedActionId - 1))\n                EXPECTED_CLICKED_SEQUENCE.add(clickedActionId);\n            else\n                EXPECTED_CLICKED_SEQUENCE.add(-1);\n        }\n\n        String title = ""Guided Actions Enabled Test"";\n        String breadcrumb = ""Enabled Test Demo"";\n        String description = """";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n        actionList.add(new GuidedAction.Builder(mContext)\n                .id(ACTION_ID_REVERT_BUTTON)\n                .title(res.getString(R.string.invert_title))\n                .description(res.getString(R.string.revert_description))\n                .build()\n        );\n\n        for (int i = 0; i < NUM_SEARCH_ACTIONS; i++ ) {\n            actionList.add(new GuidedAction.Builder(mContext)\n                    .id(ACTION_ID_SEARCH_END++)\n                    .title(res.getString(R.string.search) + """" + i)\n                    .description(res.getString(R.string.search_description) + i)\n                    .build()\n            );\n        }\n        for(int action_id : DISABLED_ACTIONS ) {\n            if ( action_id >= 0 && action_id < NUM_SEARCH_ACTIONS ) {\n                actionList.get(action_id + 1).setEnabled(false);\n                EXPECTED_ACTIONS_STATE.set(action_id, Boolean.FALSE);\n            }\n        }\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n        GuidedStepAttributesTestFragment.setActionClickCallback(ACTION_ID_REVERT_BUTTON,\n                sRevertCallback);\n\n        initActivity(intent);\n\n        examineEnabledAndDisabledActions(actionList, CLICK_SEQUENCE, EXPECTED_FOCUSED_SEQUENCE,\n                EXPECTED_CLICKED_SEQUENCE);\n    }\n']",Throwable;BUTTON;EXPECTED;SEARCH;Intent;Clicked;List;Resources;are;ctions,8.731149137020111e-10;5.384208634495735e-10;5.311449058353901e-10;4.94765117764473e-10;4.656612873077393e-10;4.220055416226387e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.892666816711426, -5.324812412261963, -4.6709113121032715, -5.755590438842773, -5.506105899810791, -0.024517539888620377]",0.9757804870605469
2,"['    @Test\n    public void testToggleEnabledFlags() throws Throwable {\n\n        Intent intent = new Intent();\n        Resources res = mContext.getResources();\n\n        final int NUM_SEARCH_ACTIONS = 10;\n        final List<Integer> DISABLED_ACTIONS = new ArrayList<>(\n                Arrays.asList(1, 3, 5, 7));\n        final int ACTION_ID_REVERT_BUTTON = 0;\n        final int ACTION_ID_SEARCH_BEGIN = ACTION_ID_REVERT_BUTTON + 1;\n        int ACTION_ID_SEARCH_END = ACTION_ID_SEARCH_BEGIN;\n\n        // sequence of clicked actions simulated in the test\n        List<Integer> CLICK_SEQUENCE = new ArrayList<>();\n\n        // Expected Clicked sequence can be different from focused ones since some of the actions\n        // are disabled hence not clickable\n        List<Integer> EXPECTED_FOCUSED_SEQUENCE = new ArrayList<>();\n        List<Integer> EXPECTED_CLICKED_SEQUENCE = new ArrayList<>();\n        // Expected actions state according to list of DISABLED_ACTIONS: false for disabled actions\n        List<Boolean> EXPECTED_ACTIONS_STATE = new ArrayList<>(\n                Arrays.asList(new Boolean[NUM_SEARCH_ACTIONS])\n        );\n        Collections.fill(EXPECTED_ACTIONS_STATE, Boolean.FALSE);\n\n        for(int i = 0; i < NUM_SEARCH_ACTIONS; i++) {\n            CLICK_SEQUENCE.add(i + 1);\n        }\n        for(int clickedActionId : CLICK_SEQUENCE) {\n            EXPECTED_FOCUSED_SEQUENCE.add(clickedActionId);\n            if (DISABLED_ACTIONS.contains(clickedActionId - 1))\n                EXPECTED_CLICKED_SEQUENCE.add(clickedActionId);\n            else\n                EXPECTED_CLICKED_SEQUENCE.add(-1);\n        }\n\n        String title = ""Guided Actions Enabled Test"";\n        String breadcrumb = ""Toggle Enabled Flag Test Demo"";\n        String description = """";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n        actionList.add(new GuidedAction.Builder(mContext)\n                .id(ACTION_ID_REVERT_BUTTON)\n                .title(res.getString(R.string.invert_title))\n                .description(res.getString(R.string.revert_description))\n                .build()\n        );\n\n        for (int i = 0; i < NUM_SEARCH_ACTIONS; i++ ) {\n            actionList.add(new GuidedAction.Builder(mContext)\n                    .id(ACTION_ID_SEARCH_END++)\n                    .title(res.getString(R.string.search) + """" + i)\n                    .description(res.getString(R.string.search_description) + i)\n                    .build()\n            );\n        }\n        for(int action_id : DISABLED_ACTIONS ) {\n            if ( action_id >= 0 && action_id < NUM_SEARCH_ACTIONS ) {\n                actionList.get(action_id + 1).setEnabled(false);\n                EXPECTED_ACTIONS_STATE.set(action_id, Boolean.TRUE);\n            }\n        }\n\n        GuidedStepAttributesTestFragment.clear();\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n        GuidedStepAttributesTestFragment.setActionClickCallback(ACTION_ID_REVERT_BUTTON,\n                sRevertCallback);\n\n        initActivity(intent);\n\n        final GuidedStepFragment mFragment = (GuidedStepFragment)\n                mActivity.getGuidedStepTestFragment();\n\n        mActivity.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                mFragment.setSelectedActionPosition(0);\n            }\n']",ones;DISABLED;OCUSED;sequence;different;Flags;SEARCH;NUM;from;NUM,6.984919309616089e-10;6.948539521545172e-10;5.820766091346741e-10;4.656612873077393e-10;4.0745362639427185e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.637978807091713e-10;3.4924596548080444e-10;3.4924596548080444e-10,5,5,"[-5.8847832679748535, -5.337024211883545, -4.676522731781006, -5.739343643188477, -5.491044044494629, -0.024542083963751793]",0.9757566452026367
2,"['    @Test\n    public void testCheckedActions() throws Throwable {\n\n        Intent intent = new Intent();\n        Resources res = mContext.getResources();\n\n        final int NUM_RADIO_ACTIONS = 3;\n        final int NUM_CHECK_BOX_ACTIONS = 3;\n        final int INITIALLY_CHECKED_RADIO_ACTION = 0;\n        final List<Integer> INITIALLY_CHECKED_CHECKBOX_ACTIONS = new ArrayList<>(\n                Arrays.asList(1, 2)\n        );\n\n        List<Integer> CLICK_SEQUENCE = new ArrayList<>();\n        for(int i = 0; i < NUM_RADIO_ACTIONS + NUM_CHECK_BOX_ACTIONS; i++) {\n            CLICK_SEQUENCE.add(i);\n        }\n\n        List<Boolean> EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK = new ArrayList<>(\n                Arrays.asList(new Boolean[CLICK_SEQUENCE.size()])\n        );\n        Collections.fill(EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK, Boolean.FALSE);\n\n        // initial state of actions before any clicks happen\n        EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK.set(INITIALLY_CHECKED_RADIO_ACTION, true);\n        for(int checkedCheckBox : INITIALLY_CHECKED_CHECKBOX_ACTIONS) {\n            EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK.set(NUM_RADIO_ACTIONS + checkedCheckBox, true);\n        }\n\n        String title = ""Guided Actions Checked Test"";\n        String breadcrumb = ""Checked Test Demo"";\n        String description = """";\n        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,\n                breadcrumb, null);\n\n        List<GuidedAction> actionList = new ArrayList<>();\n        actionList.add(new GuidedAction.Builder(mContext)\n                .title(res.getString(R.string.radio_actions_info_title))\n                .description(res.getString(R.string.radio_actions_info_desc))\n                .infoOnly(true)\n                .enabled(true)\n                .focusable(false)\n                .build()\n        );\n\n        int firstRadioActionIndex = actionList.size();\n        for(int i = 0; i < NUM_RADIO_ACTIONS; i++) {\n            actionList.add(new GuidedAction.Builder(mContext)\n                    .title(res.getString(R.string.checkbox_title) + i)\n                    .description(res.getString(R.string.checkbox_desc) + i)\n                    .checkSetId(GuidedAction.DEFAULT_CHECK_SET_ID)\n                    .build()\n            );\n            if (i == INITIALLY_CHECKED_RADIO_ACTION)\n                actionList.get(firstRadioActionIndex + i).setChecked(true);\n        }\n\n        actionList.add(new GuidedAction.Builder(mContext)\n                .title(res.getString(R.string.checkbox_actions_info_title))\n                .description(res.getString(R.string.checkbox_actions_info_desc))\n                .infoOnly(true)\n                .enabled(true)\n                .focusable(false)\n                .build()\n        );\n        int firstCheckBoxActionIndex = actionList.size();\n        for(int i = 0; i < NUM_CHECK_BOX_ACTIONS; i++) {\n            actionList.add(new GuidedAction.Builder(mContext)\n                    .title(res.getString(R.string.checkbox_title) + i)\n                    .description(res.getString(R.string.checkbox_desc) + i)\n                    .checkSetId(GuidedAction.CHECKBOX_CHECK_SET_ID)\n                    .build()\n            );\n        }\n        for(int i = 0; i < INITIALLY_CHECKED_CHECKBOX_ACTIONS.size(); i++ ) {\n            actionList.get(firstCheckBoxActionIndex + INITIALLY_CHECKED_CHECKBOX_ACTIONS.get(i))\n                    .setChecked(true);\n        }\n\n        GuidedStepAttributesTestFragment.GUIDANCE = guidance;\n        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;\n        initActivity(intent);\n\n        examineCheckedAndUncheckedActions(actionList, EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK,\n                NUM_RADIO_ACTIONS, NUM_CHECK_BOX_ACTIONS);\n    }\n']",NUM;ACTIONS;ADIO;STATE;Checked;fill;CHECKBOX;add;CLICK;INIT,9.89530235528946e-10;7.275957614183426e-10;5.966285243630409e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;4.656612873077393e-10;3.7834979593753815e-10;3.637978807091713e-10,5,5,"[-5.848665237426758, -5.3610687255859375, -4.6946916580200195, -5.701613426208496, -5.4428791999816895, -0.024693287909030914]",0.9756091237068176
2,"['    @Test\n    public void testActionWithTwoSubActions() throws Throwable {\n        ExpectedSubActionResult result = setUpActionsForSubActionsTest();\n\n        final int actionPos = 0;\n        final GuidedAction selectedAction = result.actionList.get(actionPos);\n        List<Integer> expectedFocusedSeq = result.expectedFocusedSeq.get(actionPos);\n        List<Integer> expectedClickedSeq = result.expectedClickedSeq.get(actionPos);\n\n        traverseSubActionsAndVerifyFocusAndClickEvents(selectedAction, actionPos, expectedFocusedSeq,\n                expectedClickedSeq);\n    }\n']",expected;ctions;selected;expected;Se;Click;Se;selected;Guided;ocused,6.111804395914078e-10;5.820766091346741e-10;5.384208634495735e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10;4.511093720793724e-10;4.0745362639427185e-10;4.0745362639427185e-10;4.0745362639427185e-10,5,5,"[-5.92181396484375, -5.446671962738037, -4.640842914581299, -5.8055291175842285, -5.438804626464844, -0.024288590997457504]",0.9760040044784546
2,"['    @Test\n    public void testActionWithOneSubAction() throws Throwable {\n        ExpectedSubActionResult result = setUpActionsForSubActionsTest();\n\n        final int actionPos = 1;\n        final GuidedAction selectedAction = result.actionList.get(actionPos);\n        List<Integer> expectedFocusedSeq = result.expectedFocusedSeq.get(actionPos);\n        List<Integer> expectedClickedSeq = result.expectedClickedSeq.get(actionPos);\n\n        traverseSubActionsAndVerifyFocusAndClickEvents(selectedAction, actionPos, expectedFocusedSeq,\n                expectedClickedSeq);\n    }\n']",Click;Pos;Action;Events;Se;expected;Action;final;ctions;Action,1.3969838619232178e-09;9.313225746154785e-10;8.149072527885437e-10;6.402842700481415e-10;5.820766091346741e-10;5.820766091346741e-10;4.802132025361061e-10;4.511093720793724e-10;4.0745362639427185e-10;3.7834979593753815e-10,5,5,"[-5.921201229095459, -5.455219745635986, -4.643892288208008, -5.802426338195801, -5.433210849761963, -0.024257292971014977]",0.9760346412658691
2,"['    @Test\n    public void testActionWithZeroSubActions() throws Throwable {\n        ExpectedSubActionResult result = setUpActionsForSubActionsTest();\n\n        final int actionPos = 2;\n        final GuidedAction selectedAction = result.actionList.get(actionPos);\n        List<Integer> expectedFocusedSeq = result.expectedFocusedSeq.get(actionPos);\n        List<Integer> expectedClickedSeq = result.expectedClickedSeq.get(actionPos);\n\n        traverseSubActionsAndVerifyFocusAndClickEvents(selectedAction, actionPos, expectedFocusedSeq,\n                expectedClickedSeq);\n    }\n']",Events;Zero;Focus;Expected;Action;final;ctions;result;List;Guided,9.313225746154785e-10;8.149072527885437e-10;5.820766091346741e-10;5.820766091346741e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;5.238689482212067e-10;4.656612873077393e-10;4.656612873077393e-10,5,5,"[-5.920525550842285, -5.446984767913818, -4.644575595855713, -5.8044114112854, -5.436767101287842, -0.02426648512482643]",0.9760255813598633
2,"['    @Test\n    public void testActionWithThreeSubActions() throws Throwable {\n        ExpectedSubActionResult result = setUpActionsForSubActionsTest();\n\n        final int actionPos = 3;\n        final GuidedAction selectedAction = result.actionList.get(actionPos);\n        List<Integer> expectedFocusedSeq = result.expectedFocusedSeq.get(actionPos);\n        List<Integer> expectedClickedSeq = result.expectedClickedSeq.get(actionPos);\n\n        traverseSubActionsAndVerifyFocusAndClickEvents(selectedAction, actionPos, expectedFocusedSeq,\n                expectedClickedSeq);\n    }\n']",Action;Result;Action;List;Se;final;Sub;expected;Se;Sub,6.693881005048752e-10;5.529727786779404e-10;4.94765117764473e-10;4.656612873077393e-10;4.0745362639427185e-10;3.7834979593753815e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.346940502524376e-10;2.9103830456733704e-10,5,5,"[-5.921058177947998, -5.4497575759887695, -4.6444010734558105, -5.803503513336182, -5.436652183532715, -0.024257875978946686]",0.9760339856147766
2,"['    @Test\n    public void testFastForwardToMaxThenReset() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlSupportGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlSupportGlue.ACTION_FAST_FORWARD);\n        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlSupportGlue.ACTION_REWIND);\n\n        assertFalse(glue.isMediaPlaying());\n        glue.onActionClicked(playPause);\n        assertTrue(glue.isMediaPlaying());\n        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n\n        // click multiple times to reach PLAYBACK_SPEED_FAST_L2\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n        assertEquals(1, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L1, glue.getCurrentSpeedId());\n        assertEquals(2, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());\n        assertEquals(3, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n        glue.onActionClicked(fastForward);\n        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());\n        assertEquals(3, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n\n        // press playPause again put it back to play\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n    }\n']",Clicked;rewind;AST;fast;Fast;Multi;Pause;Action;Max;parse,8.440110832452774e-10;7.8580342233181e-10;6.402842700481415e-10;5.820766091346741e-10;4.656612873077393e-10;4.656612873077393e-10;3.4924596548080444e-10;3.4924596548080444e-10;3.4924596548080444e-10;2.9103830456733704e-10,5,5,"[-5.890600204467773, -5.415343761444092, -4.655159950256348, -5.780357360839844, -5.4514079093933105, -0.02439853549003601]",0.9758965969085693
2,"['    @Test\n    public void testFastRewindToMaxThenReset() {\n        PlaybackControlsRow row = new PlaybackControlsRow();\n        glue.setControlsRow(row);\n        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)\n                row.getPrimaryActionsAdapter();\n        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlSupportGlue.ACTION_PLAY_PAUSE);\n        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlSupportGlue.ACTION_FAST_FORWARD);\n        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter\n                .lookup(PlaybackControlSupportGlue.ACTION_REWIND);\n\n        assertFalse(glue.isMediaPlaying());\n        glue.onActionClicked(playPause);\n        assertTrue(glue.isMediaPlaying());\n        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n\n        // click multiple times to reach PLAYBACK_SPEED_FAST_L2\n        glue.onActionClicked(rewind);\n        assertEquals(-PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(1, rewind.getIndex());\n        glue.onActionClicked(rewind);\n        assertEquals(-PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L1, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(2, rewind.getIndex());\n        glue.onActionClicked(rewind);\n        assertEquals(-PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(3, rewind.getIndex());\n        glue.onActionClicked(rewind);\n        assertEquals(-PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(3, rewind.getIndex());\n\n        // press playPause again put it back to play\n        glue.onActionClicked(playPause);\n        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());\n        assertEquals(0, fastForward.getIndex());\n        assertEquals(0, rewind.getIndex());\n    }\n']",Fast;Clicked;fast;fast;Rewind;Media;SPEED;Forward;Speed;AST,9.313225746154785e-10;7.8580342233181e-10;6.984919309616089e-10;6.693881005048752e-10;6.111804395914078e-10;5.820766091346741e-10;5.529727786779404e-10;5.238689482212067e-10;4.94765117764473e-10;4.656612873077393e-10,5,5,"[-5.894959449768066, -5.406800270080566, -4.65008020401001, -5.788684844970703, -5.4635419845581055, -0.024395743384957314]",0.9758993983268738
