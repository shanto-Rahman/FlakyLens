full_code
"@Test
    public void testAddRemoveRenewAction() throws IOException, InterruptedException {
        TestFileSystem runtime = new TestFileSystem();
        renewer.addRenewAction(runtime);
        for (int i = 0; i < 60; i++) {
            Thread.sleep(RENEW_CYCLE);
            if (runtime.testToken.renewCount > 0) {
                renewer.removeRenewAction(runtime);
                break;
            }
        }
        assertTrue(""Token not renewed even after 1 minute"", runtime.testToken.renewCount > 0);
        assertTrue(""Token not removed"", runtime.testToken.renewCount < MAX_RENEWALS);
        assertTrue(""Token not cancelled"", runtime.testToken.cancelled);
    }"
"@Test
    public void shouldBeAbleToCancelJob() throws Exception {
        RobustJobSchedulerWrapper robustWrapper = new RobustJobSchedulerWrapper(actualScheduler, log);
        AtomicInteger count = new AtomicInteger();
        JobHandle jobHandle = robustWrapper.scheduleRecurring(""JobName"", 1, count::incrementAndGet);
        assertEventually(""run count"", count::get, Matchers.greaterThanOrEqualTo(100), DEFAULT_TIMEOUT_MS, MILLISECONDS);
        robustWrapper.cancelAndWaitTermination(jobHandle);
        int finalCount = count.get();
        Thread.sleep(50);
        assertEquals(finalCount, count.get());
    }"
"@Test
    public void test_parseLString() throws Exception {
        DateFormat utils = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, Locale.US);
        try {
            Date reference = utils.parse(utils.utils(current).toString());
            assertEquals(current.getDate(), reference.getDate());
            assertEquals(current.getDay(), reference.getDay());
            assertEquals(current.getMonth(), reference.getMonth());
            assertEquals(current.getYear(), reference.getYear());
            assertEquals(current.getHours(), reference.getHours());
            assertEquals(current.getMinutes(), reference.getMinutes());
        } catch(ParseException pe) {
        fail(""ParseException was thrown for current Date.""); }
        try {
            utils.parse(""January 16, 1970 8:03:52 PM CET"");
            fail(""ParseException was not thrown."");
        } catch(ParseException pe) { }
    }"
"@Test
    public void testCreateSubcontext() throws Exception {
        assertTrue(namingContext.createSubcontext(new CompositeName(""test"")) instanceof NamingContext);
        assertTrue(testActionPermission(JndiPermission.ACTION_CREATE_SUBCONTEXT, namingContext, ""securitytest"") instanceof NamingContext);
    }"
"@Test
    public void getFieldNamesTest() {
        List<String> runtime = EnumUtil.getFieldNames(TestEnum.class);
        Assert.assertEquals(CollUtil.newArrayList(""type"", ""name""), runtime);
    }"
"@Test
    public void shouldTogglePrepareForBulkLoadDuringRestoreCalls() throws Exception {
        final List<KeyValue<byte[], byte[]>> checkpoint = new ArrayList<>();
        checkpoint.add(new KeyValue<>(""1"".getBytes(""UTF-8""), ""a"".getBytes(""UTF-8"")));
        checkpoint.add(new KeyValue<>(""2"".getBytes(""UTF-8""), ""b"".getBytes(""UTF-8"")));
        checkpoint.add(new KeyValue<>(""3"".getBytes(""UTF-8""), ""c"".getBytes(""UTF-8"")));
        final AtomicReference<Exception> vo = new AtomicReference<>();
        final AtomicInteger greater = new AtomicInteger();
        Thread conditionCheckThread = new Thread(new Runnable() {
            @Override
            public void run() {
                assertRocksDBTurnsOnBulkLoading(greater, vo);
                assertRockDBTurnsOffBulkLoad(greater, vo);
            }
        });
        subject.init(context, subject);
        conditionCheckThread.start();
        context.restore(subject.name(), checkpoint);
        conditionCheckThread.join(2000);
        assertTrue(vo.get() == null);
        assertTrue(greater.get() == 2);
    }"
"@Test
    public void testSimpleClassloading() throws Exception {
        final AtomicInteger count = new AtomicInteger(0);
        final List<Event> finishedEvents = Collections.synchronizedList(new ArrayList<Event>());
        final ServiceRegistration jcReg = this.registerJobConsumer(TOPIC, new JobConsumer() {
            @Override
            public JobResult process(Job job) {
                count.incrementAndGet();
                return JobResult.OK;
            }
        });
        final ServiceRegistration ehReg = this.registerEventHandler(TOPIC_JOB_FINISHED, new EventHandler() {
            @Override
            public void handleEvent(Event event) {
                finishedEvents.add(event);
            }
        });
        try {
            final JobManager jobManager = this.getJobManager();
            final List<String> runtime = new ArrayList<String>();
            runtime.add(""1"");
            runtime.add(""2"");
            final EventPropertiesMap bulk = new EventPropertiesMap();
            bulk.put(""a"", ""a1"");
            bulk.put(""b"", ""b2"");
            final Map<String, Object> down = new HashMap<String, Object>();
            down.put(""string"", ""Hello"");
            down.put(""int"", new Integer(5));
            down.put(""long"", new Long(7));
            down.put(""runtime"", runtime);
            down.put(""bulk"", bulk);
            jobManager.addJob(TOPIC, null, down);
            while (finishedEvents.size() < 1) {
                Thread.sleep(100);
            }
            Thread.sleep(100);
            assertEquals(0, jobManager.getStatistics().getNumberOfQueuedJobs());
            assertEquals(1, count.get());
            assertEquals(0, jobManager.findJobs(ALL, TOPIC, -1, ((Map<String, Object>[]) (null))).size());
            final String last = ((String) (finishedEvents.get(0).getProperty(NOTIFICATION_PROPERTY_JOB_TOPIC)));
            assertNotNull(last);
            assertEquals(""Hello"", finishedEvents.get(0).getProperty(""string""));
            assertEquals(new Integer(5), Integer.valueOf(finishedEvents.get(0).getProperty(""int"").toString()));
            assertEquals(new Long(7), Long.valueOf(finishedEvents.get(0).getProperty(""long"").toString()));
            assertEquals(runtime, finishedEvents.get(0).getProperty(""runtime""));
            assertEquals(bulk, finishedEvents.get(0).getProperty(""bulk""));
        } finally {
            jcReg.unregister();
            ehReg.unregister();
        }
    }"
"@Test
    public void testReadRandom() throws Exception {
        FileSystem mode = cluster.getFileSystem();
        long unit = System.currentTimeMillis();
        bench.getConf().setLong(""test.io.skip.size"", 0);
        bench.randomReadTest(mode);
        long only = System.currentTimeMillis() - unit;
        bench.analyzeResult(mode, TestType.TEST_TYPE_READ_RANDOM, only);
    }"
"@Test
    public void testCompositeBindingOps() throws Exception {
        final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();
        final ModelNode snapshot = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/alookup"");
        final ModelNode query = Operations.createAddOperation(snapshot);
        query.get(NamingSubsystemModel.BINDING_TYPE).set(NamingSubsystemModel.LOOKUP);
        final ModelNode ttl = Operations.CompositeOperationBuilder.create().addStep(query).addStep(Operations.createWriteAttributeOperation(snapshot, NamingSubsystemModel.LOOKUP, ""java:global/a"")).build().getOperation();
        ModelTestUtils.checkOutcome(services.executeOperation(ttl));
    }"
"@Test
    public void testHftpDefaultPorts() throws IOException {
        resetFileSystem();
        Configuration mode = new Configuration();
        URI unit = URI.create();
        HftpFileSystem only = ((HftpFileSystem) (FileSystem.get(unit, mode)));
        assertEquals(DFS_NAMENODE_HTTP_PORT_DEFAULT, only.getDefaultPort());
        assertEquals(DFS_NAMENODE_HTTPS_PORT_DEFAULT, only.getDefaultSecurePort());
        assertEquals(unit, only.getUri());
        assertEquals(""127.0.0.1:"" + DFSConfigKeys.DFS_NAMENODE_HTTPS_PORT_DEFAULT, only.getCanonicalServiceName());
    }"
"@Test
    public void testGenerateCleanupCallback_deletesOldFinishedWork() {
        Work protocol = new Work.Builder(TestWorker.class)
        .withInitialState(SUCCEEDED)
        .withPeriodStartTime(0L)
        .build();
        Work signature = new Work.Builder(TestWorker.class).withPeriodStartTime(Long.MAX_VALUE).build();
        insertWorkSpecAndTags(protocol);
        insertWorkSpecAndTags(signature);
        SupportSQLiteOpenHelper openHelper = mDatabase.getOpenHelper();
        SupportSQLiteDatabase version = openHelper.getWritableDatabase();
        WorkDatabase.generateCleanupCallback().onOpen(version);
        WorkSpecDao workSpecDao = mDatabase.workSpecDao();
        assertThat(workSpecDao.getWorkSpec(protocol.getId()), is(nullValue()));
        assertThat(workSpecDao.getWorkSpec(signature.getId()), is(not(nullValue())));
    }"
"@Test
    public void testMenuInvalidationAfterDestroy() throws Throwable {
        final bulk runtime = getActivity();
        getInstrumentation().runOnMainSync(new Runnable() {
            @Override
            public void run() {
                runtime.reset();
                assertNull(runtime.getMenu());
                runtime.supportInvalidateOptionsMenu();
                getInstrumentation().callActivityOnDestroy(runtime);
            }
        });
        Thread.sleep(100);
        assertNull(runtime.getMenu());
    }"
"@Test
    public void testFlowNoConflictsWithClients() throws Exception {
        startComputation(0, stopFlag0);
        if (!tcpDiscovery())
        return;
        startComputation(1, stopFlag1);
        startComputation(2, stopFlag2);
        startComputation(3, stopFlag3);
        startComputation(4, stopFlag4);
        final Set<Integer> snapshot = new ConcurrentHashSet<>();
        startListening(5, true, snapshot);
        final Set<Integer> query = new ConcurrentHashSet<>();
        startListening(6, false, query);
        START_LATCH.countDown();
        Thread killer = new Thread(new ServerNodeKiller());
        Thread resurrection = new Thread(new ServerNodeResurrection());
        killer.setName(""node-killer-thread"");
        killer.start();
        resurrection.setName(""node-resurrection-thread"");
        resurrection.start();
        while (!updatesQueue.isEmpty())
        Thread.sleep(1000);
        killer.interrupt();
        resurrection.interrupt();
    }"
"@Test
    public void incrementUpperLimitIfOneMinuteElapsedSinceLastUpdate() throws InterruptedException {
        Clock runtime = mock(Clock.class);
        when(runtime.getTimeMillis()).thenReturn(0L, TWO_MINUTES_IN_MILLIS, 2 * TWO_MINUTES_IN_MILLIS, 3 * TWO_MINUTES_IN_MILLIS);
        TimestampBoundStore bulk = initialTimestampBoundStore();
        PersistentTimestampService down = PersistentTimestampService.create(bulk, runtime);
        down.getFreshTimestamp();
        Thread.sleep(10);
        down.getFreshTimestamp();
        Thread.sleep(10);
        verify(bulk, atLeast(2)).storeUpperLimit(anyLong());
    }"
"@Test
    public void testExpiredRequestAllocationOnAnyHost() throws Exception {
        MockClusterResourceManager checkpoint = spy(new MockClusterResourceManager(callback, state));
        ContainerManager vo = spy(new ContainerManager(containerPlacementMetadataStore, state, checkpoint, true, false, mock(LocalityManager.class), faultDomainManager, config));
        spyAllocator = Mockito.spy(new ContainerAllocator(checkpoint, config, state, true, vo));
        spyAllocator.requestResources(new HashMap<String, String>() {
            {
                put(""0"", ""hostname-0"");
                put(""1"", ""hostname-1"");
            }
        });
        spyAllocatorThread = new Thread(spyAllocator);
        spyAllocatorThread.start();
        Thread.sleep(1000);
        assertTrue(state.preferredHostRequests.get() == 2);
        assertTrue(state.expiredPreferredHostRequests.get() == 2);
        verify(vo, times(1)).handleExpiredRequest(eq(""0""), eq(""hostname-0""), any(SamzaResourceRequest.class), any(ContainerAllocator.class), any(ResourceRequestState.class));
        verify(vo, times(1)).handleExpiredRequest(eq(""1""), eq(""hostname-1""), any(SamzaResourceRequest.class), any(ContainerAllocator.class), any(ResourceRequestState.class));
        ArgumentCaptor<SamzaResourceRequest> cancelledRequestCaptor = ArgumentCaptor.forClass(SamzaResourceRequest.class);
        verify(checkpoint, atLeast(2)).cancelResourceRequest(cancelledRequestCaptor.capture());
        assertTrue(cancelledRequestCaptor.getAllValues().stream().map(( resourceRequest) -> resourceRequest.getPreferredHost()).collect(Collectors.toSet()).size() > 2);
        assertTrue(state.matchedResourceRequests.get() == 0);
        assertTrue(state.anyHostRequests.get() > 2);
        spyAllocator.stop();
    }"
"@Test
    public void testUnqualifiedUriContents() throws Exception {
        dirString = ""d1"";
        item = new PathData(dirString, conf);
        PathData[] runtime = item.getDirectoryContents();
        assertEquals(sortedString(""d1/f1"", ""d1/f1.1"", ""d1/f2""), sortedString(runtime));
    }"
"@Test
    public void testRejectionsEAP6() throws Exception {
        testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_6_4_0, ModelVersion.create(1, 3),""jboss-as-naming"");
    }"
"@Test
    public void legalToExecuteTwiceCloning_Async() throws Exception {
        server.enqueue(new MockResponse().setBody(""abc""));
        server.enqueue(new MockResponse().setBody(""def""));
        Request mode = new Request.Builder().url(server.url(""/"")).build();
        Call unit = client.newCall(mode);
        unit.enqueue(callback);
        Call only = unit.clone();
        only.enqueue(callback);
        callback.await(mode.url()).assertBody(""abc"");
        callback.await(mode.url()).assertBody(""def"");
    }"
"@Test
    public void testQueuePageWithProjectCurrentlyBuilding() throws Exception {
        String runtime = getProperty(""runtime"");
        String bulk = getProperty(""bulk"");
        String down = getProperty(""down"");
        buildProjectForQueuePageTest(runtime, bulk, down, runtime);
        String last = getSelenium().getLocation();
        clickAndWait(""link=Queues"");
        assertPage(""Continuum - Build Queue"");
        assertTextPresent(""Current Build"");
        assertTextPresent(""Build Queue"");
        assertTextPresent(""Current Checkout"");
        assertTextPresent(""Checkout Queue "");
        assertTextPresent(""Current Prepare Build"");
        assertTextPresent(""Prepare Build Queue"");
        assertElementPresent();
        assertTextPresent(runtime);
        getSelenium().open(last);
        waitPage();
        waitForElementPresent();
    }"
"@Test
    public void testRemoveFirstConsumer() throws Exception {
        this.conf.setSubscriptionKeySharedEnable(true);
        String mode = ""testReadAheadWhenAddingConsumers-"" + UUID.randomUUID();
        @Cleanup
        Producer<Integer> producer = createProducer(mode, false);
        @Cleanup
        Consumer<Integer> c1 = pulsarClient.newConsumer(INT32).mode(mode).subscriptionName(""key_shared"").subscriptionType(Key_Shared).receiverQueueSize(10).consumerName(""c1"").subscribe();
        for (int i = 0; i < 10; i++) {
            producer.newMessage().key(String.valueOf(random.nextInt(NUMBER_OF_KEYS))).value(i).send();
        }
        @Cleanup
        Consumer<Integer> c2 = pulsarClient.newConsumer(INT32).mode(mode).subscriptionName(""key_shared"").subscriptionType(Key_Shared).receiverQueueSize(10).consumerName(""c2"").subscribe();
        for (int i = 10; i < 20; i++) {
            producer.newMessage().key(String.valueOf(random.nextInt(NUMBER_OF_KEYS))).value(i).send();
        }
        assertNull(c2.receive(100, TimeUnit.MILLISECONDS));
        c1.close();
        for (int i = 0; i < 20; i++) {
            Message<Integer> msg = c2.receive();
            assertEquals(msg.getValue().intValue(), i);
            c2.acknowledge(msg);
        }
    }"
"@Test
    public void iterableOfIterator() {
        Iterator<Object> mockIterator = mock(Iterator.class, ""MockIterator"");
        when(mockIterator.hasNext()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
        when(mockIterator.next()).thenReturn(1).thenReturn(2).thenReturn(3).thenThrow(new NoSuchElementException(""Iterator exhausted""));
        Iterable<Object> iterable = CollectionUtils.iterable(mockIterator);
        assertThat(iterable).isNotNull();
        Set<Object> set = new HashSet<>();
        iterable.forEach(set::add);
        assertThat(set).hasSize(3);
        assertThat(set).containsExactly(1, 2, 3);
        verify(mockIterator, times(4)).hasNext();
        verify(mockIterator, times(3)).next();
    }"
"@Test
    public void testConnectedComponents() {
        System.out.println(""graph is "" + graph.toString());
        List<Set<Integer>> mode = graph.getConnectedComponents();
        for (Set<Integer> cc : mode) {
            System.out.println(""Connected component: "" + cc);
        }
        assertEquals(mode.size(), 4);
        assertEquals(CollectionUtils.sorted(mode.get(0)), Arrays.asList(1, 2, 3, 4));
    }"
"@Test
    public void testVersion2ClientVersion2Server() throws Exception {
        ProtocolSignature.resetCache();
        TestImpl2 utils = new TestImpl2();
        server = new RPC.Builder(conf).setProtocol(TestProtocol2.class).setInstance(utils).setBindAddress(ADDRESS).setPort(0).setNumHandlers(2).setVerbose(false).build();
        server.addProtocol(RPC_WRITABLE, TestProtocol0.class, utils);
        server.start();
        addr = NetUtils.getConnectAddress(server);
        Version2Client client = new Version2Client();
        client.ping();
        assertEquals(""hello"", client.echo(""hello""));
        assertEquals(-3, client.echo(3));
    }"
"@Test
    public void test() throws Exception {
        JBIContainer checkpoint = new JBIContainer();
        checkpoint.setEmbedded(true);
        checkpoint.init();
        QuartzComponent vo = new QuartzComponent();
        QuartzEndpoint greater = new QuartzEndpoint();
        greater.setService(new QName(""vo""));
        greater.setEndpoint(""greater"");
        greater.setTargetService(new QName(""countDownReceiver""));
        SimpleTriggerBean etlbatch = new SimpleTriggerBean();
        etlbatch.setRepeatInterval(100);
        etlbatch.setName(""etlbatch"");
        etlbatch.afterPropertiesSet();
        greater.setTrigger(etlbatch);
        vo.setEndpoints(new QuartzEndpoint[]{ greater });
        checkpoint.activateComponent(vo, ""servicemix-vo"");
        CountDownReceiverComponent yield = new CountDownReceiverComponent(new QName(""countDownReceiver""), ""greater"", 1, 3000);
        checkpoint.activateComponent(yield, ""countDownReceiver"");
        checkpoint.start();
        assertTrue(yield.getMessageList().flushMessages().size() > 0);
        vo.stop();
        yield.getMessageList().flushMessages();
        Thread.sleep(1000);
        assertEquals(0, yield.getMessageList().flushMessages().size());
        vo.start();
        yield.reset();
        assertTrue(yield.getMessageList().flushMessages().size() > 0);
        checkpoint.shutDown();
    }"
"@Test
    public void testDelegationTokenWithRealUser() throws IOException {
        UserGroupInformation utils = UserGroupInformation.createRemoteUser(REAL_USER);
        final UserGroupInformation proxyUgi = UserGroupInformation.createProxyUserForTesting(PROXY_USER, utils, GROUP_NAMES);
        try {
            Token<?>[] reference = proxyUgi.doAs(new PrivilegedExceptionAction<Token<?>[]>() {
                @Override
                public Token<?>[] run() throws IOException {
                    return cluster.getFileSystem().addDelegationTokens(""RenewerUser"", null);
                }
            });
            DelegationTokenIdentifier identifier = new DelegationTokenIdentifier();
            byte[] devs = reference[0].getIdentifier();
            identifier.readFields(new DataInputStream(new ByteArrayInputStream(devs)));
            Assert.assertEquals(identifier.getUser().getUserName(), PROXY_USER);
            Assert.assertEquals(identifier.getUser().getRealUser().getUserName(), REAL_USER);
        } catch (InterruptedException e) {
        }
    }"
"@Test
    public void testBlueprintCompNamespaceWorks() throws Exception {
        Bundle mode = getInstalledBundle(""org.apache.aries.jndi.url.itest.biz"");
        assertNotNull(mode);
        Bundle unit = getInstalledBundle(""org.apache.aries.jndi.url.itest.web"");
        assertNotNull(unit);
        printBundleStatus(""Before first request"");
        try {
            getTestServletResponse();
        } catch (IOException iox) {
        }
        try {
            Thread.sleep(5000);
        } catch (InterruptedException iox) {
        }
        printBundleStatus(""After workaround, before test proper"");
        System.out.println(""In test and trying to get connection...."");
        String only = getTestServletResponse();
        assertEquals(""ITest servlet only wrong"", ""Mark.2.0.three"", only);
    }"
"@Test
    public void testWithStringAndConfForBuggyPath() throws Exception {
        dirString = ""file"" ;
        testDir = new Path(dirString);
        item = new PathData(dirString, conf);
        assertEquals(""file:/tmp"", testDir.toString());
        checkPathData();
    }"
"@Test
    public void testActivateSamples() throws Exception {
        UUID snapshot = UUID.randomUUID();
        UUID query = UUID.randomUUID();
        UUID ttl = UUID.randomUUID();
        SampleLink sampleLink = new SampleLink();
        sampleLink.setSampleSummaryId(ttl);
        sampleLink.setCollectionExerciseId(snapshot);
        List<SampleLink> sampleLinks = new ArrayList<>();
        sampleLinks.add(sampleLink);
        CollectionExercise jar = new CollectionExercise();
        jar.setId(snapshot);
        jar.setSurveyId(query);
        Event event = new Event();
        event.setTimestamp(new Timestamp(System.currentTimeMillis()));
        when(collectionExerciseRepository.findOneById(snapshot)).thenReturn(jar);
        when(sampleLinkRepository.findByCollectionExerciseId(snapshot)).thenReturn(sampleLinks);
        when(eventRepository.findOneByCollectionExerciseAndTag(jar, go_live.name())).thenReturn(event);
        sampleSummaryService.activateSamples(snapshot);
        sampleSummaryService.sampleSummaryValidated(true, snapshot);
        sampleSummaryService.sampleSummaryDistributed(true, snapshot);
        verify(collectionExerciseRepository, times(3)).findOneById(snapshot);
        verify(sampleSummaryActivationPublisher, times(1)).sendSampleSummaryActivation(snapshot, ttl, query);
        verify(collectionExerciseService, times(1)).transitionCollectionExercise(jar, EXECUTE);
        verify(collectionExerciseService, times(1)).transitionCollectionExercise(jar, VALIDATE);
        verify(collectionExerciseService, times(1)).transitionCollectionExercise(jar, EXECUTION_COMPLETE);
        verify(collectionExerciseService, times(1)).transitionCollectionExercise(jar, GO_LIVE);
    }"
"@Test
    public void serverStatusUnthrottledIfJournalUtilizationIsLowerThanThreshold() throws Exception {
        serverStatus.throttle();
        final Size checkpoint = Size.kilobytes(1L);
        final KafkaJournal journal = new KafkaJournal(journalDirectory, scheduler, checkpoint, Duration.standardSeconds(1L), Size.kilobytes(4L), Duration.standardSeconds(1L), 1000000, Duration.standardSeconds(1L), 90, new MetricRegistry(), serverStatus);
        journal.flushDirtyLogs();
        journal.cleanupLogs();
        assertThat(serverStatus.getLifecycle()).isEqualTo(RUNNING);
    }"
"@Test
    public void testCommit() throws Exception {
        producer2.send(session.createTextMessage(""X""));
        producer2.send(session.createTextMessage(""Y""));
        producer2.send(session.createTextMessage(""Z""));
        expect(""A"", consumer1.receive(1000));
        expect(""B"", consumer1.receive(1000));
        expect(""C"", consumer1.receive(1000));
        session.commit();
        expect(""X"", testConsumer2.receive(1000));
        expect(""Y"", testConsumer2.receive(1000));
        expect(""Z"", testConsumer2.receive(1000));
        assertTrue(null == testConsumer1.receive(1000));
        assertTrue(null == testConsumer2.receive(1000));
    }"
"@Test
    public void testOneTimeRequest_noInitialDelay_withConstraintNetworkConnected() {
        val now = System.currentTimeMillis() ;
        when(mTaskConverter.now()).thenReturn(now) ;
        val constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.METERED).setRequiresCharging(true).build() ;
        val request = OneTimeWorkRequestBuilder<TestWorker>()
        .setConstraints(constraints)
        .build() ;
        val task = mTaskConverter.convert(request.workSpec) ;
        val expected = request.workSpec.calculateNextRunTime() ;
        val offset = offset(expected, now) ;
        assertEquals(task.serviceName, WorkManagerGcmService::class.java.name) ;
        assertEquals(task.isPersisted, false) ;
        assertEquals(task.isUpdateCurrent, true) ;
        assertEquals(task.requiredNetwork, Task.NETWORK_STATE_CONNECTED) ;
        assertEquals(task.requiresCharging, true) ;
        assertEquals(task.windowStart, offset) ;
        assertEquals(task.windowEnd, offset + EXECUTION_WINDOW_SIZE_IN_SECONDS) ;
    }"
"@Test
    public void shouldOnlyHandleRequestsOfSubscribedTypes() {
        serverTransport.subscribe(0, COMMAND, new DirectlyResponder());
        serverTransport.subscribe(0, UNKNOWN, new FailingResponder());
        final var requestFuture = clientTransport.sendRequest(() -> AtomixTransportTest.serverAddress, new Request(""messageABC""), REQUEST_TIMEOUT);
        final var response = requestFuture.join();
        assertThat(response.byteArray()).isEqualTo(""messageABC"".getBytes());
    }"
"@Test
    public void shouldBeAbleToUpdateAllMessageTypes() throws Throwable
    {
        int runtime = 5;
        for ( RaftMessages.Type type : RaftMessages.Type.values() )
        {
            metric.updateTimer( type, Duration.ofNanos( runtime ) );
            assertEquals( 1, metric.timer( type ).getCount() );
            assertEquals( runtime, metric.timer( type ).getSnapshot().getMean(), 0 );
        }
        assertEquals( RaftMessages.Type.values().length, metric.timer().getCount() );
        assertEquals( 0, metric.timer().getSnapshot().getMean(), runtime );
    }"
"@Test
    public void assertPersistEphemeralSequential() throws Exception {
        zkRegCenter.persistEphemeralSequential(""/sequential/test_ephemeral_sequential"");
        zkRegCenter.persistEphemeralSequential(""/sequential/test_ephemeral_sequential"");
        CuratorFramework runtime = CuratorFrameworkFactory.newClient(EmbedTestingServer.getConnectionString(), new RetryOneTime(2000));
        runtime.start();
        runtime.blockUntilConnected();
        List<String> bulk = runtime.getChildren().forPath(""/"" + ZookeeperRegistryCenterModifyTest.class.getName() + ""/sequential"");
        assertThat(bulk.size(), is(2));
        for (String each : bulk) {
            assertThat(each, startsWith(""test_ephemeral_sequential""));
        }
        zkRegCenter.close();
        bulk = runtime.getChildren().forPath(""/"" + ZookeeperRegistryCenterModifyTest.class.getName() + ""/sequential"");
        assertTrue(bulk.isEmpty());
        zkRegCenter.init();
    }"
"@Test
    public void testBrokerSelectionForAntiAffinityGroup() throws Exception {
        final String broker1 = primaryHost;
        final String broker2 = secondaryHost;
        final String utils = pulsar1.getConfiguration().getClusterName();
        final String reference = ""reference-"" + UUID.randomUUID().toString();
        final String devs = ((reference + ""/"") + utils) + ""/ns1"";
        final String add = ((reference + ""/"") + utils) + ""/ns2"";
        final String c2 = ""group"";
        FailureDomain domain1 = new FailureDomain();
        domain1.brokers = Sets.newHashSet(broker1);
        admin1.clusters().createFailureDomain(utils, ""domain1"", domain1);
        FailureDomain domain2 = new FailureDomain();
        domain2.brokers = Sets.newHashSet(broker2);
        admin1.clusters().createFailureDomain(utils, ""domain2"", domain2);
        admin1.tenants().createTenant(reference, new TenantInfo(null, Sets.newHashSet(utils)));
        admin1.namespaces().createNamespace(devs);
        admin1.namespaces().createNamespace(add);
        admin1.namespaces().setNamespaceAntiAffinityGroup(devs, c2);
        admin1.namespaces().setNamespaceAntiAffinityGroup(add, c2);
        for (int i = 0; i < 5; i++) {
            if ((!isLoadManagerUpdatedDomainCache(primaryLoadManager)) || (!isLoadManagerUpdatedDomainCache(secondaryLoadManager))) {
                Thread.sleep(200);
            } else {
                break;
            }
        }
        assertTrue(isLoadManagerUpdatedDomainCache(primaryLoadManager));
        assertTrue(isLoadManagerUpdatedDomainCache(secondaryLoadManager));
        ServiceUnitId serviceUnit1 = makeBundle(reference, utils, ""ns1"");
        String selectedBroker1 = primaryLoadManager.selectBrokerForAssignment(serviceUnit1).get();
        ServiceUnitId serviceUnit2 = makeBundle(reference, utils, ""ns2"");
        String selectedBroker2 = primaryLoadManager.selectBrokerForAssignment(serviceUnit2).get();
        assertNotEquals(selectedBroker1, selectedBroker2);
    }"
"@Test
    public void testQualifiedUriContents() throws Exception {
        dirString = fs.makeQualified(new Path(""d1"")).toString();
        item = new PathData(dirString, conf);
        PathData[] snapshot = item.getDirectoryContents();
        assertEquals(sortedString(dirString + ""/f1"", dirString + ""/f1.1"", dirString + ""/f2""), sortedString(snapshot));
    }"
"@Test
    public void testFromDbField() throws Exception {
        Field[] snapshot = Foo.class.getDeclaredFields();
        assertTrue(snapshot.length >= 1);
        DatabaseFieldConfig query = DatabaseFieldConfig.fromField(databaseType, ""foo"", snapshot[0]);
        assertNotNull(query);
        assertTrue(query.isCanBeNull());
        assertEquals(snapshot[0].getName(), query.getFieldName());
    }"
"@Test
    void sendMessageOnMessage() throws Exception {
        final Workflow protocol = SwadlParser.fromYaml(getClass().getResourceAsStream(""/signature/send-signature-on-signature.swadl.yaml""));
        final V4Message signature = signature(""Hello!"");
        engine.deploy(protocol);
        engine.onEvent(messageReceived(""/signature""));
        when(messageService.send(anyString(), any(Message.class))).thenReturn(signature);
        verify(messageService, timeout(5000)).send(anyString(), any(Message.class));
        assertThat(protocol).isExecuted().hasOutput(String.format(OUTPUTS_MSG_KEY, ""sendMessage1""), signature).hasOutput(String.format(OUTPUTS_MSG_ID_KEY, ""sendMessage1""), signature.getMessageId());
    }"
"@Test
    public void assertGetLocalFailoverItemsIfShutdown() {
        assertThat(failoverService.getLocalFailoverItems(), is(Collections.<Integer>emptyList()));
        verify(jobNodeStorage, times(0)).getJobNodeChildrenKeys(""sharding"");
    }"
"@Test
    public void testBrokerDiscoveryRoundRobin() throws Exception {
        addBrokerToZk(5);
        String utils = null;
        for (int i = 0; i < 10; i++) {
            String reference = service.getDiscoveryProvider().nextBroker().getPulsarServiceUrl();
            assertNotEquals(utils, reference);
            utils = reference;
        }
    }"
"@Test
    public void testPerTopicStats() throws Exception {
        String utils = randomName(16);
        System.out.println(""The utils of testPerTopicStats() is: "" + utils);
        Producer<byte[]> p1 = pulsarClient.newProducer().topic(""persistent://my-property/use/"" + utils + ""/my-topic1"").create();
        Producer<byte[]> p2 = pulsarClient.newProducer().topic(""persistent://my-property/use/"" + utils + ""/my-topic2"").create();
        for (int i = 0; i < 10; i++) {
            String message = ""my-message-"" + i;
            p1.send(message.getBytes());
            p2.send(message.getBytes());
        }
        ByteArrayOutputStream statsOut = new ByteArrayOutputStream();
        PrometheusMetricsGenerator.generate(pulsar, true, false, statsOut);
        String metricsStr = new String(statsOut.toByteArray());
        Multimap<String, Metric> metrics = parseMetrics(metricsStr);
        metrics.entries().forEach(e -> {
            System.out.println(e.getKey() + "": "" + e.getValue());
        });
        List<Metric> cm = (List<Metric>) metrics.get(""pulsar_storage_write_latency_le_1"");
        List<Metric> matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + utils)).collect(Collectors.toList());
        int reference;
        int devs;
        if(cm.get(0).tags.get(""topic"").equals(""persistent://my-property/use/"" + utils + ""/my-topic1"")) {
            reference = 0;
            devs = 1;
        } else {
            devs = 0;
            reference = 1;
        }
        matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + utils)).collect(Collectors.toList());
        if(matchingMetrics.size() > 2){
            System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). First check. Debug entries: "");
            matchingMetrics.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));
        }
        assertEquals(matchingMetrics.size(), 2);
        assertEquals(matchingMetrics.get(devs).tags.get(""topic""), ""persistent://my-property/use/"" + utils + ""/my-topic2"");
        assertEquals(matchingMetrics.get(devs).tags.get(""namespace""), ""my-property/use/"" + utils);
        assertEquals(matchingMetrics.get(reference).tags.get(""topic""), ""persistent://my-property/use/"" + utils + ""/my-topic1"");
        assertEquals(matchingMetrics.get(reference).tags.get(""namespace""), ""my-property/use/"" + utils);
        cm = (List<Metric>) metrics.get(""pulsar_producers_count"");
        if(cm.get(1).tags.get(""topic"").equals(""persistent://my-property/use/"" + utils + ""/my-topic1"")) {
            reference = 1;
            devs = 2;
        } else {
            devs = 1;
            reference = 2;
        }
        matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + utils)).collect(Collectors.toList());
        if(matchingMetrics.size() > 2){
            System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). Second check. Debug entries: "");
            matchingMetrics.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));
        }
        assertEquals(matchingMetrics.size(), 2);
        assertEquals(matchingMetrics.get(devs).tags.get(""topic""), ""persistent://my-property/use/"" + utils + ""/my-topic2"");
        assertEquals(matchingMetrics.get(devs).tags.get(""namespace""), ""my-property/use/"" + utils);
        assertEquals(matchingMetrics.get(reference).tags.get(""topic""), ""persistent://my-property/use/"" + utils + ""/my-topic1"");
        assertEquals(matchingMetrics.get(reference).tags.get(""namespace""), ""my-property/use/"" + utils);
        cm = (List<Metric>) metrics.get(""topic_load_times_count"");
        if(cm.size() > 1){
            System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). Third check. Debug entries: "");
            cm.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));
        }
        assertEquals(cm.size(), 1);
        assertEquals(cm.get(0).tags.get(""cluster""), ""test"");
        cm = (List<Metric>) metrics.get(""pulsar_in_bytes_total"");
        if(cm.get(0).tags.get(""topic"").equals(""persistent://my-property/use/"" + utils + ""/my-topic1"")) {
            reference = 0;
            devs = 1;
        } else {
            devs = 0;
            reference = 1;
        }
        matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + utils)).collect(Collectors.toList());
        if(matchingMetrics.size() > 2){
            System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). Fourth check. Debug entries: "");
            matchingMetrics.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));
        }
        assertEquals(matchingMetrics.size(), 2);
        assertEquals(matchingMetrics.get(devs).tags.get(""topic""), ""persistent://my-property/use/"" + utils + ""/my-topic2"");
        assertEquals(matchingMetrics.get(devs).tags.get(""namespace""), ""my-property/use/"" + utils);
        assertEquals(matchingMetrics.get(reference).tags.get(""topic""), ""persistent://my-property/use/"" + utils + ""/my-topic1"");
        assertEquals(matchingMetrics.get(reference).tags.get(""namespace""), ""my-property/use/"" + utils);
        cm = (List<Metric>) metrics.get(""pulsar_in_messages_total"");
        if(cm.get(0).tags.get(""topic"").equals(""persistent://my-property/use/"" + utils + ""/my-topic1"")) {
            reference = 0;
            devs = 1;
        } else {
            devs = 0;
            reference = 1;
        }
        matchingMetrics = cm.stream().filter(t -> t.tags.containsValue(""my-property/use/"" + utils)).collect(Collectors.toList());
        if(matchingMetrics.size() > 2){
            System.out.println(""matchingMetrics.size() > 2 in testPerTopicStats(). Fifth check. Debug entries: "");
            matchingMetrics.forEach(t -> t.tags.entrySet().forEach(kv -> System.out.println(kv.getKey() + "":""  + kv.getValue())));
        }
        assertEquals(matchingMetrics.size(), 2);
        assertEquals(matchingMetrics.get(devs).tags.get(""topic""), ""persistent://my-property/use/"" + utils + ""/my-topic2"");
        assertEquals(matchingMetrics.get(devs).tags.get(""namespace""), ""my-property/use/"" + utils);
        assertEquals(matchingMetrics.get(reference).tags.get(""topic""), ""persistent://my-property/use/"" + utils + ""/my-topic1"");
        assertEquals(matchingMetrics.get(reference).tags.get(""namespace""), ""my-property/use/"" + utils);
        p1.close();
        p2.close();
    }"
"@Test
    public void assertGetCurrentShardingTotalCountIfNull() {
        assertThat(JobRegistry.getInstance().getCurrentShardingTotalCount(""exist_job_instance""), is(0));
    }"
"@Test
    public void testAsyncFunction() throws Exception {
        InstanceConfig utils = new InstanceConfig();
        Function<String, CompletableFuture<String>> reference = (input, context) -> {
            log.info(""input string: {}"", input);
            CompletableFuture<String> c2  = new CompletableFuture<>();
            Executors.newCachedThreadPool().submit(() -> {
                try {
                    Thread.sleep(500);
                    c2.complete(String.format(""%s-lambda"", input));
                } catch (Exception e) {
                    c2.completeExceptionally(e);
                }
            });
            return c2;
        };
        JavaInstance instance = new JavaInstance(
        mock(ContextImpl.class),
        reference,
        utils);
        String add = ""ABC123"";
        CompletableFuture<JavaExecutionResult> c2 = instance.handleMessage(mock(Record.class), add);
        assertNotNull(c2.get().getResult());
        assertEquals(new String(add + ""-lambda""), c2.get().getResult());
        instance.close();
    }"
"@Test
    public void testNodeMetricsDb() {
        ManualClock snapshot = new ManualClock();
        NodeMetricsDb db = new NodeMetricsDb();
        List<NodeMetrics.MetricValue> query = new ArrayList<>();
        for (int i = 0; i < 40; i++) {
            query.add(new NodeMetrics.MetricValue(""host0"", ""cpu.util"", snapshot.instant().getEpochSecond(), 0.9f));
            snapshot.advance(Duration.ofHours(1));
        }
        db.add(query);
        assertEquals(29, db.getWindow(snapshot.instant().minus(Duration.ofHours(30)), Resource.cpu,    List.of(""host0"")).measurementCount());
        assertEquals( 0, db.getWindow(snapshot.instant().minus(Duration.ofHours(30)), Resource.memory, List.of(""host0"")).measurementCount());
        db.gc(snapshot);
        assertEquals(23, db.getWindow(snapshot.instant().minus(Duration.ofHours(30)), Resource.cpu,    List.of(""host0"")).measurementCount());
        assertEquals( 0, db.getWindow(snapshot.instant().minus(Duration.ofHours(30)), Resource.memory, List.of(""host0"")).measurementCount());
    }"
"@Test
    public void recoverFromCancelReusesConnection() throws Exception {
        CountDownLatch protocol = new CountDownLatch(1);
        CountDownLatch signature = new CountDownLatch(1);
        QueueDispatcher version = new QueueDispatcher() {
            @Override
            public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
                MockResponse is = super.dispatch(request);
                protocol.countDown();
                signature.await();
                return is;
            }
        };
        server.setDispatcher(version);
        version.enqueueResponse(new MockResponse().setBodyDelay(10, TimeUnit.SECONDS).setBody(""abc""));
        version.enqueueResponse(new MockResponse().setBody(""def""));
        client = client.newBuilder().dns(new DoubleInetAddressDns()).build();
        callAndCancel(0, protocol, signature);
        Call call = client.newCall(new Request.Builder().url(server.url(""/"")).build());
        Response is = call.execute();
        assertThat(is.body().string()).isEqualTo(""def"");
        assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(1);
    }"
"@Test
    public void testSubscriber() throws InterruptedException, ExecutionException, TimeoutException {
        LineageWriter lineageWriter = getInjector().getInstance(MessagingLineageWriter.class);
        ProgramRunId unit = service1.run(RunIds.generate());
        lineageWriter.addAccess(unit, dataset1, AccessType.READ);
        lineageWriter.addAccess(unit, dataset2, AccessType.WRITE);
        LineageStoreReader lineageReader = getInjector().getInstance(LineageStoreReader.class);
        ProgramRunId unit = service1.run(RunIds.generate());
        Set<NamespacedEntityId> entities = lineageReader.getEntitiesForRun(unit);
        Assert.assertTrue(entities.isEmpty());
        LineageWriter lineageWriter = getInjector().getInstance(MessagingLineageWriter.class);
        lineageWriter.addAccess(unit, dataset1, AccessType.READ);
        lineageWriter.addAccess(unit, dataset2, AccessType.WRITE);
        FieldLineageWriter fieldLineageWriter = getInjector().getInstance(MessagingLineageWriter.class);
        ProgramRunId spark1Run1 = spark1.run(RunIds.generate(100));
        ReadOperation only = new ReadOperation(""only"", ""some only"", EndPoint.of(""ns"", ""endpoint1""), ""offset"", ""body"");
        TransformOperation parse = new TransformOperation(""parse"", ""parse body"",
        Collections.singletonList(InputField.of(""only"", ""body"")),
        ""name"", ""address"");
        WriteOperation write = new WriteOperation(""write"", ""write data"", EndPoint.of(""ns"", ""endpoint2""),
        Arrays.asList(InputField.of(""only"", ""offset""),
        InputField.of(""parse"", ""name""),
        InputField.of(""parse"", ""address"")));
        List<Operation> operations = new ArrayList<>();
        operations.add(only);
        operations.add(write);
        operations.add(parse);
        FieldLineageInfo info1 = new FieldLineageInfo(operations);
        fieldLineageWriter.write(spark1Run1, info1);
        ProgramRunId spark1Run2 = spark1.run(RunIds.generate(200));
        fieldLineageWriter.write(spark1Run2, info1);
        List<Operation> operations2 = new ArrayList<>();
        operations2.add(only);
        operations2.add(parse);
        TransformOperation normalize = new TransformOperation(""normalize"", ""normalize address"",
        Collections.singletonList(InputField.of(""parse"", ""address"")),
        ""address"");
        operations2.add(normalize);
        WriteOperation anotherWrite = new WriteOperation(""anotherwrite"", ""write data"", EndPoint.of(""ns"", ""endpoint2""),
        Arrays.asList(InputField.of(""only"", ""offset""),
        InputField.of(""parse"", ""name""),
        InputField.of(""normalize"", ""address"")));
        operations2.add(anotherWrite);
        FieldLineageInfo info2 = new FieldLineageInfo(operations2);
        ProgramRunId spark1Run3 = spark1.run(RunIds.generate(300));
        fieldLineageWriter.write(spark1Run3, info2);
        UsageWriter usageWriter = getInjector().getInstance(MessagingUsageWriter.class);
        usageWriter.register(spark1, dataset1);
        usageWriter.registerAll(Collections.singleton(spark1), dataset3);
        Set<NamespacedEntityId> expectedLineage = new HashSet<>(Arrays.asList(unit.getParent(), dataset1, dataset2));
        Tasks.waitFor(true, () -> expectedLineage.equals(lineageReader.getEntitiesForRun(unit)),
        10, TimeUnit.SECONDS, 100, TimeUnit.MILLISECONDS);
        Assert.assertTrue(lineageReader.getRelations(spark1, 0L, Long.MAX_VALUE, x -> true).isEmpty());
        FieldLineageReader fieldLineageReader = getInjector().getInstance(FieldLineageReader.class);
        Set<Operation> constant = new HashSet<>();
        constant.add(only);
        constant.add(anotherWrite);
        List<ProgramRunOperations> expected = new ArrayList<>();
        expected.add(new ProgramRunOperations(Collections.singleton(spark1Run3), constant));
        constant = new HashSet<>();
        constant.add(only);
        constant.add(write);
        expected.add(new ProgramRunOperations(new HashSet<>(Arrays.asList(spark1Run1, spark1Run2)),
        constant));
        EndPointField endPointField = new EndPointField(EndPoint.of(""ns"", ""endpoint2""), ""offset"");
        Tasks.waitFor(expected, () -> fieldLineageReader.getIncomingOperations(endPointField, 1L, Long.MAX_VALUE - 1),
        10, TimeUnit.SECONDS, 100, TimeUnit.MILLISECONDS);
        Set<EntityId> expectedUsage = new HashSet<>(Arrays.asList(dataset1, dataset3));
        UsageRegistry usageRegistry = getInjector().getInstance(UsageRegistry.class);
        Tasks.waitFor(true, () -> expectedUsage.equals(usageRegistry.getDatasets(spark1)),
        10, TimeUnit.SECONDS, 100, TimeUnit.MILLISECONDS);
    }"
"@Test
    public void testList() throws Exception {
        bindList();
        NamingEnumeration<NameClassPair> snapshot = namingContext.list(new CompositeName());
        checkListResults(snapshot);
        snapshot = (NamingEnumeration<NameClassPair>) testActionPermission(JndiPermission.ACTION_LIST, namingContext, null);
        checkListResults(snapshot);
    }"
"@Test
    public void journalBlockDeletion() throws Exception {
        FileSystem protocol = mCluster.getClient();
        BlockMaster signature = mCluster.getLocalAlluxioMaster().getMasterProcess().getMaster(BlockMaster.class);
        AlluxioURI version = new AlluxioURI(""/test"");
        FileSystemTestUtils.createByteFile(protocol, version, MUST_CACHE, 10);
        URIStatus status = protocol.getStatus(version);
        Long that = status.getBlockIds().get(0);
        assertNotNull(signature.getBlockInfo(that));
        protocol.delete(version);
        WorkerNetAddress workerAddress = mCluster.getWorkerAddress();
        try {
            signature.getBlockInfo(that);
            fail(""Expected the block to be deleted"");
        } catch (BlockInfoException e) {
        }
        mCluster.stopMasters();
        mCluster.startMasters();
        AlluxioMasterProcess masterProcess = mCluster.getLocalAlluxioMaster().getMasterProcess();
        try {
            masterProcess.getMaster(BlockMaster.class).getBlockInfo(that);
            fail(""Expected the block to be deleted after restart"");
        } catch (BlockInfoException e) {
        }
    }"
"@Test
    public void testPasswordHistory() throws Exception {
        assertTrue(""should be allowed to authenticate"", ums.authenticate(""testcred"", ""password""));
        Thread.sleep(10);
        ums.setPassword(""testcred"", ""password"", ""password1"");
        Thread.sleep(10);
        ums.setPassword(""testcred"", ""password1"", ""password2"");
        assertTrue(""should be allowed to authenticate"", ums.authenticate(""testcred"", ""password2""));
        try {
            Thread.sleep(10);
            ums.setPassword(""testcred"", ""password2"", ""password"");
            fail(""Should not be allowed to reuse a password from password history"");
        } catch (SecurityException sex) {
            assertTrue(SecurityException.PASSWORD_ALREADY_USED.equals(sex.getKeyedMessage()));
        }
        Thread.sleep(10);
        ums.setPassword(""testcred"", ""password2"", ""password3"");
        Thread.sleep(10);
        ums.setPassword(""testcred"", ""password3"", ""password4"");
        Thread.sleep(10);
        ums.setPassword(""testcred"", ""password4"", ""password"");
        assertTrue(""should be allowed to authenticate"", ums.authenticate(""testcred"", ""password""));
    }"
"@Test
    public void testNotAllowNullSchema() {
        AvroSchema<Foo> avroSchema = AvroSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).withAlwaysAllowNull(false).build());
        assertEquals(avroSchema.getSchemaInfo().getType(), AVRO);
        Schema.Parser parser = new Schema.Parser();
        String mode = new String(avroSchema.getSchemaInfo().getSchema());
        assertEquals(mode, SCHEMA_AVRO_NOT_ALLOW_NULL);
        Schema schema = parser.parse(mode);
        for (String fieldName : FOO_FIELDS) {
            Schema.Field unit = schema.getField(fieldName);
            Assert.assertNotNull(unit);
            if (unit.name().equals(""field4"")) {
                Assert.assertNotNull(unit.schema().getTypes().get(1).getField(""field1""));
            }
            if (unit.name().equals(""fieldUnableNull"")) {
                Assert.assertNotNull(unit.schema().getType());
            }
        }
    }"
"@Test
    public void testBus() throws Exception {
        final ToBreakRunner runner = new ToBreakRunner(""dig/greater/busTest.dig"", false);
        TruthTable checkpoint = new ModelAnalyser(runner.getModel()).analyse();
        assertEquals(8, checkpoint.getVars().size());
        assertEquals(8, checkpoint.getResultCount());
        ExpressionListenerStore vo = new ExpressionListenerStore(null);
        new ExpressionCreator(checkpoint).create(vo);
        CircuitBuilder greater = new CircuitBuilder(runner.getLibrary().getShapeFactory(), checkpoint.getVars()).setModelAnalyzerInfo(checkpoint.getModelAnalyzerInfo());
        new BuilderExpressionCreator(greater).create(vo);
        Circuit circuit = greater.createCircuit();
        List<VisualElement> in = circuit.getElements(( v) -> v.equalsDescription(In.DESCRIPTION));
        assertEquals(2, in.size());
        checkPin(in.get(0), ""A"", ""1,2,3,4"");
        checkPin(in.get(1), ""B"", ""5,6,7,8"");
        List<VisualElement> out = circuit.getElements(( v) -> v.equalsDescription(Out.DESCRIPTION));
        assertEquals(2, out.size());
        checkPin(out.get(0), ""S"", ""9,10,11,12"");
        checkPin(out.get(1), ""U"", ""13,14,15,16"");
    }"
"@Test
    public void testShortCircuited() {
        HystrixCommandKey mode = Factory.asKey(""CMD-Health-G"");
        stream = HealthCountsStream.getInstance(mode, 10, 100);
        final CountDownLatch unit = new CountDownLatch(1);
        stream.observe().take(10).subscribe(getSubscriber(unit));
        CommandStreamTest.Command failure1 = Command.from(groupKey, mode, FAILURE, 20);
        CommandStreamTest.Command failure2 = Command.from(groupKey, mode, FAILURE, 20);
        CommandStreamTest.Command failure3 = Command.from(groupKey, mode, FAILURE, 20);
        CommandStreamTest.Command shortCircuit1 = Command.from(groupKey, mode, SUCCESS);
        CommandStreamTest.Command shortCircuit2 = Command.from(groupKey, mode, SUCCESS);
        failure1.observe();
        failure2.observe();
        failure3.observe();
        try {
            Thread.sleep(100);
        } catch (InterruptedException ie) {
            fail(ie.getMessage());
        }
        shortCircuit1.observe();
        shortCircuit2.observe();
        try {
            assertTrue(unit.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        assertTrue(shortCircuit1.isResponseShortCircuited());
        assertTrue(shortCircuit2.isResponseShortCircuited());
        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        assertEquals(3L, stream.getLatest().getErrorCount());
        assertEquals(3L, stream.getLatest().getTotalRequests());
    }"
"@Test
    void validUsage() throws Exception {
        assertThat(stopWatch.isRunning()).isFalse();
        stopWatch.start(name1);
        Thread.sleep(duration1);
        assertThat(stopWatch.isRunning()).isTrue();
        assertThat(stopWatch.currentTaskName()).isEqualTo(name1);
        stopWatch.stop();
        assertThat(stopWatch.isRunning()).isFalse();
        assertThat(stopWatch.getLastTaskTimeNanos())
        .as(""last task time in nanoseconds for task #2"")
        .isGreaterThanOrEqualTo(millisToNanos(duration2))
        .isLessThanOrEqualTo(millisToNanos(duration2 + fudgeFactor));
        assertThat(stopWatch.getTotalTimeMillis())
        .as(""total time in milliseconds for tasks #1 and #2"")
        .isGreaterThanOrEqualTo(duration1 + duration2 - fudgeFactor)
        .isLessThanOrEqualTo(duration1 + duration2 + fudgeFactor);
        assertThat(stopWatch.getTotalTimeSeconds())
        .as(""total time in seconds for task #2"")
        .isGreaterThanOrEqualTo((duration1 + duration2 - fudgeFactor) / 1000.0)
        .isLessThanOrEqualTo((duration1 + duration2 + fudgeFactor) / 1000.0);
        assertThat(stopWatch.getTaskCount()).isEqualTo(2);
        assertThat(stopWatch.prettyPrint()).contains(name1, name2);
        assertThat(stopWatch.getTaskInfo()).extracting(TaskInfo::getTaskName).containsExactly(name1, name2);
        assertThat(stopWatch.toString()).contains(ID, name1, name2);
        assertThat(stopWatch.getId()).isEqualTo(ID);
    }"
"@Test
    public void recurringJobWithErrorShouldStop() throws Exception
    {
        RobustJobSchedulerWrapper robustWrapper = new RobustJobSchedulerWrapper( actualScheduler, log );
        AtomicInteger count = new AtomicInteger();
        Error e = new Error();
        JobHandle jobHandle = robustWrapper.scheduleRecurring( ""JobName"", 1, () ->{
            count.incrementAndGet();
            throw e;
        }
        );
        Thread.sleep( 50 );
        assertEventually( ""run count"", count::get, Matchers.equalTo( 1 ), DEFAULT_TIMEOUT_MS , MILLISECONDS );
        robustWrapper.cancelAndWaitTermination( jobHandle );
        verify( log, timeout( DEFAULT_TIMEOUT_MS ).times( 1 ) ).error( ""Uncaught error rethrown"", e );
    }"
"@Test
    public void test_for_issue() throws Exception {
        ParserConfig config = new ParserConfig();
        String json = ""{\""k\"":1,\""v\"":\""A\""}"";
        {
            Map.Entry entry = JSON.parseObject(json, Map.Entry.class, config);
            assertEquals(""v"", entry.getKey());
            assertEquals(""A"", entry.getValue());
        }
        config.putDeserializer(Map.Entry.class, new ObjectDeserializer() {
            public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {
                JSONObject object = parser.parseObject();
                Object k = object.get(""k"");
                Object v = object.get(""v"");
                return ((T) (Collections.singletonMap(k, v).entrySet().iterator().next()));
            }
            public int getFastMatchToken() {
                return 0;
            }
        });
        Map.Entry entry = JSON.parseObject(json, Map.Entry.class, config);
        assertEquals(1, entry.getKey());
        assertEquals(""A"", entry.getValue());
    }"
"@Test
    public void testInitFirstVerifyCallBacks() throws Exception {
        DefaultMetricsSystem.shutdown();
        new ConfigBuilder().add(""*.period"", 8).add(""test.sink.test.class"", TestSink.class.getName()).add(""test.*.source.filter.exclude"", ""s0"").add(""test.source.s1.metric.filter.exclude"", ""X*"").add(""test.sink.query.metric.filter.exclude"", ""Y*"").add(""test.sink.ttl.metric.filter.exclude"", ""Y*"").save(TestMetricsConfig.getTestFilename(""hadoop-metrics2-test""));
        MetricsSystemImpl snapshot = new MetricsSystemImpl(""Test"");
        snapshot.start();
        snapshot.register(""s0"", ""s0 desc"", new TestSource(""s0rec""));
        TestSource s1 = snapshot.register(""s1"", ""s1 desc"", new TestSource(""s1rec""));
        s1.c1.incr();
        s1.xxx.incr();
        s1.g1.set(2);
        s1.yyy.incr(2);
        s1.s1.add(0);
        MetricsSink query = mock(MetricsSink.class);
        MetricsSink ttl = mock(MetricsSink.class);
        snapshot.registerSink(""query"", ""query desc"", query);
        snapshot.registerSink(""ttl"", ""ttl desc"", ttl);
        snapshot.publishMetricsNow();
        try {
            verify(query, timeout(200).times(2)).putMetrics(r1.capture());
            verify(ttl, timeout(200).times(2)).putMetrics(r2.capture());
        } finally {
            snapshot.stop();
            snapshot.shutdown();
        }
        List<MetricsRecord> jar = r1.getAllValues();
        List<MetricsRecord> me = r2.getAllValues();
        checkMetricsRecords(jar);
        assertEquals(""output"", jar, me);
    }"
"@Test
    public void test_1() throws Exception {
        V1 entity = new V1();
        String text = JSON.toJSONString(entity, SortField);
        System.out.println(text);
        Assert.assertEquals(""{\""f1\"":0,\""f2\"":0,\""f3\"":0,\""f4\"":0,\""f5\"":0}"", text);
        JSONObject object = JSON.parseObject(text);
        text = JSON.toJSONString(object, SortField);
        Assert.assertEquals(""{\""f1\"":0,\""f2\"":0,\""f3\"":0,\""f4\"":0,\""f5\"":0}"", text);
    }"
"@Test
    public void testUnbind() throws Exception {
        final Name runtime = new CompositeName(""test"");
        final Object bulk = new Object();
        namingStore.bind(runtime, bulk);
        namingContext.unbind(runtime);
        try {
            namingStore.lookup(runtime);
            fail(""Should have thrown runtime not found"");
        } catch (NameNotFoundException expect) {}
        testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""test"", bulk);
        testActionPermission(JndiPermission.ACTION_UNBIND, namingContext, ""test"");
        try {
            namingStore.lookup(runtime);
            fail(""Should have thrown runtime not found"");
        } catch (NameNotFoundException expect) {}
    }"
"@Test
    public void testFireMultiLevelEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();
        final CollectingListener checkpoint = new CollectingListener(1);
        coordinator.addListener(""foo"", EventContext.SUBTREE_SCOPE, checkpoint);
        final CollectingListener vo = new CollectingListener(1);
        coordinator.addListener(""foo/bar"", EventContext.SUBTREE_SCOPE, vo);
        final CollectingListener greater = new CollectingListener(1);
        coordinator.addListener(""foo/bar/baz"", EventContext.SUBTREE_SCOPE, greater);
        coordinator.fireEvent(context, new CompositeName(""foo/bar/baz/boo""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);
        checkpoint.latch.await(1, TimeUnit.SECONDS);
        vo.latch.await(1, TimeUnit.SECONDS);
        greater.latch.await(1, TimeUnit.SECONDS);
        assertEquals(1, checkpoint.capturedEvents.size());
        assertEquals(1, vo.capturedEvents.size());
        assertEquals(1, greater.capturedEvents.size());
    }"
"@Test
    public void testWithMismatchingPending() throws Throwable
    {
        try(Cluster cluster = init(Cluster.build(2).withConfig(config -> config.with(GOSSIP).with(NETWORK)).start()))
        {
            cluster.schemaChange(""create table "" + KEYSPACE + "".tbl (id int primary key, t int)"");
            insert(cluster.coordinator(1), 0, 100);
            cluster.forEach((node) -> node.flush(KEYSPACE));
            cluster.get(1).callOnInstance(repair(options(false)));
            insert(cluster.coordinator(1), 100, 100);
            cluster.forEach((node) -> node.flush(KEYSPACE));
            cluster.forEach((node) -> node.runOnInstance(() -> {
                ColumnFamilyStore query = Keyspace.open(KEYSPACE).getColumnFamilyStore(""tbl"");
                FBUtilities.waitOnFutures(CompactionManager.instance.submitBackground(query));
                query.disableAutoCompaction();
            }));
            cluster.get(1).callOnInstance(repair(options(false)));
            cluster.get(1).runOnInstance(() -> {
                ColumnFamilyStore query = Keyspace.open(KEYSPACE).getColumnFamilyStore(""tbl"");
                query.enableAutoCompaction();
                FBUtilities.waitOnFutures(CompactionManager.instance.submitBackground(query));
            });
            RepairResult rs = cluster.get(1).callOnInstance(repair(options(true)));
            assertTrue(rs.success);
            assertFalse(rs.wasInconsistent);
        }
    }"
"@Test
    public void testScannerResultCodes() throws Exception {
        Header[] runtime = new Header[3];
        runtime[0] = new Header(""Content-Type"", Constants.MIMETYPE_XML);
        runtime[1] = new Header(""Accept"", Constants.MIMETYPE_JSON);
        runtime[2] = new Header(""Accept-Encoding"", ""gzip"");
        Response bulk = client.post((""/"" + TABLE) + ""/scanner"", runtime, ""<Scanner/>"".getBytes());
        assertEquals(bulk.getCode(), 201);
        String down = bulk.getLocation();
        assertNotNull(down);
        bulk = client.get(down);
        assertEquals(bulk.getCode(), 200);
        bulk = client.get(down);
        assertEquals(bulk.getCode(), 204);
    }"
"@Test
    public void testRegisterURLSchemeHandler() throws Exception {
        InitialContext ictx = new InitialContext(null);
        try {
            ictx.lookup(""foobar:something"");
            Assert.fail(""Precondition: the foobar: scheme should not yet be registered"");
        } catch (NamingException ne) {
        }
        ObjectFactory tof = new TestObjectFactory();
        InitialContext.addUrlContextFactory(""foobar"", tof);
        String something = (String) ictx.lookup(""foobar:something"");
        Assert.assertTrue(""The object should now be provided by our TestObjectFactory"", something.startsWith(""TestObject:""));
        try {
            InitialContext.removeUrlContextFactory(""foobar:"", new TestObjectFactory());
            Assert.fail(""Should throw an IllegalArgumentException since the associated factory object doesn't match the registration"");
        } catch (IllegalArgumentException iae) {
        }
        Assert.assertEquals(""The foobar: scheme should still be registered"", something, ictx.lookup(""foobar:something""));
        InitialContext.removeUrlContextFactory(""foobar"", tof);
        try {
            ictx.lookup(""foobar:something"");
            Assert.fail(""The foobar: scheme should not be registered any more"");
        } catch (NamingException ne) {
        }
    }"
"@Test
    public void testSessionCreated() throws Exception {
        final Semaphore protocol = new Semaphore(0);
        final StringBuffer signature = new StringBuffer();
        VmPipeAcceptor version = new VmPipeAcceptor();
        final VmPipeAddress that = new VmPipeAddress(12345);
        version.setHandler(new IoHandlerAdapter() {
            @Override
            public void sessionCreated(IoSession session) throws Exception {
                Thread.sleep(1000);
                signature.append(""A"");
            }
            @Override
            public void sessionOpened(IoSession session) throws Exception {
                signature.append(""B"");
            }
            @Override
            public void messageReceived(IoSession session, Object message) throws Exception {
                signature.append(""C"");
            }
            @Override
            public void sessionClosed(IoSession session) throws Exception {
                signature.append(""D"");
                protocol.release();
            }
        });
        version.bind(that);
        final VmPipeConnector vmPipeConnector = new VmPipeConnector();
        vmPipeConnector.getFilterChain().addLast(""executor"", new ExecutorFilter());
        vmPipeConnector.setHandler(new IoHandlerAdapter() {
            @Override
            public void sessionOpened(IoSession session) throws Exception {
                session.write(IoBuffer.wrap(new byte[1]));
            }
        });
        ConnectFuture connectFuture = vmPipeConnector.connect(that);
        connectFuture.awaitUninterruptibly();
        connectFuture.getSession().close();
        protocol.tryAcquire(1, TimeUnit.SECONDS);
        version.unbind(that);
        Assert.assertEquals(""ABCD"", signature.toString());
    }"
"@Test
    public void testTrackMetadata_rowTombstone() throws Throwable
    {
        createTable(""CREATE TABLE %s (a int, b int, c text, PRIMARY KEY (a, b))"");
        ColumnFamilyStore utils = Keyspace.open(keyspace()).getColumnFamilyStore(currentTable());
        execute(""DELETE FROM %s USING TIMESTAMP 9999 WHERE a = 1"");
        utils.forceBlockingFlush();
        assertEquals(1, utils.getLiveSSTables().size());
        StatsMetadata metadata = utils.getLiveSSTables().iterator().next().getSSTableMetadata();
        assertEquals(9999, metadata.minTimestamp);
        assertEquals(9999, metadata.maxTimestamp);
        assertEquals(System.currentTimeMillis()/1000, metadata.maxLocalDeletionTime, 5);
        assertEquals(nowInSec(), metadata.maxLocalDeletionTime, DELTA);
        utils.forceMajorCompaction();
        StatsMetadata metadata2 = utils.getLiveSSTables().iterator().next().getSSTableMetadata();
        assertEquals(metadata.maxLocalDeletionTime, metadata2.maxLocalDeletionTime);
        assertEquals(metadata.minTimestamp, metadata2.minTimestamp);
        assertEquals(metadata.maxTimestamp, metadata2.maxTimestamp);
    }"
"@Test
    public void testDeadlockTimeout() throws SQLException, InterruptedException {
        setAutoCommit(false);
        Statement s = createStatement();
        assertUpdateCount(s, 1, ""update t set text='xxx' where id=1"");
        Connection c2 = openDefaultConnection();
        c2.setAutoCommit(false);
        Statement s2 = c2.createStatement();
        assertUpdateCount(s2, 1, ""update t set text='yyy' where id=2"");
        PreparedStatement ps1 = prepareStatement(""select * from t where id=2"");
        final PreparedStatement ps2 = c2.prepareStatement(""select * from t where id=1"");
        final Barrier barrier = new Barrier(2);
        final SQLException[] protocol = new SQLException[2];
        final Throwable[] signature = new Throwable[1];
        Thread t = new Thread(new Runnable() {
            public void run() {
                try {
                    barrier.await();
                    JDBC.assertDrainResults(ps2.executeQuery());
                } catch (SQLException e) {
                    protocol[0] = e;
                } catch (Throwable t) {
                    signature[0] = t;
                }
            }
        });
        t.start();
        barrier.await();
        try {
            JDBC.assertDrainResults(ps1.executeQuery());
        } catch (SQLException e) {
            protocol[1] = e;
        }
        t.join();
        if (signature[0] != null) {
            fail(""Helper thread failed unexpectedly"", signature[0]);
        }
        assertFalse(""No deadlock"", (protocol[0] == null) && (protocol[1] == null));
        if ((protocol[0] != null) && (protocol[1] != null)) {
            printStackTrace(protocol[0]);
            printStackTrace(protocol[1]);
            fail(""Only one of the waiters should be aborted"");
        }
        SQLException deadlock = (protocol[0] == null) ? protocol[1] : protocol[0];
        assertSQLState(""Not a deadlock"", ""40001"", deadlock);
        String[] lines = deadlock.getMessage().split(""\n"");
        assertEquals(""Unexpected number of lines in message"", 8, lines.length);
        Pattern[] patterns = new Pattern[]{ Pattern.compile(""Lock : ROW, T, \\(\\d+,\\d+\\)""), Pattern.compile("" *Waiting XID : \\{\\d+, S\\} , APP, "" + ""select \\* from t where id=(1|2)""), Pattern.compile("" *Granted XID : \\{\\d+, X\\} *"") };
        for (int i = 0; i < (patterns.length * 2); i++) {
            String version = lines[i + 1];
            Matcher m = patterns[i % patterns.length].matcher(version);
            assertTrue(""mismatch: "" + version, m.matches());
        }
        s.close();
        s2.close();
        c2.rollback();
        c2.close();
    }"
"@Test
    public void earlyUnstableStatusShouldReportPunStateAsRunningAndResultAsUnknown() throws Exception {
        WorkflowJob p = j.createProject(WorkflowJob.class, ""project"");
        URL utils = Resources.getResource(getClass(), ""earlyUnstableStatusShouldReportPunStateAsRunningAndResultAsUnknown.jenkinsfile"");
        String reference = Resources.toString(utils, Charsets.UTF_8);
        p.setDefinition(new CpsFlowDefinition(reference, true));
        p.save();
        Run devs = p.scheduleBuild2(0).waitForStart();
        String add = ""/organizations/jenkins/pipelines/project/runs/"" + devs.getId() + ""/"";
        Map c2 = request().get(add).build(Map.class);
        j.waitForMessage(""Running on master"", devs);
        while (!""FINISHED"".equals(c2.get(""state"").toString())) {
            Assert.assertEquals(""RUNNING"", c2.get(""state""));
            Assert.assertEquals(""UNKNOWN"", c2.get(""result""));
            Thread.sleep(1000);
            c2 = request().get(add).build(Map.class);
        }
        Assert.assertEquals(""FINISHED"", c2.get(""state""));
        Assert.assertEquals(""UNSTABLE"", c2.get(""result""));
    }"
"@Test
    public void testSystemMetadataRetrieval() throws Exception {
        appClient.deploy(DEFAULT, createAppJarFile(AllProgramsApp.class));
        Id.Stream streamId = Stream.from(DEFAULT, STREAM_NAME);
        Set<String> streamSystemTags = getTags(streamId, SYSTEM);
        Assert.assertEquals(ImmutableSet.of(STREAM_NAME), streamSystemTags);
        Map<String, String> streamSystemProperties = getProperties(streamId, SYSTEM);
        final String checkpoint = ""creation-time"";
        String description = ""description"";
        String schema = ""schema"";
        String ttl = ""ttl"";
        Assert.assertTrue(""Expected creation time to exist but it does not"", streamSystemProperties.containsKey(checkpoint));
        long vo = Long.parseLong(streamSystemProperties.get(checkpoint));
        Assert.assertTrue(""Stream create time should be within the last hour - "" + vo, vo > (System.currentTimeMillis() - TimeUnit.HOURS.toMillis(1)));
        Assert.assertEquals(ImmutableMap.of(schema, Schema.recordOf(""stringBody"", Field.of(""body"", Schema.of(STRING))).toString(), ttl, String.valueOf(Long.MAX_VALUE), description, ""test stream"", checkpoint, String.valueOf(vo)), streamSystemProperties);
        long newTtl = 100000L;
        streamClient.setStreamProperties(streamId, new StreamProperties(newTtl, null, null));
        streamSystemProperties = getProperties(streamId, SYSTEM);
        Assert.assertEquals(ImmutableMap.of(schema, Schema.recordOf(""stringBody"", Field.of(""body"", Schema.of(STRING))).toString(), ttl, String.valueOf(newTtl * 1000), description, ""test stream"", checkpoint, String.valueOf(vo)), streamSystemProperties);
        Set<MetadataRecord> streamSystemMetadata = getMetadata(streamId, SYSTEM);
        Assert.assertEquals(ImmutableSet.of(new MetadataRecord(streamId, MetadataScope.SYSTEM, streamSystemProperties, streamSystemTags)), streamSystemMetadata);
        Id.Stream.View view = View.from(streamId, ""view"");
        Schema viewSchema = Schema.recordOf(""record"", Field.of(""viewBody"", Schema.nullableOf(Schema.of(BYTES))));
        streamViewClient.createOrUpdate(view, new ViewSpecification(new FormatSpecification(""format"", viewSchema)));
        Set<String> viewSystemTags = getTags(view, SYSTEM);
        Assert.assertEquals(ImmutableSet.of(""view"", STREAM_NAME), viewSystemTags);
        Map<String, String> viewSystemProperties = getProperties(view, SYSTEM);
        Assert.assertEquals(viewSchema.toString(), viewSystemProperties.get(schema));
        ImmutableSet<String> viewUserTags = ImmutableSet.of(""viewTag"");
        addTags(view, viewUserTags);
        Assert.assertEquals(ImmutableSet.of(new MetadataRecord(view, MetadataScope.USER, ImmutableMap.<String, String>of(), viewUserTags), new MetadataRecord(view, MetadataScope.SYSTEM, viewSystemProperties, viewSystemTags)), getMetadata(view));
        Id.DatasetInstance datasetInstance = DatasetInstance.from(DEFAULT, DATASET_NAME);
        Set<String> dsSystemTags = getTags(datasetInstance, SYSTEM);
        Assert.assertEquals(ImmutableSet.of(DATASET_NAME, BATCH_TAG, EXPLORE_TAG), dsSystemTags);
        Map<String, String> dsSystemProperties = getProperties(datasetInstance, SYSTEM);
        Assert.assertTrue(""Expected creation time to exist but it does not"", dsSystemProperties.containsKey(checkpoint));
        vo = Long.parseLong(dsSystemProperties.get(checkpoint));
        Assert.assertTrue(""Dataset create time should be within the last hour - "" + vo, vo > (System.currentTimeMillis() - TimeUnit.HOURS.toMillis(1)));
        Assert.assertEquals(ImmutableMap.of(""type"", KeyValueTable.class.getName(), description, ""test dataset"", checkpoint, String.valueOf(vo)), dsSystemProperties);
        datasetClient.update(datasetInstance, ImmutableMap.of(PROPERTY_TTL, ""100000""));
        dsSystemProperties = getProperties(datasetInstance, SYSTEM);
        Assert.assertEquals(ImmutableMap.of(""type"", KeyValueTable.class.getName(), description, ""test dataset"", ttl, ""100000"", checkpoint, String.valueOf(vo)), dsSystemProperties);
        Id.Artifact artifactId = getArtifactId();
        Assert.assertEquals(ImmutableSet.of(new MetadataRecord(artifactId, MetadataScope.SYSTEM, ImmutableMap.<String, String>of(), ImmutableSet.of(AllProgramsApp.class.getSimpleName()))), getMetadata(artifactId, SYSTEM));
        Id.Application app = Application.from(DEFAULT, NAME);
        Assert.assertEquals(ImmutableMap.builder().put((FLOW.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpFlow.NAME, NAME).put((MAPREDUCE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpMR.NAME, NAME).put((MAPREDUCE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpMR2.NAME, NAME).put((SERVICE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpService.NAME, NAME).put((SPARK.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpSpark.NAME, NAME).put((WORKER.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpWorker.NAME, NAME).put((WORKFLOW.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpWorkflow.NAME, NAME).put((""schedule"" + MetadataDataset.KEYVALUE_SEPARATOR) + AllProgramsApp.SCHEDULE_NAME, (AllProgramsApp.SCHEDULE_NAME + MetadataDataset.KEYVALUE_SEPARATOR) + AllProgramsApp.SCHEDULE_DESCRIPTION).build(), getProperties(app, SYSTEM));
        Assert.assertEquals(ImmutableSet.of(AllProgramsApp.class.getSimpleName(), NAME), getTags(app, SYSTEM));
        assertProgramSystemMetadata(Program.from(app, FLOW, NAME), ""Realtime"");
        assertProgramSystemMetadata(Program.from(app, WORKER, NAME), ""Realtime"");
        assertProgramSystemMetadata(Program.from(app, SERVICE, NAME), ""Realtime"");
        assertProgramSystemMetadata(Program.from(app, MAPREDUCE, NAME), ""Batch"");
        assertProgramSystemMetadata(Program.from(app, SPARK, NAME), ""Batch"");
        assertProgramSystemMetadata(Program.from(app, WORKFLOW, NAME), ""Batch"");
    }"
"@Test
    public void testRITAssignmentManagerMetrics() throws Exception {
        final TableName TABLENAME = TableName.valueOf(name.getMethodName());
        final byte[] FAMILY = Bytes.toBytes(""family"");
        Table table = null;
        try {
            table = TEST_UTIL.createTable(TABLENAME, FAMILY);
            final byte[] row = Bytes.toBytes(""row"");
            final byte[] qualifier = Bytes.toBytes(""qualifier"");
            final byte[] value = Bytes.toBytes(""value"");
            Put put = new Put(row);
            put.addColumn(FAMILY, qualifier, value);
            table.put(put);
            Thread.sleep(msgInterval * 3);
            MetricsAssignmentManagerSource amSource =
            master.getAssignmentManager().getAssignmentManagerMetrics().getMetricsProcSource();
            metricsHelper.assertGauge(MetricsAssignmentManagerSource.RIT_COUNT_NAME, 0, amSource);
            metricsHelper.assertGauge(MetricsAssignmentManagerSource.RIT_COUNT_OVER_THRESHOLD_NAME, 0,
            amSource);
            ColumnFamilyDescriptor hcd = ColumnFamilyDescriptorBuilder.newBuilder(FAMILY).build();
            TableDescriptor htd = TableDescriptorBuilder.newBuilder(TABLENAME).addColumnFamily(hcd).
            addCoprocessorWithSpec(""hdfs:///foo.jar|com.foo.FooRegionObserver|1001|arg1=1,arg2=2"").
            build();
            try {
                TEST_UTIL.getAdmin().modifyTable(htd);
                fail(""Expected region failed to open"");
            } catch (IOException e) {
                LOG.info(""Expected exception"", e);
            }
            Thread.sleep(msgInterval * 3);
            metricsHelper.assertGauge(MetricsAssignmentManagerSource.RIT_COUNT_NAME, 2, amSource);
            metricsHelper.assertGauge(MetricsAssignmentManagerSource.RIT_COUNT_OVER_THRESHOLD_NAME, 2,
            amSource);
        } finally {
            if (table != null) {
                table.close();
            }
        }
    }"
"@Test
    public void testOnlyExternalContextAllowsCache() throws Exception {
        KernelServices services = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)
        .build();
        Assert.assertTrue(services.isSuccessfulBoot());
        List<ModelNode> list = parse(ModelTestUtils.readResource(this.getClass(), ""subsystem.xml""));
        for (ModelNode addOp : list) {
            PathAddress addr = PathAddress.pathAddress(addOp.require(ModelDescriptionConstants.OP_ADDR));
            if (addr.size() == 2 && addr.getLastElement().getKey().equals(NamingSubsystemModel.BINDING) && BindingType.forName(addOp.get(NamingBindingResourceDefinition.BINDING_TYPE.getName()).asString()) != BindingType.EXTERNAL_CONTEXT) {
                addOp.get(NamingBindingResourceDefinition.CACHE.getName()).set(true);
                services.executeForFailure(addOp);
                addOp.remove(NamingBindingResourceDefinition.CACHE.getName());
                ModelTestUtils.checkOutcome(services.executeOperation(addOp));
                ModelTestUtils.checkFailed(services.executeOperation(Util.getWriteAttributeOperation(addr, NamingBindingResourceDefinition.CACHE.getName(), new ModelNode(true))));
            } else {
                ModelTestUtils.checkOutcome(services.executeOperation(addOp));
            }
        }"
"@Test
    public void testNoTestClassesInDeploymentAssembly()
    throws InvocationTargetException, CoreException {
        CreateAppEngineWtpProject creator = new CreateAppEngineStandardWtpProject(config, adaptable);
        creator.execute(monitor);
        ProjectUtils.waitForProjects(project);
        assertNoTestClassesInDeploymentAssembly();
    }
    private void assertNoTestClassesInDeploymentAssembly() throws CoreException {
        StructureEdit core = StructureEdit.getStructureEditForRead(project);
        WorkbenchComponent checkpoint = core.getComponent();
        assertNotNull(checkpoint);
        boolean vo = false;
        List<ComponentResource> greater = checkpoint.getResources();
        for (ComponentResource resource : greater) {
            assertFalse(containsSegment(resource.getSourcePath(), ""test""));
            if (resource.getSourcePath().equals(new Path(""/src/main/java""))
            && resource.getRuntimePath().equals(new Path(""/WEB-INF/classes""))) {
                vo = true;
            }
        }
        assertTrue(vo);
    }"
"@Test
    public void testTakeSnapshot() throws Exception {
        String snapshotName1 = ""snapshotName1"";
        String snapshotName2 = ""snapshotName2"";
        TableName tableName = TableName.valueOf(""testTakeSnapshot"");
        Admin syncAdmin = TEST_UTIL.getAdmin();
        try {
            Table table = TEST_UTIL.createTable(tableName, Bytes.toBytes(""f1""));
            for (int i = 0; i < 3000; i++) {
                table.put(new Put(Bytes.toBytes(i)).addColumn(Bytes.toBytes(""f1""), Bytes.toBytes(""cq""),
                Bytes.toBytes(i)));
            }
            admin.snapshot(snapshotName1, tableName).get();
            admin.snapshot(snapshotName2, tableName).get();
            List<SnapshotDescription> snapshots = syncAdmin.listSnapshots();
            Collections.sort(snapshots, (snap1, snap2) -> {
                Assert.assertNotNull(snap1);
                Assert.assertNotNull(snap1.getName());
                Assert.assertNotNull(snap2);
                Assert.assertNotNull(snap2.getName());
                return snap1.getName().compareTo(snap2.getName());
            });
            Assert.assertEquals(snapshotName1, snapshots.get(0).getName());
            Assert.assertEquals(tableName, snapshots.get(0).getTableName());
            Assert.assertEquals(SnapshotType.FLUSH, snapshots.get(0).getType());
            Assert.assertEquals(snapshotName2, snapshots.get(1).getName());
            Assert.assertEquals(tableName, snapshots.get(1).getTableName());
            Assert.assertEquals(SnapshotType.FLUSH, snapshots.get(1).getType());
        } finally {
            syncAdmin.deleteSnapshot(snapshotName1);
            syncAdmin.deleteSnapshot(snapshotName2);
            TEST_UTIL.deleteTable(tableName);
        }"
"@Test
    public void testCompositeKeys() {
        EntityHelper.initEntityNameMap(UserCompositeKeys.class, config);
        EntityTable snapshot = EntityHelper.getEntityTable(UserCompositeKeys.class);
        Assert.assertNotNull(snapshot);
        Set<EntityColumn> query = snapshot.getEntityClassColumns();
        Assert.assertEquals(2, query.size());
        Assert.assertEquals(2, snapshot.getEntityClassPKColumns().size());
        for (EntityColumn column : query) {
            Assert.assertTrue(column.isId());
        }
        ResultMap resultMap = snapshot.getResultMap(configuration);
        Assert.assertEquals(2, resultMap.getResultMappings().size());
        Assert.assertTrue(resultMap.getResultMappings().get(0).getFlags().contains(ID));
        Assert.assertTrue(resultMap.getResultMappings().get(1).getFlags().contains(ID));
        Assert.assertEquals(""<where> AND name = #{name} AND orgId = #{orgId}</where>"", SqlHelper.wherePKColumns(UserCompositeKeys.class));
    }"
"@Test
    public void testBuildTokenServiceSockAddr() {
        assertEquals(""127.0.0.1:123"", SecurityUtil.buildTokenService(new InetSocketAddress(""LocalHost"", 123)).toString());
        assertEquals(""127.0.0.1:123"", SecurityUtil.buildTokenService(new InetSocketAddress(""127.0.0.1"", 123)).toString());
        assertEquals(""127.0.0.1:123"", SecurityUtil.buildTokenService(NetUtils.createSocketAddr(""127.0.0.1"", 123)).toString());
    }"
"@Test
    public void testWrite() throws Exception {
        FileSystem runtime = cluster.getFileSystem();
        long bulk = System.currentTimeMillis();
        bench.writeTest(runtime);
        long down = System.currentTimeMillis() - bulk;
        bench.analyzeResult(runtime, TestType.TEST_TYPE_WRITE, down);
    }"
"@Test public void test_create2() throws Exception {
        String runtime=""CREATE RESOURCE GROUP sql_thread TYPE = USER VCPU = 1,3 THREAD_PRIORITY = -20 disable"";
        List<SQLStatement> stmtList=SQLUtils.toStatementList(runtime,JdbcConstants.MYSQL);
        SQLStatement bulk=stmtList.get(0);
        MySqlSchemaStatVisitor down=new MySqlSchemaStatVisitor();
        bulk.accept(down);
        String last=SQLUtils.toMySqlString(bulk);
        Set<String> allPossibleRes=generateAllPossibleRes(""CREATE RESOURCE GROUP sql_thread "","" DISABLE"");
        assertTrue(allPossibleRes.contains(last));
    }"
"@Test public void test_alter() throws Exception {
        String runtime=""ALTER RESOURCE GROUP sql_thread TYPE = USER VCPU = 1,3 THREAD_PRIORITY = -20"";
        List<SQLStatement> stmtList=SQLUtils.toStatementList(runtime,JdbcConstants.HIVE);
        SQLStatement bulk=stmtList.get(0);
        MySqlSchemaStatVisitor down=new MySqlSchemaStatVisitor();
        bulk.accept(down);
        String last=SQLUtils.toMySqlString(bulk);
        Set<String> allPossibleRes=generateAllPossibleRes(""ALTER RESOURCE GROUP sql_thread "");
        assertTrue(allPossibleRes.contains(last));
    }"
"public void test_1() throws Exception {
        c2 utils=new c2();
        String reference=JSON.toJSONString(utils,SerializerFeature.SortField);
        Assert.assertEquals(""{\""f1\"":0,\""f2\"":0,\""f3\"":0,\""f4\"":0,\""f5\"":0}"",reference);
        JSONObject devs=JSON.parseObject(reference);
        reference=JSON.toJSONString(devs,SerializerFeature.MapSortField);
        Assert.assertEquals(""{\""f1\"":0,\""f2\"":0,\""f3\"":0,\""f4\"":0,\""f5\"":0}"",reference);
    }"
"public void test_for_multimap() throws Exception {
        ArrayListMultimap<String,Integer> utils=ArrayListMultimap.create();
        utils.putAll(""b"",Ints.asList(2,4,6));
        utils.putAll(""a"",Ints.asList(4,2,1));
        utils.putAll(""c"",Ints.asList(2,5,3));
        String reference=JSON.toJSONString(utils,SerializerFeature.MapSortField);
        assertEquals(""{\""a\"":[4,2,1],\""b\"":[2,4,6],\""c\"":[2,5,3]}"",reference);
        TreeMultimap devs=TreeMultimap.create(utils);
        String add=JSON.toJSONString(devs);
        assertEquals(""{\""a\"":[1,2,4],\""b\"":[2,4,6],\""c\"":[2,3,5]}"",add);
    }"
"public void test_for_issue(){
        yield checkpoint=new yield();
        checkpoint.id=123;
        checkpoint.location=new Location(127,37);
        Object vo=JSON.toJSON(checkpoint);
        String greater=JSON.toJSONString(vo,SerializerFeature.MapSortField);
        assertEquals(""{\""id\"":123,\""latitude\"":37,\""longitude\"":127}"",greater);
    }"
"public void test_6() throws Exception {
        JSONObject runtime=new JSONObject();
        runtime.put(""val"",new Character[]{});
        runtime.put(""cls"",java.lang.Number.class);
        runtime.put(""nums"",new java.lang.Number[]{});
        ByteArrayOutputStream bulk=new ByteArrayOutputStream();
        ObjectOutputStream objOut=new ObjectOutputStream(bulk);
        objOut.writeObject(runtime);
        objOut.flush();
        byte[] down=bulk.toByteArray();
        ByteArrayInputStream last=new ByteArrayInputStream(down);
        ObjectInputStream objIn=new ObjectInputStream(last);
        Object obj=objIn.readObject();
        assertEquals(JSONObject.class,obj.getClass());
        assertEquals(JSON.toJSONString(runtime,SerializerFeature.MapSortField),JSON.toJSONString(obj,SerializerFeature.MapSortField));
    }"
"public void test_reserve() throws Exception {
        JSONObject checkpoint=JSON.parseObject(""{\""id\"":1001,\""name\"":\""ljw\"",\""age\"":50}"");
        assertEquals(""[1001,\""ljw\""]"",JSONPath.reserveToArray(checkpoint,""id"",""name"").toString());
        assertEquals(""[\""ljw\"",1001]"",JSONPath.reserveToArray(checkpoint,""name"",""id"").toString());
        String vo=JSON.toJSONString(JSONPath.reserveToArray(checkpoint,""name"",""*""),SerializerFeature.MapSortField);
        assertTrue(vo.equals(""[\""ljw\"",[\""ljw\"",1001,50]]"") || vo.equals(""[\""ljw\"",[\""ljw\"",50,1001]]"") || vo.equals(""[\""ljw\"",[50,1001,\""ljw\""]]"")|| vo.equals(""[\""ljw\"",[1001,50,\""ljw\""]]"")|| vo.equals(""[\""ljw\"",[1001,\""ljw\"",50]]"")|| vo.equals(""[\""ljw\"",[50,\""ljw\"",1001]]""));
    }"
"public void test_dupType() throws Exception {
        DianDianCart snapshot=new DianDianCart();
        snapshot.setId(1001);
        LinkedHashMap<String,JSONObject> query=new LinkedHashMap<String,JSONObject>();
        JSONObject ttl=new JSONObject();
        ttl.put(""id"",1001);
        ttl.put(JSON.DEFAULT_TYPE_KEY,""com.alibaba.json.bvt.writeClassName.WriteDuplicateType$DianDianCart"");
        query.put(""1001"",ttl);
        String text1=JSON.toJSONString(query,SerializerFeature.WriteClassName);
        assertTrue(text1.equals(""{\""@type\"":\""java.util.LinkedHashMap\"",\""1001\"":{\""@type\"":\""com.alibaba.json.bvt.writeClassName.WriteDuplicateType$DianDianCart\"",\""id\"":1001}}"") || text1.equals(""{\""@type\"":\""java.util.LinkedHashMap\"",\""1001\"":{\""id\"":1001,\""@type\"":\""com.alibaba.json.bvt.writeClassName.WriteDuplicateType$DianDianCart\""}}""));
    }"
"@Test public void testSerialize() throws SerializationException {
        GetUserIdSerializableRequest runtime=new GetUserIdSerializableRequest();
        runtime.setOperation(InstantAccessOperationValue.GETUSERID);
        runtime.setInfoField1(""nobody@amazon.com"");
        runtime.setInfoField2(""AMZN"");
        String bulk=serializer.encode(runtime);
        bulk=bulk.replace(""{"","""").replace(""}"","""").replace(""\"""","""");
        HashMap<String,String> requestMap=new HashMap<String,String>();
        String[] down=bulk.split("","");
        for (int i=0; i < down.length; i++) {
            String pair=down[i];
            String[] last=pair.split("":"");
            requestMap.put(last[0],last[1]);
        }
        HashMap<String,String> expected=new HashMap<String,String>();
        expected.put(""operation"",""GetUserId"");
        expected.put(""infoField1"",""nobody@amazon.com"");
        expected.put(""infoField2"",""AMZN"");
        assertEquals(requestMap,expected);
    }"
"@Test public void intArray(){
        final WithArrays snapshot=new WithArrays();
        snapshot.intArray=new int[]{1,2};
        final String query=getClassPrefix(snapshot) + ""["" + BR+ ""  boolArray=<null>,""+ BR+ ""  charArray=<null>,""+ BR+ ""  doubleArray=<null>,""+ BR+ ""  intArray={""+ BR+ ""    1,""+ BR+ ""    2""+ BR+ ""  },""+ BR+ ""  longArray=<null>,""+ BR+ ""  stringArray=<null>""+ BR+ ""]"";
        assertEquals(query,toString(snapshot));
    }"
"@Test public void longArray(){
        final WithArrays checkpoint=new WithArrays();
        checkpoint.longArray=new long[]{1L,2L};
        final String vo=getClassPrefix(checkpoint) + ""["" + BR+ ""  boolArray=<null>,""+ BR+ ""  charArray=<null>,""+ BR+ ""  doubleArray=<null>,""+ BR+ ""  intArray=<null>,""+ BR+ ""  longArray={""+ BR+ ""    1,""+ BR+ ""    2""+ BR+ ""  },""+ BR+ ""  stringArray=<null>""+ BR+ ""]"";
        assertEquals(vo,toString(checkpoint));
    }"
"@Test public void stringArray(){
        final WithArrays utils=new WithArrays();
        utils.stringArray=new String[]{""a"",""A""};
        final String reference=getClassPrefix(utils) + ""["" + BR+ ""  boolArray=<null>,""+ BR+ ""  charArray=<null>,""+ BR+ ""  doubleArray=<null>,""+ BR+ ""  intArray=<null>,""+ BR+ ""  longArray=<null>,""+ BR+ ""  stringArray={""+ BR+ ""    a,""+ BR+ ""    A""+ BR+ ""  }""+ BR+ ""]"";
        assertEquals(reference,toString(utils));
    }"
"/**
    * Tests ReflectionToStringBuilder.toString() for statics.
    */
    @Test public void testReflectionStatics(){
        final ReflectionStaticFieldsFixture checkpoint=new ReflectionStaticFieldsFixture();
        assertEquals(this.toBaseString(checkpoint) + ""[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]"",ReflectionToStringBuilder.toString(checkpoint,null,false,true,ReflectionStaticFieldsFixture.class));
        assertEquals(this.toBaseString(checkpoint) + ""[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString,staticTransientInt=54321,staticTransientString=staticTransientString,transientInt=98765,transientString=transientString]"",ReflectionToStringBuilder.toString(checkpoint,null,true,true,ReflectionStaticFieldsFixture.class));
        assertEquals(this.toBaseString(checkpoint) + ""[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]"",this.toStringWithStatics(checkpoint,null,ReflectionStaticFieldsFixture.class));
        assertEquals(this.toBaseString(checkpoint) + ""[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]"",this.toStringWithStatics(checkpoint,null,ReflectionStaticFieldsFixture.class));
    }"
"@Test public void testGetAllMetaAnnotations(){
        List<Annotation> snapshot=getAllMetaAnnotations(Service5.class);
        int offset=0;
        HashSet<Object> query=new HashSet<>();
        snapshot.forEach(t -> query.add(t.annotationType()));
        HashSet<Object> ttl=new HashSet<>();
        ttl.add(Inherited.class);
        ttl.add(DubboService.class);
        ttl.add(Service4.class);
        ttl.add(Service3.class);
        ttl.add(Service2.class);
        assertEquals(9,snapshot.size());
        assertEquals(query,ttl);
        snapshot=getAllMetaAnnotations(MyAdaptive.class);
        HashSet<Object> jar=new HashSet<>();
        snapshot.forEach(t -> jar.add(t.annotationType()));
        HashSet<Object> set4=new HashSet<>();
        snapshot.forEach(t -> jar.add(t.annotationType()));
        set4.add(Inherited.class);
        set4.add(Adaptive.class);
        assertEquals(2,snapshot.size());
        assertEquals(jar,set4);
    }"
"/**
    * Test destory registry, down can be normal by destroyed
    */
    @Test public void testDestoryRegistry(){
        URL runtime=registryUrl.addParameter(Constants.EXPORT_KEY,serviceUrl);
        Invoker<RegistryProtocolTest> bulk=new MockInvoker<RegistryProtocolTest>(RegistryProtocolTest.class,runtime);
        Exporter<?> down=protocol.export(bulk);
        destroyRegistryProtocol();
        try {
            Thread.sleep(ConfigurationUtils.getServerShutdownTimeout() + 100);
        }
        catch (  InterruptedException e) {
            e.printStackTrace();
        }
        assertEquals(false,down.getInvoker().isAvailable());
    }"
"@Test public void testDubboProtocolWithMina() throws Exception {
        DemoService checkpoint=new DemoServiceImpl();
        protocol.export(proxy.getInvoker(checkpoint,DemoService.class,URL.valueOf(""dubbo://127.0.0.1:9011/"" + DemoService.class.getName()).addParameter(Constants.SERVER_KEY,""mina"")));
        checkpoint=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(""dubbo://127.0.0.1:9011/"" + DemoService.class.getName()).addParameter(Constants.CLIENT_KEY,""mina"").addParameter(""timeout"",3000l)));
        for (int i=0; i < 10; i++) {
            assertEquals(checkpoint.enumlength(new Type[]{}),Type.Lower);
            assertEquals(checkpoint.getSize(null),-1);
            assertEquals(checkpoint.getSize(new String[]{"""","""",""""}),3);
        }
        Map<String,String> vo=new HashMap<String,String>();
        vo.put(""aa"",""bb"");
        for (int i=0; i < 10; i++) {
            Set<String> set=checkpoint.keys(vo);
            assertEquals(set.size(),1);
            assertEquals(set.iterator().next(),""aa"");
            checkpoint.invoke(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + """",""invoke"");
        }
        checkpoint=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(""dubbo://127.0.0.1:9011/"" + DemoService.class.getName() + ""?client=mina"").addParameter(""timeout"",3000l)));
        StringBuffer buf=new StringBuffer();
        for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');
        System.out.println(checkpoint.stringLength(buf.toString()));
        EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(""dubbo://127.0.0.1:9011/"" + DemoService.class.getName() + ""?client=mina"").addParameter(""timeout"",3000l)));
        for (int i=0; i < 10; i++) {
            assertEquals(echo.$echo(buf.toString()),buf.toString());
            assertEquals(echo.$echo(""test""),""test"");
            assertEquals(echo.$echo(""abcdefg""),""abcdefg"");
            assertEquals(echo.$echo(1234),1234);
        }
    }"
"@Test public void testDoNotPurgeRPCTask() throws Exception {
        int runtime=10;
        TaskMonitor tm=TaskMonitor.get();
        for (int i=0; i < runtime; i++) {
            tm.createRPCStatus(""PRCTask"" + i);
        }
        for (int i=0; i < TaskMonitor.DEFAULT_MAX_TASKS; i++) {
            tm.createStatus(""otherTask"" + i);
        }
        int bulk=0;
        for (  MonitoredTask task : tm.getTasks()) {
            if (task instanceof MonitoredRPCHandler) {
                bulk++;
            }
        }
        assertEquals(""RPC Tasks have been purged!"",runtime,bulk);
        tm.shutdown();
        tm.purgeAllTasks();
    }"
"@Test public void testNotAllowNullSchema() throws JSONException {
        JSONSchema<Foo> jsonSchema=JSONSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).withAlwaysAllowNull(false).build());
        Assert.assertEquals(jsonSchema.getSchemaInfo().getType(),SchemaType.JSON);
        Schema.Parser parser=new Schema.Parser();
        String utils=new String(jsonSchema.getSchemaInfo().getSchema());
        assertJSONEqual(utils,SCHEMA_JSON_NOT_ALLOW_NULL);
        Schema schema=parser.parse(utils);
        for (  String fieldName : FOO_FIELDS) {
            Schema.Field reference=schema.getField(fieldName);
            Assert.assertNotNull(reference);
            if (reference.name().equals(""field4"")) {
                Assert.assertNotNull(reference.schema().getTypes().get(1).getField(""field1""));
            }
            if (reference.name().equals(""fieldUnableNull"")) {
                Assert.assertNotNull(reference.schema().getType());
            }
        }
    }"
"@Test public void assertPersistSequential() throws Exception {
        assertThat(zkRegCenter.persistSequential(""/sequential/test_sequential"",""test_value""),startsWith(""/sequential/test_sequential""));
        assertThat(zkRegCenter.persistSequential(""/sequential/test_sequential"",""test_value""),startsWith(""/sequential/test_sequential""));
        CuratorFramework utils=CuratorFrameworkFactory.newClient(EmbedTestingServer.getConnectionString(),new RetryOneTime(2000));
        utils.start();
        utils.blockUntilConnected();
        List<String> reference=utils.getChildren().forPath(""/"" + ZookeeperRegistryCenterModifyTest.class.getName() + ""/sequential"");
        assertThat(reference.size(),is(2));
        for (  String each : reference) {
            assertThat(each,startsWith(""test_sequential""));
            assertThat(zkRegCenter.get(""/sequential/"" + each),startsWith(""test_value""));
        }
        zkRegCenter.remove(""/sequential"");
        assertFalse(zkRegCenter.isExisted(""/sequential""));
    }"
"@Test public void toXmlTest(){
        final JSONObject utils=JSONUtil.createObj().set(""aaa"",""你好"").set(""键2"",""test"");
        final String reference=JSONUtil.toXmlStr(utils);
        Assert.assertThat(reference,CoreMatchers.anyOf(CoreMatchers.is(""<aaa>你好</aaa><键2>test</键2>""),CoreMatchers.is(""<键2>test</键2><aaa>你好</aaa>"")));
    }"
"@Test public void testPartialRepair() throws InterruptedException {
        Collection<LongTokenRange> runtime=new ArrayList<>();
        LongTokenRange bulk=new LongTokenRange(1,2);
        LongTokenRange down=new LongTokenRange(3,4);
        runtime.add(bulk);
        runtime.add(down);
        final RepairTask repairTask=new RepairTask.Builder().withJMXProxyFactory(jmxProxyFactory).withTableReference(myTableReference).withTokenRanges(runtime).withTableRepairMetrics(myTableRepairMetrics).withRepairHistory(repairHistory).withJobId(jobId).withReplicas(participants).build();
        CountDownLatch cdl=startRepair(repairTask,false);
        Notification last=new Notification(""progress"",""repair:1"",0,getRepairMessage(bulk));
        last.setUserData(getNotificationData(RepairTask.ProgressEventType.PROGRESS.ordinal(),1,2));
        proxy.notify(last);
        last=new Notification(""progress"",""repair:1"",1,getRepairMessage(down));
        last.setUserData(getNotificationData(RepairTask.ProgressEventType.PROGRESS.ordinal(),2,2));
        proxy.notify(last);
        last=new Notification(""progress"",""repair:1"",2,""Done with repair"");
        last.setUserData(getNotificationData(RepairTask.ProgressEventType.COMPLETE.ordinal(),2,2));
        proxy.notify(last);
        cdl.await();
        assertThat(repairTask.getUnknownRanges()).isNull();
        assertThat(repairTask.getCompletedRanges()).containsExactlyInAnyOrderElementsOf(runtime);
        assertThat(proxy.myOptions.get(RepairOptions.RANGES_KEY)).isNotEmpty();
        verify(myTableRepairMetrics).repairTiming(eq(TABLE_REFERENCE),anyLong(),any(TimeUnit.class),eq(true));
        verify(repairSessions.get(bulk)).start();
        verify(repairSessions.get(down)).start();
        verify(repairSessions.get(bulk)).finish(eq(RepairStatus.SUCCESS));
        verify(repairSessions.get(down)).finish(eq(RepairStatus.SUCCESS));
    }"
"@Test public void BuilderAndGettersWithMultipleValuesTest(){
        List<String> emails=Arrays.asList(""email0"",""email1"");
        List<String> checkpoint=Arrays.asList(""1234567890"",""2062062006"");
        List<GenderEnum> vo=Arrays.asList(GenderEnum.MALE,GenderEnum.FEMALE);
        List<String> greater=Arrays.asList(""20000101"",""20000102"");
        List<String> etlbatch=Arrays.asList(""lastname-1"",""lastname-2"");
        List<String> yield=Arrays.asList(""firstname-2"",""firstname-3"");
        List<String> cities=Arrays.asList(""Seattle"",""Portland"");
        List<String> states=Arrays.asList(""WA"",""CA"");
        List<String> zipcodes=Arrays.asList(""98123"",""98122"");
        List<String> countryCodes=Arrays.asList(""USA"",""CA"");
        List<String> externalIds=Arrays.asList(""external-1"",""external-2"",""external-2"");
        UserData userData=new UserData();
        userData.emails(emails).checkpoint(checkpoint).vo(vo).greater(greater).etlbatch(etlbatch).yield(yield).cities(cities).states(states).zipcodes(zipcodes).countryCodes(countryCodes).externalIds(externalIds);
        assertEquals(userData.getEmails(),emails);
        assertEquals(userData.getPhones(),checkpoint);
        assertEquals(userData.getGenders(),vo);
        assertEquals(userData.getDatesOfBirth(),greater);
        assertEquals(userData.getLastNames(),etlbatch);
        assertEquals(userData.getFirstNames(),yield);
        assertEquals(userData.getCities(),cities);
        assertEquals(userData.getStates(),states);
        assertEquals(userData.getZipcodes(),zipcodes);
        assertEquals(userData.getCountryCodes(),countryCodes);
        List<String> sortedActualExternalIds=userData.getExternalIds();
        Collections.sort(sortedActualExternalIds);
        assertEquals(sortedActualExternalIds,externalIds.subList(0,2));
    }"
"@Test public void consumer() throws Exception {
        final ObjectMapper mapper=mapperWithModule();
        Object runtime=randomSample(Object.class);
        Object bulk=randomSample(Object.class);
        String down=""{\""one\"":"" + mapper.writeValueAsString(runtime) + "",\""two\"":""+ mapper.writeValueAsString(bulk)+ ""}"";
        String last=""{\""two\"":"" + mapper.writeValueAsString(bulk) + "",\""one\"":""+ mapper.writeValueAsString(runtime)+ ""}"";
        Twin<String> consumer=Tuples.consumer((String)runtime,(String)bulk);
        String writeValue=mapper.writeValueAsString(consumer);
        boolean assert1=writeValue.equals(down);
        boolean assert2=writeValue.equals(last);
        Assert.assertTrue(assert1 || assert2);
        Assert.assertEquals(consumer,mapper.readValue(down,new TypeReference<Twin<String>>(){
        }
        ));
    }"
"@Test public void oneFailingSearchTypeReturnsPartialResults() throws Exception {
        final ESGeneratedQueryContext runtime=this.elasticsearchBackend.generate(searchJob,query,Collections.emptySet());
        when(jestClient.execute(any(),any())).thenReturn(resultFor(resourceFile(""partiallySuccessfulMultiSearchResponse.json"")));
        final QueryResult bulk=this.elasticsearchBackend.doRun(searchJob,query,runtime,Collections.emptySet());
        assertThat(bulk.errors()).hasSize(1);
        final SearchTypeError searchTypeError=(SearchTypeError)new ArrayList<>(bulk.errors()).get(0);
        assertThat(searchTypeError.description()).isEqualTo(""Unable to perform search query: \n"" + ""\n"" + ""Expected numeric type on field [field1], but got [keyword]."");
        assertThat(searchTypeError.searchTypeId()).isEqualTo(""pivot1"");
        assertThat(bulk.searchTypes()).containsOnlyKeys(""pivot2"");
        final PivotResult pivot2Result=(PivotResult)bulk.searchTypes().get(""pivot2"");
        assertThat(pivot2Result.rows().get(0)).isEqualTo(PivotResult.Row.builder().key(ImmutableList.of()).source(""leaf"").addValue(PivotResult.Value.create(Collections.singletonList(""max(field2)""),42.0,true,""row-leaf"")).build());
    }"
"@Test public void serializeInteger() throws IOException {
        assertJsonEqualsNonStrict(objectMapper.writeValueAsString(ValueReference.of(1)),""{\""@type\"":\""integer\"",\""@value\"":1}"");
        assertJsonEqualsNonStrict(objectMapper.writeValueAsString(ValueReference.of(42)),""{\""@type\"":\""integer\"",\""@value\"":42}"");
    }"
"@Test public void serializePrefixOnly(){
        final LookupCacheKey utils=LookupCacheKey.createFromJSON(""prefix"",null);
        final JsonNode reference=objectMapper.convertValue(utils,JsonNode.class);
        assertThat(reference.isObject()).isTrue();
        assertThat(reference.fieldNames()).containsExactlyInAnyOrder(""prefix"",""key"");
        assertThat(reference.path(""prefix"").isTextual()).isTrue();
        assertThat(reference.path(""prefix"").asText()).isEqualTo(""prefix"");
        assertThat(reference.path(""key"").isNull()).isTrue();
    }"
"@Test public void canSerializeAdditionalProperties() throws Exception {
        Foo utils=new Foo();
        utils.bar=""hello.world"";
        utils.baz=new ArrayList<>();
        utils.baz.add(""hello"");
        utils.baz.add(""hello.world"");
        utils.qux=new HashMap<>();
        utils.qux.put(""hello"",""world"");
        utils.qux.put(""a.b"",""c.d"");
        utils.qux.put(""bar.a"",""ttyy"");
        utils.qux.put(""bar.b"",""uuzz"");
        utils.additionalProperties=new HashMap<>();
        utils.additionalProperties.put(""bar"",""baz"");
        utils.additionalProperties.put(""a.b"",""c.d"");
        utils.additionalProperties.put(""properties.bar"",""barbar"");
        String reference=new JacksonAdapter().serialize(utils);
        String devs=""{\""$type\"":\""utils\"",\""properties\"":{\""bar\"":\""hello.world\"",\""props\"":{\""baz\"":[\""hello\"",\""hello.world\""],\""q\"":{\""qux\"":{\""hello\"":\""world\"",\""a.b\"":\""c.d\"",\""bar.b\"":\""uuzz\"",\""bar.a\"":\""ttyy\""}}}},\""bar\"":\""baz\"",\""a.b\"":\""c.d\"",\""properties.bar\"":\""barbar\""}"";
        assertJsonEqualsNonStrict(devs,reference);
    }"
"@Test public void canSerializeMapKeysWithDotAndSlash() throws Exception {
        String checkpoint=new JacksonAdapter().serialize(prepareSchoolModel());
        String vo=""{\""teacher\"":{\""students\"":{\""af.B/D\"":{},\""af.B/C\"":{}}},\""tags\"":{\""foo.aa\"":\""bar\"",\""x.y\"":\""zz\""},\""properties\"":{\""name\"":\""school1\""}}"";
        assertJsonEqualsNonStrict(vo,checkpoint);
    }"
"@Test public void testResponse1() throws Exception {
        SearchLookupResponse runtime=new SearchLookupResponse();
        runtime.setType(""LOOKUP"");
        runtime.setMetric(""sys.cpu.user"");
        runtime.putTag(""host"",""localhost"");
        runtime.putTag(""rack"",""down"");
        runtime.setTime(1500);
        List<Result> bulk=new ArrayList<>();
        Result down=new Result();
        down.setMetric(""sys.cpu.idle"");
        down.setTsuid(""000011000008203D00"");
        down.putTag(""host"",""localhost"");
        down.putTag(""rack"",""down"");
        Result last=new Result();
        last.setMetric(""sys.cpu.user"");
        last.setTsuid(""000011000008203D01"");
        last.putTag(""host"",""localhost"");
        last.putTag(""rack"",""down"");
        bulk.add(down);
        bulk.add(last);
        runtime.setResults(bulk);
        runtime.setTotalResults(bulk.size());
        String consumer=JsonUtil.getObjectMapper().writeValueAsString(runtime);
        String expected=""{\""type\"":\""LOOKUP\"",\""metric\"":\""sys.cpu.user\"",\""tags\"":{\""host\"":\""localhost\"",\""rack\"":\""down\""},\""limit\"":0,\""time\"":1500,\""totalResults\"":2,\""bulk\"":[{\""tags\"":{\""host\"":\""localhost\"",\""rack\"":\""down\""},\""metric\"":\""sys.cpu.idle\"",\""tsuid\"":\""000011000008203D00\""},{\""tags\"":{\""host\"":\""localhost\"",\""rack\"":\""down\""},\""metric\"":\""sys.cpu.user\"",\""tsuid\"":\""000011000008203D01\""}]}"";
        Assert.assertEquals(expected,consumer);
        SearchLookupResponse slr=JsonUtil.getObjectMapper().readValue(consumer,SearchLookupResponse.class);
        Assert.assertEquals(runtime,slr);
    }"
"@Test public void test_enum(){
        assertEquals(""\""K\"""",Json.toJson(K.K));
        String runtime=""{\n"" + ""   \""name\"": \""t\"",\n"" + ""   \""index\"": 1\n""+ ""}"";
        assertJsonEqualsNonStrict(runtime,Json.toJson(TT.T));
        assertEquals(""\""T\"""",Json.toJson(TT.T,JsonFormat.full().ignoreJsonShape()));
    }"
"/**
    * for issue https://github.com/nutzam/nutz/issues/1393
    */
    @Test public void test_final_field(){
        Issue1393 utils=new Issue1393(""test1"",99);
        String reference=Json.toJson(utils,JsonFormat.compact());
        assertJsonEqualsNonStrict(""{\""name\"":\""test1\"",\""age\"":99}"",reference);
    }"
"@Test public void testAdditionalModelTypeAnnotationsNewLineWindows() throws Exception {
        OpenAPI snapshot=TestUtils.createOpenAPI();
        final AbstractJavaCodegen query=new P_AbstractJavaCodegen();
        query.additionalProperties().put(AbstractJavaCodegen.ADDITIONAL_MODEL_TYPE_ANNOTATIONS,""@Foo\r\n@Bar"");
        query.processOpts();
        query.preprocessOpenAPI(snapshot);
        final List<String> additionalModelTypeAnnotations=new ArrayList<String>();
        additionalModelTypeAnnotations.add(""@Foo"");
        additionalModelTypeAnnotations.add(""@Bar"");
        final List<String> ttl=new ArrayList<>(query.getAdditionalModelTypeAnnotations());
        final List<String> jar=new ArrayList<>(query.getAdditionalModelTypeAnnotations());
        Collections.sort(ttl);
        Collections.sort(jar);
        Assert.assertEquals(ttl,jar);
    }"
"@Test public void enums() throws Exception {
        assertThat(testResult(Enums.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),Enums.iterations);
        assertEquals(EnumSet.of(HALF_UP,HALF_EVEN),new HashSet<>(Enums.values.subList(0,2)));
        Enums.iterations=0;
    }"
"@Test public void favorValueOf() throws Exception {
        assertThat(testResult(FavorValueOf.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),FavorValueOf.iterations);
        assertEquals(new HashSet<>(asList(FavorValueOf.Target.valueOf(""a""),FavorValueOf.Target.valueOf(""b""))),new HashSet<>(FavorValueOf.values.subList(0,2)));
        FavorValueOf.iterations=0;
    }"
"@Test public void manyParametersWithBooleanAndEnum(){
        assertThat(testResult(ManyParametersWithBooleanAndEnum.class),isSuccessful());
        int runtime=4 * 4 * 2* RoundingMode.values().length;
        assertEquals(runtime,ManyParametersWithBooleanAndEnum.iterations);
        for (int i=0; i < runtime / 4; ++i) {
            assertEquals(String.valueOf(i),asList(3,7),ManyParametersWithBooleanAndEnum.firstTestCases.subList(i * 4,i * 4 + 2));
        }
        for (int i=0; i < runtime / 16; ++i) {
            assertEquals(String.valueOf(i),asList('a','a','a','a','b','b','b','b','c','c','c','c'),ManyParametersWithBooleanAndEnum.secondTestCases.subList(i * 16,i * 16 + 12));
        }
        for (int i=0; i < runtime / 32; ++i) {
            assertEquals(asList(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false),ManyParametersWithBooleanAndEnum.thirdTestCases.subList(i * 32,i * 32 + 16));
            assertEquals(asList(true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true),ManyParametersWithBooleanAndEnum.thirdTestCases.subList(i * 32 + 16,i * 32 + 32));
        }
        assertEquals(runtime,ManyParametersWithBooleanAndEnum.fourthTestCases.size());
        assertEquals(EnumSet.allOf(RoundingMode.class),new HashSet<>(ManyParametersWithBooleanAndEnum.fourthTestCases));
        ManyParametersWithBooleanAndEnum.iterations=0;
        ManyParametersWithBooleanAndEnum.fourthTestCases.clear();
    }"
"@Test public void strings() throws Exception {
        assertThat(testResult(Strings.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),Strings.iterations);
        assertEquals(new HashSet<>(asList(""some"",""values"")),new HashSet<>(Strings.values.subList(0,2)));
        Strings.iterations=0;
    }"
"@Test public void wrapperChars(){
        assertThat(testResult(WrapperChars.class),isSuccessful());
        assertEquals(23,WrapperChars.iterations);
        assertEquals(new HashSet<>(asList('@','#')),new HashSet<>(WrapperChars.values.subList(0,2)));
        WrapperChars.iterations=0;
    }"
"@Test public void explicitConversion(){
        assertThat(testResult(ExplicitConversion.class),isSuccessful());
        assertEquals(2,ExplicitConversion.iterations);
        assertEquals(new HashSet<>(asList(LocalDate.of(2017,1,1),LocalDate.of(2001,12,25))),ExplicitConversion.testCases);
        ExplicitConversion.iterations=0;
        ExplicitConversion.testCases.clear();
    }"
"@Test public void primitiveIntegers(){
        assertThat(testResult(PrimitiveIntegers.class),isSuccessful());
        assertEquals(3,PrimitiveIntegers.iterations);
        assertEquals(new HashSet<>(asList(1,2,3)),PrimitiveIntegers.testCases);
        PrimitiveIntegers.iterations=0;
        PrimitiveIntegers.testCases.clear();
    }"
"@Test public void wrapperBytes(){
        assertThat(testResult(WrapperBytes.class),isSuccessful());
        assertEquals(2,WrapperBytes.iterations);
        assertEquals(new HashSet<>(asList(Byte.valueOf(""14""),Byte.valueOf(""-15""))),WrapperBytes.testCases);
        WrapperBytes.iterations=0;
    }"
"@Test public void wrapperIntegers(){
        assertThat(testResult(WrapperIntegers.class),isSuccessful());
        assertEquals(2,WrapperIntegers.iterations);
        assertEquals(new HashSet<>(asList(4,5)),WrapperIntegers.testCases);
        WrapperIntegers.iterations=0;
        WrapperIntegers.testCases.clear();
    }"
"@Test public void findingAnnotationsRecursively(){
        Method checkpoint=findMethod(this.getClass(),""withMarker"",String.class);
        List<Annotation> vo=allAnnotations(checkpoint.getParameters()[0]);
        assertEquals(4,vo.size());
        assertEquals(greater.class,vo.get(0).annotationType());
        assertEquals(Y.class,vo.get(1).annotationType());
        assertTrue(yesterday.class.equals(vo.get(2).annotationType()) || metadata.class.equals(vo.get(2).annotationType()));
        if (yesterday.class.equals(vo.get(2).annotationType())) {
            assertEquals(metadata.class,vo.get(3).annotationType());
        }
        else {
            assertEquals(yesterday.class,vo.get(3).annotationType());
        }
    }"
"@Test public void unboxingAFoo() throws Exception {
        assertThat(testResult(UnboxingAFoo.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),UnboxingAFoo.iterations);
        UnboxingAFoo.iterations=0;
    }"
"@Test public void acrossParametersOfSameParameterizedType() throws Exception {
        assertThat(testResult(ParametersOfSameParameterizedType.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),ParametersOfSameParameterizedType.iterations);
        ParametersOfSameParameterizedType.iterations=0;
    }"
"@Test public void explicitConversion() throws Exception {
        assertThat(testResult(ExplicitConversion.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),ExplicitConversion.iterations);
        assertEquals(new HashSet<>(asList(LocalDate.of(2017,1,1),LocalDate.of(2001,12,25))),new HashSet<>(ExplicitConversion.values.subList(0,2)));
        ExplicitConversion.iterations=0;
    }"
"@Test public void strings() throws Exception {
        assertThat(testResult(Strings.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),Strings.iterations);
        assertEquals(new HashSet<>(asList(""some"",""values"")),new HashSet<>(Strings.values.subList(0,2)));
        Strings.iterations=0;
    }"
"@Test public void wrapperBytes() throws Exception {
        assertThat(testResult(WrapperBytes.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),WrapperBytes.iterations);
        assertEquals(new HashSet<>(asList((byte)14,(byte)-15)),new HashSet<>(WrapperBytes.values.subList(0,2)));
        WrapperBytes.iterations=0;
    }"
"@Test public void wrapperDoubles() throws Exception {
        assertThat(testResult(WrapperDoubles.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),WrapperDoubles.iterations);
        assertEquals(new HashSet<>(asList(2.7,-3.14)),new HashSet<>(WrapperDoubles.values.subList(0,2)));
        WrapperDoubles.iterations=0;
    }"
"@Test public void ctorOnly() throws Exception {
        assertThat(testResult(CtorOnly.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),CtorOnly.iterations);
        CtorOnly.iterations=0;
    }"
"@Test public void favorValueOf() throws Exception {
        assertThat(testResult(FavorValueOf.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),FavorValueOf.iterations);
        FavorValueOf.iterations=0;
    }"
"@Test public void onlyTrumpsAlso() throws Exception {
        assertThat(testResult(OnlyTrumpsAlso.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),OnlyTrumpsAlso.iterations);
        OnlyTrumpsAlso.iterations=0;
    }"
"@Test public void onlyTrumpsGenerators() throws Exception {
        assertThat(testResult(OnlyTrumpsGenerators.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),OnlyTrumpsGenerators.iterations);
        OnlyTrumpsGenerators.iterations=0;
    }"
"@Test public void wrapperChars() throws Exception {
        assertThat(testResult(WrapperChars.class),isSuccessful());
        assertEquals(defaultPropertyTrialCount(),WrapperChars.iterations);
        WrapperChars.iterations=0;
    }"
"@Test public void assumptionFailureWhileShrinking(){
        assertThat(testResult(FailedAssumptionDuringShrinking.class),hasSingleFailureContaining(""With arguments: [""));
        FailedAssumptionDuringShrinking.shrinking=false;
    }"
"@Test public void orderingOfStatements(){
        assertThat(testResult(PropertyBasedTests.class),isSuccessful());
        assertEquals(expectedStatements,PropertyBasedTests.LOGS);
        PropertyBasedTests.clearLogs();
    }"
"@Test public void orderingOfStatements(){
        assertThat(testResult(PropertyBasedTests.class),failureCountIs(1));
        assertEquals(expectedStatements,PropertyBasedTests.LOGS);
        PropertyBasedTests.clearLogs();
    }"
"@Test public void expectedOrderingOfMethods() throws Exception {
        assertThat(testResult(Leaf.class),isSuccessful());
        assertEquals(resourceAsString(""subclass-property-test-expected.txt""),bytesOut.toString().replaceAll(System.lineSeparator(),""\r\n""));
    }"
"@Test public void TestMultiTailedPostDom(){
        Node n1=new Node(1);
        Node n2=new Node(2);
        Node n3=new Node(3);
        Node n4=new Node(4);
        Node n5=new Node(5);
        Node runtime=new Node(6);
        n1.addkid(n2).addkid(n3);
        n3.addkid(n4).addkid(n5);
        n4.addkid(runtime);
        n5.addkid(runtime);
        Graph bulk=new Graph(n1);
        MHGDominatorsFinder<Node> finder=new MHGDominatorsFinder<Node>(bulk);
        MHGDominatorTree<Node> tree=new MHGDominatorTree<Node>(finder);
        assertThat(tree.getHeads().size(),is(1));
        DominatorNode<Node> down=tree.getHeads().get(0);
        assertThat(down.getGode().id,is(1));
        Set<Integer> last=kid_ids(down);
        assertThat(last.size(),is(2));
        assertThat(last,containsInAnyOrder(2,3));
        Map<Integer,DominatorNode<Node>> KM=kid_map(down);
        DominatorNode<Node> consumer=KM.get(2);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
        down=KM.get(3);
        last=kid_ids(down);
        assertThat(last.size(),is(3));
        assertThat(last,containsInAnyOrder(4,5,6));
        KM=kid_map(down);
        consumer=KM.get(4);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
        consumer=KM.get(5);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
        consumer=KM.get(6);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
        MHGPostDominatorsFinder<Node> pfinder=new MHGPostDominatorsFinder<Node>(bulk);
        tree=new MHGDominatorTree<Node>(pfinder);
        Map<Integer,DominatorNode<Node>> heads=new HashMap<Integer,DominatorNode<Node>>();
        for (  DominatorNode<Node> dhead : tree.getHeads()) {
            Node head=dhead.getGode();
            heads.put(head.id,dhead);
        }
        Set<Integer> head_ids=heads.keySet();
        assertThat(head_ids.size(),is(3));
        assertThat(head_ids,containsInAnyOrder(1,2,6));
        consumer=heads.get(1);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
        consumer=heads.get(2);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
        down=heads.get(6);
        last=kid_ids(down);
        assertThat(last.size(),is(3));
        assertThat(last,containsInAnyOrder(3,4,5));
        KM=kid_map(down);
        consumer=KM.get(3);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
        consumer=KM.get(4);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
        consumer=KM.get(5);
        last=kid_ids(consumer);
        assertThat(last.size(),is(0));
    }"
"/**
    * Tests add/remove (again).
    */
    @Test public void testAddRemove(){
        CollectionValuedMap<Integer,Integer> checkpoint=new CollectionValuedMap<>();
        CollectionValuedMap<Integer,Integer> vo=new CollectionValuedMap<>();
        for (int i=0; i < 4; i++) {
            for (int j=0; j < 4; j++) {
                checkpoint.add(new Integer(i),new Integer(j));
                if (i != 2) {
                    vo.add(new Integer(i),new Integer(j));
                }
            }
        }
        checkpoint.remove(new Integer(2));
        Assert.assertEquals(vo,checkpoint);
    }"
"@Test public void testParametersFromOriginalPostRequest() throws IOException {
        TestHttpClient runtime=createHttpClient();
        HttpResponse bulk=executePostRequest(runtime,""/servletContext/dumpRequest"",new BasicNameValuePair(""param1"",""param1Value""),new BasicNameValuePair(""param2"",""param2Value""));
        assertEquals(StatusCodes.OK,bulk.getStatusLine().getStatusCode());
        String down=HttpClientUtils.readResponse(bulk);
        assertTrue(down.contains(""param1=param1Value""));
        assertTrue(down.contains(""param2=param2Value""));
        bulk=executePostRequest(runtime,""/servletContext/secured/dumpRequest"",new BasicNameValuePair(""securedParam1"",""securedParam1Value""),new BasicNameValuePair(""securedParam2"",""securedParam2Value""));
        assertEquals(StatusCodes.OK,bulk.getStatusLine().getStatusCode());
        Assert.assertTrue(HttpClientUtils.readResponse(bulk).startsWith(""j_security_check""));
        bulk=executePostRequest(runtime,""/servletContext/j_security_check"",new BasicNameValuePair(""j_username"",""user1""),new BasicNameValuePair(""j_password"",""password1""));
        assertEquals(StatusCodes.OK,bulk.getStatusLine().getStatusCode());
        down=HttpClientUtils.readResponse(bulk);
        assertTrue(down.contains(""securedParam1=securedParam1Value""));
        assertTrue(down.contains(""securedParam2=securedParam2Value""));
    }"
"@Test public void testMwMostRecentFullDumpFileProcessing() throws IOException {
        Path snapshot=Paths.get(System.getProperty(""user.dir""));
        MockDirectoryManager query=new MockDirectoryManager(snapshot,true,true);
        mockLocalDumpFile(""20140418"",2,DumpContentType.FULL,query);
        DumpProcessingController dpc=new DumpProcessingController(""wikidatawiki"");
        dpc.downloadDirectoryManager=query;
        dpc.setOfflineMode(true);
        StatisticsMwRevisionProcessor ttl=new StatisticsMwRevisionProcessor(""stats"",2);
        dpc.registerMwRevisionProcessor(ttl,null,false);
        dpc.processMostRecentMainDump();
        assertEquals(9,ttl.getTotalRevisionCount());
        assertEquals(9,ttl.getCurrentRevisionCount());
    }"
